
KalmanFilter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000112c4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005bc  08011568  08011568  00021568  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011b24  08011b24  00021b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   0000000c  08011b2c  08011b2c  00021b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08011b38  08011b38  00021b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f0  24000000  08011b3c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  240001f0  08011d2c  000301f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000250  08011d8c  00030250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005588  240002b0  08011dec  000302b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24005838  08011dec  00035838  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000302b0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000302de  2**0
                  CONTENTS, READONLY
 13 .debug_info   000399cf  00000000  00000000  00030321  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007014  00000000  00000000  00069cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002578  00000000  00000000  00070d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001ce6  00000000  00000000  00073280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00044602  00000000  00000000  00074f66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003406f  00000000  00000000  000b9568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00183729  00000000  00000000  000ed5d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000b020  00000000  00000000  00270d00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0027bd20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002b0 	.word	0x240002b0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801154c 	.word	0x0801154c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002b4 	.word	0x240002b4
 80002dc:	0801154c 	.word	0x0801154c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000690:	4b1e      	ldr	r3, [pc, #120]	; (800070c <MX_ETH_Init+0x80>)
 8000692:	4a1f      	ldr	r2, [pc, #124]	; (8000710 <MX_ETH_Init+0x84>)
 8000694:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000696:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <MX_ETH_Init+0x88>)
 8000698:	2200      	movs	r2, #0
 800069a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800069c:	4b1d      	ldr	r3, [pc, #116]	; (8000714 <MX_ETH_Init+0x88>)
 800069e:	2280      	movs	r2, #128	; 0x80
 80006a0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006a2:	4b1c      	ldr	r3, [pc, #112]	; (8000714 <MX_ETH_Init+0x88>)
 80006a4:	22e1      	movs	r2, #225	; 0xe1
 80006a6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006a8:	4b1a      	ldr	r3, [pc, #104]	; (8000714 <MX_ETH_Init+0x88>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006ae:	4b19      	ldr	r3, [pc, #100]	; (8000714 <MX_ETH_Init+0x88>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006b4:	4b17      	ldr	r3, [pc, #92]	; (8000714 <MX_ETH_Init+0x88>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006ba:	4b14      	ldr	r3, [pc, #80]	; (800070c <MX_ETH_Init+0x80>)
 80006bc:	4a15      	ldr	r2, [pc, #84]	; (8000714 <MX_ETH_Init+0x88>)
 80006be:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006c0:	4b12      	ldr	r3, [pc, #72]	; (800070c <MX_ETH_Init+0x80>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <MX_ETH_Init+0x80>)
 80006c8:	4a13      	ldr	r2, [pc, #76]	; (8000718 <MX_ETH_Init+0x8c>)
 80006ca:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006cc:	4b0f      	ldr	r3, [pc, #60]	; (800070c <MX_ETH_Init+0x80>)
 80006ce:	4a13      	ldr	r2, [pc, #76]	; (800071c <MX_ETH_Init+0x90>)
 80006d0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	; (800070c <MX_ETH_Init+0x80>)
 80006d4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80006d8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006da:	480c      	ldr	r0, [pc, #48]	; (800070c <MX_ETH_Init+0x80>)
 80006dc:	f001 f8a0 	bl	8001820 <HAL_ETH_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80006e6:	f000 fb99 	bl	8000e1c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80006ea:	2238      	movs	r2, #56	; 0x38
 80006ec:	2100      	movs	r1, #0
 80006ee:	480c      	ldr	r0, [pc, #48]	; (8000720 <MX_ETH_Init+0x94>)
 80006f0:	f00f f85f 	bl	800f7b2 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <MX_ETH_Init+0x94>)
 80006f6:	2221      	movs	r2, #33	; 0x21
 80006f8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_ETH_Init+0x94>)
 80006fc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000700:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000702:	4b07      	ldr	r3, [pc, #28]	; (8000720 <MX_ETH_Init+0x94>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	24000304 	.word	0x24000304
 8000710:	40028000 	.word	0x40028000
 8000714:	240003b4 	.word	0x240003b4
 8000718:	24000250 	.word	0x24000250
 800071c:	240001f0 	.word	0x240001f0
 8000720:	240002cc 	.word	0x240002cc

08000724 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08e      	sub	sp, #56	; 0x38
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a59      	ldr	r2, [pc, #356]	; (80008a8 <HAL_ETH_MspInit+0x184>)
 8000742:	4293      	cmp	r3, r2
 8000744:	f040 80ab 	bne.w	800089e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000748:	4b58      	ldr	r3, [pc, #352]	; (80008ac <HAL_ETH_MspInit+0x188>)
 800074a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800074e:	4a57      	ldr	r2, [pc, #348]	; (80008ac <HAL_ETH_MspInit+0x188>)
 8000750:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000754:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000758:	4b54      	ldr	r3, [pc, #336]	; (80008ac <HAL_ETH_MspInit+0x188>)
 800075a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800075e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000762:	623b      	str	r3, [r7, #32]
 8000764:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000766:	4b51      	ldr	r3, [pc, #324]	; (80008ac <HAL_ETH_MspInit+0x188>)
 8000768:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800076c:	4a4f      	ldr	r2, [pc, #316]	; (80008ac <HAL_ETH_MspInit+0x188>)
 800076e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000772:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000776:	4b4d      	ldr	r3, [pc, #308]	; (80008ac <HAL_ETH_MspInit+0x188>)
 8000778:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800077c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000780:	61fb      	str	r3, [r7, #28]
 8000782:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000784:	4b49      	ldr	r3, [pc, #292]	; (80008ac <HAL_ETH_MspInit+0x188>)
 8000786:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800078a:	4a48      	ldr	r2, [pc, #288]	; (80008ac <HAL_ETH_MspInit+0x188>)
 800078c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000790:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000794:	4b45      	ldr	r3, [pc, #276]	; (80008ac <HAL_ETH_MspInit+0x188>)
 8000796:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800079a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800079e:	61bb      	str	r3, [r7, #24]
 80007a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a2:	4b42      	ldr	r3, [pc, #264]	; (80008ac <HAL_ETH_MspInit+0x188>)
 80007a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007a8:	4a40      	ldr	r2, [pc, #256]	; (80008ac <HAL_ETH_MspInit+0x188>)
 80007aa:	f043 0304 	orr.w	r3, r3, #4
 80007ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007b2:	4b3e      	ldr	r3, [pc, #248]	; (80008ac <HAL_ETH_MspInit+0x188>)
 80007b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007b8:	f003 0304 	and.w	r3, r3, #4
 80007bc:	617b      	str	r3, [r7, #20]
 80007be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c0:	4b3a      	ldr	r3, [pc, #232]	; (80008ac <HAL_ETH_MspInit+0x188>)
 80007c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007c6:	4a39      	ldr	r2, [pc, #228]	; (80008ac <HAL_ETH_MspInit+0x188>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007d0:	4b36      	ldr	r3, [pc, #216]	; (80008ac <HAL_ETH_MspInit+0x188>)
 80007d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007de:	4b33      	ldr	r3, [pc, #204]	; (80008ac <HAL_ETH_MspInit+0x188>)
 80007e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007e4:	4a31      	ldr	r2, [pc, #196]	; (80008ac <HAL_ETH_MspInit+0x188>)
 80007e6:	f043 0302 	orr.w	r3, r3, #2
 80007ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007ee:	4b2f      	ldr	r3, [pc, #188]	; (80008ac <HAL_ETH_MspInit+0x188>)
 80007f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f4:	f003 0302 	and.w	r3, r3, #2
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80007fc:	4b2b      	ldr	r3, [pc, #172]	; (80008ac <HAL_ETH_MspInit+0x188>)
 80007fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000802:	4a2a      	ldr	r2, [pc, #168]	; (80008ac <HAL_ETH_MspInit+0x188>)
 8000804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000808:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800080c:	4b27      	ldr	r3, [pc, #156]	; (80008ac <HAL_ETH_MspInit+0x188>)
 800080e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000816:	60bb      	str	r3, [r7, #8]
 8000818:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800081a:	2332      	movs	r3, #50	; 0x32
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081e:	2302      	movs	r3, #2
 8000820:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	2300      	movs	r3, #0
 8000828:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800082a:	230b      	movs	r3, #11
 800082c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800082e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000832:	4619      	mov	r1, r3
 8000834:	481e      	ldr	r0, [pc, #120]	; (80008b0 <HAL_ETH_MspInit+0x18c>)
 8000836:	f001 fc17 	bl	8002068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800083a:	2386      	movs	r3, #134	; 0x86
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083e:	2302      	movs	r3, #2
 8000840:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800084a:	230b      	movs	r3, #11
 800084c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000852:	4619      	mov	r1, r3
 8000854:	4817      	ldr	r0, [pc, #92]	; (80008b4 <HAL_ETH_MspInit+0x190>)
 8000856:	f001 fc07 	bl	8002068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800085a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000860:	2302      	movs	r3, #2
 8000862:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2300      	movs	r3, #0
 800086a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800086c:	230b      	movs	r3, #11
 800086e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000870:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000874:	4619      	mov	r1, r3
 8000876:	4810      	ldr	r0, [pc, #64]	; (80008b8 <HAL_ETH_MspInit+0x194>)
 8000878:	f001 fbf6 	bl	8002068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800087c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	2302      	movs	r3, #2
 8000884:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2300      	movs	r3, #0
 800088c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800088e:	230b      	movs	r3, #11
 8000890:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000892:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000896:	4619      	mov	r1, r3
 8000898:	4808      	ldr	r0, [pc, #32]	; (80008bc <HAL_ETH_MspInit+0x198>)
 800089a:	f001 fbe5 	bl	8002068 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800089e:	bf00      	nop
 80008a0:	3738      	adds	r7, #56	; 0x38
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40028000 	.word	0x40028000
 80008ac:	58024400 	.word	0x58024400
 80008b0:	58020800 	.word	0x58020800
 80008b4:	58020000 	.word	0x58020000
 80008b8:	58020400 	.word	0x58020400
 80008bc:	58021800 	.word	0x58021800

080008c0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80008c4:	4a08      	ldr	r2, [pc, #32]	; (80008e8 <MX_FREERTOS_Init+0x28>)
 80008c6:	2100      	movs	r1, #0
 80008c8:	4808      	ldr	r0, [pc, #32]	; (80008ec <MX_FREERTOS_Init+0x2c>)
 80008ca:	f00a fc9d 	bl	800b208 <osThreadNew>
 80008ce:	4603      	mov	r3, r0
 80008d0:	4a07      	ldr	r2, [pc, #28]	; (80008f0 <MX_FREERTOS_Init+0x30>)
 80008d2:	6013      	str	r3, [r2, #0]

  /* creation of AccMeassure */
  AccMeassureHandle = osThreadNew(StartAccMeassureTask, NULL, &AccMeassure_attributes);
 80008d4:	4a07      	ldr	r2, [pc, #28]	; (80008f4 <MX_FREERTOS_Init+0x34>)
 80008d6:	2100      	movs	r1, #0
 80008d8:	4807      	ldr	r0, [pc, #28]	; (80008f8 <MX_FREERTOS_Init+0x38>)
 80008da:	f00a fc95 	bl	800b208 <osThreadNew>
 80008de:	4603      	mov	r3, r0
 80008e0:	4a06      	ldr	r2, [pc, #24]	; (80008fc <MX_FREERTOS_Init+0x3c>)
 80008e2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	0801166c 	.word	0x0801166c
 80008ec:	08000901 	.word	0x08000901
 80008f0:	24000414 	.word	0x24000414
 80008f4:	08011690 	.word	0x08011690
 80008f8:	08000911 	.word	0x08000911
 80008fc:	24000418 	.word	0x24000418

08000900 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  {
//	roll = MadgwickGetRoll();
//	pitch = MadgwickGetPitch();
//	yaw = MadgwickGetYaw();
	//LOG("1st: %f,	%f,	%f		2nd: %f,	%f,	%f", roll, pitch, yaw, getRoll(), getPitch(), getYaw());
    osDelay(50);
 8000908:	2032      	movs	r0, #50	; 0x32
 800090a:	f00a fd0f 	bl	800b32c <osDelay>
 800090e:	e7fb      	b.n	8000908 <StartDefaultTask+0x8>

08000910 <StartAccMeassureTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAccMeassureTask */
void StartAccMeassureTask(void *argument)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b086      	sub	sp, #24
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAccMeassureTask */
  /* Infinite loop */
	Bmx160_init();
 8000918:	f00d f980 	bl	800dc1c <Bmx160_init>
	LOG("After INIT");
 800091c:	f000 fe50 	bl	80015c0 <HAL_GetTick>
 8000920:	4601      	mov	r1, r0
 8000922:	23a7      	movs	r3, #167	; 0xa7
 8000924:	4a24      	ldr	r2, [pc, #144]	; (80009b8 <StartAccMeassureTask+0xa8>)
 8000926:	4825      	ldr	r0, [pc, #148]	; (80009bc <StartAccMeassureTask+0xac>)
 8000928:	f00e feee 	bl	800f708 <iprintf>
 800092c:	4824      	ldr	r0, [pc, #144]	; (80009c0 <StartAccMeassureTask+0xb0>)
 800092e:	f00e feeb 	bl	800f708 <iprintf>
 8000932:	4824      	ldr	r0, [pc, #144]	; (80009c4 <StartAccMeassureTask+0xb4>)
 8000934:	f00e fee8 	bl	800f708 <iprintf>
	int steps = 1000;
 8000938:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800093c:	617b      	str	r3, [r7, #20]
	float sum_x = 0.0f, sum_y = 0.0f, sum_z = 0.0f;
 800093e:	f04f 0300 	mov.w	r3, #0
 8000942:	613b      	str	r3, [r7, #16]
 8000944:	f04f 0300 	mov.w	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	f04f 0300 	mov.w	r3, #0
 800094e:	60bb      	str	r3, [r7, #8]
//			osDelay(5);
//		}
//		printf("%f %f %f\n\r", (sum_x/((float)(steps))), (sum_y/((float)(steps))), (sum_z/((float)(steps))));
//		sum_x = 0.0f; sum_y = 0.0f; sum_z = 0.0f;
//	}
	Bmx160_getAllData(&Omagn, &Ogyro, &Oaccel);
 8000950:	4a1d      	ldr	r2, [pc, #116]	; (80009c8 <StartAccMeassureTask+0xb8>)
 8000952:	491e      	ldr	r1, [pc, #120]	; (80009cc <StartAccMeassureTask+0xbc>)
 8000954:	481e      	ldr	r0, [pc, #120]	; (80009d0 <StartAccMeassureTask+0xc0>)
 8000956:	f00d fa45 	bl	800dde4 <Bmx160_getAllData>
	SensorData.Acc.x = Oaccel.x;
 800095a:	4b1b      	ldr	r3, [pc, #108]	; (80009c8 <StartAccMeassureTask+0xb8>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a1d      	ldr	r2, [pc, #116]	; (80009d4 <StartAccMeassureTask+0xc4>)
 8000960:	60d3      	str	r3, [r2, #12]
	SensorData.Acc.y = Oaccel.y;
 8000962:	4b19      	ldr	r3, [pc, #100]	; (80009c8 <StartAccMeassureTask+0xb8>)
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	4a1b      	ldr	r2, [pc, #108]	; (80009d4 <StartAccMeassureTask+0xc4>)
 8000968:	6113      	str	r3, [r2, #16]
	SensorData.Acc.z = Oaccel.z;
 800096a:	4b17      	ldr	r3, [pc, #92]	; (80009c8 <StartAccMeassureTask+0xb8>)
 800096c:	689b      	ldr	r3, [r3, #8]
 800096e:	4a19      	ldr	r2, [pc, #100]	; (80009d4 <StartAccMeassureTask+0xc4>)
 8000970:	6153      	str	r3, [r2, #20]
	SensorData.Gyro.x = Ogyro.x;
 8000972:	4b16      	ldr	r3, [pc, #88]	; (80009cc <StartAccMeassureTask+0xbc>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a17      	ldr	r2, [pc, #92]	; (80009d4 <StartAccMeassureTask+0xc4>)
 8000978:	6193      	str	r3, [r2, #24]
	SensorData.Gyro.y = Ogyro.y;
 800097a:	4b14      	ldr	r3, [pc, #80]	; (80009cc <StartAccMeassureTask+0xbc>)
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	4a15      	ldr	r2, [pc, #84]	; (80009d4 <StartAccMeassureTask+0xc4>)
 8000980:	61d3      	str	r3, [r2, #28]
	SensorData.Gyro.z = Ogyro.z;
 8000982:	4b12      	ldr	r3, [pc, #72]	; (80009cc <StartAccMeassureTask+0xbc>)
 8000984:	689b      	ldr	r3, [r3, #8]
 8000986:	4a13      	ldr	r2, [pc, #76]	; (80009d4 <StartAccMeassureTask+0xc4>)
 8000988:	6213      	str	r3, [r2, #32]
	SensorData.Mag.x = Omagn.x;
 800098a:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <StartAccMeassureTask+0xc0>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a11      	ldr	r2, [pc, #68]	; (80009d4 <StartAccMeassureTask+0xc4>)
 8000990:	6013      	str	r3, [r2, #0]
	SensorData.Mag.y = Omagn.y;
 8000992:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <StartAccMeassureTask+0xc0>)
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	4a0f      	ldr	r2, [pc, #60]	; (80009d4 <StartAccMeassureTask+0xc4>)
 8000998:	6053      	str	r3, [r2, #4]
	SensorData.Mag.z = Omagn.z;
 800099a:	4b0d      	ldr	r3, [pc, #52]	; (80009d0 <StartAccMeassureTask+0xc0>)
 800099c:	689b      	ldr	r3, [r3, #8]
 800099e:	4a0d      	ldr	r2, [pc, #52]	; (80009d4 <StartAccMeassureTask+0xc4>)
 80009a0:	6093      	str	r3, [r2, #8]
	SensorData.SensorTime = Omagn.sensortime;
 80009a2:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <StartAccMeassureTask+0xc0>)
 80009a4:	68db      	ldr	r3, [r3, #12]
 80009a6:	4a0b      	ldr	r2, [pc, #44]	; (80009d4 <StartAccMeassureTask+0xc4>)
 80009a8:	6253      	str	r3, [r2, #36]	; 0x24
	//LOG("sensor time: %f, Mag: %f %f %f", SensorData.SensorTime, Omagn.x, Omagn.y, Omagn.z);
	MadgwickUpdate(&SensorData);
 80009aa:	480a      	ldr	r0, [pc, #40]	; (80009d4 <StartAccMeassureTask+0xc4>)
 80009ac:	f007 fa2c 	bl	8007e08 <MadgwickUpdate>
	//printf("%f %f %f\n\r", Omagn.x, Omagn.y, Omagn.z);
	osDelay(1);
 80009b0:	2001      	movs	r0, #1
 80009b2:	f00a fcbb 	bl	800b32c <osDelay>
	Bmx160_getAllData(&Omagn, &Ogyro, &Oaccel);
 80009b6:	e7cb      	b.n	8000950 <StartAccMeassureTask+0x40>
 80009b8:	080116b4 	.word	0x080116b4
 80009bc:	08011580 	.word	0x08011580
 80009c0:	08011590 	.word	0x08011590
 80009c4:	0801159c 	.word	0x0801159c
 80009c8:	240003cc 	.word	0x240003cc
 80009cc:	240003dc 	.word	0x240003dc
 80009d0:	240003bc 	.word	0x240003bc
 80009d4:	240003ec 	.word	0x240003ec

080009d8 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08c      	sub	sp, #48	; 0x30
 80009dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
 80009ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ee:	4b57      	ldr	r3, [pc, #348]	; (8000b4c <MX_GPIO_Init+0x174>)
 80009f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f4:	4a55      	ldr	r2, [pc, #340]	; (8000b4c <MX_GPIO_Init+0x174>)
 80009f6:	f043 0304 	orr.w	r3, r3, #4
 80009fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009fe:	4b53      	ldr	r3, [pc, #332]	; (8000b4c <MX_GPIO_Init+0x174>)
 8000a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a04:	f003 0304 	and.w	r3, r3, #4
 8000a08:	61bb      	str	r3, [r7, #24]
 8000a0a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a0c:	4b4f      	ldr	r3, [pc, #316]	; (8000b4c <MX_GPIO_Init+0x174>)
 8000a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a12:	4a4e      	ldr	r2, [pc, #312]	; (8000b4c <MX_GPIO_Init+0x174>)
 8000a14:	f043 0320 	orr.w	r3, r3, #32
 8000a18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a1c:	4b4b      	ldr	r3, [pc, #300]	; (8000b4c <MX_GPIO_Init+0x174>)
 8000a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a22:	f003 0320 	and.w	r3, r3, #32
 8000a26:	617b      	str	r3, [r7, #20]
 8000a28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a2a:	4b48      	ldr	r3, [pc, #288]	; (8000b4c <MX_GPIO_Init+0x174>)
 8000a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a30:	4a46      	ldr	r2, [pc, #280]	; (8000b4c <MX_GPIO_Init+0x174>)
 8000a32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a3a:	4b44      	ldr	r3, [pc, #272]	; (8000b4c <MX_GPIO_Init+0x174>)
 8000a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a44:	613b      	str	r3, [r7, #16]
 8000a46:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a48:	4b40      	ldr	r3, [pc, #256]	; (8000b4c <MX_GPIO_Init+0x174>)
 8000a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a4e:	4a3f      	ldr	r2, [pc, #252]	; (8000b4c <MX_GPIO_Init+0x174>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a58:	4b3c      	ldr	r3, [pc, #240]	; (8000b4c <MX_GPIO_Init+0x174>)
 8000a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a66:	4b39      	ldr	r3, [pc, #228]	; (8000b4c <MX_GPIO_Init+0x174>)
 8000a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a6c:	4a37      	ldr	r2, [pc, #220]	; (8000b4c <MX_GPIO_Init+0x174>)
 8000a6e:	f043 0302 	orr.w	r3, r3, #2
 8000a72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a76:	4b35      	ldr	r3, [pc, #212]	; (8000b4c <MX_GPIO_Init+0x174>)
 8000a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a7c:	f003 0302 	and.w	r3, r3, #2
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a84:	4b31      	ldr	r3, [pc, #196]	; (8000b4c <MX_GPIO_Init+0x174>)
 8000a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a8a:	4a30      	ldr	r2, [pc, #192]	; (8000b4c <MX_GPIO_Init+0x174>)
 8000a8c:	f043 0308 	orr.w	r3, r3, #8
 8000a90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a94:	4b2d      	ldr	r3, [pc, #180]	; (8000b4c <MX_GPIO_Init+0x174>)
 8000a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a9a:	f003 0308 	and.w	r3, r3, #8
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aa2:	4b2a      	ldr	r3, [pc, #168]	; (8000b4c <MX_GPIO_Init+0x174>)
 8000aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa8:	4a28      	ldr	r2, [pc, #160]	; (8000b4c <MX_GPIO_Init+0x174>)
 8000aaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ab2:	4b26      	ldr	r3, [pc, #152]	; (8000b4c <MX_GPIO_Init+0x174>)
 8000ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000abc:	603b      	str	r3, [r7, #0]
 8000abe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, USR_LED3_Pin|USR_LED2_Pin, GPIO_PIN_RESET);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000ac6:	4822      	ldr	r0, [pc, #136]	; (8000b50 <MX_GPIO_Init+0x178>)
 8000ac8:	f001 fc7e 	bl	80023c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	2140      	movs	r1, #64	; 0x40
 8000ad0:	4820      	ldr	r0, [pc, #128]	; (8000b54 <MX_GPIO_Init+0x17c>)
 8000ad2:	f001 fc79 	bl	80023c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UserButton_Pin;
 8000ad6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ada:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000adc:	2300      	movs	r3, #0
 8000ade:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UserButton_GPIO_Port, &GPIO_InitStruct);
 8000ae4:	f107 031c 	add.w	r3, r7, #28
 8000ae8:	4619      	mov	r1, r3
 8000aea:	481b      	ldr	r0, [pc, #108]	; (8000b58 <MX_GPIO_Init+0x180>)
 8000aec:	f001 fabc 	bl	8002068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = USR_LED3_Pin|USR_LED2_Pin;
 8000af0:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000af4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af6:	2301      	movs	r3, #1
 8000af8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afe:	2300      	movs	r3, #0
 8000b00:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b02:	f107 031c 	add.w	r3, r7, #28
 8000b06:	4619      	mov	r1, r3
 8000b08:	4811      	ldr	r0, [pc, #68]	; (8000b50 <MX_GPIO_Init+0x178>)
 8000b0a:	f001 faad 	bl	8002068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b0e:	2340      	movs	r3, #64	; 0x40
 8000b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b12:	2301      	movs	r3, #1
 8000b14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b1e:	f107 031c 	add.w	r3, r7, #28
 8000b22:	4619      	mov	r1, r3
 8000b24:	480b      	ldr	r0, [pc, #44]	; (8000b54 <MX_GPIO_Init+0x17c>)
 8000b26:	f001 fa9f 	bl	8002068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b2a:	2380      	movs	r3, #128	; 0x80
 8000b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b36:	f107 031c 	add.w	r3, r7, #28
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4805      	ldr	r0, [pc, #20]	; (8000b54 <MX_GPIO_Init+0x17c>)
 8000b3e:	f001 fa93 	bl	8002068 <HAL_GPIO_Init>

}
 8000b42:	bf00      	nop
 8000b44:	3730      	adds	r7, #48	; 0x30
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	58024400 	.word	0x58024400
 8000b50:	58020400 	.word	0x58020400
 8000b54:	58021800 	.word	0x58021800
 8000b58:	58020800 	.word	0x58020800

08000b5c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b60:	4b1c      	ldr	r3, [pc, #112]	; (8000bd4 <MX_I2C2_Init+0x78>)
 8000b62:	4a1d      	ldr	r2, [pc, #116]	; (8000bd8 <MX_I2C2_Init+0x7c>)
 8000b64:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0040163A;
 8000b66:	4b1b      	ldr	r3, [pc, #108]	; (8000bd4 <MX_I2C2_Init+0x78>)
 8000b68:	4a1c      	ldr	r2, [pc, #112]	; (8000bdc <MX_I2C2_Init+0x80>)
 8000b6a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b6c:	4b19      	ldr	r3, [pc, #100]	; (8000bd4 <MX_I2C2_Init+0x78>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b72:	4b18      	ldr	r3, [pc, #96]	; (8000bd4 <MX_I2C2_Init+0x78>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b78:	4b16      	ldr	r3, [pc, #88]	; (8000bd4 <MX_I2C2_Init+0x78>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b7e:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <MX_I2C2_Init+0x78>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b84:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <MX_I2C2_Init+0x78>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b8a:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <MX_I2C2_Init+0x78>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b90:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <MX_I2C2_Init+0x78>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b96:	480f      	ldr	r0, [pc, #60]	; (8000bd4 <MX_I2C2_Init+0x78>)
 8000b98:	f001 fc30 	bl	80023fc <HAL_I2C_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000ba2:	f000 f93b 	bl	8000e1c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	480a      	ldr	r0, [pc, #40]	; (8000bd4 <MX_I2C2_Init+0x78>)
 8000baa:	f002 f933 	bl	8002e14 <HAL_I2CEx_ConfigAnalogFilter>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000bb4:	f000 f932 	bl	8000e1c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4806      	ldr	r0, [pc, #24]	; (8000bd4 <MX_I2C2_Init+0x78>)
 8000bbc:	f002 f975 	bl	8002eaa <HAL_I2CEx_ConfigDigitalFilter>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000bc6:	f000 f929 	bl	8000e1c <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C2);
 8000bca:	2002      	movs	r0, #2
 8000bcc:	f002 f9ba 	bl	8002f44 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	2400041c 	.word	0x2400041c
 8000bd8:	40005800 	.word	0x40005800
 8000bdc:	0040163a 	.word	0x0040163a

08000be0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b0ba      	sub	sp, #232	; 0xe8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bf8:	f107 0310 	add.w	r3, r7, #16
 8000bfc:	22c0      	movs	r2, #192	; 0xc0
 8000bfe:	2100      	movs	r1, #0
 8000c00:	4618      	mov	r0, r3
 8000c02:	f00e fdd6 	bl	800f7b2 <memset>
  if(i2cHandle->Instance==I2C2)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a26      	ldr	r2, [pc, #152]	; (8000ca4 <HAL_I2C_MspInit+0xc4>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d145      	bne.n	8000c9c <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000c10:	f04f 0208 	mov.w	r2, #8
 8000c14:	f04f 0300 	mov.w	r3, #0
 8000c18:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c22:	f107 0310 	add.w	r3, r7, #16
 8000c26:	4618      	mov	r0, r3
 8000c28:	f003 fb6a 	bl	8004300 <HAL_RCCEx_PeriphCLKConfig>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000c32:	f000 f8f3 	bl	8000e1c <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c36:	4b1c      	ldr	r3, [pc, #112]	; (8000ca8 <HAL_I2C_MspInit+0xc8>)
 8000c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3c:	4a1a      	ldr	r2, [pc, #104]	; (8000ca8 <HAL_I2C_MspInit+0xc8>)
 8000c3e:	f043 0320 	orr.w	r3, r3, #32
 8000c42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c46:	4b18      	ldr	r3, [pc, #96]	; (8000ca8 <HAL_I2C_MspInit+0xc8>)
 8000c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4c:	f003 0320 	and.w	r3, r3, #32
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c54:	2303      	movs	r3, #3
 8000c56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c5a:	2312      	movs	r3, #18
 8000c5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c66:	2300      	movs	r3, #0
 8000c68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c72:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000c76:	4619      	mov	r1, r3
 8000c78:	480c      	ldr	r0, [pc, #48]	; (8000cac <HAL_I2C_MspInit+0xcc>)
 8000c7a:	f001 f9f5 	bl	8002068 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <HAL_I2C_MspInit+0xc8>)
 8000c80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c84:	4a08      	ldr	r2, [pc, #32]	; (8000ca8 <HAL_I2C_MspInit+0xc8>)
 8000c86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c8a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c8e:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <HAL_I2C_MspInit+0xc8>)
 8000c90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000c9c:	bf00      	nop
 8000c9e:	37e8      	adds	r7, #232	; 0xe8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40005800 	.word	0x40005800
 8000ca8:	58024400 	.word	0x58024400
 8000cac:	58021400 	.word	0x58021400

08000cb0 <__io_putchar>:
#include "usart.h"

#ifdef DEBUG

PUTCHAR_PROTOTYPE
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000cb8:	1d39      	adds	r1, r7, #4
 8000cba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	4803      	ldr	r0, [pc, #12]	; (8000cd0 <__io_putchar+0x20>)
 8000cc2:	f005 fc73 	bl	80065ac <HAL_UART_Transmit>

  return ch;
 8000cc6:	687b      	ldr	r3, [r7, #4]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	240004c0 	.word	0x240004c0

08000cd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cd8:	f000 fc22 	bl	8001520 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cdc:	f000 f812 	bl	8000d04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ce0:	f7ff fe7a 	bl	80009d8 <MX_GPIO_Init>
  MX_ETH_Init();
 8000ce4:	f7ff fcd2 	bl	800068c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000ce8:	f000 fa8a 	bl	8001200 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000cec:	f000 fb40 	bl	8001370 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 8000cf0:	f7ff ff34 	bl	8000b5c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000cf4:	f00a fa3e 	bl	800b174 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000cf8:	f7ff fde2 	bl	80008c0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000cfc:	f00a fa5e 	bl	800b1bc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <main+0x2c>
	...

08000d04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b09c      	sub	sp, #112	; 0x70
 8000d08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0e:	224c      	movs	r2, #76	; 0x4c
 8000d10:	2100      	movs	r1, #0
 8000d12:	4618      	mov	r0, r3
 8000d14:	f00e fd4d 	bl	800f7b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d18:	1d3b      	adds	r3, r7, #4
 8000d1a:	2220      	movs	r2, #32
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f00e fd47 	bl	800f7b2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d24:	2002      	movs	r0, #2
 8000d26:	f002 fa79 	bl	800321c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	603b      	str	r3, [r7, #0]
 8000d2e:	4b30      	ldr	r3, [pc, #192]	; (8000df0 <SystemClock_Config+0xec>)
 8000d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d32:	4a2f      	ldr	r2, [pc, #188]	; (8000df0 <SystemClock_Config+0xec>)
 8000d34:	f023 0301 	bic.w	r3, r3, #1
 8000d38:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000d3a:	4b2d      	ldr	r3, [pc, #180]	; (8000df0 <SystemClock_Config+0xec>)
 8000d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	603b      	str	r3, [r7, #0]
 8000d44:	4b2b      	ldr	r3, [pc, #172]	; (8000df4 <SystemClock_Config+0xf0>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	4a2a      	ldr	r2, [pc, #168]	; (8000df4 <SystemClock_Config+0xf0>)
 8000d4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d4e:	6193      	str	r3, [r2, #24]
 8000d50:	4b28      	ldr	r3, [pc, #160]	; (8000df4 <SystemClock_Config+0xf0>)
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d58:	603b      	str	r3, [r7, #0]
 8000d5a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d5c:	bf00      	nop
 8000d5e:	4b25      	ldr	r3, [pc, #148]	; (8000df4 <SystemClock_Config+0xf0>)
 8000d60:	699b      	ldr	r3, [r3, #24]
 8000d62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d6a:	d1f8      	bne.n	8000d5e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d70:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000d74:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d76:	2302      	movs	r3, #2
 8000d78:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000d82:	2318      	movs	r3, #24
 8000d84:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d86:	2302      	movs	r3, #2
 8000d88:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d8a:	2304      	movs	r3, #4
 8000d8c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d92:	230c      	movs	r3, #12
 8000d94:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d96:	2300      	movs	r3, #0
 8000d98:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da2:	4618      	mov	r0, r3
 8000da4:	f002 fa84 	bl	80032b0 <HAL_RCC_OscConfig>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000dae:	f000 f835 	bl	8000e1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000db2:	233f      	movs	r3, #63	; 0x3f
 8000db4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000db6:	2303      	movs	r3, #3
 8000db8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f002 fec4 	bl	8003b64 <HAL_RCC_ClockConfig>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000de2:	f000 f81b 	bl	8000e1c <Error_Handler>
  }
}
 8000de6:	bf00      	nop
 8000de8:	3770      	adds	r7, #112	; 0x70
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	58000400 	.word	0x58000400
 8000df4:	58024800 	.word	0x58024800

08000df8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a04      	ldr	r2, [pc, #16]	; (8000e18 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d101      	bne.n	8000e0e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e0a:	f000 fbc5 	bl	8001598 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40014800 	.word	0x40014800

08000e1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e20:	b672      	cpsid	i
}
 8000e22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <Error_Handler+0x8>
	...

08000e28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <HAL_MspInit+0x38>)
 8000e30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e34:	4a0a      	ldr	r2, [pc, #40]	; (8000e60 <HAL_MspInit+0x38>)
 8000e36:	f043 0302 	orr.w	r3, r3, #2
 8000e3a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e3e:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <HAL_MspInit+0x38>)
 8000e40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e44:	f003 0302 	and.w	r3, r3, #2
 8000e48:	607b      	str	r3, [r7, #4]
 8000e4a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	210f      	movs	r1, #15
 8000e50:	f06f 0001 	mvn.w	r0, #1
 8000e54:	f000 fcbc 	bl	80017d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e58:	bf00      	nop
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	58024400 	.word	0x58024400

08000e64 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08e      	sub	sp, #56	; 0x38
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM17 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2b0f      	cmp	r3, #15
 8000e70:	d842      	bhi.n	8000ef8 <HAL_InitTick+0x94>
  {
  HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0U);
 8000e72:	2200      	movs	r2, #0
 8000e74:	6879      	ldr	r1, [r7, #4]
 8000e76:	2076      	movs	r0, #118	; 0x76
 8000e78:	f000 fcaa 	bl	80017d0 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000e7c:	2076      	movs	r0, #118	; 0x76
 8000e7e:	f000 fcc1 	bl	8001804 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000e82:	4a23      	ldr	r2, [pc, #140]	; (8000f10 <HAL_InitTick+0xac>)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000e88:	4b22      	ldr	r3, [pc, #136]	; (8000f14 <HAL_InitTick+0xb0>)
 8000e8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e8e:	4a21      	ldr	r2, [pc, #132]	; (8000f14 <HAL_InitTick+0xb0>)
 8000e90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e94:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000e98:	4b1e      	ldr	r3, [pc, #120]	; (8000f14 <HAL_InitTick+0xb0>)
 8000e9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ea6:	f107 020c 	add.w	r2, r7, #12
 8000eaa:	f107 0310 	add.w	r3, r7, #16
 8000eae:	4611      	mov	r1, r2
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f003 f9e3 	bl	800427c <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000eb6:	f003 f9cb 	bl	8004250 <HAL_RCC_GetPCLK2Freq>
 8000eba:	6378      	str	r0, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ebe:	4a16      	ldr	r2, [pc, #88]	; (8000f18 <HAL_InitTick+0xb4>)
 8000ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ec4:	0c9b      	lsrs	r3, r3, #18
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8000eca:	4b14      	ldr	r3, [pc, #80]	; (8000f1c <HAL_InitTick+0xb8>)
 8000ecc:	4a14      	ldr	r2, [pc, #80]	; (8000f20 <HAL_InitTick+0xbc>)
 8000ece:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8000ed0:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <HAL_InitTick+0xb8>)
 8000ed2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ed6:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8000ed8:	4a10      	ldr	r2, [pc, #64]	; (8000f1c <HAL_InitTick+0xb8>)
 8000eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000edc:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8000ede:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <HAL_InitTick+0xb8>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee4:	4b0d      	ldr	r3, [pc, #52]	; (8000f1c <HAL_InitTick+0xb8>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8000eea:	480c      	ldr	r0, [pc, #48]	; (8000f1c <HAL_InitTick+0xb8>)
 8000eec:	f005 f834 	bl	8005f58 <HAL_TIM_Base_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d107      	bne.n	8000f06 <HAL_InitTick+0xa2>
 8000ef6:	e001      	b.n	8000efc <HAL_InitTick+0x98>
    return HAL_ERROR;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	e005      	b.n	8000f08 <HAL_InitTick+0xa4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8000efc:	4807      	ldr	r0, [pc, #28]	; (8000f1c <HAL_InitTick+0xb8>)
 8000efe:	f005 f88d 	bl	800601c <HAL_TIM_Base_Start_IT>
 8000f02:	4603      	mov	r3, r0
 8000f04:	e000      	b.n	8000f08 <HAL_InitTick+0xa4>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3738      	adds	r7, #56	; 0x38
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	24000008 	.word	0x24000008
 8000f14:	58024400 	.word	0x58024400
 8000f18:	431bde83 	.word	0x431bde83
 8000f1c:	24000470 	.word	0x24000470
 8000f20:	40014800 	.word	0x40014800

08000f24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <NMI_Handler+0x4>

08000f2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f2e:	e7fe      	b.n	8000f2e <HardFault_Handler+0x4>

08000f30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f34:	e7fe      	b.n	8000f34 <MemManage_Handler+0x4>

08000f36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f3a:	e7fe      	b.n	8000f3a <BusFault_Handler+0x4>

08000f3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f40:	e7fe      	b.n	8000f40 <UsageFault_Handler+0x4>

08000f42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000f54:	4802      	ldr	r0, [pc, #8]	; (8000f60 <TIM17_IRQHandler+0x10>)
 8000f56:	f005 f8d9 	bl	800610c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	24000470 	.word	0x24000470

08000f64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  return 1;
 8000f68:	2301      	movs	r3, #1
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <_kill>:

int _kill(int pid, int sig)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f7e:	f00e fc6b 	bl	800f858 <__errno>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2216      	movs	r2, #22
 8000f86:	601a      	str	r2, [r3, #0]
  return -1;
 8000f88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <_exit>:

void _exit (int status)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f7ff ffe7 	bl	8000f74 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000fa6:	e7fe      	b.n	8000fa6 <_exit+0x12>

08000fa8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]
 8000fb8:	e00a      	b.n	8000fd0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fba:	f3af 8000 	nop.w
 8000fbe:	4601      	mov	r1, r0
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	1c5a      	adds	r2, r3, #1
 8000fc4:	60ba      	str	r2, [r7, #8]
 8000fc6:	b2ca      	uxtb	r2, r1
 8000fc8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	617b      	str	r3, [r7, #20]
 8000fd0:	697a      	ldr	r2, [r7, #20]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	dbf0      	blt.n	8000fba <_read+0x12>
  }

  return len;
 8000fd8:	687b      	ldr	r3, [r7, #4]
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3718      	adds	r7, #24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b086      	sub	sp, #24
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	60f8      	str	r0, [r7, #12]
 8000fea:	60b9      	str	r1, [r7, #8]
 8000fec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]
 8000ff2:	e009      	b.n	8001008 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	1c5a      	adds	r2, r3, #1
 8000ff8:	60ba      	str	r2, [r7, #8]
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff fe57 	bl	8000cb0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	3301      	adds	r3, #1
 8001006:	617b      	str	r3, [r7, #20]
 8001008:	697a      	ldr	r2, [r7, #20]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	429a      	cmp	r2, r3
 800100e:	dbf1      	blt.n	8000ff4 <_write+0x12>
  }
  return len;
 8001010:	687b      	ldr	r3, [r7, #4]
}
 8001012:	4618      	mov	r0, r3
 8001014:	3718      	adds	r7, #24
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <_close>:

int _close(int file)
{
 800101a:	b480      	push	{r7}
 800101c:	b083      	sub	sp, #12
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001022:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001026:	4618      	mov	r0, r3
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001032:	b480      	push	{r7}
 8001034:	b083      	sub	sp, #12
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
 800103a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001042:	605a      	str	r2, [r3, #4]
  return 0;
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr

08001052 <_isatty>:

int _isatty(int file)
{
 8001052:	b480      	push	{r7}
 8001054:	b083      	sub	sp, #12
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800105a:	2301      	movs	r3, #1
}
 800105c:	4618      	mov	r0, r3
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3714      	adds	r7, #20
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
	...

08001084 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800108c:	4a14      	ldr	r2, [pc, #80]	; (80010e0 <_sbrk+0x5c>)
 800108e:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <_sbrk+0x60>)
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001098:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <_sbrk+0x64>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d102      	bne.n	80010a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010a0:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <_sbrk+0x64>)
 80010a2:	4a12      	ldr	r2, [pc, #72]	; (80010ec <_sbrk+0x68>)
 80010a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010a6:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <_sbrk+0x64>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4413      	add	r3, r2
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d207      	bcs.n	80010c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010b4:	f00e fbd0 	bl	800f858 <__errno>
 80010b8:	4603      	mov	r3, r0
 80010ba:	220c      	movs	r2, #12
 80010bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010be:	f04f 33ff 	mov.w	r3, #4294967295
 80010c2:	e009      	b.n	80010d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010c4:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <_sbrk+0x64>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ca:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <_sbrk+0x64>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4413      	add	r3, r2
 80010d2:	4a05      	ldr	r2, [pc, #20]	; (80010e8 <_sbrk+0x64>)
 80010d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010d6:	68fb      	ldr	r3, [r7, #12]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3718      	adds	r7, #24
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	24080000 	.word	0x24080000
 80010e4:	00000400 	.word	0x00000400
 80010e8:	240004bc 	.word	0x240004bc
 80010ec:	24005838 	.word	0x24005838

080010f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010f4:	4b37      	ldr	r3, [pc, #220]	; (80011d4 <SystemInit+0xe4>)
 80010f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010fa:	4a36      	ldr	r2, [pc, #216]	; (80011d4 <SystemInit+0xe4>)
 80010fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001100:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001104:	4b34      	ldr	r3, [pc, #208]	; (80011d8 <SystemInit+0xe8>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 030f 	and.w	r3, r3, #15
 800110c:	2b06      	cmp	r3, #6
 800110e:	d807      	bhi.n	8001120 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001110:	4b31      	ldr	r3, [pc, #196]	; (80011d8 <SystemInit+0xe8>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f023 030f 	bic.w	r3, r3, #15
 8001118:	4a2f      	ldr	r2, [pc, #188]	; (80011d8 <SystemInit+0xe8>)
 800111a:	f043 0307 	orr.w	r3, r3, #7
 800111e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001120:	4b2e      	ldr	r3, [pc, #184]	; (80011dc <SystemInit+0xec>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a2d      	ldr	r2, [pc, #180]	; (80011dc <SystemInit+0xec>)
 8001126:	f043 0301 	orr.w	r3, r3, #1
 800112a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800112c:	4b2b      	ldr	r3, [pc, #172]	; (80011dc <SystemInit+0xec>)
 800112e:	2200      	movs	r2, #0
 8001130:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001132:	4b2a      	ldr	r3, [pc, #168]	; (80011dc <SystemInit+0xec>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	4929      	ldr	r1, [pc, #164]	; (80011dc <SystemInit+0xec>)
 8001138:	4b29      	ldr	r3, [pc, #164]	; (80011e0 <SystemInit+0xf0>)
 800113a:	4013      	ands	r3, r2
 800113c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800113e:	4b26      	ldr	r3, [pc, #152]	; (80011d8 <SystemInit+0xe8>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0308 	and.w	r3, r3, #8
 8001146:	2b00      	cmp	r3, #0
 8001148:	d007      	beq.n	800115a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800114a:	4b23      	ldr	r3, [pc, #140]	; (80011d8 <SystemInit+0xe8>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f023 030f 	bic.w	r3, r3, #15
 8001152:	4a21      	ldr	r2, [pc, #132]	; (80011d8 <SystemInit+0xe8>)
 8001154:	f043 0307 	orr.w	r3, r3, #7
 8001158:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800115a:	4b20      	ldr	r3, [pc, #128]	; (80011dc <SystemInit+0xec>)
 800115c:	2200      	movs	r2, #0
 800115e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001160:	4b1e      	ldr	r3, [pc, #120]	; (80011dc <SystemInit+0xec>)
 8001162:	2200      	movs	r2, #0
 8001164:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001166:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <SystemInit+0xec>)
 8001168:	2200      	movs	r2, #0
 800116a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800116c:	4b1b      	ldr	r3, [pc, #108]	; (80011dc <SystemInit+0xec>)
 800116e:	4a1d      	ldr	r2, [pc, #116]	; (80011e4 <SystemInit+0xf4>)
 8001170:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001172:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <SystemInit+0xec>)
 8001174:	4a1c      	ldr	r2, [pc, #112]	; (80011e8 <SystemInit+0xf8>)
 8001176:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001178:	4b18      	ldr	r3, [pc, #96]	; (80011dc <SystemInit+0xec>)
 800117a:	4a1c      	ldr	r2, [pc, #112]	; (80011ec <SystemInit+0xfc>)
 800117c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800117e:	4b17      	ldr	r3, [pc, #92]	; (80011dc <SystemInit+0xec>)
 8001180:	2200      	movs	r2, #0
 8001182:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001184:	4b15      	ldr	r3, [pc, #84]	; (80011dc <SystemInit+0xec>)
 8001186:	4a19      	ldr	r2, [pc, #100]	; (80011ec <SystemInit+0xfc>)
 8001188:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800118a:	4b14      	ldr	r3, [pc, #80]	; (80011dc <SystemInit+0xec>)
 800118c:	2200      	movs	r2, #0
 800118e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001190:	4b12      	ldr	r3, [pc, #72]	; (80011dc <SystemInit+0xec>)
 8001192:	4a16      	ldr	r2, [pc, #88]	; (80011ec <SystemInit+0xfc>)
 8001194:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001196:	4b11      	ldr	r3, [pc, #68]	; (80011dc <SystemInit+0xec>)
 8001198:	2200      	movs	r2, #0
 800119a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800119c:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <SystemInit+0xec>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a0e      	ldr	r2, [pc, #56]	; (80011dc <SystemInit+0xec>)
 80011a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <SystemInit+0xec>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80011ae:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <SystemInit+0x100>)
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <SystemInit+0x104>)
 80011b4:	4013      	ands	r3, r2
 80011b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011ba:	d202      	bcs.n	80011c2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80011bc:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <SystemInit+0x108>)
 80011be:	2201      	movs	r2, #1
 80011c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80011c2:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <SystemInit+0x10c>)
 80011c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80011c8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80011ca:	bf00      	nop
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	e000ed00 	.word	0xe000ed00
 80011d8:	52002000 	.word	0x52002000
 80011dc:	58024400 	.word	0x58024400
 80011e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80011e4:	02020200 	.word	0x02020200
 80011e8:	01ff0000 	.word	0x01ff0000
 80011ec:	01010280 	.word	0x01010280
 80011f0:	5c001000 	.word	0x5c001000
 80011f4:	ffff0000 	.word	0xffff0000
 80011f8:	51008108 	.word	0x51008108
 80011fc:	52004000 	.word	0x52004000

08001200 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001204:	4b23      	ldr	r3, [pc, #140]	; (8001294 <MX_USART3_UART_Init+0x94>)
 8001206:	4a24      	ldr	r2, [pc, #144]	; (8001298 <MX_USART3_UART_Init+0x98>)
 8001208:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 800120a:	4b22      	ldr	r3, [pc, #136]	; (8001294 <MX_USART3_UART_Init+0x94>)
 800120c:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001210:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_7B;
 8001212:	4b20      	ldr	r3, [pc, #128]	; (8001294 <MX_USART3_UART_Init+0x94>)
 8001214:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001218:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800121a:	4b1e      	ldr	r3, [pc, #120]	; (8001294 <MX_USART3_UART_Init+0x94>)
 800121c:	2200      	movs	r2, #0
 800121e:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001220:	4b1c      	ldr	r3, [pc, #112]	; (8001294 <MX_USART3_UART_Init+0x94>)
 8001222:	2200      	movs	r2, #0
 8001224:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001226:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <MX_USART3_UART_Init+0x94>)
 8001228:	220c      	movs	r2, #12
 800122a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800122c:	4b19      	ldr	r3, [pc, #100]	; (8001294 <MX_USART3_UART_Init+0x94>)
 800122e:	2200      	movs	r2, #0
 8001230:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001232:	4b18      	ldr	r3, [pc, #96]	; (8001294 <MX_USART3_UART_Init+0x94>)
 8001234:	2200      	movs	r2, #0
 8001236:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001238:	4b16      	ldr	r3, [pc, #88]	; (8001294 <MX_USART3_UART_Init+0x94>)
 800123a:	2200      	movs	r2, #0
 800123c:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800123e:	4b15      	ldr	r3, [pc, #84]	; (8001294 <MX_USART3_UART_Init+0x94>)
 8001240:	2200      	movs	r2, #0
 8001242:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001244:	4b13      	ldr	r3, [pc, #76]	; (8001294 <MX_USART3_UART_Init+0x94>)
 8001246:	2200      	movs	r2, #0
 8001248:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800124a:	4812      	ldr	r0, [pc, #72]	; (8001294 <MX_USART3_UART_Init+0x94>)
 800124c:	f005 f95e 	bl	800650c <HAL_UART_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_USART3_UART_Init+0x5a>
  {
    Error_Handler();
 8001256:	f7ff fde1 	bl	8000e1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800125a:	2100      	movs	r1, #0
 800125c:	480d      	ldr	r0, [pc, #52]	; (8001294 <MX_USART3_UART_Init+0x94>)
 800125e:	f006 f9ee 	bl	800763e <HAL_UARTEx_SetTxFifoThreshold>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_USART3_UART_Init+0x6c>
  {
    Error_Handler();
 8001268:	f7ff fdd8 	bl	8000e1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800126c:	2100      	movs	r1, #0
 800126e:	4809      	ldr	r0, [pc, #36]	; (8001294 <MX_USART3_UART_Init+0x94>)
 8001270:	f006 fa23 	bl	80076ba <HAL_UARTEx_SetRxFifoThreshold>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_USART3_UART_Init+0x7e>
  {
    Error_Handler();
 800127a:	f7ff fdcf 	bl	8000e1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800127e:	4805      	ldr	r0, [pc, #20]	; (8001294 <MX_USART3_UART_Init+0x94>)
 8001280:	f006 f9a4 	bl	80075cc <HAL_UARTEx_DisableFifoMode>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_USART3_UART_Init+0x8e>
  {
    Error_Handler();
 800128a:	f7ff fdc7 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	240004c0 	.word	0x240004c0
 8001298:	40004800 	.word	0x40004800

0800129c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b0ba      	sub	sp, #232	; 0xe8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012b4:	f107 0310 	add.w	r3, r7, #16
 80012b8:	22c0      	movs	r2, #192	; 0xc0
 80012ba:	2100      	movs	r1, #0
 80012bc:	4618      	mov	r0, r3
 80012be:	f00e fa78 	bl	800f7b2 <memset>
  if(uartHandle->Instance==USART3)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a27      	ldr	r2, [pc, #156]	; (8001364 <HAL_UART_MspInit+0xc8>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d146      	bne.n	800135a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012cc:	f04f 0202 	mov.w	r2, #2
 80012d0:	f04f 0300 	mov.w	r3, #0
 80012d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80012d8:	2300      	movs	r3, #0
 80012da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012de:	f107 0310 	add.w	r3, r7, #16
 80012e2:	4618      	mov	r0, r3
 80012e4:	f003 f80c 	bl	8004300 <HAL_RCCEx_PeriphCLKConfig>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80012ee:	f7ff fd95 	bl	8000e1c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012f2:	4b1d      	ldr	r3, [pc, #116]	; (8001368 <HAL_UART_MspInit+0xcc>)
 80012f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012f8:	4a1b      	ldr	r2, [pc, #108]	; (8001368 <HAL_UART_MspInit+0xcc>)
 80012fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012fe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001302:	4b19      	ldr	r3, [pc, #100]	; (8001368 <HAL_UART_MspInit+0xcc>)
 8001304:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001308:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001310:	4b15      	ldr	r3, [pc, #84]	; (8001368 <HAL_UART_MspInit+0xcc>)
 8001312:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001316:	4a14      	ldr	r2, [pc, #80]	; (8001368 <HAL_UART_MspInit+0xcc>)
 8001318:	f043 0308 	orr.w	r3, r3, #8
 800131c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001320:	4b11      	ldr	r3, [pc, #68]	; (8001368 <HAL_UART_MspInit+0xcc>)
 8001322:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001326:	f003 0308 	and.w	r3, r3, #8
 800132a:	60bb      	str	r3, [r7, #8]
 800132c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800132e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001332:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001336:	2302      	movs	r3, #2
 8001338:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001342:	2300      	movs	r3, #0
 8001344:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001348:	2307      	movs	r3, #7
 800134a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800134e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001352:	4619      	mov	r1, r3
 8001354:	4805      	ldr	r0, [pc, #20]	; (800136c <HAL_UART_MspInit+0xd0>)
 8001356:	f000 fe87 	bl	8002068 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800135a:	bf00      	nop
 800135c:	37e8      	adds	r7, #232	; 0xe8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40004800 	.word	0x40004800
 8001368:	58024400 	.word	0x58024400
 800136c:	58020c00 	.word	0x58020c00

08001370 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001374:	4b15      	ldr	r3, [pc, #84]	; (80013cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001376:	4a16      	ldr	r2, [pc, #88]	; (80013d0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001378:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800137a:	4b14      	ldr	r3, [pc, #80]	; (80013cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800137c:	2209      	movs	r2, #9
 800137e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001380:	4b12      	ldr	r3, [pc, #72]	; (80013cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001382:	2202      	movs	r2, #2
 8001384:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001386:	4b11      	ldr	r3, [pc, #68]	; (80013cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001388:	2200      	movs	r2, #0
 800138a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800138c:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800138e:	2202      	movs	r2, #2
 8001390:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001392:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001394:	2201      	movs	r2, #1
 8001396:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001398:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800139a:	2200      	movs	r2, #0
 800139c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800139e:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80013a4:	4b09      	ldr	r3, [pc, #36]	; (80013cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80013aa:	4b08      	ldr	r3, [pc, #32]	; (80013cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80013b6:	4805      	ldr	r0, [pc, #20]	; (80013cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013b8:	f001 fde8 	bl	8002f8c <HAL_PCD_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80013c2:	f7ff fd2b 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	24000554 	.word	0x24000554
 80013d0:	40080000 	.word	0x40080000

080013d4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b0ba      	sub	sp, #232	; 0xe8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013dc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013ec:	f107 0310 	add.w	r3, r7, #16
 80013f0:	22c0      	movs	r2, #192	; 0xc0
 80013f2:	2100      	movs	r1, #0
 80013f4:	4618      	mov	r0, r3
 80013f6:	f00e f9dc 	bl	800f7b2 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a30      	ldr	r2, [pc, #192]	; (80014c0 <HAL_PCD_MspInit+0xec>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d159      	bne.n	80014b8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001404:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001408:	f04f 0300 	mov.w	r3, #0
 800140c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001410:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001414:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001418:	f107 0310 	add.w	r3, r7, #16
 800141c:	4618      	mov	r0, r3
 800141e:	f002 ff6f 	bl	8004300 <HAL_RCCEx_PeriphCLKConfig>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001428:	f7ff fcf8 	bl	8000e1c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800142c:	f001 ff30 	bl	8003290 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001430:	4b24      	ldr	r3, [pc, #144]	; (80014c4 <HAL_PCD_MspInit+0xf0>)
 8001432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001436:	4a23      	ldr	r2, [pc, #140]	; (80014c4 <HAL_PCD_MspInit+0xf0>)
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001440:	4b20      	ldr	r3, [pc, #128]	; (80014c4 <HAL_PCD_MspInit+0xf0>)
 8001442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800144e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001452:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001456:	2302      	movs	r3, #2
 8001458:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001462:	2300      	movs	r3, #0
 8001464:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001468:	230a      	movs	r3, #10
 800146a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001472:	4619      	mov	r1, r3
 8001474:	4814      	ldr	r0, [pc, #80]	; (80014c8 <HAL_PCD_MspInit+0xf4>)
 8001476:	f000 fdf7 	bl	8002068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800147a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800147e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001482:	2300      	movs	r3, #0
 8001484:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800148e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001492:	4619      	mov	r1, r3
 8001494:	480c      	ldr	r0, [pc, #48]	; (80014c8 <HAL_PCD_MspInit+0xf4>)
 8001496:	f000 fde7 	bl	8002068 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800149a:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <HAL_PCD_MspInit+0xf0>)
 800149c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014a0:	4a08      	ldr	r2, [pc, #32]	; (80014c4 <HAL_PCD_MspInit+0xf0>)
 80014a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80014a6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <HAL_PCD_MspInit+0xf0>)
 80014ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80014b8:	bf00      	nop
 80014ba:	37e8      	adds	r7, #232	; 0xe8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40080000 	.word	0x40080000
 80014c4:	58024400 	.word	0x58024400
 80014c8:	58020000 	.word	0x58020000

080014cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80014cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001504 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014d0:	f7ff fe0e 	bl	80010f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014d4:	480c      	ldr	r0, [pc, #48]	; (8001508 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014d6:	490d      	ldr	r1, [pc, #52]	; (800150c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014d8:	4a0d      	ldr	r2, [pc, #52]	; (8001510 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014dc:	e002      	b.n	80014e4 <LoopCopyDataInit>

080014de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014e2:	3304      	adds	r3, #4

080014e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e8:	d3f9      	bcc.n	80014de <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ea:	4a0a      	ldr	r2, [pc, #40]	; (8001514 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014ec:	4c0a      	ldr	r4, [pc, #40]	; (8001518 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f0:	e001      	b.n	80014f6 <LoopFillZerobss>

080014f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f4:	3204      	adds	r2, #4

080014f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f8:	d3fb      	bcc.n	80014f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014fa:	f00e f9b3 	bl	800f864 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014fe:	f7ff fbe9 	bl	8000cd4 <main>
  bx  lr
 8001502:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001504:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001508:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800150c:	240001f0 	.word	0x240001f0
  ldr r2, =_sidata
 8001510:	08011b3c 	.word	0x08011b3c
  ldr r2, =_sbss
 8001514:	240002b0 	.word	0x240002b0
  ldr r4, =_ebss
 8001518:	24005838 	.word	0x24005838

0800151c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800151c:	e7fe      	b.n	800151c <ADC3_IRQHandler>
	...

08001520 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001526:	2003      	movs	r0, #3
 8001528:	f000 f947 	bl	80017ba <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800152c:	f002 fcd0 	bl	8003ed0 <HAL_RCC_GetSysClockFreq>
 8001530:	4602      	mov	r2, r0
 8001532:	4b15      	ldr	r3, [pc, #84]	; (8001588 <HAL_Init+0x68>)
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	0a1b      	lsrs	r3, r3, #8
 8001538:	f003 030f 	and.w	r3, r3, #15
 800153c:	4913      	ldr	r1, [pc, #76]	; (800158c <HAL_Init+0x6c>)
 800153e:	5ccb      	ldrb	r3, [r1, r3]
 8001540:	f003 031f 	and.w	r3, r3, #31
 8001544:	fa22 f303 	lsr.w	r3, r2, r3
 8001548:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800154a:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <HAL_Init+0x68>)
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	f003 030f 	and.w	r3, r3, #15
 8001552:	4a0e      	ldr	r2, [pc, #56]	; (800158c <HAL_Init+0x6c>)
 8001554:	5cd3      	ldrb	r3, [r2, r3]
 8001556:	f003 031f 	and.w	r3, r3, #31
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	fa22 f303 	lsr.w	r3, r2, r3
 8001560:	4a0b      	ldr	r2, [pc, #44]	; (8001590 <HAL_Init+0x70>)
 8001562:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001564:	4a0b      	ldr	r2, [pc, #44]	; (8001594 <HAL_Init+0x74>)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800156a:	200f      	movs	r0, #15
 800156c:	f7ff fc7a 	bl	8000e64 <HAL_InitTick>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e002      	b.n	8001580 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800157a:	f7ff fc55 	bl	8000e28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800157e:	2300      	movs	r3, #0
}
 8001580:	4618      	mov	r0, r3
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	58024400 	.word	0x58024400
 800158c:	080116cc 	.word	0x080116cc
 8001590:	24000004 	.word	0x24000004
 8001594:	24000000 	.word	0x24000000

08001598 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800159c:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <HAL_IncTick+0x20>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	461a      	mov	r2, r3
 80015a2:	4b06      	ldr	r3, [pc, #24]	; (80015bc <HAL_IncTick+0x24>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4413      	add	r3, r2
 80015a8:	4a04      	ldr	r2, [pc, #16]	; (80015bc <HAL_IncTick+0x24>)
 80015aa:	6013      	str	r3, [r2, #0]
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	2400000c 	.word	0x2400000c
 80015bc:	24000a60 	.word	0x24000a60

080015c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  return uwTick;
 80015c4:	4b03      	ldr	r3, [pc, #12]	; (80015d4 <HAL_GetTick+0x14>)
 80015c6:	681b      	ldr	r3, [r3, #0]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	24000a60 	.word	0x24000a60

080015d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015e0:	f7ff ffee 	bl	80015c0 <HAL_GetTick>
 80015e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015f0:	d005      	beq.n	80015fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015f2:	4b0a      	ldr	r3, [pc, #40]	; (800161c <HAL_Delay+0x44>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	461a      	mov	r2, r3
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	4413      	add	r3, r2
 80015fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015fe:	bf00      	nop
 8001600:	f7ff ffde 	bl	80015c0 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	429a      	cmp	r2, r3
 800160e:	d8f7      	bhi.n	8001600 <HAL_Delay+0x28>
  {
  }
}
 8001610:	bf00      	nop
 8001612:	bf00      	nop
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	2400000c 	.word	0x2400000c

08001620 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001624:	4b03      	ldr	r3, [pc, #12]	; (8001634 <HAL_GetREVID+0x14>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	0c1b      	lsrs	r3, r3, #16
}
 800162a:	4618      	mov	r0, r3
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	5c001000 	.word	0x5c001000

08001638 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001640:	4b06      	ldr	r3, [pc, #24]	; (800165c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001648:	4904      	ldr	r1, [pc, #16]	; (800165c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4313      	orrs	r3, r2
 800164e:	604b      	str	r3, [r1, #4]
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	58000400 	.word	0x58000400

08001660 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001670:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001676:	68ba      	ldr	r2, [r7, #8]
 8001678:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800167c:	4013      	ands	r3, r2
 800167e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <__NVIC_SetPriorityGrouping+0x44>)
 800168a:	4313      	orrs	r3, r2
 800168c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800168e:	4a04      	ldr	r2, [pc, #16]	; (80016a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	60d3      	str	r3, [r2, #12]
}
 8001694:	bf00      	nop
 8001696:	3714      	adds	r7, #20
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	e000ed00 	.word	0xe000ed00
 80016a4:	05fa0000 	.word	0x05fa0000

080016a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016ac:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <__NVIC_GetPriorityGrouping+0x18>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	0a1b      	lsrs	r3, r3, #8
 80016b2:	f003 0307 	and.w	r3, r3, #7
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	db0b      	blt.n	80016ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016d6:	88fb      	ldrh	r3, [r7, #6]
 80016d8:	f003 021f 	and.w	r2, r3, #31
 80016dc:	4907      	ldr	r1, [pc, #28]	; (80016fc <__NVIC_EnableIRQ+0x38>)
 80016de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016e2:	095b      	lsrs	r3, r3, #5
 80016e4:	2001      	movs	r0, #1
 80016e6:	fa00 f202 	lsl.w	r2, r0, r2
 80016ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	e000e100 	.word	0xe000e100

08001700 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	6039      	str	r1, [r7, #0]
 800170a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800170c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001710:	2b00      	cmp	r3, #0
 8001712:	db0a      	blt.n	800172a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	b2da      	uxtb	r2, r3
 8001718:	490c      	ldr	r1, [pc, #48]	; (800174c <__NVIC_SetPriority+0x4c>)
 800171a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800171e:	0112      	lsls	r2, r2, #4
 8001720:	b2d2      	uxtb	r2, r2
 8001722:	440b      	add	r3, r1
 8001724:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001728:	e00a      	b.n	8001740 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	b2da      	uxtb	r2, r3
 800172e:	4908      	ldr	r1, [pc, #32]	; (8001750 <__NVIC_SetPriority+0x50>)
 8001730:	88fb      	ldrh	r3, [r7, #6]
 8001732:	f003 030f 	and.w	r3, r3, #15
 8001736:	3b04      	subs	r3, #4
 8001738:	0112      	lsls	r2, r2, #4
 800173a:	b2d2      	uxtb	r2, r2
 800173c:	440b      	add	r3, r1
 800173e:	761a      	strb	r2, [r3, #24]
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	e000e100 	.word	0xe000e100
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001754:	b480      	push	{r7}
 8001756:	b089      	sub	sp, #36	; 0x24
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	f1c3 0307 	rsb	r3, r3, #7
 800176e:	2b04      	cmp	r3, #4
 8001770:	bf28      	it	cs
 8001772:	2304      	movcs	r3, #4
 8001774:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	3304      	adds	r3, #4
 800177a:	2b06      	cmp	r3, #6
 800177c:	d902      	bls.n	8001784 <NVIC_EncodePriority+0x30>
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	3b03      	subs	r3, #3
 8001782:	e000      	b.n	8001786 <NVIC_EncodePriority+0x32>
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001788:	f04f 32ff 	mov.w	r2, #4294967295
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43da      	mvns	r2, r3
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	401a      	ands	r2, r3
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800179c:	f04f 31ff 	mov.w	r1, #4294967295
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	fa01 f303 	lsl.w	r3, r1, r3
 80017a6:	43d9      	mvns	r1, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ac:	4313      	orrs	r3, r2
         );
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3724      	adds	r7, #36	; 0x24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b082      	sub	sp, #8
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7ff ff4c 	bl	8001660 <__NVIC_SetPriorityGrouping>
}
 80017c8:	bf00      	nop
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
 80017dc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017de:	f7ff ff63 	bl	80016a8 <__NVIC_GetPriorityGrouping>
 80017e2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	68b9      	ldr	r1, [r7, #8]
 80017e8:	6978      	ldr	r0, [r7, #20]
 80017ea:	f7ff ffb3 	bl	8001754 <NVIC_EncodePriority>
 80017ee:	4602      	mov	r2, r0
 80017f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017f4:	4611      	mov	r1, r2
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff ff82 	bl	8001700 <__NVIC_SetPriority>
}
 80017fc:	bf00      	nop
 80017fe:	3718      	adds	r7, #24
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800180e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff ff56 	bl	80016c4 <__NVIC_EnableIRQ>
}
 8001818:	bf00      	nop
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d101      	bne.n	8001832 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e0cf      	b.n	80019d2 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001838:	2b00      	cmp	r3, #0
 800183a:	d106      	bne.n	800184a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2223      	movs	r2, #35	; 0x23
 8001840:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7fe ff6d 	bl	8000724 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800184a:	4b64      	ldr	r3, [pc, #400]	; (80019dc <HAL_ETH_Init+0x1bc>)
 800184c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001850:	4a62      	ldr	r2, [pc, #392]	; (80019dc <HAL_ETH_Init+0x1bc>)
 8001852:	f043 0302 	orr.w	r3, r3, #2
 8001856:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800185a:	4b60      	ldr	r3, [pc, #384]	; (80019dc <HAL_ETH_Init+0x1bc>)
 800185c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	7a1b      	ldrb	r3, [r3, #8]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d103      	bne.n	8001878 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001870:	2000      	movs	r0, #0
 8001872:	f7ff fee1 	bl	8001638 <HAL_SYSCFG_ETHInterfaceSelect>
 8001876:	e003      	b.n	8001880 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001878:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800187c:	f7ff fedc 	bl	8001638 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001880:	4b57      	ldr	r3, [pc, #348]	; (80019e0 <HAL_ETH_Init+0x1c0>)
 8001882:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	6812      	ldr	r2, [r2, #0]
 8001892:	f043 0301 	orr.w	r3, r3, #1
 8001896:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800189a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800189c:	f7ff fe90 	bl	80015c0 <HAL_GetTick>
 80018a0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80018a2:	e011      	b.n	80018c8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80018a4:	f7ff fe8c 	bl	80015c0 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80018b2:	d909      	bls.n	80018c8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2204      	movs	r2, #4
 80018b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	22e0      	movs	r2, #224	; 0xe0
 80018c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e084      	b.n	80019d2 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1e4      	bne.n	80018a4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 f886 	bl	80019ec <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80018e0:	f002 fc70 	bl	80041c4 <HAL_RCC_GetHCLKFreq>
 80018e4:	4603      	mov	r3, r0
 80018e6:	4a3f      	ldr	r2, [pc, #252]	; (80019e4 <HAL_ETH_Init+0x1c4>)
 80018e8:	fba2 2303 	umull	r2, r3, r2, r3
 80018ec:	0c9a      	lsrs	r2, r3, #18
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	3a01      	subs	r2, #1
 80018f4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f000 fa71 	bl	8001de0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001906:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800190a:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	6812      	ldr	r2, [r2, #0]
 8001912:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001916:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800191a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	f003 0303 	and.w	r3, r3, #3
 8001926:	2b00      	cmp	r3, #0
 8001928:	d009      	beq.n	800193e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2201      	movs	r2, #1
 800192e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	22e0      	movs	r2, #224	; 0xe0
 8001936:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e049      	b.n	80019d2 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001946:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800194a:	4b27      	ldr	r3, [pc, #156]	; (80019e8 <HAL_ETH_Init+0x1c8>)
 800194c:	4013      	ands	r3, r2
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	6952      	ldr	r2, [r2, #20]
 8001952:	0051      	lsls	r1, r2, #1
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	6812      	ldr	r2, [r2, #0]
 8001958:	430b      	orrs	r3, r1
 800195a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800195e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f000 fad9 	bl	8001f1a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f000 fb1f 	bl	8001fac <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	3305      	adds	r3, #5
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	021a      	lsls	r2, r3, #8
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	3304      	adds	r3, #4
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	4619      	mov	r1, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	430a      	orrs	r2, r1
 8001988:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	3303      	adds	r3, #3
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	061a      	lsls	r2, r3, #24
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	3302      	adds	r3, #2
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	041b      	lsls	r3, r3, #16
 80019a0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	3301      	adds	r3, #1
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80019ac:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80019ba:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80019bc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2210      	movs	r2, #16
 80019cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	58024400 	.word	0x58024400
 80019e0:	58000400 	.word	0x58000400
 80019e4:	431bde83 	.word	0x431bde83
 80019e8:	ffff8001 	.word	0xffff8001

080019ec <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80019fc:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a04:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001a06:	f002 fbdd 	bl	80041c4 <HAL_RCC_GetHCLKFreq>
 8001a0a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	4a1e      	ldr	r2, [pc, #120]	; (8001a88 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d908      	bls.n	8001a26 <HAL_ETH_SetMDIOClockRange+0x3a>
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	4a1d      	ldr	r2, [pc, #116]	; (8001a8c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d804      	bhi.n	8001a26 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	e027      	b.n	8001a76 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	4a18      	ldr	r2, [pc, #96]	; (8001a8c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d908      	bls.n	8001a40 <HAL_ETH_SetMDIOClockRange+0x54>
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	4a17      	ldr	r2, [pc, #92]	; (8001a90 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d204      	bcs.n	8001a40 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	e01a      	b.n	8001a76 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	4a13      	ldr	r2, [pc, #76]	; (8001a90 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d303      	bcc.n	8001a50 <HAL_ETH_SetMDIOClockRange+0x64>
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	4a12      	ldr	r2, [pc, #72]	; (8001a94 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d911      	bls.n	8001a74 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	4a10      	ldr	r2, [pc, #64]	; (8001a94 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d908      	bls.n	8001a6a <HAL_ETH_SetMDIOClockRange+0x7e>
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	4a0f      	ldr	r2, [pc, #60]	; (8001a98 <HAL_ETH_SetMDIOClockRange+0xac>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d804      	bhi.n	8001a6a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	e005      	b.n	8001a76 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	e000      	b.n	8001a76 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001a74:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001a80:	bf00      	nop
 8001a82:	3710      	adds	r7, #16
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	01312cff 	.word	0x01312cff
 8001a8c:	02160ebf 	.word	0x02160ebf
 8001a90:	03938700 	.word	0x03938700
 8001a94:	05f5e0ff 	.word	0x05f5e0ff
 8001a98:	08f0d17f 	.word	0x08f0d17f

08001a9c <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001aae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	791b      	ldrb	r3, [r3, #4]
 8001ab4:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001ab6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	7b1b      	ldrb	r3, [r3, #12]
 8001abc:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001abe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	7b5b      	ldrb	r3, [r3, #13]
 8001ac4:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001ac6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	7b9b      	ldrb	r3, [r3, #14]
 8001acc:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001ace:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	7bdb      	ldrb	r3, [r3, #15]
 8001ad4:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001ad6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	7c12      	ldrb	r2, [r2, #16]
 8001adc:	2a00      	cmp	r2, #0
 8001ade:	d102      	bne.n	8001ae6 <ETH_SetMACConfig+0x4a>
 8001ae0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001ae4:	e000      	b.n	8001ae8 <ETH_SetMACConfig+0x4c>
 8001ae6:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001ae8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001aea:	683a      	ldr	r2, [r7, #0]
 8001aec:	7c52      	ldrb	r2, [r2, #17]
 8001aee:	2a00      	cmp	r2, #0
 8001af0:	d102      	bne.n	8001af8 <ETH_SetMACConfig+0x5c>
 8001af2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001af6:	e000      	b.n	8001afa <ETH_SetMACConfig+0x5e>
 8001af8:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001afa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	7c9b      	ldrb	r3, [r3, #18]
 8001b00:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001b02:	431a      	orrs	r2, r3
               macconf->Speed |
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001b08:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001b0e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	7f1b      	ldrb	r3, [r3, #28]
 8001b14:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001b16:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	7f5b      	ldrb	r3, [r3, #29]
 8001b1c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001b1e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	7f92      	ldrb	r2, [r2, #30]
 8001b24:	2a00      	cmp	r2, #0
 8001b26:	d102      	bne.n	8001b2e <ETH_SetMACConfig+0x92>
 8001b28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b2c:	e000      	b.n	8001b30 <ETH_SetMACConfig+0x94>
 8001b2e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001b30:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	7fdb      	ldrb	r3, [r3, #31]
 8001b36:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001b38:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001b40:	2a00      	cmp	r2, #0
 8001b42:	d102      	bne.n	8001b4a <ETH_SetMACConfig+0xae>
 8001b44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b48:	e000      	b.n	8001b4c <ETH_SetMACConfig+0xb0>
 8001b4a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001b4c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001b52:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001b5a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001b5c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001b62:	4313      	orrs	r3, r2
 8001b64:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	4b56      	ldr	r3, [pc, #344]	; (8001cc8 <ETH_SetMACConfig+0x22c>)
 8001b6e:	4013      	ands	r3, r2
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	6812      	ldr	r2, [r2, #0]
 8001b74:	68f9      	ldr	r1, [r7, #12]
 8001b76:	430b      	orrs	r3, r1
 8001b78:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b7e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b86:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001b88:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b90:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001b92:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001b9a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001b9c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001b9e:	683a      	ldr	r2, [r7, #0]
 8001ba0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001ba4:	2a00      	cmp	r2, #0
 8001ba6:	d102      	bne.n	8001bae <ETH_SetMACConfig+0x112>
 8001ba8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001bac:	e000      	b.n	8001bb0 <ETH_SetMACConfig+0x114>
 8001bae:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001bb0:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	685a      	ldr	r2, [r3, #4]
 8001bc0:	4b42      	ldr	r3, [pc, #264]	; (8001ccc <ETH_SetMACConfig+0x230>)
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	6812      	ldr	r2, [r2, #0]
 8001bc8:	68f9      	ldr	r1, [r7, #12]
 8001bca:	430b      	orrs	r3, r1
 8001bcc:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bd4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68da      	ldr	r2, [r3, #12]
 8001be4:	4b3a      	ldr	r3, [pc, #232]	; (8001cd0 <ETH_SetMACConfig+0x234>)
 8001be6:	4013      	ands	r3, r2
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	6812      	ldr	r2, [r2, #0]
 8001bec:	68f9      	ldr	r1, [r7, #12]
 8001bee:	430b      	orrs	r3, r1
 8001bf0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001bf8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001bfe:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001c06:	2a00      	cmp	r2, #0
 8001c08:	d101      	bne.n	8001c0e <ETH_SetMACConfig+0x172>
 8001c0a:	2280      	movs	r2, #128	; 0x80
 8001c0c:	e000      	b.n	8001c10 <ETH_SetMACConfig+0x174>
 8001c0e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001c10:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c16:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001c22:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001c26:	4013      	ands	r3, r2
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	6812      	ldr	r2, [r2, #0]
 8001c2c:	68f9      	ldr	r1, [r7, #12]
 8001c2e:	430b      	orrs	r3, r1
 8001c30:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001c38:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001c40:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001c42:	4313      	orrs	r3, r2
 8001c44:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c4e:	f023 0103 	bic.w	r1, r3, #3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001c66:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	430a      	orrs	r2, r1
 8001c74:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001c82:	2a00      	cmp	r2, #0
 8001c84:	d101      	bne.n	8001c8a <ETH_SetMACConfig+0x1ee>
 8001c86:	2240      	movs	r2, #64	; 0x40
 8001c88:	e000      	b.n	8001c8c <ETH_SetMACConfig+0x1f0>
 8001c8a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001c8c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001c94:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001c96:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001c9e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001cac:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	68fa      	ldr	r2, [r7, #12]
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001cbc:	bf00      	nop
 8001cbe:	3714      	adds	r7, #20
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	00048083 	.word	0x00048083
 8001ccc:	c0f88000 	.word	0xc0f88000
 8001cd0:	fffffef0 	.word	0xfffffef0

08001cd4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	4b38      	ldr	r3, [pc, #224]	; (8001dcc <ETH_SetDMAConfig+0xf8>)
 8001cea:	4013      	ands	r3, r2
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	6811      	ldr	r1, [r2, #0]
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	6812      	ldr	r2, [r2, #0]
 8001cf4:	430b      	orrs	r3, r1
 8001cf6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001cfa:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	791b      	ldrb	r3, [r3, #4]
 8001d00:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001d06:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	7b1b      	ldrb	r3, [r3, #12]
 8001d0c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	4b2c      	ldr	r3, [pc, #176]	; (8001dd0 <ETH_SetDMAConfig+0xfc>)
 8001d1e:	4013      	ands	r3, r2
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	6812      	ldr	r2, [r2, #0]
 8001d24:	68f9      	ldr	r1, [r7, #12]
 8001d26:	430b      	orrs	r3, r1
 8001d28:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d2c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	7b5b      	ldrb	r3, [r3, #13]
 8001d32:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d44:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8001d48:	4b22      	ldr	r3, [pc, #136]	; (8001dd4 <ETH_SetDMAConfig+0x100>)
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	6812      	ldr	r2, [r2, #0]
 8001d50:	68f9      	ldr	r1, [r7, #12]
 8001d52:	430b      	orrs	r3, r1
 8001d54:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d58:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	7d1b      	ldrb	r3, [r3, #20]
 8001d64:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001d66:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	7f5b      	ldrb	r3, [r3, #29]
 8001d6c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d7a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001d7e:	4b16      	ldr	r3, [pc, #88]	; (8001dd8 <ETH_SetDMAConfig+0x104>)
 8001d80:	4013      	ands	r3, r2
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	6812      	ldr	r2, [r2, #0]
 8001d86:	68f9      	ldr	r1, [r7, #12]
 8001d88:	430b      	orrs	r3, r1
 8001d8a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d8e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	7f1b      	ldrb	r3, [r3, #28]
 8001d96:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001da8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001dac:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <ETH_SetDMAConfig+0x108>)
 8001dae:	4013      	ands	r3, r2
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	6812      	ldr	r2, [r2, #0]
 8001db4:	68f9      	ldr	r1, [r7, #12]
 8001db6:	430b      	orrs	r3, r1
 8001db8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001dbc:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001dc0:	bf00      	nop
 8001dc2:	3714      	adds	r7, #20
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	ffff87fd 	.word	0xffff87fd
 8001dd0:	ffff2ffe 	.word	0xffff2ffe
 8001dd4:	fffec000 	.word	0xfffec000
 8001dd8:	ffc0efef 	.word	0xffc0efef
 8001ddc:	7fc0ffff 	.word	0x7fc0ffff

08001de0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b0a4      	sub	sp, #144	; 0x90
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001de8:	2301      	movs	r3, #1
 8001dea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001dee:	2300      	movs	r3, #0
 8001df0:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001df2:	2300      	movs	r3, #0
 8001df4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001e04:	2301      	movs	r3, #1
 8001e06:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001e10:	2300      	movs	r3, #0
 8001e12:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001e16:	2301      	movs	r3, #1
 8001e18:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001e1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e20:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001e22:	2300      	movs	r3, #0
 8001e24:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001e32:	2300      	movs	r3, #0
 8001e34:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001e38:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001e3c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001e44:	2300      	movs	r3, #0
 8001e46:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001e54:	2300      	movs	r3, #0
 8001e56:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001e62:	2300      	movs	r3, #0
 8001e64:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001e66:	2300      	movs	r3, #0
 8001e68:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001e72:	2301      	movs	r3, #1
 8001e74:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001e78:	2320      	movs	r3, #32
 8001e7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001e84:	2300      	movs	r3, #0
 8001e86:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001e8a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001e90:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e94:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001e96:	2300      	movs	r3, #0
 8001e98:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001ec4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ec8:	4619      	mov	r1, r3
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7ff fde6 	bl	8001a9c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001edc:	2300      	movs	r3, #0
 8001ede:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001eea:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001eee:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001ef4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ef8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001efa:	2300      	movs	r3, #0
 8001efc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001f00:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001f04:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001f06:	f107 0308 	add.w	r3, r7, #8
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f7ff fee1 	bl	8001cd4 <ETH_SetDMAConfig>
}
 8001f12:	bf00      	nop
 8001f14:	3790      	adds	r7, #144	; 0x90
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b085      	sub	sp, #20
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001f22:	2300      	movs	r3, #0
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	e01d      	b.n	8001f64 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	68d9      	ldr	r1, [r3, #12]
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	4413      	add	r3, r2
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	440b      	add	r3, r1
 8001f38:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	2200      	movs	r2, #0
 8001f44:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001f52:	68b9      	ldr	r1, [r7, #8]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	3206      	adds	r2, #6
 8001f5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	3301      	adds	r3, #1
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2b03      	cmp	r3, #3
 8001f68:	d9de      	bls.n	8001f28 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f78:	461a      	mov	r2, r3
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68da      	ldr	r2, [r3, #12]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f8c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68da      	ldr	r2, [r3, #12]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f9c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8001fa0:	bf00      	nop
 8001fa2:	3714      	adds	r7, #20
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	e023      	b.n	8002002 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6919      	ldr	r1, [r3, #16]
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	4413      	add	r3, r2
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	440b      	add	r3, r1
 8001fca:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	2200      	movs	r2, #0
 8001fee:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001ff0:	68b9      	ldr	r1, [r7, #8]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	3212      	adds	r2, #18
 8001ff8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	3301      	adds	r3, #1
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2b03      	cmp	r3, #3
 8002006:	d9d8      	bls.n	8001fba <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800202e:	461a      	mov	r2, r3
 8002030:	2303      	movs	r3, #3
 8002032:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	691a      	ldr	r2, [r3, #16]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002042:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002056:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800205a:	bf00      	nop
 800205c:	3714      	adds	r7, #20
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
	...

08002068 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002068:	b480      	push	{r7}
 800206a:	b089      	sub	sp, #36	; 0x24
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002072:	2300      	movs	r3, #0
 8002074:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002076:	4b89      	ldr	r3, [pc, #548]	; (800229c <HAL_GPIO_Init+0x234>)
 8002078:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800207a:	e194      	b.n	80023a6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	2101      	movs	r1, #1
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	fa01 f303 	lsl.w	r3, r1, r3
 8002088:	4013      	ands	r3, r2
 800208a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	2b00      	cmp	r3, #0
 8002090:	f000 8186 	beq.w	80023a0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f003 0303 	and.w	r3, r3, #3
 800209c:	2b01      	cmp	r3, #1
 800209e:	d005      	beq.n	80020ac <HAL_GPIO_Init+0x44>
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f003 0303 	and.w	r3, r3, #3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d130      	bne.n	800210e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	2203      	movs	r2, #3
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4013      	ands	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	68da      	ldr	r2, [r3, #12]
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020e2:	2201      	movs	r2, #1
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	43db      	mvns	r3, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4013      	ands	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	091b      	lsrs	r3, r3, #4
 80020f8:	f003 0201 	and.w	r2, r3, #1
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4313      	orrs	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f003 0303 	and.w	r3, r3, #3
 8002116:	2b03      	cmp	r3, #3
 8002118:	d017      	beq.n	800214a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	2203      	movs	r2, #3
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	43db      	mvns	r3, r3
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4013      	ands	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	689a      	ldr	r2, [r3, #8]
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4313      	orrs	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f003 0303 	and.w	r3, r3, #3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d123      	bne.n	800219e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	08da      	lsrs	r2, r3, #3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	3208      	adds	r2, #8
 800215e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002162:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	220f      	movs	r2, #15
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	43db      	mvns	r3, r3
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4013      	ands	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	691a      	ldr	r2, [r3, #16]
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4313      	orrs	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	08da      	lsrs	r2, r3, #3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3208      	adds	r2, #8
 8002198:	69b9      	ldr	r1, [r7, #24]
 800219a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	2203      	movs	r2, #3
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	43db      	mvns	r3, r3
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	4013      	ands	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f003 0203 	and.w	r2, r3, #3
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f000 80e0 	beq.w	80023a0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021e0:	4b2f      	ldr	r3, [pc, #188]	; (80022a0 <HAL_GPIO_Init+0x238>)
 80021e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80021e6:	4a2e      	ldr	r2, [pc, #184]	; (80022a0 <HAL_GPIO_Init+0x238>)
 80021e8:	f043 0302 	orr.w	r3, r3, #2
 80021ec:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80021f0:	4b2b      	ldr	r3, [pc, #172]	; (80022a0 <HAL_GPIO_Init+0x238>)
 80021f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021fe:	4a29      	ldr	r2, [pc, #164]	; (80022a4 <HAL_GPIO_Init+0x23c>)
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	089b      	lsrs	r3, r3, #2
 8002204:	3302      	adds	r3, #2
 8002206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800220a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	f003 0303 	and.w	r3, r3, #3
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	220f      	movs	r2, #15
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	43db      	mvns	r3, r3
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4013      	ands	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a20      	ldr	r2, [pc, #128]	; (80022a8 <HAL_GPIO_Init+0x240>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d052      	beq.n	80022d0 <HAL_GPIO_Init+0x268>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a1f      	ldr	r2, [pc, #124]	; (80022ac <HAL_GPIO_Init+0x244>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d031      	beq.n	8002296 <HAL_GPIO_Init+0x22e>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a1e      	ldr	r2, [pc, #120]	; (80022b0 <HAL_GPIO_Init+0x248>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d02b      	beq.n	8002292 <HAL_GPIO_Init+0x22a>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a1d      	ldr	r2, [pc, #116]	; (80022b4 <HAL_GPIO_Init+0x24c>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d025      	beq.n	800228e <HAL_GPIO_Init+0x226>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a1c      	ldr	r2, [pc, #112]	; (80022b8 <HAL_GPIO_Init+0x250>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d01f      	beq.n	800228a <HAL_GPIO_Init+0x222>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a1b      	ldr	r2, [pc, #108]	; (80022bc <HAL_GPIO_Init+0x254>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d019      	beq.n	8002286 <HAL_GPIO_Init+0x21e>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a1a      	ldr	r2, [pc, #104]	; (80022c0 <HAL_GPIO_Init+0x258>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d013      	beq.n	8002282 <HAL_GPIO_Init+0x21a>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a19      	ldr	r2, [pc, #100]	; (80022c4 <HAL_GPIO_Init+0x25c>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d00d      	beq.n	800227e <HAL_GPIO_Init+0x216>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a18      	ldr	r2, [pc, #96]	; (80022c8 <HAL_GPIO_Init+0x260>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d007      	beq.n	800227a <HAL_GPIO_Init+0x212>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a17      	ldr	r2, [pc, #92]	; (80022cc <HAL_GPIO_Init+0x264>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d101      	bne.n	8002276 <HAL_GPIO_Init+0x20e>
 8002272:	2309      	movs	r3, #9
 8002274:	e02d      	b.n	80022d2 <HAL_GPIO_Init+0x26a>
 8002276:	230a      	movs	r3, #10
 8002278:	e02b      	b.n	80022d2 <HAL_GPIO_Init+0x26a>
 800227a:	2308      	movs	r3, #8
 800227c:	e029      	b.n	80022d2 <HAL_GPIO_Init+0x26a>
 800227e:	2307      	movs	r3, #7
 8002280:	e027      	b.n	80022d2 <HAL_GPIO_Init+0x26a>
 8002282:	2306      	movs	r3, #6
 8002284:	e025      	b.n	80022d2 <HAL_GPIO_Init+0x26a>
 8002286:	2305      	movs	r3, #5
 8002288:	e023      	b.n	80022d2 <HAL_GPIO_Init+0x26a>
 800228a:	2304      	movs	r3, #4
 800228c:	e021      	b.n	80022d2 <HAL_GPIO_Init+0x26a>
 800228e:	2303      	movs	r3, #3
 8002290:	e01f      	b.n	80022d2 <HAL_GPIO_Init+0x26a>
 8002292:	2302      	movs	r3, #2
 8002294:	e01d      	b.n	80022d2 <HAL_GPIO_Init+0x26a>
 8002296:	2301      	movs	r3, #1
 8002298:	e01b      	b.n	80022d2 <HAL_GPIO_Init+0x26a>
 800229a:	bf00      	nop
 800229c:	58000080 	.word	0x58000080
 80022a0:	58024400 	.word	0x58024400
 80022a4:	58000400 	.word	0x58000400
 80022a8:	58020000 	.word	0x58020000
 80022ac:	58020400 	.word	0x58020400
 80022b0:	58020800 	.word	0x58020800
 80022b4:	58020c00 	.word	0x58020c00
 80022b8:	58021000 	.word	0x58021000
 80022bc:	58021400 	.word	0x58021400
 80022c0:	58021800 	.word	0x58021800
 80022c4:	58021c00 	.word	0x58021c00
 80022c8:	58022000 	.word	0x58022000
 80022cc:	58022400 	.word	0x58022400
 80022d0:	2300      	movs	r3, #0
 80022d2:	69fa      	ldr	r2, [r7, #28]
 80022d4:	f002 0203 	and.w	r2, r2, #3
 80022d8:	0092      	lsls	r2, r2, #2
 80022da:	4093      	lsls	r3, r2
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4313      	orrs	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022e2:	4938      	ldr	r1, [pc, #224]	; (80023c4 <HAL_GPIO_Init+0x35c>)
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	089b      	lsrs	r3, r3, #2
 80022e8:	3302      	adds	r3, #2
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	43db      	mvns	r3, r3
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	4013      	ands	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d003      	beq.n	8002316 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	4313      	orrs	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002316:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800231e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	43db      	mvns	r3, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4013      	ands	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d003      	beq.n	8002344 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	4313      	orrs	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002344:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	43db      	mvns	r3, r3
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	4013      	ands	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d003      	beq.n	8002370 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	4313      	orrs	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	43db      	mvns	r3, r3
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4013      	ands	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	4313      	orrs	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	3301      	adds	r3, #1
 80023a4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	fa22 f303 	lsr.w	r3, r2, r3
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f47f ae63 	bne.w	800207c <HAL_GPIO_Init+0x14>
  }
}
 80023b6:	bf00      	nop
 80023b8:	bf00      	nop
 80023ba:	3724      	adds	r7, #36	; 0x24
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	58000400 	.word	0x58000400

080023c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	460b      	mov	r3, r1
 80023d2:	807b      	strh	r3, [r7, #2]
 80023d4:	4613      	mov	r3, r2
 80023d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023d8:	787b      	ldrb	r3, [r7, #1]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023de:	887a      	ldrh	r2, [r7, #2]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80023e4:	e003      	b.n	80023ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80023e6:	887b      	ldrh	r3, [r7, #2]
 80023e8:	041a      	lsls	r2, r3, #16
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	619a      	str	r2, [r3, #24]
}
 80023ee:	bf00      	nop
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
	...

080023fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e07f      	b.n	800250e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d106      	bne.n	8002428 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7fe fbdc 	bl	8000be0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2224      	movs	r2, #36	; 0x24
 800242c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 0201 	bic.w	r2, r2, #1
 800243e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800244c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800245c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d107      	bne.n	8002476 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689a      	ldr	r2, [r3, #8]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002472:	609a      	str	r2, [r3, #8]
 8002474:	e006      	b.n	8002484 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	689a      	ldr	r2, [r3, #8]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002482:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	2b02      	cmp	r3, #2
 800248a:	d104      	bne.n	8002496 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002494:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6859      	ldr	r1, [r3, #4]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	4b1d      	ldr	r3, [pc, #116]	; (8002518 <HAL_I2C_Init+0x11c>)
 80024a2:	430b      	orrs	r3, r1
 80024a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68da      	ldr	r2, [r3, #12]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	691a      	ldr	r2, [r3, #16]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	430a      	orrs	r2, r1
 80024ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	69d9      	ldr	r1, [r3, #28]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a1a      	ldr	r2, [r3, #32]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	430a      	orrs	r2, r1
 80024de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f042 0201 	orr.w	r2, r2, #1
 80024ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2220      	movs	r2, #32
 80024fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	02008000 	.word	0x02008000

0800251c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b088      	sub	sp, #32
 8002520:	af02      	add	r7, sp, #8
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	607a      	str	r2, [r7, #4]
 8002526:	461a      	mov	r2, r3
 8002528:	460b      	mov	r3, r1
 800252a:	817b      	strh	r3, [r7, #10]
 800252c:	4613      	mov	r3, r2
 800252e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b20      	cmp	r3, #32
 800253a:	f040 80da 	bne.w	80026f2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002544:	2b01      	cmp	r3, #1
 8002546:	d101      	bne.n	800254c <HAL_I2C_Master_Transmit+0x30>
 8002548:	2302      	movs	r3, #2
 800254a:	e0d3      	b.n	80026f4 <HAL_I2C_Master_Transmit+0x1d8>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002554:	f7ff f834 	bl	80015c0 <HAL_GetTick>
 8002558:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	9300      	str	r3, [sp, #0]
 800255e:	2319      	movs	r3, #25
 8002560:	2201      	movs	r2, #1
 8002562:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f000 f9e6 	bl	8002938 <I2C_WaitOnFlagUntilTimeout>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e0be      	b.n	80026f4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2221      	movs	r2, #33	; 0x21
 800257a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2210      	movs	r2, #16
 8002582:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	893a      	ldrh	r2, [r7, #8]
 8002596:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2200      	movs	r2, #0
 800259c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	2bff      	cmp	r3, #255	; 0xff
 80025a6:	d90e      	bls.n	80025c6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	22ff      	movs	r2, #255	; 0xff
 80025ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b2:	b2da      	uxtb	r2, r3
 80025b4:	8979      	ldrh	r1, [r7, #10]
 80025b6:	4b51      	ldr	r3, [pc, #324]	; (80026fc <HAL_I2C_Master_Transmit+0x1e0>)
 80025b8:	9300      	str	r3, [sp, #0]
 80025ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f000 fbf6 	bl	8002db0 <I2C_TransferConfig>
 80025c4:	e06c      	b.n	80026a0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	8979      	ldrh	r1, [r7, #10]
 80025d8:	4b48      	ldr	r3, [pc, #288]	; (80026fc <HAL_I2C_Master_Transmit+0x1e0>)
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f000 fbe5 	bl	8002db0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80025e6:	e05b      	b.n	80026a0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025e8:	697a      	ldr	r2, [r7, #20]
 80025ea:	6a39      	ldr	r1, [r7, #32]
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	f000 f9f2 	bl	80029d6 <I2C_WaitOnTXISFlagUntilTimeout>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e07b      	b.n	80026f4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002600:	781a      	ldrb	r2, [r3, #0]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260c:	1c5a      	adds	r2, r3, #1
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002616:	b29b      	uxth	r3, r3
 8002618:	3b01      	subs	r3, #1
 800261a:	b29a      	uxth	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002624:	3b01      	subs	r3, #1
 8002626:	b29a      	uxth	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002630:	b29b      	uxth	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d034      	beq.n	80026a0 <HAL_I2C_Master_Transmit+0x184>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800263a:	2b00      	cmp	r3, #0
 800263c:	d130      	bne.n	80026a0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	6a3b      	ldr	r3, [r7, #32]
 8002644:	2200      	movs	r2, #0
 8002646:	2180      	movs	r1, #128	; 0x80
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f000 f975 	bl	8002938 <I2C_WaitOnFlagUntilTimeout>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e04d      	b.n	80026f4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265c:	b29b      	uxth	r3, r3
 800265e:	2bff      	cmp	r3, #255	; 0xff
 8002660:	d90e      	bls.n	8002680 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	22ff      	movs	r2, #255	; 0xff
 8002666:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800266c:	b2da      	uxtb	r2, r3
 800266e:	8979      	ldrh	r1, [r7, #10]
 8002670:	2300      	movs	r3, #0
 8002672:	9300      	str	r3, [sp, #0]
 8002674:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f000 fb99 	bl	8002db0 <I2C_TransferConfig>
 800267e:	e00f      	b.n	80026a0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002684:	b29a      	uxth	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800268e:	b2da      	uxtb	r2, r3
 8002690:	8979      	ldrh	r1, [r7, #10]
 8002692:	2300      	movs	r3, #0
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 fb88 	bl	8002db0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d19e      	bne.n	80025e8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	6a39      	ldr	r1, [r7, #32]
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f000 f9d8 	bl	8002a64 <I2C_WaitOnSTOPFlagUntilTimeout>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e01a      	b.n	80026f4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2220      	movs	r2, #32
 80026c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6859      	ldr	r1, [r3, #4]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	4b0b      	ldr	r3, [pc, #44]	; (8002700 <HAL_I2C_Master_Transmit+0x1e4>)
 80026d2:	400b      	ands	r3, r1
 80026d4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2220      	movs	r2, #32
 80026da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026ee:	2300      	movs	r3, #0
 80026f0:	e000      	b.n	80026f4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80026f2:	2302      	movs	r3, #2
  }
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	80002000 	.word	0x80002000
 8002700:	fe00e800 	.word	0xfe00e800

08002704 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b088      	sub	sp, #32
 8002708:	af02      	add	r7, sp, #8
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	607a      	str	r2, [r7, #4]
 800270e:	461a      	mov	r2, r3
 8002710:	460b      	mov	r3, r1
 8002712:	817b      	strh	r3, [r7, #10]
 8002714:	4613      	mov	r3, r2
 8002716:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b20      	cmp	r3, #32
 8002722:	f040 80db 	bne.w	80028dc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800272c:	2b01      	cmp	r3, #1
 800272e:	d101      	bne.n	8002734 <HAL_I2C_Master_Receive+0x30>
 8002730:	2302      	movs	r3, #2
 8002732:	e0d4      	b.n	80028de <HAL_I2C_Master_Receive+0x1da>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800273c:	f7fe ff40 	bl	80015c0 <HAL_GetTick>
 8002740:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	9300      	str	r3, [sp, #0]
 8002746:	2319      	movs	r3, #25
 8002748:	2201      	movs	r2, #1
 800274a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f000 f8f2 	bl	8002938 <I2C_WaitOnFlagUntilTimeout>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e0bf      	b.n	80028de <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2222      	movs	r2, #34	; 0x22
 8002762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2210      	movs	r2, #16
 800276a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	893a      	ldrh	r2, [r7, #8]
 800277e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2200      	movs	r2, #0
 8002784:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800278a:	b29b      	uxth	r3, r3
 800278c:	2bff      	cmp	r3, #255	; 0xff
 800278e:	d90e      	bls.n	80027ae <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	22ff      	movs	r2, #255	; 0xff
 8002794:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800279a:	b2da      	uxtb	r2, r3
 800279c:	8979      	ldrh	r1, [r7, #10]
 800279e:	4b52      	ldr	r3, [pc, #328]	; (80028e8 <HAL_I2C_Master_Receive+0x1e4>)
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f000 fb02 	bl	8002db0 <I2C_TransferConfig>
 80027ac:	e06d      	b.n	800288a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	8979      	ldrh	r1, [r7, #10]
 80027c0:	4b49      	ldr	r3, [pc, #292]	; (80028e8 <HAL_I2C_Master_Receive+0x1e4>)
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f000 faf1 	bl	8002db0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80027ce:	e05c      	b.n	800288a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027d0:	697a      	ldr	r2, [r7, #20]
 80027d2:	6a39      	ldr	r1, [r7, #32]
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f000 f989 	bl	8002aec <I2C_WaitOnRXNEFlagUntilTimeout>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e07c      	b.n	80028de <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f6:	1c5a      	adds	r2, r3, #1
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002800:	3b01      	subs	r3, #1
 8002802:	b29a      	uxth	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800280c:	b29b      	uxth	r3, r3
 800280e:	3b01      	subs	r3, #1
 8002810:	b29a      	uxth	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800281a:	b29b      	uxth	r3, r3
 800281c:	2b00      	cmp	r3, #0
 800281e:	d034      	beq.n	800288a <HAL_I2C_Master_Receive+0x186>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002824:	2b00      	cmp	r3, #0
 8002826:	d130      	bne.n	800288a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	6a3b      	ldr	r3, [r7, #32]
 800282e:	2200      	movs	r2, #0
 8002830:	2180      	movs	r1, #128	; 0x80
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f000 f880 	bl	8002938 <I2C_WaitOnFlagUntilTimeout>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e04d      	b.n	80028de <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002846:	b29b      	uxth	r3, r3
 8002848:	2bff      	cmp	r3, #255	; 0xff
 800284a:	d90e      	bls.n	800286a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	22ff      	movs	r2, #255	; 0xff
 8002850:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002856:	b2da      	uxtb	r2, r3
 8002858:	8979      	ldrh	r1, [r7, #10]
 800285a:	2300      	movs	r3, #0
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f000 faa4 	bl	8002db0 <I2C_TransferConfig>
 8002868:	e00f      	b.n	800288a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800286e:	b29a      	uxth	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002878:	b2da      	uxtb	r2, r3
 800287a:	8979      	ldrh	r1, [r7, #10]
 800287c:	2300      	movs	r3, #0
 800287e:	9300      	str	r3, [sp, #0]
 8002880:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f000 fa93 	bl	8002db0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800288e:	b29b      	uxth	r3, r3
 8002890:	2b00      	cmp	r3, #0
 8002892:	d19d      	bne.n	80027d0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002894:	697a      	ldr	r2, [r7, #20]
 8002896:	6a39      	ldr	r1, [r7, #32]
 8002898:	68f8      	ldr	r0, [r7, #12]
 800289a:	f000 f8e3 	bl	8002a64 <I2C_WaitOnSTOPFlagUntilTimeout>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e01a      	b.n	80028de <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2220      	movs	r2, #32
 80028ae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6859      	ldr	r1, [r3, #4]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	4b0c      	ldr	r3, [pc, #48]	; (80028ec <HAL_I2C_Master_Receive+0x1e8>)
 80028bc:	400b      	ands	r3, r1
 80028be:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2220      	movs	r2, #32
 80028c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028d8:	2300      	movs	r3, #0
 80028da:	e000      	b.n	80028de <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80028dc:	2302      	movs	r3, #2
  }
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3718      	adds	r7, #24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	80002400 	.word	0x80002400
 80028ec:	fe00e800 	.word	0xfe00e800

080028f0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b02      	cmp	r3, #2
 8002904:	d103      	bne.n	800290e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2200      	movs	r2, #0
 800290c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b01      	cmp	r3, #1
 800291a:	d007      	beq.n	800292c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	699a      	ldr	r2, [r3, #24]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f042 0201 	orr.w	r2, r2, #1
 800292a:	619a      	str	r2, [r3, #24]
  }
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	603b      	str	r3, [r7, #0]
 8002944:	4613      	mov	r3, r2
 8002946:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002948:	e031      	b.n	80029ae <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002950:	d02d      	beq.n	80029ae <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002952:	f7fe fe35 	bl	80015c0 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	429a      	cmp	r2, r3
 8002960:	d302      	bcc.n	8002968 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d122      	bne.n	80029ae <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	699a      	ldr	r2, [r3, #24]
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	4013      	ands	r3, r2
 8002972:	68ba      	ldr	r2, [r7, #8]
 8002974:	429a      	cmp	r2, r3
 8002976:	bf0c      	ite	eq
 8002978:	2301      	moveq	r3, #1
 800297a:	2300      	movne	r3, #0
 800297c:	b2db      	uxtb	r3, r3
 800297e:	461a      	mov	r2, r3
 8002980:	79fb      	ldrb	r3, [r7, #7]
 8002982:	429a      	cmp	r2, r3
 8002984:	d113      	bne.n	80029ae <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298a:	f043 0220 	orr.w	r2, r3, #32
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2220      	movs	r2, #32
 8002996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e00f      	b.n	80029ce <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	699a      	ldr	r2, [r3, #24]
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	4013      	ands	r3, r2
 80029b8:	68ba      	ldr	r2, [r7, #8]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	bf0c      	ite	eq
 80029be:	2301      	moveq	r3, #1
 80029c0:	2300      	movne	r3, #0
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	461a      	mov	r2, r3
 80029c6:	79fb      	ldrb	r3, [r7, #7]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d0be      	beq.n	800294a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b084      	sub	sp, #16
 80029da:	af00      	add	r7, sp, #0
 80029dc:	60f8      	str	r0, [r7, #12]
 80029de:	60b9      	str	r1, [r7, #8]
 80029e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029e2:	e033      	b.n	8002a4c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	68b9      	ldr	r1, [r7, #8]
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f000 f901 	bl	8002bf0 <I2C_IsErrorOccurred>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e031      	b.n	8002a5c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029fe:	d025      	beq.n	8002a4c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a00:	f7fe fdde 	bl	80015c0 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d302      	bcc.n	8002a16 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d11a      	bne.n	8002a4c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d013      	beq.n	8002a4c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a28:	f043 0220 	orr.w	r2, r3, #32
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2220      	movs	r2, #32
 8002a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e007      	b.n	8002a5c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d1c4      	bne.n	80029e4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a70:	e02f      	b.n	8002ad2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	68b9      	ldr	r1, [r7, #8]
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 f8ba 	bl	8002bf0 <I2C_IsErrorOccurred>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e02d      	b.n	8002ae2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a86:	f7fe fd9b 	bl	80015c0 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	68ba      	ldr	r2, [r7, #8]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d302      	bcc.n	8002a9c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d11a      	bne.n	8002ad2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	f003 0320 	and.w	r3, r3, #32
 8002aa6:	2b20      	cmp	r3, #32
 8002aa8:	d013      	beq.n	8002ad2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aae:	f043 0220 	orr.w	r2, r3, #32
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2220      	movs	r2, #32
 8002aba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e007      	b.n	8002ae2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	f003 0320 	and.w	r3, r3, #32
 8002adc:	2b20      	cmp	r3, #32
 8002ade:	d1c8      	bne.n	8002a72 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
	...

08002aec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002af8:	e06b      	b.n	8002bd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	68b9      	ldr	r1, [r7, #8]
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f000 f876 	bl	8002bf0 <I2C_IsErrorOccurred>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e069      	b.n	8002be2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	f003 0320 	and.w	r3, r3, #32
 8002b18:	2b20      	cmp	r3, #32
 8002b1a:	d138      	bne.n	8002b8e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	f003 0304 	and.w	r3, r3, #4
 8002b26:	2b04      	cmp	r3, #4
 8002b28:	d105      	bne.n	8002b36 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002b32:	2300      	movs	r3, #0
 8002b34:	e055      	b.n	8002be2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	f003 0310 	and.w	r3, r3, #16
 8002b40:	2b10      	cmp	r3, #16
 8002b42:	d107      	bne.n	8002b54 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2210      	movs	r2, #16
 8002b4a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2204      	movs	r2, #4
 8002b50:	645a      	str	r2, [r3, #68]	; 0x44
 8002b52:	e002      	b.n	8002b5a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2220      	movs	r2, #32
 8002b60:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6859      	ldr	r1, [r3, #4]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	4b1f      	ldr	r3, [pc, #124]	; (8002bec <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8002b6e:	400b      	ands	r3, r1
 8002b70:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2220      	movs	r2, #32
 8002b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e029      	b.n	8002be2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b8e:	f7fe fd17 	bl	80015c0 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	68ba      	ldr	r2, [r7, #8]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d302      	bcc.n	8002ba4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d116      	bne.n	8002bd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	f003 0304 	and.w	r3, r3, #4
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	d00f      	beq.n	8002bd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb6:	f043 0220 	orr.w	r2, r3, #32
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2220      	movs	r2, #32
 8002bc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e007      	b.n	8002be2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	2b04      	cmp	r3, #4
 8002bde:	d18c      	bne.n	8002afa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	fe00e800 	.word	0xfe00e800

08002bf0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b08a      	sub	sp, #40	; 0x28
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	f003 0310 	and.w	r3, r3, #16
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d068      	beq.n	8002cee <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2210      	movs	r2, #16
 8002c22:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c24:	e049      	b.n	8002cba <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c2c:	d045      	beq.n	8002cba <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c2e:	f7fe fcc7 	bl	80015c0 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	68ba      	ldr	r2, [r7, #8]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d302      	bcc.n	8002c44 <I2C_IsErrorOccurred+0x54>
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d13a      	bne.n	8002cba <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c4e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c56:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c66:	d121      	bne.n	8002cac <I2C_IsErrorOccurred+0xbc>
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c6e:	d01d      	beq.n	8002cac <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002c70:	7cfb      	ldrb	r3, [r7, #19]
 8002c72:	2b20      	cmp	r3, #32
 8002c74:	d01a      	beq.n	8002cac <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c84:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002c86:	f7fe fc9b 	bl	80015c0 <HAL_GetTick>
 8002c8a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c8c:	e00e      	b.n	8002cac <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002c8e:	f7fe fc97 	bl	80015c0 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	2b19      	cmp	r3, #25
 8002c9a:	d907      	bls.n	8002cac <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002c9c:	6a3b      	ldr	r3, [r7, #32]
 8002c9e:	f043 0320 	orr.w	r3, r3, #32
 8002ca2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002caa:	e006      	b.n	8002cba <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	f003 0320 	and.w	r3, r3, #32
 8002cb6:	2b20      	cmp	r3, #32
 8002cb8:	d1e9      	bne.n	8002c8e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	f003 0320 	and.w	r3, r3, #32
 8002cc4:	2b20      	cmp	r3, #32
 8002cc6:	d003      	beq.n	8002cd0 <I2C_IsErrorOccurred+0xe0>
 8002cc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d0aa      	beq.n	8002c26 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002cd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d103      	bne.n	8002ce0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2220      	movs	r2, #32
 8002cde:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002ce0:	6a3b      	ldr	r3, [r7, #32]
 8002ce2:	f043 0304 	orr.w	r3, r3, #4
 8002ce6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00b      	beq.n	8002d18 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002d00:	6a3b      	ldr	r3, [r7, #32]
 8002d02:	f043 0301 	orr.w	r3, r3, #1
 8002d06:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d10:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00b      	beq.n	8002d3a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002d22:	6a3b      	ldr	r3, [r7, #32]
 8002d24:	f043 0308 	orr.w	r3, r3, #8
 8002d28:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d32:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00b      	beq.n	8002d5c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002d44:	6a3b      	ldr	r3, [r7, #32]
 8002d46:	f043 0302 	orr.w	r3, r3, #2
 8002d4a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d54:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002d5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d01c      	beq.n	8002d9e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f7ff fdc3 	bl	80028f0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6859      	ldr	r1, [r3, #4]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	4b0d      	ldr	r3, [pc, #52]	; (8002dac <I2C_IsErrorOccurred+0x1bc>)
 8002d76:	400b      	ands	r3, r1
 8002d78:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d7e:	6a3b      	ldr	r3, [r7, #32]
 8002d80:	431a      	orrs	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2220      	movs	r2, #32
 8002d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002d9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3728      	adds	r7, #40	; 0x28
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	fe00e800 	.word	0xfe00e800

08002db0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b087      	sub	sp, #28
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	607b      	str	r3, [r7, #4]
 8002dba:	460b      	mov	r3, r1
 8002dbc:	817b      	strh	r3, [r7, #10]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002dc2:	897b      	ldrh	r3, [r7, #10]
 8002dc4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002dc8:	7a7b      	ldrb	r3, [r7, #9]
 8002dca:	041b      	lsls	r3, r3, #16
 8002dcc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002dd0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002dd6:	6a3b      	ldr	r3, [r7, #32]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002dde:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	685a      	ldr	r2, [r3, #4]
 8002de6:	6a3b      	ldr	r3, [r7, #32]
 8002de8:	0d5b      	lsrs	r3, r3, #21
 8002dea:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002dee:	4b08      	ldr	r3, [pc, #32]	; (8002e10 <I2C_TransferConfig+0x60>)
 8002df0:	430b      	orrs	r3, r1
 8002df2:	43db      	mvns	r3, r3
 8002df4:	ea02 0103 	and.w	r1, r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	697a      	ldr	r2, [r7, #20]
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002e02:	bf00      	nop
 8002e04:	371c      	adds	r7, #28
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	03ff63ff 	.word	0x03ff63ff

08002e14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b20      	cmp	r3, #32
 8002e28:	d138      	bne.n	8002e9c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d101      	bne.n	8002e38 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e34:	2302      	movs	r3, #2
 8002e36:	e032      	b.n	8002e9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2224      	movs	r2, #36	; 0x24
 8002e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0201 	bic.w	r2, r2, #1
 8002e56:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e66:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6819      	ldr	r1, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f042 0201 	orr.w	r2, r2, #1
 8002e86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	e000      	b.n	8002e9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e9c:	2302      	movs	r3, #2
  }
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b085      	sub	sp, #20
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
 8002eb2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	2b20      	cmp	r3, #32
 8002ebe:	d139      	bne.n	8002f34 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d101      	bne.n	8002ece <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e033      	b.n	8002f36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2224      	movs	r2, #36	; 0x24
 8002eda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 0201 	bic.w	r2, r2, #1
 8002eec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002efc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	021b      	lsls	r3, r3, #8
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f042 0201 	orr.w	r2, r2, #1
 8002f1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2220      	movs	r2, #32
 8002f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f30:	2300      	movs	r3, #0
 8002f32:	e000      	b.n	8002f36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f34:	2302      	movs	r3, #2
  }
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3714      	adds	r7, #20
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
	...

08002f44 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f4c:	4b0d      	ldr	r3, [pc, #52]	; (8002f84 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8002f4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002f52:	4a0c      	ldr	r2, [pc, #48]	; (8002f84 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8002f54:	f043 0302 	orr.w	r3, r3, #2
 8002f58:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002f5c:	4b09      	ldr	r3, [pc, #36]	; (8002f84 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8002f5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8002f6a:	4b07      	ldr	r3, [pc, #28]	; (8002f88 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	4906      	ldr	r1, [pc, #24]	; (8002f88 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	604b      	str	r3, [r1, #4]
}
 8002f76:	bf00      	nop
 8002f78:	3714      	adds	r7, #20
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	58024400 	.word	0x58024400
 8002f88:	58000400 	.word	0x58000400

08002f8c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f8e:	b08f      	sub	sp, #60	; 0x3c
 8002f90:	af0a      	add	r7, sp, #40	; 0x28
 8002f92:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e116      	b.n	80031cc <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d106      	bne.n	8002fbe <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f7fe fa0b 	bl	80013d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2203      	movs	r2, #3
 8002fc2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d102      	bne.n	8002fd8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f004 fc67 	bl	80078b0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	603b      	str	r3, [r7, #0]
 8002fe8:	687e      	ldr	r6, [r7, #4]
 8002fea:	466d      	mov	r5, sp
 8002fec:	f106 0410 	add.w	r4, r6, #16
 8002ff0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ff2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ff4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ff6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ff8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ffc:	e885 0003 	stmia.w	r5, {r0, r1}
 8003000:	1d33      	adds	r3, r6, #4
 8003002:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003004:	6838      	ldr	r0, [r7, #0]
 8003006:	f004 fbe5 	bl	80077d4 <USB_CoreInit>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d005      	beq.n	800301c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2202      	movs	r2, #2
 8003014:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e0d7      	b.n	80031cc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2100      	movs	r1, #0
 8003022:	4618      	mov	r0, r3
 8003024:	f004 fc55 	bl	80078d2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003028:	2300      	movs	r3, #0
 800302a:	73fb      	strb	r3, [r7, #15]
 800302c:	e04a      	b.n	80030c4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800302e:	7bfa      	ldrb	r2, [r7, #15]
 8003030:	6879      	ldr	r1, [r7, #4]
 8003032:	4613      	mov	r3, r2
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	4413      	add	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	440b      	add	r3, r1
 800303c:	333d      	adds	r3, #61	; 0x3d
 800303e:	2201      	movs	r2, #1
 8003040:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003042:	7bfa      	ldrb	r2, [r7, #15]
 8003044:	6879      	ldr	r1, [r7, #4]
 8003046:	4613      	mov	r3, r2
 8003048:	00db      	lsls	r3, r3, #3
 800304a:	4413      	add	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	440b      	add	r3, r1
 8003050:	333c      	adds	r3, #60	; 0x3c
 8003052:	7bfa      	ldrb	r2, [r7, #15]
 8003054:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003056:	7bfa      	ldrb	r2, [r7, #15]
 8003058:	7bfb      	ldrb	r3, [r7, #15]
 800305a:	b298      	uxth	r0, r3
 800305c:	6879      	ldr	r1, [r7, #4]
 800305e:	4613      	mov	r3, r2
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	4413      	add	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	440b      	add	r3, r1
 8003068:	3356      	adds	r3, #86	; 0x56
 800306a:	4602      	mov	r2, r0
 800306c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800306e:	7bfa      	ldrb	r2, [r7, #15]
 8003070:	6879      	ldr	r1, [r7, #4]
 8003072:	4613      	mov	r3, r2
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	4413      	add	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	440b      	add	r3, r1
 800307c:	3340      	adds	r3, #64	; 0x40
 800307e:	2200      	movs	r2, #0
 8003080:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003082:	7bfa      	ldrb	r2, [r7, #15]
 8003084:	6879      	ldr	r1, [r7, #4]
 8003086:	4613      	mov	r3, r2
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	4413      	add	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	440b      	add	r3, r1
 8003090:	3344      	adds	r3, #68	; 0x44
 8003092:	2200      	movs	r2, #0
 8003094:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003096:	7bfa      	ldrb	r2, [r7, #15]
 8003098:	6879      	ldr	r1, [r7, #4]
 800309a:	4613      	mov	r3, r2
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	4413      	add	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	440b      	add	r3, r1
 80030a4:	3348      	adds	r3, #72	; 0x48
 80030a6:	2200      	movs	r2, #0
 80030a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80030aa:	7bfa      	ldrb	r2, [r7, #15]
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	4613      	mov	r3, r2
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	4413      	add	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	440b      	add	r3, r1
 80030b8:	334c      	adds	r3, #76	; 0x4c
 80030ba:	2200      	movs	r2, #0
 80030bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030be:	7bfb      	ldrb	r3, [r7, #15]
 80030c0:	3301      	adds	r3, #1
 80030c2:	73fb      	strb	r3, [r7, #15]
 80030c4:	7bfa      	ldrb	r2, [r7, #15]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d3af      	bcc.n	800302e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030ce:	2300      	movs	r3, #0
 80030d0:	73fb      	strb	r3, [r7, #15]
 80030d2:	e044      	b.n	800315e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80030d4:	7bfa      	ldrb	r2, [r7, #15]
 80030d6:	6879      	ldr	r1, [r7, #4]
 80030d8:	4613      	mov	r3, r2
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	4413      	add	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80030e6:	2200      	movs	r2, #0
 80030e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80030ea:	7bfa      	ldrb	r2, [r7, #15]
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	4613      	mov	r3, r2
 80030f0:	00db      	lsls	r3, r3, #3
 80030f2:	4413      	add	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	440b      	add	r3, r1
 80030f8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80030fc:	7bfa      	ldrb	r2, [r7, #15]
 80030fe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003100:	7bfa      	ldrb	r2, [r7, #15]
 8003102:	6879      	ldr	r1, [r7, #4]
 8003104:	4613      	mov	r3, r2
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	4413      	add	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	440b      	add	r3, r1
 800310e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003112:	2200      	movs	r2, #0
 8003114:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003116:	7bfa      	ldrb	r2, [r7, #15]
 8003118:	6879      	ldr	r1, [r7, #4]
 800311a:	4613      	mov	r3, r2
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	4413      	add	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	440b      	add	r3, r1
 8003124:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8003128:	2200      	movs	r2, #0
 800312a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800312c:	7bfa      	ldrb	r2, [r7, #15]
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	4613      	mov	r3, r2
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	4413      	add	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	440b      	add	r3, r1
 800313a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800313e:	2200      	movs	r2, #0
 8003140:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003142:	7bfa      	ldrb	r2, [r7, #15]
 8003144:	6879      	ldr	r1, [r7, #4]
 8003146:	4613      	mov	r3, r2
 8003148:	00db      	lsls	r3, r3, #3
 800314a:	4413      	add	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	440b      	add	r3, r1
 8003150:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003158:	7bfb      	ldrb	r3, [r7, #15]
 800315a:	3301      	adds	r3, #1
 800315c:	73fb      	strb	r3, [r7, #15]
 800315e:	7bfa      	ldrb	r2, [r7, #15]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	429a      	cmp	r2, r3
 8003166:	d3b5      	bcc.n	80030d4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	603b      	str	r3, [r7, #0]
 800316e:	687e      	ldr	r6, [r7, #4]
 8003170:	466d      	mov	r5, sp
 8003172:	f106 0410 	add.w	r4, r6, #16
 8003176:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003178:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800317a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800317c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800317e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003182:	e885 0003 	stmia.w	r5, {r0, r1}
 8003186:	1d33      	adds	r3, r6, #4
 8003188:	cb0e      	ldmia	r3, {r1, r2, r3}
 800318a:	6838      	ldr	r0, [r7, #0]
 800318c:	f004 fbee 	bl	800796c <USB_DevInit>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d005      	beq.n	80031a2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2202      	movs	r2, #2
 800319a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e014      	b.n	80031cc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d102      	bne.n	80031c0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f80a 	bl	80031d4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f004 fdac 	bl	8007d22 <USB_DevDisconnect>

  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3714      	adds	r7, #20
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031d4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003202:	4b05      	ldr	r3, [pc, #20]	; (8003218 <HAL_PCDEx_ActivateLPM+0x44>)
 8003204:	4313      	orrs	r3, r2
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3714      	adds	r7, #20
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr
 8003218:	10000003 	.word	0x10000003

0800321c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003224:	4b19      	ldr	r3, [pc, #100]	; (800328c <HAL_PWREx_ConfigSupply+0x70>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	2b04      	cmp	r3, #4
 800322e:	d00a      	beq.n	8003246 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003230:	4b16      	ldr	r3, [pc, #88]	; (800328c <HAL_PWREx_ConfigSupply+0x70>)
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	f003 0307 	and.w	r3, r3, #7
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	429a      	cmp	r2, r3
 800323c:	d001      	beq.n	8003242 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e01f      	b.n	8003282 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003242:	2300      	movs	r3, #0
 8003244:	e01d      	b.n	8003282 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003246:	4b11      	ldr	r3, [pc, #68]	; (800328c <HAL_PWREx_ConfigSupply+0x70>)
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	f023 0207 	bic.w	r2, r3, #7
 800324e:	490f      	ldr	r1, [pc, #60]	; (800328c <HAL_PWREx_ConfigSupply+0x70>)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4313      	orrs	r3, r2
 8003254:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003256:	f7fe f9b3 	bl	80015c0 <HAL_GetTick>
 800325a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800325c:	e009      	b.n	8003272 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800325e:	f7fe f9af 	bl	80015c0 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800326c:	d901      	bls.n	8003272 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e007      	b.n	8003282 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003272:	4b06      	ldr	r3, [pc, #24]	; (800328c <HAL_PWREx_ConfigSupply+0x70>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800327a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800327e:	d1ee      	bne.n	800325e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	58024800 	.word	0x58024800

08003290 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003294:	4b05      	ldr	r3, [pc, #20]	; (80032ac <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	4a04      	ldr	r2, [pc, #16]	; (80032ac <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800329a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800329e:	60d3      	str	r3, [r2, #12]
}
 80032a0:	bf00      	nop
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	58024800 	.word	0x58024800

080032b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08c      	sub	sp, #48	; 0x30
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d102      	bne.n	80032c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	f000 bc48 	b.w	8003b54 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 8088 	beq.w	80033e2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032d2:	4b99      	ldr	r3, [pc, #612]	; (8003538 <HAL_RCC_OscConfig+0x288>)
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032da:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80032dc:	4b96      	ldr	r3, [pc, #600]	; (8003538 <HAL_RCC_OscConfig+0x288>)
 80032de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80032e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e4:	2b10      	cmp	r3, #16
 80032e6:	d007      	beq.n	80032f8 <HAL_RCC_OscConfig+0x48>
 80032e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ea:	2b18      	cmp	r3, #24
 80032ec:	d111      	bne.n	8003312 <HAL_RCC_OscConfig+0x62>
 80032ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f0:	f003 0303 	and.w	r3, r3, #3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d10c      	bne.n	8003312 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f8:	4b8f      	ldr	r3, [pc, #572]	; (8003538 <HAL_RCC_OscConfig+0x288>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d06d      	beq.n	80033e0 <HAL_RCC_OscConfig+0x130>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d169      	bne.n	80033e0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	f000 bc21 	b.w	8003b54 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800331a:	d106      	bne.n	800332a <HAL_RCC_OscConfig+0x7a>
 800331c:	4b86      	ldr	r3, [pc, #536]	; (8003538 <HAL_RCC_OscConfig+0x288>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a85      	ldr	r2, [pc, #532]	; (8003538 <HAL_RCC_OscConfig+0x288>)
 8003322:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003326:	6013      	str	r3, [r2, #0]
 8003328:	e02e      	b.n	8003388 <HAL_RCC_OscConfig+0xd8>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10c      	bne.n	800334c <HAL_RCC_OscConfig+0x9c>
 8003332:	4b81      	ldr	r3, [pc, #516]	; (8003538 <HAL_RCC_OscConfig+0x288>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a80      	ldr	r2, [pc, #512]	; (8003538 <HAL_RCC_OscConfig+0x288>)
 8003338:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800333c:	6013      	str	r3, [r2, #0]
 800333e:	4b7e      	ldr	r3, [pc, #504]	; (8003538 <HAL_RCC_OscConfig+0x288>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a7d      	ldr	r2, [pc, #500]	; (8003538 <HAL_RCC_OscConfig+0x288>)
 8003344:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003348:	6013      	str	r3, [r2, #0]
 800334a:	e01d      	b.n	8003388 <HAL_RCC_OscConfig+0xd8>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003354:	d10c      	bne.n	8003370 <HAL_RCC_OscConfig+0xc0>
 8003356:	4b78      	ldr	r3, [pc, #480]	; (8003538 <HAL_RCC_OscConfig+0x288>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a77      	ldr	r2, [pc, #476]	; (8003538 <HAL_RCC_OscConfig+0x288>)
 800335c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003360:	6013      	str	r3, [r2, #0]
 8003362:	4b75      	ldr	r3, [pc, #468]	; (8003538 <HAL_RCC_OscConfig+0x288>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a74      	ldr	r2, [pc, #464]	; (8003538 <HAL_RCC_OscConfig+0x288>)
 8003368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800336c:	6013      	str	r3, [r2, #0]
 800336e:	e00b      	b.n	8003388 <HAL_RCC_OscConfig+0xd8>
 8003370:	4b71      	ldr	r3, [pc, #452]	; (8003538 <HAL_RCC_OscConfig+0x288>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a70      	ldr	r2, [pc, #448]	; (8003538 <HAL_RCC_OscConfig+0x288>)
 8003376:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800337a:	6013      	str	r3, [r2, #0]
 800337c:	4b6e      	ldr	r3, [pc, #440]	; (8003538 <HAL_RCC_OscConfig+0x288>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a6d      	ldr	r2, [pc, #436]	; (8003538 <HAL_RCC_OscConfig+0x288>)
 8003382:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003386:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d013      	beq.n	80033b8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003390:	f7fe f916 	bl	80015c0 <HAL_GetTick>
 8003394:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003396:	e008      	b.n	80033aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003398:	f7fe f912 	bl	80015c0 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b64      	cmp	r3, #100	; 0x64
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e3d4      	b.n	8003b54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033aa:	4b63      	ldr	r3, [pc, #396]	; (8003538 <HAL_RCC_OscConfig+0x288>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d0f0      	beq.n	8003398 <HAL_RCC_OscConfig+0xe8>
 80033b6:	e014      	b.n	80033e2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b8:	f7fe f902 	bl	80015c0 <HAL_GetTick>
 80033bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033c0:	f7fe f8fe 	bl	80015c0 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b64      	cmp	r3, #100	; 0x64
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e3c0      	b.n	8003b54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80033d2:	4b59      	ldr	r3, [pc, #356]	; (8003538 <HAL_RCC_OscConfig+0x288>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1f0      	bne.n	80033c0 <HAL_RCC_OscConfig+0x110>
 80033de:	e000      	b.n	80033e2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f000 80ca 	beq.w	8003584 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033f0:	4b51      	ldr	r3, [pc, #324]	; (8003538 <HAL_RCC_OscConfig+0x288>)
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033f8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80033fa:	4b4f      	ldr	r3, [pc, #316]	; (8003538 <HAL_RCC_OscConfig+0x288>)
 80033fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fe:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003400:	6a3b      	ldr	r3, [r7, #32]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d007      	beq.n	8003416 <HAL_RCC_OscConfig+0x166>
 8003406:	6a3b      	ldr	r3, [r7, #32]
 8003408:	2b18      	cmp	r3, #24
 800340a:	d156      	bne.n	80034ba <HAL_RCC_OscConfig+0x20a>
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	f003 0303 	and.w	r3, r3, #3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d151      	bne.n	80034ba <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003416:	4b48      	ldr	r3, [pc, #288]	; (8003538 <HAL_RCC_OscConfig+0x288>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0304 	and.w	r3, r3, #4
 800341e:	2b00      	cmp	r3, #0
 8003420:	d005      	beq.n	800342e <HAL_RCC_OscConfig+0x17e>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d101      	bne.n	800342e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e392      	b.n	8003b54 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800342e:	4b42      	ldr	r3, [pc, #264]	; (8003538 <HAL_RCC_OscConfig+0x288>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f023 0219 	bic.w	r2, r3, #25
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	493f      	ldr	r1, [pc, #252]	; (8003538 <HAL_RCC_OscConfig+0x288>)
 800343c:	4313      	orrs	r3, r2
 800343e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003440:	f7fe f8be 	bl	80015c0 <HAL_GetTick>
 8003444:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003448:	f7fe f8ba 	bl	80015c0 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e37c      	b.n	8003b54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800345a:	4b37      	ldr	r3, [pc, #220]	; (8003538 <HAL_RCC_OscConfig+0x288>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0304 	and.w	r3, r3, #4
 8003462:	2b00      	cmp	r3, #0
 8003464:	d0f0      	beq.n	8003448 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003466:	f7fe f8db 	bl	8001620 <HAL_GetREVID>
 800346a:	4603      	mov	r3, r0
 800346c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003470:	4293      	cmp	r3, r2
 8003472:	d817      	bhi.n	80034a4 <HAL_RCC_OscConfig+0x1f4>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	2b40      	cmp	r3, #64	; 0x40
 800347a:	d108      	bne.n	800348e <HAL_RCC_OscConfig+0x1de>
 800347c:	4b2e      	ldr	r3, [pc, #184]	; (8003538 <HAL_RCC_OscConfig+0x288>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003484:	4a2c      	ldr	r2, [pc, #176]	; (8003538 <HAL_RCC_OscConfig+0x288>)
 8003486:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800348a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800348c:	e07a      	b.n	8003584 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800348e:	4b2a      	ldr	r3, [pc, #168]	; (8003538 <HAL_RCC_OscConfig+0x288>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	031b      	lsls	r3, r3, #12
 800349c:	4926      	ldr	r1, [pc, #152]	; (8003538 <HAL_RCC_OscConfig+0x288>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034a2:	e06f      	b.n	8003584 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034a4:	4b24      	ldr	r3, [pc, #144]	; (8003538 <HAL_RCC_OscConfig+0x288>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	061b      	lsls	r3, r3, #24
 80034b2:	4921      	ldr	r1, [pc, #132]	; (8003538 <HAL_RCC_OscConfig+0x288>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034b8:	e064      	b.n	8003584 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d047      	beq.n	8003552 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80034c2:	4b1d      	ldr	r3, [pc, #116]	; (8003538 <HAL_RCC_OscConfig+0x288>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f023 0219 	bic.w	r2, r3, #25
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	491a      	ldr	r1, [pc, #104]	; (8003538 <HAL_RCC_OscConfig+0x288>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d4:	f7fe f874 	bl	80015c0 <HAL_GetTick>
 80034d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034da:	e008      	b.n	80034ee <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034dc:	f7fe f870 	bl	80015c0 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e332      	b.n	8003b54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034ee:	4b12      	ldr	r3, [pc, #72]	; (8003538 <HAL_RCC_OscConfig+0x288>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0304 	and.w	r3, r3, #4
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d0f0      	beq.n	80034dc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034fa:	f7fe f891 	bl	8001620 <HAL_GetREVID>
 80034fe:	4603      	mov	r3, r0
 8003500:	f241 0203 	movw	r2, #4099	; 0x1003
 8003504:	4293      	cmp	r3, r2
 8003506:	d819      	bhi.n	800353c <HAL_RCC_OscConfig+0x28c>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	2b40      	cmp	r3, #64	; 0x40
 800350e:	d108      	bne.n	8003522 <HAL_RCC_OscConfig+0x272>
 8003510:	4b09      	ldr	r3, [pc, #36]	; (8003538 <HAL_RCC_OscConfig+0x288>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003518:	4a07      	ldr	r2, [pc, #28]	; (8003538 <HAL_RCC_OscConfig+0x288>)
 800351a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800351e:	6053      	str	r3, [r2, #4]
 8003520:	e030      	b.n	8003584 <HAL_RCC_OscConfig+0x2d4>
 8003522:	4b05      	ldr	r3, [pc, #20]	; (8003538 <HAL_RCC_OscConfig+0x288>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	031b      	lsls	r3, r3, #12
 8003530:	4901      	ldr	r1, [pc, #4]	; (8003538 <HAL_RCC_OscConfig+0x288>)
 8003532:	4313      	orrs	r3, r2
 8003534:	604b      	str	r3, [r1, #4]
 8003536:	e025      	b.n	8003584 <HAL_RCC_OscConfig+0x2d4>
 8003538:	58024400 	.word	0x58024400
 800353c:	4b9a      	ldr	r3, [pc, #616]	; (80037a8 <HAL_RCC_OscConfig+0x4f8>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	061b      	lsls	r3, r3, #24
 800354a:	4997      	ldr	r1, [pc, #604]	; (80037a8 <HAL_RCC_OscConfig+0x4f8>)
 800354c:	4313      	orrs	r3, r2
 800354e:	604b      	str	r3, [r1, #4]
 8003550:	e018      	b.n	8003584 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003552:	4b95      	ldr	r3, [pc, #596]	; (80037a8 <HAL_RCC_OscConfig+0x4f8>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a94      	ldr	r2, [pc, #592]	; (80037a8 <HAL_RCC_OscConfig+0x4f8>)
 8003558:	f023 0301 	bic.w	r3, r3, #1
 800355c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800355e:	f7fe f82f 	bl	80015c0 <HAL_GetTick>
 8003562:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003564:	e008      	b.n	8003578 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003566:	f7fe f82b 	bl	80015c0 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	2b02      	cmp	r3, #2
 8003572:	d901      	bls.n	8003578 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e2ed      	b.n	8003b54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003578:	4b8b      	ldr	r3, [pc, #556]	; (80037a8 <HAL_RCC_OscConfig+0x4f8>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0304 	and.w	r3, r3, #4
 8003580:	2b00      	cmp	r3, #0
 8003582:	d1f0      	bne.n	8003566 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0310 	and.w	r3, r3, #16
 800358c:	2b00      	cmp	r3, #0
 800358e:	f000 80a9 	beq.w	80036e4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003592:	4b85      	ldr	r3, [pc, #532]	; (80037a8 <HAL_RCC_OscConfig+0x4f8>)
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800359a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800359c:	4b82      	ldr	r3, [pc, #520]	; (80037a8 <HAL_RCC_OscConfig+0x4f8>)
 800359e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	2b08      	cmp	r3, #8
 80035a6:	d007      	beq.n	80035b8 <HAL_RCC_OscConfig+0x308>
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	2b18      	cmp	r3, #24
 80035ac:	d13a      	bne.n	8003624 <HAL_RCC_OscConfig+0x374>
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	f003 0303 	and.w	r3, r3, #3
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d135      	bne.n	8003624 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80035b8:	4b7b      	ldr	r3, [pc, #492]	; (80037a8 <HAL_RCC_OscConfig+0x4f8>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d005      	beq.n	80035d0 <HAL_RCC_OscConfig+0x320>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	69db      	ldr	r3, [r3, #28]
 80035c8:	2b80      	cmp	r3, #128	; 0x80
 80035ca:	d001      	beq.n	80035d0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e2c1      	b.n	8003b54 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80035d0:	f7fe f826 	bl	8001620 <HAL_GetREVID>
 80035d4:	4603      	mov	r3, r0
 80035d6:	f241 0203 	movw	r2, #4099	; 0x1003
 80035da:	4293      	cmp	r3, r2
 80035dc:	d817      	bhi.n	800360e <HAL_RCC_OscConfig+0x35e>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	2b20      	cmp	r3, #32
 80035e4:	d108      	bne.n	80035f8 <HAL_RCC_OscConfig+0x348>
 80035e6:	4b70      	ldr	r3, [pc, #448]	; (80037a8 <HAL_RCC_OscConfig+0x4f8>)
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80035ee:	4a6e      	ldr	r2, [pc, #440]	; (80037a8 <HAL_RCC_OscConfig+0x4f8>)
 80035f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80035f4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80035f6:	e075      	b.n	80036e4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80035f8:	4b6b      	ldr	r3, [pc, #428]	; (80037a8 <HAL_RCC_OscConfig+0x4f8>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	069b      	lsls	r3, r3, #26
 8003606:	4968      	ldr	r1, [pc, #416]	; (80037a8 <HAL_RCC_OscConfig+0x4f8>)
 8003608:	4313      	orrs	r3, r2
 800360a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800360c:	e06a      	b.n	80036e4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800360e:	4b66      	ldr	r3, [pc, #408]	; (80037a8 <HAL_RCC_OscConfig+0x4f8>)
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	061b      	lsls	r3, r3, #24
 800361c:	4962      	ldr	r1, [pc, #392]	; (80037a8 <HAL_RCC_OscConfig+0x4f8>)
 800361e:	4313      	orrs	r3, r2
 8003620:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003622:	e05f      	b.n	80036e4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	69db      	ldr	r3, [r3, #28]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d042      	beq.n	80036b2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800362c:	4b5e      	ldr	r3, [pc, #376]	; (80037a8 <HAL_RCC_OscConfig+0x4f8>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a5d      	ldr	r2, [pc, #372]	; (80037a8 <HAL_RCC_OscConfig+0x4f8>)
 8003632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003636:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003638:	f7fd ffc2 	bl	80015c0 <HAL_GetTick>
 800363c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003640:	f7fd ffbe 	bl	80015c0 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e280      	b.n	8003b54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003652:	4b55      	ldr	r3, [pc, #340]	; (80037a8 <HAL_RCC_OscConfig+0x4f8>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0f0      	beq.n	8003640 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800365e:	f7fd ffdf 	bl	8001620 <HAL_GetREVID>
 8003662:	4603      	mov	r3, r0
 8003664:	f241 0203 	movw	r2, #4099	; 0x1003
 8003668:	4293      	cmp	r3, r2
 800366a:	d817      	bhi.n	800369c <HAL_RCC_OscConfig+0x3ec>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	2b20      	cmp	r3, #32
 8003672:	d108      	bne.n	8003686 <HAL_RCC_OscConfig+0x3d6>
 8003674:	4b4c      	ldr	r3, [pc, #304]	; (80037a8 <HAL_RCC_OscConfig+0x4f8>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800367c:	4a4a      	ldr	r2, [pc, #296]	; (80037a8 <HAL_RCC_OscConfig+0x4f8>)
 800367e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003682:	6053      	str	r3, [r2, #4]
 8003684:	e02e      	b.n	80036e4 <HAL_RCC_OscConfig+0x434>
 8003686:	4b48      	ldr	r3, [pc, #288]	; (80037a8 <HAL_RCC_OscConfig+0x4f8>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	069b      	lsls	r3, r3, #26
 8003694:	4944      	ldr	r1, [pc, #272]	; (80037a8 <HAL_RCC_OscConfig+0x4f8>)
 8003696:	4313      	orrs	r3, r2
 8003698:	604b      	str	r3, [r1, #4]
 800369a:	e023      	b.n	80036e4 <HAL_RCC_OscConfig+0x434>
 800369c:	4b42      	ldr	r3, [pc, #264]	; (80037a8 <HAL_RCC_OscConfig+0x4f8>)
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	061b      	lsls	r3, r3, #24
 80036aa:	493f      	ldr	r1, [pc, #252]	; (80037a8 <HAL_RCC_OscConfig+0x4f8>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	60cb      	str	r3, [r1, #12]
 80036b0:	e018      	b.n	80036e4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80036b2:	4b3d      	ldr	r3, [pc, #244]	; (80037a8 <HAL_RCC_OscConfig+0x4f8>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a3c      	ldr	r2, [pc, #240]	; (80037a8 <HAL_RCC_OscConfig+0x4f8>)
 80036b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036be:	f7fd ff7f 	bl	80015c0 <HAL_GetTick>
 80036c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80036c4:	e008      	b.n	80036d8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80036c6:	f7fd ff7b 	bl	80015c0 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d901      	bls.n	80036d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e23d      	b.n	8003b54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80036d8:	4b33      	ldr	r3, [pc, #204]	; (80037a8 <HAL_RCC_OscConfig+0x4f8>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1f0      	bne.n	80036c6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0308 	and.w	r3, r3, #8
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d036      	beq.n	800375e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d019      	beq.n	800372c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036f8:	4b2b      	ldr	r3, [pc, #172]	; (80037a8 <HAL_RCC_OscConfig+0x4f8>)
 80036fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036fc:	4a2a      	ldr	r2, [pc, #168]	; (80037a8 <HAL_RCC_OscConfig+0x4f8>)
 80036fe:	f043 0301 	orr.w	r3, r3, #1
 8003702:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003704:	f7fd ff5c 	bl	80015c0 <HAL_GetTick>
 8003708:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800370a:	e008      	b.n	800371e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800370c:	f7fd ff58 	bl	80015c0 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b02      	cmp	r3, #2
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e21a      	b.n	8003b54 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800371e:	4b22      	ldr	r3, [pc, #136]	; (80037a8 <HAL_RCC_OscConfig+0x4f8>)
 8003720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d0f0      	beq.n	800370c <HAL_RCC_OscConfig+0x45c>
 800372a:	e018      	b.n	800375e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800372c:	4b1e      	ldr	r3, [pc, #120]	; (80037a8 <HAL_RCC_OscConfig+0x4f8>)
 800372e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003730:	4a1d      	ldr	r2, [pc, #116]	; (80037a8 <HAL_RCC_OscConfig+0x4f8>)
 8003732:	f023 0301 	bic.w	r3, r3, #1
 8003736:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003738:	f7fd ff42 	bl	80015c0 <HAL_GetTick>
 800373c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800373e:	e008      	b.n	8003752 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003740:	f7fd ff3e 	bl	80015c0 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e200      	b.n	8003b54 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003752:	4b15      	ldr	r3, [pc, #84]	; (80037a8 <HAL_RCC_OscConfig+0x4f8>)
 8003754:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1f0      	bne.n	8003740 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0320 	and.w	r3, r3, #32
 8003766:	2b00      	cmp	r3, #0
 8003768:	d039      	beq.n	80037de <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d01c      	beq.n	80037ac <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003772:	4b0d      	ldr	r3, [pc, #52]	; (80037a8 <HAL_RCC_OscConfig+0x4f8>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a0c      	ldr	r2, [pc, #48]	; (80037a8 <HAL_RCC_OscConfig+0x4f8>)
 8003778:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800377c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800377e:	f7fd ff1f 	bl	80015c0 <HAL_GetTick>
 8003782:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003784:	e008      	b.n	8003798 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003786:	f7fd ff1b 	bl	80015c0 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b02      	cmp	r3, #2
 8003792:	d901      	bls.n	8003798 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e1dd      	b.n	8003b54 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003798:	4b03      	ldr	r3, [pc, #12]	; (80037a8 <HAL_RCC_OscConfig+0x4f8>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d0f0      	beq.n	8003786 <HAL_RCC_OscConfig+0x4d6>
 80037a4:	e01b      	b.n	80037de <HAL_RCC_OscConfig+0x52e>
 80037a6:	bf00      	nop
 80037a8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80037ac:	4b9b      	ldr	r3, [pc, #620]	; (8003a1c <HAL_RCC_OscConfig+0x76c>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a9a      	ldr	r2, [pc, #616]	; (8003a1c <HAL_RCC_OscConfig+0x76c>)
 80037b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037b6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80037b8:	f7fd ff02 	bl	80015c0 <HAL_GetTick>
 80037bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037c0:	f7fd fefe 	bl	80015c0 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e1c0      	b.n	8003b54 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80037d2:	4b92      	ldr	r3, [pc, #584]	; (8003a1c <HAL_RCC_OscConfig+0x76c>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1f0      	bne.n	80037c0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0304 	and.w	r3, r3, #4
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f000 8081 	beq.w	80038ee <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80037ec:	4b8c      	ldr	r3, [pc, #560]	; (8003a20 <HAL_RCC_OscConfig+0x770>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a8b      	ldr	r2, [pc, #556]	; (8003a20 <HAL_RCC_OscConfig+0x770>)
 80037f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037f8:	f7fd fee2 	bl	80015c0 <HAL_GetTick>
 80037fc:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037fe:	e008      	b.n	8003812 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003800:	f7fd fede 	bl	80015c0 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b64      	cmp	r3, #100	; 0x64
 800380c:	d901      	bls.n	8003812 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e1a0      	b.n	8003b54 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003812:	4b83      	ldr	r3, [pc, #524]	; (8003a20 <HAL_RCC_OscConfig+0x770>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800381a:	2b00      	cmp	r3, #0
 800381c:	d0f0      	beq.n	8003800 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d106      	bne.n	8003834 <HAL_RCC_OscConfig+0x584>
 8003826:	4b7d      	ldr	r3, [pc, #500]	; (8003a1c <HAL_RCC_OscConfig+0x76c>)
 8003828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382a:	4a7c      	ldr	r2, [pc, #496]	; (8003a1c <HAL_RCC_OscConfig+0x76c>)
 800382c:	f043 0301 	orr.w	r3, r3, #1
 8003830:	6713      	str	r3, [r2, #112]	; 0x70
 8003832:	e02d      	b.n	8003890 <HAL_RCC_OscConfig+0x5e0>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10c      	bne.n	8003856 <HAL_RCC_OscConfig+0x5a6>
 800383c:	4b77      	ldr	r3, [pc, #476]	; (8003a1c <HAL_RCC_OscConfig+0x76c>)
 800383e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003840:	4a76      	ldr	r2, [pc, #472]	; (8003a1c <HAL_RCC_OscConfig+0x76c>)
 8003842:	f023 0301 	bic.w	r3, r3, #1
 8003846:	6713      	str	r3, [r2, #112]	; 0x70
 8003848:	4b74      	ldr	r3, [pc, #464]	; (8003a1c <HAL_RCC_OscConfig+0x76c>)
 800384a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384c:	4a73      	ldr	r2, [pc, #460]	; (8003a1c <HAL_RCC_OscConfig+0x76c>)
 800384e:	f023 0304 	bic.w	r3, r3, #4
 8003852:	6713      	str	r3, [r2, #112]	; 0x70
 8003854:	e01c      	b.n	8003890 <HAL_RCC_OscConfig+0x5e0>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	2b05      	cmp	r3, #5
 800385c:	d10c      	bne.n	8003878 <HAL_RCC_OscConfig+0x5c8>
 800385e:	4b6f      	ldr	r3, [pc, #444]	; (8003a1c <HAL_RCC_OscConfig+0x76c>)
 8003860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003862:	4a6e      	ldr	r2, [pc, #440]	; (8003a1c <HAL_RCC_OscConfig+0x76c>)
 8003864:	f043 0304 	orr.w	r3, r3, #4
 8003868:	6713      	str	r3, [r2, #112]	; 0x70
 800386a:	4b6c      	ldr	r3, [pc, #432]	; (8003a1c <HAL_RCC_OscConfig+0x76c>)
 800386c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386e:	4a6b      	ldr	r2, [pc, #428]	; (8003a1c <HAL_RCC_OscConfig+0x76c>)
 8003870:	f043 0301 	orr.w	r3, r3, #1
 8003874:	6713      	str	r3, [r2, #112]	; 0x70
 8003876:	e00b      	b.n	8003890 <HAL_RCC_OscConfig+0x5e0>
 8003878:	4b68      	ldr	r3, [pc, #416]	; (8003a1c <HAL_RCC_OscConfig+0x76c>)
 800387a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387c:	4a67      	ldr	r2, [pc, #412]	; (8003a1c <HAL_RCC_OscConfig+0x76c>)
 800387e:	f023 0301 	bic.w	r3, r3, #1
 8003882:	6713      	str	r3, [r2, #112]	; 0x70
 8003884:	4b65      	ldr	r3, [pc, #404]	; (8003a1c <HAL_RCC_OscConfig+0x76c>)
 8003886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003888:	4a64      	ldr	r2, [pc, #400]	; (8003a1c <HAL_RCC_OscConfig+0x76c>)
 800388a:	f023 0304 	bic.w	r3, r3, #4
 800388e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d015      	beq.n	80038c4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003898:	f7fd fe92 	bl	80015c0 <HAL_GetTick>
 800389c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800389e:	e00a      	b.n	80038b6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038a0:	f7fd fe8e 	bl	80015c0 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e14e      	b.n	8003b54 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80038b6:	4b59      	ldr	r3, [pc, #356]	; (8003a1c <HAL_RCC_OscConfig+0x76c>)
 80038b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d0ee      	beq.n	80038a0 <HAL_RCC_OscConfig+0x5f0>
 80038c2:	e014      	b.n	80038ee <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c4:	f7fd fe7c 	bl	80015c0 <HAL_GetTick>
 80038c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80038ca:	e00a      	b.n	80038e2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038cc:	f7fd fe78 	bl	80015c0 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038da:	4293      	cmp	r3, r2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e138      	b.n	8003b54 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80038e2:	4b4e      	ldr	r3, [pc, #312]	; (8003a1c <HAL_RCC_OscConfig+0x76c>)
 80038e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1ee      	bne.n	80038cc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	f000 812d 	beq.w	8003b52 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80038f8:	4b48      	ldr	r3, [pc, #288]	; (8003a1c <HAL_RCC_OscConfig+0x76c>)
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003900:	2b18      	cmp	r3, #24
 8003902:	f000 80bd 	beq.w	8003a80 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	2b02      	cmp	r3, #2
 800390c:	f040 809e 	bne.w	8003a4c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003910:	4b42      	ldr	r3, [pc, #264]	; (8003a1c <HAL_RCC_OscConfig+0x76c>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a41      	ldr	r2, [pc, #260]	; (8003a1c <HAL_RCC_OscConfig+0x76c>)
 8003916:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800391a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800391c:	f7fd fe50 	bl	80015c0 <HAL_GetTick>
 8003920:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003922:	e008      	b.n	8003936 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003924:	f7fd fe4c 	bl	80015c0 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b02      	cmp	r3, #2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e10e      	b.n	8003b54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003936:	4b39      	ldr	r3, [pc, #228]	; (8003a1c <HAL_RCC_OscConfig+0x76c>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1f0      	bne.n	8003924 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003942:	4b36      	ldr	r3, [pc, #216]	; (8003a1c <HAL_RCC_OscConfig+0x76c>)
 8003944:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003946:	4b37      	ldr	r3, [pc, #220]	; (8003a24 <HAL_RCC_OscConfig+0x774>)
 8003948:	4013      	ands	r3, r2
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003952:	0112      	lsls	r2, r2, #4
 8003954:	430a      	orrs	r2, r1
 8003956:	4931      	ldr	r1, [pc, #196]	; (8003a1c <HAL_RCC_OscConfig+0x76c>)
 8003958:	4313      	orrs	r3, r2
 800395a:	628b      	str	r3, [r1, #40]	; 0x28
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003960:	3b01      	subs	r3, #1
 8003962:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800396a:	3b01      	subs	r3, #1
 800396c:	025b      	lsls	r3, r3, #9
 800396e:	b29b      	uxth	r3, r3
 8003970:	431a      	orrs	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003976:	3b01      	subs	r3, #1
 8003978:	041b      	lsls	r3, r3, #16
 800397a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800397e:	431a      	orrs	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003984:	3b01      	subs	r3, #1
 8003986:	061b      	lsls	r3, r3, #24
 8003988:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800398c:	4923      	ldr	r1, [pc, #140]	; (8003a1c <HAL_RCC_OscConfig+0x76c>)
 800398e:	4313      	orrs	r3, r2
 8003990:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003992:	4b22      	ldr	r3, [pc, #136]	; (8003a1c <HAL_RCC_OscConfig+0x76c>)
 8003994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003996:	4a21      	ldr	r2, [pc, #132]	; (8003a1c <HAL_RCC_OscConfig+0x76c>)
 8003998:	f023 0301 	bic.w	r3, r3, #1
 800399c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800399e:	4b1f      	ldr	r3, [pc, #124]	; (8003a1c <HAL_RCC_OscConfig+0x76c>)
 80039a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039a2:	4b21      	ldr	r3, [pc, #132]	; (8003a28 <HAL_RCC_OscConfig+0x778>)
 80039a4:	4013      	ands	r3, r2
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80039aa:	00d2      	lsls	r2, r2, #3
 80039ac:	491b      	ldr	r1, [pc, #108]	; (8003a1c <HAL_RCC_OscConfig+0x76c>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80039b2:	4b1a      	ldr	r3, [pc, #104]	; (8003a1c <HAL_RCC_OscConfig+0x76c>)
 80039b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b6:	f023 020c 	bic.w	r2, r3, #12
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	4917      	ldr	r1, [pc, #92]	; (8003a1c <HAL_RCC_OscConfig+0x76c>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80039c4:	4b15      	ldr	r3, [pc, #84]	; (8003a1c <HAL_RCC_OscConfig+0x76c>)
 80039c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c8:	f023 0202 	bic.w	r2, r3, #2
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d0:	4912      	ldr	r1, [pc, #72]	; (8003a1c <HAL_RCC_OscConfig+0x76c>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80039d6:	4b11      	ldr	r3, [pc, #68]	; (8003a1c <HAL_RCC_OscConfig+0x76c>)
 80039d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039da:	4a10      	ldr	r2, [pc, #64]	; (8003a1c <HAL_RCC_OscConfig+0x76c>)
 80039dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039e2:	4b0e      	ldr	r3, [pc, #56]	; (8003a1c <HAL_RCC_OscConfig+0x76c>)
 80039e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e6:	4a0d      	ldr	r2, [pc, #52]	; (8003a1c <HAL_RCC_OscConfig+0x76c>)
 80039e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80039ee:	4b0b      	ldr	r3, [pc, #44]	; (8003a1c <HAL_RCC_OscConfig+0x76c>)
 80039f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f2:	4a0a      	ldr	r2, [pc, #40]	; (8003a1c <HAL_RCC_OscConfig+0x76c>)
 80039f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80039fa:	4b08      	ldr	r3, [pc, #32]	; (8003a1c <HAL_RCC_OscConfig+0x76c>)
 80039fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fe:	4a07      	ldr	r2, [pc, #28]	; (8003a1c <HAL_RCC_OscConfig+0x76c>)
 8003a00:	f043 0301 	orr.w	r3, r3, #1
 8003a04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a06:	4b05      	ldr	r3, [pc, #20]	; (8003a1c <HAL_RCC_OscConfig+0x76c>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a04      	ldr	r2, [pc, #16]	; (8003a1c <HAL_RCC_OscConfig+0x76c>)
 8003a0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a12:	f7fd fdd5 	bl	80015c0 <HAL_GetTick>
 8003a16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a18:	e011      	b.n	8003a3e <HAL_RCC_OscConfig+0x78e>
 8003a1a:	bf00      	nop
 8003a1c:	58024400 	.word	0x58024400
 8003a20:	58024800 	.word	0x58024800
 8003a24:	fffffc0c 	.word	0xfffffc0c
 8003a28:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a2c:	f7fd fdc8 	bl	80015c0 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e08a      	b.n	8003b54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a3e:	4b47      	ldr	r3, [pc, #284]	; (8003b5c <HAL_RCC_OscConfig+0x8ac>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d0f0      	beq.n	8003a2c <HAL_RCC_OscConfig+0x77c>
 8003a4a:	e082      	b.n	8003b52 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a4c:	4b43      	ldr	r3, [pc, #268]	; (8003b5c <HAL_RCC_OscConfig+0x8ac>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a42      	ldr	r2, [pc, #264]	; (8003b5c <HAL_RCC_OscConfig+0x8ac>)
 8003a52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a58:	f7fd fdb2 	bl	80015c0 <HAL_GetTick>
 8003a5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a60:	f7fd fdae 	bl	80015c0 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e070      	b.n	8003b54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a72:	4b3a      	ldr	r3, [pc, #232]	; (8003b5c <HAL_RCC_OscConfig+0x8ac>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1f0      	bne.n	8003a60 <HAL_RCC_OscConfig+0x7b0>
 8003a7e:	e068      	b.n	8003b52 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003a80:	4b36      	ldr	r3, [pc, #216]	; (8003b5c <HAL_RCC_OscConfig+0x8ac>)
 8003a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a84:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003a86:	4b35      	ldr	r3, [pc, #212]	; (8003b5c <HAL_RCC_OscConfig+0x8ac>)
 8003a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d031      	beq.n	8003af8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	f003 0203 	and.w	r2, r3, #3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d12a      	bne.n	8003af8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	091b      	lsrs	r3, r3, #4
 8003aa6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d122      	bne.n	8003af8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d11a      	bne.n	8003af8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	0a5b      	lsrs	r3, r3, #9
 8003ac6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ace:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d111      	bne.n	8003af8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	0c1b      	lsrs	r3, r3, #16
 8003ad8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d108      	bne.n	8003af8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	0e1b      	lsrs	r3, r3, #24
 8003aea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d001      	beq.n	8003afc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e02b      	b.n	8003b54 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003afc:	4b17      	ldr	r3, [pc, #92]	; (8003b5c <HAL_RCC_OscConfig+0x8ac>)
 8003afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b00:	08db      	lsrs	r3, r3, #3
 8003b02:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b06:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d01f      	beq.n	8003b52 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003b12:	4b12      	ldr	r3, [pc, #72]	; (8003b5c <HAL_RCC_OscConfig+0x8ac>)
 8003b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b16:	4a11      	ldr	r2, [pc, #68]	; (8003b5c <HAL_RCC_OscConfig+0x8ac>)
 8003b18:	f023 0301 	bic.w	r3, r3, #1
 8003b1c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b1e:	f7fd fd4f 	bl	80015c0 <HAL_GetTick>
 8003b22:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003b24:	bf00      	nop
 8003b26:	f7fd fd4b 	bl	80015c0 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d0f9      	beq.n	8003b26 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003b32:	4b0a      	ldr	r3, [pc, #40]	; (8003b5c <HAL_RCC_OscConfig+0x8ac>)
 8003b34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b36:	4b0a      	ldr	r3, [pc, #40]	; (8003b60 <HAL_RCC_OscConfig+0x8b0>)
 8003b38:	4013      	ands	r3, r2
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003b3e:	00d2      	lsls	r2, r2, #3
 8003b40:	4906      	ldr	r1, [pc, #24]	; (8003b5c <HAL_RCC_OscConfig+0x8ac>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003b46:	4b05      	ldr	r3, [pc, #20]	; (8003b5c <HAL_RCC_OscConfig+0x8ac>)
 8003b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4a:	4a04      	ldr	r2, [pc, #16]	; (8003b5c <HAL_RCC_OscConfig+0x8ac>)
 8003b4c:	f043 0301 	orr.w	r3, r3, #1
 8003b50:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3730      	adds	r7, #48	; 0x30
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	58024400 	.word	0x58024400
 8003b60:	ffff0007 	.word	0xffff0007

08003b64 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d101      	bne.n	8003b78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e19c      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b78:	4b8a      	ldr	r3, [pc, #552]	; (8003da4 <HAL_RCC_ClockConfig+0x240>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 030f 	and.w	r3, r3, #15
 8003b80:	683a      	ldr	r2, [r7, #0]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d910      	bls.n	8003ba8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b86:	4b87      	ldr	r3, [pc, #540]	; (8003da4 <HAL_RCC_ClockConfig+0x240>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f023 020f 	bic.w	r2, r3, #15
 8003b8e:	4985      	ldr	r1, [pc, #532]	; (8003da4 <HAL_RCC_ClockConfig+0x240>)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b96:	4b83      	ldr	r3, [pc, #524]	; (8003da4 <HAL_RCC_ClockConfig+0x240>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 030f 	and.w	r3, r3, #15
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d001      	beq.n	8003ba8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e184      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0304 	and.w	r3, r3, #4
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d010      	beq.n	8003bd6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	691a      	ldr	r2, [r3, #16]
 8003bb8:	4b7b      	ldr	r3, [pc, #492]	; (8003da8 <HAL_RCC_ClockConfig+0x244>)
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d908      	bls.n	8003bd6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003bc4:	4b78      	ldr	r3, [pc, #480]	; (8003da8 <HAL_RCC_ClockConfig+0x244>)
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	4975      	ldr	r1, [pc, #468]	; (8003da8 <HAL_RCC_ClockConfig+0x244>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0308 	and.w	r3, r3, #8
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d010      	beq.n	8003c04 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	695a      	ldr	r2, [r3, #20]
 8003be6:	4b70      	ldr	r3, [pc, #448]	; (8003da8 <HAL_RCC_ClockConfig+0x244>)
 8003be8:	69db      	ldr	r3, [r3, #28]
 8003bea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d908      	bls.n	8003c04 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003bf2:	4b6d      	ldr	r3, [pc, #436]	; (8003da8 <HAL_RCC_ClockConfig+0x244>)
 8003bf4:	69db      	ldr	r3, [r3, #28]
 8003bf6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	496a      	ldr	r1, [pc, #424]	; (8003da8 <HAL_RCC_ClockConfig+0x244>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0310 	and.w	r3, r3, #16
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d010      	beq.n	8003c32 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	699a      	ldr	r2, [r3, #24]
 8003c14:	4b64      	ldr	r3, [pc, #400]	; (8003da8 <HAL_RCC_ClockConfig+0x244>)
 8003c16:	69db      	ldr	r3, [r3, #28]
 8003c18:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d908      	bls.n	8003c32 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003c20:	4b61      	ldr	r3, [pc, #388]	; (8003da8 <HAL_RCC_ClockConfig+0x244>)
 8003c22:	69db      	ldr	r3, [r3, #28]
 8003c24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	495e      	ldr	r1, [pc, #376]	; (8003da8 <HAL_RCC_ClockConfig+0x244>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0320 	and.w	r3, r3, #32
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d010      	beq.n	8003c60 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	69da      	ldr	r2, [r3, #28]
 8003c42:	4b59      	ldr	r3, [pc, #356]	; (8003da8 <HAL_RCC_ClockConfig+0x244>)
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d908      	bls.n	8003c60 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003c4e:	4b56      	ldr	r3, [pc, #344]	; (8003da8 <HAL_RCC_ClockConfig+0x244>)
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	4953      	ldr	r1, [pc, #332]	; (8003da8 <HAL_RCC_ClockConfig+0x244>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0302 	and.w	r3, r3, #2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d010      	beq.n	8003c8e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	68da      	ldr	r2, [r3, #12]
 8003c70:	4b4d      	ldr	r3, [pc, #308]	; (8003da8 <HAL_RCC_ClockConfig+0x244>)
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	f003 030f 	and.w	r3, r3, #15
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d908      	bls.n	8003c8e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c7c:	4b4a      	ldr	r3, [pc, #296]	; (8003da8 <HAL_RCC_ClockConfig+0x244>)
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	f023 020f 	bic.w	r2, r3, #15
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	4947      	ldr	r1, [pc, #284]	; (8003da8 <HAL_RCC_ClockConfig+0x244>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d055      	beq.n	8003d46 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003c9a:	4b43      	ldr	r3, [pc, #268]	; (8003da8 <HAL_RCC_ClockConfig+0x244>)
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	4940      	ldr	r1, [pc, #256]	; (8003da8 <HAL_RCC_ClockConfig+0x244>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d107      	bne.n	8003cc4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003cb4:	4b3c      	ldr	r3, [pc, #240]	; (8003da8 <HAL_RCC_ClockConfig+0x244>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d121      	bne.n	8003d04 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e0f6      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	2b03      	cmp	r3, #3
 8003cca:	d107      	bne.n	8003cdc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ccc:	4b36      	ldr	r3, [pc, #216]	; (8003da8 <HAL_RCC_ClockConfig+0x244>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d115      	bne.n	8003d04 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e0ea      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d107      	bne.n	8003cf4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ce4:	4b30      	ldr	r3, [pc, #192]	; (8003da8 <HAL_RCC_ClockConfig+0x244>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d109      	bne.n	8003d04 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e0de      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003cf4:	4b2c      	ldr	r3, [pc, #176]	; (8003da8 <HAL_RCC_ClockConfig+0x244>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0304 	and.w	r3, r3, #4
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d101      	bne.n	8003d04 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e0d6      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d04:	4b28      	ldr	r3, [pc, #160]	; (8003da8 <HAL_RCC_ClockConfig+0x244>)
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	f023 0207 	bic.w	r2, r3, #7
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	4925      	ldr	r1, [pc, #148]	; (8003da8 <HAL_RCC_ClockConfig+0x244>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d16:	f7fd fc53 	bl	80015c0 <HAL_GetTick>
 8003d1a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d1c:	e00a      	b.n	8003d34 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d1e:	f7fd fc4f 	bl	80015c0 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e0be      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d34:	4b1c      	ldr	r3, [pc, #112]	; (8003da8 <HAL_RCC_ClockConfig+0x244>)
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	00db      	lsls	r3, r3, #3
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d1eb      	bne.n	8003d1e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d010      	beq.n	8003d74 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68da      	ldr	r2, [r3, #12]
 8003d56:	4b14      	ldr	r3, [pc, #80]	; (8003da8 <HAL_RCC_ClockConfig+0x244>)
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	f003 030f 	and.w	r3, r3, #15
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d208      	bcs.n	8003d74 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d62:	4b11      	ldr	r3, [pc, #68]	; (8003da8 <HAL_RCC_ClockConfig+0x244>)
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	f023 020f 	bic.w	r2, r3, #15
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	490e      	ldr	r1, [pc, #56]	; (8003da8 <HAL_RCC_ClockConfig+0x244>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d74:	4b0b      	ldr	r3, [pc, #44]	; (8003da4 <HAL_RCC_ClockConfig+0x240>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 030f 	and.w	r3, r3, #15
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d214      	bcs.n	8003dac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d82:	4b08      	ldr	r3, [pc, #32]	; (8003da4 <HAL_RCC_ClockConfig+0x240>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f023 020f 	bic.w	r2, r3, #15
 8003d8a:	4906      	ldr	r1, [pc, #24]	; (8003da4 <HAL_RCC_ClockConfig+0x240>)
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d92:	4b04      	ldr	r3, [pc, #16]	; (8003da4 <HAL_RCC_ClockConfig+0x240>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 030f 	and.w	r3, r3, #15
 8003d9a:	683a      	ldr	r2, [r7, #0]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d005      	beq.n	8003dac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e086      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x34e>
 8003da4:	52002000 	.word	0x52002000
 8003da8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0304 	and.w	r3, r3, #4
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d010      	beq.n	8003dda <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	691a      	ldr	r2, [r3, #16]
 8003dbc:	4b3f      	ldr	r3, [pc, #252]	; (8003ebc <HAL_RCC_ClockConfig+0x358>)
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d208      	bcs.n	8003dda <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003dc8:	4b3c      	ldr	r3, [pc, #240]	; (8003ebc <HAL_RCC_ClockConfig+0x358>)
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	4939      	ldr	r1, [pc, #228]	; (8003ebc <HAL_RCC_ClockConfig+0x358>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0308 	and.w	r3, r3, #8
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d010      	beq.n	8003e08 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	695a      	ldr	r2, [r3, #20]
 8003dea:	4b34      	ldr	r3, [pc, #208]	; (8003ebc <HAL_RCC_ClockConfig+0x358>)
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d208      	bcs.n	8003e08 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003df6:	4b31      	ldr	r3, [pc, #196]	; (8003ebc <HAL_RCC_ClockConfig+0x358>)
 8003df8:	69db      	ldr	r3, [r3, #28]
 8003dfa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	492e      	ldr	r1, [pc, #184]	; (8003ebc <HAL_RCC_ClockConfig+0x358>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0310 	and.w	r3, r3, #16
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d010      	beq.n	8003e36 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	699a      	ldr	r2, [r3, #24]
 8003e18:	4b28      	ldr	r3, [pc, #160]	; (8003ebc <HAL_RCC_ClockConfig+0x358>)
 8003e1a:	69db      	ldr	r3, [r3, #28]
 8003e1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d208      	bcs.n	8003e36 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003e24:	4b25      	ldr	r3, [pc, #148]	; (8003ebc <HAL_RCC_ClockConfig+0x358>)
 8003e26:	69db      	ldr	r3, [r3, #28]
 8003e28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	4922      	ldr	r1, [pc, #136]	; (8003ebc <HAL_RCC_ClockConfig+0x358>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0320 	and.w	r3, r3, #32
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d010      	beq.n	8003e64 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	69da      	ldr	r2, [r3, #28]
 8003e46:	4b1d      	ldr	r3, [pc, #116]	; (8003ebc <HAL_RCC_ClockConfig+0x358>)
 8003e48:	6a1b      	ldr	r3, [r3, #32]
 8003e4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d208      	bcs.n	8003e64 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003e52:	4b1a      	ldr	r3, [pc, #104]	; (8003ebc <HAL_RCC_ClockConfig+0x358>)
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	69db      	ldr	r3, [r3, #28]
 8003e5e:	4917      	ldr	r1, [pc, #92]	; (8003ebc <HAL_RCC_ClockConfig+0x358>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003e64:	f000 f834 	bl	8003ed0 <HAL_RCC_GetSysClockFreq>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	4b14      	ldr	r3, [pc, #80]	; (8003ebc <HAL_RCC_ClockConfig+0x358>)
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	0a1b      	lsrs	r3, r3, #8
 8003e70:	f003 030f 	and.w	r3, r3, #15
 8003e74:	4912      	ldr	r1, [pc, #72]	; (8003ec0 <HAL_RCC_ClockConfig+0x35c>)
 8003e76:	5ccb      	ldrb	r3, [r1, r3]
 8003e78:	f003 031f 	and.w	r3, r3, #31
 8003e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e80:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003e82:	4b0e      	ldr	r3, [pc, #56]	; (8003ebc <HAL_RCC_ClockConfig+0x358>)
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	f003 030f 	and.w	r3, r3, #15
 8003e8a:	4a0d      	ldr	r2, [pc, #52]	; (8003ec0 <HAL_RCC_ClockConfig+0x35c>)
 8003e8c:	5cd3      	ldrb	r3, [r2, r3]
 8003e8e:	f003 031f 	and.w	r3, r3, #31
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	fa22 f303 	lsr.w	r3, r2, r3
 8003e98:	4a0a      	ldr	r2, [pc, #40]	; (8003ec4 <HAL_RCC_ClockConfig+0x360>)
 8003e9a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003e9c:	4a0a      	ldr	r2, [pc, #40]	; (8003ec8 <HAL_RCC_ClockConfig+0x364>)
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003ea2:	4b0a      	ldr	r3, [pc, #40]	; (8003ecc <HAL_RCC_ClockConfig+0x368>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7fc ffdc 	bl	8000e64 <HAL_InitTick>
 8003eac:	4603      	mov	r3, r0
 8003eae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3718      	adds	r7, #24
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	58024400 	.word	0x58024400
 8003ec0:	080116cc 	.word	0x080116cc
 8003ec4:	24000004 	.word	0x24000004
 8003ec8:	24000000 	.word	0x24000000
 8003ecc:	24000008 	.word	0x24000008

08003ed0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b089      	sub	sp, #36	; 0x24
 8003ed4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ed6:	4bb3      	ldr	r3, [pc, #716]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ede:	2b18      	cmp	r3, #24
 8003ee0:	f200 8155 	bhi.w	800418e <HAL_RCC_GetSysClockFreq+0x2be>
 8003ee4:	a201      	add	r2, pc, #4	; (adr r2, 8003eec <HAL_RCC_GetSysClockFreq+0x1c>)
 8003ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eea:	bf00      	nop
 8003eec:	08003f51 	.word	0x08003f51
 8003ef0:	0800418f 	.word	0x0800418f
 8003ef4:	0800418f 	.word	0x0800418f
 8003ef8:	0800418f 	.word	0x0800418f
 8003efc:	0800418f 	.word	0x0800418f
 8003f00:	0800418f 	.word	0x0800418f
 8003f04:	0800418f 	.word	0x0800418f
 8003f08:	0800418f 	.word	0x0800418f
 8003f0c:	08003f77 	.word	0x08003f77
 8003f10:	0800418f 	.word	0x0800418f
 8003f14:	0800418f 	.word	0x0800418f
 8003f18:	0800418f 	.word	0x0800418f
 8003f1c:	0800418f 	.word	0x0800418f
 8003f20:	0800418f 	.word	0x0800418f
 8003f24:	0800418f 	.word	0x0800418f
 8003f28:	0800418f 	.word	0x0800418f
 8003f2c:	08003f7d 	.word	0x08003f7d
 8003f30:	0800418f 	.word	0x0800418f
 8003f34:	0800418f 	.word	0x0800418f
 8003f38:	0800418f 	.word	0x0800418f
 8003f3c:	0800418f 	.word	0x0800418f
 8003f40:	0800418f 	.word	0x0800418f
 8003f44:	0800418f 	.word	0x0800418f
 8003f48:	0800418f 	.word	0x0800418f
 8003f4c:	08003f83 	.word	0x08003f83
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f50:	4b94      	ldr	r3, [pc, #592]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0320 	and.w	r3, r3, #32
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d009      	beq.n	8003f70 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003f5c:	4b91      	ldr	r3, [pc, #580]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	08db      	lsrs	r3, r3, #3
 8003f62:	f003 0303 	and.w	r3, r3, #3
 8003f66:	4a90      	ldr	r2, [pc, #576]	; (80041a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003f68:	fa22 f303 	lsr.w	r3, r2, r3
 8003f6c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003f6e:	e111      	b.n	8004194 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003f70:	4b8d      	ldr	r3, [pc, #564]	; (80041a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003f72:	61bb      	str	r3, [r7, #24]
      break;
 8003f74:	e10e      	b.n	8004194 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003f76:	4b8d      	ldr	r3, [pc, #564]	; (80041ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003f78:	61bb      	str	r3, [r7, #24]
      break;
 8003f7a:	e10b      	b.n	8004194 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003f7c:	4b8c      	ldr	r3, [pc, #560]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003f7e:	61bb      	str	r3, [r7, #24]
      break;
 8003f80:	e108      	b.n	8004194 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003f82:	4b88      	ldr	r3, [pc, #544]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f86:	f003 0303 	and.w	r3, r3, #3
 8003f8a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003f8c:	4b85      	ldr	r3, [pc, #532]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f90:	091b      	lsrs	r3, r3, #4
 8003f92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f96:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003f98:	4b82      	ldr	r3, [pc, #520]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003fa2:	4b80      	ldr	r3, [pc, #512]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa6:	08db      	lsrs	r3, r3, #3
 8003fa8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	fb02 f303 	mul.w	r3, r2, r3
 8003fb2:	ee07 3a90 	vmov	s15, r3
 8003fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fba:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f000 80e1 	beq.w	8004188 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	f000 8083 	beq.w	80040d4 <HAL_RCC_GetSysClockFreq+0x204>
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	f200 80a1 	bhi.w	8004118 <HAL_RCC_GetSysClockFreq+0x248>
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d003      	beq.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x114>
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d056      	beq.n	8004090 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003fe2:	e099      	b.n	8004118 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003fe4:	4b6f      	ldr	r3, [pc, #444]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0320 	and.w	r3, r3, #32
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d02d      	beq.n	800404c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003ff0:	4b6c      	ldr	r3, [pc, #432]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	08db      	lsrs	r3, r3, #3
 8003ff6:	f003 0303 	and.w	r3, r3, #3
 8003ffa:	4a6b      	ldr	r2, [pc, #428]	; (80041a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8004000:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	ee07 3a90 	vmov	s15, r3
 8004008:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	ee07 3a90 	vmov	s15, r3
 8004012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800401a:	4b62      	ldr	r3, [pc, #392]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800401c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004022:	ee07 3a90 	vmov	s15, r3
 8004026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800402a:	ed97 6a02 	vldr	s12, [r7, #8]
 800402e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80041b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800403a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800403e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004046:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800404a:	e087      	b.n	800415c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	ee07 3a90 	vmov	s15, r3
 8004052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004056:	eddf 6a58 	vldr	s13, [pc, #352]	; 80041b8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800405a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800405e:	4b51      	ldr	r3, [pc, #324]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004066:	ee07 3a90 	vmov	s15, r3
 800406a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800406e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004072:	eddf 5a50 	vldr	s11, [pc, #320]	; 80041b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800407a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800407e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800408a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800408e:	e065      	b.n	800415c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	ee07 3a90 	vmov	s15, r3
 8004096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800409a:	eddf 6a48 	vldr	s13, [pc, #288]	; 80041bc <HAL_RCC_GetSysClockFreq+0x2ec>
 800409e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040a2:	4b40      	ldr	r3, [pc, #256]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040aa:	ee07 3a90 	vmov	s15, r3
 80040ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80040b6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80041b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80040ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80040d2:	e043      	b.n	800415c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	ee07 3a90 	vmov	s15, r3
 80040da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040de:	eddf 6a38 	vldr	s13, [pc, #224]	; 80041c0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80040e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040e6:	4b2f      	ldr	r3, [pc, #188]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040ee:	ee07 3a90 	vmov	s15, r3
 80040f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80040fa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80041b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80040fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004106:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800410a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800410e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004112:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004116:	e021      	b.n	800415c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	ee07 3a90 	vmov	s15, r3
 800411e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004122:	eddf 6a26 	vldr	s13, [pc, #152]	; 80041bc <HAL_RCC_GetSysClockFreq+0x2ec>
 8004126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800412a:	4b1e      	ldr	r3, [pc, #120]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800412c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004132:	ee07 3a90 	vmov	s15, r3
 8004136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800413a:	ed97 6a02 	vldr	s12, [r7, #8]
 800413e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80041b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800414a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800414e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004156:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800415a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800415c:	4b11      	ldr	r3, [pc, #68]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800415e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004160:	0a5b      	lsrs	r3, r3, #9
 8004162:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004166:	3301      	adds	r3, #1
 8004168:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	ee07 3a90 	vmov	s15, r3
 8004170:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004174:	edd7 6a07 	vldr	s13, [r7, #28]
 8004178:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800417c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004180:	ee17 3a90 	vmov	r3, s15
 8004184:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004186:	e005      	b.n	8004194 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004188:	2300      	movs	r3, #0
 800418a:	61bb      	str	r3, [r7, #24]
      break;
 800418c:	e002      	b.n	8004194 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800418e:	4b07      	ldr	r3, [pc, #28]	; (80041ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004190:	61bb      	str	r3, [r7, #24]
      break;
 8004192:	bf00      	nop
  }

  return sysclockfreq;
 8004194:	69bb      	ldr	r3, [r7, #24]
}
 8004196:	4618      	mov	r0, r3
 8004198:	3724      	adds	r7, #36	; 0x24
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	58024400 	.word	0x58024400
 80041a8:	03d09000 	.word	0x03d09000
 80041ac:	003d0900 	.word	0x003d0900
 80041b0:	007a1200 	.word	0x007a1200
 80041b4:	46000000 	.word	0x46000000
 80041b8:	4c742400 	.word	0x4c742400
 80041bc:	4a742400 	.word	0x4a742400
 80041c0:	4af42400 	.word	0x4af42400

080041c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80041ca:	f7ff fe81 	bl	8003ed0 <HAL_RCC_GetSysClockFreq>
 80041ce:	4602      	mov	r2, r0
 80041d0:	4b10      	ldr	r3, [pc, #64]	; (8004214 <HAL_RCC_GetHCLKFreq+0x50>)
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	0a1b      	lsrs	r3, r3, #8
 80041d6:	f003 030f 	and.w	r3, r3, #15
 80041da:	490f      	ldr	r1, [pc, #60]	; (8004218 <HAL_RCC_GetHCLKFreq+0x54>)
 80041dc:	5ccb      	ldrb	r3, [r1, r3]
 80041de:	f003 031f 	and.w	r3, r3, #31
 80041e2:	fa22 f303 	lsr.w	r3, r2, r3
 80041e6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80041e8:	4b0a      	ldr	r3, [pc, #40]	; (8004214 <HAL_RCC_GetHCLKFreq+0x50>)
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	f003 030f 	and.w	r3, r3, #15
 80041f0:	4a09      	ldr	r2, [pc, #36]	; (8004218 <HAL_RCC_GetHCLKFreq+0x54>)
 80041f2:	5cd3      	ldrb	r3, [r2, r3]
 80041f4:	f003 031f 	and.w	r3, r3, #31
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	fa22 f303 	lsr.w	r3, r2, r3
 80041fe:	4a07      	ldr	r2, [pc, #28]	; (800421c <HAL_RCC_GetHCLKFreq+0x58>)
 8004200:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004202:	4a07      	ldr	r2, [pc, #28]	; (8004220 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004208:	4b04      	ldr	r3, [pc, #16]	; (800421c <HAL_RCC_GetHCLKFreq+0x58>)
 800420a:	681b      	ldr	r3, [r3, #0]
}
 800420c:	4618      	mov	r0, r3
 800420e:	3708      	adds	r7, #8
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	58024400 	.word	0x58024400
 8004218:	080116cc 	.word	0x080116cc
 800421c:	24000004 	.word	0x24000004
 8004220:	24000000 	.word	0x24000000

08004224 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004228:	f7ff ffcc 	bl	80041c4 <HAL_RCC_GetHCLKFreq>
 800422c:	4602      	mov	r2, r0
 800422e:	4b06      	ldr	r3, [pc, #24]	; (8004248 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	091b      	lsrs	r3, r3, #4
 8004234:	f003 0307 	and.w	r3, r3, #7
 8004238:	4904      	ldr	r1, [pc, #16]	; (800424c <HAL_RCC_GetPCLK1Freq+0x28>)
 800423a:	5ccb      	ldrb	r3, [r1, r3]
 800423c:	f003 031f 	and.w	r3, r3, #31
 8004240:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004244:	4618      	mov	r0, r3
 8004246:	bd80      	pop	{r7, pc}
 8004248:	58024400 	.word	0x58024400
 800424c:	080116cc 	.word	0x080116cc

08004250 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004254:	f7ff ffb6 	bl	80041c4 <HAL_RCC_GetHCLKFreq>
 8004258:	4602      	mov	r2, r0
 800425a:	4b06      	ldr	r3, [pc, #24]	; (8004274 <HAL_RCC_GetPCLK2Freq+0x24>)
 800425c:	69db      	ldr	r3, [r3, #28]
 800425e:	0a1b      	lsrs	r3, r3, #8
 8004260:	f003 0307 	and.w	r3, r3, #7
 8004264:	4904      	ldr	r1, [pc, #16]	; (8004278 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004266:	5ccb      	ldrb	r3, [r1, r3]
 8004268:	f003 031f 	and.w	r3, r3, #31
 800426c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004270:	4618      	mov	r0, r3
 8004272:	bd80      	pop	{r7, pc}
 8004274:	58024400 	.word	0x58024400
 8004278:	080116cc 	.word	0x080116cc

0800427c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	223f      	movs	r2, #63	; 0x3f
 800428a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800428c:	4b1a      	ldr	r3, [pc, #104]	; (80042f8 <HAL_RCC_GetClockConfig+0x7c>)
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	f003 0207 	and.w	r2, r3, #7
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004298:	4b17      	ldr	r3, [pc, #92]	; (80042f8 <HAL_RCC_GetClockConfig+0x7c>)
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80042a4:	4b14      	ldr	r3, [pc, #80]	; (80042f8 <HAL_RCC_GetClockConfig+0x7c>)
 80042a6:	699b      	ldr	r3, [r3, #24]
 80042a8:	f003 020f 	and.w	r2, r3, #15
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80042b0:	4b11      	ldr	r3, [pc, #68]	; (80042f8 <HAL_RCC_GetClockConfig+0x7c>)
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80042bc:	4b0e      	ldr	r3, [pc, #56]	; (80042f8 <HAL_RCC_GetClockConfig+0x7c>)
 80042be:	69db      	ldr	r3, [r3, #28]
 80042c0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80042c8:	4b0b      	ldr	r3, [pc, #44]	; (80042f8 <HAL_RCC_GetClockConfig+0x7c>)
 80042ca:	69db      	ldr	r3, [r3, #28]
 80042cc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80042d4:	4b08      	ldr	r3, [pc, #32]	; (80042f8 <HAL_RCC_GetClockConfig+0x7c>)
 80042d6:	6a1b      	ldr	r3, [r3, #32]
 80042d8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80042e0:	4b06      	ldr	r3, [pc, #24]	; (80042fc <HAL_RCC_GetClockConfig+0x80>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 020f 	and.w	r2, r3, #15
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	601a      	str	r2, [r3, #0]
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr
 80042f8:	58024400 	.word	0x58024400
 80042fc:	52002000 	.word	0x52002000

08004300 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004300:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004304:	b0ca      	sub	sp, #296	; 0x128
 8004306:	af00      	add	r7, sp, #0
 8004308:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800430c:	2300      	movs	r3, #0
 800430e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004312:	2300      	movs	r3, #0
 8004314:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004318:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800431c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004320:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8004324:	2500      	movs	r5, #0
 8004326:	ea54 0305 	orrs.w	r3, r4, r5
 800432a:	d049      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800432c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004330:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004332:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004336:	d02f      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004338:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800433c:	d828      	bhi.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800433e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004342:	d01a      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004344:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004348:	d822      	bhi.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800434a:	2b00      	cmp	r3, #0
 800434c:	d003      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800434e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004352:	d007      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004354:	e01c      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004356:	4bb8      	ldr	r3, [pc, #736]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435a:	4ab7      	ldr	r2, [pc, #732]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800435c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004360:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004362:	e01a      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004364:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004368:	3308      	adds	r3, #8
 800436a:	2102      	movs	r1, #2
 800436c:	4618      	mov	r0, r3
 800436e:	f001 fc8f 	bl	8005c90 <RCCEx_PLL2_Config>
 8004372:	4603      	mov	r3, r0
 8004374:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004378:	e00f      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800437a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800437e:	3328      	adds	r3, #40	; 0x28
 8004380:	2102      	movs	r1, #2
 8004382:	4618      	mov	r0, r3
 8004384:	f001 fd36 	bl	8005df4 <RCCEx_PLL3_Config>
 8004388:	4603      	mov	r3, r0
 800438a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800438e:	e004      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004396:	e000      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004398:	bf00      	nop
    }

    if (ret == HAL_OK)
 800439a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d10a      	bne.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80043a2:	4ba5      	ldr	r3, [pc, #660]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80043a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043a6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80043aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043b0:	4aa1      	ldr	r2, [pc, #644]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80043b2:	430b      	orrs	r3, r1
 80043b4:	6513      	str	r3, [r2, #80]	; 0x50
 80043b6:	e003      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80043c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80043cc:	f04f 0900 	mov.w	r9, #0
 80043d0:	ea58 0309 	orrs.w	r3, r8, r9
 80043d4:	d047      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80043d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043dc:	2b04      	cmp	r3, #4
 80043de:	d82a      	bhi.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80043e0:	a201      	add	r2, pc, #4	; (adr r2, 80043e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80043e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e6:	bf00      	nop
 80043e8:	080043fd 	.word	0x080043fd
 80043ec:	0800440b 	.word	0x0800440b
 80043f0:	08004421 	.word	0x08004421
 80043f4:	0800443f 	.word	0x0800443f
 80043f8:	0800443f 	.word	0x0800443f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043fc:	4b8e      	ldr	r3, [pc, #568]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80043fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004400:	4a8d      	ldr	r2, [pc, #564]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004402:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004406:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004408:	e01a      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800440a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800440e:	3308      	adds	r3, #8
 8004410:	2100      	movs	r1, #0
 8004412:	4618      	mov	r0, r3
 8004414:	f001 fc3c 	bl	8005c90 <RCCEx_PLL2_Config>
 8004418:	4603      	mov	r3, r0
 800441a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800441e:	e00f      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004420:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004424:	3328      	adds	r3, #40	; 0x28
 8004426:	2100      	movs	r1, #0
 8004428:	4618      	mov	r0, r3
 800442a:	f001 fce3 	bl	8005df4 <RCCEx_PLL3_Config>
 800442e:	4603      	mov	r3, r0
 8004430:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004434:	e004      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800443c:	e000      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800443e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004440:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004444:	2b00      	cmp	r3, #0
 8004446:	d10a      	bne.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004448:	4b7b      	ldr	r3, [pc, #492]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800444a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800444c:	f023 0107 	bic.w	r1, r3, #7
 8004450:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004456:	4a78      	ldr	r2, [pc, #480]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004458:	430b      	orrs	r3, r1
 800445a:	6513      	str	r3, [r2, #80]	; 0x50
 800445c:	e003      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800445e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004462:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004466:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800446a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8004472:	f04f 0b00 	mov.w	fp, #0
 8004476:	ea5a 030b 	orrs.w	r3, sl, fp
 800447a:	d04c      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800447c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004482:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004486:	d030      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004488:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800448c:	d829      	bhi.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800448e:	2bc0      	cmp	r3, #192	; 0xc0
 8004490:	d02d      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004492:	2bc0      	cmp	r3, #192	; 0xc0
 8004494:	d825      	bhi.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004496:	2b80      	cmp	r3, #128	; 0x80
 8004498:	d018      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800449a:	2b80      	cmp	r3, #128	; 0x80
 800449c:	d821      	bhi.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d002      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80044a2:	2b40      	cmp	r3, #64	; 0x40
 80044a4:	d007      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80044a6:	e01c      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044a8:	4b63      	ldr	r3, [pc, #396]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80044aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ac:	4a62      	ldr	r2, [pc, #392]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80044ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80044b4:	e01c      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044ba:	3308      	adds	r3, #8
 80044bc:	2100      	movs	r1, #0
 80044be:	4618      	mov	r0, r3
 80044c0:	f001 fbe6 	bl	8005c90 <RCCEx_PLL2_Config>
 80044c4:	4603      	mov	r3, r0
 80044c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80044ca:	e011      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80044cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044d0:	3328      	adds	r3, #40	; 0x28
 80044d2:	2100      	movs	r1, #0
 80044d4:	4618      	mov	r0, r3
 80044d6:	f001 fc8d 	bl	8005df4 <RCCEx_PLL3_Config>
 80044da:	4603      	mov	r3, r0
 80044dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80044e0:	e006      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80044e8:	e002      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80044ea:	bf00      	nop
 80044ec:	e000      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80044ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d10a      	bne.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80044f8:	4b4f      	ldr	r3, [pc, #316]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80044fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044fc:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004500:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004506:	4a4c      	ldr	r2, [pc, #304]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004508:	430b      	orrs	r3, r1
 800450a:	6513      	str	r3, [r2, #80]	; 0x50
 800450c:	e003      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800450e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004512:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004516:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800451a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004522:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004526:	2300      	movs	r3, #0
 8004528:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800452c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8004530:	460b      	mov	r3, r1
 8004532:	4313      	orrs	r3, r2
 8004534:	d053      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004536:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800453a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800453e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004542:	d035      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004544:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004548:	d82e      	bhi.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800454a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800454e:	d031      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004550:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004554:	d828      	bhi.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004556:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800455a:	d01a      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800455c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004560:	d822      	bhi.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004566:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800456a:	d007      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800456c:	e01c      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800456e:	4b32      	ldr	r3, [pc, #200]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004572:	4a31      	ldr	r2, [pc, #196]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004578:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800457a:	e01c      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800457c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004580:	3308      	adds	r3, #8
 8004582:	2100      	movs	r1, #0
 8004584:	4618      	mov	r0, r3
 8004586:	f001 fb83 	bl	8005c90 <RCCEx_PLL2_Config>
 800458a:	4603      	mov	r3, r0
 800458c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004590:	e011      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004592:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004596:	3328      	adds	r3, #40	; 0x28
 8004598:	2100      	movs	r1, #0
 800459a:	4618      	mov	r0, r3
 800459c:	f001 fc2a 	bl	8005df4 <RCCEx_PLL3_Config>
 80045a0:	4603      	mov	r3, r0
 80045a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80045a6:	e006      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80045ae:	e002      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80045b0:	bf00      	nop
 80045b2:	e000      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80045b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10b      	bne.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80045be:	4b1e      	ldr	r3, [pc, #120]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80045c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c2:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80045c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80045ce:	4a1a      	ldr	r2, [pc, #104]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80045d0:	430b      	orrs	r3, r1
 80045d2:	6593      	str	r3, [r2, #88]	; 0x58
 80045d4:	e003      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80045de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80045ea:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80045ee:	2300      	movs	r3, #0
 80045f0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80045f4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80045f8:	460b      	mov	r3, r1
 80045fa:	4313      	orrs	r3, r2
 80045fc:	d056      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80045fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004602:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004606:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800460a:	d038      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800460c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004610:	d831      	bhi.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004612:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004616:	d034      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004618:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800461c:	d82b      	bhi.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800461e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004622:	d01d      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004624:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004628:	d825      	bhi.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800462a:	2b00      	cmp	r3, #0
 800462c:	d006      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800462e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004632:	d00a      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004634:	e01f      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004636:	bf00      	nop
 8004638:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800463c:	4ba2      	ldr	r3, [pc, #648]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800463e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004640:	4aa1      	ldr	r2, [pc, #644]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004642:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004646:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004648:	e01c      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800464a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800464e:	3308      	adds	r3, #8
 8004650:	2100      	movs	r1, #0
 8004652:	4618      	mov	r0, r3
 8004654:	f001 fb1c 	bl	8005c90 <RCCEx_PLL2_Config>
 8004658:	4603      	mov	r3, r0
 800465a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800465e:	e011      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004660:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004664:	3328      	adds	r3, #40	; 0x28
 8004666:	2100      	movs	r1, #0
 8004668:	4618      	mov	r0, r3
 800466a:	f001 fbc3 	bl	8005df4 <RCCEx_PLL3_Config>
 800466e:	4603      	mov	r3, r0
 8004670:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004674:	e006      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800467c:	e002      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800467e:	bf00      	nop
 8004680:	e000      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004682:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004684:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004688:	2b00      	cmp	r3, #0
 800468a:	d10b      	bne.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800468c:	4b8e      	ldr	r3, [pc, #568]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800468e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004690:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004694:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004698:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800469c:	4a8a      	ldr	r2, [pc, #552]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800469e:	430b      	orrs	r3, r1
 80046a0:	6593      	str	r3, [r2, #88]	; 0x58
 80046a2:	e003      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80046ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80046b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80046bc:	2300      	movs	r3, #0
 80046be:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80046c2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80046c6:	460b      	mov	r3, r1
 80046c8:	4313      	orrs	r3, r2
 80046ca:	d03a      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80046cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046d2:	2b30      	cmp	r3, #48	; 0x30
 80046d4:	d01f      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80046d6:	2b30      	cmp	r3, #48	; 0x30
 80046d8:	d819      	bhi.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80046da:	2b20      	cmp	r3, #32
 80046dc:	d00c      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80046de:	2b20      	cmp	r3, #32
 80046e0:	d815      	bhi.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d019      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80046e6:	2b10      	cmp	r3, #16
 80046e8:	d111      	bne.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046ea:	4b77      	ldr	r3, [pc, #476]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80046ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ee:	4a76      	ldr	r2, [pc, #472]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80046f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80046f6:	e011      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80046f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046fc:	3308      	adds	r3, #8
 80046fe:	2102      	movs	r1, #2
 8004700:	4618      	mov	r0, r3
 8004702:	f001 fac5 	bl	8005c90 <RCCEx_PLL2_Config>
 8004706:	4603      	mov	r3, r0
 8004708:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800470c:	e006      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004714:	e002      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004716:	bf00      	nop
 8004718:	e000      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800471a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800471c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004720:	2b00      	cmp	r3, #0
 8004722:	d10a      	bne.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004724:	4b68      	ldr	r3, [pc, #416]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004728:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800472c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004732:	4a65      	ldr	r2, [pc, #404]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004734:	430b      	orrs	r3, r1
 8004736:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004738:	e003      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800473a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800473e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004742:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800474a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800474e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004752:	2300      	movs	r3, #0
 8004754:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004758:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800475c:	460b      	mov	r3, r1
 800475e:	4313      	orrs	r3, r2
 8004760:	d051      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004762:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004768:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800476c:	d035      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800476e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004772:	d82e      	bhi.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004774:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004778:	d031      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800477a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800477e:	d828      	bhi.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004780:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004784:	d01a      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004786:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800478a:	d822      	bhi.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800478c:	2b00      	cmp	r3, #0
 800478e:	d003      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004790:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004794:	d007      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004796:	e01c      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004798:	4b4b      	ldr	r3, [pc, #300]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800479a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479c:	4a4a      	ldr	r2, [pc, #296]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800479e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80047a4:	e01c      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047aa:	3308      	adds	r3, #8
 80047ac:	2100      	movs	r1, #0
 80047ae:	4618      	mov	r0, r3
 80047b0:	f001 fa6e 	bl	8005c90 <RCCEx_PLL2_Config>
 80047b4:	4603      	mov	r3, r0
 80047b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80047ba:	e011      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80047bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047c0:	3328      	adds	r3, #40	; 0x28
 80047c2:	2100      	movs	r1, #0
 80047c4:	4618      	mov	r0, r3
 80047c6:	f001 fb15 	bl	8005df4 <RCCEx_PLL3_Config>
 80047ca:	4603      	mov	r3, r0
 80047cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80047d0:	e006      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80047d8:	e002      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80047da:	bf00      	nop
 80047dc:	e000      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80047de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d10a      	bne.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80047e8:	4b37      	ldr	r3, [pc, #220]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80047ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ec:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80047f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047f6:	4a34      	ldr	r2, [pc, #208]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80047f8:	430b      	orrs	r3, r1
 80047fa:	6513      	str	r3, [r2, #80]	; 0x50
 80047fc:	e003      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004802:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004806:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800480a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800480e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004812:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004816:	2300      	movs	r3, #0
 8004818:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800481c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004820:	460b      	mov	r3, r1
 8004822:	4313      	orrs	r3, r2
 8004824:	d056      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004826:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800482a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800482c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004830:	d033      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004832:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004836:	d82c      	bhi.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004838:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800483c:	d02f      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800483e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004842:	d826      	bhi.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004844:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004848:	d02b      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800484a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800484e:	d820      	bhi.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004850:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004854:	d012      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004856:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800485a:	d81a      	bhi.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800485c:	2b00      	cmp	r3, #0
 800485e:	d022      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004864:	d115      	bne.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004866:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800486a:	3308      	adds	r3, #8
 800486c:	2101      	movs	r1, #1
 800486e:	4618      	mov	r0, r3
 8004870:	f001 fa0e 	bl	8005c90 <RCCEx_PLL2_Config>
 8004874:	4603      	mov	r3, r0
 8004876:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800487a:	e015      	b.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800487c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004880:	3328      	adds	r3, #40	; 0x28
 8004882:	2101      	movs	r1, #1
 8004884:	4618      	mov	r0, r3
 8004886:	f001 fab5 	bl	8005df4 <RCCEx_PLL3_Config>
 800488a:	4603      	mov	r3, r0
 800488c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004890:	e00a      	b.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004898:	e006      	b.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800489a:	bf00      	nop
 800489c:	e004      	b.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800489e:	bf00      	nop
 80048a0:	e002      	b.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80048a2:	bf00      	nop
 80048a4:	e000      	b.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80048a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d10d      	bne.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80048b0:	4b05      	ldr	r3, [pc, #20]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048b4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80048b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048be:	4a02      	ldr	r2, [pc, #8]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048c0:	430b      	orrs	r3, r1
 80048c2:	6513      	str	r3, [r2, #80]	; 0x50
 80048c4:	e006      	b.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80048c6:	bf00      	nop
 80048c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80048d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048dc:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80048e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80048e4:	2300      	movs	r3, #0
 80048e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80048ea:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80048ee:	460b      	mov	r3, r1
 80048f0:	4313      	orrs	r3, r2
 80048f2:	d055      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80048f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80048fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004900:	d033      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004902:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004906:	d82c      	bhi.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800490c:	d02f      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800490e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004912:	d826      	bhi.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004914:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004918:	d02b      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800491a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800491e:	d820      	bhi.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004920:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004924:	d012      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004926:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800492a:	d81a      	bhi.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800492c:	2b00      	cmp	r3, #0
 800492e:	d022      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004930:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004934:	d115      	bne.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004936:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800493a:	3308      	adds	r3, #8
 800493c:	2101      	movs	r1, #1
 800493e:	4618      	mov	r0, r3
 8004940:	f001 f9a6 	bl	8005c90 <RCCEx_PLL2_Config>
 8004944:	4603      	mov	r3, r0
 8004946:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800494a:	e015      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800494c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004950:	3328      	adds	r3, #40	; 0x28
 8004952:	2101      	movs	r1, #1
 8004954:	4618      	mov	r0, r3
 8004956:	f001 fa4d 	bl	8005df4 <RCCEx_PLL3_Config>
 800495a:	4603      	mov	r3, r0
 800495c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004960:	e00a      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004968:	e006      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800496a:	bf00      	nop
 800496c:	e004      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800496e:	bf00      	nop
 8004970:	e002      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004972:	bf00      	nop
 8004974:	e000      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004976:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004978:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800497c:	2b00      	cmp	r3, #0
 800497e:	d10b      	bne.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004980:	4ba3      	ldr	r3, [pc, #652]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004984:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004988:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800498c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004990:	4a9f      	ldr	r2, [pc, #636]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004992:	430b      	orrs	r3, r1
 8004994:	6593      	str	r3, [r2, #88]	; 0x58
 8004996:	e003      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004998:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800499c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80049a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80049ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80049b0:	2300      	movs	r3, #0
 80049b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80049b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80049ba:	460b      	mov	r3, r1
 80049bc:	4313      	orrs	r3, r2
 80049be:	d037      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80049c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049ca:	d00e      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80049cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049d0:	d816      	bhi.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d018      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80049d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049da:	d111      	bne.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049dc:	4b8c      	ldr	r3, [pc, #560]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e0:	4a8b      	ldr	r2, [pc, #556]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80049e8:	e00f      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80049ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049ee:	3308      	adds	r3, #8
 80049f0:	2101      	movs	r1, #1
 80049f2:	4618      	mov	r0, r3
 80049f4:	f001 f94c 	bl	8005c90 <RCCEx_PLL2_Config>
 80049f8:	4603      	mov	r3, r0
 80049fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80049fe:	e004      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004a06:	e000      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004a08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d10a      	bne.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004a12:	4b7f      	ldr	r3, [pc, #508]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a16:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a20:	4a7b      	ldr	r2, [pc, #492]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a22:	430b      	orrs	r3, r1
 8004a24:	6513      	str	r3, [r2, #80]	; 0x50
 8004a26:	e003      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a2c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a38:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004a3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a40:	2300      	movs	r3, #0
 8004a42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004a46:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	d039      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a56:	2b03      	cmp	r3, #3
 8004a58:	d81c      	bhi.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004a5a:	a201      	add	r2, pc, #4	; (adr r2, 8004a60 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a60:	08004a9d 	.word	0x08004a9d
 8004a64:	08004a71 	.word	0x08004a71
 8004a68:	08004a7f 	.word	0x08004a7f
 8004a6c:	08004a9d 	.word	0x08004a9d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a70:	4b67      	ldr	r3, [pc, #412]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a74:	4a66      	ldr	r2, [pc, #408]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004a7c:	e00f      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a82:	3308      	adds	r3, #8
 8004a84:	2102      	movs	r1, #2
 8004a86:	4618      	mov	r0, r3
 8004a88:	f001 f902 	bl	8005c90 <RCCEx_PLL2_Config>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004a92:	e004      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004a9a:	e000      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004a9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d10a      	bne.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004aa6:	4b5a      	ldr	r3, [pc, #360]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aaa:	f023 0103 	bic.w	r1, r3, #3
 8004aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ab2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ab4:	4a56      	ldr	r2, [pc, #344]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ab6:	430b      	orrs	r3, r1
 8004ab8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004aba:	e003      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004abc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ac0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004acc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004ad0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004ada:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004ade:	460b      	mov	r3, r1
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	f000 809f 	beq.w	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ae6:	4b4b      	ldr	r3, [pc, #300]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a4a      	ldr	r2, [pc, #296]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004af0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004af2:	f7fc fd65 	bl	80015c0 <HAL_GetTick>
 8004af6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004afa:	e00b      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004afc:	f7fc fd60 	bl	80015c0 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	2b64      	cmp	r3, #100	; 0x64
 8004b0a:	d903      	bls.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004b12:	e005      	b.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b14:	4b3f      	ldr	r3, [pc, #252]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d0ed      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004b20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d179      	bne.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004b28:	4b39      	ldr	r3, [pc, #228]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b30:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004b34:	4053      	eors	r3, r2
 8004b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d015      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b3e:	4b34      	ldr	r3, [pc, #208]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b46:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b4a:	4b31      	ldr	r3, [pc, #196]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b4e:	4a30      	ldr	r2, [pc, #192]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b54:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b56:	4b2e      	ldr	r3, [pc, #184]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5a:	4a2d      	ldr	r2, [pc, #180]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b60:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004b62:	4a2b      	ldr	r2, [pc, #172]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b64:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004b68:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b6e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004b72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b76:	d118      	bne.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b78:	f7fc fd22 	bl	80015c0 <HAL_GetTick>
 8004b7c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b80:	e00d      	b.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b82:	f7fc fd1d 	bl	80015c0 <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004b8c:	1ad2      	subs	r2, r2, r3
 8004b8e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d903      	bls.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8004b9c:	e005      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b9e:	4b1c      	ldr	r3, [pc, #112]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba2:	f003 0302 	and.w	r3, r3, #2
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d0eb      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004baa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d129      	bne.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bb6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bc2:	d10e      	bne.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004bc4:	4b12      	ldr	r3, [pc, #72]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004bc6:	691b      	ldr	r3, [r3, #16]
 8004bc8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bd0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004bd4:	091a      	lsrs	r2, r3, #4
 8004bd6:	4b10      	ldr	r3, [pc, #64]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004bd8:	4013      	ands	r3, r2
 8004bda:	4a0d      	ldr	r2, [pc, #52]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004bdc:	430b      	orrs	r3, r1
 8004bde:	6113      	str	r3, [r2, #16]
 8004be0:	e005      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004be2:	4b0b      	ldr	r3, [pc, #44]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	4a0a      	ldr	r2, [pc, #40]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004be8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004bec:	6113      	str	r3, [r2, #16]
 8004bee:	4b08      	ldr	r3, [pc, #32]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004bf0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bf6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004bfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bfe:	4a04      	ldr	r2, [pc, #16]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c00:	430b      	orrs	r3, r1
 8004c02:	6713      	str	r3, [r2, #112]	; 0x70
 8004c04:	e00e      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8004c0e:	e009      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004c10:	58024400 	.word	0x58024400
 8004c14:	58024800 	.word	0x58024800
 8004c18:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c20:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c2c:	f002 0301 	and.w	r3, r2, #1
 8004c30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c34:	2300      	movs	r3, #0
 8004c36:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004c3a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004c3e:	460b      	mov	r3, r1
 8004c40:	4313      	orrs	r3, r2
 8004c42:	f000 8089 	beq.w	8004d58 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c4c:	2b28      	cmp	r3, #40	; 0x28
 8004c4e:	d86b      	bhi.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004c50:	a201      	add	r2, pc, #4	; (adr r2, 8004c58 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c56:	bf00      	nop
 8004c58:	08004d31 	.word	0x08004d31
 8004c5c:	08004d29 	.word	0x08004d29
 8004c60:	08004d29 	.word	0x08004d29
 8004c64:	08004d29 	.word	0x08004d29
 8004c68:	08004d29 	.word	0x08004d29
 8004c6c:	08004d29 	.word	0x08004d29
 8004c70:	08004d29 	.word	0x08004d29
 8004c74:	08004d29 	.word	0x08004d29
 8004c78:	08004cfd 	.word	0x08004cfd
 8004c7c:	08004d29 	.word	0x08004d29
 8004c80:	08004d29 	.word	0x08004d29
 8004c84:	08004d29 	.word	0x08004d29
 8004c88:	08004d29 	.word	0x08004d29
 8004c8c:	08004d29 	.word	0x08004d29
 8004c90:	08004d29 	.word	0x08004d29
 8004c94:	08004d29 	.word	0x08004d29
 8004c98:	08004d13 	.word	0x08004d13
 8004c9c:	08004d29 	.word	0x08004d29
 8004ca0:	08004d29 	.word	0x08004d29
 8004ca4:	08004d29 	.word	0x08004d29
 8004ca8:	08004d29 	.word	0x08004d29
 8004cac:	08004d29 	.word	0x08004d29
 8004cb0:	08004d29 	.word	0x08004d29
 8004cb4:	08004d29 	.word	0x08004d29
 8004cb8:	08004d31 	.word	0x08004d31
 8004cbc:	08004d29 	.word	0x08004d29
 8004cc0:	08004d29 	.word	0x08004d29
 8004cc4:	08004d29 	.word	0x08004d29
 8004cc8:	08004d29 	.word	0x08004d29
 8004ccc:	08004d29 	.word	0x08004d29
 8004cd0:	08004d29 	.word	0x08004d29
 8004cd4:	08004d29 	.word	0x08004d29
 8004cd8:	08004d31 	.word	0x08004d31
 8004cdc:	08004d29 	.word	0x08004d29
 8004ce0:	08004d29 	.word	0x08004d29
 8004ce4:	08004d29 	.word	0x08004d29
 8004ce8:	08004d29 	.word	0x08004d29
 8004cec:	08004d29 	.word	0x08004d29
 8004cf0:	08004d29 	.word	0x08004d29
 8004cf4:	08004d29 	.word	0x08004d29
 8004cf8:	08004d31 	.word	0x08004d31
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d00:	3308      	adds	r3, #8
 8004d02:	2101      	movs	r1, #1
 8004d04:	4618      	mov	r0, r3
 8004d06:	f000 ffc3 	bl	8005c90 <RCCEx_PLL2_Config>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004d10:	e00f      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d16:	3328      	adds	r3, #40	; 0x28
 8004d18:	2101      	movs	r1, #1
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f001 f86a 	bl	8005df4 <RCCEx_PLL3_Config>
 8004d20:	4603      	mov	r3, r0
 8004d22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004d26:	e004      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004d2e:	e000      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004d30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d10a      	bne.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004d3a:	4bbf      	ldr	r3, [pc, #764]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d3e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d48:	4abb      	ldr	r2, [pc, #748]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004d4a:	430b      	orrs	r3, r1
 8004d4c:	6553      	str	r3, [r2, #84]	; 0x54
 8004d4e:	e003      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d54:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d60:	f002 0302 	and.w	r3, r2, #2
 8004d64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d68:	2300      	movs	r3, #0
 8004d6a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004d6e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004d72:	460b      	mov	r3, r1
 8004d74:	4313      	orrs	r3, r2
 8004d76:	d041      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d7e:	2b05      	cmp	r3, #5
 8004d80:	d824      	bhi.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004d82:	a201      	add	r2, pc, #4	; (adr r2, 8004d88 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d88:	08004dd5 	.word	0x08004dd5
 8004d8c:	08004da1 	.word	0x08004da1
 8004d90:	08004db7 	.word	0x08004db7
 8004d94:	08004dd5 	.word	0x08004dd5
 8004d98:	08004dd5 	.word	0x08004dd5
 8004d9c:	08004dd5 	.word	0x08004dd5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004da4:	3308      	adds	r3, #8
 8004da6:	2101      	movs	r1, #1
 8004da8:	4618      	mov	r0, r3
 8004daa:	f000 ff71 	bl	8005c90 <RCCEx_PLL2_Config>
 8004dae:	4603      	mov	r3, r0
 8004db0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004db4:	e00f      	b.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dba:	3328      	adds	r3, #40	; 0x28
 8004dbc:	2101      	movs	r1, #1
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f001 f818 	bl	8005df4 <RCCEx_PLL3_Config>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004dca:	e004      	b.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004dd2:	e000      	b.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004dd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10a      	bne.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004dde:	4b96      	ldr	r3, [pc, #600]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de2:	f023 0107 	bic.w	r1, r3, #7
 8004de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004dec:	4a92      	ldr	r2, [pc, #584]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004dee:	430b      	orrs	r3, r1
 8004df0:	6553      	str	r3, [r2, #84]	; 0x54
 8004df2:	e003      	b.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004df4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004df8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e04:	f002 0304 	and.w	r3, r2, #4
 8004e08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e12:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004e16:	460b      	mov	r3, r1
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	d044      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e24:	2b05      	cmp	r3, #5
 8004e26:	d825      	bhi.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004e28:	a201      	add	r2, pc, #4	; (adr r2, 8004e30 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e2e:	bf00      	nop
 8004e30:	08004e7d 	.word	0x08004e7d
 8004e34:	08004e49 	.word	0x08004e49
 8004e38:	08004e5f 	.word	0x08004e5f
 8004e3c:	08004e7d 	.word	0x08004e7d
 8004e40:	08004e7d 	.word	0x08004e7d
 8004e44:	08004e7d 	.word	0x08004e7d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e4c:	3308      	adds	r3, #8
 8004e4e:	2101      	movs	r1, #1
 8004e50:	4618      	mov	r0, r3
 8004e52:	f000 ff1d 	bl	8005c90 <RCCEx_PLL2_Config>
 8004e56:	4603      	mov	r3, r0
 8004e58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004e5c:	e00f      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e62:	3328      	adds	r3, #40	; 0x28
 8004e64:	2101      	movs	r1, #1
 8004e66:	4618      	mov	r0, r3
 8004e68:	f000 ffc4 	bl	8005df4 <RCCEx_PLL3_Config>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004e72:	e004      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004e7a:	e000      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004e7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d10b      	bne.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e86:	4b6c      	ldr	r3, [pc, #432]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e8a:	f023 0107 	bic.w	r1, r3, #7
 8004e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e96:	4a68      	ldr	r2, [pc, #416]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004e98:	430b      	orrs	r3, r1
 8004e9a:	6593      	str	r3, [r2, #88]	; 0x58
 8004e9c:	e003      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ea2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eae:	f002 0320 	and.w	r3, r2, #32
 8004eb2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004ebc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	d055      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ece:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ed2:	d033      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004ed4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ed8:	d82c      	bhi.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ede:	d02f      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ee4:	d826      	bhi.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004ee6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004eea:	d02b      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004eec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ef0:	d820      	bhi.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004ef2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ef6:	d012      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004ef8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004efc:	d81a      	bhi.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d022      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004f02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f06:	d115      	bne.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f0c:	3308      	adds	r3, #8
 8004f0e:	2100      	movs	r1, #0
 8004f10:	4618      	mov	r0, r3
 8004f12:	f000 febd 	bl	8005c90 <RCCEx_PLL2_Config>
 8004f16:	4603      	mov	r3, r0
 8004f18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004f1c:	e015      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f22:	3328      	adds	r3, #40	; 0x28
 8004f24:	2102      	movs	r1, #2
 8004f26:	4618      	mov	r0, r3
 8004f28:	f000 ff64 	bl	8005df4 <RCCEx_PLL3_Config>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004f32:	e00a      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004f3a:	e006      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004f3c:	bf00      	nop
 8004f3e:	e004      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004f40:	bf00      	nop
 8004f42:	e002      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004f44:	bf00      	nop
 8004f46:	e000      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004f48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d10b      	bne.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f52:	4b39      	ldr	r3, [pc, #228]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f56:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f62:	4a35      	ldr	r2, [pc, #212]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004f64:	430b      	orrs	r3, r1
 8004f66:	6553      	str	r3, [r2, #84]	; 0x54
 8004f68:	e003      	b.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f7a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004f7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004f82:	2300      	movs	r3, #0
 8004f84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004f88:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	d058      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f9a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004f9e:	d033      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004fa0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004fa4:	d82c      	bhi.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004fa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004faa:	d02f      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004fac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fb0:	d826      	bhi.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004fb2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fb6:	d02b      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004fb8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fbc:	d820      	bhi.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004fbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fc2:	d012      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004fc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fc8:	d81a      	bhi.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d022      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004fce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fd2:	d115      	bne.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fd8:	3308      	adds	r3, #8
 8004fda:	2100      	movs	r1, #0
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f000 fe57 	bl	8005c90 <RCCEx_PLL2_Config>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004fe8:	e015      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fee:	3328      	adds	r3, #40	; 0x28
 8004ff0:	2102      	movs	r1, #2
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f000 fefe 	bl	8005df4 <RCCEx_PLL3_Config>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004ffe:	e00a      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005006:	e006      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005008:	bf00      	nop
 800500a:	e004      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800500c:	bf00      	nop
 800500e:	e002      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005010:	bf00      	nop
 8005012:	e000      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005014:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005016:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800501a:	2b00      	cmp	r3, #0
 800501c:	d10e      	bne.n	800503c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800501e:	4b06      	ldr	r3, [pc, #24]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005022:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8005026:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800502a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800502e:	4a02      	ldr	r2, [pc, #8]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005030:	430b      	orrs	r3, r1
 8005032:	6593      	str	r3, [r2, #88]	; 0x58
 8005034:	e006      	b.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005036:	bf00      	nop
 8005038:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800503c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005040:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005044:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800504c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005050:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005054:	2300      	movs	r3, #0
 8005056:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800505a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800505e:	460b      	mov	r3, r1
 8005060:	4313      	orrs	r3, r2
 8005062:	d055      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005064:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005068:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800506c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005070:	d033      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005072:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005076:	d82c      	bhi.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005078:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800507c:	d02f      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800507e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005082:	d826      	bhi.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005084:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005088:	d02b      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800508a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800508e:	d820      	bhi.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005090:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005094:	d012      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005096:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800509a:	d81a      	bhi.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800509c:	2b00      	cmp	r3, #0
 800509e:	d022      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80050a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050a4:	d115      	bne.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80050a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050aa:	3308      	adds	r3, #8
 80050ac:	2100      	movs	r1, #0
 80050ae:	4618      	mov	r0, r3
 80050b0:	f000 fdee 	bl	8005c90 <RCCEx_PLL2_Config>
 80050b4:	4603      	mov	r3, r0
 80050b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80050ba:	e015      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80050bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050c0:	3328      	adds	r3, #40	; 0x28
 80050c2:	2102      	movs	r1, #2
 80050c4:	4618      	mov	r0, r3
 80050c6:	f000 fe95 	bl	8005df4 <RCCEx_PLL3_Config>
 80050ca:	4603      	mov	r3, r0
 80050cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80050d0:	e00a      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80050d8:	e006      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80050da:	bf00      	nop
 80050dc:	e004      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80050de:	bf00      	nop
 80050e0:	e002      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80050e2:	bf00      	nop
 80050e4:	e000      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80050e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10b      	bne.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80050f0:	4ba1      	ldr	r3, [pc, #644]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80050f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80050f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005100:	4a9d      	ldr	r2, [pc, #628]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005102:	430b      	orrs	r3, r1
 8005104:	6593      	str	r3, [r2, #88]	; 0x58
 8005106:	e003      	b.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005108:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800510c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005110:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005118:	f002 0308 	and.w	r3, r2, #8
 800511c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005120:	2300      	movs	r3, #0
 8005122:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005126:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800512a:	460b      	mov	r3, r1
 800512c:	4313      	orrs	r3, r2
 800512e:	d01e      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005130:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005134:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005138:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800513c:	d10c      	bne.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800513e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005142:	3328      	adds	r3, #40	; 0x28
 8005144:	2102      	movs	r1, #2
 8005146:	4618      	mov	r0, r3
 8005148:	f000 fe54 	bl	8005df4 <RCCEx_PLL3_Config>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d002      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005158:	4b87      	ldr	r3, [pc, #540]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800515a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800515c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005160:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005164:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005168:	4a83      	ldr	r2, [pc, #524]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800516a:	430b      	orrs	r3, r1
 800516c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800516e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005176:	f002 0310 	and.w	r3, r2, #16
 800517a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800517e:	2300      	movs	r3, #0
 8005180:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005184:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005188:	460b      	mov	r3, r1
 800518a:	4313      	orrs	r3, r2
 800518c:	d01e      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800518e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005192:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005196:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800519a:	d10c      	bne.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800519c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051a0:	3328      	adds	r3, #40	; 0x28
 80051a2:	2102      	movs	r1, #2
 80051a4:	4618      	mov	r0, r3
 80051a6:	f000 fe25 	bl	8005df4 <RCCEx_PLL3_Config>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d002      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80051b6:	4b70      	ldr	r3, [pc, #448]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80051b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80051be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051c6:	4a6c      	ldr	r2, [pc, #432]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80051c8:	430b      	orrs	r3, r1
 80051ca:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80051cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80051d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80051dc:	2300      	movs	r3, #0
 80051de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80051e2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80051e6:	460b      	mov	r3, r1
 80051e8:	4313      	orrs	r3, r2
 80051ea:	d03e      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80051ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80051f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051f8:	d022      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80051fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051fe:	d81b      	bhi.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005200:	2b00      	cmp	r3, #0
 8005202:	d003      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005208:	d00b      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800520a:	e015      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800520c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005210:	3308      	adds	r3, #8
 8005212:	2100      	movs	r1, #0
 8005214:	4618      	mov	r0, r3
 8005216:	f000 fd3b 	bl	8005c90 <RCCEx_PLL2_Config>
 800521a:	4603      	mov	r3, r0
 800521c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005220:	e00f      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005222:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005226:	3328      	adds	r3, #40	; 0x28
 8005228:	2102      	movs	r1, #2
 800522a:	4618      	mov	r0, r3
 800522c:	f000 fde2 	bl	8005df4 <RCCEx_PLL3_Config>
 8005230:	4603      	mov	r3, r0
 8005232:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005236:	e004      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800523e:	e000      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005240:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005242:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005246:	2b00      	cmp	r3, #0
 8005248:	d10b      	bne.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800524a:	4b4b      	ldr	r3, [pc, #300]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800524c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800524e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005252:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005256:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800525a:	4a47      	ldr	r2, [pc, #284]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800525c:	430b      	orrs	r3, r1
 800525e:	6593      	str	r3, [r2, #88]	; 0x58
 8005260:	e003      	b.n	800526a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005262:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005266:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800526a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800526e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005272:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005276:	67bb      	str	r3, [r7, #120]	; 0x78
 8005278:	2300      	movs	r3, #0
 800527a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800527c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005280:	460b      	mov	r3, r1
 8005282:	4313      	orrs	r3, r2
 8005284:	d03b      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005286:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800528a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800528e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005292:	d01f      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005294:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005298:	d818      	bhi.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800529a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800529e:	d003      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80052a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052a4:	d007      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80052a6:	e011      	b.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052a8:	4b33      	ldr	r3, [pc, #204]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80052aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ac:	4a32      	ldr	r2, [pc, #200]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80052ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80052b4:	e00f      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80052b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052ba:	3328      	adds	r3, #40	; 0x28
 80052bc:	2101      	movs	r1, #1
 80052be:	4618      	mov	r0, r3
 80052c0:	f000 fd98 	bl	8005df4 <RCCEx_PLL3_Config>
 80052c4:	4603      	mov	r3, r0
 80052c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80052ca:	e004      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80052d2:	e000      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80052d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10b      	bne.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052de:	4b26      	ldr	r3, [pc, #152]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80052e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80052e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ee:	4a22      	ldr	r2, [pc, #136]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80052f0:	430b      	orrs	r3, r1
 80052f2:	6553      	str	r3, [r2, #84]	; 0x54
 80052f4:	e003      	b.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80052fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005306:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800530a:	673b      	str	r3, [r7, #112]	; 0x70
 800530c:	2300      	movs	r3, #0
 800530e:	677b      	str	r3, [r7, #116]	; 0x74
 8005310:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005314:	460b      	mov	r3, r1
 8005316:	4313      	orrs	r3, r2
 8005318:	d034      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800531a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800531e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005320:	2b00      	cmp	r3, #0
 8005322:	d003      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005328:	d007      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800532a:	e011      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800532c:	4b12      	ldr	r3, [pc, #72]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800532e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005330:	4a11      	ldr	r2, [pc, #68]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005332:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005336:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005338:	e00e      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800533a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800533e:	3308      	adds	r3, #8
 8005340:	2102      	movs	r1, #2
 8005342:	4618      	mov	r0, r3
 8005344:	f000 fca4 	bl	8005c90 <RCCEx_PLL2_Config>
 8005348:	4603      	mov	r3, r0
 800534a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800534e:	e003      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005356:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005358:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800535c:	2b00      	cmp	r3, #0
 800535e:	d10d      	bne.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005360:	4b05      	ldr	r3, [pc, #20]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005364:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005368:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800536c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800536e:	4a02      	ldr	r2, [pc, #8]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005370:	430b      	orrs	r3, r1
 8005372:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005374:	e006      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005376:	bf00      	nop
 8005378:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800537c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005380:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005384:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800538c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005390:	66bb      	str	r3, [r7, #104]	; 0x68
 8005392:	2300      	movs	r3, #0
 8005394:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005396:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800539a:	460b      	mov	r3, r1
 800539c:	4313      	orrs	r3, r2
 800539e:	d00c      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80053a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053a4:	3328      	adds	r3, #40	; 0x28
 80053a6:	2102      	movs	r1, #2
 80053a8:	4618      	mov	r0, r3
 80053aa:	f000 fd23 	bl	8005df4 <RCCEx_PLL3_Config>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d002      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80053ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80053c6:	663b      	str	r3, [r7, #96]	; 0x60
 80053c8:	2300      	movs	r3, #0
 80053ca:	667b      	str	r3, [r7, #100]	; 0x64
 80053cc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80053d0:	460b      	mov	r3, r1
 80053d2:	4313      	orrs	r3, r2
 80053d4:	d038      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80053d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053e2:	d018      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80053e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053e8:	d811      	bhi.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80053ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053ee:	d014      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80053f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053f4:	d80b      	bhi.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d011      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80053fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053fe:	d106      	bne.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005400:	4bc3      	ldr	r3, [pc, #780]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005404:	4ac2      	ldr	r2, [pc, #776]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005406:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800540a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800540c:	e008      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005414:	e004      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005416:	bf00      	nop
 8005418:	e002      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800541a:	bf00      	nop
 800541c:	e000      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800541e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005420:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005424:	2b00      	cmp	r3, #0
 8005426:	d10b      	bne.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005428:	4bb9      	ldr	r3, [pc, #740]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800542a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800542c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005430:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005434:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005438:	4ab5      	ldr	r2, [pc, #724]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800543a:	430b      	orrs	r3, r1
 800543c:	6553      	str	r3, [r2, #84]	; 0x54
 800543e:	e003      	b.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005440:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005444:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005448:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800544c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005450:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005454:	65bb      	str	r3, [r7, #88]	; 0x58
 8005456:	2300      	movs	r3, #0
 8005458:	65fb      	str	r3, [r7, #92]	; 0x5c
 800545a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800545e:	460b      	mov	r3, r1
 8005460:	4313      	orrs	r3, r2
 8005462:	d009      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005464:	4baa      	ldr	r3, [pc, #680]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005468:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800546c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005470:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005472:	4aa7      	ldr	r2, [pc, #668]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005474:	430b      	orrs	r3, r1
 8005476:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005478:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800547c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005480:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8005484:	653b      	str	r3, [r7, #80]	; 0x50
 8005486:	2300      	movs	r3, #0
 8005488:	657b      	str	r3, [r7, #84]	; 0x54
 800548a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800548e:	460b      	mov	r3, r1
 8005490:	4313      	orrs	r3, r2
 8005492:	d00a      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005494:	4b9e      	ldr	r3, [pc, #632]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800549c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054a0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80054a4:	4a9a      	ldr	r2, [pc, #616]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80054a6:	430b      	orrs	r3, r1
 80054a8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80054aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80054b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80054b8:	2300      	movs	r3, #0
 80054ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054bc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80054c0:	460b      	mov	r3, r1
 80054c2:	4313      	orrs	r3, r2
 80054c4:	d009      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80054c6:	4b92      	ldr	r3, [pc, #584]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80054c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054ca:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80054ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054d4:	4a8e      	ldr	r2, [pc, #568]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80054d6:	430b      	orrs	r3, r1
 80054d8:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80054da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e2:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80054e6:	643b      	str	r3, [r7, #64]	; 0x40
 80054e8:	2300      	movs	r3, #0
 80054ea:	647b      	str	r3, [r7, #68]	; 0x44
 80054ec:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80054f0:	460b      	mov	r3, r1
 80054f2:	4313      	orrs	r3, r2
 80054f4:	d00e      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80054f6:	4b86      	ldr	r3, [pc, #536]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	4a85      	ldr	r2, [pc, #532]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80054fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005500:	6113      	str	r3, [r2, #16]
 8005502:	4b83      	ldr	r3, [pc, #524]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005504:	6919      	ldr	r1, [r3, #16]
 8005506:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800550a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800550e:	4a80      	ldr	r2, [pc, #512]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005510:	430b      	orrs	r3, r1
 8005512:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005514:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005520:	63bb      	str	r3, [r7, #56]	; 0x38
 8005522:	2300      	movs	r3, #0
 8005524:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005526:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800552a:	460b      	mov	r3, r1
 800552c:	4313      	orrs	r3, r2
 800552e:	d009      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005530:	4b77      	ldr	r3, [pc, #476]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005534:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005538:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800553c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800553e:	4a74      	ldr	r2, [pc, #464]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005540:	430b      	orrs	r3, r1
 8005542:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005544:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005550:	633b      	str	r3, [r7, #48]	; 0x30
 8005552:	2300      	movs	r3, #0
 8005554:	637b      	str	r3, [r7, #52]	; 0x34
 8005556:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800555a:	460b      	mov	r3, r1
 800555c:	4313      	orrs	r3, r2
 800555e:	d00a      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005560:	4b6b      	ldr	r3, [pc, #428]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005564:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8005568:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800556c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005570:	4a67      	ldr	r2, [pc, #412]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005572:	430b      	orrs	r3, r1
 8005574:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005576:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800557a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800557e:	2100      	movs	r1, #0
 8005580:	62b9      	str	r1, [r7, #40]	; 0x28
 8005582:	f003 0301 	and.w	r3, r3, #1
 8005586:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005588:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800558c:	460b      	mov	r3, r1
 800558e:	4313      	orrs	r3, r2
 8005590:	d011      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005592:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005596:	3308      	adds	r3, #8
 8005598:	2100      	movs	r1, #0
 800559a:	4618      	mov	r0, r3
 800559c:	f000 fb78 	bl	8005c90 <RCCEx_PLL2_Config>
 80055a0:	4603      	mov	r3, r0
 80055a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80055a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d003      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80055b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055be:	2100      	movs	r1, #0
 80055c0:	6239      	str	r1, [r7, #32]
 80055c2:	f003 0302 	and.w	r3, r3, #2
 80055c6:	627b      	str	r3, [r7, #36]	; 0x24
 80055c8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80055cc:	460b      	mov	r3, r1
 80055ce:	4313      	orrs	r3, r2
 80055d0:	d011      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80055d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055d6:	3308      	adds	r3, #8
 80055d8:	2101      	movs	r1, #1
 80055da:	4618      	mov	r0, r3
 80055dc:	f000 fb58 	bl	8005c90 <RCCEx_PLL2_Config>
 80055e0:	4603      	mov	r3, r0
 80055e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80055e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d003      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80055f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fe:	2100      	movs	r1, #0
 8005600:	61b9      	str	r1, [r7, #24]
 8005602:	f003 0304 	and.w	r3, r3, #4
 8005606:	61fb      	str	r3, [r7, #28]
 8005608:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800560c:	460b      	mov	r3, r1
 800560e:	4313      	orrs	r3, r2
 8005610:	d011      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005612:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005616:	3308      	adds	r3, #8
 8005618:	2102      	movs	r1, #2
 800561a:	4618      	mov	r0, r3
 800561c:	f000 fb38 	bl	8005c90 <RCCEx_PLL2_Config>
 8005620:	4603      	mov	r3, r0
 8005622:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005626:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800562a:	2b00      	cmp	r3, #0
 800562c:	d003      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800562e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005632:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005636:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800563a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563e:	2100      	movs	r1, #0
 8005640:	6139      	str	r1, [r7, #16]
 8005642:	f003 0308 	and.w	r3, r3, #8
 8005646:	617b      	str	r3, [r7, #20]
 8005648:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800564c:	460b      	mov	r3, r1
 800564e:	4313      	orrs	r3, r2
 8005650:	d011      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005652:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005656:	3328      	adds	r3, #40	; 0x28
 8005658:	2100      	movs	r1, #0
 800565a:	4618      	mov	r0, r3
 800565c:	f000 fbca 	bl	8005df4 <RCCEx_PLL3_Config>
 8005660:	4603      	mov	r3, r0
 8005662:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8005666:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800566e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005672:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005676:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800567a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800567e:	2100      	movs	r1, #0
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	f003 0310 	and.w	r3, r3, #16
 8005686:	60fb      	str	r3, [r7, #12]
 8005688:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800568c:	460b      	mov	r3, r1
 800568e:	4313      	orrs	r3, r2
 8005690:	d011      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005692:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005696:	3328      	adds	r3, #40	; 0x28
 8005698:	2101      	movs	r1, #1
 800569a:	4618      	mov	r0, r3
 800569c:	f000 fbaa 	bl	8005df4 <RCCEx_PLL3_Config>
 80056a0:	4603      	mov	r3, r0
 80056a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80056a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d003      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80056b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056be:	2100      	movs	r1, #0
 80056c0:	6039      	str	r1, [r7, #0]
 80056c2:	f003 0320 	and.w	r3, r3, #32
 80056c6:	607b      	str	r3, [r7, #4]
 80056c8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80056cc:	460b      	mov	r3, r1
 80056ce:	4313      	orrs	r3, r2
 80056d0:	d011      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80056d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056d6:	3328      	adds	r3, #40	; 0x28
 80056d8:	2102      	movs	r1, #2
 80056da:	4618      	mov	r0, r3
 80056dc:	f000 fb8a 	bl	8005df4 <RCCEx_PLL3_Config>
 80056e0:	4603      	mov	r3, r0
 80056e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80056e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d003      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80056f6:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d101      	bne.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80056fe:	2300      	movs	r3, #0
 8005700:	e000      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
}
 8005704:	4618      	mov	r0, r3
 8005706:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800570a:	46bd      	mov	sp, r7
 800570c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005710:	58024400 	.word	0x58024400

08005714 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005718:	f7fe fd54 	bl	80041c4 <HAL_RCC_GetHCLKFreq>
 800571c:	4602      	mov	r2, r0
 800571e:	4b06      	ldr	r3, [pc, #24]	; (8005738 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005720:	6a1b      	ldr	r3, [r3, #32]
 8005722:	091b      	lsrs	r3, r3, #4
 8005724:	f003 0307 	and.w	r3, r3, #7
 8005728:	4904      	ldr	r1, [pc, #16]	; (800573c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800572a:	5ccb      	ldrb	r3, [r1, r3]
 800572c:	f003 031f 	and.w	r3, r3, #31
 8005730:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005734:	4618      	mov	r0, r3
 8005736:	bd80      	pop	{r7, pc}
 8005738:	58024400 	.word	0x58024400
 800573c:	080116cc 	.word	0x080116cc

08005740 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005740:	b480      	push	{r7}
 8005742:	b089      	sub	sp, #36	; 0x24
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005748:	4ba1      	ldr	r3, [pc, #644]	; (80059d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800574a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800574c:	f003 0303 	and.w	r3, r3, #3
 8005750:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005752:	4b9f      	ldr	r3, [pc, #636]	; (80059d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005756:	0b1b      	lsrs	r3, r3, #12
 8005758:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800575c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800575e:	4b9c      	ldr	r3, [pc, #624]	; (80059d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005762:	091b      	lsrs	r3, r3, #4
 8005764:	f003 0301 	and.w	r3, r3, #1
 8005768:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800576a:	4b99      	ldr	r3, [pc, #612]	; (80059d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800576c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800576e:	08db      	lsrs	r3, r3, #3
 8005770:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	fb02 f303 	mul.w	r3, r2, r3
 800577a:	ee07 3a90 	vmov	s15, r3
 800577e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005782:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	2b00      	cmp	r3, #0
 800578a:	f000 8111 	beq.w	80059b0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	2b02      	cmp	r3, #2
 8005792:	f000 8083 	beq.w	800589c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	2b02      	cmp	r3, #2
 800579a:	f200 80a1 	bhi.w	80058e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d003      	beq.n	80057ac <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d056      	beq.n	8005858 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80057aa:	e099      	b.n	80058e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057ac:	4b88      	ldr	r3, [pc, #544]	; (80059d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0320 	and.w	r3, r3, #32
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d02d      	beq.n	8005814 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80057b8:	4b85      	ldr	r3, [pc, #532]	; (80059d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	08db      	lsrs	r3, r3, #3
 80057be:	f003 0303 	and.w	r3, r3, #3
 80057c2:	4a84      	ldr	r2, [pc, #528]	; (80059d4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80057c4:	fa22 f303 	lsr.w	r3, r2, r3
 80057c8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	ee07 3a90 	vmov	s15, r3
 80057d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	ee07 3a90 	vmov	s15, r3
 80057da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057e2:	4b7b      	ldr	r3, [pc, #492]	; (80059d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057ea:	ee07 3a90 	vmov	s15, r3
 80057ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80057f6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80059d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80057fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005802:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005806:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800580a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800580e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005812:	e087      	b.n	8005924 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	ee07 3a90 	vmov	s15, r3
 800581a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800581e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80059dc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005826:	4b6a      	ldr	r3, [pc, #424]	; (80059d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800582e:	ee07 3a90 	vmov	s15, r3
 8005832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005836:	ed97 6a03 	vldr	s12, [r7, #12]
 800583a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80059d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800583e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005842:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005846:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800584a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800584e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005852:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005856:	e065      	b.n	8005924 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	ee07 3a90 	vmov	s15, r3
 800585e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005862:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80059e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800586a:	4b59      	ldr	r3, [pc, #356]	; (80059d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800586c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800586e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005872:	ee07 3a90 	vmov	s15, r3
 8005876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800587a:	ed97 6a03 	vldr	s12, [r7, #12]
 800587e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80059d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005882:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800588a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800588e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005896:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800589a:	e043      	b.n	8005924 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	ee07 3a90 	vmov	s15, r3
 80058a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058a6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80059e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80058aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058ae:	4b48      	ldr	r3, [pc, #288]	; (80059d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058b6:	ee07 3a90 	vmov	s15, r3
 80058ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058be:	ed97 6a03 	vldr	s12, [r7, #12]
 80058c2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80059d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80058c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058de:	e021      	b.n	8005924 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	ee07 3a90 	vmov	s15, r3
 80058e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80059e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80058ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058f2:	4b37      	ldr	r3, [pc, #220]	; (80059d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058fa:	ee07 3a90 	vmov	s15, r3
 80058fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005902:	ed97 6a03 	vldr	s12, [r7, #12]
 8005906:	eddf 5a34 	vldr	s11, [pc, #208]	; 80059d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800590a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800590e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005912:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005916:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800591a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800591e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005922:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005924:	4b2a      	ldr	r3, [pc, #168]	; (80059d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005928:	0a5b      	lsrs	r3, r3, #9
 800592a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800592e:	ee07 3a90 	vmov	s15, r3
 8005932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005936:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800593a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800593e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005942:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005946:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800594a:	ee17 2a90 	vmov	r2, s15
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005952:	4b1f      	ldr	r3, [pc, #124]	; (80059d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005956:	0c1b      	lsrs	r3, r3, #16
 8005958:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800595c:	ee07 3a90 	vmov	s15, r3
 8005960:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005964:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005968:	ee37 7a87 	vadd.f32	s14, s15, s14
 800596c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005970:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005974:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005978:	ee17 2a90 	vmov	r2, s15
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005980:	4b13      	ldr	r3, [pc, #76]	; (80059d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005984:	0e1b      	lsrs	r3, r3, #24
 8005986:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800598a:	ee07 3a90 	vmov	s15, r3
 800598e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005992:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005996:	ee37 7a87 	vadd.f32	s14, s15, s14
 800599a:	edd7 6a07 	vldr	s13, [r7, #28]
 800599e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059a6:	ee17 2a90 	vmov	r2, s15
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80059ae:	e008      	b.n	80059c2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	609a      	str	r2, [r3, #8]
}
 80059c2:	bf00      	nop
 80059c4:	3724      	adds	r7, #36	; 0x24
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	58024400 	.word	0x58024400
 80059d4:	03d09000 	.word	0x03d09000
 80059d8:	46000000 	.word	0x46000000
 80059dc:	4c742400 	.word	0x4c742400
 80059e0:	4a742400 	.word	0x4a742400
 80059e4:	4af42400 	.word	0x4af42400

080059e8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b089      	sub	sp, #36	; 0x24
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80059f0:	4ba1      	ldr	r3, [pc, #644]	; (8005c78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f4:	f003 0303 	and.w	r3, r3, #3
 80059f8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80059fa:	4b9f      	ldr	r3, [pc, #636]	; (8005c78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059fe:	0d1b      	lsrs	r3, r3, #20
 8005a00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a04:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005a06:	4b9c      	ldr	r3, [pc, #624]	; (8005c78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a0a:	0a1b      	lsrs	r3, r3, #8
 8005a0c:	f003 0301 	and.w	r3, r3, #1
 8005a10:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005a12:	4b99      	ldr	r3, [pc, #612]	; (8005c78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a16:	08db      	lsrs	r3, r3, #3
 8005a18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a1c:	693a      	ldr	r2, [r7, #16]
 8005a1e:	fb02 f303 	mul.w	r3, r2, r3
 8005a22:	ee07 3a90 	vmov	s15, r3
 8005a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a2a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f000 8111 	beq.w	8005c58 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	f000 8083 	beq.w	8005b44 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	f200 80a1 	bhi.w	8005b88 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d003      	beq.n	8005a54 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d056      	beq.n	8005b00 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005a52:	e099      	b.n	8005b88 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a54:	4b88      	ldr	r3, [pc, #544]	; (8005c78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 0320 	and.w	r3, r3, #32
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d02d      	beq.n	8005abc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a60:	4b85      	ldr	r3, [pc, #532]	; (8005c78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	08db      	lsrs	r3, r3, #3
 8005a66:	f003 0303 	and.w	r3, r3, #3
 8005a6a:	4a84      	ldr	r2, [pc, #528]	; (8005c7c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8005a70:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	ee07 3a90 	vmov	s15, r3
 8005a78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	ee07 3a90 	vmov	s15, r3
 8005a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a8a:	4b7b      	ldr	r3, [pc, #492]	; (8005c78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a92:	ee07 3a90 	vmov	s15, r3
 8005a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a9e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005c80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005aa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ab6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005aba:	e087      	b.n	8005bcc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	ee07 3a90 	vmov	s15, r3
 8005ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ac6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005c84 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005aca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ace:	4b6a      	ldr	r3, [pc, #424]	; (8005c78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ad6:	ee07 3a90 	vmov	s15, r3
 8005ada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ade:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ae2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005c80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005af2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005afa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005afe:	e065      	b.n	8005bcc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	ee07 3a90 	vmov	s15, r3
 8005b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b0a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005c88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b12:	4b59      	ldr	r3, [pc, #356]	; (8005c78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b1a:	ee07 3a90 	vmov	s15, r3
 8005b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b22:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b26:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005c80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b42:	e043      	b.n	8005bcc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	ee07 3a90 	vmov	s15, r3
 8005b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b4e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005c8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b56:	4b48      	ldr	r3, [pc, #288]	; (8005c78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b5e:	ee07 3a90 	vmov	s15, r3
 8005b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b66:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b6a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005c80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b86:	e021      	b.n	8005bcc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	ee07 3a90 	vmov	s15, r3
 8005b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b92:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005c88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b9a:	4b37      	ldr	r3, [pc, #220]	; (8005c78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ba2:	ee07 3a90 	vmov	s15, r3
 8005ba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005baa:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bae:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005c80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005bb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005bca:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005bcc:	4b2a      	ldr	r3, [pc, #168]	; (8005c78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd0:	0a5b      	lsrs	r3, r3, #9
 8005bd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bd6:	ee07 3a90 	vmov	s15, r3
 8005bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005be2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005be6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bf2:	ee17 2a90 	vmov	r2, s15
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005bfa:	4b1f      	ldr	r3, [pc, #124]	; (8005c78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfe:	0c1b      	lsrs	r3, r3, #16
 8005c00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c04:	ee07 3a90 	vmov	s15, r3
 8005c08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c10:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c14:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c20:	ee17 2a90 	vmov	r2, s15
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005c28:	4b13      	ldr	r3, [pc, #76]	; (8005c78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2c:	0e1b      	lsrs	r3, r3, #24
 8005c2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c32:	ee07 3a90 	vmov	s15, r3
 8005c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c42:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c4e:	ee17 2a90 	vmov	r2, s15
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005c56:	e008      	b.n	8005c6a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	609a      	str	r2, [r3, #8]
}
 8005c6a:	bf00      	nop
 8005c6c:	3724      	adds	r7, #36	; 0x24
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop
 8005c78:	58024400 	.word	0x58024400
 8005c7c:	03d09000 	.word	0x03d09000
 8005c80:	46000000 	.word	0x46000000
 8005c84:	4c742400 	.word	0x4c742400
 8005c88:	4a742400 	.word	0x4a742400
 8005c8c:	4af42400 	.word	0x4af42400

08005c90 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005c9e:	4b53      	ldr	r3, [pc, #332]	; (8005dec <RCCEx_PLL2_Config+0x15c>)
 8005ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca2:	f003 0303 	and.w	r3, r3, #3
 8005ca6:	2b03      	cmp	r3, #3
 8005ca8:	d101      	bne.n	8005cae <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e099      	b.n	8005de2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005cae:	4b4f      	ldr	r3, [pc, #316]	; (8005dec <RCCEx_PLL2_Config+0x15c>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a4e      	ldr	r2, [pc, #312]	; (8005dec <RCCEx_PLL2_Config+0x15c>)
 8005cb4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005cb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cba:	f7fb fc81 	bl	80015c0 <HAL_GetTick>
 8005cbe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005cc0:	e008      	b.n	8005cd4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005cc2:	f7fb fc7d 	bl	80015c0 <HAL_GetTick>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d901      	bls.n	8005cd4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	e086      	b.n	8005de2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005cd4:	4b45      	ldr	r3, [pc, #276]	; (8005dec <RCCEx_PLL2_Config+0x15c>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d1f0      	bne.n	8005cc2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005ce0:	4b42      	ldr	r3, [pc, #264]	; (8005dec <RCCEx_PLL2_Config+0x15c>)
 8005ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	031b      	lsls	r3, r3, #12
 8005cee:	493f      	ldr	r1, [pc, #252]	; (8005dec <RCCEx_PLL2_Config+0x15c>)
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	628b      	str	r3, [r1, #40]	; 0x28
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	3b01      	subs	r3, #1
 8005d04:	025b      	lsls	r3, r3, #9
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	431a      	orrs	r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	041b      	lsls	r3, r3, #16
 8005d12:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005d16:	431a      	orrs	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	061b      	lsls	r3, r3, #24
 8005d20:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005d24:	4931      	ldr	r1, [pc, #196]	; (8005dec <RCCEx_PLL2_Config+0x15c>)
 8005d26:	4313      	orrs	r3, r2
 8005d28:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005d2a:	4b30      	ldr	r3, [pc, #192]	; (8005dec <RCCEx_PLL2_Config+0x15c>)
 8005d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d2e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	695b      	ldr	r3, [r3, #20]
 8005d36:	492d      	ldr	r1, [pc, #180]	; (8005dec <RCCEx_PLL2_Config+0x15c>)
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005d3c:	4b2b      	ldr	r3, [pc, #172]	; (8005dec <RCCEx_PLL2_Config+0x15c>)
 8005d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d40:	f023 0220 	bic.w	r2, r3, #32
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	4928      	ldr	r1, [pc, #160]	; (8005dec <RCCEx_PLL2_Config+0x15c>)
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005d4e:	4b27      	ldr	r3, [pc, #156]	; (8005dec <RCCEx_PLL2_Config+0x15c>)
 8005d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d52:	4a26      	ldr	r2, [pc, #152]	; (8005dec <RCCEx_PLL2_Config+0x15c>)
 8005d54:	f023 0310 	bic.w	r3, r3, #16
 8005d58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005d5a:	4b24      	ldr	r3, [pc, #144]	; (8005dec <RCCEx_PLL2_Config+0x15c>)
 8005d5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d5e:	4b24      	ldr	r3, [pc, #144]	; (8005df0 <RCCEx_PLL2_Config+0x160>)
 8005d60:	4013      	ands	r3, r2
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	69d2      	ldr	r2, [r2, #28]
 8005d66:	00d2      	lsls	r2, r2, #3
 8005d68:	4920      	ldr	r1, [pc, #128]	; (8005dec <RCCEx_PLL2_Config+0x15c>)
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005d6e:	4b1f      	ldr	r3, [pc, #124]	; (8005dec <RCCEx_PLL2_Config+0x15c>)
 8005d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d72:	4a1e      	ldr	r2, [pc, #120]	; (8005dec <RCCEx_PLL2_Config+0x15c>)
 8005d74:	f043 0310 	orr.w	r3, r3, #16
 8005d78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d106      	bne.n	8005d8e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005d80:	4b1a      	ldr	r3, [pc, #104]	; (8005dec <RCCEx_PLL2_Config+0x15c>)
 8005d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d84:	4a19      	ldr	r2, [pc, #100]	; (8005dec <RCCEx_PLL2_Config+0x15c>)
 8005d86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005d8c:	e00f      	b.n	8005dae <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d106      	bne.n	8005da2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005d94:	4b15      	ldr	r3, [pc, #84]	; (8005dec <RCCEx_PLL2_Config+0x15c>)
 8005d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d98:	4a14      	ldr	r2, [pc, #80]	; (8005dec <RCCEx_PLL2_Config+0x15c>)
 8005d9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005da0:	e005      	b.n	8005dae <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005da2:	4b12      	ldr	r3, [pc, #72]	; (8005dec <RCCEx_PLL2_Config+0x15c>)
 8005da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da6:	4a11      	ldr	r2, [pc, #68]	; (8005dec <RCCEx_PLL2_Config+0x15c>)
 8005da8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005dac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005dae:	4b0f      	ldr	r3, [pc, #60]	; (8005dec <RCCEx_PLL2_Config+0x15c>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a0e      	ldr	r2, [pc, #56]	; (8005dec <RCCEx_PLL2_Config+0x15c>)
 8005db4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005db8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dba:	f7fb fc01 	bl	80015c0 <HAL_GetTick>
 8005dbe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005dc0:	e008      	b.n	8005dd4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005dc2:	f7fb fbfd 	bl	80015c0 <HAL_GetTick>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d901      	bls.n	8005dd4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	e006      	b.n	8005de2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005dd4:	4b05      	ldr	r3, [pc, #20]	; (8005dec <RCCEx_PLL2_Config+0x15c>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d0f0      	beq.n	8005dc2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3710      	adds	r7, #16
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	58024400 	.word	0x58024400
 8005df0:	ffff0007 	.word	0xffff0007

08005df4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005e02:	4b53      	ldr	r3, [pc, #332]	; (8005f50 <RCCEx_PLL3_Config+0x15c>)
 8005e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e06:	f003 0303 	and.w	r3, r3, #3
 8005e0a:	2b03      	cmp	r3, #3
 8005e0c:	d101      	bne.n	8005e12 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e099      	b.n	8005f46 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005e12:	4b4f      	ldr	r3, [pc, #316]	; (8005f50 <RCCEx_PLL3_Config+0x15c>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a4e      	ldr	r2, [pc, #312]	; (8005f50 <RCCEx_PLL3_Config+0x15c>)
 8005e18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e1e:	f7fb fbcf 	bl	80015c0 <HAL_GetTick>
 8005e22:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005e24:	e008      	b.n	8005e38 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005e26:	f7fb fbcb 	bl	80015c0 <HAL_GetTick>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	2b02      	cmp	r3, #2
 8005e32:	d901      	bls.n	8005e38 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005e34:	2303      	movs	r3, #3
 8005e36:	e086      	b.n	8005f46 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005e38:	4b45      	ldr	r3, [pc, #276]	; (8005f50 <RCCEx_PLL3_Config+0x15c>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d1f0      	bne.n	8005e26 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005e44:	4b42      	ldr	r3, [pc, #264]	; (8005f50 <RCCEx_PLL3_Config+0x15c>)
 8005e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e48:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	051b      	lsls	r3, r3, #20
 8005e52:	493f      	ldr	r1, [pc, #252]	; (8005f50 <RCCEx_PLL3_Config+0x15c>)
 8005e54:	4313      	orrs	r3, r2
 8005e56:	628b      	str	r3, [r1, #40]	; 0x28
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	3b01      	subs	r3, #1
 8005e5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	3b01      	subs	r3, #1
 8005e68:	025b      	lsls	r3, r3, #9
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	431a      	orrs	r2, r3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	3b01      	subs	r3, #1
 8005e74:	041b      	lsls	r3, r3, #16
 8005e76:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005e7a:	431a      	orrs	r2, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	691b      	ldr	r3, [r3, #16]
 8005e80:	3b01      	subs	r3, #1
 8005e82:	061b      	lsls	r3, r3, #24
 8005e84:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005e88:	4931      	ldr	r1, [pc, #196]	; (8005f50 <RCCEx_PLL3_Config+0x15c>)
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005e8e:	4b30      	ldr	r3, [pc, #192]	; (8005f50 <RCCEx_PLL3_Config+0x15c>)
 8005e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e92:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	492d      	ldr	r1, [pc, #180]	; (8005f50 <RCCEx_PLL3_Config+0x15c>)
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005ea0:	4b2b      	ldr	r3, [pc, #172]	; (8005f50 <RCCEx_PLL3_Config+0x15c>)
 8005ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	699b      	ldr	r3, [r3, #24]
 8005eac:	4928      	ldr	r1, [pc, #160]	; (8005f50 <RCCEx_PLL3_Config+0x15c>)
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005eb2:	4b27      	ldr	r3, [pc, #156]	; (8005f50 <RCCEx_PLL3_Config+0x15c>)
 8005eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb6:	4a26      	ldr	r2, [pc, #152]	; (8005f50 <RCCEx_PLL3_Config+0x15c>)
 8005eb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ebc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005ebe:	4b24      	ldr	r3, [pc, #144]	; (8005f50 <RCCEx_PLL3_Config+0x15c>)
 8005ec0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ec2:	4b24      	ldr	r3, [pc, #144]	; (8005f54 <RCCEx_PLL3_Config+0x160>)
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	69d2      	ldr	r2, [r2, #28]
 8005eca:	00d2      	lsls	r2, r2, #3
 8005ecc:	4920      	ldr	r1, [pc, #128]	; (8005f50 <RCCEx_PLL3_Config+0x15c>)
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005ed2:	4b1f      	ldr	r3, [pc, #124]	; (8005f50 <RCCEx_PLL3_Config+0x15c>)
 8005ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed6:	4a1e      	ldr	r2, [pc, #120]	; (8005f50 <RCCEx_PLL3_Config+0x15c>)
 8005ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005edc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d106      	bne.n	8005ef2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005ee4:	4b1a      	ldr	r3, [pc, #104]	; (8005f50 <RCCEx_PLL3_Config+0x15c>)
 8005ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee8:	4a19      	ldr	r2, [pc, #100]	; (8005f50 <RCCEx_PLL3_Config+0x15c>)
 8005eea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005eee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ef0:	e00f      	b.n	8005f12 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d106      	bne.n	8005f06 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005ef8:	4b15      	ldr	r3, [pc, #84]	; (8005f50 <RCCEx_PLL3_Config+0x15c>)
 8005efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005efc:	4a14      	ldr	r2, [pc, #80]	; (8005f50 <RCCEx_PLL3_Config+0x15c>)
 8005efe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005f02:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005f04:	e005      	b.n	8005f12 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005f06:	4b12      	ldr	r3, [pc, #72]	; (8005f50 <RCCEx_PLL3_Config+0x15c>)
 8005f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f0a:	4a11      	ldr	r2, [pc, #68]	; (8005f50 <RCCEx_PLL3_Config+0x15c>)
 8005f0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f10:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005f12:	4b0f      	ldr	r3, [pc, #60]	; (8005f50 <RCCEx_PLL3_Config+0x15c>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a0e      	ldr	r2, [pc, #56]	; (8005f50 <RCCEx_PLL3_Config+0x15c>)
 8005f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f1e:	f7fb fb4f 	bl	80015c0 <HAL_GetTick>
 8005f22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005f24:	e008      	b.n	8005f38 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005f26:	f7fb fb4b 	bl	80015c0 <HAL_GetTick>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	d901      	bls.n	8005f38 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005f34:	2303      	movs	r3, #3
 8005f36:	e006      	b.n	8005f46 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005f38:	4b05      	ldr	r3, [pc, #20]	; (8005f50 <RCCEx_PLL3_Config+0x15c>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d0f0      	beq.n	8005f26 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3710      	adds	r7, #16
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	58024400 	.word	0x58024400
 8005f54:	ffff0007 	.word	0xffff0007

08005f58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d101      	bne.n	8005f6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e049      	b.n	8005ffe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d106      	bne.n	8005f84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 f841 	bl	8006006 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2202      	movs	r2, #2
 8005f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	3304      	adds	r3, #4
 8005f94:	4619      	mov	r1, r3
 8005f96:	4610      	mov	r0, r2
 8005f98:	f000 fa00 	bl	800639c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3708      	adds	r7, #8
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006006:	b480      	push	{r7}
 8006008:	b083      	sub	sp, #12
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800600e:	bf00      	nop
 8006010:	370c      	adds	r7, #12
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
	...

0800601c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800601c:	b480      	push	{r7}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800602a:	b2db      	uxtb	r3, r3
 800602c:	2b01      	cmp	r3, #1
 800602e:	d001      	beq.n	8006034 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	e054      	b.n	80060de <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2202      	movs	r2, #2
 8006038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68da      	ldr	r2, [r3, #12]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f042 0201 	orr.w	r2, r2, #1
 800604a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a26      	ldr	r2, [pc, #152]	; (80060ec <HAL_TIM_Base_Start_IT+0xd0>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d022      	beq.n	800609c <HAL_TIM_Base_Start_IT+0x80>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800605e:	d01d      	beq.n	800609c <HAL_TIM_Base_Start_IT+0x80>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a22      	ldr	r2, [pc, #136]	; (80060f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d018      	beq.n	800609c <HAL_TIM_Base_Start_IT+0x80>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a21      	ldr	r2, [pc, #132]	; (80060f4 <HAL_TIM_Base_Start_IT+0xd8>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d013      	beq.n	800609c <HAL_TIM_Base_Start_IT+0x80>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a1f      	ldr	r2, [pc, #124]	; (80060f8 <HAL_TIM_Base_Start_IT+0xdc>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d00e      	beq.n	800609c <HAL_TIM_Base_Start_IT+0x80>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a1e      	ldr	r2, [pc, #120]	; (80060fc <HAL_TIM_Base_Start_IT+0xe0>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d009      	beq.n	800609c <HAL_TIM_Base_Start_IT+0x80>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a1c      	ldr	r2, [pc, #112]	; (8006100 <HAL_TIM_Base_Start_IT+0xe4>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d004      	beq.n	800609c <HAL_TIM_Base_Start_IT+0x80>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a1b      	ldr	r2, [pc, #108]	; (8006104 <HAL_TIM_Base_Start_IT+0xe8>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d115      	bne.n	80060c8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	689a      	ldr	r2, [r3, #8]
 80060a2:	4b19      	ldr	r3, [pc, #100]	; (8006108 <HAL_TIM_Base_Start_IT+0xec>)
 80060a4:	4013      	ands	r3, r2
 80060a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2b06      	cmp	r3, #6
 80060ac:	d015      	beq.n	80060da <HAL_TIM_Base_Start_IT+0xbe>
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060b4:	d011      	beq.n	80060da <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f042 0201 	orr.w	r2, r2, #1
 80060c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060c6:	e008      	b.n	80060da <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f042 0201 	orr.w	r2, r2, #1
 80060d6:	601a      	str	r2, [r3, #0]
 80060d8:	e000      	b.n	80060dc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3714      	adds	r7, #20
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
 80060ea:	bf00      	nop
 80060ec:	40010000 	.word	0x40010000
 80060f0:	40000400 	.word	0x40000400
 80060f4:	40000800 	.word	0x40000800
 80060f8:	40000c00 	.word	0x40000c00
 80060fc:	40010400 	.word	0x40010400
 8006100:	40001800 	.word	0x40001800
 8006104:	40014000 	.word	0x40014000
 8006108:	00010007 	.word	0x00010007

0800610c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	f003 0302 	and.w	r3, r3, #2
 800611e:	2b02      	cmp	r3, #2
 8006120:	d122      	bne.n	8006168 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	f003 0302 	and.w	r3, r3, #2
 800612c:	2b02      	cmp	r3, #2
 800612e:	d11b      	bne.n	8006168 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f06f 0202 	mvn.w	r2, #2
 8006138:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2201      	movs	r2, #1
 800613e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	699b      	ldr	r3, [r3, #24]
 8006146:	f003 0303 	and.w	r3, r3, #3
 800614a:	2b00      	cmp	r3, #0
 800614c:	d003      	beq.n	8006156 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 f905 	bl	800635e <HAL_TIM_IC_CaptureCallback>
 8006154:	e005      	b.n	8006162 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 f8f7 	bl	800634a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 f908 	bl	8006372 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	f003 0304 	and.w	r3, r3, #4
 8006172:	2b04      	cmp	r3, #4
 8006174:	d122      	bne.n	80061bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	f003 0304 	and.w	r3, r3, #4
 8006180:	2b04      	cmp	r3, #4
 8006182:	d11b      	bne.n	80061bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f06f 0204 	mvn.w	r2, #4
 800618c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2202      	movs	r2, #2
 8006192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	699b      	ldr	r3, [r3, #24]
 800619a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d003      	beq.n	80061aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 f8db 	bl	800635e <HAL_TIM_IC_CaptureCallback>
 80061a8:	e005      	b.n	80061b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 f8cd 	bl	800634a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 f8de 	bl	8006372 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	f003 0308 	and.w	r3, r3, #8
 80061c6:	2b08      	cmp	r3, #8
 80061c8:	d122      	bne.n	8006210 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	f003 0308 	and.w	r3, r3, #8
 80061d4:	2b08      	cmp	r3, #8
 80061d6:	d11b      	bne.n	8006210 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f06f 0208 	mvn.w	r2, #8
 80061e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2204      	movs	r2, #4
 80061e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	69db      	ldr	r3, [r3, #28]
 80061ee:	f003 0303 	and.w	r3, r3, #3
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d003      	beq.n	80061fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 f8b1 	bl	800635e <HAL_TIM_IC_CaptureCallback>
 80061fc:	e005      	b.n	800620a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 f8a3 	bl	800634a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 f8b4 	bl	8006372 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	f003 0310 	and.w	r3, r3, #16
 800621a:	2b10      	cmp	r3, #16
 800621c:	d122      	bne.n	8006264 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	f003 0310 	and.w	r3, r3, #16
 8006228:	2b10      	cmp	r3, #16
 800622a:	d11b      	bne.n	8006264 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f06f 0210 	mvn.w	r2, #16
 8006234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2208      	movs	r2, #8
 800623a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	69db      	ldr	r3, [r3, #28]
 8006242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006246:	2b00      	cmp	r3, #0
 8006248:	d003      	beq.n	8006252 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 f887 	bl	800635e <HAL_TIM_IC_CaptureCallback>
 8006250:	e005      	b.n	800625e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 f879 	bl	800634a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 f88a 	bl	8006372 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	f003 0301 	and.w	r3, r3, #1
 800626e:	2b01      	cmp	r3, #1
 8006270:	d10e      	bne.n	8006290 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	f003 0301 	and.w	r3, r3, #1
 800627c:	2b01      	cmp	r3, #1
 800627e:	d107      	bne.n	8006290 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f06f 0201 	mvn.w	r2, #1
 8006288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f7fa fdb4 	bl	8000df8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800629a:	2b80      	cmp	r3, #128	; 0x80
 800629c:	d10e      	bne.n	80062bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062a8:	2b80      	cmp	r3, #128	; 0x80
 80062aa:	d107      	bne.n	80062bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80062b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 f914 	bl	80064e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062ca:	d10e      	bne.n	80062ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062d6:	2b80      	cmp	r3, #128	; 0x80
 80062d8:	d107      	bne.n	80062ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80062e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 f907 	bl	80064f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f4:	2b40      	cmp	r3, #64	; 0x40
 80062f6:	d10e      	bne.n	8006316 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006302:	2b40      	cmp	r3, #64	; 0x40
 8006304:	d107      	bne.n	8006316 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800630e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f000 f838 	bl	8006386 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	f003 0320 	and.w	r3, r3, #32
 8006320:	2b20      	cmp	r3, #32
 8006322:	d10e      	bne.n	8006342 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	f003 0320 	and.w	r3, r3, #32
 800632e:	2b20      	cmp	r3, #32
 8006330:	d107      	bne.n	8006342 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f06f 0220 	mvn.w	r2, #32
 800633a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 f8c7 	bl	80064d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006342:	bf00      	nop
 8006344:	3708      	adds	r7, #8
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}

0800634a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800634a:	b480      	push	{r7}
 800634c:	b083      	sub	sp, #12
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006352:	bf00      	nop
 8006354:	370c      	adds	r7, #12
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr

0800635e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800635e:	b480      	push	{r7}
 8006360:	b083      	sub	sp, #12
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006366:	bf00      	nop
 8006368:	370c      	adds	r7, #12
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr

08006372 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006372:	b480      	push	{r7}
 8006374:	b083      	sub	sp, #12
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800637a:	bf00      	nop
 800637c:	370c      	adds	r7, #12
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr

08006386 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006386:	b480      	push	{r7}
 8006388:	b083      	sub	sp, #12
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800638e:	bf00      	nop
 8006390:	370c      	adds	r7, #12
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr
	...

0800639c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800639c:	b480      	push	{r7}
 800639e:	b085      	sub	sp, #20
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a40      	ldr	r2, [pc, #256]	; (80064b0 <TIM_Base_SetConfig+0x114>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d013      	beq.n	80063dc <TIM_Base_SetConfig+0x40>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063ba:	d00f      	beq.n	80063dc <TIM_Base_SetConfig+0x40>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a3d      	ldr	r2, [pc, #244]	; (80064b4 <TIM_Base_SetConfig+0x118>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d00b      	beq.n	80063dc <TIM_Base_SetConfig+0x40>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a3c      	ldr	r2, [pc, #240]	; (80064b8 <TIM_Base_SetConfig+0x11c>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d007      	beq.n	80063dc <TIM_Base_SetConfig+0x40>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a3b      	ldr	r2, [pc, #236]	; (80064bc <TIM_Base_SetConfig+0x120>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d003      	beq.n	80063dc <TIM_Base_SetConfig+0x40>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a3a      	ldr	r2, [pc, #232]	; (80064c0 <TIM_Base_SetConfig+0x124>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d108      	bne.n	80063ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	68fa      	ldr	r2, [r7, #12]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a2f      	ldr	r2, [pc, #188]	; (80064b0 <TIM_Base_SetConfig+0x114>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d01f      	beq.n	8006436 <TIM_Base_SetConfig+0x9a>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063fc:	d01b      	beq.n	8006436 <TIM_Base_SetConfig+0x9a>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a2c      	ldr	r2, [pc, #176]	; (80064b4 <TIM_Base_SetConfig+0x118>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d017      	beq.n	8006436 <TIM_Base_SetConfig+0x9a>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a2b      	ldr	r2, [pc, #172]	; (80064b8 <TIM_Base_SetConfig+0x11c>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d013      	beq.n	8006436 <TIM_Base_SetConfig+0x9a>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a2a      	ldr	r2, [pc, #168]	; (80064bc <TIM_Base_SetConfig+0x120>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d00f      	beq.n	8006436 <TIM_Base_SetConfig+0x9a>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a29      	ldr	r2, [pc, #164]	; (80064c0 <TIM_Base_SetConfig+0x124>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d00b      	beq.n	8006436 <TIM_Base_SetConfig+0x9a>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a28      	ldr	r2, [pc, #160]	; (80064c4 <TIM_Base_SetConfig+0x128>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d007      	beq.n	8006436 <TIM_Base_SetConfig+0x9a>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a27      	ldr	r2, [pc, #156]	; (80064c8 <TIM_Base_SetConfig+0x12c>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d003      	beq.n	8006436 <TIM_Base_SetConfig+0x9a>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a26      	ldr	r2, [pc, #152]	; (80064cc <TIM_Base_SetConfig+0x130>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d108      	bne.n	8006448 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800643c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	4313      	orrs	r3, r2
 8006446:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	695b      	ldr	r3, [r3, #20]
 8006452:	4313      	orrs	r3, r2
 8006454:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	689a      	ldr	r2, [r3, #8]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a10      	ldr	r2, [pc, #64]	; (80064b0 <TIM_Base_SetConfig+0x114>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d00f      	beq.n	8006494 <TIM_Base_SetConfig+0xf8>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a12      	ldr	r2, [pc, #72]	; (80064c0 <TIM_Base_SetConfig+0x124>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d00b      	beq.n	8006494 <TIM_Base_SetConfig+0xf8>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a11      	ldr	r2, [pc, #68]	; (80064c4 <TIM_Base_SetConfig+0x128>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d007      	beq.n	8006494 <TIM_Base_SetConfig+0xf8>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a10      	ldr	r2, [pc, #64]	; (80064c8 <TIM_Base_SetConfig+0x12c>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d003      	beq.n	8006494 <TIM_Base_SetConfig+0xf8>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a0f      	ldr	r2, [pc, #60]	; (80064cc <TIM_Base_SetConfig+0x130>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d103      	bne.n	800649c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	691a      	ldr	r2, [r3, #16]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	615a      	str	r2, [r3, #20]
}
 80064a2:	bf00      	nop
 80064a4:	3714      	adds	r7, #20
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop
 80064b0:	40010000 	.word	0x40010000
 80064b4:	40000400 	.word	0x40000400
 80064b8:	40000800 	.word	0x40000800
 80064bc:	40000c00 	.word	0x40000c00
 80064c0:	40010400 	.word	0x40010400
 80064c4:	40014000 	.word	0x40014000
 80064c8:	40014400 	.word	0x40014400
 80064cc:	40014800 	.word	0x40014800

080064d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b083      	sub	sp, #12
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064d8:	bf00      	nop
 80064da:	370c      	adds	r7, #12
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr

080064e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064ec:	bf00      	nop
 80064ee:	370c      	adds	r7, #12
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006500:	bf00      	nop
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b082      	sub	sp, #8
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d101      	bne.n	800651e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e042      	b.n	80065a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006524:	2b00      	cmp	r3, #0
 8006526:	d106      	bne.n	8006536 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f7fa feb3 	bl	800129c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2224      	movs	r2, #36	; 0x24
 800653a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f022 0201 	bic.w	r2, r2, #1
 800654c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 f8ba 	bl	80066c8 <UART_SetConfig>
 8006554:	4603      	mov	r3, r0
 8006556:	2b01      	cmp	r3, #1
 8006558:	d101      	bne.n	800655e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e022      	b.n	80065a4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006562:	2b00      	cmp	r3, #0
 8006564:	d002      	beq.n	800656c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 fe16 	bl	8007198 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	685a      	ldr	r2, [r3, #4]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800657a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	689a      	ldr	r2, [r3, #8]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800658a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f042 0201 	orr.w	r2, r2, #1
 800659a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 fe9d 	bl	80072dc <UART_CheckIdleState>
 80065a2:	4603      	mov	r3, r0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3708      	adds	r7, #8
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b08a      	sub	sp, #40	; 0x28
 80065b0:	af02      	add	r7, sp, #8
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	603b      	str	r3, [r7, #0]
 80065b8:	4613      	mov	r3, r2
 80065ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065c2:	2b20      	cmp	r3, #32
 80065c4:	d17b      	bne.n	80066be <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d002      	beq.n	80065d2 <HAL_UART_Transmit+0x26>
 80065cc:	88fb      	ldrh	r3, [r7, #6]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d101      	bne.n	80065d6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	e074      	b.n	80066c0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2200      	movs	r2, #0
 80065da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2221      	movs	r2, #33	; 0x21
 80065e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065e6:	f7fa ffeb 	bl	80015c0 <HAL_GetTick>
 80065ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	88fa      	ldrh	r2, [r7, #6]
 80065f0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	88fa      	ldrh	r2, [r7, #6]
 80065f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006604:	d108      	bne.n	8006618 <HAL_UART_Transmit+0x6c>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d104      	bne.n	8006618 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800660e:	2300      	movs	r3, #0
 8006610:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	61bb      	str	r3, [r7, #24]
 8006616:	e003      	b.n	8006620 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800661c:	2300      	movs	r3, #0
 800661e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006620:	e030      	b.n	8006684 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	9300      	str	r3, [sp, #0]
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	2200      	movs	r2, #0
 800662a:	2180      	movs	r1, #128	; 0x80
 800662c:	68f8      	ldr	r0, [r7, #12]
 800662e:	f000 feff 	bl	8007430 <UART_WaitOnFlagUntilTimeout>
 8006632:	4603      	mov	r3, r0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d005      	beq.n	8006644 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2220      	movs	r2, #32
 800663c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006640:	2303      	movs	r3, #3
 8006642:	e03d      	b.n	80066c0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d10b      	bne.n	8006662 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800664a:	69bb      	ldr	r3, [r7, #24]
 800664c:	881b      	ldrh	r3, [r3, #0]
 800664e:	461a      	mov	r2, r3
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006658:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	3302      	adds	r3, #2
 800665e:	61bb      	str	r3, [r7, #24]
 8006660:	e007      	b.n	8006672 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	781a      	ldrb	r2, [r3, #0]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	3301      	adds	r3, #1
 8006670:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006678:	b29b      	uxth	r3, r3
 800667a:	3b01      	subs	r3, #1
 800667c:	b29a      	uxth	r2, r3
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800668a:	b29b      	uxth	r3, r3
 800668c:	2b00      	cmp	r3, #0
 800668e:	d1c8      	bne.n	8006622 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	9300      	str	r3, [sp, #0]
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	2200      	movs	r2, #0
 8006698:	2140      	movs	r1, #64	; 0x40
 800669a:	68f8      	ldr	r0, [r7, #12]
 800669c:	f000 fec8 	bl	8007430 <UART_WaitOnFlagUntilTimeout>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d005      	beq.n	80066b2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2220      	movs	r2, #32
 80066aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80066ae:	2303      	movs	r3, #3
 80066b0:	e006      	b.n	80066c0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2220      	movs	r2, #32
 80066b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80066ba:	2300      	movs	r3, #0
 80066bc:	e000      	b.n	80066c0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80066be:	2302      	movs	r3, #2
  }
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3720      	adds	r7, #32
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066cc:	b092      	sub	sp, #72	; 0x48
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80066d2:	2300      	movs	r3, #0
 80066d4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	689a      	ldr	r2, [r3, #8]
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	431a      	orrs	r2, r3
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	695b      	ldr	r3, [r3, #20]
 80066e6:	431a      	orrs	r2, r3
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	69db      	ldr	r3, [r3, #28]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	4bbe      	ldr	r3, [pc, #760]	; (80069f0 <UART_SetConfig+0x328>)
 80066f8:	4013      	ands	r3, r2
 80066fa:	697a      	ldr	r2, [r7, #20]
 80066fc:	6812      	ldr	r2, [r2, #0]
 80066fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006700:	430b      	orrs	r3, r1
 8006702:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	68da      	ldr	r2, [r3, #12]
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	430a      	orrs	r2, r1
 8006718:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	699b      	ldr	r3, [r3, #24]
 800671e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4ab3      	ldr	r2, [pc, #716]	; (80069f4 <UART_SetConfig+0x32c>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d004      	beq.n	8006734 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	6a1b      	ldr	r3, [r3, #32]
 800672e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006730:	4313      	orrs	r3, r2
 8006732:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	689a      	ldr	r2, [r3, #8]
 800673a:	4baf      	ldr	r3, [pc, #700]	; (80069f8 <UART_SetConfig+0x330>)
 800673c:	4013      	ands	r3, r2
 800673e:	697a      	ldr	r2, [r7, #20]
 8006740:	6812      	ldr	r2, [r2, #0]
 8006742:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006744:	430b      	orrs	r3, r1
 8006746:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800674e:	f023 010f 	bic.w	r1, r3, #15
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	430a      	orrs	r2, r1
 800675c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4aa6      	ldr	r2, [pc, #664]	; (80069fc <UART_SetConfig+0x334>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d177      	bne.n	8006858 <UART_SetConfig+0x190>
 8006768:	4ba5      	ldr	r3, [pc, #660]	; (8006a00 <UART_SetConfig+0x338>)
 800676a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800676c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006770:	2b28      	cmp	r3, #40	; 0x28
 8006772:	d86d      	bhi.n	8006850 <UART_SetConfig+0x188>
 8006774:	a201      	add	r2, pc, #4	; (adr r2, 800677c <UART_SetConfig+0xb4>)
 8006776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800677a:	bf00      	nop
 800677c:	08006821 	.word	0x08006821
 8006780:	08006851 	.word	0x08006851
 8006784:	08006851 	.word	0x08006851
 8006788:	08006851 	.word	0x08006851
 800678c:	08006851 	.word	0x08006851
 8006790:	08006851 	.word	0x08006851
 8006794:	08006851 	.word	0x08006851
 8006798:	08006851 	.word	0x08006851
 800679c:	08006829 	.word	0x08006829
 80067a0:	08006851 	.word	0x08006851
 80067a4:	08006851 	.word	0x08006851
 80067a8:	08006851 	.word	0x08006851
 80067ac:	08006851 	.word	0x08006851
 80067b0:	08006851 	.word	0x08006851
 80067b4:	08006851 	.word	0x08006851
 80067b8:	08006851 	.word	0x08006851
 80067bc:	08006831 	.word	0x08006831
 80067c0:	08006851 	.word	0x08006851
 80067c4:	08006851 	.word	0x08006851
 80067c8:	08006851 	.word	0x08006851
 80067cc:	08006851 	.word	0x08006851
 80067d0:	08006851 	.word	0x08006851
 80067d4:	08006851 	.word	0x08006851
 80067d8:	08006851 	.word	0x08006851
 80067dc:	08006839 	.word	0x08006839
 80067e0:	08006851 	.word	0x08006851
 80067e4:	08006851 	.word	0x08006851
 80067e8:	08006851 	.word	0x08006851
 80067ec:	08006851 	.word	0x08006851
 80067f0:	08006851 	.word	0x08006851
 80067f4:	08006851 	.word	0x08006851
 80067f8:	08006851 	.word	0x08006851
 80067fc:	08006841 	.word	0x08006841
 8006800:	08006851 	.word	0x08006851
 8006804:	08006851 	.word	0x08006851
 8006808:	08006851 	.word	0x08006851
 800680c:	08006851 	.word	0x08006851
 8006810:	08006851 	.word	0x08006851
 8006814:	08006851 	.word	0x08006851
 8006818:	08006851 	.word	0x08006851
 800681c:	08006849 	.word	0x08006849
 8006820:	2301      	movs	r3, #1
 8006822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006826:	e222      	b.n	8006c6e <UART_SetConfig+0x5a6>
 8006828:	2304      	movs	r3, #4
 800682a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800682e:	e21e      	b.n	8006c6e <UART_SetConfig+0x5a6>
 8006830:	2308      	movs	r3, #8
 8006832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006836:	e21a      	b.n	8006c6e <UART_SetConfig+0x5a6>
 8006838:	2310      	movs	r3, #16
 800683a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800683e:	e216      	b.n	8006c6e <UART_SetConfig+0x5a6>
 8006840:	2320      	movs	r3, #32
 8006842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006846:	e212      	b.n	8006c6e <UART_SetConfig+0x5a6>
 8006848:	2340      	movs	r3, #64	; 0x40
 800684a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800684e:	e20e      	b.n	8006c6e <UART_SetConfig+0x5a6>
 8006850:	2380      	movs	r3, #128	; 0x80
 8006852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006856:	e20a      	b.n	8006c6e <UART_SetConfig+0x5a6>
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a69      	ldr	r2, [pc, #420]	; (8006a04 <UART_SetConfig+0x33c>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d130      	bne.n	80068c4 <UART_SetConfig+0x1fc>
 8006862:	4b67      	ldr	r3, [pc, #412]	; (8006a00 <UART_SetConfig+0x338>)
 8006864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006866:	f003 0307 	and.w	r3, r3, #7
 800686a:	2b05      	cmp	r3, #5
 800686c:	d826      	bhi.n	80068bc <UART_SetConfig+0x1f4>
 800686e:	a201      	add	r2, pc, #4	; (adr r2, 8006874 <UART_SetConfig+0x1ac>)
 8006870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006874:	0800688d 	.word	0x0800688d
 8006878:	08006895 	.word	0x08006895
 800687c:	0800689d 	.word	0x0800689d
 8006880:	080068a5 	.word	0x080068a5
 8006884:	080068ad 	.word	0x080068ad
 8006888:	080068b5 	.word	0x080068b5
 800688c:	2300      	movs	r3, #0
 800688e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006892:	e1ec      	b.n	8006c6e <UART_SetConfig+0x5a6>
 8006894:	2304      	movs	r3, #4
 8006896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800689a:	e1e8      	b.n	8006c6e <UART_SetConfig+0x5a6>
 800689c:	2308      	movs	r3, #8
 800689e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068a2:	e1e4      	b.n	8006c6e <UART_SetConfig+0x5a6>
 80068a4:	2310      	movs	r3, #16
 80068a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068aa:	e1e0      	b.n	8006c6e <UART_SetConfig+0x5a6>
 80068ac:	2320      	movs	r3, #32
 80068ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068b2:	e1dc      	b.n	8006c6e <UART_SetConfig+0x5a6>
 80068b4:	2340      	movs	r3, #64	; 0x40
 80068b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068ba:	e1d8      	b.n	8006c6e <UART_SetConfig+0x5a6>
 80068bc:	2380      	movs	r3, #128	; 0x80
 80068be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068c2:	e1d4      	b.n	8006c6e <UART_SetConfig+0x5a6>
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a4f      	ldr	r2, [pc, #316]	; (8006a08 <UART_SetConfig+0x340>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d130      	bne.n	8006930 <UART_SetConfig+0x268>
 80068ce:	4b4c      	ldr	r3, [pc, #304]	; (8006a00 <UART_SetConfig+0x338>)
 80068d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068d2:	f003 0307 	and.w	r3, r3, #7
 80068d6:	2b05      	cmp	r3, #5
 80068d8:	d826      	bhi.n	8006928 <UART_SetConfig+0x260>
 80068da:	a201      	add	r2, pc, #4	; (adr r2, 80068e0 <UART_SetConfig+0x218>)
 80068dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e0:	080068f9 	.word	0x080068f9
 80068e4:	08006901 	.word	0x08006901
 80068e8:	08006909 	.word	0x08006909
 80068ec:	08006911 	.word	0x08006911
 80068f0:	08006919 	.word	0x08006919
 80068f4:	08006921 	.word	0x08006921
 80068f8:	2300      	movs	r3, #0
 80068fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068fe:	e1b6      	b.n	8006c6e <UART_SetConfig+0x5a6>
 8006900:	2304      	movs	r3, #4
 8006902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006906:	e1b2      	b.n	8006c6e <UART_SetConfig+0x5a6>
 8006908:	2308      	movs	r3, #8
 800690a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800690e:	e1ae      	b.n	8006c6e <UART_SetConfig+0x5a6>
 8006910:	2310      	movs	r3, #16
 8006912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006916:	e1aa      	b.n	8006c6e <UART_SetConfig+0x5a6>
 8006918:	2320      	movs	r3, #32
 800691a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800691e:	e1a6      	b.n	8006c6e <UART_SetConfig+0x5a6>
 8006920:	2340      	movs	r3, #64	; 0x40
 8006922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006926:	e1a2      	b.n	8006c6e <UART_SetConfig+0x5a6>
 8006928:	2380      	movs	r3, #128	; 0x80
 800692a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800692e:	e19e      	b.n	8006c6e <UART_SetConfig+0x5a6>
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a35      	ldr	r2, [pc, #212]	; (8006a0c <UART_SetConfig+0x344>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d130      	bne.n	800699c <UART_SetConfig+0x2d4>
 800693a:	4b31      	ldr	r3, [pc, #196]	; (8006a00 <UART_SetConfig+0x338>)
 800693c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800693e:	f003 0307 	and.w	r3, r3, #7
 8006942:	2b05      	cmp	r3, #5
 8006944:	d826      	bhi.n	8006994 <UART_SetConfig+0x2cc>
 8006946:	a201      	add	r2, pc, #4	; (adr r2, 800694c <UART_SetConfig+0x284>)
 8006948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800694c:	08006965 	.word	0x08006965
 8006950:	0800696d 	.word	0x0800696d
 8006954:	08006975 	.word	0x08006975
 8006958:	0800697d 	.word	0x0800697d
 800695c:	08006985 	.word	0x08006985
 8006960:	0800698d 	.word	0x0800698d
 8006964:	2300      	movs	r3, #0
 8006966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800696a:	e180      	b.n	8006c6e <UART_SetConfig+0x5a6>
 800696c:	2304      	movs	r3, #4
 800696e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006972:	e17c      	b.n	8006c6e <UART_SetConfig+0x5a6>
 8006974:	2308      	movs	r3, #8
 8006976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800697a:	e178      	b.n	8006c6e <UART_SetConfig+0x5a6>
 800697c:	2310      	movs	r3, #16
 800697e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006982:	e174      	b.n	8006c6e <UART_SetConfig+0x5a6>
 8006984:	2320      	movs	r3, #32
 8006986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800698a:	e170      	b.n	8006c6e <UART_SetConfig+0x5a6>
 800698c:	2340      	movs	r3, #64	; 0x40
 800698e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006992:	e16c      	b.n	8006c6e <UART_SetConfig+0x5a6>
 8006994:	2380      	movs	r3, #128	; 0x80
 8006996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800699a:	e168      	b.n	8006c6e <UART_SetConfig+0x5a6>
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a1b      	ldr	r2, [pc, #108]	; (8006a10 <UART_SetConfig+0x348>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d142      	bne.n	8006a2c <UART_SetConfig+0x364>
 80069a6:	4b16      	ldr	r3, [pc, #88]	; (8006a00 <UART_SetConfig+0x338>)
 80069a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069aa:	f003 0307 	and.w	r3, r3, #7
 80069ae:	2b05      	cmp	r3, #5
 80069b0:	d838      	bhi.n	8006a24 <UART_SetConfig+0x35c>
 80069b2:	a201      	add	r2, pc, #4	; (adr r2, 80069b8 <UART_SetConfig+0x2f0>)
 80069b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b8:	080069d1 	.word	0x080069d1
 80069bc:	080069d9 	.word	0x080069d9
 80069c0:	080069e1 	.word	0x080069e1
 80069c4:	080069e9 	.word	0x080069e9
 80069c8:	08006a15 	.word	0x08006a15
 80069cc:	08006a1d 	.word	0x08006a1d
 80069d0:	2300      	movs	r3, #0
 80069d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069d6:	e14a      	b.n	8006c6e <UART_SetConfig+0x5a6>
 80069d8:	2304      	movs	r3, #4
 80069da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069de:	e146      	b.n	8006c6e <UART_SetConfig+0x5a6>
 80069e0:	2308      	movs	r3, #8
 80069e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069e6:	e142      	b.n	8006c6e <UART_SetConfig+0x5a6>
 80069e8:	2310      	movs	r3, #16
 80069ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069ee:	e13e      	b.n	8006c6e <UART_SetConfig+0x5a6>
 80069f0:	cfff69f3 	.word	0xcfff69f3
 80069f4:	58000c00 	.word	0x58000c00
 80069f8:	11fff4ff 	.word	0x11fff4ff
 80069fc:	40011000 	.word	0x40011000
 8006a00:	58024400 	.word	0x58024400
 8006a04:	40004400 	.word	0x40004400
 8006a08:	40004800 	.word	0x40004800
 8006a0c:	40004c00 	.word	0x40004c00
 8006a10:	40005000 	.word	0x40005000
 8006a14:	2320      	movs	r3, #32
 8006a16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a1a:	e128      	b.n	8006c6e <UART_SetConfig+0x5a6>
 8006a1c:	2340      	movs	r3, #64	; 0x40
 8006a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a22:	e124      	b.n	8006c6e <UART_SetConfig+0x5a6>
 8006a24:	2380      	movs	r3, #128	; 0x80
 8006a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a2a:	e120      	b.n	8006c6e <UART_SetConfig+0x5a6>
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4acb      	ldr	r2, [pc, #812]	; (8006d60 <UART_SetConfig+0x698>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d176      	bne.n	8006b24 <UART_SetConfig+0x45c>
 8006a36:	4bcb      	ldr	r3, [pc, #812]	; (8006d64 <UART_SetConfig+0x69c>)
 8006a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a3e:	2b28      	cmp	r3, #40	; 0x28
 8006a40:	d86c      	bhi.n	8006b1c <UART_SetConfig+0x454>
 8006a42:	a201      	add	r2, pc, #4	; (adr r2, 8006a48 <UART_SetConfig+0x380>)
 8006a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a48:	08006aed 	.word	0x08006aed
 8006a4c:	08006b1d 	.word	0x08006b1d
 8006a50:	08006b1d 	.word	0x08006b1d
 8006a54:	08006b1d 	.word	0x08006b1d
 8006a58:	08006b1d 	.word	0x08006b1d
 8006a5c:	08006b1d 	.word	0x08006b1d
 8006a60:	08006b1d 	.word	0x08006b1d
 8006a64:	08006b1d 	.word	0x08006b1d
 8006a68:	08006af5 	.word	0x08006af5
 8006a6c:	08006b1d 	.word	0x08006b1d
 8006a70:	08006b1d 	.word	0x08006b1d
 8006a74:	08006b1d 	.word	0x08006b1d
 8006a78:	08006b1d 	.word	0x08006b1d
 8006a7c:	08006b1d 	.word	0x08006b1d
 8006a80:	08006b1d 	.word	0x08006b1d
 8006a84:	08006b1d 	.word	0x08006b1d
 8006a88:	08006afd 	.word	0x08006afd
 8006a8c:	08006b1d 	.word	0x08006b1d
 8006a90:	08006b1d 	.word	0x08006b1d
 8006a94:	08006b1d 	.word	0x08006b1d
 8006a98:	08006b1d 	.word	0x08006b1d
 8006a9c:	08006b1d 	.word	0x08006b1d
 8006aa0:	08006b1d 	.word	0x08006b1d
 8006aa4:	08006b1d 	.word	0x08006b1d
 8006aa8:	08006b05 	.word	0x08006b05
 8006aac:	08006b1d 	.word	0x08006b1d
 8006ab0:	08006b1d 	.word	0x08006b1d
 8006ab4:	08006b1d 	.word	0x08006b1d
 8006ab8:	08006b1d 	.word	0x08006b1d
 8006abc:	08006b1d 	.word	0x08006b1d
 8006ac0:	08006b1d 	.word	0x08006b1d
 8006ac4:	08006b1d 	.word	0x08006b1d
 8006ac8:	08006b0d 	.word	0x08006b0d
 8006acc:	08006b1d 	.word	0x08006b1d
 8006ad0:	08006b1d 	.word	0x08006b1d
 8006ad4:	08006b1d 	.word	0x08006b1d
 8006ad8:	08006b1d 	.word	0x08006b1d
 8006adc:	08006b1d 	.word	0x08006b1d
 8006ae0:	08006b1d 	.word	0x08006b1d
 8006ae4:	08006b1d 	.word	0x08006b1d
 8006ae8:	08006b15 	.word	0x08006b15
 8006aec:	2301      	movs	r3, #1
 8006aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006af2:	e0bc      	b.n	8006c6e <UART_SetConfig+0x5a6>
 8006af4:	2304      	movs	r3, #4
 8006af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006afa:	e0b8      	b.n	8006c6e <UART_SetConfig+0x5a6>
 8006afc:	2308      	movs	r3, #8
 8006afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b02:	e0b4      	b.n	8006c6e <UART_SetConfig+0x5a6>
 8006b04:	2310      	movs	r3, #16
 8006b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b0a:	e0b0      	b.n	8006c6e <UART_SetConfig+0x5a6>
 8006b0c:	2320      	movs	r3, #32
 8006b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b12:	e0ac      	b.n	8006c6e <UART_SetConfig+0x5a6>
 8006b14:	2340      	movs	r3, #64	; 0x40
 8006b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b1a:	e0a8      	b.n	8006c6e <UART_SetConfig+0x5a6>
 8006b1c:	2380      	movs	r3, #128	; 0x80
 8006b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b22:	e0a4      	b.n	8006c6e <UART_SetConfig+0x5a6>
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a8f      	ldr	r2, [pc, #572]	; (8006d68 <UART_SetConfig+0x6a0>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d130      	bne.n	8006b90 <UART_SetConfig+0x4c8>
 8006b2e:	4b8d      	ldr	r3, [pc, #564]	; (8006d64 <UART_SetConfig+0x69c>)
 8006b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b32:	f003 0307 	and.w	r3, r3, #7
 8006b36:	2b05      	cmp	r3, #5
 8006b38:	d826      	bhi.n	8006b88 <UART_SetConfig+0x4c0>
 8006b3a:	a201      	add	r2, pc, #4	; (adr r2, 8006b40 <UART_SetConfig+0x478>)
 8006b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b40:	08006b59 	.word	0x08006b59
 8006b44:	08006b61 	.word	0x08006b61
 8006b48:	08006b69 	.word	0x08006b69
 8006b4c:	08006b71 	.word	0x08006b71
 8006b50:	08006b79 	.word	0x08006b79
 8006b54:	08006b81 	.word	0x08006b81
 8006b58:	2300      	movs	r3, #0
 8006b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b5e:	e086      	b.n	8006c6e <UART_SetConfig+0x5a6>
 8006b60:	2304      	movs	r3, #4
 8006b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b66:	e082      	b.n	8006c6e <UART_SetConfig+0x5a6>
 8006b68:	2308      	movs	r3, #8
 8006b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b6e:	e07e      	b.n	8006c6e <UART_SetConfig+0x5a6>
 8006b70:	2310      	movs	r3, #16
 8006b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b76:	e07a      	b.n	8006c6e <UART_SetConfig+0x5a6>
 8006b78:	2320      	movs	r3, #32
 8006b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b7e:	e076      	b.n	8006c6e <UART_SetConfig+0x5a6>
 8006b80:	2340      	movs	r3, #64	; 0x40
 8006b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b86:	e072      	b.n	8006c6e <UART_SetConfig+0x5a6>
 8006b88:	2380      	movs	r3, #128	; 0x80
 8006b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b8e:	e06e      	b.n	8006c6e <UART_SetConfig+0x5a6>
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a75      	ldr	r2, [pc, #468]	; (8006d6c <UART_SetConfig+0x6a4>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d130      	bne.n	8006bfc <UART_SetConfig+0x534>
 8006b9a:	4b72      	ldr	r3, [pc, #456]	; (8006d64 <UART_SetConfig+0x69c>)
 8006b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b9e:	f003 0307 	and.w	r3, r3, #7
 8006ba2:	2b05      	cmp	r3, #5
 8006ba4:	d826      	bhi.n	8006bf4 <UART_SetConfig+0x52c>
 8006ba6:	a201      	add	r2, pc, #4	; (adr r2, 8006bac <UART_SetConfig+0x4e4>)
 8006ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bac:	08006bc5 	.word	0x08006bc5
 8006bb0:	08006bcd 	.word	0x08006bcd
 8006bb4:	08006bd5 	.word	0x08006bd5
 8006bb8:	08006bdd 	.word	0x08006bdd
 8006bbc:	08006be5 	.word	0x08006be5
 8006bc0:	08006bed 	.word	0x08006bed
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bca:	e050      	b.n	8006c6e <UART_SetConfig+0x5a6>
 8006bcc:	2304      	movs	r3, #4
 8006bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bd2:	e04c      	b.n	8006c6e <UART_SetConfig+0x5a6>
 8006bd4:	2308      	movs	r3, #8
 8006bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bda:	e048      	b.n	8006c6e <UART_SetConfig+0x5a6>
 8006bdc:	2310      	movs	r3, #16
 8006bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006be2:	e044      	b.n	8006c6e <UART_SetConfig+0x5a6>
 8006be4:	2320      	movs	r3, #32
 8006be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bea:	e040      	b.n	8006c6e <UART_SetConfig+0x5a6>
 8006bec:	2340      	movs	r3, #64	; 0x40
 8006bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bf2:	e03c      	b.n	8006c6e <UART_SetConfig+0x5a6>
 8006bf4:	2380      	movs	r3, #128	; 0x80
 8006bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bfa:	e038      	b.n	8006c6e <UART_SetConfig+0x5a6>
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a5b      	ldr	r2, [pc, #364]	; (8006d70 <UART_SetConfig+0x6a8>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d130      	bne.n	8006c68 <UART_SetConfig+0x5a0>
 8006c06:	4b57      	ldr	r3, [pc, #348]	; (8006d64 <UART_SetConfig+0x69c>)
 8006c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c0a:	f003 0307 	and.w	r3, r3, #7
 8006c0e:	2b05      	cmp	r3, #5
 8006c10:	d826      	bhi.n	8006c60 <UART_SetConfig+0x598>
 8006c12:	a201      	add	r2, pc, #4	; (adr r2, 8006c18 <UART_SetConfig+0x550>)
 8006c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c18:	08006c31 	.word	0x08006c31
 8006c1c:	08006c39 	.word	0x08006c39
 8006c20:	08006c41 	.word	0x08006c41
 8006c24:	08006c49 	.word	0x08006c49
 8006c28:	08006c51 	.word	0x08006c51
 8006c2c:	08006c59 	.word	0x08006c59
 8006c30:	2302      	movs	r3, #2
 8006c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c36:	e01a      	b.n	8006c6e <UART_SetConfig+0x5a6>
 8006c38:	2304      	movs	r3, #4
 8006c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c3e:	e016      	b.n	8006c6e <UART_SetConfig+0x5a6>
 8006c40:	2308      	movs	r3, #8
 8006c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c46:	e012      	b.n	8006c6e <UART_SetConfig+0x5a6>
 8006c48:	2310      	movs	r3, #16
 8006c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c4e:	e00e      	b.n	8006c6e <UART_SetConfig+0x5a6>
 8006c50:	2320      	movs	r3, #32
 8006c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c56:	e00a      	b.n	8006c6e <UART_SetConfig+0x5a6>
 8006c58:	2340      	movs	r3, #64	; 0x40
 8006c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c5e:	e006      	b.n	8006c6e <UART_SetConfig+0x5a6>
 8006c60:	2380      	movs	r3, #128	; 0x80
 8006c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c66:	e002      	b.n	8006c6e <UART_SetConfig+0x5a6>
 8006c68:	2380      	movs	r3, #128	; 0x80
 8006c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a3f      	ldr	r2, [pc, #252]	; (8006d70 <UART_SetConfig+0x6a8>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	f040 80f8 	bne.w	8006e6a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c7a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006c7e:	2b20      	cmp	r3, #32
 8006c80:	dc46      	bgt.n	8006d10 <UART_SetConfig+0x648>
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	f2c0 8082 	blt.w	8006d8c <UART_SetConfig+0x6c4>
 8006c88:	3b02      	subs	r3, #2
 8006c8a:	2b1e      	cmp	r3, #30
 8006c8c:	d87e      	bhi.n	8006d8c <UART_SetConfig+0x6c4>
 8006c8e:	a201      	add	r2, pc, #4	; (adr r2, 8006c94 <UART_SetConfig+0x5cc>)
 8006c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c94:	08006d17 	.word	0x08006d17
 8006c98:	08006d8d 	.word	0x08006d8d
 8006c9c:	08006d1f 	.word	0x08006d1f
 8006ca0:	08006d8d 	.word	0x08006d8d
 8006ca4:	08006d8d 	.word	0x08006d8d
 8006ca8:	08006d8d 	.word	0x08006d8d
 8006cac:	08006d2f 	.word	0x08006d2f
 8006cb0:	08006d8d 	.word	0x08006d8d
 8006cb4:	08006d8d 	.word	0x08006d8d
 8006cb8:	08006d8d 	.word	0x08006d8d
 8006cbc:	08006d8d 	.word	0x08006d8d
 8006cc0:	08006d8d 	.word	0x08006d8d
 8006cc4:	08006d8d 	.word	0x08006d8d
 8006cc8:	08006d8d 	.word	0x08006d8d
 8006ccc:	08006d3f 	.word	0x08006d3f
 8006cd0:	08006d8d 	.word	0x08006d8d
 8006cd4:	08006d8d 	.word	0x08006d8d
 8006cd8:	08006d8d 	.word	0x08006d8d
 8006cdc:	08006d8d 	.word	0x08006d8d
 8006ce0:	08006d8d 	.word	0x08006d8d
 8006ce4:	08006d8d 	.word	0x08006d8d
 8006ce8:	08006d8d 	.word	0x08006d8d
 8006cec:	08006d8d 	.word	0x08006d8d
 8006cf0:	08006d8d 	.word	0x08006d8d
 8006cf4:	08006d8d 	.word	0x08006d8d
 8006cf8:	08006d8d 	.word	0x08006d8d
 8006cfc:	08006d8d 	.word	0x08006d8d
 8006d00:	08006d8d 	.word	0x08006d8d
 8006d04:	08006d8d 	.word	0x08006d8d
 8006d08:	08006d8d 	.word	0x08006d8d
 8006d0c:	08006d7f 	.word	0x08006d7f
 8006d10:	2b40      	cmp	r3, #64	; 0x40
 8006d12:	d037      	beq.n	8006d84 <UART_SetConfig+0x6bc>
 8006d14:	e03a      	b.n	8006d8c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006d16:	f7fe fcfd 	bl	8005714 <HAL_RCCEx_GetD3PCLK1Freq>
 8006d1a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006d1c:	e03c      	b.n	8006d98 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d22:	4618      	mov	r0, r3
 8006d24:	f7fe fd0c 	bl	8005740 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d2c:	e034      	b.n	8006d98 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d2e:	f107 0318 	add.w	r3, r7, #24
 8006d32:	4618      	mov	r0, r3
 8006d34:	f7fe fe58 	bl	80059e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d3c:	e02c      	b.n	8006d98 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d3e:	4b09      	ldr	r3, [pc, #36]	; (8006d64 <UART_SetConfig+0x69c>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f003 0320 	and.w	r3, r3, #32
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d016      	beq.n	8006d78 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006d4a:	4b06      	ldr	r3, [pc, #24]	; (8006d64 <UART_SetConfig+0x69c>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	08db      	lsrs	r3, r3, #3
 8006d50:	f003 0303 	and.w	r3, r3, #3
 8006d54:	4a07      	ldr	r2, [pc, #28]	; (8006d74 <UART_SetConfig+0x6ac>)
 8006d56:	fa22 f303 	lsr.w	r3, r2, r3
 8006d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006d5c:	e01c      	b.n	8006d98 <UART_SetConfig+0x6d0>
 8006d5e:	bf00      	nop
 8006d60:	40011400 	.word	0x40011400
 8006d64:	58024400 	.word	0x58024400
 8006d68:	40007800 	.word	0x40007800
 8006d6c:	40007c00 	.word	0x40007c00
 8006d70:	58000c00 	.word	0x58000c00
 8006d74:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006d78:	4b9d      	ldr	r3, [pc, #628]	; (8006ff0 <UART_SetConfig+0x928>)
 8006d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d7c:	e00c      	b.n	8006d98 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006d7e:	4b9d      	ldr	r3, [pc, #628]	; (8006ff4 <UART_SetConfig+0x92c>)
 8006d80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d82:	e009      	b.n	8006d98 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d8a:	e005      	b.n	8006d98 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006d96:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006d98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	f000 81de 	beq.w	800715c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da4:	4a94      	ldr	r2, [pc, #592]	; (8006ff8 <UART_SetConfig+0x930>)
 8006da6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006daa:	461a      	mov	r2, r3
 8006dac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dae:	fbb3 f3f2 	udiv	r3, r3, r2
 8006db2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	685a      	ldr	r2, [r3, #4]
 8006db8:	4613      	mov	r3, r2
 8006dba:	005b      	lsls	r3, r3, #1
 8006dbc:	4413      	add	r3, r2
 8006dbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d305      	bcc.n	8006dd0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006dca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d903      	bls.n	8006dd8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006dd6:	e1c1      	b.n	800715c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dda:	2200      	movs	r2, #0
 8006ddc:	60bb      	str	r3, [r7, #8]
 8006dde:	60fa      	str	r2, [r7, #12]
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de4:	4a84      	ldr	r2, [pc, #528]	; (8006ff8 <UART_SetConfig+0x930>)
 8006de6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	2200      	movs	r2, #0
 8006dee:	603b      	str	r3, [r7, #0]
 8006df0:	607a      	str	r2, [r7, #4]
 8006df2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006df6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006dfa:	f7f9 fac9 	bl	8000390 <__aeabi_uldivmod>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	460b      	mov	r3, r1
 8006e02:	4610      	mov	r0, r2
 8006e04:	4619      	mov	r1, r3
 8006e06:	f04f 0200 	mov.w	r2, #0
 8006e0a:	f04f 0300 	mov.w	r3, #0
 8006e0e:	020b      	lsls	r3, r1, #8
 8006e10:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006e14:	0202      	lsls	r2, r0, #8
 8006e16:	6979      	ldr	r1, [r7, #20]
 8006e18:	6849      	ldr	r1, [r1, #4]
 8006e1a:	0849      	lsrs	r1, r1, #1
 8006e1c:	2000      	movs	r0, #0
 8006e1e:	460c      	mov	r4, r1
 8006e20:	4605      	mov	r5, r0
 8006e22:	eb12 0804 	adds.w	r8, r2, r4
 8006e26:	eb43 0905 	adc.w	r9, r3, r5
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	469a      	mov	sl, r3
 8006e32:	4693      	mov	fp, r2
 8006e34:	4652      	mov	r2, sl
 8006e36:	465b      	mov	r3, fp
 8006e38:	4640      	mov	r0, r8
 8006e3a:	4649      	mov	r1, r9
 8006e3c:	f7f9 faa8 	bl	8000390 <__aeabi_uldivmod>
 8006e40:	4602      	mov	r2, r0
 8006e42:	460b      	mov	r3, r1
 8006e44:	4613      	mov	r3, r2
 8006e46:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e4e:	d308      	bcc.n	8006e62 <UART_SetConfig+0x79a>
 8006e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e56:	d204      	bcs.n	8006e62 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e5e:	60da      	str	r2, [r3, #12]
 8006e60:	e17c      	b.n	800715c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006e68:	e178      	b.n	800715c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	69db      	ldr	r3, [r3, #28]
 8006e6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e72:	f040 80c5 	bne.w	8007000 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006e76:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006e7a:	2b20      	cmp	r3, #32
 8006e7c:	dc48      	bgt.n	8006f10 <UART_SetConfig+0x848>
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	db7b      	blt.n	8006f7a <UART_SetConfig+0x8b2>
 8006e82:	2b20      	cmp	r3, #32
 8006e84:	d879      	bhi.n	8006f7a <UART_SetConfig+0x8b2>
 8006e86:	a201      	add	r2, pc, #4	; (adr r2, 8006e8c <UART_SetConfig+0x7c4>)
 8006e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e8c:	08006f17 	.word	0x08006f17
 8006e90:	08006f1f 	.word	0x08006f1f
 8006e94:	08006f7b 	.word	0x08006f7b
 8006e98:	08006f7b 	.word	0x08006f7b
 8006e9c:	08006f27 	.word	0x08006f27
 8006ea0:	08006f7b 	.word	0x08006f7b
 8006ea4:	08006f7b 	.word	0x08006f7b
 8006ea8:	08006f7b 	.word	0x08006f7b
 8006eac:	08006f37 	.word	0x08006f37
 8006eb0:	08006f7b 	.word	0x08006f7b
 8006eb4:	08006f7b 	.word	0x08006f7b
 8006eb8:	08006f7b 	.word	0x08006f7b
 8006ebc:	08006f7b 	.word	0x08006f7b
 8006ec0:	08006f7b 	.word	0x08006f7b
 8006ec4:	08006f7b 	.word	0x08006f7b
 8006ec8:	08006f7b 	.word	0x08006f7b
 8006ecc:	08006f47 	.word	0x08006f47
 8006ed0:	08006f7b 	.word	0x08006f7b
 8006ed4:	08006f7b 	.word	0x08006f7b
 8006ed8:	08006f7b 	.word	0x08006f7b
 8006edc:	08006f7b 	.word	0x08006f7b
 8006ee0:	08006f7b 	.word	0x08006f7b
 8006ee4:	08006f7b 	.word	0x08006f7b
 8006ee8:	08006f7b 	.word	0x08006f7b
 8006eec:	08006f7b 	.word	0x08006f7b
 8006ef0:	08006f7b 	.word	0x08006f7b
 8006ef4:	08006f7b 	.word	0x08006f7b
 8006ef8:	08006f7b 	.word	0x08006f7b
 8006efc:	08006f7b 	.word	0x08006f7b
 8006f00:	08006f7b 	.word	0x08006f7b
 8006f04:	08006f7b 	.word	0x08006f7b
 8006f08:	08006f7b 	.word	0x08006f7b
 8006f0c:	08006f6d 	.word	0x08006f6d
 8006f10:	2b40      	cmp	r3, #64	; 0x40
 8006f12:	d02e      	beq.n	8006f72 <UART_SetConfig+0x8aa>
 8006f14:	e031      	b.n	8006f7a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f16:	f7fd f985 	bl	8004224 <HAL_RCC_GetPCLK1Freq>
 8006f1a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006f1c:	e033      	b.n	8006f86 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f1e:	f7fd f997 	bl	8004250 <HAL_RCC_GetPCLK2Freq>
 8006f22:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006f24:	e02f      	b.n	8006f86 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f7fe fc08 	bl	8005740 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f34:	e027      	b.n	8006f86 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f36:	f107 0318 	add.w	r3, r7, #24
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f7fe fd54 	bl	80059e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f44:	e01f      	b.n	8006f86 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f46:	4b2d      	ldr	r3, [pc, #180]	; (8006ffc <UART_SetConfig+0x934>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f003 0320 	and.w	r3, r3, #32
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d009      	beq.n	8006f66 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006f52:	4b2a      	ldr	r3, [pc, #168]	; (8006ffc <UART_SetConfig+0x934>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	08db      	lsrs	r3, r3, #3
 8006f58:	f003 0303 	and.w	r3, r3, #3
 8006f5c:	4a24      	ldr	r2, [pc, #144]	; (8006ff0 <UART_SetConfig+0x928>)
 8006f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8006f62:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006f64:	e00f      	b.n	8006f86 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006f66:	4b22      	ldr	r3, [pc, #136]	; (8006ff0 <UART_SetConfig+0x928>)
 8006f68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f6a:	e00c      	b.n	8006f86 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006f6c:	4b21      	ldr	r3, [pc, #132]	; (8006ff4 <UART_SetConfig+0x92c>)
 8006f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f70:	e009      	b.n	8006f86 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f78:	e005      	b.n	8006f86 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006f84:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	f000 80e7 	beq.w	800715c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f92:	4a19      	ldr	r2, [pc, #100]	; (8006ff8 <UART_SetConfig+0x930>)
 8006f94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f98:	461a      	mov	r2, r3
 8006f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fa0:	005a      	lsls	r2, r3, #1
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	085b      	lsrs	r3, r3, #1
 8006fa8:	441a      	add	r2, r3
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fb2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb6:	2b0f      	cmp	r3, #15
 8006fb8:	d916      	bls.n	8006fe8 <UART_SetConfig+0x920>
 8006fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fc0:	d212      	bcs.n	8006fe8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	f023 030f 	bic.w	r3, r3, #15
 8006fca:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fce:	085b      	lsrs	r3, r3, #1
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	f003 0307 	and.w	r3, r3, #7
 8006fd6:	b29a      	uxth	r2, r3
 8006fd8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006fe4:	60da      	str	r2, [r3, #12]
 8006fe6:	e0b9      	b.n	800715c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006fee:	e0b5      	b.n	800715c <UART_SetConfig+0xa94>
 8006ff0:	03d09000 	.word	0x03d09000
 8006ff4:	003d0900 	.word	0x003d0900
 8006ff8:	080116dc 	.word	0x080116dc
 8006ffc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007000:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007004:	2b20      	cmp	r3, #32
 8007006:	dc49      	bgt.n	800709c <UART_SetConfig+0x9d4>
 8007008:	2b00      	cmp	r3, #0
 800700a:	db7c      	blt.n	8007106 <UART_SetConfig+0xa3e>
 800700c:	2b20      	cmp	r3, #32
 800700e:	d87a      	bhi.n	8007106 <UART_SetConfig+0xa3e>
 8007010:	a201      	add	r2, pc, #4	; (adr r2, 8007018 <UART_SetConfig+0x950>)
 8007012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007016:	bf00      	nop
 8007018:	080070a3 	.word	0x080070a3
 800701c:	080070ab 	.word	0x080070ab
 8007020:	08007107 	.word	0x08007107
 8007024:	08007107 	.word	0x08007107
 8007028:	080070b3 	.word	0x080070b3
 800702c:	08007107 	.word	0x08007107
 8007030:	08007107 	.word	0x08007107
 8007034:	08007107 	.word	0x08007107
 8007038:	080070c3 	.word	0x080070c3
 800703c:	08007107 	.word	0x08007107
 8007040:	08007107 	.word	0x08007107
 8007044:	08007107 	.word	0x08007107
 8007048:	08007107 	.word	0x08007107
 800704c:	08007107 	.word	0x08007107
 8007050:	08007107 	.word	0x08007107
 8007054:	08007107 	.word	0x08007107
 8007058:	080070d3 	.word	0x080070d3
 800705c:	08007107 	.word	0x08007107
 8007060:	08007107 	.word	0x08007107
 8007064:	08007107 	.word	0x08007107
 8007068:	08007107 	.word	0x08007107
 800706c:	08007107 	.word	0x08007107
 8007070:	08007107 	.word	0x08007107
 8007074:	08007107 	.word	0x08007107
 8007078:	08007107 	.word	0x08007107
 800707c:	08007107 	.word	0x08007107
 8007080:	08007107 	.word	0x08007107
 8007084:	08007107 	.word	0x08007107
 8007088:	08007107 	.word	0x08007107
 800708c:	08007107 	.word	0x08007107
 8007090:	08007107 	.word	0x08007107
 8007094:	08007107 	.word	0x08007107
 8007098:	080070f9 	.word	0x080070f9
 800709c:	2b40      	cmp	r3, #64	; 0x40
 800709e:	d02e      	beq.n	80070fe <UART_SetConfig+0xa36>
 80070a0:	e031      	b.n	8007106 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070a2:	f7fd f8bf 	bl	8004224 <HAL_RCC_GetPCLK1Freq>
 80070a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80070a8:	e033      	b.n	8007112 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070aa:	f7fd f8d1 	bl	8004250 <HAL_RCC_GetPCLK2Freq>
 80070ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80070b0:	e02f      	b.n	8007112 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7fe fb42 	bl	8005740 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80070bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070c0:	e027      	b.n	8007112 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070c2:	f107 0318 	add.w	r3, r7, #24
 80070c6:	4618      	mov	r0, r3
 80070c8:	f7fe fc8e 	bl	80059e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80070cc:	69fb      	ldr	r3, [r7, #28]
 80070ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070d0:	e01f      	b.n	8007112 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070d2:	4b2d      	ldr	r3, [pc, #180]	; (8007188 <UART_SetConfig+0xac0>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 0320 	and.w	r3, r3, #32
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d009      	beq.n	80070f2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80070de:	4b2a      	ldr	r3, [pc, #168]	; (8007188 <UART_SetConfig+0xac0>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	08db      	lsrs	r3, r3, #3
 80070e4:	f003 0303 	and.w	r3, r3, #3
 80070e8:	4a28      	ldr	r2, [pc, #160]	; (800718c <UART_SetConfig+0xac4>)
 80070ea:	fa22 f303 	lsr.w	r3, r2, r3
 80070ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80070f0:	e00f      	b.n	8007112 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80070f2:	4b26      	ldr	r3, [pc, #152]	; (800718c <UART_SetConfig+0xac4>)
 80070f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070f6:	e00c      	b.n	8007112 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80070f8:	4b25      	ldr	r3, [pc, #148]	; (8007190 <UART_SetConfig+0xac8>)
 80070fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070fc:	e009      	b.n	8007112 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007102:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007104:	e005      	b.n	8007112 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007106:	2300      	movs	r3, #0
 8007108:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007110:	bf00      	nop
    }

    if (pclk != 0U)
 8007112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007114:	2b00      	cmp	r3, #0
 8007116:	d021      	beq.n	800715c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711c:	4a1d      	ldr	r2, [pc, #116]	; (8007194 <UART_SetConfig+0xacc>)
 800711e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007122:	461a      	mov	r2, r3
 8007124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007126:	fbb3 f2f2 	udiv	r2, r3, r2
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	085b      	lsrs	r3, r3, #1
 8007130:	441a      	add	r2, r3
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	fbb2 f3f3 	udiv	r3, r2, r3
 800713a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800713c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800713e:	2b0f      	cmp	r3, #15
 8007140:	d909      	bls.n	8007156 <UART_SetConfig+0xa8e>
 8007142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007148:	d205      	bcs.n	8007156 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800714a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800714c:	b29a      	uxth	r2, r3
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	60da      	str	r2, [r3, #12]
 8007154:	e002      	b.n	800715c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	2201      	movs	r2, #1
 8007160:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	2201      	movs	r2, #1
 8007168:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	2200      	movs	r2, #0
 8007170:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	2200      	movs	r2, #0
 8007176:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007178:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800717c:	4618      	mov	r0, r3
 800717e:	3748      	adds	r7, #72	; 0x48
 8007180:	46bd      	mov	sp, r7
 8007182:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007186:	bf00      	nop
 8007188:	58024400 	.word	0x58024400
 800718c:	03d09000 	.word	0x03d09000
 8007190:	003d0900 	.word	0x003d0900
 8007194:	080116dc 	.word	0x080116dc

08007198 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071a4:	f003 0301 	and.w	r3, r3, #1
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d00a      	beq.n	80071c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	430a      	orrs	r2, r1
 80071c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c6:	f003 0302 	and.w	r3, r3, #2
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00a      	beq.n	80071e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	430a      	orrs	r2, r1
 80071e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e8:	f003 0304 	and.w	r3, r3, #4
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d00a      	beq.n	8007206 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	430a      	orrs	r2, r1
 8007204:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800720a:	f003 0308 	and.w	r3, r3, #8
 800720e:	2b00      	cmp	r3, #0
 8007210:	d00a      	beq.n	8007228 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	430a      	orrs	r2, r1
 8007226:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800722c:	f003 0310 	and.w	r3, r3, #16
 8007230:	2b00      	cmp	r3, #0
 8007232:	d00a      	beq.n	800724a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	430a      	orrs	r2, r1
 8007248:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800724e:	f003 0320 	and.w	r3, r3, #32
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00a      	beq.n	800726c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	430a      	orrs	r2, r1
 800726a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007274:	2b00      	cmp	r3, #0
 8007276:	d01a      	beq.n	80072ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	430a      	orrs	r2, r1
 800728c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007292:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007296:	d10a      	bne.n	80072ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	430a      	orrs	r2, r1
 80072ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d00a      	beq.n	80072d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	430a      	orrs	r2, r1
 80072ce:	605a      	str	r2, [r3, #4]
  }
}
 80072d0:	bf00      	nop
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b098      	sub	sp, #96	; 0x60
 80072e0:	af02      	add	r7, sp, #8
 80072e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80072ec:	f7fa f968 	bl	80015c0 <HAL_GetTick>
 80072f0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f003 0308 	and.w	r3, r3, #8
 80072fc:	2b08      	cmp	r3, #8
 80072fe:	d12f      	bne.n	8007360 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007300:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007304:	9300      	str	r3, [sp, #0]
 8007306:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007308:	2200      	movs	r2, #0
 800730a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 f88e 	bl	8007430 <UART_WaitOnFlagUntilTimeout>
 8007314:	4603      	mov	r3, r0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d022      	beq.n	8007360 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007322:	e853 3f00 	ldrex	r3, [r3]
 8007326:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800732a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800732e:	653b      	str	r3, [r7, #80]	; 0x50
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	461a      	mov	r2, r3
 8007336:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007338:	647b      	str	r3, [r7, #68]	; 0x44
 800733a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800733c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800733e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007340:	e841 2300 	strex	r3, r2, [r1]
 8007344:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007348:	2b00      	cmp	r3, #0
 800734a:	d1e6      	bne.n	800731a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2220      	movs	r2, #32
 8007350:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800735c:	2303      	movs	r3, #3
 800735e:	e063      	b.n	8007428 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f003 0304 	and.w	r3, r3, #4
 800736a:	2b04      	cmp	r3, #4
 800736c:	d149      	bne.n	8007402 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800736e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007372:	9300      	str	r3, [sp, #0]
 8007374:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007376:	2200      	movs	r2, #0
 8007378:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 f857 	bl	8007430 <UART_WaitOnFlagUntilTimeout>
 8007382:	4603      	mov	r3, r0
 8007384:	2b00      	cmp	r3, #0
 8007386:	d03c      	beq.n	8007402 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800738e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007390:	e853 3f00 	ldrex	r3, [r3]
 8007394:	623b      	str	r3, [r7, #32]
   return(result);
 8007396:	6a3b      	ldr	r3, [r7, #32]
 8007398:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800739c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	461a      	mov	r2, r3
 80073a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073a6:	633b      	str	r3, [r7, #48]	; 0x30
 80073a8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80073ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073ae:	e841 2300 	strex	r3, r2, [r1]
 80073b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80073b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d1e6      	bne.n	8007388 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	3308      	adds	r3, #8
 80073c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	e853 3f00 	ldrex	r3, [r3]
 80073c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f023 0301 	bic.w	r3, r3, #1
 80073d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	3308      	adds	r3, #8
 80073d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073da:	61fa      	str	r2, [r7, #28]
 80073dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073de:	69b9      	ldr	r1, [r7, #24]
 80073e0:	69fa      	ldr	r2, [r7, #28]
 80073e2:	e841 2300 	strex	r3, r2, [r1]
 80073e6:	617b      	str	r3, [r7, #20]
   return(result);
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d1e5      	bne.n	80073ba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2220      	movs	r2, #32
 80073f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073fe:	2303      	movs	r3, #3
 8007400:	e012      	b.n	8007428 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2220      	movs	r2, #32
 8007406:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2220      	movs	r2, #32
 800740e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2200      	movs	r2, #0
 800741c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007426:	2300      	movs	r3, #0
}
 8007428:	4618      	mov	r0, r3
 800742a:	3758      	adds	r7, #88	; 0x58
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	60b9      	str	r1, [r7, #8]
 800743a:	603b      	str	r3, [r7, #0]
 800743c:	4613      	mov	r3, r2
 800743e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007440:	e049      	b.n	80074d6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007448:	d045      	beq.n	80074d6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800744a:	f7fa f8b9 	bl	80015c0 <HAL_GetTick>
 800744e:	4602      	mov	r2, r0
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	1ad3      	subs	r3, r2, r3
 8007454:	69ba      	ldr	r2, [r7, #24]
 8007456:	429a      	cmp	r2, r3
 8007458:	d302      	bcc.n	8007460 <UART_WaitOnFlagUntilTimeout+0x30>
 800745a:	69bb      	ldr	r3, [r7, #24]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d101      	bne.n	8007464 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007460:	2303      	movs	r3, #3
 8007462:	e048      	b.n	80074f6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f003 0304 	and.w	r3, r3, #4
 800746e:	2b00      	cmp	r3, #0
 8007470:	d031      	beq.n	80074d6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	69db      	ldr	r3, [r3, #28]
 8007478:	f003 0308 	and.w	r3, r3, #8
 800747c:	2b08      	cmp	r3, #8
 800747e:	d110      	bne.n	80074a2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2208      	movs	r2, #8
 8007486:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007488:	68f8      	ldr	r0, [r7, #12]
 800748a:	f000 f839 	bl	8007500 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2208      	movs	r2, #8
 8007492:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2200      	movs	r2, #0
 800749a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	e029      	b.n	80074f6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	69db      	ldr	r3, [r3, #28]
 80074a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074b0:	d111      	bne.n	80074d6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80074ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80074bc:	68f8      	ldr	r0, [r7, #12]
 80074be:	f000 f81f 	bl	8007500 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2220      	movs	r2, #32
 80074c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80074d2:	2303      	movs	r3, #3
 80074d4:	e00f      	b.n	80074f6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	69da      	ldr	r2, [r3, #28]
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	4013      	ands	r3, r2
 80074e0:	68ba      	ldr	r2, [r7, #8]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	bf0c      	ite	eq
 80074e6:	2301      	moveq	r3, #1
 80074e8:	2300      	movne	r3, #0
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	461a      	mov	r2, r3
 80074ee:	79fb      	ldrb	r3, [r7, #7]
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d0a6      	beq.n	8007442 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3710      	adds	r7, #16
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
	...

08007500 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007500:	b480      	push	{r7}
 8007502:	b095      	sub	sp, #84	; 0x54
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007510:	e853 3f00 	ldrex	r3, [r3]
 8007514:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007518:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800751c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	461a      	mov	r2, r3
 8007524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007526:	643b      	str	r3, [r7, #64]	; 0x40
 8007528:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800752c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800752e:	e841 2300 	strex	r3, r2, [r1]
 8007532:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007536:	2b00      	cmp	r3, #0
 8007538:	d1e6      	bne.n	8007508 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	3308      	adds	r3, #8
 8007540:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007542:	6a3b      	ldr	r3, [r7, #32]
 8007544:	e853 3f00 	ldrex	r3, [r3]
 8007548:	61fb      	str	r3, [r7, #28]
   return(result);
 800754a:	69fa      	ldr	r2, [r7, #28]
 800754c:	4b1e      	ldr	r3, [pc, #120]	; (80075c8 <UART_EndRxTransfer+0xc8>)
 800754e:	4013      	ands	r3, r2
 8007550:	64bb      	str	r3, [r7, #72]	; 0x48
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	3308      	adds	r3, #8
 8007558:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800755a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800755c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800755e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007560:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007562:	e841 2300 	strex	r3, r2, [r1]
 8007566:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756a:	2b00      	cmp	r3, #0
 800756c:	d1e5      	bne.n	800753a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007572:	2b01      	cmp	r3, #1
 8007574:	d118      	bne.n	80075a8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	e853 3f00 	ldrex	r3, [r3]
 8007582:	60bb      	str	r3, [r7, #8]
   return(result);
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	f023 0310 	bic.w	r3, r3, #16
 800758a:	647b      	str	r3, [r7, #68]	; 0x44
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	461a      	mov	r2, r3
 8007592:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007594:	61bb      	str	r3, [r7, #24]
 8007596:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007598:	6979      	ldr	r1, [r7, #20]
 800759a:	69ba      	ldr	r2, [r7, #24]
 800759c:	e841 2300 	strex	r3, r2, [r1]
 80075a0:	613b      	str	r3, [r7, #16]
   return(result);
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d1e6      	bne.n	8007576 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2220      	movs	r2, #32
 80075ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	675a      	str	r2, [r3, #116]	; 0x74
}
 80075bc:	bf00      	nop
 80075be:	3754      	adds	r7, #84	; 0x54
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr
 80075c8:	effffffe 	.word	0xeffffffe

080075cc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b085      	sub	sp, #20
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d101      	bne.n	80075e2 <HAL_UARTEx_DisableFifoMode+0x16>
 80075de:	2302      	movs	r3, #2
 80075e0:	e027      	b.n	8007632 <HAL_UARTEx_DisableFifoMode+0x66>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2201      	movs	r2, #1
 80075e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2224      	movs	r2, #36	; 0x24
 80075ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f022 0201 	bic.w	r2, r2, #1
 8007608:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007610:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2220      	movs	r2, #32
 8007624:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007630:	2300      	movs	r3, #0
}
 8007632:	4618      	mov	r0, r3
 8007634:	3714      	adds	r7, #20
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr

0800763e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800763e:	b580      	push	{r7, lr}
 8007640:	b084      	sub	sp, #16
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
 8007646:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800764e:	2b01      	cmp	r3, #1
 8007650:	d101      	bne.n	8007656 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007652:	2302      	movs	r3, #2
 8007654:	e02d      	b.n	80076b2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2201      	movs	r2, #1
 800765a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2224      	movs	r2, #36	; 0x24
 8007662:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f022 0201 	bic.w	r2, r2, #1
 800767c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	683a      	ldr	r2, [r7, #0]
 800768e:	430a      	orrs	r2, r1
 8007690:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 f850 	bl	8007738 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	68fa      	ldr	r2, [r7, #12]
 800769e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2220      	movs	r2, #32
 80076a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3710      	adds	r7, #16
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}

080076ba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b084      	sub	sp, #16
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
 80076c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d101      	bne.n	80076d2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80076ce:	2302      	movs	r3, #2
 80076d0:	e02d      	b.n	800772e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2201      	movs	r2, #1
 80076d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2224      	movs	r2, #36	; 0x24
 80076de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f022 0201 	bic.w	r2, r2, #1
 80076f8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	683a      	ldr	r2, [r7, #0]
 800770a:	430a      	orrs	r2, r1
 800770c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 f812 	bl	8007738 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	68fa      	ldr	r2, [r7, #12]
 800771a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2220      	movs	r2, #32
 8007720:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800772c:	2300      	movs	r3, #0
}
 800772e:	4618      	mov	r0, r3
 8007730:	3710      	adds	r7, #16
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
	...

08007738 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007738:	b480      	push	{r7}
 800773a:	b085      	sub	sp, #20
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007744:	2b00      	cmp	r3, #0
 8007746:	d108      	bne.n	800775a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2201      	movs	r2, #1
 800774c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2201      	movs	r2, #1
 8007754:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007758:	e031      	b.n	80077be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800775a:	2310      	movs	r3, #16
 800775c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800775e:	2310      	movs	r3, #16
 8007760:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	0e5b      	lsrs	r3, r3, #25
 800776a:	b2db      	uxtb	r3, r3
 800776c:	f003 0307 	and.w	r3, r3, #7
 8007770:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	0f5b      	lsrs	r3, r3, #29
 800777a:	b2db      	uxtb	r3, r3
 800777c:	f003 0307 	and.w	r3, r3, #7
 8007780:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007782:	7bbb      	ldrb	r3, [r7, #14]
 8007784:	7b3a      	ldrb	r2, [r7, #12]
 8007786:	4911      	ldr	r1, [pc, #68]	; (80077cc <UARTEx_SetNbDataToProcess+0x94>)
 8007788:	5c8a      	ldrb	r2, [r1, r2]
 800778a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800778e:	7b3a      	ldrb	r2, [r7, #12]
 8007790:	490f      	ldr	r1, [pc, #60]	; (80077d0 <UARTEx_SetNbDataToProcess+0x98>)
 8007792:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007794:	fb93 f3f2 	sdiv	r3, r3, r2
 8007798:	b29a      	uxth	r2, r3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077a0:	7bfb      	ldrb	r3, [r7, #15]
 80077a2:	7b7a      	ldrb	r2, [r7, #13]
 80077a4:	4909      	ldr	r1, [pc, #36]	; (80077cc <UARTEx_SetNbDataToProcess+0x94>)
 80077a6:	5c8a      	ldrb	r2, [r1, r2]
 80077a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80077ac:	7b7a      	ldrb	r2, [r7, #13]
 80077ae:	4908      	ldr	r1, [pc, #32]	; (80077d0 <UARTEx_SetNbDataToProcess+0x98>)
 80077b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80077b6:	b29a      	uxth	r2, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80077be:	bf00      	nop
 80077c0:	3714      	adds	r7, #20
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr
 80077ca:	bf00      	nop
 80077cc:	080116f4 	.word	0x080116f4
 80077d0:	080116fc 	.word	0x080116fc

080077d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80077d4:	b084      	sub	sp, #16
 80077d6:	b580      	push	{r7, lr}
 80077d8:	b084      	sub	sp, #16
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
 80077de:	f107 001c 	add.w	r0, r7, #28
 80077e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80077e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d120      	bne.n	800782e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	68da      	ldr	r2, [r3, #12]
 80077fc:	4b2a      	ldr	r3, [pc, #168]	; (80078a8 <USB_CoreInit+0xd4>)
 80077fe:	4013      	ands	r3, r2
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007810:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007812:	2b01      	cmp	r3, #1
 8007814:	d105      	bne.n	8007822 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 faac 	bl	8007d80 <USB_CoreReset>
 8007828:	4603      	mov	r3, r0
 800782a:	73fb      	strb	r3, [r7, #15]
 800782c:	e01a      	b.n	8007864 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	68db      	ldr	r3, [r3, #12]
 8007832:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 faa0 	bl	8007d80 <USB_CoreReset>
 8007840:	4603      	mov	r3, r0
 8007842:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007844:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007846:	2b00      	cmp	r3, #0
 8007848:	d106      	bne.n	8007858 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800784e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	639a      	str	r2, [r3, #56]	; 0x38
 8007856:	e005      	b.n	8007864 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800785c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007866:	2b01      	cmp	r3, #1
 8007868:	d116      	bne.n	8007898 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800786e:	b29a      	uxth	r2, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007878:	4b0c      	ldr	r3, [pc, #48]	; (80078ac <USB_CoreInit+0xd8>)
 800787a:	4313      	orrs	r3, r2
 800787c:	687a      	ldr	r2, [r7, #4]
 800787e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	f043 0206 	orr.w	r2, r3, #6
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	f043 0220 	orr.w	r2, r3, #32
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007898:	7bfb      	ldrb	r3, [r7, #15]
}
 800789a:	4618      	mov	r0, r3
 800789c:	3710      	adds	r7, #16
 800789e:	46bd      	mov	sp, r7
 80078a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80078a4:	b004      	add	sp, #16
 80078a6:	4770      	bx	lr
 80078a8:	ffbdffbf 	.word	0xffbdffbf
 80078ac:	03ee0000 	.word	0x03ee0000

080078b0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b083      	sub	sp, #12
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	f023 0201 	bic.w	r2, r3, #1
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80078c4:	2300      	movs	r3, #0
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	370c      	adds	r7, #12
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr

080078d2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b084      	sub	sp, #16
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
 80078da:	460b      	mov	r3, r1
 80078dc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80078de:	2300      	movs	r3, #0
 80078e0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	68db      	ldr	r3, [r3, #12]
 80078e6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80078ee:	78fb      	ldrb	r3, [r7, #3]
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d115      	bne.n	8007920 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007900:	2001      	movs	r0, #1
 8007902:	f7f9 fe69 	bl	80015d8 <HAL_Delay>
      ms++;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	3301      	adds	r3, #1
 800790a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 fa29 	bl	8007d64 <USB_GetMode>
 8007912:	4603      	mov	r3, r0
 8007914:	2b01      	cmp	r3, #1
 8007916:	d01e      	beq.n	8007956 <USB_SetCurrentMode+0x84>
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2b31      	cmp	r3, #49	; 0x31
 800791c:	d9f0      	bls.n	8007900 <USB_SetCurrentMode+0x2e>
 800791e:	e01a      	b.n	8007956 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007920:	78fb      	ldrb	r3, [r7, #3]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d115      	bne.n	8007952 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	68db      	ldr	r3, [r3, #12]
 800792a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007932:	2001      	movs	r0, #1
 8007934:	f7f9 fe50 	bl	80015d8 <HAL_Delay>
      ms++;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	3301      	adds	r3, #1
 800793c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 fa10 	bl	8007d64 <USB_GetMode>
 8007944:	4603      	mov	r3, r0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d005      	beq.n	8007956 <USB_SetCurrentMode+0x84>
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2b31      	cmp	r3, #49	; 0x31
 800794e:	d9f0      	bls.n	8007932 <USB_SetCurrentMode+0x60>
 8007950:	e001      	b.n	8007956 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	e005      	b.n	8007962 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2b32      	cmp	r3, #50	; 0x32
 800795a:	d101      	bne.n	8007960 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800795c:	2301      	movs	r3, #1
 800795e:	e000      	b.n	8007962 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007960:	2300      	movs	r3, #0
}
 8007962:	4618      	mov	r0, r3
 8007964:	3710      	adds	r7, #16
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
	...

0800796c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800796c:	b084      	sub	sp, #16
 800796e:	b580      	push	{r7, lr}
 8007970:	b086      	sub	sp, #24
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
 8007976:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800797a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800797e:	2300      	movs	r3, #0
 8007980:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007986:	2300      	movs	r3, #0
 8007988:	613b      	str	r3, [r7, #16]
 800798a:	e009      	b.n	80079a0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	3340      	adds	r3, #64	; 0x40
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	4413      	add	r3, r2
 8007996:	2200      	movs	r2, #0
 8007998:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	3301      	adds	r3, #1
 800799e:	613b      	str	r3, [r7, #16]
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	2b0e      	cmp	r3, #14
 80079a4:	d9f2      	bls.n	800798c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80079a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d11c      	bne.n	80079e6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	68fa      	ldr	r2, [r7, #12]
 80079b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079ba:	f043 0302 	orr.w	r3, r3, #2
 80079be:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	601a      	str	r2, [r3, #0]
 80079e4:	e005      	b.n	80079f2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80079f8:	461a      	mov	r2, r3
 80079fa:	2300      	movs	r3, #0
 80079fc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a04:	4619      	mov	r1, r3
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	680b      	ldr	r3, [r1, #0]
 8007a10:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d10c      	bne.n	8007a32 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d104      	bne.n	8007a28 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007a1e:	2100      	movs	r1, #0
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 f965 	bl	8007cf0 <USB_SetDevSpeed>
 8007a26:	e008      	b.n	8007a3a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007a28:	2101      	movs	r1, #1
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 f960 	bl	8007cf0 <USB_SetDevSpeed>
 8007a30:	e003      	b.n	8007a3a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007a32:	2103      	movs	r1, #3
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 f95b 	bl	8007cf0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007a3a:	2110      	movs	r1, #16
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 f8f3 	bl	8007c28 <USB_FlushTxFifo>
 8007a42:	4603      	mov	r3, r0
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d001      	beq.n	8007a4c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 f91f 	bl	8007c90 <USB_FlushRxFifo>
 8007a52:	4603      	mov	r3, r0
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d001      	beq.n	8007a5c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a62:	461a      	mov	r2, r3
 8007a64:	2300      	movs	r3, #0
 8007a66:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a6e:	461a      	mov	r2, r3
 8007a70:	2300      	movs	r3, #0
 8007a72:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a80:	2300      	movs	r3, #0
 8007a82:	613b      	str	r3, [r7, #16]
 8007a84:	e043      	b.n	8007b0e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	015a      	lsls	r2, r3, #5
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	4413      	add	r3, r2
 8007a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a9c:	d118      	bne.n	8007ad0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d10a      	bne.n	8007aba <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	015a      	lsls	r2, r3, #5
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	4413      	add	r3, r2
 8007aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007ab6:	6013      	str	r3, [r2, #0]
 8007ab8:	e013      	b.n	8007ae2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	015a      	lsls	r2, r3, #5
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	4413      	add	r3, r2
 8007ac2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007acc:	6013      	str	r3, [r2, #0]
 8007ace:	e008      	b.n	8007ae2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	015a      	lsls	r2, r3, #5
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007adc:	461a      	mov	r2, r3
 8007ade:	2300      	movs	r3, #0
 8007ae0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	015a      	lsls	r2, r3, #5
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	4413      	add	r3, r2
 8007aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aee:	461a      	mov	r2, r3
 8007af0:	2300      	movs	r3, #0
 8007af2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	015a      	lsls	r2, r3, #5
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	4413      	add	r3, r2
 8007afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b00:	461a      	mov	r2, r3
 8007b02:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007b06:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	613b      	str	r3, [r7, #16]
 8007b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b10:	693a      	ldr	r2, [r7, #16]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d3b7      	bcc.n	8007a86 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b16:	2300      	movs	r3, #0
 8007b18:	613b      	str	r3, [r7, #16]
 8007b1a:	e043      	b.n	8007ba4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	015a      	lsls	r2, r3, #5
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	4413      	add	r3, r2
 8007b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b32:	d118      	bne.n	8007b66 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d10a      	bne.n	8007b50 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	015a      	lsls	r2, r3, #5
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	4413      	add	r3, r2
 8007b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b46:	461a      	mov	r2, r3
 8007b48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007b4c:	6013      	str	r3, [r2, #0]
 8007b4e:	e013      	b.n	8007b78 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	015a      	lsls	r2, r3, #5
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	4413      	add	r3, r2
 8007b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007b62:	6013      	str	r3, [r2, #0]
 8007b64:	e008      	b.n	8007b78 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	015a      	lsls	r2, r3, #5
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b72:	461a      	mov	r2, r3
 8007b74:	2300      	movs	r3, #0
 8007b76:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	015a      	lsls	r2, r3, #5
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	4413      	add	r3, r2
 8007b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b84:	461a      	mov	r2, r3
 8007b86:	2300      	movs	r3, #0
 8007b88:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	015a      	lsls	r2, r3, #5
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	4413      	add	r3, r2
 8007b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b96:	461a      	mov	r2, r3
 8007b98:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007b9c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	613b      	str	r3, [r7, #16]
 8007ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba6:	693a      	ldr	r2, [r7, #16]
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d3b7      	bcc.n	8007b1c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bb2:	691b      	ldr	r3, [r3, #16]
 8007bb4:	68fa      	ldr	r2, [r7, #12]
 8007bb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007bba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bbe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007bcc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d105      	bne.n	8007be0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	699b      	ldr	r3, [r3, #24]
 8007bd8:	f043 0210 	orr.w	r2, r3, #16
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	699a      	ldr	r2, [r3, #24]
 8007be4:	4b0e      	ldr	r3, [pc, #56]	; (8007c20 <USB_DevInit+0x2b4>)
 8007be6:	4313      	orrs	r3, r2
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d005      	beq.n	8007bfe <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	699b      	ldr	r3, [r3, #24]
 8007bf6:	f043 0208 	orr.w	r2, r3, #8
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007bfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d105      	bne.n	8007c10 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	699a      	ldr	r2, [r3, #24]
 8007c08:	4b06      	ldr	r3, [pc, #24]	; (8007c24 <USB_DevInit+0x2b8>)
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007c10:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3718      	adds	r7, #24
 8007c16:	46bd      	mov	sp, r7
 8007c18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c1c:	b004      	add	sp, #16
 8007c1e:	4770      	bx	lr
 8007c20:	803c3800 	.word	0x803c3800
 8007c24:	40000004 	.word	0x40000004

08007c28 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b085      	sub	sp, #20
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007c32:	2300      	movs	r3, #0
 8007c34:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	3301      	adds	r3, #1
 8007c3a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	4a13      	ldr	r2, [pc, #76]	; (8007c8c <USB_FlushTxFifo+0x64>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d901      	bls.n	8007c48 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007c44:	2303      	movs	r3, #3
 8007c46:	e01b      	b.n	8007c80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	691b      	ldr	r3, [r3, #16]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	daf2      	bge.n	8007c36 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007c50:	2300      	movs	r3, #0
 8007c52:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	019b      	lsls	r3, r3, #6
 8007c58:	f043 0220 	orr.w	r2, r3, #32
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	3301      	adds	r3, #1
 8007c64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	4a08      	ldr	r2, [pc, #32]	; (8007c8c <USB_FlushTxFifo+0x64>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d901      	bls.n	8007c72 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007c6e:	2303      	movs	r3, #3
 8007c70:	e006      	b.n	8007c80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	691b      	ldr	r3, [r3, #16]
 8007c76:	f003 0320 	and.w	r3, r3, #32
 8007c7a:	2b20      	cmp	r3, #32
 8007c7c:	d0f0      	beq.n	8007c60 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007c7e:	2300      	movs	r3, #0
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3714      	adds	r7, #20
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr
 8007c8c:	00030d40 	.word	0x00030d40

08007c90 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b085      	sub	sp, #20
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	4a11      	ldr	r2, [pc, #68]	; (8007cec <USB_FlushRxFifo+0x5c>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d901      	bls.n	8007cae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007caa:	2303      	movs	r3, #3
 8007cac:	e018      	b.n	8007ce0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	daf2      	bge.n	8007c9c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2210      	movs	r2, #16
 8007cbe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	4a08      	ldr	r2, [pc, #32]	; (8007cec <USB_FlushRxFifo+0x5c>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d901      	bls.n	8007cd2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007cce:	2303      	movs	r3, #3
 8007cd0:	e006      	b.n	8007ce0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	691b      	ldr	r3, [r3, #16]
 8007cd6:	f003 0310 	and.w	r3, r3, #16
 8007cda:	2b10      	cmp	r3, #16
 8007cdc:	d0f0      	beq.n	8007cc0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007cde:	2300      	movs	r3, #0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3714      	adds	r7, #20
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr
 8007cec:	00030d40 	.word	0x00030d40

08007cf0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b085      	sub	sp, #20
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	78fb      	ldrb	r3, [r7, #3]
 8007d0a:	68f9      	ldr	r1, [r7, #12]
 8007d0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d10:	4313      	orrs	r3, r2
 8007d12:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007d14:	2300      	movs	r3, #0
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3714      	adds	r7, #20
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d20:	4770      	bx	lr

08007d22 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007d22:	b480      	push	{r7}
 8007d24:	b085      	sub	sp, #20
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	68fa      	ldr	r2, [r7, #12]
 8007d38:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007d3c:	f023 0303 	bic.w	r3, r3, #3
 8007d40:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	68fa      	ldr	r2, [r7, #12]
 8007d4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d50:	f043 0302 	orr.w	r3, r3, #2
 8007d54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007d56:	2300      	movs	r3, #0
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3714      	adds	r7, #20
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr

08007d64 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	695b      	ldr	r3, [r3, #20]
 8007d70:	f003 0301 	and.w	r3, r3, #1
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	370c      	adds	r7, #12
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b085      	sub	sp, #20
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	3301      	adds	r3, #1
 8007d90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	4a13      	ldr	r2, [pc, #76]	; (8007de4 <USB_CoreReset+0x64>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d901      	bls.n	8007d9e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007d9a:	2303      	movs	r3, #3
 8007d9c:	e01b      	b.n	8007dd6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	691b      	ldr	r3, [r3, #16]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	daf2      	bge.n	8007d8c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007da6:	2300      	movs	r3, #0
 8007da8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	691b      	ldr	r3, [r3, #16]
 8007dae:	f043 0201 	orr.w	r2, r3, #1
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	3301      	adds	r3, #1
 8007dba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	4a09      	ldr	r2, [pc, #36]	; (8007de4 <USB_CoreReset+0x64>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d901      	bls.n	8007dc8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007dc4:	2303      	movs	r3, #3
 8007dc6:	e006      	b.n	8007dd6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	691b      	ldr	r3, [r3, #16]
 8007dcc:	f003 0301 	and.w	r3, r3, #1
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	d0f0      	beq.n	8007db6 <USB_CoreReset+0x36>

  return HAL_OK;
 8007dd4:	2300      	movs	r3, #0
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3714      	adds	r7, #20
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr
 8007de2:	bf00      	nop
 8007de4:	00030d40 	.word	0x00030d40

08007de8 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b082      	sub	sp, #8
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	ed87 0a01 	vstr	s0, [r7, #4]
 8007df2:	ed97 0a01 	vldr	s0, [r7, #4]
 8007df6:	f006 fa25 	bl	800e244 <sqrtf>
 8007dfa:	eef0 7a40 	vmov.f32	s15, s0
 8007dfe:	eeb0 0a67 	vmov.f32	s0, s15
 8007e02:	3708      	adds	r7, #8
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <MadgwickUpdate>:
{
	return 1;
}

uint8_t MadgwickUpdate(const AGMSensorData* sensorData)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	ed2d 8b0a 	vpush	{d8-d12}
 8007e0e:	b08e      	sub	sp, #56	; 0x38
 8007e10:	af0a      	add	r7, sp, #40	; 0x28
 8007e12:	6078      	str	r0, [r7, #4]
	static float prev_time = sensorData->SensorTime;
 8007e14:	4bd1      	ldr	r3, [pc, #836]	; (800815c <MadgwickUpdate+0x354>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f3bf 8f5b 	dmb	ish
 8007e1c:	f003 0301 	and.w	r3, r3, #1
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	bf0c      	ite	eq
 8007e24:	2301      	moveq	r3, #1
 8007e26:	2300      	movne	r3, #0
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d011      	beq.n	8007e52 <MadgwickUpdate+0x4a>
 8007e2e:	48cb      	ldr	r0, [pc, #812]	; (800815c <MadgwickUpdate+0x354>)
 8007e30:	f006 f992 	bl	800e158 <__cxa_guard_acquire>
 8007e34:	4603      	mov	r3, r0
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	bf14      	ite	ne
 8007e3a:	2301      	movne	r3, #1
 8007e3c:	2300      	moveq	r3, #0
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d006      	beq.n	8007e52 <MadgwickUpdate+0x4a>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e48:	4ac5      	ldr	r2, [pc, #788]	; (8008160 <MadgwickUpdate+0x358>)
 8007e4a:	6013      	str	r3, [r2, #0]
 8007e4c:	48c3      	ldr	r0, [pc, #780]	; (800815c <MadgwickUpdate+0x354>)
 8007e4e:	f006 f98f 	bl	800e170 <__cxa_guard_release>
	static float delta_t;
	float step = 0.0005;
 8007e52:	4bc4      	ldr	r3, [pc, #784]	; (8008164 <MadgwickUpdate+0x35c>)
 8007e54:	60fb      	str	r3, [r7, #12]
	if(sensorData != nullptr)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	f000 819c 	beq.w	8008196 <MadgwickUpdate+0x38e>
	{
		AccRaw(0,0) = sensorData->Acc.x;
 8007e5e:	2200      	movs	r2, #0
 8007e60:	2100      	movs	r1, #0
 8007e62:	48c1      	ldr	r0, [pc, #772]	; (8008168 <MadgwickUpdate+0x360>)
 8007e64:	f000 f9b1 	bl	80081ca <_ZN3Mat6MatrixILh3ELh1EEclEhh>
 8007e68:	4602      	mov	r2, r0
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	68db      	ldr	r3, [r3, #12]
 8007e6e:	6013      	str	r3, [r2, #0]
		AccRaw(1,0) = sensorData->Acc.y;
 8007e70:	2200      	movs	r2, #0
 8007e72:	2101      	movs	r1, #1
 8007e74:	48bc      	ldr	r0, [pc, #752]	; (8008168 <MadgwickUpdate+0x360>)
 8007e76:	f000 f9a8 	bl	80081ca <_ZN3Mat6MatrixILh3ELh1EEclEhh>
 8007e7a:	4602      	mov	r2, r0
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	691b      	ldr	r3, [r3, #16]
 8007e80:	6013      	str	r3, [r2, #0]
		AccRaw(2,0) = sensorData->Acc.z;
 8007e82:	2200      	movs	r2, #0
 8007e84:	2102      	movs	r1, #2
 8007e86:	48b8      	ldr	r0, [pc, #736]	; (8008168 <MadgwickUpdate+0x360>)
 8007e88:	f000 f99f 	bl	80081ca <_ZN3Mat6MatrixILh3ELh1EEclEhh>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	695b      	ldr	r3, [r3, #20]
 8007e92:	6013      	str	r3, [r2, #0]
		MagRaw(0,0) = sensorData->Mag.x;
 8007e94:	2200      	movs	r2, #0
 8007e96:	2100      	movs	r1, #0
 8007e98:	48b4      	ldr	r0, [pc, #720]	; (800816c <MadgwickUpdate+0x364>)
 8007e9a:	f000 f996 	bl	80081ca <_ZN3Mat6MatrixILh3ELh1EEclEhh>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	6013      	str	r3, [r2, #0]
		MagRaw(1,0) = sensorData->Mag.y;
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	2101      	movs	r1, #1
 8007eaa:	48b0      	ldr	r0, [pc, #704]	; (800816c <MadgwickUpdate+0x364>)
 8007eac:	f000 f98d 	bl	80081ca <_ZN3Mat6MatrixILh3ELh1EEclEhh>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	6013      	str	r3, [r2, #0]
		MagRaw(2,0) = sensorData->Mag.z;
 8007eb8:	2200      	movs	r2, #0
 8007eba:	2102      	movs	r1, #2
 8007ebc:	48ab      	ldr	r0, [pc, #684]	; (800816c <MadgwickUpdate+0x364>)
 8007ebe:	f000 f984 	bl	80081ca <_ZN3Mat6MatrixILh3ELh1EEclEhh>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	6013      	str	r3, [r2, #0]
		GyroRaw(0,0) = sensorData->Gyro.x;
 8007eca:	2200      	movs	r2, #0
 8007ecc:	2100      	movs	r1, #0
 8007ece:	48a8      	ldr	r0, [pc, #672]	; (8008170 <MadgwickUpdate+0x368>)
 8007ed0:	f000 f97b 	bl	80081ca <_ZN3Mat6MatrixILh3ELh1EEclEhh>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	699b      	ldr	r3, [r3, #24]
 8007eda:	6013      	str	r3, [r2, #0]
		GyroRaw(1,0) = sensorData->Gyro.y;
 8007edc:	2200      	movs	r2, #0
 8007ede:	2101      	movs	r1, #1
 8007ee0:	48a3      	ldr	r0, [pc, #652]	; (8008170 <MadgwickUpdate+0x368>)
 8007ee2:	f000 f972 	bl	80081ca <_ZN3Mat6MatrixILh3ELh1EEclEhh>
 8007ee6:	4602      	mov	r2, r0
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	69db      	ldr	r3, [r3, #28]
 8007eec:	6013      	str	r3, [r2, #0]
		GyroRaw(2,0) = sensorData->Gyro.z;
 8007eee:	2200      	movs	r2, #0
 8007ef0:	2102      	movs	r1, #2
 8007ef2:	489f      	ldr	r0, [pc, #636]	; (8008170 <MadgwickUpdate+0x368>)
 8007ef4:	f000 f969 	bl	80081ca <_ZN3Mat6MatrixILh3ELh1EEclEhh>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6a1b      	ldr	r3, [r3, #32]
 8007efe:	6013      	str	r3, [r2, #0]
		AccCal = CalibrateAcc(AccRaw);
 8007f00:	4899      	ldr	r0, [pc, #612]	; (8008168 <MadgwickUpdate+0x360>)
 8007f02:	f000 fa9b 	bl	800843c <_Z12CalibrateAccRKN3Mat6MatrixILh3ELh1EEE>
 8007f06:	eef0 6a40 	vmov.f32	s13, s0
 8007f0a:	eeb0 7a60 	vmov.f32	s14, s1
 8007f0e:	eef0 7a41 	vmov.f32	s15, s2
 8007f12:	4b98      	ldr	r3, [pc, #608]	; (8008174 <MadgwickUpdate+0x36c>)
 8007f14:	edc3 6a00 	vstr	s13, [r3]
 8007f18:	ed83 7a01 	vstr	s14, [r3, #4]
 8007f1c:	edc3 7a02 	vstr	s15, [r3, #8]
		MagCal = CalibrateMag(MagRaw);
 8007f20:	4892      	ldr	r0, [pc, #584]	; (800816c <MadgwickUpdate+0x364>)
 8007f22:	f000 fa4f 	bl	80083c4 <_Z12CalibrateMagRKN3Mat6MatrixILh3ELh1EEE>
 8007f26:	eef0 6a40 	vmov.f32	s13, s0
 8007f2a:	eeb0 7a60 	vmov.f32	s14, s1
 8007f2e:	eef0 7a41 	vmov.f32	s15, s2
 8007f32:	4b91      	ldr	r3, [pc, #580]	; (8008178 <MadgwickUpdate+0x370>)
 8007f34:	edc3 6a00 	vstr	s13, [r3]
 8007f38:	ed83 7a01 	vstr	s14, [r3, #4]
 8007f3c:	edc3 7a02 	vstr	s15, [r3, #8]
		GyroCal = CalibrateGyro(GyroRaw);
 8007f40:	488b      	ldr	r0, [pc, #556]	; (8008170 <MadgwickUpdate+0x368>)
 8007f42:	f000 fab7 	bl	80084b4 <_Z13CalibrateGyroRKN3Mat6MatrixILh3ELh1EEE>
 8007f46:	eef0 6a40 	vmov.f32	s13, s0
 8007f4a:	eeb0 7a60 	vmov.f32	s14, s1
 8007f4e:	eef0 7a41 	vmov.f32	s15, s2
 8007f52:	4b8a      	ldr	r3, [pc, #552]	; (800817c <MadgwickUpdate+0x374>)
 8007f54:	edc3 6a00 	vstr	s13, [r3]
 8007f58:	ed83 7a01 	vstr	s14, [r3, #4]
 8007f5c:	edc3 7a02 	vstr	s15, [r3, #8]
//		Q.y = GetY();
//		Q.z = GetZ();
//		Acc = (Q * Acc * Q.Conjugate()) - G;
//		printf("%f	%f	%f	%f\n\r", Acc.x, Acc.y, Acc.z, Acc.Norm());

		filterUpdate(GyroCal(0,0), GyroCal(1,0), GyroCal(2,0),
 8007f60:	2200      	movs	r2, #0
 8007f62:	2100      	movs	r1, #0
 8007f64:	4885      	ldr	r0, [pc, #532]	; (800817c <MadgwickUpdate+0x374>)
 8007f66:	f000 f930 	bl	80081ca <_ZN3Mat6MatrixILh3ELh1EEclEhh>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	ed93 8a00 	vldr	s16, [r3]
 8007f70:	2200      	movs	r2, #0
 8007f72:	2101      	movs	r1, #1
 8007f74:	4881      	ldr	r0, [pc, #516]	; (800817c <MadgwickUpdate+0x374>)
 8007f76:	f000 f928 	bl	80081ca <_ZN3Mat6MatrixILh3ELh1EEclEhh>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	edd3 8a00 	vldr	s17, [r3]
 8007f80:	2200      	movs	r2, #0
 8007f82:	2102      	movs	r1, #2
 8007f84:	487d      	ldr	r0, [pc, #500]	; (800817c <MadgwickUpdate+0x374>)
 8007f86:	f000 f920 	bl	80081ca <_ZN3Mat6MatrixILh3ELh1EEclEhh>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	ed93 9a00 	vldr	s18, [r3]
						AccCal(0,0), AccCal(1,0), AccCal(2,0),
 8007f90:	2200      	movs	r2, #0
 8007f92:	2100      	movs	r1, #0
 8007f94:	4877      	ldr	r0, [pc, #476]	; (8008174 <MadgwickUpdate+0x36c>)
 8007f96:	f000 f918 	bl	80081ca <_ZN3Mat6MatrixILh3ELh1EEclEhh>
 8007f9a:	4603      	mov	r3, r0
		filterUpdate(GyroCal(0,0), GyroCal(1,0), GyroCal(2,0),
 8007f9c:	edd3 9a00 	vldr	s19, [r3]
						AccCal(0,0), AccCal(1,0), AccCal(2,0),
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	2101      	movs	r1, #1
 8007fa4:	4873      	ldr	r0, [pc, #460]	; (8008174 <MadgwickUpdate+0x36c>)
 8007fa6:	f000 f910 	bl	80081ca <_ZN3Mat6MatrixILh3ELh1EEclEhh>
 8007faa:	4603      	mov	r3, r0
		filterUpdate(GyroCal(0,0), GyroCal(1,0), GyroCal(2,0),
 8007fac:	ed93 aa00 	vldr	s20, [r3]
						AccCal(0,0), AccCal(1,0), AccCal(2,0),
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	2102      	movs	r1, #2
 8007fb4:	486f      	ldr	r0, [pc, #444]	; (8008174 <MadgwickUpdate+0x36c>)
 8007fb6:	f000 f908 	bl	80081ca <_ZN3Mat6MatrixILh3ELh1EEclEhh>
 8007fba:	4603      	mov	r3, r0
		filterUpdate(GyroCal(0,0), GyroCal(1,0), GyroCal(2,0),
 8007fbc:	edd3 aa00 	vldr	s21, [r3]
						MagCal(0,0), MagCal(1,0), MagCal(2,0),
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	2100      	movs	r1, #0
 8007fc4:	486c      	ldr	r0, [pc, #432]	; (8008178 <MadgwickUpdate+0x370>)
 8007fc6:	f000 f900 	bl	80081ca <_ZN3Mat6MatrixILh3ELh1EEclEhh>
 8007fca:	4603      	mov	r3, r0
		filterUpdate(GyroCal(0,0), GyroCal(1,0), GyroCal(2,0),
 8007fcc:	ed93 ba00 	vldr	s22, [r3]
						MagCal(0,0), MagCal(1,0), MagCal(2,0),
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	2101      	movs	r1, #1
 8007fd4:	4868      	ldr	r0, [pc, #416]	; (8008178 <MadgwickUpdate+0x370>)
 8007fd6:	f000 f8f8 	bl	80081ca <_ZN3Mat6MatrixILh3ELh1EEclEhh>
 8007fda:	4603      	mov	r3, r0
		filterUpdate(GyroCal(0,0), GyroCal(1,0), GyroCal(2,0),
 8007fdc:	edd3 ba00 	vldr	s23, [r3]
						MagCal(0,0), MagCal(1,0), MagCal(2,0),
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	2102      	movs	r1, #2
 8007fe4:	4864      	ldr	r0, [pc, #400]	; (8008178 <MadgwickUpdate+0x370>)
 8007fe6:	f000 f8f0 	bl	80081ca <_ZN3Mat6MatrixILh3ELh1EEclEhh>
 8007fea:	4603      	mov	r3, r0
		filterUpdate(GyroCal(0,0), GyroCal(1,0), GyroCal(2,0),
 8007fec:	ed93 7a00 	vldr	s14, [r3]
						sensorData->SensorTime / 1000.0f);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
		filterUpdate(GyroCal(0,0), GyroCal(1,0), GyroCal(2,0),
 8007ff6:	ed9f 6a62 	vldr	s12, [pc, #392]	; 8008180 <MadgwickUpdate+0x378>
 8007ffa:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8007ffe:	eef0 4a66 	vmov.f32	s9, s13
 8008002:	eeb0 4a47 	vmov.f32	s8, s14
 8008006:	eef0 3a6b 	vmov.f32	s7, s23
 800800a:	eeb0 3a4b 	vmov.f32	s6, s22
 800800e:	eef0 2a6a 	vmov.f32	s5, s21
 8008012:	eeb0 2a4a 	vmov.f32	s4, s20
 8008016:	eef0 1a69 	vmov.f32	s3, s19
 800801a:	eeb0 1a49 	vmov.f32	s2, s18
 800801e:	eef0 0a68 	vmov.f32	s1, s17
 8008022:	eeb0 0a48 	vmov.f32	s0, s16
 8008026:	f000 fd3f 	bl	8008aa8 <filterUpdate>
		madgwickFilter.Update(GyroCal(0,0), GyroCal(1,0), GyroCal(2,0),
 800802a:	2200      	movs	r2, #0
 800802c:	2100      	movs	r1, #0
 800802e:	4853      	ldr	r0, [pc, #332]	; (800817c <MadgwickUpdate+0x374>)
 8008030:	f000 f8cb 	bl	80081ca <_ZN3Mat6MatrixILh3ELh1EEclEhh>
 8008034:	4603      	mov	r3, r0
 8008036:	ed93 8a00 	vldr	s16, [r3]
 800803a:	2200      	movs	r2, #0
 800803c:	2101      	movs	r1, #1
 800803e:	484f      	ldr	r0, [pc, #316]	; (800817c <MadgwickUpdate+0x374>)
 8008040:	f000 f8c3 	bl	80081ca <_ZN3Mat6MatrixILh3ELh1EEclEhh>
 8008044:	4603      	mov	r3, r0
 8008046:	edd3 8a00 	vldr	s17, [r3]
 800804a:	2200      	movs	r2, #0
 800804c:	2102      	movs	r1, #2
 800804e:	484b      	ldr	r0, [pc, #300]	; (800817c <MadgwickUpdate+0x374>)
 8008050:	f000 f8bb 	bl	80081ca <_ZN3Mat6MatrixILh3ELh1EEclEhh>
 8008054:	4603      	mov	r3, r0
 8008056:	ed93 9a00 	vldr	s18, [r3]
								AccCal(0,0), AccCal(1,0), AccCal(2,0),
 800805a:	2200      	movs	r2, #0
 800805c:	2100      	movs	r1, #0
 800805e:	4845      	ldr	r0, [pc, #276]	; (8008174 <MadgwickUpdate+0x36c>)
 8008060:	f000 f8b3 	bl	80081ca <_ZN3Mat6MatrixILh3ELh1EEclEhh>
 8008064:	4603      	mov	r3, r0
		madgwickFilter.Update(GyroCal(0,0), GyroCal(1,0), GyroCal(2,0),
 8008066:	edd3 9a00 	vldr	s19, [r3]
								AccCal(0,0), AccCal(1,0), AccCal(2,0),
 800806a:	2200      	movs	r2, #0
 800806c:	2101      	movs	r1, #1
 800806e:	4841      	ldr	r0, [pc, #260]	; (8008174 <MadgwickUpdate+0x36c>)
 8008070:	f000 f8ab 	bl	80081ca <_ZN3Mat6MatrixILh3ELh1EEclEhh>
 8008074:	4603      	mov	r3, r0
		madgwickFilter.Update(GyroCal(0,0), GyroCal(1,0), GyroCal(2,0),
 8008076:	ed93 aa00 	vldr	s20, [r3]
								AccCal(0,0), AccCal(1,0), AccCal(2,0),
 800807a:	2200      	movs	r2, #0
 800807c:	2102      	movs	r1, #2
 800807e:	483d      	ldr	r0, [pc, #244]	; (8008174 <MadgwickUpdate+0x36c>)
 8008080:	f000 f8a3 	bl	80081ca <_ZN3Mat6MatrixILh3ELh1EEclEhh>
 8008084:	4603      	mov	r3, r0
		madgwickFilter.Update(GyroCal(0,0), GyroCal(1,0), GyroCal(2,0),
 8008086:	edd3 aa00 	vldr	s21, [r3]
								MagCal(0,0), MagCal(1,0), MagCal(2,0),
 800808a:	2200      	movs	r2, #0
 800808c:	2100      	movs	r1, #0
 800808e:	483a      	ldr	r0, [pc, #232]	; (8008178 <MadgwickUpdate+0x370>)
 8008090:	f000 f89b 	bl	80081ca <_ZN3Mat6MatrixILh3ELh1EEclEhh>
 8008094:	4603      	mov	r3, r0
		madgwickFilter.Update(GyroCal(0,0), GyroCal(1,0), GyroCal(2,0),
 8008096:	ed93 ba00 	vldr	s22, [r3]
								MagCal(0,0), MagCal(1,0), MagCal(2,0),
 800809a:	2200      	movs	r2, #0
 800809c:	2101      	movs	r1, #1
 800809e:	4836      	ldr	r0, [pc, #216]	; (8008178 <MadgwickUpdate+0x370>)
 80080a0:	f000 f893 	bl	80081ca <_ZN3Mat6MatrixILh3ELh1EEclEhh>
 80080a4:	4603      	mov	r3, r0
		madgwickFilter.Update(GyroCal(0,0), GyroCal(1,0), GyroCal(2,0),
 80080a6:	edd3 ba00 	vldr	s23, [r3]
								MagCal(0,0), MagCal(1,0), MagCal(2,0),
 80080aa:	2200      	movs	r2, #0
 80080ac:	2102      	movs	r1, #2
 80080ae:	4832      	ldr	r0, [pc, #200]	; (8008178 <MadgwickUpdate+0x370>)
 80080b0:	f000 f88b 	bl	80081ca <_ZN3Mat6MatrixILh3ELh1EEclEhh>
 80080b4:	4603      	mov	r3, r0
		madgwickFilter.Update(GyroCal(0,0), GyroCal(1,0), GyroCal(2,0),
 80080b6:	ed93 7a00 	vldr	s14, [r3]
								sensorData->SensorTime / 1000.0f);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
		madgwickFilter.Update(GyroCal(0,0), GyroCal(1,0), GyroCal(2,0),
 80080c0:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8008180 <MadgwickUpdate+0x378>
 80080c4:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80080c8:	eef0 4a66 	vmov.f32	s9, s13
 80080cc:	eeb0 4a47 	vmov.f32	s8, s14
 80080d0:	eef0 3a6b 	vmov.f32	s7, s23
 80080d4:	eeb0 3a4b 	vmov.f32	s6, s22
 80080d8:	eef0 2a6a 	vmov.f32	s5, s21
 80080dc:	eeb0 2a4a 	vmov.f32	s4, s20
 80080e0:	eef0 1a69 	vmov.f32	s3, s19
 80080e4:	eeb0 1a49 	vmov.f32	s2, s18
 80080e8:	eef0 0a68 	vmov.f32	s1, s17
 80080ec:	eeb0 0a48 	vmov.f32	s0, s16
 80080f0:	4824      	ldr	r0, [pc, #144]	; (8008184 <MadgwickUpdate+0x37c>)
 80080f2:	f001 fcd7 	bl	8009aa4 <_ZN10Algorithms14MadgwickFilter6UpdateEffffffffff>
		printf("Orig: %f,\t%f,\t%f\t\tMy: %f,\t%f,\t%f\n\r", getRoll(), getPitch(), getYaw(),
 80080f6:	f001 fb6d 	bl	80097d4 <getRoll>
 80080fa:	eef0 7a40 	vmov.f32	s15, s0
 80080fe:	eeb7 cae7 	vcvt.f64.f32	d12, s15
 8008102:	f001 fbc3 	bl	800988c <getPitch>
 8008106:	eef0 7a40 	vmov.f32	s15, s0
 800810a:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800810e:	f001 fbf1 	bl	80098f4 <getYaw>
 8008112:	eef0 7a40 	vmov.f32	s15, s0
 8008116:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
				madgwickFilter.GetRoll(), madgwickFilter.GetPitch(), madgwickFilter.GetYaw());
 800811a:	481a      	ldr	r0, [pc, #104]	; (8008184 <MadgwickUpdate+0x37c>)
 800811c:	f001 ff84 	bl	800a028 <_ZNK10Algorithms14MadgwickFilter7GetRollEv>
 8008120:	eef0 7a40 	vmov.f32	s15, s0
		printf("Orig: %f,\t%f,\t%f\t\tMy: %f,\t%f,\t%f\n\r", getRoll(), getPitch(), getYaw(),
 8008124:	eeb7 aae7 	vcvt.f64.f32	d10, s15
				madgwickFilter.GetRoll(), madgwickFilter.GetPitch(), madgwickFilter.GetYaw());
 8008128:	4816      	ldr	r0, [pc, #88]	; (8008184 <MadgwickUpdate+0x37c>)
 800812a:	f001 ffd1 	bl	800a0d0 <_ZNK10Algorithms14MadgwickFilter8GetPitchEv>
 800812e:	eef0 7a40 	vmov.f32	s15, s0
		printf("Orig: %f,\t%f,\t%f\t\tMy: %f,\t%f,\t%f\n\r", getRoll(), getPitch(), getYaw(),
 8008132:	eeb7 bae7 	vcvt.f64.f32	d11, s15
				madgwickFilter.GetRoll(), madgwickFilter.GetPitch(), madgwickFilter.GetYaw());
 8008136:	4813      	ldr	r0, [pc, #76]	; (8008184 <MadgwickUpdate+0x37c>)
 8008138:	f001 fffa 	bl	800a130 <_ZNK10Algorithms14MadgwickFilter6GetYawEv>
 800813c:	eef0 7a40 	vmov.f32	s15, s0
		printf("Orig: %f,\t%f,\t%f\t\tMy: %f,\t%f,\t%f\n\r", getRoll(), getPitch(), getYaw(),
 8008140:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008144:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008148:	ed8d bb06 	vstr	d11, [sp, #24]
 800814c:	ed8d ab04 	vstr	d10, [sp, #16]
 8008150:	ed8d 9b02 	vstr	d9, [sp, #8]
 8008154:	ed8d 8b00 	vstr	d8, [sp]
 8008158:	e016      	b.n	8008188 <MadgwickUpdate+0x380>
 800815a:	bf00      	nop
 800815c:	24000adc 	.word	0x24000adc
 8008160:	24000ad8 	.word	0x24000ad8
 8008164:	3a03126f 	.word	0x3a03126f
 8008168:	24000ab4 	.word	0x24000ab4
 800816c:	24000a84 	.word	0x24000a84
 8008170:	24000a9c 	.word	0x24000a9c
 8008174:	24000aa8 	.word	0x24000aa8
 8008178:	24000a78 	.word	0x24000a78
 800817c:	24000a90 	.word	0x24000a90
 8008180:	447a0000 	.word	0x447a0000
 8008184:	24000a64 	.word	0x24000a64
 8008188:	ec53 2b1c 	vmov	r2, r3, d12
 800818c:	4805      	ldr	r0, [pc, #20]	; (80081a4 <MadgwickUpdate+0x39c>)
 800818e:	f007 fabb 	bl	800f708 <iprintf>
//		Quaternion MyQ = madgwickFilter.GetOrientation();
//		printf("Orig: %f,\t%f,\t%f,\t%f\tMy: %f,\t%f,\t%f,\t%f\n\r", GetW(), GetX(), GetY(), GetZ(),
//																	MyQ.w, MyQ.x, MyQ.y, MyQ.z);
		return 1;
 8008192:	2301      	movs	r3, #1
 8008194:	e000      	b.n	8008198 <MadgwickUpdate+0x390>
	}
	return 0;
 8008196:	2300      	movs	r3, #0
}
 8008198:	4618      	mov	r0, r3
 800819a:	3710      	adds	r7, #16
 800819c:	46bd      	mov	sp, r7
 800819e:	ecbd 8b0a 	vpop	{d8-d12}
 80081a2:	bd80      	pop	{r7, pc}
 80081a4:	080115a0 	.word	0x080115a0

080081a8 <_ZN3Mat6MatrixILh3ELh1EEC1ERKSt5arrayIfLj3EE>:
	static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
}

template <u_short heigth, u_short width>
Matrix<heigth, width>::Matrix(const std::array<float, heigth*width>& values): _values(values) {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 80081a8:	b480      	push	{r7}
 80081aa:	b083      	sub	sp, #12
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	6039      	str	r1, [r7, #0]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	683a      	ldr	r2, [r7, #0]
 80081b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80081b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	4618      	mov	r0, r3
 80081c0:	370c      	adds	r7, #12
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr

080081ca <_ZN3Mat6MatrixILh3ELh1EEclEhh>:

template <u_short heigth, u_short width>
float& Matrix<heigth, width>::operator()(u_short row, u_short col)
 80081ca:	b580      	push	{r7, lr}
 80081cc:	b084      	sub	sp, #16
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	6078      	str	r0, [r7, #4]
 80081d2:	460b      	mov	r3, r1
 80081d4:	70fb      	strb	r3, [r7, #3]
 80081d6:	4613      	mov	r3, r2
 80081d8:	70bb      	strb	r3, [r7, #2]
{
	u_int index = width * row + col;
 80081da:	78fa      	ldrb	r2, [r7, #3]
 80081dc:	78bb      	ldrb	r3, [r7, #2]
 80081de:	4413      	add	r3, r2
 80081e0:	60fb      	str	r3, [r7, #12]
	return _values[index];
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	68f9      	ldr	r1, [r7, #12]
 80081e6:	4618      	mov	r0, r3
 80081e8:	f000 f805 	bl	80081f6 <_ZNSt5arrayIfLj3EEixEj>
 80081ec:	4603      	mov	r3, r0
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3710      	adds	r7, #16
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}

080081f6 <_ZNSt5arrayIfLj3EEixEj>:
      _GLIBCXX_NODISCARD constexpr bool
      empty() const noexcept { return size() == 0; }

      // Element access.
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
 80081f6:	b580      	push	{r7, lr}
 80081f8:	b082      	sub	sp, #8
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6078      	str	r0, [r7, #4]
 80081fe:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return _AT_Type::_S_ref(_M_elems, __n);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6839      	ldr	r1, [r7, #0]
 8008204:	4618      	mov	r0, r3
 8008206:	f000 f805 	bl	8008214 <_ZNSt14__array_traitsIfLj3EE6_S_refERA3_Kfj>
 800820a:	4603      	mov	r3, r0
      }
 800820c:	4618      	mov	r0, r3
 800820e:	3708      	adds	r7, #8
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}

08008214 <_ZNSt14__array_traitsIfLj3EE6_S_refERA3_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8008214:	b480      	push	{r7}
 8008216:	b083      	sub	sp, #12
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	009b      	lsls	r3, r3, #2
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	4413      	add	r3, r2
 8008226:	4618      	mov	r0, r3
 8008228:	370c      	adds	r7, #12
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr
 8008232:	0000      	movs	r0, r0
 8008234:	0000      	movs	r0, r0
	...

08008238 <_Z41__static_initialization_and_destruction_0ii>:
 8008238:	b580      	push	{r7, lr}
 800823a:	b09a      	sub	sp, #104	; 0x68
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6039      	str	r1, [r7, #0]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2b01      	cmp	r3, #1
 8008246:	f040 8095 	bne.w	8008374 <_Z41__static_initialization_and_destruction_0ii+0x13c>
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008250:	4293      	cmp	r3, r2
 8008252:	f040 808f 	bne.w	8008374 <_Z41__static_initialization_and_destruction_0ii+0x13c>
Algorithms::MadgwickFilter madgwickFilter{beta};
 8008256:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 800825a:	f7ff fdc5 	bl	8007de8 <_ZSt4sqrtf>
 800825e:	eef0 7a40 	vmov.f32	s15, s0
 8008262:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008266:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8008380 <_Z41__static_initialization_and_destruction_0ii+0x148>
 800826a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800826e:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8008388 <_Z41__static_initialization_and_destruction_0ii+0x150>
 8008272:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008276:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800827a:	eeb0 0a67 	vmov.f32	s0, s15
 800827e:	4844      	ldr	r0, [pc, #272]	; (8008390 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8008280:	f001 fbf0 	bl	8009a64 <_ZN10Algorithms14MadgwickFilterC1Ef>
Mat::Matrix<3, 1> MagCal({0, 0, 0});
 8008284:	f04f 0300 	mov.w	r3, #0
 8008288:	60bb      	str	r3, [r7, #8]
 800828a:	f04f 0300 	mov.w	r3, #0
 800828e:	60fb      	str	r3, [r7, #12]
 8008290:	f04f 0300 	mov.w	r3, #0
 8008294:	613b      	str	r3, [r7, #16]
 8008296:	f107 0308 	add.w	r3, r7, #8
 800829a:	4619      	mov	r1, r3
 800829c:	483d      	ldr	r0, [pc, #244]	; (8008394 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 800829e:	f7ff ff83 	bl	80081a8 <_ZN3Mat6MatrixILh3ELh1EEC1ERKSt5arrayIfLj3EE>
Mat::Matrix<3, 1> MagRaw({0, 0, 0});
 80082a2:	f04f 0300 	mov.w	r3, #0
 80082a6:	617b      	str	r3, [r7, #20]
 80082a8:	f04f 0300 	mov.w	r3, #0
 80082ac:	61bb      	str	r3, [r7, #24]
 80082ae:	f04f 0300 	mov.w	r3, #0
 80082b2:	61fb      	str	r3, [r7, #28]
 80082b4:	f107 0314 	add.w	r3, r7, #20
 80082b8:	4619      	mov	r1, r3
 80082ba:	4837      	ldr	r0, [pc, #220]	; (8008398 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 80082bc:	f7ff ff74 	bl	80081a8 <_ZN3Mat6MatrixILh3ELh1EEC1ERKSt5arrayIfLj3EE>
Mat::Matrix<3, 1> GyroCal({0, 0, 0});
 80082c0:	f04f 0300 	mov.w	r3, #0
 80082c4:	623b      	str	r3, [r7, #32]
 80082c6:	f04f 0300 	mov.w	r3, #0
 80082ca:	627b      	str	r3, [r7, #36]	; 0x24
 80082cc:	f04f 0300 	mov.w	r3, #0
 80082d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80082d2:	f107 0320 	add.w	r3, r7, #32
 80082d6:	4619      	mov	r1, r3
 80082d8:	4830      	ldr	r0, [pc, #192]	; (800839c <_Z41__static_initialization_and_destruction_0ii+0x164>)
 80082da:	f7ff ff65 	bl	80081a8 <_ZN3Mat6MatrixILh3ELh1EEC1ERKSt5arrayIfLj3EE>
Mat::Matrix<3, 1> GyroRaw({0, 0, 0});
 80082de:	f04f 0300 	mov.w	r3, #0
 80082e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082e4:	f04f 0300 	mov.w	r3, #0
 80082e8:	633b      	str	r3, [r7, #48]	; 0x30
 80082ea:	f04f 0300 	mov.w	r3, #0
 80082ee:	637b      	str	r3, [r7, #52]	; 0x34
 80082f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80082f4:	4619      	mov	r1, r3
 80082f6:	482a      	ldr	r0, [pc, #168]	; (80083a0 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 80082f8:	f7ff ff56 	bl	80081a8 <_ZN3Mat6MatrixILh3ELh1EEC1ERKSt5arrayIfLj3EE>
Mat::Matrix<3, 1> AccCal({0, 0, 0});
 80082fc:	f04f 0300 	mov.w	r3, #0
 8008300:	63bb      	str	r3, [r7, #56]	; 0x38
 8008302:	f04f 0300 	mov.w	r3, #0
 8008306:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008308:	f04f 0300 	mov.w	r3, #0
 800830c:	643b      	str	r3, [r7, #64]	; 0x40
 800830e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008312:	4619      	mov	r1, r3
 8008314:	4823      	ldr	r0, [pc, #140]	; (80083a4 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 8008316:	f7ff ff47 	bl	80081a8 <_ZN3Mat6MatrixILh3ELh1EEC1ERKSt5arrayIfLj3EE>
Mat::Matrix<3, 1> AccRaw({0, 0, 0});
 800831a:	f04f 0300 	mov.w	r3, #0
 800831e:	647b      	str	r3, [r7, #68]	; 0x44
 8008320:	f04f 0300 	mov.w	r3, #0
 8008324:	64bb      	str	r3, [r7, #72]	; 0x48
 8008326:	f04f 0300 	mov.w	r3, #0
 800832a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800832c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008330:	4619      	mov	r1, r3
 8008332:	481d      	ldr	r0, [pc, #116]	; (80083a8 <_Z41__static_initialization_and_destruction_0ii+0x170>)
 8008334:	f7ff ff38 	bl	80081a8 <_ZN3Mat6MatrixILh3ELh1EEC1ERKSt5arrayIfLj3EE>
Mat::Matrix<3, 1> GyroRawMean({0, 0, 0});
 8008338:	f04f 0300 	mov.w	r3, #0
 800833c:	653b      	str	r3, [r7, #80]	; 0x50
 800833e:	f04f 0300 	mov.w	r3, #0
 8008342:	657b      	str	r3, [r7, #84]	; 0x54
 8008344:	f04f 0300 	mov.w	r3, #0
 8008348:	65bb      	str	r3, [r7, #88]	; 0x58
 800834a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800834e:	4619      	mov	r1, r3
 8008350:	4816      	ldr	r0, [pc, #88]	; (80083ac <_Z41__static_initialization_and_destruction_0ii+0x174>)
 8008352:	f7ff ff29 	bl	80081a8 <_ZN3Mat6MatrixILh3ELh1EEC1ERKSt5arrayIfLj3EE>
Mat::Matrix<3, 1> GyroCalMean({0, 0, 0});
 8008356:	f04f 0300 	mov.w	r3, #0
 800835a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800835c:	f04f 0300 	mov.w	r3, #0
 8008360:	663b      	str	r3, [r7, #96]	; 0x60
 8008362:	f04f 0300 	mov.w	r3, #0
 8008366:	667b      	str	r3, [r7, #100]	; 0x64
 8008368:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800836c:	4619      	mov	r1, r3
 800836e:	4810      	ldr	r0, [pc, #64]	; (80083b0 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 8008370:	f7ff ff1a 	bl	80081a8 <_ZN3Mat6MatrixILh3ELh1EEC1ERKSt5arrayIfLj3EE>
}
 8008374:	bf00      	nop
 8008376:	3768      	adds	r7, #104	; 0x68
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}
 800837c:	f3af 8000 	nop.w
 8008380:	54442d11 	.word	0x54442d11
 8008384:	400921fb 	.word	0x400921fb
 8008388:	20000000 	.word	0x20000000
 800838c:	3fac71c7 	.word	0x3fac71c7
 8008390:	24000a64 	.word	0x24000a64
 8008394:	24000a78 	.word	0x24000a78
 8008398:	24000a84 	.word	0x24000a84
 800839c:	24000a90 	.word	0x24000a90
 80083a0:	24000a9c 	.word	0x24000a9c
 80083a4:	24000aa8 	.word	0x24000aa8
 80083a8:	24000ab4 	.word	0x24000ab4
 80083ac:	24000ac0 	.word	0x24000ac0
 80083b0:	24000acc 	.word	0x24000acc

080083b4 <_GLOBAL__sub_I_madgwickFilter>:
 80083b4:	b580      	push	{r7, lr}
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80083bc:	2001      	movs	r0, #1
 80083be:	f7ff ff3b 	bl	8008238 <_Z41__static_initialization_and_destruction_0ii>
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <_Z12CalibrateMagRKN3Mat6MatrixILh3ELh1EEE>:
						0.0, 8.78 * DEG_2_RAD, 0.0,
						0.0, 0.0, 8.16 * DEG_2_RAD});
const Matrix<3, 1> GyroB({-0.0533, 0.0459, -0.0038});

Matrix<3, 1> CalibrateMag(const Matrix<3, 1>& MagVec)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b08c      	sub	sp, #48	; 0x30
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6178      	str	r0, [r7, #20]
	return (MagA * (MagVec - MagB));
 80083cc:	4919      	ldr	r1, [pc, #100]	; (8008434 <_Z12CalibrateMagRKN3Mat6MatrixILh3ELh1EEE+0x70>)
 80083ce:	6978      	ldr	r0, [r7, #20]
 80083d0:	f000 f8c1 	bl	8008556 <_ZNK3Mat6MatrixILh3ELh1EEmiERKS1_>
 80083d4:	eef0 6a40 	vmov.f32	s13, s0
 80083d8:	eeb0 7a60 	vmov.f32	s14, s1
 80083dc:	eef0 7a41 	vmov.f32	s15, s2
 80083e0:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 80083e4:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 80083e8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 80083ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083f0:	4619      	mov	r1, r3
 80083f2:	4811      	ldr	r0, [pc, #68]	; (8008438 <_Z12CalibrateMagRKN3Mat6MatrixILh3ELh1EEE+0x74>)
 80083f4:	f000 f8d9 	bl	80085aa <_ZNK3Mat6MatrixILh3ELh3EEmlILh1EEENS0_ILh3EXT_EEERKS3_>
 80083f8:	eef0 6a40 	vmov.f32	s13, s0
 80083fc:	eeb0 7a60 	vmov.f32	s14, s1
 8008400:	eef0 7a41 	vmov.f32	s15, s2
 8008404:	edc7 6a06 	vstr	s13, [r7, #24]
 8008408:	ed87 7a07 	vstr	s14, [r7, #28]
 800840c:	edc7 7a08 	vstr	s15, [r7, #32]
 8008410:	69b9      	ldr	r1, [r7, #24]
 8008412:	69fa      	ldr	r2, [r7, #28]
 8008414:	6a3b      	ldr	r3, [r7, #32]
 8008416:	ee06 1a90 	vmov	s13, r1
 800841a:	ee07 2a10 	vmov	s14, r2
 800841e:	ee07 3a90 	vmov	s15, r3
}
 8008422:	eeb0 0a66 	vmov.f32	s0, s13
 8008426:	eef0 0a47 	vmov.f32	s1, s14
 800842a:	eeb0 1a67 	vmov.f32	s2, s15
 800842e:	3730      	adds	r7, #48	; 0x30
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}
 8008434:	24000b04 	.word	0x24000b04
 8008438:	24000ae0 	.word	0x24000ae0

0800843c <_Z12CalibrateAccRKN3Mat6MatrixILh3ELh1EEE>:
Matrix<3, 1> CalibrateAcc(const Matrix<3, 1>& AccVec)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b08c      	sub	sp, #48	; 0x30
 8008440:	af00      	add	r7, sp, #0
 8008442:	6178      	str	r0, [r7, #20]
	return (AccA * (AccVec - AccB));
 8008444:	4919      	ldr	r1, [pc, #100]	; (80084ac <_Z12CalibrateAccRKN3Mat6MatrixILh3ELh1EEE+0x70>)
 8008446:	6978      	ldr	r0, [r7, #20]
 8008448:	f000 f885 	bl	8008556 <_ZNK3Mat6MatrixILh3ELh1EEmiERKS1_>
 800844c:	eef0 6a40 	vmov.f32	s13, s0
 8008450:	eeb0 7a60 	vmov.f32	s14, s1
 8008454:	eef0 7a41 	vmov.f32	s15, s2
 8008458:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 800845c:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 8008460:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8008464:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008468:	4619      	mov	r1, r3
 800846a:	4811      	ldr	r0, [pc, #68]	; (80084b0 <_Z12CalibrateAccRKN3Mat6MatrixILh3ELh1EEE+0x74>)
 800846c:	f000 f89d 	bl	80085aa <_ZNK3Mat6MatrixILh3ELh3EEmlILh1EEENS0_ILh3EXT_EEERKS3_>
 8008470:	eef0 6a40 	vmov.f32	s13, s0
 8008474:	eeb0 7a60 	vmov.f32	s14, s1
 8008478:	eef0 7a41 	vmov.f32	s15, s2
 800847c:	edc7 6a06 	vstr	s13, [r7, #24]
 8008480:	ed87 7a07 	vstr	s14, [r7, #28]
 8008484:	edc7 7a08 	vstr	s15, [r7, #32]
 8008488:	69b9      	ldr	r1, [r7, #24]
 800848a:	69fa      	ldr	r2, [r7, #28]
 800848c:	6a3b      	ldr	r3, [r7, #32]
 800848e:	ee06 1a90 	vmov	s13, r1
 8008492:	ee07 2a10 	vmov	s14, r2
 8008496:	ee07 3a90 	vmov	s15, r3
}
 800849a:	eeb0 0a66 	vmov.f32	s0, s13
 800849e:	eef0 0a47 	vmov.f32	s1, s14
 80084a2:	eeb0 1a67 	vmov.f32	s2, s15
 80084a6:	3730      	adds	r7, #48	; 0x30
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}
 80084ac:	24000b34 	.word	0x24000b34
 80084b0:	24000b10 	.word	0x24000b10

080084b4 <_Z13CalibrateGyroRKN3Mat6MatrixILh3ELh1EEE>:

Matrix<3, 1> CalibrateGyro(const Matrix<3, 1>& GyroVec)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b08c      	sub	sp, #48	; 0x30
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6178      	str	r0, [r7, #20]
	return (GyroA * (GyroVec - GyroB));
 80084bc:	4919      	ldr	r1, [pc, #100]	; (8008524 <_Z13CalibrateGyroRKN3Mat6MatrixILh3ELh1EEE+0x70>)
 80084be:	6978      	ldr	r0, [r7, #20]
 80084c0:	f000 f849 	bl	8008556 <_ZNK3Mat6MatrixILh3ELh1EEmiERKS1_>
 80084c4:	eef0 6a40 	vmov.f32	s13, s0
 80084c8:	eeb0 7a60 	vmov.f32	s14, s1
 80084cc:	eef0 7a41 	vmov.f32	s15, s2
 80084d0:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 80084d4:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 80084d8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 80084dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084e0:	4619      	mov	r1, r3
 80084e2:	4811      	ldr	r0, [pc, #68]	; (8008528 <_Z13CalibrateGyroRKN3Mat6MatrixILh3ELh1EEE+0x74>)
 80084e4:	f000 f861 	bl	80085aa <_ZNK3Mat6MatrixILh3ELh3EEmlILh1EEENS0_ILh3EXT_EEERKS3_>
 80084e8:	eef0 6a40 	vmov.f32	s13, s0
 80084ec:	eeb0 7a60 	vmov.f32	s14, s1
 80084f0:	eef0 7a41 	vmov.f32	s15, s2
 80084f4:	edc7 6a06 	vstr	s13, [r7, #24]
 80084f8:	ed87 7a07 	vstr	s14, [r7, #28]
 80084fc:	edc7 7a08 	vstr	s15, [r7, #32]
 8008500:	69b9      	ldr	r1, [r7, #24]
 8008502:	69fa      	ldr	r2, [r7, #28]
 8008504:	6a3b      	ldr	r3, [r7, #32]
 8008506:	ee06 1a90 	vmov	s13, r1
 800850a:	ee07 2a10 	vmov	s14, r2
 800850e:	ee07 3a90 	vmov	s15, r3
}
 8008512:	eeb0 0a66 	vmov.f32	s0, s13
 8008516:	eef0 0a47 	vmov.f32	s1, s14
 800851a:	eeb0 1a67 	vmov.f32	s2, s15
 800851e:	3730      	adds	r7, #48	; 0x30
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}
 8008524:	24000b64 	.word	0x24000b64
 8008528:	24000b40 	.word	0x24000b40

0800852c <_ZN3Mat6MatrixILh3ELh3EEC1ERKSt5arrayIfLj9EE>:
Matrix<heigth, width>::Matrix(const std::array<float, heigth*width>& values): _values(values) {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 800852c:	b4b0      	push	{r4, r5, r7}
 800852e:	b083      	sub	sp, #12
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	6039      	str	r1, [r7, #0]
 8008536:	687a      	ldr	r2, [r7, #4]
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	4614      	mov	r4, r2
 800853c:	461d      	mov	r5, r3
 800853e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008540:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008542:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008544:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008546:	682b      	ldr	r3, [r5, #0]
 8008548:	6023      	str	r3, [r4, #0]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	4618      	mov	r0, r3
 800854e:	370c      	adds	r7, #12
 8008550:	46bd      	mov	sp, r7
 8008552:	bcb0      	pop	{r4, r5, r7}
 8008554:	4770      	bx	lr

08008556 <_ZNK3Mat6MatrixILh3ELh1EEmiERKS1_>:
	result += val;
	return result;
}

template <u_short heigth, u_short width>
inline Matrix<heigth, width> Matrix<heigth, width>::operator-(const Matrix<heigth, width> &other) const
 8008556:	b580      	push	{r7, lr}
 8008558:	b08c      	sub	sp, #48	; 0x30
 800855a:	af00      	add	r7, sp, #0
 800855c:	6178      	str	r0, [r7, #20]
 800855e:	6139      	str	r1, [r7, #16]
{
    Matrix<heigth, width> result = *this;
 8008560:	697a      	ldr	r2, [r7, #20]
 8008562:	f107 0318 	add.w	r3, r7, #24
 8008566:	ca07      	ldmia	r2, {r0, r1, r2}
 8008568:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	result -= other;
 800856c:	f107 0318 	add.w	r3, r7, #24
 8008570:	6939      	ldr	r1, [r7, #16]
 8008572:	4618      	mov	r0, r3
 8008574:	f000 f843 	bl	80085fe <_ZN3Mat6MatrixILh3ELh1EEmIERKS1_>
	return result;
 8008578:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800857c:	f107 0218 	add.w	r2, r7, #24
 8008580:	ca07      	ldmia	r2, {r0, r1, r2}
 8008582:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008586:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008588:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800858a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800858c:	ee06 1a90 	vmov	s13, r1
 8008590:	ee07 2a10 	vmov	s14, r2
 8008594:	ee07 3a90 	vmov	s15, r3
}
 8008598:	eeb0 0a66 	vmov.f32	s0, s13
 800859c:	eef0 0a47 	vmov.f32	s1, s14
 80085a0:	eeb0 1a67 	vmov.f32	s2, s15
 80085a4:	3730      	adds	r7, #48	; 0x30
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}

080085aa <_ZNK3Mat6MatrixILh3ELh3EEmlILh1EEENS0_ILh3EXT_EEERKS3_>:
	result *= val;
	return result;
}

template <u_short heigth, u_short width> template <u_short other_width>
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 80085aa:	b580      	push	{r7, lr}
 80085ac:	b08c      	sub	sp, #48	; 0x30
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	6178      	str	r0, [r7, #20]
 80085b2:	6139      	str	r1, [r7, #16]
{
	Matrix<heigth, other_width> result;
 80085b4:	f107 0318 	add.w	r3, r7, #24
 80085b8:	4618      	mov	r0, r3
 80085ba:	f000 f855 	bl	8008668 <_ZN3Mat6MatrixILh3ELh1EEC1Ev>
	Multiply(other, result);
 80085be:	f107 0318 	add.w	r3, r7, #24
 80085c2:	461a      	mov	r2, r3
 80085c4:	6939      	ldr	r1, [r7, #16]
 80085c6:	6978      	ldr	r0, [r7, #20]
 80085c8:	f000 f859 	bl	800867e <_ZNK3Mat6MatrixILh3ELh3EE8MultiplyILh1EEEvRKNS0_ILh3EXT_EEERS3_>
	return result;
 80085cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085d0:	f107 0218 	add.w	r2, r7, #24
 80085d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80085d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80085da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80085dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085e0:	ee06 1a90 	vmov	s13, r1
 80085e4:	ee07 2a10 	vmov	s14, r2
 80085e8:	ee07 3a90 	vmov	s15, r3
}
 80085ec:	eeb0 0a66 	vmov.f32	s0, s13
 80085f0:	eef0 0a47 	vmov.f32	s1, s14
 80085f4:	eeb0 1a67 	vmov.f32	s2, s15
 80085f8:	3730      	adds	r7, #48	; 0x30
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}

080085fe <_ZN3Mat6MatrixILh3ELh1EEmIERKS1_>:
inline Matrix<heigth, width> &Matrix<heigth, width>::operator-=(const Matrix<heigth, width> &other)
 80085fe:	b580      	push	{r7, lr}
 8008600:	ed2d 8b02 	vpush	{d8}
 8008604:	b084      	sub	sp, #16
 8008606:	af00      	add	r7, sp, #0
 8008608:	6078      	str	r0, [r7, #4]
 800860a:	6039      	str	r1, [r7, #0]
    for(u_int i = 0; i < _values.size(); ++i) _values[i] -= other._values[i];
 800860c:	2300      	movs	r3, #0
 800860e:	60fb      	str	r3, [r7, #12]
 8008610:	e016      	b.n	8008640 <_ZN3Mat6MatrixILh3ELh1EEmIERKS1_+0x42>
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	68f9      	ldr	r1, [r7, #12]
 8008616:	4618      	mov	r0, r3
 8008618:	f000 f8ee 	bl	80087f8 <_ZNKSt5arrayIfLj3EEixEj>
 800861c:	4603      	mov	r3, r0
 800861e:	ed93 8a00 	vldr	s16, [r3]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	68f9      	ldr	r1, [r7, #12]
 8008626:	4618      	mov	r0, r3
 8008628:	f7ff fde5 	bl	80081f6 <_ZNSt5arrayIfLj3EEixEj>
 800862c:	4603      	mov	r3, r0
 800862e:	edd3 7a00 	vldr	s15, [r3]
 8008632:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8008636:	edc3 7a00 	vstr	s15, [r3]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	3301      	adds	r3, #1
 800863e:	60fb      	str	r3, [r7, #12]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	4618      	mov	r0, r3
 8008644:	f000 f8cd 	bl	80087e2 <_ZNKSt5arrayIfLj3EE4sizeEv>
 8008648:	4602      	mov	r2, r0
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	4293      	cmp	r3, r2
 800864e:	bf34      	ite	cc
 8008650:	2301      	movcc	r3, #1
 8008652:	2300      	movcs	r3, #0
 8008654:	b2db      	uxtb	r3, r3
 8008656:	2b00      	cmp	r3, #0
 8008658:	d1db      	bne.n	8008612 <_ZN3Mat6MatrixILh3ELh1EEmIERKS1_+0x14>
	return *this;
 800865a:	687b      	ldr	r3, [r7, #4]
}
 800865c:	4618      	mov	r0, r3
 800865e:	3710      	adds	r7, #16
 8008660:	46bd      	mov	sp, r7
 8008662:	ecbd 8b02 	vpop	{d8}
 8008666:	bd80      	pop	{r7, pc}

08008668 <_ZN3Mat6MatrixILh3ELh1EEC1Ev>:
Matrix<heigth, width>::Matrix() {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 8008668:	b480      	push	{r7}
 800866a:	b083      	sub	sp, #12
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	4618      	mov	r0, r3
 8008674:	370c      	adds	r7, #12
 8008676:	46bd      	mov	sp, r7
 8008678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867c:	4770      	bx	lr

0800867e <_ZNK3Mat6MatrixILh3ELh3EE8MultiplyILh1EEEvRKNS0_ILh3EXT_EEERS3_>:

template <u_short heigth, u_short width> template <u_short other_width>
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 800867e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008680:	b093      	sub	sp, #76	; 0x4c
 8008682:	af00      	add	r7, sp, #0
 8008684:	60f8      	str	r0, [r7, #12]
 8008686:	60b9      	str	r1, [r7, #8]
 8008688:	607a      	str	r2, [r7, #4]
{
	std::array<Row, other_width> other_columns;
	std::array<Row, heigth> this_rows;
	for(u_short row = 0; row < heigth; ++row)
 800868a:	2300      	movs	r3, #0
 800868c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008690:	e02c      	b.n	80086ec <_ZNK3Mat6MatrixILh3ELh3EE8MultiplyILh1EEEvRKNS0_ILh3EXT_EEERS3_+0x6e>
		for(u_short col = 0; col < width; ++col)
 8008692:	2300      	movs	r3, #0
 8008694:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8008698:	e01f      	b.n	80086da <_ZNK3Mat6MatrixILh3ELh3EE8MultiplyILh1EEEvRKNS0_ILh3EXT_EEERS3_+0x5c>
			this_rows[row][col] = this->operator()(row, col);
 800869a:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 800869e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80086a2:	4619      	mov	r1, r3
 80086a4:	68f8      	ldr	r0, [r7, #12]
 80086a6:	f000 f8c5 	bl	8008834 <_ZNK3Mat6MatrixILh3ELh3EEclEhh>
 80086aa:	4604      	mov	r4, r0
 80086ac:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80086b0:	f107 0310 	add.w	r3, r7, #16
 80086b4:	4611      	mov	r1, r2
 80086b6:	4618      	mov	r0, r3
 80086b8:	f000 f8ad 	bl	8008816 <_ZNSt5arrayIS_IfLj3EELj3EEixEj>
 80086bc:	4602      	mov	r2, r0
 80086be:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80086c2:	4619      	mov	r1, r3
 80086c4:	4610      	mov	r0, r2
 80086c6:	f7ff fd96 	bl	80081f6 <_ZNSt5arrayIfLj3EEixEj>
 80086ca:	4602      	mov	r2, r0
 80086cc:	6823      	ldr	r3, [r4, #0]
 80086ce:	6013      	str	r3, [r2, #0]
		for(u_short col = 0; col < width; ++col)
 80086d0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80086d4:	3301      	adds	r3, #1
 80086d6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80086da:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80086de:	2b02      	cmp	r3, #2
 80086e0:	d9db      	bls.n	800869a <_ZNK3Mat6MatrixILh3ELh3EE8MultiplyILh1EEEvRKNS0_ILh3EXT_EEERS3_+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 80086e2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80086e6:	3301      	adds	r3, #1
 80086e8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80086ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80086f0:	2b02      	cmp	r3, #2
 80086f2:	d9ce      	bls.n	8008692 <_ZNK3Mat6MatrixILh3ELh3EE8MultiplyILh1EEEvRKNS0_ILh3EXT_EEERS3_+0x14>

	for(u_short col = 0; col < other_width; ++col)
 80086f4:	2300      	movs	r3, #0
 80086f6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80086fa:	e02c      	b.n	8008756 <_ZNK3Mat6MatrixILh3ELh3EE8MultiplyILh1EEEvRKNS0_ILh3EXT_EEERS3_+0xd8>
		for(u_short row = 0; row < width; ++row)
 80086fc:	2300      	movs	r3, #0
 80086fe:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8008702:	e01f      	b.n	8008744 <_ZNK3Mat6MatrixILh3ELh3EE8MultiplyILh1EEEvRKNS0_ILh3EXT_EEERS3_+0xc6>
			other_columns[col][row] = other(row, col);
 8008704:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8008708:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800870c:	4619      	mov	r1, r3
 800870e:	68b8      	ldr	r0, [r7, #8]
 8008710:	f000 f8b8 	bl	8008884 <_ZNK3Mat6MatrixILh3ELh1EEclEhh>
 8008714:	4604      	mov	r4, r0
 8008716:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800871a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800871e:	4611      	mov	r1, r2
 8008720:	4618      	mov	r0, r3
 8008722:	f000 f8a0 	bl	8008866 <_ZNSt5arrayIS_IfLj3EELj1EEixEj>
 8008726:	4602      	mov	r2, r0
 8008728:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800872c:	4619      	mov	r1, r3
 800872e:	4610      	mov	r0, r2
 8008730:	f7ff fd61 	bl	80081f6 <_ZNSt5arrayIfLj3EEixEj>
 8008734:	4602      	mov	r2, r0
 8008736:	6823      	ldr	r3, [r4, #0]
 8008738:	6013      	str	r3, [r2, #0]
		for(u_short row = 0; row < width; ++row)
 800873a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800873e:	3301      	adds	r3, #1
 8008740:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8008744:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8008748:	2b02      	cmp	r3, #2
 800874a:	d9db      	bls.n	8008704 <_ZNK3Mat6MatrixILh3ELh3EE8MultiplyILh1EEEvRKNS0_ILh3EXT_EEERS3_+0x86>
	for(u_short col = 0; col < other_width; ++col)
 800874c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8008750:	3301      	adds	r3, #1
 8008752:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8008756:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800875a:	2b00      	cmp	r3, #0
 800875c:	d0ce      	beq.n	80086fc <_ZNK3Mat6MatrixILh3ELh3EE8MultiplyILh1EEEvRKNS0_ILh3EXT_EEERS3_+0x7e>

	for(u_short row = 0; row < heigth; ++row)
 800875e:	2300      	movs	r3, #0
 8008760:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008764:	e034      	b.n	80087d0 <_ZNK3Mat6MatrixILh3ELh3EE8MultiplyILh1EEEvRKNS0_ILh3EXT_EEERS3_+0x152>
		for(u_short col = 0; col < other_width; ++col)
 8008766:	2300      	movs	r3, #0
 8008768:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800876c:	e027      	b.n	80087be <_ZNK3Mat6MatrixILh3ELh3EE8MultiplyILh1EEEvRKNS0_ILh3EXT_EEERS3_+0x140>
			result(row, col) = Multiply_rows(this_rows[row], other_columns[col]);
 800876e:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8008772:	f107 0310 	add.w	r3, r7, #16
 8008776:	4611      	mov	r1, r2
 8008778:	4618      	mov	r0, r3
 800877a:	f000 f84c 	bl	8008816 <_ZNSt5arrayIS_IfLj3EELj3EEixEj>
 800877e:	4605      	mov	r5, r0
 8008780:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 8008784:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008788:	4611      	mov	r1, r2
 800878a:	4618      	mov	r0, r3
 800878c:	f000 f86b 	bl	8008866 <_ZNSt5arrayIS_IfLj3EELj1EEixEj>
 8008790:	4606      	mov	r6, r0
 8008792:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 8008796:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800879a:	4619      	mov	r1, r3
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f7ff fd14 	bl	80081ca <_ZN3Mat6MatrixILh3ELh1EEclEhh>
 80087a2:	4604      	mov	r4, r0
 80087a4:	4631      	mov	r1, r6
 80087a6:	4628      	mov	r0, r5
 80087a8:	f000 f882 	bl	80088b0 <_ZN3Mat13Multiply_rowsILj3EEEfRKSt5arrayIfXT_EES4_>
 80087ac:	eef0 7a40 	vmov.f32	s15, s0
 80087b0:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 80087b4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80087b8:	3301      	adds	r3, #1
 80087ba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80087be:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d0d3      	beq.n	800876e <_ZNK3Mat6MatrixILh3ELh3EE8MultiplyILh1EEEvRKNS0_ILh3EXT_EEERS3_+0xf0>
	for(u_short row = 0; row < heigth; ++row)
 80087c6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80087ca:	3301      	adds	r3, #1
 80087cc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087d0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80087d4:	2b02      	cmp	r3, #2
 80087d6:	d9c6      	bls.n	8008766 <_ZNK3Mat6MatrixILh3ELh3EE8MultiplyILh1EEEvRKNS0_ILh3EXT_EEERS3_+0xe8>
}
 80087d8:	bf00      	nop
 80087da:	bf00      	nop
 80087dc:	374c      	adds	r7, #76	; 0x4c
 80087de:	46bd      	mov	sp, r7
 80087e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080087e2 <_ZNKSt5arrayIfLj3EE4sizeEv>:
      size() const noexcept { return _Nm; }
 80087e2:	b480      	push	{r7}
 80087e4:	b083      	sub	sp, #12
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
 80087ea:	2303      	movs	r3, #3
 80087ec:	4618      	mov	r0, r3
 80087ee:	370c      	adds	r7, #12
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr

080087f8 <_ZNKSt5arrayIfLj3EEixEj>:

      constexpr const_reference
      operator[](size_type __n) const noexcept
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	6039      	str	r1, [r7, #0]
      {
#if __cplusplus >= 201402L
	__glibcxx_requires_subscript(__n);
#endif
	return _AT_Type::_S_ref(_M_elems, __n);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6839      	ldr	r1, [r7, #0]
 8008806:	4618      	mov	r0, r3
 8008808:	f7ff fd04 	bl	8008214 <_ZNSt14__array_traitsIfLj3EE6_S_refERA3_Kfj>
 800880c:	4603      	mov	r3, r0
      }
 800880e:	4618      	mov	r0, r3
 8008810:	3708      	adds	r7, #8
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}

08008816 <_ZNSt5arrayIS_IfLj3EELj3EEixEj>:
      operator[](size_type __n) noexcept
 8008816:	b580      	push	{r7, lr}
 8008818:	b082      	sub	sp, #8
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
 800881e:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6839      	ldr	r1, [r7, #0]
 8008824:	4618      	mov	r0, r3
 8008826:	f000 f876 	bl	8008916 <_ZNSt14__array_traitsISt5arrayIfLj3EELj3EE6_S_refERA3_KS1_j>
 800882a:	4603      	mov	r3, r0
      }
 800882c:	4618      	mov	r0, r3
 800882e:	3708      	adds	r7, #8
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}

08008834 <_ZNK3Mat6MatrixILh3ELh3EEclEhh>:
const float& Matrix<heigth, width>::operator()(u_short row, u_short col) const
 8008834:	b580      	push	{r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	460b      	mov	r3, r1
 800883e:	70fb      	strb	r3, [r7, #3]
 8008840:	4613      	mov	r3, r2
 8008842:	70bb      	strb	r3, [r7, #2]
	u_int index = width * row + col;
 8008844:	78fa      	ldrb	r2, [r7, #3]
 8008846:	4613      	mov	r3, r2
 8008848:	005b      	lsls	r3, r3, #1
 800884a:	441a      	add	r2, r3
 800884c:	78bb      	ldrb	r3, [r7, #2]
 800884e:	4413      	add	r3, r2
 8008850:	60fb      	str	r3, [r7, #12]
	return _values[index];
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	68f9      	ldr	r1, [r7, #12]
 8008856:	4618      	mov	r0, r3
 8008858:	f000 f86f 	bl	800893a <_ZNKSt5arrayIfLj9EEixEj>
 800885c:	4603      	mov	r3, r0
}
 800885e:	4618      	mov	r0, r3
 8008860:	3710      	adds	r7, #16
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}

08008866 <_ZNSt5arrayIS_IfLj3EELj1EEixEj>:
      operator[](size_type __n) noexcept
 8008866:	b580      	push	{r7, lr}
 8008868:	b082      	sub	sp, #8
 800886a:	af00      	add	r7, sp, #0
 800886c:	6078      	str	r0, [r7, #4]
 800886e:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6839      	ldr	r1, [r7, #0]
 8008874:	4618      	mov	r0, r3
 8008876:	f000 f86f 	bl	8008958 <_ZNSt14__array_traitsISt5arrayIfLj3EELj1EE6_S_refERA1_KS1_j>
 800887a:	4603      	mov	r3, r0
      }
 800887c:	4618      	mov	r0, r3
 800887e:	3708      	adds	r7, #8
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <_ZNK3Mat6MatrixILh3ELh1EEclEhh>:
const float& Matrix<heigth, width>::operator()(u_short row, u_short col) const
 8008884:	b580      	push	{r7, lr}
 8008886:	b084      	sub	sp, #16
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	460b      	mov	r3, r1
 800888e:	70fb      	strb	r3, [r7, #3]
 8008890:	4613      	mov	r3, r2
 8008892:	70bb      	strb	r3, [r7, #2]
	u_int index = width * row + col;
 8008894:	78fa      	ldrb	r2, [r7, #3]
 8008896:	78bb      	ldrb	r3, [r7, #2]
 8008898:	4413      	add	r3, r2
 800889a:	60fb      	str	r3, [r7, #12]
	return _values[index];
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	68f9      	ldr	r1, [r7, #12]
 80088a0:	4618      	mov	r0, r3
 80088a2:	f7ff ffa9 	bl	80087f8 <_ZNKSt5arrayIfLj3EEixEj>
 80088a6:	4603      	mov	r3, r0
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3710      	adds	r7, #16
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <_ZN3Mat13Multiply_rowsILj3EEEfRKSt5arrayIfXT_EES4_>:
float Multiply_rows(const std::array<float, length>& A, const std::array<float, length>& B)
 80088b0:	b580      	push	{r7, lr}
 80088b2:	ed2d 8b02 	vpush	{d8}
 80088b6:	b084      	sub	sp, #16
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6039      	str	r1, [r7, #0]
    float result = 0.0f;
 80088be:	f04f 0300 	mov.w	r3, #0
 80088c2:	60fb      	str	r3, [r7, #12]
	for(u_int i = 0; i < length; ++i) result += A[i]*B[i];
 80088c4:	2300      	movs	r3, #0
 80088c6:	60bb      	str	r3, [r7, #8]
 80088c8:	e018      	b.n	80088fc <_ZN3Mat13Multiply_rowsILj3EEEfRKSt5arrayIfXT_EES4_+0x4c>
 80088ca:	68b9      	ldr	r1, [r7, #8]
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f7ff ff93 	bl	80087f8 <_ZNKSt5arrayIfLj3EEixEj>
 80088d2:	4603      	mov	r3, r0
 80088d4:	ed93 8a00 	vldr	s16, [r3]
 80088d8:	68b9      	ldr	r1, [r7, #8]
 80088da:	6838      	ldr	r0, [r7, #0]
 80088dc:	f7ff ff8c 	bl	80087f8 <_ZNKSt5arrayIfLj3EEixEj>
 80088e0:	4603      	mov	r3, r0
 80088e2:	edd3 7a00 	vldr	s15, [r3]
 80088e6:	ee68 7a27 	vmul.f32	s15, s16, s15
 80088ea:	ed97 7a03 	vldr	s14, [r7, #12]
 80088ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80088f2:	edc7 7a03 	vstr	s15, [r7, #12]
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	3301      	adds	r3, #1
 80088fa:	60bb      	str	r3, [r7, #8]
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	2b02      	cmp	r3, #2
 8008900:	d9e3      	bls.n	80088ca <_ZN3Mat13Multiply_rowsILj3EEEfRKSt5arrayIfXT_EES4_+0x1a>
	return result;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	ee07 3a90 	vmov	s15, r3
}
 8008908:	eeb0 0a67 	vmov.f32	s0, s15
 800890c:	3710      	adds	r7, #16
 800890e:	46bd      	mov	sp, r7
 8008910:	ecbd 8b02 	vpop	{d8}
 8008914:	bd80      	pop	{r7, pc}

08008916 <_ZNSt14__array_traitsISt5arrayIfLj3EELj3EE6_S_refERA3_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8008916:	b480      	push	{r7}
 8008918:	b083      	sub	sp, #12
 800891a:	af00      	add	r7, sp, #0
 800891c:	6078      	str	r0, [r7, #4]
 800891e:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8008920:	683a      	ldr	r2, [r7, #0]
 8008922:	4613      	mov	r3, r2
 8008924:	005b      	lsls	r3, r3, #1
 8008926:	4413      	add	r3, r2
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	687a      	ldr	r2, [r7, #4]
 800892c:	4413      	add	r3, r2
 800892e:	4618      	mov	r0, r3
 8008930:	370c      	adds	r7, #12
 8008932:	46bd      	mov	sp, r7
 8008934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008938:	4770      	bx	lr

0800893a <_ZNKSt5arrayIfLj9EEixEj>:
      operator[](size_type __n) const noexcept
 800893a:	b580      	push	{r7, lr}
 800893c:	b082      	sub	sp, #8
 800893e:	af00      	add	r7, sp, #0
 8008940:	6078      	str	r0, [r7, #4]
 8008942:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6839      	ldr	r1, [r7, #0]
 8008948:	4618      	mov	r0, r3
 800894a:	f000 f817 	bl	800897c <_ZNSt14__array_traitsIfLj9EE6_S_refERA9_Kfj>
 800894e:	4603      	mov	r3, r0
      }
 8008950:	4618      	mov	r0, r3
 8008952:	3708      	adds	r7, #8
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}

08008958 <_ZNSt14__array_traitsISt5arrayIfLj3EELj1EE6_S_refERA1_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8008958:	b480      	push	{r7}
 800895a:	b083      	sub	sp, #12
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8008962:	683a      	ldr	r2, [r7, #0]
 8008964:	4613      	mov	r3, r2
 8008966:	005b      	lsls	r3, r3, #1
 8008968:	4413      	add	r3, r2
 800896a:	009b      	lsls	r3, r3, #2
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	4413      	add	r3, r2
 8008970:	4618      	mov	r0, r3
 8008972:	370c      	adds	r7, #12
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr

0800897c <_ZNSt14__array_traitsIfLj9EE6_S_refERA9_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800897c:	b480      	push	{r7}
 800897e:	b083      	sub	sp, #12
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
 8008984:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	4413      	add	r3, r2
 800898e:	4618      	mov	r0, r3
 8008990:	370c      	adds	r7, #12
 8008992:	46bd      	mov	sp, r7
 8008994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008998:	4770      	bx	lr
	...

0800899c <_Z41__static_initialization_and_destruction_0ii>:
 800899c:	b5b0      	push	{r4, r5, r7, lr}
 800899e:	b0a6      	sub	sp, #152	; 0x98
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	6039      	str	r1, [r7, #0]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d158      	bne.n	8008a5e <_Z41__static_initialization_and_destruction_0ii+0xc2>
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d153      	bne.n	8008a5e <_Z41__static_initialization_and_destruction_0ii+0xc2>
						0.017590, 0.005030, 2.722998});
 80089b6:	4b2c      	ldr	r3, [pc, #176]	; (8008a68 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 80089b8:	f107 0408 	add.w	r4, r7, #8
 80089bc:	461d      	mov	r5, r3
 80089be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80089c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80089c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089c6:	682b      	ldr	r3, [r5, #0]
 80089c8:	6023      	str	r3, [r4, #0]
 80089ca:	f107 0308 	add.w	r3, r7, #8
 80089ce:	4619      	mov	r1, r3
 80089d0:	4826      	ldr	r0, [pc, #152]	; (8008a6c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 80089d2:	f7ff fdab 	bl	800852c <_ZN3Mat6MatrixILh3ELh3EEC1ERKSt5arrayIfLj9EE>
const Matrix<3, 1> MagB({-44.070419, 26.891034, -12.777197});
 80089d6:	4a26      	ldr	r2, [pc, #152]	; (8008a70 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 80089d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80089dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80089de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80089e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80089e6:	4619      	mov	r1, r3
 80089e8:	4822      	ldr	r0, [pc, #136]	; (8008a74 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 80089ea:	f7ff fbdd 	bl	80081a8 <_ZN3Mat6MatrixILh3ELh1EEC1ERKSt5arrayIfLj3EE>
						-0.000884, 0.000648, 0.998789});
 80089ee:	4b22      	ldr	r3, [pc, #136]	; (8008a78 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 80089f0:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80089f4:	461d      	mov	r5, r3
 80089f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80089f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80089fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089fe:	682b      	ldr	r3, [r5, #0]
 8008a00:	6023      	str	r3, [r4, #0]
 8008a02:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008a06:	4619      	mov	r1, r3
 8008a08:	481c      	ldr	r0, [pc, #112]	; (8008a7c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8008a0a:	f7ff fd8f 	bl	800852c <_ZN3Mat6MatrixILh3ELh3EEC1ERKSt5arrayIfLj9EE>
const Matrix<3, 1> AccB({0.364931, 0.282141, -0.210647});
 8008a0e:	4a1c      	ldr	r2, [pc, #112]	; (8008a80 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8008a10:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008a14:	ca07      	ldmia	r2, {r0, r1, r2}
 8008a16:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008a1a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008a1e:	4619      	mov	r1, r3
 8008a20:	4818      	ldr	r0, [pc, #96]	; (8008a84 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8008a22:	f7ff fbc1 	bl	80081a8 <_ZN3Mat6MatrixILh3ELh1EEC1ERKSt5arrayIfLj3EE>
						0.0, 0.0, 8.16 * DEG_2_RAD});
 8008a26:	4b18      	ldr	r3, [pc, #96]	; (8008a88 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8008a28:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8008a2c:	461d      	mov	r5, r3
 8008a2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a36:	682b      	ldr	r3, [r5, #0]
 8008a38:	6023      	str	r3, [r4, #0]
 8008a3a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8008a3e:	4619      	mov	r1, r3
 8008a40:	4812      	ldr	r0, [pc, #72]	; (8008a8c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 8008a42:	f7ff fd73 	bl	800852c <_ZN3Mat6MatrixILh3ELh3EEC1ERKSt5arrayIfLj9EE>
const Matrix<3, 1> GyroB({-0.0533, 0.0459, -0.0038});
 8008a46:	4a12      	ldr	r2, [pc, #72]	; (8008a90 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8008a48:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008a4c:	ca07      	ldmia	r2, {r0, r1, r2}
 8008a4e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008a52:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008a56:	4619      	mov	r1, r3
 8008a58:	480e      	ldr	r0, [pc, #56]	; (8008a94 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8008a5a:	f7ff fba5 	bl	80081a8 <_ZN3Mat6MatrixILh3ELh1EEC1ERKSt5arrayIfLj3EE>
}
 8008a5e:	bf00      	nop
 8008a60:	3798      	adds	r7, #152	; 0x98
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bdb0      	pop	{r4, r5, r7, pc}
 8008a66:	bf00      	nop
 8008a68:	080115c4 	.word	0x080115c4
 8008a6c:	24000ae0 	.word	0x24000ae0
 8008a70:	080115e8 	.word	0x080115e8
 8008a74:	24000b04 	.word	0x24000b04
 8008a78:	080115f4 	.word	0x080115f4
 8008a7c:	24000b10 	.word	0x24000b10
 8008a80:	08011618 	.word	0x08011618
 8008a84:	24000b34 	.word	0x24000b34
 8008a88:	08011624 	.word	0x08011624
 8008a8c:	24000b40 	.word	0x24000b40
 8008a90:	08011648 	.word	0x08011648
 8008a94:	24000b64 	.word	0x24000b64

08008a98 <_GLOBAL__sub_I__Z12CalibrateMagRKN3Mat6MatrixILh3ELh1EEE>:
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008aa0:	2001      	movs	r0, #1
 8008aa2:	f7ff ff7b 	bl	800899c <_Z41__static_initialization_and_destruction_0ii>
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <filterUpdate>:
float GetY(){return q[2];}
float GetZ(){return q[3];}

// Function to compute one filter iteration
void filterUpdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz, const float time)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b0b2      	sub	sp, #200	; 0xc8
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8008ab2:	edc7 0a08 	vstr	s1, [r7, #32]
 8008ab6:	ed87 1a07 	vstr	s2, [r7, #28]
 8008aba:	edc7 1a06 	vstr	s3, [r7, #24]
 8008abe:	ed87 2a05 	vstr	s4, [r7, #20]
 8008ac2:	edc7 2a04 	vstr	s5, [r7, #16]
 8008ac6:	ed87 3a03 	vstr	s6, [r7, #12]
 8008aca:	edc7 3a02 	vstr	s7, [r7, #8]
 8008ace:	ed87 4a01 	vstr	s8, [r7, #4]
 8008ad2:	edc7 4a00 	vstr	s9, [r7]
	static float datatime = DELTAT;
	float deltat = (time - datatime);
 8008ad6:	4b76      	ldr	r3, [pc, #472]	; (8008cb0 <filterUpdate+0x208>)
 8008ad8:	edd3 7a00 	vldr	s15, [r3]
 8008adc:	ed97 7a00 	vldr	s14, [r7]
 8008ae0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008ae4:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
	datatime = time;
 8008ae8:	4a71      	ldr	r2, [pc, #452]	; (8008cb0 <filterUpdate+0x208>)
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	6013      	str	r3, [r2, #0]
	//printf("Original: %f\n\r", deltat);
	//LOG("INPUT: %f, %f, %f, %f, %f, %f", mx, my, mz,getRoll(), getPitch(), getYaw());
	float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3];   // short name local variable for readability
 8008aee:	4b71      	ldr	r3, [pc, #452]	; (8008cb4 <filterUpdate+0x20c>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008af6:	4b6f      	ldr	r3, [pc, #444]	; (8008cb4 <filterUpdate+0x20c>)
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008afe:	4b6d      	ldr	r3, [pc, #436]	; (8008cb4 <filterUpdate+0x20c>)
 8008b00:	689b      	ldr	r3, [r3, #8]
 8008b02:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008b06:	4b6b      	ldr	r3, [pc, #428]	; (8008cb4 <filterUpdate+0x20c>)
 8008b08:	68db      	ldr	r3, [r3, #12]
 8008b0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	float _2q1my;
	float _2q1mz;
	float _2q2mx;
	float _4bx;
	float _4bz;
	float _2q1 = 2.0f * q1;
 8008b0e:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8008b12:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008b16:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	float _2q2 = 2.0f * q2;
 8008b1a:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8008b1e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008b22:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	float _2q3 = 2.0f * q3;
 8008b26:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8008b2a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008b2e:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
	float _2q4 = 2.0f * q4;
 8008b32:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8008b36:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008b3a:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
	float _2q1q3 = 2.0f * q1 * q3;
 8008b3e:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8008b42:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008b46:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8008b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b4e:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
	float _2q3q4 = 2.0f * q3 * q4;
 8008b52:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8008b56:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008b5a:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8008b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b62:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
	float q1q1 = q1 * q1;
 8008b66:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8008b6a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008b6e:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	float q1q2 = q1 * q2;
 8008b72:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8008b76:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8008b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b7e:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
	float q1q3 = q1 * q3;
 8008b82:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8008b86:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8008b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b8e:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
	float q1q4 = q1 * q4;
 8008b92:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8008b96:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8008b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b9e:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
	float q2q2 = q2 * q2;
 8008ba2:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8008ba6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008baa:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
	float q2q3 = q2 * q3;
 8008bae:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8008bb2:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8008bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bba:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	float q2q4 = q2 * q4;
 8008bbe:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8008bc2:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8008bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bca:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
	float q3q3 = q3 * q3;
 8008bce:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8008bd2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008bd6:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	float q3q4 = q3 * q4;
 8008bda:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8008bde:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8008be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008be6:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	float q4q4 = q4 * q4;
 8008bea:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8008bee:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008bf2:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74

	// Normalise accelerometer measurement
	norm = sqrtf(ax * ax + ay * ay + az * az);
 8008bf6:	edd7 7a06 	vldr	s15, [r7, #24]
 8008bfa:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8008bfe:	edd7 7a05 	vldr	s15, [r7, #20]
 8008c02:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008c06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008c0a:	edd7 7a04 	vldr	s15, [r7, #16]
 8008c0e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008c12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008c16:	eeb0 0a67 	vmov.f32	s0, s15
 8008c1a:	f005 fb13 	bl	800e244 <sqrtf>
 8008c1e:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
	if (norm == 0.0f) return; // handle NaN
 8008c22:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8008c26:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c2e:	f000 85c4 	beq.w	80097ba <filterUpdate+0xd12>
	norm = 1.0f/norm;
 8008c32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c36:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8008c3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c3e:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	ax *= norm;
 8008c42:	ed97 7a06 	vldr	s14, [r7, #24]
 8008c46:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8008c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c4e:	edc7 7a06 	vstr	s15, [r7, #24]
	ay *= norm;
 8008c52:	ed97 7a05 	vldr	s14, [r7, #20]
 8008c56:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8008c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c5e:	edc7 7a05 	vstr	s15, [r7, #20]
	az *= norm;
 8008c62:	ed97 7a04 	vldr	s14, [r7, #16]
 8008c66:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8008c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c6e:	edc7 7a04 	vstr	s15, [r7, #16]

	// Normalise magnetometer measurement
	norm = sqrtf(mx * mx + my * my + mz * mz);
 8008c72:	edd7 7a03 	vldr	s15, [r7, #12]
 8008c76:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8008c7a:	edd7 7a02 	vldr	s15, [r7, #8]
 8008c7e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008c82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008c86:	edd7 7a01 	vldr	s15, [r7, #4]
 8008c8a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008c8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008c92:	eeb0 0a67 	vmov.f32	s0, s15
 8008c96:	f005 fad5 	bl	800e244 <sqrtf>
 8008c9a:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
	if (norm == 0.0f) return; // handle NaN
 8008c9e:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8008ca2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008caa:	f000 8588 	beq.w	80097be <filterUpdate+0xd16>
 8008cae:	e003      	b.n	8008cb8 <filterUpdate+0x210>
 8008cb0:	24000020 	.word	0x24000020
 8008cb4:	24000010 	.word	0x24000010
	norm = 1.0f/norm;
 8008cb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cbc:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8008cc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cc4:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	mx *= norm;
 8008cc8:	ed97 7a03 	vldr	s14, [r7, #12]
 8008ccc:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8008cd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cd4:	edc7 7a03 	vstr	s15, [r7, #12]
	my *= norm;
 8008cd8:	ed97 7a02 	vldr	s14, [r7, #8]
 8008cdc:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8008ce0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ce4:	edc7 7a02 	vstr	s15, [r7, #8]
	mz *= norm;
 8008ce8:	ed97 7a01 	vldr	s14, [r7, #4]
 8008cec:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8008cf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cf4:	edc7 7a01 	vstr	s15, [r7, #4]
	//printf("Original: %f\t%f\t%f\n\r", mx, my, mz);
	// Reference direction of Earth's magnetic field
	_2q1mx = 2.0f * q1 * mx;
 8008cf8:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8008cfc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008d00:	ed97 7a03 	vldr	s14, [r7, #12]
 8008d04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d08:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	_2q1my = 2.0f * q1 * my;
 8008d0c:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8008d10:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008d14:	ed97 7a02 	vldr	s14, [r7, #8]
 8008d18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d1c:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	_2q1mz = 2.0f * q1 * mz;
 8008d20:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8008d24:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008d28:	ed97 7a01 	vldr	s14, [r7, #4]
 8008d2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d30:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	_2q2mx = 2.0f * q2 * mx;
 8008d34:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8008d38:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008d3c:	ed97 7a03 	vldr	s14, [r7, #12]
 8008d40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d44:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	hx = mx * q1q1 - _2q1my * q4 + _2q1mz * q3 + mx * q2q2 + _2q2 * my * q3 + _2q2 * mz * q4 - mx * q3q3 - mx * q4q4;
 8008d48:	ed97 7a03 	vldr	s14, [r7, #12]
 8008d4c:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8008d50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008d54:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8008d58:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8008d5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008d60:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008d64:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8008d68:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8008d6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008d70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008d74:	edd7 6a03 	vldr	s13, [r7, #12]
 8008d78:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8008d7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008d80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008d84:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8008d88:	edd7 7a02 	vldr	s15, [r7, #8]
 8008d8c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8008d90:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8008d94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008d98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008d9c:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8008da0:	edd7 7a01 	vldr	s15, [r7, #4]
 8008da4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8008da8:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8008dac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008db0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008db4:	edd7 6a03 	vldr	s13, [r7, #12]
 8008db8:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8008dbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008dc0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008dc4:	edd7 6a03 	vldr	s13, [r7, #12]
 8008dc8:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8008dcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008dd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008dd4:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	hy = _2q1mx * q4 + my * q1q1 - _2q1mz * q2 + _2q2mx * q3 - my * q2q2 + my * q3q3 + _2q3 * mz * q4 - my * q4q4;
 8008dd8:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8008ddc:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8008de0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008de4:	edd7 6a02 	vldr	s13, [r7, #8]
 8008de8:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8008dec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008df0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008df4:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8008df8:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8008dfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008e00:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008e04:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8008e08:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8008e0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008e10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008e14:	edd7 6a02 	vldr	s13, [r7, #8]
 8008e18:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8008e1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008e20:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008e24:	edd7 6a02 	vldr	s13, [r7, #8]
 8008e28:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8008e2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008e30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008e34:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 8008e38:	edd7 7a01 	vldr	s15, [r7, #4]
 8008e3c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8008e40:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8008e44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008e48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008e4c:	edd7 6a02 	vldr	s13, [r7, #8]
 8008e50:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8008e54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008e58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008e5c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	_2bx = sqrtf(hx * hx + hy * hy);
 8008e60:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8008e64:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8008e68:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8008e6c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008e70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e74:	eeb0 0a67 	vmov.f32	s0, s15
 8008e78:	f005 f9e4 	bl	800e244 <sqrtf>
 8008e7c:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54
	_2bz = -_2q1mx * q3 + _2q1my * q2 + mz * q1q1 + _2q2mx * q4 - mz * q2q2 + _2q3 * my * q4 - mz * q3q3 + mz * q4q4;
 8008e80:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8008e84:	eeb1 7a67 	vneg.f32	s14, s15
 8008e88:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8008e8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008e90:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8008e94:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8008e98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008e9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008ea0:	edd7 6a01 	vldr	s13, [r7, #4]
 8008ea4:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8008ea8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008eac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008eb0:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8008eb4:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8008eb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008ebc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008ec0:	edd7 6a01 	vldr	s13, [r7, #4]
 8008ec4:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8008ec8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008ecc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008ed0:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 8008ed4:	edd7 7a02 	vldr	s15, [r7, #8]
 8008ed8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8008edc:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8008ee0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008ee4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008ee8:	edd7 6a01 	vldr	s13, [r7, #4]
 8008eec:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8008ef0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008ef4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008ef8:	edd7 6a01 	vldr	s13, [r7, #4]
 8008efc:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8008f00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008f04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f08:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	_4bx = 2.0f * _2bx;
 8008f0c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8008f10:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008f14:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	_4bz = 2.0f * _2bz;
 8008f18:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8008f1c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008f20:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	//printf("Original: %f\t%f\n\r", _2bx, _2bz);

	// Gradient decent algorithm corrective step
	s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax) + _2q2 * (2.0f * q1q2 + _2q3q4 - ay) - _2bz * q3 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q4 + _2bz * q2) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q3 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8008f24:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8008f28:	eeb1 7a67 	vneg.f32	s14, s15
 8008f2c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8008f30:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8008f34:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8008f38:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8008f3c:	edd7 7a06 	vldr	s15, [r7, #24]
 8008f40:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008f44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008f48:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8008f4c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8008f50:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8008f54:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008f58:	edd7 7a05 	vldr	s15, [r7, #20]
 8008f5c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8008f60:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8008f64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008f68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008f6c:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8008f70:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8008f74:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8008f78:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8008f7c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8008f80:	ee36 6a67 	vsub.f32	s12, s12, s15
 8008f84:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8008f88:	ee36 6a67 	vsub.f32	s12, s12, s15
 8008f8c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8008f90:	ee26 6a27 	vmul.f32	s12, s12, s15
 8008f94:	edd7 5a20 	vldr	s11, [r7, #128]	; 0x80
 8008f98:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8008f9c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8008fa0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8008fa4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8008fa8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8008fac:	edd7 7a03 	vldr	s15, [r7, #12]
 8008fb0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8008fb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008fb8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008fbc:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8008fc0:	eef1 6a67 	vneg.f32	s13, s15
 8008fc4:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8008fc8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8008fcc:	ed97 6a14 	vldr	s12, [r7, #80]	; 0x50
 8008fd0:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8008fd4:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008fd8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008fdc:	ed97 6a21 	vldr	s12, [r7, #132]	; 0x84
 8008fe0:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8008fe4:	ee36 6a67 	vsub.f32	s12, s12, s15
 8008fe8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8008fec:	ee26 6a27 	vmul.f32	s12, s12, s15
 8008ff0:	edd7 5a25 	vldr	s11, [r7, #148]	; 0x94
 8008ff4:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8008ff8:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8008ffc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009000:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8009004:	ee36 6a27 	vadd.f32	s12, s12, s15
 8009008:	edd7 7a02 	vldr	s15, [r7, #8]
 800900c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8009010:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009014:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009018:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800901c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8009020:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8009024:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 8009028:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800902c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8009030:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009034:	ee26 6a27 	vmul.f32	s12, s12, s15
 8009038:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800903c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8009040:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8009044:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8009048:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800904c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009050:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8009054:	ee36 6a27 	vadd.f32	s12, s12, s15
 8009058:	edd7 7a01 	vldr	s15, [r7, #4]
 800905c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8009060:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009064:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009068:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	s2 = _2q4 * (2.0f * q2q4 - _2q1q3 - ax) + _2q1 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + _2bz * q4 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q3 + _2bz * q1) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q4 - _4bz * q2) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 800906c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8009070:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8009074:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8009078:	ee37 7a67 	vsub.f32	s14, s14, s15
 800907c:	edd7 7a06 	vldr	s15, [r7, #24]
 8009080:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009084:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8009088:	ee27 7a27 	vmul.f32	s14, s14, s15
 800908c:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8009090:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8009094:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8009098:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800909c:	edd7 7a05 	vldr	s15, [r7, #20]
 80090a0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80090a4:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80090a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80090ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80090b0:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80090b4:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80090b8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80090bc:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80090c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80090c4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80090c8:	ee36 6a67 	vsub.f32	s12, s12, s15
 80090cc:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80090d0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80090d4:	ee36 6a67 	vsub.f32	s12, s12, s15
 80090d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80090dc:	ee76 7a67 	vsub.f32	s15, s12, s15
 80090e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80090e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80090e8:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80090ec:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80090f0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80090f4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80090f8:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80090fc:	ee36 6a67 	vsub.f32	s12, s12, s15
 8009100:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8009104:	ee36 6a67 	vsub.f32	s12, s12, s15
 8009108:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800910c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8009110:	edd7 5a20 	vldr	s11, [r7, #128]	; 0x80
 8009114:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8009118:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800911c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009120:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8009124:	ee36 6a27 	vadd.f32	s12, s12, s15
 8009128:	edd7 7a03 	vldr	s15, [r7, #12]
 800912c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8009130:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009134:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009138:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800913c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8009140:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8009144:	ed97 6a14 	vldr	s12, [r7, #80]	; 0x50
 8009148:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800914c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8009150:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009154:	ed97 6a21 	vldr	s12, [r7, #132]	; 0x84
 8009158:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800915c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8009160:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009164:	ee26 6a27 	vmul.f32	s12, s12, s15
 8009168:	edd7 5a25 	vldr	s11, [r7, #148]	; 0x94
 800916c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8009170:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8009174:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009178:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800917c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8009180:	edd7 7a02 	vldr	s15, [r7, #8]
 8009184:	ee76 7a67 	vsub.f32	s15, s12, s15
 8009188:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800918c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009190:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8009194:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8009198:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800919c:	ed97 6a12 	vldr	s12, [r7, #72]	; 0x48
 80091a0:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80091a4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80091a8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80091ac:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 80091b0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80091b4:	ee36 6a27 	vadd.f32	s12, s12, s15
 80091b8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80091bc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80091c0:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80091c4:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80091c8:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80091cc:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80091d0:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80091d4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80091d8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80091dc:	ee36 6a27 	vadd.f32	s12, s12, s15
 80091e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80091e4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80091e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80091ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80091f0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	s3 = -_2q1 * (2.0f * q2q4 - _2q1q3 - ax) + _2q4 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q3 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + (-_4bx * q3 - _2bz * q1) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q2 + _2bz * q4) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q1 - _4bz * q3) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 80091f4:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80091f8:	eeb1 7a67 	vneg.f32	s14, s15
 80091fc:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8009200:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8009204:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8009208:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800920c:	edd7 7a06 	vldr	s15, [r7, #24]
 8009210:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8009214:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009218:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800921c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8009220:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8009224:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009228:	edd7 7a05 	vldr	s15, [r7, #20]
 800922c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8009230:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8009234:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009238:	ee37 7a27 	vadd.f32	s14, s14, s15
 800923c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8009240:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8009244:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8009248:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800924c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009250:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009254:	ee36 6a67 	vsub.f32	s12, s12, s15
 8009258:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800925c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009260:	ee36 6a67 	vsub.f32	s12, s12, s15
 8009264:	edd7 7a04 	vldr	s15, [r7, #16]
 8009268:	ee76 7a67 	vsub.f32	s15, s12, s15
 800926c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009270:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009274:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8009278:	eef1 6a67 	vneg.f32	s13, s15
 800927c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8009280:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8009284:	ed97 6a14 	vldr	s12, [r7, #80]	; 0x50
 8009288:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800928c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8009290:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8009294:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8009298:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800929c:	ee36 6a67 	vsub.f32	s12, s12, s15
 80092a0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80092a4:	ee36 6a67 	vsub.f32	s12, s12, s15
 80092a8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80092ac:	ee26 6a27 	vmul.f32	s12, s12, s15
 80092b0:	edd7 5a20 	vldr	s11, [r7, #128]	; 0x80
 80092b4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80092b8:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80092bc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80092c0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80092c4:	ee36 6a27 	vadd.f32	s12, s12, s15
 80092c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80092cc:	ee76 7a67 	vsub.f32	s15, s12, s15
 80092d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80092d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80092d8:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80092dc:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80092e0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80092e4:	ed97 6a14 	vldr	s12, [r7, #80]	; 0x50
 80092e8:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80092ec:	ee66 7a27 	vmul.f32	s15, s12, s15
 80092f0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80092f4:	ed97 6a21 	vldr	s12, [r7, #132]	; 0x84
 80092f8:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80092fc:	ee36 6a67 	vsub.f32	s12, s12, s15
 8009300:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009304:	ee26 6a27 	vmul.f32	s12, s12, s15
 8009308:	edd7 5a25 	vldr	s11, [r7, #148]	; 0x94
 800930c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8009310:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8009314:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009318:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800931c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8009320:	edd7 7a02 	vldr	s15, [r7, #8]
 8009324:	ee76 7a67 	vsub.f32	s15, s12, s15
 8009328:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800932c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009330:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8009334:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8009338:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800933c:	ed97 6a12 	vldr	s12, [r7, #72]	; 0x48
 8009340:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8009344:	ee66 7a27 	vmul.f32	s15, s12, s15
 8009348:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800934c:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 8009350:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8009354:	ee36 6a27 	vadd.f32	s12, s12, s15
 8009358:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800935c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8009360:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8009364:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8009368:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800936c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8009370:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8009374:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009378:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800937c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8009380:	edd7 7a01 	vldr	s15, [r7, #4]
 8009384:	ee76 7a67 	vsub.f32	s15, s12, s15
 8009388:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800938c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009390:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	s4 = _2q2 * (2.0f * q2q4 - _2q1q3 - ax) + _2q3 * (2.0f * q1q2 + _2q3q4 - ay) + (-_4bx * q4 + _2bz * q2) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q1 + _2bz * q3) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q2 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8009394:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8009398:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800939c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80093a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80093a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80093a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80093ac:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80093b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80093b4:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80093b8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80093bc:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80093c0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80093c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80093c8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80093cc:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80093d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80093d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80093d8:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80093dc:	eef1 6a67 	vneg.f32	s13, s15
 80093e0:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80093e4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80093e8:	ed97 6a14 	vldr	s12, [r7, #80]	; 0x50
 80093ec:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80093f0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80093f4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80093f8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80093fc:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8009400:	ee36 6a67 	vsub.f32	s12, s12, s15
 8009404:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8009408:	ee36 6a67 	vsub.f32	s12, s12, s15
 800940c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009410:	ee26 6a27 	vmul.f32	s12, s12, s15
 8009414:	edd7 5a20 	vldr	s11, [r7, #128]	; 0x80
 8009418:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800941c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8009420:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009424:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8009428:	ee36 6a27 	vadd.f32	s12, s12, s15
 800942c:	edd7 7a03 	vldr	s15, [r7, #12]
 8009430:	ee76 7a67 	vsub.f32	s15, s12, s15
 8009434:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009438:	ee37 7a27 	vadd.f32	s14, s14, s15
 800943c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009440:	eef1 6a67 	vneg.f32	s13, s15
 8009444:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8009448:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800944c:	ed97 6a14 	vldr	s12, [r7, #80]	; 0x50
 8009450:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8009454:	ee66 7a27 	vmul.f32	s15, s12, s15
 8009458:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800945c:	ed97 6a21 	vldr	s12, [r7, #132]	; 0x84
 8009460:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8009464:	ee36 6a67 	vsub.f32	s12, s12, s15
 8009468:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800946c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8009470:	edd7 5a25 	vldr	s11, [r7, #148]	; 0x94
 8009474:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8009478:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800947c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009480:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8009484:	ee36 6a27 	vadd.f32	s12, s12, s15
 8009488:	edd7 7a02 	vldr	s15, [r7, #8]
 800948c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8009490:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009494:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009498:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800949c:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80094a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80094a4:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 80094a8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80094ac:	ee36 6a27 	vadd.f32	s12, s12, s15
 80094b0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80094b4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80094b8:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80094bc:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80094c0:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80094c4:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80094c8:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80094cc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80094d0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80094d4:	ee36 6a27 	vadd.f32	s12, s12, s15
 80094d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80094dc:	ee76 7a67 	vsub.f32	s15, s12, s15
 80094e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80094e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80094e8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	norm = sqrtf(s1 * s1 + s2 * s2 + s3 * s3 + s4 * s4);    // normalise step magnitude
 80094ec:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80094f0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80094f4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80094f8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80094fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009500:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009504:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009508:	ee37 7a27 	vadd.f32	s14, s14, s15
 800950c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8009510:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009514:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009518:	eeb0 0a67 	vmov.f32	s0, s15
 800951c:	f004 fe92 	bl	800e244 <sqrtf>
 8009520:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
	norm = 1.0f/norm;
 8009524:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009528:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800952c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009530:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	s1 *= norm;
 8009534:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8009538:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800953c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009540:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	s2 *= norm;
 8009544:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009548:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800954c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009550:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	s3 *= norm;
 8009554:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8009558:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800955c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009560:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	s4 *= norm;
 8009564:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8009568:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800956c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009570:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	///printf("Original: %f\t%f\t%f\t%f\n\r", s1, s2, s3, s4);
	// Compute rate of change of quaternion
	qDot1 = 0.5f * (-q2 * gx - q3 * gy - q4 * gz) - beta * s1;
 8009574:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8009578:	eeb1 7a67 	vneg.f32	s14, s15
 800957c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009580:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009584:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 8009588:	edd7 7a08 	vldr	s15, [r7, #32]
 800958c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009590:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009594:	edd7 6a2d 	vldr	s13, [r7, #180]	; 0xb4
 8009598:	edd7 7a07 	vldr	s15, [r7, #28]
 800959c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80095a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80095a4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80095a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80095ac:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80095b0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80095b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80095b8:	ed9f 5b83 	vldr	d5, [pc, #524]	; 80097c8 <filterUpdate+0xd20>
 80095bc:	ee27 7b05 	vmul.f64	d7, d7, d5
 80095c0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80095c4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80095c8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	qDot2 = 0.5f * (q1 * gx + q3 * gz - q4 * gy) - beta * s2;
 80095cc:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 80095d0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80095d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80095d8:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 80095dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80095e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80095e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80095e8:	edd7 6a2d 	vldr	s13, [r7, #180]	; 0xb4
 80095ec:	edd7 7a08 	vldr	s15, [r7, #32]
 80095f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80095f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80095f8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80095fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009600:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8009604:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8009608:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800960c:	ed9f 5b6e 	vldr	d5, [pc, #440]	; 80097c8 <filterUpdate+0xd20>
 8009610:	ee27 7b05 	vmul.f64	d7, d7, d5
 8009614:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009618:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800961c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	qDot3 = 0.5f * (q1 * gy - q2 * gz + q4 * gx) - beta * s3;
 8009620:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8009624:	edd7 7a08 	vldr	s15, [r7, #32]
 8009628:	ee27 7a27 	vmul.f32	s14, s14, s15
 800962c:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 8009630:	edd7 7a07 	vldr	s15, [r7, #28]
 8009634:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009638:	ee37 7a67 	vsub.f32	s14, s14, s15
 800963c:	edd7 6a2d 	vldr	s13, [r7, #180]	; 0xb4
 8009640:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009644:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009648:	ee77 7a27 	vadd.f32	s15, s14, s15
 800964c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009650:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009654:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8009658:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800965c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8009660:	ed9f 5b59 	vldr	d5, [pc, #356]	; 80097c8 <filterUpdate+0xd20>
 8009664:	ee27 7b05 	vmul.f64	d7, d7, d5
 8009668:	ee36 7b47 	vsub.f64	d7, d6, d7
 800966c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8009670:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	qDot4 = 0.5f * (q1 * gz + q2 * gy - q3 * gx) - beta * s4;
 8009674:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8009678:	edd7 7a07 	vldr	s15, [r7, #28]
 800967c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009680:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 8009684:	edd7 7a08 	vldr	s15, [r7, #32]
 8009688:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800968c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009690:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 8009694:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009698:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800969c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80096a0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80096a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80096a8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80096ac:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80096b0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80096b4:	ed9f 5b44 	vldr	d5, [pc, #272]	; 80097c8 <filterUpdate+0xd20>
 80096b8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80096bc:	ee36 7b47 	vsub.f64	d7, d6, d7
 80096c0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80096c4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	// Integrate to yield quaternion
	q1 += qDot1 * deltat;
 80096c8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80096cc:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 80096d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096d4:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 80096d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80096dc:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
	q2 += qDot2 * deltat;
 80096e0:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80096e4:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 80096e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096ec:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 80096f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80096f4:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
	q3 += qDot3 * deltat;
 80096f8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80096fc:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8009700:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009704:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8009708:	ee77 7a27 	vadd.f32	s15, s14, s15
 800970c:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
	q4 += qDot4 * deltat;
 8009710:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009714:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8009718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800971c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8009720:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009724:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
//	q1 = 0.923871f;
//	q2 = -0.000442f;
//	q3 = -0.000182f;
//	q4 = -0.382663f;

	norm = sqrtf(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);    // normalise quaternion
 8009728:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800972c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8009730:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8009734:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009738:	ee37 7a27 	vadd.f32	s14, s14, s15
 800973c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8009740:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009744:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009748:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800974c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009750:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009754:	eeb0 0a67 	vmov.f32	s0, s15
 8009758:	f004 fd74 	bl	800e244 <sqrtf>
 800975c:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
	norm = 1.0f/norm;
 8009760:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009764:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8009768:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800976c:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	q[0] = q1 * norm;
 8009770:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8009774:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8009778:	ee67 7a27 	vmul.f32	s15, s14, s15
 800977c:	4b14      	ldr	r3, [pc, #80]	; (80097d0 <filterUpdate+0xd28>)
 800977e:	edc3 7a00 	vstr	s15, [r3]
	q[1] = q2 * norm;
 8009782:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8009786:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800978a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800978e:	4b10      	ldr	r3, [pc, #64]	; (80097d0 <filterUpdate+0xd28>)
 8009790:	edc3 7a01 	vstr	s15, [r3, #4]
	q[2] = q3 * norm;
 8009794:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8009798:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800979c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097a0:	4b0b      	ldr	r3, [pc, #44]	; (80097d0 <filterUpdate+0xd28>)
 80097a2:	edc3 7a02 	vstr	s15, [r3, #8]
	q[3] = q4 * norm;
 80097a6:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80097aa:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80097ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097b2:	4b07      	ldr	r3, [pc, #28]	; (80097d0 <filterUpdate+0xd28>)
 80097b4:	edc3 7a03 	vstr	s15, [r3, #12]
 80097b8:	e002      	b.n	80097c0 <filterUpdate+0xd18>
	if (norm == 0.0f) return; // handle NaN
 80097ba:	bf00      	nop
 80097bc:	e000      	b.n	80097c0 <filterUpdate+0xd18>
	if (norm == 0.0f) return; // handle NaN
 80097be:	bf00      	nop
}
 80097c0:	37c8      	adds	r7, #200	; 0xc8
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}
 80097c6:	bf00      	nop
 80097c8:	aa09f411 	.word	0xaa09f411
 80097cc:	3fc358e1 	.word	0x3fc358e1
 80097d0:	24000010 	.word	0x24000010

080097d4 <getRoll>:

float getRoll()
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b082      	sub	sp, #8
 80097d8:	af00      	add	r7, sp, #0
	float roll = atan2(2.0f * (q[0] * q[1] + q[2] * q[3]), q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3]);
 80097da:	4b2a      	ldr	r3, [pc, #168]	; (8009884 <getRoll+0xb0>)
 80097dc:	ed93 7a00 	vldr	s14, [r3]
 80097e0:	4b28      	ldr	r3, [pc, #160]	; (8009884 <getRoll+0xb0>)
 80097e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80097e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80097ea:	4b26      	ldr	r3, [pc, #152]	; (8009884 <getRoll+0xb0>)
 80097ec:	edd3 6a02 	vldr	s13, [r3, #8]
 80097f0:	4b24      	ldr	r3, [pc, #144]	; (8009884 <getRoll+0xb0>)
 80097f2:	edd3 7a03 	vldr	s15, [r3, #12]
 80097f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80097fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80097fe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009802:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8009806:	4b1f      	ldr	r3, [pc, #124]	; (8009884 <getRoll+0xb0>)
 8009808:	ed93 6a00 	vldr	s12, [r3]
 800980c:	4b1d      	ldr	r3, [pc, #116]	; (8009884 <getRoll+0xb0>)
 800980e:	edd3 6a00 	vldr	s13, [r3]
 8009812:	ee26 6a26 	vmul.f32	s12, s12, s13
 8009816:	4b1b      	ldr	r3, [pc, #108]	; (8009884 <getRoll+0xb0>)
 8009818:	edd3 5a01 	vldr	s11, [r3, #4]
 800981c:	4b19      	ldr	r3, [pc, #100]	; (8009884 <getRoll+0xb0>)
 800981e:	edd3 6a01 	vldr	s13, [r3, #4]
 8009822:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8009826:	ee36 6a66 	vsub.f32	s12, s12, s13
 800982a:	4b16      	ldr	r3, [pc, #88]	; (8009884 <getRoll+0xb0>)
 800982c:	edd3 5a02 	vldr	s11, [r3, #8]
 8009830:	4b14      	ldr	r3, [pc, #80]	; (8009884 <getRoll+0xb0>)
 8009832:	edd3 6a02 	vldr	s13, [r3, #8]
 8009836:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800983a:	ee36 6a66 	vsub.f32	s12, s12, s13
 800983e:	4b11      	ldr	r3, [pc, #68]	; (8009884 <getRoll+0xb0>)
 8009840:	edd3 5a03 	vldr	s11, [r3, #12]
 8009844:	4b0f      	ldr	r3, [pc, #60]	; (8009884 <getRoll+0xb0>)
 8009846:	edd3 6a03 	vldr	s13, [r3, #12]
 800984a:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800984e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8009852:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8009856:	eeb0 1b46 	vmov.f64	d1, d6
 800985a:	eeb0 0b47 	vmov.f64	d0, d7
 800985e:	f004 fcb7 	bl	800e1d0 <atan2>
 8009862:	eeb0 7b40 	vmov.f64	d7, d0
 8009866:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800986a:	edc7 7a01 	vstr	s15, [r7, #4]
	return roll * 57.29578f;
 800986e:	edd7 7a01 	vldr	s15, [r7, #4]
 8009872:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8009888 <getRoll+0xb4>
 8009876:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800987a:	eeb0 0a67 	vmov.f32	s0, s15
 800987e:	3708      	adds	r7, #8
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}
 8009884:	24000010 	.word	0x24000010
 8009888:	42652ee1 	.word	0x42652ee1

0800988c <getPitch>:

float getPitch()
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b082      	sub	sp, #8
 8009890:	af00      	add	r7, sp, #0
	float pitch = -asin(2.0f * (q[1] * q[3] - q[0] * q[2]));
 8009892:	4b16      	ldr	r3, [pc, #88]	; (80098ec <getPitch+0x60>)
 8009894:	ed93 7a01 	vldr	s14, [r3, #4]
 8009898:	4b14      	ldr	r3, [pc, #80]	; (80098ec <getPitch+0x60>)
 800989a:	edd3 7a03 	vldr	s15, [r3, #12]
 800989e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80098a2:	4b12      	ldr	r3, [pc, #72]	; (80098ec <getPitch+0x60>)
 80098a4:	edd3 6a00 	vldr	s13, [r3]
 80098a8:	4b10      	ldr	r3, [pc, #64]	; (80098ec <getPitch+0x60>)
 80098aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80098ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80098b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80098b6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80098ba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80098be:	eeb0 0b47 	vmov.f64	d0, d7
 80098c2:	f004 fc59 	bl	800e178 <asin>
 80098c6:	eeb0 7b40 	vmov.f64	d7, d0
 80098ca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80098ce:	eef1 7a67 	vneg.f32	s15, s15
 80098d2:	edc7 7a01 	vstr	s15, [r7, #4]
	return pitch * 57.29578f;
 80098d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80098da:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80098f0 <getPitch+0x64>
 80098de:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80098e2:	eeb0 0a67 	vmov.f32	s0, s15
 80098e6:	3708      	adds	r7, #8
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}
 80098ec:	24000010 	.word	0x24000010
 80098f0:	42652ee1 	.word	0x42652ee1

080098f4 <getYaw>:

float getYaw()
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b082      	sub	sp, #8
 80098f8:	af00      	add	r7, sp, #0
	float yaw = atan2(2.0f * (q[1] * q[2] + q[0] * q[3]), q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3]);
 80098fa:	4b2c      	ldr	r3, [pc, #176]	; (80099ac <getYaw+0xb8>)
 80098fc:	ed93 7a01 	vldr	s14, [r3, #4]
 8009900:	4b2a      	ldr	r3, [pc, #168]	; (80099ac <getYaw+0xb8>)
 8009902:	edd3 7a02 	vldr	s15, [r3, #8]
 8009906:	ee27 7a27 	vmul.f32	s14, s14, s15
 800990a:	4b28      	ldr	r3, [pc, #160]	; (80099ac <getYaw+0xb8>)
 800990c:	edd3 6a00 	vldr	s13, [r3]
 8009910:	4b26      	ldr	r3, [pc, #152]	; (80099ac <getYaw+0xb8>)
 8009912:	edd3 7a03 	vldr	s15, [r3, #12]
 8009916:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800991a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800991e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009922:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8009926:	4b21      	ldr	r3, [pc, #132]	; (80099ac <getYaw+0xb8>)
 8009928:	ed93 6a00 	vldr	s12, [r3]
 800992c:	4b1f      	ldr	r3, [pc, #124]	; (80099ac <getYaw+0xb8>)
 800992e:	edd3 6a00 	vldr	s13, [r3]
 8009932:	ee26 6a26 	vmul.f32	s12, s12, s13
 8009936:	4b1d      	ldr	r3, [pc, #116]	; (80099ac <getYaw+0xb8>)
 8009938:	edd3 5a01 	vldr	s11, [r3, #4]
 800993c:	4b1b      	ldr	r3, [pc, #108]	; (80099ac <getYaw+0xb8>)
 800993e:	edd3 6a01 	vldr	s13, [r3, #4]
 8009942:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8009946:	ee36 6a26 	vadd.f32	s12, s12, s13
 800994a:	4b18      	ldr	r3, [pc, #96]	; (80099ac <getYaw+0xb8>)
 800994c:	edd3 5a02 	vldr	s11, [r3, #8]
 8009950:	4b16      	ldr	r3, [pc, #88]	; (80099ac <getYaw+0xb8>)
 8009952:	edd3 6a02 	vldr	s13, [r3, #8]
 8009956:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800995a:	ee36 6a66 	vsub.f32	s12, s12, s13
 800995e:	4b13      	ldr	r3, [pc, #76]	; (80099ac <getYaw+0xb8>)
 8009960:	edd3 5a03 	vldr	s11, [r3, #12]
 8009964:	4b11      	ldr	r3, [pc, #68]	; (80099ac <getYaw+0xb8>)
 8009966:	edd3 6a03 	vldr	s13, [r3, #12]
 800996a:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800996e:	ee76 6a66 	vsub.f32	s13, s12, s13
 8009972:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8009976:	eeb0 1b46 	vmov.f64	d1, d6
 800997a:	eeb0 0b47 	vmov.f64	d0, d7
 800997e:	f004 fc27 	bl	800e1d0 <atan2>
 8009982:	eeb0 7b40 	vmov.f64	d7, d0
 8009986:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800998a:	edc7 7a01 	vstr	s15, [r7, #4]
	return yaw * 57.29578f + 180.0f;
 800998e:	edd7 7a01 	vldr	s15, [r7, #4]
 8009992:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80099b0 <getYaw+0xbc>
 8009996:	ee67 7a87 	vmul.f32	s15, s15, s14
 800999a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80099b4 <getYaw+0xc0>
 800999e:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 80099a2:	eeb0 0a67 	vmov.f32	s0, s15
 80099a6:	3708      	adds	r7, #8
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}
 80099ac:	24000010 	.word	0x24000010
 80099b0:	42652ee1 	.word	0x42652ee1
 80099b4:	43340000 	.word	0x43340000

080099b8 <_ZN3MatmlEfRKNS_10QuaternionE>:
	Quaternion Inversed() const;
	float Norm() const;
};

inline Quaternion operator*(float f, const Quaternion& q)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b08a      	sub	sp, #40	; 0x28
 80099bc:	af00      	add	r7, sp, #0
 80099be:	ed87 0a05 	vstr	s0, [r7, #20]
 80099c2:	6138      	str	r0, [r7, #16]
	return q * f;
 80099c4:	ed97 0a05 	vldr	s0, [r7, #20]
 80099c8:	6938      	ldr	r0, [r7, #16]
 80099ca:	f001 fab4 	bl	800af36 <_ZNK3Mat10QuaternionmlEf>
 80099ce:	eeb0 6a40 	vmov.f32	s12, s0
 80099d2:	eef0 6a60 	vmov.f32	s13, s1
 80099d6:	eeb0 7a41 	vmov.f32	s14, s2
 80099da:	eef0 7a61 	vmov.f32	s15, s3
 80099de:	ed87 6a06 	vstr	s12, [r7, #24]
 80099e2:	edc7 6a07 	vstr	s13, [r7, #28]
 80099e6:	ed87 7a08 	vstr	s14, [r7, #32]
 80099ea:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 80099ee:	69b8      	ldr	r0, [r7, #24]
 80099f0:	69f9      	ldr	r1, [r7, #28]
 80099f2:	6a3a      	ldr	r2, [r7, #32]
 80099f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f6:	ee06 0a10 	vmov	s12, r0
 80099fa:	ee06 1a90 	vmov	s13, r1
 80099fe:	ee07 2a10 	vmov	s14, r2
 8009a02:	ee07 3a90 	vmov	s15, r3
}
 8009a06:	eeb0 0a46 	vmov.f32	s0, s12
 8009a0a:	eef0 0a66 	vmov.f32	s1, s13
 8009a0e:	eeb0 1a47 	vmov.f32	s2, s14
 8009a12:	eef0 1a67 	vmov.f32	s3, s15
 8009a16:	3728      	adds	r7, #40	; 0x28
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <_ZSt4asinf>:
  { return __builtin_asinf(__x); }
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b082      	sub	sp, #8
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	ed87 0a01 	vstr	s0, [r7, #4]
 8009a26:	ed97 0a01 	vldr	s0, [r7, #4]
 8009a2a:	f004 fbdd 	bl	800e1e8 <asinf>
 8009a2e:	eef0 7a40 	vmov.f32	s15, s0
 8009a32:	eeb0 0a67 	vmov.f32	s0, s15
 8009a36:	3708      	adds	r7, #8
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}

08009a3c <_ZSt5atan2ff>:
  { return __builtin_atan2f(__y, __x); }
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b082      	sub	sp, #8
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	ed87 0a01 	vstr	s0, [r7, #4]
 8009a46:	edc7 0a00 	vstr	s1, [r7]
 8009a4a:	edd7 0a00 	vldr	s1, [r7]
 8009a4e:	ed97 0a01 	vldr	s0, [r7, #4]
 8009a52:	f004 fbf5 	bl	800e240 <atan2f>
 8009a56:	eef0 7a40 	vmov.f32	s15, s0
 8009a5a:	eeb0 0a67 	vmov.f32	s0, s15
 8009a5e:	3708      	adds	r7, #8
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <_ZN10Algorithms14MadgwickFilterC1Ef>:
{

Matrix<4, 6> Jgbt(const Quaternion& q, const Quaternion& b);
Matrix<6, 1> fgb(const Quaternion& q, const Quaternion& a, const Quaternion& b, const Quaternion& m);

MadgwickFilter::MadgwickFilter(float beta): _beta(beta)
 8009a64:	b480      	push	{r7}
 8009a66:	b083      	sub	sp, #12
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	ed87 0a00 	vstr	s0, [r7]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	683a      	ldr	r2, [r7, #0]
 8009a74:	611a      	str	r2, [r3, #16]
{
	_q = {1.0f, 0.0f, 0.0f, 0.0f};
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8009a7c:	601a      	str	r2, [r3, #0]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f04f 0200 	mov.w	r2, #0
 8009a84:	605a      	str	r2, [r3, #4]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f04f 0200 	mov.w	r2, #0
 8009a8c:	609a      	str	r2, [r3, #8]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f04f 0200 	mov.w	r2, #0
 8009a94:	60da      	str	r2, [r3, #12]
}
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	4618      	mov	r0, r3
 8009a9a:	370c      	adds	r7, #12
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa2:	4770      	bx	lr

08009aa4 <_ZN10Algorithms14MadgwickFilter6UpdateEffffffffff>:

void MadgwickFilter::Update(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz, float time)
{
 8009aa4:	b5b0      	push	{r4, r5, r7, lr}
 8009aa6:	b0ea      	sub	sp, #424	; 0x1a8
 8009aa8:	af02      	add	r7, sp, #8
 8009aaa:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8009aae:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8009ab2:	6018      	str	r0, [r3, #0]
 8009ab4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8009ab8:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8009abc:	ed83 0a00 	vstr	s0, [r3]
 8009ac0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8009ac4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8009ac8:	edc3 0a00 	vstr	s1, [r3]
 8009acc:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8009ad0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8009ad4:	ed83 1a00 	vstr	s2, [r3]
 8009ad8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8009adc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8009ae0:	edc3 1a00 	vstr	s3, [r3]
 8009ae4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8009ae8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8009aec:	ed83 2a00 	vstr	s4, [r3]
 8009af0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8009af4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8009af8:	edc3 2a00 	vstr	s5, [r3]
 8009afc:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8009b00:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8009b04:	ed83 3a00 	vstr	s6, [r3]
 8009b08:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8009b0c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8009b10:	edc3 3a00 	vstr	s7, [r3]
 8009b14:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8009b18:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8009b1c:	ed83 4a00 	vstr	s8, [r3]
 8009b20:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8009b24:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8009b28:	edc3 4a00 	vstr	s9, [r3]
	static float last_time{time};
 8009b2c:	4bdf      	ldr	r3, [pc, #892]	; (8009eac <_ZN10Algorithms14MadgwickFilter6UpdateEffffffffff+0x408>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f3bf 8f5b 	dmb	ish
 8009b34:	f003 0301 	and.w	r3, r3, #1
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	bf0c      	ite	eq
 8009b3c:	2301      	moveq	r3, #1
 8009b3e:	2300      	movne	r3, #0
 8009b40:	b2db      	uxtb	r3, r3
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d014      	beq.n	8009b70 <_ZN10Algorithms14MadgwickFilter6UpdateEffffffffff+0xcc>
 8009b46:	48d9      	ldr	r0, [pc, #868]	; (8009eac <_ZN10Algorithms14MadgwickFilter6UpdateEffffffffff+0x408>)
 8009b48:	f004 fb06 	bl	800e158 <__cxa_guard_acquire>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	bf14      	ite	ne
 8009b52:	2301      	movne	r3, #1
 8009b54:	2300      	moveq	r3, #0
 8009b56:	b2db      	uxtb	r3, r3
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d009      	beq.n	8009b70 <_ZN10Algorithms14MadgwickFilter6UpdateEffffffffff+0xcc>
 8009b5c:	4ad4      	ldr	r2, [pc, #848]	; (8009eb0 <_ZN10Algorithms14MadgwickFilter6UpdateEffffffffff+0x40c>)
 8009b5e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8009b62:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	6013      	str	r3, [r2, #0]
 8009b6a:	48d0      	ldr	r0, [pc, #832]	; (8009eac <_ZN10Algorithms14MadgwickFilter6UpdateEffffffffff+0x408>)
 8009b6c:	f004 fb00 	bl	800e170 <__cxa_guard_release>
	float deltat = time - last_time;
 8009b70:	4bcf      	ldr	r3, [pc, #828]	; (8009eb0 <_ZN10Algorithms14MadgwickFilter6UpdateEffffffffff+0x40c>)
 8009b72:	edd3 7a00 	vldr	s15, [r3]
 8009b76:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8009b7a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8009b7e:	ed93 7a00 	vldr	s14, [r3]
 8009b82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009b86:	edc7 7a67 	vstr	s15, [r7, #412]	; 0x19c
	last_time = time;
 8009b8a:	4ac9      	ldr	r2, [pc, #804]	; (8009eb0 <_ZN10Algorithms14MadgwickFilter6UpdateEffffffffff+0x40c>)
 8009b8c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8009b90:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	6013      	str	r3, [r2, #0]

	//printf("Myfilter: %f\n\r", deltat);

	Quaternion w{0.0f, gx, gy, gz};
 8009b98:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	601a      	str	r2, [r3, #0]
 8009ba0:	605a      	str	r2, [r3, #4]
 8009ba2:	609a      	str	r2, [r3, #8]
 8009ba4:	60da      	str	r2, [r3, #12]
 8009ba6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8009baa:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009bb4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8009bb8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009bc2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8009bc6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	Quaternion Sm{0.0f, mx, my, mz}; Sm.Normalise();
 8009bd0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8009bd4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009bd8:	461a      	mov	r2, r3
 8009bda:	2300      	movs	r3, #0
 8009bdc:	6013      	str	r3, [r2, #0]
 8009bde:	6053      	str	r3, [r2, #4]
 8009be0:	6093      	str	r3, [r2, #8]
 8009be2:	60d3      	str	r3, [r2, #12]
 8009be4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8009be8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009bec:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8009bf0:	f5a2 72c8 	sub.w	r2, r2, #400	; 0x190
 8009bf4:	6812      	ldr	r2, [r2, #0]
 8009bf6:	605a      	str	r2, [r3, #4]
 8009bf8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8009bfc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009c00:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8009c04:	f5a2 72ca 	sub.w	r2, r2, #404	; 0x194
 8009c08:	6812      	ldr	r2, [r2, #0]
 8009c0a:	609a      	str	r2, [r3, #8]
 8009c0c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8009c10:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009c14:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8009c18:	f5a2 72cc 	sub.w	r2, r2, #408	; 0x198
 8009c1c:	6812      	ldr	r2, [r2, #0]
 8009c1e:	60da      	str	r2, [r3, #12]
 8009c20:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8009c24:	4618      	mov	r0, r3
 8009c26:	f001 f83d 	bl	800aca4 <_ZN3Mat10Quaternion9NormaliseEv>
	Quaternion Sa{0.0f, ax, ay, az}; Sa.Normalise();
 8009c2a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8009c2e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009c32:	461a      	mov	r2, r3
 8009c34:	2300      	movs	r3, #0
 8009c36:	6013      	str	r3, [r2, #0]
 8009c38:	6053      	str	r3, [r2, #4]
 8009c3a:	6093      	str	r3, [r2, #8]
 8009c3c:	60d3      	str	r3, [r2, #12]
 8009c3e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8009c42:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009c46:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8009c4a:	f5a2 72c2 	sub.w	r2, r2, #388	; 0x184
 8009c4e:	6812      	ldr	r2, [r2, #0]
 8009c50:	605a      	str	r2, [r3, #4]
 8009c52:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8009c56:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009c5a:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8009c5e:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8009c62:	6812      	ldr	r2, [r2, #0]
 8009c64:	609a      	str	r2, [r3, #8]
 8009c66:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8009c6a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009c6e:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8009c72:	f5a2 72c6 	sub.w	r2, r2, #396	; 0x18c
 8009c76:	6812      	ldr	r2, [r2, #0]
 8009c78:	60da      	str	r2, [r3, #12]
 8009c7a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f001 f810 	bl	800aca4 <_ZN3Mat10Quaternion9NormaliseEv>
	Quaternion q_wt = 0.5f * (_q * w);
 8009c84:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8009c88:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8009c92:	4611      	mov	r1, r2
 8009c94:	4618      	mov	r0, r3
 8009c96:	f001 f883 	bl	800ada0 <_ZNK3Mat10QuaternionmlERKS0_>
 8009c9a:	eeb0 6a40 	vmov.f32	s12, s0
 8009c9e:	eef0 6a60 	vmov.f32	s13, s1
 8009ca2:	eeb0 7a41 	vmov.f32	s14, s2
 8009ca6:	eef0 7a61 	vmov.f32	s15, s3
 8009caa:	ed87 6a2d 	vstr	s12, [r7, #180]	; 0xb4
 8009cae:	edc7 6a2e 	vstr	s13, [r7, #184]	; 0xb8
 8009cb2:	ed87 7a2f 	vstr	s14, [r7, #188]	; 0xbc
 8009cb6:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
 8009cba:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8009cc4:	f7ff fe78 	bl	80099b8 <_ZN3MatmlEfRKNS_10QuaternionE>
 8009cc8:	eeb0 6a40 	vmov.f32	s12, s0
 8009ccc:	eef0 6a60 	vmov.f32	s13, s1
 8009cd0:	eeb0 7a41 	vmov.f32	s14, s2
 8009cd4:	eef0 7a61 	vmov.f32	s15, s3
 8009cd8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8009cdc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009ce0:	ed83 6a00 	vstr	s12, [r3]
 8009ce4:	edc3 6a01 	vstr	s13, [r3, #4]
 8009ce8:	ed83 7a02 	vstr	s14, [r3, #8]
 8009cec:	edc3 7a03 	vstr	s15, [r3, #12]
	Quaternion Eh = _q * Sm * _q.Inversed();
 8009cf0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8009cf4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8009cfe:	4611      	mov	r1, r2
 8009d00:	4618      	mov	r0, r3
 8009d02:	f001 f84d 	bl	800ada0 <_ZNK3Mat10QuaternionmlERKS0_>
 8009d06:	eeb0 6a40 	vmov.f32	s12, s0
 8009d0a:	eef0 6a60 	vmov.f32	s13, s1
 8009d0e:	eeb0 7a41 	vmov.f32	s14, s2
 8009d12:	eef0 7a61 	vmov.f32	s15, s3
 8009d16:	ed87 6a31 	vstr	s12, [r7, #196]	; 0xc4
 8009d1a:	edc7 6a32 	vstr	s13, [r7, #200]	; 0xc8
 8009d1e:	ed87 7a33 	vstr	s14, [r7, #204]	; 0xcc
 8009d22:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
 8009d26:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8009d2a:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	4618      	mov	r0, r3
 8009d32:	f001 f96c 	bl	800b00e <_ZNK3Mat10Quaternion8InversedEv>
 8009d36:	eeb0 6a40 	vmov.f32	s12, s0
 8009d3a:	eef0 6a60 	vmov.f32	s13, s1
 8009d3e:	eeb0 7a41 	vmov.f32	s14, s2
 8009d42:	eef0 7a61 	vmov.f32	s15, s3
 8009d46:	ed87 6a35 	vstr	s12, [r7, #212]	; 0xd4
 8009d4a:	edc7 6a36 	vstr	s13, [r7, #216]	; 0xd8
 8009d4e:	ed87 7a37 	vstr	s14, [r7, #220]	; 0xdc
 8009d52:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0
 8009d56:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8009d5a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8009d5e:	4611      	mov	r1, r2
 8009d60:	4618      	mov	r0, r3
 8009d62:	f001 f81d 	bl	800ada0 <_ZNK3Mat10QuaternionmlERKS0_>
 8009d66:	eeb0 6a40 	vmov.f32	s12, s0
 8009d6a:	eef0 6a60 	vmov.f32	s13, s1
 8009d6e:	eeb0 7a41 	vmov.f32	s14, s2
 8009d72:	eef0 7a61 	vmov.f32	s15, s3
 8009d76:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8009d7a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009d7e:	ed83 6a00 	vstr	s12, [r3]
 8009d82:	edc3 6a01 	vstr	s13, [r3, #4]
 8009d86:	ed83 7a02 	vstr	s14, [r3, #8]
 8009d8a:	edc3 7a03 	vstr	s15, [r3, #12]
	Quaternion Eb{0.0f, 0.0f, 0.0f, 0.0f};
 8009d8e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8009d92:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8009d96:	461a      	mov	r2, r3
 8009d98:	2300      	movs	r3, #0
 8009d9a:	6013      	str	r3, [r2, #0]
 8009d9c:	6053      	str	r3, [r2, #4]
 8009d9e:	6093      	str	r3, [r2, #8]
 8009da0:	60d3      	str	r3, [r2, #12]
	Eb.x = sqrt(Eh.x*Eh.x + Eh.y*Eh.y); Eb.z = Eh.z;
 8009da2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8009da6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009daa:	ed93 7a01 	vldr	s14, [r3, #4]
 8009dae:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8009db2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009db6:	edd3 7a01 	vldr	s15, [r3, #4]
 8009dba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009dbe:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8009dc2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009dc6:	edd3 6a02 	vldr	s13, [r3, #8]
 8009dca:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8009dce:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009dd2:	edd3 7a02 	vldr	s15, [r3, #8]
 8009dd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009dda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009dde:	eeb0 0a67 	vmov.f32	s0, s15
 8009de2:	f7fe f801 	bl	8007de8 <_ZSt4sqrtf>
 8009de6:	eef0 7a40 	vmov.f32	s15, s0
 8009dea:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8009dee:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8009df2:	edc3 7a01 	vstr	s15, [r3, #4]
 8009df6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8009dfa:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009dfe:	68da      	ldr	r2, [r3, #12]
 8009e00:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8009e04:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8009e08:	60da      	str	r2, [r3, #12]
	//printf("Myfilter: %f\t%f\n\r", Eb.x, Eb.z);
	//printf("Myfilter: %f\t%f\t%f\n\r", Sm.x, Sm.y, Sm.z);
	//printf("Myfilter: bx: %f,\tbz: %f\n\r", Eb.x, Eb.z);
	auto Jgbt_fgb = Jgbt(_q, Eb) * fgb(_q, Sa, Eb * 0.5, Sm);
 8009e0a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8009e0e:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8009e12:	6819      	ldr	r1, [r3, #0]
 8009e14:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8009e18:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f000 f9e1 	bl	800a1e4 <_ZN10Algorithms4JgbtERKN3Mat10QuaternionES3_>
 8009e22:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8009e26:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8009e2a:	681c      	ldr	r4, [r3, #0]
 8009e2c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009e30:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8009e34:	4618      	mov	r0, r3
 8009e36:	f001 f87e 	bl	800af36 <_ZNK3Mat10QuaternionmlEf>
 8009e3a:	eeb0 6a40 	vmov.f32	s12, s0
 8009e3e:	eef0 6a60 	vmov.f32	s13, s1
 8009e42:	eeb0 7a41 	vmov.f32	s14, s2
 8009e46:	eef0 7a61 	vmov.f32	s15, s3
 8009e4a:	ed87 6a57 	vstr	s12, [r7, #348]	; 0x15c
 8009e4e:	edc7 6a58 	vstr	s13, [r7, #352]	; 0x160
 8009e52:	ed87 7a59 	vstr	s14, [r7, #356]	; 0x164
 8009e56:	edc7 7a5a 	vstr	s15, [r7, #360]	; 0x168
 8009e5a:	f507 70a2 	add.w	r0, r7, #324	; 0x144
 8009e5e:	f507 71ae 	add.w	r1, r7, #348	; 0x15c
 8009e62:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8009e66:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8009e6a:	9300      	str	r3, [sp, #0]
 8009e6c:	460b      	mov	r3, r1
 8009e6e:	4621      	mov	r1, r4
 8009e70:	f000 fb1b 	bl	800a4aa <_ZN10Algorithms3fgbERKN3Mat10QuaternionES3_S3_S3_>
 8009e74:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 8009e78:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8009e7c:	4611      	mov	r1, r2
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f000 fc33 	bl	800a6ea <_ZNK3Mat6MatrixILh4ELh6EEmlILh1EEENS0_ILh4EXT_EEERKNS0_ILh6EXT_EEE>
 8009e84:	eeb0 6a40 	vmov.f32	s12, s0
 8009e88:	eef0 6a60 	vmov.f32	s13, s1
 8009e8c:	eeb0 7a41 	vmov.f32	s14, s2
 8009e90:	eef0 7a61 	vmov.f32	s15, s3
 8009e94:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8009e98:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8009e9c:	ed83 6a00 	vstr	s12, [r3]
 8009ea0:	edc3 6a01 	vstr	s13, [r3, #4]
 8009ea4:	ed83 7a02 	vstr	s14, [r3, #8]
 8009ea8:	e004      	b.n	8009eb4 <_ZN10Algorithms14MadgwickFilter6UpdateEffffffffff+0x410>
 8009eaa:	bf00      	nop
 8009eac:	24000b74 	.word	0x24000b74
 8009eb0:	24000b70 	.word	0x24000b70
 8009eb4:	edc3 7a03 	vstr	s15, [r3, #12]
	Quaternion qJgbt_fgb{Jgbt_fgb(0,0), Jgbt_fgb(1,0), Jgbt_fgb(2,0), Jgbt_fgb(3,0)};
 8009eb8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	2100      	movs	r1, #0
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f000 fc41 	bl	800a748 <_ZN3Mat6MatrixILh4ELh1EEclEhh>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	681a      	ldr	r2, [r3, #0]
 8009eca:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8009ece:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8009ed2:	601a      	str	r2, [r3, #0]
 8009ed4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009ed8:	2200      	movs	r2, #0
 8009eda:	2101      	movs	r1, #1
 8009edc:	4618      	mov	r0, r3
 8009ede:	f000 fc33 	bl	800a748 <_ZN3Mat6MatrixILh4ELh1EEclEhh>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	681a      	ldr	r2, [r3, #0]
 8009ee6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8009eea:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8009eee:	605a      	str	r2, [r3, #4]
 8009ef0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	2102      	movs	r1, #2
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f000 fc25 	bl	800a748 <_ZN3Mat6MatrixILh4ELh1EEclEhh>
 8009efe:	4603      	mov	r3, r0
 8009f00:	681a      	ldr	r2, [r3, #0]
 8009f02:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8009f06:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8009f0a:	609a      	str	r2, [r3, #8]
 8009f0c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009f10:	2200      	movs	r2, #0
 8009f12:	2103      	movs	r1, #3
 8009f14:	4618      	mov	r0, r3
 8009f16:	f000 fc17 	bl	800a748 <_ZN3Mat6MatrixILh4ELh1EEclEhh>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	681a      	ldr	r2, [r3, #0]
 8009f1e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8009f22:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8009f26:	60da      	str	r2, [r3, #12]
	qJgbt_fgb.Normalise();
 8009f28:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f000 feb9 	bl	800aca4 <_ZN3Mat10Quaternion9NormaliseEv>
	//printf("Myfilter: %f\t%f\t%f\t%f\n\r", qJgbt_fgb.w, qJgbt_fgb.x, qJgbt_fgb.y, qJgbt_fgb.z);
	_q = _q + (q_wt - _beta*qJgbt_fgb) * deltat;
 8009f32:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8009f36:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8009f3a:	681d      	ldr	r5, [r3, #0]
 8009f3c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8009f40:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	edd3 7a04 	vldr	s15, [r3, #16]
 8009f4a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009f4e:	4618      	mov	r0, r3
 8009f50:	eeb0 0a67 	vmov.f32	s0, s15
 8009f54:	f7ff fd30 	bl	80099b8 <_ZN3MatmlEfRKNS_10QuaternionE>
 8009f58:	eeb0 6a40 	vmov.f32	s12, s0
 8009f5c:	eef0 6a60 	vmov.f32	s13, s1
 8009f60:	eeb0 7a41 	vmov.f32	s14, s2
 8009f64:	eef0 7a61 	vmov.f32	s15, s3
 8009f68:	ed87 6a63 	vstr	s12, [r7, #396]	; 0x18c
 8009f6c:	edc7 6a64 	vstr	s13, [r7, #400]	; 0x190
 8009f70:	ed87 7a65 	vstr	s14, [r7, #404]	; 0x194
 8009f74:	edc7 7a66 	vstr	s15, [r7, #408]	; 0x198
 8009f78:	f507 72c6 	add.w	r2, r7, #396	; 0x18c
 8009f7c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8009f80:	4611      	mov	r1, r2
 8009f82:	4618      	mov	r0, r3
 8009f84:	f000 fedd 	bl	800ad42 <_ZNK3Mat10QuaternionmiERKS0_>
 8009f88:	eeb0 6a40 	vmov.f32	s12, s0
 8009f8c:	eef0 6a60 	vmov.f32	s13, s1
 8009f90:	eeb0 7a41 	vmov.f32	s14, s2
 8009f94:	eef0 7a61 	vmov.f32	s15, s3
 8009f98:	ed87 6a5f 	vstr	s12, [r7, #380]	; 0x17c
 8009f9c:	edc7 6a60 	vstr	s13, [r7, #384]	; 0x180
 8009fa0:	ed87 7a61 	vstr	s14, [r7, #388]	; 0x184
 8009fa4:	edc7 7a62 	vstr	s15, [r7, #392]	; 0x188
 8009fa8:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8009fac:	ed97 0a67 	vldr	s0, [r7, #412]	; 0x19c
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f000 ffc0 	bl	800af36 <_ZNK3Mat10QuaternionmlEf>
 8009fb6:	eeb0 6a40 	vmov.f32	s12, s0
 8009fba:	eef0 6a60 	vmov.f32	s13, s1
 8009fbe:	eeb0 7a41 	vmov.f32	s14, s2
 8009fc2:	eef0 7a61 	vmov.f32	s15, s3
 8009fc6:	ed87 6a5b 	vstr	s12, [r7, #364]	; 0x16c
 8009fca:	edc7 6a5c 	vstr	s13, [r7, #368]	; 0x170
 8009fce:	ed87 7a5d 	vstr	s14, [r7, #372]	; 0x174
 8009fd2:	edc7 7a5e 	vstr	s15, [r7, #376]	; 0x178
 8009fd6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8009fda:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8009fde:	681c      	ldr	r4, [r3, #0]
 8009fe0:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8009fe4:	4619      	mov	r1, r3
 8009fe6:	4628      	mov	r0, r5
 8009fe8:	f000 fe7c 	bl	800ace4 <_ZNK3Mat10QuaternionplERKS0_>
 8009fec:	eeb0 6a40 	vmov.f32	s12, s0
 8009ff0:	eef0 6a60 	vmov.f32	s13, s1
 8009ff4:	eeb0 7a41 	vmov.f32	s14, s2
 8009ff8:	eef0 7a61 	vmov.f32	s15, s3
 8009ffc:	ed84 6a00 	vstr	s12, [r4]
 800a000:	edc4 6a01 	vstr	s13, [r4, #4]
 800a004:	ed84 7a02 	vstr	s14, [r4, #8]
 800a008:	edc4 7a03 	vstr	s15, [r4, #12]
	//_q = {0.923871f, -0.000442f, -0.000182f, -0.382663f}; ///DEBUG
	_q.Normalise();
 800a00c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800a010:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	4618      	mov	r0, r3
 800a018:	f000 fe44 	bl	800aca4 <_ZN3Mat10Quaternion9NormaliseEv>
}
 800a01c:	bf00      	nop
 800a01e:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 800a022:	46bd      	mov	sp, r7
 800a024:	bdb0      	pop	{r4, r5, r7, pc}
 800a026:	bf00      	nop

0800a028 <_ZNK10Algorithms14MadgwickFilter7GetRollEv>:
{
	return _q;
}

float MadgwickFilter::GetRoll() const
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b084      	sub	sp, #16
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
	float roll = atan2(2.0f * (_q.w * _q.x + _q.y * _q.z), _q.w * _q.w - _q.x * _q.x - _q.y * _q.y + _q.z * _q.z);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	ed93 7a00 	vldr	s14, [r3]
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	edd3 7a01 	vldr	s15, [r3, #4]
 800a03c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	edd3 6a02 	vldr	s13, [r3, #8]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	edd3 7a03 	vldr	s15, [r3, #12]
 800a04c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a050:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a054:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	ed93 7a00 	vldr	s14, [r3]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	edd3 7a00 	vldr	s15, [r3]
 800a064:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	edd3 6a01 	vldr	s13, [r3, #4]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	edd3 7a01 	vldr	s15, [r3, #4]
 800a074:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a078:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	edd3 6a02 	vldr	s13, [r3, #8]
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	edd3 7a02 	vldr	s15, [r3, #8]
 800a088:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a08c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	edd3 6a03 	vldr	s13, [r3, #12]
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	edd3 7a03 	vldr	s15, [r3, #12]
 800a09c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a0a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a0a4:	eef0 0a67 	vmov.f32	s1, s15
 800a0a8:	eeb0 0a46 	vmov.f32	s0, s12
 800a0ac:	f7ff fcc6 	bl	8009a3c <_ZSt5atan2ff>
 800a0b0:	ed87 0a03 	vstr	s0, [r7, #12]
	return roll * 57.29578f;
 800a0b4:	edd7 7a03 	vldr	s15, [r7, #12]
 800a0b8:	ed9f 7a04 	vldr	s14, [pc, #16]	; 800a0cc <_ZNK10Algorithms14MadgwickFilter7GetRollEv+0xa4>
 800a0bc:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800a0c0:	eeb0 0a67 	vmov.f32	s0, s15
 800a0c4:	3710      	adds	r7, #16
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}
 800a0ca:	bf00      	nop
 800a0cc:	42652ee1 	.word	0x42652ee1

0800a0d0 <_ZNK10Algorithms14MadgwickFilter8GetPitchEv>:

float MadgwickFilter::GetPitch() const
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b084      	sub	sp, #16
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
	float pitch = -asin(2.0f * (_q.x * _q.z - _q.w * _q.y));
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	ed93 7a01 	vldr	s14, [r3, #4]
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	edd3 7a03 	vldr	s15, [r3, #12]
 800a0e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	edd3 6a00 	vldr	s13, [r3]
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	edd3 7a02 	vldr	s15, [r3, #8]
 800a0f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a0f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a0fc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a100:	eeb0 0a67 	vmov.f32	s0, s15
 800a104:	f7ff fc8a 	bl	8009a1c <_ZSt4asinf>
 800a108:	eef0 7a40 	vmov.f32	s15, s0
 800a10c:	eef1 7a67 	vneg.f32	s15, s15
 800a110:	edc7 7a03 	vstr	s15, [r7, #12]
	return pitch * 57.29578f;
 800a114:	edd7 7a03 	vldr	s15, [r7, #12]
 800a118:	ed9f 7a04 	vldr	s14, [pc, #16]	; 800a12c <_ZNK10Algorithms14MadgwickFilter8GetPitchEv+0x5c>
 800a11c:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800a120:	eeb0 0a67 	vmov.f32	s0, s15
 800a124:	3710      	adds	r7, #16
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}
 800a12a:	bf00      	nop
 800a12c:	42652ee1 	.word	0x42652ee1

0800a130 <_ZNK10Algorithms14MadgwickFilter6GetYawEv>:

float MadgwickFilter::GetYaw() const
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b084      	sub	sp, #16
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
	float yaw = atan2(2.0f * (_q.x * _q.y + _q.w * _q.z), _q.w * _q.w + _q.x * _q.x - _q.y * _q.y - _q.z * _q.z);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	ed93 7a01 	vldr	s14, [r3, #4]
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	edd3 7a02 	vldr	s15, [r3, #8]
 800a144:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	edd3 6a00 	vldr	s13, [r3]
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	edd3 7a03 	vldr	s15, [r3, #12]
 800a154:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a158:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a15c:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	ed93 7a00 	vldr	s14, [r3]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	edd3 7a00 	vldr	s15, [r3]
 800a16c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	edd3 6a01 	vldr	s13, [r3, #4]
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	edd3 7a01 	vldr	s15, [r3, #4]
 800a17c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a180:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	edd3 6a02 	vldr	s13, [r3, #8]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	edd3 7a02 	vldr	s15, [r3, #8]
 800a190:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a194:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	edd3 6a03 	vldr	s13, [r3, #12]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	edd3 7a03 	vldr	s15, [r3, #12]
 800a1a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a1a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a1ac:	eef0 0a67 	vmov.f32	s1, s15
 800a1b0:	eeb0 0a46 	vmov.f32	s0, s12
 800a1b4:	f7ff fc42 	bl	8009a3c <_ZSt5atan2ff>
 800a1b8:	ed87 0a03 	vstr	s0, [r7, #12]
	return yaw * 57.29578f + 180.0f;
 800a1bc:	edd7 7a03 	vldr	s15, [r7, #12]
 800a1c0:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800a1dc <_ZNK10Algorithms14MadgwickFilter6GetYawEv+0xac>
 800a1c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a1c8:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800a1e0 <_ZNK10Algorithms14MadgwickFilter6GetYawEv+0xb0>
 800a1cc:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800a1d0:	eeb0 0a67 	vmov.f32	s0, s15
 800a1d4:	3710      	adds	r7, #16
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}
 800a1da:	bf00      	nop
 800a1dc:	42652ee1 	.word	0x42652ee1
 800a1e0:	43340000 	.word	0x43340000

0800a1e4 <_ZN10Algorithms4JgbtERKN3Mat10QuaternionES3_>:

Matrix<4, 6> Jgbt(const Quaternion& q, const Quaternion& b)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b09c      	sub	sp, #112	; 0x70
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	60f8      	str	r0, [r7, #12]
 800a1ec:	60b9      	str	r1, [r7, #8]
 800a1ee:	607a      	str	r2, [r7, #4]
	Matrix<4, 6> R
	{{
		-2.0f*q.y,	2.0f*q.x,	0.0f,		-2.0f*b.z*q.y,					-2.0f*b.x*q.z + 2.0f*b.z*q.x,	2.0f*b.x*q.y,
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	edd3 7a02 	vldr	s15, [r3, #8]
 800a1f6:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800a1fa:	ee67 7a87 	vmul.f32	s15, s15, s14
		2.0f*q.z,	2.0f*q.w,	-4.0f*q.x,	2.0f*b.z*q.z,					2.0f*b.x*q.y + 2.0f*b.z*q.w,	2.0f*b.x*q.z - 4.0f*b.z*q.x,
		-2.0f*q.w,	2.0f*q.z,	-4.0f*q.y,	-4.0f*b.x*q.y - 2.0f*b.z*q.w,	2.0f*b.x*q.x + 2.0f*b.z*q.z,	2.0f*b.x*q.w - 4.0f*b.z*q.y,
		2.0f*q.x,	2.0f*q.y,	0.0f,		-4.0f*b.x*q.z + 2.0f*b.z*q.x,	-2.0f*b.x*q.w + 2.0f*b.z*q.y,	2.0f*b.x*q.x
	}};
 800a1fe:	edc7 7a04 	vstr	s15, [r7, #16]
		-2.0f*q.y,	2.0f*q.x,	0.0f,		-2.0f*b.z*q.y,					-2.0f*b.x*q.z + 2.0f*b.z*q.x,	2.0f*b.x*q.y,
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	edd3 7a01 	vldr	s15, [r3, #4]
 800a208:	ee77 7aa7 	vadd.f32	s15, s15, s15
	}};
 800a20c:	edc7 7a05 	vstr	s15, [r7, #20]
 800a210:	f04f 0300 	mov.w	r3, #0
 800a214:	61bb      	str	r3, [r7, #24]
		-2.0f*q.y,	2.0f*q.x,	0.0f,		-2.0f*b.z*q.y,					-2.0f*b.x*q.z + 2.0f*b.z*q.x,	2.0f*b.x*q.y,
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	edd3 7a03 	vldr	s15, [r3, #12]
 800a21c:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800a220:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	edd3 7a02 	vldr	s15, [r3, #8]
 800a22a:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 800a22e:	edc7 7a07 	vstr	s15, [r7, #28]
		-2.0f*q.y,	2.0f*q.x,	0.0f,		-2.0f*b.z*q.y,					-2.0f*b.x*q.z + 2.0f*b.z*q.x,	2.0f*b.x*q.y,
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	edd3 7a01 	vldr	s15, [r3, #4]
 800a238:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800a23c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	edd3 7a03 	vldr	s15, [r3, #12]
 800a246:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	edd3 7a03 	vldr	s15, [r3, #12]
 800a250:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	edd3 7a01 	vldr	s15, [r3, #4]
 800a25a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a25e:	ee77 7a27 	vadd.f32	s15, s14, s15
	}};
 800a262:	edc7 7a08 	vstr	s15, [r7, #32]
		-2.0f*q.y,	2.0f*q.x,	0.0f,		-2.0f*b.z*q.y,					-2.0f*b.x*q.z + 2.0f*b.z*q.x,	2.0f*b.x*q.y,
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	edd3 7a01 	vldr	s15, [r3, #4]
 800a26c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	edd3 7a02 	vldr	s15, [r3, #8]
 800a276:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 800a27a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		2.0f*q.z,	2.0f*q.w,	-4.0f*q.x,	2.0f*b.z*q.z,					2.0f*b.x*q.y + 2.0f*b.z*q.w,	2.0f*b.x*q.z - 4.0f*b.z*q.x,
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	edd3 7a03 	vldr	s15, [r3, #12]
 800a284:	ee77 7aa7 	vadd.f32	s15, s15, s15
	}};
 800a288:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		2.0f*q.z,	2.0f*q.w,	-4.0f*q.x,	2.0f*b.z*q.z,					2.0f*b.x*q.y + 2.0f*b.z*q.w,	2.0f*b.x*q.z - 4.0f*b.z*q.x,
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	edd3 7a00 	vldr	s15, [r3]
 800a292:	ee77 7aa7 	vadd.f32	s15, s15, s15
	}};
 800a296:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		2.0f*q.z,	2.0f*q.w,	-4.0f*q.x,	2.0f*b.z*q.z,					2.0f*b.x*q.y + 2.0f*b.z*q.w,	2.0f*b.x*q.z - 4.0f*b.z*q.x,
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	edd3 7a01 	vldr	s15, [r3, #4]
 800a2a0:	eeb9 7a00 	vmov.f32	s14, #144	; 0xc0800000 -4.0
 800a2a4:	ee67 7a87 	vmul.f32	s15, s15, s14
	}};
 800a2a8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		2.0f*q.z,	2.0f*q.w,	-4.0f*q.x,	2.0f*b.z*q.z,					2.0f*b.x*q.y + 2.0f*b.z*q.w,	2.0f*b.x*q.z - 4.0f*b.z*q.x,
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	edd3 7a03 	vldr	s15, [r3, #12]
 800a2b2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	edd3 7a03 	vldr	s15, [r3, #12]
 800a2bc:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 800a2c0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		2.0f*q.z,	2.0f*q.w,	-4.0f*q.x,	2.0f*b.z*q.z,					2.0f*b.x*q.y + 2.0f*b.z*q.w,	2.0f*b.x*q.z - 4.0f*b.z*q.x,
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	edd3 7a01 	vldr	s15, [r3, #4]
 800a2ca:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	edd3 7a02 	vldr	s15, [r3, #8]
 800a2d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	edd3 7a03 	vldr	s15, [r3, #12]
 800a2de:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	edd3 7a00 	vldr	s15, [r3]
 800a2e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a2ec:	ee77 7a27 	vadd.f32	s15, s14, s15
	}};
 800a2f0:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		2.0f*q.z,	2.0f*q.w,	-4.0f*q.x,	2.0f*b.z*q.z,					2.0f*b.x*q.y + 2.0f*b.z*q.w,	2.0f*b.x*q.z - 4.0f*b.z*q.x,
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	edd3 7a01 	vldr	s15, [r3, #4]
 800a2fa:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	edd3 7a03 	vldr	s15, [r3, #12]
 800a304:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	edd3 7a03 	vldr	s15, [r3, #12]
 800a30e:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800a312:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	edd3 7a01 	vldr	s15, [r3, #4]
 800a31c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a320:	ee77 7a67 	vsub.f32	s15, s14, s15
	}};
 800a324:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		-2.0f*q.w,	2.0f*q.z,	-4.0f*q.y,	-4.0f*b.x*q.y - 2.0f*b.z*q.w,	2.0f*b.x*q.x + 2.0f*b.z*q.z,	2.0f*b.x*q.w - 4.0f*b.z*q.y,
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	edd3 7a00 	vldr	s15, [r3]
 800a32e:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800a332:	ee67 7a87 	vmul.f32	s15, s15, s14
	}};
 800a336:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		-2.0f*q.w,	2.0f*q.z,	-4.0f*q.y,	-4.0f*b.x*q.y - 2.0f*b.z*q.w,	2.0f*b.x*q.x + 2.0f*b.z*q.z,	2.0f*b.x*q.w - 4.0f*b.z*q.y,
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	edd3 7a03 	vldr	s15, [r3, #12]
 800a340:	ee77 7aa7 	vadd.f32	s15, s15, s15
	}};
 800a344:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		-2.0f*q.w,	2.0f*q.z,	-4.0f*q.y,	-4.0f*b.x*q.y - 2.0f*b.z*q.w,	2.0f*b.x*q.x + 2.0f*b.z*q.z,	2.0f*b.x*q.w - 4.0f*b.z*q.y,
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	edd3 7a02 	vldr	s15, [r3, #8]
 800a34e:	eeb9 7a00 	vmov.f32	s14, #144	; 0xc0800000 -4.0
 800a352:	ee67 7a87 	vmul.f32	s15, s15, s14
	}};
 800a356:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		-2.0f*q.w,	2.0f*q.z,	-4.0f*q.y,	-4.0f*b.x*q.y - 2.0f*b.z*q.w,	2.0f*b.x*q.x + 2.0f*b.z*q.z,	2.0f*b.x*q.w - 4.0f*b.z*q.y,
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	edd3 7a01 	vldr	s15, [r3, #4]
 800a360:	eeb9 7a00 	vmov.f32	s14, #144	; 0xc0800000 -4.0
 800a364:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	edd3 7a02 	vldr	s15, [r3, #8]
 800a36e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	edd3 7a03 	vldr	s15, [r3, #12]
 800a378:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	edd3 7a00 	vldr	s15, [r3]
 800a382:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a386:	ee77 7a67 	vsub.f32	s15, s14, s15
	}};
 800a38a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		-2.0f*q.w,	2.0f*q.z,	-4.0f*q.y,	-4.0f*b.x*q.y - 2.0f*b.z*q.w,	2.0f*b.x*q.x + 2.0f*b.z*q.z,	2.0f*b.x*q.w - 4.0f*b.z*q.y,
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	edd3 7a01 	vldr	s15, [r3, #4]
 800a394:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	edd3 7a01 	vldr	s15, [r3, #4]
 800a39e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	edd3 7a03 	vldr	s15, [r3, #12]
 800a3a8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	edd3 7a03 	vldr	s15, [r3, #12]
 800a3b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a3b6:	ee77 7a27 	vadd.f32	s15, s14, s15
	}};
 800a3ba:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		-2.0f*q.w,	2.0f*q.z,	-4.0f*q.y,	-4.0f*b.x*q.y - 2.0f*b.z*q.w,	2.0f*b.x*q.x + 2.0f*b.z*q.z,	2.0f*b.x*q.w - 4.0f*b.z*q.y,
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	edd3 7a01 	vldr	s15, [r3, #4]
 800a3c4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	edd3 7a00 	vldr	s15, [r3]
 800a3ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	edd3 7a03 	vldr	s15, [r3, #12]
 800a3d8:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800a3dc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	edd3 7a02 	vldr	s15, [r3, #8]
 800a3e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a3ea:	ee77 7a67 	vsub.f32	s15, s14, s15
	}};
 800a3ee:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		2.0f*q.x,	2.0f*q.y,	0.0f,		-4.0f*b.x*q.z + 2.0f*b.z*q.x,	-2.0f*b.x*q.w + 2.0f*b.z*q.y,	2.0f*b.x*q.x
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	edd3 7a01 	vldr	s15, [r3, #4]
 800a3f8:	ee77 7aa7 	vadd.f32	s15, s15, s15
	}};
 800a3fc:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		2.0f*q.x,	2.0f*q.y,	0.0f,		-4.0f*b.x*q.z + 2.0f*b.z*q.x,	-2.0f*b.x*q.w + 2.0f*b.z*q.y,	2.0f*b.x*q.x
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	edd3 7a02 	vldr	s15, [r3, #8]
 800a406:	ee77 7aa7 	vadd.f32	s15, s15, s15
	}};
 800a40a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
 800a40e:	f04f 0300 	mov.w	r3, #0
 800a412:	663b      	str	r3, [r7, #96]	; 0x60
		2.0f*q.x,	2.0f*q.y,	0.0f,		-4.0f*b.x*q.z + 2.0f*b.z*q.x,	-2.0f*b.x*q.w + 2.0f*b.z*q.y,	2.0f*b.x*q.x
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	edd3 7a01 	vldr	s15, [r3, #4]
 800a41a:	eeb9 7a00 	vmov.f32	s14, #144	; 0xc0800000 -4.0
 800a41e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	edd3 7a03 	vldr	s15, [r3, #12]
 800a428:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	edd3 7a03 	vldr	s15, [r3, #12]
 800a432:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	edd3 7a01 	vldr	s15, [r3, #4]
 800a43c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a440:	ee77 7a27 	vadd.f32	s15, s14, s15
	}};
 800a444:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		2.0f*q.x,	2.0f*q.y,	0.0f,		-4.0f*b.x*q.z + 2.0f*b.z*q.x,	-2.0f*b.x*q.w + 2.0f*b.z*q.y,	2.0f*b.x*q.x
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	edd3 7a01 	vldr	s15, [r3, #4]
 800a44e:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800a452:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	edd3 7a00 	vldr	s15, [r3]
 800a45c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	edd3 7a03 	vldr	s15, [r3, #12]
 800a466:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	edd3 7a02 	vldr	s15, [r3, #8]
 800a470:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a474:	ee77 7a27 	vadd.f32	s15, s14, s15
	}};
 800a478:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		2.0f*q.x,	2.0f*q.y,	0.0f,		-4.0f*b.x*q.z + 2.0f*b.z*q.x,	-2.0f*b.x*q.w + 2.0f*b.z*q.y,	2.0f*b.x*q.x
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	edd3 7a01 	vldr	s15, [r3, #4]
 800a482:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	edd3 7a01 	vldr	s15, [r3, #4]
 800a48c:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 800a490:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
 800a494:	f107 0310 	add.w	r3, r7, #16
 800a498:	4619      	mov	r1, r3
 800a49a:	68f8      	ldr	r0, [r7, #12]
 800a49c:	f000 f96a 	bl	800a774 <_ZN3Mat6MatrixILh4ELh6EEC1ERKSt5arrayIfLj24EE>
	return R;
 800a4a0:	bf00      	nop
}
 800a4a2:	68f8      	ldr	r0, [r7, #12]
 800a4a4:	3770      	adds	r7, #112	; 0x70
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}

0800a4aa <_ZN10Algorithms3fgbERKN3Mat10QuaternionES3_S3_S3_>:

Matrix<6, 1> fgb(const Quaternion& q, const Quaternion& a, const Quaternion& b, const Quaternion& m)
{
 800a4aa:	b580      	push	{r7, lr}
 800a4ac:	b08a      	sub	sp, #40	; 0x28
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	60f8      	str	r0, [r7, #12]
 800a4b2:	60b9      	str	r1, [r7, #8]
 800a4b4:	607a      	str	r2, [r7, #4]
 800a4b6:	603b      	str	r3, [r7, #0]
	Matrix<6, 1> R
	{{
		2.0f*(q.x*q.z - q.w*q.y) - a.x,
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	ed93 7a01 	vldr	s14, [r3, #4]
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	edd3 7a03 	vldr	s15, [r3, #12]
 800a4c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	edd3 6a00 	vldr	s13, [r3]
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	edd3 7a02 	vldr	s15, [r3, #8]
 800a4d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a4d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a4dc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	edd3 7a01 	vldr	s15, [r3, #4]
 800a4e6:	ee77 7a67 	vsub.f32	s15, s14, s15
		2.0f*(q.w*q.x + q.y*q.z) - a.y,
		2.0f*(0.5f - q.x*q.x - q.y*q.y) - a.z,
		2.0f*b.x*(0.5f - q.y*q.y - q.z*q.z) + 2.0f*b.z*(q.x*q.z - q.w*q.y) - m.x,
		2.0f*b.x*(q.x*q.y - q.w*q.z) + 2.0f*b.z*(q.w*q.x + q.y*q.z) - m.y,
		2.0f*b.x*(q.w*q.y + q.x*q.z) + 2.0f*b.z*(0.5f - q.x*q.x - q.y*q.y) - m.z
	}};
 800a4ea:	edc7 7a04 	vstr	s15, [r7, #16]
		2.0f*(q.w*q.x + q.y*q.z) - a.y,
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	ed93 7a00 	vldr	s14, [r3]
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	edd3 7a01 	vldr	s15, [r3, #4]
 800a4fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	edd3 6a02 	vldr	s13, [r3, #8]
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	edd3 7a03 	vldr	s15, [r3, #12]
 800a50a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a50e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a512:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	edd3 7a02 	vldr	s15, [r3, #8]
 800a51c:	ee77 7a67 	vsub.f32	s15, s14, s15
	}};
 800a520:	edc7 7a05 	vstr	s15, [r7, #20]
		2.0f*(0.5f - q.x*q.x - q.y*q.y) - a.z,
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	ed93 7a01 	vldr	s14, [r3, #4]
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	edd3 7a01 	vldr	s15, [r3, #4]
 800a530:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a534:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a538:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	edd3 6a02 	vldr	s13, [r3, #8]
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	edd3 7a02 	vldr	s15, [r3, #8]
 800a548:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a54c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a550:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	edd3 7a03 	vldr	s15, [r3, #12]
 800a55a:	ee77 7a67 	vsub.f32	s15, s14, s15
	}};
 800a55e:	edc7 7a06 	vstr	s15, [r7, #24]
		2.0f*b.x*(0.5f - q.y*q.y - q.z*q.z) + 2.0f*b.z*(q.x*q.z - q.w*q.y) - m.x,
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	edd3 7a01 	vldr	s15, [r3, #4]
 800a568:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	edd3 6a02 	vldr	s13, [r3, #8]
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	edd3 7a02 	vldr	s15, [r3, #8]
 800a578:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a57c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800a580:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	ed93 6a03 	vldr	s12, [r3, #12]
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	edd3 7a03 	vldr	s15, [r3, #12]
 800a590:	ee66 7a27 	vmul.f32	s15, s12, s15
 800a594:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a598:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	edd3 7a03 	vldr	s15, [r3, #12]
 800a5a2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	ed93 6a01 	vldr	s12, [r3, #4]
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	edd3 7a03 	vldr	s15, [r3, #12]
 800a5b2:	ee26 6a27 	vmul.f32	s12, s12, s15
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	edd3 5a00 	vldr	s11, [r3]
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	edd3 7a02 	vldr	s15, [r3, #8]
 800a5c2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800a5c6:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a5ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a5ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d4:	edd3 7a01 	vldr	s15, [r3, #4]
 800a5d8:	ee77 7a67 	vsub.f32	s15, s14, s15
	}};
 800a5dc:	edc7 7a07 	vstr	s15, [r7, #28]
		2.0f*b.x*(q.x*q.y - q.w*q.z) + 2.0f*b.z*(q.w*q.x + q.y*q.z) - m.y,
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	edd3 7a01 	vldr	s15, [r3, #4]
 800a5e6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	edd3 6a01 	vldr	s13, [r3, #4]
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	edd3 7a02 	vldr	s15, [r3, #8]
 800a5f6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	ed93 6a00 	vldr	s12, [r3]
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	edd3 7a03 	vldr	s15, [r3, #12]
 800a606:	ee66 7a27 	vmul.f32	s15, s12, s15
 800a60a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a60e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	edd3 7a03 	vldr	s15, [r3, #12]
 800a618:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	ed93 6a00 	vldr	s12, [r3]
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	edd3 7a01 	vldr	s15, [r3, #4]
 800a628:	ee26 6a27 	vmul.f32	s12, s12, s15
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	edd3 5a02 	vldr	s11, [r3, #8]
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	edd3 7a03 	vldr	s15, [r3, #12]
 800a638:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800a63c:	ee76 7a27 	vadd.f32	s15, s12, s15
 800a640:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a644:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a64a:	edd3 7a02 	vldr	s15, [r3, #8]
 800a64e:	ee77 7a67 	vsub.f32	s15, s14, s15
	}};
 800a652:	edc7 7a08 	vstr	s15, [r7, #32]
		2.0f*b.x*(q.w*q.y + q.x*q.z) + 2.0f*b.z*(0.5f - q.x*q.x - q.y*q.y) - m.z
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	edd3 7a01 	vldr	s15, [r3, #4]
 800a65c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	edd3 6a00 	vldr	s13, [r3]
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	edd3 7a02 	vldr	s15, [r3, #8]
 800a66c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	ed93 6a01 	vldr	s12, [r3, #4]
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	edd3 7a03 	vldr	s15, [r3, #12]
 800a67c:	ee66 7a27 	vmul.f32	s15, s12, s15
 800a680:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a684:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	edd3 7a03 	vldr	s15, [r3, #12]
 800a68e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800a692:	68bb      	ldr	r3, [r7, #8]
 800a694:	ed93 6a01 	vldr	s12, [r3, #4]
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	edd3 7a01 	vldr	s15, [r3, #4]
 800a69e:	ee66 7a27 	vmul.f32	s15, s12, s15
 800a6a2:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800a6a6:	ee36 6a67 	vsub.f32	s12, s12, s15
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	edd3 5a02 	vldr	s11, [r3, #8]
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	edd3 7a02 	vldr	s15, [r3, #8]
 800a6b6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800a6ba:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a6be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a6c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6c8:	edd3 7a03 	vldr	s15, [r3, #12]
 800a6cc:	ee77 7a67 	vsub.f32	s15, s14, s15
	}};
 800a6d0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 800a6d4:	f107 0310 	add.w	r3, r7, #16
 800a6d8:	4619      	mov	r1, r3
 800a6da:	68f8      	ldr	r0, [r7, #12]
 800a6dc:	f000 f85c 	bl	800a798 <_ZN3Mat6MatrixILh6ELh1EEC1ERKSt5arrayIfLj6EE>
	return R;
 800a6e0:	bf00      	nop
}
 800a6e2:	68f8      	ldr	r0, [r7, #12]
 800a6e4:	3728      	adds	r7, #40	; 0x28
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}

0800a6ea <_ZNK3Mat6MatrixILh4ELh6EEmlILh1EEENS0_ILh4EXT_EEERKNS0_ILh6EXT_EEE>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 800a6ea:	b590      	push	{r4, r7, lr}
 800a6ec:	b08f      	sub	sp, #60	; 0x3c
 800a6ee:	af00      	add	r7, sp, #0
 800a6f0:	6178      	str	r0, [r7, #20]
 800a6f2:	6139      	str	r1, [r7, #16]
	Matrix<heigth, other_width> result;
 800a6f4:	f107 0318 	add.w	r3, r7, #24
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f000 f862 	bl	800a7c2 <_ZN3Mat6MatrixILh4ELh1EEC1Ev>
	Multiply(other, result);
 800a6fe:	f107 0318 	add.w	r3, r7, #24
 800a702:	461a      	mov	r2, r3
 800a704:	6939      	ldr	r1, [r7, #16]
 800a706:	6978      	ldr	r0, [r7, #20]
 800a708:	f000 f866 	bl	800a7d8 <_ZNK3Mat6MatrixILh4ELh6EE8MultiplyILh1EEEvRKNS0_ILh6EXT_EEERNS0_ILh4EXT_EEE>
	return result;
 800a70c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800a710:	f107 0318 	add.w	r3, r7, #24
 800a714:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a716:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a71a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a71c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a71e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a722:	ee06 0a10 	vmov	s12, r0
 800a726:	ee06 1a90 	vmov	s13, r1
 800a72a:	ee07 2a10 	vmov	s14, r2
 800a72e:	ee07 3a90 	vmov	s15, r3
}
 800a732:	eeb0 0a46 	vmov.f32	s0, s12
 800a736:	eef0 0a66 	vmov.f32	s1, s13
 800a73a:	eeb0 1a47 	vmov.f32	s2, s14
 800a73e:	eef0 1a67 	vmov.f32	s3, s15
 800a742:	373c      	adds	r7, #60	; 0x3c
 800a744:	46bd      	mov	sp, r7
 800a746:	bd90      	pop	{r4, r7, pc}

0800a748 <_ZN3Mat6MatrixILh4ELh1EEclEhh>:
float& Matrix<heigth, width>::operator()(u_short row, u_short col)
 800a748:	b580      	push	{r7, lr}
 800a74a:	b084      	sub	sp, #16
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	460b      	mov	r3, r1
 800a752:	70fb      	strb	r3, [r7, #3]
 800a754:	4613      	mov	r3, r2
 800a756:	70bb      	strb	r3, [r7, #2]
	u_int index = width * row + col;
 800a758:	78fa      	ldrb	r2, [r7, #3]
 800a75a:	78bb      	ldrb	r3, [r7, #2]
 800a75c:	4413      	add	r3, r2
 800a75e:	60fb      	str	r3, [r7, #12]
	return _values[index];
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	68f9      	ldr	r1, [r7, #12]
 800a764:	4618      	mov	r0, r3
 800a766:	f000 f8e9 	bl	800a93c <_ZNSt5arrayIfLj4EEixEj>
 800a76a:	4603      	mov	r3, r0
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3710      	adds	r7, #16
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}

0800a774 <_ZN3Mat6MatrixILh4ELh6EEC1ERKSt5arrayIfLj24EE>:
Matrix<heigth, width>::Matrix(const std::array<float, heigth*width>& values): _values(values) {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 800a774:	b580      	push	{r7, lr}
 800a776:	b082      	sub	sp, #8
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
 800a77c:	6039      	str	r1, [r7, #0]
 800a77e:	687a      	ldr	r2, [r7, #4]
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	4610      	mov	r0, r2
 800a784:	4619      	mov	r1, r3
 800a786:	2360      	movs	r3, #96	; 0x60
 800a788:	461a      	mov	r2, r3
 800a78a:	f005 f892 	bl	800f8b2 <memcpy>
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	4618      	mov	r0, r3
 800a792:	3708      	adds	r7, #8
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}

0800a798 <_ZN3Mat6MatrixILh6ELh1EEC1ERKSt5arrayIfLj6EE>:
 800a798:	b4b0      	push	{r4, r5, r7}
 800a79a:	b083      	sub	sp, #12
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
 800a7a0:	6039      	str	r1, [r7, #0]
 800a7a2:	687a      	ldr	r2, [r7, #4]
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	4614      	mov	r4, r2
 800a7a8:	461d      	mov	r5, r3
 800a7aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a7ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a7ae:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a7b2:	e884 0003 	stmia.w	r4, {r0, r1}
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	370c      	adds	r7, #12
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bcb0      	pop	{r4, r5, r7}
 800a7c0:	4770      	bx	lr

0800a7c2 <_ZN3Mat6MatrixILh4ELh1EEC1Ev>:
Matrix<heigth, width>::Matrix() {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 800a7c2:	b480      	push	{r7}
 800a7c4:	b083      	sub	sp, #12
 800a7c6:	af00      	add	r7, sp, #0
 800a7c8:	6078      	str	r0, [r7, #4]
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	370c      	adds	r7, #12
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d6:	4770      	bx	lr

0800a7d8 <_ZNK3Mat6MatrixILh4ELh6EE8MultiplyILh1EEEvRKNS0_ILh6EXT_EEERNS0_ILh4EXT_EEE>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 800a7d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7da:	b0a5      	sub	sp, #148	; 0x94
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	60f8      	str	r0, [r7, #12]
 800a7e0:	60b9      	str	r1, [r7, #8]
 800a7e2:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800a7ea:	e02c      	b.n	800a846 <_ZNK3Mat6MatrixILh4ELh6EE8MultiplyILh1EEEvRKNS0_ILh6EXT_EEERNS0_ILh4EXT_EEE+0x6e>
		for(u_short col = 0; col < width; ++col)
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 800a7f2:	e01f      	b.n	800a834 <_ZNK3Mat6MatrixILh4ELh6EE8MultiplyILh1EEEvRKNS0_ILh6EXT_EEERNS0_ILh4EXT_EEE+0x5c>
			this_rows[row][col] = this->operator()(row, col);
 800a7f4:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 800a7f8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800a7fc:	4619      	mov	r1, r3
 800a7fe:	68f8      	ldr	r0, [r7, #12]
 800a800:	f000 f8c9 	bl	800a996 <_ZNK3Mat6MatrixILh4ELh6EEclEhh>
 800a804:	4604      	mov	r4, r0
 800a806:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 800a80a:	f107 0310 	add.w	r3, r7, #16
 800a80e:	4611      	mov	r1, r2
 800a810:	4618      	mov	r0, r3
 800a812:	f000 f8a2 	bl	800a95a <_ZNSt5arrayIS_IfLj6EELj4EEixEj>
 800a816:	4602      	mov	r2, r0
 800a818:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800a81c:	4619      	mov	r1, r3
 800a81e:	4610      	mov	r0, r2
 800a820:	f000 f8aa 	bl	800a978 <_ZNSt5arrayIfLj6EEixEj>
 800a824:	4602      	mov	r2, r0
 800a826:	6823      	ldr	r3, [r4, #0]
 800a828:	6013      	str	r3, [r2, #0]
		for(u_short col = 0; col < width; ++col)
 800a82a:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800a82e:	3301      	adds	r3, #1
 800a830:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 800a834:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800a838:	2b05      	cmp	r3, #5
 800a83a:	d9db      	bls.n	800a7f4 <_ZNK3Mat6MatrixILh4ELh6EE8MultiplyILh1EEEvRKNS0_ILh6EXT_EEERNS0_ILh4EXT_EEE+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 800a83c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800a840:	3301      	adds	r3, #1
 800a842:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800a846:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800a84a:	2b03      	cmp	r3, #3
 800a84c:	d9ce      	bls.n	800a7ec <_ZNK3Mat6MatrixILh4ELh6EE8MultiplyILh1EEEvRKNS0_ILh6EXT_EEERNS0_ILh4EXT_EEE+0x14>
	for(u_short col = 0; col < other_width; ++col)
 800a84e:	2300      	movs	r3, #0
 800a850:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
 800a854:	e02c      	b.n	800a8b0 <_ZNK3Mat6MatrixILh4ELh6EE8MultiplyILh1EEEvRKNS0_ILh6EXT_EEERNS0_ILh4EXT_EEE+0xd8>
		for(u_short row = 0; row < width; ++row)
 800a856:	2300      	movs	r3, #0
 800a858:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
 800a85c:	e01f      	b.n	800a89e <_ZNK3Mat6MatrixILh4ELh6EE8MultiplyILh1EEEvRKNS0_ILh6EXT_EEERNS0_ILh4EXT_EEE+0xc6>
			other_columns[col][row] = other(row, col);
 800a85e:	f897 208d 	ldrb.w	r2, [r7, #141]	; 0x8d
 800a862:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800a866:	4619      	mov	r1, r3
 800a868:	68b8      	ldr	r0, [r7, #8]
 800a86a:	f000 f8be 	bl	800a9ea <_ZNK3Mat6MatrixILh6ELh1EEclEhh>
 800a86e:	4604      	mov	r4, r0
 800a870:	f897 208d 	ldrb.w	r2, [r7, #141]	; 0x8d
 800a874:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a878:	4611      	mov	r1, r2
 800a87a:	4618      	mov	r0, r3
 800a87c:	f000 f8a6 	bl	800a9cc <_ZNSt5arrayIS_IfLj6EELj1EEixEj>
 800a880:	4602      	mov	r2, r0
 800a882:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800a886:	4619      	mov	r1, r3
 800a888:	4610      	mov	r0, r2
 800a88a:	f000 f875 	bl	800a978 <_ZNSt5arrayIfLj6EEixEj>
 800a88e:	4602      	mov	r2, r0
 800a890:	6823      	ldr	r3, [r4, #0]
 800a892:	6013      	str	r3, [r2, #0]
		for(u_short row = 0; row < width; ++row)
 800a894:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800a898:	3301      	adds	r3, #1
 800a89a:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
 800a89e:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800a8a2:	2b05      	cmp	r3, #5
 800a8a4:	d9db      	bls.n	800a85e <_ZNK3Mat6MatrixILh4ELh6EE8MultiplyILh1EEEvRKNS0_ILh6EXT_EEERNS0_ILh4EXT_EEE+0x86>
	for(u_short col = 0; col < other_width; ++col)
 800a8a6:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800a8aa:	3301      	adds	r3, #1
 800a8ac:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
 800a8b0:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d0ce      	beq.n	800a856 <_ZNK3Mat6MatrixILh4ELh6EE8MultiplyILh1EEEvRKNS0_ILh6EXT_EEERNS0_ILh4EXT_EEE+0x7e>
	for(u_short row = 0; row < heigth; ++row)
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 800a8be:	e034      	b.n	800a92a <_ZNK3Mat6MatrixILh4ELh6EE8MultiplyILh1EEEvRKNS0_ILh6EXT_EEERNS0_ILh4EXT_EEE+0x152>
		for(u_short col = 0; col < other_width; ++col)
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
 800a8c6:	e027      	b.n	800a918 <_ZNK3Mat6MatrixILh4ELh6EE8MultiplyILh1EEEvRKNS0_ILh6EXT_EEERNS0_ILh4EXT_EEE+0x140>
			result(row, col) = Multiply_rows(this_rows[row], other_columns[col]);
 800a8c8:	f897 208b 	ldrb.w	r2, [r7, #139]	; 0x8b
 800a8cc:	f107 0310 	add.w	r3, r7, #16
 800a8d0:	4611      	mov	r1, r2
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f000 f841 	bl	800a95a <_ZNSt5arrayIS_IfLj6EELj4EEixEj>
 800a8d8:	4605      	mov	r5, r0
 800a8da:	f897 208a 	ldrb.w	r2, [r7, #138]	; 0x8a
 800a8de:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a8e2:	4611      	mov	r1, r2
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f000 f871 	bl	800a9cc <_ZNSt5arrayIS_IfLj6EELj1EEixEj>
 800a8ea:	4606      	mov	r6, r0
 800a8ec:	f897 208a 	ldrb.w	r2, [r7, #138]	; 0x8a
 800a8f0:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800a8f4:	4619      	mov	r1, r3
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f7ff ff26 	bl	800a748 <_ZN3Mat6MatrixILh4ELh1EEclEhh>
 800a8fc:	4604      	mov	r4, r0
 800a8fe:	4631      	mov	r1, r6
 800a900:	4628      	mov	r0, r5
 800a902:	f000 f888 	bl	800aa16 <_ZN3Mat13Multiply_rowsILj6EEEfRKSt5arrayIfXT_EES4_>
 800a906:	eef0 7a40 	vmov.f32	s15, s0
 800a90a:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 800a90e:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 800a912:	3301      	adds	r3, #1
 800a914:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
 800a918:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d0d3      	beq.n	800a8c8 <_ZNK3Mat6MatrixILh4ELh6EE8MultiplyILh1EEEvRKNS0_ILh6EXT_EEERNS0_ILh4EXT_EEE+0xf0>
	for(u_short row = 0; row < heigth; ++row)
 800a920:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800a924:	3301      	adds	r3, #1
 800a926:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 800a92a:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800a92e:	2b03      	cmp	r3, #3
 800a930:	d9c6      	bls.n	800a8c0 <_ZNK3Mat6MatrixILh4ELh6EE8MultiplyILh1EEEvRKNS0_ILh6EXT_EEERNS0_ILh4EXT_EEE+0xe8>
}
 800a932:	bf00      	nop
 800a934:	bf00      	nop
 800a936:	3794      	adds	r7, #148	; 0x94
 800a938:	46bd      	mov	sp, r7
 800a93a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a93c <_ZNSt5arrayIfLj4EEixEj>:
      operator[](size_type __n) noexcept
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b082      	sub	sp, #8
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
 800a944:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6839      	ldr	r1, [r7, #0]
 800a94a:	4618      	mov	r0, r3
 800a94c:	f000 f896 	bl	800aa7c <_ZNSt14__array_traitsIfLj4EE6_S_refERA4_Kfj>
 800a950:	4603      	mov	r3, r0
      }
 800a952:	4618      	mov	r0, r3
 800a954:	3708      	adds	r7, #8
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}

0800a95a <_ZNSt5arrayIS_IfLj6EELj4EEixEj>:
      operator[](size_type __n) noexcept
 800a95a:	b580      	push	{r7, lr}
 800a95c:	b082      	sub	sp, #8
 800a95e:	af00      	add	r7, sp, #0
 800a960:	6078      	str	r0, [r7, #4]
 800a962:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	6839      	ldr	r1, [r7, #0]
 800a968:	4618      	mov	r0, r3
 800a96a:	f000 f896 	bl	800aa9a <_ZNSt14__array_traitsISt5arrayIfLj6EELj4EE6_S_refERA4_KS1_j>
 800a96e:	4603      	mov	r3, r0
      }
 800a970:	4618      	mov	r0, r3
 800a972:	3708      	adds	r7, #8
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}

0800a978 <_ZNSt5arrayIfLj6EEixEj>:
      operator[](size_type __n) noexcept
 800a978:	b580      	push	{r7, lr}
 800a97a:	b082      	sub	sp, #8
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
 800a980:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6839      	ldr	r1, [r7, #0]
 800a986:	4618      	mov	r0, r3
 800a988:	f000 f899 	bl	800aabe <_ZNSt14__array_traitsIfLj6EE6_S_refERA6_Kfj>
 800a98c:	4603      	mov	r3, r0
      }
 800a98e:	4618      	mov	r0, r3
 800a990:	3708      	adds	r7, #8
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}

0800a996 <_ZNK3Mat6MatrixILh4ELh6EEclEhh>:
const float& Matrix<heigth, width>::operator()(u_short row, u_short col) const
 800a996:	b580      	push	{r7, lr}
 800a998:	b084      	sub	sp, #16
 800a99a:	af00      	add	r7, sp, #0
 800a99c:	6078      	str	r0, [r7, #4]
 800a99e:	460b      	mov	r3, r1
 800a9a0:	70fb      	strb	r3, [r7, #3]
 800a9a2:	4613      	mov	r3, r2
 800a9a4:	70bb      	strb	r3, [r7, #2]
	u_int index = width * row + col;
 800a9a6:	78fa      	ldrb	r2, [r7, #3]
 800a9a8:	4613      	mov	r3, r2
 800a9aa:	005b      	lsls	r3, r3, #1
 800a9ac:	4413      	add	r3, r2
 800a9ae:	005b      	lsls	r3, r3, #1
 800a9b0:	461a      	mov	r2, r3
 800a9b2:	78bb      	ldrb	r3, [r7, #2]
 800a9b4:	4413      	add	r3, r2
 800a9b6:	60fb      	str	r3, [r7, #12]
	return _values[index];
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	68f9      	ldr	r1, [r7, #12]
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f000 f88d 	bl	800aadc <_ZNKSt5arrayIfLj24EEixEj>
 800a9c2:	4603      	mov	r3, r0
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3710      	adds	r7, #16
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}

0800a9cc <_ZNSt5arrayIS_IfLj6EELj1EEixEj>:
      operator[](size_type __n) noexcept
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b082      	sub	sp, #8
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
 800a9d4:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6839      	ldr	r1, [r7, #0]
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f000 f88d 	bl	800aafa <_ZNSt14__array_traitsISt5arrayIfLj6EELj1EE6_S_refERA1_KS1_j>
 800a9e0:	4603      	mov	r3, r0
      }
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3708      	adds	r7, #8
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}

0800a9ea <_ZNK3Mat6MatrixILh6ELh1EEclEhh>:
const float& Matrix<heigth, width>::operator()(u_short row, u_short col) const
 800a9ea:	b580      	push	{r7, lr}
 800a9ec:	b084      	sub	sp, #16
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6078      	str	r0, [r7, #4]
 800a9f2:	460b      	mov	r3, r1
 800a9f4:	70fb      	strb	r3, [r7, #3]
 800a9f6:	4613      	mov	r3, r2
 800a9f8:	70bb      	strb	r3, [r7, #2]
	u_int index = width * row + col;
 800a9fa:	78fa      	ldrb	r2, [r7, #3]
 800a9fc:	78bb      	ldrb	r3, [r7, #2]
 800a9fe:	4413      	add	r3, r2
 800aa00:	60fb      	str	r3, [r7, #12]
	return _values[index];
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	68f9      	ldr	r1, [r7, #12]
 800aa06:	4618      	mov	r0, r3
 800aa08:	f000 f889 	bl	800ab1e <_ZNKSt5arrayIfLj6EEixEj>
 800aa0c:	4603      	mov	r3, r0
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	3710      	adds	r7, #16
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd80      	pop	{r7, pc}

0800aa16 <_ZN3Mat13Multiply_rowsILj6EEEfRKSt5arrayIfXT_EES4_>:
float Multiply_rows(const std::array<float, length>& A, const std::array<float, length>& B)
 800aa16:	b580      	push	{r7, lr}
 800aa18:	ed2d 8b02 	vpush	{d8}
 800aa1c:	b084      	sub	sp, #16
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	6078      	str	r0, [r7, #4]
 800aa22:	6039      	str	r1, [r7, #0]
    float result = 0.0f;
 800aa24:	f04f 0300 	mov.w	r3, #0
 800aa28:	60fb      	str	r3, [r7, #12]
	for(u_int i = 0; i < length; ++i) result += A[i]*B[i];
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	60bb      	str	r3, [r7, #8]
 800aa2e:	e018      	b.n	800aa62 <_ZN3Mat13Multiply_rowsILj6EEEfRKSt5arrayIfXT_EES4_+0x4c>
 800aa30:	68b9      	ldr	r1, [r7, #8]
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f000 f873 	bl	800ab1e <_ZNKSt5arrayIfLj6EEixEj>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	ed93 8a00 	vldr	s16, [r3]
 800aa3e:	68b9      	ldr	r1, [r7, #8]
 800aa40:	6838      	ldr	r0, [r7, #0]
 800aa42:	f000 f86c 	bl	800ab1e <_ZNKSt5arrayIfLj6EEixEj>
 800aa46:	4603      	mov	r3, r0
 800aa48:	edd3 7a00 	vldr	s15, [r3]
 800aa4c:	ee68 7a27 	vmul.f32	s15, s16, s15
 800aa50:	ed97 7a03 	vldr	s14, [r7, #12]
 800aa54:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa58:	edc7 7a03 	vstr	s15, [r7, #12]
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	3301      	adds	r3, #1
 800aa60:	60bb      	str	r3, [r7, #8]
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	2b05      	cmp	r3, #5
 800aa66:	d9e3      	bls.n	800aa30 <_ZN3Mat13Multiply_rowsILj6EEEfRKSt5arrayIfXT_EES4_+0x1a>
	return result;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	ee07 3a90 	vmov	s15, r3
}
 800aa6e:	eeb0 0a67 	vmov.f32	s0, s15
 800aa72:	3710      	adds	r7, #16
 800aa74:	46bd      	mov	sp, r7
 800aa76:	ecbd 8b02 	vpop	{d8}
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <_ZNSt14__array_traitsIfLj4EE6_S_refERA4_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800aa7c:	b480      	push	{r7}
 800aa7e:	b083      	sub	sp, #12
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	009b      	lsls	r3, r3, #2
 800aa8a:	687a      	ldr	r2, [r7, #4]
 800aa8c:	4413      	add	r3, r2
 800aa8e:	4618      	mov	r0, r3
 800aa90:	370c      	adds	r7, #12
 800aa92:	46bd      	mov	sp, r7
 800aa94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa98:	4770      	bx	lr

0800aa9a <_ZNSt14__array_traitsISt5arrayIfLj6EELj4EE6_S_refERA4_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800aa9a:	b480      	push	{r7}
 800aa9c:	b083      	sub	sp, #12
 800aa9e:	af00      	add	r7, sp, #0
 800aaa0:	6078      	str	r0, [r7, #4]
 800aaa2:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800aaa4:	683a      	ldr	r2, [r7, #0]
 800aaa6:	4613      	mov	r3, r2
 800aaa8:	005b      	lsls	r3, r3, #1
 800aaaa:	4413      	add	r3, r2
 800aaac:	00db      	lsls	r3, r3, #3
 800aaae:	687a      	ldr	r2, [r7, #4]
 800aab0:	4413      	add	r3, r2
 800aab2:	4618      	mov	r0, r3
 800aab4:	370c      	adds	r7, #12
 800aab6:	46bd      	mov	sp, r7
 800aab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabc:	4770      	bx	lr

0800aabe <_ZNSt14__array_traitsIfLj6EE6_S_refERA6_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800aabe:	b480      	push	{r7}
 800aac0:	b083      	sub	sp, #12
 800aac2:	af00      	add	r7, sp, #0
 800aac4:	6078      	str	r0, [r7, #4]
 800aac6:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	009b      	lsls	r3, r3, #2
 800aacc:	687a      	ldr	r2, [r7, #4]
 800aace:	4413      	add	r3, r2
 800aad0:	4618      	mov	r0, r3
 800aad2:	370c      	adds	r7, #12
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr

0800aadc <_ZNKSt5arrayIfLj24EEixEj>:
      operator[](size_type __n) const noexcept
 800aadc:	b580      	push	{r7, lr}
 800aade:	b082      	sub	sp, #8
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
 800aae4:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6839      	ldr	r1, [r7, #0]
 800aaea:	4618      	mov	r0, r3
 800aaec:	f000 f826 	bl	800ab3c <_ZNSt14__array_traitsIfLj24EE6_S_refERA24_Kfj>
 800aaf0:	4603      	mov	r3, r0
      }
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3708      	adds	r7, #8
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}

0800aafa <_ZNSt14__array_traitsISt5arrayIfLj6EELj1EE6_S_refERA1_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800aafa:	b480      	push	{r7}
 800aafc:	b083      	sub	sp, #12
 800aafe:	af00      	add	r7, sp, #0
 800ab00:	6078      	str	r0, [r7, #4]
 800ab02:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800ab04:	683a      	ldr	r2, [r7, #0]
 800ab06:	4613      	mov	r3, r2
 800ab08:	005b      	lsls	r3, r3, #1
 800ab0a:	4413      	add	r3, r2
 800ab0c:	00db      	lsls	r3, r3, #3
 800ab0e:	687a      	ldr	r2, [r7, #4]
 800ab10:	4413      	add	r3, r2
 800ab12:	4618      	mov	r0, r3
 800ab14:	370c      	adds	r7, #12
 800ab16:	46bd      	mov	sp, r7
 800ab18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1c:	4770      	bx	lr

0800ab1e <_ZNKSt5arrayIfLj6EEixEj>:
      operator[](size_type __n) const noexcept
 800ab1e:	b580      	push	{r7, lr}
 800ab20:	b082      	sub	sp, #8
 800ab22:	af00      	add	r7, sp, #0
 800ab24:	6078      	str	r0, [r7, #4]
 800ab26:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6839      	ldr	r1, [r7, #0]
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f7ff ffc6 	bl	800aabe <_ZNSt14__array_traitsIfLj6EE6_S_refERA6_Kfj>
 800ab32:	4603      	mov	r3, r0
      }
 800ab34:	4618      	mov	r0, r3
 800ab36:	3708      	adds	r7, #8
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <_ZNSt14__array_traitsIfLj24EE6_S_refERA24_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800ab3c:	b480      	push	{r7}
 800ab3e:	b083      	sub	sp, #12
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
 800ab44:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	009b      	lsls	r3, r3, #2
 800ab4a:	687a      	ldr	r2, [r7, #4]
 800ab4c:	4413      	add	r3, r2
 800ab4e:	4618      	mov	r0, r3
 800ab50:	370c      	adds	r7, #12
 800ab52:	46bd      	mov	sp, r7
 800ab54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab58:	4770      	bx	lr

0800ab5a <_ZN3Mat10QuaternionpLERKS0_>:

namespace Mat
{

Quaternion& Quaternion::operator+=(const Quaternion& other)
{
 800ab5a:	b480      	push	{r7}
 800ab5c:	b083      	sub	sp, #12
 800ab5e:	af00      	add	r7, sp, #0
 800ab60:	6078      	str	r0, [r7, #4]
 800ab62:	6039      	str	r1, [r7, #0]
	w += other.w;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	ed93 7a00 	vldr	s14, [r3]
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	edd3 7a00 	vldr	s15, [r3]
 800ab70:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	edc3 7a00 	vstr	s15, [r3]
	x += other.x;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	ed93 7a01 	vldr	s14, [r3, #4]
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	edd3 7a01 	vldr	s15, [r3, #4]
 800ab86:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	edc3 7a01 	vstr	s15, [r3, #4]
	y += other.y;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	ed93 7a02 	vldr	s14, [r3, #8]
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	edd3 7a02 	vldr	s15, [r3, #8]
 800ab9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	edc3 7a02 	vstr	s15, [r3, #8]
	z += other.z;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	ed93 7a03 	vldr	s14, [r3, #12]
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	edd3 7a03 	vldr	s15, [r3, #12]
 800abb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	edc3 7a03 	vstr	s15, [r3, #12]
	return *this;
 800abbc:	687b      	ldr	r3, [r7, #4]
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	370c      	adds	r7, #12
 800abc2:	46bd      	mov	sp, r7
 800abc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc8:	4770      	bx	lr

0800abca <_ZN3Mat10QuaternionmIERKS0_>:

Quaternion& Quaternion::operator-=(const Quaternion& other)
{
 800abca:	b480      	push	{r7}
 800abcc:	b083      	sub	sp, #12
 800abce:	af00      	add	r7, sp, #0
 800abd0:	6078      	str	r0, [r7, #4]
 800abd2:	6039      	str	r1, [r7, #0]
	w -= other.w;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	ed93 7a00 	vldr	s14, [r3]
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	edd3 7a00 	vldr	s15, [r3]
 800abe0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	edc3 7a00 	vstr	s15, [r3]
	x -= other.x;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	ed93 7a01 	vldr	s14, [r3, #4]
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	edd3 7a01 	vldr	s15, [r3, #4]
 800abf6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	edc3 7a01 	vstr	s15, [r3, #4]
	y -= other.y;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	ed93 7a02 	vldr	s14, [r3, #8]
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	edd3 7a02 	vldr	s15, [r3, #8]
 800ac0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	edc3 7a02 	vstr	s15, [r3, #8]
	z -= other.z;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	ed93 7a03 	vldr	s14, [r3, #12]
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	edd3 7a03 	vldr	s15, [r3, #12]
 800ac22:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	edc3 7a03 	vstr	s15, [r3, #12]
	return *this;
 800ac2c:	687b      	ldr	r3, [r7, #4]
}
 800ac2e:	4618      	mov	r0, r3
 800ac30:	370c      	adds	r7, #12
 800ac32:	46bd      	mov	sp, r7
 800ac34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac38:	4770      	bx	lr

0800ac3a <_ZN3Mat10QuaternionmLEf>:
	*this = operator*(other);
	return *this;
}

Quaternion& Quaternion::operator*=(float f)
{
 800ac3a:	b480      	push	{r7}
 800ac3c:	b083      	sub	sp, #12
 800ac3e:	af00      	add	r7, sp, #0
 800ac40:	6078      	str	r0, [r7, #4]
 800ac42:	ed87 0a00 	vstr	s0, [r7]
	w *= f;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	ed93 7a00 	vldr	s14, [r3]
 800ac4c:	edd7 7a00 	vldr	s15, [r7]
 800ac50:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	edc3 7a00 	vstr	s15, [r3]
	x *= f;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	ed93 7a01 	vldr	s14, [r3, #4]
 800ac60:	edd7 7a00 	vldr	s15, [r7]
 800ac64:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	edc3 7a01 	vstr	s15, [r3, #4]
	y *= f;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	ed93 7a02 	vldr	s14, [r3, #8]
 800ac74:	edd7 7a00 	vldr	s15, [r7]
 800ac78:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	edc3 7a02 	vstr	s15, [r3, #8]
	z *= f;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	ed93 7a03 	vldr	s14, [r3, #12]
 800ac88:	edd7 7a00 	vldr	s15, [r7]
 800ac8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	edc3 7a03 	vstr	s15, [r3, #12]
	return *this;
 800ac96:	687b      	ldr	r3, [r7, #4]
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	370c      	adds	r7, #12
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca2:	4770      	bx	lr

0800aca4 <_ZN3Mat10Quaternion9NormaliseEv>:

Quaternion& Quaternion::Normalise()
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b084      	sub	sp, #16
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
	float norm = Norm();
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f000 f9e8 	bl	800b082 <_ZNK3Mat10Quaternion4NormEv>
 800acb2:	ed87 0a03 	vstr	s0, [r7, #12]
	if(norm != 0.0f) this->operator *=((1.0f / norm));
 800acb6:	edd7 7a03 	vldr	s15, [r7, #12]
 800acba:	eef5 7a40 	vcmp.f32	s15, #0.0
 800acbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acc2:	d00a      	beq.n	800acda <_ZN3Mat10Quaternion9NormaliseEv+0x36>
 800acc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acc8:	edd7 7a03 	vldr	s15, [r7, #12]
 800accc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acd0:	eeb0 0a47 	vmov.f32	s0, s14
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f7ff ffb0 	bl	800ac3a <_ZN3Mat10QuaternionmLEf>
	return *this;
 800acda:	687b      	ldr	r3, [r7, #4]
}
 800acdc:	4618      	mov	r0, r3
 800acde:	3710      	adds	r7, #16
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}

0800ace4 <_ZNK3Mat10QuaternionplERKS0_>:

Quaternion Quaternion::operator+(const Quaternion& other) const
{
 800ace4:	b590      	push	{r4, r7, lr}
 800ace6:	b08f      	sub	sp, #60	; 0x3c
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6178      	str	r0, [r7, #20]
 800acec:	6139      	str	r1, [r7, #16]
	Quaternion result = *this;
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	f107 0418 	add.w	r4, r7, #24
 800acf4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800acf6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	result += other;
 800acfa:	f107 0318 	add.w	r3, r7, #24
 800acfe:	6939      	ldr	r1, [r7, #16]
 800ad00:	4618      	mov	r0, r3
 800ad02:	f7ff ff2a 	bl	800ab5a <_ZN3Mat10QuaternionpLERKS0_>
	return result;
 800ad06:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800ad0a:	f107 0318 	add.w	r3, r7, #24
 800ad0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ad10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ad14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ad18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad1c:	ee06 0a10 	vmov	s12, r0
 800ad20:	ee06 1a90 	vmov	s13, r1
 800ad24:	ee07 2a10 	vmov	s14, r2
 800ad28:	ee07 3a90 	vmov	s15, r3
}
 800ad2c:	eeb0 0a46 	vmov.f32	s0, s12
 800ad30:	eef0 0a66 	vmov.f32	s1, s13
 800ad34:	eeb0 1a47 	vmov.f32	s2, s14
 800ad38:	eef0 1a67 	vmov.f32	s3, s15
 800ad3c:	373c      	adds	r7, #60	; 0x3c
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd90      	pop	{r4, r7, pc}

0800ad42 <_ZNK3Mat10QuaternionmiERKS0_>:

Quaternion Quaternion::operator-(const Quaternion& other) const
{
 800ad42:	b590      	push	{r4, r7, lr}
 800ad44:	b08f      	sub	sp, #60	; 0x3c
 800ad46:	af00      	add	r7, sp, #0
 800ad48:	6178      	str	r0, [r7, #20]
 800ad4a:	6139      	str	r1, [r7, #16]
	Quaternion result = *this;
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	f107 0418 	add.w	r4, r7, #24
 800ad52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ad54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	result -= other;
 800ad58:	f107 0318 	add.w	r3, r7, #24
 800ad5c:	6939      	ldr	r1, [r7, #16]
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f7ff ff33 	bl	800abca <_ZN3Mat10QuaternionmIERKS0_>
	return result;
 800ad64:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800ad68:	f107 0318 	add.w	r3, r7, #24
 800ad6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ad6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ad72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ad76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad7a:	ee06 0a10 	vmov	s12, r0
 800ad7e:	ee06 1a90 	vmov	s13, r1
 800ad82:	ee07 2a10 	vmov	s14, r2
 800ad86:	ee07 3a90 	vmov	s15, r3
}
 800ad8a:	eeb0 0a46 	vmov.f32	s0, s12
 800ad8e:	eef0 0a66 	vmov.f32	s1, s13
 800ad92:	eeb0 1a47 	vmov.f32	s2, s14
 800ad96:	eef0 1a67 	vmov.f32	s3, s15
 800ad9a:	373c      	adds	r7, #60	; 0x3c
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bd90      	pop	{r4, r7, pc}

0800ada0 <_ZNK3Mat10QuaternionmlERKS0_>:

Quaternion Quaternion::operator*(const Quaternion& other) const
{
 800ada0:	b490      	push	{r4, r7}
 800ada2:	b08e      	sub	sp, #56	; 0x38
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6178      	str	r0, [r7, #20]
 800ada8:	6139      	str	r1, [r7, #16]
	Quaternion result{};
 800adaa:	f107 0318 	add.w	r3, r7, #24
 800adae:	2200      	movs	r2, #0
 800adb0:	601a      	str	r2, [r3, #0]
 800adb2:	605a      	str	r2, [r3, #4]
 800adb4:	609a      	str	r2, [r3, #8]
 800adb6:	60da      	str	r2, [r3, #12]
	result.w = this->w*other.w - this->x*other.x - this->y*other.y - this->z*other.z;
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	ed93 7a00 	vldr	s14, [r3]
 800adbe:	693b      	ldr	r3, [r7, #16]
 800adc0:	edd3 7a00 	vldr	s15, [r3]
 800adc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	edd3 6a01 	vldr	s13, [r3, #4]
 800adce:	693b      	ldr	r3, [r7, #16]
 800add0:	edd3 7a01 	vldr	s15, [r3, #4]
 800add4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800add8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	edd3 6a02 	vldr	s13, [r3, #8]
 800ade2:	693b      	ldr	r3, [r7, #16]
 800ade4:	edd3 7a02 	vldr	s15, [r3, #8]
 800ade8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800adec:	ee37 7a67 	vsub.f32	s14, s14, s15
 800adf0:	697b      	ldr	r3, [r7, #20]
 800adf2:	edd3 6a03 	vldr	s13, [r3, #12]
 800adf6:	693b      	ldr	r3, [r7, #16]
 800adf8:	edd3 7a03 	vldr	s15, [r3, #12]
 800adfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ae00:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae04:	edc7 7a06 	vstr	s15, [r7, #24]
	result.x = this->w*other.x + this->x*other.w + this->y*other.z - this->z*other.y;
 800ae08:	697b      	ldr	r3, [r7, #20]
 800ae0a:	ed93 7a00 	vldr	s14, [r3]
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	edd3 7a01 	vldr	s15, [r3, #4]
 800ae14:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	edd3 6a01 	vldr	s13, [r3, #4]
 800ae1e:	693b      	ldr	r3, [r7, #16]
 800ae20:	edd3 7a00 	vldr	s15, [r3]
 800ae24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ae28:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	edd3 6a02 	vldr	s13, [r3, #8]
 800ae32:	693b      	ldr	r3, [r7, #16]
 800ae34:	edd3 7a03 	vldr	s15, [r3, #12]
 800ae38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ae3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	edd3 6a03 	vldr	s13, [r3, #12]
 800ae46:	693b      	ldr	r3, [r7, #16]
 800ae48:	edd3 7a02 	vldr	s15, [r3, #8]
 800ae4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ae50:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae54:	edc7 7a07 	vstr	s15, [r7, #28]
	result.y = this->w*other.y - this->x*other.z + this->y*other.w + this->z*other.x;
 800ae58:	697b      	ldr	r3, [r7, #20]
 800ae5a:	ed93 7a00 	vldr	s14, [r3]
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	edd3 7a02 	vldr	s15, [r3, #8]
 800ae64:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ae68:	697b      	ldr	r3, [r7, #20]
 800ae6a:	edd3 6a01 	vldr	s13, [r3, #4]
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	edd3 7a03 	vldr	s15, [r3, #12]
 800ae74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ae78:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	edd3 6a02 	vldr	s13, [r3, #8]
 800ae82:	693b      	ldr	r3, [r7, #16]
 800ae84:	edd3 7a00 	vldr	s15, [r3]
 800ae88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ae8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ae90:	697b      	ldr	r3, [r7, #20]
 800ae92:	edd3 6a03 	vldr	s13, [r3, #12]
 800ae96:	693b      	ldr	r3, [r7, #16]
 800ae98:	edd3 7a01 	vldr	s15, [r3, #4]
 800ae9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aea0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aea4:	edc7 7a08 	vstr	s15, [r7, #32]
	result.z = this->w*other.z + this->x*other.y - this->y*other.x + this->z*other.w;
 800aea8:	697b      	ldr	r3, [r7, #20]
 800aeaa:	ed93 7a00 	vldr	s14, [r3]
 800aeae:	693b      	ldr	r3, [r7, #16]
 800aeb0:	edd3 7a03 	vldr	s15, [r3, #12]
 800aeb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	edd3 6a01 	vldr	s13, [r3, #4]
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	edd3 7a02 	vldr	s15, [r3, #8]
 800aec4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aec8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800aecc:	697b      	ldr	r3, [r7, #20]
 800aece:	edd3 6a02 	vldr	s13, [r3, #8]
 800aed2:	693b      	ldr	r3, [r7, #16]
 800aed4:	edd3 7a01 	vldr	s15, [r3, #4]
 800aed8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aedc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	edd3 6a03 	vldr	s13, [r3, #12]
 800aee6:	693b      	ldr	r3, [r7, #16]
 800aee8:	edd3 7a00 	vldr	s15, [r3]
 800aeec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aef0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aef4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	return result;
 800aef8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800aefc:	f107 0318 	add.w	r3, r7, #24
 800af00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800af02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800af06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800af0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af0e:	ee06 0a10 	vmov	s12, r0
 800af12:	ee06 1a90 	vmov	s13, r1
 800af16:	ee07 2a10 	vmov	s14, r2
 800af1a:	ee07 3a90 	vmov	s15, r3
}
 800af1e:	eeb0 0a46 	vmov.f32	s0, s12
 800af22:	eef0 0a66 	vmov.f32	s1, s13
 800af26:	eeb0 1a47 	vmov.f32	s2, s14
 800af2a:	eef0 1a67 	vmov.f32	s3, s15
 800af2e:	3738      	adds	r7, #56	; 0x38
 800af30:	46bd      	mov	sp, r7
 800af32:	bc90      	pop	{r4, r7}
 800af34:	4770      	bx	lr

0800af36 <_ZNK3Mat10QuaternionmlEf>:

Quaternion Quaternion::operator*(float f) const
{
 800af36:	b590      	push	{r4, r7, lr}
 800af38:	b08f      	sub	sp, #60	; 0x3c
 800af3a:	af00      	add	r7, sp, #0
 800af3c:	6178      	str	r0, [r7, #20]
 800af3e:	ed87 0a04 	vstr	s0, [r7, #16]
	Quaternion result = *this;
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	f107 0418 	add.w	r4, r7, #24
 800af48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800af4a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	result *= f;
 800af4e:	f107 0318 	add.w	r3, r7, #24
 800af52:	ed97 0a04 	vldr	s0, [r7, #16]
 800af56:	4618      	mov	r0, r3
 800af58:	f7ff fe6f 	bl	800ac3a <_ZN3Mat10QuaternionmLEf>
	return result;
 800af5c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800af60:	f107 0318 	add.w	r3, r7, #24
 800af64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800af66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800af6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800af6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af72:	ee06 0a10 	vmov	s12, r0
 800af76:	ee06 1a90 	vmov	s13, r1
 800af7a:	ee07 2a10 	vmov	s14, r2
 800af7e:	ee07 3a90 	vmov	s15, r3
}
 800af82:	eeb0 0a46 	vmov.f32	s0, s12
 800af86:	eef0 0a66 	vmov.f32	s1, s13
 800af8a:	eeb0 1a47 	vmov.f32	s2, s14
 800af8e:	eef0 1a67 	vmov.f32	s3, s15
 800af92:	373c      	adds	r7, #60	; 0x3c
 800af94:	46bd      	mov	sp, r7
 800af96:	bd90      	pop	{r4, r7, pc}

0800af98 <_ZNK3Mat10Quaternion9ConjugateEv>:

Quaternion Quaternion::Conjugate() const
{
 800af98:	b490      	push	{r4, r7}
 800af9a:	b08e      	sub	sp, #56	; 0x38
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6178      	str	r0, [r7, #20]
	Quaternion result = *this;
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	f107 0418 	add.w	r4, r7, #24
 800afa6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800afa8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	result.x*= -1.0f;
 800afac:	edd7 7a07 	vldr	s15, [r7, #28]
 800afb0:	eef1 7a67 	vneg.f32	s15, s15
 800afb4:	edc7 7a07 	vstr	s15, [r7, #28]
	result.y*= -1.0f;
 800afb8:	edd7 7a08 	vldr	s15, [r7, #32]
 800afbc:	eef1 7a67 	vneg.f32	s15, s15
 800afc0:	edc7 7a08 	vstr	s15, [r7, #32]
	result.z*= -1.0f;
 800afc4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800afc8:	eef1 7a67 	vneg.f32	s15, s15
 800afcc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	return result;
 800afd0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800afd4:	f107 0318 	add.w	r3, r7, #24
 800afd8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800afda:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800afde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800afe0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800afe2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afe6:	ee06 0a10 	vmov	s12, r0
 800afea:	ee06 1a90 	vmov	s13, r1
 800afee:	ee07 2a10 	vmov	s14, r2
 800aff2:	ee07 3a90 	vmov	s15, r3
}
 800aff6:	eeb0 0a46 	vmov.f32	s0, s12
 800affa:	eef0 0a66 	vmov.f32	s1, s13
 800affe:	eeb0 1a47 	vmov.f32	s2, s14
 800b002:	eef0 1a67 	vmov.f32	s3, s15
 800b006:	3738      	adds	r7, #56	; 0x38
 800b008:	46bd      	mov	sp, r7
 800b00a:	bc90      	pop	{r4, r7}
 800b00c:	4770      	bx	lr

0800b00e <_ZNK3Mat10Quaternion8InversedEv>:
	normalised.Normalise();
	return normalised;
}

Quaternion Quaternion::Inversed() const
{
 800b00e:	b590      	push	{r4, r7, lr}
 800b010:	b08f      	sub	sp, #60	; 0x3c
 800b012:	af00      	add	r7, sp, #0
 800b014:	6178      	str	r0, [r7, #20]
	Quaternion conjugate = Conjugate();
 800b016:	6978      	ldr	r0, [r7, #20]
 800b018:	f7ff ffbe 	bl	800af98 <_ZNK3Mat10Quaternion9ConjugateEv>
 800b01c:	eeb0 6a40 	vmov.f32	s12, s0
 800b020:	eef0 6a60 	vmov.f32	s13, s1
 800b024:	eeb0 7a41 	vmov.f32	s14, s2
 800b028:	eef0 7a61 	vmov.f32	s15, s3
 800b02c:	ed87 6a06 	vstr	s12, [r7, #24]
 800b030:	edc7 6a07 	vstr	s13, [r7, #28]
 800b034:	ed87 7a08 	vstr	s14, [r7, #32]
 800b038:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	conjugate.Normalise();
 800b03c:	f107 0318 	add.w	r3, r7, #24
 800b040:	4618      	mov	r0, r3
 800b042:	f7ff fe2f 	bl	800aca4 <_ZN3Mat10Quaternion9NormaliseEv>
	return conjugate;
 800b046:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800b04a:	f107 0318 	add.w	r3, r7, #24
 800b04e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b050:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b054:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b056:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b058:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b05a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b05c:	ee06 0a10 	vmov	s12, r0
 800b060:	ee06 1a90 	vmov	s13, r1
 800b064:	ee07 2a10 	vmov	s14, r2
 800b068:	ee07 3a90 	vmov	s15, r3
}
 800b06c:	eeb0 0a46 	vmov.f32	s0, s12
 800b070:	eef0 0a66 	vmov.f32	s1, s13
 800b074:	eeb0 1a47 	vmov.f32	s2, s14
 800b078:	eef0 1a67 	vmov.f32	s3, s15
 800b07c:	373c      	adds	r7, #60	; 0x3c
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd90      	pop	{r4, r7, pc}

0800b082 <_ZNK3Mat10Quaternion4NormEv>:

float Quaternion::Norm() const
{
 800b082:	b580      	push	{r7, lr}
 800b084:	b082      	sub	sp, #8
 800b086:	af00      	add	r7, sp, #0
 800b088:	6078      	str	r0, [r7, #4]
	return sqrt(w*w + x*x + y*y + z*z);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	ed93 7a00 	vldr	s14, [r3]
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	edd3 7a00 	vldr	s15, [r3]
 800b096:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	edd3 6a01 	vldr	s13, [r3, #4]
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	edd3 7a01 	vldr	s15, [r3, #4]
 800b0a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b0aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	edd3 6a02 	vldr	s13, [r3, #8]
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	edd3 7a02 	vldr	s15, [r3, #8]
 800b0ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b0be:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	edd3 6a03 	vldr	s13, [r3, #12]
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	edd3 7a03 	vldr	s15, [r3, #12]
 800b0ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b0d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b0d6:	eeb0 0a67 	vmov.f32	s0, s15
 800b0da:	f7fc fe85 	bl	8007de8 <_ZSt4sqrtf>
 800b0de:	eef0 7a40 	vmov.f32	s15, s0
}
 800b0e2:	eeb0 0a67 	vmov.f32	s0, s15
 800b0e6:	3708      	adds	r7, #8
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}

0800b0ec <__NVIC_SetPriority>:
{
 800b0ec:	b480      	push	{r7}
 800b0ee:	b083      	sub	sp, #12
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	6039      	str	r1, [r7, #0]
 800b0f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b0f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	db0a      	blt.n	800b116 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	b2da      	uxtb	r2, r3
 800b104:	490c      	ldr	r1, [pc, #48]	; (800b138 <__NVIC_SetPriority+0x4c>)
 800b106:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b10a:	0112      	lsls	r2, r2, #4
 800b10c:	b2d2      	uxtb	r2, r2
 800b10e:	440b      	add	r3, r1
 800b110:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b114:	e00a      	b.n	800b12c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	b2da      	uxtb	r2, r3
 800b11a:	4908      	ldr	r1, [pc, #32]	; (800b13c <__NVIC_SetPriority+0x50>)
 800b11c:	88fb      	ldrh	r3, [r7, #6]
 800b11e:	f003 030f 	and.w	r3, r3, #15
 800b122:	3b04      	subs	r3, #4
 800b124:	0112      	lsls	r2, r2, #4
 800b126:	b2d2      	uxtb	r2, r2
 800b128:	440b      	add	r3, r1
 800b12a:	761a      	strb	r2, [r3, #24]
}
 800b12c:	bf00      	nop
 800b12e:	370c      	adds	r7, #12
 800b130:	46bd      	mov	sp, r7
 800b132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b136:	4770      	bx	lr
 800b138:	e000e100 	.word	0xe000e100
 800b13c:	e000ed00 	.word	0xe000ed00

0800b140 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b140:	b580      	push	{r7, lr}
 800b142:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b144:	4b05      	ldr	r3, [pc, #20]	; (800b15c <SysTick_Handler+0x1c>)
 800b146:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b148:	f001 fcfe 	bl	800cb48 <xTaskGetSchedulerState>
 800b14c:	4603      	mov	r3, r0
 800b14e:	2b01      	cmp	r3, #1
 800b150:	d001      	beq.n	800b156 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b152:	f002 fae9 	bl	800d728 <xPortSysTickHandler>
  }
}
 800b156:	bf00      	nop
 800b158:	bd80      	pop	{r7, pc}
 800b15a:	bf00      	nop
 800b15c:	e000e010 	.word	0xe000e010

0800b160 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b160:	b580      	push	{r7, lr}
 800b162:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b164:	2100      	movs	r1, #0
 800b166:	f06f 0004 	mvn.w	r0, #4
 800b16a:	f7ff ffbf 	bl	800b0ec <__NVIC_SetPriority>
#endif
}
 800b16e:	bf00      	nop
 800b170:	bd80      	pop	{r7, pc}
	...

0800b174 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b174:	b480      	push	{r7}
 800b176:	b083      	sub	sp, #12
 800b178:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b17a:	f3ef 8305 	mrs	r3, IPSR
 800b17e:	603b      	str	r3, [r7, #0]
  return(result);
 800b180:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b182:	2b00      	cmp	r3, #0
 800b184:	d003      	beq.n	800b18e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b186:	f06f 0305 	mvn.w	r3, #5
 800b18a:	607b      	str	r3, [r7, #4]
 800b18c:	e00c      	b.n	800b1a8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b18e:	4b0a      	ldr	r3, [pc, #40]	; (800b1b8 <osKernelInitialize+0x44>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d105      	bne.n	800b1a2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b196:	4b08      	ldr	r3, [pc, #32]	; (800b1b8 <osKernelInitialize+0x44>)
 800b198:	2201      	movs	r2, #1
 800b19a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b19c:	2300      	movs	r3, #0
 800b19e:	607b      	str	r3, [r7, #4]
 800b1a0:	e002      	b.n	800b1a8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b1a2:	f04f 33ff 	mov.w	r3, #4294967295
 800b1a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b1a8:	687b      	ldr	r3, [r7, #4]
}
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	370c      	adds	r7, #12
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b4:	4770      	bx	lr
 800b1b6:	bf00      	nop
 800b1b8:	24000b78 	.word	0x24000b78

0800b1bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b082      	sub	sp, #8
 800b1c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b1c2:	f3ef 8305 	mrs	r3, IPSR
 800b1c6:	603b      	str	r3, [r7, #0]
  return(result);
 800b1c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d003      	beq.n	800b1d6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800b1ce:	f06f 0305 	mvn.w	r3, #5
 800b1d2:	607b      	str	r3, [r7, #4]
 800b1d4:	e010      	b.n	800b1f8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b1d6:	4b0b      	ldr	r3, [pc, #44]	; (800b204 <osKernelStart+0x48>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	2b01      	cmp	r3, #1
 800b1dc:	d109      	bne.n	800b1f2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b1de:	f7ff ffbf 	bl	800b160 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b1e2:	4b08      	ldr	r3, [pc, #32]	; (800b204 <osKernelStart+0x48>)
 800b1e4:	2202      	movs	r2, #2
 800b1e6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b1e8:	f001 f866 	bl	800c2b8 <vTaskStartScheduler>
      stat = osOK;
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	607b      	str	r3, [r7, #4]
 800b1f0:	e002      	b.n	800b1f8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b1f2:	f04f 33ff 	mov.w	r3, #4294967295
 800b1f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b1f8:	687b      	ldr	r3, [r7, #4]
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3708      	adds	r7, #8
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}
 800b202:	bf00      	nop
 800b204:	24000b78 	.word	0x24000b78

0800b208 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b208:	b580      	push	{r7, lr}
 800b20a:	b08e      	sub	sp, #56	; 0x38
 800b20c:	af04      	add	r7, sp, #16
 800b20e:	60f8      	str	r0, [r7, #12]
 800b210:	60b9      	str	r1, [r7, #8]
 800b212:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b214:	2300      	movs	r3, #0
 800b216:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b218:	f3ef 8305 	mrs	r3, IPSR
 800b21c:	617b      	str	r3, [r7, #20]
  return(result);
 800b21e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b220:	2b00      	cmp	r3, #0
 800b222:	d17e      	bne.n	800b322 <osThreadNew+0x11a>
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d07b      	beq.n	800b322 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b22a:	2380      	movs	r3, #128	; 0x80
 800b22c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b22e:	2318      	movs	r3, #24
 800b230:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b232:	2300      	movs	r3, #0
 800b234:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b236:	f04f 33ff 	mov.w	r3, #4294967295
 800b23a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d045      	beq.n	800b2ce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d002      	beq.n	800b250 <osThreadNew+0x48>
        name = attr->name;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	699b      	ldr	r3, [r3, #24]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d002      	beq.n	800b25e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	699b      	ldr	r3, [r3, #24]
 800b25c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b25e:	69fb      	ldr	r3, [r7, #28]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d008      	beq.n	800b276 <osThreadNew+0x6e>
 800b264:	69fb      	ldr	r3, [r7, #28]
 800b266:	2b38      	cmp	r3, #56	; 0x38
 800b268:	d805      	bhi.n	800b276 <osThreadNew+0x6e>
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	685b      	ldr	r3, [r3, #4]
 800b26e:	f003 0301 	and.w	r3, r3, #1
 800b272:	2b00      	cmp	r3, #0
 800b274:	d001      	beq.n	800b27a <osThreadNew+0x72>
        return (NULL);
 800b276:	2300      	movs	r3, #0
 800b278:	e054      	b.n	800b324 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	695b      	ldr	r3, [r3, #20]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d003      	beq.n	800b28a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	695b      	ldr	r3, [r3, #20]
 800b286:	089b      	lsrs	r3, r3, #2
 800b288:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	689b      	ldr	r3, [r3, #8]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d00e      	beq.n	800b2b0 <osThreadNew+0xa8>
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	68db      	ldr	r3, [r3, #12]
 800b296:	2b5b      	cmp	r3, #91	; 0x5b
 800b298:	d90a      	bls.n	800b2b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d006      	beq.n	800b2b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	695b      	ldr	r3, [r3, #20]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d002      	beq.n	800b2b0 <osThreadNew+0xa8>
        mem = 1;
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	61bb      	str	r3, [r7, #24]
 800b2ae:	e010      	b.n	800b2d2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	689b      	ldr	r3, [r3, #8]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d10c      	bne.n	800b2d2 <osThreadNew+0xca>
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	68db      	ldr	r3, [r3, #12]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d108      	bne.n	800b2d2 <osThreadNew+0xca>
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	691b      	ldr	r3, [r3, #16]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d104      	bne.n	800b2d2 <osThreadNew+0xca>
          mem = 0;
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	61bb      	str	r3, [r7, #24]
 800b2cc:	e001      	b.n	800b2d2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b2d2:	69bb      	ldr	r3, [r7, #24]
 800b2d4:	2b01      	cmp	r3, #1
 800b2d6:	d110      	bne.n	800b2fa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b2dc:	687a      	ldr	r2, [r7, #4]
 800b2de:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b2e0:	9202      	str	r2, [sp, #8]
 800b2e2:	9301      	str	r3, [sp, #4]
 800b2e4:	69fb      	ldr	r3, [r7, #28]
 800b2e6:	9300      	str	r3, [sp, #0]
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	6a3a      	ldr	r2, [r7, #32]
 800b2ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b2ee:	68f8      	ldr	r0, [r7, #12]
 800b2f0:	f000 fe0c 	bl	800bf0c <xTaskCreateStatic>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	613b      	str	r3, [r7, #16]
 800b2f8:	e013      	b.n	800b322 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b2fa:	69bb      	ldr	r3, [r7, #24]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d110      	bne.n	800b322 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b300:	6a3b      	ldr	r3, [r7, #32]
 800b302:	b29a      	uxth	r2, r3
 800b304:	f107 0310 	add.w	r3, r7, #16
 800b308:	9301      	str	r3, [sp, #4]
 800b30a:	69fb      	ldr	r3, [r7, #28]
 800b30c:	9300      	str	r3, [sp, #0]
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b312:	68f8      	ldr	r0, [r7, #12]
 800b314:	f000 fe57 	bl	800bfc6 <xTaskCreate>
 800b318:	4603      	mov	r3, r0
 800b31a:	2b01      	cmp	r3, #1
 800b31c:	d001      	beq.n	800b322 <osThreadNew+0x11a>
            hTask = NULL;
 800b31e:	2300      	movs	r3, #0
 800b320:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b322:	693b      	ldr	r3, [r7, #16]
}
 800b324:	4618      	mov	r0, r3
 800b326:	3728      	adds	r7, #40	; 0x28
 800b328:	46bd      	mov	sp, r7
 800b32a:	bd80      	pop	{r7, pc}

0800b32c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b084      	sub	sp, #16
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b334:	f3ef 8305 	mrs	r3, IPSR
 800b338:	60bb      	str	r3, [r7, #8]
  return(result);
 800b33a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d003      	beq.n	800b348 <osDelay+0x1c>
    stat = osErrorISR;
 800b340:	f06f 0305 	mvn.w	r3, #5
 800b344:	60fb      	str	r3, [r7, #12]
 800b346:	e007      	b.n	800b358 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b348:	2300      	movs	r3, #0
 800b34a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d002      	beq.n	800b358 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b352:	6878      	ldr	r0, [r7, #4]
 800b354:	f000 ff7c 	bl	800c250 <vTaskDelay>
    }
  }

  return (stat);
 800b358:	68fb      	ldr	r3, [r7, #12]
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	3710      	adds	r7, #16
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd80      	pop	{r7, pc}
	...

0800b364 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b364:	b480      	push	{r7}
 800b366:	b085      	sub	sp, #20
 800b368:	af00      	add	r7, sp, #0
 800b36a:	60f8      	str	r0, [r7, #12]
 800b36c:	60b9      	str	r1, [r7, #8]
 800b36e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	4a07      	ldr	r2, [pc, #28]	; (800b390 <vApplicationGetIdleTaskMemory+0x2c>)
 800b374:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	4a06      	ldr	r2, [pc, #24]	; (800b394 <vApplicationGetIdleTaskMemory+0x30>)
 800b37a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2280      	movs	r2, #128	; 0x80
 800b380:	601a      	str	r2, [r3, #0]
}
 800b382:	bf00      	nop
 800b384:	3714      	adds	r7, #20
 800b386:	46bd      	mov	sp, r7
 800b388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38c:	4770      	bx	lr
 800b38e:	bf00      	nop
 800b390:	24000b7c 	.word	0x24000b7c
 800b394:	24000bd8 	.word	0x24000bd8

0800b398 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b398:	b480      	push	{r7}
 800b39a:	b085      	sub	sp, #20
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	60f8      	str	r0, [r7, #12]
 800b3a0:	60b9      	str	r1, [r7, #8]
 800b3a2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	4a07      	ldr	r2, [pc, #28]	; (800b3c4 <vApplicationGetTimerTaskMemory+0x2c>)
 800b3a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	4a06      	ldr	r2, [pc, #24]	; (800b3c8 <vApplicationGetTimerTaskMemory+0x30>)
 800b3ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b3b6:	601a      	str	r2, [r3, #0]
}
 800b3b8:	bf00      	nop
 800b3ba:	3714      	adds	r7, #20
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c2:	4770      	bx	lr
 800b3c4:	24000dd8 	.word	0x24000dd8
 800b3c8:	24000e34 	.word	0x24000e34

0800b3cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	b083      	sub	sp, #12
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f103 0208 	add.w	r2, r3, #8
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	f04f 32ff 	mov.w	r2, #4294967295
 800b3e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	f103 0208 	add.w	r2, r3, #8
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f103 0208 	add.w	r2, r3, #8
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b400:	bf00      	nop
 800b402:	370c      	adds	r7, #12
 800b404:	46bd      	mov	sp, r7
 800b406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40a:	4770      	bx	lr

0800b40c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b40c:	b480      	push	{r7}
 800b40e:	b083      	sub	sp, #12
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2200      	movs	r2, #0
 800b418:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b41a:	bf00      	nop
 800b41c:	370c      	adds	r7, #12
 800b41e:	46bd      	mov	sp, r7
 800b420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b424:	4770      	bx	lr

0800b426 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b426:	b480      	push	{r7}
 800b428:	b085      	sub	sp, #20
 800b42a:	af00      	add	r7, sp, #0
 800b42c:	6078      	str	r0, [r7, #4]
 800b42e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	685b      	ldr	r3, [r3, #4]
 800b434:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	68fa      	ldr	r2, [r7, #12]
 800b43a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	689a      	ldr	r2, [r3, #8]
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	689b      	ldr	r3, [r3, #8]
 800b448:	683a      	ldr	r2, [r7, #0]
 800b44a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	683a      	ldr	r2, [r7, #0]
 800b450:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	687a      	ldr	r2, [r7, #4]
 800b456:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	1c5a      	adds	r2, r3, #1
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	601a      	str	r2, [r3, #0]
}
 800b462:	bf00      	nop
 800b464:	3714      	adds	r7, #20
 800b466:	46bd      	mov	sp, r7
 800b468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46c:	4770      	bx	lr

0800b46e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b46e:	b480      	push	{r7}
 800b470:	b085      	sub	sp, #20
 800b472:	af00      	add	r7, sp, #0
 800b474:	6078      	str	r0, [r7, #4]
 800b476:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b47e:	68bb      	ldr	r3, [r7, #8]
 800b480:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b484:	d103      	bne.n	800b48e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	691b      	ldr	r3, [r3, #16]
 800b48a:	60fb      	str	r3, [r7, #12]
 800b48c:	e00c      	b.n	800b4a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	3308      	adds	r3, #8
 800b492:	60fb      	str	r3, [r7, #12]
 800b494:	e002      	b.n	800b49c <vListInsert+0x2e>
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	685b      	ldr	r3, [r3, #4]
 800b49a:	60fb      	str	r3, [r7, #12]
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	685b      	ldr	r3, [r3, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	68ba      	ldr	r2, [r7, #8]
 800b4a4:	429a      	cmp	r2, r3
 800b4a6:	d2f6      	bcs.n	800b496 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	685a      	ldr	r2, [r3, #4]
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	685b      	ldr	r3, [r3, #4]
 800b4b4:	683a      	ldr	r2, [r7, #0]
 800b4b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	68fa      	ldr	r2, [r7, #12]
 800b4bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	683a      	ldr	r2, [r7, #0]
 800b4c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	687a      	ldr	r2, [r7, #4]
 800b4c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	1c5a      	adds	r2, r3, #1
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	601a      	str	r2, [r3, #0]
}
 800b4d4:	bf00      	nop
 800b4d6:	3714      	adds	r7, #20
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr

0800b4e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	b085      	sub	sp, #20
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	691b      	ldr	r3, [r3, #16]
 800b4ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	685b      	ldr	r3, [r3, #4]
 800b4f2:	687a      	ldr	r2, [r7, #4]
 800b4f4:	6892      	ldr	r2, [r2, #8]
 800b4f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	689b      	ldr	r3, [r3, #8]
 800b4fc:	687a      	ldr	r2, [r7, #4]
 800b4fe:	6852      	ldr	r2, [r2, #4]
 800b500:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	685b      	ldr	r3, [r3, #4]
 800b506:	687a      	ldr	r2, [r7, #4]
 800b508:	429a      	cmp	r2, r3
 800b50a:	d103      	bne.n	800b514 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	689a      	ldr	r2, [r3, #8]
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2200      	movs	r2, #0
 800b518:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	1e5a      	subs	r2, r3, #1
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	681b      	ldr	r3, [r3, #0]
}
 800b528:	4618      	mov	r0, r3
 800b52a:	3714      	adds	r7, #20
 800b52c:	46bd      	mov	sp, r7
 800b52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b532:	4770      	bx	lr

0800b534 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b084      	sub	sp, #16
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
 800b53c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d10a      	bne.n	800b55e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b54c:	f383 8811 	msr	BASEPRI, r3
 800b550:	f3bf 8f6f 	isb	sy
 800b554:	f3bf 8f4f 	dsb	sy
 800b558:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b55a:	bf00      	nop
 800b55c:	e7fe      	b.n	800b55c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b55e:	f002 f851 	bl	800d604 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681a      	ldr	r2, [r3, #0]
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b56a:	68f9      	ldr	r1, [r7, #12]
 800b56c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b56e:	fb01 f303 	mul.w	r3, r1, r3
 800b572:	441a      	add	r2, r3
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	2200      	movs	r2, #0
 800b57c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	681a      	ldr	r2, [r3, #0]
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	681a      	ldr	r2, [r3, #0]
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b58e:	3b01      	subs	r3, #1
 800b590:	68f9      	ldr	r1, [r7, #12]
 800b592:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b594:	fb01 f303 	mul.w	r3, r1, r3
 800b598:	441a      	add	r2, r3
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	22ff      	movs	r2, #255	; 0xff
 800b5a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	22ff      	movs	r2, #255	; 0xff
 800b5aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d114      	bne.n	800b5de <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	691b      	ldr	r3, [r3, #16]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d01a      	beq.n	800b5f2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	3310      	adds	r3, #16
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	f001 f903 	bl	800c7cc <xTaskRemoveFromEventList>
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d012      	beq.n	800b5f2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b5cc:	4b0c      	ldr	r3, [pc, #48]	; (800b600 <xQueueGenericReset+0xcc>)
 800b5ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5d2:	601a      	str	r2, [r3, #0]
 800b5d4:	f3bf 8f4f 	dsb	sy
 800b5d8:	f3bf 8f6f 	isb	sy
 800b5dc:	e009      	b.n	800b5f2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	3310      	adds	r3, #16
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f7ff fef2 	bl	800b3cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	3324      	adds	r3, #36	; 0x24
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f7ff feed 	bl	800b3cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b5f2:	f002 f837 	bl	800d664 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b5f6:	2301      	movs	r3, #1
}
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	3710      	adds	r7, #16
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bd80      	pop	{r7, pc}
 800b600:	e000ed04 	.word	0xe000ed04

0800b604 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b604:	b580      	push	{r7, lr}
 800b606:	b08e      	sub	sp, #56	; 0x38
 800b608:	af02      	add	r7, sp, #8
 800b60a:	60f8      	str	r0, [r7, #12]
 800b60c:	60b9      	str	r1, [r7, #8]
 800b60e:	607a      	str	r2, [r7, #4]
 800b610:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d10a      	bne.n	800b62e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b61c:	f383 8811 	msr	BASEPRI, r3
 800b620:	f3bf 8f6f 	isb	sy
 800b624:	f3bf 8f4f 	dsb	sy
 800b628:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b62a:	bf00      	nop
 800b62c:	e7fe      	b.n	800b62c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d10a      	bne.n	800b64a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b634:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b638:	f383 8811 	msr	BASEPRI, r3
 800b63c:	f3bf 8f6f 	isb	sy
 800b640:	f3bf 8f4f 	dsb	sy
 800b644:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b646:	bf00      	nop
 800b648:	e7fe      	b.n	800b648 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d002      	beq.n	800b656 <xQueueGenericCreateStatic+0x52>
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d001      	beq.n	800b65a <xQueueGenericCreateStatic+0x56>
 800b656:	2301      	movs	r3, #1
 800b658:	e000      	b.n	800b65c <xQueueGenericCreateStatic+0x58>
 800b65a:	2300      	movs	r3, #0
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d10a      	bne.n	800b676 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b660:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b664:	f383 8811 	msr	BASEPRI, r3
 800b668:	f3bf 8f6f 	isb	sy
 800b66c:	f3bf 8f4f 	dsb	sy
 800b670:	623b      	str	r3, [r7, #32]
}
 800b672:	bf00      	nop
 800b674:	e7fe      	b.n	800b674 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d102      	bne.n	800b682 <xQueueGenericCreateStatic+0x7e>
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d101      	bne.n	800b686 <xQueueGenericCreateStatic+0x82>
 800b682:	2301      	movs	r3, #1
 800b684:	e000      	b.n	800b688 <xQueueGenericCreateStatic+0x84>
 800b686:	2300      	movs	r3, #0
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d10a      	bne.n	800b6a2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b68c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b690:	f383 8811 	msr	BASEPRI, r3
 800b694:	f3bf 8f6f 	isb	sy
 800b698:	f3bf 8f4f 	dsb	sy
 800b69c:	61fb      	str	r3, [r7, #28]
}
 800b69e:	bf00      	nop
 800b6a0:	e7fe      	b.n	800b6a0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b6a2:	2350      	movs	r3, #80	; 0x50
 800b6a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b6a6:	697b      	ldr	r3, [r7, #20]
 800b6a8:	2b50      	cmp	r3, #80	; 0x50
 800b6aa:	d00a      	beq.n	800b6c2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b6ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6b0:	f383 8811 	msr	BASEPRI, r3
 800b6b4:	f3bf 8f6f 	isb	sy
 800b6b8:	f3bf 8f4f 	dsb	sy
 800b6bc:	61bb      	str	r3, [r7, #24]
}
 800b6be:	bf00      	nop
 800b6c0:	e7fe      	b.n	800b6c0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b6c2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b6c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d00d      	beq.n	800b6ea <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b6ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6d0:	2201      	movs	r2, #1
 800b6d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b6d6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b6da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6dc:	9300      	str	r3, [sp, #0]
 800b6de:	4613      	mov	r3, r2
 800b6e0:	687a      	ldr	r2, [r7, #4]
 800b6e2:	68b9      	ldr	r1, [r7, #8]
 800b6e4:	68f8      	ldr	r0, [r7, #12]
 800b6e6:	f000 f805 	bl	800b6f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	3730      	adds	r7, #48	; 0x30
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}

0800b6f4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b084      	sub	sp, #16
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	60f8      	str	r0, [r7, #12]
 800b6fc:	60b9      	str	r1, [r7, #8]
 800b6fe:	607a      	str	r2, [r7, #4]
 800b700:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d103      	bne.n	800b710 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b708:	69bb      	ldr	r3, [r7, #24]
 800b70a:	69ba      	ldr	r2, [r7, #24]
 800b70c:	601a      	str	r2, [r3, #0]
 800b70e:	e002      	b.n	800b716 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b710:	69bb      	ldr	r3, [r7, #24]
 800b712:	687a      	ldr	r2, [r7, #4]
 800b714:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b716:	69bb      	ldr	r3, [r7, #24]
 800b718:	68fa      	ldr	r2, [r7, #12]
 800b71a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b71c:	69bb      	ldr	r3, [r7, #24]
 800b71e:	68ba      	ldr	r2, [r7, #8]
 800b720:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b722:	2101      	movs	r1, #1
 800b724:	69b8      	ldr	r0, [r7, #24]
 800b726:	f7ff ff05 	bl	800b534 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b72a:	69bb      	ldr	r3, [r7, #24]
 800b72c:	78fa      	ldrb	r2, [r7, #3]
 800b72e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b732:	bf00      	nop
 800b734:	3710      	adds	r7, #16
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}
	...

0800b73c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b08e      	sub	sp, #56	; 0x38
 800b740:	af00      	add	r7, sp, #0
 800b742:	60f8      	str	r0, [r7, #12]
 800b744:	60b9      	str	r1, [r7, #8]
 800b746:	607a      	str	r2, [r7, #4]
 800b748:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b74a:	2300      	movs	r3, #0
 800b74c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b754:	2b00      	cmp	r3, #0
 800b756:	d10a      	bne.n	800b76e <xQueueGenericSend+0x32>
	__asm volatile
 800b758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b75c:	f383 8811 	msr	BASEPRI, r3
 800b760:	f3bf 8f6f 	isb	sy
 800b764:	f3bf 8f4f 	dsb	sy
 800b768:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b76a:	bf00      	nop
 800b76c:	e7fe      	b.n	800b76c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d103      	bne.n	800b77c <xQueueGenericSend+0x40>
 800b774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d101      	bne.n	800b780 <xQueueGenericSend+0x44>
 800b77c:	2301      	movs	r3, #1
 800b77e:	e000      	b.n	800b782 <xQueueGenericSend+0x46>
 800b780:	2300      	movs	r3, #0
 800b782:	2b00      	cmp	r3, #0
 800b784:	d10a      	bne.n	800b79c <xQueueGenericSend+0x60>
	__asm volatile
 800b786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b78a:	f383 8811 	msr	BASEPRI, r3
 800b78e:	f3bf 8f6f 	isb	sy
 800b792:	f3bf 8f4f 	dsb	sy
 800b796:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b798:	bf00      	nop
 800b79a:	e7fe      	b.n	800b79a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	2b02      	cmp	r3, #2
 800b7a0:	d103      	bne.n	800b7aa <xQueueGenericSend+0x6e>
 800b7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7a6:	2b01      	cmp	r3, #1
 800b7a8:	d101      	bne.n	800b7ae <xQueueGenericSend+0x72>
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	e000      	b.n	800b7b0 <xQueueGenericSend+0x74>
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d10a      	bne.n	800b7ca <xQueueGenericSend+0x8e>
	__asm volatile
 800b7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b8:	f383 8811 	msr	BASEPRI, r3
 800b7bc:	f3bf 8f6f 	isb	sy
 800b7c0:	f3bf 8f4f 	dsb	sy
 800b7c4:	623b      	str	r3, [r7, #32]
}
 800b7c6:	bf00      	nop
 800b7c8:	e7fe      	b.n	800b7c8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b7ca:	f001 f9bd 	bl	800cb48 <xTaskGetSchedulerState>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d102      	bne.n	800b7da <xQueueGenericSend+0x9e>
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d101      	bne.n	800b7de <xQueueGenericSend+0xa2>
 800b7da:	2301      	movs	r3, #1
 800b7dc:	e000      	b.n	800b7e0 <xQueueGenericSend+0xa4>
 800b7de:	2300      	movs	r3, #0
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d10a      	bne.n	800b7fa <xQueueGenericSend+0xbe>
	__asm volatile
 800b7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e8:	f383 8811 	msr	BASEPRI, r3
 800b7ec:	f3bf 8f6f 	isb	sy
 800b7f0:	f3bf 8f4f 	dsb	sy
 800b7f4:	61fb      	str	r3, [r7, #28]
}
 800b7f6:	bf00      	nop
 800b7f8:	e7fe      	b.n	800b7f8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b7fa:	f001 ff03 	bl	800d604 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b800:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b806:	429a      	cmp	r2, r3
 800b808:	d302      	bcc.n	800b810 <xQueueGenericSend+0xd4>
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	2b02      	cmp	r3, #2
 800b80e:	d129      	bne.n	800b864 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b810:	683a      	ldr	r2, [r7, #0]
 800b812:	68b9      	ldr	r1, [r7, #8]
 800b814:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b816:	f000 fa0b 	bl	800bc30 <prvCopyDataToQueue>
 800b81a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b81e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b820:	2b00      	cmp	r3, #0
 800b822:	d010      	beq.n	800b846 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b826:	3324      	adds	r3, #36	; 0x24
 800b828:	4618      	mov	r0, r3
 800b82a:	f000 ffcf 	bl	800c7cc <xTaskRemoveFromEventList>
 800b82e:	4603      	mov	r3, r0
 800b830:	2b00      	cmp	r3, #0
 800b832:	d013      	beq.n	800b85c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b834:	4b3f      	ldr	r3, [pc, #252]	; (800b934 <xQueueGenericSend+0x1f8>)
 800b836:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b83a:	601a      	str	r2, [r3, #0]
 800b83c:	f3bf 8f4f 	dsb	sy
 800b840:	f3bf 8f6f 	isb	sy
 800b844:	e00a      	b.n	800b85c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d007      	beq.n	800b85c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b84c:	4b39      	ldr	r3, [pc, #228]	; (800b934 <xQueueGenericSend+0x1f8>)
 800b84e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b852:	601a      	str	r2, [r3, #0]
 800b854:	f3bf 8f4f 	dsb	sy
 800b858:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b85c:	f001 ff02 	bl	800d664 <vPortExitCritical>
				return pdPASS;
 800b860:	2301      	movs	r3, #1
 800b862:	e063      	b.n	800b92c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d103      	bne.n	800b872 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b86a:	f001 fefb 	bl	800d664 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b86e:	2300      	movs	r3, #0
 800b870:	e05c      	b.n	800b92c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b874:	2b00      	cmp	r3, #0
 800b876:	d106      	bne.n	800b886 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b878:	f107 0314 	add.w	r3, r7, #20
 800b87c:	4618      	mov	r0, r3
 800b87e:	f001 f809 	bl	800c894 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b882:	2301      	movs	r3, #1
 800b884:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b886:	f001 feed 	bl	800d664 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b88a:	f000 fd7b 	bl	800c384 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b88e:	f001 feb9 	bl	800d604 <vPortEnterCritical>
 800b892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b894:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b898:	b25b      	sxtb	r3, r3
 800b89a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b89e:	d103      	bne.n	800b8a8 <xQueueGenericSend+0x16c>
 800b8a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b8a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b8ae:	b25b      	sxtb	r3, r3
 800b8b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8b4:	d103      	bne.n	800b8be <xQueueGenericSend+0x182>
 800b8b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b8be:	f001 fed1 	bl	800d664 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b8c2:	1d3a      	adds	r2, r7, #4
 800b8c4:	f107 0314 	add.w	r3, r7, #20
 800b8c8:	4611      	mov	r1, r2
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f000 fff8 	bl	800c8c0 <xTaskCheckForTimeOut>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d124      	bne.n	800b920 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b8d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8d8:	f000 faa2 	bl	800be20 <prvIsQueueFull>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d018      	beq.n	800b914 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8e4:	3310      	adds	r3, #16
 800b8e6:	687a      	ldr	r2, [r7, #4]
 800b8e8:	4611      	mov	r1, r2
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f000 ff1e 	bl	800c72c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b8f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8f2:	f000 fa2d 	bl	800bd50 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b8f6:	f000 fd53 	bl	800c3a0 <xTaskResumeAll>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	f47f af7c 	bne.w	800b7fa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b902:	4b0c      	ldr	r3, [pc, #48]	; (800b934 <xQueueGenericSend+0x1f8>)
 800b904:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b908:	601a      	str	r2, [r3, #0]
 800b90a:	f3bf 8f4f 	dsb	sy
 800b90e:	f3bf 8f6f 	isb	sy
 800b912:	e772      	b.n	800b7fa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b914:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b916:	f000 fa1b 	bl	800bd50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b91a:	f000 fd41 	bl	800c3a0 <xTaskResumeAll>
 800b91e:	e76c      	b.n	800b7fa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b920:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b922:	f000 fa15 	bl	800bd50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b926:	f000 fd3b 	bl	800c3a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b92a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	3738      	adds	r7, #56	; 0x38
 800b930:	46bd      	mov	sp, r7
 800b932:	bd80      	pop	{r7, pc}
 800b934:	e000ed04 	.word	0xe000ed04

0800b938 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b090      	sub	sp, #64	; 0x40
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	60f8      	str	r0, [r7, #12]
 800b940:	60b9      	str	r1, [r7, #8]
 800b942:	607a      	str	r2, [r7, #4]
 800b944:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b94a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d10a      	bne.n	800b966 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b954:	f383 8811 	msr	BASEPRI, r3
 800b958:	f3bf 8f6f 	isb	sy
 800b95c:	f3bf 8f4f 	dsb	sy
 800b960:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b962:	bf00      	nop
 800b964:	e7fe      	b.n	800b964 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b966:	68bb      	ldr	r3, [r7, #8]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d103      	bne.n	800b974 <xQueueGenericSendFromISR+0x3c>
 800b96c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b96e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b970:	2b00      	cmp	r3, #0
 800b972:	d101      	bne.n	800b978 <xQueueGenericSendFromISR+0x40>
 800b974:	2301      	movs	r3, #1
 800b976:	e000      	b.n	800b97a <xQueueGenericSendFromISR+0x42>
 800b978:	2300      	movs	r3, #0
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d10a      	bne.n	800b994 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b982:	f383 8811 	msr	BASEPRI, r3
 800b986:	f3bf 8f6f 	isb	sy
 800b98a:	f3bf 8f4f 	dsb	sy
 800b98e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b990:	bf00      	nop
 800b992:	e7fe      	b.n	800b992 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	2b02      	cmp	r3, #2
 800b998:	d103      	bne.n	800b9a2 <xQueueGenericSendFromISR+0x6a>
 800b99a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b99c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b99e:	2b01      	cmp	r3, #1
 800b9a0:	d101      	bne.n	800b9a6 <xQueueGenericSendFromISR+0x6e>
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	e000      	b.n	800b9a8 <xQueueGenericSendFromISR+0x70>
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d10a      	bne.n	800b9c2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b9ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9b0:	f383 8811 	msr	BASEPRI, r3
 800b9b4:	f3bf 8f6f 	isb	sy
 800b9b8:	f3bf 8f4f 	dsb	sy
 800b9bc:	623b      	str	r3, [r7, #32]
}
 800b9be:	bf00      	nop
 800b9c0:	e7fe      	b.n	800b9c0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b9c2:	f001 ff01 	bl	800d7c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b9c6:	f3ef 8211 	mrs	r2, BASEPRI
 800b9ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ce:	f383 8811 	msr	BASEPRI, r3
 800b9d2:	f3bf 8f6f 	isb	sy
 800b9d6:	f3bf 8f4f 	dsb	sy
 800b9da:	61fa      	str	r2, [r7, #28]
 800b9dc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b9de:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b9e0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b9e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9ea:	429a      	cmp	r2, r3
 800b9ec:	d302      	bcc.n	800b9f4 <xQueueGenericSendFromISR+0xbc>
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	2b02      	cmp	r3, #2
 800b9f2:	d12f      	bne.n	800ba54 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b9f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b9fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b9fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba02:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ba04:	683a      	ldr	r2, [r7, #0]
 800ba06:	68b9      	ldr	r1, [r7, #8]
 800ba08:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ba0a:	f000 f911 	bl	800bc30 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ba0e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ba12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba16:	d112      	bne.n	800ba3e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ba18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d016      	beq.n	800ba4e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ba20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba22:	3324      	adds	r3, #36	; 0x24
 800ba24:	4618      	mov	r0, r3
 800ba26:	f000 fed1 	bl	800c7cc <xTaskRemoveFromEventList>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d00e      	beq.n	800ba4e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d00b      	beq.n	800ba4e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2201      	movs	r2, #1
 800ba3a:	601a      	str	r2, [r3, #0]
 800ba3c:	e007      	b.n	800ba4e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ba3e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ba42:	3301      	adds	r3, #1
 800ba44:	b2db      	uxtb	r3, r3
 800ba46:	b25a      	sxtb	r2, r3
 800ba48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ba4e:	2301      	movs	r3, #1
 800ba50:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ba52:	e001      	b.n	800ba58 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ba54:	2300      	movs	r3, #0
 800ba56:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba5a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ba5c:	697b      	ldr	r3, [r7, #20]
 800ba5e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ba62:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ba64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3740      	adds	r7, #64	; 0x40
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}
	...

0800ba70 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b08c      	sub	sp, #48	; 0x30
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	60f8      	str	r0, [r7, #12]
 800ba78:	60b9      	str	r1, [r7, #8]
 800ba7a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ba84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d10a      	bne.n	800baa0 <xQueueReceive+0x30>
	__asm volatile
 800ba8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba8e:	f383 8811 	msr	BASEPRI, r3
 800ba92:	f3bf 8f6f 	isb	sy
 800ba96:	f3bf 8f4f 	dsb	sy
 800ba9a:	623b      	str	r3, [r7, #32]
}
 800ba9c:	bf00      	nop
 800ba9e:	e7fe      	b.n	800ba9e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d103      	bne.n	800baae <xQueueReceive+0x3e>
 800baa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d101      	bne.n	800bab2 <xQueueReceive+0x42>
 800baae:	2301      	movs	r3, #1
 800bab0:	e000      	b.n	800bab4 <xQueueReceive+0x44>
 800bab2:	2300      	movs	r3, #0
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d10a      	bne.n	800bace <xQueueReceive+0x5e>
	__asm volatile
 800bab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800babc:	f383 8811 	msr	BASEPRI, r3
 800bac0:	f3bf 8f6f 	isb	sy
 800bac4:	f3bf 8f4f 	dsb	sy
 800bac8:	61fb      	str	r3, [r7, #28]
}
 800baca:	bf00      	nop
 800bacc:	e7fe      	b.n	800bacc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bace:	f001 f83b 	bl	800cb48 <xTaskGetSchedulerState>
 800bad2:	4603      	mov	r3, r0
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d102      	bne.n	800bade <xQueueReceive+0x6e>
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d101      	bne.n	800bae2 <xQueueReceive+0x72>
 800bade:	2301      	movs	r3, #1
 800bae0:	e000      	b.n	800bae4 <xQueueReceive+0x74>
 800bae2:	2300      	movs	r3, #0
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d10a      	bne.n	800bafe <xQueueReceive+0x8e>
	__asm volatile
 800bae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baec:	f383 8811 	msr	BASEPRI, r3
 800baf0:	f3bf 8f6f 	isb	sy
 800baf4:	f3bf 8f4f 	dsb	sy
 800baf8:	61bb      	str	r3, [r7, #24]
}
 800bafa:	bf00      	nop
 800bafc:	e7fe      	b.n	800bafc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bafe:	f001 fd81 	bl	800d604 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bb02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb06:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bb08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d01f      	beq.n	800bb4e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bb0e:	68b9      	ldr	r1, [r7, #8]
 800bb10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb12:	f000 f8f7 	bl	800bd04 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bb16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb18:	1e5a      	subs	r2, r3, #1
 800bb1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb1c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb20:	691b      	ldr	r3, [r3, #16]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d00f      	beq.n	800bb46 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb28:	3310      	adds	r3, #16
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f000 fe4e 	bl	800c7cc <xTaskRemoveFromEventList>
 800bb30:	4603      	mov	r3, r0
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d007      	beq.n	800bb46 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bb36:	4b3d      	ldr	r3, [pc, #244]	; (800bc2c <xQueueReceive+0x1bc>)
 800bb38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb3c:	601a      	str	r2, [r3, #0]
 800bb3e:	f3bf 8f4f 	dsb	sy
 800bb42:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bb46:	f001 fd8d 	bl	800d664 <vPortExitCritical>
				return pdPASS;
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	e069      	b.n	800bc22 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d103      	bne.n	800bb5c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bb54:	f001 fd86 	bl	800d664 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bb58:	2300      	movs	r3, #0
 800bb5a:	e062      	b.n	800bc22 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bb5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d106      	bne.n	800bb70 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bb62:	f107 0310 	add.w	r3, r7, #16
 800bb66:	4618      	mov	r0, r3
 800bb68:	f000 fe94 	bl	800c894 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bb6c:	2301      	movs	r3, #1
 800bb6e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bb70:	f001 fd78 	bl	800d664 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bb74:	f000 fc06 	bl	800c384 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bb78:	f001 fd44 	bl	800d604 <vPortEnterCritical>
 800bb7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb82:	b25b      	sxtb	r3, r3
 800bb84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb88:	d103      	bne.n	800bb92 <xQueueReceive+0x122>
 800bb8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb98:	b25b      	sxtb	r3, r3
 800bb9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb9e:	d103      	bne.n	800bba8 <xQueueReceive+0x138>
 800bba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bba2:	2200      	movs	r2, #0
 800bba4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bba8:	f001 fd5c 	bl	800d664 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bbac:	1d3a      	adds	r2, r7, #4
 800bbae:	f107 0310 	add.w	r3, r7, #16
 800bbb2:	4611      	mov	r1, r2
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f000 fe83 	bl	800c8c0 <xTaskCheckForTimeOut>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d123      	bne.n	800bc08 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bbc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbc2:	f000 f917 	bl	800bdf4 <prvIsQueueEmpty>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d017      	beq.n	800bbfc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bbcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbce:	3324      	adds	r3, #36	; 0x24
 800bbd0:	687a      	ldr	r2, [r7, #4]
 800bbd2:	4611      	mov	r1, r2
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f000 fda9 	bl	800c72c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bbda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbdc:	f000 f8b8 	bl	800bd50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bbe0:	f000 fbde 	bl	800c3a0 <xTaskResumeAll>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d189      	bne.n	800bafe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800bbea:	4b10      	ldr	r3, [pc, #64]	; (800bc2c <xQueueReceive+0x1bc>)
 800bbec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbf0:	601a      	str	r2, [r3, #0]
 800bbf2:	f3bf 8f4f 	dsb	sy
 800bbf6:	f3bf 8f6f 	isb	sy
 800bbfa:	e780      	b.n	800bafe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bbfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbfe:	f000 f8a7 	bl	800bd50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bc02:	f000 fbcd 	bl	800c3a0 <xTaskResumeAll>
 800bc06:	e77a      	b.n	800bafe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bc08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc0a:	f000 f8a1 	bl	800bd50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bc0e:	f000 fbc7 	bl	800c3a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bc12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc14:	f000 f8ee 	bl	800bdf4 <prvIsQueueEmpty>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	f43f af6f 	beq.w	800bafe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bc20:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	3730      	adds	r7, #48	; 0x30
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}
 800bc2a:	bf00      	nop
 800bc2c:	e000ed04 	.word	0xe000ed04

0800bc30 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b086      	sub	sp, #24
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	60f8      	str	r0, [r7, #12]
 800bc38:	60b9      	str	r1, [r7, #8]
 800bc3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc44:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d10d      	bne.n	800bc6a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d14d      	bne.n	800bcf2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	689b      	ldr	r3, [r3, #8]
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f000 ff92 	bl	800cb84 <xTaskPriorityDisinherit>
 800bc60:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	2200      	movs	r2, #0
 800bc66:	609a      	str	r2, [r3, #8]
 800bc68:	e043      	b.n	800bcf2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d119      	bne.n	800bca4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	6858      	ldr	r0, [r3, #4]
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc78:	461a      	mov	r2, r3
 800bc7a:	68b9      	ldr	r1, [r7, #8]
 800bc7c:	f003 fe19 	bl	800f8b2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	685a      	ldr	r2, [r3, #4]
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc88:	441a      	add	r2, r3
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	685a      	ldr	r2, [r3, #4]
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	689b      	ldr	r3, [r3, #8]
 800bc96:	429a      	cmp	r2, r3
 800bc98:	d32b      	bcc.n	800bcf2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	681a      	ldr	r2, [r3, #0]
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	605a      	str	r2, [r3, #4]
 800bca2:	e026      	b.n	800bcf2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	68d8      	ldr	r0, [r3, #12]
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcac:	461a      	mov	r2, r3
 800bcae:	68b9      	ldr	r1, [r7, #8]
 800bcb0:	f003 fdff 	bl	800f8b2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	68da      	ldr	r2, [r3, #12]
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcbc:	425b      	negs	r3, r3
 800bcbe:	441a      	add	r2, r3
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	68da      	ldr	r2, [r3, #12]
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	429a      	cmp	r2, r3
 800bcce:	d207      	bcs.n	800bce0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	689a      	ldr	r2, [r3, #8]
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcd8:	425b      	negs	r3, r3
 800bcda:	441a      	add	r2, r3
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2b02      	cmp	r3, #2
 800bce4:	d105      	bne.n	800bcf2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bce6:	693b      	ldr	r3, [r7, #16]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d002      	beq.n	800bcf2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bcec:	693b      	ldr	r3, [r7, #16]
 800bcee:	3b01      	subs	r3, #1
 800bcf0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	1c5a      	adds	r2, r3, #1
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bcfa:	697b      	ldr	r3, [r7, #20]
}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	3718      	adds	r7, #24
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}

0800bd04 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b082      	sub	sp, #8
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
 800bd0c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d018      	beq.n	800bd48 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	68da      	ldr	r2, [r3, #12]
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd1e:	441a      	add	r2, r3
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	68da      	ldr	r2, [r3, #12]
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	689b      	ldr	r3, [r3, #8]
 800bd2c:	429a      	cmp	r2, r3
 800bd2e:	d303      	bcc.n	800bd38 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681a      	ldr	r2, [r3, #0]
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	68d9      	ldr	r1, [r3, #12]
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd40:	461a      	mov	r2, r3
 800bd42:	6838      	ldr	r0, [r7, #0]
 800bd44:	f003 fdb5 	bl	800f8b2 <memcpy>
	}
}
 800bd48:	bf00      	nop
 800bd4a:	3708      	adds	r7, #8
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd80      	pop	{r7, pc}

0800bd50 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b084      	sub	sp, #16
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bd58:	f001 fc54 	bl	800d604 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd62:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bd64:	e011      	b.n	800bd8a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d012      	beq.n	800bd94 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	3324      	adds	r3, #36	; 0x24
 800bd72:	4618      	mov	r0, r3
 800bd74:	f000 fd2a 	bl	800c7cc <xTaskRemoveFromEventList>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d001      	beq.n	800bd82 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bd7e:	f000 fe01 	bl	800c984 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bd82:	7bfb      	ldrb	r3, [r7, #15]
 800bd84:	3b01      	subs	r3, #1
 800bd86:	b2db      	uxtb	r3, r3
 800bd88:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bd8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	dce9      	bgt.n	800bd66 <prvUnlockQueue+0x16>
 800bd92:	e000      	b.n	800bd96 <prvUnlockQueue+0x46>
					break;
 800bd94:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	22ff      	movs	r2, #255	; 0xff
 800bd9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bd9e:	f001 fc61 	bl	800d664 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bda2:	f001 fc2f 	bl	800d604 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bdac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bdae:	e011      	b.n	800bdd4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	691b      	ldr	r3, [r3, #16]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d012      	beq.n	800bdde <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	3310      	adds	r3, #16
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	f000 fd05 	bl	800c7cc <xTaskRemoveFromEventList>
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d001      	beq.n	800bdcc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bdc8:	f000 fddc 	bl	800c984 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bdcc:	7bbb      	ldrb	r3, [r7, #14]
 800bdce:	3b01      	subs	r3, #1
 800bdd0:	b2db      	uxtb	r3, r3
 800bdd2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bdd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	dce9      	bgt.n	800bdb0 <prvUnlockQueue+0x60>
 800bddc:	e000      	b.n	800bde0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bdde:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	22ff      	movs	r2, #255	; 0xff
 800bde4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bde8:	f001 fc3c 	bl	800d664 <vPortExitCritical>
}
 800bdec:	bf00      	nop
 800bdee:	3710      	adds	r7, #16
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	bd80      	pop	{r7, pc}

0800bdf4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b084      	sub	sp, #16
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bdfc:	f001 fc02 	bl	800d604 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be04:	2b00      	cmp	r3, #0
 800be06:	d102      	bne.n	800be0e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800be08:	2301      	movs	r3, #1
 800be0a:	60fb      	str	r3, [r7, #12]
 800be0c:	e001      	b.n	800be12 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800be0e:	2300      	movs	r3, #0
 800be10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800be12:	f001 fc27 	bl	800d664 <vPortExitCritical>

	return xReturn;
 800be16:	68fb      	ldr	r3, [r7, #12]
}
 800be18:	4618      	mov	r0, r3
 800be1a:	3710      	adds	r7, #16
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}

0800be20 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b084      	sub	sp, #16
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800be28:	f001 fbec 	bl	800d604 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be34:	429a      	cmp	r2, r3
 800be36:	d102      	bne.n	800be3e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800be38:	2301      	movs	r3, #1
 800be3a:	60fb      	str	r3, [r7, #12]
 800be3c:	e001      	b.n	800be42 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800be3e:	2300      	movs	r3, #0
 800be40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800be42:	f001 fc0f 	bl	800d664 <vPortExitCritical>

	return xReturn;
 800be46:	68fb      	ldr	r3, [r7, #12]
}
 800be48:	4618      	mov	r0, r3
 800be4a:	3710      	adds	r7, #16
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bd80      	pop	{r7, pc}

0800be50 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800be50:	b480      	push	{r7}
 800be52:	b085      	sub	sp, #20
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
 800be58:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800be5a:	2300      	movs	r3, #0
 800be5c:	60fb      	str	r3, [r7, #12]
 800be5e:	e014      	b.n	800be8a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800be60:	4a0f      	ldr	r2, [pc, #60]	; (800bea0 <vQueueAddToRegistry+0x50>)
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d10b      	bne.n	800be84 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800be6c:	490c      	ldr	r1, [pc, #48]	; (800bea0 <vQueueAddToRegistry+0x50>)
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	683a      	ldr	r2, [r7, #0]
 800be72:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800be76:	4a0a      	ldr	r2, [pc, #40]	; (800bea0 <vQueueAddToRegistry+0x50>)
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	00db      	lsls	r3, r3, #3
 800be7c:	4413      	add	r3, r2
 800be7e:	687a      	ldr	r2, [r7, #4]
 800be80:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800be82:	e006      	b.n	800be92 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	3301      	adds	r3, #1
 800be88:	60fb      	str	r3, [r7, #12]
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	2b07      	cmp	r3, #7
 800be8e:	d9e7      	bls.n	800be60 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800be90:	bf00      	nop
 800be92:	bf00      	nop
 800be94:	3714      	adds	r7, #20
 800be96:	46bd      	mov	sp, r7
 800be98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9c:	4770      	bx	lr
 800be9e:	bf00      	nop
 800bea0:	24001234 	.word	0x24001234

0800bea4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b086      	sub	sp, #24
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	60f8      	str	r0, [r7, #12]
 800beac:	60b9      	str	r1, [r7, #8]
 800beae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800beb4:	f001 fba6 	bl	800d604 <vPortEnterCritical>
 800beb8:	697b      	ldr	r3, [r7, #20]
 800beba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bebe:	b25b      	sxtb	r3, r3
 800bec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bec4:	d103      	bne.n	800bece <vQueueWaitForMessageRestricted+0x2a>
 800bec6:	697b      	ldr	r3, [r7, #20]
 800bec8:	2200      	movs	r2, #0
 800beca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bece:	697b      	ldr	r3, [r7, #20]
 800bed0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bed4:	b25b      	sxtb	r3, r3
 800bed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beda:	d103      	bne.n	800bee4 <vQueueWaitForMessageRestricted+0x40>
 800bedc:	697b      	ldr	r3, [r7, #20]
 800bede:	2200      	movs	r2, #0
 800bee0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bee4:	f001 fbbe 	bl	800d664 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bee8:	697b      	ldr	r3, [r7, #20]
 800beea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800beec:	2b00      	cmp	r3, #0
 800beee:	d106      	bne.n	800befe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bef0:	697b      	ldr	r3, [r7, #20]
 800bef2:	3324      	adds	r3, #36	; 0x24
 800bef4:	687a      	ldr	r2, [r7, #4]
 800bef6:	68b9      	ldr	r1, [r7, #8]
 800bef8:	4618      	mov	r0, r3
 800befa:	f000 fc3b 	bl	800c774 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800befe:	6978      	ldr	r0, [r7, #20]
 800bf00:	f7ff ff26 	bl	800bd50 <prvUnlockQueue>
	}
 800bf04:	bf00      	nop
 800bf06:	3718      	adds	r7, #24
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	bd80      	pop	{r7, pc}

0800bf0c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b08e      	sub	sp, #56	; 0x38
 800bf10:	af04      	add	r7, sp, #16
 800bf12:	60f8      	str	r0, [r7, #12]
 800bf14:	60b9      	str	r1, [r7, #8]
 800bf16:	607a      	str	r2, [r7, #4]
 800bf18:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bf1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d10a      	bne.n	800bf36 <xTaskCreateStatic+0x2a>
	__asm volatile
 800bf20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf24:	f383 8811 	msr	BASEPRI, r3
 800bf28:	f3bf 8f6f 	isb	sy
 800bf2c:	f3bf 8f4f 	dsb	sy
 800bf30:	623b      	str	r3, [r7, #32]
}
 800bf32:	bf00      	nop
 800bf34:	e7fe      	b.n	800bf34 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bf36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d10a      	bne.n	800bf52 <xTaskCreateStatic+0x46>
	__asm volatile
 800bf3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf40:	f383 8811 	msr	BASEPRI, r3
 800bf44:	f3bf 8f6f 	isb	sy
 800bf48:	f3bf 8f4f 	dsb	sy
 800bf4c:	61fb      	str	r3, [r7, #28]
}
 800bf4e:	bf00      	nop
 800bf50:	e7fe      	b.n	800bf50 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bf52:	235c      	movs	r3, #92	; 0x5c
 800bf54:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bf56:	693b      	ldr	r3, [r7, #16]
 800bf58:	2b5c      	cmp	r3, #92	; 0x5c
 800bf5a:	d00a      	beq.n	800bf72 <xTaskCreateStatic+0x66>
	__asm volatile
 800bf5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf60:	f383 8811 	msr	BASEPRI, r3
 800bf64:	f3bf 8f6f 	isb	sy
 800bf68:	f3bf 8f4f 	dsb	sy
 800bf6c:	61bb      	str	r3, [r7, #24]
}
 800bf6e:	bf00      	nop
 800bf70:	e7fe      	b.n	800bf70 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bf72:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bf74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d01e      	beq.n	800bfb8 <xTaskCreateStatic+0xac>
 800bf7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d01b      	beq.n	800bfb8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bf80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf82:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bf84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf88:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bf8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf8c:	2202      	movs	r2, #2
 800bf8e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bf92:	2300      	movs	r3, #0
 800bf94:	9303      	str	r3, [sp, #12]
 800bf96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf98:	9302      	str	r3, [sp, #8]
 800bf9a:	f107 0314 	add.w	r3, r7, #20
 800bf9e:	9301      	str	r3, [sp, #4]
 800bfa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa2:	9300      	str	r3, [sp, #0]
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	687a      	ldr	r2, [r7, #4]
 800bfa8:	68b9      	ldr	r1, [r7, #8]
 800bfaa:	68f8      	ldr	r0, [r7, #12]
 800bfac:	f000 f850 	bl	800c050 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bfb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bfb2:	f000 f8dd 	bl	800c170 <prvAddNewTaskToReadyList>
 800bfb6:	e001      	b.n	800bfbc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800bfb8:	2300      	movs	r3, #0
 800bfba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bfbc:	697b      	ldr	r3, [r7, #20]
	}
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	3728      	adds	r7, #40	; 0x28
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd80      	pop	{r7, pc}

0800bfc6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bfc6:	b580      	push	{r7, lr}
 800bfc8:	b08c      	sub	sp, #48	; 0x30
 800bfca:	af04      	add	r7, sp, #16
 800bfcc:	60f8      	str	r0, [r7, #12]
 800bfce:	60b9      	str	r1, [r7, #8]
 800bfd0:	603b      	str	r3, [r7, #0]
 800bfd2:	4613      	mov	r3, r2
 800bfd4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bfd6:	88fb      	ldrh	r3, [r7, #6]
 800bfd8:	009b      	lsls	r3, r3, #2
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f001 fc34 	bl	800d848 <pvPortMalloc>
 800bfe0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bfe2:	697b      	ldr	r3, [r7, #20]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d00e      	beq.n	800c006 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bfe8:	205c      	movs	r0, #92	; 0x5c
 800bfea:	f001 fc2d 	bl	800d848 <pvPortMalloc>
 800bfee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bff0:	69fb      	ldr	r3, [r7, #28]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d003      	beq.n	800bffe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bff6:	69fb      	ldr	r3, [r7, #28]
 800bff8:	697a      	ldr	r2, [r7, #20]
 800bffa:	631a      	str	r2, [r3, #48]	; 0x30
 800bffc:	e005      	b.n	800c00a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bffe:	6978      	ldr	r0, [r7, #20]
 800c000:	f001 fcee 	bl	800d9e0 <vPortFree>
 800c004:	e001      	b.n	800c00a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c006:	2300      	movs	r3, #0
 800c008:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c00a:	69fb      	ldr	r3, [r7, #28]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d017      	beq.n	800c040 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c010:	69fb      	ldr	r3, [r7, #28]
 800c012:	2200      	movs	r2, #0
 800c014:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c018:	88fa      	ldrh	r2, [r7, #6]
 800c01a:	2300      	movs	r3, #0
 800c01c:	9303      	str	r3, [sp, #12]
 800c01e:	69fb      	ldr	r3, [r7, #28]
 800c020:	9302      	str	r3, [sp, #8]
 800c022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c024:	9301      	str	r3, [sp, #4]
 800c026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c028:	9300      	str	r3, [sp, #0]
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	68b9      	ldr	r1, [r7, #8]
 800c02e:	68f8      	ldr	r0, [r7, #12]
 800c030:	f000 f80e 	bl	800c050 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c034:	69f8      	ldr	r0, [r7, #28]
 800c036:	f000 f89b 	bl	800c170 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c03a:	2301      	movs	r3, #1
 800c03c:	61bb      	str	r3, [r7, #24]
 800c03e:	e002      	b.n	800c046 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c040:	f04f 33ff 	mov.w	r3, #4294967295
 800c044:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c046:	69bb      	ldr	r3, [r7, #24]
	}
 800c048:	4618      	mov	r0, r3
 800c04a:	3720      	adds	r7, #32
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}

0800c050 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b088      	sub	sp, #32
 800c054:	af00      	add	r7, sp, #0
 800c056:	60f8      	str	r0, [r7, #12]
 800c058:	60b9      	str	r1, [r7, #8]
 800c05a:	607a      	str	r2, [r7, #4]
 800c05c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c05e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c060:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	009b      	lsls	r3, r3, #2
 800c066:	461a      	mov	r2, r3
 800c068:	21a5      	movs	r1, #165	; 0xa5
 800c06a:	f003 fba2 	bl	800f7b2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c070:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c072:	6879      	ldr	r1, [r7, #4]
 800c074:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c078:	440b      	add	r3, r1
 800c07a:	009b      	lsls	r3, r3, #2
 800c07c:	4413      	add	r3, r2
 800c07e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c080:	69bb      	ldr	r3, [r7, #24]
 800c082:	f023 0307 	bic.w	r3, r3, #7
 800c086:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c088:	69bb      	ldr	r3, [r7, #24]
 800c08a:	f003 0307 	and.w	r3, r3, #7
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d00a      	beq.n	800c0a8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800c092:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c096:	f383 8811 	msr	BASEPRI, r3
 800c09a:	f3bf 8f6f 	isb	sy
 800c09e:	f3bf 8f4f 	dsb	sy
 800c0a2:	617b      	str	r3, [r7, #20]
}
 800c0a4:	bf00      	nop
 800c0a6:	e7fe      	b.n	800c0a6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c0a8:	68bb      	ldr	r3, [r7, #8]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d01f      	beq.n	800c0ee <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	61fb      	str	r3, [r7, #28]
 800c0b2:	e012      	b.n	800c0da <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c0b4:	68ba      	ldr	r2, [r7, #8]
 800c0b6:	69fb      	ldr	r3, [r7, #28]
 800c0b8:	4413      	add	r3, r2
 800c0ba:	7819      	ldrb	r1, [r3, #0]
 800c0bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c0be:	69fb      	ldr	r3, [r7, #28]
 800c0c0:	4413      	add	r3, r2
 800c0c2:	3334      	adds	r3, #52	; 0x34
 800c0c4:	460a      	mov	r2, r1
 800c0c6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c0c8:	68ba      	ldr	r2, [r7, #8]
 800c0ca:	69fb      	ldr	r3, [r7, #28]
 800c0cc:	4413      	add	r3, r2
 800c0ce:	781b      	ldrb	r3, [r3, #0]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d006      	beq.n	800c0e2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c0d4:	69fb      	ldr	r3, [r7, #28]
 800c0d6:	3301      	adds	r3, #1
 800c0d8:	61fb      	str	r3, [r7, #28]
 800c0da:	69fb      	ldr	r3, [r7, #28]
 800c0dc:	2b0f      	cmp	r3, #15
 800c0de:	d9e9      	bls.n	800c0b4 <prvInitialiseNewTask+0x64>
 800c0e0:	e000      	b.n	800c0e4 <prvInitialiseNewTask+0x94>
			{
				break;
 800c0e2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c0e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c0ec:	e003      	b.n	800c0f6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0f8:	2b37      	cmp	r3, #55	; 0x37
 800c0fa:	d901      	bls.n	800c100 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c0fc:	2337      	movs	r3, #55	; 0x37
 800c0fe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c102:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c104:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c108:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c10a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c10c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c10e:	2200      	movs	r2, #0
 800c110:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c114:	3304      	adds	r3, #4
 800c116:	4618      	mov	r0, r3
 800c118:	f7ff f978 	bl	800b40c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c11e:	3318      	adds	r3, #24
 800c120:	4618      	mov	r0, r3
 800c122:	f7ff f973 	bl	800b40c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c12a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c12e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c134:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c138:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c13a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c13c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c13e:	2200      	movs	r2, #0
 800c140:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c144:	2200      	movs	r2, #0
 800c146:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c14a:	683a      	ldr	r2, [r7, #0]
 800c14c:	68f9      	ldr	r1, [r7, #12]
 800c14e:	69b8      	ldr	r0, [r7, #24]
 800c150:	f001 f928 	bl	800d3a4 <pxPortInitialiseStack>
 800c154:	4602      	mov	r2, r0
 800c156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c158:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c15a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d002      	beq.n	800c166 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c162:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c164:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c166:	bf00      	nop
 800c168:	3720      	adds	r7, #32
 800c16a:	46bd      	mov	sp, r7
 800c16c:	bd80      	pop	{r7, pc}
	...

0800c170 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b082      	sub	sp, #8
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c178:	f001 fa44 	bl	800d604 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c17c:	4b2d      	ldr	r3, [pc, #180]	; (800c234 <prvAddNewTaskToReadyList+0xc4>)
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	3301      	adds	r3, #1
 800c182:	4a2c      	ldr	r2, [pc, #176]	; (800c234 <prvAddNewTaskToReadyList+0xc4>)
 800c184:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c186:	4b2c      	ldr	r3, [pc, #176]	; (800c238 <prvAddNewTaskToReadyList+0xc8>)
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d109      	bne.n	800c1a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c18e:	4a2a      	ldr	r2, [pc, #168]	; (800c238 <prvAddNewTaskToReadyList+0xc8>)
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c194:	4b27      	ldr	r3, [pc, #156]	; (800c234 <prvAddNewTaskToReadyList+0xc4>)
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	2b01      	cmp	r3, #1
 800c19a:	d110      	bne.n	800c1be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c19c:	f000 fc16 	bl	800c9cc <prvInitialiseTaskLists>
 800c1a0:	e00d      	b.n	800c1be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c1a2:	4b26      	ldr	r3, [pc, #152]	; (800c23c <prvAddNewTaskToReadyList+0xcc>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d109      	bne.n	800c1be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c1aa:	4b23      	ldr	r3, [pc, #140]	; (800c238 <prvAddNewTaskToReadyList+0xc8>)
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1b4:	429a      	cmp	r2, r3
 800c1b6:	d802      	bhi.n	800c1be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c1b8:	4a1f      	ldr	r2, [pc, #124]	; (800c238 <prvAddNewTaskToReadyList+0xc8>)
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c1be:	4b20      	ldr	r3, [pc, #128]	; (800c240 <prvAddNewTaskToReadyList+0xd0>)
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	3301      	adds	r3, #1
 800c1c4:	4a1e      	ldr	r2, [pc, #120]	; (800c240 <prvAddNewTaskToReadyList+0xd0>)
 800c1c6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c1c8:	4b1d      	ldr	r3, [pc, #116]	; (800c240 <prvAddNewTaskToReadyList+0xd0>)
 800c1ca:	681a      	ldr	r2, [r3, #0]
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1d4:	4b1b      	ldr	r3, [pc, #108]	; (800c244 <prvAddNewTaskToReadyList+0xd4>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	429a      	cmp	r2, r3
 800c1da:	d903      	bls.n	800c1e4 <prvAddNewTaskToReadyList+0x74>
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1e0:	4a18      	ldr	r2, [pc, #96]	; (800c244 <prvAddNewTaskToReadyList+0xd4>)
 800c1e2:	6013      	str	r3, [r2, #0]
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1e8:	4613      	mov	r3, r2
 800c1ea:	009b      	lsls	r3, r3, #2
 800c1ec:	4413      	add	r3, r2
 800c1ee:	009b      	lsls	r3, r3, #2
 800c1f0:	4a15      	ldr	r2, [pc, #84]	; (800c248 <prvAddNewTaskToReadyList+0xd8>)
 800c1f2:	441a      	add	r2, r3
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	3304      	adds	r3, #4
 800c1f8:	4619      	mov	r1, r3
 800c1fa:	4610      	mov	r0, r2
 800c1fc:	f7ff f913 	bl	800b426 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c200:	f001 fa30 	bl	800d664 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c204:	4b0d      	ldr	r3, [pc, #52]	; (800c23c <prvAddNewTaskToReadyList+0xcc>)
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d00e      	beq.n	800c22a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c20c:	4b0a      	ldr	r3, [pc, #40]	; (800c238 <prvAddNewTaskToReadyList+0xc8>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c216:	429a      	cmp	r2, r3
 800c218:	d207      	bcs.n	800c22a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c21a:	4b0c      	ldr	r3, [pc, #48]	; (800c24c <prvAddNewTaskToReadyList+0xdc>)
 800c21c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c220:	601a      	str	r2, [r3, #0]
 800c222:	f3bf 8f4f 	dsb	sy
 800c226:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c22a:	bf00      	nop
 800c22c:	3708      	adds	r7, #8
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}
 800c232:	bf00      	nop
 800c234:	24001748 	.word	0x24001748
 800c238:	24001274 	.word	0x24001274
 800c23c:	24001754 	.word	0x24001754
 800c240:	24001764 	.word	0x24001764
 800c244:	24001750 	.word	0x24001750
 800c248:	24001278 	.word	0x24001278
 800c24c:	e000ed04 	.word	0xe000ed04

0800c250 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c250:	b580      	push	{r7, lr}
 800c252:	b084      	sub	sp, #16
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c258:	2300      	movs	r3, #0
 800c25a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d017      	beq.n	800c292 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c262:	4b13      	ldr	r3, [pc, #76]	; (800c2b0 <vTaskDelay+0x60>)
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d00a      	beq.n	800c280 <vTaskDelay+0x30>
	__asm volatile
 800c26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c26e:	f383 8811 	msr	BASEPRI, r3
 800c272:	f3bf 8f6f 	isb	sy
 800c276:	f3bf 8f4f 	dsb	sy
 800c27a:	60bb      	str	r3, [r7, #8]
}
 800c27c:	bf00      	nop
 800c27e:	e7fe      	b.n	800c27e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c280:	f000 f880 	bl	800c384 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c284:	2100      	movs	r1, #0
 800c286:	6878      	ldr	r0, [r7, #4]
 800c288:	f000 fcea 	bl	800cc60 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c28c:	f000 f888 	bl	800c3a0 <xTaskResumeAll>
 800c290:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d107      	bne.n	800c2a8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c298:	4b06      	ldr	r3, [pc, #24]	; (800c2b4 <vTaskDelay+0x64>)
 800c29a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c29e:	601a      	str	r2, [r3, #0]
 800c2a0:	f3bf 8f4f 	dsb	sy
 800c2a4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c2a8:	bf00      	nop
 800c2aa:	3710      	adds	r7, #16
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	bd80      	pop	{r7, pc}
 800c2b0:	24001770 	.word	0x24001770
 800c2b4:	e000ed04 	.word	0xe000ed04

0800c2b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b08a      	sub	sp, #40	; 0x28
 800c2bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c2c6:	463a      	mov	r2, r7
 800c2c8:	1d39      	adds	r1, r7, #4
 800c2ca:	f107 0308 	add.w	r3, r7, #8
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	f7ff f848 	bl	800b364 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c2d4:	6839      	ldr	r1, [r7, #0]
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	68ba      	ldr	r2, [r7, #8]
 800c2da:	9202      	str	r2, [sp, #8]
 800c2dc:	9301      	str	r3, [sp, #4]
 800c2de:	2300      	movs	r3, #0
 800c2e0:	9300      	str	r3, [sp, #0]
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	460a      	mov	r2, r1
 800c2e6:	4921      	ldr	r1, [pc, #132]	; (800c36c <vTaskStartScheduler+0xb4>)
 800c2e8:	4821      	ldr	r0, [pc, #132]	; (800c370 <vTaskStartScheduler+0xb8>)
 800c2ea:	f7ff fe0f 	bl	800bf0c <xTaskCreateStatic>
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	4a20      	ldr	r2, [pc, #128]	; (800c374 <vTaskStartScheduler+0xbc>)
 800c2f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c2f4:	4b1f      	ldr	r3, [pc, #124]	; (800c374 <vTaskStartScheduler+0xbc>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d002      	beq.n	800c302 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c2fc:	2301      	movs	r3, #1
 800c2fe:	617b      	str	r3, [r7, #20]
 800c300:	e001      	b.n	800c306 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c302:	2300      	movs	r3, #0
 800c304:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c306:	697b      	ldr	r3, [r7, #20]
 800c308:	2b01      	cmp	r3, #1
 800c30a:	d102      	bne.n	800c312 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c30c:	f000 fcfc 	bl	800cd08 <xTimerCreateTimerTask>
 800c310:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c312:	697b      	ldr	r3, [r7, #20]
 800c314:	2b01      	cmp	r3, #1
 800c316:	d116      	bne.n	800c346 <vTaskStartScheduler+0x8e>
	__asm volatile
 800c318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c31c:	f383 8811 	msr	BASEPRI, r3
 800c320:	f3bf 8f6f 	isb	sy
 800c324:	f3bf 8f4f 	dsb	sy
 800c328:	613b      	str	r3, [r7, #16]
}
 800c32a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c32c:	4b12      	ldr	r3, [pc, #72]	; (800c378 <vTaskStartScheduler+0xc0>)
 800c32e:	f04f 32ff 	mov.w	r2, #4294967295
 800c332:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c334:	4b11      	ldr	r3, [pc, #68]	; (800c37c <vTaskStartScheduler+0xc4>)
 800c336:	2201      	movs	r2, #1
 800c338:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c33a:	4b11      	ldr	r3, [pc, #68]	; (800c380 <vTaskStartScheduler+0xc8>)
 800c33c:	2200      	movs	r2, #0
 800c33e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c340:	f001 f8be 	bl	800d4c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c344:	e00e      	b.n	800c364 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c346:	697b      	ldr	r3, [r7, #20]
 800c348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c34c:	d10a      	bne.n	800c364 <vTaskStartScheduler+0xac>
	__asm volatile
 800c34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c352:	f383 8811 	msr	BASEPRI, r3
 800c356:	f3bf 8f6f 	isb	sy
 800c35a:	f3bf 8f4f 	dsb	sy
 800c35e:	60fb      	str	r3, [r7, #12]
}
 800c360:	bf00      	nop
 800c362:	e7fe      	b.n	800c362 <vTaskStartScheduler+0xaa>
}
 800c364:	bf00      	nop
 800c366:	3718      	adds	r7, #24
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}
 800c36c:	08011654 	.word	0x08011654
 800c370:	0800c99d 	.word	0x0800c99d
 800c374:	2400176c 	.word	0x2400176c
 800c378:	24001768 	.word	0x24001768
 800c37c:	24001754 	.word	0x24001754
 800c380:	2400174c 	.word	0x2400174c

0800c384 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c384:	b480      	push	{r7}
 800c386:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c388:	4b04      	ldr	r3, [pc, #16]	; (800c39c <vTaskSuspendAll+0x18>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	3301      	adds	r3, #1
 800c38e:	4a03      	ldr	r2, [pc, #12]	; (800c39c <vTaskSuspendAll+0x18>)
 800c390:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c392:	bf00      	nop
 800c394:	46bd      	mov	sp, r7
 800c396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39a:	4770      	bx	lr
 800c39c:	24001770 	.word	0x24001770

0800c3a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b084      	sub	sp, #16
 800c3a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c3ae:	4b42      	ldr	r3, [pc, #264]	; (800c4b8 <xTaskResumeAll+0x118>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d10a      	bne.n	800c3cc <xTaskResumeAll+0x2c>
	__asm volatile
 800c3b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ba:	f383 8811 	msr	BASEPRI, r3
 800c3be:	f3bf 8f6f 	isb	sy
 800c3c2:	f3bf 8f4f 	dsb	sy
 800c3c6:	603b      	str	r3, [r7, #0]
}
 800c3c8:	bf00      	nop
 800c3ca:	e7fe      	b.n	800c3ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c3cc:	f001 f91a 	bl	800d604 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c3d0:	4b39      	ldr	r3, [pc, #228]	; (800c4b8 <xTaskResumeAll+0x118>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	3b01      	subs	r3, #1
 800c3d6:	4a38      	ldr	r2, [pc, #224]	; (800c4b8 <xTaskResumeAll+0x118>)
 800c3d8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c3da:	4b37      	ldr	r3, [pc, #220]	; (800c4b8 <xTaskResumeAll+0x118>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d162      	bne.n	800c4a8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c3e2:	4b36      	ldr	r3, [pc, #216]	; (800c4bc <xTaskResumeAll+0x11c>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d05e      	beq.n	800c4a8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c3ea:	e02f      	b.n	800c44c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3ec:	4b34      	ldr	r3, [pc, #208]	; (800c4c0 <xTaskResumeAll+0x120>)
 800c3ee:	68db      	ldr	r3, [r3, #12]
 800c3f0:	68db      	ldr	r3, [r3, #12]
 800c3f2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	3318      	adds	r3, #24
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	f7ff f871 	bl	800b4e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	3304      	adds	r3, #4
 800c402:	4618      	mov	r0, r3
 800c404:	f7ff f86c 	bl	800b4e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c40c:	4b2d      	ldr	r3, [pc, #180]	; (800c4c4 <xTaskResumeAll+0x124>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	429a      	cmp	r2, r3
 800c412:	d903      	bls.n	800c41c <xTaskResumeAll+0x7c>
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c418:	4a2a      	ldr	r2, [pc, #168]	; (800c4c4 <xTaskResumeAll+0x124>)
 800c41a:	6013      	str	r3, [r2, #0]
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c420:	4613      	mov	r3, r2
 800c422:	009b      	lsls	r3, r3, #2
 800c424:	4413      	add	r3, r2
 800c426:	009b      	lsls	r3, r3, #2
 800c428:	4a27      	ldr	r2, [pc, #156]	; (800c4c8 <xTaskResumeAll+0x128>)
 800c42a:	441a      	add	r2, r3
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	3304      	adds	r3, #4
 800c430:	4619      	mov	r1, r3
 800c432:	4610      	mov	r0, r2
 800c434:	f7fe fff7 	bl	800b426 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c43c:	4b23      	ldr	r3, [pc, #140]	; (800c4cc <xTaskResumeAll+0x12c>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c442:	429a      	cmp	r2, r3
 800c444:	d302      	bcc.n	800c44c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c446:	4b22      	ldr	r3, [pc, #136]	; (800c4d0 <xTaskResumeAll+0x130>)
 800c448:	2201      	movs	r2, #1
 800c44a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c44c:	4b1c      	ldr	r3, [pc, #112]	; (800c4c0 <xTaskResumeAll+0x120>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d1cb      	bne.n	800c3ec <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d001      	beq.n	800c45e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c45a:	f000 fb55 	bl	800cb08 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c45e:	4b1d      	ldr	r3, [pc, #116]	; (800c4d4 <xTaskResumeAll+0x134>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d010      	beq.n	800c48c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c46a:	f000 f847 	bl	800c4fc <xTaskIncrementTick>
 800c46e:	4603      	mov	r3, r0
 800c470:	2b00      	cmp	r3, #0
 800c472:	d002      	beq.n	800c47a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c474:	4b16      	ldr	r3, [pc, #88]	; (800c4d0 <xTaskResumeAll+0x130>)
 800c476:	2201      	movs	r2, #1
 800c478:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	3b01      	subs	r3, #1
 800c47e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d1f1      	bne.n	800c46a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c486:	4b13      	ldr	r3, [pc, #76]	; (800c4d4 <xTaskResumeAll+0x134>)
 800c488:	2200      	movs	r2, #0
 800c48a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c48c:	4b10      	ldr	r3, [pc, #64]	; (800c4d0 <xTaskResumeAll+0x130>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d009      	beq.n	800c4a8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c494:	2301      	movs	r3, #1
 800c496:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c498:	4b0f      	ldr	r3, [pc, #60]	; (800c4d8 <xTaskResumeAll+0x138>)
 800c49a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c49e:	601a      	str	r2, [r3, #0]
 800c4a0:	f3bf 8f4f 	dsb	sy
 800c4a4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c4a8:	f001 f8dc 	bl	800d664 <vPortExitCritical>

	return xAlreadyYielded;
 800c4ac:	68bb      	ldr	r3, [r7, #8]
}
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	3710      	adds	r7, #16
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}
 800c4b6:	bf00      	nop
 800c4b8:	24001770 	.word	0x24001770
 800c4bc:	24001748 	.word	0x24001748
 800c4c0:	24001708 	.word	0x24001708
 800c4c4:	24001750 	.word	0x24001750
 800c4c8:	24001278 	.word	0x24001278
 800c4cc:	24001274 	.word	0x24001274
 800c4d0:	2400175c 	.word	0x2400175c
 800c4d4:	24001758 	.word	0x24001758
 800c4d8:	e000ed04 	.word	0xe000ed04

0800c4dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c4dc:	b480      	push	{r7}
 800c4de:	b083      	sub	sp, #12
 800c4e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c4e2:	4b05      	ldr	r3, [pc, #20]	; (800c4f8 <xTaskGetTickCount+0x1c>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c4e8:	687b      	ldr	r3, [r7, #4]
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	370c      	adds	r7, #12
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f4:	4770      	bx	lr
 800c4f6:	bf00      	nop
 800c4f8:	2400174c 	.word	0x2400174c

0800c4fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b086      	sub	sp, #24
 800c500:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c502:	2300      	movs	r3, #0
 800c504:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c506:	4b4f      	ldr	r3, [pc, #316]	; (800c644 <xTaskIncrementTick+0x148>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	f040 808f 	bne.w	800c62e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c510:	4b4d      	ldr	r3, [pc, #308]	; (800c648 <xTaskIncrementTick+0x14c>)
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	3301      	adds	r3, #1
 800c516:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c518:	4a4b      	ldr	r2, [pc, #300]	; (800c648 <xTaskIncrementTick+0x14c>)
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c51e:	693b      	ldr	r3, [r7, #16]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d120      	bne.n	800c566 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c524:	4b49      	ldr	r3, [pc, #292]	; (800c64c <xTaskIncrementTick+0x150>)
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d00a      	beq.n	800c544 <xTaskIncrementTick+0x48>
	__asm volatile
 800c52e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c532:	f383 8811 	msr	BASEPRI, r3
 800c536:	f3bf 8f6f 	isb	sy
 800c53a:	f3bf 8f4f 	dsb	sy
 800c53e:	603b      	str	r3, [r7, #0]
}
 800c540:	bf00      	nop
 800c542:	e7fe      	b.n	800c542 <xTaskIncrementTick+0x46>
 800c544:	4b41      	ldr	r3, [pc, #260]	; (800c64c <xTaskIncrementTick+0x150>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	60fb      	str	r3, [r7, #12]
 800c54a:	4b41      	ldr	r3, [pc, #260]	; (800c650 <xTaskIncrementTick+0x154>)
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	4a3f      	ldr	r2, [pc, #252]	; (800c64c <xTaskIncrementTick+0x150>)
 800c550:	6013      	str	r3, [r2, #0]
 800c552:	4a3f      	ldr	r2, [pc, #252]	; (800c650 <xTaskIncrementTick+0x154>)
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	6013      	str	r3, [r2, #0]
 800c558:	4b3e      	ldr	r3, [pc, #248]	; (800c654 <xTaskIncrementTick+0x158>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	3301      	adds	r3, #1
 800c55e:	4a3d      	ldr	r2, [pc, #244]	; (800c654 <xTaskIncrementTick+0x158>)
 800c560:	6013      	str	r3, [r2, #0]
 800c562:	f000 fad1 	bl	800cb08 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c566:	4b3c      	ldr	r3, [pc, #240]	; (800c658 <xTaskIncrementTick+0x15c>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	693a      	ldr	r2, [r7, #16]
 800c56c:	429a      	cmp	r2, r3
 800c56e:	d349      	bcc.n	800c604 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c570:	4b36      	ldr	r3, [pc, #216]	; (800c64c <xTaskIncrementTick+0x150>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d104      	bne.n	800c584 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c57a:	4b37      	ldr	r3, [pc, #220]	; (800c658 <xTaskIncrementTick+0x15c>)
 800c57c:	f04f 32ff 	mov.w	r2, #4294967295
 800c580:	601a      	str	r2, [r3, #0]
					break;
 800c582:	e03f      	b.n	800c604 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c584:	4b31      	ldr	r3, [pc, #196]	; (800c64c <xTaskIncrementTick+0x150>)
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	68db      	ldr	r3, [r3, #12]
 800c58a:	68db      	ldr	r3, [r3, #12]
 800c58c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c58e:	68bb      	ldr	r3, [r7, #8]
 800c590:	685b      	ldr	r3, [r3, #4]
 800c592:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c594:	693a      	ldr	r2, [r7, #16]
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	429a      	cmp	r2, r3
 800c59a:	d203      	bcs.n	800c5a4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c59c:	4a2e      	ldr	r2, [pc, #184]	; (800c658 <xTaskIncrementTick+0x15c>)
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c5a2:	e02f      	b.n	800c604 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	3304      	adds	r3, #4
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	f7fe ff99 	bl	800b4e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c5ae:	68bb      	ldr	r3, [r7, #8]
 800c5b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d004      	beq.n	800c5c0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c5b6:	68bb      	ldr	r3, [r7, #8]
 800c5b8:	3318      	adds	r3, #24
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	f7fe ff90 	bl	800b4e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5c4:	4b25      	ldr	r3, [pc, #148]	; (800c65c <xTaskIncrementTick+0x160>)
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	429a      	cmp	r2, r3
 800c5ca:	d903      	bls.n	800c5d4 <xTaskIncrementTick+0xd8>
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5d0:	4a22      	ldr	r2, [pc, #136]	; (800c65c <xTaskIncrementTick+0x160>)
 800c5d2:	6013      	str	r3, [r2, #0]
 800c5d4:	68bb      	ldr	r3, [r7, #8]
 800c5d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5d8:	4613      	mov	r3, r2
 800c5da:	009b      	lsls	r3, r3, #2
 800c5dc:	4413      	add	r3, r2
 800c5de:	009b      	lsls	r3, r3, #2
 800c5e0:	4a1f      	ldr	r2, [pc, #124]	; (800c660 <xTaskIncrementTick+0x164>)
 800c5e2:	441a      	add	r2, r3
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	3304      	adds	r3, #4
 800c5e8:	4619      	mov	r1, r3
 800c5ea:	4610      	mov	r0, r2
 800c5ec:	f7fe ff1b 	bl	800b426 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c5f0:	68bb      	ldr	r3, [r7, #8]
 800c5f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5f4:	4b1b      	ldr	r3, [pc, #108]	; (800c664 <xTaskIncrementTick+0x168>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5fa:	429a      	cmp	r2, r3
 800c5fc:	d3b8      	bcc.n	800c570 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c5fe:	2301      	movs	r3, #1
 800c600:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c602:	e7b5      	b.n	800c570 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c604:	4b17      	ldr	r3, [pc, #92]	; (800c664 <xTaskIncrementTick+0x168>)
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c60a:	4915      	ldr	r1, [pc, #84]	; (800c660 <xTaskIncrementTick+0x164>)
 800c60c:	4613      	mov	r3, r2
 800c60e:	009b      	lsls	r3, r3, #2
 800c610:	4413      	add	r3, r2
 800c612:	009b      	lsls	r3, r3, #2
 800c614:	440b      	add	r3, r1
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	2b01      	cmp	r3, #1
 800c61a:	d901      	bls.n	800c620 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c61c:	2301      	movs	r3, #1
 800c61e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c620:	4b11      	ldr	r3, [pc, #68]	; (800c668 <xTaskIncrementTick+0x16c>)
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d007      	beq.n	800c638 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c628:	2301      	movs	r3, #1
 800c62a:	617b      	str	r3, [r7, #20]
 800c62c:	e004      	b.n	800c638 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c62e:	4b0f      	ldr	r3, [pc, #60]	; (800c66c <xTaskIncrementTick+0x170>)
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	3301      	adds	r3, #1
 800c634:	4a0d      	ldr	r2, [pc, #52]	; (800c66c <xTaskIncrementTick+0x170>)
 800c636:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c638:	697b      	ldr	r3, [r7, #20]
}
 800c63a:	4618      	mov	r0, r3
 800c63c:	3718      	adds	r7, #24
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}
 800c642:	bf00      	nop
 800c644:	24001770 	.word	0x24001770
 800c648:	2400174c 	.word	0x2400174c
 800c64c:	24001700 	.word	0x24001700
 800c650:	24001704 	.word	0x24001704
 800c654:	24001760 	.word	0x24001760
 800c658:	24001768 	.word	0x24001768
 800c65c:	24001750 	.word	0x24001750
 800c660:	24001278 	.word	0x24001278
 800c664:	24001274 	.word	0x24001274
 800c668:	2400175c 	.word	0x2400175c
 800c66c:	24001758 	.word	0x24001758

0800c670 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c670:	b480      	push	{r7}
 800c672:	b085      	sub	sp, #20
 800c674:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c676:	4b28      	ldr	r3, [pc, #160]	; (800c718 <vTaskSwitchContext+0xa8>)
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d003      	beq.n	800c686 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c67e:	4b27      	ldr	r3, [pc, #156]	; (800c71c <vTaskSwitchContext+0xac>)
 800c680:	2201      	movs	r2, #1
 800c682:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c684:	e041      	b.n	800c70a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800c686:	4b25      	ldr	r3, [pc, #148]	; (800c71c <vTaskSwitchContext+0xac>)
 800c688:	2200      	movs	r2, #0
 800c68a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c68c:	4b24      	ldr	r3, [pc, #144]	; (800c720 <vTaskSwitchContext+0xb0>)
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	60fb      	str	r3, [r7, #12]
 800c692:	e010      	b.n	800c6b6 <vTaskSwitchContext+0x46>
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d10a      	bne.n	800c6b0 <vTaskSwitchContext+0x40>
	__asm volatile
 800c69a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c69e:	f383 8811 	msr	BASEPRI, r3
 800c6a2:	f3bf 8f6f 	isb	sy
 800c6a6:	f3bf 8f4f 	dsb	sy
 800c6aa:	607b      	str	r3, [r7, #4]
}
 800c6ac:	bf00      	nop
 800c6ae:	e7fe      	b.n	800c6ae <vTaskSwitchContext+0x3e>
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	3b01      	subs	r3, #1
 800c6b4:	60fb      	str	r3, [r7, #12]
 800c6b6:	491b      	ldr	r1, [pc, #108]	; (800c724 <vTaskSwitchContext+0xb4>)
 800c6b8:	68fa      	ldr	r2, [r7, #12]
 800c6ba:	4613      	mov	r3, r2
 800c6bc:	009b      	lsls	r3, r3, #2
 800c6be:	4413      	add	r3, r2
 800c6c0:	009b      	lsls	r3, r3, #2
 800c6c2:	440b      	add	r3, r1
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d0e4      	beq.n	800c694 <vTaskSwitchContext+0x24>
 800c6ca:	68fa      	ldr	r2, [r7, #12]
 800c6cc:	4613      	mov	r3, r2
 800c6ce:	009b      	lsls	r3, r3, #2
 800c6d0:	4413      	add	r3, r2
 800c6d2:	009b      	lsls	r3, r3, #2
 800c6d4:	4a13      	ldr	r2, [pc, #76]	; (800c724 <vTaskSwitchContext+0xb4>)
 800c6d6:	4413      	add	r3, r2
 800c6d8:	60bb      	str	r3, [r7, #8]
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	685b      	ldr	r3, [r3, #4]
 800c6de:	685a      	ldr	r2, [r3, #4]
 800c6e0:	68bb      	ldr	r3, [r7, #8]
 800c6e2:	605a      	str	r2, [r3, #4]
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	685a      	ldr	r2, [r3, #4]
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	3308      	adds	r3, #8
 800c6ec:	429a      	cmp	r2, r3
 800c6ee:	d104      	bne.n	800c6fa <vTaskSwitchContext+0x8a>
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	685b      	ldr	r3, [r3, #4]
 800c6f4:	685a      	ldr	r2, [r3, #4]
 800c6f6:	68bb      	ldr	r3, [r7, #8]
 800c6f8:	605a      	str	r2, [r3, #4]
 800c6fa:	68bb      	ldr	r3, [r7, #8]
 800c6fc:	685b      	ldr	r3, [r3, #4]
 800c6fe:	68db      	ldr	r3, [r3, #12]
 800c700:	4a09      	ldr	r2, [pc, #36]	; (800c728 <vTaskSwitchContext+0xb8>)
 800c702:	6013      	str	r3, [r2, #0]
 800c704:	4a06      	ldr	r2, [pc, #24]	; (800c720 <vTaskSwitchContext+0xb0>)
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	6013      	str	r3, [r2, #0]
}
 800c70a:	bf00      	nop
 800c70c:	3714      	adds	r7, #20
 800c70e:	46bd      	mov	sp, r7
 800c710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c714:	4770      	bx	lr
 800c716:	bf00      	nop
 800c718:	24001770 	.word	0x24001770
 800c71c:	2400175c 	.word	0x2400175c
 800c720:	24001750 	.word	0x24001750
 800c724:	24001278 	.word	0x24001278
 800c728:	24001274 	.word	0x24001274

0800c72c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b084      	sub	sp, #16
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
 800c734:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d10a      	bne.n	800c752 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c73c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c740:	f383 8811 	msr	BASEPRI, r3
 800c744:	f3bf 8f6f 	isb	sy
 800c748:	f3bf 8f4f 	dsb	sy
 800c74c:	60fb      	str	r3, [r7, #12]
}
 800c74e:	bf00      	nop
 800c750:	e7fe      	b.n	800c750 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c752:	4b07      	ldr	r3, [pc, #28]	; (800c770 <vTaskPlaceOnEventList+0x44>)
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	3318      	adds	r3, #24
 800c758:	4619      	mov	r1, r3
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f7fe fe87 	bl	800b46e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c760:	2101      	movs	r1, #1
 800c762:	6838      	ldr	r0, [r7, #0]
 800c764:	f000 fa7c 	bl	800cc60 <prvAddCurrentTaskToDelayedList>
}
 800c768:	bf00      	nop
 800c76a:	3710      	adds	r7, #16
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bd80      	pop	{r7, pc}
 800c770:	24001274 	.word	0x24001274

0800c774 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c774:	b580      	push	{r7, lr}
 800c776:	b086      	sub	sp, #24
 800c778:	af00      	add	r7, sp, #0
 800c77a:	60f8      	str	r0, [r7, #12]
 800c77c:	60b9      	str	r1, [r7, #8]
 800c77e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d10a      	bne.n	800c79c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c78a:	f383 8811 	msr	BASEPRI, r3
 800c78e:	f3bf 8f6f 	isb	sy
 800c792:	f3bf 8f4f 	dsb	sy
 800c796:	617b      	str	r3, [r7, #20]
}
 800c798:	bf00      	nop
 800c79a:	e7fe      	b.n	800c79a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c79c:	4b0a      	ldr	r3, [pc, #40]	; (800c7c8 <vTaskPlaceOnEventListRestricted+0x54>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	3318      	adds	r3, #24
 800c7a2:	4619      	mov	r1, r3
 800c7a4:	68f8      	ldr	r0, [r7, #12]
 800c7a6:	f7fe fe3e 	bl	800b426 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d002      	beq.n	800c7b6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c7b0:	f04f 33ff 	mov.w	r3, #4294967295
 800c7b4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c7b6:	6879      	ldr	r1, [r7, #4]
 800c7b8:	68b8      	ldr	r0, [r7, #8]
 800c7ba:	f000 fa51 	bl	800cc60 <prvAddCurrentTaskToDelayedList>
	}
 800c7be:	bf00      	nop
 800c7c0:	3718      	adds	r7, #24
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}
 800c7c6:	bf00      	nop
 800c7c8:	24001274 	.word	0x24001274

0800c7cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b086      	sub	sp, #24
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	68db      	ldr	r3, [r3, #12]
 800c7d8:	68db      	ldr	r3, [r3, #12]
 800c7da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c7dc:	693b      	ldr	r3, [r7, #16]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d10a      	bne.n	800c7f8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c7e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7e6:	f383 8811 	msr	BASEPRI, r3
 800c7ea:	f3bf 8f6f 	isb	sy
 800c7ee:	f3bf 8f4f 	dsb	sy
 800c7f2:	60fb      	str	r3, [r7, #12]
}
 800c7f4:	bf00      	nop
 800c7f6:	e7fe      	b.n	800c7f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c7f8:	693b      	ldr	r3, [r7, #16]
 800c7fa:	3318      	adds	r3, #24
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f7fe fe6f 	bl	800b4e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c802:	4b1e      	ldr	r3, [pc, #120]	; (800c87c <xTaskRemoveFromEventList+0xb0>)
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d11d      	bne.n	800c846 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c80a:	693b      	ldr	r3, [r7, #16]
 800c80c:	3304      	adds	r3, #4
 800c80e:	4618      	mov	r0, r3
 800c810:	f7fe fe66 	bl	800b4e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c814:	693b      	ldr	r3, [r7, #16]
 800c816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c818:	4b19      	ldr	r3, [pc, #100]	; (800c880 <xTaskRemoveFromEventList+0xb4>)
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	429a      	cmp	r2, r3
 800c81e:	d903      	bls.n	800c828 <xTaskRemoveFromEventList+0x5c>
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c824:	4a16      	ldr	r2, [pc, #88]	; (800c880 <xTaskRemoveFromEventList+0xb4>)
 800c826:	6013      	str	r3, [r2, #0]
 800c828:	693b      	ldr	r3, [r7, #16]
 800c82a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c82c:	4613      	mov	r3, r2
 800c82e:	009b      	lsls	r3, r3, #2
 800c830:	4413      	add	r3, r2
 800c832:	009b      	lsls	r3, r3, #2
 800c834:	4a13      	ldr	r2, [pc, #76]	; (800c884 <xTaskRemoveFromEventList+0xb8>)
 800c836:	441a      	add	r2, r3
 800c838:	693b      	ldr	r3, [r7, #16]
 800c83a:	3304      	adds	r3, #4
 800c83c:	4619      	mov	r1, r3
 800c83e:	4610      	mov	r0, r2
 800c840:	f7fe fdf1 	bl	800b426 <vListInsertEnd>
 800c844:	e005      	b.n	800c852 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c846:	693b      	ldr	r3, [r7, #16]
 800c848:	3318      	adds	r3, #24
 800c84a:	4619      	mov	r1, r3
 800c84c:	480e      	ldr	r0, [pc, #56]	; (800c888 <xTaskRemoveFromEventList+0xbc>)
 800c84e:	f7fe fdea 	bl	800b426 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c852:	693b      	ldr	r3, [r7, #16]
 800c854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c856:	4b0d      	ldr	r3, [pc, #52]	; (800c88c <xTaskRemoveFromEventList+0xc0>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c85c:	429a      	cmp	r2, r3
 800c85e:	d905      	bls.n	800c86c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c860:	2301      	movs	r3, #1
 800c862:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c864:	4b0a      	ldr	r3, [pc, #40]	; (800c890 <xTaskRemoveFromEventList+0xc4>)
 800c866:	2201      	movs	r2, #1
 800c868:	601a      	str	r2, [r3, #0]
 800c86a:	e001      	b.n	800c870 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c86c:	2300      	movs	r3, #0
 800c86e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c870:	697b      	ldr	r3, [r7, #20]
}
 800c872:	4618      	mov	r0, r3
 800c874:	3718      	adds	r7, #24
 800c876:	46bd      	mov	sp, r7
 800c878:	bd80      	pop	{r7, pc}
 800c87a:	bf00      	nop
 800c87c:	24001770 	.word	0x24001770
 800c880:	24001750 	.word	0x24001750
 800c884:	24001278 	.word	0x24001278
 800c888:	24001708 	.word	0x24001708
 800c88c:	24001274 	.word	0x24001274
 800c890:	2400175c 	.word	0x2400175c

0800c894 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c894:	b480      	push	{r7}
 800c896:	b083      	sub	sp, #12
 800c898:	af00      	add	r7, sp, #0
 800c89a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c89c:	4b06      	ldr	r3, [pc, #24]	; (800c8b8 <vTaskInternalSetTimeOutState+0x24>)
 800c89e:	681a      	ldr	r2, [r3, #0]
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c8a4:	4b05      	ldr	r3, [pc, #20]	; (800c8bc <vTaskInternalSetTimeOutState+0x28>)
 800c8a6:	681a      	ldr	r2, [r3, #0]
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	605a      	str	r2, [r3, #4]
}
 800c8ac:	bf00      	nop
 800c8ae:	370c      	adds	r7, #12
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b6:	4770      	bx	lr
 800c8b8:	24001760 	.word	0x24001760
 800c8bc:	2400174c 	.word	0x2400174c

0800c8c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b088      	sub	sp, #32
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
 800c8c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d10a      	bne.n	800c8e6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8d4:	f383 8811 	msr	BASEPRI, r3
 800c8d8:	f3bf 8f6f 	isb	sy
 800c8dc:	f3bf 8f4f 	dsb	sy
 800c8e0:	613b      	str	r3, [r7, #16]
}
 800c8e2:	bf00      	nop
 800c8e4:	e7fe      	b.n	800c8e4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d10a      	bne.n	800c902 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c8ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8f0:	f383 8811 	msr	BASEPRI, r3
 800c8f4:	f3bf 8f6f 	isb	sy
 800c8f8:	f3bf 8f4f 	dsb	sy
 800c8fc:	60fb      	str	r3, [r7, #12]
}
 800c8fe:	bf00      	nop
 800c900:	e7fe      	b.n	800c900 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c902:	f000 fe7f 	bl	800d604 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c906:	4b1d      	ldr	r3, [pc, #116]	; (800c97c <xTaskCheckForTimeOut+0xbc>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	685b      	ldr	r3, [r3, #4]
 800c910:	69ba      	ldr	r2, [r7, #24]
 800c912:	1ad3      	subs	r3, r2, r3
 800c914:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c916:	683b      	ldr	r3, [r7, #0]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c91e:	d102      	bne.n	800c926 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c920:	2300      	movs	r3, #0
 800c922:	61fb      	str	r3, [r7, #28]
 800c924:	e023      	b.n	800c96e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681a      	ldr	r2, [r3, #0]
 800c92a:	4b15      	ldr	r3, [pc, #84]	; (800c980 <xTaskCheckForTimeOut+0xc0>)
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	429a      	cmp	r2, r3
 800c930:	d007      	beq.n	800c942 <xTaskCheckForTimeOut+0x82>
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	685b      	ldr	r3, [r3, #4]
 800c936:	69ba      	ldr	r2, [r7, #24]
 800c938:	429a      	cmp	r2, r3
 800c93a:	d302      	bcc.n	800c942 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c93c:	2301      	movs	r3, #1
 800c93e:	61fb      	str	r3, [r7, #28]
 800c940:	e015      	b.n	800c96e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	697a      	ldr	r2, [r7, #20]
 800c948:	429a      	cmp	r2, r3
 800c94a:	d20b      	bcs.n	800c964 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	681a      	ldr	r2, [r3, #0]
 800c950:	697b      	ldr	r3, [r7, #20]
 800c952:	1ad2      	subs	r2, r2, r3
 800c954:	683b      	ldr	r3, [r7, #0]
 800c956:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c958:	6878      	ldr	r0, [r7, #4]
 800c95a:	f7ff ff9b 	bl	800c894 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c95e:	2300      	movs	r3, #0
 800c960:	61fb      	str	r3, [r7, #28]
 800c962:	e004      	b.n	800c96e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	2200      	movs	r2, #0
 800c968:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c96a:	2301      	movs	r3, #1
 800c96c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c96e:	f000 fe79 	bl	800d664 <vPortExitCritical>

	return xReturn;
 800c972:	69fb      	ldr	r3, [r7, #28]
}
 800c974:	4618      	mov	r0, r3
 800c976:	3720      	adds	r7, #32
 800c978:	46bd      	mov	sp, r7
 800c97a:	bd80      	pop	{r7, pc}
 800c97c:	2400174c 	.word	0x2400174c
 800c980:	24001760 	.word	0x24001760

0800c984 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c984:	b480      	push	{r7}
 800c986:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c988:	4b03      	ldr	r3, [pc, #12]	; (800c998 <vTaskMissedYield+0x14>)
 800c98a:	2201      	movs	r2, #1
 800c98c:	601a      	str	r2, [r3, #0]
}
 800c98e:	bf00      	nop
 800c990:	46bd      	mov	sp, r7
 800c992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c996:	4770      	bx	lr
 800c998:	2400175c 	.word	0x2400175c

0800c99c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b082      	sub	sp, #8
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c9a4:	f000 f852 	bl	800ca4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c9a8:	4b06      	ldr	r3, [pc, #24]	; (800c9c4 <prvIdleTask+0x28>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	2b01      	cmp	r3, #1
 800c9ae:	d9f9      	bls.n	800c9a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c9b0:	4b05      	ldr	r3, [pc, #20]	; (800c9c8 <prvIdleTask+0x2c>)
 800c9b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9b6:	601a      	str	r2, [r3, #0]
 800c9b8:	f3bf 8f4f 	dsb	sy
 800c9bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c9c0:	e7f0      	b.n	800c9a4 <prvIdleTask+0x8>
 800c9c2:	bf00      	nop
 800c9c4:	24001278 	.word	0x24001278
 800c9c8:	e000ed04 	.word	0xe000ed04

0800c9cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b082      	sub	sp, #8
 800c9d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	607b      	str	r3, [r7, #4]
 800c9d6:	e00c      	b.n	800c9f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c9d8:	687a      	ldr	r2, [r7, #4]
 800c9da:	4613      	mov	r3, r2
 800c9dc:	009b      	lsls	r3, r3, #2
 800c9de:	4413      	add	r3, r2
 800c9e0:	009b      	lsls	r3, r3, #2
 800c9e2:	4a12      	ldr	r2, [pc, #72]	; (800ca2c <prvInitialiseTaskLists+0x60>)
 800c9e4:	4413      	add	r3, r2
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	f7fe fcf0 	bl	800b3cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	3301      	adds	r3, #1
 800c9f0:	607b      	str	r3, [r7, #4]
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	2b37      	cmp	r3, #55	; 0x37
 800c9f6:	d9ef      	bls.n	800c9d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c9f8:	480d      	ldr	r0, [pc, #52]	; (800ca30 <prvInitialiseTaskLists+0x64>)
 800c9fa:	f7fe fce7 	bl	800b3cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c9fe:	480d      	ldr	r0, [pc, #52]	; (800ca34 <prvInitialiseTaskLists+0x68>)
 800ca00:	f7fe fce4 	bl	800b3cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ca04:	480c      	ldr	r0, [pc, #48]	; (800ca38 <prvInitialiseTaskLists+0x6c>)
 800ca06:	f7fe fce1 	bl	800b3cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ca0a:	480c      	ldr	r0, [pc, #48]	; (800ca3c <prvInitialiseTaskLists+0x70>)
 800ca0c:	f7fe fcde 	bl	800b3cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ca10:	480b      	ldr	r0, [pc, #44]	; (800ca40 <prvInitialiseTaskLists+0x74>)
 800ca12:	f7fe fcdb 	bl	800b3cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ca16:	4b0b      	ldr	r3, [pc, #44]	; (800ca44 <prvInitialiseTaskLists+0x78>)
 800ca18:	4a05      	ldr	r2, [pc, #20]	; (800ca30 <prvInitialiseTaskLists+0x64>)
 800ca1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ca1c:	4b0a      	ldr	r3, [pc, #40]	; (800ca48 <prvInitialiseTaskLists+0x7c>)
 800ca1e:	4a05      	ldr	r2, [pc, #20]	; (800ca34 <prvInitialiseTaskLists+0x68>)
 800ca20:	601a      	str	r2, [r3, #0]
}
 800ca22:	bf00      	nop
 800ca24:	3708      	adds	r7, #8
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bd80      	pop	{r7, pc}
 800ca2a:	bf00      	nop
 800ca2c:	24001278 	.word	0x24001278
 800ca30:	240016d8 	.word	0x240016d8
 800ca34:	240016ec 	.word	0x240016ec
 800ca38:	24001708 	.word	0x24001708
 800ca3c:	2400171c 	.word	0x2400171c
 800ca40:	24001734 	.word	0x24001734
 800ca44:	24001700 	.word	0x24001700
 800ca48:	24001704 	.word	0x24001704

0800ca4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b082      	sub	sp, #8
 800ca50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ca52:	e019      	b.n	800ca88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ca54:	f000 fdd6 	bl	800d604 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca58:	4b10      	ldr	r3, [pc, #64]	; (800ca9c <prvCheckTasksWaitingTermination+0x50>)
 800ca5a:	68db      	ldr	r3, [r3, #12]
 800ca5c:	68db      	ldr	r3, [r3, #12]
 800ca5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	3304      	adds	r3, #4
 800ca64:	4618      	mov	r0, r3
 800ca66:	f7fe fd3b 	bl	800b4e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ca6a:	4b0d      	ldr	r3, [pc, #52]	; (800caa0 <prvCheckTasksWaitingTermination+0x54>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	3b01      	subs	r3, #1
 800ca70:	4a0b      	ldr	r2, [pc, #44]	; (800caa0 <prvCheckTasksWaitingTermination+0x54>)
 800ca72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ca74:	4b0b      	ldr	r3, [pc, #44]	; (800caa4 <prvCheckTasksWaitingTermination+0x58>)
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	3b01      	subs	r3, #1
 800ca7a:	4a0a      	ldr	r2, [pc, #40]	; (800caa4 <prvCheckTasksWaitingTermination+0x58>)
 800ca7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ca7e:	f000 fdf1 	bl	800d664 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f000 f810 	bl	800caa8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ca88:	4b06      	ldr	r3, [pc, #24]	; (800caa4 <prvCheckTasksWaitingTermination+0x58>)
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d1e1      	bne.n	800ca54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ca90:	bf00      	nop
 800ca92:	bf00      	nop
 800ca94:	3708      	adds	r7, #8
 800ca96:	46bd      	mov	sp, r7
 800ca98:	bd80      	pop	{r7, pc}
 800ca9a:	bf00      	nop
 800ca9c:	2400171c 	.word	0x2400171c
 800caa0:	24001748 	.word	0x24001748
 800caa4:	24001730 	.word	0x24001730

0800caa8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b084      	sub	sp, #16
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d108      	bne.n	800cacc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cabe:	4618      	mov	r0, r3
 800cac0:	f000 ff8e 	bl	800d9e0 <vPortFree>
				vPortFree( pxTCB );
 800cac4:	6878      	ldr	r0, [r7, #4]
 800cac6:	f000 ff8b 	bl	800d9e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800caca:	e018      	b.n	800cafe <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800cad2:	2b01      	cmp	r3, #1
 800cad4:	d103      	bne.n	800cade <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800cad6:	6878      	ldr	r0, [r7, #4]
 800cad8:	f000 ff82 	bl	800d9e0 <vPortFree>
	}
 800cadc:	e00f      	b.n	800cafe <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800cae4:	2b02      	cmp	r3, #2
 800cae6:	d00a      	beq.n	800cafe <prvDeleteTCB+0x56>
	__asm volatile
 800cae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caec:	f383 8811 	msr	BASEPRI, r3
 800caf0:	f3bf 8f6f 	isb	sy
 800caf4:	f3bf 8f4f 	dsb	sy
 800caf8:	60fb      	str	r3, [r7, #12]
}
 800cafa:	bf00      	nop
 800cafc:	e7fe      	b.n	800cafc <prvDeleteTCB+0x54>
	}
 800cafe:	bf00      	nop
 800cb00:	3710      	adds	r7, #16
 800cb02:	46bd      	mov	sp, r7
 800cb04:	bd80      	pop	{r7, pc}
	...

0800cb08 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cb08:	b480      	push	{r7}
 800cb0a:	b083      	sub	sp, #12
 800cb0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cb0e:	4b0c      	ldr	r3, [pc, #48]	; (800cb40 <prvResetNextTaskUnblockTime+0x38>)
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d104      	bne.n	800cb22 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cb18:	4b0a      	ldr	r3, [pc, #40]	; (800cb44 <prvResetNextTaskUnblockTime+0x3c>)
 800cb1a:	f04f 32ff 	mov.w	r2, #4294967295
 800cb1e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cb20:	e008      	b.n	800cb34 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb22:	4b07      	ldr	r3, [pc, #28]	; (800cb40 <prvResetNextTaskUnblockTime+0x38>)
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	68db      	ldr	r3, [r3, #12]
 800cb28:	68db      	ldr	r3, [r3, #12]
 800cb2a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	685b      	ldr	r3, [r3, #4]
 800cb30:	4a04      	ldr	r2, [pc, #16]	; (800cb44 <prvResetNextTaskUnblockTime+0x3c>)
 800cb32:	6013      	str	r3, [r2, #0]
}
 800cb34:	bf00      	nop
 800cb36:	370c      	adds	r7, #12
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3e:	4770      	bx	lr
 800cb40:	24001700 	.word	0x24001700
 800cb44:	24001768 	.word	0x24001768

0800cb48 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cb48:	b480      	push	{r7}
 800cb4a:	b083      	sub	sp, #12
 800cb4c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cb4e:	4b0b      	ldr	r3, [pc, #44]	; (800cb7c <xTaskGetSchedulerState+0x34>)
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d102      	bne.n	800cb5c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cb56:	2301      	movs	r3, #1
 800cb58:	607b      	str	r3, [r7, #4]
 800cb5a:	e008      	b.n	800cb6e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb5c:	4b08      	ldr	r3, [pc, #32]	; (800cb80 <xTaskGetSchedulerState+0x38>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d102      	bne.n	800cb6a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cb64:	2302      	movs	r3, #2
 800cb66:	607b      	str	r3, [r7, #4]
 800cb68:	e001      	b.n	800cb6e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cb6e:	687b      	ldr	r3, [r7, #4]
	}
 800cb70:	4618      	mov	r0, r3
 800cb72:	370c      	adds	r7, #12
 800cb74:	46bd      	mov	sp, r7
 800cb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7a:	4770      	bx	lr
 800cb7c:	24001754 	.word	0x24001754
 800cb80:	24001770 	.word	0x24001770

0800cb84 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b086      	sub	sp, #24
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cb90:	2300      	movs	r3, #0
 800cb92:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d056      	beq.n	800cc48 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cb9a:	4b2e      	ldr	r3, [pc, #184]	; (800cc54 <xTaskPriorityDisinherit+0xd0>)
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	693a      	ldr	r2, [r7, #16]
 800cba0:	429a      	cmp	r2, r3
 800cba2:	d00a      	beq.n	800cbba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800cba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cba8:	f383 8811 	msr	BASEPRI, r3
 800cbac:	f3bf 8f6f 	isb	sy
 800cbb0:	f3bf 8f4f 	dsb	sy
 800cbb4:	60fb      	str	r3, [r7, #12]
}
 800cbb6:	bf00      	nop
 800cbb8:	e7fe      	b.n	800cbb8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cbba:	693b      	ldr	r3, [r7, #16]
 800cbbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d10a      	bne.n	800cbd8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800cbc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbc6:	f383 8811 	msr	BASEPRI, r3
 800cbca:	f3bf 8f6f 	isb	sy
 800cbce:	f3bf 8f4f 	dsb	sy
 800cbd2:	60bb      	str	r3, [r7, #8]
}
 800cbd4:	bf00      	nop
 800cbd6:	e7fe      	b.n	800cbd6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800cbd8:	693b      	ldr	r3, [r7, #16]
 800cbda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbdc:	1e5a      	subs	r2, r3, #1
 800cbde:	693b      	ldr	r3, [r7, #16]
 800cbe0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cbe2:	693b      	ldr	r3, [r7, #16]
 800cbe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbe6:	693b      	ldr	r3, [r7, #16]
 800cbe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cbea:	429a      	cmp	r2, r3
 800cbec:	d02c      	beq.n	800cc48 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cbee:	693b      	ldr	r3, [r7, #16]
 800cbf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d128      	bne.n	800cc48 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cbf6:	693b      	ldr	r3, [r7, #16]
 800cbf8:	3304      	adds	r3, #4
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f7fe fc70 	bl	800b4e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cc00:	693b      	ldr	r3, [r7, #16]
 800cc02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cc04:	693b      	ldr	r3, [r7, #16]
 800cc06:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc08:	693b      	ldr	r3, [r7, #16]
 800cc0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc0c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cc10:	693b      	ldr	r3, [r7, #16]
 800cc12:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cc14:	693b      	ldr	r3, [r7, #16]
 800cc16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc18:	4b0f      	ldr	r3, [pc, #60]	; (800cc58 <xTaskPriorityDisinherit+0xd4>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	d903      	bls.n	800cc28 <xTaskPriorityDisinherit+0xa4>
 800cc20:	693b      	ldr	r3, [r7, #16]
 800cc22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc24:	4a0c      	ldr	r2, [pc, #48]	; (800cc58 <xTaskPriorityDisinherit+0xd4>)
 800cc26:	6013      	str	r3, [r2, #0]
 800cc28:	693b      	ldr	r3, [r7, #16]
 800cc2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc2c:	4613      	mov	r3, r2
 800cc2e:	009b      	lsls	r3, r3, #2
 800cc30:	4413      	add	r3, r2
 800cc32:	009b      	lsls	r3, r3, #2
 800cc34:	4a09      	ldr	r2, [pc, #36]	; (800cc5c <xTaskPriorityDisinherit+0xd8>)
 800cc36:	441a      	add	r2, r3
 800cc38:	693b      	ldr	r3, [r7, #16]
 800cc3a:	3304      	adds	r3, #4
 800cc3c:	4619      	mov	r1, r3
 800cc3e:	4610      	mov	r0, r2
 800cc40:	f7fe fbf1 	bl	800b426 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cc44:	2301      	movs	r3, #1
 800cc46:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cc48:	697b      	ldr	r3, [r7, #20]
	}
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	3718      	adds	r7, #24
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd80      	pop	{r7, pc}
 800cc52:	bf00      	nop
 800cc54:	24001274 	.word	0x24001274
 800cc58:	24001750 	.word	0x24001750
 800cc5c:	24001278 	.word	0x24001278

0800cc60 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b084      	sub	sp, #16
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
 800cc68:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cc6a:	4b21      	ldr	r3, [pc, #132]	; (800ccf0 <prvAddCurrentTaskToDelayedList+0x90>)
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cc70:	4b20      	ldr	r3, [pc, #128]	; (800ccf4 <prvAddCurrentTaskToDelayedList+0x94>)
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	3304      	adds	r3, #4
 800cc76:	4618      	mov	r0, r3
 800cc78:	f7fe fc32 	bl	800b4e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc82:	d10a      	bne.n	800cc9a <prvAddCurrentTaskToDelayedList+0x3a>
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d007      	beq.n	800cc9a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cc8a:	4b1a      	ldr	r3, [pc, #104]	; (800ccf4 <prvAddCurrentTaskToDelayedList+0x94>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	3304      	adds	r3, #4
 800cc90:	4619      	mov	r1, r3
 800cc92:	4819      	ldr	r0, [pc, #100]	; (800ccf8 <prvAddCurrentTaskToDelayedList+0x98>)
 800cc94:	f7fe fbc7 	bl	800b426 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cc98:	e026      	b.n	800cce8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cc9a:	68fa      	ldr	r2, [r7, #12]
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	4413      	add	r3, r2
 800cca0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cca2:	4b14      	ldr	r3, [pc, #80]	; (800ccf4 <prvAddCurrentTaskToDelayedList+0x94>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	68ba      	ldr	r2, [r7, #8]
 800cca8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ccaa:	68ba      	ldr	r2, [r7, #8]
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	429a      	cmp	r2, r3
 800ccb0:	d209      	bcs.n	800ccc6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ccb2:	4b12      	ldr	r3, [pc, #72]	; (800ccfc <prvAddCurrentTaskToDelayedList+0x9c>)
 800ccb4:	681a      	ldr	r2, [r3, #0]
 800ccb6:	4b0f      	ldr	r3, [pc, #60]	; (800ccf4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	3304      	adds	r3, #4
 800ccbc:	4619      	mov	r1, r3
 800ccbe:	4610      	mov	r0, r2
 800ccc0:	f7fe fbd5 	bl	800b46e <vListInsert>
}
 800ccc4:	e010      	b.n	800cce8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ccc6:	4b0e      	ldr	r3, [pc, #56]	; (800cd00 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ccc8:	681a      	ldr	r2, [r3, #0]
 800ccca:	4b0a      	ldr	r3, [pc, #40]	; (800ccf4 <prvAddCurrentTaskToDelayedList+0x94>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	3304      	adds	r3, #4
 800ccd0:	4619      	mov	r1, r3
 800ccd2:	4610      	mov	r0, r2
 800ccd4:	f7fe fbcb 	bl	800b46e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ccd8:	4b0a      	ldr	r3, [pc, #40]	; (800cd04 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	68ba      	ldr	r2, [r7, #8]
 800ccde:	429a      	cmp	r2, r3
 800cce0:	d202      	bcs.n	800cce8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800cce2:	4a08      	ldr	r2, [pc, #32]	; (800cd04 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cce4:	68bb      	ldr	r3, [r7, #8]
 800cce6:	6013      	str	r3, [r2, #0]
}
 800cce8:	bf00      	nop
 800ccea:	3710      	adds	r7, #16
 800ccec:	46bd      	mov	sp, r7
 800ccee:	bd80      	pop	{r7, pc}
 800ccf0:	2400174c 	.word	0x2400174c
 800ccf4:	24001274 	.word	0x24001274
 800ccf8:	24001734 	.word	0x24001734
 800ccfc:	24001704 	.word	0x24001704
 800cd00:	24001700 	.word	0x24001700
 800cd04:	24001768 	.word	0x24001768

0800cd08 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b08a      	sub	sp, #40	; 0x28
 800cd0c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cd12:	f000 fb07 	bl	800d324 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cd16:	4b1c      	ldr	r3, [pc, #112]	; (800cd88 <xTimerCreateTimerTask+0x80>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d021      	beq.n	800cd62 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cd1e:	2300      	movs	r3, #0
 800cd20:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cd22:	2300      	movs	r3, #0
 800cd24:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cd26:	1d3a      	adds	r2, r7, #4
 800cd28:	f107 0108 	add.w	r1, r7, #8
 800cd2c:	f107 030c 	add.w	r3, r7, #12
 800cd30:	4618      	mov	r0, r3
 800cd32:	f7fe fb31 	bl	800b398 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cd36:	6879      	ldr	r1, [r7, #4]
 800cd38:	68bb      	ldr	r3, [r7, #8]
 800cd3a:	68fa      	ldr	r2, [r7, #12]
 800cd3c:	9202      	str	r2, [sp, #8]
 800cd3e:	9301      	str	r3, [sp, #4]
 800cd40:	2302      	movs	r3, #2
 800cd42:	9300      	str	r3, [sp, #0]
 800cd44:	2300      	movs	r3, #0
 800cd46:	460a      	mov	r2, r1
 800cd48:	4910      	ldr	r1, [pc, #64]	; (800cd8c <xTimerCreateTimerTask+0x84>)
 800cd4a:	4811      	ldr	r0, [pc, #68]	; (800cd90 <xTimerCreateTimerTask+0x88>)
 800cd4c:	f7ff f8de 	bl	800bf0c <xTaskCreateStatic>
 800cd50:	4603      	mov	r3, r0
 800cd52:	4a10      	ldr	r2, [pc, #64]	; (800cd94 <xTimerCreateTimerTask+0x8c>)
 800cd54:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cd56:	4b0f      	ldr	r3, [pc, #60]	; (800cd94 <xTimerCreateTimerTask+0x8c>)
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d001      	beq.n	800cd62 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800cd5e:	2301      	movs	r3, #1
 800cd60:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cd62:	697b      	ldr	r3, [r7, #20]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d10a      	bne.n	800cd7e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800cd68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd6c:	f383 8811 	msr	BASEPRI, r3
 800cd70:	f3bf 8f6f 	isb	sy
 800cd74:	f3bf 8f4f 	dsb	sy
 800cd78:	613b      	str	r3, [r7, #16]
}
 800cd7a:	bf00      	nop
 800cd7c:	e7fe      	b.n	800cd7c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800cd7e:	697b      	ldr	r3, [r7, #20]
}
 800cd80:	4618      	mov	r0, r3
 800cd82:	3718      	adds	r7, #24
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bd80      	pop	{r7, pc}
 800cd88:	240017a4 	.word	0x240017a4
 800cd8c:	0801165c 	.word	0x0801165c
 800cd90:	0800cecd 	.word	0x0800cecd
 800cd94:	240017a8 	.word	0x240017a8

0800cd98 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b08a      	sub	sp, #40	; 0x28
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	60f8      	str	r0, [r7, #12]
 800cda0:	60b9      	str	r1, [r7, #8]
 800cda2:	607a      	str	r2, [r7, #4]
 800cda4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cda6:	2300      	movs	r3, #0
 800cda8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d10a      	bne.n	800cdc6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800cdb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb4:	f383 8811 	msr	BASEPRI, r3
 800cdb8:	f3bf 8f6f 	isb	sy
 800cdbc:	f3bf 8f4f 	dsb	sy
 800cdc0:	623b      	str	r3, [r7, #32]
}
 800cdc2:	bf00      	nop
 800cdc4:	e7fe      	b.n	800cdc4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cdc6:	4b1a      	ldr	r3, [pc, #104]	; (800ce30 <xTimerGenericCommand+0x98>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d02a      	beq.n	800ce24 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cdce:	68bb      	ldr	r3, [r7, #8]
 800cdd0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cdda:	68bb      	ldr	r3, [r7, #8]
 800cddc:	2b05      	cmp	r3, #5
 800cdde:	dc18      	bgt.n	800ce12 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cde0:	f7ff feb2 	bl	800cb48 <xTaskGetSchedulerState>
 800cde4:	4603      	mov	r3, r0
 800cde6:	2b02      	cmp	r3, #2
 800cde8:	d109      	bne.n	800cdfe <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cdea:	4b11      	ldr	r3, [pc, #68]	; (800ce30 <xTimerGenericCommand+0x98>)
 800cdec:	6818      	ldr	r0, [r3, #0]
 800cdee:	f107 0110 	add.w	r1, r7, #16
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdf6:	f7fe fca1 	bl	800b73c <xQueueGenericSend>
 800cdfa:	6278      	str	r0, [r7, #36]	; 0x24
 800cdfc:	e012      	b.n	800ce24 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cdfe:	4b0c      	ldr	r3, [pc, #48]	; (800ce30 <xTimerGenericCommand+0x98>)
 800ce00:	6818      	ldr	r0, [r3, #0]
 800ce02:	f107 0110 	add.w	r1, r7, #16
 800ce06:	2300      	movs	r3, #0
 800ce08:	2200      	movs	r2, #0
 800ce0a:	f7fe fc97 	bl	800b73c <xQueueGenericSend>
 800ce0e:	6278      	str	r0, [r7, #36]	; 0x24
 800ce10:	e008      	b.n	800ce24 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ce12:	4b07      	ldr	r3, [pc, #28]	; (800ce30 <xTimerGenericCommand+0x98>)
 800ce14:	6818      	ldr	r0, [r3, #0]
 800ce16:	f107 0110 	add.w	r1, r7, #16
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	683a      	ldr	r2, [r7, #0]
 800ce1e:	f7fe fd8b 	bl	800b938 <xQueueGenericSendFromISR>
 800ce22:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ce24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	3728      	adds	r7, #40	; 0x28
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}
 800ce2e:	bf00      	nop
 800ce30:	240017a4 	.word	0x240017a4

0800ce34 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b088      	sub	sp, #32
 800ce38:	af02      	add	r7, sp, #8
 800ce3a:	6078      	str	r0, [r7, #4]
 800ce3c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce3e:	4b22      	ldr	r3, [pc, #136]	; (800cec8 <prvProcessExpiredTimer+0x94>)
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	68db      	ldr	r3, [r3, #12]
 800ce44:	68db      	ldr	r3, [r3, #12]
 800ce46:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ce48:	697b      	ldr	r3, [r7, #20]
 800ce4a:	3304      	adds	r3, #4
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	f7fe fb47 	bl	800b4e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ce52:	697b      	ldr	r3, [r7, #20]
 800ce54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce58:	f003 0304 	and.w	r3, r3, #4
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d022      	beq.n	800cea6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ce60:	697b      	ldr	r3, [r7, #20]
 800ce62:	699a      	ldr	r2, [r3, #24]
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	18d1      	adds	r1, r2, r3
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	683a      	ldr	r2, [r7, #0]
 800ce6c:	6978      	ldr	r0, [r7, #20]
 800ce6e:	f000 f8d1 	bl	800d014 <prvInsertTimerInActiveList>
 800ce72:	4603      	mov	r3, r0
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d01f      	beq.n	800ceb8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ce78:	2300      	movs	r3, #0
 800ce7a:	9300      	str	r3, [sp, #0]
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	687a      	ldr	r2, [r7, #4]
 800ce80:	2100      	movs	r1, #0
 800ce82:	6978      	ldr	r0, [r7, #20]
 800ce84:	f7ff ff88 	bl	800cd98 <xTimerGenericCommand>
 800ce88:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ce8a:	693b      	ldr	r3, [r7, #16]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d113      	bne.n	800ceb8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ce90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce94:	f383 8811 	msr	BASEPRI, r3
 800ce98:	f3bf 8f6f 	isb	sy
 800ce9c:	f3bf 8f4f 	dsb	sy
 800cea0:	60fb      	str	r3, [r7, #12]
}
 800cea2:	bf00      	nop
 800cea4:	e7fe      	b.n	800cea4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cea6:	697b      	ldr	r3, [r7, #20]
 800cea8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ceac:	f023 0301 	bic.w	r3, r3, #1
 800ceb0:	b2da      	uxtb	r2, r3
 800ceb2:	697b      	ldr	r3, [r7, #20]
 800ceb4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ceb8:	697b      	ldr	r3, [r7, #20]
 800ceba:	6a1b      	ldr	r3, [r3, #32]
 800cebc:	6978      	ldr	r0, [r7, #20]
 800cebe:	4798      	blx	r3
}
 800cec0:	bf00      	nop
 800cec2:	3718      	adds	r7, #24
 800cec4:	46bd      	mov	sp, r7
 800cec6:	bd80      	pop	{r7, pc}
 800cec8:	2400179c 	.word	0x2400179c

0800cecc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b084      	sub	sp, #16
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ced4:	f107 0308 	add.w	r3, r7, #8
 800ced8:	4618      	mov	r0, r3
 800ceda:	f000 f857 	bl	800cf8c <prvGetNextExpireTime>
 800cede:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cee0:	68bb      	ldr	r3, [r7, #8]
 800cee2:	4619      	mov	r1, r3
 800cee4:	68f8      	ldr	r0, [r7, #12]
 800cee6:	f000 f803 	bl	800cef0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ceea:	f000 f8d5 	bl	800d098 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ceee:	e7f1      	b.n	800ced4 <prvTimerTask+0x8>

0800cef0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b084      	sub	sp, #16
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
 800cef8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cefa:	f7ff fa43 	bl	800c384 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cefe:	f107 0308 	add.w	r3, r7, #8
 800cf02:	4618      	mov	r0, r3
 800cf04:	f000 f866 	bl	800cfd4 <prvSampleTimeNow>
 800cf08:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cf0a:	68bb      	ldr	r3, [r7, #8]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d130      	bne.n	800cf72 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d10a      	bne.n	800cf2c <prvProcessTimerOrBlockTask+0x3c>
 800cf16:	687a      	ldr	r2, [r7, #4]
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	429a      	cmp	r2, r3
 800cf1c:	d806      	bhi.n	800cf2c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cf1e:	f7ff fa3f 	bl	800c3a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cf22:	68f9      	ldr	r1, [r7, #12]
 800cf24:	6878      	ldr	r0, [r7, #4]
 800cf26:	f7ff ff85 	bl	800ce34 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cf2a:	e024      	b.n	800cf76 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d008      	beq.n	800cf44 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cf32:	4b13      	ldr	r3, [pc, #76]	; (800cf80 <prvProcessTimerOrBlockTask+0x90>)
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d101      	bne.n	800cf40 <prvProcessTimerOrBlockTask+0x50>
 800cf3c:	2301      	movs	r3, #1
 800cf3e:	e000      	b.n	800cf42 <prvProcessTimerOrBlockTask+0x52>
 800cf40:	2300      	movs	r3, #0
 800cf42:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cf44:	4b0f      	ldr	r3, [pc, #60]	; (800cf84 <prvProcessTimerOrBlockTask+0x94>)
 800cf46:	6818      	ldr	r0, [r3, #0]
 800cf48:	687a      	ldr	r2, [r7, #4]
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	1ad3      	subs	r3, r2, r3
 800cf4e:	683a      	ldr	r2, [r7, #0]
 800cf50:	4619      	mov	r1, r3
 800cf52:	f7fe ffa7 	bl	800bea4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cf56:	f7ff fa23 	bl	800c3a0 <xTaskResumeAll>
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d10a      	bne.n	800cf76 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cf60:	4b09      	ldr	r3, [pc, #36]	; (800cf88 <prvProcessTimerOrBlockTask+0x98>)
 800cf62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf66:	601a      	str	r2, [r3, #0]
 800cf68:	f3bf 8f4f 	dsb	sy
 800cf6c:	f3bf 8f6f 	isb	sy
}
 800cf70:	e001      	b.n	800cf76 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cf72:	f7ff fa15 	bl	800c3a0 <xTaskResumeAll>
}
 800cf76:	bf00      	nop
 800cf78:	3710      	adds	r7, #16
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	bd80      	pop	{r7, pc}
 800cf7e:	bf00      	nop
 800cf80:	240017a0 	.word	0x240017a0
 800cf84:	240017a4 	.word	0x240017a4
 800cf88:	e000ed04 	.word	0xe000ed04

0800cf8c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	b085      	sub	sp, #20
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cf94:	4b0e      	ldr	r3, [pc, #56]	; (800cfd0 <prvGetNextExpireTime+0x44>)
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d101      	bne.n	800cfa2 <prvGetNextExpireTime+0x16>
 800cf9e:	2201      	movs	r2, #1
 800cfa0:	e000      	b.n	800cfa4 <prvGetNextExpireTime+0x18>
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d105      	bne.n	800cfbc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cfb0:	4b07      	ldr	r3, [pc, #28]	; (800cfd0 <prvGetNextExpireTime+0x44>)
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	68db      	ldr	r3, [r3, #12]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	60fb      	str	r3, [r7, #12]
 800cfba:	e001      	b.n	800cfc0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cfc0:	68fb      	ldr	r3, [r7, #12]
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	3714      	adds	r7, #20
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfcc:	4770      	bx	lr
 800cfce:	bf00      	nop
 800cfd0:	2400179c 	.word	0x2400179c

0800cfd4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b084      	sub	sp, #16
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cfdc:	f7ff fa7e 	bl	800c4dc <xTaskGetTickCount>
 800cfe0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cfe2:	4b0b      	ldr	r3, [pc, #44]	; (800d010 <prvSampleTimeNow+0x3c>)
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	68fa      	ldr	r2, [r7, #12]
 800cfe8:	429a      	cmp	r2, r3
 800cfea:	d205      	bcs.n	800cff8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cfec:	f000 f936 	bl	800d25c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	2201      	movs	r2, #1
 800cff4:	601a      	str	r2, [r3, #0]
 800cff6:	e002      	b.n	800cffe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	2200      	movs	r2, #0
 800cffc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cffe:	4a04      	ldr	r2, [pc, #16]	; (800d010 <prvSampleTimeNow+0x3c>)
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d004:	68fb      	ldr	r3, [r7, #12]
}
 800d006:	4618      	mov	r0, r3
 800d008:	3710      	adds	r7, #16
 800d00a:	46bd      	mov	sp, r7
 800d00c:	bd80      	pop	{r7, pc}
 800d00e:	bf00      	nop
 800d010:	240017ac 	.word	0x240017ac

0800d014 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b086      	sub	sp, #24
 800d018:	af00      	add	r7, sp, #0
 800d01a:	60f8      	str	r0, [r7, #12]
 800d01c:	60b9      	str	r1, [r7, #8]
 800d01e:	607a      	str	r2, [r7, #4]
 800d020:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d022:	2300      	movs	r3, #0
 800d024:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	68ba      	ldr	r2, [r7, #8]
 800d02a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	68fa      	ldr	r2, [r7, #12]
 800d030:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d032:	68ba      	ldr	r2, [r7, #8]
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	429a      	cmp	r2, r3
 800d038:	d812      	bhi.n	800d060 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d03a:	687a      	ldr	r2, [r7, #4]
 800d03c:	683b      	ldr	r3, [r7, #0]
 800d03e:	1ad2      	subs	r2, r2, r3
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	699b      	ldr	r3, [r3, #24]
 800d044:	429a      	cmp	r2, r3
 800d046:	d302      	bcc.n	800d04e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d048:	2301      	movs	r3, #1
 800d04a:	617b      	str	r3, [r7, #20]
 800d04c:	e01b      	b.n	800d086 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d04e:	4b10      	ldr	r3, [pc, #64]	; (800d090 <prvInsertTimerInActiveList+0x7c>)
 800d050:	681a      	ldr	r2, [r3, #0]
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	3304      	adds	r3, #4
 800d056:	4619      	mov	r1, r3
 800d058:	4610      	mov	r0, r2
 800d05a:	f7fe fa08 	bl	800b46e <vListInsert>
 800d05e:	e012      	b.n	800d086 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d060:	687a      	ldr	r2, [r7, #4]
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	429a      	cmp	r2, r3
 800d066:	d206      	bcs.n	800d076 <prvInsertTimerInActiveList+0x62>
 800d068:	68ba      	ldr	r2, [r7, #8]
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	429a      	cmp	r2, r3
 800d06e:	d302      	bcc.n	800d076 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d070:	2301      	movs	r3, #1
 800d072:	617b      	str	r3, [r7, #20]
 800d074:	e007      	b.n	800d086 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d076:	4b07      	ldr	r3, [pc, #28]	; (800d094 <prvInsertTimerInActiveList+0x80>)
 800d078:	681a      	ldr	r2, [r3, #0]
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	3304      	adds	r3, #4
 800d07e:	4619      	mov	r1, r3
 800d080:	4610      	mov	r0, r2
 800d082:	f7fe f9f4 	bl	800b46e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d086:	697b      	ldr	r3, [r7, #20]
}
 800d088:	4618      	mov	r0, r3
 800d08a:	3718      	adds	r7, #24
 800d08c:	46bd      	mov	sp, r7
 800d08e:	bd80      	pop	{r7, pc}
 800d090:	240017a0 	.word	0x240017a0
 800d094:	2400179c 	.word	0x2400179c

0800d098 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b08e      	sub	sp, #56	; 0x38
 800d09c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d09e:	e0ca      	b.n	800d236 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	da18      	bge.n	800d0d8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d0a6:	1d3b      	adds	r3, r7, #4
 800d0a8:	3304      	adds	r3, #4
 800d0aa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d10a      	bne.n	800d0c8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d0b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0b6:	f383 8811 	msr	BASEPRI, r3
 800d0ba:	f3bf 8f6f 	isb	sy
 800d0be:	f3bf 8f4f 	dsb	sy
 800d0c2:	61fb      	str	r3, [r7, #28]
}
 800d0c4:	bf00      	nop
 800d0c6:	e7fe      	b.n	800d0c6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d0ce:	6850      	ldr	r0, [r2, #4]
 800d0d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d0d2:	6892      	ldr	r2, [r2, #8]
 800d0d4:	4611      	mov	r1, r2
 800d0d6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	f2c0 80ab 	blt.w	800d236 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0e6:	695b      	ldr	r3, [r3, #20]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d004      	beq.n	800d0f6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ee:	3304      	adds	r3, #4
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	f7fe f9f5 	bl	800b4e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d0f6:	463b      	mov	r3, r7
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	f7ff ff6b 	bl	800cfd4 <prvSampleTimeNow>
 800d0fe:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2b09      	cmp	r3, #9
 800d104:	f200 8096 	bhi.w	800d234 <prvProcessReceivedCommands+0x19c>
 800d108:	a201      	add	r2, pc, #4	; (adr r2, 800d110 <prvProcessReceivedCommands+0x78>)
 800d10a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d10e:	bf00      	nop
 800d110:	0800d139 	.word	0x0800d139
 800d114:	0800d139 	.word	0x0800d139
 800d118:	0800d139 	.word	0x0800d139
 800d11c:	0800d1ad 	.word	0x0800d1ad
 800d120:	0800d1c1 	.word	0x0800d1c1
 800d124:	0800d20b 	.word	0x0800d20b
 800d128:	0800d139 	.word	0x0800d139
 800d12c:	0800d139 	.word	0x0800d139
 800d130:	0800d1ad 	.word	0x0800d1ad
 800d134:	0800d1c1 	.word	0x0800d1c1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d13a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d13e:	f043 0301 	orr.w	r3, r3, #1
 800d142:	b2da      	uxtb	r2, r3
 800d144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d146:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d14a:	68ba      	ldr	r2, [r7, #8]
 800d14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d14e:	699b      	ldr	r3, [r3, #24]
 800d150:	18d1      	adds	r1, r2, r3
 800d152:	68bb      	ldr	r3, [r7, #8]
 800d154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d156:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d158:	f7ff ff5c 	bl	800d014 <prvInsertTimerInActiveList>
 800d15c:	4603      	mov	r3, r0
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d069      	beq.n	800d236 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d164:	6a1b      	ldr	r3, [r3, #32]
 800d166:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d168:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d16a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d16c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d170:	f003 0304 	and.w	r3, r3, #4
 800d174:	2b00      	cmp	r3, #0
 800d176:	d05e      	beq.n	800d236 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d178:	68ba      	ldr	r2, [r7, #8]
 800d17a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d17c:	699b      	ldr	r3, [r3, #24]
 800d17e:	441a      	add	r2, r3
 800d180:	2300      	movs	r3, #0
 800d182:	9300      	str	r3, [sp, #0]
 800d184:	2300      	movs	r3, #0
 800d186:	2100      	movs	r1, #0
 800d188:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d18a:	f7ff fe05 	bl	800cd98 <xTimerGenericCommand>
 800d18e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d190:	6a3b      	ldr	r3, [r7, #32]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d14f      	bne.n	800d236 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d19a:	f383 8811 	msr	BASEPRI, r3
 800d19e:	f3bf 8f6f 	isb	sy
 800d1a2:	f3bf 8f4f 	dsb	sy
 800d1a6:	61bb      	str	r3, [r7, #24]
}
 800d1a8:	bf00      	nop
 800d1aa:	e7fe      	b.n	800d1aa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d1b2:	f023 0301 	bic.w	r3, r3, #1
 800d1b6:	b2da      	uxtb	r2, r3
 800d1b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d1be:	e03a      	b.n	800d236 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d1c6:	f043 0301 	orr.w	r3, r3, #1
 800d1ca:	b2da      	uxtb	r2, r3
 800d1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d1d2:	68ba      	ldr	r2, [r7, #8]
 800d1d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1d6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1da:	699b      	ldr	r3, [r3, #24]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d10a      	bne.n	800d1f6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d1e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1e4:	f383 8811 	msr	BASEPRI, r3
 800d1e8:	f3bf 8f6f 	isb	sy
 800d1ec:	f3bf 8f4f 	dsb	sy
 800d1f0:	617b      	str	r3, [r7, #20]
}
 800d1f2:	bf00      	nop
 800d1f4:	e7fe      	b.n	800d1f4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1f8:	699a      	ldr	r2, [r3, #24]
 800d1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1fc:	18d1      	adds	r1, r2, r3
 800d1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d202:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d204:	f7ff ff06 	bl	800d014 <prvInsertTimerInActiveList>
					break;
 800d208:	e015      	b.n	800d236 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d20a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d20c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d210:	f003 0302 	and.w	r3, r3, #2
 800d214:	2b00      	cmp	r3, #0
 800d216:	d103      	bne.n	800d220 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d218:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d21a:	f000 fbe1 	bl	800d9e0 <vPortFree>
 800d21e:	e00a      	b.n	800d236 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d222:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d226:	f023 0301 	bic.w	r3, r3, #1
 800d22a:	b2da      	uxtb	r2, r3
 800d22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d22e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d232:	e000      	b.n	800d236 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800d234:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d236:	4b08      	ldr	r3, [pc, #32]	; (800d258 <prvProcessReceivedCommands+0x1c0>)
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	1d39      	adds	r1, r7, #4
 800d23c:	2200      	movs	r2, #0
 800d23e:	4618      	mov	r0, r3
 800d240:	f7fe fc16 	bl	800ba70 <xQueueReceive>
 800d244:	4603      	mov	r3, r0
 800d246:	2b00      	cmp	r3, #0
 800d248:	f47f af2a 	bne.w	800d0a0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d24c:	bf00      	nop
 800d24e:	bf00      	nop
 800d250:	3730      	adds	r7, #48	; 0x30
 800d252:	46bd      	mov	sp, r7
 800d254:	bd80      	pop	{r7, pc}
 800d256:	bf00      	nop
 800d258:	240017a4 	.word	0x240017a4

0800d25c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b088      	sub	sp, #32
 800d260:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d262:	e048      	b.n	800d2f6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d264:	4b2d      	ldr	r3, [pc, #180]	; (800d31c <prvSwitchTimerLists+0xc0>)
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	68db      	ldr	r3, [r3, #12]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d26e:	4b2b      	ldr	r3, [pc, #172]	; (800d31c <prvSwitchTimerLists+0xc0>)
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	68db      	ldr	r3, [r3, #12]
 800d274:	68db      	ldr	r3, [r3, #12]
 800d276:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	3304      	adds	r3, #4
 800d27c:	4618      	mov	r0, r3
 800d27e:	f7fe f92f 	bl	800b4e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	6a1b      	ldr	r3, [r3, #32]
 800d286:	68f8      	ldr	r0, [r7, #12]
 800d288:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d290:	f003 0304 	and.w	r3, r3, #4
 800d294:	2b00      	cmp	r3, #0
 800d296:	d02e      	beq.n	800d2f6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	699b      	ldr	r3, [r3, #24]
 800d29c:	693a      	ldr	r2, [r7, #16]
 800d29e:	4413      	add	r3, r2
 800d2a0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d2a2:	68ba      	ldr	r2, [r7, #8]
 800d2a4:	693b      	ldr	r3, [r7, #16]
 800d2a6:	429a      	cmp	r2, r3
 800d2a8:	d90e      	bls.n	800d2c8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	68ba      	ldr	r2, [r7, #8]
 800d2ae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	68fa      	ldr	r2, [r7, #12]
 800d2b4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d2b6:	4b19      	ldr	r3, [pc, #100]	; (800d31c <prvSwitchTimerLists+0xc0>)
 800d2b8:	681a      	ldr	r2, [r3, #0]
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	3304      	adds	r3, #4
 800d2be:	4619      	mov	r1, r3
 800d2c0:	4610      	mov	r0, r2
 800d2c2:	f7fe f8d4 	bl	800b46e <vListInsert>
 800d2c6:	e016      	b.n	800d2f6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	9300      	str	r3, [sp, #0]
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	693a      	ldr	r2, [r7, #16]
 800d2d0:	2100      	movs	r1, #0
 800d2d2:	68f8      	ldr	r0, [r7, #12]
 800d2d4:	f7ff fd60 	bl	800cd98 <xTimerGenericCommand>
 800d2d8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d10a      	bne.n	800d2f6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2e4:	f383 8811 	msr	BASEPRI, r3
 800d2e8:	f3bf 8f6f 	isb	sy
 800d2ec:	f3bf 8f4f 	dsb	sy
 800d2f0:	603b      	str	r3, [r7, #0]
}
 800d2f2:	bf00      	nop
 800d2f4:	e7fe      	b.n	800d2f4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d2f6:	4b09      	ldr	r3, [pc, #36]	; (800d31c <prvSwitchTimerLists+0xc0>)
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d1b1      	bne.n	800d264 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d300:	4b06      	ldr	r3, [pc, #24]	; (800d31c <prvSwitchTimerLists+0xc0>)
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d306:	4b06      	ldr	r3, [pc, #24]	; (800d320 <prvSwitchTimerLists+0xc4>)
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	4a04      	ldr	r2, [pc, #16]	; (800d31c <prvSwitchTimerLists+0xc0>)
 800d30c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d30e:	4a04      	ldr	r2, [pc, #16]	; (800d320 <prvSwitchTimerLists+0xc4>)
 800d310:	697b      	ldr	r3, [r7, #20]
 800d312:	6013      	str	r3, [r2, #0]
}
 800d314:	bf00      	nop
 800d316:	3718      	adds	r7, #24
 800d318:	46bd      	mov	sp, r7
 800d31a:	bd80      	pop	{r7, pc}
 800d31c:	2400179c 	.word	0x2400179c
 800d320:	240017a0 	.word	0x240017a0

0800d324 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b082      	sub	sp, #8
 800d328:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d32a:	f000 f96b 	bl	800d604 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d32e:	4b15      	ldr	r3, [pc, #84]	; (800d384 <prvCheckForValidListAndQueue+0x60>)
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d120      	bne.n	800d378 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d336:	4814      	ldr	r0, [pc, #80]	; (800d388 <prvCheckForValidListAndQueue+0x64>)
 800d338:	f7fe f848 	bl	800b3cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d33c:	4813      	ldr	r0, [pc, #76]	; (800d38c <prvCheckForValidListAndQueue+0x68>)
 800d33e:	f7fe f845 	bl	800b3cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d342:	4b13      	ldr	r3, [pc, #76]	; (800d390 <prvCheckForValidListAndQueue+0x6c>)
 800d344:	4a10      	ldr	r2, [pc, #64]	; (800d388 <prvCheckForValidListAndQueue+0x64>)
 800d346:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d348:	4b12      	ldr	r3, [pc, #72]	; (800d394 <prvCheckForValidListAndQueue+0x70>)
 800d34a:	4a10      	ldr	r2, [pc, #64]	; (800d38c <prvCheckForValidListAndQueue+0x68>)
 800d34c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d34e:	2300      	movs	r3, #0
 800d350:	9300      	str	r3, [sp, #0]
 800d352:	4b11      	ldr	r3, [pc, #68]	; (800d398 <prvCheckForValidListAndQueue+0x74>)
 800d354:	4a11      	ldr	r2, [pc, #68]	; (800d39c <prvCheckForValidListAndQueue+0x78>)
 800d356:	2110      	movs	r1, #16
 800d358:	200a      	movs	r0, #10
 800d35a:	f7fe f953 	bl	800b604 <xQueueGenericCreateStatic>
 800d35e:	4603      	mov	r3, r0
 800d360:	4a08      	ldr	r2, [pc, #32]	; (800d384 <prvCheckForValidListAndQueue+0x60>)
 800d362:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d364:	4b07      	ldr	r3, [pc, #28]	; (800d384 <prvCheckForValidListAndQueue+0x60>)
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d005      	beq.n	800d378 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d36c:	4b05      	ldr	r3, [pc, #20]	; (800d384 <prvCheckForValidListAndQueue+0x60>)
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	490b      	ldr	r1, [pc, #44]	; (800d3a0 <prvCheckForValidListAndQueue+0x7c>)
 800d372:	4618      	mov	r0, r3
 800d374:	f7fe fd6c 	bl	800be50 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d378:	f000 f974 	bl	800d664 <vPortExitCritical>
}
 800d37c:	bf00      	nop
 800d37e:	46bd      	mov	sp, r7
 800d380:	bd80      	pop	{r7, pc}
 800d382:	bf00      	nop
 800d384:	240017a4 	.word	0x240017a4
 800d388:	24001774 	.word	0x24001774
 800d38c:	24001788 	.word	0x24001788
 800d390:	2400179c 	.word	0x2400179c
 800d394:	240017a0 	.word	0x240017a0
 800d398:	24001850 	.word	0x24001850
 800d39c:	240017b0 	.word	0x240017b0
 800d3a0:	08011664 	.word	0x08011664

0800d3a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d3a4:	b480      	push	{r7}
 800d3a6:	b085      	sub	sp, #20
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	60f8      	str	r0, [r7, #12]
 800d3ac:	60b9      	str	r1, [r7, #8]
 800d3ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	3b04      	subs	r3, #4
 800d3b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d3bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	3b04      	subs	r3, #4
 800d3c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d3c4:	68bb      	ldr	r3, [r7, #8]
 800d3c6:	f023 0201 	bic.w	r2, r3, #1
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	3b04      	subs	r3, #4
 800d3d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d3d4:	4a0c      	ldr	r2, [pc, #48]	; (800d408 <pxPortInitialiseStack+0x64>)
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	3b14      	subs	r3, #20
 800d3de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d3e0:	687a      	ldr	r2, [r7, #4]
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	3b04      	subs	r3, #4
 800d3ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	f06f 0202 	mvn.w	r2, #2
 800d3f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	3b20      	subs	r3, #32
 800d3f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
}
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	3714      	adds	r7, #20
 800d400:	46bd      	mov	sp, r7
 800d402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d406:	4770      	bx	lr
 800d408:	0800d40d 	.word	0x0800d40d

0800d40c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d40c:	b480      	push	{r7}
 800d40e:	b085      	sub	sp, #20
 800d410:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d412:	2300      	movs	r3, #0
 800d414:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d416:	4b12      	ldr	r3, [pc, #72]	; (800d460 <prvTaskExitError+0x54>)
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d41e:	d00a      	beq.n	800d436 <prvTaskExitError+0x2a>
	__asm volatile
 800d420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d424:	f383 8811 	msr	BASEPRI, r3
 800d428:	f3bf 8f6f 	isb	sy
 800d42c:	f3bf 8f4f 	dsb	sy
 800d430:	60fb      	str	r3, [r7, #12]
}
 800d432:	bf00      	nop
 800d434:	e7fe      	b.n	800d434 <prvTaskExitError+0x28>
	__asm volatile
 800d436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d43a:	f383 8811 	msr	BASEPRI, r3
 800d43e:	f3bf 8f6f 	isb	sy
 800d442:	f3bf 8f4f 	dsb	sy
 800d446:	60bb      	str	r3, [r7, #8]
}
 800d448:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d44a:	bf00      	nop
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d0fc      	beq.n	800d44c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d452:	bf00      	nop
 800d454:	bf00      	nop
 800d456:	3714      	adds	r7, #20
 800d458:	46bd      	mov	sp, r7
 800d45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45e:	4770      	bx	lr
 800d460:	24000024 	.word	0x24000024
	...

0800d470 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d470:	4b07      	ldr	r3, [pc, #28]	; (800d490 <pxCurrentTCBConst2>)
 800d472:	6819      	ldr	r1, [r3, #0]
 800d474:	6808      	ldr	r0, [r1, #0]
 800d476:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d47a:	f380 8809 	msr	PSP, r0
 800d47e:	f3bf 8f6f 	isb	sy
 800d482:	f04f 0000 	mov.w	r0, #0
 800d486:	f380 8811 	msr	BASEPRI, r0
 800d48a:	4770      	bx	lr
 800d48c:	f3af 8000 	nop.w

0800d490 <pxCurrentTCBConst2>:
 800d490:	24001274 	.word	0x24001274
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d494:	bf00      	nop
 800d496:	bf00      	nop

0800d498 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d498:	4808      	ldr	r0, [pc, #32]	; (800d4bc <prvPortStartFirstTask+0x24>)
 800d49a:	6800      	ldr	r0, [r0, #0]
 800d49c:	6800      	ldr	r0, [r0, #0]
 800d49e:	f380 8808 	msr	MSP, r0
 800d4a2:	f04f 0000 	mov.w	r0, #0
 800d4a6:	f380 8814 	msr	CONTROL, r0
 800d4aa:	b662      	cpsie	i
 800d4ac:	b661      	cpsie	f
 800d4ae:	f3bf 8f4f 	dsb	sy
 800d4b2:	f3bf 8f6f 	isb	sy
 800d4b6:	df00      	svc	0
 800d4b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d4ba:	bf00      	nop
 800d4bc:	e000ed08 	.word	0xe000ed08

0800d4c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b086      	sub	sp, #24
 800d4c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d4c6:	4b46      	ldr	r3, [pc, #280]	; (800d5e0 <xPortStartScheduler+0x120>)
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	4a46      	ldr	r2, [pc, #280]	; (800d5e4 <xPortStartScheduler+0x124>)
 800d4cc:	4293      	cmp	r3, r2
 800d4ce:	d10a      	bne.n	800d4e6 <xPortStartScheduler+0x26>
	__asm volatile
 800d4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4d4:	f383 8811 	msr	BASEPRI, r3
 800d4d8:	f3bf 8f6f 	isb	sy
 800d4dc:	f3bf 8f4f 	dsb	sy
 800d4e0:	613b      	str	r3, [r7, #16]
}
 800d4e2:	bf00      	nop
 800d4e4:	e7fe      	b.n	800d4e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d4e6:	4b3e      	ldr	r3, [pc, #248]	; (800d5e0 <xPortStartScheduler+0x120>)
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	4a3f      	ldr	r2, [pc, #252]	; (800d5e8 <xPortStartScheduler+0x128>)
 800d4ec:	4293      	cmp	r3, r2
 800d4ee:	d10a      	bne.n	800d506 <xPortStartScheduler+0x46>
	__asm volatile
 800d4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f4:	f383 8811 	msr	BASEPRI, r3
 800d4f8:	f3bf 8f6f 	isb	sy
 800d4fc:	f3bf 8f4f 	dsb	sy
 800d500:	60fb      	str	r3, [r7, #12]
}
 800d502:	bf00      	nop
 800d504:	e7fe      	b.n	800d504 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d506:	4b39      	ldr	r3, [pc, #228]	; (800d5ec <xPortStartScheduler+0x12c>)
 800d508:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d50a:	697b      	ldr	r3, [r7, #20]
 800d50c:	781b      	ldrb	r3, [r3, #0]
 800d50e:	b2db      	uxtb	r3, r3
 800d510:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d512:	697b      	ldr	r3, [r7, #20]
 800d514:	22ff      	movs	r2, #255	; 0xff
 800d516:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d518:	697b      	ldr	r3, [r7, #20]
 800d51a:	781b      	ldrb	r3, [r3, #0]
 800d51c:	b2db      	uxtb	r3, r3
 800d51e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d520:	78fb      	ldrb	r3, [r7, #3]
 800d522:	b2db      	uxtb	r3, r3
 800d524:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d528:	b2da      	uxtb	r2, r3
 800d52a:	4b31      	ldr	r3, [pc, #196]	; (800d5f0 <xPortStartScheduler+0x130>)
 800d52c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d52e:	4b31      	ldr	r3, [pc, #196]	; (800d5f4 <xPortStartScheduler+0x134>)
 800d530:	2207      	movs	r2, #7
 800d532:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d534:	e009      	b.n	800d54a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d536:	4b2f      	ldr	r3, [pc, #188]	; (800d5f4 <xPortStartScheduler+0x134>)
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	3b01      	subs	r3, #1
 800d53c:	4a2d      	ldr	r2, [pc, #180]	; (800d5f4 <xPortStartScheduler+0x134>)
 800d53e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d540:	78fb      	ldrb	r3, [r7, #3]
 800d542:	b2db      	uxtb	r3, r3
 800d544:	005b      	lsls	r3, r3, #1
 800d546:	b2db      	uxtb	r3, r3
 800d548:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d54a:	78fb      	ldrb	r3, [r7, #3]
 800d54c:	b2db      	uxtb	r3, r3
 800d54e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d552:	2b80      	cmp	r3, #128	; 0x80
 800d554:	d0ef      	beq.n	800d536 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d556:	4b27      	ldr	r3, [pc, #156]	; (800d5f4 <xPortStartScheduler+0x134>)
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	f1c3 0307 	rsb	r3, r3, #7
 800d55e:	2b04      	cmp	r3, #4
 800d560:	d00a      	beq.n	800d578 <xPortStartScheduler+0xb8>
	__asm volatile
 800d562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d566:	f383 8811 	msr	BASEPRI, r3
 800d56a:	f3bf 8f6f 	isb	sy
 800d56e:	f3bf 8f4f 	dsb	sy
 800d572:	60bb      	str	r3, [r7, #8]
}
 800d574:	bf00      	nop
 800d576:	e7fe      	b.n	800d576 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d578:	4b1e      	ldr	r3, [pc, #120]	; (800d5f4 <xPortStartScheduler+0x134>)
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	021b      	lsls	r3, r3, #8
 800d57e:	4a1d      	ldr	r2, [pc, #116]	; (800d5f4 <xPortStartScheduler+0x134>)
 800d580:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d582:	4b1c      	ldr	r3, [pc, #112]	; (800d5f4 <xPortStartScheduler+0x134>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d58a:	4a1a      	ldr	r2, [pc, #104]	; (800d5f4 <xPortStartScheduler+0x134>)
 800d58c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	b2da      	uxtb	r2, r3
 800d592:	697b      	ldr	r3, [r7, #20]
 800d594:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d596:	4b18      	ldr	r3, [pc, #96]	; (800d5f8 <xPortStartScheduler+0x138>)
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	4a17      	ldr	r2, [pc, #92]	; (800d5f8 <xPortStartScheduler+0x138>)
 800d59c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d5a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d5a2:	4b15      	ldr	r3, [pc, #84]	; (800d5f8 <xPortStartScheduler+0x138>)
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	4a14      	ldr	r2, [pc, #80]	; (800d5f8 <xPortStartScheduler+0x138>)
 800d5a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d5ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d5ae:	f000 f8dd 	bl	800d76c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d5b2:	4b12      	ldr	r3, [pc, #72]	; (800d5fc <xPortStartScheduler+0x13c>)
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d5b8:	f000 f8fc 	bl	800d7b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d5bc:	4b10      	ldr	r3, [pc, #64]	; (800d600 <xPortStartScheduler+0x140>)
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	4a0f      	ldr	r2, [pc, #60]	; (800d600 <xPortStartScheduler+0x140>)
 800d5c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d5c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d5c8:	f7ff ff66 	bl	800d498 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d5cc:	f7ff f850 	bl	800c670 <vTaskSwitchContext>
	prvTaskExitError();
 800d5d0:	f7ff ff1c 	bl	800d40c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d5d4:	2300      	movs	r3, #0
}
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	3718      	adds	r7, #24
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	bd80      	pop	{r7, pc}
 800d5de:	bf00      	nop
 800d5e0:	e000ed00 	.word	0xe000ed00
 800d5e4:	410fc271 	.word	0x410fc271
 800d5e8:	410fc270 	.word	0x410fc270
 800d5ec:	e000e400 	.word	0xe000e400
 800d5f0:	240018a0 	.word	0x240018a0
 800d5f4:	240018a4 	.word	0x240018a4
 800d5f8:	e000ed20 	.word	0xe000ed20
 800d5fc:	24000024 	.word	0x24000024
 800d600:	e000ef34 	.word	0xe000ef34

0800d604 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d604:	b480      	push	{r7}
 800d606:	b083      	sub	sp, #12
 800d608:	af00      	add	r7, sp, #0
	__asm volatile
 800d60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d60e:	f383 8811 	msr	BASEPRI, r3
 800d612:	f3bf 8f6f 	isb	sy
 800d616:	f3bf 8f4f 	dsb	sy
 800d61a:	607b      	str	r3, [r7, #4]
}
 800d61c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d61e:	4b0f      	ldr	r3, [pc, #60]	; (800d65c <vPortEnterCritical+0x58>)
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	3301      	adds	r3, #1
 800d624:	4a0d      	ldr	r2, [pc, #52]	; (800d65c <vPortEnterCritical+0x58>)
 800d626:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d628:	4b0c      	ldr	r3, [pc, #48]	; (800d65c <vPortEnterCritical+0x58>)
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	2b01      	cmp	r3, #1
 800d62e:	d10f      	bne.n	800d650 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d630:	4b0b      	ldr	r3, [pc, #44]	; (800d660 <vPortEnterCritical+0x5c>)
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	b2db      	uxtb	r3, r3
 800d636:	2b00      	cmp	r3, #0
 800d638:	d00a      	beq.n	800d650 <vPortEnterCritical+0x4c>
	__asm volatile
 800d63a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d63e:	f383 8811 	msr	BASEPRI, r3
 800d642:	f3bf 8f6f 	isb	sy
 800d646:	f3bf 8f4f 	dsb	sy
 800d64a:	603b      	str	r3, [r7, #0]
}
 800d64c:	bf00      	nop
 800d64e:	e7fe      	b.n	800d64e <vPortEnterCritical+0x4a>
	}
}
 800d650:	bf00      	nop
 800d652:	370c      	adds	r7, #12
 800d654:	46bd      	mov	sp, r7
 800d656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65a:	4770      	bx	lr
 800d65c:	24000024 	.word	0x24000024
 800d660:	e000ed04 	.word	0xe000ed04

0800d664 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d664:	b480      	push	{r7}
 800d666:	b083      	sub	sp, #12
 800d668:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d66a:	4b12      	ldr	r3, [pc, #72]	; (800d6b4 <vPortExitCritical+0x50>)
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d10a      	bne.n	800d688 <vPortExitCritical+0x24>
	__asm volatile
 800d672:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d676:	f383 8811 	msr	BASEPRI, r3
 800d67a:	f3bf 8f6f 	isb	sy
 800d67e:	f3bf 8f4f 	dsb	sy
 800d682:	607b      	str	r3, [r7, #4]
}
 800d684:	bf00      	nop
 800d686:	e7fe      	b.n	800d686 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d688:	4b0a      	ldr	r3, [pc, #40]	; (800d6b4 <vPortExitCritical+0x50>)
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	3b01      	subs	r3, #1
 800d68e:	4a09      	ldr	r2, [pc, #36]	; (800d6b4 <vPortExitCritical+0x50>)
 800d690:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d692:	4b08      	ldr	r3, [pc, #32]	; (800d6b4 <vPortExitCritical+0x50>)
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d105      	bne.n	800d6a6 <vPortExitCritical+0x42>
 800d69a:	2300      	movs	r3, #0
 800d69c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d69e:	683b      	ldr	r3, [r7, #0]
 800d6a0:	f383 8811 	msr	BASEPRI, r3
}
 800d6a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d6a6:	bf00      	nop
 800d6a8:	370c      	adds	r7, #12
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b0:	4770      	bx	lr
 800d6b2:	bf00      	nop
 800d6b4:	24000024 	.word	0x24000024
	...

0800d6c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d6c0:	f3ef 8009 	mrs	r0, PSP
 800d6c4:	f3bf 8f6f 	isb	sy
 800d6c8:	4b15      	ldr	r3, [pc, #84]	; (800d720 <pxCurrentTCBConst>)
 800d6ca:	681a      	ldr	r2, [r3, #0]
 800d6cc:	f01e 0f10 	tst.w	lr, #16
 800d6d0:	bf08      	it	eq
 800d6d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d6d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6da:	6010      	str	r0, [r2, #0]
 800d6dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d6e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d6e4:	f380 8811 	msr	BASEPRI, r0
 800d6e8:	f3bf 8f4f 	dsb	sy
 800d6ec:	f3bf 8f6f 	isb	sy
 800d6f0:	f7fe ffbe 	bl	800c670 <vTaskSwitchContext>
 800d6f4:	f04f 0000 	mov.w	r0, #0
 800d6f8:	f380 8811 	msr	BASEPRI, r0
 800d6fc:	bc09      	pop	{r0, r3}
 800d6fe:	6819      	ldr	r1, [r3, #0]
 800d700:	6808      	ldr	r0, [r1, #0]
 800d702:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d706:	f01e 0f10 	tst.w	lr, #16
 800d70a:	bf08      	it	eq
 800d70c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d710:	f380 8809 	msr	PSP, r0
 800d714:	f3bf 8f6f 	isb	sy
 800d718:	4770      	bx	lr
 800d71a:	bf00      	nop
 800d71c:	f3af 8000 	nop.w

0800d720 <pxCurrentTCBConst>:
 800d720:	24001274 	.word	0x24001274
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d724:	bf00      	nop
 800d726:	bf00      	nop

0800d728 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b082      	sub	sp, #8
 800d72c:	af00      	add	r7, sp, #0
	__asm volatile
 800d72e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d732:	f383 8811 	msr	BASEPRI, r3
 800d736:	f3bf 8f6f 	isb	sy
 800d73a:	f3bf 8f4f 	dsb	sy
 800d73e:	607b      	str	r3, [r7, #4]
}
 800d740:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d742:	f7fe fedb 	bl	800c4fc <xTaskIncrementTick>
 800d746:	4603      	mov	r3, r0
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d003      	beq.n	800d754 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d74c:	4b06      	ldr	r3, [pc, #24]	; (800d768 <xPortSysTickHandler+0x40>)
 800d74e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d752:	601a      	str	r2, [r3, #0]
 800d754:	2300      	movs	r3, #0
 800d756:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d758:	683b      	ldr	r3, [r7, #0]
 800d75a:	f383 8811 	msr	BASEPRI, r3
}
 800d75e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d760:	bf00      	nop
 800d762:	3708      	adds	r7, #8
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}
 800d768:	e000ed04 	.word	0xe000ed04

0800d76c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d76c:	b480      	push	{r7}
 800d76e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d770:	4b0b      	ldr	r3, [pc, #44]	; (800d7a0 <vPortSetupTimerInterrupt+0x34>)
 800d772:	2200      	movs	r2, #0
 800d774:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d776:	4b0b      	ldr	r3, [pc, #44]	; (800d7a4 <vPortSetupTimerInterrupt+0x38>)
 800d778:	2200      	movs	r2, #0
 800d77a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d77c:	4b0a      	ldr	r3, [pc, #40]	; (800d7a8 <vPortSetupTimerInterrupt+0x3c>)
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	4a0a      	ldr	r2, [pc, #40]	; (800d7ac <vPortSetupTimerInterrupt+0x40>)
 800d782:	fba2 2303 	umull	r2, r3, r2, r3
 800d786:	099b      	lsrs	r3, r3, #6
 800d788:	4a09      	ldr	r2, [pc, #36]	; (800d7b0 <vPortSetupTimerInterrupt+0x44>)
 800d78a:	3b01      	subs	r3, #1
 800d78c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d78e:	4b04      	ldr	r3, [pc, #16]	; (800d7a0 <vPortSetupTimerInterrupt+0x34>)
 800d790:	2207      	movs	r2, #7
 800d792:	601a      	str	r2, [r3, #0]
}
 800d794:	bf00      	nop
 800d796:	46bd      	mov	sp, r7
 800d798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79c:	4770      	bx	lr
 800d79e:	bf00      	nop
 800d7a0:	e000e010 	.word	0xe000e010
 800d7a4:	e000e018 	.word	0xe000e018
 800d7a8:	24000000 	.word	0x24000000
 800d7ac:	10624dd3 	.word	0x10624dd3
 800d7b0:	e000e014 	.word	0xe000e014

0800d7b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d7b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d7c4 <vPortEnableVFP+0x10>
 800d7b8:	6801      	ldr	r1, [r0, #0]
 800d7ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d7be:	6001      	str	r1, [r0, #0]
 800d7c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d7c2:	bf00      	nop
 800d7c4:	e000ed88 	.word	0xe000ed88

0800d7c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d7c8:	b480      	push	{r7}
 800d7ca:	b085      	sub	sp, #20
 800d7cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d7ce:	f3ef 8305 	mrs	r3, IPSR
 800d7d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	2b0f      	cmp	r3, #15
 800d7d8:	d914      	bls.n	800d804 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d7da:	4a17      	ldr	r2, [pc, #92]	; (800d838 <vPortValidateInterruptPriority+0x70>)
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	4413      	add	r3, r2
 800d7e0:	781b      	ldrb	r3, [r3, #0]
 800d7e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d7e4:	4b15      	ldr	r3, [pc, #84]	; (800d83c <vPortValidateInterruptPriority+0x74>)
 800d7e6:	781b      	ldrb	r3, [r3, #0]
 800d7e8:	7afa      	ldrb	r2, [r7, #11]
 800d7ea:	429a      	cmp	r2, r3
 800d7ec:	d20a      	bcs.n	800d804 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d7ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7f2:	f383 8811 	msr	BASEPRI, r3
 800d7f6:	f3bf 8f6f 	isb	sy
 800d7fa:	f3bf 8f4f 	dsb	sy
 800d7fe:	607b      	str	r3, [r7, #4]
}
 800d800:	bf00      	nop
 800d802:	e7fe      	b.n	800d802 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d804:	4b0e      	ldr	r3, [pc, #56]	; (800d840 <vPortValidateInterruptPriority+0x78>)
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d80c:	4b0d      	ldr	r3, [pc, #52]	; (800d844 <vPortValidateInterruptPriority+0x7c>)
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	429a      	cmp	r2, r3
 800d812:	d90a      	bls.n	800d82a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d814:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d818:	f383 8811 	msr	BASEPRI, r3
 800d81c:	f3bf 8f6f 	isb	sy
 800d820:	f3bf 8f4f 	dsb	sy
 800d824:	603b      	str	r3, [r7, #0]
}
 800d826:	bf00      	nop
 800d828:	e7fe      	b.n	800d828 <vPortValidateInterruptPriority+0x60>
	}
 800d82a:	bf00      	nop
 800d82c:	3714      	adds	r7, #20
 800d82e:	46bd      	mov	sp, r7
 800d830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d834:	4770      	bx	lr
 800d836:	bf00      	nop
 800d838:	e000e3f0 	.word	0xe000e3f0
 800d83c:	240018a0 	.word	0x240018a0
 800d840:	e000ed0c 	.word	0xe000ed0c
 800d844:	240018a4 	.word	0x240018a4

0800d848 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b08a      	sub	sp, #40	; 0x28
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d850:	2300      	movs	r3, #0
 800d852:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d854:	f7fe fd96 	bl	800c384 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d858:	4b5b      	ldr	r3, [pc, #364]	; (800d9c8 <pvPortMalloc+0x180>)
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d101      	bne.n	800d864 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d860:	f000 f920 	bl	800daa4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d864:	4b59      	ldr	r3, [pc, #356]	; (800d9cc <pvPortMalloc+0x184>)
 800d866:	681a      	ldr	r2, [r3, #0]
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	4013      	ands	r3, r2
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	f040 8093 	bne.w	800d998 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d01d      	beq.n	800d8b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d878:	2208      	movs	r2, #8
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	4413      	add	r3, r2
 800d87e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	f003 0307 	and.w	r3, r3, #7
 800d886:	2b00      	cmp	r3, #0
 800d888:	d014      	beq.n	800d8b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	f023 0307 	bic.w	r3, r3, #7
 800d890:	3308      	adds	r3, #8
 800d892:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	f003 0307 	and.w	r3, r3, #7
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d00a      	beq.n	800d8b4 <pvPortMalloc+0x6c>
	__asm volatile
 800d89e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8a2:	f383 8811 	msr	BASEPRI, r3
 800d8a6:	f3bf 8f6f 	isb	sy
 800d8aa:	f3bf 8f4f 	dsb	sy
 800d8ae:	617b      	str	r3, [r7, #20]
}
 800d8b0:	bf00      	nop
 800d8b2:	e7fe      	b.n	800d8b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d06e      	beq.n	800d998 <pvPortMalloc+0x150>
 800d8ba:	4b45      	ldr	r3, [pc, #276]	; (800d9d0 <pvPortMalloc+0x188>)
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	687a      	ldr	r2, [r7, #4]
 800d8c0:	429a      	cmp	r2, r3
 800d8c2:	d869      	bhi.n	800d998 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d8c4:	4b43      	ldr	r3, [pc, #268]	; (800d9d4 <pvPortMalloc+0x18c>)
 800d8c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d8c8:	4b42      	ldr	r3, [pc, #264]	; (800d9d4 <pvPortMalloc+0x18c>)
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d8ce:	e004      	b.n	800d8da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8dc:	685b      	ldr	r3, [r3, #4]
 800d8de:	687a      	ldr	r2, [r7, #4]
 800d8e0:	429a      	cmp	r2, r3
 800d8e2:	d903      	bls.n	800d8ec <pvPortMalloc+0xa4>
 800d8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d1f1      	bne.n	800d8d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d8ec:	4b36      	ldr	r3, [pc, #216]	; (800d9c8 <pvPortMalloc+0x180>)
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8f2:	429a      	cmp	r2, r3
 800d8f4:	d050      	beq.n	800d998 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d8f6:	6a3b      	ldr	r3, [r7, #32]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	2208      	movs	r2, #8
 800d8fc:	4413      	add	r3, r2
 800d8fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d902:	681a      	ldr	r2, [r3, #0]
 800d904:	6a3b      	ldr	r3, [r7, #32]
 800d906:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d90a:	685a      	ldr	r2, [r3, #4]
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	1ad2      	subs	r2, r2, r3
 800d910:	2308      	movs	r3, #8
 800d912:	005b      	lsls	r3, r3, #1
 800d914:	429a      	cmp	r2, r3
 800d916:	d91f      	bls.n	800d958 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	4413      	add	r3, r2
 800d91e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d920:	69bb      	ldr	r3, [r7, #24]
 800d922:	f003 0307 	and.w	r3, r3, #7
 800d926:	2b00      	cmp	r3, #0
 800d928:	d00a      	beq.n	800d940 <pvPortMalloc+0xf8>
	__asm volatile
 800d92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d92e:	f383 8811 	msr	BASEPRI, r3
 800d932:	f3bf 8f6f 	isb	sy
 800d936:	f3bf 8f4f 	dsb	sy
 800d93a:	613b      	str	r3, [r7, #16]
}
 800d93c:	bf00      	nop
 800d93e:	e7fe      	b.n	800d93e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d942:	685a      	ldr	r2, [r3, #4]
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	1ad2      	subs	r2, r2, r3
 800d948:	69bb      	ldr	r3, [r7, #24]
 800d94a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d94e:	687a      	ldr	r2, [r7, #4]
 800d950:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d952:	69b8      	ldr	r0, [r7, #24]
 800d954:	f000 f908 	bl	800db68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d958:	4b1d      	ldr	r3, [pc, #116]	; (800d9d0 <pvPortMalloc+0x188>)
 800d95a:	681a      	ldr	r2, [r3, #0]
 800d95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d95e:	685b      	ldr	r3, [r3, #4]
 800d960:	1ad3      	subs	r3, r2, r3
 800d962:	4a1b      	ldr	r2, [pc, #108]	; (800d9d0 <pvPortMalloc+0x188>)
 800d964:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d966:	4b1a      	ldr	r3, [pc, #104]	; (800d9d0 <pvPortMalloc+0x188>)
 800d968:	681a      	ldr	r2, [r3, #0]
 800d96a:	4b1b      	ldr	r3, [pc, #108]	; (800d9d8 <pvPortMalloc+0x190>)
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	429a      	cmp	r2, r3
 800d970:	d203      	bcs.n	800d97a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d972:	4b17      	ldr	r3, [pc, #92]	; (800d9d0 <pvPortMalloc+0x188>)
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	4a18      	ldr	r2, [pc, #96]	; (800d9d8 <pvPortMalloc+0x190>)
 800d978:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d97c:	685a      	ldr	r2, [r3, #4]
 800d97e:	4b13      	ldr	r3, [pc, #76]	; (800d9cc <pvPortMalloc+0x184>)
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	431a      	orrs	r2, r3
 800d984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d986:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d98a:	2200      	movs	r2, #0
 800d98c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d98e:	4b13      	ldr	r3, [pc, #76]	; (800d9dc <pvPortMalloc+0x194>)
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	3301      	adds	r3, #1
 800d994:	4a11      	ldr	r2, [pc, #68]	; (800d9dc <pvPortMalloc+0x194>)
 800d996:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d998:	f7fe fd02 	bl	800c3a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d99c:	69fb      	ldr	r3, [r7, #28]
 800d99e:	f003 0307 	and.w	r3, r3, #7
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d00a      	beq.n	800d9bc <pvPortMalloc+0x174>
	__asm volatile
 800d9a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9aa:	f383 8811 	msr	BASEPRI, r3
 800d9ae:	f3bf 8f6f 	isb	sy
 800d9b2:	f3bf 8f4f 	dsb	sy
 800d9b6:	60fb      	str	r3, [r7, #12]
}
 800d9b8:	bf00      	nop
 800d9ba:	e7fe      	b.n	800d9ba <pvPortMalloc+0x172>
	return pvReturn;
 800d9bc:	69fb      	ldr	r3, [r7, #28]
}
 800d9be:	4618      	mov	r0, r3
 800d9c0:	3728      	adds	r7, #40	; 0x28
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	bd80      	pop	{r7, pc}
 800d9c6:	bf00      	nop
 800d9c8:	240054b0 	.word	0x240054b0
 800d9cc:	240054c4 	.word	0x240054c4
 800d9d0:	240054b4 	.word	0x240054b4
 800d9d4:	240054a8 	.word	0x240054a8
 800d9d8:	240054b8 	.word	0x240054b8
 800d9dc:	240054bc 	.word	0x240054bc

0800d9e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b086      	sub	sp, #24
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d04d      	beq.n	800da8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d9f2:	2308      	movs	r3, #8
 800d9f4:	425b      	negs	r3, r3
 800d9f6:	697a      	ldr	r2, [r7, #20]
 800d9f8:	4413      	add	r3, r2
 800d9fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d9fc:	697b      	ldr	r3, [r7, #20]
 800d9fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800da00:	693b      	ldr	r3, [r7, #16]
 800da02:	685a      	ldr	r2, [r3, #4]
 800da04:	4b24      	ldr	r3, [pc, #144]	; (800da98 <vPortFree+0xb8>)
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	4013      	ands	r3, r2
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d10a      	bne.n	800da24 <vPortFree+0x44>
	__asm volatile
 800da0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da12:	f383 8811 	msr	BASEPRI, r3
 800da16:	f3bf 8f6f 	isb	sy
 800da1a:	f3bf 8f4f 	dsb	sy
 800da1e:	60fb      	str	r3, [r7, #12]
}
 800da20:	bf00      	nop
 800da22:	e7fe      	b.n	800da22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800da24:	693b      	ldr	r3, [r7, #16]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d00a      	beq.n	800da42 <vPortFree+0x62>
	__asm volatile
 800da2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da30:	f383 8811 	msr	BASEPRI, r3
 800da34:	f3bf 8f6f 	isb	sy
 800da38:	f3bf 8f4f 	dsb	sy
 800da3c:	60bb      	str	r3, [r7, #8]
}
 800da3e:	bf00      	nop
 800da40:	e7fe      	b.n	800da40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800da42:	693b      	ldr	r3, [r7, #16]
 800da44:	685a      	ldr	r2, [r3, #4]
 800da46:	4b14      	ldr	r3, [pc, #80]	; (800da98 <vPortFree+0xb8>)
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	4013      	ands	r3, r2
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d01e      	beq.n	800da8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800da50:	693b      	ldr	r3, [r7, #16]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d11a      	bne.n	800da8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800da58:	693b      	ldr	r3, [r7, #16]
 800da5a:	685a      	ldr	r2, [r3, #4]
 800da5c:	4b0e      	ldr	r3, [pc, #56]	; (800da98 <vPortFree+0xb8>)
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	43db      	mvns	r3, r3
 800da62:	401a      	ands	r2, r3
 800da64:	693b      	ldr	r3, [r7, #16]
 800da66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800da68:	f7fe fc8c 	bl	800c384 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800da6c:	693b      	ldr	r3, [r7, #16]
 800da6e:	685a      	ldr	r2, [r3, #4]
 800da70:	4b0a      	ldr	r3, [pc, #40]	; (800da9c <vPortFree+0xbc>)
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	4413      	add	r3, r2
 800da76:	4a09      	ldr	r2, [pc, #36]	; (800da9c <vPortFree+0xbc>)
 800da78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800da7a:	6938      	ldr	r0, [r7, #16]
 800da7c:	f000 f874 	bl	800db68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800da80:	4b07      	ldr	r3, [pc, #28]	; (800daa0 <vPortFree+0xc0>)
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	3301      	adds	r3, #1
 800da86:	4a06      	ldr	r2, [pc, #24]	; (800daa0 <vPortFree+0xc0>)
 800da88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800da8a:	f7fe fc89 	bl	800c3a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800da8e:	bf00      	nop
 800da90:	3718      	adds	r7, #24
 800da92:	46bd      	mov	sp, r7
 800da94:	bd80      	pop	{r7, pc}
 800da96:	bf00      	nop
 800da98:	240054c4 	.word	0x240054c4
 800da9c:	240054b4 	.word	0x240054b4
 800daa0:	240054c0 	.word	0x240054c0

0800daa4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800daa4:	b480      	push	{r7}
 800daa6:	b085      	sub	sp, #20
 800daa8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800daaa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800daae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800dab0:	4b27      	ldr	r3, [pc, #156]	; (800db50 <prvHeapInit+0xac>)
 800dab2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	f003 0307 	and.w	r3, r3, #7
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d00c      	beq.n	800dad8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	3307      	adds	r3, #7
 800dac2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	f023 0307 	bic.w	r3, r3, #7
 800daca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dacc:	68ba      	ldr	r2, [r7, #8]
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	1ad3      	subs	r3, r2, r3
 800dad2:	4a1f      	ldr	r2, [pc, #124]	; (800db50 <prvHeapInit+0xac>)
 800dad4:	4413      	add	r3, r2
 800dad6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dadc:	4a1d      	ldr	r2, [pc, #116]	; (800db54 <prvHeapInit+0xb0>)
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dae2:	4b1c      	ldr	r3, [pc, #112]	; (800db54 <prvHeapInit+0xb0>)
 800dae4:	2200      	movs	r2, #0
 800dae6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	68ba      	ldr	r2, [r7, #8]
 800daec:	4413      	add	r3, r2
 800daee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800daf0:	2208      	movs	r2, #8
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	1a9b      	subs	r3, r3, r2
 800daf6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	f023 0307 	bic.w	r3, r3, #7
 800dafe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	4a15      	ldr	r2, [pc, #84]	; (800db58 <prvHeapInit+0xb4>)
 800db04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800db06:	4b14      	ldr	r3, [pc, #80]	; (800db58 <prvHeapInit+0xb4>)
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	2200      	movs	r2, #0
 800db0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800db0e:	4b12      	ldr	r3, [pc, #72]	; (800db58 <prvHeapInit+0xb4>)
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	2200      	movs	r2, #0
 800db14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800db1a:	683b      	ldr	r3, [r7, #0]
 800db1c:	68fa      	ldr	r2, [r7, #12]
 800db1e:	1ad2      	subs	r2, r2, r3
 800db20:	683b      	ldr	r3, [r7, #0]
 800db22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800db24:	4b0c      	ldr	r3, [pc, #48]	; (800db58 <prvHeapInit+0xb4>)
 800db26:	681a      	ldr	r2, [r3, #0]
 800db28:	683b      	ldr	r3, [r7, #0]
 800db2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800db2c:	683b      	ldr	r3, [r7, #0]
 800db2e:	685b      	ldr	r3, [r3, #4]
 800db30:	4a0a      	ldr	r2, [pc, #40]	; (800db5c <prvHeapInit+0xb8>)
 800db32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800db34:	683b      	ldr	r3, [r7, #0]
 800db36:	685b      	ldr	r3, [r3, #4]
 800db38:	4a09      	ldr	r2, [pc, #36]	; (800db60 <prvHeapInit+0xbc>)
 800db3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800db3c:	4b09      	ldr	r3, [pc, #36]	; (800db64 <prvHeapInit+0xc0>)
 800db3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800db42:	601a      	str	r2, [r3, #0]
}
 800db44:	bf00      	nop
 800db46:	3714      	adds	r7, #20
 800db48:	46bd      	mov	sp, r7
 800db4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4e:	4770      	bx	lr
 800db50:	240018a8 	.word	0x240018a8
 800db54:	240054a8 	.word	0x240054a8
 800db58:	240054b0 	.word	0x240054b0
 800db5c:	240054b8 	.word	0x240054b8
 800db60:	240054b4 	.word	0x240054b4
 800db64:	240054c4 	.word	0x240054c4

0800db68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800db68:	b480      	push	{r7}
 800db6a:	b085      	sub	sp, #20
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800db70:	4b28      	ldr	r3, [pc, #160]	; (800dc14 <prvInsertBlockIntoFreeList+0xac>)
 800db72:	60fb      	str	r3, [r7, #12]
 800db74:	e002      	b.n	800db7c <prvInsertBlockIntoFreeList+0x14>
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	60fb      	str	r3, [r7, #12]
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	687a      	ldr	r2, [r7, #4]
 800db82:	429a      	cmp	r2, r3
 800db84:	d8f7      	bhi.n	800db76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	685b      	ldr	r3, [r3, #4]
 800db8e:	68ba      	ldr	r2, [r7, #8]
 800db90:	4413      	add	r3, r2
 800db92:	687a      	ldr	r2, [r7, #4]
 800db94:	429a      	cmp	r2, r3
 800db96:	d108      	bne.n	800dbaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	685a      	ldr	r2, [r3, #4]
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	685b      	ldr	r3, [r3, #4]
 800dba0:	441a      	add	r2, r3
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	685b      	ldr	r3, [r3, #4]
 800dbb2:	68ba      	ldr	r2, [r7, #8]
 800dbb4:	441a      	add	r2, r3
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	429a      	cmp	r2, r3
 800dbbc:	d118      	bne.n	800dbf0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	681a      	ldr	r2, [r3, #0]
 800dbc2:	4b15      	ldr	r3, [pc, #84]	; (800dc18 <prvInsertBlockIntoFreeList+0xb0>)
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	429a      	cmp	r2, r3
 800dbc8:	d00d      	beq.n	800dbe6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	685a      	ldr	r2, [r3, #4]
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	685b      	ldr	r3, [r3, #4]
 800dbd4:	441a      	add	r2, r3
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	681a      	ldr	r2, [r3, #0]
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	601a      	str	r2, [r3, #0]
 800dbe4:	e008      	b.n	800dbf8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dbe6:	4b0c      	ldr	r3, [pc, #48]	; (800dc18 <prvInsertBlockIntoFreeList+0xb0>)
 800dbe8:	681a      	ldr	r2, [r3, #0]
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	601a      	str	r2, [r3, #0]
 800dbee:	e003      	b.n	800dbf8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	681a      	ldr	r2, [r3, #0]
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dbf8:	68fa      	ldr	r2, [r7, #12]
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	429a      	cmp	r2, r3
 800dbfe:	d002      	beq.n	800dc06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	687a      	ldr	r2, [r7, #4]
 800dc04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dc06:	bf00      	nop
 800dc08:	3714      	adds	r7, #20
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc10:	4770      	bx	lr
 800dc12:	bf00      	nop
 800dc14:	240054a8 	.word	0x240054a8
 800dc18:	240054b0 	.word	0x240054b0

0800dc1c <Bmx160_init>:
const float gyroRange = Bmx160_GYRO_SENSITIVITY_250DPS;

sBmx160Dev_t Obmx160;

void Bmx160_init()
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	af00      	add	r7, sp, #0
    Obmx160.delayMs = HAL_Delay;
 800dc20:	4b04      	ldr	r3, [pc, #16]	; (800dc34 <Bmx160_init+0x18>)
 800dc22:	4a05      	ldr	r2, [pc, #20]	; (800dc38 <Bmx160_init+0x1c>)
 800dc24:	621a      	str	r2, [r3, #32]
    Bmx160_begin();
 800dc26:	f000 f809 	bl	800dc3c <Bmx160_begin>
    DelayUs(100);
 800dc2a:	2064      	movs	r0, #100	; 0x64
 800dc2c:	f000 fa2a 	bl	800e084 <DelayUs>
}
 800dc30:	bf00      	nop
 800dc32:	bd80      	pop	{r7, pc}
 800dc34:	240054c8 	.word	0x240054c8
 800dc38:	080015d9 	.word	0x080015d9

0800dc3c <Bmx160_begin>:

uint8_t Bmx160_begin()
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	af00      	add	r7, sp, #0
    if (Bmx160_scan() == TRUE){
 800dc40:	f000 fa17 	bl	800e072 <Bmx160_scan>
 800dc44:	4603      	mov	r3, r0
 800dc46:	2b01      	cmp	r3, #1
 800dc48:	d11d      	bne.n	800dc86 <Bmx160_begin+0x4a>
        Bmx160_softReset_();
 800dc4a:	f000 f821 	bl	800dc90 <Bmx160_softReset_>
        Bmx160_writeBmxReg(Bmx160_COMMAND_REG_ADDR, 0x11);
 800dc4e:	2111      	movs	r1, #17
 800dc50:	207e      	movs	r0, #126	; 0x7e
 800dc52:	f000 f9d5 	bl	800e000 <Bmx160_writeBmxReg>
        Obmx160.delayMs(50);
 800dc56:	4b0d      	ldr	r3, [pc, #52]	; (800dc8c <Bmx160_begin+0x50>)
 800dc58:	6a1b      	ldr	r3, [r3, #32]
 800dc5a:	2032      	movs	r0, #50	; 0x32
 800dc5c:	4798      	blx	r3
        /* Set gyro to normal mode */
        Bmx160_writeBmxReg(Bmx160_COMMAND_REG_ADDR, 0x15);
 800dc5e:	2115      	movs	r1, #21
 800dc60:	207e      	movs	r0, #126	; 0x7e
 800dc62:	f000 f9cd 	bl	800e000 <Bmx160_writeBmxReg>
        Obmx160.delayMs(100);
 800dc66:	4b09      	ldr	r3, [pc, #36]	; (800dc8c <Bmx160_begin+0x50>)
 800dc68:	6a1b      	ldr	r3, [r3, #32]
 800dc6a:	2064      	movs	r0, #100	; 0x64
 800dc6c:	4798      	blx	r3
        /* Set mag to normal mode */
        Bmx160_writeBmxReg(Bmx160_COMMAND_REG_ADDR, 0x19);
 800dc6e:	2119      	movs	r1, #25
 800dc70:	207e      	movs	r0, #126	; 0x7e
 800dc72:	f000 f9c5 	bl	800e000 <Bmx160_writeBmxReg>
        Obmx160.delayMs(10);
 800dc76:	4b05      	ldr	r3, [pc, #20]	; (800dc8c <Bmx160_begin+0x50>)
 800dc78:	6a1b      	ldr	r3, [r3, #32]
 800dc7a:	200a      	movs	r0, #10
 800dc7c:	4798      	blx	r3
        Bmx160_setMagnConf();
 800dc7e:	f000 f873 	bl	800dd68 <Bmx160_setMagnConf>
        return TRUE;
 800dc82:	2301      	movs	r3, #1
 800dc84:	e000      	b.n	800dc88 <Bmx160_begin+0x4c>
    }
    else
        return FALSE;
 800dc86:	2300      	movs	r3, #0
}
 800dc88:	4618      	mov	r0, r3
 800dc8a:	bd80      	pop	{r7, pc}
 800dc8c:	240054c8 	.word	0x240054c8

0800dc90 <Bmx160_softReset_>:
    Bmx160_writeBmxReg(Bmx160_COMMAND_REG_ADDR, 0x19);
    Obmx160.delayMs(100);
}

uint8_t Bmx160_softReset_()
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b082      	sub	sp, #8
 800dc94:	af00      	add	r7, sp, #0
  int8_t rslt=Bmx160_OK;
 800dc96:	2300      	movs	r3, #0
 800dc98:	71fb      	strb	r3, [r7, #7]
  rslt = Bmx160_softReset(&Obmx160);
 800dc9a:	4808      	ldr	r0, [pc, #32]	; (800dcbc <Bmx160_softReset_+0x2c>)
 800dc9c:	f000 f810 	bl	800dcc0 <Bmx160_softReset>
 800dca0:	4603      	mov	r3, r0
 800dca2:	71fb      	strb	r3, [r7, #7]
  if (rslt == 0)
 800dca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d101      	bne.n	800dcb0 <Bmx160_softReset_+0x20>
    return TRUE;
 800dcac:	2301      	movs	r3, #1
 800dcae:	e000      	b.n	800dcb2 <Bmx160_softReset_+0x22>
  else
    return FALSE;
 800dcb0:	2300      	movs	r3, #0
}
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	3708      	adds	r7, #8
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	bd80      	pop	{r7, pc}
 800dcba:	bf00      	nop
 800dcbc:	240054c8 	.word	0x240054c8

0800dcc0 <Bmx160_softReset>:

int8_t Bmx160_softReset(sBmx160Dev_t *dev)
{
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	b084      	sub	sp, #16
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]
  int8_t rslt=Bmx160_OK;
 800dcc8:	2300      	movs	r3, #0
 800dcca:	73fb      	strb	r3, [r7, #15]
  uint8_t data = Bmx160_SOFT_RESET_CMD;
 800dccc:	23b6      	movs	r3, #182	; 0xb6
 800dcce:	73bb      	strb	r3, [r7, #14]
  if (dev==NULL){
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d101      	bne.n	800dcda <Bmx160_softReset+0x1a>
    rslt = Bmx160_E_NULL_PTR;
 800dcd6:	23ff      	movs	r3, #255	; 0xff
 800dcd8:	73fb      	strb	r3, [r7, #15]
  }
  Bmx160_writeBmxReg(Bmx160_COMMAND_REG_ADDR, data);
 800dcda:	7bbb      	ldrb	r3, [r7, #14]
 800dcdc:	4619      	mov	r1, r3
 800dcde:	207e      	movs	r0, #126	; 0x7e
 800dce0:	f000 f98e 	bl	800e000 <Bmx160_writeBmxReg>
  Obmx160.delayMs(Bmx160_SOFT_RESET_DELAY_MS);
 800dce4:	4b08      	ldr	r3, [pc, #32]	; (800dd08 <Bmx160_softReset+0x48>)
 800dce6:	6a1b      	ldr	r3, [r3, #32]
 800dce8:	200f      	movs	r0, #15
 800dcea:	4798      	blx	r3
  if (rslt == Bmx160_OK){
 800dcec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d102      	bne.n	800dcfa <Bmx160_softReset+0x3a>
    Bmx160_defaultParamSettg(dev);
 800dcf4:	6878      	ldr	r0, [r7, #4]
 800dcf6:	f000 f809 	bl	800dd0c <Bmx160_defaultParamSettg>
  }
  return rslt;
 800dcfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dcfe:	4618      	mov	r0, r3
 800dd00:	3710      	adds	r7, #16
 800dd02:	46bd      	mov	sp, r7
 800dd04:	bd80      	pop	{r7, pc}
 800dd06:	bf00      	nop
 800dd08:	240054c8 	.word	0x240054c8

0800dd0c <Bmx160_defaultParamSettg>:

void Bmx160_defaultParamSettg(sBmx160Dev_t *dev)
{
 800dd0c:	b480      	push	{r7}
 800dd0e:	b083      	sub	sp, #12
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
  // Initializing accel and gyro params with
  dev->gyroCfg.bw = Bmx160_GYRO_BW_NORMAL_MODE;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	2202      	movs	r2, #2
 800dd18:	75da      	strb	r2, [r3, #23]
  dev->gyroCfg.odr = Bmx160_GYRO_ODR_200HZ;
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	2209      	movs	r2, #9
 800dd1e:	755a      	strb	r2, [r3, #21]
  dev->gyroCfg.power = Bmx160_GYRO_SUSPEND_MODE;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	2214      	movs	r2, #20
 800dd24:	751a      	strb	r2, [r3, #20]
  dev->gyroCfg.range = Bmx160_GYRO_RANGE_250_DPS;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	2203      	movs	r2, #3
 800dd2a:	759a      	strb	r2, [r3, #22]
  dev->accelCfg.bw = Bmx160_ACCEL_BW_NORMAL_AVG4;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	2202      	movs	r2, #2
 800dd30:	73da      	strb	r2, [r3, #15]
  dev->accelCfg.odr = Bmx160_ACCEL_ODR_200HZ;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	2209      	movs	r2, #9
 800dd36:	735a      	strb	r2, [r3, #13]
  dev->accelCfg.power = Bmx160_ACCEL_SUSPEND_MODE;
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	2210      	movs	r2, #16
 800dd3c:	731a      	strb	r2, [r3, #12]
  dev->accelCfg.range = Bmx160_ACCEL_RANGE_2G;
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	2203      	movs	r2, #3
 800dd42:	739a      	strb	r2, [r3, #14]


  dev->prevMagnCfg = dev->magnCfg;
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	687a      	ldr	r2, [r7, #4]
 800dd48:	6852      	ldr	r2, [r2, #4]
 800dd4a:	609a      	str	r2, [r3, #8]
  dev->prevGyroCfg = dev->gyroCfg;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	687a      	ldr	r2, [r7, #4]
 800dd50:	6952      	ldr	r2, [r2, #20]
 800dd52:	619a      	str	r2, [r3, #24]
  dev->prevAccelCfg = dev->accelCfg;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	687a      	ldr	r2, [r7, #4]
 800dd58:	68d2      	ldr	r2, [r2, #12]
 800dd5a:	611a      	str	r2, [r3, #16]
}
 800dd5c:	bf00      	nop
 800dd5e:	370c      	adds	r7, #12
 800dd60:	46bd      	mov	sp, r7
 800dd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd66:	4770      	bx	lr

0800dd68 <Bmx160_setMagnConf>:

void Bmx160_setMagnConf()
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	af00      	add	r7, sp, #0
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_0_ADDR, 0x80);
 800dd6c:	2180      	movs	r1, #128	; 0x80
 800dd6e:	204c      	movs	r0, #76	; 0x4c
 800dd70:	f000 f946 	bl	800e000 <Bmx160_writeBmxReg>
    Obmx160.delayMs(50);
 800dd74:	4b1a      	ldr	r3, [pc, #104]	; (800dde0 <Bmx160_setMagnConf+0x78>)
 800dd76:	6a1b      	ldr	r3, [r3, #32]
 800dd78:	2032      	movs	r0, #50	; 0x32
 800dd7a:	4798      	blx	r3
    // Sleep mode
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_3_ADDR, 0x01);
 800dd7c:	2101      	movs	r1, #1
 800dd7e:	204f      	movs	r0, #79	; 0x4f
 800dd80:	f000 f93e 	bl	800e000 <Bmx160_writeBmxReg>
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_2_ADDR, 0x4B);
 800dd84:	214b      	movs	r1, #75	; 0x4b
 800dd86:	204e      	movs	r0, #78	; 0x4e
 800dd88:	f000 f93a 	bl	800e000 <Bmx160_writeBmxReg>
    // REPXY regular preset
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_3_ADDR, 0x04);
 800dd8c:	2104      	movs	r1, #4
 800dd8e:	204f      	movs	r0, #79	; 0x4f
 800dd90:	f000 f936 	bl	800e000 <Bmx160_writeBmxReg>
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_2_ADDR, 0x51);
 800dd94:	2151      	movs	r1, #81	; 0x51
 800dd96:	204e      	movs	r0, #78	; 0x4e
 800dd98:	f000 f932 	bl	800e000 <Bmx160_writeBmxReg>
    // REPZ regular preset
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_3_ADDR, 0x0E);
 800dd9c:	210e      	movs	r1, #14
 800dd9e:	204f      	movs	r0, #79	; 0x4f
 800dda0:	f000 f92e 	bl	800e000 <Bmx160_writeBmxReg>
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_2_ADDR, 0x52);
 800dda4:	2152      	movs	r1, #82	; 0x52
 800dda6:	204e      	movs	r0, #78	; 0x4e
 800dda8:	f000 f92a 	bl	800e000 <Bmx160_writeBmxReg>

    Bmx160_writeBmxReg(Bmx160_MAGN_IF_3_ADDR, 0x02);
 800ddac:	2102      	movs	r1, #2
 800ddae:	204f      	movs	r0, #79	; 0x4f
 800ddb0:	f000 f926 	bl	800e000 <Bmx160_writeBmxReg>
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_2_ADDR, 0x4C);
 800ddb4:	214c      	movs	r1, #76	; 0x4c
 800ddb6:	204e      	movs	r0, #78	; 0x4e
 800ddb8:	f000 f922 	bl	800e000 <Bmx160_writeBmxReg>
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_1_ADDR, 0x42);
 800ddbc:	2142      	movs	r1, #66	; 0x42
 800ddbe:	204d      	movs	r0, #77	; 0x4d
 800ddc0:	f000 f91e 	bl	800e000 <Bmx160_writeBmxReg>
    Bmx160_writeBmxReg(Bmx160_MAGN_CONFIG_ADDR, 0x08);
 800ddc4:	2108      	movs	r1, #8
 800ddc6:	2044      	movs	r0, #68	; 0x44
 800ddc8:	f000 f91a 	bl	800e000 <Bmx160_writeBmxReg>
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_0_ADDR, 0x03);
 800ddcc:	2103      	movs	r1, #3
 800ddce:	204c      	movs	r0, #76	; 0x4c
 800ddd0:	f000 f916 	bl	800e000 <Bmx160_writeBmxReg>
    Obmx160.delayMs(50);
 800ddd4:	4b02      	ldr	r3, [pc, #8]	; (800dde0 <Bmx160_setMagnConf+0x78>)
 800ddd6:	6a1b      	ldr	r3, [r3, #32]
 800ddd8:	2032      	movs	r0, #50	; 0x32
 800ddda:	4798      	blx	r3
}
 800dddc:	bf00      	nop
 800ddde:	bd80      	pop	{r7, pc}
 800dde0:	240054c8 	.word	0x240054c8

0800dde4 <Bmx160_getAllData>:

void Bmx160_getAllData(sBmx160SensorData_t *magn, sBmx160SensorData_t *gyro, sBmx160SensorData_t *accel){
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b08e      	sub	sp, #56	; 0x38
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	60f8      	str	r0, [r7, #12]
 800ddec:	60b9      	str	r1, [r7, #8]
 800ddee:	607a      	str	r2, [r7, #4]

    uint8_t data[23] = {0};
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	613b      	str	r3, [r7, #16]
 800ddf4:	f107 0314 	add.w	r3, r7, #20
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	601a      	str	r2, [r3, #0]
 800ddfc:	605a      	str	r2, [r3, #4]
 800ddfe:	609a      	str	r2, [r3, #8]
 800de00:	60da      	str	r2, [r3, #12]
 800de02:	f8c3 200f 	str.w	r2, [r3, #15]
    int16_t x=0,y=0,z=0;
 800de06:	2300      	movs	r3, #0
 800de08:	86fb      	strh	r3, [r7, #54]	; 0x36
 800de0a:	2300      	movs	r3, #0
 800de0c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800de0e:	2300      	movs	r3, #0
 800de10:	867b      	strh	r3, [r7, #50]	; 0x32
    uint32_t time = 0;
 800de12:	2300      	movs	r3, #0
 800de14:	62fb      	str	r3, [r7, #44]	; 0x2c
    float time_f;
    Bmx160_readReg(Bmx160_MAG_DATA_ADDR, data, 23);
 800de16:	f107 0310 	add.w	r3, r7, #16
 800de1a:	2217      	movs	r2, #23
 800de1c:	4619      	mov	r1, r3
 800de1e:	2004      	movs	r0, #4
 800de20:	f000 f915 	bl	800e04e <Bmx160_readReg>
    time = (uint32_t) ((uint32_t)(((uint16_t)data[22] << 8) | data[21]) << 8 | data[20]);
 800de24:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800de28:	021b      	lsls	r3, r3, #8
 800de2a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800de2e:	4313      	orrs	r3, r2
 800de30:	021b      	lsls	r3, r3, #8
 800de32:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800de36:	4313      	orrs	r3, r2
 800de38:	62fb      	str	r3, [r7, #44]	; 0x2c
    time_f = ((float)(time)) * 0.039f;
 800de3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de3c:	ee07 3a90 	vmov	s15, r3
 800de40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de44:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800dfec <Bmx160_getAllData+0x208>
 800de48:	ee67 7a87 	vmul.f32	s15, s15, s14
 800de4c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    if(magn){
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d03e      	beq.n	800ded4 <Bmx160_getAllData+0xf0>
        x = (int16_t) (((uint16_t)data[1] << 8) | data[0]);
 800de56:	7c7b      	ldrb	r3, [r7, #17]
 800de58:	021b      	lsls	r3, r3, #8
 800de5a:	b21a      	sxth	r2, r3
 800de5c:	7c3b      	ldrb	r3, [r7, #16]
 800de5e:	b21b      	sxth	r3, r3
 800de60:	4313      	orrs	r3, r2
 800de62:	86fb      	strh	r3, [r7, #54]	; 0x36
        y = (int16_t) (((uint16_t)data[3] << 8) | data[2]);
 800de64:	7cfb      	ldrb	r3, [r7, #19]
 800de66:	021b      	lsls	r3, r3, #8
 800de68:	b21a      	sxth	r2, r3
 800de6a:	7cbb      	ldrb	r3, [r7, #18]
 800de6c:	b21b      	sxth	r3, r3
 800de6e:	4313      	orrs	r3, r2
 800de70:	86bb      	strh	r3, [r7, #52]	; 0x34
        z = (int16_t) (((uint16_t)data[5] << 8) | data[4]);
 800de72:	7d7b      	ldrb	r3, [r7, #21]
 800de74:	021b      	lsls	r3, r3, #8
 800de76:	b21a      	sxth	r2, r3
 800de78:	7d3b      	ldrb	r3, [r7, #20]
 800de7a:	b21b      	sxth	r3, r3
 800de7c:	4313      	orrs	r3, r2
 800de7e:	867b      	strh	r3, [r7, #50]	; 0x32
//        magn->x = x * Bmx160_MAGN_UT_LSB_XY;
//        magn->y = y * Bmx160_MAGN_UT_LSB_XY;
//        magn->z = z * Bmx160_MAGN_UT_LSB_Z;
        magn->x = x * Bmx160_MAGN_UT_LSB_XY;
 800de80:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800de84:	ee07 3a90 	vmov	s15, r3
 800de88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800de8c:	ed9f 7a58 	vldr	s14, [pc, #352]	; 800dff0 <Bmx160_getAllData+0x20c>
 800de90:	ee67 7a87 	vmul.f32	s15, s15, s14
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	edc3 7a00 	vstr	s15, [r3]
		magn->y = y * Bmx160_MAGN_UT_LSB_XY;
 800de9a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800de9e:	ee07 3a90 	vmov	s15, r3
 800dea2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dea6:	ed9f 7a52 	vldr	s14, [pc, #328]	; 800dff0 <Bmx160_getAllData+0x20c>
 800deaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	edc3 7a01 	vstr	s15, [r3, #4]
		magn->z = z * Bmx160_MAGN_UT_LSB_Z;
 800deb4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800deb8:	ee07 3a90 	vmov	s15, r3
 800debc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dec0:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800dff4 <Bmx160_getAllData+0x210>
 800dec4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	edc3 7a02 	vstr	s15, [r3, #8]
        magn->sensortime = time_f;
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ded2:	60da      	str	r2, [r3, #12]
    }
    if(gyro){
 800ded4:	68bb      	ldr	r3, [r7, #8]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d03e      	beq.n	800df58 <Bmx160_getAllData+0x174>
        x = (int16_t) (((uint16_t)data[9] << 8) | data[8]);
 800deda:	7e7b      	ldrb	r3, [r7, #25]
 800dedc:	021b      	lsls	r3, r3, #8
 800dede:	b21a      	sxth	r2, r3
 800dee0:	7e3b      	ldrb	r3, [r7, #24]
 800dee2:	b21b      	sxth	r3, r3
 800dee4:	4313      	orrs	r3, r2
 800dee6:	86fb      	strh	r3, [r7, #54]	; 0x36
        y = (int16_t) (((uint16_t)data[11] << 8) | data[10]);
 800dee8:	7efb      	ldrb	r3, [r7, #27]
 800deea:	021b      	lsls	r3, r3, #8
 800deec:	b21a      	sxth	r2, r3
 800deee:	7ebb      	ldrb	r3, [r7, #26]
 800def0:	b21b      	sxth	r3, r3
 800def2:	4313      	orrs	r3, r2
 800def4:	86bb      	strh	r3, [r7, #52]	; 0x34
        z = (int16_t) (((uint16_t)data[13] << 8) | data[12]);
 800def6:	7f7b      	ldrb	r3, [r7, #29]
 800def8:	021b      	lsls	r3, r3, #8
 800defa:	b21a      	sxth	r2, r3
 800defc:	7f3b      	ldrb	r3, [r7, #28]
 800defe:	b21b      	sxth	r3, r3
 800df00:	4313      	orrs	r3, r2
 800df02:	867b      	strh	r3, [r7, #50]	; 0x32
        gyro->x = x * gyroRange;
 800df04:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800df08:	ee07 3a90 	vmov	s15, r3
 800df0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800df10:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800dff8 <Bmx160_getAllData+0x214>
 800df14:	ee67 7a87 	vmul.f32	s15, s15, s14
 800df18:	68bb      	ldr	r3, [r7, #8]
 800df1a:	edc3 7a00 	vstr	s15, [r3]
        gyro->y = y * gyroRange;
 800df1e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800df22:	ee07 3a90 	vmov	s15, r3
 800df26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800df2a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800dff8 <Bmx160_getAllData+0x214>
 800df2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800df32:	68bb      	ldr	r3, [r7, #8]
 800df34:	edc3 7a01 	vstr	s15, [r3, #4]
        gyro->z = z * gyroRange;
 800df38:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800df3c:	ee07 3a90 	vmov	s15, r3
 800df40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800df44:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800dff8 <Bmx160_getAllData+0x214>
 800df48:	ee67 7a87 	vmul.f32	s15, s15, s14
 800df4c:	68bb      	ldr	r3, [r7, #8]
 800df4e:	edc3 7a02 	vstr	s15, [r3, #8]
        gyro->sensortime = time_f;
 800df52:	68bb      	ldr	r3, [r7, #8]
 800df54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df56:	60da      	str	r2, [r3, #12]
    }
    if(accel){
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d042      	beq.n	800dfe4 <Bmx160_getAllData+0x200>
        x = (int16_t) (((uint16_t)data[15] << 8) | data[14]);
 800df5e:	7ffb      	ldrb	r3, [r7, #31]
 800df60:	021b      	lsls	r3, r3, #8
 800df62:	b21a      	sxth	r2, r3
 800df64:	7fbb      	ldrb	r3, [r7, #30]
 800df66:	b21b      	sxth	r3, r3
 800df68:	4313      	orrs	r3, r2
 800df6a:	86fb      	strh	r3, [r7, #54]	; 0x36
        y = (int16_t) (((uint16_t)data[17] << 8) | data[16]);
 800df6c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800df70:	021b      	lsls	r3, r3, #8
 800df72:	b21a      	sxth	r2, r3
 800df74:	f897 3020 	ldrb.w	r3, [r7, #32]
 800df78:	b21b      	sxth	r3, r3
 800df7a:	4313      	orrs	r3, r2
 800df7c:	86bb      	strh	r3, [r7, #52]	; 0x34
        z = (int16_t) (((uint16_t)data[19] << 8) | data[18]);
 800df7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800df82:	021b      	lsls	r3, r3, #8
 800df84:	b21a      	sxth	r2, r3
 800df86:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800df8a:	b21b      	sxth	r3, r3
 800df8c:	4313      	orrs	r3, r2
 800df8e:	867b      	strh	r3, [r7, #50]	; 0x32
        accel->x = x * accelRange;
 800df90:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800df94:	ee07 3a90 	vmov	s15, r3
 800df98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800df9c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800dffc <Bmx160_getAllData+0x218>
 800dfa0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	edc3 7a00 	vstr	s15, [r3]
        accel->y = y * accelRange;
 800dfaa:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800dfae:	ee07 3a90 	vmov	s15, r3
 800dfb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dfb6:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800dffc <Bmx160_getAllData+0x218>
 800dfba:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	edc3 7a01 	vstr	s15, [r3, #4]
        accel->z = z * accelRange;
 800dfc4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800dfc8:	ee07 3a90 	vmov	s15, r3
 800dfcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dfd0:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800dffc <Bmx160_getAllData+0x218>
 800dfd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	edc3 7a02 	vstr	s15, [r3, #8]
        accel->sensortime = time_f;
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dfe2:	60da      	str	r2, [r3, #12]
    }
}
 800dfe4:	bf00      	nop
 800dfe6:	3738      	adds	r7, #56	; 0x38
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	bd80      	pop	{r7, pc}
 800dfec:	3d1fbe77 	.word	0x3d1fbe77
 800dff0:	3d228144 	.word	0x3d228144
 800dff4:	3d9c4138 	.word	0x3d9c4138
 800dff8:	3bf9c1f8 	.word	0x3bf9c1f8
 800dffc:	3a1ce7f0 	.word	0x3a1ce7f0

0800e000 <Bmx160_writeBmxReg>:

void Bmx160_writeBmxReg(uint8_t reg, uint8_t value)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b084      	sub	sp, #16
 800e004:	af00      	add	r7, sp, #0
 800e006:	4603      	mov	r3, r0
 800e008:	460a      	mov	r2, r1
 800e00a:	71fb      	strb	r3, [r7, #7]
 800e00c:	4613      	mov	r3, r2
 800e00e:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer[1] = {value};
 800e010:	79bb      	ldrb	r3, [r7, #6]
 800e012:	733b      	strb	r3, [r7, #12]
    Bmx160_writeReg(reg, buffer, 1);
 800e014:	f107 010c 	add.w	r1, r7, #12
 800e018:	79fb      	ldrb	r3, [r7, #7]
 800e01a:	2201      	movs	r2, #1
 800e01c:	4618      	mov	r0, r3
 800e01e:	f000 f804 	bl	800e02a <Bmx160_writeReg>
}
 800e022:	bf00      	nop
 800e024:	3710      	adds	r7, #16
 800e026:	46bd      	mov	sp, r7
 800e028:	bd80      	pop	{r7, pc}

0800e02a <Bmx160_writeReg>:

void Bmx160_writeReg(uint8_t reg, uint8_t *pBuf, uint16_t len)
{
 800e02a:	b580      	push	{r7, lr}
 800e02c:	b082      	sub	sp, #8
 800e02e:	af00      	add	r7, sp, #0
 800e030:	4603      	mov	r3, r0
 800e032:	6039      	str	r1, [r7, #0]
 800e034:	71fb      	strb	r3, [r7, #7]
 800e036:	4613      	mov	r3, r2
 800e038:	80bb      	strh	r3, [r7, #4]
    SensorAPI_I2Cx_Write(0, reg, pBuf, len);
 800e03a:	88bb      	ldrh	r3, [r7, #4]
 800e03c:	79f9      	ldrb	r1, [r7, #7]
 800e03e:	683a      	ldr	r2, [r7, #0]
 800e040:	2000      	movs	r0, #0
 800e042:	f000 f85f 	bl	800e104 <SensorAPI_I2Cx_Write>
}
 800e046:	bf00      	nop
 800e048:	3708      	adds	r7, #8
 800e04a:	46bd      	mov	sp, r7
 800e04c:	bd80      	pop	{r7, pc}

0800e04e <Bmx160_readReg>:

void Bmx160_readReg(uint8_t reg, uint8_t *pBuf, uint16_t len)
{
 800e04e:	b580      	push	{r7, lr}
 800e050:	b082      	sub	sp, #8
 800e052:	af00      	add	r7, sp, #0
 800e054:	4603      	mov	r3, r0
 800e056:	6039      	str	r1, [r7, #0]
 800e058:	71fb      	strb	r3, [r7, #7]
 800e05a:	4613      	mov	r3, r2
 800e05c:	80bb      	strh	r3, [r7, #4]
    SensorAPI_I2Cx_Read(0, reg, pBuf, len);
 800e05e:	88bb      	ldrh	r3, [r7, #4]
 800e060:	79f9      	ldrb	r1, [r7, #7]
 800e062:	683a      	ldr	r2, [r7, #0]
 800e064:	2000      	movs	r0, #0
 800e066:	f000 f82b 	bl	800e0c0 <SensorAPI_I2Cx_Read>
}
 800e06a:	bf00      	nop
 800e06c:	3708      	adds	r7, #8
 800e06e:	46bd      	mov	sp, r7
 800e070:	bd80      	pop	{r7, pc}

0800e072 <Bmx160_scan>:

uint8_t Bmx160_scan()
{
 800e072:	b480      	push	{r7}
 800e074:	af00      	add	r7, sp, #0
    return TRUE;
 800e076:	2301      	movs	r3, #1
}
 800e078:	4618      	mov	r0, r3
 800e07a:	46bd      	mov	sp, r7
 800e07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e080:	4770      	bx	lr
	...

0800e084 <DelayUs>:

uint8_t GTXBuffer[512], GRXBuffer[2048];


void DelayUs(uint32_t Delay)
{
 800e084:	b480      	push	{r7}
 800e086:	b085      	sub	sp, #20
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
	uint32_t i;

	while(--Delay)
 800e08c:	e009      	b.n	800e0a2 <DelayUs+0x1e>
	{
		for(i = 0; i < 84000; i++)
 800e08e:	2300      	movs	r3, #0
 800e090:	60fb      	str	r3, [r7, #12]
 800e092:	e002      	b.n	800e09a <DelayUs+0x16>
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	3301      	adds	r3, #1
 800e098:	60fb      	str	r3, [r7, #12]
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	4a07      	ldr	r2, [pc, #28]	; (800e0bc <DelayUs+0x38>)
 800e09e:	4293      	cmp	r3, r2
 800e0a0:	d9f8      	bls.n	800e094 <DelayUs+0x10>
	while(--Delay)
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	3b01      	subs	r3, #1
 800e0a6:	607b      	str	r3, [r7, #4]
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d1ef      	bne.n	800e08e <DelayUs+0xa>
		{
			;
		}
	}
}
 800e0ae:	bf00      	nop
 800e0b0:	bf00      	nop
 800e0b2:	3714      	adds	r7, #20
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ba:	4770      	bx	lr
 800e0bc:	0001481f 	.word	0x0001481f

0800e0c0 <SensorAPI_I2Cx_Read>:
* Input          : I2C2 device_address, register address, data, data lenght
* Output         : None
* Return         : None
*******************************************************************************/
int8_t SensorAPI_I2Cx_Read(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b084      	sub	sp, #16
 800e0c4:	af02      	add	r7, sp, #8
 800e0c6:	603a      	str	r2, [r7, #0]
 800e0c8:	461a      	mov	r2, r3
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	71fb      	strb	r3, [r7, #7]
 800e0ce:	460b      	mov	r3, r1
 800e0d0:	71bb      	strb	r3, [r7, #6]
 800e0d2:	4613      	mov	r3, r2
 800e0d4:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&I2C_HANDLE, BMI160_ADDR, &reg_addr, 1, I2CTIMEOUT);
 800e0d6:	1dba      	adds	r2, r7, #6
 800e0d8:	2364      	movs	r3, #100	; 0x64
 800e0da:	9300      	str	r3, [sp, #0]
 800e0dc:	2301      	movs	r3, #1
 800e0de:	21d0      	movs	r1, #208	; 0xd0
 800e0e0:	4807      	ldr	r0, [pc, #28]	; (800e100 <SensorAPI_I2Cx_Read+0x40>)
 800e0e2:	f7f4 fa1b 	bl	800251c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&I2C_HANDLE, BMI160_ADDR, data, len, I2CTIMEOUT);
 800e0e6:	88bb      	ldrh	r3, [r7, #4]
 800e0e8:	2264      	movs	r2, #100	; 0x64
 800e0ea:	9200      	str	r2, [sp, #0]
 800e0ec:	683a      	ldr	r2, [r7, #0]
 800e0ee:	21d0      	movs	r1, #208	; 0xd0
 800e0f0:	4803      	ldr	r0, [pc, #12]	; (800e100 <SensorAPI_I2Cx_Read+0x40>)
 800e0f2:	f7f4 fb07 	bl	8002704 <HAL_I2C_Master_Receive>
	return 0;
 800e0f6:	2300      	movs	r3, #0
}
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	3708      	adds	r7, #8
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	bd80      	pop	{r7, pc}
 800e100:	2400041c 	.word	0x2400041c

0800e104 <SensorAPI_I2Cx_Write>:
* Input          : I2C2 device_address, register address, data, data lenght
* Output         : None
* Return         : None
*******************************************************************************/
int8_t SensorAPI_I2Cx_Write(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b084      	sub	sp, #16
 800e108:	af02      	add	r7, sp, #8
 800e10a:	603a      	str	r2, [r7, #0]
 800e10c:	461a      	mov	r2, r3
 800e10e:	4603      	mov	r3, r0
 800e110:	71fb      	strb	r3, [r7, #7]
 800e112:	460b      	mov	r3, r1
 800e114:	71bb      	strb	r3, [r7, #6]
 800e116:	4613      	mov	r3, r2
 800e118:	80bb      	strh	r3, [r7, #4]
	GTXBuffer[0] = reg_addr;
 800e11a:	4a0c      	ldr	r2, [pc, #48]	; (800e14c <SensorAPI_I2Cx_Write+0x48>)
 800e11c:	79bb      	ldrb	r3, [r7, #6]
 800e11e:	7013      	strb	r3, [r2, #0]
	memcpy(&GTXBuffer[1], data, len);
 800e120:	88bb      	ldrh	r3, [r7, #4]
 800e122:	461a      	mov	r2, r3
 800e124:	6839      	ldr	r1, [r7, #0]
 800e126:	480a      	ldr	r0, [pc, #40]	; (800e150 <SensorAPI_I2Cx_Write+0x4c>)
 800e128:	f001 fbc3 	bl	800f8b2 <memcpy>

	HAL_I2C_Master_Transmit(&I2C_HANDLE, BMI160_ADDR, GTXBuffer, len+1, I2CTIMEOUT);
 800e12c:	88bb      	ldrh	r3, [r7, #4]
 800e12e:	3301      	adds	r3, #1
 800e130:	b29b      	uxth	r3, r3
 800e132:	2264      	movs	r2, #100	; 0x64
 800e134:	9200      	str	r2, [sp, #0]
 800e136:	4a05      	ldr	r2, [pc, #20]	; (800e14c <SensorAPI_I2Cx_Write+0x48>)
 800e138:	21d0      	movs	r1, #208	; 0xd0
 800e13a:	4806      	ldr	r0, [pc, #24]	; (800e154 <SensorAPI_I2Cx_Write+0x50>)
 800e13c:	f7f4 f9ee 	bl	800251c <HAL_I2C_Master_Transmit>
	return 0;
 800e140:	2300      	movs	r3, #0
}
 800e142:	4618      	mov	r0, r3
 800e144:	3708      	adds	r7, #8
 800e146:	46bd      	mov	sp, r7
 800e148:	bd80      	pop	{r7, pc}
 800e14a:	bf00      	nop
 800e14c:	240054ec 	.word	0x240054ec
 800e150:	240054ed 	.word	0x240054ed
 800e154:	2400041c 	.word	0x2400041c

0800e158 <__cxa_guard_acquire>:
 800e158:	6803      	ldr	r3, [r0, #0]
 800e15a:	07db      	lsls	r3, r3, #31
 800e15c:	d406      	bmi.n	800e16c <__cxa_guard_acquire+0x14>
 800e15e:	7843      	ldrb	r3, [r0, #1]
 800e160:	b103      	cbz	r3, 800e164 <__cxa_guard_acquire+0xc>
 800e162:	deff      	udf	#255	; 0xff
 800e164:	2301      	movs	r3, #1
 800e166:	7043      	strb	r3, [r0, #1]
 800e168:	4618      	mov	r0, r3
 800e16a:	4770      	bx	lr
 800e16c:	2000      	movs	r0, #0
 800e16e:	4770      	bx	lr

0800e170 <__cxa_guard_release>:
 800e170:	2301      	movs	r3, #1
 800e172:	6003      	str	r3, [r0, #0]
 800e174:	4770      	bx	lr
	...

0800e178 <asin>:
 800e178:	b508      	push	{r3, lr}
 800e17a:	ed2d 8b04 	vpush	{d8-d9}
 800e17e:	eeb0 8b40 	vmov.f64	d8, d0
 800e182:	f000 f899 	bl	800e2b8 <__ieee754_asin>
 800e186:	eeb4 8b48 	vcmp.f64	d8, d8
 800e18a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e18e:	eeb0 9b40 	vmov.f64	d9, d0
 800e192:	d615      	bvs.n	800e1c0 <asin+0x48>
 800e194:	eeb0 0b48 	vmov.f64	d0, d8
 800e198:	f000 f81c 	bl	800e1d4 <fabs>
 800e19c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800e1a0:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800e1a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1a8:	dd0a      	ble.n	800e1c0 <asin+0x48>
 800e1aa:	f001 fb55 	bl	800f858 <__errno>
 800e1ae:	ecbd 8b04 	vpop	{d8-d9}
 800e1b2:	2321      	movs	r3, #33	; 0x21
 800e1b4:	6003      	str	r3, [r0, #0]
 800e1b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e1ba:	4804      	ldr	r0, [pc, #16]	; (800e1cc <asin+0x54>)
 800e1bc:	f000 b868 	b.w	800e290 <nan>
 800e1c0:	eeb0 0b49 	vmov.f64	d0, d9
 800e1c4:	ecbd 8b04 	vpop	{d8-d9}
 800e1c8:	bd08      	pop	{r3, pc}
 800e1ca:	bf00      	nop
 800e1cc:	08011a22 	.word	0x08011a22

0800e1d0 <atan2>:
 800e1d0:	f000 b982 	b.w	800e4d8 <__ieee754_atan2>

0800e1d4 <fabs>:
 800e1d4:	ec51 0b10 	vmov	r0, r1, d0
 800e1d8:	ee10 2a10 	vmov	r2, s0
 800e1dc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e1e0:	ec43 2b10 	vmov	d0, r2, r3
 800e1e4:	4770      	bx	lr
	...

0800e1e8 <asinf>:
 800e1e8:	b508      	push	{r3, lr}
 800e1ea:	ed2d 8b02 	vpush	{d8}
 800e1ee:	eeb0 8a40 	vmov.f32	s16, s0
 800e1f2:	f000 fb2f 	bl	800e854 <__ieee754_asinf>
 800e1f6:	eeb4 8a48 	vcmp.f32	s16, s16
 800e1fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1fe:	eef0 8a40 	vmov.f32	s17, s0
 800e202:	d615      	bvs.n	800e230 <asinf+0x48>
 800e204:	eeb0 0a48 	vmov.f32	s0, s16
 800e208:	f000 f83a 	bl	800e280 <fabsf>
 800e20c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e210:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800e214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e218:	dd0a      	ble.n	800e230 <asinf+0x48>
 800e21a:	f001 fb1d 	bl	800f858 <__errno>
 800e21e:	ecbd 8b02 	vpop	{d8}
 800e222:	2321      	movs	r3, #33	; 0x21
 800e224:	6003      	str	r3, [r0, #0]
 800e226:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e22a:	4804      	ldr	r0, [pc, #16]	; (800e23c <asinf+0x54>)
 800e22c:	f000 b838 	b.w	800e2a0 <nanf>
 800e230:	eeb0 0a68 	vmov.f32	s0, s17
 800e234:	ecbd 8b02 	vpop	{d8}
 800e238:	bd08      	pop	{r3, pc}
 800e23a:	bf00      	nop
 800e23c:	08011a22 	.word	0x08011a22

0800e240 <atan2f>:
 800e240:	f000 bbee 	b.w	800ea20 <__ieee754_atan2f>

0800e244 <sqrtf>:
 800e244:	b508      	push	{r3, lr}
 800e246:	ed2d 8b02 	vpush	{d8}
 800e24a:	eeb0 8a40 	vmov.f32	s16, s0
 800e24e:	f000 f82d 	bl	800e2ac <__ieee754_sqrtf>
 800e252:	eeb4 8a48 	vcmp.f32	s16, s16
 800e256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e25a:	d60c      	bvs.n	800e276 <sqrtf+0x32>
 800e25c:	eddf 8a07 	vldr	s17, [pc, #28]	; 800e27c <sqrtf+0x38>
 800e260:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e268:	d505      	bpl.n	800e276 <sqrtf+0x32>
 800e26a:	f001 faf5 	bl	800f858 <__errno>
 800e26e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800e272:	2321      	movs	r3, #33	; 0x21
 800e274:	6003      	str	r3, [r0, #0]
 800e276:	ecbd 8b02 	vpop	{d8}
 800e27a:	bd08      	pop	{r3, pc}
 800e27c:	00000000 	.word	0x00000000

0800e280 <fabsf>:
 800e280:	ee10 3a10 	vmov	r3, s0
 800e284:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e288:	ee00 3a10 	vmov	s0, r3
 800e28c:	4770      	bx	lr
	...

0800e290 <nan>:
 800e290:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e298 <nan+0x8>
 800e294:	4770      	bx	lr
 800e296:	bf00      	nop
 800e298:	00000000 	.word	0x00000000
 800e29c:	7ff80000 	.word	0x7ff80000

0800e2a0 <nanf>:
 800e2a0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e2a8 <nanf+0x8>
 800e2a4:	4770      	bx	lr
 800e2a6:	bf00      	nop
 800e2a8:	7fc00000 	.word	0x7fc00000

0800e2ac <__ieee754_sqrtf>:
 800e2ac:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e2b0:	4770      	bx	lr
 800e2b2:	0000      	movs	r0, r0
 800e2b4:	0000      	movs	r0, r0
	...

0800e2b8 <__ieee754_asin>:
 800e2b8:	b538      	push	{r3, r4, r5, lr}
 800e2ba:	ee10 5a90 	vmov	r5, s1
 800e2be:	4b82      	ldr	r3, [pc, #520]	; (800e4c8 <__ieee754_asin+0x210>)
 800e2c0:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800e2c4:	429c      	cmp	r4, r3
 800e2c6:	ed2d 8b06 	vpush	{d8-d10}
 800e2ca:	dd19      	ble.n	800e300 <__ieee754_asin+0x48>
 800e2cc:	ee10 3a10 	vmov	r3, s0
 800e2d0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e2d4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e2d8:	431c      	orrs	r4, r3
 800e2da:	d10c      	bne.n	800e2f6 <__ieee754_asin+0x3e>
 800e2dc:	ed9f 7b5c 	vldr	d7, [pc, #368]	; 800e450 <__ieee754_asin+0x198>
 800e2e0:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 800e458 <__ieee754_asin+0x1a0>
 800e2e4:	ee20 7b07 	vmul.f64	d7, d0, d7
 800e2e8:	eea0 7b06 	vfma.f64	d7, d0, d6
 800e2ec:	eeb0 0b47 	vmov.f64	d0, d7
 800e2f0:	ecbd 8b06 	vpop	{d8-d10}
 800e2f4:	bd38      	pop	{r3, r4, r5, pc}
 800e2f6:	ee30 7b40 	vsub.f64	d7, d0, d0
 800e2fa:	ee87 0b07 	vdiv.f64	d0, d7, d7
 800e2fe:	e7f7      	b.n	800e2f0 <__ieee754_asin+0x38>
 800e300:	4b72      	ldr	r3, [pc, #456]	; (800e4cc <__ieee754_asin+0x214>)
 800e302:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
 800e306:	429c      	cmp	r4, r3
 800e308:	dc0b      	bgt.n	800e322 <__ieee754_asin+0x6a>
 800e30a:	f1b4 5f79 	cmp.w	r4, #1044381696	; 0x3e400000
 800e30e:	da52      	bge.n	800e3b6 <__ieee754_asin+0xfe>
 800e310:	ed9f 7b53 	vldr	d7, [pc, #332]	; 800e460 <__ieee754_asin+0x1a8>
 800e314:	ee30 7b07 	vadd.f64	d7, d0, d7
 800e318:	eeb4 7bc9 	vcmpe.f64	d7, d9
 800e31c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e320:	dce6      	bgt.n	800e2f0 <__ieee754_asin+0x38>
 800e322:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800e326:	f7ff ff55 	bl	800e1d4 <fabs>
 800e32a:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 800e468 <__ieee754_asin+0x1b0>
 800e32e:	ee39 0b40 	vsub.f64	d0, d9, d0
 800e332:	ee20 8b08 	vmul.f64	d8, d0, d8
 800e336:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 800e470 <__ieee754_asin+0x1b8>
 800e33a:	eeb0 0b48 	vmov.f64	d0, d8
 800e33e:	eea8 6b07 	vfma.f64	d6, d8, d7
 800e342:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 800e478 <__ieee754_asin+0x1c0>
 800e346:	eea6 7b08 	vfma.f64	d7, d6, d8
 800e34a:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 800e480 <__ieee754_asin+0x1c8>
 800e34e:	ed9f ab4e 	vldr	d10, [pc, #312]	; 800e488 <__ieee754_asin+0x1d0>
 800e352:	eea7 6b08 	vfma.f64	d6, d7, d8
 800e356:	ed9f 7b4e 	vldr	d7, [pc, #312]	; 800e490 <__ieee754_asin+0x1d8>
 800e35a:	eea6 7b08 	vfma.f64	d7, d6, d8
 800e35e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 800e498 <__ieee754_asin+0x1e0>
 800e362:	eea7 ab08 	vfma.f64	d10, d7, d8
 800e366:	ee2a ab08 	vmul.f64	d10, d10, d8
 800e36a:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 800e4a0 <__ieee754_asin+0x1e8>
 800e36e:	eea8 7b06 	vfma.f64	d7, d8, d6
 800e372:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 800e4a8 <__ieee754_asin+0x1f0>
 800e376:	eea7 6b08 	vfma.f64	d6, d7, d8
 800e37a:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 800e4b0 <__ieee754_asin+0x1f8>
 800e37e:	eea6 7b08 	vfma.f64	d7, d6, d8
 800e382:	eea7 9b08 	vfma.f64	d9, d7, d8
 800e386:	f000 fcbd 	bl	800ed04 <__ieee754_sqrt>
 800e38a:	ee8a 5b09 	vdiv.f64	d5, d10, d9
 800e38e:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 800e392:	4b4f      	ldr	r3, [pc, #316]	; (800e4d0 <__ieee754_asin+0x218>)
 800e394:	429c      	cmp	r4, r3
 800e396:	dd3d      	ble.n	800e414 <__ieee754_asin+0x15c>
 800e398:	eea0 0b05 	vfma.f64	d0, d0, d5
 800e39c:	ed9f 7b46 	vldr	d7, [pc, #280]	; 800e4b8 <__ieee754_asin+0x200>
 800e3a0:	eea0 7b04 	vfma.f64	d7, d0, d4
 800e3a4:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 800e458 <__ieee754_asin+0x1a0>
 800e3a8:	ee30 0b47 	vsub.f64	d0, d0, d7
 800e3ac:	2d00      	cmp	r5, #0
 800e3ae:	bfd8      	it	le
 800e3b0:	eeb1 0b40 	vnegle.f64	d0, d0
 800e3b4:	e79c      	b.n	800e2f0 <__ieee754_asin+0x38>
 800e3b6:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 800e468 <__ieee754_asin+0x1b0>
 800e3ba:	ee20 7b00 	vmul.f64	d7, d0, d0
 800e3be:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 800e470 <__ieee754_asin+0x1b8>
 800e3c2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800e3c6:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 800e478 <__ieee754_asin+0x1c0>
 800e3ca:	eea6 5b07 	vfma.f64	d5, d6, d7
 800e3ce:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 800e480 <__ieee754_asin+0x1c8>
 800e3d2:	eea5 6b07 	vfma.f64	d6, d5, d7
 800e3d6:	ed9f 5b2e 	vldr	d5, [pc, #184]	; 800e490 <__ieee754_asin+0x1d8>
 800e3da:	eea6 5b07 	vfma.f64	d5, d6, d7
 800e3de:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 800e488 <__ieee754_asin+0x1d0>
 800e3e2:	ed9f 4b2d 	vldr	d4, [pc, #180]	; 800e498 <__ieee754_asin+0x1e0>
 800e3e6:	eea5 6b07 	vfma.f64	d6, d5, d7
 800e3ea:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e3ee:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 800e4a0 <__ieee754_asin+0x1e8>
 800e3f2:	eea7 5b04 	vfma.f64	d5, d7, d4
 800e3f6:	ed9f 4b2c 	vldr	d4, [pc, #176]	; 800e4a8 <__ieee754_asin+0x1f0>
 800e3fa:	eea5 4b07 	vfma.f64	d4, d5, d7
 800e3fe:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 800e4b0 <__ieee754_asin+0x1f8>
 800e402:	eea4 5b07 	vfma.f64	d5, d4, d7
 800e406:	eea5 9b07 	vfma.f64	d9, d5, d7
 800e40a:	ee86 7b09 	vdiv.f64	d7, d6, d9
 800e40e:	eea0 0b07 	vfma.f64	d0, d0, d7
 800e412:	e76d      	b.n	800e2f0 <__ieee754_asin+0x38>
 800e414:	ec53 2b10 	vmov	r2, r3, d0
 800e418:	2200      	movs	r2, #0
 800e41a:	ec43 2b16 	vmov	d6, r2, r3
 800e41e:	ee30 7b06 	vadd.f64	d7, d0, d6
 800e422:	eea6 8b46 	vfms.f64	d8, d6, d6
 800e426:	ee88 3b07 	vdiv.f64	d3, d8, d7
 800e42a:	ed9f 7b09 	vldr	d7, [pc, #36]	; 800e450 <__ieee754_asin+0x198>
 800e42e:	ee30 0b00 	vadd.f64	d0, d0, d0
 800e432:	eea3 7b44 	vfms.f64	d7, d3, d4
 800e436:	ee90 7b05 	vfnms.f64	d7, d0, d5
 800e43a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800e4c0 <__ieee754_asin+0x208>
 800e43e:	eeb0 5b40 	vmov.f64	d5, d0
 800e442:	eea6 5b44 	vfms.f64	d5, d6, d4
 800e446:	ee37 7b45 	vsub.f64	d7, d7, d5
 800e44a:	e7ad      	b.n	800e3a8 <__ieee754_asin+0xf0>
 800e44c:	f3af 8000 	nop.w
 800e450:	33145c07 	.word	0x33145c07
 800e454:	3c91a626 	.word	0x3c91a626
 800e458:	54442d18 	.word	0x54442d18
 800e45c:	3ff921fb 	.word	0x3ff921fb
 800e460:	8800759c 	.word	0x8800759c
 800e464:	7e37e43c 	.word	0x7e37e43c
 800e468:	0dfdf709 	.word	0x0dfdf709
 800e46c:	3f023de1 	.word	0x3f023de1
 800e470:	7501b288 	.word	0x7501b288
 800e474:	3f49efe0 	.word	0x3f49efe0
 800e478:	b5688f3b 	.word	0xb5688f3b
 800e47c:	bfa48228 	.word	0xbfa48228
 800e480:	0e884455 	.word	0x0e884455
 800e484:	3fc9c155 	.word	0x3fc9c155
 800e488:	55555555 	.word	0x55555555
 800e48c:	3fc55555 	.word	0x3fc55555
 800e490:	03eb6f7d 	.word	0x03eb6f7d
 800e494:	bfd4d612 	.word	0xbfd4d612
 800e498:	b12e9282 	.word	0xb12e9282
 800e49c:	3fb3b8c5 	.word	0x3fb3b8c5
 800e4a0:	1b8d0159 	.word	0x1b8d0159
 800e4a4:	bfe6066c 	.word	0xbfe6066c
 800e4a8:	9c598ac8 	.word	0x9c598ac8
 800e4ac:	40002ae5 	.word	0x40002ae5
 800e4b0:	1c8a2d4b 	.word	0x1c8a2d4b
 800e4b4:	c0033a27 	.word	0xc0033a27
 800e4b8:	33145c07 	.word	0x33145c07
 800e4bc:	bc91a626 	.word	0xbc91a626
 800e4c0:	54442d18 	.word	0x54442d18
 800e4c4:	3fe921fb 	.word	0x3fe921fb
 800e4c8:	3fefffff 	.word	0x3fefffff
 800e4cc:	3fdfffff 	.word	0x3fdfffff
 800e4d0:	3fef3332 	.word	0x3fef3332
 800e4d4:	00000000 	.word	0x00000000

0800e4d8 <__ieee754_atan2>:
 800e4d8:	ee11 1a10 	vmov	r1, s2
 800e4dc:	eeb0 7b40 	vmov.f64	d7, d0
 800e4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4e2:	ee11 5a90 	vmov	r5, s3
 800e4e6:	424b      	negs	r3, r1
 800e4e8:	4f59      	ldr	r7, [pc, #356]	; (800e650 <__ieee754_atan2+0x178>)
 800e4ea:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800e4ee:	430b      	orrs	r3, r1
 800e4f0:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800e4f4:	42bb      	cmp	r3, r7
 800e4f6:	d80d      	bhi.n	800e514 <__ieee754_atan2+0x3c>
 800e4f8:	ee10 ca10 	vmov	ip, s0
 800e4fc:	ee17 6a90 	vmov	r6, s15
 800e500:	f1cc 0000 	rsb	r0, ip, #0
 800e504:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800e508:	ea40 000c 	orr.w	r0, r0, ip
 800e50c:	ea43 70d0 	orr.w	r0, r3, r0, lsr #31
 800e510:	42b8      	cmp	r0, r7
 800e512:	d904      	bls.n	800e51e <__ieee754_atan2+0x46>
 800e514:	ee37 7b01 	vadd.f64	d7, d7, d1
 800e518:	eeb0 0b47 	vmov.f64	d0, d7
 800e51c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e51e:	f105 4040 	add.w	r0, r5, #3221225472	; 0xc0000000
 800e522:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e526:	4308      	orrs	r0, r1
 800e528:	d103      	bne.n	800e532 <__ieee754_atan2+0x5a>
 800e52a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e52e:	f000 b897 	b.w	800e660 <atan>
 800e532:	17ac      	asrs	r4, r5, #30
 800e534:	f004 0402 	and.w	r4, r4, #2
 800e538:	ea53 0c0c 	orrs.w	ip, r3, ip
 800e53c:	ea44 74d6 	orr.w	r4, r4, r6, lsr #31
 800e540:	d107      	bne.n	800e552 <__ieee754_atan2+0x7a>
 800e542:	2c02      	cmp	r4, #2
 800e544:	d05c      	beq.n	800e600 <__ieee754_atan2+0x128>
 800e546:	ed9f 6b34 	vldr	d6, [pc, #208]	; 800e618 <__ieee754_atan2+0x140>
 800e54a:	2c03      	cmp	r4, #3
 800e54c:	fe06 7b00 	vseleq.f64	d7, d6, d0
 800e550:	e7e2      	b.n	800e518 <__ieee754_atan2+0x40>
 800e552:	4311      	orrs	r1, r2
 800e554:	d107      	bne.n	800e566 <__ieee754_atan2+0x8e>
 800e556:	ed9f 7b32 	vldr	d7, [pc, #200]	; 800e620 <__ieee754_atan2+0x148>
 800e55a:	ed9f 6b33 	vldr	d6, [pc, #204]	; 800e628 <__ieee754_atan2+0x150>
 800e55e:	2e00      	cmp	r6, #0
 800e560:	fe27 7b06 	vselge.f64	d7, d7, d6
 800e564:	e7d8      	b.n	800e518 <__ieee754_atan2+0x40>
 800e566:	42ba      	cmp	r2, r7
 800e568:	d10f      	bne.n	800e58a <__ieee754_atan2+0xb2>
 800e56a:	4293      	cmp	r3, r2
 800e56c:	f104 34ff 	add.w	r4, r4, #4294967295
 800e570:	d107      	bne.n	800e582 <__ieee754_atan2+0xaa>
 800e572:	2c02      	cmp	r4, #2
 800e574:	d847      	bhi.n	800e606 <__ieee754_atan2+0x12e>
 800e576:	4b37      	ldr	r3, [pc, #220]	; (800e654 <__ieee754_atan2+0x17c>)
 800e578:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e57c:	ed93 7b00 	vldr	d7, [r3]
 800e580:	e7ca      	b.n	800e518 <__ieee754_atan2+0x40>
 800e582:	2c02      	cmp	r4, #2
 800e584:	d842      	bhi.n	800e60c <__ieee754_atan2+0x134>
 800e586:	4b34      	ldr	r3, [pc, #208]	; (800e658 <__ieee754_atan2+0x180>)
 800e588:	e7f6      	b.n	800e578 <__ieee754_atan2+0xa0>
 800e58a:	42bb      	cmp	r3, r7
 800e58c:	d0e3      	beq.n	800e556 <__ieee754_atan2+0x7e>
 800e58e:	1a9b      	subs	r3, r3, r2
 800e590:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800e594:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e598:	da1a      	bge.n	800e5d0 <__ieee754_atan2+0xf8>
 800e59a:	2d00      	cmp	r5, #0
 800e59c:	da01      	bge.n	800e5a2 <__ieee754_atan2+0xca>
 800e59e:	323c      	adds	r2, #60	; 0x3c
 800e5a0:	db19      	blt.n	800e5d6 <__ieee754_atan2+0xfe>
 800e5a2:	ee87 0b01 	vdiv.f64	d0, d7, d1
 800e5a6:	f7ff fe15 	bl	800e1d4 <fabs>
 800e5aa:	f000 f859 	bl	800e660 <atan>
 800e5ae:	eeb0 7b40 	vmov.f64	d7, d0
 800e5b2:	2c01      	cmp	r4, #1
 800e5b4:	d012      	beq.n	800e5dc <__ieee754_atan2+0x104>
 800e5b6:	2c02      	cmp	r4, #2
 800e5b8:	d019      	beq.n	800e5ee <__ieee754_atan2+0x116>
 800e5ba:	2c00      	cmp	r4, #0
 800e5bc:	d0ac      	beq.n	800e518 <__ieee754_atan2+0x40>
 800e5be:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 800e630 <__ieee754_atan2+0x158>
 800e5c2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e5c6:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 800e638 <__ieee754_atan2+0x160>
 800e5ca:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e5ce:	e7a3      	b.n	800e518 <__ieee754_atan2+0x40>
 800e5d0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800e620 <__ieee754_atan2+0x148>
 800e5d4:	e7ed      	b.n	800e5b2 <__ieee754_atan2+0xda>
 800e5d6:	ed9f 7b1a 	vldr	d7, [pc, #104]	; 800e640 <__ieee754_atan2+0x168>
 800e5da:	e7ea      	b.n	800e5b2 <__ieee754_atan2+0xda>
 800e5dc:	ee17 1a90 	vmov	r1, s15
 800e5e0:	ec53 2b17 	vmov	r2, r3, d7
 800e5e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e5e8:	ec43 2b17 	vmov	d7, r2, r3
 800e5ec:	e794      	b.n	800e518 <__ieee754_atan2+0x40>
 800e5ee:	ed9f 6b10 	vldr	d6, [pc, #64]	; 800e630 <__ieee754_atan2+0x158>
 800e5f2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e5f6:	ed9f 6b10 	vldr	d6, [pc, #64]	; 800e638 <__ieee754_atan2+0x160>
 800e5fa:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e5fe:	e78b      	b.n	800e518 <__ieee754_atan2+0x40>
 800e600:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800e638 <__ieee754_atan2+0x160>
 800e604:	e788      	b.n	800e518 <__ieee754_atan2+0x40>
 800e606:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800e648 <__ieee754_atan2+0x170>
 800e60a:	e785      	b.n	800e518 <__ieee754_atan2+0x40>
 800e60c:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800e640 <__ieee754_atan2+0x168>
 800e610:	e782      	b.n	800e518 <__ieee754_atan2+0x40>
 800e612:	bf00      	nop
 800e614:	f3af 8000 	nop.w
 800e618:	54442d18 	.word	0x54442d18
 800e61c:	c00921fb 	.word	0xc00921fb
 800e620:	54442d18 	.word	0x54442d18
 800e624:	3ff921fb 	.word	0x3ff921fb
 800e628:	54442d18 	.word	0x54442d18
 800e62c:	bff921fb 	.word	0xbff921fb
 800e630:	33145c07 	.word	0x33145c07
 800e634:	3ca1a626 	.word	0x3ca1a626
 800e638:	54442d18 	.word	0x54442d18
 800e63c:	400921fb 	.word	0x400921fb
	...
 800e648:	54442d18 	.word	0x54442d18
 800e64c:	3fe921fb 	.word	0x3fe921fb
 800e650:	7ff00000 	.word	0x7ff00000
 800e654:	08011708 	.word	0x08011708
 800e658:	08011720 	.word	0x08011720
 800e65c:	00000000 	.word	0x00000000

0800e660 <atan>:
 800e660:	b538      	push	{r3, r4, r5, lr}
 800e662:	eeb0 7b40 	vmov.f64	d7, d0
 800e666:	ee17 5a90 	vmov	r5, s15
 800e66a:	4b73      	ldr	r3, [pc, #460]	; (800e838 <atan+0x1d8>)
 800e66c:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800e670:	429c      	cmp	r4, r3
 800e672:	dd13      	ble.n	800e69c <atan+0x3c>
 800e674:	4b71      	ldr	r3, [pc, #452]	; (800e83c <atan+0x1dc>)
 800e676:	429c      	cmp	r4, r3
 800e678:	dc03      	bgt.n	800e682 <atan+0x22>
 800e67a:	d107      	bne.n	800e68c <atan+0x2c>
 800e67c:	ee10 3a10 	vmov	r3, s0
 800e680:	b123      	cbz	r3, 800e68c <atan+0x2c>
 800e682:	ee37 7b07 	vadd.f64	d7, d7, d7
 800e686:	eeb0 0b47 	vmov.f64	d0, d7
 800e68a:	bd38      	pop	{r3, r4, r5, pc}
 800e68c:	ed9f 7b4e 	vldr	d7, [pc, #312]	; 800e7c8 <atan+0x168>
 800e690:	ed9f 6b4f 	vldr	d6, [pc, #316]	; 800e7d0 <atan+0x170>
 800e694:	2d00      	cmp	r5, #0
 800e696:	fe37 7b06 	vselgt.f64	d7, d7, d6
 800e69a:	e7f4      	b.n	800e686 <atan+0x26>
 800e69c:	4b68      	ldr	r3, [pc, #416]	; (800e840 <atan+0x1e0>)
 800e69e:	429c      	cmp	r4, r3
 800e6a0:	dc11      	bgt.n	800e6c6 <atan+0x66>
 800e6a2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800e6a6:	429c      	cmp	r4, r3
 800e6a8:	dc0a      	bgt.n	800e6c0 <atan+0x60>
 800e6aa:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800e6ae:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 800e7d8 <atan+0x178>
 800e6b2:	ee30 6b06 	vadd.f64	d6, d0, d6
 800e6b6:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800e6ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6be:	dce2      	bgt.n	800e686 <atan+0x26>
 800e6c0:	f04f 33ff 	mov.w	r3, #4294967295
 800e6c4:	e013      	b.n	800e6ee <atan+0x8e>
 800e6c6:	f7ff fd85 	bl	800e1d4 <fabs>
 800e6ca:	4b5e      	ldr	r3, [pc, #376]	; (800e844 <atan+0x1e4>)
 800e6cc:	429c      	cmp	r4, r3
 800e6ce:	dc4f      	bgt.n	800e770 <atan+0x110>
 800e6d0:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800e6d4:	429c      	cmp	r4, r3
 800e6d6:	dc41      	bgt.n	800e75c <atan+0xfc>
 800e6d8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800e6dc:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	eea0 5b07 	vfma.f64	d5, d0, d7
 800e6e6:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e6ea:	ee85 7b00 	vdiv.f64	d7, d5, d0
 800e6ee:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800e7e0 <atan+0x180>
 800e6f2:	ee27 4b07 	vmul.f64	d4, d7, d7
 800e6f6:	ee24 5b04 	vmul.f64	d5, d4, d4
 800e6fa:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800e7e8 <atan+0x188>
 800e6fe:	eea5 3b06 	vfma.f64	d3, d5, d6
 800e702:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800e7f0 <atan+0x190>
 800e706:	eea3 6b05 	vfma.f64	d6, d3, d5
 800e70a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800e7f8 <atan+0x198>
 800e70e:	eea6 3b05 	vfma.f64	d3, d6, d5
 800e712:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800e800 <atan+0x1a0>
 800e716:	eea3 6b05 	vfma.f64	d6, d3, d5
 800e71a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800e808 <atan+0x1a8>
 800e71e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 800e810 <atan+0x1b0>
 800e722:	eea6 3b05 	vfma.f64	d3, d6, d5
 800e726:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800e818 <atan+0x1b8>
 800e72a:	eea5 2b06 	vfma.f64	d2, d5, d6
 800e72e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800e820 <atan+0x1c0>
 800e732:	eea2 6b05 	vfma.f64	d6, d2, d5
 800e736:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 800e828 <atan+0x1c8>
 800e73a:	eea6 2b05 	vfma.f64	d2, d6, d5
 800e73e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800e830 <atan+0x1d0>
 800e742:	1c5a      	adds	r2, r3, #1
 800e744:	eea2 6b05 	vfma.f64	d6, d2, d5
 800e748:	ee26 6b05 	vmul.f64	d6, d6, d5
 800e74c:	eea3 6b04 	vfma.f64	d6, d3, d4
 800e750:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e754:	d121      	bne.n	800e79a <atan+0x13a>
 800e756:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e75a:	e794      	b.n	800e686 <atan+0x26>
 800e75c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800e760:	2301      	movs	r3, #1
 800e762:	ee30 5b47 	vsub.f64	d5, d0, d7
 800e766:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e76a:	ee85 7b00 	vdiv.f64	d7, d5, d0
 800e76e:	e7be      	b.n	800e6ee <atan+0x8e>
 800e770:	4b35      	ldr	r3, [pc, #212]	; (800e848 <atan+0x1e8>)
 800e772:	429c      	cmp	r4, r3
 800e774:	da0b      	bge.n	800e78e <atan+0x12e>
 800e776:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800e77a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800e77e:	ee30 5b47 	vsub.f64	d5, d0, d7
 800e782:	eea0 6b07 	vfma.f64	d6, d0, d7
 800e786:	2302      	movs	r3, #2
 800e788:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800e78c:	e7af      	b.n	800e6ee <atan+0x8e>
 800e78e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800e792:	2303      	movs	r3, #3
 800e794:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800e798:	e7a9      	b.n	800e6ee <atan+0x8e>
 800e79a:	4a2c      	ldr	r2, [pc, #176]	; (800e84c <atan+0x1ec>)
 800e79c:	492c      	ldr	r1, [pc, #176]	; (800e850 <atan+0x1f0>)
 800e79e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800e7a2:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800e7a6:	ed93 5b00 	vldr	d5, [r3]
 800e7aa:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e7ae:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e7b2:	ed92 7b00 	vldr	d7, [r2]
 800e7b6:	2d00      	cmp	r5, #0
 800e7b8:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e7bc:	bfb8      	it	lt
 800e7be:	eeb1 7b47 	vneglt.f64	d7, d7
 800e7c2:	e760      	b.n	800e686 <atan+0x26>
 800e7c4:	f3af 8000 	nop.w
 800e7c8:	54442d18 	.word	0x54442d18
 800e7cc:	3ff921fb 	.word	0x3ff921fb
 800e7d0:	54442d18 	.word	0x54442d18
 800e7d4:	bff921fb 	.word	0xbff921fb
 800e7d8:	8800759c 	.word	0x8800759c
 800e7dc:	7e37e43c 	.word	0x7e37e43c
 800e7e0:	e322da11 	.word	0xe322da11
 800e7e4:	3f90ad3a 	.word	0x3f90ad3a
 800e7e8:	24760deb 	.word	0x24760deb
 800e7ec:	3fa97b4b 	.word	0x3fa97b4b
 800e7f0:	a0d03d51 	.word	0xa0d03d51
 800e7f4:	3fb10d66 	.word	0x3fb10d66
 800e7f8:	c54c206e 	.word	0xc54c206e
 800e7fc:	3fb745cd 	.word	0x3fb745cd
 800e800:	920083ff 	.word	0x920083ff
 800e804:	3fc24924 	.word	0x3fc24924
 800e808:	5555550d 	.word	0x5555550d
 800e80c:	3fd55555 	.word	0x3fd55555
 800e810:	52defd9a 	.word	0x52defd9a
 800e814:	bfadde2d 	.word	0xbfadde2d
 800e818:	2c6a6c2f 	.word	0x2c6a6c2f
 800e81c:	bfa2b444 	.word	0xbfa2b444
 800e820:	af749a6d 	.word	0xaf749a6d
 800e824:	bfb3b0f2 	.word	0xbfb3b0f2
 800e828:	fe231671 	.word	0xfe231671
 800e82c:	bfbc71c6 	.word	0xbfbc71c6
 800e830:	9998ebc4 	.word	0x9998ebc4
 800e834:	bfc99999 	.word	0xbfc99999
 800e838:	440fffff 	.word	0x440fffff
 800e83c:	7ff00000 	.word	0x7ff00000
 800e840:	3fdbffff 	.word	0x3fdbffff
 800e844:	3ff2ffff 	.word	0x3ff2ffff
 800e848:	40038000 	.word	0x40038000
 800e84c:	08011738 	.word	0x08011738
 800e850:	08011758 	.word	0x08011758

0800e854 <__ieee754_asinf>:
 800e854:	b538      	push	{r3, r4, r5, lr}
 800e856:	ee10 5a10 	vmov	r5, s0
 800e85a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800e85e:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800e862:	ed2d 8b04 	vpush	{d8-d9}
 800e866:	d10c      	bne.n	800e882 <__ieee754_asinf+0x2e>
 800e868:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800e9e0 <__ieee754_asinf+0x18c>
 800e86c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800e9e4 <__ieee754_asinf+0x190>
 800e870:	ee60 7a27 	vmul.f32	s15, s0, s15
 800e874:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e878:	eeb0 0a67 	vmov.f32	s0, s15
 800e87c:	ecbd 8b04 	vpop	{d8-d9}
 800e880:	bd38      	pop	{r3, r4, r5, pc}
 800e882:	dd04      	ble.n	800e88e <__ieee754_asinf+0x3a>
 800e884:	ee70 7a40 	vsub.f32	s15, s0, s0
 800e888:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800e88c:	e7f6      	b.n	800e87c <__ieee754_asinf+0x28>
 800e88e:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800e892:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800e896:	da0b      	bge.n	800e8b0 <__ieee754_asinf+0x5c>
 800e898:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800e89c:	da52      	bge.n	800e944 <__ieee754_asinf+0xf0>
 800e89e:	eddf 7a52 	vldr	s15, [pc, #328]	; 800e9e8 <__ieee754_asinf+0x194>
 800e8a2:	ee70 7a27 	vadd.f32	s15, s0, s15
 800e8a6:	eef4 7ae8 	vcmpe.f32	s15, s17
 800e8aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8ae:	dce5      	bgt.n	800e87c <__ieee754_asinf+0x28>
 800e8b0:	f7ff fce6 	bl	800e280 <fabsf>
 800e8b4:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800e8b8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e8bc:	ee20 8a27 	vmul.f32	s16, s0, s15
 800e8c0:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800e9ec <__ieee754_asinf+0x198>
 800e8c4:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800e9f0 <__ieee754_asinf+0x19c>
 800e8c8:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800e9f4 <__ieee754_asinf+0x1a0>
 800e8cc:	eea8 7a27 	vfma.f32	s14, s16, s15
 800e8d0:	eddf 7a49 	vldr	s15, [pc, #292]	; 800e9f8 <__ieee754_asinf+0x1a4>
 800e8d4:	eee7 7a08 	vfma.f32	s15, s14, s16
 800e8d8:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800e9fc <__ieee754_asinf+0x1a8>
 800e8dc:	eea7 7a88 	vfma.f32	s14, s15, s16
 800e8e0:	eddf 7a47 	vldr	s15, [pc, #284]	; 800ea00 <__ieee754_asinf+0x1ac>
 800e8e4:	eee7 7a08 	vfma.f32	s15, s14, s16
 800e8e8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800ea04 <__ieee754_asinf+0x1b0>
 800e8ec:	eea7 9a88 	vfma.f32	s18, s15, s16
 800e8f0:	eddf 7a45 	vldr	s15, [pc, #276]	; 800ea08 <__ieee754_asinf+0x1b4>
 800e8f4:	eee8 7a07 	vfma.f32	s15, s16, s14
 800e8f8:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800ea0c <__ieee754_asinf+0x1b8>
 800e8fc:	eea7 7a88 	vfma.f32	s14, s15, s16
 800e900:	eddf 7a43 	vldr	s15, [pc, #268]	; 800ea10 <__ieee754_asinf+0x1bc>
 800e904:	eee7 7a08 	vfma.f32	s15, s14, s16
 800e908:	eeb0 0a48 	vmov.f32	s0, s16
 800e90c:	eee7 8a88 	vfma.f32	s17, s15, s16
 800e910:	f7ff fccc 	bl	800e2ac <__ieee754_sqrtf>
 800e914:	4b3f      	ldr	r3, [pc, #252]	; (800ea14 <__ieee754_asinf+0x1c0>)
 800e916:	ee29 9a08 	vmul.f32	s18, s18, s16
 800e91a:	429c      	cmp	r4, r3
 800e91c:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800e920:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800e924:	dd3d      	ble.n	800e9a2 <__ieee754_asinf+0x14e>
 800e926:	eea0 0a06 	vfma.f32	s0, s0, s12
 800e92a:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800ea18 <__ieee754_asinf+0x1c4>
 800e92e:	eee0 7a26 	vfma.f32	s15, s0, s13
 800e932:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800e9e4 <__ieee754_asinf+0x190>
 800e936:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e93a:	2d00      	cmp	r5, #0
 800e93c:	bfd8      	it	le
 800e93e:	eeb1 0a40 	vnegle.f32	s0, s0
 800e942:	e79b      	b.n	800e87c <__ieee754_asinf+0x28>
 800e944:	ee60 7a00 	vmul.f32	s15, s0, s0
 800e948:	eddf 6a29 	vldr	s13, [pc, #164]	; 800e9f0 <__ieee754_asinf+0x19c>
 800e94c:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800e9ec <__ieee754_asinf+0x198>
 800e950:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800ea04 <__ieee754_asinf+0x1b0>
 800e954:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800e958:	eddf 6a27 	vldr	s13, [pc, #156]	; 800e9f8 <__ieee754_asinf+0x1a4>
 800e95c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800e960:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800e9fc <__ieee754_asinf+0x1a8>
 800e964:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e968:	eddf 6a25 	vldr	s13, [pc, #148]	; 800ea00 <__ieee754_asinf+0x1ac>
 800e96c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800e970:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800e9f4 <__ieee754_asinf+0x1a0>
 800e974:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e978:	eddf 6a23 	vldr	s13, [pc, #140]	; 800ea08 <__ieee754_asinf+0x1b4>
 800e97c:	eee7 6a86 	vfma.f32	s13, s15, s12
 800e980:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800ea0c <__ieee754_asinf+0x1b8>
 800e984:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800e988:	eddf 6a21 	vldr	s13, [pc, #132]	; 800ea10 <__ieee754_asinf+0x1bc>
 800e98c:	eee6 6a27 	vfma.f32	s13, s12, s15
 800e990:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e994:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800e998:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800e99c:	eea0 0a27 	vfma.f32	s0, s0, s15
 800e9a0:	e76c      	b.n	800e87c <__ieee754_asinf+0x28>
 800e9a2:	ee10 3a10 	vmov	r3, s0
 800e9a6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800e9aa:	f023 030f 	bic.w	r3, r3, #15
 800e9ae:	ee07 3a10 	vmov	s14, r3
 800e9b2:	eea7 8a47 	vfms.f32	s16, s14, s14
 800e9b6:	ee70 7a07 	vadd.f32	s15, s0, s14
 800e9ba:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e9be:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800e9c2:	eddf 7a07 	vldr	s15, [pc, #28]	; 800e9e0 <__ieee754_asinf+0x18c>
 800e9c6:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800e9ca:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800e9ce:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800ea1c <__ieee754_asinf+0x1c8>
 800e9d2:	eeb0 6a40 	vmov.f32	s12, s0
 800e9d6:	eea7 6a66 	vfms.f32	s12, s14, s13
 800e9da:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800e9de:	e7aa      	b.n	800e936 <__ieee754_asinf+0xe2>
 800e9e0:	b33bbd2e 	.word	0xb33bbd2e
 800e9e4:	3fc90fdb 	.word	0x3fc90fdb
 800e9e8:	7149f2ca 	.word	0x7149f2ca
 800e9ec:	3a4f7f04 	.word	0x3a4f7f04
 800e9f0:	3811ef08 	.word	0x3811ef08
 800e9f4:	3e2aaaab 	.word	0x3e2aaaab
 800e9f8:	bd241146 	.word	0xbd241146
 800e9fc:	3e4e0aa8 	.word	0x3e4e0aa8
 800ea00:	bea6b090 	.word	0xbea6b090
 800ea04:	3d9dc62e 	.word	0x3d9dc62e
 800ea08:	bf303361 	.word	0xbf303361
 800ea0c:	4001572d 	.word	0x4001572d
 800ea10:	c019d139 	.word	0xc019d139
 800ea14:	3f799999 	.word	0x3f799999
 800ea18:	333bbd2e 	.word	0x333bbd2e
 800ea1c:	3f490fdb 	.word	0x3f490fdb

0800ea20 <__ieee754_atan2f>:
 800ea20:	ee10 2a90 	vmov	r2, s1
 800ea24:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800ea28:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800ea2c:	b510      	push	{r4, lr}
 800ea2e:	eef0 7a40 	vmov.f32	s15, s0
 800ea32:	dc06      	bgt.n	800ea42 <__ieee754_atan2f+0x22>
 800ea34:	ee10 0a10 	vmov	r0, s0
 800ea38:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800ea3c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ea40:	dd04      	ble.n	800ea4c <__ieee754_atan2f+0x2c>
 800ea42:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800ea46:	eeb0 0a67 	vmov.f32	s0, s15
 800ea4a:	bd10      	pop	{r4, pc}
 800ea4c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800ea50:	d103      	bne.n	800ea5a <__ieee754_atan2f+0x3a>
 800ea52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea56:	f000 b881 	b.w	800eb5c <atanf>
 800ea5a:	1794      	asrs	r4, r2, #30
 800ea5c:	f004 0402 	and.w	r4, r4, #2
 800ea60:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800ea64:	b93b      	cbnz	r3, 800ea76 <__ieee754_atan2f+0x56>
 800ea66:	2c02      	cmp	r4, #2
 800ea68:	d05c      	beq.n	800eb24 <__ieee754_atan2f+0x104>
 800ea6a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800eb38 <__ieee754_atan2f+0x118>
 800ea6e:	2c03      	cmp	r4, #3
 800ea70:	fe47 7a00 	vseleq.f32	s15, s14, s0
 800ea74:	e7e7      	b.n	800ea46 <__ieee754_atan2f+0x26>
 800ea76:	b939      	cbnz	r1, 800ea88 <__ieee754_atan2f+0x68>
 800ea78:	eddf 7a30 	vldr	s15, [pc, #192]	; 800eb3c <__ieee754_atan2f+0x11c>
 800ea7c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800eb40 <__ieee754_atan2f+0x120>
 800ea80:	2800      	cmp	r0, #0
 800ea82:	fe67 7a87 	vselge.f32	s15, s15, s14
 800ea86:	e7de      	b.n	800ea46 <__ieee754_atan2f+0x26>
 800ea88:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800ea8c:	d110      	bne.n	800eab0 <__ieee754_atan2f+0x90>
 800ea8e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ea92:	f104 34ff 	add.w	r4, r4, #4294967295
 800ea96:	d107      	bne.n	800eaa8 <__ieee754_atan2f+0x88>
 800ea98:	2c02      	cmp	r4, #2
 800ea9a:	d846      	bhi.n	800eb2a <__ieee754_atan2f+0x10a>
 800ea9c:	4b29      	ldr	r3, [pc, #164]	; (800eb44 <__ieee754_atan2f+0x124>)
 800ea9e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800eaa2:	edd3 7a00 	vldr	s15, [r3]
 800eaa6:	e7ce      	b.n	800ea46 <__ieee754_atan2f+0x26>
 800eaa8:	2c02      	cmp	r4, #2
 800eaaa:	d841      	bhi.n	800eb30 <__ieee754_atan2f+0x110>
 800eaac:	4b26      	ldr	r3, [pc, #152]	; (800eb48 <__ieee754_atan2f+0x128>)
 800eaae:	e7f6      	b.n	800ea9e <__ieee754_atan2f+0x7e>
 800eab0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800eab4:	d0e0      	beq.n	800ea78 <__ieee754_atan2f+0x58>
 800eab6:	1a5b      	subs	r3, r3, r1
 800eab8:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800eabc:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800eac0:	da1a      	bge.n	800eaf8 <__ieee754_atan2f+0xd8>
 800eac2:	2a00      	cmp	r2, #0
 800eac4:	da01      	bge.n	800eaca <__ieee754_atan2f+0xaa>
 800eac6:	313c      	adds	r1, #60	; 0x3c
 800eac8:	db19      	blt.n	800eafe <__ieee754_atan2f+0xde>
 800eaca:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800eace:	f7ff fbd7 	bl	800e280 <fabsf>
 800ead2:	f000 f843 	bl	800eb5c <atanf>
 800ead6:	eef0 7a40 	vmov.f32	s15, s0
 800eada:	2c01      	cmp	r4, #1
 800eadc:	d012      	beq.n	800eb04 <__ieee754_atan2f+0xe4>
 800eade:	2c02      	cmp	r4, #2
 800eae0:	d017      	beq.n	800eb12 <__ieee754_atan2f+0xf2>
 800eae2:	2c00      	cmp	r4, #0
 800eae4:	d0af      	beq.n	800ea46 <__ieee754_atan2f+0x26>
 800eae6:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800eb4c <__ieee754_atan2f+0x12c>
 800eaea:	ee77 7a87 	vadd.f32	s15, s15, s14
 800eaee:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800eb50 <__ieee754_atan2f+0x130>
 800eaf2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800eaf6:	e7a6      	b.n	800ea46 <__ieee754_atan2f+0x26>
 800eaf8:	eddf 7a10 	vldr	s15, [pc, #64]	; 800eb3c <__ieee754_atan2f+0x11c>
 800eafc:	e7ed      	b.n	800eada <__ieee754_atan2f+0xba>
 800eafe:	eddf 7a15 	vldr	s15, [pc, #84]	; 800eb54 <__ieee754_atan2f+0x134>
 800eb02:	e7ea      	b.n	800eada <__ieee754_atan2f+0xba>
 800eb04:	ee17 3a90 	vmov	r3, s15
 800eb08:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800eb0c:	ee07 3a90 	vmov	s15, r3
 800eb10:	e799      	b.n	800ea46 <__ieee754_atan2f+0x26>
 800eb12:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800eb4c <__ieee754_atan2f+0x12c>
 800eb16:	ee77 7a87 	vadd.f32	s15, s15, s14
 800eb1a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800eb50 <__ieee754_atan2f+0x130>
 800eb1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eb22:	e790      	b.n	800ea46 <__ieee754_atan2f+0x26>
 800eb24:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800eb50 <__ieee754_atan2f+0x130>
 800eb28:	e78d      	b.n	800ea46 <__ieee754_atan2f+0x26>
 800eb2a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800eb58 <__ieee754_atan2f+0x138>
 800eb2e:	e78a      	b.n	800ea46 <__ieee754_atan2f+0x26>
 800eb30:	eddf 7a08 	vldr	s15, [pc, #32]	; 800eb54 <__ieee754_atan2f+0x134>
 800eb34:	e787      	b.n	800ea46 <__ieee754_atan2f+0x26>
 800eb36:	bf00      	nop
 800eb38:	c0490fdb 	.word	0xc0490fdb
 800eb3c:	3fc90fdb 	.word	0x3fc90fdb
 800eb40:	bfc90fdb 	.word	0xbfc90fdb
 800eb44:	08011778 	.word	0x08011778
 800eb48:	08011784 	.word	0x08011784
 800eb4c:	33bbbd2e 	.word	0x33bbbd2e
 800eb50:	40490fdb 	.word	0x40490fdb
 800eb54:	00000000 	.word	0x00000000
 800eb58:	3f490fdb 	.word	0x3f490fdb

0800eb5c <atanf>:
 800eb5c:	b538      	push	{r3, r4, r5, lr}
 800eb5e:	ee10 5a10 	vmov	r5, s0
 800eb62:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800eb66:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800eb6a:	eef0 7a40 	vmov.f32	s15, s0
 800eb6e:	db0f      	blt.n	800eb90 <atanf+0x34>
 800eb70:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800eb74:	dd04      	ble.n	800eb80 <atanf+0x24>
 800eb76:	ee70 7a00 	vadd.f32	s15, s0, s0
 800eb7a:	eeb0 0a67 	vmov.f32	s0, s15
 800eb7e:	bd38      	pop	{r3, r4, r5, pc}
 800eb80:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800ecb8 <atanf+0x15c>
 800eb84:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800ecbc <atanf+0x160>
 800eb88:	2d00      	cmp	r5, #0
 800eb8a:	fe77 7a87 	vselgt.f32	s15, s15, s14
 800eb8e:	e7f4      	b.n	800eb7a <atanf+0x1e>
 800eb90:	4b4b      	ldr	r3, [pc, #300]	; (800ecc0 <atanf+0x164>)
 800eb92:	429c      	cmp	r4, r3
 800eb94:	dc10      	bgt.n	800ebb8 <atanf+0x5c>
 800eb96:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800eb9a:	da0a      	bge.n	800ebb2 <atanf+0x56>
 800eb9c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800ecc4 <atanf+0x168>
 800eba0:	ee30 7a07 	vadd.f32	s14, s0, s14
 800eba4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eba8:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800ebac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebb0:	dce3      	bgt.n	800eb7a <atanf+0x1e>
 800ebb2:	f04f 33ff 	mov.w	r3, #4294967295
 800ebb6:	e013      	b.n	800ebe0 <atanf+0x84>
 800ebb8:	f7ff fb62 	bl	800e280 <fabsf>
 800ebbc:	4b42      	ldr	r3, [pc, #264]	; (800ecc8 <atanf+0x16c>)
 800ebbe:	429c      	cmp	r4, r3
 800ebc0:	dc4f      	bgt.n	800ec62 <atanf+0x106>
 800ebc2:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800ebc6:	429c      	cmp	r4, r3
 800ebc8:	dc41      	bgt.n	800ec4e <atanf+0xf2>
 800ebca:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800ebce:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ebd2:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ebdc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ebe0:	1c5a      	adds	r2, r3, #1
 800ebe2:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800ebe6:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800eccc <atanf+0x170>
 800ebea:	eddf 5a39 	vldr	s11, [pc, #228]	; 800ecd0 <atanf+0x174>
 800ebee:	ed9f 5a39 	vldr	s10, [pc, #228]	; 800ecd4 <atanf+0x178>
 800ebf2:	ee66 6a06 	vmul.f32	s13, s12, s12
 800ebf6:	eee6 5a87 	vfma.f32	s11, s13, s14
 800ebfa:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800ecd8 <atanf+0x17c>
 800ebfe:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ec02:	eddf 5a36 	vldr	s11, [pc, #216]	; 800ecdc <atanf+0x180>
 800ec06:	eee7 5a26 	vfma.f32	s11, s14, s13
 800ec0a:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800ece0 <atanf+0x184>
 800ec0e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ec12:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ece4 <atanf+0x188>
 800ec16:	eee7 5a26 	vfma.f32	s11, s14, s13
 800ec1a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800ece8 <atanf+0x18c>
 800ec1e:	eea6 5a87 	vfma.f32	s10, s13, s14
 800ec22:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800ecec <atanf+0x190>
 800ec26:	eea5 7a26 	vfma.f32	s14, s10, s13
 800ec2a:	ed9f 5a31 	vldr	s10, [pc, #196]	; 800ecf0 <atanf+0x194>
 800ec2e:	eea7 5a26 	vfma.f32	s10, s14, s13
 800ec32:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800ecf4 <atanf+0x198>
 800ec36:	eea5 7a26 	vfma.f32	s14, s10, s13
 800ec3a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ec3e:	eea5 7a86 	vfma.f32	s14, s11, s12
 800ec42:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ec46:	d121      	bne.n	800ec8c <atanf+0x130>
 800ec48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ec4c:	e795      	b.n	800eb7a <atanf+0x1e>
 800ec4e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ec52:	ee30 7a67 	vsub.f32	s14, s0, s15
 800ec56:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ec5a:	2301      	movs	r3, #1
 800ec5c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ec60:	e7be      	b.n	800ebe0 <atanf+0x84>
 800ec62:	4b25      	ldr	r3, [pc, #148]	; (800ecf8 <atanf+0x19c>)
 800ec64:	429c      	cmp	r4, r3
 800ec66:	dc0b      	bgt.n	800ec80 <atanf+0x124>
 800ec68:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800ec6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ec70:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ec74:	2302      	movs	r3, #2
 800ec76:	ee70 6a67 	vsub.f32	s13, s0, s15
 800ec7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ec7e:	e7af      	b.n	800ebe0 <atanf+0x84>
 800ec80:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ec84:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ec88:	2303      	movs	r3, #3
 800ec8a:	e7a9      	b.n	800ebe0 <atanf+0x84>
 800ec8c:	4a1b      	ldr	r2, [pc, #108]	; (800ecfc <atanf+0x1a0>)
 800ec8e:	491c      	ldr	r1, [pc, #112]	; (800ed00 <atanf+0x1a4>)
 800ec90:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ec94:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800ec98:	edd3 6a00 	vldr	s13, [r3]
 800ec9c:	ee37 7a66 	vsub.f32	s14, s14, s13
 800eca0:	2d00      	cmp	r5, #0
 800eca2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800eca6:	edd2 7a00 	vldr	s15, [r2]
 800ecaa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ecae:	bfb8      	it	lt
 800ecb0:	eef1 7a67 	vneglt.f32	s15, s15
 800ecb4:	e761      	b.n	800eb7a <atanf+0x1e>
 800ecb6:	bf00      	nop
 800ecb8:	3fc90fdb 	.word	0x3fc90fdb
 800ecbc:	bfc90fdb 	.word	0xbfc90fdb
 800ecc0:	3edfffff 	.word	0x3edfffff
 800ecc4:	7149f2ca 	.word	0x7149f2ca
 800ecc8:	3f97ffff 	.word	0x3f97ffff
 800eccc:	3c8569d7 	.word	0x3c8569d7
 800ecd0:	3d4bda59 	.word	0x3d4bda59
 800ecd4:	bd6ef16b 	.word	0xbd6ef16b
 800ecd8:	3d886b35 	.word	0x3d886b35
 800ecdc:	3dba2e6e 	.word	0x3dba2e6e
 800ece0:	3e124925 	.word	0x3e124925
 800ece4:	3eaaaaab 	.word	0x3eaaaaab
 800ece8:	bd15a221 	.word	0xbd15a221
 800ecec:	bd9d8795 	.word	0xbd9d8795
 800ecf0:	bde38e38 	.word	0xbde38e38
 800ecf4:	be4ccccd 	.word	0xbe4ccccd
 800ecf8:	401bffff 	.word	0x401bffff
 800ecfc:	08011790 	.word	0x08011790
 800ed00:	080117a0 	.word	0x080117a0

0800ed04 <__ieee754_sqrt>:
 800ed04:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800ed08:	4770      	bx	lr

0800ed0a <__cvt>:
 800ed0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed0c:	ed2d 8b02 	vpush	{d8}
 800ed10:	eeb0 8b40 	vmov.f64	d8, d0
 800ed14:	b085      	sub	sp, #20
 800ed16:	4617      	mov	r7, r2
 800ed18:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800ed1a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ed1c:	ee18 2a90 	vmov	r2, s17
 800ed20:	f025 0520 	bic.w	r5, r5, #32
 800ed24:	2a00      	cmp	r2, #0
 800ed26:	bfb6      	itet	lt
 800ed28:	222d      	movlt	r2, #45	; 0x2d
 800ed2a:	2200      	movge	r2, #0
 800ed2c:	eeb1 8b40 	vneglt.f64	d8, d0
 800ed30:	2d46      	cmp	r5, #70	; 0x46
 800ed32:	460c      	mov	r4, r1
 800ed34:	701a      	strb	r2, [r3, #0]
 800ed36:	d004      	beq.n	800ed42 <__cvt+0x38>
 800ed38:	2d45      	cmp	r5, #69	; 0x45
 800ed3a:	d100      	bne.n	800ed3e <__cvt+0x34>
 800ed3c:	3401      	adds	r4, #1
 800ed3e:	2102      	movs	r1, #2
 800ed40:	e000      	b.n	800ed44 <__cvt+0x3a>
 800ed42:	2103      	movs	r1, #3
 800ed44:	ab03      	add	r3, sp, #12
 800ed46:	9301      	str	r3, [sp, #4]
 800ed48:	ab02      	add	r3, sp, #8
 800ed4a:	9300      	str	r3, [sp, #0]
 800ed4c:	4622      	mov	r2, r4
 800ed4e:	4633      	mov	r3, r6
 800ed50:	eeb0 0b48 	vmov.f64	d0, d8
 800ed54:	f000 fe44 	bl	800f9e0 <_dtoa_r>
 800ed58:	2d47      	cmp	r5, #71	; 0x47
 800ed5a:	d101      	bne.n	800ed60 <__cvt+0x56>
 800ed5c:	07fb      	lsls	r3, r7, #31
 800ed5e:	d51a      	bpl.n	800ed96 <__cvt+0x8c>
 800ed60:	2d46      	cmp	r5, #70	; 0x46
 800ed62:	eb00 0204 	add.w	r2, r0, r4
 800ed66:	d10c      	bne.n	800ed82 <__cvt+0x78>
 800ed68:	7803      	ldrb	r3, [r0, #0]
 800ed6a:	2b30      	cmp	r3, #48	; 0x30
 800ed6c:	d107      	bne.n	800ed7e <__cvt+0x74>
 800ed6e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ed72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed76:	bf1c      	itt	ne
 800ed78:	f1c4 0401 	rsbne	r4, r4, #1
 800ed7c:	6034      	strne	r4, [r6, #0]
 800ed7e:	6833      	ldr	r3, [r6, #0]
 800ed80:	441a      	add	r2, r3
 800ed82:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ed86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed8a:	bf08      	it	eq
 800ed8c:	9203      	streq	r2, [sp, #12]
 800ed8e:	2130      	movs	r1, #48	; 0x30
 800ed90:	9b03      	ldr	r3, [sp, #12]
 800ed92:	4293      	cmp	r3, r2
 800ed94:	d307      	bcc.n	800eda6 <__cvt+0x9c>
 800ed96:	9b03      	ldr	r3, [sp, #12]
 800ed98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ed9a:	1a1b      	subs	r3, r3, r0
 800ed9c:	6013      	str	r3, [r2, #0]
 800ed9e:	b005      	add	sp, #20
 800eda0:	ecbd 8b02 	vpop	{d8}
 800eda4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eda6:	1c5c      	adds	r4, r3, #1
 800eda8:	9403      	str	r4, [sp, #12]
 800edaa:	7019      	strb	r1, [r3, #0]
 800edac:	e7f0      	b.n	800ed90 <__cvt+0x86>

0800edae <__exponent>:
 800edae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800edb0:	4603      	mov	r3, r0
 800edb2:	2900      	cmp	r1, #0
 800edb4:	bfb8      	it	lt
 800edb6:	4249      	neglt	r1, r1
 800edb8:	f803 2b02 	strb.w	r2, [r3], #2
 800edbc:	bfb4      	ite	lt
 800edbe:	222d      	movlt	r2, #45	; 0x2d
 800edc0:	222b      	movge	r2, #43	; 0x2b
 800edc2:	2909      	cmp	r1, #9
 800edc4:	7042      	strb	r2, [r0, #1]
 800edc6:	dd2a      	ble.n	800ee1e <__exponent+0x70>
 800edc8:	f10d 0207 	add.w	r2, sp, #7
 800edcc:	4617      	mov	r7, r2
 800edce:	260a      	movs	r6, #10
 800edd0:	4694      	mov	ip, r2
 800edd2:	fb91 f5f6 	sdiv	r5, r1, r6
 800edd6:	fb06 1415 	mls	r4, r6, r5, r1
 800edda:	3430      	adds	r4, #48	; 0x30
 800eddc:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800ede0:	460c      	mov	r4, r1
 800ede2:	2c63      	cmp	r4, #99	; 0x63
 800ede4:	f102 32ff 	add.w	r2, r2, #4294967295
 800ede8:	4629      	mov	r1, r5
 800edea:	dcf1      	bgt.n	800edd0 <__exponent+0x22>
 800edec:	3130      	adds	r1, #48	; 0x30
 800edee:	f1ac 0402 	sub.w	r4, ip, #2
 800edf2:	f802 1c01 	strb.w	r1, [r2, #-1]
 800edf6:	1c41      	adds	r1, r0, #1
 800edf8:	4622      	mov	r2, r4
 800edfa:	42ba      	cmp	r2, r7
 800edfc:	d30a      	bcc.n	800ee14 <__exponent+0x66>
 800edfe:	f10d 0209 	add.w	r2, sp, #9
 800ee02:	eba2 020c 	sub.w	r2, r2, ip
 800ee06:	42bc      	cmp	r4, r7
 800ee08:	bf88      	it	hi
 800ee0a:	2200      	movhi	r2, #0
 800ee0c:	4413      	add	r3, r2
 800ee0e:	1a18      	subs	r0, r3, r0
 800ee10:	b003      	add	sp, #12
 800ee12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee14:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ee18:	f801 5f01 	strb.w	r5, [r1, #1]!
 800ee1c:	e7ed      	b.n	800edfa <__exponent+0x4c>
 800ee1e:	2330      	movs	r3, #48	; 0x30
 800ee20:	3130      	adds	r1, #48	; 0x30
 800ee22:	7083      	strb	r3, [r0, #2]
 800ee24:	70c1      	strb	r1, [r0, #3]
 800ee26:	1d03      	adds	r3, r0, #4
 800ee28:	e7f1      	b.n	800ee0e <__exponent+0x60>
 800ee2a:	0000      	movs	r0, r0
 800ee2c:	0000      	movs	r0, r0
	...

0800ee30 <_printf_float>:
 800ee30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee34:	b08b      	sub	sp, #44	; 0x2c
 800ee36:	460c      	mov	r4, r1
 800ee38:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800ee3c:	4616      	mov	r6, r2
 800ee3e:	461f      	mov	r7, r3
 800ee40:	4605      	mov	r5, r0
 800ee42:	f000 fcbf 	bl	800f7c4 <_localeconv_r>
 800ee46:	f8d0 b000 	ldr.w	fp, [r0]
 800ee4a:	4658      	mov	r0, fp
 800ee4c:	f7f1 fa98 	bl	8000380 <strlen>
 800ee50:	2300      	movs	r3, #0
 800ee52:	9308      	str	r3, [sp, #32]
 800ee54:	f8d8 3000 	ldr.w	r3, [r8]
 800ee58:	f894 9018 	ldrb.w	r9, [r4, #24]
 800ee5c:	6822      	ldr	r2, [r4, #0]
 800ee5e:	3307      	adds	r3, #7
 800ee60:	f023 0307 	bic.w	r3, r3, #7
 800ee64:	f103 0108 	add.w	r1, r3, #8
 800ee68:	f8c8 1000 	str.w	r1, [r8]
 800ee6c:	ed93 0b00 	vldr	d0, [r3]
 800ee70:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800f0d0 <_printf_float+0x2a0>
 800ee74:	eeb0 7bc0 	vabs.f64	d7, d0
 800ee78:	eeb4 7b46 	vcmp.f64	d7, d6
 800ee7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee80:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800ee84:	4682      	mov	sl, r0
 800ee86:	dd24      	ble.n	800eed2 <_printf_float+0xa2>
 800ee88:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ee8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee90:	d502      	bpl.n	800ee98 <_printf_float+0x68>
 800ee92:	232d      	movs	r3, #45	; 0x2d
 800ee94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee98:	498f      	ldr	r1, [pc, #572]	; (800f0d8 <_printf_float+0x2a8>)
 800ee9a:	4b90      	ldr	r3, [pc, #576]	; (800f0dc <_printf_float+0x2ac>)
 800ee9c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800eea0:	bf94      	ite	ls
 800eea2:	4688      	movls	r8, r1
 800eea4:	4698      	movhi	r8, r3
 800eea6:	2303      	movs	r3, #3
 800eea8:	6123      	str	r3, [r4, #16]
 800eeaa:	f022 0204 	bic.w	r2, r2, #4
 800eeae:	2300      	movs	r3, #0
 800eeb0:	6022      	str	r2, [r4, #0]
 800eeb2:	9304      	str	r3, [sp, #16]
 800eeb4:	9700      	str	r7, [sp, #0]
 800eeb6:	4633      	mov	r3, r6
 800eeb8:	aa09      	add	r2, sp, #36	; 0x24
 800eeba:	4621      	mov	r1, r4
 800eebc:	4628      	mov	r0, r5
 800eebe:	f000 f9d1 	bl	800f264 <_printf_common>
 800eec2:	3001      	adds	r0, #1
 800eec4:	f040 808a 	bne.w	800efdc <_printf_float+0x1ac>
 800eec8:	f04f 30ff 	mov.w	r0, #4294967295
 800eecc:	b00b      	add	sp, #44	; 0x2c
 800eece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eed2:	eeb4 0b40 	vcmp.f64	d0, d0
 800eed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eeda:	d709      	bvc.n	800eef0 <_printf_float+0xc0>
 800eedc:	ee10 3a90 	vmov	r3, s1
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	bfbc      	itt	lt
 800eee4:	232d      	movlt	r3, #45	; 0x2d
 800eee6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800eeea:	497d      	ldr	r1, [pc, #500]	; (800f0e0 <_printf_float+0x2b0>)
 800eeec:	4b7d      	ldr	r3, [pc, #500]	; (800f0e4 <_printf_float+0x2b4>)
 800eeee:	e7d5      	b.n	800ee9c <_printf_float+0x6c>
 800eef0:	6863      	ldr	r3, [r4, #4]
 800eef2:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800eef6:	9104      	str	r1, [sp, #16]
 800eef8:	1c59      	adds	r1, r3, #1
 800eefa:	d13c      	bne.n	800ef76 <_printf_float+0x146>
 800eefc:	2306      	movs	r3, #6
 800eefe:	6063      	str	r3, [r4, #4]
 800ef00:	2300      	movs	r3, #0
 800ef02:	9303      	str	r3, [sp, #12]
 800ef04:	ab08      	add	r3, sp, #32
 800ef06:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800ef0a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ef0e:	ab07      	add	r3, sp, #28
 800ef10:	6861      	ldr	r1, [r4, #4]
 800ef12:	9300      	str	r3, [sp, #0]
 800ef14:	6022      	str	r2, [r4, #0]
 800ef16:	f10d 031b 	add.w	r3, sp, #27
 800ef1a:	4628      	mov	r0, r5
 800ef1c:	f7ff fef5 	bl	800ed0a <__cvt>
 800ef20:	9b04      	ldr	r3, [sp, #16]
 800ef22:	9907      	ldr	r1, [sp, #28]
 800ef24:	2b47      	cmp	r3, #71	; 0x47
 800ef26:	4680      	mov	r8, r0
 800ef28:	d108      	bne.n	800ef3c <_printf_float+0x10c>
 800ef2a:	1cc8      	adds	r0, r1, #3
 800ef2c:	db02      	blt.n	800ef34 <_printf_float+0x104>
 800ef2e:	6863      	ldr	r3, [r4, #4]
 800ef30:	4299      	cmp	r1, r3
 800ef32:	dd41      	ble.n	800efb8 <_printf_float+0x188>
 800ef34:	f1a9 0902 	sub.w	r9, r9, #2
 800ef38:	fa5f f989 	uxtb.w	r9, r9
 800ef3c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ef40:	d820      	bhi.n	800ef84 <_printf_float+0x154>
 800ef42:	3901      	subs	r1, #1
 800ef44:	464a      	mov	r2, r9
 800ef46:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ef4a:	9107      	str	r1, [sp, #28]
 800ef4c:	f7ff ff2f 	bl	800edae <__exponent>
 800ef50:	9a08      	ldr	r2, [sp, #32]
 800ef52:	9004      	str	r0, [sp, #16]
 800ef54:	1813      	adds	r3, r2, r0
 800ef56:	2a01      	cmp	r2, #1
 800ef58:	6123      	str	r3, [r4, #16]
 800ef5a:	dc02      	bgt.n	800ef62 <_printf_float+0x132>
 800ef5c:	6822      	ldr	r2, [r4, #0]
 800ef5e:	07d2      	lsls	r2, r2, #31
 800ef60:	d501      	bpl.n	800ef66 <_printf_float+0x136>
 800ef62:	3301      	adds	r3, #1
 800ef64:	6123      	str	r3, [r4, #16]
 800ef66:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d0a2      	beq.n	800eeb4 <_printf_float+0x84>
 800ef6e:	232d      	movs	r3, #45	; 0x2d
 800ef70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef74:	e79e      	b.n	800eeb4 <_printf_float+0x84>
 800ef76:	9904      	ldr	r1, [sp, #16]
 800ef78:	2947      	cmp	r1, #71	; 0x47
 800ef7a:	d1c1      	bne.n	800ef00 <_printf_float+0xd0>
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d1bf      	bne.n	800ef00 <_printf_float+0xd0>
 800ef80:	2301      	movs	r3, #1
 800ef82:	e7bc      	b.n	800eefe <_printf_float+0xce>
 800ef84:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800ef88:	d118      	bne.n	800efbc <_printf_float+0x18c>
 800ef8a:	2900      	cmp	r1, #0
 800ef8c:	6863      	ldr	r3, [r4, #4]
 800ef8e:	dd0b      	ble.n	800efa8 <_printf_float+0x178>
 800ef90:	6121      	str	r1, [r4, #16]
 800ef92:	b913      	cbnz	r3, 800ef9a <_printf_float+0x16a>
 800ef94:	6822      	ldr	r2, [r4, #0]
 800ef96:	07d0      	lsls	r0, r2, #31
 800ef98:	d502      	bpl.n	800efa0 <_printf_float+0x170>
 800ef9a:	3301      	adds	r3, #1
 800ef9c:	440b      	add	r3, r1
 800ef9e:	6123      	str	r3, [r4, #16]
 800efa0:	2300      	movs	r3, #0
 800efa2:	65a1      	str	r1, [r4, #88]	; 0x58
 800efa4:	9304      	str	r3, [sp, #16]
 800efa6:	e7de      	b.n	800ef66 <_printf_float+0x136>
 800efa8:	b913      	cbnz	r3, 800efb0 <_printf_float+0x180>
 800efaa:	6822      	ldr	r2, [r4, #0]
 800efac:	07d2      	lsls	r2, r2, #31
 800efae:	d501      	bpl.n	800efb4 <_printf_float+0x184>
 800efb0:	3302      	adds	r3, #2
 800efb2:	e7f4      	b.n	800ef9e <_printf_float+0x16e>
 800efb4:	2301      	movs	r3, #1
 800efb6:	e7f2      	b.n	800ef9e <_printf_float+0x16e>
 800efb8:	f04f 0967 	mov.w	r9, #103	; 0x67
 800efbc:	9b08      	ldr	r3, [sp, #32]
 800efbe:	4299      	cmp	r1, r3
 800efc0:	db05      	blt.n	800efce <_printf_float+0x19e>
 800efc2:	6823      	ldr	r3, [r4, #0]
 800efc4:	6121      	str	r1, [r4, #16]
 800efc6:	07d8      	lsls	r0, r3, #31
 800efc8:	d5ea      	bpl.n	800efa0 <_printf_float+0x170>
 800efca:	1c4b      	adds	r3, r1, #1
 800efcc:	e7e7      	b.n	800ef9e <_printf_float+0x16e>
 800efce:	2900      	cmp	r1, #0
 800efd0:	bfd4      	ite	le
 800efd2:	f1c1 0202 	rsble	r2, r1, #2
 800efd6:	2201      	movgt	r2, #1
 800efd8:	4413      	add	r3, r2
 800efda:	e7e0      	b.n	800ef9e <_printf_float+0x16e>
 800efdc:	6823      	ldr	r3, [r4, #0]
 800efde:	055a      	lsls	r2, r3, #21
 800efe0:	d407      	bmi.n	800eff2 <_printf_float+0x1c2>
 800efe2:	6923      	ldr	r3, [r4, #16]
 800efe4:	4642      	mov	r2, r8
 800efe6:	4631      	mov	r1, r6
 800efe8:	4628      	mov	r0, r5
 800efea:	47b8      	blx	r7
 800efec:	3001      	adds	r0, #1
 800efee:	d12a      	bne.n	800f046 <_printf_float+0x216>
 800eff0:	e76a      	b.n	800eec8 <_printf_float+0x98>
 800eff2:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800eff6:	f240 80e0 	bls.w	800f1ba <_printf_float+0x38a>
 800effa:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800effe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f006:	d133      	bne.n	800f070 <_printf_float+0x240>
 800f008:	4a37      	ldr	r2, [pc, #220]	; (800f0e8 <_printf_float+0x2b8>)
 800f00a:	2301      	movs	r3, #1
 800f00c:	4631      	mov	r1, r6
 800f00e:	4628      	mov	r0, r5
 800f010:	47b8      	blx	r7
 800f012:	3001      	adds	r0, #1
 800f014:	f43f af58 	beq.w	800eec8 <_printf_float+0x98>
 800f018:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800f01c:	429a      	cmp	r2, r3
 800f01e:	db02      	blt.n	800f026 <_printf_float+0x1f6>
 800f020:	6823      	ldr	r3, [r4, #0]
 800f022:	07d8      	lsls	r0, r3, #31
 800f024:	d50f      	bpl.n	800f046 <_printf_float+0x216>
 800f026:	4653      	mov	r3, sl
 800f028:	465a      	mov	r2, fp
 800f02a:	4631      	mov	r1, r6
 800f02c:	4628      	mov	r0, r5
 800f02e:	47b8      	blx	r7
 800f030:	3001      	adds	r0, #1
 800f032:	f43f af49 	beq.w	800eec8 <_printf_float+0x98>
 800f036:	f04f 0800 	mov.w	r8, #0
 800f03a:	f104 091a 	add.w	r9, r4, #26
 800f03e:	9b08      	ldr	r3, [sp, #32]
 800f040:	3b01      	subs	r3, #1
 800f042:	4543      	cmp	r3, r8
 800f044:	dc09      	bgt.n	800f05a <_printf_float+0x22a>
 800f046:	6823      	ldr	r3, [r4, #0]
 800f048:	079b      	lsls	r3, r3, #30
 800f04a:	f100 8106 	bmi.w	800f25a <_printf_float+0x42a>
 800f04e:	68e0      	ldr	r0, [r4, #12]
 800f050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f052:	4298      	cmp	r0, r3
 800f054:	bfb8      	it	lt
 800f056:	4618      	movlt	r0, r3
 800f058:	e738      	b.n	800eecc <_printf_float+0x9c>
 800f05a:	2301      	movs	r3, #1
 800f05c:	464a      	mov	r2, r9
 800f05e:	4631      	mov	r1, r6
 800f060:	4628      	mov	r0, r5
 800f062:	47b8      	blx	r7
 800f064:	3001      	adds	r0, #1
 800f066:	f43f af2f 	beq.w	800eec8 <_printf_float+0x98>
 800f06a:	f108 0801 	add.w	r8, r8, #1
 800f06e:	e7e6      	b.n	800f03e <_printf_float+0x20e>
 800f070:	9b07      	ldr	r3, [sp, #28]
 800f072:	2b00      	cmp	r3, #0
 800f074:	dc3a      	bgt.n	800f0ec <_printf_float+0x2bc>
 800f076:	4a1c      	ldr	r2, [pc, #112]	; (800f0e8 <_printf_float+0x2b8>)
 800f078:	2301      	movs	r3, #1
 800f07a:	4631      	mov	r1, r6
 800f07c:	4628      	mov	r0, r5
 800f07e:	47b8      	blx	r7
 800f080:	3001      	adds	r0, #1
 800f082:	f43f af21 	beq.w	800eec8 <_printf_float+0x98>
 800f086:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800f08a:	4313      	orrs	r3, r2
 800f08c:	d102      	bne.n	800f094 <_printf_float+0x264>
 800f08e:	6823      	ldr	r3, [r4, #0]
 800f090:	07d9      	lsls	r1, r3, #31
 800f092:	d5d8      	bpl.n	800f046 <_printf_float+0x216>
 800f094:	4653      	mov	r3, sl
 800f096:	465a      	mov	r2, fp
 800f098:	4631      	mov	r1, r6
 800f09a:	4628      	mov	r0, r5
 800f09c:	47b8      	blx	r7
 800f09e:	3001      	adds	r0, #1
 800f0a0:	f43f af12 	beq.w	800eec8 <_printf_float+0x98>
 800f0a4:	f04f 0900 	mov.w	r9, #0
 800f0a8:	f104 0a1a 	add.w	sl, r4, #26
 800f0ac:	9b07      	ldr	r3, [sp, #28]
 800f0ae:	425b      	negs	r3, r3
 800f0b0:	454b      	cmp	r3, r9
 800f0b2:	dc01      	bgt.n	800f0b8 <_printf_float+0x288>
 800f0b4:	9b08      	ldr	r3, [sp, #32]
 800f0b6:	e795      	b.n	800efe4 <_printf_float+0x1b4>
 800f0b8:	2301      	movs	r3, #1
 800f0ba:	4652      	mov	r2, sl
 800f0bc:	4631      	mov	r1, r6
 800f0be:	4628      	mov	r0, r5
 800f0c0:	47b8      	blx	r7
 800f0c2:	3001      	adds	r0, #1
 800f0c4:	f43f af00 	beq.w	800eec8 <_printf_float+0x98>
 800f0c8:	f109 0901 	add.w	r9, r9, #1
 800f0cc:	e7ee      	b.n	800f0ac <_printf_float+0x27c>
 800f0ce:	bf00      	nop
 800f0d0:	ffffffff 	.word	0xffffffff
 800f0d4:	7fefffff 	.word	0x7fefffff
 800f0d8:	080117b0 	.word	0x080117b0
 800f0dc:	080117b4 	.word	0x080117b4
 800f0e0:	080117b8 	.word	0x080117b8
 800f0e4:	080117bc 	.word	0x080117bc
 800f0e8:	080117c0 	.word	0x080117c0
 800f0ec:	9a08      	ldr	r2, [sp, #32]
 800f0ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f0f0:	429a      	cmp	r2, r3
 800f0f2:	bfa8      	it	ge
 800f0f4:	461a      	movge	r2, r3
 800f0f6:	2a00      	cmp	r2, #0
 800f0f8:	4691      	mov	r9, r2
 800f0fa:	dc38      	bgt.n	800f16e <_printf_float+0x33e>
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	9305      	str	r3, [sp, #20]
 800f100:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f104:	f104 021a 	add.w	r2, r4, #26
 800f108:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f10a:	9905      	ldr	r1, [sp, #20]
 800f10c:	9304      	str	r3, [sp, #16]
 800f10e:	eba3 0309 	sub.w	r3, r3, r9
 800f112:	428b      	cmp	r3, r1
 800f114:	dc33      	bgt.n	800f17e <_printf_float+0x34e>
 800f116:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800f11a:	429a      	cmp	r2, r3
 800f11c:	db3c      	blt.n	800f198 <_printf_float+0x368>
 800f11e:	6823      	ldr	r3, [r4, #0]
 800f120:	07da      	lsls	r2, r3, #31
 800f122:	d439      	bmi.n	800f198 <_printf_float+0x368>
 800f124:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800f128:	eba2 0903 	sub.w	r9, r2, r3
 800f12c:	9b04      	ldr	r3, [sp, #16]
 800f12e:	1ad2      	subs	r2, r2, r3
 800f130:	4591      	cmp	r9, r2
 800f132:	bfa8      	it	ge
 800f134:	4691      	movge	r9, r2
 800f136:	f1b9 0f00 	cmp.w	r9, #0
 800f13a:	dc35      	bgt.n	800f1a8 <_printf_float+0x378>
 800f13c:	f04f 0800 	mov.w	r8, #0
 800f140:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f144:	f104 0a1a 	add.w	sl, r4, #26
 800f148:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800f14c:	1a9b      	subs	r3, r3, r2
 800f14e:	eba3 0309 	sub.w	r3, r3, r9
 800f152:	4543      	cmp	r3, r8
 800f154:	f77f af77 	ble.w	800f046 <_printf_float+0x216>
 800f158:	2301      	movs	r3, #1
 800f15a:	4652      	mov	r2, sl
 800f15c:	4631      	mov	r1, r6
 800f15e:	4628      	mov	r0, r5
 800f160:	47b8      	blx	r7
 800f162:	3001      	adds	r0, #1
 800f164:	f43f aeb0 	beq.w	800eec8 <_printf_float+0x98>
 800f168:	f108 0801 	add.w	r8, r8, #1
 800f16c:	e7ec      	b.n	800f148 <_printf_float+0x318>
 800f16e:	4613      	mov	r3, r2
 800f170:	4631      	mov	r1, r6
 800f172:	4642      	mov	r2, r8
 800f174:	4628      	mov	r0, r5
 800f176:	47b8      	blx	r7
 800f178:	3001      	adds	r0, #1
 800f17a:	d1bf      	bne.n	800f0fc <_printf_float+0x2cc>
 800f17c:	e6a4      	b.n	800eec8 <_printf_float+0x98>
 800f17e:	2301      	movs	r3, #1
 800f180:	4631      	mov	r1, r6
 800f182:	4628      	mov	r0, r5
 800f184:	9204      	str	r2, [sp, #16]
 800f186:	47b8      	blx	r7
 800f188:	3001      	adds	r0, #1
 800f18a:	f43f ae9d 	beq.w	800eec8 <_printf_float+0x98>
 800f18e:	9b05      	ldr	r3, [sp, #20]
 800f190:	9a04      	ldr	r2, [sp, #16]
 800f192:	3301      	adds	r3, #1
 800f194:	9305      	str	r3, [sp, #20]
 800f196:	e7b7      	b.n	800f108 <_printf_float+0x2d8>
 800f198:	4653      	mov	r3, sl
 800f19a:	465a      	mov	r2, fp
 800f19c:	4631      	mov	r1, r6
 800f19e:	4628      	mov	r0, r5
 800f1a0:	47b8      	blx	r7
 800f1a2:	3001      	adds	r0, #1
 800f1a4:	d1be      	bne.n	800f124 <_printf_float+0x2f4>
 800f1a6:	e68f      	b.n	800eec8 <_printf_float+0x98>
 800f1a8:	9a04      	ldr	r2, [sp, #16]
 800f1aa:	464b      	mov	r3, r9
 800f1ac:	4442      	add	r2, r8
 800f1ae:	4631      	mov	r1, r6
 800f1b0:	4628      	mov	r0, r5
 800f1b2:	47b8      	blx	r7
 800f1b4:	3001      	adds	r0, #1
 800f1b6:	d1c1      	bne.n	800f13c <_printf_float+0x30c>
 800f1b8:	e686      	b.n	800eec8 <_printf_float+0x98>
 800f1ba:	9a08      	ldr	r2, [sp, #32]
 800f1bc:	2a01      	cmp	r2, #1
 800f1be:	dc01      	bgt.n	800f1c4 <_printf_float+0x394>
 800f1c0:	07db      	lsls	r3, r3, #31
 800f1c2:	d537      	bpl.n	800f234 <_printf_float+0x404>
 800f1c4:	2301      	movs	r3, #1
 800f1c6:	4642      	mov	r2, r8
 800f1c8:	4631      	mov	r1, r6
 800f1ca:	4628      	mov	r0, r5
 800f1cc:	47b8      	blx	r7
 800f1ce:	3001      	adds	r0, #1
 800f1d0:	f43f ae7a 	beq.w	800eec8 <_printf_float+0x98>
 800f1d4:	4653      	mov	r3, sl
 800f1d6:	465a      	mov	r2, fp
 800f1d8:	4631      	mov	r1, r6
 800f1da:	4628      	mov	r0, r5
 800f1dc:	47b8      	blx	r7
 800f1de:	3001      	adds	r0, #1
 800f1e0:	f43f ae72 	beq.w	800eec8 <_printf_float+0x98>
 800f1e4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800f1e8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f1ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1f0:	9b08      	ldr	r3, [sp, #32]
 800f1f2:	d01a      	beq.n	800f22a <_printf_float+0x3fa>
 800f1f4:	3b01      	subs	r3, #1
 800f1f6:	f108 0201 	add.w	r2, r8, #1
 800f1fa:	4631      	mov	r1, r6
 800f1fc:	4628      	mov	r0, r5
 800f1fe:	47b8      	blx	r7
 800f200:	3001      	adds	r0, #1
 800f202:	d10e      	bne.n	800f222 <_printf_float+0x3f2>
 800f204:	e660      	b.n	800eec8 <_printf_float+0x98>
 800f206:	2301      	movs	r3, #1
 800f208:	464a      	mov	r2, r9
 800f20a:	4631      	mov	r1, r6
 800f20c:	4628      	mov	r0, r5
 800f20e:	47b8      	blx	r7
 800f210:	3001      	adds	r0, #1
 800f212:	f43f ae59 	beq.w	800eec8 <_printf_float+0x98>
 800f216:	f108 0801 	add.w	r8, r8, #1
 800f21a:	9b08      	ldr	r3, [sp, #32]
 800f21c:	3b01      	subs	r3, #1
 800f21e:	4543      	cmp	r3, r8
 800f220:	dcf1      	bgt.n	800f206 <_printf_float+0x3d6>
 800f222:	9b04      	ldr	r3, [sp, #16]
 800f224:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f228:	e6dd      	b.n	800efe6 <_printf_float+0x1b6>
 800f22a:	f04f 0800 	mov.w	r8, #0
 800f22e:	f104 091a 	add.w	r9, r4, #26
 800f232:	e7f2      	b.n	800f21a <_printf_float+0x3ea>
 800f234:	2301      	movs	r3, #1
 800f236:	4642      	mov	r2, r8
 800f238:	e7df      	b.n	800f1fa <_printf_float+0x3ca>
 800f23a:	2301      	movs	r3, #1
 800f23c:	464a      	mov	r2, r9
 800f23e:	4631      	mov	r1, r6
 800f240:	4628      	mov	r0, r5
 800f242:	47b8      	blx	r7
 800f244:	3001      	adds	r0, #1
 800f246:	f43f ae3f 	beq.w	800eec8 <_printf_float+0x98>
 800f24a:	f108 0801 	add.w	r8, r8, #1
 800f24e:	68e3      	ldr	r3, [r4, #12]
 800f250:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f252:	1a5b      	subs	r3, r3, r1
 800f254:	4543      	cmp	r3, r8
 800f256:	dcf0      	bgt.n	800f23a <_printf_float+0x40a>
 800f258:	e6f9      	b.n	800f04e <_printf_float+0x21e>
 800f25a:	f04f 0800 	mov.w	r8, #0
 800f25e:	f104 0919 	add.w	r9, r4, #25
 800f262:	e7f4      	b.n	800f24e <_printf_float+0x41e>

0800f264 <_printf_common>:
 800f264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f268:	4616      	mov	r6, r2
 800f26a:	4699      	mov	r9, r3
 800f26c:	688a      	ldr	r2, [r1, #8]
 800f26e:	690b      	ldr	r3, [r1, #16]
 800f270:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f274:	4293      	cmp	r3, r2
 800f276:	bfb8      	it	lt
 800f278:	4613      	movlt	r3, r2
 800f27a:	6033      	str	r3, [r6, #0]
 800f27c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f280:	4607      	mov	r7, r0
 800f282:	460c      	mov	r4, r1
 800f284:	b10a      	cbz	r2, 800f28a <_printf_common+0x26>
 800f286:	3301      	adds	r3, #1
 800f288:	6033      	str	r3, [r6, #0]
 800f28a:	6823      	ldr	r3, [r4, #0]
 800f28c:	0699      	lsls	r1, r3, #26
 800f28e:	bf42      	ittt	mi
 800f290:	6833      	ldrmi	r3, [r6, #0]
 800f292:	3302      	addmi	r3, #2
 800f294:	6033      	strmi	r3, [r6, #0]
 800f296:	6825      	ldr	r5, [r4, #0]
 800f298:	f015 0506 	ands.w	r5, r5, #6
 800f29c:	d106      	bne.n	800f2ac <_printf_common+0x48>
 800f29e:	f104 0a19 	add.w	sl, r4, #25
 800f2a2:	68e3      	ldr	r3, [r4, #12]
 800f2a4:	6832      	ldr	r2, [r6, #0]
 800f2a6:	1a9b      	subs	r3, r3, r2
 800f2a8:	42ab      	cmp	r3, r5
 800f2aa:	dc26      	bgt.n	800f2fa <_printf_common+0x96>
 800f2ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f2b0:	1e13      	subs	r3, r2, #0
 800f2b2:	6822      	ldr	r2, [r4, #0]
 800f2b4:	bf18      	it	ne
 800f2b6:	2301      	movne	r3, #1
 800f2b8:	0692      	lsls	r2, r2, #26
 800f2ba:	d42b      	bmi.n	800f314 <_printf_common+0xb0>
 800f2bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f2c0:	4649      	mov	r1, r9
 800f2c2:	4638      	mov	r0, r7
 800f2c4:	47c0      	blx	r8
 800f2c6:	3001      	adds	r0, #1
 800f2c8:	d01e      	beq.n	800f308 <_printf_common+0xa4>
 800f2ca:	6823      	ldr	r3, [r4, #0]
 800f2cc:	6922      	ldr	r2, [r4, #16]
 800f2ce:	f003 0306 	and.w	r3, r3, #6
 800f2d2:	2b04      	cmp	r3, #4
 800f2d4:	bf02      	ittt	eq
 800f2d6:	68e5      	ldreq	r5, [r4, #12]
 800f2d8:	6833      	ldreq	r3, [r6, #0]
 800f2da:	1aed      	subeq	r5, r5, r3
 800f2dc:	68a3      	ldr	r3, [r4, #8]
 800f2de:	bf0c      	ite	eq
 800f2e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f2e4:	2500      	movne	r5, #0
 800f2e6:	4293      	cmp	r3, r2
 800f2e8:	bfc4      	itt	gt
 800f2ea:	1a9b      	subgt	r3, r3, r2
 800f2ec:	18ed      	addgt	r5, r5, r3
 800f2ee:	2600      	movs	r6, #0
 800f2f0:	341a      	adds	r4, #26
 800f2f2:	42b5      	cmp	r5, r6
 800f2f4:	d11a      	bne.n	800f32c <_printf_common+0xc8>
 800f2f6:	2000      	movs	r0, #0
 800f2f8:	e008      	b.n	800f30c <_printf_common+0xa8>
 800f2fa:	2301      	movs	r3, #1
 800f2fc:	4652      	mov	r2, sl
 800f2fe:	4649      	mov	r1, r9
 800f300:	4638      	mov	r0, r7
 800f302:	47c0      	blx	r8
 800f304:	3001      	adds	r0, #1
 800f306:	d103      	bne.n	800f310 <_printf_common+0xac>
 800f308:	f04f 30ff 	mov.w	r0, #4294967295
 800f30c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f310:	3501      	adds	r5, #1
 800f312:	e7c6      	b.n	800f2a2 <_printf_common+0x3e>
 800f314:	18e1      	adds	r1, r4, r3
 800f316:	1c5a      	adds	r2, r3, #1
 800f318:	2030      	movs	r0, #48	; 0x30
 800f31a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f31e:	4422      	add	r2, r4
 800f320:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f324:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f328:	3302      	adds	r3, #2
 800f32a:	e7c7      	b.n	800f2bc <_printf_common+0x58>
 800f32c:	2301      	movs	r3, #1
 800f32e:	4622      	mov	r2, r4
 800f330:	4649      	mov	r1, r9
 800f332:	4638      	mov	r0, r7
 800f334:	47c0      	blx	r8
 800f336:	3001      	adds	r0, #1
 800f338:	d0e6      	beq.n	800f308 <_printf_common+0xa4>
 800f33a:	3601      	adds	r6, #1
 800f33c:	e7d9      	b.n	800f2f2 <_printf_common+0x8e>
	...

0800f340 <_printf_i>:
 800f340:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f344:	7e0f      	ldrb	r7, [r1, #24]
 800f346:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f348:	2f78      	cmp	r7, #120	; 0x78
 800f34a:	4691      	mov	r9, r2
 800f34c:	4680      	mov	r8, r0
 800f34e:	460c      	mov	r4, r1
 800f350:	469a      	mov	sl, r3
 800f352:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f356:	d807      	bhi.n	800f368 <_printf_i+0x28>
 800f358:	2f62      	cmp	r7, #98	; 0x62
 800f35a:	d80a      	bhi.n	800f372 <_printf_i+0x32>
 800f35c:	2f00      	cmp	r7, #0
 800f35e:	f000 80d4 	beq.w	800f50a <_printf_i+0x1ca>
 800f362:	2f58      	cmp	r7, #88	; 0x58
 800f364:	f000 80c0 	beq.w	800f4e8 <_printf_i+0x1a8>
 800f368:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f36c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f370:	e03a      	b.n	800f3e8 <_printf_i+0xa8>
 800f372:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f376:	2b15      	cmp	r3, #21
 800f378:	d8f6      	bhi.n	800f368 <_printf_i+0x28>
 800f37a:	a101      	add	r1, pc, #4	; (adr r1, 800f380 <_printf_i+0x40>)
 800f37c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f380:	0800f3d9 	.word	0x0800f3d9
 800f384:	0800f3ed 	.word	0x0800f3ed
 800f388:	0800f369 	.word	0x0800f369
 800f38c:	0800f369 	.word	0x0800f369
 800f390:	0800f369 	.word	0x0800f369
 800f394:	0800f369 	.word	0x0800f369
 800f398:	0800f3ed 	.word	0x0800f3ed
 800f39c:	0800f369 	.word	0x0800f369
 800f3a0:	0800f369 	.word	0x0800f369
 800f3a4:	0800f369 	.word	0x0800f369
 800f3a8:	0800f369 	.word	0x0800f369
 800f3ac:	0800f4f1 	.word	0x0800f4f1
 800f3b0:	0800f419 	.word	0x0800f419
 800f3b4:	0800f4ab 	.word	0x0800f4ab
 800f3b8:	0800f369 	.word	0x0800f369
 800f3bc:	0800f369 	.word	0x0800f369
 800f3c0:	0800f513 	.word	0x0800f513
 800f3c4:	0800f369 	.word	0x0800f369
 800f3c8:	0800f419 	.word	0x0800f419
 800f3cc:	0800f369 	.word	0x0800f369
 800f3d0:	0800f369 	.word	0x0800f369
 800f3d4:	0800f4b3 	.word	0x0800f4b3
 800f3d8:	682b      	ldr	r3, [r5, #0]
 800f3da:	1d1a      	adds	r2, r3, #4
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	602a      	str	r2, [r5, #0]
 800f3e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f3e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f3e8:	2301      	movs	r3, #1
 800f3ea:	e09f      	b.n	800f52c <_printf_i+0x1ec>
 800f3ec:	6820      	ldr	r0, [r4, #0]
 800f3ee:	682b      	ldr	r3, [r5, #0]
 800f3f0:	0607      	lsls	r7, r0, #24
 800f3f2:	f103 0104 	add.w	r1, r3, #4
 800f3f6:	6029      	str	r1, [r5, #0]
 800f3f8:	d501      	bpl.n	800f3fe <_printf_i+0xbe>
 800f3fa:	681e      	ldr	r6, [r3, #0]
 800f3fc:	e003      	b.n	800f406 <_printf_i+0xc6>
 800f3fe:	0646      	lsls	r6, r0, #25
 800f400:	d5fb      	bpl.n	800f3fa <_printf_i+0xba>
 800f402:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f406:	2e00      	cmp	r6, #0
 800f408:	da03      	bge.n	800f412 <_printf_i+0xd2>
 800f40a:	232d      	movs	r3, #45	; 0x2d
 800f40c:	4276      	negs	r6, r6
 800f40e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f412:	485a      	ldr	r0, [pc, #360]	; (800f57c <_printf_i+0x23c>)
 800f414:	230a      	movs	r3, #10
 800f416:	e012      	b.n	800f43e <_printf_i+0xfe>
 800f418:	682b      	ldr	r3, [r5, #0]
 800f41a:	6820      	ldr	r0, [r4, #0]
 800f41c:	1d19      	adds	r1, r3, #4
 800f41e:	6029      	str	r1, [r5, #0]
 800f420:	0605      	lsls	r5, r0, #24
 800f422:	d501      	bpl.n	800f428 <_printf_i+0xe8>
 800f424:	681e      	ldr	r6, [r3, #0]
 800f426:	e002      	b.n	800f42e <_printf_i+0xee>
 800f428:	0641      	lsls	r1, r0, #25
 800f42a:	d5fb      	bpl.n	800f424 <_printf_i+0xe4>
 800f42c:	881e      	ldrh	r6, [r3, #0]
 800f42e:	4853      	ldr	r0, [pc, #332]	; (800f57c <_printf_i+0x23c>)
 800f430:	2f6f      	cmp	r7, #111	; 0x6f
 800f432:	bf0c      	ite	eq
 800f434:	2308      	moveq	r3, #8
 800f436:	230a      	movne	r3, #10
 800f438:	2100      	movs	r1, #0
 800f43a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f43e:	6865      	ldr	r5, [r4, #4]
 800f440:	60a5      	str	r5, [r4, #8]
 800f442:	2d00      	cmp	r5, #0
 800f444:	bfa2      	ittt	ge
 800f446:	6821      	ldrge	r1, [r4, #0]
 800f448:	f021 0104 	bicge.w	r1, r1, #4
 800f44c:	6021      	strge	r1, [r4, #0]
 800f44e:	b90e      	cbnz	r6, 800f454 <_printf_i+0x114>
 800f450:	2d00      	cmp	r5, #0
 800f452:	d04b      	beq.n	800f4ec <_printf_i+0x1ac>
 800f454:	4615      	mov	r5, r2
 800f456:	fbb6 f1f3 	udiv	r1, r6, r3
 800f45a:	fb03 6711 	mls	r7, r3, r1, r6
 800f45e:	5dc7      	ldrb	r7, [r0, r7]
 800f460:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f464:	4637      	mov	r7, r6
 800f466:	42bb      	cmp	r3, r7
 800f468:	460e      	mov	r6, r1
 800f46a:	d9f4      	bls.n	800f456 <_printf_i+0x116>
 800f46c:	2b08      	cmp	r3, #8
 800f46e:	d10b      	bne.n	800f488 <_printf_i+0x148>
 800f470:	6823      	ldr	r3, [r4, #0]
 800f472:	07de      	lsls	r6, r3, #31
 800f474:	d508      	bpl.n	800f488 <_printf_i+0x148>
 800f476:	6923      	ldr	r3, [r4, #16]
 800f478:	6861      	ldr	r1, [r4, #4]
 800f47a:	4299      	cmp	r1, r3
 800f47c:	bfde      	ittt	le
 800f47e:	2330      	movle	r3, #48	; 0x30
 800f480:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f484:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f488:	1b52      	subs	r2, r2, r5
 800f48a:	6122      	str	r2, [r4, #16]
 800f48c:	f8cd a000 	str.w	sl, [sp]
 800f490:	464b      	mov	r3, r9
 800f492:	aa03      	add	r2, sp, #12
 800f494:	4621      	mov	r1, r4
 800f496:	4640      	mov	r0, r8
 800f498:	f7ff fee4 	bl	800f264 <_printf_common>
 800f49c:	3001      	adds	r0, #1
 800f49e:	d14a      	bne.n	800f536 <_printf_i+0x1f6>
 800f4a0:	f04f 30ff 	mov.w	r0, #4294967295
 800f4a4:	b004      	add	sp, #16
 800f4a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4aa:	6823      	ldr	r3, [r4, #0]
 800f4ac:	f043 0320 	orr.w	r3, r3, #32
 800f4b0:	6023      	str	r3, [r4, #0]
 800f4b2:	4833      	ldr	r0, [pc, #204]	; (800f580 <_printf_i+0x240>)
 800f4b4:	2778      	movs	r7, #120	; 0x78
 800f4b6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f4ba:	6823      	ldr	r3, [r4, #0]
 800f4bc:	6829      	ldr	r1, [r5, #0]
 800f4be:	061f      	lsls	r7, r3, #24
 800f4c0:	f851 6b04 	ldr.w	r6, [r1], #4
 800f4c4:	d402      	bmi.n	800f4cc <_printf_i+0x18c>
 800f4c6:	065f      	lsls	r7, r3, #25
 800f4c8:	bf48      	it	mi
 800f4ca:	b2b6      	uxthmi	r6, r6
 800f4cc:	07df      	lsls	r7, r3, #31
 800f4ce:	bf48      	it	mi
 800f4d0:	f043 0320 	orrmi.w	r3, r3, #32
 800f4d4:	6029      	str	r1, [r5, #0]
 800f4d6:	bf48      	it	mi
 800f4d8:	6023      	strmi	r3, [r4, #0]
 800f4da:	b91e      	cbnz	r6, 800f4e4 <_printf_i+0x1a4>
 800f4dc:	6823      	ldr	r3, [r4, #0]
 800f4de:	f023 0320 	bic.w	r3, r3, #32
 800f4e2:	6023      	str	r3, [r4, #0]
 800f4e4:	2310      	movs	r3, #16
 800f4e6:	e7a7      	b.n	800f438 <_printf_i+0xf8>
 800f4e8:	4824      	ldr	r0, [pc, #144]	; (800f57c <_printf_i+0x23c>)
 800f4ea:	e7e4      	b.n	800f4b6 <_printf_i+0x176>
 800f4ec:	4615      	mov	r5, r2
 800f4ee:	e7bd      	b.n	800f46c <_printf_i+0x12c>
 800f4f0:	682b      	ldr	r3, [r5, #0]
 800f4f2:	6826      	ldr	r6, [r4, #0]
 800f4f4:	6961      	ldr	r1, [r4, #20]
 800f4f6:	1d18      	adds	r0, r3, #4
 800f4f8:	6028      	str	r0, [r5, #0]
 800f4fa:	0635      	lsls	r5, r6, #24
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	d501      	bpl.n	800f504 <_printf_i+0x1c4>
 800f500:	6019      	str	r1, [r3, #0]
 800f502:	e002      	b.n	800f50a <_printf_i+0x1ca>
 800f504:	0670      	lsls	r0, r6, #25
 800f506:	d5fb      	bpl.n	800f500 <_printf_i+0x1c0>
 800f508:	8019      	strh	r1, [r3, #0]
 800f50a:	2300      	movs	r3, #0
 800f50c:	6123      	str	r3, [r4, #16]
 800f50e:	4615      	mov	r5, r2
 800f510:	e7bc      	b.n	800f48c <_printf_i+0x14c>
 800f512:	682b      	ldr	r3, [r5, #0]
 800f514:	1d1a      	adds	r2, r3, #4
 800f516:	602a      	str	r2, [r5, #0]
 800f518:	681d      	ldr	r5, [r3, #0]
 800f51a:	6862      	ldr	r2, [r4, #4]
 800f51c:	2100      	movs	r1, #0
 800f51e:	4628      	mov	r0, r5
 800f520:	f7f0 fede 	bl	80002e0 <memchr>
 800f524:	b108      	cbz	r0, 800f52a <_printf_i+0x1ea>
 800f526:	1b40      	subs	r0, r0, r5
 800f528:	6060      	str	r0, [r4, #4]
 800f52a:	6863      	ldr	r3, [r4, #4]
 800f52c:	6123      	str	r3, [r4, #16]
 800f52e:	2300      	movs	r3, #0
 800f530:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f534:	e7aa      	b.n	800f48c <_printf_i+0x14c>
 800f536:	6923      	ldr	r3, [r4, #16]
 800f538:	462a      	mov	r2, r5
 800f53a:	4649      	mov	r1, r9
 800f53c:	4640      	mov	r0, r8
 800f53e:	47d0      	blx	sl
 800f540:	3001      	adds	r0, #1
 800f542:	d0ad      	beq.n	800f4a0 <_printf_i+0x160>
 800f544:	6823      	ldr	r3, [r4, #0]
 800f546:	079b      	lsls	r3, r3, #30
 800f548:	d413      	bmi.n	800f572 <_printf_i+0x232>
 800f54a:	68e0      	ldr	r0, [r4, #12]
 800f54c:	9b03      	ldr	r3, [sp, #12]
 800f54e:	4298      	cmp	r0, r3
 800f550:	bfb8      	it	lt
 800f552:	4618      	movlt	r0, r3
 800f554:	e7a6      	b.n	800f4a4 <_printf_i+0x164>
 800f556:	2301      	movs	r3, #1
 800f558:	4632      	mov	r2, r6
 800f55a:	4649      	mov	r1, r9
 800f55c:	4640      	mov	r0, r8
 800f55e:	47d0      	blx	sl
 800f560:	3001      	adds	r0, #1
 800f562:	d09d      	beq.n	800f4a0 <_printf_i+0x160>
 800f564:	3501      	adds	r5, #1
 800f566:	68e3      	ldr	r3, [r4, #12]
 800f568:	9903      	ldr	r1, [sp, #12]
 800f56a:	1a5b      	subs	r3, r3, r1
 800f56c:	42ab      	cmp	r3, r5
 800f56e:	dcf2      	bgt.n	800f556 <_printf_i+0x216>
 800f570:	e7eb      	b.n	800f54a <_printf_i+0x20a>
 800f572:	2500      	movs	r5, #0
 800f574:	f104 0619 	add.w	r6, r4, #25
 800f578:	e7f5      	b.n	800f566 <_printf_i+0x226>
 800f57a:	bf00      	nop
 800f57c:	080117c2 	.word	0x080117c2
 800f580:	080117d3 	.word	0x080117d3

0800f584 <std>:
 800f584:	2300      	movs	r3, #0
 800f586:	b510      	push	{r4, lr}
 800f588:	4604      	mov	r4, r0
 800f58a:	e9c0 3300 	strd	r3, r3, [r0]
 800f58e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f592:	6083      	str	r3, [r0, #8]
 800f594:	8181      	strh	r1, [r0, #12]
 800f596:	6643      	str	r3, [r0, #100]	; 0x64
 800f598:	81c2      	strh	r2, [r0, #14]
 800f59a:	6183      	str	r3, [r0, #24]
 800f59c:	4619      	mov	r1, r3
 800f59e:	2208      	movs	r2, #8
 800f5a0:	305c      	adds	r0, #92	; 0x5c
 800f5a2:	f000 f906 	bl	800f7b2 <memset>
 800f5a6:	4b0d      	ldr	r3, [pc, #52]	; (800f5dc <std+0x58>)
 800f5a8:	6263      	str	r3, [r4, #36]	; 0x24
 800f5aa:	4b0d      	ldr	r3, [pc, #52]	; (800f5e0 <std+0x5c>)
 800f5ac:	62a3      	str	r3, [r4, #40]	; 0x28
 800f5ae:	4b0d      	ldr	r3, [pc, #52]	; (800f5e4 <std+0x60>)
 800f5b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f5b2:	4b0d      	ldr	r3, [pc, #52]	; (800f5e8 <std+0x64>)
 800f5b4:	6323      	str	r3, [r4, #48]	; 0x30
 800f5b6:	4b0d      	ldr	r3, [pc, #52]	; (800f5ec <std+0x68>)
 800f5b8:	6224      	str	r4, [r4, #32]
 800f5ba:	429c      	cmp	r4, r3
 800f5bc:	d006      	beq.n	800f5cc <std+0x48>
 800f5be:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800f5c2:	4294      	cmp	r4, r2
 800f5c4:	d002      	beq.n	800f5cc <std+0x48>
 800f5c6:	33d0      	adds	r3, #208	; 0xd0
 800f5c8:	429c      	cmp	r4, r3
 800f5ca:	d105      	bne.n	800f5d8 <std+0x54>
 800f5cc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f5d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f5d4:	f000 b96a 	b.w	800f8ac <__retarget_lock_init_recursive>
 800f5d8:	bd10      	pop	{r4, pc}
 800f5da:	bf00      	nop
 800f5dc:	0800f72d 	.word	0x0800f72d
 800f5e0:	0800f74f 	.word	0x0800f74f
 800f5e4:	0800f787 	.word	0x0800f787
 800f5e8:	0800f7ab 	.word	0x0800f7ab
 800f5ec:	240056ec 	.word	0x240056ec

0800f5f0 <stdio_exit_handler>:
 800f5f0:	4a02      	ldr	r2, [pc, #8]	; (800f5fc <stdio_exit_handler+0xc>)
 800f5f2:	4903      	ldr	r1, [pc, #12]	; (800f600 <stdio_exit_handler+0x10>)
 800f5f4:	4803      	ldr	r0, [pc, #12]	; (800f604 <stdio_exit_handler+0x14>)
 800f5f6:	f000 b869 	b.w	800f6cc <_fwalk_sglue>
 800f5fa:	bf00      	nop
 800f5fc:	24000028 	.word	0x24000028
 800f600:	08011145 	.word	0x08011145
 800f604:	24000034 	.word	0x24000034

0800f608 <cleanup_stdio>:
 800f608:	6841      	ldr	r1, [r0, #4]
 800f60a:	4b0c      	ldr	r3, [pc, #48]	; (800f63c <cleanup_stdio+0x34>)
 800f60c:	4299      	cmp	r1, r3
 800f60e:	b510      	push	{r4, lr}
 800f610:	4604      	mov	r4, r0
 800f612:	d001      	beq.n	800f618 <cleanup_stdio+0x10>
 800f614:	f001 fd96 	bl	8011144 <_fflush_r>
 800f618:	68a1      	ldr	r1, [r4, #8]
 800f61a:	4b09      	ldr	r3, [pc, #36]	; (800f640 <cleanup_stdio+0x38>)
 800f61c:	4299      	cmp	r1, r3
 800f61e:	d002      	beq.n	800f626 <cleanup_stdio+0x1e>
 800f620:	4620      	mov	r0, r4
 800f622:	f001 fd8f 	bl	8011144 <_fflush_r>
 800f626:	68e1      	ldr	r1, [r4, #12]
 800f628:	4b06      	ldr	r3, [pc, #24]	; (800f644 <cleanup_stdio+0x3c>)
 800f62a:	4299      	cmp	r1, r3
 800f62c:	d004      	beq.n	800f638 <cleanup_stdio+0x30>
 800f62e:	4620      	mov	r0, r4
 800f630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f634:	f001 bd86 	b.w	8011144 <_fflush_r>
 800f638:	bd10      	pop	{r4, pc}
 800f63a:	bf00      	nop
 800f63c:	240056ec 	.word	0x240056ec
 800f640:	24005754 	.word	0x24005754
 800f644:	240057bc 	.word	0x240057bc

0800f648 <global_stdio_init.part.0>:
 800f648:	b510      	push	{r4, lr}
 800f64a:	4b0b      	ldr	r3, [pc, #44]	; (800f678 <global_stdio_init.part.0+0x30>)
 800f64c:	4c0b      	ldr	r4, [pc, #44]	; (800f67c <global_stdio_init.part.0+0x34>)
 800f64e:	4a0c      	ldr	r2, [pc, #48]	; (800f680 <global_stdio_init.part.0+0x38>)
 800f650:	601a      	str	r2, [r3, #0]
 800f652:	4620      	mov	r0, r4
 800f654:	2200      	movs	r2, #0
 800f656:	2104      	movs	r1, #4
 800f658:	f7ff ff94 	bl	800f584 <std>
 800f65c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f660:	2201      	movs	r2, #1
 800f662:	2109      	movs	r1, #9
 800f664:	f7ff ff8e 	bl	800f584 <std>
 800f668:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800f66c:	2202      	movs	r2, #2
 800f66e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f672:	2112      	movs	r1, #18
 800f674:	f7ff bf86 	b.w	800f584 <std>
 800f678:	24005824 	.word	0x24005824
 800f67c:	240056ec 	.word	0x240056ec
 800f680:	0800f5f1 	.word	0x0800f5f1

0800f684 <__sfp_lock_acquire>:
 800f684:	4801      	ldr	r0, [pc, #4]	; (800f68c <__sfp_lock_acquire+0x8>)
 800f686:	f000 b912 	b.w	800f8ae <__retarget_lock_acquire_recursive>
 800f68a:	bf00      	nop
 800f68c:	2400582d 	.word	0x2400582d

0800f690 <__sfp_lock_release>:
 800f690:	4801      	ldr	r0, [pc, #4]	; (800f698 <__sfp_lock_release+0x8>)
 800f692:	f000 b90d 	b.w	800f8b0 <__retarget_lock_release_recursive>
 800f696:	bf00      	nop
 800f698:	2400582d 	.word	0x2400582d

0800f69c <__sinit>:
 800f69c:	b510      	push	{r4, lr}
 800f69e:	4604      	mov	r4, r0
 800f6a0:	f7ff fff0 	bl	800f684 <__sfp_lock_acquire>
 800f6a4:	6a23      	ldr	r3, [r4, #32]
 800f6a6:	b11b      	cbz	r3, 800f6b0 <__sinit+0x14>
 800f6a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f6ac:	f7ff bff0 	b.w	800f690 <__sfp_lock_release>
 800f6b0:	4b04      	ldr	r3, [pc, #16]	; (800f6c4 <__sinit+0x28>)
 800f6b2:	6223      	str	r3, [r4, #32]
 800f6b4:	4b04      	ldr	r3, [pc, #16]	; (800f6c8 <__sinit+0x2c>)
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d1f5      	bne.n	800f6a8 <__sinit+0xc>
 800f6bc:	f7ff ffc4 	bl	800f648 <global_stdio_init.part.0>
 800f6c0:	e7f2      	b.n	800f6a8 <__sinit+0xc>
 800f6c2:	bf00      	nop
 800f6c4:	0800f609 	.word	0x0800f609
 800f6c8:	24005824 	.word	0x24005824

0800f6cc <_fwalk_sglue>:
 800f6cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f6d0:	4607      	mov	r7, r0
 800f6d2:	4688      	mov	r8, r1
 800f6d4:	4614      	mov	r4, r2
 800f6d6:	2600      	movs	r6, #0
 800f6d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f6dc:	f1b9 0901 	subs.w	r9, r9, #1
 800f6e0:	d505      	bpl.n	800f6ee <_fwalk_sglue+0x22>
 800f6e2:	6824      	ldr	r4, [r4, #0]
 800f6e4:	2c00      	cmp	r4, #0
 800f6e6:	d1f7      	bne.n	800f6d8 <_fwalk_sglue+0xc>
 800f6e8:	4630      	mov	r0, r6
 800f6ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6ee:	89ab      	ldrh	r3, [r5, #12]
 800f6f0:	2b01      	cmp	r3, #1
 800f6f2:	d907      	bls.n	800f704 <_fwalk_sglue+0x38>
 800f6f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f6f8:	3301      	adds	r3, #1
 800f6fa:	d003      	beq.n	800f704 <_fwalk_sglue+0x38>
 800f6fc:	4629      	mov	r1, r5
 800f6fe:	4638      	mov	r0, r7
 800f700:	47c0      	blx	r8
 800f702:	4306      	orrs	r6, r0
 800f704:	3568      	adds	r5, #104	; 0x68
 800f706:	e7e9      	b.n	800f6dc <_fwalk_sglue+0x10>

0800f708 <iprintf>:
 800f708:	b40f      	push	{r0, r1, r2, r3}
 800f70a:	b507      	push	{r0, r1, r2, lr}
 800f70c:	4906      	ldr	r1, [pc, #24]	; (800f728 <iprintf+0x20>)
 800f70e:	ab04      	add	r3, sp, #16
 800f710:	6808      	ldr	r0, [r1, #0]
 800f712:	f853 2b04 	ldr.w	r2, [r3], #4
 800f716:	6881      	ldr	r1, [r0, #8]
 800f718:	9301      	str	r3, [sp, #4]
 800f71a:	f001 fb73 	bl	8010e04 <_vfiprintf_r>
 800f71e:	b003      	add	sp, #12
 800f720:	f85d eb04 	ldr.w	lr, [sp], #4
 800f724:	b004      	add	sp, #16
 800f726:	4770      	bx	lr
 800f728:	24000080 	.word	0x24000080

0800f72c <__sread>:
 800f72c:	b510      	push	{r4, lr}
 800f72e:	460c      	mov	r4, r1
 800f730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f734:	f000 f86c 	bl	800f810 <_read_r>
 800f738:	2800      	cmp	r0, #0
 800f73a:	bfab      	itete	ge
 800f73c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f73e:	89a3      	ldrhlt	r3, [r4, #12]
 800f740:	181b      	addge	r3, r3, r0
 800f742:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f746:	bfac      	ite	ge
 800f748:	6563      	strge	r3, [r4, #84]	; 0x54
 800f74a:	81a3      	strhlt	r3, [r4, #12]
 800f74c:	bd10      	pop	{r4, pc}

0800f74e <__swrite>:
 800f74e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f752:	461f      	mov	r7, r3
 800f754:	898b      	ldrh	r3, [r1, #12]
 800f756:	05db      	lsls	r3, r3, #23
 800f758:	4605      	mov	r5, r0
 800f75a:	460c      	mov	r4, r1
 800f75c:	4616      	mov	r6, r2
 800f75e:	d505      	bpl.n	800f76c <__swrite+0x1e>
 800f760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f764:	2302      	movs	r3, #2
 800f766:	2200      	movs	r2, #0
 800f768:	f000 f840 	bl	800f7ec <_lseek_r>
 800f76c:	89a3      	ldrh	r3, [r4, #12]
 800f76e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f772:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f776:	81a3      	strh	r3, [r4, #12]
 800f778:	4632      	mov	r2, r6
 800f77a:	463b      	mov	r3, r7
 800f77c:	4628      	mov	r0, r5
 800f77e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f782:	f000 b857 	b.w	800f834 <_write_r>

0800f786 <__sseek>:
 800f786:	b510      	push	{r4, lr}
 800f788:	460c      	mov	r4, r1
 800f78a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f78e:	f000 f82d 	bl	800f7ec <_lseek_r>
 800f792:	1c43      	adds	r3, r0, #1
 800f794:	89a3      	ldrh	r3, [r4, #12]
 800f796:	bf15      	itete	ne
 800f798:	6560      	strne	r0, [r4, #84]	; 0x54
 800f79a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f79e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f7a2:	81a3      	strheq	r3, [r4, #12]
 800f7a4:	bf18      	it	ne
 800f7a6:	81a3      	strhne	r3, [r4, #12]
 800f7a8:	bd10      	pop	{r4, pc}

0800f7aa <__sclose>:
 800f7aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7ae:	f000 b80d 	b.w	800f7cc <_close_r>

0800f7b2 <memset>:
 800f7b2:	4402      	add	r2, r0
 800f7b4:	4603      	mov	r3, r0
 800f7b6:	4293      	cmp	r3, r2
 800f7b8:	d100      	bne.n	800f7bc <memset+0xa>
 800f7ba:	4770      	bx	lr
 800f7bc:	f803 1b01 	strb.w	r1, [r3], #1
 800f7c0:	e7f9      	b.n	800f7b6 <memset+0x4>
	...

0800f7c4 <_localeconv_r>:
 800f7c4:	4800      	ldr	r0, [pc, #0]	; (800f7c8 <_localeconv_r+0x4>)
 800f7c6:	4770      	bx	lr
 800f7c8:	24000174 	.word	0x24000174

0800f7cc <_close_r>:
 800f7cc:	b538      	push	{r3, r4, r5, lr}
 800f7ce:	4d06      	ldr	r5, [pc, #24]	; (800f7e8 <_close_r+0x1c>)
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	4604      	mov	r4, r0
 800f7d4:	4608      	mov	r0, r1
 800f7d6:	602b      	str	r3, [r5, #0]
 800f7d8:	f7f1 fc1f 	bl	800101a <_close>
 800f7dc:	1c43      	adds	r3, r0, #1
 800f7de:	d102      	bne.n	800f7e6 <_close_r+0x1a>
 800f7e0:	682b      	ldr	r3, [r5, #0]
 800f7e2:	b103      	cbz	r3, 800f7e6 <_close_r+0x1a>
 800f7e4:	6023      	str	r3, [r4, #0]
 800f7e6:	bd38      	pop	{r3, r4, r5, pc}
 800f7e8:	24005828 	.word	0x24005828

0800f7ec <_lseek_r>:
 800f7ec:	b538      	push	{r3, r4, r5, lr}
 800f7ee:	4d07      	ldr	r5, [pc, #28]	; (800f80c <_lseek_r+0x20>)
 800f7f0:	4604      	mov	r4, r0
 800f7f2:	4608      	mov	r0, r1
 800f7f4:	4611      	mov	r1, r2
 800f7f6:	2200      	movs	r2, #0
 800f7f8:	602a      	str	r2, [r5, #0]
 800f7fa:	461a      	mov	r2, r3
 800f7fc:	f7f1 fc34 	bl	8001068 <_lseek>
 800f800:	1c43      	adds	r3, r0, #1
 800f802:	d102      	bne.n	800f80a <_lseek_r+0x1e>
 800f804:	682b      	ldr	r3, [r5, #0]
 800f806:	b103      	cbz	r3, 800f80a <_lseek_r+0x1e>
 800f808:	6023      	str	r3, [r4, #0]
 800f80a:	bd38      	pop	{r3, r4, r5, pc}
 800f80c:	24005828 	.word	0x24005828

0800f810 <_read_r>:
 800f810:	b538      	push	{r3, r4, r5, lr}
 800f812:	4d07      	ldr	r5, [pc, #28]	; (800f830 <_read_r+0x20>)
 800f814:	4604      	mov	r4, r0
 800f816:	4608      	mov	r0, r1
 800f818:	4611      	mov	r1, r2
 800f81a:	2200      	movs	r2, #0
 800f81c:	602a      	str	r2, [r5, #0]
 800f81e:	461a      	mov	r2, r3
 800f820:	f7f1 fbc2 	bl	8000fa8 <_read>
 800f824:	1c43      	adds	r3, r0, #1
 800f826:	d102      	bne.n	800f82e <_read_r+0x1e>
 800f828:	682b      	ldr	r3, [r5, #0]
 800f82a:	b103      	cbz	r3, 800f82e <_read_r+0x1e>
 800f82c:	6023      	str	r3, [r4, #0]
 800f82e:	bd38      	pop	{r3, r4, r5, pc}
 800f830:	24005828 	.word	0x24005828

0800f834 <_write_r>:
 800f834:	b538      	push	{r3, r4, r5, lr}
 800f836:	4d07      	ldr	r5, [pc, #28]	; (800f854 <_write_r+0x20>)
 800f838:	4604      	mov	r4, r0
 800f83a:	4608      	mov	r0, r1
 800f83c:	4611      	mov	r1, r2
 800f83e:	2200      	movs	r2, #0
 800f840:	602a      	str	r2, [r5, #0]
 800f842:	461a      	mov	r2, r3
 800f844:	f7f1 fbcd 	bl	8000fe2 <_write>
 800f848:	1c43      	adds	r3, r0, #1
 800f84a:	d102      	bne.n	800f852 <_write_r+0x1e>
 800f84c:	682b      	ldr	r3, [r5, #0]
 800f84e:	b103      	cbz	r3, 800f852 <_write_r+0x1e>
 800f850:	6023      	str	r3, [r4, #0]
 800f852:	bd38      	pop	{r3, r4, r5, pc}
 800f854:	24005828 	.word	0x24005828

0800f858 <__errno>:
 800f858:	4b01      	ldr	r3, [pc, #4]	; (800f860 <__errno+0x8>)
 800f85a:	6818      	ldr	r0, [r3, #0]
 800f85c:	4770      	bx	lr
 800f85e:	bf00      	nop
 800f860:	24000080 	.word	0x24000080

0800f864 <__libc_init_array>:
 800f864:	b570      	push	{r4, r5, r6, lr}
 800f866:	4d0d      	ldr	r5, [pc, #52]	; (800f89c <__libc_init_array+0x38>)
 800f868:	4c0d      	ldr	r4, [pc, #52]	; (800f8a0 <__libc_init_array+0x3c>)
 800f86a:	1b64      	subs	r4, r4, r5
 800f86c:	10a4      	asrs	r4, r4, #2
 800f86e:	2600      	movs	r6, #0
 800f870:	42a6      	cmp	r6, r4
 800f872:	d109      	bne.n	800f888 <__libc_init_array+0x24>
 800f874:	4d0b      	ldr	r5, [pc, #44]	; (800f8a4 <__libc_init_array+0x40>)
 800f876:	4c0c      	ldr	r4, [pc, #48]	; (800f8a8 <__libc_init_array+0x44>)
 800f878:	f001 fe68 	bl	801154c <_init>
 800f87c:	1b64      	subs	r4, r4, r5
 800f87e:	10a4      	asrs	r4, r4, #2
 800f880:	2600      	movs	r6, #0
 800f882:	42a6      	cmp	r6, r4
 800f884:	d105      	bne.n	800f892 <__libc_init_array+0x2e>
 800f886:	bd70      	pop	{r4, r5, r6, pc}
 800f888:	f855 3b04 	ldr.w	r3, [r5], #4
 800f88c:	4798      	blx	r3
 800f88e:	3601      	adds	r6, #1
 800f890:	e7ee      	b.n	800f870 <__libc_init_array+0xc>
 800f892:	f855 3b04 	ldr.w	r3, [r5], #4
 800f896:	4798      	blx	r3
 800f898:	3601      	adds	r6, #1
 800f89a:	e7f2      	b.n	800f882 <__libc_init_array+0x1e>
 800f89c:	08011b2c 	.word	0x08011b2c
 800f8a0:	08011b2c 	.word	0x08011b2c
 800f8a4:	08011b2c 	.word	0x08011b2c
 800f8a8:	08011b38 	.word	0x08011b38

0800f8ac <__retarget_lock_init_recursive>:
 800f8ac:	4770      	bx	lr

0800f8ae <__retarget_lock_acquire_recursive>:
 800f8ae:	4770      	bx	lr

0800f8b0 <__retarget_lock_release_recursive>:
 800f8b0:	4770      	bx	lr

0800f8b2 <memcpy>:
 800f8b2:	440a      	add	r2, r1
 800f8b4:	4291      	cmp	r1, r2
 800f8b6:	f100 33ff 	add.w	r3, r0, #4294967295
 800f8ba:	d100      	bne.n	800f8be <memcpy+0xc>
 800f8bc:	4770      	bx	lr
 800f8be:	b510      	push	{r4, lr}
 800f8c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f8c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f8c8:	4291      	cmp	r1, r2
 800f8ca:	d1f9      	bne.n	800f8c0 <memcpy+0xe>
 800f8cc:	bd10      	pop	{r4, pc}

0800f8ce <quorem>:
 800f8ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8d2:	6903      	ldr	r3, [r0, #16]
 800f8d4:	690c      	ldr	r4, [r1, #16]
 800f8d6:	42a3      	cmp	r3, r4
 800f8d8:	4607      	mov	r7, r0
 800f8da:	db7e      	blt.n	800f9da <quorem+0x10c>
 800f8dc:	3c01      	subs	r4, #1
 800f8de:	f101 0814 	add.w	r8, r1, #20
 800f8e2:	f100 0514 	add.w	r5, r0, #20
 800f8e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f8ea:	9301      	str	r3, [sp, #4]
 800f8ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f8f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f8f4:	3301      	adds	r3, #1
 800f8f6:	429a      	cmp	r2, r3
 800f8f8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f8fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f900:	fbb2 f6f3 	udiv	r6, r2, r3
 800f904:	d331      	bcc.n	800f96a <quorem+0x9c>
 800f906:	f04f 0e00 	mov.w	lr, #0
 800f90a:	4640      	mov	r0, r8
 800f90c:	46ac      	mov	ip, r5
 800f90e:	46f2      	mov	sl, lr
 800f910:	f850 2b04 	ldr.w	r2, [r0], #4
 800f914:	b293      	uxth	r3, r2
 800f916:	fb06 e303 	mla	r3, r6, r3, lr
 800f91a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f91e:	0c1a      	lsrs	r2, r3, #16
 800f920:	b29b      	uxth	r3, r3
 800f922:	ebaa 0303 	sub.w	r3, sl, r3
 800f926:	f8dc a000 	ldr.w	sl, [ip]
 800f92a:	fa13 f38a 	uxtah	r3, r3, sl
 800f92e:	fb06 220e 	mla	r2, r6, lr, r2
 800f932:	9300      	str	r3, [sp, #0]
 800f934:	9b00      	ldr	r3, [sp, #0]
 800f936:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f93a:	b292      	uxth	r2, r2
 800f93c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f940:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f944:	f8bd 3000 	ldrh.w	r3, [sp]
 800f948:	4581      	cmp	r9, r0
 800f94a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f94e:	f84c 3b04 	str.w	r3, [ip], #4
 800f952:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f956:	d2db      	bcs.n	800f910 <quorem+0x42>
 800f958:	f855 300b 	ldr.w	r3, [r5, fp]
 800f95c:	b92b      	cbnz	r3, 800f96a <quorem+0x9c>
 800f95e:	9b01      	ldr	r3, [sp, #4]
 800f960:	3b04      	subs	r3, #4
 800f962:	429d      	cmp	r5, r3
 800f964:	461a      	mov	r2, r3
 800f966:	d32c      	bcc.n	800f9c2 <quorem+0xf4>
 800f968:	613c      	str	r4, [r7, #16]
 800f96a:	4638      	mov	r0, r7
 800f96c:	f001 f920 	bl	8010bb0 <__mcmp>
 800f970:	2800      	cmp	r0, #0
 800f972:	db22      	blt.n	800f9ba <quorem+0xec>
 800f974:	3601      	adds	r6, #1
 800f976:	4629      	mov	r1, r5
 800f978:	2000      	movs	r0, #0
 800f97a:	f858 2b04 	ldr.w	r2, [r8], #4
 800f97e:	f8d1 c000 	ldr.w	ip, [r1]
 800f982:	b293      	uxth	r3, r2
 800f984:	1ac3      	subs	r3, r0, r3
 800f986:	0c12      	lsrs	r2, r2, #16
 800f988:	fa13 f38c 	uxtah	r3, r3, ip
 800f98c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800f990:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f994:	b29b      	uxth	r3, r3
 800f996:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f99a:	45c1      	cmp	r9, r8
 800f99c:	f841 3b04 	str.w	r3, [r1], #4
 800f9a0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f9a4:	d2e9      	bcs.n	800f97a <quorem+0xac>
 800f9a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f9aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f9ae:	b922      	cbnz	r2, 800f9ba <quorem+0xec>
 800f9b0:	3b04      	subs	r3, #4
 800f9b2:	429d      	cmp	r5, r3
 800f9b4:	461a      	mov	r2, r3
 800f9b6:	d30a      	bcc.n	800f9ce <quorem+0x100>
 800f9b8:	613c      	str	r4, [r7, #16]
 800f9ba:	4630      	mov	r0, r6
 800f9bc:	b003      	add	sp, #12
 800f9be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9c2:	6812      	ldr	r2, [r2, #0]
 800f9c4:	3b04      	subs	r3, #4
 800f9c6:	2a00      	cmp	r2, #0
 800f9c8:	d1ce      	bne.n	800f968 <quorem+0x9a>
 800f9ca:	3c01      	subs	r4, #1
 800f9cc:	e7c9      	b.n	800f962 <quorem+0x94>
 800f9ce:	6812      	ldr	r2, [r2, #0]
 800f9d0:	3b04      	subs	r3, #4
 800f9d2:	2a00      	cmp	r2, #0
 800f9d4:	d1f0      	bne.n	800f9b8 <quorem+0xea>
 800f9d6:	3c01      	subs	r4, #1
 800f9d8:	e7eb      	b.n	800f9b2 <quorem+0xe4>
 800f9da:	2000      	movs	r0, #0
 800f9dc:	e7ee      	b.n	800f9bc <quorem+0xee>
	...

0800f9e0 <_dtoa_r>:
 800f9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9e4:	ed2d 8b02 	vpush	{d8}
 800f9e8:	69c5      	ldr	r5, [r0, #28]
 800f9ea:	b091      	sub	sp, #68	; 0x44
 800f9ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f9f0:	ec59 8b10 	vmov	r8, r9, d0
 800f9f4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800f9f6:	9106      	str	r1, [sp, #24]
 800f9f8:	4606      	mov	r6, r0
 800f9fa:	9208      	str	r2, [sp, #32]
 800f9fc:	930c      	str	r3, [sp, #48]	; 0x30
 800f9fe:	b975      	cbnz	r5, 800fa1e <_dtoa_r+0x3e>
 800fa00:	2010      	movs	r0, #16
 800fa02:	f000 fda5 	bl	8010550 <malloc>
 800fa06:	4602      	mov	r2, r0
 800fa08:	61f0      	str	r0, [r6, #28]
 800fa0a:	b920      	cbnz	r0, 800fa16 <_dtoa_r+0x36>
 800fa0c:	4ba6      	ldr	r3, [pc, #664]	; (800fca8 <_dtoa_r+0x2c8>)
 800fa0e:	21ef      	movs	r1, #239	; 0xef
 800fa10:	48a6      	ldr	r0, [pc, #664]	; (800fcac <_dtoa_r+0x2cc>)
 800fa12:	f001 fc65 	bl	80112e0 <__assert_func>
 800fa16:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fa1a:	6005      	str	r5, [r0, #0]
 800fa1c:	60c5      	str	r5, [r0, #12]
 800fa1e:	69f3      	ldr	r3, [r6, #28]
 800fa20:	6819      	ldr	r1, [r3, #0]
 800fa22:	b151      	cbz	r1, 800fa3a <_dtoa_r+0x5a>
 800fa24:	685a      	ldr	r2, [r3, #4]
 800fa26:	604a      	str	r2, [r1, #4]
 800fa28:	2301      	movs	r3, #1
 800fa2a:	4093      	lsls	r3, r2
 800fa2c:	608b      	str	r3, [r1, #8]
 800fa2e:	4630      	mov	r0, r6
 800fa30:	f000 fe82 	bl	8010738 <_Bfree>
 800fa34:	69f3      	ldr	r3, [r6, #28]
 800fa36:	2200      	movs	r2, #0
 800fa38:	601a      	str	r2, [r3, #0]
 800fa3a:	f1b9 0300 	subs.w	r3, r9, #0
 800fa3e:	bfbb      	ittet	lt
 800fa40:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800fa44:	9303      	strlt	r3, [sp, #12]
 800fa46:	2300      	movge	r3, #0
 800fa48:	2201      	movlt	r2, #1
 800fa4a:	bfac      	ite	ge
 800fa4c:	6023      	strge	r3, [r4, #0]
 800fa4e:	6022      	strlt	r2, [r4, #0]
 800fa50:	4b97      	ldr	r3, [pc, #604]	; (800fcb0 <_dtoa_r+0x2d0>)
 800fa52:	9c03      	ldr	r4, [sp, #12]
 800fa54:	43a3      	bics	r3, r4
 800fa56:	d11c      	bne.n	800fa92 <_dtoa_r+0xb2>
 800fa58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fa5a:	f242 730f 	movw	r3, #9999	; 0x270f
 800fa5e:	6013      	str	r3, [r2, #0]
 800fa60:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800fa64:	ea53 0308 	orrs.w	r3, r3, r8
 800fa68:	f000 84fb 	beq.w	8010462 <_dtoa_r+0xa82>
 800fa6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fa6e:	b963      	cbnz	r3, 800fa8a <_dtoa_r+0xaa>
 800fa70:	4b90      	ldr	r3, [pc, #576]	; (800fcb4 <_dtoa_r+0x2d4>)
 800fa72:	e020      	b.n	800fab6 <_dtoa_r+0xd6>
 800fa74:	4b90      	ldr	r3, [pc, #576]	; (800fcb8 <_dtoa_r+0x2d8>)
 800fa76:	9301      	str	r3, [sp, #4]
 800fa78:	3308      	adds	r3, #8
 800fa7a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800fa7c:	6013      	str	r3, [r2, #0]
 800fa7e:	9801      	ldr	r0, [sp, #4]
 800fa80:	b011      	add	sp, #68	; 0x44
 800fa82:	ecbd 8b02 	vpop	{d8}
 800fa86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa8a:	4b8a      	ldr	r3, [pc, #552]	; (800fcb4 <_dtoa_r+0x2d4>)
 800fa8c:	9301      	str	r3, [sp, #4]
 800fa8e:	3303      	adds	r3, #3
 800fa90:	e7f3      	b.n	800fa7a <_dtoa_r+0x9a>
 800fa92:	ed9d 8b02 	vldr	d8, [sp, #8]
 800fa96:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fa9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa9e:	d10c      	bne.n	800faba <_dtoa_r+0xda>
 800faa0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800faa2:	2301      	movs	r3, #1
 800faa4:	6013      	str	r3, [r2, #0]
 800faa6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	f000 84d7 	beq.w	801045c <_dtoa_r+0xa7c>
 800faae:	4b83      	ldr	r3, [pc, #524]	; (800fcbc <_dtoa_r+0x2dc>)
 800fab0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800fab2:	6013      	str	r3, [r2, #0]
 800fab4:	3b01      	subs	r3, #1
 800fab6:	9301      	str	r3, [sp, #4]
 800fab8:	e7e1      	b.n	800fa7e <_dtoa_r+0x9e>
 800faba:	aa0e      	add	r2, sp, #56	; 0x38
 800fabc:	a90f      	add	r1, sp, #60	; 0x3c
 800fabe:	4630      	mov	r0, r6
 800fac0:	eeb0 0b48 	vmov.f64	d0, d8
 800fac4:	f001 f91a 	bl	8010cfc <__d2b>
 800fac8:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800facc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800face:	4605      	mov	r5, r0
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d046      	beq.n	800fb62 <_dtoa_r+0x182>
 800fad4:	eeb0 7b48 	vmov.f64	d7, d8
 800fad8:	ee18 1a90 	vmov	r1, s17
 800fadc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800fae0:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800fae4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800fae8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800faec:	2000      	movs	r0, #0
 800faee:	ee07 1a90 	vmov	s15, r1
 800faf2:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800faf6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800fc90 <_dtoa_r+0x2b0>
 800fafa:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fafe:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800fc98 <_dtoa_r+0x2b8>
 800fb02:	eea7 6b05 	vfma.f64	d6, d7, d5
 800fb06:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800fca0 <_dtoa_r+0x2c0>
 800fb0a:	ee07 3a90 	vmov	s15, r3
 800fb0e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800fb12:	eeb0 7b46 	vmov.f64	d7, d6
 800fb16:	eea4 7b05 	vfma.f64	d7, d4, d5
 800fb1a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800fb1e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800fb22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb26:	ee16 ba90 	vmov	fp, s13
 800fb2a:	9009      	str	r0, [sp, #36]	; 0x24
 800fb2c:	d508      	bpl.n	800fb40 <_dtoa_r+0x160>
 800fb2e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800fb32:	eeb4 6b47 	vcmp.f64	d6, d7
 800fb36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb3a:	bf18      	it	ne
 800fb3c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800fb40:	f1bb 0f16 	cmp.w	fp, #22
 800fb44:	d82b      	bhi.n	800fb9e <_dtoa_r+0x1be>
 800fb46:	495e      	ldr	r1, [pc, #376]	; (800fcc0 <_dtoa_r+0x2e0>)
 800fb48:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800fb4c:	ed91 7b00 	vldr	d7, [r1]
 800fb50:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800fb54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb58:	d501      	bpl.n	800fb5e <_dtoa_r+0x17e>
 800fb5a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fb5e:	2100      	movs	r1, #0
 800fb60:	e01e      	b.n	800fba0 <_dtoa_r+0x1c0>
 800fb62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fb64:	4413      	add	r3, r2
 800fb66:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800fb6a:	2920      	cmp	r1, #32
 800fb6c:	bfc1      	itttt	gt
 800fb6e:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800fb72:	408c      	lslgt	r4, r1
 800fb74:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800fb78:	fa28 f101 	lsrgt.w	r1, r8, r1
 800fb7c:	bfd6      	itet	le
 800fb7e:	f1c1 0120 	rsble	r1, r1, #32
 800fb82:	4321      	orrgt	r1, r4
 800fb84:	fa08 f101 	lslle.w	r1, r8, r1
 800fb88:	ee07 1a90 	vmov	s15, r1
 800fb8c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800fb90:	3b01      	subs	r3, #1
 800fb92:	ee17 1a90 	vmov	r1, s15
 800fb96:	2001      	movs	r0, #1
 800fb98:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800fb9c:	e7a7      	b.n	800faee <_dtoa_r+0x10e>
 800fb9e:	2101      	movs	r1, #1
 800fba0:	1ad2      	subs	r2, r2, r3
 800fba2:	1e53      	subs	r3, r2, #1
 800fba4:	9305      	str	r3, [sp, #20]
 800fba6:	bf45      	ittet	mi
 800fba8:	f1c2 0301 	rsbmi	r3, r2, #1
 800fbac:	9304      	strmi	r3, [sp, #16]
 800fbae:	2300      	movpl	r3, #0
 800fbb0:	2300      	movmi	r3, #0
 800fbb2:	bf4c      	ite	mi
 800fbb4:	9305      	strmi	r3, [sp, #20]
 800fbb6:	9304      	strpl	r3, [sp, #16]
 800fbb8:	f1bb 0f00 	cmp.w	fp, #0
 800fbbc:	910b      	str	r1, [sp, #44]	; 0x2c
 800fbbe:	db18      	blt.n	800fbf2 <_dtoa_r+0x212>
 800fbc0:	9b05      	ldr	r3, [sp, #20]
 800fbc2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800fbc6:	445b      	add	r3, fp
 800fbc8:	9305      	str	r3, [sp, #20]
 800fbca:	2300      	movs	r3, #0
 800fbcc:	9a06      	ldr	r2, [sp, #24]
 800fbce:	2a09      	cmp	r2, #9
 800fbd0:	d848      	bhi.n	800fc64 <_dtoa_r+0x284>
 800fbd2:	2a05      	cmp	r2, #5
 800fbd4:	bfc4      	itt	gt
 800fbd6:	3a04      	subgt	r2, #4
 800fbd8:	9206      	strgt	r2, [sp, #24]
 800fbda:	9a06      	ldr	r2, [sp, #24]
 800fbdc:	f1a2 0202 	sub.w	r2, r2, #2
 800fbe0:	bfcc      	ite	gt
 800fbe2:	2400      	movgt	r4, #0
 800fbe4:	2401      	movle	r4, #1
 800fbe6:	2a03      	cmp	r2, #3
 800fbe8:	d847      	bhi.n	800fc7a <_dtoa_r+0x29a>
 800fbea:	e8df f002 	tbb	[pc, r2]
 800fbee:	2d0b      	.short	0x2d0b
 800fbf0:	392b      	.short	0x392b
 800fbf2:	9b04      	ldr	r3, [sp, #16]
 800fbf4:	2200      	movs	r2, #0
 800fbf6:	eba3 030b 	sub.w	r3, r3, fp
 800fbfa:	9304      	str	r3, [sp, #16]
 800fbfc:	920a      	str	r2, [sp, #40]	; 0x28
 800fbfe:	f1cb 0300 	rsb	r3, fp, #0
 800fc02:	e7e3      	b.n	800fbcc <_dtoa_r+0x1ec>
 800fc04:	2200      	movs	r2, #0
 800fc06:	9207      	str	r2, [sp, #28]
 800fc08:	9a08      	ldr	r2, [sp, #32]
 800fc0a:	2a00      	cmp	r2, #0
 800fc0c:	dc38      	bgt.n	800fc80 <_dtoa_r+0x2a0>
 800fc0e:	f04f 0a01 	mov.w	sl, #1
 800fc12:	46d1      	mov	r9, sl
 800fc14:	4652      	mov	r2, sl
 800fc16:	f8cd a020 	str.w	sl, [sp, #32]
 800fc1a:	69f7      	ldr	r7, [r6, #28]
 800fc1c:	2100      	movs	r1, #0
 800fc1e:	2004      	movs	r0, #4
 800fc20:	f100 0c14 	add.w	ip, r0, #20
 800fc24:	4594      	cmp	ip, r2
 800fc26:	d930      	bls.n	800fc8a <_dtoa_r+0x2aa>
 800fc28:	6079      	str	r1, [r7, #4]
 800fc2a:	4630      	mov	r0, r6
 800fc2c:	930d      	str	r3, [sp, #52]	; 0x34
 800fc2e:	f000 fd43 	bl	80106b8 <_Balloc>
 800fc32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fc34:	9001      	str	r0, [sp, #4]
 800fc36:	4602      	mov	r2, r0
 800fc38:	2800      	cmp	r0, #0
 800fc3a:	d145      	bne.n	800fcc8 <_dtoa_r+0x2e8>
 800fc3c:	4b21      	ldr	r3, [pc, #132]	; (800fcc4 <_dtoa_r+0x2e4>)
 800fc3e:	f240 11af 	movw	r1, #431	; 0x1af
 800fc42:	e6e5      	b.n	800fa10 <_dtoa_r+0x30>
 800fc44:	2201      	movs	r2, #1
 800fc46:	e7de      	b.n	800fc06 <_dtoa_r+0x226>
 800fc48:	2200      	movs	r2, #0
 800fc4a:	9207      	str	r2, [sp, #28]
 800fc4c:	9a08      	ldr	r2, [sp, #32]
 800fc4e:	eb0b 0a02 	add.w	sl, fp, r2
 800fc52:	f10a 0901 	add.w	r9, sl, #1
 800fc56:	464a      	mov	r2, r9
 800fc58:	2a01      	cmp	r2, #1
 800fc5a:	bfb8      	it	lt
 800fc5c:	2201      	movlt	r2, #1
 800fc5e:	e7dc      	b.n	800fc1a <_dtoa_r+0x23a>
 800fc60:	2201      	movs	r2, #1
 800fc62:	e7f2      	b.n	800fc4a <_dtoa_r+0x26a>
 800fc64:	2401      	movs	r4, #1
 800fc66:	2200      	movs	r2, #0
 800fc68:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800fc6c:	f04f 3aff 	mov.w	sl, #4294967295
 800fc70:	2100      	movs	r1, #0
 800fc72:	46d1      	mov	r9, sl
 800fc74:	2212      	movs	r2, #18
 800fc76:	9108      	str	r1, [sp, #32]
 800fc78:	e7cf      	b.n	800fc1a <_dtoa_r+0x23a>
 800fc7a:	2201      	movs	r2, #1
 800fc7c:	9207      	str	r2, [sp, #28]
 800fc7e:	e7f5      	b.n	800fc6c <_dtoa_r+0x28c>
 800fc80:	f8dd a020 	ldr.w	sl, [sp, #32]
 800fc84:	46d1      	mov	r9, sl
 800fc86:	4652      	mov	r2, sl
 800fc88:	e7c7      	b.n	800fc1a <_dtoa_r+0x23a>
 800fc8a:	3101      	adds	r1, #1
 800fc8c:	0040      	lsls	r0, r0, #1
 800fc8e:	e7c7      	b.n	800fc20 <_dtoa_r+0x240>
 800fc90:	636f4361 	.word	0x636f4361
 800fc94:	3fd287a7 	.word	0x3fd287a7
 800fc98:	8b60c8b3 	.word	0x8b60c8b3
 800fc9c:	3fc68a28 	.word	0x3fc68a28
 800fca0:	509f79fb 	.word	0x509f79fb
 800fca4:	3fd34413 	.word	0x3fd34413
 800fca8:	080117f1 	.word	0x080117f1
 800fcac:	08011808 	.word	0x08011808
 800fcb0:	7ff00000 	.word	0x7ff00000
 800fcb4:	080117ed 	.word	0x080117ed
 800fcb8:	080117e4 	.word	0x080117e4
 800fcbc:	080117c1 	.word	0x080117c1
 800fcc0:	080118f8 	.word	0x080118f8
 800fcc4:	08011860 	.word	0x08011860
 800fcc8:	69f2      	ldr	r2, [r6, #28]
 800fcca:	9901      	ldr	r1, [sp, #4]
 800fccc:	6011      	str	r1, [r2, #0]
 800fcce:	f1b9 0f0e 	cmp.w	r9, #14
 800fcd2:	d86c      	bhi.n	800fdae <_dtoa_r+0x3ce>
 800fcd4:	2c00      	cmp	r4, #0
 800fcd6:	d06a      	beq.n	800fdae <_dtoa_r+0x3ce>
 800fcd8:	f1bb 0f00 	cmp.w	fp, #0
 800fcdc:	f340 80a0 	ble.w	800fe20 <_dtoa_r+0x440>
 800fce0:	4ac1      	ldr	r2, [pc, #772]	; (800ffe8 <_dtoa_r+0x608>)
 800fce2:	f00b 010f 	and.w	r1, fp, #15
 800fce6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800fcea:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800fcee:	ed92 7b00 	vldr	d7, [r2]
 800fcf2:	ea4f 122b 	mov.w	r2, fp, asr #4
 800fcf6:	f000 8087 	beq.w	800fe08 <_dtoa_r+0x428>
 800fcfa:	49bc      	ldr	r1, [pc, #752]	; (800ffec <_dtoa_r+0x60c>)
 800fcfc:	ed91 6b08 	vldr	d6, [r1, #32]
 800fd00:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800fd04:	ed8d 6b02 	vstr	d6, [sp, #8]
 800fd08:	f002 020f 	and.w	r2, r2, #15
 800fd0c:	2103      	movs	r1, #3
 800fd0e:	48b7      	ldr	r0, [pc, #732]	; (800ffec <_dtoa_r+0x60c>)
 800fd10:	2a00      	cmp	r2, #0
 800fd12:	d17b      	bne.n	800fe0c <_dtoa_r+0x42c>
 800fd14:	ed9d 6b02 	vldr	d6, [sp, #8]
 800fd18:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800fd1c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fd20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fd22:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fd26:	2a00      	cmp	r2, #0
 800fd28:	f000 80a0 	beq.w	800fe6c <_dtoa_r+0x48c>
 800fd2c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800fd30:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800fd34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd38:	f140 8098 	bpl.w	800fe6c <_dtoa_r+0x48c>
 800fd3c:	f1b9 0f00 	cmp.w	r9, #0
 800fd40:	f000 8094 	beq.w	800fe6c <_dtoa_r+0x48c>
 800fd44:	f1ba 0f00 	cmp.w	sl, #0
 800fd48:	dd2f      	ble.n	800fdaa <_dtoa_r+0x3ca>
 800fd4a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800fd4e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800fd52:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fd56:	f10b 32ff 	add.w	r2, fp, #4294967295
 800fd5a:	3101      	adds	r1, #1
 800fd5c:	4654      	mov	r4, sl
 800fd5e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800fd62:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800fd66:	ee07 1a90 	vmov	s15, r1
 800fd6a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800fd6e:	eea7 5b06 	vfma.f64	d5, d7, d6
 800fd72:	ee15 7a90 	vmov	r7, s11
 800fd76:	ec51 0b15 	vmov	r0, r1, d5
 800fd7a:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800fd7e:	2c00      	cmp	r4, #0
 800fd80:	d177      	bne.n	800fe72 <_dtoa_r+0x492>
 800fd82:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800fd86:	ee36 6b47 	vsub.f64	d6, d6, d7
 800fd8a:	ec41 0b17 	vmov	d7, r0, r1
 800fd8e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800fd92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd96:	f300 826a 	bgt.w	801026e <_dtoa_r+0x88e>
 800fd9a:	eeb1 7b47 	vneg.f64	d7, d7
 800fd9e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800fda2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fda6:	f100 8260 	bmi.w	801026a <_dtoa_r+0x88a>
 800fdaa:	ed8d 8b02 	vstr	d8, [sp, #8]
 800fdae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fdb0:	2a00      	cmp	r2, #0
 800fdb2:	f2c0 811d 	blt.w	800fff0 <_dtoa_r+0x610>
 800fdb6:	f1bb 0f0e 	cmp.w	fp, #14
 800fdba:	f300 8119 	bgt.w	800fff0 <_dtoa_r+0x610>
 800fdbe:	4b8a      	ldr	r3, [pc, #552]	; (800ffe8 <_dtoa_r+0x608>)
 800fdc0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800fdc4:	ed93 6b00 	vldr	d6, [r3]
 800fdc8:	9b08      	ldr	r3, [sp, #32]
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	f280 80b7 	bge.w	800ff3e <_dtoa_r+0x55e>
 800fdd0:	f1b9 0f00 	cmp.w	r9, #0
 800fdd4:	f300 80b3 	bgt.w	800ff3e <_dtoa_r+0x55e>
 800fdd8:	f040 8246 	bne.w	8010268 <_dtoa_r+0x888>
 800fddc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800fde0:	ee26 6b07 	vmul.f64	d6, d6, d7
 800fde4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fde8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800fdec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdf0:	464c      	mov	r4, r9
 800fdf2:	464f      	mov	r7, r9
 800fdf4:	f280 821c 	bge.w	8010230 <_dtoa_r+0x850>
 800fdf8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800fdfc:	2331      	movs	r3, #49	; 0x31
 800fdfe:	f808 3b01 	strb.w	r3, [r8], #1
 800fe02:	f10b 0b01 	add.w	fp, fp, #1
 800fe06:	e218      	b.n	801023a <_dtoa_r+0x85a>
 800fe08:	2102      	movs	r1, #2
 800fe0a:	e780      	b.n	800fd0e <_dtoa_r+0x32e>
 800fe0c:	07d4      	lsls	r4, r2, #31
 800fe0e:	d504      	bpl.n	800fe1a <_dtoa_r+0x43a>
 800fe10:	ed90 6b00 	vldr	d6, [r0]
 800fe14:	3101      	adds	r1, #1
 800fe16:	ee27 7b06 	vmul.f64	d7, d7, d6
 800fe1a:	1052      	asrs	r2, r2, #1
 800fe1c:	3008      	adds	r0, #8
 800fe1e:	e777      	b.n	800fd10 <_dtoa_r+0x330>
 800fe20:	d022      	beq.n	800fe68 <_dtoa_r+0x488>
 800fe22:	f1cb 0200 	rsb	r2, fp, #0
 800fe26:	4970      	ldr	r1, [pc, #448]	; (800ffe8 <_dtoa_r+0x608>)
 800fe28:	f002 000f 	and.w	r0, r2, #15
 800fe2c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800fe30:	ed91 7b00 	vldr	d7, [r1]
 800fe34:	ee28 7b07 	vmul.f64	d7, d8, d7
 800fe38:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fe3c:	486b      	ldr	r0, [pc, #428]	; (800ffec <_dtoa_r+0x60c>)
 800fe3e:	1112      	asrs	r2, r2, #4
 800fe40:	2400      	movs	r4, #0
 800fe42:	2102      	movs	r1, #2
 800fe44:	b92a      	cbnz	r2, 800fe52 <_dtoa_r+0x472>
 800fe46:	2c00      	cmp	r4, #0
 800fe48:	f43f af6a 	beq.w	800fd20 <_dtoa_r+0x340>
 800fe4c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fe50:	e766      	b.n	800fd20 <_dtoa_r+0x340>
 800fe52:	07d7      	lsls	r7, r2, #31
 800fe54:	d505      	bpl.n	800fe62 <_dtoa_r+0x482>
 800fe56:	ed90 6b00 	vldr	d6, [r0]
 800fe5a:	3101      	adds	r1, #1
 800fe5c:	2401      	movs	r4, #1
 800fe5e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800fe62:	1052      	asrs	r2, r2, #1
 800fe64:	3008      	adds	r0, #8
 800fe66:	e7ed      	b.n	800fe44 <_dtoa_r+0x464>
 800fe68:	2102      	movs	r1, #2
 800fe6a:	e759      	b.n	800fd20 <_dtoa_r+0x340>
 800fe6c:	465a      	mov	r2, fp
 800fe6e:	464c      	mov	r4, r9
 800fe70:	e775      	b.n	800fd5e <_dtoa_r+0x37e>
 800fe72:	ec41 0b17 	vmov	d7, r0, r1
 800fe76:	495c      	ldr	r1, [pc, #368]	; (800ffe8 <_dtoa_r+0x608>)
 800fe78:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800fe7c:	ed11 4b02 	vldr	d4, [r1, #-8]
 800fe80:	9901      	ldr	r1, [sp, #4]
 800fe82:	440c      	add	r4, r1
 800fe84:	9907      	ldr	r1, [sp, #28]
 800fe86:	b351      	cbz	r1, 800fede <_dtoa_r+0x4fe>
 800fe88:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800fe8c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800fe90:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800fe94:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800fe98:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800fe9c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800fea0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800fea4:	ee14 1a90 	vmov	r1, s9
 800fea8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800feac:	3130      	adds	r1, #48	; 0x30
 800feae:	ee36 6b45 	vsub.f64	d6, d6, d5
 800feb2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800feb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800feba:	f808 1b01 	strb.w	r1, [r8], #1
 800febe:	d439      	bmi.n	800ff34 <_dtoa_r+0x554>
 800fec0:	ee32 5b46 	vsub.f64	d5, d2, d6
 800fec4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800fec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fecc:	d472      	bmi.n	800ffb4 <_dtoa_r+0x5d4>
 800fece:	45a0      	cmp	r8, r4
 800fed0:	f43f af6b 	beq.w	800fdaa <_dtoa_r+0x3ca>
 800fed4:	ee27 7b03 	vmul.f64	d7, d7, d3
 800fed8:	ee26 6b03 	vmul.f64	d6, d6, d3
 800fedc:	e7e0      	b.n	800fea0 <_dtoa_r+0x4c0>
 800fede:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800fee2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800fee6:	4620      	mov	r0, r4
 800fee8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800feec:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800fef0:	ee14 1a90 	vmov	r1, s9
 800fef4:	3130      	adds	r1, #48	; 0x30
 800fef6:	f808 1b01 	strb.w	r1, [r8], #1
 800fefa:	45a0      	cmp	r8, r4
 800fefc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ff00:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ff04:	d118      	bne.n	800ff38 <_dtoa_r+0x558>
 800ff06:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ff0a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800ff0e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800ff12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff16:	dc4d      	bgt.n	800ffb4 <_dtoa_r+0x5d4>
 800ff18:	ee35 5b47 	vsub.f64	d5, d5, d7
 800ff1c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800ff20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff24:	f57f af41 	bpl.w	800fdaa <_dtoa_r+0x3ca>
 800ff28:	4680      	mov	r8, r0
 800ff2a:	3801      	subs	r0, #1
 800ff2c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800ff30:	2b30      	cmp	r3, #48	; 0x30
 800ff32:	d0f9      	beq.n	800ff28 <_dtoa_r+0x548>
 800ff34:	4693      	mov	fp, r2
 800ff36:	e02a      	b.n	800ff8e <_dtoa_r+0x5ae>
 800ff38:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ff3c:	e7d6      	b.n	800feec <_dtoa_r+0x50c>
 800ff3e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ff42:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800ff46:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ff4a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800ff4e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800ff52:	ee15 3a10 	vmov	r3, s10
 800ff56:	3330      	adds	r3, #48	; 0x30
 800ff58:	f808 3b01 	strb.w	r3, [r8], #1
 800ff5c:	9b01      	ldr	r3, [sp, #4]
 800ff5e:	eba8 0303 	sub.w	r3, r8, r3
 800ff62:	4599      	cmp	r9, r3
 800ff64:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800ff68:	eea3 7b46 	vfms.f64	d7, d3, d6
 800ff6c:	d133      	bne.n	800ffd6 <_dtoa_r+0x5f6>
 800ff6e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800ff72:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ff76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff7a:	dc1a      	bgt.n	800ffb2 <_dtoa_r+0x5d2>
 800ff7c:	eeb4 7b46 	vcmp.f64	d7, d6
 800ff80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff84:	d103      	bne.n	800ff8e <_dtoa_r+0x5ae>
 800ff86:	ee15 3a10 	vmov	r3, s10
 800ff8a:	07d9      	lsls	r1, r3, #31
 800ff8c:	d411      	bmi.n	800ffb2 <_dtoa_r+0x5d2>
 800ff8e:	4629      	mov	r1, r5
 800ff90:	4630      	mov	r0, r6
 800ff92:	f000 fbd1 	bl	8010738 <_Bfree>
 800ff96:	2300      	movs	r3, #0
 800ff98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ff9a:	f888 3000 	strb.w	r3, [r8]
 800ff9e:	f10b 0301 	add.w	r3, fp, #1
 800ffa2:	6013      	str	r3, [r2, #0]
 800ffa4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	f43f ad69 	beq.w	800fa7e <_dtoa_r+0x9e>
 800ffac:	f8c3 8000 	str.w	r8, [r3]
 800ffb0:	e565      	b.n	800fa7e <_dtoa_r+0x9e>
 800ffb2:	465a      	mov	r2, fp
 800ffb4:	4643      	mov	r3, r8
 800ffb6:	4698      	mov	r8, r3
 800ffb8:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800ffbc:	2939      	cmp	r1, #57	; 0x39
 800ffbe:	d106      	bne.n	800ffce <_dtoa_r+0x5ee>
 800ffc0:	9901      	ldr	r1, [sp, #4]
 800ffc2:	4299      	cmp	r1, r3
 800ffc4:	d1f7      	bne.n	800ffb6 <_dtoa_r+0x5d6>
 800ffc6:	9801      	ldr	r0, [sp, #4]
 800ffc8:	2130      	movs	r1, #48	; 0x30
 800ffca:	3201      	adds	r2, #1
 800ffcc:	7001      	strb	r1, [r0, #0]
 800ffce:	7819      	ldrb	r1, [r3, #0]
 800ffd0:	3101      	adds	r1, #1
 800ffd2:	7019      	strb	r1, [r3, #0]
 800ffd4:	e7ae      	b.n	800ff34 <_dtoa_r+0x554>
 800ffd6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ffda:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ffde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffe2:	d1b2      	bne.n	800ff4a <_dtoa_r+0x56a>
 800ffe4:	e7d3      	b.n	800ff8e <_dtoa_r+0x5ae>
 800ffe6:	bf00      	nop
 800ffe8:	080118f8 	.word	0x080118f8
 800ffec:	080118d0 	.word	0x080118d0
 800fff0:	9907      	ldr	r1, [sp, #28]
 800fff2:	2900      	cmp	r1, #0
 800fff4:	f000 80d0 	beq.w	8010198 <_dtoa_r+0x7b8>
 800fff8:	9906      	ldr	r1, [sp, #24]
 800fffa:	2901      	cmp	r1, #1
 800fffc:	f300 80b4 	bgt.w	8010168 <_dtoa_r+0x788>
 8010000:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010002:	2900      	cmp	r1, #0
 8010004:	f000 80ac 	beq.w	8010160 <_dtoa_r+0x780>
 8010008:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801000c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8010010:	461c      	mov	r4, r3
 8010012:	9309      	str	r3, [sp, #36]	; 0x24
 8010014:	9b04      	ldr	r3, [sp, #16]
 8010016:	4413      	add	r3, r2
 8010018:	9304      	str	r3, [sp, #16]
 801001a:	9b05      	ldr	r3, [sp, #20]
 801001c:	2101      	movs	r1, #1
 801001e:	4413      	add	r3, r2
 8010020:	4630      	mov	r0, r6
 8010022:	9305      	str	r3, [sp, #20]
 8010024:	f000 fc3e 	bl	80108a4 <__i2b>
 8010028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801002a:	4607      	mov	r7, r0
 801002c:	f1b8 0f00 	cmp.w	r8, #0
 8010030:	d00d      	beq.n	801004e <_dtoa_r+0x66e>
 8010032:	9a05      	ldr	r2, [sp, #20]
 8010034:	2a00      	cmp	r2, #0
 8010036:	dd0a      	ble.n	801004e <_dtoa_r+0x66e>
 8010038:	4542      	cmp	r2, r8
 801003a:	9904      	ldr	r1, [sp, #16]
 801003c:	bfa8      	it	ge
 801003e:	4642      	movge	r2, r8
 8010040:	1a89      	subs	r1, r1, r2
 8010042:	9104      	str	r1, [sp, #16]
 8010044:	9905      	ldr	r1, [sp, #20]
 8010046:	eba8 0802 	sub.w	r8, r8, r2
 801004a:	1a8a      	subs	r2, r1, r2
 801004c:	9205      	str	r2, [sp, #20]
 801004e:	b303      	cbz	r3, 8010092 <_dtoa_r+0x6b2>
 8010050:	9a07      	ldr	r2, [sp, #28]
 8010052:	2a00      	cmp	r2, #0
 8010054:	f000 80a5 	beq.w	80101a2 <_dtoa_r+0x7c2>
 8010058:	2c00      	cmp	r4, #0
 801005a:	dd13      	ble.n	8010084 <_dtoa_r+0x6a4>
 801005c:	4639      	mov	r1, r7
 801005e:	4622      	mov	r2, r4
 8010060:	4630      	mov	r0, r6
 8010062:	930d      	str	r3, [sp, #52]	; 0x34
 8010064:	f000 fcde 	bl	8010a24 <__pow5mult>
 8010068:	462a      	mov	r2, r5
 801006a:	4601      	mov	r1, r0
 801006c:	4607      	mov	r7, r0
 801006e:	4630      	mov	r0, r6
 8010070:	f000 fc2e 	bl	80108d0 <__multiply>
 8010074:	4629      	mov	r1, r5
 8010076:	9009      	str	r0, [sp, #36]	; 0x24
 8010078:	4630      	mov	r0, r6
 801007a:	f000 fb5d 	bl	8010738 <_Bfree>
 801007e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010080:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010082:	4615      	mov	r5, r2
 8010084:	1b1a      	subs	r2, r3, r4
 8010086:	d004      	beq.n	8010092 <_dtoa_r+0x6b2>
 8010088:	4629      	mov	r1, r5
 801008a:	4630      	mov	r0, r6
 801008c:	f000 fcca 	bl	8010a24 <__pow5mult>
 8010090:	4605      	mov	r5, r0
 8010092:	2101      	movs	r1, #1
 8010094:	4630      	mov	r0, r6
 8010096:	f000 fc05 	bl	80108a4 <__i2b>
 801009a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801009c:	2b00      	cmp	r3, #0
 801009e:	4604      	mov	r4, r0
 80100a0:	f340 8081 	ble.w	80101a6 <_dtoa_r+0x7c6>
 80100a4:	461a      	mov	r2, r3
 80100a6:	4601      	mov	r1, r0
 80100a8:	4630      	mov	r0, r6
 80100aa:	f000 fcbb 	bl	8010a24 <__pow5mult>
 80100ae:	9b06      	ldr	r3, [sp, #24]
 80100b0:	2b01      	cmp	r3, #1
 80100b2:	4604      	mov	r4, r0
 80100b4:	dd7a      	ble.n	80101ac <_dtoa_r+0x7cc>
 80100b6:	2300      	movs	r3, #0
 80100b8:	9309      	str	r3, [sp, #36]	; 0x24
 80100ba:	6922      	ldr	r2, [r4, #16]
 80100bc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80100c0:	6910      	ldr	r0, [r2, #16]
 80100c2:	f000 fba1 	bl	8010808 <__hi0bits>
 80100c6:	f1c0 0020 	rsb	r0, r0, #32
 80100ca:	9b05      	ldr	r3, [sp, #20]
 80100cc:	4418      	add	r0, r3
 80100ce:	f010 001f 	ands.w	r0, r0, #31
 80100d2:	f000 8093 	beq.w	80101fc <_dtoa_r+0x81c>
 80100d6:	f1c0 0220 	rsb	r2, r0, #32
 80100da:	2a04      	cmp	r2, #4
 80100dc:	f340 8085 	ble.w	80101ea <_dtoa_r+0x80a>
 80100e0:	9b04      	ldr	r3, [sp, #16]
 80100e2:	f1c0 001c 	rsb	r0, r0, #28
 80100e6:	4403      	add	r3, r0
 80100e8:	9304      	str	r3, [sp, #16]
 80100ea:	9b05      	ldr	r3, [sp, #20]
 80100ec:	4480      	add	r8, r0
 80100ee:	4403      	add	r3, r0
 80100f0:	9305      	str	r3, [sp, #20]
 80100f2:	9b04      	ldr	r3, [sp, #16]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	dd05      	ble.n	8010104 <_dtoa_r+0x724>
 80100f8:	4629      	mov	r1, r5
 80100fa:	461a      	mov	r2, r3
 80100fc:	4630      	mov	r0, r6
 80100fe:	f000 fceb 	bl	8010ad8 <__lshift>
 8010102:	4605      	mov	r5, r0
 8010104:	9b05      	ldr	r3, [sp, #20]
 8010106:	2b00      	cmp	r3, #0
 8010108:	dd05      	ble.n	8010116 <_dtoa_r+0x736>
 801010a:	4621      	mov	r1, r4
 801010c:	461a      	mov	r2, r3
 801010e:	4630      	mov	r0, r6
 8010110:	f000 fce2 	bl	8010ad8 <__lshift>
 8010114:	4604      	mov	r4, r0
 8010116:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010118:	2b00      	cmp	r3, #0
 801011a:	d071      	beq.n	8010200 <_dtoa_r+0x820>
 801011c:	4621      	mov	r1, r4
 801011e:	4628      	mov	r0, r5
 8010120:	f000 fd46 	bl	8010bb0 <__mcmp>
 8010124:	2800      	cmp	r0, #0
 8010126:	da6b      	bge.n	8010200 <_dtoa_r+0x820>
 8010128:	2300      	movs	r3, #0
 801012a:	4629      	mov	r1, r5
 801012c:	220a      	movs	r2, #10
 801012e:	4630      	mov	r0, r6
 8010130:	f000 fb24 	bl	801077c <__multadd>
 8010134:	9b07      	ldr	r3, [sp, #28]
 8010136:	f10b 3bff 	add.w	fp, fp, #4294967295
 801013a:	4605      	mov	r5, r0
 801013c:	2b00      	cmp	r3, #0
 801013e:	f000 8197 	beq.w	8010470 <_dtoa_r+0xa90>
 8010142:	4639      	mov	r1, r7
 8010144:	2300      	movs	r3, #0
 8010146:	220a      	movs	r2, #10
 8010148:	4630      	mov	r0, r6
 801014a:	f000 fb17 	bl	801077c <__multadd>
 801014e:	f1ba 0f00 	cmp.w	sl, #0
 8010152:	4607      	mov	r7, r0
 8010154:	f300 8093 	bgt.w	801027e <_dtoa_r+0x89e>
 8010158:	9b06      	ldr	r3, [sp, #24]
 801015a:	2b02      	cmp	r3, #2
 801015c:	dc57      	bgt.n	801020e <_dtoa_r+0x82e>
 801015e:	e08e      	b.n	801027e <_dtoa_r+0x89e>
 8010160:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010162:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010166:	e751      	b.n	801000c <_dtoa_r+0x62c>
 8010168:	f109 34ff 	add.w	r4, r9, #4294967295
 801016c:	42a3      	cmp	r3, r4
 801016e:	bfbf      	itttt	lt
 8010170:	1ae2      	sublt	r2, r4, r3
 8010172:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8010174:	189b      	addlt	r3, r3, r2
 8010176:	930a      	strlt	r3, [sp, #40]	; 0x28
 8010178:	bfae      	itee	ge
 801017a:	1b1c      	subge	r4, r3, r4
 801017c:	4623      	movlt	r3, r4
 801017e:	2400      	movlt	r4, #0
 8010180:	f1b9 0f00 	cmp.w	r9, #0
 8010184:	bfb5      	itete	lt
 8010186:	9a04      	ldrlt	r2, [sp, #16]
 8010188:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801018c:	eba2 0809 	sublt.w	r8, r2, r9
 8010190:	464a      	movge	r2, r9
 8010192:	bfb8      	it	lt
 8010194:	2200      	movlt	r2, #0
 8010196:	e73c      	b.n	8010012 <_dtoa_r+0x632>
 8010198:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801019c:	9f07      	ldr	r7, [sp, #28]
 801019e:	461c      	mov	r4, r3
 80101a0:	e744      	b.n	801002c <_dtoa_r+0x64c>
 80101a2:	461a      	mov	r2, r3
 80101a4:	e770      	b.n	8010088 <_dtoa_r+0x6a8>
 80101a6:	9b06      	ldr	r3, [sp, #24]
 80101a8:	2b01      	cmp	r3, #1
 80101aa:	dc18      	bgt.n	80101de <_dtoa_r+0x7fe>
 80101ac:	9b02      	ldr	r3, [sp, #8]
 80101ae:	b9b3      	cbnz	r3, 80101de <_dtoa_r+0x7fe>
 80101b0:	9b03      	ldr	r3, [sp, #12]
 80101b2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80101b6:	b9a2      	cbnz	r2, 80101e2 <_dtoa_r+0x802>
 80101b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80101bc:	0d12      	lsrs	r2, r2, #20
 80101be:	0512      	lsls	r2, r2, #20
 80101c0:	b18a      	cbz	r2, 80101e6 <_dtoa_r+0x806>
 80101c2:	9b04      	ldr	r3, [sp, #16]
 80101c4:	3301      	adds	r3, #1
 80101c6:	9304      	str	r3, [sp, #16]
 80101c8:	9b05      	ldr	r3, [sp, #20]
 80101ca:	3301      	adds	r3, #1
 80101cc:	9305      	str	r3, [sp, #20]
 80101ce:	2301      	movs	r3, #1
 80101d0:	9309      	str	r3, [sp, #36]	; 0x24
 80101d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	f47f af70 	bne.w	80100ba <_dtoa_r+0x6da>
 80101da:	2001      	movs	r0, #1
 80101dc:	e775      	b.n	80100ca <_dtoa_r+0x6ea>
 80101de:	2300      	movs	r3, #0
 80101e0:	e7f6      	b.n	80101d0 <_dtoa_r+0x7f0>
 80101e2:	9b02      	ldr	r3, [sp, #8]
 80101e4:	e7f4      	b.n	80101d0 <_dtoa_r+0x7f0>
 80101e6:	9209      	str	r2, [sp, #36]	; 0x24
 80101e8:	e7f3      	b.n	80101d2 <_dtoa_r+0x7f2>
 80101ea:	d082      	beq.n	80100f2 <_dtoa_r+0x712>
 80101ec:	9b04      	ldr	r3, [sp, #16]
 80101ee:	321c      	adds	r2, #28
 80101f0:	4413      	add	r3, r2
 80101f2:	9304      	str	r3, [sp, #16]
 80101f4:	9b05      	ldr	r3, [sp, #20]
 80101f6:	4490      	add	r8, r2
 80101f8:	4413      	add	r3, r2
 80101fa:	e779      	b.n	80100f0 <_dtoa_r+0x710>
 80101fc:	4602      	mov	r2, r0
 80101fe:	e7f5      	b.n	80101ec <_dtoa_r+0x80c>
 8010200:	f1b9 0f00 	cmp.w	r9, #0
 8010204:	dc36      	bgt.n	8010274 <_dtoa_r+0x894>
 8010206:	9b06      	ldr	r3, [sp, #24]
 8010208:	2b02      	cmp	r3, #2
 801020a:	dd33      	ble.n	8010274 <_dtoa_r+0x894>
 801020c:	46ca      	mov	sl, r9
 801020e:	f1ba 0f00 	cmp.w	sl, #0
 8010212:	d10d      	bne.n	8010230 <_dtoa_r+0x850>
 8010214:	4621      	mov	r1, r4
 8010216:	4653      	mov	r3, sl
 8010218:	2205      	movs	r2, #5
 801021a:	4630      	mov	r0, r6
 801021c:	f000 faae 	bl	801077c <__multadd>
 8010220:	4601      	mov	r1, r0
 8010222:	4604      	mov	r4, r0
 8010224:	4628      	mov	r0, r5
 8010226:	f000 fcc3 	bl	8010bb0 <__mcmp>
 801022a:	2800      	cmp	r0, #0
 801022c:	f73f ade4 	bgt.w	800fdf8 <_dtoa_r+0x418>
 8010230:	9b08      	ldr	r3, [sp, #32]
 8010232:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010236:	ea6f 0b03 	mvn.w	fp, r3
 801023a:	f04f 0900 	mov.w	r9, #0
 801023e:	4621      	mov	r1, r4
 8010240:	4630      	mov	r0, r6
 8010242:	f000 fa79 	bl	8010738 <_Bfree>
 8010246:	2f00      	cmp	r7, #0
 8010248:	f43f aea1 	beq.w	800ff8e <_dtoa_r+0x5ae>
 801024c:	f1b9 0f00 	cmp.w	r9, #0
 8010250:	d005      	beq.n	801025e <_dtoa_r+0x87e>
 8010252:	45b9      	cmp	r9, r7
 8010254:	d003      	beq.n	801025e <_dtoa_r+0x87e>
 8010256:	4649      	mov	r1, r9
 8010258:	4630      	mov	r0, r6
 801025a:	f000 fa6d 	bl	8010738 <_Bfree>
 801025e:	4639      	mov	r1, r7
 8010260:	4630      	mov	r0, r6
 8010262:	f000 fa69 	bl	8010738 <_Bfree>
 8010266:	e692      	b.n	800ff8e <_dtoa_r+0x5ae>
 8010268:	2400      	movs	r4, #0
 801026a:	4627      	mov	r7, r4
 801026c:	e7e0      	b.n	8010230 <_dtoa_r+0x850>
 801026e:	4693      	mov	fp, r2
 8010270:	4627      	mov	r7, r4
 8010272:	e5c1      	b.n	800fdf8 <_dtoa_r+0x418>
 8010274:	9b07      	ldr	r3, [sp, #28]
 8010276:	46ca      	mov	sl, r9
 8010278:	2b00      	cmp	r3, #0
 801027a:	f000 8100 	beq.w	801047e <_dtoa_r+0xa9e>
 801027e:	f1b8 0f00 	cmp.w	r8, #0
 8010282:	dd05      	ble.n	8010290 <_dtoa_r+0x8b0>
 8010284:	4639      	mov	r1, r7
 8010286:	4642      	mov	r2, r8
 8010288:	4630      	mov	r0, r6
 801028a:	f000 fc25 	bl	8010ad8 <__lshift>
 801028e:	4607      	mov	r7, r0
 8010290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010292:	2b00      	cmp	r3, #0
 8010294:	d05d      	beq.n	8010352 <_dtoa_r+0x972>
 8010296:	6879      	ldr	r1, [r7, #4]
 8010298:	4630      	mov	r0, r6
 801029a:	f000 fa0d 	bl	80106b8 <_Balloc>
 801029e:	4680      	mov	r8, r0
 80102a0:	b928      	cbnz	r0, 80102ae <_dtoa_r+0x8ce>
 80102a2:	4b82      	ldr	r3, [pc, #520]	; (80104ac <_dtoa_r+0xacc>)
 80102a4:	4602      	mov	r2, r0
 80102a6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80102aa:	f7ff bbb1 	b.w	800fa10 <_dtoa_r+0x30>
 80102ae:	693a      	ldr	r2, [r7, #16]
 80102b0:	3202      	adds	r2, #2
 80102b2:	0092      	lsls	r2, r2, #2
 80102b4:	f107 010c 	add.w	r1, r7, #12
 80102b8:	300c      	adds	r0, #12
 80102ba:	f7ff fafa 	bl	800f8b2 <memcpy>
 80102be:	2201      	movs	r2, #1
 80102c0:	4641      	mov	r1, r8
 80102c2:	4630      	mov	r0, r6
 80102c4:	f000 fc08 	bl	8010ad8 <__lshift>
 80102c8:	9b01      	ldr	r3, [sp, #4]
 80102ca:	3301      	adds	r3, #1
 80102cc:	9304      	str	r3, [sp, #16]
 80102ce:	9b01      	ldr	r3, [sp, #4]
 80102d0:	4453      	add	r3, sl
 80102d2:	9308      	str	r3, [sp, #32]
 80102d4:	9b02      	ldr	r3, [sp, #8]
 80102d6:	f003 0301 	and.w	r3, r3, #1
 80102da:	46b9      	mov	r9, r7
 80102dc:	9307      	str	r3, [sp, #28]
 80102de:	4607      	mov	r7, r0
 80102e0:	9b04      	ldr	r3, [sp, #16]
 80102e2:	4621      	mov	r1, r4
 80102e4:	3b01      	subs	r3, #1
 80102e6:	4628      	mov	r0, r5
 80102e8:	9302      	str	r3, [sp, #8]
 80102ea:	f7ff faf0 	bl	800f8ce <quorem>
 80102ee:	4603      	mov	r3, r0
 80102f0:	3330      	adds	r3, #48	; 0x30
 80102f2:	9005      	str	r0, [sp, #20]
 80102f4:	4649      	mov	r1, r9
 80102f6:	4628      	mov	r0, r5
 80102f8:	9309      	str	r3, [sp, #36]	; 0x24
 80102fa:	f000 fc59 	bl	8010bb0 <__mcmp>
 80102fe:	463a      	mov	r2, r7
 8010300:	4682      	mov	sl, r0
 8010302:	4621      	mov	r1, r4
 8010304:	4630      	mov	r0, r6
 8010306:	f000 fc6f 	bl	8010be8 <__mdiff>
 801030a:	68c2      	ldr	r2, [r0, #12]
 801030c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801030e:	4680      	mov	r8, r0
 8010310:	bb0a      	cbnz	r2, 8010356 <_dtoa_r+0x976>
 8010312:	4601      	mov	r1, r0
 8010314:	4628      	mov	r0, r5
 8010316:	f000 fc4b 	bl	8010bb0 <__mcmp>
 801031a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801031c:	4602      	mov	r2, r0
 801031e:	4641      	mov	r1, r8
 8010320:	4630      	mov	r0, r6
 8010322:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8010326:	f000 fa07 	bl	8010738 <_Bfree>
 801032a:	9b06      	ldr	r3, [sp, #24]
 801032c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801032e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8010332:	ea43 0102 	orr.w	r1, r3, r2
 8010336:	9b07      	ldr	r3, [sp, #28]
 8010338:	4319      	orrs	r1, r3
 801033a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801033c:	d10d      	bne.n	801035a <_dtoa_r+0x97a>
 801033e:	2b39      	cmp	r3, #57	; 0x39
 8010340:	d029      	beq.n	8010396 <_dtoa_r+0x9b6>
 8010342:	f1ba 0f00 	cmp.w	sl, #0
 8010346:	dd01      	ble.n	801034c <_dtoa_r+0x96c>
 8010348:	9b05      	ldr	r3, [sp, #20]
 801034a:	3331      	adds	r3, #49	; 0x31
 801034c:	9a02      	ldr	r2, [sp, #8]
 801034e:	7013      	strb	r3, [r2, #0]
 8010350:	e775      	b.n	801023e <_dtoa_r+0x85e>
 8010352:	4638      	mov	r0, r7
 8010354:	e7b8      	b.n	80102c8 <_dtoa_r+0x8e8>
 8010356:	2201      	movs	r2, #1
 8010358:	e7e1      	b.n	801031e <_dtoa_r+0x93e>
 801035a:	f1ba 0f00 	cmp.w	sl, #0
 801035e:	db06      	blt.n	801036e <_dtoa_r+0x98e>
 8010360:	9906      	ldr	r1, [sp, #24]
 8010362:	ea41 0a0a 	orr.w	sl, r1, sl
 8010366:	9907      	ldr	r1, [sp, #28]
 8010368:	ea5a 0a01 	orrs.w	sl, sl, r1
 801036c:	d120      	bne.n	80103b0 <_dtoa_r+0x9d0>
 801036e:	2a00      	cmp	r2, #0
 8010370:	ddec      	ble.n	801034c <_dtoa_r+0x96c>
 8010372:	4629      	mov	r1, r5
 8010374:	2201      	movs	r2, #1
 8010376:	4630      	mov	r0, r6
 8010378:	9304      	str	r3, [sp, #16]
 801037a:	f000 fbad 	bl	8010ad8 <__lshift>
 801037e:	4621      	mov	r1, r4
 8010380:	4605      	mov	r5, r0
 8010382:	f000 fc15 	bl	8010bb0 <__mcmp>
 8010386:	2800      	cmp	r0, #0
 8010388:	9b04      	ldr	r3, [sp, #16]
 801038a:	dc02      	bgt.n	8010392 <_dtoa_r+0x9b2>
 801038c:	d1de      	bne.n	801034c <_dtoa_r+0x96c>
 801038e:	07da      	lsls	r2, r3, #31
 8010390:	d5dc      	bpl.n	801034c <_dtoa_r+0x96c>
 8010392:	2b39      	cmp	r3, #57	; 0x39
 8010394:	d1d8      	bne.n	8010348 <_dtoa_r+0x968>
 8010396:	9a02      	ldr	r2, [sp, #8]
 8010398:	2339      	movs	r3, #57	; 0x39
 801039a:	7013      	strb	r3, [r2, #0]
 801039c:	4643      	mov	r3, r8
 801039e:	4698      	mov	r8, r3
 80103a0:	3b01      	subs	r3, #1
 80103a2:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80103a6:	2a39      	cmp	r2, #57	; 0x39
 80103a8:	d051      	beq.n	801044e <_dtoa_r+0xa6e>
 80103aa:	3201      	adds	r2, #1
 80103ac:	701a      	strb	r2, [r3, #0]
 80103ae:	e746      	b.n	801023e <_dtoa_r+0x85e>
 80103b0:	2a00      	cmp	r2, #0
 80103b2:	dd03      	ble.n	80103bc <_dtoa_r+0x9dc>
 80103b4:	2b39      	cmp	r3, #57	; 0x39
 80103b6:	d0ee      	beq.n	8010396 <_dtoa_r+0x9b6>
 80103b8:	3301      	adds	r3, #1
 80103ba:	e7c7      	b.n	801034c <_dtoa_r+0x96c>
 80103bc:	9a04      	ldr	r2, [sp, #16]
 80103be:	9908      	ldr	r1, [sp, #32]
 80103c0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80103c4:	428a      	cmp	r2, r1
 80103c6:	d02b      	beq.n	8010420 <_dtoa_r+0xa40>
 80103c8:	4629      	mov	r1, r5
 80103ca:	2300      	movs	r3, #0
 80103cc:	220a      	movs	r2, #10
 80103ce:	4630      	mov	r0, r6
 80103d0:	f000 f9d4 	bl	801077c <__multadd>
 80103d4:	45b9      	cmp	r9, r7
 80103d6:	4605      	mov	r5, r0
 80103d8:	f04f 0300 	mov.w	r3, #0
 80103dc:	f04f 020a 	mov.w	r2, #10
 80103e0:	4649      	mov	r1, r9
 80103e2:	4630      	mov	r0, r6
 80103e4:	d107      	bne.n	80103f6 <_dtoa_r+0xa16>
 80103e6:	f000 f9c9 	bl	801077c <__multadd>
 80103ea:	4681      	mov	r9, r0
 80103ec:	4607      	mov	r7, r0
 80103ee:	9b04      	ldr	r3, [sp, #16]
 80103f0:	3301      	adds	r3, #1
 80103f2:	9304      	str	r3, [sp, #16]
 80103f4:	e774      	b.n	80102e0 <_dtoa_r+0x900>
 80103f6:	f000 f9c1 	bl	801077c <__multadd>
 80103fa:	4639      	mov	r1, r7
 80103fc:	4681      	mov	r9, r0
 80103fe:	2300      	movs	r3, #0
 8010400:	220a      	movs	r2, #10
 8010402:	4630      	mov	r0, r6
 8010404:	f000 f9ba 	bl	801077c <__multadd>
 8010408:	4607      	mov	r7, r0
 801040a:	e7f0      	b.n	80103ee <_dtoa_r+0xa0e>
 801040c:	f1ba 0f00 	cmp.w	sl, #0
 8010410:	9a01      	ldr	r2, [sp, #4]
 8010412:	bfcc      	ite	gt
 8010414:	46d0      	movgt	r8, sl
 8010416:	f04f 0801 	movle.w	r8, #1
 801041a:	4490      	add	r8, r2
 801041c:	f04f 0900 	mov.w	r9, #0
 8010420:	4629      	mov	r1, r5
 8010422:	2201      	movs	r2, #1
 8010424:	4630      	mov	r0, r6
 8010426:	9302      	str	r3, [sp, #8]
 8010428:	f000 fb56 	bl	8010ad8 <__lshift>
 801042c:	4621      	mov	r1, r4
 801042e:	4605      	mov	r5, r0
 8010430:	f000 fbbe 	bl	8010bb0 <__mcmp>
 8010434:	2800      	cmp	r0, #0
 8010436:	dcb1      	bgt.n	801039c <_dtoa_r+0x9bc>
 8010438:	d102      	bne.n	8010440 <_dtoa_r+0xa60>
 801043a:	9b02      	ldr	r3, [sp, #8]
 801043c:	07db      	lsls	r3, r3, #31
 801043e:	d4ad      	bmi.n	801039c <_dtoa_r+0x9bc>
 8010440:	4643      	mov	r3, r8
 8010442:	4698      	mov	r8, r3
 8010444:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010448:	2a30      	cmp	r2, #48	; 0x30
 801044a:	d0fa      	beq.n	8010442 <_dtoa_r+0xa62>
 801044c:	e6f7      	b.n	801023e <_dtoa_r+0x85e>
 801044e:	9a01      	ldr	r2, [sp, #4]
 8010450:	429a      	cmp	r2, r3
 8010452:	d1a4      	bne.n	801039e <_dtoa_r+0x9be>
 8010454:	f10b 0b01 	add.w	fp, fp, #1
 8010458:	2331      	movs	r3, #49	; 0x31
 801045a:	e778      	b.n	801034e <_dtoa_r+0x96e>
 801045c:	4b14      	ldr	r3, [pc, #80]	; (80104b0 <_dtoa_r+0xad0>)
 801045e:	f7ff bb2a 	b.w	800fab6 <_dtoa_r+0xd6>
 8010462:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010464:	2b00      	cmp	r3, #0
 8010466:	f47f ab05 	bne.w	800fa74 <_dtoa_r+0x94>
 801046a:	4b12      	ldr	r3, [pc, #72]	; (80104b4 <_dtoa_r+0xad4>)
 801046c:	f7ff bb23 	b.w	800fab6 <_dtoa_r+0xd6>
 8010470:	f1ba 0f00 	cmp.w	sl, #0
 8010474:	dc03      	bgt.n	801047e <_dtoa_r+0xa9e>
 8010476:	9b06      	ldr	r3, [sp, #24]
 8010478:	2b02      	cmp	r3, #2
 801047a:	f73f aec8 	bgt.w	801020e <_dtoa_r+0x82e>
 801047e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010482:	4621      	mov	r1, r4
 8010484:	4628      	mov	r0, r5
 8010486:	f7ff fa22 	bl	800f8ce <quorem>
 801048a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801048e:	f808 3b01 	strb.w	r3, [r8], #1
 8010492:	9a01      	ldr	r2, [sp, #4]
 8010494:	eba8 0202 	sub.w	r2, r8, r2
 8010498:	4592      	cmp	sl, r2
 801049a:	ddb7      	ble.n	801040c <_dtoa_r+0xa2c>
 801049c:	4629      	mov	r1, r5
 801049e:	2300      	movs	r3, #0
 80104a0:	220a      	movs	r2, #10
 80104a2:	4630      	mov	r0, r6
 80104a4:	f000 f96a 	bl	801077c <__multadd>
 80104a8:	4605      	mov	r5, r0
 80104aa:	e7ea      	b.n	8010482 <_dtoa_r+0xaa2>
 80104ac:	08011860 	.word	0x08011860
 80104b0:	080117c0 	.word	0x080117c0
 80104b4:	080117e4 	.word	0x080117e4

080104b8 <_free_r>:
 80104b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80104ba:	2900      	cmp	r1, #0
 80104bc:	d044      	beq.n	8010548 <_free_r+0x90>
 80104be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80104c2:	9001      	str	r0, [sp, #4]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	f1a1 0404 	sub.w	r4, r1, #4
 80104ca:	bfb8      	it	lt
 80104cc:	18e4      	addlt	r4, r4, r3
 80104ce:	f000 f8e7 	bl	80106a0 <__malloc_lock>
 80104d2:	4a1e      	ldr	r2, [pc, #120]	; (801054c <_free_r+0x94>)
 80104d4:	9801      	ldr	r0, [sp, #4]
 80104d6:	6813      	ldr	r3, [r2, #0]
 80104d8:	b933      	cbnz	r3, 80104e8 <_free_r+0x30>
 80104da:	6063      	str	r3, [r4, #4]
 80104dc:	6014      	str	r4, [r2, #0]
 80104de:	b003      	add	sp, #12
 80104e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80104e4:	f000 b8e2 	b.w	80106ac <__malloc_unlock>
 80104e8:	42a3      	cmp	r3, r4
 80104ea:	d908      	bls.n	80104fe <_free_r+0x46>
 80104ec:	6825      	ldr	r5, [r4, #0]
 80104ee:	1961      	adds	r1, r4, r5
 80104f0:	428b      	cmp	r3, r1
 80104f2:	bf01      	itttt	eq
 80104f4:	6819      	ldreq	r1, [r3, #0]
 80104f6:	685b      	ldreq	r3, [r3, #4]
 80104f8:	1949      	addeq	r1, r1, r5
 80104fa:	6021      	streq	r1, [r4, #0]
 80104fc:	e7ed      	b.n	80104da <_free_r+0x22>
 80104fe:	461a      	mov	r2, r3
 8010500:	685b      	ldr	r3, [r3, #4]
 8010502:	b10b      	cbz	r3, 8010508 <_free_r+0x50>
 8010504:	42a3      	cmp	r3, r4
 8010506:	d9fa      	bls.n	80104fe <_free_r+0x46>
 8010508:	6811      	ldr	r1, [r2, #0]
 801050a:	1855      	adds	r5, r2, r1
 801050c:	42a5      	cmp	r5, r4
 801050e:	d10b      	bne.n	8010528 <_free_r+0x70>
 8010510:	6824      	ldr	r4, [r4, #0]
 8010512:	4421      	add	r1, r4
 8010514:	1854      	adds	r4, r2, r1
 8010516:	42a3      	cmp	r3, r4
 8010518:	6011      	str	r1, [r2, #0]
 801051a:	d1e0      	bne.n	80104de <_free_r+0x26>
 801051c:	681c      	ldr	r4, [r3, #0]
 801051e:	685b      	ldr	r3, [r3, #4]
 8010520:	6053      	str	r3, [r2, #4]
 8010522:	440c      	add	r4, r1
 8010524:	6014      	str	r4, [r2, #0]
 8010526:	e7da      	b.n	80104de <_free_r+0x26>
 8010528:	d902      	bls.n	8010530 <_free_r+0x78>
 801052a:	230c      	movs	r3, #12
 801052c:	6003      	str	r3, [r0, #0]
 801052e:	e7d6      	b.n	80104de <_free_r+0x26>
 8010530:	6825      	ldr	r5, [r4, #0]
 8010532:	1961      	adds	r1, r4, r5
 8010534:	428b      	cmp	r3, r1
 8010536:	bf04      	itt	eq
 8010538:	6819      	ldreq	r1, [r3, #0]
 801053a:	685b      	ldreq	r3, [r3, #4]
 801053c:	6063      	str	r3, [r4, #4]
 801053e:	bf04      	itt	eq
 8010540:	1949      	addeq	r1, r1, r5
 8010542:	6021      	streq	r1, [r4, #0]
 8010544:	6054      	str	r4, [r2, #4]
 8010546:	e7ca      	b.n	80104de <_free_r+0x26>
 8010548:	b003      	add	sp, #12
 801054a:	bd30      	pop	{r4, r5, pc}
 801054c:	24005830 	.word	0x24005830

08010550 <malloc>:
 8010550:	4b02      	ldr	r3, [pc, #8]	; (801055c <malloc+0xc>)
 8010552:	4601      	mov	r1, r0
 8010554:	6818      	ldr	r0, [r3, #0]
 8010556:	f000 b823 	b.w	80105a0 <_malloc_r>
 801055a:	bf00      	nop
 801055c:	24000080 	.word	0x24000080

08010560 <sbrk_aligned>:
 8010560:	b570      	push	{r4, r5, r6, lr}
 8010562:	4e0e      	ldr	r6, [pc, #56]	; (801059c <sbrk_aligned+0x3c>)
 8010564:	460c      	mov	r4, r1
 8010566:	6831      	ldr	r1, [r6, #0]
 8010568:	4605      	mov	r5, r0
 801056a:	b911      	cbnz	r1, 8010572 <sbrk_aligned+0x12>
 801056c:	f000 fea8 	bl	80112c0 <_sbrk_r>
 8010570:	6030      	str	r0, [r6, #0]
 8010572:	4621      	mov	r1, r4
 8010574:	4628      	mov	r0, r5
 8010576:	f000 fea3 	bl	80112c0 <_sbrk_r>
 801057a:	1c43      	adds	r3, r0, #1
 801057c:	d00a      	beq.n	8010594 <sbrk_aligned+0x34>
 801057e:	1cc4      	adds	r4, r0, #3
 8010580:	f024 0403 	bic.w	r4, r4, #3
 8010584:	42a0      	cmp	r0, r4
 8010586:	d007      	beq.n	8010598 <sbrk_aligned+0x38>
 8010588:	1a21      	subs	r1, r4, r0
 801058a:	4628      	mov	r0, r5
 801058c:	f000 fe98 	bl	80112c0 <_sbrk_r>
 8010590:	3001      	adds	r0, #1
 8010592:	d101      	bne.n	8010598 <sbrk_aligned+0x38>
 8010594:	f04f 34ff 	mov.w	r4, #4294967295
 8010598:	4620      	mov	r0, r4
 801059a:	bd70      	pop	{r4, r5, r6, pc}
 801059c:	24005834 	.word	0x24005834

080105a0 <_malloc_r>:
 80105a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80105a4:	1ccd      	adds	r5, r1, #3
 80105a6:	f025 0503 	bic.w	r5, r5, #3
 80105aa:	3508      	adds	r5, #8
 80105ac:	2d0c      	cmp	r5, #12
 80105ae:	bf38      	it	cc
 80105b0:	250c      	movcc	r5, #12
 80105b2:	2d00      	cmp	r5, #0
 80105b4:	4607      	mov	r7, r0
 80105b6:	db01      	blt.n	80105bc <_malloc_r+0x1c>
 80105b8:	42a9      	cmp	r1, r5
 80105ba:	d905      	bls.n	80105c8 <_malloc_r+0x28>
 80105bc:	230c      	movs	r3, #12
 80105be:	603b      	str	r3, [r7, #0]
 80105c0:	2600      	movs	r6, #0
 80105c2:	4630      	mov	r0, r6
 80105c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80105c8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801069c <_malloc_r+0xfc>
 80105cc:	f000 f868 	bl	80106a0 <__malloc_lock>
 80105d0:	f8d8 3000 	ldr.w	r3, [r8]
 80105d4:	461c      	mov	r4, r3
 80105d6:	bb5c      	cbnz	r4, 8010630 <_malloc_r+0x90>
 80105d8:	4629      	mov	r1, r5
 80105da:	4638      	mov	r0, r7
 80105dc:	f7ff ffc0 	bl	8010560 <sbrk_aligned>
 80105e0:	1c43      	adds	r3, r0, #1
 80105e2:	4604      	mov	r4, r0
 80105e4:	d155      	bne.n	8010692 <_malloc_r+0xf2>
 80105e6:	f8d8 4000 	ldr.w	r4, [r8]
 80105ea:	4626      	mov	r6, r4
 80105ec:	2e00      	cmp	r6, #0
 80105ee:	d145      	bne.n	801067c <_malloc_r+0xdc>
 80105f0:	2c00      	cmp	r4, #0
 80105f2:	d048      	beq.n	8010686 <_malloc_r+0xe6>
 80105f4:	6823      	ldr	r3, [r4, #0]
 80105f6:	4631      	mov	r1, r6
 80105f8:	4638      	mov	r0, r7
 80105fa:	eb04 0903 	add.w	r9, r4, r3
 80105fe:	f000 fe5f 	bl	80112c0 <_sbrk_r>
 8010602:	4581      	cmp	r9, r0
 8010604:	d13f      	bne.n	8010686 <_malloc_r+0xe6>
 8010606:	6821      	ldr	r1, [r4, #0]
 8010608:	1a6d      	subs	r5, r5, r1
 801060a:	4629      	mov	r1, r5
 801060c:	4638      	mov	r0, r7
 801060e:	f7ff ffa7 	bl	8010560 <sbrk_aligned>
 8010612:	3001      	adds	r0, #1
 8010614:	d037      	beq.n	8010686 <_malloc_r+0xe6>
 8010616:	6823      	ldr	r3, [r4, #0]
 8010618:	442b      	add	r3, r5
 801061a:	6023      	str	r3, [r4, #0]
 801061c:	f8d8 3000 	ldr.w	r3, [r8]
 8010620:	2b00      	cmp	r3, #0
 8010622:	d038      	beq.n	8010696 <_malloc_r+0xf6>
 8010624:	685a      	ldr	r2, [r3, #4]
 8010626:	42a2      	cmp	r2, r4
 8010628:	d12b      	bne.n	8010682 <_malloc_r+0xe2>
 801062a:	2200      	movs	r2, #0
 801062c:	605a      	str	r2, [r3, #4]
 801062e:	e00f      	b.n	8010650 <_malloc_r+0xb0>
 8010630:	6822      	ldr	r2, [r4, #0]
 8010632:	1b52      	subs	r2, r2, r5
 8010634:	d41f      	bmi.n	8010676 <_malloc_r+0xd6>
 8010636:	2a0b      	cmp	r2, #11
 8010638:	d917      	bls.n	801066a <_malloc_r+0xca>
 801063a:	1961      	adds	r1, r4, r5
 801063c:	42a3      	cmp	r3, r4
 801063e:	6025      	str	r5, [r4, #0]
 8010640:	bf18      	it	ne
 8010642:	6059      	strne	r1, [r3, #4]
 8010644:	6863      	ldr	r3, [r4, #4]
 8010646:	bf08      	it	eq
 8010648:	f8c8 1000 	streq.w	r1, [r8]
 801064c:	5162      	str	r2, [r4, r5]
 801064e:	604b      	str	r3, [r1, #4]
 8010650:	4638      	mov	r0, r7
 8010652:	f104 060b 	add.w	r6, r4, #11
 8010656:	f000 f829 	bl	80106ac <__malloc_unlock>
 801065a:	f026 0607 	bic.w	r6, r6, #7
 801065e:	1d23      	adds	r3, r4, #4
 8010660:	1af2      	subs	r2, r6, r3
 8010662:	d0ae      	beq.n	80105c2 <_malloc_r+0x22>
 8010664:	1b9b      	subs	r3, r3, r6
 8010666:	50a3      	str	r3, [r4, r2]
 8010668:	e7ab      	b.n	80105c2 <_malloc_r+0x22>
 801066a:	42a3      	cmp	r3, r4
 801066c:	6862      	ldr	r2, [r4, #4]
 801066e:	d1dd      	bne.n	801062c <_malloc_r+0x8c>
 8010670:	f8c8 2000 	str.w	r2, [r8]
 8010674:	e7ec      	b.n	8010650 <_malloc_r+0xb0>
 8010676:	4623      	mov	r3, r4
 8010678:	6864      	ldr	r4, [r4, #4]
 801067a:	e7ac      	b.n	80105d6 <_malloc_r+0x36>
 801067c:	4634      	mov	r4, r6
 801067e:	6876      	ldr	r6, [r6, #4]
 8010680:	e7b4      	b.n	80105ec <_malloc_r+0x4c>
 8010682:	4613      	mov	r3, r2
 8010684:	e7cc      	b.n	8010620 <_malloc_r+0x80>
 8010686:	230c      	movs	r3, #12
 8010688:	603b      	str	r3, [r7, #0]
 801068a:	4638      	mov	r0, r7
 801068c:	f000 f80e 	bl	80106ac <__malloc_unlock>
 8010690:	e797      	b.n	80105c2 <_malloc_r+0x22>
 8010692:	6025      	str	r5, [r4, #0]
 8010694:	e7dc      	b.n	8010650 <_malloc_r+0xb0>
 8010696:	605b      	str	r3, [r3, #4]
 8010698:	deff      	udf	#255	; 0xff
 801069a:	bf00      	nop
 801069c:	24005830 	.word	0x24005830

080106a0 <__malloc_lock>:
 80106a0:	4801      	ldr	r0, [pc, #4]	; (80106a8 <__malloc_lock+0x8>)
 80106a2:	f7ff b904 	b.w	800f8ae <__retarget_lock_acquire_recursive>
 80106a6:	bf00      	nop
 80106a8:	2400582c 	.word	0x2400582c

080106ac <__malloc_unlock>:
 80106ac:	4801      	ldr	r0, [pc, #4]	; (80106b4 <__malloc_unlock+0x8>)
 80106ae:	f7ff b8ff 	b.w	800f8b0 <__retarget_lock_release_recursive>
 80106b2:	bf00      	nop
 80106b4:	2400582c 	.word	0x2400582c

080106b8 <_Balloc>:
 80106b8:	b570      	push	{r4, r5, r6, lr}
 80106ba:	69c6      	ldr	r6, [r0, #28]
 80106bc:	4604      	mov	r4, r0
 80106be:	460d      	mov	r5, r1
 80106c0:	b976      	cbnz	r6, 80106e0 <_Balloc+0x28>
 80106c2:	2010      	movs	r0, #16
 80106c4:	f7ff ff44 	bl	8010550 <malloc>
 80106c8:	4602      	mov	r2, r0
 80106ca:	61e0      	str	r0, [r4, #28]
 80106cc:	b920      	cbnz	r0, 80106d8 <_Balloc+0x20>
 80106ce:	4b18      	ldr	r3, [pc, #96]	; (8010730 <_Balloc+0x78>)
 80106d0:	4818      	ldr	r0, [pc, #96]	; (8010734 <_Balloc+0x7c>)
 80106d2:	216b      	movs	r1, #107	; 0x6b
 80106d4:	f000 fe04 	bl	80112e0 <__assert_func>
 80106d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80106dc:	6006      	str	r6, [r0, #0]
 80106de:	60c6      	str	r6, [r0, #12]
 80106e0:	69e6      	ldr	r6, [r4, #28]
 80106e2:	68f3      	ldr	r3, [r6, #12]
 80106e4:	b183      	cbz	r3, 8010708 <_Balloc+0x50>
 80106e6:	69e3      	ldr	r3, [r4, #28]
 80106e8:	68db      	ldr	r3, [r3, #12]
 80106ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80106ee:	b9b8      	cbnz	r0, 8010720 <_Balloc+0x68>
 80106f0:	2101      	movs	r1, #1
 80106f2:	fa01 f605 	lsl.w	r6, r1, r5
 80106f6:	1d72      	adds	r2, r6, #5
 80106f8:	0092      	lsls	r2, r2, #2
 80106fa:	4620      	mov	r0, r4
 80106fc:	f000 fe0e 	bl	801131c <_calloc_r>
 8010700:	b160      	cbz	r0, 801071c <_Balloc+0x64>
 8010702:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010706:	e00e      	b.n	8010726 <_Balloc+0x6e>
 8010708:	2221      	movs	r2, #33	; 0x21
 801070a:	2104      	movs	r1, #4
 801070c:	4620      	mov	r0, r4
 801070e:	f000 fe05 	bl	801131c <_calloc_r>
 8010712:	69e3      	ldr	r3, [r4, #28]
 8010714:	60f0      	str	r0, [r6, #12]
 8010716:	68db      	ldr	r3, [r3, #12]
 8010718:	2b00      	cmp	r3, #0
 801071a:	d1e4      	bne.n	80106e6 <_Balloc+0x2e>
 801071c:	2000      	movs	r0, #0
 801071e:	bd70      	pop	{r4, r5, r6, pc}
 8010720:	6802      	ldr	r2, [r0, #0]
 8010722:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010726:	2300      	movs	r3, #0
 8010728:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801072c:	e7f7      	b.n	801071e <_Balloc+0x66>
 801072e:	bf00      	nop
 8010730:	080117f1 	.word	0x080117f1
 8010734:	08011871 	.word	0x08011871

08010738 <_Bfree>:
 8010738:	b570      	push	{r4, r5, r6, lr}
 801073a:	69c6      	ldr	r6, [r0, #28]
 801073c:	4605      	mov	r5, r0
 801073e:	460c      	mov	r4, r1
 8010740:	b976      	cbnz	r6, 8010760 <_Bfree+0x28>
 8010742:	2010      	movs	r0, #16
 8010744:	f7ff ff04 	bl	8010550 <malloc>
 8010748:	4602      	mov	r2, r0
 801074a:	61e8      	str	r0, [r5, #28]
 801074c:	b920      	cbnz	r0, 8010758 <_Bfree+0x20>
 801074e:	4b09      	ldr	r3, [pc, #36]	; (8010774 <_Bfree+0x3c>)
 8010750:	4809      	ldr	r0, [pc, #36]	; (8010778 <_Bfree+0x40>)
 8010752:	218f      	movs	r1, #143	; 0x8f
 8010754:	f000 fdc4 	bl	80112e0 <__assert_func>
 8010758:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801075c:	6006      	str	r6, [r0, #0]
 801075e:	60c6      	str	r6, [r0, #12]
 8010760:	b13c      	cbz	r4, 8010772 <_Bfree+0x3a>
 8010762:	69eb      	ldr	r3, [r5, #28]
 8010764:	6862      	ldr	r2, [r4, #4]
 8010766:	68db      	ldr	r3, [r3, #12]
 8010768:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801076c:	6021      	str	r1, [r4, #0]
 801076e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010772:	bd70      	pop	{r4, r5, r6, pc}
 8010774:	080117f1 	.word	0x080117f1
 8010778:	08011871 	.word	0x08011871

0801077c <__multadd>:
 801077c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010780:	690d      	ldr	r5, [r1, #16]
 8010782:	4607      	mov	r7, r0
 8010784:	460c      	mov	r4, r1
 8010786:	461e      	mov	r6, r3
 8010788:	f101 0c14 	add.w	ip, r1, #20
 801078c:	2000      	movs	r0, #0
 801078e:	f8dc 3000 	ldr.w	r3, [ip]
 8010792:	b299      	uxth	r1, r3
 8010794:	fb02 6101 	mla	r1, r2, r1, r6
 8010798:	0c1e      	lsrs	r6, r3, #16
 801079a:	0c0b      	lsrs	r3, r1, #16
 801079c:	fb02 3306 	mla	r3, r2, r6, r3
 80107a0:	b289      	uxth	r1, r1
 80107a2:	3001      	adds	r0, #1
 80107a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80107a8:	4285      	cmp	r5, r0
 80107aa:	f84c 1b04 	str.w	r1, [ip], #4
 80107ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80107b2:	dcec      	bgt.n	801078e <__multadd+0x12>
 80107b4:	b30e      	cbz	r6, 80107fa <__multadd+0x7e>
 80107b6:	68a3      	ldr	r3, [r4, #8]
 80107b8:	42ab      	cmp	r3, r5
 80107ba:	dc19      	bgt.n	80107f0 <__multadd+0x74>
 80107bc:	6861      	ldr	r1, [r4, #4]
 80107be:	4638      	mov	r0, r7
 80107c0:	3101      	adds	r1, #1
 80107c2:	f7ff ff79 	bl	80106b8 <_Balloc>
 80107c6:	4680      	mov	r8, r0
 80107c8:	b928      	cbnz	r0, 80107d6 <__multadd+0x5a>
 80107ca:	4602      	mov	r2, r0
 80107cc:	4b0c      	ldr	r3, [pc, #48]	; (8010800 <__multadd+0x84>)
 80107ce:	480d      	ldr	r0, [pc, #52]	; (8010804 <__multadd+0x88>)
 80107d0:	21ba      	movs	r1, #186	; 0xba
 80107d2:	f000 fd85 	bl	80112e0 <__assert_func>
 80107d6:	6922      	ldr	r2, [r4, #16]
 80107d8:	3202      	adds	r2, #2
 80107da:	f104 010c 	add.w	r1, r4, #12
 80107de:	0092      	lsls	r2, r2, #2
 80107e0:	300c      	adds	r0, #12
 80107e2:	f7ff f866 	bl	800f8b2 <memcpy>
 80107e6:	4621      	mov	r1, r4
 80107e8:	4638      	mov	r0, r7
 80107ea:	f7ff ffa5 	bl	8010738 <_Bfree>
 80107ee:	4644      	mov	r4, r8
 80107f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80107f4:	3501      	adds	r5, #1
 80107f6:	615e      	str	r6, [r3, #20]
 80107f8:	6125      	str	r5, [r4, #16]
 80107fa:	4620      	mov	r0, r4
 80107fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010800:	08011860 	.word	0x08011860
 8010804:	08011871 	.word	0x08011871

08010808 <__hi0bits>:
 8010808:	0c03      	lsrs	r3, r0, #16
 801080a:	041b      	lsls	r3, r3, #16
 801080c:	b9d3      	cbnz	r3, 8010844 <__hi0bits+0x3c>
 801080e:	0400      	lsls	r0, r0, #16
 8010810:	2310      	movs	r3, #16
 8010812:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010816:	bf04      	itt	eq
 8010818:	0200      	lsleq	r0, r0, #8
 801081a:	3308      	addeq	r3, #8
 801081c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010820:	bf04      	itt	eq
 8010822:	0100      	lsleq	r0, r0, #4
 8010824:	3304      	addeq	r3, #4
 8010826:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801082a:	bf04      	itt	eq
 801082c:	0080      	lsleq	r0, r0, #2
 801082e:	3302      	addeq	r3, #2
 8010830:	2800      	cmp	r0, #0
 8010832:	db05      	blt.n	8010840 <__hi0bits+0x38>
 8010834:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010838:	f103 0301 	add.w	r3, r3, #1
 801083c:	bf08      	it	eq
 801083e:	2320      	moveq	r3, #32
 8010840:	4618      	mov	r0, r3
 8010842:	4770      	bx	lr
 8010844:	2300      	movs	r3, #0
 8010846:	e7e4      	b.n	8010812 <__hi0bits+0xa>

08010848 <__lo0bits>:
 8010848:	6803      	ldr	r3, [r0, #0]
 801084a:	f013 0207 	ands.w	r2, r3, #7
 801084e:	d00c      	beq.n	801086a <__lo0bits+0x22>
 8010850:	07d9      	lsls	r1, r3, #31
 8010852:	d422      	bmi.n	801089a <__lo0bits+0x52>
 8010854:	079a      	lsls	r2, r3, #30
 8010856:	bf49      	itett	mi
 8010858:	085b      	lsrmi	r3, r3, #1
 801085a:	089b      	lsrpl	r3, r3, #2
 801085c:	6003      	strmi	r3, [r0, #0]
 801085e:	2201      	movmi	r2, #1
 8010860:	bf5c      	itt	pl
 8010862:	6003      	strpl	r3, [r0, #0]
 8010864:	2202      	movpl	r2, #2
 8010866:	4610      	mov	r0, r2
 8010868:	4770      	bx	lr
 801086a:	b299      	uxth	r1, r3
 801086c:	b909      	cbnz	r1, 8010872 <__lo0bits+0x2a>
 801086e:	0c1b      	lsrs	r3, r3, #16
 8010870:	2210      	movs	r2, #16
 8010872:	b2d9      	uxtb	r1, r3
 8010874:	b909      	cbnz	r1, 801087a <__lo0bits+0x32>
 8010876:	3208      	adds	r2, #8
 8010878:	0a1b      	lsrs	r3, r3, #8
 801087a:	0719      	lsls	r1, r3, #28
 801087c:	bf04      	itt	eq
 801087e:	091b      	lsreq	r3, r3, #4
 8010880:	3204      	addeq	r2, #4
 8010882:	0799      	lsls	r1, r3, #30
 8010884:	bf04      	itt	eq
 8010886:	089b      	lsreq	r3, r3, #2
 8010888:	3202      	addeq	r2, #2
 801088a:	07d9      	lsls	r1, r3, #31
 801088c:	d403      	bmi.n	8010896 <__lo0bits+0x4e>
 801088e:	085b      	lsrs	r3, r3, #1
 8010890:	f102 0201 	add.w	r2, r2, #1
 8010894:	d003      	beq.n	801089e <__lo0bits+0x56>
 8010896:	6003      	str	r3, [r0, #0]
 8010898:	e7e5      	b.n	8010866 <__lo0bits+0x1e>
 801089a:	2200      	movs	r2, #0
 801089c:	e7e3      	b.n	8010866 <__lo0bits+0x1e>
 801089e:	2220      	movs	r2, #32
 80108a0:	e7e1      	b.n	8010866 <__lo0bits+0x1e>
	...

080108a4 <__i2b>:
 80108a4:	b510      	push	{r4, lr}
 80108a6:	460c      	mov	r4, r1
 80108a8:	2101      	movs	r1, #1
 80108aa:	f7ff ff05 	bl	80106b8 <_Balloc>
 80108ae:	4602      	mov	r2, r0
 80108b0:	b928      	cbnz	r0, 80108be <__i2b+0x1a>
 80108b2:	4b05      	ldr	r3, [pc, #20]	; (80108c8 <__i2b+0x24>)
 80108b4:	4805      	ldr	r0, [pc, #20]	; (80108cc <__i2b+0x28>)
 80108b6:	f240 1145 	movw	r1, #325	; 0x145
 80108ba:	f000 fd11 	bl	80112e0 <__assert_func>
 80108be:	2301      	movs	r3, #1
 80108c0:	6144      	str	r4, [r0, #20]
 80108c2:	6103      	str	r3, [r0, #16]
 80108c4:	bd10      	pop	{r4, pc}
 80108c6:	bf00      	nop
 80108c8:	08011860 	.word	0x08011860
 80108cc:	08011871 	.word	0x08011871

080108d0 <__multiply>:
 80108d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108d4:	4691      	mov	r9, r2
 80108d6:	690a      	ldr	r2, [r1, #16]
 80108d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80108dc:	429a      	cmp	r2, r3
 80108de:	bfb8      	it	lt
 80108e0:	460b      	movlt	r3, r1
 80108e2:	460c      	mov	r4, r1
 80108e4:	bfbc      	itt	lt
 80108e6:	464c      	movlt	r4, r9
 80108e8:	4699      	movlt	r9, r3
 80108ea:	6927      	ldr	r7, [r4, #16]
 80108ec:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80108f0:	68a3      	ldr	r3, [r4, #8]
 80108f2:	6861      	ldr	r1, [r4, #4]
 80108f4:	eb07 060a 	add.w	r6, r7, sl
 80108f8:	42b3      	cmp	r3, r6
 80108fa:	b085      	sub	sp, #20
 80108fc:	bfb8      	it	lt
 80108fe:	3101      	addlt	r1, #1
 8010900:	f7ff feda 	bl	80106b8 <_Balloc>
 8010904:	b930      	cbnz	r0, 8010914 <__multiply+0x44>
 8010906:	4602      	mov	r2, r0
 8010908:	4b44      	ldr	r3, [pc, #272]	; (8010a1c <__multiply+0x14c>)
 801090a:	4845      	ldr	r0, [pc, #276]	; (8010a20 <__multiply+0x150>)
 801090c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8010910:	f000 fce6 	bl	80112e0 <__assert_func>
 8010914:	f100 0514 	add.w	r5, r0, #20
 8010918:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801091c:	462b      	mov	r3, r5
 801091e:	2200      	movs	r2, #0
 8010920:	4543      	cmp	r3, r8
 8010922:	d321      	bcc.n	8010968 <__multiply+0x98>
 8010924:	f104 0314 	add.w	r3, r4, #20
 8010928:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801092c:	f109 0314 	add.w	r3, r9, #20
 8010930:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010934:	9202      	str	r2, [sp, #8]
 8010936:	1b3a      	subs	r2, r7, r4
 8010938:	3a15      	subs	r2, #21
 801093a:	f022 0203 	bic.w	r2, r2, #3
 801093e:	3204      	adds	r2, #4
 8010940:	f104 0115 	add.w	r1, r4, #21
 8010944:	428f      	cmp	r7, r1
 8010946:	bf38      	it	cc
 8010948:	2204      	movcc	r2, #4
 801094a:	9201      	str	r2, [sp, #4]
 801094c:	9a02      	ldr	r2, [sp, #8]
 801094e:	9303      	str	r3, [sp, #12]
 8010950:	429a      	cmp	r2, r3
 8010952:	d80c      	bhi.n	801096e <__multiply+0x9e>
 8010954:	2e00      	cmp	r6, #0
 8010956:	dd03      	ble.n	8010960 <__multiply+0x90>
 8010958:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801095c:	2b00      	cmp	r3, #0
 801095e:	d05b      	beq.n	8010a18 <__multiply+0x148>
 8010960:	6106      	str	r6, [r0, #16]
 8010962:	b005      	add	sp, #20
 8010964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010968:	f843 2b04 	str.w	r2, [r3], #4
 801096c:	e7d8      	b.n	8010920 <__multiply+0x50>
 801096e:	f8b3 a000 	ldrh.w	sl, [r3]
 8010972:	f1ba 0f00 	cmp.w	sl, #0
 8010976:	d024      	beq.n	80109c2 <__multiply+0xf2>
 8010978:	f104 0e14 	add.w	lr, r4, #20
 801097c:	46a9      	mov	r9, r5
 801097e:	f04f 0c00 	mov.w	ip, #0
 8010982:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010986:	f8d9 1000 	ldr.w	r1, [r9]
 801098a:	fa1f fb82 	uxth.w	fp, r2
 801098e:	b289      	uxth	r1, r1
 8010990:	fb0a 110b 	mla	r1, sl, fp, r1
 8010994:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010998:	f8d9 2000 	ldr.w	r2, [r9]
 801099c:	4461      	add	r1, ip
 801099e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80109a2:	fb0a c20b 	mla	r2, sl, fp, ip
 80109a6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80109aa:	b289      	uxth	r1, r1
 80109ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80109b0:	4577      	cmp	r7, lr
 80109b2:	f849 1b04 	str.w	r1, [r9], #4
 80109b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80109ba:	d8e2      	bhi.n	8010982 <__multiply+0xb2>
 80109bc:	9a01      	ldr	r2, [sp, #4]
 80109be:	f845 c002 	str.w	ip, [r5, r2]
 80109c2:	9a03      	ldr	r2, [sp, #12]
 80109c4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80109c8:	3304      	adds	r3, #4
 80109ca:	f1b9 0f00 	cmp.w	r9, #0
 80109ce:	d021      	beq.n	8010a14 <__multiply+0x144>
 80109d0:	6829      	ldr	r1, [r5, #0]
 80109d2:	f104 0c14 	add.w	ip, r4, #20
 80109d6:	46ae      	mov	lr, r5
 80109d8:	f04f 0a00 	mov.w	sl, #0
 80109dc:	f8bc b000 	ldrh.w	fp, [ip]
 80109e0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80109e4:	fb09 220b 	mla	r2, r9, fp, r2
 80109e8:	4452      	add	r2, sl
 80109ea:	b289      	uxth	r1, r1
 80109ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80109f0:	f84e 1b04 	str.w	r1, [lr], #4
 80109f4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80109f8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80109fc:	f8be 1000 	ldrh.w	r1, [lr]
 8010a00:	fb09 110a 	mla	r1, r9, sl, r1
 8010a04:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8010a08:	4567      	cmp	r7, ip
 8010a0a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010a0e:	d8e5      	bhi.n	80109dc <__multiply+0x10c>
 8010a10:	9a01      	ldr	r2, [sp, #4]
 8010a12:	50a9      	str	r1, [r5, r2]
 8010a14:	3504      	adds	r5, #4
 8010a16:	e799      	b.n	801094c <__multiply+0x7c>
 8010a18:	3e01      	subs	r6, #1
 8010a1a:	e79b      	b.n	8010954 <__multiply+0x84>
 8010a1c:	08011860 	.word	0x08011860
 8010a20:	08011871 	.word	0x08011871

08010a24 <__pow5mult>:
 8010a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a28:	4615      	mov	r5, r2
 8010a2a:	f012 0203 	ands.w	r2, r2, #3
 8010a2e:	4606      	mov	r6, r0
 8010a30:	460f      	mov	r7, r1
 8010a32:	d007      	beq.n	8010a44 <__pow5mult+0x20>
 8010a34:	4c25      	ldr	r4, [pc, #148]	; (8010acc <__pow5mult+0xa8>)
 8010a36:	3a01      	subs	r2, #1
 8010a38:	2300      	movs	r3, #0
 8010a3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010a3e:	f7ff fe9d 	bl	801077c <__multadd>
 8010a42:	4607      	mov	r7, r0
 8010a44:	10ad      	asrs	r5, r5, #2
 8010a46:	d03d      	beq.n	8010ac4 <__pow5mult+0xa0>
 8010a48:	69f4      	ldr	r4, [r6, #28]
 8010a4a:	b97c      	cbnz	r4, 8010a6c <__pow5mult+0x48>
 8010a4c:	2010      	movs	r0, #16
 8010a4e:	f7ff fd7f 	bl	8010550 <malloc>
 8010a52:	4602      	mov	r2, r0
 8010a54:	61f0      	str	r0, [r6, #28]
 8010a56:	b928      	cbnz	r0, 8010a64 <__pow5mult+0x40>
 8010a58:	4b1d      	ldr	r3, [pc, #116]	; (8010ad0 <__pow5mult+0xac>)
 8010a5a:	481e      	ldr	r0, [pc, #120]	; (8010ad4 <__pow5mult+0xb0>)
 8010a5c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8010a60:	f000 fc3e 	bl	80112e0 <__assert_func>
 8010a64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010a68:	6004      	str	r4, [r0, #0]
 8010a6a:	60c4      	str	r4, [r0, #12]
 8010a6c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8010a70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010a74:	b94c      	cbnz	r4, 8010a8a <__pow5mult+0x66>
 8010a76:	f240 2171 	movw	r1, #625	; 0x271
 8010a7a:	4630      	mov	r0, r6
 8010a7c:	f7ff ff12 	bl	80108a4 <__i2b>
 8010a80:	2300      	movs	r3, #0
 8010a82:	f8c8 0008 	str.w	r0, [r8, #8]
 8010a86:	4604      	mov	r4, r0
 8010a88:	6003      	str	r3, [r0, #0]
 8010a8a:	f04f 0900 	mov.w	r9, #0
 8010a8e:	07eb      	lsls	r3, r5, #31
 8010a90:	d50a      	bpl.n	8010aa8 <__pow5mult+0x84>
 8010a92:	4639      	mov	r1, r7
 8010a94:	4622      	mov	r2, r4
 8010a96:	4630      	mov	r0, r6
 8010a98:	f7ff ff1a 	bl	80108d0 <__multiply>
 8010a9c:	4639      	mov	r1, r7
 8010a9e:	4680      	mov	r8, r0
 8010aa0:	4630      	mov	r0, r6
 8010aa2:	f7ff fe49 	bl	8010738 <_Bfree>
 8010aa6:	4647      	mov	r7, r8
 8010aa8:	106d      	asrs	r5, r5, #1
 8010aaa:	d00b      	beq.n	8010ac4 <__pow5mult+0xa0>
 8010aac:	6820      	ldr	r0, [r4, #0]
 8010aae:	b938      	cbnz	r0, 8010ac0 <__pow5mult+0x9c>
 8010ab0:	4622      	mov	r2, r4
 8010ab2:	4621      	mov	r1, r4
 8010ab4:	4630      	mov	r0, r6
 8010ab6:	f7ff ff0b 	bl	80108d0 <__multiply>
 8010aba:	6020      	str	r0, [r4, #0]
 8010abc:	f8c0 9000 	str.w	r9, [r0]
 8010ac0:	4604      	mov	r4, r0
 8010ac2:	e7e4      	b.n	8010a8e <__pow5mult+0x6a>
 8010ac4:	4638      	mov	r0, r7
 8010ac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010aca:	bf00      	nop
 8010acc:	080119c0 	.word	0x080119c0
 8010ad0:	080117f1 	.word	0x080117f1
 8010ad4:	08011871 	.word	0x08011871

08010ad8 <__lshift>:
 8010ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010adc:	460c      	mov	r4, r1
 8010ade:	6849      	ldr	r1, [r1, #4]
 8010ae0:	6923      	ldr	r3, [r4, #16]
 8010ae2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010ae6:	68a3      	ldr	r3, [r4, #8]
 8010ae8:	4607      	mov	r7, r0
 8010aea:	4691      	mov	r9, r2
 8010aec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010af0:	f108 0601 	add.w	r6, r8, #1
 8010af4:	42b3      	cmp	r3, r6
 8010af6:	db0b      	blt.n	8010b10 <__lshift+0x38>
 8010af8:	4638      	mov	r0, r7
 8010afa:	f7ff fddd 	bl	80106b8 <_Balloc>
 8010afe:	4605      	mov	r5, r0
 8010b00:	b948      	cbnz	r0, 8010b16 <__lshift+0x3e>
 8010b02:	4602      	mov	r2, r0
 8010b04:	4b28      	ldr	r3, [pc, #160]	; (8010ba8 <__lshift+0xd0>)
 8010b06:	4829      	ldr	r0, [pc, #164]	; (8010bac <__lshift+0xd4>)
 8010b08:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8010b0c:	f000 fbe8 	bl	80112e0 <__assert_func>
 8010b10:	3101      	adds	r1, #1
 8010b12:	005b      	lsls	r3, r3, #1
 8010b14:	e7ee      	b.n	8010af4 <__lshift+0x1c>
 8010b16:	2300      	movs	r3, #0
 8010b18:	f100 0114 	add.w	r1, r0, #20
 8010b1c:	f100 0210 	add.w	r2, r0, #16
 8010b20:	4618      	mov	r0, r3
 8010b22:	4553      	cmp	r3, sl
 8010b24:	db33      	blt.n	8010b8e <__lshift+0xb6>
 8010b26:	6920      	ldr	r0, [r4, #16]
 8010b28:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010b2c:	f104 0314 	add.w	r3, r4, #20
 8010b30:	f019 091f 	ands.w	r9, r9, #31
 8010b34:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010b38:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010b3c:	d02b      	beq.n	8010b96 <__lshift+0xbe>
 8010b3e:	f1c9 0e20 	rsb	lr, r9, #32
 8010b42:	468a      	mov	sl, r1
 8010b44:	2200      	movs	r2, #0
 8010b46:	6818      	ldr	r0, [r3, #0]
 8010b48:	fa00 f009 	lsl.w	r0, r0, r9
 8010b4c:	4310      	orrs	r0, r2
 8010b4e:	f84a 0b04 	str.w	r0, [sl], #4
 8010b52:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b56:	459c      	cmp	ip, r3
 8010b58:	fa22 f20e 	lsr.w	r2, r2, lr
 8010b5c:	d8f3      	bhi.n	8010b46 <__lshift+0x6e>
 8010b5e:	ebac 0304 	sub.w	r3, ip, r4
 8010b62:	3b15      	subs	r3, #21
 8010b64:	f023 0303 	bic.w	r3, r3, #3
 8010b68:	3304      	adds	r3, #4
 8010b6a:	f104 0015 	add.w	r0, r4, #21
 8010b6e:	4584      	cmp	ip, r0
 8010b70:	bf38      	it	cc
 8010b72:	2304      	movcc	r3, #4
 8010b74:	50ca      	str	r2, [r1, r3]
 8010b76:	b10a      	cbz	r2, 8010b7c <__lshift+0xa4>
 8010b78:	f108 0602 	add.w	r6, r8, #2
 8010b7c:	3e01      	subs	r6, #1
 8010b7e:	4638      	mov	r0, r7
 8010b80:	612e      	str	r6, [r5, #16]
 8010b82:	4621      	mov	r1, r4
 8010b84:	f7ff fdd8 	bl	8010738 <_Bfree>
 8010b88:	4628      	mov	r0, r5
 8010b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b8e:	f842 0f04 	str.w	r0, [r2, #4]!
 8010b92:	3301      	adds	r3, #1
 8010b94:	e7c5      	b.n	8010b22 <__lshift+0x4a>
 8010b96:	3904      	subs	r1, #4
 8010b98:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b9c:	f841 2f04 	str.w	r2, [r1, #4]!
 8010ba0:	459c      	cmp	ip, r3
 8010ba2:	d8f9      	bhi.n	8010b98 <__lshift+0xc0>
 8010ba4:	e7ea      	b.n	8010b7c <__lshift+0xa4>
 8010ba6:	bf00      	nop
 8010ba8:	08011860 	.word	0x08011860
 8010bac:	08011871 	.word	0x08011871

08010bb0 <__mcmp>:
 8010bb0:	b530      	push	{r4, r5, lr}
 8010bb2:	6902      	ldr	r2, [r0, #16]
 8010bb4:	690c      	ldr	r4, [r1, #16]
 8010bb6:	1b12      	subs	r2, r2, r4
 8010bb8:	d10e      	bne.n	8010bd8 <__mcmp+0x28>
 8010bba:	f100 0314 	add.w	r3, r0, #20
 8010bbe:	3114      	adds	r1, #20
 8010bc0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010bc4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010bc8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010bcc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010bd0:	42a5      	cmp	r5, r4
 8010bd2:	d003      	beq.n	8010bdc <__mcmp+0x2c>
 8010bd4:	d305      	bcc.n	8010be2 <__mcmp+0x32>
 8010bd6:	2201      	movs	r2, #1
 8010bd8:	4610      	mov	r0, r2
 8010bda:	bd30      	pop	{r4, r5, pc}
 8010bdc:	4283      	cmp	r3, r0
 8010bde:	d3f3      	bcc.n	8010bc8 <__mcmp+0x18>
 8010be0:	e7fa      	b.n	8010bd8 <__mcmp+0x28>
 8010be2:	f04f 32ff 	mov.w	r2, #4294967295
 8010be6:	e7f7      	b.n	8010bd8 <__mcmp+0x28>

08010be8 <__mdiff>:
 8010be8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bec:	460c      	mov	r4, r1
 8010bee:	4606      	mov	r6, r0
 8010bf0:	4611      	mov	r1, r2
 8010bf2:	4620      	mov	r0, r4
 8010bf4:	4690      	mov	r8, r2
 8010bf6:	f7ff ffdb 	bl	8010bb0 <__mcmp>
 8010bfa:	1e05      	subs	r5, r0, #0
 8010bfc:	d110      	bne.n	8010c20 <__mdiff+0x38>
 8010bfe:	4629      	mov	r1, r5
 8010c00:	4630      	mov	r0, r6
 8010c02:	f7ff fd59 	bl	80106b8 <_Balloc>
 8010c06:	b930      	cbnz	r0, 8010c16 <__mdiff+0x2e>
 8010c08:	4b3a      	ldr	r3, [pc, #232]	; (8010cf4 <__mdiff+0x10c>)
 8010c0a:	4602      	mov	r2, r0
 8010c0c:	f240 2137 	movw	r1, #567	; 0x237
 8010c10:	4839      	ldr	r0, [pc, #228]	; (8010cf8 <__mdiff+0x110>)
 8010c12:	f000 fb65 	bl	80112e0 <__assert_func>
 8010c16:	2301      	movs	r3, #1
 8010c18:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010c1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c20:	bfa4      	itt	ge
 8010c22:	4643      	movge	r3, r8
 8010c24:	46a0      	movge	r8, r4
 8010c26:	4630      	mov	r0, r6
 8010c28:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010c2c:	bfa6      	itte	ge
 8010c2e:	461c      	movge	r4, r3
 8010c30:	2500      	movge	r5, #0
 8010c32:	2501      	movlt	r5, #1
 8010c34:	f7ff fd40 	bl	80106b8 <_Balloc>
 8010c38:	b920      	cbnz	r0, 8010c44 <__mdiff+0x5c>
 8010c3a:	4b2e      	ldr	r3, [pc, #184]	; (8010cf4 <__mdiff+0x10c>)
 8010c3c:	4602      	mov	r2, r0
 8010c3e:	f240 2145 	movw	r1, #581	; 0x245
 8010c42:	e7e5      	b.n	8010c10 <__mdiff+0x28>
 8010c44:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010c48:	6926      	ldr	r6, [r4, #16]
 8010c4a:	60c5      	str	r5, [r0, #12]
 8010c4c:	f104 0914 	add.w	r9, r4, #20
 8010c50:	f108 0514 	add.w	r5, r8, #20
 8010c54:	f100 0e14 	add.w	lr, r0, #20
 8010c58:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010c5c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010c60:	f108 0210 	add.w	r2, r8, #16
 8010c64:	46f2      	mov	sl, lr
 8010c66:	2100      	movs	r1, #0
 8010c68:	f859 3b04 	ldr.w	r3, [r9], #4
 8010c6c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010c70:	fa11 f88b 	uxtah	r8, r1, fp
 8010c74:	b299      	uxth	r1, r3
 8010c76:	0c1b      	lsrs	r3, r3, #16
 8010c78:	eba8 0801 	sub.w	r8, r8, r1
 8010c7c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010c80:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010c84:	fa1f f888 	uxth.w	r8, r8
 8010c88:	1419      	asrs	r1, r3, #16
 8010c8a:	454e      	cmp	r6, r9
 8010c8c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010c90:	f84a 3b04 	str.w	r3, [sl], #4
 8010c94:	d8e8      	bhi.n	8010c68 <__mdiff+0x80>
 8010c96:	1b33      	subs	r3, r6, r4
 8010c98:	3b15      	subs	r3, #21
 8010c9a:	f023 0303 	bic.w	r3, r3, #3
 8010c9e:	3304      	adds	r3, #4
 8010ca0:	3415      	adds	r4, #21
 8010ca2:	42a6      	cmp	r6, r4
 8010ca4:	bf38      	it	cc
 8010ca6:	2304      	movcc	r3, #4
 8010ca8:	441d      	add	r5, r3
 8010caa:	4473      	add	r3, lr
 8010cac:	469e      	mov	lr, r3
 8010cae:	462e      	mov	r6, r5
 8010cb0:	4566      	cmp	r6, ip
 8010cb2:	d30e      	bcc.n	8010cd2 <__mdiff+0xea>
 8010cb4:	f10c 0203 	add.w	r2, ip, #3
 8010cb8:	1b52      	subs	r2, r2, r5
 8010cba:	f022 0203 	bic.w	r2, r2, #3
 8010cbe:	3d03      	subs	r5, #3
 8010cc0:	45ac      	cmp	ip, r5
 8010cc2:	bf38      	it	cc
 8010cc4:	2200      	movcc	r2, #0
 8010cc6:	4413      	add	r3, r2
 8010cc8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010ccc:	b17a      	cbz	r2, 8010cee <__mdiff+0x106>
 8010cce:	6107      	str	r7, [r0, #16]
 8010cd0:	e7a4      	b.n	8010c1c <__mdiff+0x34>
 8010cd2:	f856 8b04 	ldr.w	r8, [r6], #4
 8010cd6:	fa11 f288 	uxtah	r2, r1, r8
 8010cda:	1414      	asrs	r4, r2, #16
 8010cdc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010ce0:	b292      	uxth	r2, r2
 8010ce2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010ce6:	f84e 2b04 	str.w	r2, [lr], #4
 8010cea:	1421      	asrs	r1, r4, #16
 8010cec:	e7e0      	b.n	8010cb0 <__mdiff+0xc8>
 8010cee:	3f01      	subs	r7, #1
 8010cf0:	e7ea      	b.n	8010cc8 <__mdiff+0xe0>
 8010cf2:	bf00      	nop
 8010cf4:	08011860 	.word	0x08011860
 8010cf8:	08011871 	.word	0x08011871

08010cfc <__d2b>:
 8010cfc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010d00:	460f      	mov	r7, r1
 8010d02:	2101      	movs	r1, #1
 8010d04:	ec59 8b10 	vmov	r8, r9, d0
 8010d08:	4616      	mov	r6, r2
 8010d0a:	f7ff fcd5 	bl	80106b8 <_Balloc>
 8010d0e:	4604      	mov	r4, r0
 8010d10:	b930      	cbnz	r0, 8010d20 <__d2b+0x24>
 8010d12:	4602      	mov	r2, r0
 8010d14:	4b24      	ldr	r3, [pc, #144]	; (8010da8 <__d2b+0xac>)
 8010d16:	4825      	ldr	r0, [pc, #148]	; (8010dac <__d2b+0xb0>)
 8010d18:	f240 310f 	movw	r1, #783	; 0x30f
 8010d1c:	f000 fae0 	bl	80112e0 <__assert_func>
 8010d20:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010d24:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010d28:	bb2d      	cbnz	r5, 8010d76 <__d2b+0x7a>
 8010d2a:	9301      	str	r3, [sp, #4]
 8010d2c:	f1b8 0300 	subs.w	r3, r8, #0
 8010d30:	d026      	beq.n	8010d80 <__d2b+0x84>
 8010d32:	4668      	mov	r0, sp
 8010d34:	9300      	str	r3, [sp, #0]
 8010d36:	f7ff fd87 	bl	8010848 <__lo0bits>
 8010d3a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010d3e:	b1e8      	cbz	r0, 8010d7c <__d2b+0x80>
 8010d40:	f1c0 0320 	rsb	r3, r0, #32
 8010d44:	fa02 f303 	lsl.w	r3, r2, r3
 8010d48:	430b      	orrs	r3, r1
 8010d4a:	40c2      	lsrs	r2, r0
 8010d4c:	6163      	str	r3, [r4, #20]
 8010d4e:	9201      	str	r2, [sp, #4]
 8010d50:	9b01      	ldr	r3, [sp, #4]
 8010d52:	61a3      	str	r3, [r4, #24]
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	bf14      	ite	ne
 8010d58:	2202      	movne	r2, #2
 8010d5a:	2201      	moveq	r2, #1
 8010d5c:	6122      	str	r2, [r4, #16]
 8010d5e:	b1bd      	cbz	r5, 8010d90 <__d2b+0x94>
 8010d60:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010d64:	4405      	add	r5, r0
 8010d66:	603d      	str	r5, [r7, #0]
 8010d68:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010d6c:	6030      	str	r0, [r6, #0]
 8010d6e:	4620      	mov	r0, r4
 8010d70:	b003      	add	sp, #12
 8010d72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010d7a:	e7d6      	b.n	8010d2a <__d2b+0x2e>
 8010d7c:	6161      	str	r1, [r4, #20]
 8010d7e:	e7e7      	b.n	8010d50 <__d2b+0x54>
 8010d80:	a801      	add	r0, sp, #4
 8010d82:	f7ff fd61 	bl	8010848 <__lo0bits>
 8010d86:	9b01      	ldr	r3, [sp, #4]
 8010d88:	6163      	str	r3, [r4, #20]
 8010d8a:	3020      	adds	r0, #32
 8010d8c:	2201      	movs	r2, #1
 8010d8e:	e7e5      	b.n	8010d5c <__d2b+0x60>
 8010d90:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010d94:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010d98:	6038      	str	r0, [r7, #0]
 8010d9a:	6918      	ldr	r0, [r3, #16]
 8010d9c:	f7ff fd34 	bl	8010808 <__hi0bits>
 8010da0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010da4:	e7e2      	b.n	8010d6c <__d2b+0x70>
 8010da6:	bf00      	nop
 8010da8:	08011860 	.word	0x08011860
 8010dac:	08011871 	.word	0x08011871

08010db0 <__sfputc_r>:
 8010db0:	6893      	ldr	r3, [r2, #8]
 8010db2:	3b01      	subs	r3, #1
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	b410      	push	{r4}
 8010db8:	6093      	str	r3, [r2, #8]
 8010dba:	da08      	bge.n	8010dce <__sfputc_r+0x1e>
 8010dbc:	6994      	ldr	r4, [r2, #24]
 8010dbe:	42a3      	cmp	r3, r4
 8010dc0:	db01      	blt.n	8010dc6 <__sfputc_r+0x16>
 8010dc2:	290a      	cmp	r1, #10
 8010dc4:	d103      	bne.n	8010dce <__sfputc_r+0x1e>
 8010dc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010dca:	f000 b9e3 	b.w	8011194 <__swbuf_r>
 8010dce:	6813      	ldr	r3, [r2, #0]
 8010dd0:	1c58      	adds	r0, r3, #1
 8010dd2:	6010      	str	r0, [r2, #0]
 8010dd4:	7019      	strb	r1, [r3, #0]
 8010dd6:	4608      	mov	r0, r1
 8010dd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010ddc:	4770      	bx	lr

08010dde <__sfputs_r>:
 8010dde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010de0:	4606      	mov	r6, r0
 8010de2:	460f      	mov	r7, r1
 8010de4:	4614      	mov	r4, r2
 8010de6:	18d5      	adds	r5, r2, r3
 8010de8:	42ac      	cmp	r4, r5
 8010dea:	d101      	bne.n	8010df0 <__sfputs_r+0x12>
 8010dec:	2000      	movs	r0, #0
 8010dee:	e007      	b.n	8010e00 <__sfputs_r+0x22>
 8010df0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010df4:	463a      	mov	r2, r7
 8010df6:	4630      	mov	r0, r6
 8010df8:	f7ff ffda 	bl	8010db0 <__sfputc_r>
 8010dfc:	1c43      	adds	r3, r0, #1
 8010dfe:	d1f3      	bne.n	8010de8 <__sfputs_r+0xa>
 8010e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010e04 <_vfiprintf_r>:
 8010e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e08:	460d      	mov	r5, r1
 8010e0a:	b09d      	sub	sp, #116	; 0x74
 8010e0c:	4614      	mov	r4, r2
 8010e0e:	4698      	mov	r8, r3
 8010e10:	4606      	mov	r6, r0
 8010e12:	b118      	cbz	r0, 8010e1c <_vfiprintf_r+0x18>
 8010e14:	6a03      	ldr	r3, [r0, #32]
 8010e16:	b90b      	cbnz	r3, 8010e1c <_vfiprintf_r+0x18>
 8010e18:	f7fe fc40 	bl	800f69c <__sinit>
 8010e1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010e1e:	07d9      	lsls	r1, r3, #31
 8010e20:	d405      	bmi.n	8010e2e <_vfiprintf_r+0x2a>
 8010e22:	89ab      	ldrh	r3, [r5, #12]
 8010e24:	059a      	lsls	r2, r3, #22
 8010e26:	d402      	bmi.n	8010e2e <_vfiprintf_r+0x2a>
 8010e28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010e2a:	f7fe fd40 	bl	800f8ae <__retarget_lock_acquire_recursive>
 8010e2e:	89ab      	ldrh	r3, [r5, #12]
 8010e30:	071b      	lsls	r3, r3, #28
 8010e32:	d501      	bpl.n	8010e38 <_vfiprintf_r+0x34>
 8010e34:	692b      	ldr	r3, [r5, #16]
 8010e36:	b99b      	cbnz	r3, 8010e60 <_vfiprintf_r+0x5c>
 8010e38:	4629      	mov	r1, r5
 8010e3a:	4630      	mov	r0, r6
 8010e3c:	f000 f9e8 	bl	8011210 <__swsetup_r>
 8010e40:	b170      	cbz	r0, 8010e60 <_vfiprintf_r+0x5c>
 8010e42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010e44:	07dc      	lsls	r4, r3, #31
 8010e46:	d504      	bpl.n	8010e52 <_vfiprintf_r+0x4e>
 8010e48:	f04f 30ff 	mov.w	r0, #4294967295
 8010e4c:	b01d      	add	sp, #116	; 0x74
 8010e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e52:	89ab      	ldrh	r3, [r5, #12]
 8010e54:	0598      	lsls	r0, r3, #22
 8010e56:	d4f7      	bmi.n	8010e48 <_vfiprintf_r+0x44>
 8010e58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010e5a:	f7fe fd29 	bl	800f8b0 <__retarget_lock_release_recursive>
 8010e5e:	e7f3      	b.n	8010e48 <_vfiprintf_r+0x44>
 8010e60:	2300      	movs	r3, #0
 8010e62:	9309      	str	r3, [sp, #36]	; 0x24
 8010e64:	2320      	movs	r3, #32
 8010e66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010e6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8010e6e:	2330      	movs	r3, #48	; 0x30
 8010e70:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8011024 <_vfiprintf_r+0x220>
 8010e74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010e78:	f04f 0901 	mov.w	r9, #1
 8010e7c:	4623      	mov	r3, r4
 8010e7e:	469a      	mov	sl, r3
 8010e80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010e84:	b10a      	cbz	r2, 8010e8a <_vfiprintf_r+0x86>
 8010e86:	2a25      	cmp	r2, #37	; 0x25
 8010e88:	d1f9      	bne.n	8010e7e <_vfiprintf_r+0x7a>
 8010e8a:	ebba 0b04 	subs.w	fp, sl, r4
 8010e8e:	d00b      	beq.n	8010ea8 <_vfiprintf_r+0xa4>
 8010e90:	465b      	mov	r3, fp
 8010e92:	4622      	mov	r2, r4
 8010e94:	4629      	mov	r1, r5
 8010e96:	4630      	mov	r0, r6
 8010e98:	f7ff ffa1 	bl	8010dde <__sfputs_r>
 8010e9c:	3001      	adds	r0, #1
 8010e9e:	f000 80a9 	beq.w	8010ff4 <_vfiprintf_r+0x1f0>
 8010ea2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010ea4:	445a      	add	r2, fp
 8010ea6:	9209      	str	r2, [sp, #36]	; 0x24
 8010ea8:	f89a 3000 	ldrb.w	r3, [sl]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	f000 80a1 	beq.w	8010ff4 <_vfiprintf_r+0x1f0>
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8010eb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010ebc:	f10a 0a01 	add.w	sl, sl, #1
 8010ec0:	9304      	str	r3, [sp, #16]
 8010ec2:	9307      	str	r3, [sp, #28]
 8010ec4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010ec8:	931a      	str	r3, [sp, #104]	; 0x68
 8010eca:	4654      	mov	r4, sl
 8010ecc:	2205      	movs	r2, #5
 8010ece:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ed2:	4854      	ldr	r0, [pc, #336]	; (8011024 <_vfiprintf_r+0x220>)
 8010ed4:	f7ef fa04 	bl	80002e0 <memchr>
 8010ed8:	9a04      	ldr	r2, [sp, #16]
 8010eda:	b9d8      	cbnz	r0, 8010f14 <_vfiprintf_r+0x110>
 8010edc:	06d1      	lsls	r1, r2, #27
 8010ede:	bf44      	itt	mi
 8010ee0:	2320      	movmi	r3, #32
 8010ee2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010ee6:	0713      	lsls	r3, r2, #28
 8010ee8:	bf44      	itt	mi
 8010eea:	232b      	movmi	r3, #43	; 0x2b
 8010eec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010ef0:	f89a 3000 	ldrb.w	r3, [sl]
 8010ef4:	2b2a      	cmp	r3, #42	; 0x2a
 8010ef6:	d015      	beq.n	8010f24 <_vfiprintf_r+0x120>
 8010ef8:	9a07      	ldr	r2, [sp, #28]
 8010efa:	4654      	mov	r4, sl
 8010efc:	2000      	movs	r0, #0
 8010efe:	f04f 0c0a 	mov.w	ip, #10
 8010f02:	4621      	mov	r1, r4
 8010f04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010f08:	3b30      	subs	r3, #48	; 0x30
 8010f0a:	2b09      	cmp	r3, #9
 8010f0c:	d94d      	bls.n	8010faa <_vfiprintf_r+0x1a6>
 8010f0e:	b1b0      	cbz	r0, 8010f3e <_vfiprintf_r+0x13a>
 8010f10:	9207      	str	r2, [sp, #28]
 8010f12:	e014      	b.n	8010f3e <_vfiprintf_r+0x13a>
 8010f14:	eba0 0308 	sub.w	r3, r0, r8
 8010f18:	fa09 f303 	lsl.w	r3, r9, r3
 8010f1c:	4313      	orrs	r3, r2
 8010f1e:	9304      	str	r3, [sp, #16]
 8010f20:	46a2      	mov	sl, r4
 8010f22:	e7d2      	b.n	8010eca <_vfiprintf_r+0xc6>
 8010f24:	9b03      	ldr	r3, [sp, #12]
 8010f26:	1d19      	adds	r1, r3, #4
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	9103      	str	r1, [sp, #12]
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	bfbb      	ittet	lt
 8010f30:	425b      	neglt	r3, r3
 8010f32:	f042 0202 	orrlt.w	r2, r2, #2
 8010f36:	9307      	strge	r3, [sp, #28]
 8010f38:	9307      	strlt	r3, [sp, #28]
 8010f3a:	bfb8      	it	lt
 8010f3c:	9204      	strlt	r2, [sp, #16]
 8010f3e:	7823      	ldrb	r3, [r4, #0]
 8010f40:	2b2e      	cmp	r3, #46	; 0x2e
 8010f42:	d10c      	bne.n	8010f5e <_vfiprintf_r+0x15a>
 8010f44:	7863      	ldrb	r3, [r4, #1]
 8010f46:	2b2a      	cmp	r3, #42	; 0x2a
 8010f48:	d134      	bne.n	8010fb4 <_vfiprintf_r+0x1b0>
 8010f4a:	9b03      	ldr	r3, [sp, #12]
 8010f4c:	1d1a      	adds	r2, r3, #4
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	9203      	str	r2, [sp, #12]
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	bfb8      	it	lt
 8010f56:	f04f 33ff 	movlt.w	r3, #4294967295
 8010f5a:	3402      	adds	r4, #2
 8010f5c:	9305      	str	r3, [sp, #20]
 8010f5e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8011034 <_vfiprintf_r+0x230>
 8010f62:	7821      	ldrb	r1, [r4, #0]
 8010f64:	2203      	movs	r2, #3
 8010f66:	4650      	mov	r0, sl
 8010f68:	f7ef f9ba 	bl	80002e0 <memchr>
 8010f6c:	b138      	cbz	r0, 8010f7e <_vfiprintf_r+0x17a>
 8010f6e:	9b04      	ldr	r3, [sp, #16]
 8010f70:	eba0 000a 	sub.w	r0, r0, sl
 8010f74:	2240      	movs	r2, #64	; 0x40
 8010f76:	4082      	lsls	r2, r0
 8010f78:	4313      	orrs	r3, r2
 8010f7a:	3401      	adds	r4, #1
 8010f7c:	9304      	str	r3, [sp, #16]
 8010f7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f82:	4829      	ldr	r0, [pc, #164]	; (8011028 <_vfiprintf_r+0x224>)
 8010f84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010f88:	2206      	movs	r2, #6
 8010f8a:	f7ef f9a9 	bl	80002e0 <memchr>
 8010f8e:	2800      	cmp	r0, #0
 8010f90:	d03f      	beq.n	8011012 <_vfiprintf_r+0x20e>
 8010f92:	4b26      	ldr	r3, [pc, #152]	; (801102c <_vfiprintf_r+0x228>)
 8010f94:	bb1b      	cbnz	r3, 8010fde <_vfiprintf_r+0x1da>
 8010f96:	9b03      	ldr	r3, [sp, #12]
 8010f98:	3307      	adds	r3, #7
 8010f9a:	f023 0307 	bic.w	r3, r3, #7
 8010f9e:	3308      	adds	r3, #8
 8010fa0:	9303      	str	r3, [sp, #12]
 8010fa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010fa4:	443b      	add	r3, r7
 8010fa6:	9309      	str	r3, [sp, #36]	; 0x24
 8010fa8:	e768      	b.n	8010e7c <_vfiprintf_r+0x78>
 8010faa:	fb0c 3202 	mla	r2, ip, r2, r3
 8010fae:	460c      	mov	r4, r1
 8010fb0:	2001      	movs	r0, #1
 8010fb2:	e7a6      	b.n	8010f02 <_vfiprintf_r+0xfe>
 8010fb4:	2300      	movs	r3, #0
 8010fb6:	3401      	adds	r4, #1
 8010fb8:	9305      	str	r3, [sp, #20]
 8010fba:	4619      	mov	r1, r3
 8010fbc:	f04f 0c0a 	mov.w	ip, #10
 8010fc0:	4620      	mov	r0, r4
 8010fc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010fc6:	3a30      	subs	r2, #48	; 0x30
 8010fc8:	2a09      	cmp	r2, #9
 8010fca:	d903      	bls.n	8010fd4 <_vfiprintf_r+0x1d0>
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d0c6      	beq.n	8010f5e <_vfiprintf_r+0x15a>
 8010fd0:	9105      	str	r1, [sp, #20]
 8010fd2:	e7c4      	b.n	8010f5e <_vfiprintf_r+0x15a>
 8010fd4:	fb0c 2101 	mla	r1, ip, r1, r2
 8010fd8:	4604      	mov	r4, r0
 8010fda:	2301      	movs	r3, #1
 8010fdc:	e7f0      	b.n	8010fc0 <_vfiprintf_r+0x1bc>
 8010fde:	ab03      	add	r3, sp, #12
 8010fe0:	9300      	str	r3, [sp, #0]
 8010fe2:	462a      	mov	r2, r5
 8010fe4:	4b12      	ldr	r3, [pc, #72]	; (8011030 <_vfiprintf_r+0x22c>)
 8010fe6:	a904      	add	r1, sp, #16
 8010fe8:	4630      	mov	r0, r6
 8010fea:	f7fd ff21 	bl	800ee30 <_printf_float>
 8010fee:	4607      	mov	r7, r0
 8010ff0:	1c78      	adds	r0, r7, #1
 8010ff2:	d1d6      	bne.n	8010fa2 <_vfiprintf_r+0x19e>
 8010ff4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010ff6:	07d9      	lsls	r1, r3, #31
 8010ff8:	d405      	bmi.n	8011006 <_vfiprintf_r+0x202>
 8010ffa:	89ab      	ldrh	r3, [r5, #12]
 8010ffc:	059a      	lsls	r2, r3, #22
 8010ffe:	d402      	bmi.n	8011006 <_vfiprintf_r+0x202>
 8011000:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011002:	f7fe fc55 	bl	800f8b0 <__retarget_lock_release_recursive>
 8011006:	89ab      	ldrh	r3, [r5, #12]
 8011008:	065b      	lsls	r3, r3, #25
 801100a:	f53f af1d 	bmi.w	8010e48 <_vfiprintf_r+0x44>
 801100e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011010:	e71c      	b.n	8010e4c <_vfiprintf_r+0x48>
 8011012:	ab03      	add	r3, sp, #12
 8011014:	9300      	str	r3, [sp, #0]
 8011016:	462a      	mov	r2, r5
 8011018:	4b05      	ldr	r3, [pc, #20]	; (8011030 <_vfiprintf_r+0x22c>)
 801101a:	a904      	add	r1, sp, #16
 801101c:	4630      	mov	r0, r6
 801101e:	f7fe f98f 	bl	800f340 <_printf_i>
 8011022:	e7e4      	b.n	8010fee <_vfiprintf_r+0x1ea>
 8011024:	080119cc 	.word	0x080119cc
 8011028:	080119d6 	.word	0x080119d6
 801102c:	0800ee31 	.word	0x0800ee31
 8011030:	08010ddf 	.word	0x08010ddf
 8011034:	080119d2 	.word	0x080119d2

08011038 <__sflush_r>:
 8011038:	898a      	ldrh	r2, [r1, #12]
 801103a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801103e:	4605      	mov	r5, r0
 8011040:	0710      	lsls	r0, r2, #28
 8011042:	460c      	mov	r4, r1
 8011044:	d458      	bmi.n	80110f8 <__sflush_r+0xc0>
 8011046:	684b      	ldr	r3, [r1, #4]
 8011048:	2b00      	cmp	r3, #0
 801104a:	dc05      	bgt.n	8011058 <__sflush_r+0x20>
 801104c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801104e:	2b00      	cmp	r3, #0
 8011050:	dc02      	bgt.n	8011058 <__sflush_r+0x20>
 8011052:	2000      	movs	r0, #0
 8011054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011058:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801105a:	2e00      	cmp	r6, #0
 801105c:	d0f9      	beq.n	8011052 <__sflush_r+0x1a>
 801105e:	2300      	movs	r3, #0
 8011060:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011064:	682f      	ldr	r7, [r5, #0]
 8011066:	6a21      	ldr	r1, [r4, #32]
 8011068:	602b      	str	r3, [r5, #0]
 801106a:	d032      	beq.n	80110d2 <__sflush_r+0x9a>
 801106c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801106e:	89a3      	ldrh	r3, [r4, #12]
 8011070:	075a      	lsls	r2, r3, #29
 8011072:	d505      	bpl.n	8011080 <__sflush_r+0x48>
 8011074:	6863      	ldr	r3, [r4, #4]
 8011076:	1ac0      	subs	r0, r0, r3
 8011078:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801107a:	b10b      	cbz	r3, 8011080 <__sflush_r+0x48>
 801107c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801107e:	1ac0      	subs	r0, r0, r3
 8011080:	2300      	movs	r3, #0
 8011082:	4602      	mov	r2, r0
 8011084:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011086:	6a21      	ldr	r1, [r4, #32]
 8011088:	4628      	mov	r0, r5
 801108a:	47b0      	blx	r6
 801108c:	1c43      	adds	r3, r0, #1
 801108e:	89a3      	ldrh	r3, [r4, #12]
 8011090:	d106      	bne.n	80110a0 <__sflush_r+0x68>
 8011092:	6829      	ldr	r1, [r5, #0]
 8011094:	291d      	cmp	r1, #29
 8011096:	d82b      	bhi.n	80110f0 <__sflush_r+0xb8>
 8011098:	4a29      	ldr	r2, [pc, #164]	; (8011140 <__sflush_r+0x108>)
 801109a:	410a      	asrs	r2, r1
 801109c:	07d6      	lsls	r6, r2, #31
 801109e:	d427      	bmi.n	80110f0 <__sflush_r+0xb8>
 80110a0:	2200      	movs	r2, #0
 80110a2:	6062      	str	r2, [r4, #4]
 80110a4:	04d9      	lsls	r1, r3, #19
 80110a6:	6922      	ldr	r2, [r4, #16]
 80110a8:	6022      	str	r2, [r4, #0]
 80110aa:	d504      	bpl.n	80110b6 <__sflush_r+0x7e>
 80110ac:	1c42      	adds	r2, r0, #1
 80110ae:	d101      	bne.n	80110b4 <__sflush_r+0x7c>
 80110b0:	682b      	ldr	r3, [r5, #0]
 80110b2:	b903      	cbnz	r3, 80110b6 <__sflush_r+0x7e>
 80110b4:	6560      	str	r0, [r4, #84]	; 0x54
 80110b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80110b8:	602f      	str	r7, [r5, #0]
 80110ba:	2900      	cmp	r1, #0
 80110bc:	d0c9      	beq.n	8011052 <__sflush_r+0x1a>
 80110be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80110c2:	4299      	cmp	r1, r3
 80110c4:	d002      	beq.n	80110cc <__sflush_r+0x94>
 80110c6:	4628      	mov	r0, r5
 80110c8:	f7ff f9f6 	bl	80104b8 <_free_r>
 80110cc:	2000      	movs	r0, #0
 80110ce:	6360      	str	r0, [r4, #52]	; 0x34
 80110d0:	e7c0      	b.n	8011054 <__sflush_r+0x1c>
 80110d2:	2301      	movs	r3, #1
 80110d4:	4628      	mov	r0, r5
 80110d6:	47b0      	blx	r6
 80110d8:	1c41      	adds	r1, r0, #1
 80110da:	d1c8      	bne.n	801106e <__sflush_r+0x36>
 80110dc:	682b      	ldr	r3, [r5, #0]
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d0c5      	beq.n	801106e <__sflush_r+0x36>
 80110e2:	2b1d      	cmp	r3, #29
 80110e4:	d001      	beq.n	80110ea <__sflush_r+0xb2>
 80110e6:	2b16      	cmp	r3, #22
 80110e8:	d101      	bne.n	80110ee <__sflush_r+0xb6>
 80110ea:	602f      	str	r7, [r5, #0]
 80110ec:	e7b1      	b.n	8011052 <__sflush_r+0x1a>
 80110ee:	89a3      	ldrh	r3, [r4, #12]
 80110f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80110f4:	81a3      	strh	r3, [r4, #12]
 80110f6:	e7ad      	b.n	8011054 <__sflush_r+0x1c>
 80110f8:	690f      	ldr	r7, [r1, #16]
 80110fa:	2f00      	cmp	r7, #0
 80110fc:	d0a9      	beq.n	8011052 <__sflush_r+0x1a>
 80110fe:	0793      	lsls	r3, r2, #30
 8011100:	680e      	ldr	r6, [r1, #0]
 8011102:	bf08      	it	eq
 8011104:	694b      	ldreq	r3, [r1, #20]
 8011106:	600f      	str	r7, [r1, #0]
 8011108:	bf18      	it	ne
 801110a:	2300      	movne	r3, #0
 801110c:	eba6 0807 	sub.w	r8, r6, r7
 8011110:	608b      	str	r3, [r1, #8]
 8011112:	f1b8 0f00 	cmp.w	r8, #0
 8011116:	dd9c      	ble.n	8011052 <__sflush_r+0x1a>
 8011118:	6a21      	ldr	r1, [r4, #32]
 801111a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801111c:	4643      	mov	r3, r8
 801111e:	463a      	mov	r2, r7
 8011120:	4628      	mov	r0, r5
 8011122:	47b0      	blx	r6
 8011124:	2800      	cmp	r0, #0
 8011126:	dc06      	bgt.n	8011136 <__sflush_r+0xfe>
 8011128:	89a3      	ldrh	r3, [r4, #12]
 801112a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801112e:	81a3      	strh	r3, [r4, #12]
 8011130:	f04f 30ff 	mov.w	r0, #4294967295
 8011134:	e78e      	b.n	8011054 <__sflush_r+0x1c>
 8011136:	4407      	add	r7, r0
 8011138:	eba8 0800 	sub.w	r8, r8, r0
 801113c:	e7e9      	b.n	8011112 <__sflush_r+0xda>
 801113e:	bf00      	nop
 8011140:	dfbffffe 	.word	0xdfbffffe

08011144 <_fflush_r>:
 8011144:	b538      	push	{r3, r4, r5, lr}
 8011146:	690b      	ldr	r3, [r1, #16]
 8011148:	4605      	mov	r5, r0
 801114a:	460c      	mov	r4, r1
 801114c:	b913      	cbnz	r3, 8011154 <_fflush_r+0x10>
 801114e:	2500      	movs	r5, #0
 8011150:	4628      	mov	r0, r5
 8011152:	bd38      	pop	{r3, r4, r5, pc}
 8011154:	b118      	cbz	r0, 801115e <_fflush_r+0x1a>
 8011156:	6a03      	ldr	r3, [r0, #32]
 8011158:	b90b      	cbnz	r3, 801115e <_fflush_r+0x1a>
 801115a:	f7fe fa9f 	bl	800f69c <__sinit>
 801115e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011162:	2b00      	cmp	r3, #0
 8011164:	d0f3      	beq.n	801114e <_fflush_r+0xa>
 8011166:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011168:	07d0      	lsls	r0, r2, #31
 801116a:	d404      	bmi.n	8011176 <_fflush_r+0x32>
 801116c:	0599      	lsls	r1, r3, #22
 801116e:	d402      	bmi.n	8011176 <_fflush_r+0x32>
 8011170:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011172:	f7fe fb9c 	bl	800f8ae <__retarget_lock_acquire_recursive>
 8011176:	4628      	mov	r0, r5
 8011178:	4621      	mov	r1, r4
 801117a:	f7ff ff5d 	bl	8011038 <__sflush_r>
 801117e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011180:	07da      	lsls	r2, r3, #31
 8011182:	4605      	mov	r5, r0
 8011184:	d4e4      	bmi.n	8011150 <_fflush_r+0xc>
 8011186:	89a3      	ldrh	r3, [r4, #12]
 8011188:	059b      	lsls	r3, r3, #22
 801118a:	d4e1      	bmi.n	8011150 <_fflush_r+0xc>
 801118c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801118e:	f7fe fb8f 	bl	800f8b0 <__retarget_lock_release_recursive>
 8011192:	e7dd      	b.n	8011150 <_fflush_r+0xc>

08011194 <__swbuf_r>:
 8011194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011196:	460e      	mov	r6, r1
 8011198:	4614      	mov	r4, r2
 801119a:	4605      	mov	r5, r0
 801119c:	b118      	cbz	r0, 80111a6 <__swbuf_r+0x12>
 801119e:	6a03      	ldr	r3, [r0, #32]
 80111a0:	b90b      	cbnz	r3, 80111a6 <__swbuf_r+0x12>
 80111a2:	f7fe fa7b 	bl	800f69c <__sinit>
 80111a6:	69a3      	ldr	r3, [r4, #24]
 80111a8:	60a3      	str	r3, [r4, #8]
 80111aa:	89a3      	ldrh	r3, [r4, #12]
 80111ac:	071a      	lsls	r2, r3, #28
 80111ae:	d525      	bpl.n	80111fc <__swbuf_r+0x68>
 80111b0:	6923      	ldr	r3, [r4, #16]
 80111b2:	b31b      	cbz	r3, 80111fc <__swbuf_r+0x68>
 80111b4:	6823      	ldr	r3, [r4, #0]
 80111b6:	6922      	ldr	r2, [r4, #16]
 80111b8:	1a98      	subs	r0, r3, r2
 80111ba:	6963      	ldr	r3, [r4, #20]
 80111bc:	b2f6      	uxtb	r6, r6
 80111be:	4283      	cmp	r3, r0
 80111c0:	4637      	mov	r7, r6
 80111c2:	dc04      	bgt.n	80111ce <__swbuf_r+0x3a>
 80111c4:	4621      	mov	r1, r4
 80111c6:	4628      	mov	r0, r5
 80111c8:	f7ff ffbc 	bl	8011144 <_fflush_r>
 80111cc:	b9e0      	cbnz	r0, 8011208 <__swbuf_r+0x74>
 80111ce:	68a3      	ldr	r3, [r4, #8]
 80111d0:	3b01      	subs	r3, #1
 80111d2:	60a3      	str	r3, [r4, #8]
 80111d4:	6823      	ldr	r3, [r4, #0]
 80111d6:	1c5a      	adds	r2, r3, #1
 80111d8:	6022      	str	r2, [r4, #0]
 80111da:	701e      	strb	r6, [r3, #0]
 80111dc:	6962      	ldr	r2, [r4, #20]
 80111de:	1c43      	adds	r3, r0, #1
 80111e0:	429a      	cmp	r2, r3
 80111e2:	d004      	beq.n	80111ee <__swbuf_r+0x5a>
 80111e4:	89a3      	ldrh	r3, [r4, #12]
 80111e6:	07db      	lsls	r3, r3, #31
 80111e8:	d506      	bpl.n	80111f8 <__swbuf_r+0x64>
 80111ea:	2e0a      	cmp	r6, #10
 80111ec:	d104      	bne.n	80111f8 <__swbuf_r+0x64>
 80111ee:	4621      	mov	r1, r4
 80111f0:	4628      	mov	r0, r5
 80111f2:	f7ff ffa7 	bl	8011144 <_fflush_r>
 80111f6:	b938      	cbnz	r0, 8011208 <__swbuf_r+0x74>
 80111f8:	4638      	mov	r0, r7
 80111fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80111fc:	4621      	mov	r1, r4
 80111fe:	4628      	mov	r0, r5
 8011200:	f000 f806 	bl	8011210 <__swsetup_r>
 8011204:	2800      	cmp	r0, #0
 8011206:	d0d5      	beq.n	80111b4 <__swbuf_r+0x20>
 8011208:	f04f 37ff 	mov.w	r7, #4294967295
 801120c:	e7f4      	b.n	80111f8 <__swbuf_r+0x64>
	...

08011210 <__swsetup_r>:
 8011210:	b538      	push	{r3, r4, r5, lr}
 8011212:	4b2a      	ldr	r3, [pc, #168]	; (80112bc <__swsetup_r+0xac>)
 8011214:	4605      	mov	r5, r0
 8011216:	6818      	ldr	r0, [r3, #0]
 8011218:	460c      	mov	r4, r1
 801121a:	b118      	cbz	r0, 8011224 <__swsetup_r+0x14>
 801121c:	6a03      	ldr	r3, [r0, #32]
 801121e:	b90b      	cbnz	r3, 8011224 <__swsetup_r+0x14>
 8011220:	f7fe fa3c 	bl	800f69c <__sinit>
 8011224:	89a3      	ldrh	r3, [r4, #12]
 8011226:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801122a:	0718      	lsls	r0, r3, #28
 801122c:	d422      	bmi.n	8011274 <__swsetup_r+0x64>
 801122e:	06d9      	lsls	r1, r3, #27
 8011230:	d407      	bmi.n	8011242 <__swsetup_r+0x32>
 8011232:	2309      	movs	r3, #9
 8011234:	602b      	str	r3, [r5, #0]
 8011236:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801123a:	81a3      	strh	r3, [r4, #12]
 801123c:	f04f 30ff 	mov.w	r0, #4294967295
 8011240:	e034      	b.n	80112ac <__swsetup_r+0x9c>
 8011242:	0758      	lsls	r0, r3, #29
 8011244:	d512      	bpl.n	801126c <__swsetup_r+0x5c>
 8011246:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011248:	b141      	cbz	r1, 801125c <__swsetup_r+0x4c>
 801124a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801124e:	4299      	cmp	r1, r3
 8011250:	d002      	beq.n	8011258 <__swsetup_r+0x48>
 8011252:	4628      	mov	r0, r5
 8011254:	f7ff f930 	bl	80104b8 <_free_r>
 8011258:	2300      	movs	r3, #0
 801125a:	6363      	str	r3, [r4, #52]	; 0x34
 801125c:	89a3      	ldrh	r3, [r4, #12]
 801125e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011262:	81a3      	strh	r3, [r4, #12]
 8011264:	2300      	movs	r3, #0
 8011266:	6063      	str	r3, [r4, #4]
 8011268:	6923      	ldr	r3, [r4, #16]
 801126a:	6023      	str	r3, [r4, #0]
 801126c:	89a3      	ldrh	r3, [r4, #12]
 801126e:	f043 0308 	orr.w	r3, r3, #8
 8011272:	81a3      	strh	r3, [r4, #12]
 8011274:	6923      	ldr	r3, [r4, #16]
 8011276:	b94b      	cbnz	r3, 801128c <__swsetup_r+0x7c>
 8011278:	89a3      	ldrh	r3, [r4, #12]
 801127a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801127e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011282:	d003      	beq.n	801128c <__swsetup_r+0x7c>
 8011284:	4621      	mov	r1, r4
 8011286:	4628      	mov	r0, r5
 8011288:	f000 f8b6 	bl	80113f8 <__smakebuf_r>
 801128c:	89a0      	ldrh	r0, [r4, #12]
 801128e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011292:	f010 0301 	ands.w	r3, r0, #1
 8011296:	d00a      	beq.n	80112ae <__swsetup_r+0x9e>
 8011298:	2300      	movs	r3, #0
 801129a:	60a3      	str	r3, [r4, #8]
 801129c:	6963      	ldr	r3, [r4, #20]
 801129e:	425b      	negs	r3, r3
 80112a0:	61a3      	str	r3, [r4, #24]
 80112a2:	6923      	ldr	r3, [r4, #16]
 80112a4:	b943      	cbnz	r3, 80112b8 <__swsetup_r+0xa8>
 80112a6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80112aa:	d1c4      	bne.n	8011236 <__swsetup_r+0x26>
 80112ac:	bd38      	pop	{r3, r4, r5, pc}
 80112ae:	0781      	lsls	r1, r0, #30
 80112b0:	bf58      	it	pl
 80112b2:	6963      	ldrpl	r3, [r4, #20]
 80112b4:	60a3      	str	r3, [r4, #8]
 80112b6:	e7f4      	b.n	80112a2 <__swsetup_r+0x92>
 80112b8:	2000      	movs	r0, #0
 80112ba:	e7f7      	b.n	80112ac <__swsetup_r+0x9c>
 80112bc:	24000080 	.word	0x24000080

080112c0 <_sbrk_r>:
 80112c0:	b538      	push	{r3, r4, r5, lr}
 80112c2:	4d06      	ldr	r5, [pc, #24]	; (80112dc <_sbrk_r+0x1c>)
 80112c4:	2300      	movs	r3, #0
 80112c6:	4604      	mov	r4, r0
 80112c8:	4608      	mov	r0, r1
 80112ca:	602b      	str	r3, [r5, #0]
 80112cc:	f7ef feda 	bl	8001084 <_sbrk>
 80112d0:	1c43      	adds	r3, r0, #1
 80112d2:	d102      	bne.n	80112da <_sbrk_r+0x1a>
 80112d4:	682b      	ldr	r3, [r5, #0]
 80112d6:	b103      	cbz	r3, 80112da <_sbrk_r+0x1a>
 80112d8:	6023      	str	r3, [r4, #0]
 80112da:	bd38      	pop	{r3, r4, r5, pc}
 80112dc:	24005828 	.word	0x24005828

080112e0 <__assert_func>:
 80112e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80112e2:	4614      	mov	r4, r2
 80112e4:	461a      	mov	r2, r3
 80112e6:	4b09      	ldr	r3, [pc, #36]	; (801130c <__assert_func+0x2c>)
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	4605      	mov	r5, r0
 80112ec:	68d8      	ldr	r0, [r3, #12]
 80112ee:	b14c      	cbz	r4, 8011304 <__assert_func+0x24>
 80112f0:	4b07      	ldr	r3, [pc, #28]	; (8011310 <__assert_func+0x30>)
 80112f2:	9100      	str	r1, [sp, #0]
 80112f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80112f8:	4906      	ldr	r1, [pc, #24]	; (8011314 <__assert_func+0x34>)
 80112fa:	462b      	mov	r3, r5
 80112fc:	f000 f844 	bl	8011388 <fiprintf>
 8011300:	f000 f8d8 	bl	80114b4 <abort>
 8011304:	4b04      	ldr	r3, [pc, #16]	; (8011318 <__assert_func+0x38>)
 8011306:	461c      	mov	r4, r3
 8011308:	e7f3      	b.n	80112f2 <__assert_func+0x12>
 801130a:	bf00      	nop
 801130c:	24000080 	.word	0x24000080
 8011310:	080119e7 	.word	0x080119e7
 8011314:	080119f4 	.word	0x080119f4
 8011318:	08011a22 	.word	0x08011a22

0801131c <_calloc_r>:
 801131c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801131e:	fba1 2402 	umull	r2, r4, r1, r2
 8011322:	b94c      	cbnz	r4, 8011338 <_calloc_r+0x1c>
 8011324:	4611      	mov	r1, r2
 8011326:	9201      	str	r2, [sp, #4]
 8011328:	f7ff f93a 	bl	80105a0 <_malloc_r>
 801132c:	9a01      	ldr	r2, [sp, #4]
 801132e:	4605      	mov	r5, r0
 8011330:	b930      	cbnz	r0, 8011340 <_calloc_r+0x24>
 8011332:	4628      	mov	r0, r5
 8011334:	b003      	add	sp, #12
 8011336:	bd30      	pop	{r4, r5, pc}
 8011338:	220c      	movs	r2, #12
 801133a:	6002      	str	r2, [r0, #0]
 801133c:	2500      	movs	r5, #0
 801133e:	e7f8      	b.n	8011332 <_calloc_r+0x16>
 8011340:	4621      	mov	r1, r4
 8011342:	f7fe fa36 	bl	800f7b2 <memset>
 8011346:	e7f4      	b.n	8011332 <_calloc_r+0x16>

08011348 <__ascii_mbtowc>:
 8011348:	b082      	sub	sp, #8
 801134a:	b901      	cbnz	r1, 801134e <__ascii_mbtowc+0x6>
 801134c:	a901      	add	r1, sp, #4
 801134e:	b142      	cbz	r2, 8011362 <__ascii_mbtowc+0x1a>
 8011350:	b14b      	cbz	r3, 8011366 <__ascii_mbtowc+0x1e>
 8011352:	7813      	ldrb	r3, [r2, #0]
 8011354:	600b      	str	r3, [r1, #0]
 8011356:	7812      	ldrb	r2, [r2, #0]
 8011358:	1e10      	subs	r0, r2, #0
 801135a:	bf18      	it	ne
 801135c:	2001      	movne	r0, #1
 801135e:	b002      	add	sp, #8
 8011360:	4770      	bx	lr
 8011362:	4610      	mov	r0, r2
 8011364:	e7fb      	b.n	801135e <__ascii_mbtowc+0x16>
 8011366:	f06f 0001 	mvn.w	r0, #1
 801136a:	e7f8      	b.n	801135e <__ascii_mbtowc+0x16>

0801136c <__ascii_wctomb>:
 801136c:	b149      	cbz	r1, 8011382 <__ascii_wctomb+0x16>
 801136e:	2aff      	cmp	r2, #255	; 0xff
 8011370:	bf85      	ittet	hi
 8011372:	238a      	movhi	r3, #138	; 0x8a
 8011374:	6003      	strhi	r3, [r0, #0]
 8011376:	700a      	strbls	r2, [r1, #0]
 8011378:	f04f 30ff 	movhi.w	r0, #4294967295
 801137c:	bf98      	it	ls
 801137e:	2001      	movls	r0, #1
 8011380:	4770      	bx	lr
 8011382:	4608      	mov	r0, r1
 8011384:	4770      	bx	lr
	...

08011388 <fiprintf>:
 8011388:	b40e      	push	{r1, r2, r3}
 801138a:	b503      	push	{r0, r1, lr}
 801138c:	4601      	mov	r1, r0
 801138e:	ab03      	add	r3, sp, #12
 8011390:	4805      	ldr	r0, [pc, #20]	; (80113a8 <fiprintf+0x20>)
 8011392:	f853 2b04 	ldr.w	r2, [r3], #4
 8011396:	6800      	ldr	r0, [r0, #0]
 8011398:	9301      	str	r3, [sp, #4]
 801139a:	f7ff fd33 	bl	8010e04 <_vfiprintf_r>
 801139e:	b002      	add	sp, #8
 80113a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80113a4:	b003      	add	sp, #12
 80113a6:	4770      	bx	lr
 80113a8:	24000080 	.word	0x24000080

080113ac <__swhatbuf_r>:
 80113ac:	b570      	push	{r4, r5, r6, lr}
 80113ae:	460c      	mov	r4, r1
 80113b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80113b4:	2900      	cmp	r1, #0
 80113b6:	b096      	sub	sp, #88	; 0x58
 80113b8:	4615      	mov	r5, r2
 80113ba:	461e      	mov	r6, r3
 80113bc:	da0d      	bge.n	80113da <__swhatbuf_r+0x2e>
 80113be:	89a3      	ldrh	r3, [r4, #12]
 80113c0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80113c4:	f04f 0100 	mov.w	r1, #0
 80113c8:	bf0c      	ite	eq
 80113ca:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80113ce:	2340      	movne	r3, #64	; 0x40
 80113d0:	2000      	movs	r0, #0
 80113d2:	6031      	str	r1, [r6, #0]
 80113d4:	602b      	str	r3, [r5, #0]
 80113d6:	b016      	add	sp, #88	; 0x58
 80113d8:	bd70      	pop	{r4, r5, r6, pc}
 80113da:	466a      	mov	r2, sp
 80113dc:	f000 f848 	bl	8011470 <_fstat_r>
 80113e0:	2800      	cmp	r0, #0
 80113e2:	dbec      	blt.n	80113be <__swhatbuf_r+0x12>
 80113e4:	9901      	ldr	r1, [sp, #4]
 80113e6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80113ea:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80113ee:	4259      	negs	r1, r3
 80113f0:	4159      	adcs	r1, r3
 80113f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80113f6:	e7eb      	b.n	80113d0 <__swhatbuf_r+0x24>

080113f8 <__smakebuf_r>:
 80113f8:	898b      	ldrh	r3, [r1, #12]
 80113fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80113fc:	079d      	lsls	r5, r3, #30
 80113fe:	4606      	mov	r6, r0
 8011400:	460c      	mov	r4, r1
 8011402:	d507      	bpl.n	8011414 <__smakebuf_r+0x1c>
 8011404:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011408:	6023      	str	r3, [r4, #0]
 801140a:	6123      	str	r3, [r4, #16]
 801140c:	2301      	movs	r3, #1
 801140e:	6163      	str	r3, [r4, #20]
 8011410:	b002      	add	sp, #8
 8011412:	bd70      	pop	{r4, r5, r6, pc}
 8011414:	ab01      	add	r3, sp, #4
 8011416:	466a      	mov	r2, sp
 8011418:	f7ff ffc8 	bl	80113ac <__swhatbuf_r>
 801141c:	9900      	ldr	r1, [sp, #0]
 801141e:	4605      	mov	r5, r0
 8011420:	4630      	mov	r0, r6
 8011422:	f7ff f8bd 	bl	80105a0 <_malloc_r>
 8011426:	b948      	cbnz	r0, 801143c <__smakebuf_r+0x44>
 8011428:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801142c:	059a      	lsls	r2, r3, #22
 801142e:	d4ef      	bmi.n	8011410 <__smakebuf_r+0x18>
 8011430:	f023 0303 	bic.w	r3, r3, #3
 8011434:	f043 0302 	orr.w	r3, r3, #2
 8011438:	81a3      	strh	r3, [r4, #12]
 801143a:	e7e3      	b.n	8011404 <__smakebuf_r+0xc>
 801143c:	89a3      	ldrh	r3, [r4, #12]
 801143e:	6020      	str	r0, [r4, #0]
 8011440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011444:	81a3      	strh	r3, [r4, #12]
 8011446:	9b00      	ldr	r3, [sp, #0]
 8011448:	6163      	str	r3, [r4, #20]
 801144a:	9b01      	ldr	r3, [sp, #4]
 801144c:	6120      	str	r0, [r4, #16]
 801144e:	b15b      	cbz	r3, 8011468 <__smakebuf_r+0x70>
 8011450:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011454:	4630      	mov	r0, r6
 8011456:	f000 f81d 	bl	8011494 <_isatty_r>
 801145a:	b128      	cbz	r0, 8011468 <__smakebuf_r+0x70>
 801145c:	89a3      	ldrh	r3, [r4, #12]
 801145e:	f023 0303 	bic.w	r3, r3, #3
 8011462:	f043 0301 	orr.w	r3, r3, #1
 8011466:	81a3      	strh	r3, [r4, #12]
 8011468:	89a3      	ldrh	r3, [r4, #12]
 801146a:	431d      	orrs	r5, r3
 801146c:	81a5      	strh	r5, [r4, #12]
 801146e:	e7cf      	b.n	8011410 <__smakebuf_r+0x18>

08011470 <_fstat_r>:
 8011470:	b538      	push	{r3, r4, r5, lr}
 8011472:	4d07      	ldr	r5, [pc, #28]	; (8011490 <_fstat_r+0x20>)
 8011474:	2300      	movs	r3, #0
 8011476:	4604      	mov	r4, r0
 8011478:	4608      	mov	r0, r1
 801147a:	4611      	mov	r1, r2
 801147c:	602b      	str	r3, [r5, #0]
 801147e:	f7ef fdd8 	bl	8001032 <_fstat>
 8011482:	1c43      	adds	r3, r0, #1
 8011484:	d102      	bne.n	801148c <_fstat_r+0x1c>
 8011486:	682b      	ldr	r3, [r5, #0]
 8011488:	b103      	cbz	r3, 801148c <_fstat_r+0x1c>
 801148a:	6023      	str	r3, [r4, #0]
 801148c:	bd38      	pop	{r3, r4, r5, pc}
 801148e:	bf00      	nop
 8011490:	24005828 	.word	0x24005828

08011494 <_isatty_r>:
 8011494:	b538      	push	{r3, r4, r5, lr}
 8011496:	4d06      	ldr	r5, [pc, #24]	; (80114b0 <_isatty_r+0x1c>)
 8011498:	2300      	movs	r3, #0
 801149a:	4604      	mov	r4, r0
 801149c:	4608      	mov	r0, r1
 801149e:	602b      	str	r3, [r5, #0]
 80114a0:	f7ef fdd7 	bl	8001052 <_isatty>
 80114a4:	1c43      	adds	r3, r0, #1
 80114a6:	d102      	bne.n	80114ae <_isatty_r+0x1a>
 80114a8:	682b      	ldr	r3, [r5, #0]
 80114aa:	b103      	cbz	r3, 80114ae <_isatty_r+0x1a>
 80114ac:	6023      	str	r3, [r4, #0]
 80114ae:	bd38      	pop	{r3, r4, r5, pc}
 80114b0:	24005828 	.word	0x24005828

080114b4 <abort>:
 80114b4:	b508      	push	{r3, lr}
 80114b6:	2006      	movs	r0, #6
 80114b8:	f000 f82c 	bl	8011514 <raise>
 80114bc:	2001      	movs	r0, #1
 80114be:	f7ef fd69 	bl	8000f94 <_exit>

080114c2 <_raise_r>:
 80114c2:	291f      	cmp	r1, #31
 80114c4:	b538      	push	{r3, r4, r5, lr}
 80114c6:	4604      	mov	r4, r0
 80114c8:	460d      	mov	r5, r1
 80114ca:	d904      	bls.n	80114d6 <_raise_r+0x14>
 80114cc:	2316      	movs	r3, #22
 80114ce:	6003      	str	r3, [r0, #0]
 80114d0:	f04f 30ff 	mov.w	r0, #4294967295
 80114d4:	bd38      	pop	{r3, r4, r5, pc}
 80114d6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80114d8:	b112      	cbz	r2, 80114e0 <_raise_r+0x1e>
 80114da:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80114de:	b94b      	cbnz	r3, 80114f4 <_raise_r+0x32>
 80114e0:	4620      	mov	r0, r4
 80114e2:	f000 f831 	bl	8011548 <_getpid_r>
 80114e6:	462a      	mov	r2, r5
 80114e8:	4601      	mov	r1, r0
 80114ea:	4620      	mov	r0, r4
 80114ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80114f0:	f000 b818 	b.w	8011524 <_kill_r>
 80114f4:	2b01      	cmp	r3, #1
 80114f6:	d00a      	beq.n	801150e <_raise_r+0x4c>
 80114f8:	1c59      	adds	r1, r3, #1
 80114fa:	d103      	bne.n	8011504 <_raise_r+0x42>
 80114fc:	2316      	movs	r3, #22
 80114fe:	6003      	str	r3, [r0, #0]
 8011500:	2001      	movs	r0, #1
 8011502:	e7e7      	b.n	80114d4 <_raise_r+0x12>
 8011504:	2400      	movs	r4, #0
 8011506:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801150a:	4628      	mov	r0, r5
 801150c:	4798      	blx	r3
 801150e:	2000      	movs	r0, #0
 8011510:	e7e0      	b.n	80114d4 <_raise_r+0x12>
	...

08011514 <raise>:
 8011514:	4b02      	ldr	r3, [pc, #8]	; (8011520 <raise+0xc>)
 8011516:	4601      	mov	r1, r0
 8011518:	6818      	ldr	r0, [r3, #0]
 801151a:	f7ff bfd2 	b.w	80114c2 <_raise_r>
 801151e:	bf00      	nop
 8011520:	24000080 	.word	0x24000080

08011524 <_kill_r>:
 8011524:	b538      	push	{r3, r4, r5, lr}
 8011526:	4d07      	ldr	r5, [pc, #28]	; (8011544 <_kill_r+0x20>)
 8011528:	2300      	movs	r3, #0
 801152a:	4604      	mov	r4, r0
 801152c:	4608      	mov	r0, r1
 801152e:	4611      	mov	r1, r2
 8011530:	602b      	str	r3, [r5, #0]
 8011532:	f7ef fd1f 	bl	8000f74 <_kill>
 8011536:	1c43      	adds	r3, r0, #1
 8011538:	d102      	bne.n	8011540 <_kill_r+0x1c>
 801153a:	682b      	ldr	r3, [r5, #0]
 801153c:	b103      	cbz	r3, 8011540 <_kill_r+0x1c>
 801153e:	6023      	str	r3, [r4, #0]
 8011540:	bd38      	pop	{r3, r4, r5, pc}
 8011542:	bf00      	nop
 8011544:	24005828 	.word	0x24005828

08011548 <_getpid_r>:
 8011548:	f7ef bd0c 	b.w	8000f64 <_getpid>

0801154c <_init>:
 801154c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801154e:	bf00      	nop
 8011550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011552:	bc08      	pop	{r3}
 8011554:	469e      	mov	lr, r3
 8011556:	4770      	bx	lr

08011558 <_fini>:
 8011558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801155a:	bf00      	nop
 801155c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801155e:	bc08      	pop	{r3}
 8011560:	469e      	mov	lr, r3
 8011562:	4770      	bx	lr
