
KalmanFilter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001bb94  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000072c  0801be38  0801be38  0002be38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801c564  0801c564  0002c564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000010  0801c56c  0801c56c  0002c56c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801c57c  0801c57c  0002c57c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  24000000  0801c580  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  240001dc  0801c75c  000301dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  2400023c  0801c7bc  0003023c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e4e8  2400029c  0801c81c  0003029c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400e784  0801c81c  0003e784  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003029c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000302ca  2**0
                  CONTENTS, READONLY
 13 .debug_info   00067257  00000000  00000000  0003030d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000920d  00000000  00000000  00097564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000038c8  00000000  00000000  000a0778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002b98  00000000  00000000  000a4040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00045c57  00000000  00000000  000a6bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000429ac  00000000  00000000  000ec82f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0018b1b4  00000000  00000000  0012f1db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00010c68  00000000  00000000  002ba390  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  002caff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400029c 	.word	0x2400029c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801be1c 	.word	0x0801be1c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002a0 	.word	0x240002a0
 80002dc:	0801be1c 	.word	0x0801be1c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b970 	b.w	8000a00 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f806 	bl	8000738 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__udivmoddi4>:
 8000738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800073c:	9e08      	ldr	r6, [sp, #32]
 800073e:	460d      	mov	r5, r1
 8000740:	4604      	mov	r4, r0
 8000742:	460f      	mov	r7, r1
 8000744:	2b00      	cmp	r3, #0
 8000746:	d14a      	bne.n	80007de <__udivmoddi4+0xa6>
 8000748:	428a      	cmp	r2, r1
 800074a:	4694      	mov	ip, r2
 800074c:	d965      	bls.n	800081a <__udivmoddi4+0xe2>
 800074e:	fab2 f382 	clz	r3, r2
 8000752:	b143      	cbz	r3, 8000766 <__udivmoddi4+0x2e>
 8000754:	fa02 fc03 	lsl.w	ip, r2, r3
 8000758:	f1c3 0220 	rsb	r2, r3, #32
 800075c:	409f      	lsls	r7, r3
 800075e:	fa20 f202 	lsr.w	r2, r0, r2
 8000762:	4317      	orrs	r7, r2
 8000764:	409c      	lsls	r4, r3
 8000766:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800076a:	fa1f f58c 	uxth.w	r5, ip
 800076e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000772:	0c22      	lsrs	r2, r4, #16
 8000774:	fb0e 7711 	mls	r7, lr, r1, r7
 8000778:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800077c:	fb01 f005 	mul.w	r0, r1, r5
 8000780:	4290      	cmp	r0, r2
 8000782:	d90a      	bls.n	800079a <__udivmoddi4+0x62>
 8000784:	eb1c 0202 	adds.w	r2, ip, r2
 8000788:	f101 37ff 	add.w	r7, r1, #4294967295
 800078c:	f080 811c 	bcs.w	80009c8 <__udivmoddi4+0x290>
 8000790:	4290      	cmp	r0, r2
 8000792:	f240 8119 	bls.w	80009c8 <__udivmoddi4+0x290>
 8000796:	3902      	subs	r1, #2
 8000798:	4462      	add	r2, ip
 800079a:	1a12      	subs	r2, r2, r0
 800079c:	b2a4      	uxth	r4, r4
 800079e:	fbb2 f0fe 	udiv	r0, r2, lr
 80007a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80007a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80007aa:	fb00 f505 	mul.w	r5, r0, r5
 80007ae:	42a5      	cmp	r5, r4
 80007b0:	d90a      	bls.n	80007c8 <__udivmoddi4+0x90>
 80007b2:	eb1c 0404 	adds.w	r4, ip, r4
 80007b6:	f100 32ff 	add.w	r2, r0, #4294967295
 80007ba:	f080 8107 	bcs.w	80009cc <__udivmoddi4+0x294>
 80007be:	42a5      	cmp	r5, r4
 80007c0:	f240 8104 	bls.w	80009cc <__udivmoddi4+0x294>
 80007c4:	4464      	add	r4, ip
 80007c6:	3802      	subs	r0, #2
 80007c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80007cc:	1b64      	subs	r4, r4, r5
 80007ce:	2100      	movs	r1, #0
 80007d0:	b11e      	cbz	r6, 80007da <__udivmoddi4+0xa2>
 80007d2:	40dc      	lsrs	r4, r3
 80007d4:	2300      	movs	r3, #0
 80007d6:	e9c6 4300 	strd	r4, r3, [r6]
 80007da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007de:	428b      	cmp	r3, r1
 80007e0:	d908      	bls.n	80007f4 <__udivmoddi4+0xbc>
 80007e2:	2e00      	cmp	r6, #0
 80007e4:	f000 80ed 	beq.w	80009c2 <__udivmoddi4+0x28a>
 80007e8:	2100      	movs	r1, #0
 80007ea:	e9c6 0500 	strd	r0, r5, [r6]
 80007ee:	4608      	mov	r0, r1
 80007f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007f4:	fab3 f183 	clz	r1, r3
 80007f8:	2900      	cmp	r1, #0
 80007fa:	d149      	bne.n	8000890 <__udivmoddi4+0x158>
 80007fc:	42ab      	cmp	r3, r5
 80007fe:	d302      	bcc.n	8000806 <__udivmoddi4+0xce>
 8000800:	4282      	cmp	r2, r0
 8000802:	f200 80f8 	bhi.w	80009f6 <__udivmoddi4+0x2be>
 8000806:	1a84      	subs	r4, r0, r2
 8000808:	eb65 0203 	sbc.w	r2, r5, r3
 800080c:	2001      	movs	r0, #1
 800080e:	4617      	mov	r7, r2
 8000810:	2e00      	cmp	r6, #0
 8000812:	d0e2      	beq.n	80007da <__udivmoddi4+0xa2>
 8000814:	e9c6 4700 	strd	r4, r7, [r6]
 8000818:	e7df      	b.n	80007da <__udivmoddi4+0xa2>
 800081a:	b902      	cbnz	r2, 800081e <__udivmoddi4+0xe6>
 800081c:	deff      	udf	#255	; 0xff
 800081e:	fab2 f382 	clz	r3, r2
 8000822:	2b00      	cmp	r3, #0
 8000824:	f040 8090 	bne.w	8000948 <__udivmoddi4+0x210>
 8000828:	1a8a      	subs	r2, r1, r2
 800082a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800082e:	fa1f fe8c 	uxth.w	lr, ip
 8000832:	2101      	movs	r1, #1
 8000834:	fbb2 f5f7 	udiv	r5, r2, r7
 8000838:	fb07 2015 	mls	r0, r7, r5, r2
 800083c:	0c22      	lsrs	r2, r4, #16
 800083e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000842:	fb0e f005 	mul.w	r0, lr, r5
 8000846:	4290      	cmp	r0, r2
 8000848:	d908      	bls.n	800085c <__udivmoddi4+0x124>
 800084a:	eb1c 0202 	adds.w	r2, ip, r2
 800084e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000852:	d202      	bcs.n	800085a <__udivmoddi4+0x122>
 8000854:	4290      	cmp	r0, r2
 8000856:	f200 80cb 	bhi.w	80009f0 <__udivmoddi4+0x2b8>
 800085a:	4645      	mov	r5, r8
 800085c:	1a12      	subs	r2, r2, r0
 800085e:	b2a4      	uxth	r4, r4
 8000860:	fbb2 f0f7 	udiv	r0, r2, r7
 8000864:	fb07 2210 	mls	r2, r7, r0, r2
 8000868:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800086c:	fb0e fe00 	mul.w	lr, lr, r0
 8000870:	45a6      	cmp	lr, r4
 8000872:	d908      	bls.n	8000886 <__udivmoddi4+0x14e>
 8000874:	eb1c 0404 	adds.w	r4, ip, r4
 8000878:	f100 32ff 	add.w	r2, r0, #4294967295
 800087c:	d202      	bcs.n	8000884 <__udivmoddi4+0x14c>
 800087e:	45a6      	cmp	lr, r4
 8000880:	f200 80bb 	bhi.w	80009fa <__udivmoddi4+0x2c2>
 8000884:	4610      	mov	r0, r2
 8000886:	eba4 040e 	sub.w	r4, r4, lr
 800088a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800088e:	e79f      	b.n	80007d0 <__udivmoddi4+0x98>
 8000890:	f1c1 0720 	rsb	r7, r1, #32
 8000894:	408b      	lsls	r3, r1
 8000896:	fa22 fc07 	lsr.w	ip, r2, r7
 800089a:	ea4c 0c03 	orr.w	ip, ip, r3
 800089e:	fa05 f401 	lsl.w	r4, r5, r1
 80008a2:	fa20 f307 	lsr.w	r3, r0, r7
 80008a6:	40fd      	lsrs	r5, r7
 80008a8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80008ac:	4323      	orrs	r3, r4
 80008ae:	fbb5 f8f9 	udiv	r8, r5, r9
 80008b2:	fa1f fe8c 	uxth.w	lr, ip
 80008b6:	fb09 5518 	mls	r5, r9, r8, r5
 80008ba:	0c1c      	lsrs	r4, r3, #16
 80008bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80008c0:	fb08 f50e 	mul.w	r5, r8, lr
 80008c4:	42a5      	cmp	r5, r4
 80008c6:	fa02 f201 	lsl.w	r2, r2, r1
 80008ca:	fa00 f001 	lsl.w	r0, r0, r1
 80008ce:	d90b      	bls.n	80008e8 <__udivmoddi4+0x1b0>
 80008d0:	eb1c 0404 	adds.w	r4, ip, r4
 80008d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80008d8:	f080 8088 	bcs.w	80009ec <__udivmoddi4+0x2b4>
 80008dc:	42a5      	cmp	r5, r4
 80008de:	f240 8085 	bls.w	80009ec <__udivmoddi4+0x2b4>
 80008e2:	f1a8 0802 	sub.w	r8, r8, #2
 80008e6:	4464      	add	r4, ip
 80008e8:	1b64      	subs	r4, r4, r5
 80008ea:	b29d      	uxth	r5, r3
 80008ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80008f0:	fb09 4413 	mls	r4, r9, r3, r4
 80008f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80008f8:	fb03 fe0e 	mul.w	lr, r3, lr
 80008fc:	45a6      	cmp	lr, r4
 80008fe:	d908      	bls.n	8000912 <__udivmoddi4+0x1da>
 8000900:	eb1c 0404 	adds.w	r4, ip, r4
 8000904:	f103 35ff 	add.w	r5, r3, #4294967295
 8000908:	d26c      	bcs.n	80009e4 <__udivmoddi4+0x2ac>
 800090a:	45a6      	cmp	lr, r4
 800090c:	d96a      	bls.n	80009e4 <__udivmoddi4+0x2ac>
 800090e:	3b02      	subs	r3, #2
 8000910:	4464      	add	r4, ip
 8000912:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000916:	fba3 9502 	umull	r9, r5, r3, r2
 800091a:	eba4 040e 	sub.w	r4, r4, lr
 800091e:	42ac      	cmp	r4, r5
 8000920:	46c8      	mov	r8, r9
 8000922:	46ae      	mov	lr, r5
 8000924:	d356      	bcc.n	80009d4 <__udivmoddi4+0x29c>
 8000926:	d053      	beq.n	80009d0 <__udivmoddi4+0x298>
 8000928:	b156      	cbz	r6, 8000940 <__udivmoddi4+0x208>
 800092a:	ebb0 0208 	subs.w	r2, r0, r8
 800092e:	eb64 040e 	sbc.w	r4, r4, lr
 8000932:	fa04 f707 	lsl.w	r7, r4, r7
 8000936:	40ca      	lsrs	r2, r1
 8000938:	40cc      	lsrs	r4, r1
 800093a:	4317      	orrs	r7, r2
 800093c:	e9c6 7400 	strd	r7, r4, [r6]
 8000940:	4618      	mov	r0, r3
 8000942:	2100      	movs	r1, #0
 8000944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000948:	f1c3 0120 	rsb	r1, r3, #32
 800094c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000950:	fa20 f201 	lsr.w	r2, r0, r1
 8000954:	fa25 f101 	lsr.w	r1, r5, r1
 8000958:	409d      	lsls	r5, r3
 800095a:	432a      	orrs	r2, r5
 800095c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000960:	fa1f fe8c 	uxth.w	lr, ip
 8000964:	fbb1 f0f7 	udiv	r0, r1, r7
 8000968:	fb07 1510 	mls	r5, r7, r0, r1
 800096c:	0c11      	lsrs	r1, r2, #16
 800096e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000972:	fb00 f50e 	mul.w	r5, r0, lr
 8000976:	428d      	cmp	r5, r1
 8000978:	fa04 f403 	lsl.w	r4, r4, r3
 800097c:	d908      	bls.n	8000990 <__udivmoddi4+0x258>
 800097e:	eb1c 0101 	adds.w	r1, ip, r1
 8000982:	f100 38ff 	add.w	r8, r0, #4294967295
 8000986:	d22f      	bcs.n	80009e8 <__udivmoddi4+0x2b0>
 8000988:	428d      	cmp	r5, r1
 800098a:	d92d      	bls.n	80009e8 <__udivmoddi4+0x2b0>
 800098c:	3802      	subs	r0, #2
 800098e:	4461      	add	r1, ip
 8000990:	1b49      	subs	r1, r1, r5
 8000992:	b292      	uxth	r2, r2
 8000994:	fbb1 f5f7 	udiv	r5, r1, r7
 8000998:	fb07 1115 	mls	r1, r7, r5, r1
 800099c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80009a0:	fb05 f10e 	mul.w	r1, r5, lr
 80009a4:	4291      	cmp	r1, r2
 80009a6:	d908      	bls.n	80009ba <__udivmoddi4+0x282>
 80009a8:	eb1c 0202 	adds.w	r2, ip, r2
 80009ac:	f105 38ff 	add.w	r8, r5, #4294967295
 80009b0:	d216      	bcs.n	80009e0 <__udivmoddi4+0x2a8>
 80009b2:	4291      	cmp	r1, r2
 80009b4:	d914      	bls.n	80009e0 <__udivmoddi4+0x2a8>
 80009b6:	3d02      	subs	r5, #2
 80009b8:	4462      	add	r2, ip
 80009ba:	1a52      	subs	r2, r2, r1
 80009bc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80009c0:	e738      	b.n	8000834 <__udivmoddi4+0xfc>
 80009c2:	4631      	mov	r1, r6
 80009c4:	4630      	mov	r0, r6
 80009c6:	e708      	b.n	80007da <__udivmoddi4+0xa2>
 80009c8:	4639      	mov	r1, r7
 80009ca:	e6e6      	b.n	800079a <__udivmoddi4+0x62>
 80009cc:	4610      	mov	r0, r2
 80009ce:	e6fb      	b.n	80007c8 <__udivmoddi4+0x90>
 80009d0:	4548      	cmp	r0, r9
 80009d2:	d2a9      	bcs.n	8000928 <__udivmoddi4+0x1f0>
 80009d4:	ebb9 0802 	subs.w	r8, r9, r2
 80009d8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80009dc:	3b01      	subs	r3, #1
 80009de:	e7a3      	b.n	8000928 <__udivmoddi4+0x1f0>
 80009e0:	4645      	mov	r5, r8
 80009e2:	e7ea      	b.n	80009ba <__udivmoddi4+0x282>
 80009e4:	462b      	mov	r3, r5
 80009e6:	e794      	b.n	8000912 <__udivmoddi4+0x1da>
 80009e8:	4640      	mov	r0, r8
 80009ea:	e7d1      	b.n	8000990 <__udivmoddi4+0x258>
 80009ec:	46d0      	mov	r8, sl
 80009ee:	e77b      	b.n	80008e8 <__udivmoddi4+0x1b0>
 80009f0:	3d02      	subs	r5, #2
 80009f2:	4462      	add	r2, ip
 80009f4:	e732      	b.n	800085c <__udivmoddi4+0x124>
 80009f6:	4608      	mov	r0, r1
 80009f8:	e70a      	b.n	8000810 <__udivmoddi4+0xd8>
 80009fa:	4464      	add	r4, ip
 80009fc:	3802      	subs	r0, #2
 80009fe:	e742      	b.n	8000886 <__udivmoddi4+0x14e>

08000a00 <__aeabi_idiv0>:
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a0a:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <MX_DMA_Init+0x4c>)
 8000a0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a10:	4a0f      	ldr	r2, [pc, #60]	; (8000a50 <MX_DMA_Init+0x4c>)
 8000a12:	f043 0301 	orr.w	r3, r3, #1
 8000a16:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000a1a:	4b0d      	ldr	r3, [pc, #52]	; (8000a50 <MX_DMA_Init+0x4c>)
 8000a1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a20:	f003 0301 	and.w	r3, r3, #1
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2105      	movs	r1, #5
 8000a2c:	200b      	movs	r0, #11
 8000a2e:	f001 faf3 	bl	8002018 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a32:	200b      	movs	r0, #11
 8000a34:	f001 fb0a 	bl	800204c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2105      	movs	r1, #5
 8000a3c:	200c      	movs	r0, #12
 8000a3e:	f001 faeb 	bl	8002018 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000a42:	200c      	movs	r0, #12
 8000a44:	f001 fb02 	bl	800204c <HAL_NVIC_EnableIRQ>

}
 8000a48:	bf00      	nop
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	58024400 	.word	0x58024400

08000a54 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a58:	4b1e      	ldr	r3, [pc, #120]	; (8000ad4 <MX_ETH_Init+0x80>)
 8000a5a:	4a1f      	ldr	r2, [pc, #124]	; (8000ad8 <MX_ETH_Init+0x84>)
 8000a5c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000a5e:	4b1f      	ldr	r3, [pc, #124]	; (8000adc <MX_ETH_Init+0x88>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000a64:	4b1d      	ldr	r3, [pc, #116]	; (8000adc <MX_ETH_Init+0x88>)
 8000a66:	2280      	movs	r2, #128	; 0x80
 8000a68:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000a6a:	4b1c      	ldr	r3, [pc, #112]	; (8000adc <MX_ETH_Init+0x88>)
 8000a6c:	22e1      	movs	r2, #225	; 0xe1
 8000a6e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000a70:	4b1a      	ldr	r3, [pc, #104]	; (8000adc <MX_ETH_Init+0x88>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000a76:	4b19      	ldr	r3, [pc, #100]	; (8000adc <MX_ETH_Init+0x88>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a7c:	4b17      	ldr	r3, [pc, #92]	; (8000adc <MX_ETH_Init+0x88>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a82:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <MX_ETH_Init+0x80>)
 8000a84:	4a15      	ldr	r2, [pc, #84]	; (8000adc <MX_ETH_Init+0x88>)
 8000a86:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <MX_ETH_Init+0x80>)
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a8e:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <MX_ETH_Init+0x80>)
 8000a90:	4a13      	ldr	r2, [pc, #76]	; (8000ae0 <MX_ETH_Init+0x8c>)
 8000a92:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a94:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <MX_ETH_Init+0x80>)
 8000a96:	4a13      	ldr	r2, [pc, #76]	; (8000ae4 <MX_ETH_Init+0x90>)
 8000a98:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <MX_ETH_Init+0x80>)
 8000a9c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000aa0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000aa2:	480c      	ldr	r0, [pc, #48]	; (8000ad4 <MX_ETH_Init+0x80>)
 8000aa4:	f004 f91c 	bl	8004ce0 <HAL_ETH_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000aae:	f000 fcb5 	bl	800141c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000ab2:	2238      	movs	r2, #56	; 0x38
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	480c      	ldr	r0, [pc, #48]	; (8000ae8 <MX_ETH_Init+0x94>)
 8000ab8:	f019 fae3 	bl	801a082 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000abc:	4b0a      	ldr	r3, [pc, #40]	; (8000ae8 <MX_ETH_Init+0x94>)
 8000abe:	2221      	movs	r2, #33	; 0x21
 8000ac0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000ac2:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <MX_ETH_Init+0x94>)
 8000ac4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ac8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000aca:	4b07      	ldr	r3, [pc, #28]	; (8000ae8 <MX_ETH_Init+0x94>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	240002f0 	.word	0x240002f0
 8000ad8:	40028000 	.word	0x40028000
 8000adc:	240003a0 	.word	0x240003a0
 8000ae0:	2400023c 	.word	0x2400023c
 8000ae4:	240001dc 	.word	0x240001dc
 8000ae8:	240002b8 	.word	0x240002b8

08000aec <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08e      	sub	sp, #56	; 0x38
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a59      	ldr	r2, [pc, #356]	; (8000c70 <HAL_ETH_MspInit+0x184>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	f040 80ab 	bne.w	8000c66 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000b10:	4b58      	ldr	r3, [pc, #352]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b12:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b16:	4a57      	ldr	r2, [pc, #348]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b1c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b20:	4b54      	ldr	r3, [pc, #336]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b22:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b2a:	623b      	str	r3, [r7, #32]
 8000b2c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000b2e:	4b51      	ldr	r3, [pc, #324]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b34:	4a4f      	ldr	r2, [pc, #316]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b3a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b3e:	4b4d      	ldr	r3, [pc, #308]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b48:	61fb      	str	r3, [r7, #28]
 8000b4a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000b4c:	4b49      	ldr	r3, [pc, #292]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b52:	4a48      	ldr	r2, [pc, #288]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b58:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b5c:	4b45      	ldr	r3, [pc, #276]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b66:	61bb      	str	r3, [r7, #24]
 8000b68:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6a:	4b42      	ldr	r3, [pc, #264]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b70:	4a40      	ldr	r2, [pc, #256]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b72:	f043 0304 	orr.w	r3, r3, #4
 8000b76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b7a:	4b3e      	ldr	r3, [pc, #248]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b80:	f003 0304 	and.w	r3, r3, #4
 8000b84:	617b      	str	r3, [r7, #20]
 8000b86:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b88:	4b3a      	ldr	r3, [pc, #232]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8e:	4a39      	ldr	r2, [pc, #228]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b98:	4b36      	ldr	r3, [pc, #216]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba6:	4b33      	ldr	r3, [pc, #204]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bac:	4a31      	ldr	r2, [pc, #196]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000bae:	f043 0302 	orr.w	r3, r3, #2
 8000bb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bb6:	4b2f      	ldr	r3, [pc, #188]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bbc:	f003 0302 	and.w	r3, r3, #2
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bc4:	4b2b      	ldr	r3, [pc, #172]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000bc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bca:	4a2a      	ldr	r2, [pc, #168]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000bcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bd4:	4b27      	ldr	r3, [pc, #156]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bde:	60bb      	str	r3, [r7, #8]
 8000be0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000be2:	2332      	movs	r3, #50	; 0x32
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be6:	2302      	movs	r3, #2
 8000be8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bf2:	230b      	movs	r3, #11
 8000bf4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	481e      	ldr	r0, [pc, #120]	; (8000c78 <HAL_ETH_MspInit+0x18c>)
 8000bfe:	f004 fc93 	bl	8005528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c02:	2386      	movs	r3, #134	; 0x86
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c06:	2302      	movs	r3, #2
 8000c08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c12:	230b      	movs	r3, #11
 8000c14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4817      	ldr	r0, [pc, #92]	; (8000c7c <HAL_ETH_MspInit+0x190>)
 8000c1e:	f004 fc83 	bl	8005528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c30:	2300      	movs	r3, #0
 8000c32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c34:	230b      	movs	r3, #11
 8000c36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4810      	ldr	r0, [pc, #64]	; (8000c80 <HAL_ETH_MspInit+0x194>)
 8000c40:	f004 fc72 	bl	8005528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c44:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c52:	2300      	movs	r3, #0
 8000c54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c56:	230b      	movs	r3, #11
 8000c58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4808      	ldr	r0, [pc, #32]	; (8000c84 <HAL_ETH_MspInit+0x198>)
 8000c62:	f004 fc61 	bl	8005528 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000c66:	bf00      	nop
 8000c68:	3738      	adds	r7, #56	; 0x38
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40028000 	.word	0x40028000
 8000c74:	58024400 	.word	0x58024400
 8000c78:	58020800 	.word	0x58020800
 8000c7c:	58020000 	.word	0x58020000
 8000c80:	58020400 	.word	0x58020400
 8000c84:	58021800 	.word	0x58021800

08000c88 <DelayFunction>:
//	GNSS_Handle.uniqueID[2], GNSS_Handle.uniqueID[3],
//	GNSS_Handle.uniqueID[4], GNSS_Handle.uniqueID[5]);
//}

void DelayFunction(uint16_t ms)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	80fb      	strh	r3, [r7, #6]
	osDelay(ms);
 8000c92:	88fb      	ldrh	r3, [r7, #6]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f014 fdff 	bl	8015898 <osDelay>
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
	...

08000ca4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]

	inter_flag = 0;
 8000cac:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <HAL_UART_RxCpltCallback+0x2c>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
	++INTERRUPTS;
 8000cb2:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <HAL_UART_RxCpltCallback+0x30>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	4a06      	ldr	r2, [pc, #24]	; (8000cd4 <HAL_UART_RxCpltCallback+0x30>)
 8000cba:	6013      	str	r3, [r2, #0]
	//HAL_UART_Receive_DMA(&huart2, GNSS_Handle.uartWorkingBuffer, 10);
	//xTaskResumeFromISR(ReceiveGNSSDataHandle);
	xSemaphoreGiveFromISR(GNNS_UART_INTERRUPTHandle, &GiveSemaphoreResult);
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <HAL_UART_RxCpltCallback+0x34>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4906      	ldr	r1, [pc, #24]	; (8000cdc <HAL_UART_RxCpltCallback+0x38>)
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f015 fa8f 	bl	80161e6 <xQueueGiveFromISR>
}
 8000cc8:	bf00      	nop
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	24000400 	.word	0x24000400
 8000cd4:	24000404 	.word	0x24000404
 8000cd8:	240084d4 	.word	0x240084d4
 8000cdc:	24000408 	.word	0x24000408

08000ce0 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	460b      	mov	r3, r1
 8000cea:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == USART1)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a0a      	ldr	r2, [pc, #40]	; (8000d1c <HAL_UARTEx_RxEventCallback+0x3c>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d10d      	bne.n	8000d12 <HAL_UARTEx_RxEventCallback+0x32>
	{
		inter_flag = Size;
 8000cf6:	887b      	ldrh	r3, [r7, #2]
 8000cf8:	4a09      	ldr	r2, [pc, #36]	; (8000d20 <HAL_UARTEx_RxEventCallback+0x40>)
 8000cfa:	6013      	str	r3, [r2, #0]
		++INTERRUPTS;
 8000cfc:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <HAL_UARTEx_RxEventCallback+0x44>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	3301      	adds	r3, #1
 8000d02:	4a08      	ldr	r2, [pc, #32]	; (8000d24 <HAL_UARTEx_RxEventCallback+0x44>)
 8000d04:	6013      	str	r3, [r2, #0]
		xSemaphoreGiveFromISR(GNNS_UART_INTERRUPTHandle, &GiveSemaphoreResult);
 8000d06:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <HAL_UARTEx_RxEventCallback+0x48>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4908      	ldr	r1, [pc, #32]	; (8000d2c <HAL_UARTEx_RxEventCallback+0x4c>)
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f015 fa6a 	bl	80161e6 <xQueueGiveFromISR>
	}
}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40011000 	.word	0x40011000
 8000d20:	24000400 	.word	0x24000400
 8000d24:	24000404 	.word	0x24000404
 8000d28:	240084d4 	.word	0x240084d4
 8000d2c:	24000408 	.word	0x24000408

08000d30 <Receive_IT>:

void Receive_IT()
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
	uart_result = HAL_UART_Receive_IT(GNSS_Handle.huart, GNSS_Handle.uartWorkingBuffer, 421);
 8000d34:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <Receive_IT+0x20>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f240 12a5 	movw	r2, #421	; 0x1a5
 8000d3c:	4905      	ldr	r1, [pc, #20]	; (8000d54 <Receive_IT+0x24>)
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f008 ff3a 	bl	8009bb8 <HAL_UART_Receive_IT>
 8000d44:	4603      	mov	r3, r0
 8000d46:	461a      	mov	r2, r3
 8000d48:	4b03      	ldr	r3, [pc, #12]	; (8000d58 <Receive_IT+0x28>)
 8000d4a:	701a      	strb	r2, [r3, #0]
	if(uart_result != 0) LOG("Receive_IT Status: %d", uart_result);
}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	2400e1f0 	.word	0x2400e1f0
 8000d54:	2400e1fc 	.word	0x2400e1fc
 8000d58:	2400040c 	.word	0x2400040c

08000d5c <Receive_IT_IDLE>:

void Receive_IT_IDLE()
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
	uart_result = HAL_UARTEx_ReceiveToIdle_IT(GNSS_Handle.huart, GNSS_Handle.uartWorkingBuffer, sizeof(GNSS_Handle.uartWorkingBuffer));
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <Receive_IT_IDLE+0x20>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d68:	4905      	ldr	r1, [pc, #20]	; (8000d80 <Receive_IT_IDLE+0x24>)
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f00b fd27 	bl	800c7be <HAL_UARTEx_ReceiveToIdle_IT>
 8000d70:	4603      	mov	r3, r0
 8000d72:	461a      	mov	r2, r3
 8000d74:	4b03      	ldr	r3, [pc, #12]	; (8000d84 <Receive_IT_IDLE+0x28>)
 8000d76:	701a      	strb	r2, [r3, #0]
	if(uart_result != 0) LOG("Receive_IT_IDLE Status: %d", uart_result);
}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	2400e1f0 	.word	0x2400e1f0
 8000d80:	2400e1fc 	.word	0x2400e1fc
 8000d84:	2400040c 	.word	0x2400040c

08000d88 <Receive_DMA>:
	uart_result = HAL_UARTEx_ReceiveToIdle_IT(GNSS_Handle.huart, GNSS_Handle.uartWorkingBuffer, 100);
	if(uart_result != 0) LOG("Receive_IT_IDLE Status: %d", uart_result);
}

void Receive_DMA()
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
	uart_result = HAL_UART_Receive_DMA(GNSS_Handle.huart, GNSS_Handle.uartWorkingBuffer, 10);
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <Receive_DMA+0x20>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	220a      	movs	r2, #10
 8000d92:	4906      	ldr	r1, [pc, #24]	; (8000dac <Receive_DMA+0x24>)
 8000d94:	4618      	mov	r0, r3
 8000d96:	f008 ffdb 	bl	8009d50 <HAL_UART_Receive_DMA>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <Receive_DMA+0x28>)
 8000da0:	701a      	strb	r2, [r3, #0]
	if(uart_result != 0) LOG("Receive_DMA Status: %d", uart_result);
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	2400e1f0 	.word	0x2400e1f0
 8000dac:	2400e1fc 	.word	0x2400e1fc
 8000db0:	2400040c 	.word	0x2400040c

08000db4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of GNNS_UART_INTERRUPT */
  GNNS_UART_INTERRUPTHandle = osSemaphoreNew(1, 1, &GNNS_UART_INTERRUPT_attributes);
 8000db8:	4a10      	ldr	r2, [pc, #64]	; (8000dfc <MX_FREERTOS_Init+0x48>)
 8000dba:	2101      	movs	r1, #1
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	f014 fd86 	bl	80158ce <osSemaphoreNew>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	4a0e      	ldr	r2, [pc, #56]	; (8000e00 <MX_FREERTOS_Init+0x4c>)
 8000dc6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000dc8:	4a0e      	ldr	r2, [pc, #56]	; (8000e04 <MX_FREERTOS_Init+0x50>)
 8000dca:	2100      	movs	r1, #0
 8000dcc:	480e      	ldr	r0, [pc, #56]	; (8000e08 <MX_FREERTOS_Init+0x54>)
 8000dce:	f014 fcd1 	bl	8015774 <osThreadNew>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	4a0d      	ldr	r2, [pc, #52]	; (8000e0c <MX_FREERTOS_Init+0x58>)
 8000dd6:	6013      	str	r3, [r2, #0]

  /* creation of AccMeassure */
  AccMeassureHandle = osThreadNew(StartAccMeassureTask, NULL, &AccMeassure_attributes);
 8000dd8:	4a0d      	ldr	r2, [pc, #52]	; (8000e10 <MX_FREERTOS_Init+0x5c>)
 8000dda:	2100      	movs	r1, #0
 8000ddc:	480d      	ldr	r0, [pc, #52]	; (8000e14 <MX_FREERTOS_Init+0x60>)
 8000dde:	f014 fcc9 	bl	8015774 <osThreadNew>
 8000de2:	4603      	mov	r3, r0
 8000de4:	4a0c      	ldr	r2, [pc, #48]	; (8000e18 <MX_FREERTOS_Init+0x64>)
 8000de6:	6013      	str	r3, [r2, #0]

  /* creation of ReceiveGNSSData */
  ReceiveGNSSDataHandle = osThreadNew(StartReceiveGNSSDataTask, NULL, &ReceiveGNSSData_attributes);
 8000de8:	4a0c      	ldr	r2, [pc, #48]	; (8000e1c <MX_FREERTOS_Init+0x68>)
 8000dea:	2100      	movs	r1, #0
 8000dec:	480c      	ldr	r0, [pc, #48]	; (8000e20 <MX_FREERTOS_Init+0x6c>)
 8000dee:	f014 fcc1 	bl	8015774 <osThreadNew>
 8000df2:	4603      	mov	r3, r0
 8000df4:	4a0b      	ldr	r2, [pc, #44]	; (8000e24 <MX_FREERTOS_Init+0x70>)
 8000df6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	0801c008 	.word	0x0801c008
 8000e00:	240084d4 	.word	0x240084d4
 8000e04:	0801bf9c 	.word	0x0801bf9c
 8000e08:	08000e29 	.word	0x08000e29
 8000e0c:	24000410 	.word	0x24000410
 8000e10:	0801bfc0 	.word	0x0801bfc0
 8000e14:	08000e6d 	.word	0x08000e6d
 8000e18:	24000414 	.word	0x24000414
 8000e1c:	0801bfe4 	.word	0x0801bfe4
 8000e20:	08000f59 	.word	0x08000f59
 8000e24:	24004474 	.word	0x24004474

08000e28 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08c      	sub	sp, #48	; 0x30
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	Vec3 Pos, Acc, Vel;
	int flag = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Infinite loop */
  for(;;)
  {
	if(HAL_GPIO_ReadPin(UserButton_GPIO_Port, UserButton_Pin))
 8000e34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e38:	480b      	ldr	r0, [pc, #44]	; (8000e68 <StartDefaultTask+0x40>)
 8000e3a:	f004 fd25 	bl	8005888 <HAL_GPIO_ReadPin>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d00b      	beq.n	8000e5c <StartDefaultTask+0x34>
	{
		LOG("PUSHED BUTTON");
		//GNSS_GetUniqID(&GNSS_Handle);
		if(flag == 0)
 8000e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d104      	bne.n	8000e54 <StartDefaultTask+0x2c>
		{
			LOG("Receive DMA");
			Receive_DMA();
 8000e4a:	f7ff ff9d 	bl	8000d88 <Receive_DMA>
			flag = 1;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e52:	e003      	b.n	8000e5c <StartDefaultTask+0x34>
		}
		else
		{
			LOG("Receive IT");
			Receive_IT();
 8000e54:	f7ff ff6c 	bl	8000d30 <Receive_IT>
			flag = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
//	Vel = GetVelocity();
	//LOG("Vel: %f, \t%f, \t%f\tPos: %f, \t%f, \t%f", Vel.x, Vel.y, Vel.z, Pos.x, Pos.y, Pos.z);
	//LOG("INTERRUPTS: %d, inter_flag: %d, UART state: %d", INTERRUPTS, inter_flag, GNSS_Handle.huart->RxState);
	//GNSS_GetPVTData(&GNSS_Handle);
	//GNSS_GetPVTData(&GNSS_Handle);
    osDelay(1000);
 8000e5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e60:	f014 fd1a 	bl	8015898 <osDelay>
	if(HAL_GPIO_ReadPin(UserButton_GPIO_Port, UserButton_Pin))
 8000e64:	e7e6      	b.n	8000e34 <StartDefaultTask+0xc>
 8000e66:	bf00      	nop
 8000e68:	58020800 	.word	0x58020800

08000e6c <StartAccMeassureTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAccMeassureTask */
void StartAccMeassureTask(void *argument)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAccMeassureTask */
  /* Infinite loop */
	Bmx160_init();
 8000e74:	f017 fd2a 	bl	80188cc <Bmx160_init>
	LOG("After INIT");
	osDelay(3000);
 8000e78:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000e7c:	f014 fd0c 	bl	8015898 <osDelay>
	Bmx160_getAllData(&Omagn, &Ogyro, &Oaccel);
 8000e80:	4a31      	ldr	r2, [pc, #196]	; (8000f48 <StartAccMeassureTask+0xdc>)
 8000e82:	4932      	ldr	r1, [pc, #200]	; (8000f4c <StartAccMeassureTask+0xe0>)
 8000e84:	4832      	ldr	r0, [pc, #200]	; (8000f50 <StartAccMeassureTask+0xe4>)
 8000e86:	f017 fe05 	bl	8018a94 <Bmx160_getAllData>
	SensorData.Acc.x = Oaccel.x;
 8000e8a:	4b2f      	ldr	r3, [pc, #188]	; (8000f48 <StartAccMeassureTask+0xdc>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a31      	ldr	r2, [pc, #196]	; (8000f54 <StartAccMeassureTask+0xe8>)
 8000e90:	60d3      	str	r3, [r2, #12]
	SensorData.Acc.y = Oaccel.y;
 8000e92:	4b2d      	ldr	r3, [pc, #180]	; (8000f48 <StartAccMeassureTask+0xdc>)
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	4a2f      	ldr	r2, [pc, #188]	; (8000f54 <StartAccMeassureTask+0xe8>)
 8000e98:	6113      	str	r3, [r2, #16]
	SensorData.Acc.z = Oaccel.z;
 8000e9a:	4b2b      	ldr	r3, [pc, #172]	; (8000f48 <StartAccMeassureTask+0xdc>)
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	4a2d      	ldr	r2, [pc, #180]	; (8000f54 <StartAccMeassureTask+0xe8>)
 8000ea0:	6153      	str	r3, [r2, #20]
	SensorData.Gyro.x = Ogyro.x;
 8000ea2:	4b2a      	ldr	r3, [pc, #168]	; (8000f4c <StartAccMeassureTask+0xe0>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a2b      	ldr	r2, [pc, #172]	; (8000f54 <StartAccMeassureTask+0xe8>)
 8000ea8:	6193      	str	r3, [r2, #24]
	SensorData.Gyro.y = Ogyro.y;
 8000eaa:	4b28      	ldr	r3, [pc, #160]	; (8000f4c <StartAccMeassureTask+0xe0>)
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	4a29      	ldr	r2, [pc, #164]	; (8000f54 <StartAccMeassureTask+0xe8>)
 8000eb0:	61d3      	str	r3, [r2, #28]
	SensorData.Gyro.z = Ogyro.z;
 8000eb2:	4b26      	ldr	r3, [pc, #152]	; (8000f4c <StartAccMeassureTask+0xe0>)
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	4a27      	ldr	r2, [pc, #156]	; (8000f54 <StartAccMeassureTask+0xe8>)
 8000eb8:	6213      	str	r3, [r2, #32]
	SensorData.Mag.x = Omagn.x;
 8000eba:	4b25      	ldr	r3, [pc, #148]	; (8000f50 <StartAccMeassureTask+0xe4>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a25      	ldr	r2, [pc, #148]	; (8000f54 <StartAccMeassureTask+0xe8>)
 8000ec0:	6013      	str	r3, [r2, #0]
	SensorData.Mag.y = Omagn.y;
 8000ec2:	4b23      	ldr	r3, [pc, #140]	; (8000f50 <StartAccMeassureTask+0xe4>)
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	4a23      	ldr	r2, [pc, #140]	; (8000f54 <StartAccMeassureTask+0xe8>)
 8000ec8:	6053      	str	r3, [r2, #4]
	SensorData.Mag.z = Omagn.z;
 8000eca:	4b21      	ldr	r3, [pc, #132]	; (8000f50 <StartAccMeassureTask+0xe4>)
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	4a21      	ldr	r2, [pc, #132]	; (8000f54 <StartAccMeassureTask+0xe8>)
 8000ed0:	6093      	str	r3, [r2, #8]
	SensorData.SensorTime = Omagn.sensortime;
 8000ed2:	4b1f      	ldr	r3, [pc, #124]	; (8000f50 <StartAccMeassureTask+0xe4>)
 8000ed4:	68db      	ldr	r3, [r3, #12]
 8000ed6:	4a1f      	ldr	r2, [pc, #124]	; (8000f54 <StartAccMeassureTask+0xe8>)
 8000ed8:	6253      	str	r3, [r2, #36]	; 0x24
	InitAlgorithms(&SensorData);
 8000eda:	481e      	ldr	r0, [pc, #120]	; (8000f54 <StartAccMeassureTask+0xe8>)
 8000edc:	f00c f8b2 	bl	800d044 <InitAlgorithms>
//			osDelay(5);
//		}
//		printf("%f %f %f\n\r", (sum_x/((float)(steps))), (sum_y/((float)(steps))), (sum_z/((float)(steps))));
//		sum_x = 0.0f; sum_y = 0.0f; sum_z = 0.0f;
//	}
	Bmx160_getAllData(&Omagn, &Ogyro, &Oaccel);
 8000ee0:	4a19      	ldr	r2, [pc, #100]	; (8000f48 <StartAccMeassureTask+0xdc>)
 8000ee2:	491a      	ldr	r1, [pc, #104]	; (8000f4c <StartAccMeassureTask+0xe0>)
 8000ee4:	481a      	ldr	r0, [pc, #104]	; (8000f50 <StartAccMeassureTask+0xe4>)
 8000ee6:	f017 fdd5 	bl	8018a94 <Bmx160_getAllData>
	SensorData.Acc.x = Oaccel.x;
 8000eea:	4b17      	ldr	r3, [pc, #92]	; (8000f48 <StartAccMeassureTask+0xdc>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a19      	ldr	r2, [pc, #100]	; (8000f54 <StartAccMeassureTask+0xe8>)
 8000ef0:	60d3      	str	r3, [r2, #12]
	SensorData.Acc.y = Oaccel.y;
 8000ef2:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <StartAccMeassureTask+0xdc>)
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	4a17      	ldr	r2, [pc, #92]	; (8000f54 <StartAccMeassureTask+0xe8>)
 8000ef8:	6113      	str	r3, [r2, #16]
	SensorData.Acc.z = Oaccel.z;
 8000efa:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <StartAccMeassureTask+0xdc>)
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	4a15      	ldr	r2, [pc, #84]	; (8000f54 <StartAccMeassureTask+0xe8>)
 8000f00:	6153      	str	r3, [r2, #20]
	SensorData.Gyro.x = Ogyro.x;
 8000f02:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <StartAccMeassureTask+0xe0>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a13      	ldr	r2, [pc, #76]	; (8000f54 <StartAccMeassureTask+0xe8>)
 8000f08:	6193      	str	r3, [r2, #24]
	SensorData.Gyro.y = Ogyro.y;
 8000f0a:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <StartAccMeassureTask+0xe0>)
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	4a11      	ldr	r2, [pc, #68]	; (8000f54 <StartAccMeassureTask+0xe8>)
 8000f10:	61d3      	str	r3, [r2, #28]
	SensorData.Gyro.z = Ogyro.z;
 8000f12:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <StartAccMeassureTask+0xe0>)
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	4a0f      	ldr	r2, [pc, #60]	; (8000f54 <StartAccMeassureTask+0xe8>)
 8000f18:	6213      	str	r3, [r2, #32]
	SensorData.Mag.x = Omagn.x;
 8000f1a:	4b0d      	ldr	r3, [pc, #52]	; (8000f50 <StartAccMeassureTask+0xe4>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a0d      	ldr	r2, [pc, #52]	; (8000f54 <StartAccMeassureTask+0xe8>)
 8000f20:	6013      	str	r3, [r2, #0]
	SensorData.Mag.y = Omagn.y;
 8000f22:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <StartAccMeassureTask+0xe4>)
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	4a0b      	ldr	r2, [pc, #44]	; (8000f54 <StartAccMeassureTask+0xe8>)
 8000f28:	6053      	str	r3, [r2, #4]
	SensorData.Mag.z = Omagn.z;
 8000f2a:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <StartAccMeassureTask+0xe4>)
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	4a09      	ldr	r2, [pc, #36]	; (8000f54 <StartAccMeassureTask+0xe8>)
 8000f30:	6093      	str	r3, [r2, #8]
	SensorData.SensorTime = Omagn.sensortime;
 8000f32:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <StartAccMeassureTask+0xe4>)
 8000f34:	68db      	ldr	r3, [r3, #12]
 8000f36:	4a07      	ldr	r2, [pc, #28]	; (8000f54 <StartAccMeassureTask+0xe8>)
 8000f38:	6253      	str	r3, [r2, #36]	; 0x24
	MadgwickUpdate(&SensorData);
 8000f3a:	4806      	ldr	r0, [pc, #24]	; (8000f54 <StartAccMeassureTask+0xe8>)
 8000f3c:	f00c f916 	bl	800d16c <MadgwickUpdate>
//	//LOG("Raw:0,0,0,0,0,0,%d,%d,%d\n\r", mx, my, mz);
//	LOG("Raw:%f,%f,%f,%f,%f,%f,%f,%f,%f\n\r",
//			SensorData.Acc.x, SensorData.Acc.y, SensorData.Acc.z,
//			SensorData.Gyro.x, SensorData.Gyro.y, SensorData.Gyro.z,
//			SensorData.Mag.x, SensorData.Mag.y, SensorData.Mag.z);
	osDelay(1);
 8000f40:	2001      	movs	r0, #1
 8000f42:	f014 fca9 	bl	8015898 <osDelay>
	Bmx160_getAllData(&Omagn, &Ogyro, &Oaccel);
 8000f46:	e7cb      	b.n	8000ee0 <StartAccMeassureTask+0x74>
 8000f48:	240003b8 	.word	0x240003b8
 8000f4c:	240003c8 	.word	0x240003c8
 8000f50:	240003a8 	.word	0x240003a8
 8000f54:	240003d8 	.word	0x240003d8

08000f58 <StartReceiveGNSSDataTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReceiveGNSSDataTask */
void StartReceiveGNSSDataTask(void *argument)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReceiveGNSSDataTask */
  /* Infinite loop */
	osDelay(15000);
 8000f60:	f643 2098 	movw	r0, #15000	; 0x3a98
 8000f64:	f014 fc98 	bl	8015898 <osDelay>
	LOG("GNSS INIT");
	GNSS_Init(&GNSS_Handle, &huart1, DelayFunction);
 8000f68:	4a13      	ldr	r2, [pc, #76]	; (8000fb8 <StartReceiveGNSSDataTask+0x60>)
 8000f6a:	4914      	ldr	r1, [pc, #80]	; (8000fbc <StartReceiveGNSSDataTask+0x64>)
 8000f6c:	4814      	ldr	r0, [pc, #80]	; (8000fc0 <StartReceiveGNSSDataTask+0x68>)
 8000f6e:	f017 ff6f 	bl	8018e50 <GNSS_Init>
	osDelay(100);
 8000f72:	2064      	movs	r0, #100	; 0x64
 8000f74:	f014 fc90 	bl	8015898 <osDelay>
	LOG("GNSS LOAD CONFIG");
	//GNSS_LoadConfig(&GNSS_Handle);
	LOG("GNSS CONFIG LOADED!!!");
	xSemaphoreTake(GNNS_UART_INTERRUPTHandle, portMAX_DELAY);
 8000f78:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <StartReceiveGNSSDataTask+0x6c>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f80:	4618      	mov	r0, r3
 8000f82:	f015 fa91 	bl	80164a8 <xQueueSemaphoreTake>
  for(;;)
  {
	HAL_UART_Transmit_DMA(GNSS_Handle.huart, getPVTData,
 8000f86:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <StartReceiveGNSSDataTask+0x68>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2208      	movs	r2, #8
 8000f8c:	490e      	ldr	r1, [pc, #56]	; (8000fc8 <StartReceiveGNSSDataTask+0x70>)
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f008 fe5e 	bl	8009c50 <HAL_UART_Transmit_DMA>
			sizeof(getPVTData) / sizeof(uint8_t));
    Receive_IT_IDLE();
 8000f94:	f7ff fee2 	bl	8000d5c <Receive_IT_IDLE>
	//AskPvtReceive_IT_IDLE();
	LOG("Waiting for semaphore...");
	xSemaphoreTake(GNNS_UART_INTERRUPTHandle, portTICK_PERIOD_MS*3000);
 8000f98:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <StartReceiveGNSSDataTask+0x6c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f015 fa81 	bl	80164a8 <xQueueSemaphoreTake>
	LOG("Got into loop, no.%d", INTERRUPTS);
	if(inter_flag == 0)
 8000fa6:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <StartReceiveGNSSDataTask+0x74>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
//	for(uint16_t size = 0; size < sizeofTable; ++size)
//		printf("%x ", GNSS_Handle.uartWorkingBuffer[size]);
//	printf("\n\n\r");
    //printf("%s \n\r", GNSS_Handle.uartWorkingBuffer);
	//GNSS_ParsePVTData(&GNSS_Handle);
	GNSS_ParsePVTDataPTR(&GNSS_Handle);
 8000faa:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <StartReceiveGNSSDataTask+0x68>)
 8000fac:	f017 ffa0 	bl	8018ef0 <GNSS_ParsePVTDataPTR>
		LOG("Height above ellipsoid: %d \r\n", GNSS_Handle.height);
		LOG("Height above mean sea level: %d \r\n", GNSS_Handle.hMSL);
		LOG("Ground Speed (2-D): %d \r\n", GNSS_Handle.gSpeed);
		//LOG("VelN: %d,\t VelE: %d,\t VelD: %d", GNSS_Handle.velN, GNSS_Handle.velE, GNSS_Handle.velD);
		LOG("");
	OnGNSSData(&GNSS_Handle);
 8000fb0:	4803      	ldr	r0, [pc, #12]	; (8000fc0 <StartReceiveGNSSDataTask+0x68>)
 8000fb2:	f00c fa43 	bl	800d43c <OnGNSSData>
	HAL_UART_Transmit_DMA(GNSS_Handle.huart, getPVTData,
 8000fb6:	e7e6      	b.n	8000f86 <StartReceiveGNSSDataTask+0x2e>
 8000fb8:	08000c89 	.word	0x08000c89
 8000fbc:	240085cc 	.word	0x240085cc
 8000fc0:	2400e1f0 	.word	0x2400e1f0
 8000fc4:	240084d4 	.word	0x240084d4
 8000fc8:	0801bf94 	.word	0x0801bf94
 8000fcc:	24000400 	.word	0x24000400

08000fd0 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08c      	sub	sp, #48	; 0x30
 8000fd4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd6:	f107 031c 	add.w	r3, r7, #28
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
 8000fe4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe6:	4b57      	ldr	r3, [pc, #348]	; (8001144 <MX_GPIO_Init+0x174>)
 8000fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fec:	4a55      	ldr	r2, [pc, #340]	; (8001144 <MX_GPIO_Init+0x174>)
 8000fee:	f043 0304 	orr.w	r3, r3, #4
 8000ff2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ff6:	4b53      	ldr	r3, [pc, #332]	; (8001144 <MX_GPIO_Init+0x174>)
 8000ff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ffc:	f003 0304 	and.w	r3, r3, #4
 8001000:	61bb      	str	r3, [r7, #24]
 8001002:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001004:	4b4f      	ldr	r3, [pc, #316]	; (8001144 <MX_GPIO_Init+0x174>)
 8001006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800100a:	4a4e      	ldr	r2, [pc, #312]	; (8001144 <MX_GPIO_Init+0x174>)
 800100c:	f043 0320 	orr.w	r3, r3, #32
 8001010:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001014:	4b4b      	ldr	r3, [pc, #300]	; (8001144 <MX_GPIO_Init+0x174>)
 8001016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800101a:	f003 0320 	and.w	r3, r3, #32
 800101e:	617b      	str	r3, [r7, #20]
 8001020:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001022:	4b48      	ldr	r3, [pc, #288]	; (8001144 <MX_GPIO_Init+0x174>)
 8001024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001028:	4a46      	ldr	r2, [pc, #280]	; (8001144 <MX_GPIO_Init+0x174>)
 800102a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800102e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001032:	4b44      	ldr	r3, [pc, #272]	; (8001144 <MX_GPIO_Init+0x174>)
 8001034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800103c:	613b      	str	r3, [r7, #16]
 800103e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001040:	4b40      	ldr	r3, [pc, #256]	; (8001144 <MX_GPIO_Init+0x174>)
 8001042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001046:	4a3f      	ldr	r2, [pc, #252]	; (8001144 <MX_GPIO_Init+0x174>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001050:	4b3c      	ldr	r3, [pc, #240]	; (8001144 <MX_GPIO_Init+0x174>)
 8001052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800105e:	4b39      	ldr	r3, [pc, #228]	; (8001144 <MX_GPIO_Init+0x174>)
 8001060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001064:	4a37      	ldr	r2, [pc, #220]	; (8001144 <MX_GPIO_Init+0x174>)
 8001066:	f043 0302 	orr.w	r3, r3, #2
 800106a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800106e:	4b35      	ldr	r3, [pc, #212]	; (8001144 <MX_GPIO_Init+0x174>)
 8001070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001074:	f003 0302 	and.w	r3, r3, #2
 8001078:	60bb      	str	r3, [r7, #8]
 800107a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800107c:	4b31      	ldr	r3, [pc, #196]	; (8001144 <MX_GPIO_Init+0x174>)
 800107e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001082:	4a30      	ldr	r2, [pc, #192]	; (8001144 <MX_GPIO_Init+0x174>)
 8001084:	f043 0308 	orr.w	r3, r3, #8
 8001088:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800108c:	4b2d      	ldr	r3, [pc, #180]	; (8001144 <MX_GPIO_Init+0x174>)
 800108e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001092:	f003 0308 	and.w	r3, r3, #8
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800109a:	4b2a      	ldr	r3, [pc, #168]	; (8001144 <MX_GPIO_Init+0x174>)
 800109c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a0:	4a28      	ldr	r2, [pc, #160]	; (8001144 <MX_GPIO_Init+0x174>)
 80010a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010aa:	4b26      	ldr	r3, [pc, #152]	; (8001144 <MX_GPIO_Init+0x174>)
 80010ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010b4:	603b      	str	r3, [r7, #0]
 80010b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED3_GPIO_Port, USR_LED3_Pin, GPIO_PIN_RESET);
 80010b8:	2200      	movs	r2, #0
 80010ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010be:	4822      	ldr	r0, [pc, #136]	; (8001148 <MX_GPIO_Init+0x178>)
 80010c0:	f004 fbfa 	bl	80058b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2140      	movs	r1, #64	; 0x40
 80010c8:	4820      	ldr	r0, [pc, #128]	; (800114c <MX_GPIO_Init+0x17c>)
 80010ca:	f004 fbf5 	bl	80058b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UserButton_Pin;
 80010ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d4:	2300      	movs	r3, #0
 80010d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UserButton_GPIO_Port, &GPIO_InitStruct);
 80010dc:	f107 031c 	add.w	r3, r7, #28
 80010e0:	4619      	mov	r1, r3
 80010e2:	481b      	ldr	r0, [pc, #108]	; (8001150 <MX_GPIO_Init+0x180>)
 80010e4:	f004 fa20 	bl	8005528 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED3_Pin;
 80010e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ee:	2301      	movs	r3, #1
 80010f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f6:	2300      	movs	r3, #0
 80010f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USR_LED3_GPIO_Port, &GPIO_InitStruct);
 80010fa:	f107 031c 	add.w	r3, r7, #28
 80010fe:	4619      	mov	r1, r3
 8001100:	4811      	ldr	r0, [pc, #68]	; (8001148 <MX_GPIO_Init+0x178>)
 8001102:	f004 fa11 	bl	8005528 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001106:	2340      	movs	r3, #64	; 0x40
 8001108:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110a:	2301      	movs	r3, #1
 800110c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001116:	f107 031c 	add.w	r3, r7, #28
 800111a:	4619      	mov	r1, r3
 800111c:	480b      	ldr	r0, [pc, #44]	; (800114c <MX_GPIO_Init+0x17c>)
 800111e:	f004 fa03 	bl	8005528 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001122:	2380      	movs	r3, #128	; 0x80
 8001124:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001126:	2300      	movs	r3, #0
 8001128:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800112e:	f107 031c 	add.w	r3, r7, #28
 8001132:	4619      	mov	r1, r3
 8001134:	4805      	ldr	r0, [pc, #20]	; (800114c <MX_GPIO_Init+0x17c>)
 8001136:	f004 f9f7 	bl	8005528 <HAL_GPIO_Init>

}
 800113a:	bf00      	nop
 800113c:	3730      	adds	r7, #48	; 0x30
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	58024400 	.word	0x58024400
 8001148:	58020400 	.word	0x58020400
 800114c:	58021800 	.word	0x58021800
 8001150:	58020800 	.word	0x58020800

08001154 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001158:	4b1c      	ldr	r3, [pc, #112]	; (80011cc <MX_I2C2_Init+0x78>)
 800115a:	4a1d      	ldr	r2, [pc, #116]	; (80011d0 <MX_I2C2_Init+0x7c>)
 800115c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0040163A;
 800115e:	4b1b      	ldr	r3, [pc, #108]	; (80011cc <MX_I2C2_Init+0x78>)
 8001160:	4a1c      	ldr	r2, [pc, #112]	; (80011d4 <MX_I2C2_Init+0x80>)
 8001162:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001164:	4b19      	ldr	r3, [pc, #100]	; (80011cc <MX_I2C2_Init+0x78>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800116a:	4b18      	ldr	r3, [pc, #96]	; (80011cc <MX_I2C2_Init+0x78>)
 800116c:	2201      	movs	r2, #1
 800116e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001170:	4b16      	ldr	r3, [pc, #88]	; (80011cc <MX_I2C2_Init+0x78>)
 8001172:	2200      	movs	r2, #0
 8001174:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001176:	4b15      	ldr	r3, [pc, #84]	; (80011cc <MX_I2C2_Init+0x78>)
 8001178:	2200      	movs	r2, #0
 800117a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800117c:	4b13      	ldr	r3, [pc, #76]	; (80011cc <MX_I2C2_Init+0x78>)
 800117e:	2200      	movs	r2, #0
 8001180:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001182:	4b12      	ldr	r3, [pc, #72]	; (80011cc <MX_I2C2_Init+0x78>)
 8001184:	2200      	movs	r2, #0
 8001186:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001188:	4b10      	ldr	r3, [pc, #64]	; (80011cc <MX_I2C2_Init+0x78>)
 800118a:	2200      	movs	r2, #0
 800118c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800118e:	480f      	ldr	r0, [pc, #60]	; (80011cc <MX_I2C2_Init+0x78>)
 8001190:	f004 fbac 	bl	80058ec <HAL_I2C_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800119a:	f000 f93f 	bl	800141c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800119e:	2100      	movs	r1, #0
 80011a0:	480a      	ldr	r0, [pc, #40]	; (80011cc <MX_I2C2_Init+0x78>)
 80011a2:	f005 f8af 	bl	8006304 <HAL_I2CEx_ConfigAnalogFilter>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80011ac:	f000 f936 	bl	800141c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80011b0:	2100      	movs	r1, #0
 80011b2:	4806      	ldr	r0, [pc, #24]	; (80011cc <MX_I2C2_Init+0x78>)
 80011b4:	f005 f8f1 	bl	800639a <HAL_I2CEx_ConfigDigitalFilter>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80011be:	f000 f92d 	bl	800141c <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C2);
 80011c2:	2002      	movs	r0, #2
 80011c4:	f005 f936 	bl	8006434 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	24008528 	.word	0x24008528
 80011d0:	40005800 	.word	0x40005800
 80011d4:	0040163a 	.word	0x0040163a

080011d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b0ba      	sub	sp, #232	; 0xe8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011f0:	f107 0310 	add.w	r3, r7, #16
 80011f4:	22c0      	movs	r2, #192	; 0xc0
 80011f6:	2100      	movs	r1, #0
 80011f8:	4618      	mov	r0, r3
 80011fa:	f018 ff42 	bl	801a082 <memset>
  if(i2cHandle->Instance==I2C2)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a26      	ldr	r2, [pc, #152]	; (800129c <HAL_I2C_MspInit+0xc4>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d145      	bne.n	8001294 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001208:	f04f 0208 	mov.w	r2, #8
 800120c:	f04f 0300 	mov.w	r3, #0
 8001210:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001214:	2300      	movs	r3, #0
 8001216:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800121a:	f107 0310 	add.w	r3, r7, #16
 800121e:	4618      	mov	r0, r3
 8001220:	f006 fae6 	bl	80077f0 <HAL_RCCEx_PeriphCLKConfig>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800122a:	f000 f8f7 	bl	800141c <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800122e:	4b1c      	ldr	r3, [pc, #112]	; (80012a0 <HAL_I2C_MspInit+0xc8>)
 8001230:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001234:	4a1a      	ldr	r2, [pc, #104]	; (80012a0 <HAL_I2C_MspInit+0xc8>)
 8001236:	f043 0320 	orr.w	r3, r3, #32
 800123a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800123e:	4b18      	ldr	r3, [pc, #96]	; (80012a0 <HAL_I2C_MspInit+0xc8>)
 8001240:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001244:	f003 0320 	and.w	r3, r3, #32
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800124c:	2303      	movs	r3, #3
 800124e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001252:	2312      	movs	r3, #18
 8001254:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125e:	2300      	movs	r3, #0
 8001260:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001264:	2304      	movs	r3, #4
 8001266:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800126a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800126e:	4619      	mov	r1, r3
 8001270:	480c      	ldr	r0, [pc, #48]	; (80012a4 <HAL_I2C_MspInit+0xcc>)
 8001272:	f004 f959 	bl	8005528 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001276:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <HAL_I2C_MspInit+0xc8>)
 8001278:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800127c:	4a08      	ldr	r2, [pc, #32]	; (80012a0 <HAL_I2C_MspInit+0xc8>)
 800127e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001282:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <HAL_I2C_MspInit+0xc8>)
 8001288:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800128c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001290:	60bb      	str	r3, [r7, #8]
 8001292:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001294:	bf00      	nop
 8001296:	37e8      	adds	r7, #232	; 0xe8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40005800 	.word	0x40005800
 80012a0:	58024400 	.word	0x58024400
 80012a4:	58021400 	.word	0x58021400

080012a8 <__io_putchar>:
 */
#include "logger.h"

#ifdef DEBUG
PUTCHAR_PROTOTYPE
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 80012b0:	1d39      	adds	r1, r7, #4
 80012b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012b6:	2201      	movs	r2, #1
 80012b8:	4803      	ldr	r0, [pc, #12]	; (80012c8 <__io_putchar+0x20>)
 80012ba:	f008 fbef 	bl	8009a9c <HAL_UART_Transmit>

  return ch;
 80012be:	687b      	ldr	r3, [r7, #4]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	24008660 	.word	0x24008660

080012cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012d0:	f000 fd4a 	bl	8001d68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012d4:	f000 f816 	bl	8001304 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012d8:	f7ff fe7a 	bl	8000fd0 <MX_GPIO_Init>
  MX_DMA_Init();
 80012dc:	f7ff fb92 	bl	8000a04 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 80012e0:	f000 fc6a 	bl	8001bb8 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 80012e4:	f7ff ff36 	bl	8001154 <MX_I2C2_Init>
  MX_ETH_Init();
 80012e8:	f7ff fbb4 	bl	8000a54 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80012ec:	f000 faf2 	bl	80018d4 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 80012f0:	f000 faa4 	bl	800183c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80012f4:	f014 f9f4 	bl	80156e0 <osKernelInitialize>
  MX_FREERTOS_Init();
 80012f8:	f7ff fd5c 	bl	8000db4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80012fc:	f014 fa14 	bl	8015728 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001300:	e7fe      	b.n	8001300 <main+0x34>
	...

08001304 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b09c      	sub	sp, #112	; 0x70
 8001308:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800130a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800130e:	224c      	movs	r2, #76	; 0x4c
 8001310:	2100      	movs	r1, #0
 8001312:	4618      	mov	r0, r3
 8001314:	f018 feb5 	bl	801a082 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001318:	1d3b      	adds	r3, r7, #4
 800131a:	2220      	movs	r2, #32
 800131c:	2100      	movs	r1, #0
 800131e:	4618      	mov	r0, r3
 8001320:	f018 feaf 	bl	801a082 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001324:	2002      	movs	r0, #2
 8001326:	f005 f9f1 	bl	800670c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800132a:	2300      	movs	r3, #0
 800132c:	603b      	str	r3, [r7, #0]
 800132e:	4b30      	ldr	r3, [pc, #192]	; (80013f0 <SystemClock_Config+0xec>)
 8001330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001332:	4a2f      	ldr	r2, [pc, #188]	; (80013f0 <SystemClock_Config+0xec>)
 8001334:	f023 0301 	bic.w	r3, r3, #1
 8001338:	62d3      	str	r3, [r2, #44]	; 0x2c
 800133a:	4b2d      	ldr	r3, [pc, #180]	; (80013f0 <SystemClock_Config+0xec>)
 800133c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	603b      	str	r3, [r7, #0]
 8001344:	4b2b      	ldr	r3, [pc, #172]	; (80013f4 <SystemClock_Config+0xf0>)
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	4a2a      	ldr	r2, [pc, #168]	; (80013f4 <SystemClock_Config+0xf0>)
 800134a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800134e:	6193      	str	r3, [r2, #24]
 8001350:	4b28      	ldr	r3, [pc, #160]	; (80013f4 <SystemClock_Config+0xf0>)
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001358:	603b      	str	r3, [r7, #0]
 800135a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800135c:	bf00      	nop
 800135e:	4b25      	ldr	r3, [pc, #148]	; (80013f4 <SystemClock_Config+0xf0>)
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001366:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800136a:	d1f8      	bne.n	800135e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800136c:	2301      	movs	r3, #1
 800136e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001370:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001374:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001376:	2302      	movs	r3, #2
 8001378:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800137a:	2302      	movs	r3, #2
 800137c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800137e:	2301      	movs	r3, #1
 8001380:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8001382:	2318      	movs	r3, #24
 8001384:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001386:	2302      	movs	r3, #2
 8001388:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800138a:	2304      	movs	r3, #4
 800138c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800138e:	2302      	movs	r3, #2
 8001390:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001392:	230c      	movs	r3, #12
 8001394:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001396:	2300      	movs	r3, #0
 8001398:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800139a:	2300      	movs	r3, #0
 800139c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800139e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a2:	4618      	mov	r0, r3
 80013a4:	f005 f9fc 	bl	80067a0 <HAL_RCC_OscConfig>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80013ae:	f000 f835 	bl	800141c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013b2:	233f      	movs	r3, #63	; 0x3f
 80013b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013b6:	2303      	movs	r3, #3
 80013b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80013be:	2300      	movs	r3, #0
 80013c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80013ce:	2300      	movs	r3, #0
 80013d0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80013d2:	1d3b      	adds	r3, r7, #4
 80013d4:	2101      	movs	r1, #1
 80013d6:	4618      	mov	r0, r3
 80013d8:	f005 fe3c 	bl	8007054 <HAL_RCC_ClockConfig>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80013e2:	f000 f81b 	bl	800141c <Error_Handler>
  }
}
 80013e6:	bf00      	nop
 80013e8:	3770      	adds	r7, #112	; 0x70
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	58000400 	.word	0x58000400
 80013f4:	58024800 	.word	0x58024800

080013f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a04      	ldr	r2, [pc, #16]	; (8001418 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d101      	bne.n	800140e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800140a:	f000 fce9 	bl	8001de0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40014800 	.word	0x40014800

0800141c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001420:	b672      	cpsid	i
}
 8001422:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001424:	e7fe      	b.n	8001424 <Error_Handler+0x8>
	...

08001428 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800142e:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <HAL_MspInit+0x38>)
 8001430:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001434:	4a0a      	ldr	r2, [pc, #40]	; (8001460 <HAL_MspInit+0x38>)
 8001436:	f043 0302 	orr.w	r3, r3, #2
 800143a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800143e:	4b08      	ldr	r3, [pc, #32]	; (8001460 <HAL_MspInit+0x38>)
 8001440:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800144c:	2200      	movs	r2, #0
 800144e:	210f      	movs	r1, #15
 8001450:	f06f 0001 	mvn.w	r0, #1
 8001454:	f000 fde0 	bl	8002018 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001458:	bf00      	nop
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	58024400 	.word	0x58024400

08001464 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08e      	sub	sp, #56	; 0x38
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM17 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2b0f      	cmp	r3, #15
 8001470:	d842      	bhi.n	80014f8 <HAL_InitTick+0x94>
  {
  HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0U);
 8001472:	2200      	movs	r2, #0
 8001474:	6879      	ldr	r1, [r7, #4]
 8001476:	2076      	movs	r0, #118	; 0x76
 8001478:	f000 fdce 	bl	8002018 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 800147c:	2076      	movs	r0, #118	; 0x76
 800147e:	f000 fde5 	bl	800204c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001482:	4a23      	ldr	r2, [pc, #140]	; (8001510 <HAL_InitTick+0xac>)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8001488:	4b22      	ldr	r3, [pc, #136]	; (8001514 <HAL_InitTick+0xb0>)
 800148a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800148e:	4a21      	ldr	r2, [pc, #132]	; (8001514 <HAL_InitTick+0xb0>)
 8001490:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001494:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001498:	4b1e      	ldr	r3, [pc, #120]	; (8001514 <HAL_InitTick+0xb0>)
 800149a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800149e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014a2:	60bb      	str	r3, [r7, #8]
 80014a4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014a6:	f107 020c 	add.w	r2, r7, #12
 80014aa:	f107 0310 	add.w	r3, r7, #16
 80014ae:	4611      	mov	r1, r2
 80014b0:	4618      	mov	r0, r3
 80014b2:	f006 f95b 	bl	800776c <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80014b6:	f006 f943 	bl	8007740 <HAL_RCC_GetPCLK2Freq>
 80014ba:	6378      	str	r0, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014be:	4a16      	ldr	r2, [pc, #88]	; (8001518 <HAL_InitTick+0xb4>)
 80014c0:	fba2 2303 	umull	r2, r3, r2, r3
 80014c4:	0c9b      	lsrs	r3, r3, #18
 80014c6:	3b01      	subs	r3, #1
 80014c8:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 80014ca:	4b14      	ldr	r3, [pc, #80]	; (800151c <HAL_InitTick+0xb8>)
 80014cc:	4a14      	ldr	r2, [pc, #80]	; (8001520 <HAL_InitTick+0xbc>)
 80014ce:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 80014d0:	4b12      	ldr	r3, [pc, #72]	; (800151c <HAL_InitTick+0xb8>)
 80014d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014d6:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 80014d8:	4a10      	ldr	r2, [pc, #64]	; (800151c <HAL_InitTick+0xb8>)
 80014da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014dc:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 80014de:	4b0f      	ldr	r3, [pc, #60]	; (800151c <HAL_InitTick+0xb8>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e4:	4b0d      	ldr	r3, [pc, #52]	; (800151c <HAL_InitTick+0xb8>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 80014ea:	480c      	ldr	r0, [pc, #48]	; (800151c <HAL_InitTick+0xb8>)
 80014ec:	f007 ffac 	bl	8009448 <HAL_TIM_Base_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d107      	bne.n	8001506 <HAL_InitTick+0xa2>
 80014f6:	e001      	b.n	80014fc <HAL_InitTick+0x98>
    return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e005      	b.n	8001508 <HAL_InitTick+0xa4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 80014fc:	4807      	ldr	r0, [pc, #28]	; (800151c <HAL_InitTick+0xb8>)
 80014fe:	f008 f805 	bl	800950c <HAL_TIM_Base_Start_IT>
 8001502:	4603      	mov	r3, r0
 8001504:	e000      	b.n	8001508 <HAL_InitTick+0xa4>
  }

  /* Return function status */
  return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
}
 8001508:	4618      	mov	r0, r3
 800150a:	3738      	adds	r7, #56	; 0x38
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	24000008 	.word	0x24000008
 8001514:	58024400 	.word	0x58024400
 8001518:	431bde83 	.word	0x431bde83
 800151c:	2400857c 	.word	0x2400857c
 8001520:	40014800 	.word	0x40014800

08001524 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001528:	e7fe      	b.n	8001528 <NMI_Handler+0x4>

0800152a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800152e:	e7fe      	b.n	800152e <HardFault_Handler+0x4>

08001530 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001534:	e7fe      	b.n	8001534 <MemManage_Handler+0x4>

08001536 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800153a:	e7fe      	b.n	800153a <BusFault_Handler+0x4>

0800153c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001540:	e7fe      	b.n	8001540 <UsageFault_Handler+0x4>

08001542 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001554:	4802      	ldr	r0, [pc, #8]	; (8001560 <DMA1_Stream0_IRQHandler+0x10>)
 8001556:	f002 f8b1 	bl	80036bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	240086f4 	.word	0x240086f4

08001564 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001568:	4802      	ldr	r0, [pc, #8]	; (8001574 <DMA1_Stream1_IRQHandler+0x10>)
 800156a:	f002 f8a7 	bl	80036bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	2400876c 	.word	0x2400876c

08001578 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800157c:	4802      	ldr	r0, [pc, #8]	; (8001588 <USART1_IRQHandler+0x10>)
 800157e:	f008 fc33 	bl	8009de8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	240085cc 	.word	0x240085cc

0800158c <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001590:	4802      	ldr	r0, [pc, #8]	; (800159c <TIM17_IRQHandler+0x10>)
 8001592:	f008 f833 	bl	80095fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	2400857c 	.word	0x2400857c

080015a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return 1;
 80015a4:	2301      	movs	r3, #1
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <_kill>:

int _kill(int pid, int sig)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015ba:	f018 fdb5 	bl	801a128 <__errno>
 80015be:	4603      	mov	r3, r0
 80015c0:	2216      	movs	r2, #22
 80015c2:	601a      	str	r2, [r3, #0]
  return -1;
 80015c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <_exit>:

void _exit (int status)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015d8:	f04f 31ff 	mov.w	r1, #4294967295
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff ffe7 	bl	80015b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015e2:	e7fe      	b.n	80015e2 <_exit+0x12>

080015e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]
 80015f4:	e00a      	b.n	800160c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015f6:	f3af 8000 	nop.w
 80015fa:	4601      	mov	r1, r0
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	1c5a      	adds	r2, r3, #1
 8001600:	60ba      	str	r2, [r7, #8]
 8001602:	b2ca      	uxtb	r2, r1
 8001604:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	3301      	adds	r3, #1
 800160a:	617b      	str	r3, [r7, #20]
 800160c:	697a      	ldr	r2, [r7, #20]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	429a      	cmp	r2, r3
 8001612:	dbf0      	blt.n	80015f6 <_read+0x12>
  }

  return len;
 8001614:	687b      	ldr	r3, [r7, #4]
}
 8001616:	4618      	mov	r0, r3
 8001618:	3718      	adds	r7, #24
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b086      	sub	sp, #24
 8001622:	af00      	add	r7, sp, #0
 8001624:	60f8      	str	r0, [r7, #12]
 8001626:	60b9      	str	r1, [r7, #8]
 8001628:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
 800162e:	e009      	b.n	8001644 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	1c5a      	adds	r2, r3, #1
 8001634:	60ba      	str	r2, [r7, #8]
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff fe35 	bl	80012a8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	3301      	adds	r3, #1
 8001642:	617b      	str	r3, [r7, #20]
 8001644:	697a      	ldr	r2, [r7, #20]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	429a      	cmp	r2, r3
 800164a:	dbf1      	blt.n	8001630 <_write+0x12>
  }
  return len;
 800164c:	687b      	ldr	r3, [r7, #4]
}
 800164e:	4618      	mov	r0, r3
 8001650:	3718      	adds	r7, #24
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <_close>:

int _close(int file)
{
 8001656:	b480      	push	{r7}
 8001658:	b083      	sub	sp, #12
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800165e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001662:	4618      	mov	r0, r3
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800166e:	b480      	push	{r7}
 8001670:	b083      	sub	sp, #12
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
 8001676:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800167e:	605a      	str	r2, [r3, #4]
  return 0;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <_isatty>:

int _isatty(int file)
{
 800168e:	b480      	push	{r7}
 8001690:	b083      	sub	sp, #12
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001696:	2301      	movs	r3, #1
}
 8001698:	4618      	mov	r0, r3
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
	...

080016c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016c8:	4a14      	ldr	r2, [pc, #80]	; (800171c <_sbrk+0x5c>)
 80016ca:	4b15      	ldr	r3, [pc, #84]	; (8001720 <_sbrk+0x60>)
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016d4:	4b13      	ldr	r3, [pc, #76]	; (8001724 <_sbrk+0x64>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d102      	bne.n	80016e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016dc:	4b11      	ldr	r3, [pc, #68]	; (8001724 <_sbrk+0x64>)
 80016de:	4a12      	ldr	r2, [pc, #72]	; (8001728 <_sbrk+0x68>)
 80016e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016e2:	4b10      	ldr	r3, [pc, #64]	; (8001724 <_sbrk+0x64>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4413      	add	r3, r2
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d207      	bcs.n	8001700 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016f0:	f018 fd1a 	bl	801a128 <__errno>
 80016f4:	4603      	mov	r3, r0
 80016f6:	220c      	movs	r2, #12
 80016f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016fa:	f04f 33ff 	mov.w	r3, #4294967295
 80016fe:	e009      	b.n	8001714 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001700:	4b08      	ldr	r3, [pc, #32]	; (8001724 <_sbrk+0x64>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001706:	4b07      	ldr	r3, [pc, #28]	; (8001724 <_sbrk+0x64>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4413      	add	r3, r2
 800170e:	4a05      	ldr	r2, [pc, #20]	; (8001724 <_sbrk+0x64>)
 8001710:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001712:	68fb      	ldr	r3, [r7, #12]
}
 8001714:	4618      	mov	r0, r3
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	24080000 	.word	0x24080000
 8001720:	00000400 	.word	0x00000400
 8001724:	240085c8 	.word	0x240085c8
 8001728:	2400e788 	.word	0x2400e788

0800172c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001730:	4b37      	ldr	r3, [pc, #220]	; (8001810 <SystemInit+0xe4>)
 8001732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001736:	4a36      	ldr	r2, [pc, #216]	; (8001810 <SystemInit+0xe4>)
 8001738:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800173c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001740:	4b34      	ldr	r3, [pc, #208]	; (8001814 <SystemInit+0xe8>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 030f 	and.w	r3, r3, #15
 8001748:	2b06      	cmp	r3, #6
 800174a:	d807      	bhi.n	800175c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800174c:	4b31      	ldr	r3, [pc, #196]	; (8001814 <SystemInit+0xe8>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f023 030f 	bic.w	r3, r3, #15
 8001754:	4a2f      	ldr	r2, [pc, #188]	; (8001814 <SystemInit+0xe8>)
 8001756:	f043 0307 	orr.w	r3, r3, #7
 800175a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800175c:	4b2e      	ldr	r3, [pc, #184]	; (8001818 <SystemInit+0xec>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a2d      	ldr	r2, [pc, #180]	; (8001818 <SystemInit+0xec>)
 8001762:	f043 0301 	orr.w	r3, r3, #1
 8001766:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001768:	4b2b      	ldr	r3, [pc, #172]	; (8001818 <SystemInit+0xec>)
 800176a:	2200      	movs	r2, #0
 800176c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800176e:	4b2a      	ldr	r3, [pc, #168]	; (8001818 <SystemInit+0xec>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	4929      	ldr	r1, [pc, #164]	; (8001818 <SystemInit+0xec>)
 8001774:	4b29      	ldr	r3, [pc, #164]	; (800181c <SystemInit+0xf0>)
 8001776:	4013      	ands	r3, r2
 8001778:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800177a:	4b26      	ldr	r3, [pc, #152]	; (8001814 <SystemInit+0xe8>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0308 	and.w	r3, r3, #8
 8001782:	2b00      	cmp	r3, #0
 8001784:	d007      	beq.n	8001796 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001786:	4b23      	ldr	r3, [pc, #140]	; (8001814 <SystemInit+0xe8>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f023 030f 	bic.w	r3, r3, #15
 800178e:	4a21      	ldr	r2, [pc, #132]	; (8001814 <SystemInit+0xe8>)
 8001790:	f043 0307 	orr.w	r3, r3, #7
 8001794:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001796:	4b20      	ldr	r3, [pc, #128]	; (8001818 <SystemInit+0xec>)
 8001798:	2200      	movs	r2, #0
 800179a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800179c:	4b1e      	ldr	r3, [pc, #120]	; (8001818 <SystemInit+0xec>)
 800179e:	2200      	movs	r2, #0
 80017a0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80017a2:	4b1d      	ldr	r3, [pc, #116]	; (8001818 <SystemInit+0xec>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80017a8:	4b1b      	ldr	r3, [pc, #108]	; (8001818 <SystemInit+0xec>)
 80017aa:	4a1d      	ldr	r2, [pc, #116]	; (8001820 <SystemInit+0xf4>)
 80017ac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80017ae:	4b1a      	ldr	r3, [pc, #104]	; (8001818 <SystemInit+0xec>)
 80017b0:	4a1c      	ldr	r2, [pc, #112]	; (8001824 <SystemInit+0xf8>)
 80017b2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80017b4:	4b18      	ldr	r3, [pc, #96]	; (8001818 <SystemInit+0xec>)
 80017b6:	4a1c      	ldr	r2, [pc, #112]	; (8001828 <SystemInit+0xfc>)
 80017b8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80017ba:	4b17      	ldr	r3, [pc, #92]	; (8001818 <SystemInit+0xec>)
 80017bc:	2200      	movs	r2, #0
 80017be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80017c0:	4b15      	ldr	r3, [pc, #84]	; (8001818 <SystemInit+0xec>)
 80017c2:	4a19      	ldr	r2, [pc, #100]	; (8001828 <SystemInit+0xfc>)
 80017c4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80017c6:	4b14      	ldr	r3, [pc, #80]	; (8001818 <SystemInit+0xec>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80017cc:	4b12      	ldr	r3, [pc, #72]	; (8001818 <SystemInit+0xec>)
 80017ce:	4a16      	ldr	r2, [pc, #88]	; (8001828 <SystemInit+0xfc>)
 80017d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80017d2:	4b11      	ldr	r3, [pc, #68]	; (8001818 <SystemInit+0xec>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80017d8:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <SystemInit+0xec>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a0e      	ldr	r2, [pc, #56]	; (8001818 <SystemInit+0xec>)
 80017de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017e2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <SystemInit+0xec>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80017ea:	4b10      	ldr	r3, [pc, #64]	; (800182c <SystemInit+0x100>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	4b10      	ldr	r3, [pc, #64]	; (8001830 <SystemInit+0x104>)
 80017f0:	4013      	ands	r3, r2
 80017f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80017f6:	d202      	bcs.n	80017fe <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80017f8:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <SystemInit+0x108>)
 80017fa:	2201      	movs	r2, #1
 80017fc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80017fe:	4b0e      	ldr	r3, [pc, #56]	; (8001838 <SystemInit+0x10c>)
 8001800:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001804:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001806:	bf00      	nop
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	e000ed00 	.word	0xe000ed00
 8001814:	52002000 	.word	0x52002000
 8001818:	58024400 	.word	0x58024400
 800181c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001820:	02020200 	.word	0x02020200
 8001824:	01ff0000 	.word	0x01ff0000
 8001828:	01010280 	.word	0x01010280
 800182c:	5c001000 	.word	0x5c001000
 8001830:	ffff0000 	.word	0xffff0000
 8001834:	51008108 	.word	0x51008108
 8001838:	52004000 	.word	0x52004000

0800183c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001840:	4b22      	ldr	r3, [pc, #136]	; (80018cc <MX_USART1_UART_Init+0x90>)
 8001842:	4a23      	ldr	r2, [pc, #140]	; (80018d0 <MX_USART1_UART_Init+0x94>)
 8001844:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8001846:	4b21      	ldr	r3, [pc, #132]	; (80018cc <MX_USART1_UART_Init+0x90>)
 8001848:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800184c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800184e:	4b1f      	ldr	r3, [pc, #124]	; (80018cc <MX_USART1_UART_Init+0x90>)
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001854:	4b1d      	ldr	r3, [pc, #116]	; (80018cc <MX_USART1_UART_Init+0x90>)
 8001856:	2200      	movs	r2, #0
 8001858:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800185a:	4b1c      	ldr	r3, [pc, #112]	; (80018cc <MX_USART1_UART_Init+0x90>)
 800185c:	2200      	movs	r2, #0
 800185e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001860:	4b1a      	ldr	r3, [pc, #104]	; (80018cc <MX_USART1_UART_Init+0x90>)
 8001862:	220c      	movs	r2, #12
 8001864:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001866:	4b19      	ldr	r3, [pc, #100]	; (80018cc <MX_USART1_UART_Init+0x90>)
 8001868:	2200      	movs	r2, #0
 800186a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800186c:	4b17      	ldr	r3, [pc, #92]	; (80018cc <MX_USART1_UART_Init+0x90>)
 800186e:	2200      	movs	r2, #0
 8001870:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001872:	4b16      	ldr	r3, [pc, #88]	; (80018cc <MX_USART1_UART_Init+0x90>)
 8001874:	2200      	movs	r2, #0
 8001876:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001878:	4b14      	ldr	r3, [pc, #80]	; (80018cc <MX_USART1_UART_Init+0x90>)
 800187a:	2200      	movs	r2, #0
 800187c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800187e:	4b13      	ldr	r3, [pc, #76]	; (80018cc <MX_USART1_UART_Init+0x90>)
 8001880:	2200      	movs	r2, #0
 8001882:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001884:	4811      	ldr	r0, [pc, #68]	; (80018cc <MX_USART1_UART_Init+0x90>)
 8001886:	f008 f8b9 	bl	80099fc <HAL_UART_Init>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001890:	f7ff fdc4 	bl	800141c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001894:	2100      	movs	r1, #0
 8001896:	480d      	ldr	r0, [pc, #52]	; (80018cc <MX_USART1_UART_Init+0x90>)
 8001898:	f00a ff15 	bl	800c6c6 <HAL_UARTEx_SetTxFifoThreshold>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80018a2:	f7ff fdbb 	bl	800141c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018a6:	2100      	movs	r1, #0
 80018a8:	4808      	ldr	r0, [pc, #32]	; (80018cc <MX_USART1_UART_Init+0x90>)
 80018aa:	f00a ff4a 	bl	800c742 <HAL_UARTEx_SetRxFifoThreshold>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80018b4:	f7ff fdb2 	bl	800141c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80018b8:	4804      	ldr	r0, [pc, #16]	; (80018cc <MX_USART1_UART_Init+0x90>)
 80018ba:	f00a fecb 	bl	800c654 <HAL_UARTEx_DisableFifoMode>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80018c4:	f7ff fdaa 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	240085cc 	.word	0x240085cc
 80018d0:	40011000 	.word	0x40011000

080018d4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018d8:	4b22      	ldr	r3, [pc, #136]	; (8001964 <MX_USART3_UART_Init+0x90>)
 80018da:	4a23      	ldr	r2, [pc, #140]	; (8001968 <MX_USART3_UART_Init+0x94>)
 80018dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80018de:	4b21      	ldr	r3, [pc, #132]	; (8001964 <MX_USART3_UART_Init+0x90>)
 80018e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018e6:	4b1f      	ldr	r3, [pc, #124]	; (8001964 <MX_USART3_UART_Init+0x90>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80018ec:	4b1d      	ldr	r3, [pc, #116]	; (8001964 <MX_USART3_UART_Init+0x90>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80018f2:	4b1c      	ldr	r3, [pc, #112]	; (8001964 <MX_USART3_UART_Init+0x90>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018f8:	4b1a      	ldr	r3, [pc, #104]	; (8001964 <MX_USART3_UART_Init+0x90>)
 80018fa:	220c      	movs	r2, #12
 80018fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018fe:	4b19      	ldr	r3, [pc, #100]	; (8001964 <MX_USART3_UART_Init+0x90>)
 8001900:	2200      	movs	r2, #0
 8001902:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001904:	4b17      	ldr	r3, [pc, #92]	; (8001964 <MX_USART3_UART_Init+0x90>)
 8001906:	2200      	movs	r2, #0
 8001908:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800190a:	4b16      	ldr	r3, [pc, #88]	; (8001964 <MX_USART3_UART_Init+0x90>)
 800190c:	2200      	movs	r2, #0
 800190e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001910:	4b14      	ldr	r3, [pc, #80]	; (8001964 <MX_USART3_UART_Init+0x90>)
 8001912:	2200      	movs	r2, #0
 8001914:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001916:	4b13      	ldr	r3, [pc, #76]	; (8001964 <MX_USART3_UART_Init+0x90>)
 8001918:	2200      	movs	r2, #0
 800191a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800191c:	4811      	ldr	r0, [pc, #68]	; (8001964 <MX_USART3_UART_Init+0x90>)
 800191e:	f008 f86d 	bl	80099fc <HAL_UART_Init>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001928:	f7ff fd78 	bl	800141c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800192c:	2100      	movs	r1, #0
 800192e:	480d      	ldr	r0, [pc, #52]	; (8001964 <MX_USART3_UART_Init+0x90>)
 8001930:	f00a fec9 	bl	800c6c6 <HAL_UARTEx_SetTxFifoThreshold>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800193a:	f7ff fd6f 	bl	800141c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800193e:	2100      	movs	r1, #0
 8001940:	4808      	ldr	r0, [pc, #32]	; (8001964 <MX_USART3_UART_Init+0x90>)
 8001942:	f00a fefe 	bl	800c742 <HAL_UARTEx_SetRxFifoThreshold>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800194c:	f7ff fd66 	bl	800141c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001950:	4804      	ldr	r0, [pc, #16]	; (8001964 <MX_USART3_UART_Init+0x90>)
 8001952:	f00a fe7f 	bl	800c654 <HAL_UARTEx_DisableFifoMode>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800195c:	f7ff fd5e 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001960:	bf00      	nop
 8001962:	bd80      	pop	{r7, pc}
 8001964:	24008660 	.word	0x24008660
 8001968:	40004800 	.word	0x40004800

0800196c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b0bc      	sub	sp, #240	; 0xf0
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001974:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001984:	f107 0318 	add.w	r3, r7, #24
 8001988:	22c0      	movs	r2, #192	; 0xc0
 800198a:	2100      	movs	r1, #0
 800198c:	4618      	mov	r0, r3
 800198e:	f018 fb78 	bl	801a082 <memset>
  if(uartHandle->Instance==USART1)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a7f      	ldr	r2, [pc, #508]	; (8001b94 <HAL_UART_MspInit+0x228>)
 8001998:	4293      	cmp	r3, r2
 800199a:	f040 80aa 	bne.w	8001af2 <HAL_UART_MspInit+0x186>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800199e:	f04f 0201 	mov.w	r2, #1
 80019a2:	f04f 0300 	mov.w	r3, #0
 80019a6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80019aa:	2300      	movs	r3, #0
 80019ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019b0:	f107 0318 	add.w	r3, r7, #24
 80019b4:	4618      	mov	r0, r3
 80019b6:	f005 ff1b 	bl	80077f0 <HAL_RCCEx_PeriphCLKConfig>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 80019c0:	f7ff fd2c 	bl	800141c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019c4:	4b74      	ldr	r3, [pc, #464]	; (8001b98 <HAL_UART_MspInit+0x22c>)
 80019c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019ca:	4a73      	ldr	r2, [pc, #460]	; (8001b98 <HAL_UART_MspInit+0x22c>)
 80019cc:	f043 0310 	orr.w	r3, r3, #16
 80019d0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80019d4:	4b70      	ldr	r3, [pc, #448]	; (8001b98 <HAL_UART_MspInit+0x22c>)
 80019d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019da:	f003 0310 	and.w	r3, r3, #16
 80019de:	617b      	str	r3, [r7, #20]
 80019e0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e2:	4b6d      	ldr	r3, [pc, #436]	; (8001b98 <HAL_UART_MspInit+0x22c>)
 80019e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019e8:	4a6b      	ldr	r2, [pc, #428]	; (8001b98 <HAL_UART_MspInit+0x22c>)
 80019ea:	f043 0302 	orr.w	r3, r3, #2
 80019ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019f2:	4b69      	ldr	r3, [pc, #420]	; (8001b98 <HAL_UART_MspInit+0x22c>)
 80019f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	613b      	str	r3, [r7, #16]
 80019fe:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a00:	23c0      	movs	r3, #192	; 0xc0
 8001a02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a06:	2302      	movs	r3, #2
 8001a08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a12:	2300      	movs	r3, #0
 8001a14:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a18:	2307      	movs	r3, #7
 8001a1a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a1e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001a22:	4619      	mov	r1, r3
 8001a24:	485d      	ldr	r0, [pc, #372]	; (8001b9c <HAL_UART_MspInit+0x230>)
 8001a26:	f003 fd7f 	bl	8005528 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8001a2a:	4b5d      	ldr	r3, [pc, #372]	; (8001ba0 <HAL_UART_MspInit+0x234>)
 8001a2c:	4a5d      	ldr	r2, [pc, #372]	; (8001ba4 <HAL_UART_MspInit+0x238>)
 8001a2e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001a30:	4b5b      	ldr	r3, [pc, #364]	; (8001ba0 <HAL_UART_MspInit+0x234>)
 8001a32:	2229      	movs	r2, #41	; 0x29
 8001a34:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a36:	4b5a      	ldr	r3, [pc, #360]	; (8001ba0 <HAL_UART_MspInit+0x234>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a3c:	4b58      	ldr	r3, [pc, #352]	; (8001ba0 <HAL_UART_MspInit+0x234>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a42:	4b57      	ldr	r3, [pc, #348]	; (8001ba0 <HAL_UART_MspInit+0x234>)
 8001a44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a48:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a4a:	4b55      	ldr	r3, [pc, #340]	; (8001ba0 <HAL_UART_MspInit+0x234>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a50:	4b53      	ldr	r3, [pc, #332]	; (8001ba0 <HAL_UART_MspInit+0x234>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001a56:	4b52      	ldr	r3, [pc, #328]	; (8001ba0 <HAL_UART_MspInit+0x234>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a5c:	4b50      	ldr	r3, [pc, #320]	; (8001ba0 <HAL_UART_MspInit+0x234>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a62:	4b4f      	ldr	r3, [pc, #316]	; (8001ba0 <HAL_UART_MspInit+0x234>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001a68:	484d      	ldr	r0, [pc, #308]	; (8001ba0 <HAL_UART_MspInit+0x234>)
 8001a6a:	f000 fafd 	bl	8002068 <HAL_DMA_Init>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001a74:	f7ff fcd2 	bl	800141c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4a49      	ldr	r2, [pc, #292]	; (8001ba0 <HAL_UART_MspInit+0x234>)
 8001a7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001a80:	4a47      	ldr	r2, [pc, #284]	; (8001ba0 <HAL_UART_MspInit+0x234>)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream1;
 8001a86:	4b48      	ldr	r3, [pc, #288]	; (8001ba8 <HAL_UART_MspInit+0x23c>)
 8001a88:	4a48      	ldr	r2, [pc, #288]	; (8001bac <HAL_UART_MspInit+0x240>)
 8001a8a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001a8c:	4b46      	ldr	r3, [pc, #280]	; (8001ba8 <HAL_UART_MspInit+0x23c>)
 8001a8e:	222a      	movs	r2, #42	; 0x2a
 8001a90:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a92:	4b45      	ldr	r3, [pc, #276]	; (8001ba8 <HAL_UART_MspInit+0x23c>)
 8001a94:	2240      	movs	r2, #64	; 0x40
 8001a96:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a98:	4b43      	ldr	r3, [pc, #268]	; (8001ba8 <HAL_UART_MspInit+0x23c>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a9e:	4b42      	ldr	r3, [pc, #264]	; (8001ba8 <HAL_UART_MspInit+0x23c>)
 8001aa0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001aa4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001aa6:	4b40      	ldr	r3, [pc, #256]	; (8001ba8 <HAL_UART_MspInit+0x23c>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001aac:	4b3e      	ldr	r3, [pc, #248]	; (8001ba8 <HAL_UART_MspInit+0x23c>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001ab2:	4b3d      	ldr	r3, [pc, #244]	; (8001ba8 <HAL_UART_MspInit+0x23c>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ab8:	4b3b      	ldr	r3, [pc, #236]	; (8001ba8 <HAL_UART_MspInit+0x23c>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001abe:	4b3a      	ldr	r3, [pc, #232]	; (8001ba8 <HAL_UART_MspInit+0x23c>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001ac4:	4838      	ldr	r0, [pc, #224]	; (8001ba8 <HAL_UART_MspInit+0x23c>)
 8001ac6:	f000 facf 	bl	8002068 <HAL_DMA_Init>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <HAL_UART_MspInit+0x168>
    {
      Error_Handler();
 8001ad0:	f7ff fca4 	bl	800141c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4a34      	ldr	r2, [pc, #208]	; (8001ba8 <HAL_UART_MspInit+0x23c>)
 8001ad8:	67da      	str	r2, [r3, #124]	; 0x7c
 8001ada:	4a33      	ldr	r2, [pc, #204]	; (8001ba8 <HAL_UART_MspInit+0x23c>)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	2105      	movs	r1, #5
 8001ae4:	2025      	movs	r0, #37	; 0x25
 8001ae6:	f000 fa97 	bl	8002018 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001aea:	2025      	movs	r0, #37	; 0x25
 8001aec:	f000 faae 	bl	800204c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001af0:	e04b      	b.n	8001b8a <HAL_UART_MspInit+0x21e>
  else if(uartHandle->Instance==USART3)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a2e      	ldr	r2, [pc, #184]	; (8001bb0 <HAL_UART_MspInit+0x244>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d146      	bne.n	8001b8a <HAL_UART_MspInit+0x21e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001afc:	f04f 0202 	mov.w	r2, #2
 8001b00:	f04f 0300 	mov.w	r3, #0
 8001b04:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b0e:	f107 0318 	add.w	r3, r7, #24
 8001b12:	4618      	mov	r0, r3
 8001b14:	f005 fe6c 	bl	80077f0 <HAL_RCCEx_PeriphCLKConfig>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <HAL_UART_MspInit+0x1b6>
      Error_Handler();
 8001b1e:	f7ff fc7d 	bl	800141c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b22:	4b1d      	ldr	r3, [pc, #116]	; (8001b98 <HAL_UART_MspInit+0x22c>)
 8001b24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b28:	4a1b      	ldr	r2, [pc, #108]	; (8001b98 <HAL_UART_MspInit+0x22c>)
 8001b2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b2e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b32:	4b19      	ldr	r3, [pc, #100]	; (8001b98 <HAL_UART_MspInit+0x22c>)
 8001b34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b40:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <HAL_UART_MspInit+0x22c>)
 8001b42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b46:	4a14      	ldr	r2, [pc, #80]	; (8001b98 <HAL_UART_MspInit+0x22c>)
 8001b48:	f043 0308 	orr.w	r3, r3, #8
 8001b4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b50:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <HAL_UART_MspInit+0x22c>)
 8001b52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b56:	f003 0308 	and.w	r3, r3, #8
 8001b5a:	60bb      	str	r3, [r7, #8]
 8001b5c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b66:	2302      	movs	r3, #2
 8001b68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b72:	2300      	movs	r3, #0
 8001b74:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b78:	2307      	movs	r3, #7
 8001b7a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b7e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001b82:	4619      	mov	r1, r3
 8001b84:	480b      	ldr	r0, [pc, #44]	; (8001bb4 <HAL_UART_MspInit+0x248>)
 8001b86:	f003 fccf 	bl	8005528 <HAL_GPIO_Init>
}
 8001b8a:	bf00      	nop
 8001b8c:	37f0      	adds	r7, #240	; 0xf0
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40011000 	.word	0x40011000
 8001b98:	58024400 	.word	0x58024400
 8001b9c:	58020400 	.word	0x58020400
 8001ba0:	240086f4 	.word	0x240086f4
 8001ba4:	40020010 	.word	0x40020010
 8001ba8:	2400876c 	.word	0x2400876c
 8001bac:	40020028 	.word	0x40020028
 8001bb0:	40004800 	.word	0x40004800
 8001bb4:	58020c00 	.word	0x58020c00

08001bb8 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001bbc:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001bbe:	4a16      	ldr	r2, [pc, #88]	; (8001c18 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001bc0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001bc2:	4b14      	ldr	r3, [pc, #80]	; (8001c14 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001bc4:	2209      	movs	r2, #9
 8001bc6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001bc8:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001bca:	2202      	movs	r2, #2
 8001bcc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001bce:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001bd4:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001bd6:	2202      	movs	r2, #2
 8001bd8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001bda:	4b0e      	ldr	r3, [pc, #56]	; (8001c14 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001bdc:	2201      	movs	r2, #1
 8001bde:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001be0:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001be6:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001bec:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001bf2:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001bf8:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001bfe:	4805      	ldr	r0, [pc, #20]	; (8001c14 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c00:	f004 fc3c 	bl	800647c <HAL_PCD_Init>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001c0a:	f7ff fc07 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	240087e4 	.word	0x240087e4
 8001c18:	40080000 	.word	0x40080000

08001c1c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b0ba      	sub	sp, #232	; 0xe8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c24:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	60da      	str	r2, [r3, #12]
 8001c32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c34:	f107 0310 	add.w	r3, r7, #16
 8001c38:	22c0      	movs	r2, #192	; 0xc0
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f018 fa20 	bl	801a082 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a30      	ldr	r2, [pc, #192]	; (8001d08 <HAL_PCD_MspInit+0xec>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d159      	bne.n	8001d00 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001c4c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001c50:	f04f 0300 	mov.w	r3, #0
 8001c54:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001c58:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c60:	f107 0310 	add.w	r3, r7, #16
 8001c64:	4618      	mov	r0, r3
 8001c66:	f005 fdc3 	bl	80077f0 <HAL_RCCEx_PeriphCLKConfig>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001c70:	f7ff fbd4 	bl	800141c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001c74:	f004 fd84 	bl	8006780 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c78:	4b24      	ldr	r3, [pc, #144]	; (8001d0c <HAL_PCD_MspInit+0xf0>)
 8001c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c7e:	4a23      	ldr	r2, [pc, #140]	; (8001d0c <HAL_PCD_MspInit+0xf0>)
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c88:	4b20      	ldr	r3, [pc, #128]	; (8001d0c <HAL_PCD_MspInit+0xf0>)
 8001c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001c96:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001c9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001caa:	2300      	movs	r3, #0
 8001cac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001cb0:	230a      	movs	r3, #10
 8001cb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4814      	ldr	r0, [pc, #80]	; (8001d10 <HAL_PCD_MspInit+0xf4>)
 8001cbe:	f003 fc33 	bl	8005528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001cc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001cd6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001cda:	4619      	mov	r1, r3
 8001cdc:	480c      	ldr	r0, [pc, #48]	; (8001d10 <HAL_PCD_MspInit+0xf4>)
 8001cde:	f003 fc23 	bl	8005528 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001ce2:	4b0a      	ldr	r3, [pc, #40]	; (8001d0c <HAL_PCD_MspInit+0xf0>)
 8001ce4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ce8:	4a08      	ldr	r2, [pc, #32]	; (8001d0c <HAL_PCD_MspInit+0xf0>)
 8001cea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001cee:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001cf2:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <HAL_PCD_MspInit+0xf0>)
 8001cf4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001cf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001cfc:	60bb      	str	r3, [r7, #8]
 8001cfe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001d00:	bf00      	nop
 8001d02:	37e8      	adds	r7, #232	; 0xe8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40080000 	.word	0x40080000
 8001d0c:	58024400 	.word	0x58024400
 8001d10:	58020000 	.word	0x58020000

08001d14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001d14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d4c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d18:	f7ff fd08 	bl	800172c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d1c:	480c      	ldr	r0, [pc, #48]	; (8001d50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d1e:	490d      	ldr	r1, [pc, #52]	; (8001d54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d20:	4a0d      	ldr	r2, [pc, #52]	; (8001d58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d24:	e002      	b.n	8001d2c <LoopCopyDataInit>

08001d26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d2a:	3304      	adds	r3, #4

08001d2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d30:	d3f9      	bcc.n	8001d26 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d32:	4a0a      	ldr	r2, [pc, #40]	; (8001d5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d34:	4c0a      	ldr	r4, [pc, #40]	; (8001d60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d38:	e001      	b.n	8001d3e <LoopFillZerobss>

08001d3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d3c:	3204      	adds	r2, #4

08001d3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d40:	d3fb      	bcc.n	8001d3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d42:	f018 f9f7 	bl	801a134 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d46:	f7ff fac1 	bl	80012cc <main>
  bx  lr
 8001d4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d4c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001d50:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001d54:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 8001d58:	0801c580 	.word	0x0801c580
  ldr r2, =_sbss
 8001d5c:	2400029c 	.word	0x2400029c
  ldr r4, =_ebss
 8001d60:	2400e784 	.word	0x2400e784

08001d64 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d64:	e7fe      	b.n	8001d64 <ADC3_IRQHandler>
	...

08001d68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d6e:	2003      	movs	r0, #3
 8001d70:	f000 f947 	bl	8002002 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001d74:	f005 fb24 	bl	80073c0 <HAL_RCC_GetSysClockFreq>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	4b15      	ldr	r3, [pc, #84]	; (8001dd0 <HAL_Init+0x68>)
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	0a1b      	lsrs	r3, r3, #8
 8001d80:	f003 030f 	and.w	r3, r3, #15
 8001d84:	4913      	ldr	r1, [pc, #76]	; (8001dd4 <HAL_Init+0x6c>)
 8001d86:	5ccb      	ldrb	r3, [r1, r3]
 8001d88:	f003 031f 	and.w	r3, r3, #31
 8001d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d90:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d92:	4b0f      	ldr	r3, [pc, #60]	; (8001dd0 <HAL_Init+0x68>)
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	4a0e      	ldr	r2, [pc, #56]	; (8001dd4 <HAL_Init+0x6c>)
 8001d9c:	5cd3      	ldrb	r3, [r2, r3]
 8001d9e:	f003 031f 	and.w	r3, r3, #31
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	fa22 f303 	lsr.w	r3, r2, r3
 8001da8:	4a0b      	ldr	r2, [pc, #44]	; (8001dd8 <HAL_Init+0x70>)
 8001daa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001dac:	4a0b      	ldr	r2, [pc, #44]	; (8001ddc <HAL_Init+0x74>)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001db2:	200f      	movs	r0, #15
 8001db4:	f7ff fb56 	bl	8001464 <HAL_InitTick>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e002      	b.n	8001dc8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001dc2:	f7ff fb31 	bl	8001428 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	58024400 	.word	0x58024400
 8001dd4:	0801c018 	.word	0x0801c018
 8001dd8:	24000004 	.word	0x24000004
 8001ddc:	24000000 	.word	0x24000000

08001de0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001de4:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <HAL_IncTick+0x20>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	461a      	mov	r2, r3
 8001dea:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <HAL_IncTick+0x24>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4413      	add	r3, r2
 8001df0:	4a04      	ldr	r2, [pc, #16]	; (8001e04 <HAL_IncTick+0x24>)
 8001df2:	6013      	str	r3, [r2, #0]
}
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	2400000c 	.word	0x2400000c
 8001e04:	24008cf0 	.word	0x24008cf0

08001e08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e0c:	4b03      	ldr	r3, [pc, #12]	; (8001e1c <HAL_GetTick+0x14>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	24008cf0 	.word	0x24008cf0

08001e20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e28:	f7ff ffee 	bl	8001e08 <HAL_GetTick>
 8001e2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e38:	d005      	beq.n	8001e46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e3a:	4b0a      	ldr	r3, [pc, #40]	; (8001e64 <HAL_Delay+0x44>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	461a      	mov	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	4413      	add	r3, r2
 8001e44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e46:	bf00      	nop
 8001e48:	f7ff ffde 	bl	8001e08 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d8f7      	bhi.n	8001e48 <HAL_Delay+0x28>
  {
  }
}
 8001e58:	bf00      	nop
 8001e5a:	bf00      	nop
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	2400000c 	.word	0x2400000c

08001e68 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001e6c:	4b03      	ldr	r3, [pc, #12]	; (8001e7c <HAL_GetREVID+0x14>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	0c1b      	lsrs	r3, r3, #16
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	5c001000 	.word	0x5c001000

08001e80 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001e88:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001e90:	4904      	ldr	r1, [pc, #16]	; (8001ea4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	604b      	str	r3, [r1, #4]
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	58000400 	.word	0x58000400

08001ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <__NVIC_SetPriorityGrouping+0x40>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ebe:	68ba      	ldr	r2, [r7, #8]
 8001ec0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ed0:	4b06      	ldr	r3, [pc, #24]	; (8001eec <__NVIC_SetPriorityGrouping+0x44>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ed6:	4a04      	ldr	r2, [pc, #16]	; (8001ee8 <__NVIC_SetPriorityGrouping+0x40>)
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	60d3      	str	r3, [r2, #12]
}
 8001edc:	bf00      	nop
 8001ede:	3714      	adds	r7, #20
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	e000ed00 	.word	0xe000ed00
 8001eec:	05fa0000 	.word	0x05fa0000

08001ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ef4:	4b04      	ldr	r3, [pc, #16]	; (8001f08 <__NVIC_GetPriorityGrouping+0x18>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	0a1b      	lsrs	r3, r3, #8
 8001efa:	f003 0307 	and.w	r3, r3, #7
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	db0b      	blt.n	8001f36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f1e:	88fb      	ldrh	r3, [r7, #6]
 8001f20:	f003 021f 	and.w	r2, r3, #31
 8001f24:	4907      	ldr	r1, [pc, #28]	; (8001f44 <__NVIC_EnableIRQ+0x38>)
 8001f26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f2a:	095b      	lsrs	r3, r3, #5
 8001f2c:	2001      	movs	r0, #1
 8001f2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	e000e100 	.word	0xe000e100

08001f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	6039      	str	r1, [r7, #0]
 8001f52:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	db0a      	blt.n	8001f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	490c      	ldr	r1, [pc, #48]	; (8001f94 <__NVIC_SetPriority+0x4c>)
 8001f62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f66:	0112      	lsls	r2, r2, #4
 8001f68:	b2d2      	uxtb	r2, r2
 8001f6a:	440b      	add	r3, r1
 8001f6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f70:	e00a      	b.n	8001f88 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	4908      	ldr	r1, [pc, #32]	; (8001f98 <__NVIC_SetPriority+0x50>)
 8001f78:	88fb      	ldrh	r3, [r7, #6]
 8001f7a:	f003 030f 	and.w	r3, r3, #15
 8001f7e:	3b04      	subs	r3, #4
 8001f80:	0112      	lsls	r2, r2, #4
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	440b      	add	r3, r1
 8001f86:	761a      	strb	r2, [r3, #24]
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	e000e100 	.word	0xe000e100
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b089      	sub	sp, #36	; 0x24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	f1c3 0307 	rsb	r3, r3, #7
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	bf28      	it	cs
 8001fba:	2304      	movcs	r3, #4
 8001fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	2b06      	cmp	r3, #6
 8001fc4:	d902      	bls.n	8001fcc <NVIC_EncodePriority+0x30>
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	3b03      	subs	r3, #3
 8001fca:	e000      	b.n	8001fce <NVIC_EncodePriority+0x32>
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	43da      	mvns	r2, r3
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	401a      	ands	r2, r3
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	fa01 f303 	lsl.w	r3, r1, r3
 8001fee:	43d9      	mvns	r1, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff4:	4313      	orrs	r3, r2
         );
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3724      	adds	r7, #36	; 0x24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b082      	sub	sp, #8
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7ff ff4c 	bl	8001ea8 <__NVIC_SetPriorityGrouping>
}
 8002010:	bf00      	nop
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	4603      	mov	r3, r0
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
 8002024:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002026:	f7ff ff63 	bl	8001ef0 <__NVIC_GetPriorityGrouping>
 800202a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	68b9      	ldr	r1, [r7, #8]
 8002030:	6978      	ldr	r0, [r7, #20]
 8002032:	f7ff ffb3 	bl	8001f9c <NVIC_EncodePriority>
 8002036:	4602      	mov	r2, r0
 8002038:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800203c:	4611      	mov	r1, r2
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff ff82 	bl	8001f48 <__NVIC_SetPriority>
}
 8002044:	bf00      	nop
 8002046:	3718      	adds	r7, #24
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002056:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff ff56 	bl	8001f0c <__NVIC_EnableIRQ>
}
 8002060:	bf00      	nop
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002070:	f7ff feca 	bl	8001e08 <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d101      	bne.n	8002080 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e316      	b.n	80026ae <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a66      	ldr	r2, [pc, #408]	; (8002220 <HAL_DMA_Init+0x1b8>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d04a      	beq.n	8002120 <HAL_DMA_Init+0xb8>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a65      	ldr	r2, [pc, #404]	; (8002224 <HAL_DMA_Init+0x1bc>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d045      	beq.n	8002120 <HAL_DMA_Init+0xb8>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a63      	ldr	r2, [pc, #396]	; (8002228 <HAL_DMA_Init+0x1c0>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d040      	beq.n	8002120 <HAL_DMA_Init+0xb8>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a62      	ldr	r2, [pc, #392]	; (800222c <HAL_DMA_Init+0x1c4>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d03b      	beq.n	8002120 <HAL_DMA_Init+0xb8>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a60      	ldr	r2, [pc, #384]	; (8002230 <HAL_DMA_Init+0x1c8>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d036      	beq.n	8002120 <HAL_DMA_Init+0xb8>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a5f      	ldr	r2, [pc, #380]	; (8002234 <HAL_DMA_Init+0x1cc>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d031      	beq.n	8002120 <HAL_DMA_Init+0xb8>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a5d      	ldr	r2, [pc, #372]	; (8002238 <HAL_DMA_Init+0x1d0>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d02c      	beq.n	8002120 <HAL_DMA_Init+0xb8>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a5c      	ldr	r2, [pc, #368]	; (800223c <HAL_DMA_Init+0x1d4>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d027      	beq.n	8002120 <HAL_DMA_Init+0xb8>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a5a      	ldr	r2, [pc, #360]	; (8002240 <HAL_DMA_Init+0x1d8>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d022      	beq.n	8002120 <HAL_DMA_Init+0xb8>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a59      	ldr	r2, [pc, #356]	; (8002244 <HAL_DMA_Init+0x1dc>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d01d      	beq.n	8002120 <HAL_DMA_Init+0xb8>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a57      	ldr	r2, [pc, #348]	; (8002248 <HAL_DMA_Init+0x1e0>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d018      	beq.n	8002120 <HAL_DMA_Init+0xb8>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a56      	ldr	r2, [pc, #344]	; (800224c <HAL_DMA_Init+0x1e4>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d013      	beq.n	8002120 <HAL_DMA_Init+0xb8>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a54      	ldr	r2, [pc, #336]	; (8002250 <HAL_DMA_Init+0x1e8>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d00e      	beq.n	8002120 <HAL_DMA_Init+0xb8>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a53      	ldr	r2, [pc, #332]	; (8002254 <HAL_DMA_Init+0x1ec>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d009      	beq.n	8002120 <HAL_DMA_Init+0xb8>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a51      	ldr	r2, [pc, #324]	; (8002258 <HAL_DMA_Init+0x1f0>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d004      	beq.n	8002120 <HAL_DMA_Init+0xb8>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a50      	ldr	r2, [pc, #320]	; (800225c <HAL_DMA_Init+0x1f4>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d101      	bne.n	8002124 <HAL_DMA_Init+0xbc>
 8002120:	2301      	movs	r3, #1
 8002122:	e000      	b.n	8002126 <HAL_DMA_Init+0xbe>
 8002124:	2300      	movs	r3, #0
 8002126:	2b00      	cmp	r3, #0
 8002128:	f000 813b 	beq.w	80023a2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2202      	movs	r2, #2
 8002130:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a37      	ldr	r2, [pc, #220]	; (8002220 <HAL_DMA_Init+0x1b8>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d04a      	beq.n	80021dc <HAL_DMA_Init+0x174>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a36      	ldr	r2, [pc, #216]	; (8002224 <HAL_DMA_Init+0x1bc>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d045      	beq.n	80021dc <HAL_DMA_Init+0x174>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a34      	ldr	r2, [pc, #208]	; (8002228 <HAL_DMA_Init+0x1c0>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d040      	beq.n	80021dc <HAL_DMA_Init+0x174>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a33      	ldr	r2, [pc, #204]	; (800222c <HAL_DMA_Init+0x1c4>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d03b      	beq.n	80021dc <HAL_DMA_Init+0x174>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a31      	ldr	r2, [pc, #196]	; (8002230 <HAL_DMA_Init+0x1c8>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d036      	beq.n	80021dc <HAL_DMA_Init+0x174>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a30      	ldr	r2, [pc, #192]	; (8002234 <HAL_DMA_Init+0x1cc>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d031      	beq.n	80021dc <HAL_DMA_Init+0x174>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a2e      	ldr	r2, [pc, #184]	; (8002238 <HAL_DMA_Init+0x1d0>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d02c      	beq.n	80021dc <HAL_DMA_Init+0x174>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a2d      	ldr	r2, [pc, #180]	; (800223c <HAL_DMA_Init+0x1d4>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d027      	beq.n	80021dc <HAL_DMA_Init+0x174>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a2b      	ldr	r2, [pc, #172]	; (8002240 <HAL_DMA_Init+0x1d8>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d022      	beq.n	80021dc <HAL_DMA_Init+0x174>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a2a      	ldr	r2, [pc, #168]	; (8002244 <HAL_DMA_Init+0x1dc>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d01d      	beq.n	80021dc <HAL_DMA_Init+0x174>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a28      	ldr	r2, [pc, #160]	; (8002248 <HAL_DMA_Init+0x1e0>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d018      	beq.n	80021dc <HAL_DMA_Init+0x174>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a27      	ldr	r2, [pc, #156]	; (800224c <HAL_DMA_Init+0x1e4>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d013      	beq.n	80021dc <HAL_DMA_Init+0x174>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a25      	ldr	r2, [pc, #148]	; (8002250 <HAL_DMA_Init+0x1e8>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d00e      	beq.n	80021dc <HAL_DMA_Init+0x174>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a24      	ldr	r2, [pc, #144]	; (8002254 <HAL_DMA_Init+0x1ec>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d009      	beq.n	80021dc <HAL_DMA_Init+0x174>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a22      	ldr	r2, [pc, #136]	; (8002258 <HAL_DMA_Init+0x1f0>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d004      	beq.n	80021dc <HAL_DMA_Init+0x174>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a21      	ldr	r2, [pc, #132]	; (800225c <HAL_DMA_Init+0x1f4>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d108      	bne.n	80021ee <HAL_DMA_Init+0x186>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 0201 	bic.w	r2, r2, #1
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	e007      	b.n	80021fe <HAL_DMA_Init+0x196>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f022 0201 	bic.w	r2, r2, #1
 80021fc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80021fe:	e02f      	b.n	8002260 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002200:	f7ff fe02 	bl	8001e08 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b05      	cmp	r3, #5
 800220c:	d928      	bls.n	8002260 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2220      	movs	r2, #32
 8002212:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2203      	movs	r2, #3
 8002218:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e246      	b.n	80026ae <HAL_DMA_Init+0x646>
 8002220:	40020010 	.word	0x40020010
 8002224:	40020028 	.word	0x40020028
 8002228:	40020040 	.word	0x40020040
 800222c:	40020058 	.word	0x40020058
 8002230:	40020070 	.word	0x40020070
 8002234:	40020088 	.word	0x40020088
 8002238:	400200a0 	.word	0x400200a0
 800223c:	400200b8 	.word	0x400200b8
 8002240:	40020410 	.word	0x40020410
 8002244:	40020428 	.word	0x40020428
 8002248:	40020440 	.word	0x40020440
 800224c:	40020458 	.word	0x40020458
 8002250:	40020470 	.word	0x40020470
 8002254:	40020488 	.word	0x40020488
 8002258:	400204a0 	.word	0x400204a0
 800225c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1c8      	bne.n	8002200 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	4b83      	ldr	r3, [pc, #524]	; (8002488 <HAL_DMA_Init+0x420>)
 800227a:	4013      	ands	r3, r2
 800227c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002286:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	691b      	ldr	r3, [r3, #16]
 800228c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002292:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800229e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a1b      	ldr	r3, [r3, #32]
 80022a4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b0:	2b04      	cmp	r3, #4
 80022b2:	d107      	bne.n	80022c4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022bc:	4313      	orrs	r3, r2
 80022be:	697a      	ldr	r2, [r7, #20]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80022c4:	4b71      	ldr	r3, [pc, #452]	; (800248c <HAL_DMA_Init+0x424>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	4b71      	ldr	r3, [pc, #452]	; (8002490 <HAL_DMA_Init+0x428>)
 80022ca:	4013      	ands	r3, r2
 80022cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022d0:	d328      	bcc.n	8002324 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	2b28      	cmp	r3, #40	; 0x28
 80022d8:	d903      	bls.n	80022e2 <HAL_DMA_Init+0x27a>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b2e      	cmp	r3, #46	; 0x2e
 80022e0:	d917      	bls.n	8002312 <HAL_DMA_Init+0x2aa>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	2b3e      	cmp	r3, #62	; 0x3e
 80022e8:	d903      	bls.n	80022f2 <HAL_DMA_Init+0x28a>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2b42      	cmp	r3, #66	; 0x42
 80022f0:	d90f      	bls.n	8002312 <HAL_DMA_Init+0x2aa>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2b46      	cmp	r3, #70	; 0x46
 80022f8:	d903      	bls.n	8002302 <HAL_DMA_Init+0x29a>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	2b48      	cmp	r3, #72	; 0x48
 8002300:	d907      	bls.n	8002312 <HAL_DMA_Init+0x2aa>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2b4e      	cmp	r3, #78	; 0x4e
 8002308:	d905      	bls.n	8002316 <HAL_DMA_Init+0x2ae>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2b52      	cmp	r3, #82	; 0x52
 8002310:	d801      	bhi.n	8002316 <HAL_DMA_Init+0x2ae>
 8002312:	2301      	movs	r3, #1
 8002314:	e000      	b.n	8002318 <HAL_DMA_Init+0x2b0>
 8002316:	2300      	movs	r3, #0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d003      	beq.n	8002324 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002322:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	f023 0307 	bic.w	r3, r3, #7
 800233a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002340:	697a      	ldr	r2, [r7, #20]
 8002342:	4313      	orrs	r3, r2
 8002344:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234a:	2b04      	cmp	r3, #4
 800234c:	d117      	bne.n	800237e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002352:	697a      	ldr	r2, [r7, #20]
 8002354:	4313      	orrs	r3, r2
 8002356:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00e      	beq.n	800237e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f002 fb33 	bl	80049cc <DMA_CheckFifoParam>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d008      	beq.n	800237e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2240      	movs	r2, #64	; 0x40
 8002370:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e197      	b.n	80026ae <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f002 fa6e 	bl	8004868 <DMA_CalcBaseAndBitshift>
 800238c:	4603      	mov	r3, r0
 800238e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002394:	f003 031f 	and.w	r3, r3, #31
 8002398:	223f      	movs	r2, #63	; 0x3f
 800239a:	409a      	lsls	r2, r3
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	609a      	str	r2, [r3, #8]
 80023a0:	e0cd      	b.n	800253e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a3b      	ldr	r2, [pc, #236]	; (8002494 <HAL_DMA_Init+0x42c>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d022      	beq.n	80023f2 <HAL_DMA_Init+0x38a>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a39      	ldr	r2, [pc, #228]	; (8002498 <HAL_DMA_Init+0x430>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d01d      	beq.n	80023f2 <HAL_DMA_Init+0x38a>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a38      	ldr	r2, [pc, #224]	; (800249c <HAL_DMA_Init+0x434>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d018      	beq.n	80023f2 <HAL_DMA_Init+0x38a>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a36      	ldr	r2, [pc, #216]	; (80024a0 <HAL_DMA_Init+0x438>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d013      	beq.n	80023f2 <HAL_DMA_Init+0x38a>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a35      	ldr	r2, [pc, #212]	; (80024a4 <HAL_DMA_Init+0x43c>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d00e      	beq.n	80023f2 <HAL_DMA_Init+0x38a>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a33      	ldr	r2, [pc, #204]	; (80024a8 <HAL_DMA_Init+0x440>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d009      	beq.n	80023f2 <HAL_DMA_Init+0x38a>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a32      	ldr	r2, [pc, #200]	; (80024ac <HAL_DMA_Init+0x444>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d004      	beq.n	80023f2 <HAL_DMA_Init+0x38a>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a30      	ldr	r2, [pc, #192]	; (80024b0 <HAL_DMA_Init+0x448>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d101      	bne.n	80023f6 <HAL_DMA_Init+0x38e>
 80023f2:	2301      	movs	r3, #1
 80023f4:	e000      	b.n	80023f8 <HAL_DMA_Init+0x390>
 80023f6:	2300      	movs	r3, #0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	f000 8097 	beq.w	800252c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a24      	ldr	r2, [pc, #144]	; (8002494 <HAL_DMA_Init+0x42c>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d021      	beq.n	800244c <HAL_DMA_Init+0x3e4>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a22      	ldr	r2, [pc, #136]	; (8002498 <HAL_DMA_Init+0x430>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d01c      	beq.n	800244c <HAL_DMA_Init+0x3e4>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a21      	ldr	r2, [pc, #132]	; (800249c <HAL_DMA_Init+0x434>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d017      	beq.n	800244c <HAL_DMA_Init+0x3e4>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a1f      	ldr	r2, [pc, #124]	; (80024a0 <HAL_DMA_Init+0x438>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d012      	beq.n	800244c <HAL_DMA_Init+0x3e4>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a1e      	ldr	r2, [pc, #120]	; (80024a4 <HAL_DMA_Init+0x43c>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d00d      	beq.n	800244c <HAL_DMA_Init+0x3e4>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a1c      	ldr	r2, [pc, #112]	; (80024a8 <HAL_DMA_Init+0x440>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d008      	beq.n	800244c <HAL_DMA_Init+0x3e4>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a1b      	ldr	r2, [pc, #108]	; (80024ac <HAL_DMA_Init+0x444>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d003      	beq.n	800244c <HAL_DMA_Init+0x3e4>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a19      	ldr	r2, [pc, #100]	; (80024b0 <HAL_DMA_Init+0x448>)
 800244a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2202      	movs	r2, #2
 8002450:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002464:	697a      	ldr	r2, [r7, #20]
 8002466:	4b13      	ldr	r3, [pc, #76]	; (80024b4 <HAL_DMA_Init+0x44c>)
 8002468:	4013      	ands	r3, r2
 800246a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	2b40      	cmp	r3, #64	; 0x40
 8002472:	d021      	beq.n	80024b8 <HAL_DMA_Init+0x450>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	2b80      	cmp	r3, #128	; 0x80
 800247a:	d102      	bne.n	8002482 <HAL_DMA_Init+0x41a>
 800247c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002480:	e01b      	b.n	80024ba <HAL_DMA_Init+0x452>
 8002482:	2300      	movs	r3, #0
 8002484:	e019      	b.n	80024ba <HAL_DMA_Init+0x452>
 8002486:	bf00      	nop
 8002488:	fe10803f 	.word	0xfe10803f
 800248c:	5c001000 	.word	0x5c001000
 8002490:	ffff0000 	.word	0xffff0000
 8002494:	58025408 	.word	0x58025408
 8002498:	5802541c 	.word	0x5802541c
 800249c:	58025430 	.word	0x58025430
 80024a0:	58025444 	.word	0x58025444
 80024a4:	58025458 	.word	0x58025458
 80024a8:	5802546c 	.word	0x5802546c
 80024ac:	58025480 	.word	0x58025480
 80024b0:	58025494 	.word	0x58025494
 80024b4:	fffe000f 	.word	0xfffe000f
 80024b8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	68d2      	ldr	r2, [r2, #12]
 80024be:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80024c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80024c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80024d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80024d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80024e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a1b      	ldr	r3, [r3, #32]
 80024e6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80024e8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	697a      	ldr	r2, [r7, #20]
 80024f6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	461a      	mov	r2, r3
 80024fe:	4b6e      	ldr	r3, [pc, #440]	; (80026b8 <HAL_DMA_Init+0x650>)
 8002500:	4413      	add	r3, r2
 8002502:	4a6e      	ldr	r2, [pc, #440]	; (80026bc <HAL_DMA_Init+0x654>)
 8002504:	fba2 2303 	umull	r2, r3, r2, r3
 8002508:	091b      	lsrs	r3, r3, #4
 800250a:	009a      	lsls	r2, r3, #2
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f002 f9a9 	bl	8004868 <DMA_CalcBaseAndBitshift>
 8002516:	4603      	mov	r3, r0
 8002518:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800251e:	f003 031f 	and.w	r3, r3, #31
 8002522:	2201      	movs	r2, #1
 8002524:	409a      	lsls	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	605a      	str	r2, [r3, #4]
 800252a:	e008      	b.n	800253e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2240      	movs	r2, #64	; 0x40
 8002530:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2203      	movs	r2, #3
 8002536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e0b7      	b.n	80026ae <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a5f      	ldr	r2, [pc, #380]	; (80026c0 <HAL_DMA_Init+0x658>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d072      	beq.n	800262e <HAL_DMA_Init+0x5c6>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a5d      	ldr	r2, [pc, #372]	; (80026c4 <HAL_DMA_Init+0x65c>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d06d      	beq.n	800262e <HAL_DMA_Init+0x5c6>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a5c      	ldr	r2, [pc, #368]	; (80026c8 <HAL_DMA_Init+0x660>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d068      	beq.n	800262e <HAL_DMA_Init+0x5c6>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a5a      	ldr	r2, [pc, #360]	; (80026cc <HAL_DMA_Init+0x664>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d063      	beq.n	800262e <HAL_DMA_Init+0x5c6>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a59      	ldr	r2, [pc, #356]	; (80026d0 <HAL_DMA_Init+0x668>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d05e      	beq.n	800262e <HAL_DMA_Init+0x5c6>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a57      	ldr	r2, [pc, #348]	; (80026d4 <HAL_DMA_Init+0x66c>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d059      	beq.n	800262e <HAL_DMA_Init+0x5c6>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a56      	ldr	r2, [pc, #344]	; (80026d8 <HAL_DMA_Init+0x670>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d054      	beq.n	800262e <HAL_DMA_Init+0x5c6>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a54      	ldr	r2, [pc, #336]	; (80026dc <HAL_DMA_Init+0x674>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d04f      	beq.n	800262e <HAL_DMA_Init+0x5c6>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a53      	ldr	r2, [pc, #332]	; (80026e0 <HAL_DMA_Init+0x678>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d04a      	beq.n	800262e <HAL_DMA_Init+0x5c6>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a51      	ldr	r2, [pc, #324]	; (80026e4 <HAL_DMA_Init+0x67c>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d045      	beq.n	800262e <HAL_DMA_Init+0x5c6>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a50      	ldr	r2, [pc, #320]	; (80026e8 <HAL_DMA_Init+0x680>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d040      	beq.n	800262e <HAL_DMA_Init+0x5c6>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a4e      	ldr	r2, [pc, #312]	; (80026ec <HAL_DMA_Init+0x684>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d03b      	beq.n	800262e <HAL_DMA_Init+0x5c6>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a4d      	ldr	r2, [pc, #308]	; (80026f0 <HAL_DMA_Init+0x688>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d036      	beq.n	800262e <HAL_DMA_Init+0x5c6>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a4b      	ldr	r2, [pc, #300]	; (80026f4 <HAL_DMA_Init+0x68c>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d031      	beq.n	800262e <HAL_DMA_Init+0x5c6>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a4a      	ldr	r2, [pc, #296]	; (80026f8 <HAL_DMA_Init+0x690>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d02c      	beq.n	800262e <HAL_DMA_Init+0x5c6>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a48      	ldr	r2, [pc, #288]	; (80026fc <HAL_DMA_Init+0x694>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d027      	beq.n	800262e <HAL_DMA_Init+0x5c6>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a47      	ldr	r2, [pc, #284]	; (8002700 <HAL_DMA_Init+0x698>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d022      	beq.n	800262e <HAL_DMA_Init+0x5c6>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a45      	ldr	r2, [pc, #276]	; (8002704 <HAL_DMA_Init+0x69c>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d01d      	beq.n	800262e <HAL_DMA_Init+0x5c6>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a44      	ldr	r2, [pc, #272]	; (8002708 <HAL_DMA_Init+0x6a0>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d018      	beq.n	800262e <HAL_DMA_Init+0x5c6>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a42      	ldr	r2, [pc, #264]	; (800270c <HAL_DMA_Init+0x6a4>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d013      	beq.n	800262e <HAL_DMA_Init+0x5c6>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a41      	ldr	r2, [pc, #260]	; (8002710 <HAL_DMA_Init+0x6a8>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d00e      	beq.n	800262e <HAL_DMA_Init+0x5c6>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a3f      	ldr	r2, [pc, #252]	; (8002714 <HAL_DMA_Init+0x6ac>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d009      	beq.n	800262e <HAL_DMA_Init+0x5c6>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a3e      	ldr	r2, [pc, #248]	; (8002718 <HAL_DMA_Init+0x6b0>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d004      	beq.n	800262e <HAL_DMA_Init+0x5c6>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a3c      	ldr	r2, [pc, #240]	; (800271c <HAL_DMA_Init+0x6b4>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d101      	bne.n	8002632 <HAL_DMA_Init+0x5ca>
 800262e:	2301      	movs	r3, #1
 8002630:	e000      	b.n	8002634 <HAL_DMA_Init+0x5cc>
 8002632:	2300      	movs	r3, #0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d032      	beq.n	800269e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f002 fa43 	bl	8004ac4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	2b80      	cmp	r3, #128	; 0x80
 8002644:	d102      	bne.n	800264c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685a      	ldr	r2, [r3, #4]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002654:	b2d2      	uxtb	r2, r2
 8002656:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002660:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d010      	beq.n	800268c <HAL_DMA_Init+0x624>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2b08      	cmp	r3, #8
 8002670:	d80c      	bhi.n	800268c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f002 fac0 	bl	8004bf8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002688:	605a      	str	r2, [r3, #4]
 800268a:	e008      	b.n	800269e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3718      	adds	r7, #24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	a7fdabf8 	.word	0xa7fdabf8
 80026bc:	cccccccd 	.word	0xcccccccd
 80026c0:	40020010 	.word	0x40020010
 80026c4:	40020028 	.word	0x40020028
 80026c8:	40020040 	.word	0x40020040
 80026cc:	40020058 	.word	0x40020058
 80026d0:	40020070 	.word	0x40020070
 80026d4:	40020088 	.word	0x40020088
 80026d8:	400200a0 	.word	0x400200a0
 80026dc:	400200b8 	.word	0x400200b8
 80026e0:	40020410 	.word	0x40020410
 80026e4:	40020428 	.word	0x40020428
 80026e8:	40020440 	.word	0x40020440
 80026ec:	40020458 	.word	0x40020458
 80026f0:	40020470 	.word	0x40020470
 80026f4:	40020488 	.word	0x40020488
 80026f8:	400204a0 	.word	0x400204a0
 80026fc:	400204b8 	.word	0x400204b8
 8002700:	58025408 	.word	0x58025408
 8002704:	5802541c 	.word	0x5802541c
 8002708:	58025430 	.word	0x58025430
 800270c:	58025444 	.word	0x58025444
 8002710:	58025458 	.word	0x58025458
 8002714:	5802546c 	.word	0x5802546c
 8002718:	58025480 	.word	0x58025480
 800271c:	58025494 	.word	0x58025494

08002720 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
 800272c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800272e:	2300      	movs	r3, #0
 8002730:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e226      	b.n	8002b8a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002742:	2b01      	cmp	r3, #1
 8002744:	d101      	bne.n	800274a <HAL_DMA_Start_IT+0x2a>
 8002746:	2302      	movs	r3, #2
 8002748:	e21f      	b.n	8002b8a <HAL_DMA_Start_IT+0x46a>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b01      	cmp	r3, #1
 800275c:	f040 820a 	bne.w	8002b74 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2202      	movs	r2, #2
 8002764:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a68      	ldr	r2, [pc, #416]	; (8002914 <HAL_DMA_Start_IT+0x1f4>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d04a      	beq.n	800280e <HAL_DMA_Start_IT+0xee>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a66      	ldr	r2, [pc, #408]	; (8002918 <HAL_DMA_Start_IT+0x1f8>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d045      	beq.n	800280e <HAL_DMA_Start_IT+0xee>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a65      	ldr	r2, [pc, #404]	; (800291c <HAL_DMA_Start_IT+0x1fc>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d040      	beq.n	800280e <HAL_DMA_Start_IT+0xee>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a63      	ldr	r2, [pc, #396]	; (8002920 <HAL_DMA_Start_IT+0x200>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d03b      	beq.n	800280e <HAL_DMA_Start_IT+0xee>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a62      	ldr	r2, [pc, #392]	; (8002924 <HAL_DMA_Start_IT+0x204>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d036      	beq.n	800280e <HAL_DMA_Start_IT+0xee>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a60      	ldr	r2, [pc, #384]	; (8002928 <HAL_DMA_Start_IT+0x208>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d031      	beq.n	800280e <HAL_DMA_Start_IT+0xee>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a5f      	ldr	r2, [pc, #380]	; (800292c <HAL_DMA_Start_IT+0x20c>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d02c      	beq.n	800280e <HAL_DMA_Start_IT+0xee>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a5d      	ldr	r2, [pc, #372]	; (8002930 <HAL_DMA_Start_IT+0x210>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d027      	beq.n	800280e <HAL_DMA_Start_IT+0xee>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a5c      	ldr	r2, [pc, #368]	; (8002934 <HAL_DMA_Start_IT+0x214>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d022      	beq.n	800280e <HAL_DMA_Start_IT+0xee>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a5a      	ldr	r2, [pc, #360]	; (8002938 <HAL_DMA_Start_IT+0x218>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d01d      	beq.n	800280e <HAL_DMA_Start_IT+0xee>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a59      	ldr	r2, [pc, #356]	; (800293c <HAL_DMA_Start_IT+0x21c>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d018      	beq.n	800280e <HAL_DMA_Start_IT+0xee>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a57      	ldr	r2, [pc, #348]	; (8002940 <HAL_DMA_Start_IT+0x220>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d013      	beq.n	800280e <HAL_DMA_Start_IT+0xee>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a56      	ldr	r2, [pc, #344]	; (8002944 <HAL_DMA_Start_IT+0x224>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d00e      	beq.n	800280e <HAL_DMA_Start_IT+0xee>
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a54      	ldr	r2, [pc, #336]	; (8002948 <HAL_DMA_Start_IT+0x228>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d009      	beq.n	800280e <HAL_DMA_Start_IT+0xee>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a53      	ldr	r2, [pc, #332]	; (800294c <HAL_DMA_Start_IT+0x22c>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d004      	beq.n	800280e <HAL_DMA_Start_IT+0xee>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a51      	ldr	r2, [pc, #324]	; (8002950 <HAL_DMA_Start_IT+0x230>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d108      	bne.n	8002820 <HAL_DMA_Start_IT+0x100>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 0201 	bic.w	r2, r2, #1
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	e007      	b.n	8002830 <HAL_DMA_Start_IT+0x110>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f022 0201 	bic.w	r2, r2, #1
 800282e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	68b9      	ldr	r1, [r7, #8]
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f001 fe6a 	bl	8004510 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a34      	ldr	r2, [pc, #208]	; (8002914 <HAL_DMA_Start_IT+0x1f4>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d04a      	beq.n	80028dc <HAL_DMA_Start_IT+0x1bc>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a33      	ldr	r2, [pc, #204]	; (8002918 <HAL_DMA_Start_IT+0x1f8>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d045      	beq.n	80028dc <HAL_DMA_Start_IT+0x1bc>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a31      	ldr	r2, [pc, #196]	; (800291c <HAL_DMA_Start_IT+0x1fc>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d040      	beq.n	80028dc <HAL_DMA_Start_IT+0x1bc>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a30      	ldr	r2, [pc, #192]	; (8002920 <HAL_DMA_Start_IT+0x200>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d03b      	beq.n	80028dc <HAL_DMA_Start_IT+0x1bc>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a2e      	ldr	r2, [pc, #184]	; (8002924 <HAL_DMA_Start_IT+0x204>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d036      	beq.n	80028dc <HAL_DMA_Start_IT+0x1bc>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a2d      	ldr	r2, [pc, #180]	; (8002928 <HAL_DMA_Start_IT+0x208>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d031      	beq.n	80028dc <HAL_DMA_Start_IT+0x1bc>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a2b      	ldr	r2, [pc, #172]	; (800292c <HAL_DMA_Start_IT+0x20c>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d02c      	beq.n	80028dc <HAL_DMA_Start_IT+0x1bc>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a2a      	ldr	r2, [pc, #168]	; (8002930 <HAL_DMA_Start_IT+0x210>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d027      	beq.n	80028dc <HAL_DMA_Start_IT+0x1bc>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a28      	ldr	r2, [pc, #160]	; (8002934 <HAL_DMA_Start_IT+0x214>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d022      	beq.n	80028dc <HAL_DMA_Start_IT+0x1bc>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a27      	ldr	r2, [pc, #156]	; (8002938 <HAL_DMA_Start_IT+0x218>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d01d      	beq.n	80028dc <HAL_DMA_Start_IT+0x1bc>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a25      	ldr	r2, [pc, #148]	; (800293c <HAL_DMA_Start_IT+0x21c>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d018      	beq.n	80028dc <HAL_DMA_Start_IT+0x1bc>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a24      	ldr	r2, [pc, #144]	; (8002940 <HAL_DMA_Start_IT+0x220>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d013      	beq.n	80028dc <HAL_DMA_Start_IT+0x1bc>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a22      	ldr	r2, [pc, #136]	; (8002944 <HAL_DMA_Start_IT+0x224>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d00e      	beq.n	80028dc <HAL_DMA_Start_IT+0x1bc>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a21      	ldr	r2, [pc, #132]	; (8002948 <HAL_DMA_Start_IT+0x228>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d009      	beq.n	80028dc <HAL_DMA_Start_IT+0x1bc>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a1f      	ldr	r2, [pc, #124]	; (800294c <HAL_DMA_Start_IT+0x22c>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d004      	beq.n	80028dc <HAL_DMA_Start_IT+0x1bc>
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a1e      	ldr	r2, [pc, #120]	; (8002950 <HAL_DMA_Start_IT+0x230>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d101      	bne.n	80028e0 <HAL_DMA_Start_IT+0x1c0>
 80028dc:	2301      	movs	r3, #1
 80028de:	e000      	b.n	80028e2 <HAL_DMA_Start_IT+0x1c2>
 80028e0:	2300      	movs	r3, #0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d036      	beq.n	8002954 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f023 021e 	bic.w	r2, r3, #30
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f042 0216 	orr.w	r2, r2, #22
 80028f8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d03e      	beq.n	8002980 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f042 0208 	orr.w	r2, r2, #8
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	e035      	b.n	8002980 <HAL_DMA_Start_IT+0x260>
 8002914:	40020010 	.word	0x40020010
 8002918:	40020028 	.word	0x40020028
 800291c:	40020040 	.word	0x40020040
 8002920:	40020058 	.word	0x40020058
 8002924:	40020070 	.word	0x40020070
 8002928:	40020088 	.word	0x40020088
 800292c:	400200a0 	.word	0x400200a0
 8002930:	400200b8 	.word	0x400200b8
 8002934:	40020410 	.word	0x40020410
 8002938:	40020428 	.word	0x40020428
 800293c:	40020440 	.word	0x40020440
 8002940:	40020458 	.word	0x40020458
 8002944:	40020470 	.word	0x40020470
 8002948:	40020488 	.word	0x40020488
 800294c:	400204a0 	.word	0x400204a0
 8002950:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f023 020e 	bic.w	r2, r3, #14
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f042 020a 	orr.w	r2, r2, #10
 8002966:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296c:	2b00      	cmp	r3, #0
 800296e:	d007      	beq.n	8002980 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f042 0204 	orr.w	r2, r2, #4
 800297e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a83      	ldr	r2, [pc, #524]	; (8002b94 <HAL_DMA_Start_IT+0x474>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d072      	beq.n	8002a70 <HAL_DMA_Start_IT+0x350>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a82      	ldr	r2, [pc, #520]	; (8002b98 <HAL_DMA_Start_IT+0x478>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d06d      	beq.n	8002a70 <HAL_DMA_Start_IT+0x350>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a80      	ldr	r2, [pc, #512]	; (8002b9c <HAL_DMA_Start_IT+0x47c>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d068      	beq.n	8002a70 <HAL_DMA_Start_IT+0x350>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a7f      	ldr	r2, [pc, #508]	; (8002ba0 <HAL_DMA_Start_IT+0x480>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d063      	beq.n	8002a70 <HAL_DMA_Start_IT+0x350>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a7d      	ldr	r2, [pc, #500]	; (8002ba4 <HAL_DMA_Start_IT+0x484>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d05e      	beq.n	8002a70 <HAL_DMA_Start_IT+0x350>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a7c      	ldr	r2, [pc, #496]	; (8002ba8 <HAL_DMA_Start_IT+0x488>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d059      	beq.n	8002a70 <HAL_DMA_Start_IT+0x350>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a7a      	ldr	r2, [pc, #488]	; (8002bac <HAL_DMA_Start_IT+0x48c>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d054      	beq.n	8002a70 <HAL_DMA_Start_IT+0x350>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a79      	ldr	r2, [pc, #484]	; (8002bb0 <HAL_DMA_Start_IT+0x490>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d04f      	beq.n	8002a70 <HAL_DMA_Start_IT+0x350>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a77      	ldr	r2, [pc, #476]	; (8002bb4 <HAL_DMA_Start_IT+0x494>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d04a      	beq.n	8002a70 <HAL_DMA_Start_IT+0x350>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a76      	ldr	r2, [pc, #472]	; (8002bb8 <HAL_DMA_Start_IT+0x498>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d045      	beq.n	8002a70 <HAL_DMA_Start_IT+0x350>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a74      	ldr	r2, [pc, #464]	; (8002bbc <HAL_DMA_Start_IT+0x49c>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d040      	beq.n	8002a70 <HAL_DMA_Start_IT+0x350>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a73      	ldr	r2, [pc, #460]	; (8002bc0 <HAL_DMA_Start_IT+0x4a0>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d03b      	beq.n	8002a70 <HAL_DMA_Start_IT+0x350>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a71      	ldr	r2, [pc, #452]	; (8002bc4 <HAL_DMA_Start_IT+0x4a4>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d036      	beq.n	8002a70 <HAL_DMA_Start_IT+0x350>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a70      	ldr	r2, [pc, #448]	; (8002bc8 <HAL_DMA_Start_IT+0x4a8>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d031      	beq.n	8002a70 <HAL_DMA_Start_IT+0x350>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a6e      	ldr	r2, [pc, #440]	; (8002bcc <HAL_DMA_Start_IT+0x4ac>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d02c      	beq.n	8002a70 <HAL_DMA_Start_IT+0x350>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a6d      	ldr	r2, [pc, #436]	; (8002bd0 <HAL_DMA_Start_IT+0x4b0>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d027      	beq.n	8002a70 <HAL_DMA_Start_IT+0x350>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a6b      	ldr	r2, [pc, #428]	; (8002bd4 <HAL_DMA_Start_IT+0x4b4>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d022      	beq.n	8002a70 <HAL_DMA_Start_IT+0x350>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a6a      	ldr	r2, [pc, #424]	; (8002bd8 <HAL_DMA_Start_IT+0x4b8>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d01d      	beq.n	8002a70 <HAL_DMA_Start_IT+0x350>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a68      	ldr	r2, [pc, #416]	; (8002bdc <HAL_DMA_Start_IT+0x4bc>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d018      	beq.n	8002a70 <HAL_DMA_Start_IT+0x350>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a67      	ldr	r2, [pc, #412]	; (8002be0 <HAL_DMA_Start_IT+0x4c0>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d013      	beq.n	8002a70 <HAL_DMA_Start_IT+0x350>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a65      	ldr	r2, [pc, #404]	; (8002be4 <HAL_DMA_Start_IT+0x4c4>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d00e      	beq.n	8002a70 <HAL_DMA_Start_IT+0x350>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a64      	ldr	r2, [pc, #400]	; (8002be8 <HAL_DMA_Start_IT+0x4c8>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d009      	beq.n	8002a70 <HAL_DMA_Start_IT+0x350>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a62      	ldr	r2, [pc, #392]	; (8002bec <HAL_DMA_Start_IT+0x4cc>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d004      	beq.n	8002a70 <HAL_DMA_Start_IT+0x350>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a61      	ldr	r2, [pc, #388]	; (8002bf0 <HAL_DMA_Start_IT+0x4d0>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d101      	bne.n	8002a74 <HAL_DMA_Start_IT+0x354>
 8002a70:	2301      	movs	r3, #1
 8002a72:	e000      	b.n	8002a76 <HAL_DMA_Start_IT+0x356>
 8002a74:	2300      	movs	r3, #0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d01a      	beq.n	8002ab0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d007      	beq.n	8002a98 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a96:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d007      	beq.n	8002ab0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002aaa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002aae:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a37      	ldr	r2, [pc, #220]	; (8002b94 <HAL_DMA_Start_IT+0x474>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d04a      	beq.n	8002b50 <HAL_DMA_Start_IT+0x430>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a36      	ldr	r2, [pc, #216]	; (8002b98 <HAL_DMA_Start_IT+0x478>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d045      	beq.n	8002b50 <HAL_DMA_Start_IT+0x430>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a34      	ldr	r2, [pc, #208]	; (8002b9c <HAL_DMA_Start_IT+0x47c>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d040      	beq.n	8002b50 <HAL_DMA_Start_IT+0x430>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a33      	ldr	r2, [pc, #204]	; (8002ba0 <HAL_DMA_Start_IT+0x480>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d03b      	beq.n	8002b50 <HAL_DMA_Start_IT+0x430>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a31      	ldr	r2, [pc, #196]	; (8002ba4 <HAL_DMA_Start_IT+0x484>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d036      	beq.n	8002b50 <HAL_DMA_Start_IT+0x430>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a30      	ldr	r2, [pc, #192]	; (8002ba8 <HAL_DMA_Start_IT+0x488>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d031      	beq.n	8002b50 <HAL_DMA_Start_IT+0x430>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a2e      	ldr	r2, [pc, #184]	; (8002bac <HAL_DMA_Start_IT+0x48c>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d02c      	beq.n	8002b50 <HAL_DMA_Start_IT+0x430>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a2d      	ldr	r2, [pc, #180]	; (8002bb0 <HAL_DMA_Start_IT+0x490>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d027      	beq.n	8002b50 <HAL_DMA_Start_IT+0x430>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a2b      	ldr	r2, [pc, #172]	; (8002bb4 <HAL_DMA_Start_IT+0x494>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d022      	beq.n	8002b50 <HAL_DMA_Start_IT+0x430>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a2a      	ldr	r2, [pc, #168]	; (8002bb8 <HAL_DMA_Start_IT+0x498>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d01d      	beq.n	8002b50 <HAL_DMA_Start_IT+0x430>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a28      	ldr	r2, [pc, #160]	; (8002bbc <HAL_DMA_Start_IT+0x49c>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d018      	beq.n	8002b50 <HAL_DMA_Start_IT+0x430>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a27      	ldr	r2, [pc, #156]	; (8002bc0 <HAL_DMA_Start_IT+0x4a0>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d013      	beq.n	8002b50 <HAL_DMA_Start_IT+0x430>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a25      	ldr	r2, [pc, #148]	; (8002bc4 <HAL_DMA_Start_IT+0x4a4>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d00e      	beq.n	8002b50 <HAL_DMA_Start_IT+0x430>
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a24      	ldr	r2, [pc, #144]	; (8002bc8 <HAL_DMA_Start_IT+0x4a8>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d009      	beq.n	8002b50 <HAL_DMA_Start_IT+0x430>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a22      	ldr	r2, [pc, #136]	; (8002bcc <HAL_DMA_Start_IT+0x4ac>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d004      	beq.n	8002b50 <HAL_DMA_Start_IT+0x430>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a21      	ldr	r2, [pc, #132]	; (8002bd0 <HAL_DMA_Start_IT+0x4b0>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d108      	bne.n	8002b62 <HAL_DMA_Start_IT+0x442>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f042 0201 	orr.w	r2, r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	e012      	b.n	8002b88 <HAL_DMA_Start_IT+0x468>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f042 0201 	orr.w	r2, r2, #1
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	e009      	b.n	8002b88 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b7a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002b88:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3718      	adds	r7, #24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	40020010 	.word	0x40020010
 8002b98:	40020028 	.word	0x40020028
 8002b9c:	40020040 	.word	0x40020040
 8002ba0:	40020058 	.word	0x40020058
 8002ba4:	40020070 	.word	0x40020070
 8002ba8:	40020088 	.word	0x40020088
 8002bac:	400200a0 	.word	0x400200a0
 8002bb0:	400200b8 	.word	0x400200b8
 8002bb4:	40020410 	.word	0x40020410
 8002bb8:	40020428 	.word	0x40020428
 8002bbc:	40020440 	.word	0x40020440
 8002bc0:	40020458 	.word	0x40020458
 8002bc4:	40020470 	.word	0x40020470
 8002bc8:	40020488 	.word	0x40020488
 8002bcc:	400204a0 	.word	0x400204a0
 8002bd0:	400204b8 	.word	0x400204b8
 8002bd4:	58025408 	.word	0x58025408
 8002bd8:	5802541c 	.word	0x5802541c
 8002bdc:	58025430 	.word	0x58025430
 8002be0:	58025444 	.word	0x58025444
 8002be4:	58025458 	.word	0x58025458
 8002be8:	5802546c 	.word	0x5802546c
 8002bec:	58025480 	.word	0x58025480
 8002bf0:	58025494 	.word	0x58025494

08002bf4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002bfc:	f7ff f904 	bl	8001e08 <HAL_GetTick>
 8002c00:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d101      	bne.n	8002c0c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e2dc      	b.n	80031c6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d008      	beq.n	8002c2a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2280      	movs	r2, #128	; 0x80
 8002c1c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e2cd      	b.n	80031c6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a76      	ldr	r2, [pc, #472]	; (8002e08 <HAL_DMA_Abort+0x214>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d04a      	beq.n	8002cca <HAL_DMA_Abort+0xd6>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a74      	ldr	r2, [pc, #464]	; (8002e0c <HAL_DMA_Abort+0x218>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d045      	beq.n	8002cca <HAL_DMA_Abort+0xd6>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a73      	ldr	r2, [pc, #460]	; (8002e10 <HAL_DMA_Abort+0x21c>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d040      	beq.n	8002cca <HAL_DMA_Abort+0xd6>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a71      	ldr	r2, [pc, #452]	; (8002e14 <HAL_DMA_Abort+0x220>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d03b      	beq.n	8002cca <HAL_DMA_Abort+0xd6>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a70      	ldr	r2, [pc, #448]	; (8002e18 <HAL_DMA_Abort+0x224>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d036      	beq.n	8002cca <HAL_DMA_Abort+0xd6>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a6e      	ldr	r2, [pc, #440]	; (8002e1c <HAL_DMA_Abort+0x228>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d031      	beq.n	8002cca <HAL_DMA_Abort+0xd6>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a6d      	ldr	r2, [pc, #436]	; (8002e20 <HAL_DMA_Abort+0x22c>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d02c      	beq.n	8002cca <HAL_DMA_Abort+0xd6>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a6b      	ldr	r2, [pc, #428]	; (8002e24 <HAL_DMA_Abort+0x230>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d027      	beq.n	8002cca <HAL_DMA_Abort+0xd6>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a6a      	ldr	r2, [pc, #424]	; (8002e28 <HAL_DMA_Abort+0x234>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d022      	beq.n	8002cca <HAL_DMA_Abort+0xd6>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a68      	ldr	r2, [pc, #416]	; (8002e2c <HAL_DMA_Abort+0x238>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d01d      	beq.n	8002cca <HAL_DMA_Abort+0xd6>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a67      	ldr	r2, [pc, #412]	; (8002e30 <HAL_DMA_Abort+0x23c>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d018      	beq.n	8002cca <HAL_DMA_Abort+0xd6>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a65      	ldr	r2, [pc, #404]	; (8002e34 <HAL_DMA_Abort+0x240>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d013      	beq.n	8002cca <HAL_DMA_Abort+0xd6>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a64      	ldr	r2, [pc, #400]	; (8002e38 <HAL_DMA_Abort+0x244>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d00e      	beq.n	8002cca <HAL_DMA_Abort+0xd6>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a62      	ldr	r2, [pc, #392]	; (8002e3c <HAL_DMA_Abort+0x248>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d009      	beq.n	8002cca <HAL_DMA_Abort+0xd6>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a61      	ldr	r2, [pc, #388]	; (8002e40 <HAL_DMA_Abort+0x24c>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d004      	beq.n	8002cca <HAL_DMA_Abort+0xd6>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a5f      	ldr	r2, [pc, #380]	; (8002e44 <HAL_DMA_Abort+0x250>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d101      	bne.n	8002cce <HAL_DMA_Abort+0xda>
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e000      	b.n	8002cd0 <HAL_DMA_Abort+0xdc>
 8002cce:	2300      	movs	r3, #0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d013      	beq.n	8002cfc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 021e 	bic.w	r2, r2, #30
 8002ce2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	695a      	ldr	r2, [r3, #20]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cf2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	617b      	str	r3, [r7, #20]
 8002cfa:	e00a      	b.n	8002d12 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 020e 	bic.w	r2, r2, #14
 8002d0a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a3c      	ldr	r2, [pc, #240]	; (8002e08 <HAL_DMA_Abort+0x214>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d072      	beq.n	8002e02 <HAL_DMA_Abort+0x20e>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a3a      	ldr	r2, [pc, #232]	; (8002e0c <HAL_DMA_Abort+0x218>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d06d      	beq.n	8002e02 <HAL_DMA_Abort+0x20e>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a39      	ldr	r2, [pc, #228]	; (8002e10 <HAL_DMA_Abort+0x21c>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d068      	beq.n	8002e02 <HAL_DMA_Abort+0x20e>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a37      	ldr	r2, [pc, #220]	; (8002e14 <HAL_DMA_Abort+0x220>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d063      	beq.n	8002e02 <HAL_DMA_Abort+0x20e>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a36      	ldr	r2, [pc, #216]	; (8002e18 <HAL_DMA_Abort+0x224>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d05e      	beq.n	8002e02 <HAL_DMA_Abort+0x20e>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a34      	ldr	r2, [pc, #208]	; (8002e1c <HAL_DMA_Abort+0x228>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d059      	beq.n	8002e02 <HAL_DMA_Abort+0x20e>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a33      	ldr	r2, [pc, #204]	; (8002e20 <HAL_DMA_Abort+0x22c>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d054      	beq.n	8002e02 <HAL_DMA_Abort+0x20e>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a31      	ldr	r2, [pc, #196]	; (8002e24 <HAL_DMA_Abort+0x230>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d04f      	beq.n	8002e02 <HAL_DMA_Abort+0x20e>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a30      	ldr	r2, [pc, #192]	; (8002e28 <HAL_DMA_Abort+0x234>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d04a      	beq.n	8002e02 <HAL_DMA_Abort+0x20e>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a2e      	ldr	r2, [pc, #184]	; (8002e2c <HAL_DMA_Abort+0x238>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d045      	beq.n	8002e02 <HAL_DMA_Abort+0x20e>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a2d      	ldr	r2, [pc, #180]	; (8002e30 <HAL_DMA_Abort+0x23c>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d040      	beq.n	8002e02 <HAL_DMA_Abort+0x20e>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a2b      	ldr	r2, [pc, #172]	; (8002e34 <HAL_DMA_Abort+0x240>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d03b      	beq.n	8002e02 <HAL_DMA_Abort+0x20e>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a2a      	ldr	r2, [pc, #168]	; (8002e38 <HAL_DMA_Abort+0x244>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d036      	beq.n	8002e02 <HAL_DMA_Abort+0x20e>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a28      	ldr	r2, [pc, #160]	; (8002e3c <HAL_DMA_Abort+0x248>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d031      	beq.n	8002e02 <HAL_DMA_Abort+0x20e>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a27      	ldr	r2, [pc, #156]	; (8002e40 <HAL_DMA_Abort+0x24c>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d02c      	beq.n	8002e02 <HAL_DMA_Abort+0x20e>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a25      	ldr	r2, [pc, #148]	; (8002e44 <HAL_DMA_Abort+0x250>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d027      	beq.n	8002e02 <HAL_DMA_Abort+0x20e>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a24      	ldr	r2, [pc, #144]	; (8002e48 <HAL_DMA_Abort+0x254>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d022      	beq.n	8002e02 <HAL_DMA_Abort+0x20e>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a22      	ldr	r2, [pc, #136]	; (8002e4c <HAL_DMA_Abort+0x258>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d01d      	beq.n	8002e02 <HAL_DMA_Abort+0x20e>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a21      	ldr	r2, [pc, #132]	; (8002e50 <HAL_DMA_Abort+0x25c>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d018      	beq.n	8002e02 <HAL_DMA_Abort+0x20e>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a1f      	ldr	r2, [pc, #124]	; (8002e54 <HAL_DMA_Abort+0x260>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d013      	beq.n	8002e02 <HAL_DMA_Abort+0x20e>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a1e      	ldr	r2, [pc, #120]	; (8002e58 <HAL_DMA_Abort+0x264>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d00e      	beq.n	8002e02 <HAL_DMA_Abort+0x20e>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a1c      	ldr	r2, [pc, #112]	; (8002e5c <HAL_DMA_Abort+0x268>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d009      	beq.n	8002e02 <HAL_DMA_Abort+0x20e>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a1b      	ldr	r2, [pc, #108]	; (8002e60 <HAL_DMA_Abort+0x26c>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d004      	beq.n	8002e02 <HAL_DMA_Abort+0x20e>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a19      	ldr	r2, [pc, #100]	; (8002e64 <HAL_DMA_Abort+0x270>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d132      	bne.n	8002e68 <HAL_DMA_Abort+0x274>
 8002e02:	2301      	movs	r3, #1
 8002e04:	e031      	b.n	8002e6a <HAL_DMA_Abort+0x276>
 8002e06:	bf00      	nop
 8002e08:	40020010 	.word	0x40020010
 8002e0c:	40020028 	.word	0x40020028
 8002e10:	40020040 	.word	0x40020040
 8002e14:	40020058 	.word	0x40020058
 8002e18:	40020070 	.word	0x40020070
 8002e1c:	40020088 	.word	0x40020088
 8002e20:	400200a0 	.word	0x400200a0
 8002e24:	400200b8 	.word	0x400200b8
 8002e28:	40020410 	.word	0x40020410
 8002e2c:	40020428 	.word	0x40020428
 8002e30:	40020440 	.word	0x40020440
 8002e34:	40020458 	.word	0x40020458
 8002e38:	40020470 	.word	0x40020470
 8002e3c:	40020488 	.word	0x40020488
 8002e40:	400204a0 	.word	0x400204a0
 8002e44:	400204b8 	.word	0x400204b8
 8002e48:	58025408 	.word	0x58025408
 8002e4c:	5802541c 	.word	0x5802541c
 8002e50:	58025430 	.word	0x58025430
 8002e54:	58025444 	.word	0x58025444
 8002e58:	58025458 	.word	0x58025458
 8002e5c:	5802546c 	.word	0x5802546c
 8002e60:	58025480 	.word	0x58025480
 8002e64:	58025494 	.word	0x58025494
 8002e68:	2300      	movs	r3, #0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d007      	beq.n	8002e7e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e7c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a6d      	ldr	r2, [pc, #436]	; (8003038 <HAL_DMA_Abort+0x444>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d04a      	beq.n	8002f1e <HAL_DMA_Abort+0x32a>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a6b      	ldr	r2, [pc, #428]	; (800303c <HAL_DMA_Abort+0x448>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d045      	beq.n	8002f1e <HAL_DMA_Abort+0x32a>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a6a      	ldr	r2, [pc, #424]	; (8003040 <HAL_DMA_Abort+0x44c>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d040      	beq.n	8002f1e <HAL_DMA_Abort+0x32a>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a68      	ldr	r2, [pc, #416]	; (8003044 <HAL_DMA_Abort+0x450>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d03b      	beq.n	8002f1e <HAL_DMA_Abort+0x32a>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a67      	ldr	r2, [pc, #412]	; (8003048 <HAL_DMA_Abort+0x454>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d036      	beq.n	8002f1e <HAL_DMA_Abort+0x32a>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a65      	ldr	r2, [pc, #404]	; (800304c <HAL_DMA_Abort+0x458>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d031      	beq.n	8002f1e <HAL_DMA_Abort+0x32a>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a64      	ldr	r2, [pc, #400]	; (8003050 <HAL_DMA_Abort+0x45c>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d02c      	beq.n	8002f1e <HAL_DMA_Abort+0x32a>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a62      	ldr	r2, [pc, #392]	; (8003054 <HAL_DMA_Abort+0x460>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d027      	beq.n	8002f1e <HAL_DMA_Abort+0x32a>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a61      	ldr	r2, [pc, #388]	; (8003058 <HAL_DMA_Abort+0x464>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d022      	beq.n	8002f1e <HAL_DMA_Abort+0x32a>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a5f      	ldr	r2, [pc, #380]	; (800305c <HAL_DMA_Abort+0x468>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d01d      	beq.n	8002f1e <HAL_DMA_Abort+0x32a>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a5e      	ldr	r2, [pc, #376]	; (8003060 <HAL_DMA_Abort+0x46c>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d018      	beq.n	8002f1e <HAL_DMA_Abort+0x32a>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a5c      	ldr	r2, [pc, #368]	; (8003064 <HAL_DMA_Abort+0x470>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d013      	beq.n	8002f1e <HAL_DMA_Abort+0x32a>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a5b      	ldr	r2, [pc, #364]	; (8003068 <HAL_DMA_Abort+0x474>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d00e      	beq.n	8002f1e <HAL_DMA_Abort+0x32a>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a59      	ldr	r2, [pc, #356]	; (800306c <HAL_DMA_Abort+0x478>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d009      	beq.n	8002f1e <HAL_DMA_Abort+0x32a>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a58      	ldr	r2, [pc, #352]	; (8003070 <HAL_DMA_Abort+0x47c>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d004      	beq.n	8002f1e <HAL_DMA_Abort+0x32a>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a56      	ldr	r2, [pc, #344]	; (8003074 <HAL_DMA_Abort+0x480>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d108      	bne.n	8002f30 <HAL_DMA_Abort+0x33c>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 0201 	bic.w	r2, r2, #1
 8002f2c:	601a      	str	r2, [r3, #0]
 8002f2e:	e007      	b.n	8002f40 <HAL_DMA_Abort+0x34c>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 0201 	bic.w	r2, r2, #1
 8002f3e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002f40:	e013      	b.n	8002f6a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f42:	f7fe ff61 	bl	8001e08 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b05      	cmp	r3, #5
 8002f4e:	d90c      	bls.n	8002f6a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2220      	movs	r2, #32
 8002f54:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2203      	movs	r2, #3
 8002f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e12d      	b.n	80031c6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1e5      	bne.n	8002f42 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a2f      	ldr	r2, [pc, #188]	; (8003038 <HAL_DMA_Abort+0x444>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d04a      	beq.n	8003016 <HAL_DMA_Abort+0x422>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a2d      	ldr	r2, [pc, #180]	; (800303c <HAL_DMA_Abort+0x448>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d045      	beq.n	8003016 <HAL_DMA_Abort+0x422>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a2c      	ldr	r2, [pc, #176]	; (8003040 <HAL_DMA_Abort+0x44c>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d040      	beq.n	8003016 <HAL_DMA_Abort+0x422>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a2a      	ldr	r2, [pc, #168]	; (8003044 <HAL_DMA_Abort+0x450>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d03b      	beq.n	8003016 <HAL_DMA_Abort+0x422>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a29      	ldr	r2, [pc, #164]	; (8003048 <HAL_DMA_Abort+0x454>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d036      	beq.n	8003016 <HAL_DMA_Abort+0x422>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a27      	ldr	r2, [pc, #156]	; (800304c <HAL_DMA_Abort+0x458>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d031      	beq.n	8003016 <HAL_DMA_Abort+0x422>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a26      	ldr	r2, [pc, #152]	; (8003050 <HAL_DMA_Abort+0x45c>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d02c      	beq.n	8003016 <HAL_DMA_Abort+0x422>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a24      	ldr	r2, [pc, #144]	; (8003054 <HAL_DMA_Abort+0x460>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d027      	beq.n	8003016 <HAL_DMA_Abort+0x422>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a23      	ldr	r2, [pc, #140]	; (8003058 <HAL_DMA_Abort+0x464>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d022      	beq.n	8003016 <HAL_DMA_Abort+0x422>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a21      	ldr	r2, [pc, #132]	; (800305c <HAL_DMA_Abort+0x468>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d01d      	beq.n	8003016 <HAL_DMA_Abort+0x422>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a20      	ldr	r2, [pc, #128]	; (8003060 <HAL_DMA_Abort+0x46c>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d018      	beq.n	8003016 <HAL_DMA_Abort+0x422>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a1e      	ldr	r2, [pc, #120]	; (8003064 <HAL_DMA_Abort+0x470>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d013      	beq.n	8003016 <HAL_DMA_Abort+0x422>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a1d      	ldr	r2, [pc, #116]	; (8003068 <HAL_DMA_Abort+0x474>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d00e      	beq.n	8003016 <HAL_DMA_Abort+0x422>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a1b      	ldr	r2, [pc, #108]	; (800306c <HAL_DMA_Abort+0x478>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d009      	beq.n	8003016 <HAL_DMA_Abort+0x422>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a1a      	ldr	r2, [pc, #104]	; (8003070 <HAL_DMA_Abort+0x47c>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d004      	beq.n	8003016 <HAL_DMA_Abort+0x422>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a18      	ldr	r2, [pc, #96]	; (8003074 <HAL_DMA_Abort+0x480>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d101      	bne.n	800301a <HAL_DMA_Abort+0x426>
 8003016:	2301      	movs	r3, #1
 8003018:	e000      	b.n	800301c <HAL_DMA_Abort+0x428>
 800301a:	2300      	movs	r3, #0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d02b      	beq.n	8003078 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003024:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800302a:	f003 031f 	and.w	r3, r3, #31
 800302e:	223f      	movs	r2, #63	; 0x3f
 8003030:	409a      	lsls	r2, r3
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	609a      	str	r2, [r3, #8]
 8003036:	e02a      	b.n	800308e <HAL_DMA_Abort+0x49a>
 8003038:	40020010 	.word	0x40020010
 800303c:	40020028 	.word	0x40020028
 8003040:	40020040 	.word	0x40020040
 8003044:	40020058 	.word	0x40020058
 8003048:	40020070 	.word	0x40020070
 800304c:	40020088 	.word	0x40020088
 8003050:	400200a0 	.word	0x400200a0
 8003054:	400200b8 	.word	0x400200b8
 8003058:	40020410 	.word	0x40020410
 800305c:	40020428 	.word	0x40020428
 8003060:	40020440 	.word	0x40020440
 8003064:	40020458 	.word	0x40020458
 8003068:	40020470 	.word	0x40020470
 800306c:	40020488 	.word	0x40020488
 8003070:	400204a0 	.word	0x400204a0
 8003074:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800307c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003082:	f003 031f 	and.w	r3, r3, #31
 8003086:	2201      	movs	r2, #1
 8003088:	409a      	lsls	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a4f      	ldr	r2, [pc, #316]	; (80031d0 <HAL_DMA_Abort+0x5dc>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d072      	beq.n	800317e <HAL_DMA_Abort+0x58a>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a4d      	ldr	r2, [pc, #308]	; (80031d4 <HAL_DMA_Abort+0x5e0>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d06d      	beq.n	800317e <HAL_DMA_Abort+0x58a>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a4c      	ldr	r2, [pc, #304]	; (80031d8 <HAL_DMA_Abort+0x5e4>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d068      	beq.n	800317e <HAL_DMA_Abort+0x58a>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a4a      	ldr	r2, [pc, #296]	; (80031dc <HAL_DMA_Abort+0x5e8>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d063      	beq.n	800317e <HAL_DMA_Abort+0x58a>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a49      	ldr	r2, [pc, #292]	; (80031e0 <HAL_DMA_Abort+0x5ec>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d05e      	beq.n	800317e <HAL_DMA_Abort+0x58a>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a47      	ldr	r2, [pc, #284]	; (80031e4 <HAL_DMA_Abort+0x5f0>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d059      	beq.n	800317e <HAL_DMA_Abort+0x58a>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a46      	ldr	r2, [pc, #280]	; (80031e8 <HAL_DMA_Abort+0x5f4>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d054      	beq.n	800317e <HAL_DMA_Abort+0x58a>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a44      	ldr	r2, [pc, #272]	; (80031ec <HAL_DMA_Abort+0x5f8>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d04f      	beq.n	800317e <HAL_DMA_Abort+0x58a>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a43      	ldr	r2, [pc, #268]	; (80031f0 <HAL_DMA_Abort+0x5fc>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d04a      	beq.n	800317e <HAL_DMA_Abort+0x58a>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a41      	ldr	r2, [pc, #260]	; (80031f4 <HAL_DMA_Abort+0x600>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d045      	beq.n	800317e <HAL_DMA_Abort+0x58a>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a40      	ldr	r2, [pc, #256]	; (80031f8 <HAL_DMA_Abort+0x604>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d040      	beq.n	800317e <HAL_DMA_Abort+0x58a>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a3e      	ldr	r2, [pc, #248]	; (80031fc <HAL_DMA_Abort+0x608>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d03b      	beq.n	800317e <HAL_DMA_Abort+0x58a>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a3d      	ldr	r2, [pc, #244]	; (8003200 <HAL_DMA_Abort+0x60c>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d036      	beq.n	800317e <HAL_DMA_Abort+0x58a>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a3b      	ldr	r2, [pc, #236]	; (8003204 <HAL_DMA_Abort+0x610>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d031      	beq.n	800317e <HAL_DMA_Abort+0x58a>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a3a      	ldr	r2, [pc, #232]	; (8003208 <HAL_DMA_Abort+0x614>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d02c      	beq.n	800317e <HAL_DMA_Abort+0x58a>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a38      	ldr	r2, [pc, #224]	; (800320c <HAL_DMA_Abort+0x618>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d027      	beq.n	800317e <HAL_DMA_Abort+0x58a>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a37      	ldr	r2, [pc, #220]	; (8003210 <HAL_DMA_Abort+0x61c>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d022      	beq.n	800317e <HAL_DMA_Abort+0x58a>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a35      	ldr	r2, [pc, #212]	; (8003214 <HAL_DMA_Abort+0x620>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d01d      	beq.n	800317e <HAL_DMA_Abort+0x58a>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a34      	ldr	r2, [pc, #208]	; (8003218 <HAL_DMA_Abort+0x624>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d018      	beq.n	800317e <HAL_DMA_Abort+0x58a>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a32      	ldr	r2, [pc, #200]	; (800321c <HAL_DMA_Abort+0x628>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d013      	beq.n	800317e <HAL_DMA_Abort+0x58a>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a31      	ldr	r2, [pc, #196]	; (8003220 <HAL_DMA_Abort+0x62c>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d00e      	beq.n	800317e <HAL_DMA_Abort+0x58a>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a2f      	ldr	r2, [pc, #188]	; (8003224 <HAL_DMA_Abort+0x630>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d009      	beq.n	800317e <HAL_DMA_Abort+0x58a>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a2e      	ldr	r2, [pc, #184]	; (8003228 <HAL_DMA_Abort+0x634>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d004      	beq.n	800317e <HAL_DMA_Abort+0x58a>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a2c      	ldr	r2, [pc, #176]	; (800322c <HAL_DMA_Abort+0x638>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d101      	bne.n	8003182 <HAL_DMA_Abort+0x58e>
 800317e:	2301      	movs	r3, #1
 8003180:	e000      	b.n	8003184 <HAL_DMA_Abort+0x590>
 8003182:	2300      	movs	r3, #0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d015      	beq.n	80031b4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003190:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00c      	beq.n	80031b4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031a8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80031b2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3718      	adds	r7, #24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	40020010 	.word	0x40020010
 80031d4:	40020028 	.word	0x40020028
 80031d8:	40020040 	.word	0x40020040
 80031dc:	40020058 	.word	0x40020058
 80031e0:	40020070 	.word	0x40020070
 80031e4:	40020088 	.word	0x40020088
 80031e8:	400200a0 	.word	0x400200a0
 80031ec:	400200b8 	.word	0x400200b8
 80031f0:	40020410 	.word	0x40020410
 80031f4:	40020428 	.word	0x40020428
 80031f8:	40020440 	.word	0x40020440
 80031fc:	40020458 	.word	0x40020458
 8003200:	40020470 	.word	0x40020470
 8003204:	40020488 	.word	0x40020488
 8003208:	400204a0 	.word	0x400204a0
 800320c:	400204b8 	.word	0x400204b8
 8003210:	58025408 	.word	0x58025408
 8003214:	5802541c 	.word	0x5802541c
 8003218:	58025430 	.word	0x58025430
 800321c:	58025444 	.word	0x58025444
 8003220:	58025458 	.word	0x58025458
 8003224:	5802546c 	.word	0x5802546c
 8003228:	58025480 	.word	0x58025480
 800322c:	58025494 	.word	0x58025494

08003230 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e237      	b.n	80036b2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d004      	beq.n	8003258 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2280      	movs	r2, #128	; 0x80
 8003252:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e22c      	b.n	80036b2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a5c      	ldr	r2, [pc, #368]	; (80033d0 <HAL_DMA_Abort_IT+0x1a0>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d04a      	beq.n	80032f8 <HAL_DMA_Abort_IT+0xc8>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a5b      	ldr	r2, [pc, #364]	; (80033d4 <HAL_DMA_Abort_IT+0x1a4>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d045      	beq.n	80032f8 <HAL_DMA_Abort_IT+0xc8>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a59      	ldr	r2, [pc, #356]	; (80033d8 <HAL_DMA_Abort_IT+0x1a8>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d040      	beq.n	80032f8 <HAL_DMA_Abort_IT+0xc8>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a58      	ldr	r2, [pc, #352]	; (80033dc <HAL_DMA_Abort_IT+0x1ac>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d03b      	beq.n	80032f8 <HAL_DMA_Abort_IT+0xc8>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a56      	ldr	r2, [pc, #344]	; (80033e0 <HAL_DMA_Abort_IT+0x1b0>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d036      	beq.n	80032f8 <HAL_DMA_Abort_IT+0xc8>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a55      	ldr	r2, [pc, #340]	; (80033e4 <HAL_DMA_Abort_IT+0x1b4>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d031      	beq.n	80032f8 <HAL_DMA_Abort_IT+0xc8>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a53      	ldr	r2, [pc, #332]	; (80033e8 <HAL_DMA_Abort_IT+0x1b8>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d02c      	beq.n	80032f8 <HAL_DMA_Abort_IT+0xc8>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a52      	ldr	r2, [pc, #328]	; (80033ec <HAL_DMA_Abort_IT+0x1bc>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d027      	beq.n	80032f8 <HAL_DMA_Abort_IT+0xc8>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a50      	ldr	r2, [pc, #320]	; (80033f0 <HAL_DMA_Abort_IT+0x1c0>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d022      	beq.n	80032f8 <HAL_DMA_Abort_IT+0xc8>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a4f      	ldr	r2, [pc, #316]	; (80033f4 <HAL_DMA_Abort_IT+0x1c4>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d01d      	beq.n	80032f8 <HAL_DMA_Abort_IT+0xc8>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a4d      	ldr	r2, [pc, #308]	; (80033f8 <HAL_DMA_Abort_IT+0x1c8>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d018      	beq.n	80032f8 <HAL_DMA_Abort_IT+0xc8>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a4c      	ldr	r2, [pc, #304]	; (80033fc <HAL_DMA_Abort_IT+0x1cc>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d013      	beq.n	80032f8 <HAL_DMA_Abort_IT+0xc8>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a4a      	ldr	r2, [pc, #296]	; (8003400 <HAL_DMA_Abort_IT+0x1d0>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d00e      	beq.n	80032f8 <HAL_DMA_Abort_IT+0xc8>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a49      	ldr	r2, [pc, #292]	; (8003404 <HAL_DMA_Abort_IT+0x1d4>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d009      	beq.n	80032f8 <HAL_DMA_Abort_IT+0xc8>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a47      	ldr	r2, [pc, #284]	; (8003408 <HAL_DMA_Abort_IT+0x1d8>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d004      	beq.n	80032f8 <HAL_DMA_Abort_IT+0xc8>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a46      	ldr	r2, [pc, #280]	; (800340c <HAL_DMA_Abort_IT+0x1dc>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d101      	bne.n	80032fc <HAL_DMA_Abort_IT+0xcc>
 80032f8:	2301      	movs	r3, #1
 80032fa:	e000      	b.n	80032fe <HAL_DMA_Abort_IT+0xce>
 80032fc:	2300      	movs	r3, #0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f000 8086 	beq.w	8003410 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2204      	movs	r2, #4
 8003308:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a2f      	ldr	r2, [pc, #188]	; (80033d0 <HAL_DMA_Abort_IT+0x1a0>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d04a      	beq.n	80033ac <HAL_DMA_Abort_IT+0x17c>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a2e      	ldr	r2, [pc, #184]	; (80033d4 <HAL_DMA_Abort_IT+0x1a4>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d045      	beq.n	80033ac <HAL_DMA_Abort_IT+0x17c>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a2c      	ldr	r2, [pc, #176]	; (80033d8 <HAL_DMA_Abort_IT+0x1a8>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d040      	beq.n	80033ac <HAL_DMA_Abort_IT+0x17c>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a2b      	ldr	r2, [pc, #172]	; (80033dc <HAL_DMA_Abort_IT+0x1ac>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d03b      	beq.n	80033ac <HAL_DMA_Abort_IT+0x17c>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a29      	ldr	r2, [pc, #164]	; (80033e0 <HAL_DMA_Abort_IT+0x1b0>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d036      	beq.n	80033ac <HAL_DMA_Abort_IT+0x17c>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a28      	ldr	r2, [pc, #160]	; (80033e4 <HAL_DMA_Abort_IT+0x1b4>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d031      	beq.n	80033ac <HAL_DMA_Abort_IT+0x17c>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a26      	ldr	r2, [pc, #152]	; (80033e8 <HAL_DMA_Abort_IT+0x1b8>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d02c      	beq.n	80033ac <HAL_DMA_Abort_IT+0x17c>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a25      	ldr	r2, [pc, #148]	; (80033ec <HAL_DMA_Abort_IT+0x1bc>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d027      	beq.n	80033ac <HAL_DMA_Abort_IT+0x17c>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a23      	ldr	r2, [pc, #140]	; (80033f0 <HAL_DMA_Abort_IT+0x1c0>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d022      	beq.n	80033ac <HAL_DMA_Abort_IT+0x17c>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a22      	ldr	r2, [pc, #136]	; (80033f4 <HAL_DMA_Abort_IT+0x1c4>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d01d      	beq.n	80033ac <HAL_DMA_Abort_IT+0x17c>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a20      	ldr	r2, [pc, #128]	; (80033f8 <HAL_DMA_Abort_IT+0x1c8>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d018      	beq.n	80033ac <HAL_DMA_Abort_IT+0x17c>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a1f      	ldr	r2, [pc, #124]	; (80033fc <HAL_DMA_Abort_IT+0x1cc>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d013      	beq.n	80033ac <HAL_DMA_Abort_IT+0x17c>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a1d      	ldr	r2, [pc, #116]	; (8003400 <HAL_DMA_Abort_IT+0x1d0>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d00e      	beq.n	80033ac <HAL_DMA_Abort_IT+0x17c>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a1c      	ldr	r2, [pc, #112]	; (8003404 <HAL_DMA_Abort_IT+0x1d4>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d009      	beq.n	80033ac <HAL_DMA_Abort_IT+0x17c>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a1a      	ldr	r2, [pc, #104]	; (8003408 <HAL_DMA_Abort_IT+0x1d8>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d004      	beq.n	80033ac <HAL_DMA_Abort_IT+0x17c>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a19      	ldr	r2, [pc, #100]	; (800340c <HAL_DMA_Abort_IT+0x1dc>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d108      	bne.n	80033be <HAL_DMA_Abort_IT+0x18e>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 0201 	bic.w	r2, r2, #1
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	e178      	b.n	80036b0 <HAL_DMA_Abort_IT+0x480>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 0201 	bic.w	r2, r2, #1
 80033cc:	601a      	str	r2, [r3, #0]
 80033ce:	e16f      	b.n	80036b0 <HAL_DMA_Abort_IT+0x480>
 80033d0:	40020010 	.word	0x40020010
 80033d4:	40020028 	.word	0x40020028
 80033d8:	40020040 	.word	0x40020040
 80033dc:	40020058 	.word	0x40020058
 80033e0:	40020070 	.word	0x40020070
 80033e4:	40020088 	.word	0x40020088
 80033e8:	400200a0 	.word	0x400200a0
 80033ec:	400200b8 	.word	0x400200b8
 80033f0:	40020410 	.word	0x40020410
 80033f4:	40020428 	.word	0x40020428
 80033f8:	40020440 	.word	0x40020440
 80033fc:	40020458 	.word	0x40020458
 8003400:	40020470 	.word	0x40020470
 8003404:	40020488 	.word	0x40020488
 8003408:	400204a0 	.word	0x400204a0
 800340c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f022 020e 	bic.w	r2, r2, #14
 800341e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a6c      	ldr	r2, [pc, #432]	; (80035d8 <HAL_DMA_Abort_IT+0x3a8>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d04a      	beq.n	80034c0 <HAL_DMA_Abort_IT+0x290>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a6b      	ldr	r2, [pc, #428]	; (80035dc <HAL_DMA_Abort_IT+0x3ac>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d045      	beq.n	80034c0 <HAL_DMA_Abort_IT+0x290>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a69      	ldr	r2, [pc, #420]	; (80035e0 <HAL_DMA_Abort_IT+0x3b0>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d040      	beq.n	80034c0 <HAL_DMA_Abort_IT+0x290>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a68      	ldr	r2, [pc, #416]	; (80035e4 <HAL_DMA_Abort_IT+0x3b4>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d03b      	beq.n	80034c0 <HAL_DMA_Abort_IT+0x290>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a66      	ldr	r2, [pc, #408]	; (80035e8 <HAL_DMA_Abort_IT+0x3b8>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d036      	beq.n	80034c0 <HAL_DMA_Abort_IT+0x290>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a65      	ldr	r2, [pc, #404]	; (80035ec <HAL_DMA_Abort_IT+0x3bc>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d031      	beq.n	80034c0 <HAL_DMA_Abort_IT+0x290>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a63      	ldr	r2, [pc, #396]	; (80035f0 <HAL_DMA_Abort_IT+0x3c0>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d02c      	beq.n	80034c0 <HAL_DMA_Abort_IT+0x290>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a62      	ldr	r2, [pc, #392]	; (80035f4 <HAL_DMA_Abort_IT+0x3c4>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d027      	beq.n	80034c0 <HAL_DMA_Abort_IT+0x290>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a60      	ldr	r2, [pc, #384]	; (80035f8 <HAL_DMA_Abort_IT+0x3c8>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d022      	beq.n	80034c0 <HAL_DMA_Abort_IT+0x290>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a5f      	ldr	r2, [pc, #380]	; (80035fc <HAL_DMA_Abort_IT+0x3cc>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d01d      	beq.n	80034c0 <HAL_DMA_Abort_IT+0x290>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a5d      	ldr	r2, [pc, #372]	; (8003600 <HAL_DMA_Abort_IT+0x3d0>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d018      	beq.n	80034c0 <HAL_DMA_Abort_IT+0x290>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a5c      	ldr	r2, [pc, #368]	; (8003604 <HAL_DMA_Abort_IT+0x3d4>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d013      	beq.n	80034c0 <HAL_DMA_Abort_IT+0x290>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a5a      	ldr	r2, [pc, #360]	; (8003608 <HAL_DMA_Abort_IT+0x3d8>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d00e      	beq.n	80034c0 <HAL_DMA_Abort_IT+0x290>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a59      	ldr	r2, [pc, #356]	; (800360c <HAL_DMA_Abort_IT+0x3dc>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d009      	beq.n	80034c0 <HAL_DMA_Abort_IT+0x290>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a57      	ldr	r2, [pc, #348]	; (8003610 <HAL_DMA_Abort_IT+0x3e0>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d004      	beq.n	80034c0 <HAL_DMA_Abort_IT+0x290>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a56      	ldr	r2, [pc, #344]	; (8003614 <HAL_DMA_Abort_IT+0x3e4>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d108      	bne.n	80034d2 <HAL_DMA_Abort_IT+0x2a2>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 0201 	bic.w	r2, r2, #1
 80034ce:	601a      	str	r2, [r3, #0]
 80034d0:	e007      	b.n	80034e2 <HAL_DMA_Abort_IT+0x2b2>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f022 0201 	bic.w	r2, r2, #1
 80034e0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a3c      	ldr	r2, [pc, #240]	; (80035d8 <HAL_DMA_Abort_IT+0x3a8>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d072      	beq.n	80035d2 <HAL_DMA_Abort_IT+0x3a2>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a3a      	ldr	r2, [pc, #232]	; (80035dc <HAL_DMA_Abort_IT+0x3ac>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d06d      	beq.n	80035d2 <HAL_DMA_Abort_IT+0x3a2>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a39      	ldr	r2, [pc, #228]	; (80035e0 <HAL_DMA_Abort_IT+0x3b0>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d068      	beq.n	80035d2 <HAL_DMA_Abort_IT+0x3a2>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a37      	ldr	r2, [pc, #220]	; (80035e4 <HAL_DMA_Abort_IT+0x3b4>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d063      	beq.n	80035d2 <HAL_DMA_Abort_IT+0x3a2>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a36      	ldr	r2, [pc, #216]	; (80035e8 <HAL_DMA_Abort_IT+0x3b8>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d05e      	beq.n	80035d2 <HAL_DMA_Abort_IT+0x3a2>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a34      	ldr	r2, [pc, #208]	; (80035ec <HAL_DMA_Abort_IT+0x3bc>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d059      	beq.n	80035d2 <HAL_DMA_Abort_IT+0x3a2>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a33      	ldr	r2, [pc, #204]	; (80035f0 <HAL_DMA_Abort_IT+0x3c0>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d054      	beq.n	80035d2 <HAL_DMA_Abort_IT+0x3a2>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a31      	ldr	r2, [pc, #196]	; (80035f4 <HAL_DMA_Abort_IT+0x3c4>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d04f      	beq.n	80035d2 <HAL_DMA_Abort_IT+0x3a2>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a30      	ldr	r2, [pc, #192]	; (80035f8 <HAL_DMA_Abort_IT+0x3c8>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d04a      	beq.n	80035d2 <HAL_DMA_Abort_IT+0x3a2>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a2e      	ldr	r2, [pc, #184]	; (80035fc <HAL_DMA_Abort_IT+0x3cc>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d045      	beq.n	80035d2 <HAL_DMA_Abort_IT+0x3a2>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a2d      	ldr	r2, [pc, #180]	; (8003600 <HAL_DMA_Abort_IT+0x3d0>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d040      	beq.n	80035d2 <HAL_DMA_Abort_IT+0x3a2>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a2b      	ldr	r2, [pc, #172]	; (8003604 <HAL_DMA_Abort_IT+0x3d4>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d03b      	beq.n	80035d2 <HAL_DMA_Abort_IT+0x3a2>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a2a      	ldr	r2, [pc, #168]	; (8003608 <HAL_DMA_Abort_IT+0x3d8>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d036      	beq.n	80035d2 <HAL_DMA_Abort_IT+0x3a2>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a28      	ldr	r2, [pc, #160]	; (800360c <HAL_DMA_Abort_IT+0x3dc>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d031      	beq.n	80035d2 <HAL_DMA_Abort_IT+0x3a2>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a27      	ldr	r2, [pc, #156]	; (8003610 <HAL_DMA_Abort_IT+0x3e0>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d02c      	beq.n	80035d2 <HAL_DMA_Abort_IT+0x3a2>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a25      	ldr	r2, [pc, #148]	; (8003614 <HAL_DMA_Abort_IT+0x3e4>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d027      	beq.n	80035d2 <HAL_DMA_Abort_IT+0x3a2>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a24      	ldr	r2, [pc, #144]	; (8003618 <HAL_DMA_Abort_IT+0x3e8>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d022      	beq.n	80035d2 <HAL_DMA_Abort_IT+0x3a2>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a22      	ldr	r2, [pc, #136]	; (800361c <HAL_DMA_Abort_IT+0x3ec>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d01d      	beq.n	80035d2 <HAL_DMA_Abort_IT+0x3a2>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a21      	ldr	r2, [pc, #132]	; (8003620 <HAL_DMA_Abort_IT+0x3f0>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d018      	beq.n	80035d2 <HAL_DMA_Abort_IT+0x3a2>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a1f      	ldr	r2, [pc, #124]	; (8003624 <HAL_DMA_Abort_IT+0x3f4>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d013      	beq.n	80035d2 <HAL_DMA_Abort_IT+0x3a2>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a1e      	ldr	r2, [pc, #120]	; (8003628 <HAL_DMA_Abort_IT+0x3f8>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d00e      	beq.n	80035d2 <HAL_DMA_Abort_IT+0x3a2>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a1c      	ldr	r2, [pc, #112]	; (800362c <HAL_DMA_Abort_IT+0x3fc>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d009      	beq.n	80035d2 <HAL_DMA_Abort_IT+0x3a2>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a1b      	ldr	r2, [pc, #108]	; (8003630 <HAL_DMA_Abort_IT+0x400>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d004      	beq.n	80035d2 <HAL_DMA_Abort_IT+0x3a2>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a19      	ldr	r2, [pc, #100]	; (8003634 <HAL_DMA_Abort_IT+0x404>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d132      	bne.n	8003638 <HAL_DMA_Abort_IT+0x408>
 80035d2:	2301      	movs	r3, #1
 80035d4:	e031      	b.n	800363a <HAL_DMA_Abort_IT+0x40a>
 80035d6:	bf00      	nop
 80035d8:	40020010 	.word	0x40020010
 80035dc:	40020028 	.word	0x40020028
 80035e0:	40020040 	.word	0x40020040
 80035e4:	40020058 	.word	0x40020058
 80035e8:	40020070 	.word	0x40020070
 80035ec:	40020088 	.word	0x40020088
 80035f0:	400200a0 	.word	0x400200a0
 80035f4:	400200b8 	.word	0x400200b8
 80035f8:	40020410 	.word	0x40020410
 80035fc:	40020428 	.word	0x40020428
 8003600:	40020440 	.word	0x40020440
 8003604:	40020458 	.word	0x40020458
 8003608:	40020470 	.word	0x40020470
 800360c:	40020488 	.word	0x40020488
 8003610:	400204a0 	.word	0x400204a0
 8003614:	400204b8 	.word	0x400204b8
 8003618:	58025408 	.word	0x58025408
 800361c:	5802541c 	.word	0x5802541c
 8003620:	58025430 	.word	0x58025430
 8003624:	58025444 	.word	0x58025444
 8003628:	58025458 	.word	0x58025458
 800362c:	5802546c 	.word	0x5802546c
 8003630:	58025480 	.word	0x58025480
 8003634:	58025494 	.word	0x58025494
 8003638:	2300      	movs	r3, #0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d028      	beq.n	8003690 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003648:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800364c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003652:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003658:	f003 031f 	and.w	r3, r3, #31
 800365c:	2201      	movs	r2, #1
 800365e:	409a      	lsls	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800366c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00c      	beq.n	8003690 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003680:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003684:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800368e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d003      	beq.n	80036b0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop

080036bc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b08a      	sub	sp, #40	; 0x28
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80036c4:	2300      	movs	r3, #0
 80036c6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80036c8:	4b67      	ldr	r3, [pc, #412]	; (8003868 <HAL_DMA_IRQHandler+0x1ac>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a67      	ldr	r2, [pc, #412]	; (800386c <HAL_DMA_IRQHandler+0x1b0>)
 80036ce:	fba2 2303 	umull	r2, r3, r2, r3
 80036d2:	0a9b      	lsrs	r3, r3, #10
 80036d4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036da:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80036e2:	6a3b      	ldr	r3, [r7, #32]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a5f      	ldr	r2, [pc, #380]	; (8003870 <HAL_DMA_IRQHandler+0x1b4>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d04a      	beq.n	800378e <HAL_DMA_IRQHandler+0xd2>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a5d      	ldr	r2, [pc, #372]	; (8003874 <HAL_DMA_IRQHandler+0x1b8>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d045      	beq.n	800378e <HAL_DMA_IRQHandler+0xd2>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a5c      	ldr	r2, [pc, #368]	; (8003878 <HAL_DMA_IRQHandler+0x1bc>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d040      	beq.n	800378e <HAL_DMA_IRQHandler+0xd2>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a5a      	ldr	r2, [pc, #360]	; (800387c <HAL_DMA_IRQHandler+0x1c0>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d03b      	beq.n	800378e <HAL_DMA_IRQHandler+0xd2>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a59      	ldr	r2, [pc, #356]	; (8003880 <HAL_DMA_IRQHandler+0x1c4>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d036      	beq.n	800378e <HAL_DMA_IRQHandler+0xd2>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a57      	ldr	r2, [pc, #348]	; (8003884 <HAL_DMA_IRQHandler+0x1c8>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d031      	beq.n	800378e <HAL_DMA_IRQHandler+0xd2>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a56      	ldr	r2, [pc, #344]	; (8003888 <HAL_DMA_IRQHandler+0x1cc>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d02c      	beq.n	800378e <HAL_DMA_IRQHandler+0xd2>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a54      	ldr	r2, [pc, #336]	; (800388c <HAL_DMA_IRQHandler+0x1d0>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d027      	beq.n	800378e <HAL_DMA_IRQHandler+0xd2>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a53      	ldr	r2, [pc, #332]	; (8003890 <HAL_DMA_IRQHandler+0x1d4>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d022      	beq.n	800378e <HAL_DMA_IRQHandler+0xd2>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a51      	ldr	r2, [pc, #324]	; (8003894 <HAL_DMA_IRQHandler+0x1d8>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d01d      	beq.n	800378e <HAL_DMA_IRQHandler+0xd2>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a50      	ldr	r2, [pc, #320]	; (8003898 <HAL_DMA_IRQHandler+0x1dc>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d018      	beq.n	800378e <HAL_DMA_IRQHandler+0xd2>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a4e      	ldr	r2, [pc, #312]	; (800389c <HAL_DMA_IRQHandler+0x1e0>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d013      	beq.n	800378e <HAL_DMA_IRQHandler+0xd2>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a4d      	ldr	r2, [pc, #308]	; (80038a0 <HAL_DMA_IRQHandler+0x1e4>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d00e      	beq.n	800378e <HAL_DMA_IRQHandler+0xd2>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a4b      	ldr	r2, [pc, #300]	; (80038a4 <HAL_DMA_IRQHandler+0x1e8>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d009      	beq.n	800378e <HAL_DMA_IRQHandler+0xd2>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a4a      	ldr	r2, [pc, #296]	; (80038a8 <HAL_DMA_IRQHandler+0x1ec>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d004      	beq.n	800378e <HAL_DMA_IRQHandler+0xd2>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a48      	ldr	r2, [pc, #288]	; (80038ac <HAL_DMA_IRQHandler+0x1f0>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d101      	bne.n	8003792 <HAL_DMA_IRQHandler+0xd6>
 800378e:	2301      	movs	r3, #1
 8003790:	e000      	b.n	8003794 <HAL_DMA_IRQHandler+0xd8>
 8003792:	2300      	movs	r3, #0
 8003794:	2b00      	cmp	r3, #0
 8003796:	f000 842b 	beq.w	8003ff0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800379e:	f003 031f 	and.w	r3, r3, #31
 80037a2:	2208      	movs	r2, #8
 80037a4:	409a      	lsls	r2, r3
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	4013      	ands	r3, r2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f000 80a2 	beq.w	80038f4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a2e      	ldr	r2, [pc, #184]	; (8003870 <HAL_DMA_IRQHandler+0x1b4>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d04a      	beq.n	8003850 <HAL_DMA_IRQHandler+0x194>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a2d      	ldr	r2, [pc, #180]	; (8003874 <HAL_DMA_IRQHandler+0x1b8>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d045      	beq.n	8003850 <HAL_DMA_IRQHandler+0x194>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a2b      	ldr	r2, [pc, #172]	; (8003878 <HAL_DMA_IRQHandler+0x1bc>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d040      	beq.n	8003850 <HAL_DMA_IRQHandler+0x194>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a2a      	ldr	r2, [pc, #168]	; (800387c <HAL_DMA_IRQHandler+0x1c0>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d03b      	beq.n	8003850 <HAL_DMA_IRQHandler+0x194>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a28      	ldr	r2, [pc, #160]	; (8003880 <HAL_DMA_IRQHandler+0x1c4>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d036      	beq.n	8003850 <HAL_DMA_IRQHandler+0x194>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a27      	ldr	r2, [pc, #156]	; (8003884 <HAL_DMA_IRQHandler+0x1c8>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d031      	beq.n	8003850 <HAL_DMA_IRQHandler+0x194>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a25      	ldr	r2, [pc, #148]	; (8003888 <HAL_DMA_IRQHandler+0x1cc>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d02c      	beq.n	8003850 <HAL_DMA_IRQHandler+0x194>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a24      	ldr	r2, [pc, #144]	; (800388c <HAL_DMA_IRQHandler+0x1d0>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d027      	beq.n	8003850 <HAL_DMA_IRQHandler+0x194>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a22      	ldr	r2, [pc, #136]	; (8003890 <HAL_DMA_IRQHandler+0x1d4>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d022      	beq.n	8003850 <HAL_DMA_IRQHandler+0x194>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a21      	ldr	r2, [pc, #132]	; (8003894 <HAL_DMA_IRQHandler+0x1d8>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d01d      	beq.n	8003850 <HAL_DMA_IRQHandler+0x194>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a1f      	ldr	r2, [pc, #124]	; (8003898 <HAL_DMA_IRQHandler+0x1dc>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d018      	beq.n	8003850 <HAL_DMA_IRQHandler+0x194>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a1e      	ldr	r2, [pc, #120]	; (800389c <HAL_DMA_IRQHandler+0x1e0>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d013      	beq.n	8003850 <HAL_DMA_IRQHandler+0x194>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a1c      	ldr	r2, [pc, #112]	; (80038a0 <HAL_DMA_IRQHandler+0x1e4>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d00e      	beq.n	8003850 <HAL_DMA_IRQHandler+0x194>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a1b      	ldr	r2, [pc, #108]	; (80038a4 <HAL_DMA_IRQHandler+0x1e8>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d009      	beq.n	8003850 <HAL_DMA_IRQHandler+0x194>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a19      	ldr	r2, [pc, #100]	; (80038a8 <HAL_DMA_IRQHandler+0x1ec>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d004      	beq.n	8003850 <HAL_DMA_IRQHandler+0x194>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a18      	ldr	r2, [pc, #96]	; (80038ac <HAL_DMA_IRQHandler+0x1f0>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d12f      	bne.n	80038b0 <HAL_DMA_IRQHandler+0x1f4>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0304 	and.w	r3, r3, #4
 800385a:	2b00      	cmp	r3, #0
 800385c:	bf14      	ite	ne
 800385e:	2301      	movne	r3, #1
 8003860:	2300      	moveq	r3, #0
 8003862:	b2db      	uxtb	r3, r3
 8003864:	e02e      	b.n	80038c4 <HAL_DMA_IRQHandler+0x208>
 8003866:	bf00      	nop
 8003868:	24000000 	.word	0x24000000
 800386c:	1b4e81b5 	.word	0x1b4e81b5
 8003870:	40020010 	.word	0x40020010
 8003874:	40020028 	.word	0x40020028
 8003878:	40020040 	.word	0x40020040
 800387c:	40020058 	.word	0x40020058
 8003880:	40020070 	.word	0x40020070
 8003884:	40020088 	.word	0x40020088
 8003888:	400200a0 	.word	0x400200a0
 800388c:	400200b8 	.word	0x400200b8
 8003890:	40020410 	.word	0x40020410
 8003894:	40020428 	.word	0x40020428
 8003898:	40020440 	.word	0x40020440
 800389c:	40020458 	.word	0x40020458
 80038a0:	40020470 	.word	0x40020470
 80038a4:	40020488 	.word	0x40020488
 80038a8:	400204a0 	.word	0x400204a0
 80038ac:	400204b8 	.word	0x400204b8
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0308 	and.w	r3, r3, #8
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	bf14      	ite	ne
 80038be:	2301      	movne	r3, #1
 80038c0:	2300      	moveq	r3, #0
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d015      	beq.n	80038f4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f022 0204 	bic.w	r2, r2, #4
 80038d6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038dc:	f003 031f 	and.w	r3, r3, #31
 80038e0:	2208      	movs	r2, #8
 80038e2:	409a      	lsls	r2, r3
 80038e4:	6a3b      	ldr	r3, [r7, #32]
 80038e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ec:	f043 0201 	orr.w	r2, r3, #1
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f8:	f003 031f 	and.w	r3, r3, #31
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	2b00      	cmp	r3, #0
 8003908:	d06e      	beq.n	80039e8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a69      	ldr	r2, [pc, #420]	; (8003ab4 <HAL_DMA_IRQHandler+0x3f8>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d04a      	beq.n	80039aa <HAL_DMA_IRQHandler+0x2ee>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a67      	ldr	r2, [pc, #412]	; (8003ab8 <HAL_DMA_IRQHandler+0x3fc>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d045      	beq.n	80039aa <HAL_DMA_IRQHandler+0x2ee>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a66      	ldr	r2, [pc, #408]	; (8003abc <HAL_DMA_IRQHandler+0x400>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d040      	beq.n	80039aa <HAL_DMA_IRQHandler+0x2ee>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a64      	ldr	r2, [pc, #400]	; (8003ac0 <HAL_DMA_IRQHandler+0x404>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d03b      	beq.n	80039aa <HAL_DMA_IRQHandler+0x2ee>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a63      	ldr	r2, [pc, #396]	; (8003ac4 <HAL_DMA_IRQHandler+0x408>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d036      	beq.n	80039aa <HAL_DMA_IRQHandler+0x2ee>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a61      	ldr	r2, [pc, #388]	; (8003ac8 <HAL_DMA_IRQHandler+0x40c>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d031      	beq.n	80039aa <HAL_DMA_IRQHandler+0x2ee>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a60      	ldr	r2, [pc, #384]	; (8003acc <HAL_DMA_IRQHandler+0x410>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d02c      	beq.n	80039aa <HAL_DMA_IRQHandler+0x2ee>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a5e      	ldr	r2, [pc, #376]	; (8003ad0 <HAL_DMA_IRQHandler+0x414>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d027      	beq.n	80039aa <HAL_DMA_IRQHandler+0x2ee>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a5d      	ldr	r2, [pc, #372]	; (8003ad4 <HAL_DMA_IRQHandler+0x418>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d022      	beq.n	80039aa <HAL_DMA_IRQHandler+0x2ee>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a5b      	ldr	r2, [pc, #364]	; (8003ad8 <HAL_DMA_IRQHandler+0x41c>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d01d      	beq.n	80039aa <HAL_DMA_IRQHandler+0x2ee>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a5a      	ldr	r2, [pc, #360]	; (8003adc <HAL_DMA_IRQHandler+0x420>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d018      	beq.n	80039aa <HAL_DMA_IRQHandler+0x2ee>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a58      	ldr	r2, [pc, #352]	; (8003ae0 <HAL_DMA_IRQHandler+0x424>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d013      	beq.n	80039aa <HAL_DMA_IRQHandler+0x2ee>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a57      	ldr	r2, [pc, #348]	; (8003ae4 <HAL_DMA_IRQHandler+0x428>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d00e      	beq.n	80039aa <HAL_DMA_IRQHandler+0x2ee>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a55      	ldr	r2, [pc, #340]	; (8003ae8 <HAL_DMA_IRQHandler+0x42c>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d009      	beq.n	80039aa <HAL_DMA_IRQHandler+0x2ee>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a54      	ldr	r2, [pc, #336]	; (8003aec <HAL_DMA_IRQHandler+0x430>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d004      	beq.n	80039aa <HAL_DMA_IRQHandler+0x2ee>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a52      	ldr	r2, [pc, #328]	; (8003af0 <HAL_DMA_IRQHandler+0x434>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d10a      	bne.n	80039c0 <HAL_DMA_IRQHandler+0x304>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	695b      	ldr	r3, [r3, #20]
 80039b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	bf14      	ite	ne
 80039b8:	2301      	movne	r3, #1
 80039ba:	2300      	moveq	r3, #0
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	e003      	b.n	80039c8 <HAL_DMA_IRQHandler+0x30c>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2300      	movs	r3, #0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00d      	beq.n	80039e8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d0:	f003 031f 	and.w	r3, r3, #31
 80039d4:	2201      	movs	r2, #1
 80039d6:	409a      	lsls	r2, r3
 80039d8:	6a3b      	ldr	r3, [r7, #32]
 80039da:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e0:	f043 0202 	orr.w	r2, r3, #2
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ec:	f003 031f 	and.w	r3, r3, #31
 80039f0:	2204      	movs	r2, #4
 80039f2:	409a      	lsls	r2, r3
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	4013      	ands	r3, r2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f000 808f 	beq.w	8003b1c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a2c      	ldr	r2, [pc, #176]	; (8003ab4 <HAL_DMA_IRQHandler+0x3f8>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d04a      	beq.n	8003a9e <HAL_DMA_IRQHandler+0x3e2>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a2a      	ldr	r2, [pc, #168]	; (8003ab8 <HAL_DMA_IRQHandler+0x3fc>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d045      	beq.n	8003a9e <HAL_DMA_IRQHandler+0x3e2>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a29      	ldr	r2, [pc, #164]	; (8003abc <HAL_DMA_IRQHandler+0x400>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d040      	beq.n	8003a9e <HAL_DMA_IRQHandler+0x3e2>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a27      	ldr	r2, [pc, #156]	; (8003ac0 <HAL_DMA_IRQHandler+0x404>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d03b      	beq.n	8003a9e <HAL_DMA_IRQHandler+0x3e2>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a26      	ldr	r2, [pc, #152]	; (8003ac4 <HAL_DMA_IRQHandler+0x408>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d036      	beq.n	8003a9e <HAL_DMA_IRQHandler+0x3e2>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a24      	ldr	r2, [pc, #144]	; (8003ac8 <HAL_DMA_IRQHandler+0x40c>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d031      	beq.n	8003a9e <HAL_DMA_IRQHandler+0x3e2>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a23      	ldr	r2, [pc, #140]	; (8003acc <HAL_DMA_IRQHandler+0x410>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d02c      	beq.n	8003a9e <HAL_DMA_IRQHandler+0x3e2>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a21      	ldr	r2, [pc, #132]	; (8003ad0 <HAL_DMA_IRQHandler+0x414>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d027      	beq.n	8003a9e <HAL_DMA_IRQHandler+0x3e2>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a20      	ldr	r2, [pc, #128]	; (8003ad4 <HAL_DMA_IRQHandler+0x418>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d022      	beq.n	8003a9e <HAL_DMA_IRQHandler+0x3e2>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a1e      	ldr	r2, [pc, #120]	; (8003ad8 <HAL_DMA_IRQHandler+0x41c>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d01d      	beq.n	8003a9e <HAL_DMA_IRQHandler+0x3e2>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a1d      	ldr	r2, [pc, #116]	; (8003adc <HAL_DMA_IRQHandler+0x420>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d018      	beq.n	8003a9e <HAL_DMA_IRQHandler+0x3e2>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a1b      	ldr	r2, [pc, #108]	; (8003ae0 <HAL_DMA_IRQHandler+0x424>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d013      	beq.n	8003a9e <HAL_DMA_IRQHandler+0x3e2>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a1a      	ldr	r2, [pc, #104]	; (8003ae4 <HAL_DMA_IRQHandler+0x428>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d00e      	beq.n	8003a9e <HAL_DMA_IRQHandler+0x3e2>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a18      	ldr	r2, [pc, #96]	; (8003ae8 <HAL_DMA_IRQHandler+0x42c>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d009      	beq.n	8003a9e <HAL_DMA_IRQHandler+0x3e2>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a17      	ldr	r2, [pc, #92]	; (8003aec <HAL_DMA_IRQHandler+0x430>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d004      	beq.n	8003a9e <HAL_DMA_IRQHandler+0x3e2>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a15      	ldr	r2, [pc, #84]	; (8003af0 <HAL_DMA_IRQHandler+0x434>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d12a      	bne.n	8003af4 <HAL_DMA_IRQHandler+0x438>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	bf14      	ite	ne
 8003aac:	2301      	movne	r3, #1
 8003aae:	2300      	moveq	r3, #0
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	e023      	b.n	8003afc <HAL_DMA_IRQHandler+0x440>
 8003ab4:	40020010 	.word	0x40020010
 8003ab8:	40020028 	.word	0x40020028
 8003abc:	40020040 	.word	0x40020040
 8003ac0:	40020058 	.word	0x40020058
 8003ac4:	40020070 	.word	0x40020070
 8003ac8:	40020088 	.word	0x40020088
 8003acc:	400200a0 	.word	0x400200a0
 8003ad0:	400200b8 	.word	0x400200b8
 8003ad4:	40020410 	.word	0x40020410
 8003ad8:	40020428 	.word	0x40020428
 8003adc:	40020440 	.word	0x40020440
 8003ae0:	40020458 	.word	0x40020458
 8003ae4:	40020470 	.word	0x40020470
 8003ae8:	40020488 	.word	0x40020488
 8003aec:	400204a0 	.word	0x400204a0
 8003af0:	400204b8 	.word	0x400204b8
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2300      	movs	r3, #0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00d      	beq.n	8003b1c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b04:	f003 031f 	and.w	r3, r3, #31
 8003b08:	2204      	movs	r2, #4
 8003b0a:	409a      	lsls	r2, r3
 8003b0c:	6a3b      	ldr	r3, [r7, #32]
 8003b0e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b14:	f043 0204 	orr.w	r2, r3, #4
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b20:	f003 031f 	and.w	r3, r3, #31
 8003b24:	2210      	movs	r2, #16
 8003b26:	409a      	lsls	r2, r3
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f000 80a6 	beq.w	8003c7e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a85      	ldr	r2, [pc, #532]	; (8003d4c <HAL_DMA_IRQHandler+0x690>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d04a      	beq.n	8003bd2 <HAL_DMA_IRQHandler+0x516>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a83      	ldr	r2, [pc, #524]	; (8003d50 <HAL_DMA_IRQHandler+0x694>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d045      	beq.n	8003bd2 <HAL_DMA_IRQHandler+0x516>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a82      	ldr	r2, [pc, #520]	; (8003d54 <HAL_DMA_IRQHandler+0x698>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d040      	beq.n	8003bd2 <HAL_DMA_IRQHandler+0x516>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a80      	ldr	r2, [pc, #512]	; (8003d58 <HAL_DMA_IRQHandler+0x69c>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d03b      	beq.n	8003bd2 <HAL_DMA_IRQHandler+0x516>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a7f      	ldr	r2, [pc, #508]	; (8003d5c <HAL_DMA_IRQHandler+0x6a0>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d036      	beq.n	8003bd2 <HAL_DMA_IRQHandler+0x516>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a7d      	ldr	r2, [pc, #500]	; (8003d60 <HAL_DMA_IRQHandler+0x6a4>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d031      	beq.n	8003bd2 <HAL_DMA_IRQHandler+0x516>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a7c      	ldr	r2, [pc, #496]	; (8003d64 <HAL_DMA_IRQHandler+0x6a8>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d02c      	beq.n	8003bd2 <HAL_DMA_IRQHandler+0x516>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a7a      	ldr	r2, [pc, #488]	; (8003d68 <HAL_DMA_IRQHandler+0x6ac>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d027      	beq.n	8003bd2 <HAL_DMA_IRQHandler+0x516>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a79      	ldr	r2, [pc, #484]	; (8003d6c <HAL_DMA_IRQHandler+0x6b0>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d022      	beq.n	8003bd2 <HAL_DMA_IRQHandler+0x516>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a77      	ldr	r2, [pc, #476]	; (8003d70 <HAL_DMA_IRQHandler+0x6b4>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d01d      	beq.n	8003bd2 <HAL_DMA_IRQHandler+0x516>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a76      	ldr	r2, [pc, #472]	; (8003d74 <HAL_DMA_IRQHandler+0x6b8>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d018      	beq.n	8003bd2 <HAL_DMA_IRQHandler+0x516>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a74      	ldr	r2, [pc, #464]	; (8003d78 <HAL_DMA_IRQHandler+0x6bc>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d013      	beq.n	8003bd2 <HAL_DMA_IRQHandler+0x516>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a73      	ldr	r2, [pc, #460]	; (8003d7c <HAL_DMA_IRQHandler+0x6c0>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d00e      	beq.n	8003bd2 <HAL_DMA_IRQHandler+0x516>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a71      	ldr	r2, [pc, #452]	; (8003d80 <HAL_DMA_IRQHandler+0x6c4>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d009      	beq.n	8003bd2 <HAL_DMA_IRQHandler+0x516>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a70      	ldr	r2, [pc, #448]	; (8003d84 <HAL_DMA_IRQHandler+0x6c8>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d004      	beq.n	8003bd2 <HAL_DMA_IRQHandler+0x516>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a6e      	ldr	r2, [pc, #440]	; (8003d88 <HAL_DMA_IRQHandler+0x6cc>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d10a      	bne.n	8003be8 <HAL_DMA_IRQHandler+0x52c>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0308 	and.w	r3, r3, #8
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	bf14      	ite	ne
 8003be0:	2301      	movne	r3, #1
 8003be2:	2300      	moveq	r3, #0
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	e009      	b.n	8003bfc <HAL_DMA_IRQHandler+0x540>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0304 	and.w	r3, r3, #4
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	bf14      	ite	ne
 8003bf6:	2301      	movne	r3, #1
 8003bf8:	2300      	moveq	r3, #0
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d03e      	beq.n	8003c7e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c04:	f003 031f 	and.w	r3, r3, #31
 8003c08:	2210      	movs	r2, #16
 8003c0a:	409a      	lsls	r2, r3
 8003c0c:	6a3b      	ldr	r3, [r7, #32]
 8003c0e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d018      	beq.n	8003c50 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d108      	bne.n	8003c3e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d024      	beq.n	8003c7e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	4798      	blx	r3
 8003c3c:	e01f      	b.n	8003c7e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d01b      	beq.n	8003c7e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	4798      	blx	r3
 8003c4e:	e016      	b.n	8003c7e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d107      	bne.n	8003c6e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f022 0208 	bic.w	r2, r2, #8
 8003c6c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c82:	f003 031f 	and.w	r3, r3, #31
 8003c86:	2220      	movs	r2, #32
 8003c88:	409a      	lsls	r2, r3
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f000 8110 	beq.w	8003eb4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a2c      	ldr	r2, [pc, #176]	; (8003d4c <HAL_DMA_IRQHandler+0x690>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d04a      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x678>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a2b      	ldr	r2, [pc, #172]	; (8003d50 <HAL_DMA_IRQHandler+0x694>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d045      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x678>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a29      	ldr	r2, [pc, #164]	; (8003d54 <HAL_DMA_IRQHandler+0x698>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d040      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x678>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a28      	ldr	r2, [pc, #160]	; (8003d58 <HAL_DMA_IRQHandler+0x69c>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d03b      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x678>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a26      	ldr	r2, [pc, #152]	; (8003d5c <HAL_DMA_IRQHandler+0x6a0>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d036      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x678>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a25      	ldr	r2, [pc, #148]	; (8003d60 <HAL_DMA_IRQHandler+0x6a4>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d031      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x678>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a23      	ldr	r2, [pc, #140]	; (8003d64 <HAL_DMA_IRQHandler+0x6a8>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d02c      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x678>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a22      	ldr	r2, [pc, #136]	; (8003d68 <HAL_DMA_IRQHandler+0x6ac>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d027      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x678>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a20      	ldr	r2, [pc, #128]	; (8003d6c <HAL_DMA_IRQHandler+0x6b0>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d022      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x678>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a1f      	ldr	r2, [pc, #124]	; (8003d70 <HAL_DMA_IRQHandler+0x6b4>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d01d      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x678>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a1d      	ldr	r2, [pc, #116]	; (8003d74 <HAL_DMA_IRQHandler+0x6b8>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d018      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x678>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a1c      	ldr	r2, [pc, #112]	; (8003d78 <HAL_DMA_IRQHandler+0x6bc>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d013      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x678>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a1a      	ldr	r2, [pc, #104]	; (8003d7c <HAL_DMA_IRQHandler+0x6c0>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d00e      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x678>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a19      	ldr	r2, [pc, #100]	; (8003d80 <HAL_DMA_IRQHandler+0x6c4>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d009      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x678>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a17      	ldr	r2, [pc, #92]	; (8003d84 <HAL_DMA_IRQHandler+0x6c8>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d004      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x678>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a16      	ldr	r2, [pc, #88]	; (8003d88 <HAL_DMA_IRQHandler+0x6cc>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d12b      	bne.n	8003d8c <HAL_DMA_IRQHandler+0x6d0>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0310 	and.w	r3, r3, #16
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	bf14      	ite	ne
 8003d42:	2301      	movne	r3, #1
 8003d44:	2300      	moveq	r3, #0
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	e02a      	b.n	8003da0 <HAL_DMA_IRQHandler+0x6e4>
 8003d4a:	bf00      	nop
 8003d4c:	40020010 	.word	0x40020010
 8003d50:	40020028 	.word	0x40020028
 8003d54:	40020040 	.word	0x40020040
 8003d58:	40020058 	.word	0x40020058
 8003d5c:	40020070 	.word	0x40020070
 8003d60:	40020088 	.word	0x40020088
 8003d64:	400200a0 	.word	0x400200a0
 8003d68:	400200b8 	.word	0x400200b8
 8003d6c:	40020410 	.word	0x40020410
 8003d70:	40020428 	.word	0x40020428
 8003d74:	40020440 	.word	0x40020440
 8003d78:	40020458 	.word	0x40020458
 8003d7c:	40020470 	.word	0x40020470
 8003d80:	40020488 	.word	0x40020488
 8003d84:	400204a0 	.word	0x400204a0
 8003d88:	400204b8 	.word	0x400204b8
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	bf14      	ite	ne
 8003d9a:	2301      	movne	r3, #1
 8003d9c:	2300      	moveq	r3, #0
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f000 8087 	beq.w	8003eb4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003daa:	f003 031f 	and.w	r3, r3, #31
 8003dae:	2220      	movs	r2, #32
 8003db0:	409a      	lsls	r2, r3
 8003db2:	6a3b      	ldr	r3, [r7, #32]
 8003db4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b04      	cmp	r3, #4
 8003dc0:	d139      	bne.n	8003e36 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f022 0216 	bic.w	r2, r2, #22
 8003dd0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	695a      	ldr	r2, [r3, #20]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003de0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d103      	bne.n	8003df2 <HAL_DMA_IRQHandler+0x736>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d007      	beq.n	8003e02 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f022 0208 	bic.w	r2, r2, #8
 8003e00:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e06:	f003 031f 	and.w	r3, r3, #31
 8003e0a:	223f      	movs	r2, #63	; 0x3f
 8003e0c:	409a      	lsls	r2, r3
 8003e0e:	6a3b      	ldr	r3, [r7, #32]
 8003e10:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f000 834a 	beq.w	80044c0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	4798      	blx	r3
          }
          return;
 8003e34:	e344      	b.n	80044c0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d018      	beq.n	8003e76 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d108      	bne.n	8003e64 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d02c      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	4798      	blx	r3
 8003e62:	e027      	b.n	8003eb4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d023      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	4798      	blx	r3
 8003e74:	e01e      	b.n	8003eb4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d10f      	bne.n	8003ea4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 0210 	bic.w	r2, r2, #16
 8003e92:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d003      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f000 8306 	beq.w	80044ca <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f000 8088 	beq.w	8003fdc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2204      	movs	r2, #4
 8003ed0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a7a      	ldr	r2, [pc, #488]	; (80040c4 <HAL_DMA_IRQHandler+0xa08>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d04a      	beq.n	8003f74 <HAL_DMA_IRQHandler+0x8b8>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a79      	ldr	r2, [pc, #484]	; (80040c8 <HAL_DMA_IRQHandler+0xa0c>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d045      	beq.n	8003f74 <HAL_DMA_IRQHandler+0x8b8>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a77      	ldr	r2, [pc, #476]	; (80040cc <HAL_DMA_IRQHandler+0xa10>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d040      	beq.n	8003f74 <HAL_DMA_IRQHandler+0x8b8>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a76      	ldr	r2, [pc, #472]	; (80040d0 <HAL_DMA_IRQHandler+0xa14>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d03b      	beq.n	8003f74 <HAL_DMA_IRQHandler+0x8b8>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a74      	ldr	r2, [pc, #464]	; (80040d4 <HAL_DMA_IRQHandler+0xa18>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d036      	beq.n	8003f74 <HAL_DMA_IRQHandler+0x8b8>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a73      	ldr	r2, [pc, #460]	; (80040d8 <HAL_DMA_IRQHandler+0xa1c>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d031      	beq.n	8003f74 <HAL_DMA_IRQHandler+0x8b8>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a71      	ldr	r2, [pc, #452]	; (80040dc <HAL_DMA_IRQHandler+0xa20>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d02c      	beq.n	8003f74 <HAL_DMA_IRQHandler+0x8b8>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a70      	ldr	r2, [pc, #448]	; (80040e0 <HAL_DMA_IRQHandler+0xa24>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d027      	beq.n	8003f74 <HAL_DMA_IRQHandler+0x8b8>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a6e      	ldr	r2, [pc, #440]	; (80040e4 <HAL_DMA_IRQHandler+0xa28>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d022      	beq.n	8003f74 <HAL_DMA_IRQHandler+0x8b8>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a6d      	ldr	r2, [pc, #436]	; (80040e8 <HAL_DMA_IRQHandler+0xa2c>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d01d      	beq.n	8003f74 <HAL_DMA_IRQHandler+0x8b8>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a6b      	ldr	r2, [pc, #428]	; (80040ec <HAL_DMA_IRQHandler+0xa30>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d018      	beq.n	8003f74 <HAL_DMA_IRQHandler+0x8b8>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a6a      	ldr	r2, [pc, #424]	; (80040f0 <HAL_DMA_IRQHandler+0xa34>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d013      	beq.n	8003f74 <HAL_DMA_IRQHandler+0x8b8>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a68      	ldr	r2, [pc, #416]	; (80040f4 <HAL_DMA_IRQHandler+0xa38>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d00e      	beq.n	8003f74 <HAL_DMA_IRQHandler+0x8b8>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a67      	ldr	r2, [pc, #412]	; (80040f8 <HAL_DMA_IRQHandler+0xa3c>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d009      	beq.n	8003f74 <HAL_DMA_IRQHandler+0x8b8>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a65      	ldr	r2, [pc, #404]	; (80040fc <HAL_DMA_IRQHandler+0xa40>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d004      	beq.n	8003f74 <HAL_DMA_IRQHandler+0x8b8>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a64      	ldr	r2, [pc, #400]	; (8004100 <HAL_DMA_IRQHandler+0xa44>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d108      	bne.n	8003f86 <HAL_DMA_IRQHandler+0x8ca>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f022 0201 	bic.w	r2, r2, #1
 8003f82:	601a      	str	r2, [r3, #0]
 8003f84:	e007      	b.n	8003f96 <HAL_DMA_IRQHandler+0x8da>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f022 0201 	bic.w	r2, r2, #1
 8003f94:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	3301      	adds	r3, #1
 8003f9a:	60fb      	str	r3, [r7, #12]
 8003f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d307      	bcc.n	8003fb2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0301 	and.w	r3, r3, #1
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1f2      	bne.n	8003f96 <HAL_DMA_IRQHandler+0x8da>
 8003fb0:	e000      	b.n	8003fb4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003fb2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d004      	beq.n	8003fcc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2203      	movs	r2, #3
 8003fc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003fca:	e003      	b.n	8003fd4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f000 8272 	beq.w	80044ca <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	4798      	blx	r3
 8003fee:	e26c      	b.n	80044ca <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a43      	ldr	r2, [pc, #268]	; (8004104 <HAL_DMA_IRQHandler+0xa48>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d022      	beq.n	8004040 <HAL_DMA_IRQHandler+0x984>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a42      	ldr	r2, [pc, #264]	; (8004108 <HAL_DMA_IRQHandler+0xa4c>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d01d      	beq.n	8004040 <HAL_DMA_IRQHandler+0x984>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a40      	ldr	r2, [pc, #256]	; (800410c <HAL_DMA_IRQHandler+0xa50>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d018      	beq.n	8004040 <HAL_DMA_IRQHandler+0x984>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a3f      	ldr	r2, [pc, #252]	; (8004110 <HAL_DMA_IRQHandler+0xa54>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d013      	beq.n	8004040 <HAL_DMA_IRQHandler+0x984>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a3d      	ldr	r2, [pc, #244]	; (8004114 <HAL_DMA_IRQHandler+0xa58>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d00e      	beq.n	8004040 <HAL_DMA_IRQHandler+0x984>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a3c      	ldr	r2, [pc, #240]	; (8004118 <HAL_DMA_IRQHandler+0xa5c>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d009      	beq.n	8004040 <HAL_DMA_IRQHandler+0x984>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a3a      	ldr	r2, [pc, #232]	; (800411c <HAL_DMA_IRQHandler+0xa60>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d004      	beq.n	8004040 <HAL_DMA_IRQHandler+0x984>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a39      	ldr	r2, [pc, #228]	; (8004120 <HAL_DMA_IRQHandler+0xa64>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d101      	bne.n	8004044 <HAL_DMA_IRQHandler+0x988>
 8004040:	2301      	movs	r3, #1
 8004042:	e000      	b.n	8004046 <HAL_DMA_IRQHandler+0x98a>
 8004044:	2300      	movs	r3, #0
 8004046:	2b00      	cmp	r3, #0
 8004048:	f000 823f 	beq.w	80044ca <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004058:	f003 031f 	and.w	r3, r3, #31
 800405c:	2204      	movs	r2, #4
 800405e:	409a      	lsls	r2, r3
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	4013      	ands	r3, r2
 8004064:	2b00      	cmp	r3, #0
 8004066:	f000 80cd 	beq.w	8004204 <HAL_DMA_IRQHandler+0xb48>
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	f003 0304 	and.w	r3, r3, #4
 8004070:	2b00      	cmp	r3, #0
 8004072:	f000 80c7 	beq.w	8004204 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800407a:	f003 031f 	and.w	r3, r3, #31
 800407e:	2204      	movs	r2, #4
 8004080:	409a      	lsls	r2, r3
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d049      	beq.n	8004124 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d109      	bne.n	80040ae <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f000 8210 	beq.w	80044c4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040ac:	e20a      	b.n	80044c4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f000 8206 	beq.w	80044c4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040c0:	e200      	b.n	80044c4 <HAL_DMA_IRQHandler+0xe08>
 80040c2:	bf00      	nop
 80040c4:	40020010 	.word	0x40020010
 80040c8:	40020028 	.word	0x40020028
 80040cc:	40020040 	.word	0x40020040
 80040d0:	40020058 	.word	0x40020058
 80040d4:	40020070 	.word	0x40020070
 80040d8:	40020088 	.word	0x40020088
 80040dc:	400200a0 	.word	0x400200a0
 80040e0:	400200b8 	.word	0x400200b8
 80040e4:	40020410 	.word	0x40020410
 80040e8:	40020428 	.word	0x40020428
 80040ec:	40020440 	.word	0x40020440
 80040f0:	40020458 	.word	0x40020458
 80040f4:	40020470 	.word	0x40020470
 80040f8:	40020488 	.word	0x40020488
 80040fc:	400204a0 	.word	0x400204a0
 8004100:	400204b8 	.word	0x400204b8
 8004104:	58025408 	.word	0x58025408
 8004108:	5802541c 	.word	0x5802541c
 800410c:	58025430 	.word	0x58025430
 8004110:	58025444 	.word	0x58025444
 8004114:	58025458 	.word	0x58025458
 8004118:	5802546c 	.word	0x5802546c
 800411c:	58025480 	.word	0x58025480
 8004120:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	f003 0320 	and.w	r3, r3, #32
 800412a:	2b00      	cmp	r3, #0
 800412c:	d160      	bne.n	80041f0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a7f      	ldr	r2, [pc, #508]	; (8004330 <HAL_DMA_IRQHandler+0xc74>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d04a      	beq.n	80041ce <HAL_DMA_IRQHandler+0xb12>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a7d      	ldr	r2, [pc, #500]	; (8004334 <HAL_DMA_IRQHandler+0xc78>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d045      	beq.n	80041ce <HAL_DMA_IRQHandler+0xb12>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a7c      	ldr	r2, [pc, #496]	; (8004338 <HAL_DMA_IRQHandler+0xc7c>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d040      	beq.n	80041ce <HAL_DMA_IRQHandler+0xb12>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a7a      	ldr	r2, [pc, #488]	; (800433c <HAL_DMA_IRQHandler+0xc80>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d03b      	beq.n	80041ce <HAL_DMA_IRQHandler+0xb12>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a79      	ldr	r2, [pc, #484]	; (8004340 <HAL_DMA_IRQHandler+0xc84>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d036      	beq.n	80041ce <HAL_DMA_IRQHandler+0xb12>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a77      	ldr	r2, [pc, #476]	; (8004344 <HAL_DMA_IRQHandler+0xc88>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d031      	beq.n	80041ce <HAL_DMA_IRQHandler+0xb12>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a76      	ldr	r2, [pc, #472]	; (8004348 <HAL_DMA_IRQHandler+0xc8c>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d02c      	beq.n	80041ce <HAL_DMA_IRQHandler+0xb12>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a74      	ldr	r2, [pc, #464]	; (800434c <HAL_DMA_IRQHandler+0xc90>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d027      	beq.n	80041ce <HAL_DMA_IRQHandler+0xb12>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a73      	ldr	r2, [pc, #460]	; (8004350 <HAL_DMA_IRQHandler+0xc94>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d022      	beq.n	80041ce <HAL_DMA_IRQHandler+0xb12>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a71      	ldr	r2, [pc, #452]	; (8004354 <HAL_DMA_IRQHandler+0xc98>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d01d      	beq.n	80041ce <HAL_DMA_IRQHandler+0xb12>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a70      	ldr	r2, [pc, #448]	; (8004358 <HAL_DMA_IRQHandler+0xc9c>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d018      	beq.n	80041ce <HAL_DMA_IRQHandler+0xb12>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a6e      	ldr	r2, [pc, #440]	; (800435c <HAL_DMA_IRQHandler+0xca0>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d013      	beq.n	80041ce <HAL_DMA_IRQHandler+0xb12>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a6d      	ldr	r2, [pc, #436]	; (8004360 <HAL_DMA_IRQHandler+0xca4>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d00e      	beq.n	80041ce <HAL_DMA_IRQHandler+0xb12>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a6b      	ldr	r2, [pc, #428]	; (8004364 <HAL_DMA_IRQHandler+0xca8>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d009      	beq.n	80041ce <HAL_DMA_IRQHandler+0xb12>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a6a      	ldr	r2, [pc, #424]	; (8004368 <HAL_DMA_IRQHandler+0xcac>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d004      	beq.n	80041ce <HAL_DMA_IRQHandler+0xb12>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a68      	ldr	r2, [pc, #416]	; (800436c <HAL_DMA_IRQHandler+0xcb0>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d108      	bne.n	80041e0 <HAL_DMA_IRQHandler+0xb24>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 0208 	bic.w	r2, r2, #8
 80041dc:	601a      	str	r2, [r3, #0]
 80041de:	e007      	b.n	80041f0 <HAL_DMA_IRQHandler+0xb34>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f022 0204 	bic.w	r2, r2, #4
 80041ee:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 8165 	beq.w	80044c4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004202:	e15f      	b.n	80044c4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004208:	f003 031f 	and.w	r3, r3, #31
 800420c:	2202      	movs	r2, #2
 800420e:	409a      	lsls	r2, r3
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	4013      	ands	r3, r2
 8004214:	2b00      	cmp	r3, #0
 8004216:	f000 80c5 	beq.w	80043a4 <HAL_DMA_IRQHandler+0xce8>
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	f003 0302 	and.w	r3, r3, #2
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 80bf 	beq.w	80043a4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800422a:	f003 031f 	and.w	r3, r3, #31
 800422e:	2202      	movs	r2, #2
 8004230:	409a      	lsls	r2, r3
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d018      	beq.n	8004272 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d109      	bne.n	800425e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800424e:	2b00      	cmp	r3, #0
 8004250:	f000 813a 	beq.w	80044c8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800425c:	e134      	b.n	80044c8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004262:	2b00      	cmp	r3, #0
 8004264:	f000 8130 	beq.w	80044c8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004270:	e12a      	b.n	80044c8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	f003 0320 	and.w	r3, r3, #32
 8004278:	2b00      	cmp	r3, #0
 800427a:	f040 8089 	bne.w	8004390 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a2b      	ldr	r2, [pc, #172]	; (8004330 <HAL_DMA_IRQHandler+0xc74>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d04a      	beq.n	800431e <HAL_DMA_IRQHandler+0xc62>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a29      	ldr	r2, [pc, #164]	; (8004334 <HAL_DMA_IRQHandler+0xc78>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d045      	beq.n	800431e <HAL_DMA_IRQHandler+0xc62>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a28      	ldr	r2, [pc, #160]	; (8004338 <HAL_DMA_IRQHandler+0xc7c>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d040      	beq.n	800431e <HAL_DMA_IRQHandler+0xc62>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a26      	ldr	r2, [pc, #152]	; (800433c <HAL_DMA_IRQHandler+0xc80>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d03b      	beq.n	800431e <HAL_DMA_IRQHandler+0xc62>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a25      	ldr	r2, [pc, #148]	; (8004340 <HAL_DMA_IRQHandler+0xc84>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d036      	beq.n	800431e <HAL_DMA_IRQHandler+0xc62>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a23      	ldr	r2, [pc, #140]	; (8004344 <HAL_DMA_IRQHandler+0xc88>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d031      	beq.n	800431e <HAL_DMA_IRQHandler+0xc62>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a22      	ldr	r2, [pc, #136]	; (8004348 <HAL_DMA_IRQHandler+0xc8c>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d02c      	beq.n	800431e <HAL_DMA_IRQHandler+0xc62>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a20      	ldr	r2, [pc, #128]	; (800434c <HAL_DMA_IRQHandler+0xc90>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d027      	beq.n	800431e <HAL_DMA_IRQHandler+0xc62>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a1f      	ldr	r2, [pc, #124]	; (8004350 <HAL_DMA_IRQHandler+0xc94>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d022      	beq.n	800431e <HAL_DMA_IRQHandler+0xc62>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a1d      	ldr	r2, [pc, #116]	; (8004354 <HAL_DMA_IRQHandler+0xc98>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d01d      	beq.n	800431e <HAL_DMA_IRQHandler+0xc62>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a1c      	ldr	r2, [pc, #112]	; (8004358 <HAL_DMA_IRQHandler+0xc9c>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d018      	beq.n	800431e <HAL_DMA_IRQHandler+0xc62>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a1a      	ldr	r2, [pc, #104]	; (800435c <HAL_DMA_IRQHandler+0xca0>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d013      	beq.n	800431e <HAL_DMA_IRQHandler+0xc62>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a19      	ldr	r2, [pc, #100]	; (8004360 <HAL_DMA_IRQHandler+0xca4>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d00e      	beq.n	800431e <HAL_DMA_IRQHandler+0xc62>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a17      	ldr	r2, [pc, #92]	; (8004364 <HAL_DMA_IRQHandler+0xca8>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d009      	beq.n	800431e <HAL_DMA_IRQHandler+0xc62>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a16      	ldr	r2, [pc, #88]	; (8004368 <HAL_DMA_IRQHandler+0xcac>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d004      	beq.n	800431e <HAL_DMA_IRQHandler+0xc62>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a14      	ldr	r2, [pc, #80]	; (800436c <HAL_DMA_IRQHandler+0xcb0>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d128      	bne.n	8004370 <HAL_DMA_IRQHandler+0xcb4>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f022 0214 	bic.w	r2, r2, #20
 800432c:	601a      	str	r2, [r3, #0]
 800432e:	e027      	b.n	8004380 <HAL_DMA_IRQHandler+0xcc4>
 8004330:	40020010 	.word	0x40020010
 8004334:	40020028 	.word	0x40020028
 8004338:	40020040 	.word	0x40020040
 800433c:	40020058 	.word	0x40020058
 8004340:	40020070 	.word	0x40020070
 8004344:	40020088 	.word	0x40020088
 8004348:	400200a0 	.word	0x400200a0
 800434c:	400200b8 	.word	0x400200b8
 8004350:	40020410 	.word	0x40020410
 8004354:	40020428 	.word	0x40020428
 8004358:	40020440 	.word	0x40020440
 800435c:	40020458 	.word	0x40020458
 8004360:	40020470 	.word	0x40020470
 8004364:	40020488 	.word	0x40020488
 8004368:	400204a0 	.word	0x400204a0
 800436c:	400204b8 	.word	0x400204b8
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f022 020a 	bic.w	r2, r2, #10
 800437e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004394:	2b00      	cmp	r3, #0
 8004396:	f000 8097 	beq.w	80044c8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043a2:	e091      	b.n	80044c8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043a8:	f003 031f 	and.w	r3, r3, #31
 80043ac:	2208      	movs	r2, #8
 80043ae:	409a      	lsls	r2, r3
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	4013      	ands	r3, r2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f000 8088 	beq.w	80044ca <HAL_DMA_IRQHandler+0xe0e>
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	f003 0308 	and.w	r3, r3, #8
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f000 8082 	beq.w	80044ca <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a41      	ldr	r2, [pc, #260]	; (80044d0 <HAL_DMA_IRQHandler+0xe14>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d04a      	beq.n	8004466 <HAL_DMA_IRQHandler+0xdaa>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a3f      	ldr	r2, [pc, #252]	; (80044d4 <HAL_DMA_IRQHandler+0xe18>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d045      	beq.n	8004466 <HAL_DMA_IRQHandler+0xdaa>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a3e      	ldr	r2, [pc, #248]	; (80044d8 <HAL_DMA_IRQHandler+0xe1c>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d040      	beq.n	8004466 <HAL_DMA_IRQHandler+0xdaa>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a3c      	ldr	r2, [pc, #240]	; (80044dc <HAL_DMA_IRQHandler+0xe20>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d03b      	beq.n	8004466 <HAL_DMA_IRQHandler+0xdaa>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a3b      	ldr	r2, [pc, #236]	; (80044e0 <HAL_DMA_IRQHandler+0xe24>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d036      	beq.n	8004466 <HAL_DMA_IRQHandler+0xdaa>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a39      	ldr	r2, [pc, #228]	; (80044e4 <HAL_DMA_IRQHandler+0xe28>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d031      	beq.n	8004466 <HAL_DMA_IRQHandler+0xdaa>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a38      	ldr	r2, [pc, #224]	; (80044e8 <HAL_DMA_IRQHandler+0xe2c>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d02c      	beq.n	8004466 <HAL_DMA_IRQHandler+0xdaa>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a36      	ldr	r2, [pc, #216]	; (80044ec <HAL_DMA_IRQHandler+0xe30>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d027      	beq.n	8004466 <HAL_DMA_IRQHandler+0xdaa>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a35      	ldr	r2, [pc, #212]	; (80044f0 <HAL_DMA_IRQHandler+0xe34>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d022      	beq.n	8004466 <HAL_DMA_IRQHandler+0xdaa>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a33      	ldr	r2, [pc, #204]	; (80044f4 <HAL_DMA_IRQHandler+0xe38>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d01d      	beq.n	8004466 <HAL_DMA_IRQHandler+0xdaa>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a32      	ldr	r2, [pc, #200]	; (80044f8 <HAL_DMA_IRQHandler+0xe3c>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d018      	beq.n	8004466 <HAL_DMA_IRQHandler+0xdaa>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a30      	ldr	r2, [pc, #192]	; (80044fc <HAL_DMA_IRQHandler+0xe40>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d013      	beq.n	8004466 <HAL_DMA_IRQHandler+0xdaa>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a2f      	ldr	r2, [pc, #188]	; (8004500 <HAL_DMA_IRQHandler+0xe44>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d00e      	beq.n	8004466 <HAL_DMA_IRQHandler+0xdaa>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a2d      	ldr	r2, [pc, #180]	; (8004504 <HAL_DMA_IRQHandler+0xe48>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d009      	beq.n	8004466 <HAL_DMA_IRQHandler+0xdaa>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a2c      	ldr	r2, [pc, #176]	; (8004508 <HAL_DMA_IRQHandler+0xe4c>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d004      	beq.n	8004466 <HAL_DMA_IRQHandler+0xdaa>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a2a      	ldr	r2, [pc, #168]	; (800450c <HAL_DMA_IRQHandler+0xe50>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d108      	bne.n	8004478 <HAL_DMA_IRQHandler+0xdbc>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f022 021c 	bic.w	r2, r2, #28
 8004474:	601a      	str	r2, [r3, #0]
 8004476:	e007      	b.n	8004488 <HAL_DMA_IRQHandler+0xdcc>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f022 020e 	bic.w	r2, r2, #14
 8004486:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800448c:	f003 031f 	and.w	r3, r3, #31
 8004490:	2201      	movs	r2, #1
 8004492:	409a      	lsls	r2, r3
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2201      	movs	r2, #1
 80044a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d009      	beq.n	80044ca <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	4798      	blx	r3
 80044be:	e004      	b.n	80044ca <HAL_DMA_IRQHandler+0xe0e>
          return;
 80044c0:	bf00      	nop
 80044c2:	e002      	b.n	80044ca <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044c4:	bf00      	nop
 80044c6:	e000      	b.n	80044ca <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044c8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80044ca:	3728      	adds	r7, #40	; 0x28
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	40020010 	.word	0x40020010
 80044d4:	40020028 	.word	0x40020028
 80044d8:	40020040 	.word	0x40020040
 80044dc:	40020058 	.word	0x40020058
 80044e0:	40020070 	.word	0x40020070
 80044e4:	40020088 	.word	0x40020088
 80044e8:	400200a0 	.word	0x400200a0
 80044ec:	400200b8 	.word	0x400200b8
 80044f0:	40020410 	.word	0x40020410
 80044f4:	40020428 	.word	0x40020428
 80044f8:	40020440 	.word	0x40020440
 80044fc:	40020458 	.word	0x40020458
 8004500:	40020470 	.word	0x40020470
 8004504:	40020488 	.word	0x40020488
 8004508:	400204a0 	.word	0x400204a0
 800450c:	400204b8 	.word	0x400204b8

08004510 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004510:	b480      	push	{r7}
 8004512:	b087      	sub	sp, #28
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	607a      	str	r2, [r7, #4]
 800451c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004522:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004528:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a7f      	ldr	r2, [pc, #508]	; (800472c <DMA_SetConfig+0x21c>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d072      	beq.n	800461a <DMA_SetConfig+0x10a>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a7d      	ldr	r2, [pc, #500]	; (8004730 <DMA_SetConfig+0x220>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d06d      	beq.n	800461a <DMA_SetConfig+0x10a>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a7c      	ldr	r2, [pc, #496]	; (8004734 <DMA_SetConfig+0x224>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d068      	beq.n	800461a <DMA_SetConfig+0x10a>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a7a      	ldr	r2, [pc, #488]	; (8004738 <DMA_SetConfig+0x228>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d063      	beq.n	800461a <DMA_SetConfig+0x10a>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a79      	ldr	r2, [pc, #484]	; (800473c <DMA_SetConfig+0x22c>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d05e      	beq.n	800461a <DMA_SetConfig+0x10a>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a77      	ldr	r2, [pc, #476]	; (8004740 <DMA_SetConfig+0x230>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d059      	beq.n	800461a <DMA_SetConfig+0x10a>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a76      	ldr	r2, [pc, #472]	; (8004744 <DMA_SetConfig+0x234>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d054      	beq.n	800461a <DMA_SetConfig+0x10a>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a74      	ldr	r2, [pc, #464]	; (8004748 <DMA_SetConfig+0x238>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d04f      	beq.n	800461a <DMA_SetConfig+0x10a>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a73      	ldr	r2, [pc, #460]	; (800474c <DMA_SetConfig+0x23c>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d04a      	beq.n	800461a <DMA_SetConfig+0x10a>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a71      	ldr	r2, [pc, #452]	; (8004750 <DMA_SetConfig+0x240>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d045      	beq.n	800461a <DMA_SetConfig+0x10a>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a70      	ldr	r2, [pc, #448]	; (8004754 <DMA_SetConfig+0x244>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d040      	beq.n	800461a <DMA_SetConfig+0x10a>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a6e      	ldr	r2, [pc, #440]	; (8004758 <DMA_SetConfig+0x248>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d03b      	beq.n	800461a <DMA_SetConfig+0x10a>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a6d      	ldr	r2, [pc, #436]	; (800475c <DMA_SetConfig+0x24c>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d036      	beq.n	800461a <DMA_SetConfig+0x10a>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a6b      	ldr	r2, [pc, #428]	; (8004760 <DMA_SetConfig+0x250>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d031      	beq.n	800461a <DMA_SetConfig+0x10a>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a6a      	ldr	r2, [pc, #424]	; (8004764 <DMA_SetConfig+0x254>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d02c      	beq.n	800461a <DMA_SetConfig+0x10a>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a68      	ldr	r2, [pc, #416]	; (8004768 <DMA_SetConfig+0x258>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d027      	beq.n	800461a <DMA_SetConfig+0x10a>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a67      	ldr	r2, [pc, #412]	; (800476c <DMA_SetConfig+0x25c>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d022      	beq.n	800461a <DMA_SetConfig+0x10a>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a65      	ldr	r2, [pc, #404]	; (8004770 <DMA_SetConfig+0x260>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d01d      	beq.n	800461a <DMA_SetConfig+0x10a>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a64      	ldr	r2, [pc, #400]	; (8004774 <DMA_SetConfig+0x264>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d018      	beq.n	800461a <DMA_SetConfig+0x10a>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a62      	ldr	r2, [pc, #392]	; (8004778 <DMA_SetConfig+0x268>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d013      	beq.n	800461a <DMA_SetConfig+0x10a>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a61      	ldr	r2, [pc, #388]	; (800477c <DMA_SetConfig+0x26c>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d00e      	beq.n	800461a <DMA_SetConfig+0x10a>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a5f      	ldr	r2, [pc, #380]	; (8004780 <DMA_SetConfig+0x270>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d009      	beq.n	800461a <DMA_SetConfig+0x10a>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a5e      	ldr	r2, [pc, #376]	; (8004784 <DMA_SetConfig+0x274>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d004      	beq.n	800461a <DMA_SetConfig+0x10a>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a5c      	ldr	r2, [pc, #368]	; (8004788 <DMA_SetConfig+0x278>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d101      	bne.n	800461e <DMA_SetConfig+0x10e>
 800461a:	2301      	movs	r3, #1
 800461c:	e000      	b.n	8004620 <DMA_SetConfig+0x110>
 800461e:	2300      	movs	r3, #0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00d      	beq.n	8004640 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800462c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004632:	2b00      	cmp	r3, #0
 8004634:	d004      	beq.n	8004640 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800463e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a39      	ldr	r2, [pc, #228]	; (800472c <DMA_SetConfig+0x21c>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d04a      	beq.n	80046e0 <DMA_SetConfig+0x1d0>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a38      	ldr	r2, [pc, #224]	; (8004730 <DMA_SetConfig+0x220>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d045      	beq.n	80046e0 <DMA_SetConfig+0x1d0>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a36      	ldr	r2, [pc, #216]	; (8004734 <DMA_SetConfig+0x224>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d040      	beq.n	80046e0 <DMA_SetConfig+0x1d0>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a35      	ldr	r2, [pc, #212]	; (8004738 <DMA_SetConfig+0x228>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d03b      	beq.n	80046e0 <DMA_SetConfig+0x1d0>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a33      	ldr	r2, [pc, #204]	; (800473c <DMA_SetConfig+0x22c>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d036      	beq.n	80046e0 <DMA_SetConfig+0x1d0>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a32      	ldr	r2, [pc, #200]	; (8004740 <DMA_SetConfig+0x230>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d031      	beq.n	80046e0 <DMA_SetConfig+0x1d0>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a30      	ldr	r2, [pc, #192]	; (8004744 <DMA_SetConfig+0x234>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d02c      	beq.n	80046e0 <DMA_SetConfig+0x1d0>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a2f      	ldr	r2, [pc, #188]	; (8004748 <DMA_SetConfig+0x238>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d027      	beq.n	80046e0 <DMA_SetConfig+0x1d0>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a2d      	ldr	r2, [pc, #180]	; (800474c <DMA_SetConfig+0x23c>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d022      	beq.n	80046e0 <DMA_SetConfig+0x1d0>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a2c      	ldr	r2, [pc, #176]	; (8004750 <DMA_SetConfig+0x240>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d01d      	beq.n	80046e0 <DMA_SetConfig+0x1d0>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a2a      	ldr	r2, [pc, #168]	; (8004754 <DMA_SetConfig+0x244>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d018      	beq.n	80046e0 <DMA_SetConfig+0x1d0>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a29      	ldr	r2, [pc, #164]	; (8004758 <DMA_SetConfig+0x248>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d013      	beq.n	80046e0 <DMA_SetConfig+0x1d0>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a27      	ldr	r2, [pc, #156]	; (800475c <DMA_SetConfig+0x24c>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d00e      	beq.n	80046e0 <DMA_SetConfig+0x1d0>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a26      	ldr	r2, [pc, #152]	; (8004760 <DMA_SetConfig+0x250>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d009      	beq.n	80046e0 <DMA_SetConfig+0x1d0>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a24      	ldr	r2, [pc, #144]	; (8004764 <DMA_SetConfig+0x254>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d004      	beq.n	80046e0 <DMA_SetConfig+0x1d0>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a23      	ldr	r2, [pc, #140]	; (8004768 <DMA_SetConfig+0x258>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d101      	bne.n	80046e4 <DMA_SetConfig+0x1d4>
 80046e0:	2301      	movs	r3, #1
 80046e2:	e000      	b.n	80046e6 <DMA_SetConfig+0x1d6>
 80046e4:	2300      	movs	r3, #0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d059      	beq.n	800479e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ee:	f003 031f 	and.w	r3, r3, #31
 80046f2:	223f      	movs	r2, #63	; 0x3f
 80046f4:	409a      	lsls	r2, r3
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004708:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	683a      	ldr	r2, [r7, #0]
 8004710:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	2b40      	cmp	r3, #64	; 0x40
 8004718:	d138      	bne.n	800478c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800472a:	e086      	b.n	800483a <DMA_SetConfig+0x32a>
 800472c:	40020010 	.word	0x40020010
 8004730:	40020028 	.word	0x40020028
 8004734:	40020040 	.word	0x40020040
 8004738:	40020058 	.word	0x40020058
 800473c:	40020070 	.word	0x40020070
 8004740:	40020088 	.word	0x40020088
 8004744:	400200a0 	.word	0x400200a0
 8004748:	400200b8 	.word	0x400200b8
 800474c:	40020410 	.word	0x40020410
 8004750:	40020428 	.word	0x40020428
 8004754:	40020440 	.word	0x40020440
 8004758:	40020458 	.word	0x40020458
 800475c:	40020470 	.word	0x40020470
 8004760:	40020488 	.word	0x40020488
 8004764:	400204a0 	.word	0x400204a0
 8004768:	400204b8 	.word	0x400204b8
 800476c:	58025408 	.word	0x58025408
 8004770:	5802541c 	.word	0x5802541c
 8004774:	58025430 	.word	0x58025430
 8004778:	58025444 	.word	0x58025444
 800477c:	58025458 	.word	0x58025458
 8004780:	5802546c 	.word	0x5802546c
 8004784:	58025480 	.word	0x58025480
 8004788:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68ba      	ldr	r2, [r7, #8]
 8004792:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	60da      	str	r2, [r3, #12]
}
 800479c:	e04d      	b.n	800483a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a29      	ldr	r2, [pc, #164]	; (8004848 <DMA_SetConfig+0x338>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d022      	beq.n	80047ee <DMA_SetConfig+0x2de>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a27      	ldr	r2, [pc, #156]	; (800484c <DMA_SetConfig+0x33c>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d01d      	beq.n	80047ee <DMA_SetConfig+0x2de>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a26      	ldr	r2, [pc, #152]	; (8004850 <DMA_SetConfig+0x340>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d018      	beq.n	80047ee <DMA_SetConfig+0x2de>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a24      	ldr	r2, [pc, #144]	; (8004854 <DMA_SetConfig+0x344>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d013      	beq.n	80047ee <DMA_SetConfig+0x2de>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a23      	ldr	r2, [pc, #140]	; (8004858 <DMA_SetConfig+0x348>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d00e      	beq.n	80047ee <DMA_SetConfig+0x2de>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a21      	ldr	r2, [pc, #132]	; (800485c <DMA_SetConfig+0x34c>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d009      	beq.n	80047ee <DMA_SetConfig+0x2de>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a20      	ldr	r2, [pc, #128]	; (8004860 <DMA_SetConfig+0x350>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d004      	beq.n	80047ee <DMA_SetConfig+0x2de>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a1e      	ldr	r2, [pc, #120]	; (8004864 <DMA_SetConfig+0x354>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d101      	bne.n	80047f2 <DMA_SetConfig+0x2e2>
 80047ee:	2301      	movs	r3, #1
 80047f0:	e000      	b.n	80047f4 <DMA_SetConfig+0x2e4>
 80047f2:	2300      	movs	r3, #0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d020      	beq.n	800483a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047fc:	f003 031f 	and.w	r3, r3, #31
 8004800:	2201      	movs	r2, #1
 8004802:	409a      	lsls	r2, r3
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	683a      	ldr	r2, [r7, #0]
 800480e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	2b40      	cmp	r3, #64	; 0x40
 8004816:	d108      	bne.n	800482a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68ba      	ldr	r2, [r7, #8]
 8004826:	60da      	str	r2, [r3, #12]
}
 8004828:	e007      	b.n	800483a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68ba      	ldr	r2, [r7, #8]
 8004830:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	60da      	str	r2, [r3, #12]
}
 800483a:	bf00      	nop
 800483c:	371c      	adds	r7, #28
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	58025408 	.word	0x58025408
 800484c:	5802541c 	.word	0x5802541c
 8004850:	58025430 	.word	0x58025430
 8004854:	58025444 	.word	0x58025444
 8004858:	58025458 	.word	0x58025458
 800485c:	5802546c 	.word	0x5802546c
 8004860:	58025480 	.word	0x58025480
 8004864:	58025494 	.word	0x58025494

08004868 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a42      	ldr	r2, [pc, #264]	; (8004980 <DMA_CalcBaseAndBitshift+0x118>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d04a      	beq.n	8004910 <DMA_CalcBaseAndBitshift+0xa8>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a41      	ldr	r2, [pc, #260]	; (8004984 <DMA_CalcBaseAndBitshift+0x11c>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d045      	beq.n	8004910 <DMA_CalcBaseAndBitshift+0xa8>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a3f      	ldr	r2, [pc, #252]	; (8004988 <DMA_CalcBaseAndBitshift+0x120>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d040      	beq.n	8004910 <DMA_CalcBaseAndBitshift+0xa8>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a3e      	ldr	r2, [pc, #248]	; (800498c <DMA_CalcBaseAndBitshift+0x124>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d03b      	beq.n	8004910 <DMA_CalcBaseAndBitshift+0xa8>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a3c      	ldr	r2, [pc, #240]	; (8004990 <DMA_CalcBaseAndBitshift+0x128>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d036      	beq.n	8004910 <DMA_CalcBaseAndBitshift+0xa8>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a3b      	ldr	r2, [pc, #236]	; (8004994 <DMA_CalcBaseAndBitshift+0x12c>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d031      	beq.n	8004910 <DMA_CalcBaseAndBitshift+0xa8>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a39      	ldr	r2, [pc, #228]	; (8004998 <DMA_CalcBaseAndBitshift+0x130>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d02c      	beq.n	8004910 <DMA_CalcBaseAndBitshift+0xa8>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a38      	ldr	r2, [pc, #224]	; (800499c <DMA_CalcBaseAndBitshift+0x134>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d027      	beq.n	8004910 <DMA_CalcBaseAndBitshift+0xa8>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a36      	ldr	r2, [pc, #216]	; (80049a0 <DMA_CalcBaseAndBitshift+0x138>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d022      	beq.n	8004910 <DMA_CalcBaseAndBitshift+0xa8>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a35      	ldr	r2, [pc, #212]	; (80049a4 <DMA_CalcBaseAndBitshift+0x13c>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d01d      	beq.n	8004910 <DMA_CalcBaseAndBitshift+0xa8>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a33      	ldr	r2, [pc, #204]	; (80049a8 <DMA_CalcBaseAndBitshift+0x140>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d018      	beq.n	8004910 <DMA_CalcBaseAndBitshift+0xa8>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a32      	ldr	r2, [pc, #200]	; (80049ac <DMA_CalcBaseAndBitshift+0x144>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d013      	beq.n	8004910 <DMA_CalcBaseAndBitshift+0xa8>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a30      	ldr	r2, [pc, #192]	; (80049b0 <DMA_CalcBaseAndBitshift+0x148>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d00e      	beq.n	8004910 <DMA_CalcBaseAndBitshift+0xa8>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a2f      	ldr	r2, [pc, #188]	; (80049b4 <DMA_CalcBaseAndBitshift+0x14c>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d009      	beq.n	8004910 <DMA_CalcBaseAndBitshift+0xa8>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a2d      	ldr	r2, [pc, #180]	; (80049b8 <DMA_CalcBaseAndBitshift+0x150>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d004      	beq.n	8004910 <DMA_CalcBaseAndBitshift+0xa8>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a2c      	ldr	r2, [pc, #176]	; (80049bc <DMA_CalcBaseAndBitshift+0x154>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d101      	bne.n	8004914 <DMA_CalcBaseAndBitshift+0xac>
 8004910:	2301      	movs	r3, #1
 8004912:	e000      	b.n	8004916 <DMA_CalcBaseAndBitshift+0xae>
 8004914:	2300      	movs	r3, #0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d024      	beq.n	8004964 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	b2db      	uxtb	r3, r3
 8004920:	3b10      	subs	r3, #16
 8004922:	4a27      	ldr	r2, [pc, #156]	; (80049c0 <DMA_CalcBaseAndBitshift+0x158>)
 8004924:	fba2 2303 	umull	r2, r3, r2, r3
 8004928:	091b      	lsrs	r3, r3, #4
 800492a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f003 0307 	and.w	r3, r3, #7
 8004932:	4a24      	ldr	r2, [pc, #144]	; (80049c4 <DMA_CalcBaseAndBitshift+0x15c>)
 8004934:	5cd3      	ldrb	r3, [r2, r3]
 8004936:	461a      	mov	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2b03      	cmp	r3, #3
 8004940:	d908      	bls.n	8004954 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	461a      	mov	r2, r3
 8004948:	4b1f      	ldr	r3, [pc, #124]	; (80049c8 <DMA_CalcBaseAndBitshift+0x160>)
 800494a:	4013      	ands	r3, r2
 800494c:	1d1a      	adds	r2, r3, #4
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	659a      	str	r2, [r3, #88]	; 0x58
 8004952:	e00d      	b.n	8004970 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	461a      	mov	r2, r3
 800495a:	4b1b      	ldr	r3, [pc, #108]	; (80049c8 <DMA_CalcBaseAndBitshift+0x160>)
 800495c:	4013      	ands	r3, r2
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	6593      	str	r3, [r2, #88]	; 0x58
 8004962:	e005      	b.n	8004970 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004974:	4618      	mov	r0, r3
 8004976:	3714      	adds	r7, #20
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr
 8004980:	40020010 	.word	0x40020010
 8004984:	40020028 	.word	0x40020028
 8004988:	40020040 	.word	0x40020040
 800498c:	40020058 	.word	0x40020058
 8004990:	40020070 	.word	0x40020070
 8004994:	40020088 	.word	0x40020088
 8004998:	400200a0 	.word	0x400200a0
 800499c:	400200b8 	.word	0x400200b8
 80049a0:	40020410 	.word	0x40020410
 80049a4:	40020428 	.word	0x40020428
 80049a8:	40020440 	.word	0x40020440
 80049ac:	40020458 	.word	0x40020458
 80049b0:	40020470 	.word	0x40020470
 80049b4:	40020488 	.word	0x40020488
 80049b8:	400204a0 	.word	0x400204a0
 80049bc:	400204b8 	.word	0x400204b8
 80049c0:	aaaaaaab 	.word	0xaaaaaaab
 80049c4:	0801c028 	.word	0x0801c028
 80049c8:	fffffc00 	.word	0xfffffc00

080049cc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049d4:	2300      	movs	r3, #0
 80049d6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d120      	bne.n	8004a22 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e4:	2b03      	cmp	r3, #3
 80049e6:	d858      	bhi.n	8004a9a <DMA_CheckFifoParam+0xce>
 80049e8:	a201      	add	r2, pc, #4	; (adr r2, 80049f0 <DMA_CheckFifoParam+0x24>)
 80049ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ee:	bf00      	nop
 80049f0:	08004a01 	.word	0x08004a01
 80049f4:	08004a13 	.word	0x08004a13
 80049f8:	08004a01 	.word	0x08004a01
 80049fc:	08004a9b 	.word	0x08004a9b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d048      	beq.n	8004a9e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a10:	e045      	b.n	8004a9e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a16:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a1a:	d142      	bne.n	8004aa2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a20:	e03f      	b.n	8004aa2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a2a:	d123      	bne.n	8004a74 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a30:	2b03      	cmp	r3, #3
 8004a32:	d838      	bhi.n	8004aa6 <DMA_CheckFifoParam+0xda>
 8004a34:	a201      	add	r2, pc, #4	; (adr r2, 8004a3c <DMA_CheckFifoParam+0x70>)
 8004a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a3a:	bf00      	nop
 8004a3c:	08004a4d 	.word	0x08004a4d
 8004a40:	08004a53 	.word	0x08004a53
 8004a44:	08004a4d 	.word	0x08004a4d
 8004a48:	08004a65 	.word	0x08004a65
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	73fb      	strb	r3, [r7, #15]
        break;
 8004a50:	e030      	b.n	8004ab4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d025      	beq.n	8004aaa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a62:	e022      	b.n	8004aaa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a68:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a6c:	d11f      	bne.n	8004aae <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a72:	e01c      	b.n	8004aae <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d902      	bls.n	8004a82 <DMA_CheckFifoParam+0xb6>
 8004a7c:	2b03      	cmp	r3, #3
 8004a7e:	d003      	beq.n	8004a88 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004a80:	e018      	b.n	8004ab4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	73fb      	strb	r3, [r7, #15]
        break;
 8004a86:	e015      	b.n	8004ab4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d00e      	beq.n	8004ab2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	73fb      	strb	r3, [r7, #15]
    break;
 8004a98:	e00b      	b.n	8004ab2 <DMA_CheckFifoParam+0xe6>
        break;
 8004a9a:	bf00      	nop
 8004a9c:	e00a      	b.n	8004ab4 <DMA_CheckFifoParam+0xe8>
        break;
 8004a9e:	bf00      	nop
 8004aa0:	e008      	b.n	8004ab4 <DMA_CheckFifoParam+0xe8>
        break;
 8004aa2:	bf00      	nop
 8004aa4:	e006      	b.n	8004ab4 <DMA_CheckFifoParam+0xe8>
        break;
 8004aa6:	bf00      	nop
 8004aa8:	e004      	b.n	8004ab4 <DMA_CheckFifoParam+0xe8>
        break;
 8004aaa:	bf00      	nop
 8004aac:	e002      	b.n	8004ab4 <DMA_CheckFifoParam+0xe8>
        break;
 8004aae:	bf00      	nop
 8004ab0:	e000      	b.n	8004ab4 <DMA_CheckFifoParam+0xe8>
    break;
 8004ab2:	bf00      	nop
    }
  }

  return status;
 8004ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3714      	adds	r7, #20
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop

08004ac4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a38      	ldr	r2, [pc, #224]	; (8004bb8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d022      	beq.n	8004b22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a36      	ldr	r2, [pc, #216]	; (8004bbc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d01d      	beq.n	8004b22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a35      	ldr	r2, [pc, #212]	; (8004bc0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d018      	beq.n	8004b22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a33      	ldr	r2, [pc, #204]	; (8004bc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d013      	beq.n	8004b22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a32      	ldr	r2, [pc, #200]	; (8004bc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d00e      	beq.n	8004b22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a30      	ldr	r2, [pc, #192]	; (8004bcc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d009      	beq.n	8004b22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a2f      	ldr	r2, [pc, #188]	; (8004bd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d004      	beq.n	8004b22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a2d      	ldr	r2, [pc, #180]	; (8004bd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d101      	bne.n	8004b26 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004b22:	2301      	movs	r3, #1
 8004b24:	e000      	b.n	8004b28 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004b26:	2300      	movs	r3, #0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d01a      	beq.n	8004b62 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	3b08      	subs	r3, #8
 8004b34:	4a28      	ldr	r2, [pc, #160]	; (8004bd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004b36:	fba2 2303 	umull	r2, r3, r2, r3
 8004b3a:	091b      	lsrs	r3, r3, #4
 8004b3c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	4b26      	ldr	r3, [pc, #152]	; (8004bdc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004b42:	4413      	add	r3, r2
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	461a      	mov	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a24      	ldr	r2, [pc, #144]	; (8004be0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004b50:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f003 031f 	and.w	r3, r3, #31
 8004b58:	2201      	movs	r2, #1
 8004b5a:	409a      	lsls	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004b60:	e024      	b.n	8004bac <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	3b10      	subs	r3, #16
 8004b6a:	4a1e      	ldr	r2, [pc, #120]	; (8004be4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b70:	091b      	lsrs	r3, r3, #4
 8004b72:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	4a1c      	ldr	r2, [pc, #112]	; (8004be8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d806      	bhi.n	8004b8a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	4a1b      	ldr	r2, [pc, #108]	; (8004bec <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d902      	bls.n	8004b8a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	3308      	adds	r3, #8
 8004b88:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	4b18      	ldr	r3, [pc, #96]	; (8004bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004b8e:	4413      	add	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	461a      	mov	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a16      	ldr	r2, [pc, #88]	; (8004bf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004b9c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f003 031f 	and.w	r3, r3, #31
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	409a      	lsls	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004bac:	bf00      	nop
 8004bae:	3714      	adds	r7, #20
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr
 8004bb8:	58025408 	.word	0x58025408
 8004bbc:	5802541c 	.word	0x5802541c
 8004bc0:	58025430 	.word	0x58025430
 8004bc4:	58025444 	.word	0x58025444
 8004bc8:	58025458 	.word	0x58025458
 8004bcc:	5802546c 	.word	0x5802546c
 8004bd0:	58025480 	.word	0x58025480
 8004bd4:	58025494 	.word	0x58025494
 8004bd8:	cccccccd 	.word	0xcccccccd
 8004bdc:	16009600 	.word	0x16009600
 8004be0:	58025880 	.word	0x58025880
 8004be4:	aaaaaaab 	.word	0xaaaaaaab
 8004be8:	400204b8 	.word	0x400204b8
 8004bec:	4002040f 	.word	0x4002040f
 8004bf0:	10008200 	.word	0x10008200
 8004bf4:	40020880 	.word	0x40020880

08004bf8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b085      	sub	sp, #20
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d04a      	beq.n	8004ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2b08      	cmp	r3, #8
 8004c12:	d847      	bhi.n	8004ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a25      	ldr	r2, [pc, #148]	; (8004cb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d022      	beq.n	8004c64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a24      	ldr	r2, [pc, #144]	; (8004cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d01d      	beq.n	8004c64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a22      	ldr	r2, [pc, #136]	; (8004cb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d018      	beq.n	8004c64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a21      	ldr	r2, [pc, #132]	; (8004cbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d013      	beq.n	8004c64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a1f      	ldr	r2, [pc, #124]	; (8004cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d00e      	beq.n	8004c64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a1e      	ldr	r2, [pc, #120]	; (8004cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d009      	beq.n	8004c64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a1c      	ldr	r2, [pc, #112]	; (8004cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d004      	beq.n	8004c64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a1b      	ldr	r2, [pc, #108]	; (8004ccc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d101      	bne.n	8004c68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004c64:	2301      	movs	r3, #1
 8004c66:	e000      	b.n	8004c6a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004c68:	2300      	movs	r3, #0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00a      	beq.n	8004c84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	4b17      	ldr	r3, [pc, #92]	; (8004cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004c72:	4413      	add	r3, r2
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	461a      	mov	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a15      	ldr	r2, [pc, #84]	; (8004cd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004c80:	671a      	str	r2, [r3, #112]	; 0x70
 8004c82:	e009      	b.n	8004c98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	4b14      	ldr	r3, [pc, #80]	; (8004cd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004c88:	4413      	add	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a11      	ldr	r2, [pc, #68]	; (8004cdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004c96:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	409a      	lsls	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004ca4:	bf00      	nop
 8004ca6:	3714      	adds	r7, #20
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr
 8004cb0:	58025408 	.word	0x58025408
 8004cb4:	5802541c 	.word	0x5802541c
 8004cb8:	58025430 	.word	0x58025430
 8004cbc:	58025444 	.word	0x58025444
 8004cc0:	58025458 	.word	0x58025458
 8004cc4:	5802546c 	.word	0x5802546c
 8004cc8:	58025480 	.word	0x58025480
 8004ccc:	58025494 	.word	0x58025494
 8004cd0:	1600963f 	.word	0x1600963f
 8004cd4:	58025940 	.word	0x58025940
 8004cd8:	1000823f 	.word	0x1000823f
 8004cdc:	40020940 	.word	0x40020940

08004ce0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d101      	bne.n	8004cf2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e0cf      	b.n	8004e92 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d106      	bne.n	8004d0a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2223      	movs	r2, #35	; 0x23
 8004d00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f7fb fef1 	bl	8000aec <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d0a:	4b64      	ldr	r3, [pc, #400]	; (8004e9c <HAL_ETH_Init+0x1bc>)
 8004d0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d10:	4a62      	ldr	r2, [pc, #392]	; (8004e9c <HAL_ETH_Init+0x1bc>)
 8004d12:	f043 0302 	orr.w	r3, r3, #2
 8004d16:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004d1a:	4b60      	ldr	r3, [pc, #384]	; (8004e9c <HAL_ETH_Init+0x1bc>)
 8004d1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d20:	f003 0302 	and.w	r3, r3, #2
 8004d24:	60bb      	str	r3, [r7, #8]
 8004d26:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	7a1b      	ldrb	r3, [r3, #8]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d103      	bne.n	8004d38 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004d30:	2000      	movs	r0, #0
 8004d32:	f7fd f8a5 	bl	8001e80 <HAL_SYSCFG_ETHInterfaceSelect>
 8004d36:	e003      	b.n	8004d40 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004d38:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004d3c:	f7fd f8a0 	bl	8001e80 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8004d40:	4b57      	ldr	r3, [pc, #348]	; (8004ea0 <HAL_ETH_Init+0x1c0>)
 8004d42:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	6812      	ldr	r2, [r2, #0]
 8004d52:	f043 0301 	orr.w	r3, r3, #1
 8004d56:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004d5a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d5c:	f7fd f854 	bl	8001e08 <HAL_GetTick>
 8004d60:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004d62:	e011      	b.n	8004d88 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004d64:	f7fd f850 	bl	8001e08 <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004d72:	d909      	bls.n	8004d88 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2204      	movs	r2, #4
 8004d78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	22e0      	movs	r2, #224	; 0xe0
 8004d80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e084      	b.n	8004e92 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1e4      	bne.n	8004d64 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 f886 	bl	8004eac <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004da0:	f002 fc88 	bl	80076b4 <HAL_RCC_GetHCLKFreq>
 8004da4:	4603      	mov	r3, r0
 8004da6:	4a3f      	ldr	r2, [pc, #252]	; (8004ea4 <HAL_ETH_Init+0x1c4>)
 8004da8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dac:	0c9a      	lsrs	r2, r3, #18
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	3a01      	subs	r2, #1
 8004db4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 fa71 	bl	80052a0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dc6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004dca:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	6812      	ldr	r2, [r2, #0]
 8004dd2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004dd6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004dda:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	f003 0303 	and.w	r3, r3, #3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d009      	beq.n	8004dfe <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	22e0      	movs	r2, #224	; 0xe0
 8004df6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e049      	b.n	8004e92 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e06:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004e0a:	4b27      	ldr	r3, [pc, #156]	; (8004ea8 <HAL_ETH_Init+0x1c8>)
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	6952      	ldr	r2, [r2, #20]
 8004e12:	0051      	lsls	r1, r2, #1
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	6812      	ldr	r2, [r2, #0]
 8004e18:	430b      	orrs	r3, r1
 8004e1a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004e1e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 fad9 	bl	80053da <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 fb1f 	bl	800546c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	3305      	adds	r3, #5
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	021a      	lsls	r2, r3, #8
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	3304      	adds	r3, #4
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	4619      	mov	r1, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	430a      	orrs	r2, r1
 8004e48:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	3303      	adds	r3, #3
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	061a      	lsls	r2, r3, #24
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	3302      	adds	r3, #2
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	041b      	lsls	r3, r3, #16
 8004e60:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	3301      	adds	r3, #1
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004e6c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004e7a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004e7c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2210      	movs	r2, #16
 8004e8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3710      	adds	r7, #16
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	58024400 	.word	0x58024400
 8004ea0:	58000400 	.word	0x58000400
 8004ea4:	431bde83 	.word	0x431bde83
 8004ea8:	ffff8001 	.word	0xffff8001

08004eac <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004ebc:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004ec4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004ec6:	f002 fbf5 	bl	80076b4 <HAL_RCC_GetHCLKFreq>
 8004eca:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	4a1e      	ldr	r2, [pc, #120]	; (8004f48 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d908      	bls.n	8004ee6 <HAL_ETH_SetMDIOClockRange+0x3a>
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	4a1d      	ldr	r2, [pc, #116]	; (8004f4c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d804      	bhi.n	8004ee6 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ee2:	60fb      	str	r3, [r7, #12]
 8004ee4:	e027      	b.n	8004f36 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	4a18      	ldr	r2, [pc, #96]	; (8004f4c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d908      	bls.n	8004f00 <HAL_ETH_SetMDIOClockRange+0x54>
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	4a17      	ldr	r2, [pc, #92]	; (8004f50 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d204      	bcs.n	8004f00 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004efc:	60fb      	str	r3, [r7, #12]
 8004efe:	e01a      	b.n	8004f36 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	4a13      	ldr	r2, [pc, #76]	; (8004f50 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d303      	bcc.n	8004f10 <HAL_ETH_SetMDIOClockRange+0x64>
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	4a12      	ldr	r2, [pc, #72]	; (8004f54 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d911      	bls.n	8004f34 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	4a10      	ldr	r2, [pc, #64]	; (8004f54 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d908      	bls.n	8004f2a <HAL_ETH_SetMDIOClockRange+0x7e>
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	4a0f      	ldr	r2, [pc, #60]	; (8004f58 <HAL_ETH_SetMDIOClockRange+0xac>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d804      	bhi.n	8004f2a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f26:	60fb      	str	r3, [r7, #12]
 8004f28:	e005      	b.n	8004f36 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f30:	60fb      	str	r3, [r7, #12]
 8004f32:	e000      	b.n	8004f36 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8004f34:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004f40:	bf00      	nop
 8004f42:	3710      	adds	r7, #16
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	01312cff 	.word	0x01312cff
 8004f4c:	02160ebf 	.word	0x02160ebf
 8004f50:	03938700 	.word	0x03938700
 8004f54:	05f5e0ff 	.word	0x05f5e0ff
 8004f58:	08f0d17f 	.word	0x08f0d17f

08004f5c <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8004f6e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	791b      	ldrb	r3, [r3, #4]
 8004f74:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8004f76:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	7b1b      	ldrb	r3, [r3, #12]
 8004f7c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004f7e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	7b5b      	ldrb	r3, [r3, #13]
 8004f84:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004f86:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	7b9b      	ldrb	r3, [r3, #14]
 8004f8c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004f8e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	7bdb      	ldrb	r3, [r3, #15]
 8004f94:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004f96:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004f98:	683a      	ldr	r2, [r7, #0]
 8004f9a:	7c12      	ldrb	r2, [r2, #16]
 8004f9c:	2a00      	cmp	r2, #0
 8004f9e:	d102      	bne.n	8004fa6 <ETH_SetMACConfig+0x4a>
 8004fa0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004fa4:	e000      	b.n	8004fa8 <ETH_SetMACConfig+0x4c>
 8004fa6:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004fa8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004faa:	683a      	ldr	r2, [r7, #0]
 8004fac:	7c52      	ldrb	r2, [r2, #17]
 8004fae:	2a00      	cmp	r2, #0
 8004fb0:	d102      	bne.n	8004fb8 <ETH_SetMACConfig+0x5c>
 8004fb2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004fb6:	e000      	b.n	8004fba <ETH_SetMACConfig+0x5e>
 8004fb8:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004fba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	7c9b      	ldrb	r3, [r3, #18]
 8004fc0:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004fc2:	431a      	orrs	r2, r3
               macconf->Speed |
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8004fc8:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8004fce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	7f1b      	ldrb	r3, [r3, #28]
 8004fd4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8004fd6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	7f5b      	ldrb	r3, [r3, #29]
 8004fdc:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004fde:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004fe0:	683a      	ldr	r2, [r7, #0]
 8004fe2:	7f92      	ldrb	r2, [r2, #30]
 8004fe4:	2a00      	cmp	r2, #0
 8004fe6:	d102      	bne.n	8004fee <ETH_SetMACConfig+0x92>
 8004fe8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004fec:	e000      	b.n	8004ff0 <ETH_SetMACConfig+0x94>
 8004fee:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004ff0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	7fdb      	ldrb	r3, [r3, #31]
 8004ff6:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004ff8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004ffa:	683a      	ldr	r2, [r7, #0]
 8004ffc:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005000:	2a00      	cmp	r2, #0
 8005002:	d102      	bne.n	800500a <ETH_SetMACConfig+0xae>
 8005004:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005008:	e000      	b.n	800500c <ETH_SetMACConfig+0xb0>
 800500a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800500c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8005012:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800501a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800501c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8005022:	4313      	orrs	r3, r2
 8005024:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	4b56      	ldr	r3, [pc, #344]	; (8005188 <ETH_SetMACConfig+0x22c>)
 800502e:	4013      	ands	r3, r2
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	6812      	ldr	r2, [r2, #0]
 8005034:	68f9      	ldr	r1, [r7, #12]
 8005036:	430b      	orrs	r3, r1
 8005038:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800503e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005046:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005048:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005050:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005052:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800505a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800505c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800505e:	683a      	ldr	r2, [r7, #0]
 8005060:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8005064:	2a00      	cmp	r2, #0
 8005066:	d102      	bne.n	800506e <ETH_SetMACConfig+0x112>
 8005068:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800506c:	e000      	b.n	8005070 <ETH_SetMACConfig+0x114>
 800506e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005070:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005076:	4313      	orrs	r3, r2
 8005078:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	685a      	ldr	r2, [r3, #4]
 8005080:	4b42      	ldr	r3, [pc, #264]	; (800518c <ETH_SetMACConfig+0x230>)
 8005082:	4013      	ands	r3, r2
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	6812      	ldr	r2, [r2, #0]
 8005088:	68f9      	ldr	r1, [r7, #12]
 800508a:	430b      	orrs	r3, r1
 800508c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005094:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800509a:	4313      	orrs	r3, r2
 800509c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68da      	ldr	r2, [r3, #12]
 80050a4:	4b3a      	ldr	r3, [pc, #232]	; (8005190 <ETH_SetMACConfig+0x234>)
 80050a6:	4013      	ands	r3, r2
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	6812      	ldr	r2, [r2, #0]
 80050ac:	68f9      	ldr	r1, [r7, #12]
 80050ae:	430b      	orrs	r3, r1
 80050b0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80050b8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80050be:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80050c0:	683a      	ldr	r2, [r7, #0]
 80050c2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80050c6:	2a00      	cmp	r2, #0
 80050c8:	d101      	bne.n	80050ce <ETH_SetMACConfig+0x172>
 80050ca:	2280      	movs	r2, #128	; 0x80
 80050cc:	e000      	b.n	80050d0 <ETH_SetMACConfig+0x174>
 80050ce:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80050d0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050d6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80050d8:	4313      	orrs	r3, r2
 80050da:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80050e2:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80050e6:	4013      	ands	r3, r2
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	6812      	ldr	r2, [r2, #0]
 80050ec:	68f9      	ldr	r1, [r7, #12]
 80050ee:	430b      	orrs	r3, r1
 80050f0:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80050f8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8005100:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005102:	4313      	orrs	r3, r2
 8005104:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800510e:	f023 0103 	bic.w	r1, r3, #3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	430a      	orrs	r2, r1
 800511a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8005126:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	430a      	orrs	r2, r1
 8005134:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800513c:	683a      	ldr	r2, [r7, #0]
 800513e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8005142:	2a00      	cmp	r2, #0
 8005144:	d101      	bne.n	800514a <ETH_SetMACConfig+0x1ee>
 8005146:	2240      	movs	r2, #64	; 0x40
 8005148:	e000      	b.n	800514c <ETH_SetMACConfig+0x1f0>
 800514a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800514c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005154:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005156:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800515e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8005160:	4313      	orrs	r3, r2
 8005162:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800516c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	430a      	orrs	r2, r1
 8005178:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800517c:	bf00      	nop
 800517e:	3714      	adds	r7, #20
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr
 8005188:	00048083 	.word	0x00048083
 800518c:	c0f88000 	.word	0xc0f88000
 8005190:	fffffef0 	.word	0xfffffef0

08005194 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	4b38      	ldr	r3, [pc, #224]	; (800528c <ETH_SetDMAConfig+0xf8>)
 80051aa:	4013      	ands	r3, r2
 80051ac:	683a      	ldr	r2, [r7, #0]
 80051ae:	6811      	ldr	r1, [r2, #0]
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	6812      	ldr	r2, [r2, #0]
 80051b4:	430b      	orrs	r3, r1
 80051b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80051ba:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	791b      	ldrb	r3, [r3, #4]
 80051c0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80051c6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	7b1b      	ldrb	r3, [r3, #12]
 80051cc:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80051ce:	4313      	orrs	r3, r2
 80051d0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	4b2c      	ldr	r3, [pc, #176]	; (8005290 <ETH_SetDMAConfig+0xfc>)
 80051de:	4013      	ands	r3, r2
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	6812      	ldr	r2, [r2, #0]
 80051e4:	68f9      	ldr	r1, [r7, #12]
 80051e6:	430b      	orrs	r3, r1
 80051e8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80051ec:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	7b5b      	ldrb	r3, [r3, #13]
 80051f2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80051f8:	4313      	orrs	r3, r2
 80051fa:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005204:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8005208:	4b22      	ldr	r3, [pc, #136]	; (8005294 <ETH_SetDMAConfig+0x100>)
 800520a:	4013      	ands	r3, r2
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	6812      	ldr	r2, [r2, #0]
 8005210:	68f9      	ldr	r1, [r7, #12]
 8005212:	430b      	orrs	r3, r1
 8005214:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005218:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	7d1b      	ldrb	r3, [r3, #20]
 8005224:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005226:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	7f5b      	ldrb	r3, [r3, #29]
 800522c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800522e:	4313      	orrs	r3, r2
 8005230:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800523a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800523e:	4b16      	ldr	r3, [pc, #88]	; (8005298 <ETH_SetDMAConfig+0x104>)
 8005240:	4013      	ands	r3, r2
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	6812      	ldr	r2, [r2, #0]
 8005246:	68f9      	ldr	r1, [r7, #12]
 8005248:	430b      	orrs	r3, r1
 800524a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800524e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	7f1b      	ldrb	r3, [r3, #28]
 8005256:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800525c:	4313      	orrs	r3, r2
 800525e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005268:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800526c:	4b0b      	ldr	r3, [pc, #44]	; (800529c <ETH_SetDMAConfig+0x108>)
 800526e:	4013      	ands	r3, r2
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	6812      	ldr	r2, [r2, #0]
 8005274:	68f9      	ldr	r1, [r7, #12]
 8005276:	430b      	orrs	r3, r1
 8005278:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800527c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8005280:	bf00      	nop
 8005282:	3714      	adds	r7, #20
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr
 800528c:	ffff87fd 	.word	0xffff87fd
 8005290:	ffff2ffe 	.word	0xffff2ffe
 8005294:	fffec000 	.word	0xfffec000
 8005298:	ffc0efef 	.word	0xffc0efef
 800529c:	7fc0ffff 	.word	0x7fc0ffff

080052a0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b0a4      	sub	sp, #144	; 0x90
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80052a8:	2301      	movs	r3, #1
 80052aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80052ae:	2300      	movs	r3, #0
 80052b0:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80052b2:	2300      	movs	r3, #0
 80052b4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80052b8:	2300      	movs	r3, #0
 80052ba:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80052be:	2301      	movs	r3, #1
 80052c0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80052c4:	2301      	movs	r3, #1
 80052c6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80052ca:	2301      	movs	r3, #1
 80052cc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80052d0:	2300      	movs	r3, #0
 80052d2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80052d6:	2301      	movs	r3, #1
 80052d8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80052dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80052e0:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80052e2:	2300      	movs	r3, #0
 80052e4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80052e8:	2300      	movs	r3, #0
 80052ea:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80052ec:	2300      	movs	r3, #0
 80052ee:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80052f2:	2300      	movs	r3, #0
 80052f4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80052f8:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80052fc:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80052fe:	2300      	movs	r3, #0
 8005300:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005304:	2300      	movs	r3, #0
 8005306:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8005308:	2301      	movs	r3, #1
 800530a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800530e:	2300      	movs	r3, #0
 8005310:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005314:	2300      	movs	r3, #0
 8005316:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800531a:	2300      	movs	r3, #0
 800531c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800531e:	2300      	movs	r3, #0
 8005320:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8005322:	2300      	movs	r3, #0
 8005324:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8005326:	2300      	movs	r3, #0
 8005328:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800532c:	2300      	movs	r3, #0
 800532e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8005332:	2301      	movs	r3, #1
 8005334:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005338:	2320      	movs	r3, #32
 800533a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800533e:	2301      	movs	r3, #1
 8005340:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005344:	2300      	movs	r3, #0
 8005346:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800534a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800534e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005350:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005354:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005356:	2300      	movs	r3, #0
 8005358:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800535c:	2302      	movs	r3, #2
 800535e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005362:	2300      	movs	r3, #0
 8005364:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005368:	2300      	movs	r3, #0
 800536a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800536e:	2300      	movs	r3, #0
 8005370:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005374:	2301      	movs	r3, #1
 8005376:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800537a:	2300      	movs	r3, #0
 800537c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800537e:	2301      	movs	r3, #1
 8005380:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005384:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005388:	4619      	mov	r1, r3
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f7ff fde6 	bl	8004f5c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005390:	2301      	movs	r3, #1
 8005392:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005394:	2301      	movs	r3, #1
 8005396:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005398:	2300      	movs	r3, #0
 800539a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800539c:	2300      	movs	r3, #0
 800539e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80053a2:	2300      	movs	r3, #0
 80053a4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80053a6:	2300      	movs	r3, #0
 80053a8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80053aa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80053ae:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80053b0:	2300      	movs	r3, #0
 80053b2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80053b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80053b8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80053ba:	2300      	movs	r3, #0
 80053bc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80053c0:	f44f 7306 	mov.w	r3, #536	; 0x218
 80053c4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80053c6:	f107 0308 	add.w	r3, r7, #8
 80053ca:	4619      	mov	r1, r3
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f7ff fee1 	bl	8005194 <ETH_SetDMAConfig>
}
 80053d2:	bf00      	nop
 80053d4:	3790      	adds	r7, #144	; 0x90
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80053da:	b480      	push	{r7}
 80053dc:	b085      	sub	sp, #20
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80053e2:	2300      	movs	r3, #0
 80053e4:	60fb      	str	r3, [r7, #12]
 80053e6:	e01d      	b.n	8005424 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	68d9      	ldr	r1, [r3, #12]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	4613      	mov	r3, r2
 80053f0:	005b      	lsls	r3, r3, #1
 80053f2:	4413      	add	r3, r2
 80053f4:	00db      	lsls	r3, r3, #3
 80053f6:	440b      	add	r3, r1
 80053f8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	2200      	movs	r2, #0
 80053fe:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	2200      	movs	r2, #0
 8005404:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	2200      	movs	r2, #0
 800540a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	2200      	movs	r2, #0
 8005410:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005412:	68b9      	ldr	r1, [r7, #8]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	3206      	adds	r2, #6
 800541a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	3301      	adds	r3, #1
 8005422:	60fb      	str	r3, [r7, #12]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2b03      	cmp	r3, #3
 8005428:	d9de      	bls.n	80053e8 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005438:	461a      	mov	r2, r3
 800543a:	2303      	movs	r3, #3
 800543c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	68da      	ldr	r2, [r3, #12]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800544c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	68da      	ldr	r2, [r3, #12]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800545c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8005460:	bf00      	nop
 8005462:	3714      	adds	r7, #20
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005474:	2300      	movs	r3, #0
 8005476:	60fb      	str	r3, [r7, #12]
 8005478:	e023      	b.n	80054c2 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6919      	ldr	r1, [r3, #16]
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	4613      	mov	r3, r2
 8005482:	005b      	lsls	r3, r3, #1
 8005484:	4413      	add	r3, r2
 8005486:	00db      	lsls	r3, r3, #3
 8005488:	440b      	add	r3, r1
 800548a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	2200      	movs	r2, #0
 8005490:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	2200      	movs	r2, #0
 8005496:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	2200      	movs	r2, #0
 800549c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	2200      	movs	r2, #0
 80054a2:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	2200      	movs	r2, #0
 80054a8:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	2200      	movs	r2, #0
 80054ae:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80054b0:	68b9      	ldr	r1, [r7, #8]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	3212      	adds	r2, #18
 80054b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	3301      	adds	r3, #1
 80054c0:	60fb      	str	r3, [r7, #12]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2b03      	cmp	r3, #3
 80054c6:	d9d8      	bls.n	800547a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054ee:	461a      	mov	r2, r3
 80054f0:	2303      	movs	r3, #3
 80054f2:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	691a      	ldr	r2, [r3, #16]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005502:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005516:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800551a:	bf00      	nop
 800551c:	3714      	adds	r7, #20
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
	...

08005528 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005528:	b480      	push	{r7}
 800552a:	b089      	sub	sp, #36	; 0x24
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005532:	2300      	movs	r3, #0
 8005534:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005536:	4b89      	ldr	r3, [pc, #548]	; (800575c <HAL_GPIO_Init+0x234>)
 8005538:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800553a:	e194      	b.n	8005866 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	2101      	movs	r1, #1
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	fa01 f303 	lsl.w	r3, r1, r3
 8005548:	4013      	ands	r3, r2
 800554a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	2b00      	cmp	r3, #0
 8005550:	f000 8186 	beq.w	8005860 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	f003 0303 	and.w	r3, r3, #3
 800555c:	2b01      	cmp	r3, #1
 800555e:	d005      	beq.n	800556c <HAL_GPIO_Init+0x44>
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	f003 0303 	and.w	r3, r3, #3
 8005568:	2b02      	cmp	r3, #2
 800556a:	d130      	bne.n	80055ce <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	005b      	lsls	r3, r3, #1
 8005576:	2203      	movs	r2, #3
 8005578:	fa02 f303 	lsl.w	r3, r2, r3
 800557c:	43db      	mvns	r3, r3
 800557e:	69ba      	ldr	r2, [r7, #24]
 8005580:	4013      	ands	r3, r2
 8005582:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	68da      	ldr	r2, [r3, #12]
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	005b      	lsls	r3, r3, #1
 800558c:	fa02 f303 	lsl.w	r3, r2, r3
 8005590:	69ba      	ldr	r2, [r7, #24]
 8005592:	4313      	orrs	r3, r2
 8005594:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	69ba      	ldr	r2, [r7, #24]
 800559a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80055a2:	2201      	movs	r2, #1
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	fa02 f303 	lsl.w	r3, r2, r3
 80055aa:	43db      	mvns	r3, r3
 80055ac:	69ba      	ldr	r2, [r7, #24]
 80055ae:	4013      	ands	r3, r2
 80055b0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	091b      	lsrs	r3, r3, #4
 80055b8:	f003 0201 	and.w	r2, r3, #1
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	fa02 f303 	lsl.w	r3, r2, r3
 80055c2:	69ba      	ldr	r2, [r7, #24]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	69ba      	ldr	r2, [r7, #24]
 80055cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	f003 0303 	and.w	r3, r3, #3
 80055d6:	2b03      	cmp	r3, #3
 80055d8:	d017      	beq.n	800560a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	005b      	lsls	r3, r3, #1
 80055e4:	2203      	movs	r2, #3
 80055e6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ea:	43db      	mvns	r3, r3
 80055ec:	69ba      	ldr	r2, [r7, #24]
 80055ee:	4013      	ands	r3, r2
 80055f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	689a      	ldr	r2, [r3, #8]
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	005b      	lsls	r3, r3, #1
 80055fa:	fa02 f303 	lsl.w	r3, r2, r3
 80055fe:	69ba      	ldr	r2, [r7, #24]
 8005600:	4313      	orrs	r3, r2
 8005602:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	69ba      	ldr	r2, [r7, #24]
 8005608:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	f003 0303 	and.w	r3, r3, #3
 8005612:	2b02      	cmp	r3, #2
 8005614:	d123      	bne.n	800565e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	08da      	lsrs	r2, r3, #3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	3208      	adds	r2, #8
 800561e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005622:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	f003 0307 	and.w	r3, r3, #7
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	220f      	movs	r2, #15
 800562e:	fa02 f303 	lsl.w	r3, r2, r3
 8005632:	43db      	mvns	r3, r3
 8005634:	69ba      	ldr	r2, [r7, #24]
 8005636:	4013      	ands	r3, r2
 8005638:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	691a      	ldr	r2, [r3, #16]
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	f003 0307 	and.w	r3, r3, #7
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	fa02 f303 	lsl.w	r3, r2, r3
 800564a:	69ba      	ldr	r2, [r7, #24]
 800564c:	4313      	orrs	r3, r2
 800564e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	08da      	lsrs	r2, r3, #3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	3208      	adds	r2, #8
 8005658:	69b9      	ldr	r1, [r7, #24]
 800565a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	005b      	lsls	r3, r3, #1
 8005668:	2203      	movs	r2, #3
 800566a:	fa02 f303 	lsl.w	r3, r2, r3
 800566e:	43db      	mvns	r3, r3
 8005670:	69ba      	ldr	r2, [r7, #24]
 8005672:	4013      	ands	r3, r2
 8005674:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f003 0203 	and.w	r2, r3, #3
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	005b      	lsls	r3, r3, #1
 8005682:	fa02 f303 	lsl.w	r3, r2, r3
 8005686:	69ba      	ldr	r2, [r7, #24]
 8005688:	4313      	orrs	r3, r2
 800568a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	69ba      	ldr	r2, [r7, #24]
 8005690:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800569a:	2b00      	cmp	r3, #0
 800569c:	f000 80e0 	beq.w	8005860 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056a0:	4b2f      	ldr	r3, [pc, #188]	; (8005760 <HAL_GPIO_Init+0x238>)
 80056a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80056a6:	4a2e      	ldr	r2, [pc, #184]	; (8005760 <HAL_GPIO_Init+0x238>)
 80056a8:	f043 0302 	orr.w	r3, r3, #2
 80056ac:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80056b0:	4b2b      	ldr	r3, [pc, #172]	; (8005760 <HAL_GPIO_Init+0x238>)
 80056b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80056b6:	f003 0302 	and.w	r3, r3, #2
 80056ba:	60fb      	str	r3, [r7, #12]
 80056bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80056be:	4a29      	ldr	r2, [pc, #164]	; (8005764 <HAL_GPIO_Init+0x23c>)
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	089b      	lsrs	r3, r3, #2
 80056c4:	3302      	adds	r3, #2
 80056c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	f003 0303 	and.w	r3, r3, #3
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	220f      	movs	r2, #15
 80056d6:	fa02 f303 	lsl.w	r3, r2, r3
 80056da:	43db      	mvns	r3, r3
 80056dc:	69ba      	ldr	r2, [r7, #24]
 80056de:	4013      	ands	r3, r2
 80056e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a20      	ldr	r2, [pc, #128]	; (8005768 <HAL_GPIO_Init+0x240>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d052      	beq.n	8005790 <HAL_GPIO_Init+0x268>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a1f      	ldr	r2, [pc, #124]	; (800576c <HAL_GPIO_Init+0x244>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d031      	beq.n	8005756 <HAL_GPIO_Init+0x22e>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a1e      	ldr	r2, [pc, #120]	; (8005770 <HAL_GPIO_Init+0x248>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d02b      	beq.n	8005752 <HAL_GPIO_Init+0x22a>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a1d      	ldr	r2, [pc, #116]	; (8005774 <HAL_GPIO_Init+0x24c>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d025      	beq.n	800574e <HAL_GPIO_Init+0x226>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a1c      	ldr	r2, [pc, #112]	; (8005778 <HAL_GPIO_Init+0x250>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d01f      	beq.n	800574a <HAL_GPIO_Init+0x222>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a1b      	ldr	r2, [pc, #108]	; (800577c <HAL_GPIO_Init+0x254>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d019      	beq.n	8005746 <HAL_GPIO_Init+0x21e>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a1a      	ldr	r2, [pc, #104]	; (8005780 <HAL_GPIO_Init+0x258>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d013      	beq.n	8005742 <HAL_GPIO_Init+0x21a>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a19      	ldr	r2, [pc, #100]	; (8005784 <HAL_GPIO_Init+0x25c>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d00d      	beq.n	800573e <HAL_GPIO_Init+0x216>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a18      	ldr	r2, [pc, #96]	; (8005788 <HAL_GPIO_Init+0x260>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d007      	beq.n	800573a <HAL_GPIO_Init+0x212>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a17      	ldr	r2, [pc, #92]	; (800578c <HAL_GPIO_Init+0x264>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d101      	bne.n	8005736 <HAL_GPIO_Init+0x20e>
 8005732:	2309      	movs	r3, #9
 8005734:	e02d      	b.n	8005792 <HAL_GPIO_Init+0x26a>
 8005736:	230a      	movs	r3, #10
 8005738:	e02b      	b.n	8005792 <HAL_GPIO_Init+0x26a>
 800573a:	2308      	movs	r3, #8
 800573c:	e029      	b.n	8005792 <HAL_GPIO_Init+0x26a>
 800573e:	2307      	movs	r3, #7
 8005740:	e027      	b.n	8005792 <HAL_GPIO_Init+0x26a>
 8005742:	2306      	movs	r3, #6
 8005744:	e025      	b.n	8005792 <HAL_GPIO_Init+0x26a>
 8005746:	2305      	movs	r3, #5
 8005748:	e023      	b.n	8005792 <HAL_GPIO_Init+0x26a>
 800574a:	2304      	movs	r3, #4
 800574c:	e021      	b.n	8005792 <HAL_GPIO_Init+0x26a>
 800574e:	2303      	movs	r3, #3
 8005750:	e01f      	b.n	8005792 <HAL_GPIO_Init+0x26a>
 8005752:	2302      	movs	r3, #2
 8005754:	e01d      	b.n	8005792 <HAL_GPIO_Init+0x26a>
 8005756:	2301      	movs	r3, #1
 8005758:	e01b      	b.n	8005792 <HAL_GPIO_Init+0x26a>
 800575a:	bf00      	nop
 800575c:	58000080 	.word	0x58000080
 8005760:	58024400 	.word	0x58024400
 8005764:	58000400 	.word	0x58000400
 8005768:	58020000 	.word	0x58020000
 800576c:	58020400 	.word	0x58020400
 8005770:	58020800 	.word	0x58020800
 8005774:	58020c00 	.word	0x58020c00
 8005778:	58021000 	.word	0x58021000
 800577c:	58021400 	.word	0x58021400
 8005780:	58021800 	.word	0x58021800
 8005784:	58021c00 	.word	0x58021c00
 8005788:	58022000 	.word	0x58022000
 800578c:	58022400 	.word	0x58022400
 8005790:	2300      	movs	r3, #0
 8005792:	69fa      	ldr	r2, [r7, #28]
 8005794:	f002 0203 	and.w	r2, r2, #3
 8005798:	0092      	lsls	r2, r2, #2
 800579a:	4093      	lsls	r3, r2
 800579c:	69ba      	ldr	r2, [r7, #24]
 800579e:	4313      	orrs	r3, r2
 80057a0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80057a2:	4938      	ldr	r1, [pc, #224]	; (8005884 <HAL_GPIO_Init+0x35c>)
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	089b      	lsrs	r3, r3, #2
 80057a8:	3302      	adds	r3, #2
 80057aa:	69ba      	ldr	r2, [r7, #24]
 80057ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80057b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	43db      	mvns	r3, r3
 80057bc:	69ba      	ldr	r2, [r7, #24]
 80057be:	4013      	ands	r3, r2
 80057c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d003      	beq.n	80057d6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80057ce:	69ba      	ldr	r2, [r7, #24]
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80057d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80057de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	43db      	mvns	r3, r3
 80057ea:	69ba      	ldr	r2, [r7, #24]
 80057ec:	4013      	ands	r3, r2
 80057ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d003      	beq.n	8005804 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80057fc:	69ba      	ldr	r2, [r7, #24]
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	4313      	orrs	r3, r2
 8005802:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005804:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	43db      	mvns	r3, r3
 8005816:	69ba      	ldr	r2, [r7, #24]
 8005818:	4013      	ands	r3, r2
 800581a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d003      	beq.n	8005830 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005828:	69ba      	ldr	r2, [r7, #24]
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	4313      	orrs	r3, r2
 800582e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	69ba      	ldr	r2, [r7, #24]
 8005834:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	43db      	mvns	r3, r3
 8005840:	69ba      	ldr	r2, [r7, #24]
 8005842:	4013      	ands	r3, r2
 8005844:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800584e:	2b00      	cmp	r3, #0
 8005850:	d003      	beq.n	800585a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005852:	69ba      	ldr	r2, [r7, #24]
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	4313      	orrs	r3, r2
 8005858:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	69ba      	ldr	r2, [r7, #24]
 800585e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	3301      	adds	r3, #1
 8005864:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	fa22 f303 	lsr.w	r3, r2, r3
 8005870:	2b00      	cmp	r3, #0
 8005872:	f47f ae63 	bne.w	800553c <HAL_GPIO_Init+0x14>
  }
}
 8005876:	bf00      	nop
 8005878:	bf00      	nop
 800587a:	3724      	adds	r7, #36	; 0x24
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr
 8005884:	58000400 	.word	0x58000400

08005888 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005888:	b480      	push	{r7}
 800588a:	b085      	sub	sp, #20
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	460b      	mov	r3, r1
 8005892:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	691a      	ldr	r2, [r3, #16]
 8005898:	887b      	ldrh	r3, [r7, #2]
 800589a:	4013      	ands	r3, r2
 800589c:	2b00      	cmp	r3, #0
 800589e:	d002      	beq.n	80058a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80058a0:	2301      	movs	r3, #1
 80058a2:	73fb      	strb	r3, [r7, #15]
 80058a4:	e001      	b.n	80058aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80058a6:	2300      	movs	r3, #0
 80058a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80058aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3714      	adds	r7, #20
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	460b      	mov	r3, r1
 80058c2:	807b      	strh	r3, [r7, #2]
 80058c4:	4613      	mov	r3, r2
 80058c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80058c8:	787b      	ldrb	r3, [r7, #1]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d003      	beq.n	80058d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80058ce:	887a      	ldrh	r2, [r7, #2]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80058d4:	e003      	b.n	80058de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80058d6:	887b      	ldrh	r3, [r7, #2]
 80058d8:	041a      	lsls	r2, r3, #16
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	619a      	str	r2, [r3, #24]
}
 80058de:	bf00      	nop
 80058e0:	370c      	adds	r7, #12
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr
	...

080058ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d101      	bne.n	80058fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e07f      	b.n	80059fe <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005904:	b2db      	uxtb	r3, r3
 8005906:	2b00      	cmp	r3, #0
 8005908:	d106      	bne.n	8005918 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f7fb fc60 	bl	80011d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2224      	movs	r2, #36	; 0x24
 800591c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f022 0201 	bic.w	r2, r2, #1
 800592e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685a      	ldr	r2, [r3, #4]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800593c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	689a      	ldr	r2, [r3, #8]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800594c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	2b01      	cmp	r3, #1
 8005954:	d107      	bne.n	8005966 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	689a      	ldr	r2, [r3, #8]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005962:	609a      	str	r2, [r3, #8]
 8005964:	e006      	b.n	8005974 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	689a      	ldr	r2, [r3, #8]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005972:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	2b02      	cmp	r3, #2
 800597a:	d104      	bne.n	8005986 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005984:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	6859      	ldr	r1, [r3, #4]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	4b1d      	ldr	r3, [pc, #116]	; (8005a08 <HAL_I2C_Init+0x11c>)
 8005992:	430b      	orrs	r3, r1
 8005994:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68da      	ldr	r2, [r3, #12]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80059a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	691a      	ldr	r2, [r3, #16]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	695b      	ldr	r3, [r3, #20]
 80059ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	430a      	orrs	r2, r1
 80059be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	69d9      	ldr	r1, [r3, #28]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6a1a      	ldr	r2, [r3, #32]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	430a      	orrs	r2, r1
 80059ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f042 0201 	orr.w	r2, r2, #1
 80059de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2220      	movs	r2, #32
 80059ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3708      	adds	r7, #8
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	02008000 	.word	0x02008000

08005a0c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b088      	sub	sp, #32
 8005a10:	af02      	add	r7, sp, #8
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	607a      	str	r2, [r7, #4]
 8005a16:	461a      	mov	r2, r3
 8005a18:	460b      	mov	r3, r1
 8005a1a:	817b      	strh	r3, [r7, #10]
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	2b20      	cmp	r3, #32
 8005a2a:	f040 80da 	bne.w	8005be2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d101      	bne.n	8005a3c <HAL_I2C_Master_Transmit+0x30>
 8005a38:	2302      	movs	r3, #2
 8005a3a:	e0d3      	b.n	8005be4 <HAL_I2C_Master_Transmit+0x1d8>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005a44:	f7fc f9e0 	bl	8001e08 <HAL_GetTick>
 8005a48:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	9300      	str	r3, [sp, #0]
 8005a4e:	2319      	movs	r3, #25
 8005a50:	2201      	movs	r2, #1
 8005a52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005a56:	68f8      	ldr	r0, [r7, #12]
 8005a58:	f000 f9e6 	bl	8005e28 <I2C_WaitOnFlagUntilTimeout>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d001      	beq.n	8005a66 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e0be      	b.n	8005be4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2221      	movs	r2, #33	; 0x21
 8005a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2210      	movs	r2, #16
 8005a72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	893a      	ldrh	r2, [r7, #8]
 8005a86:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	2bff      	cmp	r3, #255	; 0xff
 8005a96:	d90e      	bls.n	8005ab6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	22ff      	movs	r2, #255	; 0xff
 8005a9c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aa2:	b2da      	uxtb	r2, r3
 8005aa4:	8979      	ldrh	r1, [r7, #10]
 8005aa6:	4b51      	ldr	r3, [pc, #324]	; (8005bec <HAL_I2C_Master_Transmit+0x1e0>)
 8005aa8:	9300      	str	r3, [sp, #0]
 8005aaa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005aae:	68f8      	ldr	r0, [r7, #12]
 8005ab0:	f000 fbf6 	bl	80062a0 <I2C_TransferConfig>
 8005ab4:	e06c      	b.n	8005b90 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aba:	b29a      	uxth	r2, r3
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ac4:	b2da      	uxtb	r2, r3
 8005ac6:	8979      	ldrh	r1, [r7, #10]
 8005ac8:	4b48      	ldr	r3, [pc, #288]	; (8005bec <HAL_I2C_Master_Transmit+0x1e0>)
 8005aca:	9300      	str	r3, [sp, #0]
 8005acc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f000 fbe5 	bl	80062a0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005ad6:	e05b      	b.n	8005b90 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ad8:	697a      	ldr	r2, [r7, #20]
 8005ada:	6a39      	ldr	r1, [r7, #32]
 8005adc:	68f8      	ldr	r0, [r7, #12]
 8005ade:	f000 f9f2 	bl	8005ec6 <I2C_WaitOnTXISFlagUntilTimeout>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d001      	beq.n	8005aec <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e07b      	b.n	8005be4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af0:	781a      	ldrb	r2, [r3, #0]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afc:	1c5a      	adds	r2, r3, #1
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b14:	3b01      	subs	r3, #1
 8005b16:	b29a      	uxth	r2, r3
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d034      	beq.n	8005b90 <HAL_I2C_Master_Transmit+0x184>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d130      	bne.n	8005b90 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	9300      	str	r3, [sp, #0]
 8005b32:	6a3b      	ldr	r3, [r7, #32]
 8005b34:	2200      	movs	r2, #0
 8005b36:	2180      	movs	r1, #128	; 0x80
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f000 f975 	bl	8005e28 <I2C_WaitOnFlagUntilTimeout>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d001      	beq.n	8005b48 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e04d      	b.n	8005be4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	2bff      	cmp	r3, #255	; 0xff
 8005b50:	d90e      	bls.n	8005b70 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	22ff      	movs	r2, #255	; 0xff
 8005b56:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b5c:	b2da      	uxtb	r2, r3
 8005b5e:	8979      	ldrh	r1, [r7, #10]
 8005b60:	2300      	movs	r3, #0
 8005b62:	9300      	str	r3, [sp, #0]
 8005b64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b68:	68f8      	ldr	r0, [r7, #12]
 8005b6a:	f000 fb99 	bl	80062a0 <I2C_TransferConfig>
 8005b6e:	e00f      	b.n	8005b90 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b74:	b29a      	uxth	r2, r3
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b7e:	b2da      	uxtb	r2, r3
 8005b80:	8979      	ldrh	r1, [r7, #10]
 8005b82:	2300      	movs	r3, #0
 8005b84:	9300      	str	r3, [sp, #0]
 8005b86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b8a:	68f8      	ldr	r0, [r7, #12]
 8005b8c:	f000 fb88 	bl	80062a0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d19e      	bne.n	8005ad8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	6a39      	ldr	r1, [r7, #32]
 8005b9e:	68f8      	ldr	r0, [r7, #12]
 8005ba0:	f000 f9d8 	bl	8005f54 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d001      	beq.n	8005bae <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e01a      	b.n	8005be4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2220      	movs	r2, #32
 8005bb4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	6859      	ldr	r1, [r3, #4]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	4b0b      	ldr	r3, [pc, #44]	; (8005bf0 <HAL_I2C_Master_Transmit+0x1e4>)
 8005bc2:	400b      	ands	r3, r1
 8005bc4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2220      	movs	r2, #32
 8005bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005bde:	2300      	movs	r3, #0
 8005be0:	e000      	b.n	8005be4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005be2:	2302      	movs	r3, #2
  }
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3718      	adds	r7, #24
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	80002000 	.word	0x80002000
 8005bf0:	fe00e800 	.word	0xfe00e800

08005bf4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b088      	sub	sp, #32
 8005bf8:	af02      	add	r7, sp, #8
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	607a      	str	r2, [r7, #4]
 8005bfe:	461a      	mov	r2, r3
 8005c00:	460b      	mov	r3, r1
 8005c02:	817b      	strh	r3, [r7, #10]
 8005c04:	4613      	mov	r3, r2
 8005c06:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	2b20      	cmp	r3, #32
 8005c12:	f040 80db 	bne.w	8005dcc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d101      	bne.n	8005c24 <HAL_I2C_Master_Receive+0x30>
 8005c20:	2302      	movs	r3, #2
 8005c22:	e0d4      	b.n	8005dce <HAL_I2C_Master_Receive+0x1da>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005c2c:	f7fc f8ec 	bl	8001e08 <HAL_GetTick>
 8005c30:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	9300      	str	r3, [sp, #0]
 8005c36:	2319      	movs	r3, #25
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005c3e:	68f8      	ldr	r0, [r7, #12]
 8005c40:	f000 f8f2 	bl	8005e28 <I2C_WaitOnFlagUntilTimeout>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d001      	beq.n	8005c4e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e0bf      	b.n	8005dce <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2222      	movs	r2, #34	; 0x22
 8005c52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2210      	movs	r2, #16
 8005c5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2200      	movs	r2, #0
 8005c62:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	893a      	ldrh	r2, [r7, #8]
 8005c6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2200      	movs	r2, #0
 8005c74:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	2bff      	cmp	r3, #255	; 0xff
 8005c7e:	d90e      	bls.n	8005c9e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	22ff      	movs	r2, #255	; 0xff
 8005c84:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c8a:	b2da      	uxtb	r2, r3
 8005c8c:	8979      	ldrh	r1, [r7, #10]
 8005c8e:	4b52      	ldr	r3, [pc, #328]	; (8005dd8 <HAL_I2C_Master_Receive+0x1e4>)
 8005c90:	9300      	str	r3, [sp, #0]
 8005c92:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005c96:	68f8      	ldr	r0, [r7, #12]
 8005c98:	f000 fb02 	bl	80062a0 <I2C_TransferConfig>
 8005c9c:	e06d      	b.n	8005d7a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cac:	b2da      	uxtb	r2, r3
 8005cae:	8979      	ldrh	r1, [r7, #10]
 8005cb0:	4b49      	ldr	r3, [pc, #292]	; (8005dd8 <HAL_I2C_Master_Receive+0x1e4>)
 8005cb2:	9300      	str	r3, [sp, #0]
 8005cb4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	f000 faf1 	bl	80062a0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005cbe:	e05c      	b.n	8005d7a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cc0:	697a      	ldr	r2, [r7, #20]
 8005cc2:	6a39      	ldr	r1, [r7, #32]
 8005cc4:	68f8      	ldr	r0, [r7, #12]
 8005cc6:	f000 f989 	bl	8005fdc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d001      	beq.n	8005cd4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e07c      	b.n	8005dce <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cde:	b2d2      	uxtb	r2, r2
 8005ce0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce6:	1c5a      	adds	r2, r3, #1
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	b29a      	uxth	r2, r3
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d034      	beq.n	8005d7a <HAL_I2C_Master_Receive+0x186>
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d130      	bne.n	8005d7a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	9300      	str	r3, [sp, #0]
 8005d1c:	6a3b      	ldr	r3, [r7, #32]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	2180      	movs	r1, #128	; 0x80
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	f000 f880 	bl	8005e28 <I2C_WaitOnFlagUntilTimeout>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d001      	beq.n	8005d32 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e04d      	b.n	8005dce <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	2bff      	cmp	r3, #255	; 0xff
 8005d3a:	d90e      	bls.n	8005d5a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	22ff      	movs	r2, #255	; 0xff
 8005d40:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d46:	b2da      	uxtb	r2, r3
 8005d48:	8979      	ldrh	r1, [r7, #10]
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	9300      	str	r3, [sp, #0]
 8005d4e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d52:	68f8      	ldr	r0, [r7, #12]
 8005d54:	f000 faa4 	bl	80062a0 <I2C_TransferConfig>
 8005d58:	e00f      	b.n	8005d7a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d5e:	b29a      	uxth	r2, r3
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d68:	b2da      	uxtb	r2, r3
 8005d6a:	8979      	ldrh	r1, [r7, #10]
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	9300      	str	r3, [sp, #0]
 8005d70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d74:	68f8      	ldr	r0, [r7, #12]
 8005d76:	f000 fa93 	bl	80062a0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d19d      	bne.n	8005cc0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d84:	697a      	ldr	r2, [r7, #20]
 8005d86:	6a39      	ldr	r1, [r7, #32]
 8005d88:	68f8      	ldr	r0, [r7, #12]
 8005d8a:	f000 f8e3 	bl	8005f54 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d001      	beq.n	8005d98 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e01a      	b.n	8005dce <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2220      	movs	r2, #32
 8005d9e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	6859      	ldr	r1, [r3, #4]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	4b0c      	ldr	r3, [pc, #48]	; (8005ddc <HAL_I2C_Master_Receive+0x1e8>)
 8005dac:	400b      	ands	r3, r1
 8005dae:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2220      	movs	r2, #32
 8005db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	e000      	b.n	8005dce <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005dcc:	2302      	movs	r3, #2
  }
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3718      	adds	r7, #24
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	80002400 	.word	0x80002400
 8005ddc:	fe00e800 	.word	0xfe00e800

08005de0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	f003 0302 	and.w	r3, r3, #2
 8005df2:	2b02      	cmp	r3, #2
 8005df4:	d103      	bne.n	8005dfe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	699b      	ldr	r3, [r3, #24]
 8005e04:	f003 0301 	and.w	r3, r3, #1
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d007      	beq.n	8005e1c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	699a      	ldr	r2, [r3, #24]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f042 0201 	orr.w	r2, r2, #1
 8005e1a:	619a      	str	r2, [r3, #24]
  }
}
 8005e1c:	bf00      	nop
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	603b      	str	r3, [r7, #0]
 8005e34:	4613      	mov	r3, r2
 8005e36:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e38:	e031      	b.n	8005e9e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e40:	d02d      	beq.n	8005e9e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e42:	f7fb ffe1 	bl	8001e08 <HAL_GetTick>
 8005e46:	4602      	mov	r2, r0
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	683a      	ldr	r2, [r7, #0]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d302      	bcc.n	8005e58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d122      	bne.n	8005e9e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	699a      	ldr	r2, [r3, #24]
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	4013      	ands	r3, r2
 8005e62:	68ba      	ldr	r2, [r7, #8]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	bf0c      	ite	eq
 8005e68:	2301      	moveq	r3, #1
 8005e6a:	2300      	movne	r3, #0
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	461a      	mov	r2, r3
 8005e70:	79fb      	ldrb	r3, [r7, #7]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d113      	bne.n	8005e9e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e7a:	f043 0220 	orr.w	r2, r3, #32
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2220      	movs	r2, #32
 8005e86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e00f      	b.n	8005ebe <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	699a      	ldr	r2, [r3, #24]
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	68ba      	ldr	r2, [r7, #8]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	bf0c      	ite	eq
 8005eae:	2301      	moveq	r3, #1
 8005eb0:	2300      	movne	r3, #0
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	79fb      	ldrb	r3, [r7, #7]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d0be      	beq.n	8005e3a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3710      	adds	r7, #16
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b084      	sub	sp, #16
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	60f8      	str	r0, [r7, #12]
 8005ece:	60b9      	str	r1, [r7, #8]
 8005ed0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005ed2:	e033      	b.n	8005f3c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	68b9      	ldr	r1, [r7, #8]
 8005ed8:	68f8      	ldr	r0, [r7, #12]
 8005eda:	f000 f901 	bl	80060e0 <I2C_IsErrorOccurred>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d001      	beq.n	8005ee8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e031      	b.n	8005f4c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eee:	d025      	beq.n	8005f3c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ef0:	f7fb ff8a 	bl	8001e08 <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	68ba      	ldr	r2, [r7, #8]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d302      	bcc.n	8005f06 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d11a      	bne.n	8005f3c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	699b      	ldr	r3, [r3, #24]
 8005f0c:	f003 0302 	and.w	r3, r3, #2
 8005f10:	2b02      	cmp	r3, #2
 8005f12:	d013      	beq.n	8005f3c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f18:	f043 0220 	orr.w	r2, r3, #32
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2220      	movs	r2, #32
 8005f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e007      	b.n	8005f4c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	699b      	ldr	r3, [r3, #24]
 8005f42:	f003 0302 	and.w	r3, r3, #2
 8005f46:	2b02      	cmp	r3, #2
 8005f48:	d1c4      	bne.n	8005ed4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3710      	adds	r7, #16
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f60:	e02f      	b.n	8005fc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	68b9      	ldr	r1, [r7, #8]
 8005f66:	68f8      	ldr	r0, [r7, #12]
 8005f68:	f000 f8ba 	bl	80060e0 <I2C_IsErrorOccurred>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d001      	beq.n	8005f76 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e02d      	b.n	8005fd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f76:	f7fb ff47 	bl	8001e08 <HAL_GetTick>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	1ad3      	subs	r3, r2, r3
 8005f80:	68ba      	ldr	r2, [r7, #8]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d302      	bcc.n	8005f8c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d11a      	bne.n	8005fc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	699b      	ldr	r3, [r3, #24]
 8005f92:	f003 0320 	and.w	r3, r3, #32
 8005f96:	2b20      	cmp	r3, #32
 8005f98:	d013      	beq.n	8005fc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f9e:	f043 0220 	orr.w	r2, r3, #32
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2220      	movs	r2, #32
 8005faa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e007      	b.n	8005fd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	699b      	ldr	r3, [r3, #24]
 8005fc8:	f003 0320 	and.w	r3, r3, #32
 8005fcc:	2b20      	cmp	r3, #32
 8005fce:	d1c8      	bne.n	8005f62 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3710      	adds	r7, #16
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
	...

08005fdc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005fe8:	e06b      	b.n	80060c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	68b9      	ldr	r1, [r7, #8]
 8005fee:	68f8      	ldr	r0, [r7, #12]
 8005ff0:	f000 f876 	bl	80060e0 <I2C_IsErrorOccurred>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d001      	beq.n	8005ffe <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e069      	b.n	80060d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	699b      	ldr	r3, [r3, #24]
 8006004:	f003 0320 	and.w	r3, r3, #32
 8006008:	2b20      	cmp	r3, #32
 800600a:	d138      	bne.n	800607e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	699b      	ldr	r3, [r3, #24]
 8006012:	f003 0304 	and.w	r3, r3, #4
 8006016:	2b04      	cmp	r3, #4
 8006018:	d105      	bne.n	8006026 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800601e:	2b00      	cmp	r3, #0
 8006020:	d001      	beq.n	8006026 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8006022:	2300      	movs	r3, #0
 8006024:	e055      	b.n	80060d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	699b      	ldr	r3, [r3, #24]
 800602c:	f003 0310 	and.w	r3, r3, #16
 8006030:	2b10      	cmp	r3, #16
 8006032:	d107      	bne.n	8006044 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2210      	movs	r2, #16
 800603a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2204      	movs	r2, #4
 8006040:	645a      	str	r2, [r3, #68]	; 0x44
 8006042:	e002      	b.n	800604a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2200      	movs	r2, #0
 8006048:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2220      	movs	r2, #32
 8006050:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	6859      	ldr	r1, [r3, #4]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	4b1f      	ldr	r3, [pc, #124]	; (80060dc <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800605e:	400b      	ands	r3, r1
 8006060:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2220      	movs	r2, #32
 8006066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2200      	movs	r2, #0
 8006076:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e029      	b.n	80060d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800607e:	f7fb fec3 	bl	8001e08 <HAL_GetTick>
 8006082:	4602      	mov	r2, r0
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	1ad3      	subs	r3, r2, r3
 8006088:	68ba      	ldr	r2, [r7, #8]
 800608a:	429a      	cmp	r2, r3
 800608c:	d302      	bcc.n	8006094 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d116      	bne.n	80060c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	f003 0304 	and.w	r3, r3, #4
 800609e:	2b04      	cmp	r3, #4
 80060a0:	d00f      	beq.n	80060c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060a6:	f043 0220 	orr.w	r2, r3, #32
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2220      	movs	r2, #32
 80060b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e007      	b.n	80060d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	699b      	ldr	r3, [r3, #24]
 80060c8:	f003 0304 	and.w	r3, r3, #4
 80060cc:	2b04      	cmp	r3, #4
 80060ce:	d18c      	bne.n	8005fea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3710      	adds	r7, #16
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	fe00e800 	.word	0xfe00e800

080060e0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b08a      	sub	sp, #40	; 0x28
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060ec:	2300      	movs	r3, #0
 80060ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	699b      	ldr	r3, [r3, #24]
 80060f8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80060fa:	2300      	movs	r3, #0
 80060fc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	f003 0310 	and.w	r3, r3, #16
 8006108:	2b00      	cmp	r3, #0
 800610a:	d068      	beq.n	80061de <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2210      	movs	r2, #16
 8006112:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006114:	e049      	b.n	80061aa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800611c:	d045      	beq.n	80061aa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800611e:	f7fb fe73 	bl	8001e08 <HAL_GetTick>
 8006122:	4602      	mov	r2, r0
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	68ba      	ldr	r2, [r7, #8]
 800612a:	429a      	cmp	r2, r3
 800612c:	d302      	bcc.n	8006134 <I2C_IsErrorOccurred+0x54>
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d13a      	bne.n	80061aa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800613e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006146:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	699b      	ldr	r3, [r3, #24]
 800614e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006152:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006156:	d121      	bne.n	800619c <I2C_IsErrorOccurred+0xbc>
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800615e:	d01d      	beq.n	800619c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006160:	7cfb      	ldrb	r3, [r7, #19]
 8006162:	2b20      	cmp	r3, #32
 8006164:	d01a      	beq.n	800619c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	685a      	ldr	r2, [r3, #4]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006174:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006176:	f7fb fe47 	bl	8001e08 <HAL_GetTick>
 800617a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800617c:	e00e      	b.n	800619c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800617e:	f7fb fe43 	bl	8001e08 <HAL_GetTick>
 8006182:	4602      	mov	r2, r0
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	1ad3      	subs	r3, r2, r3
 8006188:	2b19      	cmp	r3, #25
 800618a:	d907      	bls.n	800619c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800618c:	6a3b      	ldr	r3, [r7, #32]
 800618e:	f043 0320 	orr.w	r3, r3, #32
 8006192:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800619a:	e006      	b.n	80061aa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	699b      	ldr	r3, [r3, #24]
 80061a2:	f003 0320 	and.w	r3, r3, #32
 80061a6:	2b20      	cmp	r3, #32
 80061a8:	d1e9      	bne.n	800617e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	699b      	ldr	r3, [r3, #24]
 80061b0:	f003 0320 	and.w	r3, r3, #32
 80061b4:	2b20      	cmp	r3, #32
 80061b6:	d003      	beq.n	80061c0 <I2C_IsErrorOccurred+0xe0>
 80061b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d0aa      	beq.n	8006116 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80061c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d103      	bne.n	80061d0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2220      	movs	r2, #32
 80061ce:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80061d0:	6a3b      	ldr	r3, [r7, #32]
 80061d2:	f043 0304 	orr.w	r3, r3, #4
 80061d6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	699b      	ldr	r3, [r3, #24]
 80061e4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00b      	beq.n	8006208 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80061f0:	6a3b      	ldr	r3, [r7, #32]
 80061f2:	f043 0301 	orr.w	r3, r3, #1
 80061f6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006200:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800620e:	2b00      	cmp	r3, #0
 8006210:	d00b      	beq.n	800622a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006212:	6a3b      	ldr	r3, [r7, #32]
 8006214:	f043 0308 	orr.w	r3, r3, #8
 8006218:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006222:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006230:	2b00      	cmp	r3, #0
 8006232:	d00b      	beq.n	800624c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006234:	6a3b      	ldr	r3, [r7, #32]
 8006236:	f043 0302 	orr.w	r3, r3, #2
 800623a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006244:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800624c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006250:	2b00      	cmp	r3, #0
 8006252:	d01c      	beq.n	800628e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f7ff fdc3 	bl	8005de0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	6859      	ldr	r1, [r3, #4]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	4b0d      	ldr	r3, [pc, #52]	; (800629c <I2C_IsErrorOccurred+0x1bc>)
 8006266:	400b      	ands	r3, r1
 8006268:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800626e:	6a3b      	ldr	r3, [r7, #32]
 8006270:	431a      	orrs	r2, r3
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2220      	movs	r2, #32
 800627a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800628e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006292:	4618      	mov	r0, r3
 8006294:	3728      	adds	r7, #40	; 0x28
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	fe00e800 	.word	0xfe00e800

080062a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b087      	sub	sp, #28
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	607b      	str	r3, [r7, #4]
 80062aa:	460b      	mov	r3, r1
 80062ac:	817b      	strh	r3, [r7, #10]
 80062ae:	4613      	mov	r3, r2
 80062b0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80062b2:	897b      	ldrh	r3, [r7, #10]
 80062b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80062b8:	7a7b      	ldrb	r3, [r7, #9]
 80062ba:	041b      	lsls	r3, r3, #16
 80062bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80062c0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80062c6:	6a3b      	ldr	r3, [r7, #32]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80062ce:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	685a      	ldr	r2, [r3, #4]
 80062d6:	6a3b      	ldr	r3, [r7, #32]
 80062d8:	0d5b      	lsrs	r3, r3, #21
 80062da:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80062de:	4b08      	ldr	r3, [pc, #32]	; (8006300 <I2C_TransferConfig+0x60>)
 80062e0:	430b      	orrs	r3, r1
 80062e2:	43db      	mvns	r3, r3
 80062e4:	ea02 0103 	and.w	r1, r2, r3
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	697a      	ldr	r2, [r7, #20]
 80062ee:	430a      	orrs	r2, r1
 80062f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80062f2:	bf00      	nop
 80062f4:	371c      	adds	r7, #28
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr
 80062fe:	bf00      	nop
 8006300:	03ff63ff 	.word	0x03ff63ff

08006304 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006314:	b2db      	uxtb	r3, r3
 8006316:	2b20      	cmp	r3, #32
 8006318:	d138      	bne.n	800638c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006320:	2b01      	cmp	r3, #1
 8006322:	d101      	bne.n	8006328 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006324:	2302      	movs	r3, #2
 8006326:	e032      	b.n	800638e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2224      	movs	r2, #36	; 0x24
 8006334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f022 0201 	bic.w	r2, r2, #1
 8006346:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006356:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	6819      	ldr	r1, [r3, #0]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	683a      	ldr	r2, [r7, #0]
 8006364:	430a      	orrs	r2, r1
 8006366:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f042 0201 	orr.w	r2, r2, #1
 8006376:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2220      	movs	r2, #32
 800637c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006388:	2300      	movs	r3, #0
 800638a:	e000      	b.n	800638e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800638c:	2302      	movs	r3, #2
  }
}
 800638e:	4618      	mov	r0, r3
 8006390:	370c      	adds	r7, #12
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr

0800639a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800639a:	b480      	push	{r7}
 800639c:	b085      	sub	sp, #20
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
 80063a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	2b20      	cmp	r3, #32
 80063ae:	d139      	bne.n	8006424 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d101      	bne.n	80063be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80063ba:	2302      	movs	r3, #2
 80063bc:	e033      	b.n	8006426 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2224      	movs	r2, #36	; 0x24
 80063ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f022 0201 	bic.w	r2, r2, #1
 80063dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80063ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	021b      	lsls	r3, r3, #8
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f042 0201 	orr.w	r2, r2, #1
 800640e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2220      	movs	r2, #32
 8006414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006420:	2300      	movs	r3, #0
 8006422:	e000      	b.n	8006426 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006424:	2302      	movs	r3, #2
  }
}
 8006426:	4618      	mov	r0, r3
 8006428:	3714      	adds	r7, #20
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr
	...

08006434 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8006434:	b480      	push	{r7}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800643c:	4b0d      	ldr	r3, [pc, #52]	; (8006474 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800643e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006442:	4a0c      	ldr	r2, [pc, #48]	; (8006474 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8006444:	f043 0302 	orr.w	r3, r3, #2
 8006448:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800644c:	4b09      	ldr	r3, [pc, #36]	; (8006474 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800644e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006452:	f003 0302 	and.w	r3, r3, #2
 8006456:	60fb      	str	r3, [r7, #12]
 8006458:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800645a:	4b07      	ldr	r3, [pc, #28]	; (8006478 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800645c:	685a      	ldr	r2, [r3, #4]
 800645e:	4906      	ldr	r1, [pc, #24]	; (8006478 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4313      	orrs	r3, r2
 8006464:	604b      	str	r3, [r1, #4]
}
 8006466:	bf00      	nop
 8006468:	3714      	adds	r7, #20
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	58024400 	.word	0x58024400
 8006478:	58000400 	.word	0x58000400

0800647c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800647c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800647e:	b08f      	sub	sp, #60	; 0x3c
 8006480:	af0a      	add	r7, sp, #40	; 0x28
 8006482:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d101      	bne.n	800648e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e116      	b.n	80066bc <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800649a:	b2db      	uxtb	r3, r3
 800649c:	2b00      	cmp	r3, #0
 800649e:	d106      	bne.n	80064ae <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f7fb fbb7 	bl	8001c1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2203      	movs	r2, #3
 80064b2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d102      	bne.n	80064c8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4618      	mov	r0, r3
 80064ce:	f006 fa87 	bl	800c9e0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	603b      	str	r3, [r7, #0]
 80064d8:	687e      	ldr	r6, [r7, #4]
 80064da:	466d      	mov	r5, sp
 80064dc:	f106 0410 	add.w	r4, r6, #16
 80064e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80064e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80064e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80064e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80064e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80064ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80064f0:	1d33      	adds	r3, r6, #4
 80064f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80064f4:	6838      	ldr	r0, [r7, #0]
 80064f6:	f006 fa05 	bl	800c904 <USB_CoreInit>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d005      	beq.n	800650c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2202      	movs	r2, #2
 8006504:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e0d7      	b.n	80066bc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2100      	movs	r1, #0
 8006512:	4618      	mov	r0, r3
 8006514:	f006 fa75 	bl	800ca02 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006518:	2300      	movs	r3, #0
 800651a:	73fb      	strb	r3, [r7, #15]
 800651c:	e04a      	b.n	80065b4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800651e:	7bfa      	ldrb	r2, [r7, #15]
 8006520:	6879      	ldr	r1, [r7, #4]
 8006522:	4613      	mov	r3, r2
 8006524:	00db      	lsls	r3, r3, #3
 8006526:	4413      	add	r3, r2
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	440b      	add	r3, r1
 800652c:	333d      	adds	r3, #61	; 0x3d
 800652e:	2201      	movs	r2, #1
 8006530:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006532:	7bfa      	ldrb	r2, [r7, #15]
 8006534:	6879      	ldr	r1, [r7, #4]
 8006536:	4613      	mov	r3, r2
 8006538:	00db      	lsls	r3, r3, #3
 800653a:	4413      	add	r3, r2
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	440b      	add	r3, r1
 8006540:	333c      	adds	r3, #60	; 0x3c
 8006542:	7bfa      	ldrb	r2, [r7, #15]
 8006544:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006546:	7bfa      	ldrb	r2, [r7, #15]
 8006548:	7bfb      	ldrb	r3, [r7, #15]
 800654a:	b298      	uxth	r0, r3
 800654c:	6879      	ldr	r1, [r7, #4]
 800654e:	4613      	mov	r3, r2
 8006550:	00db      	lsls	r3, r3, #3
 8006552:	4413      	add	r3, r2
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	440b      	add	r3, r1
 8006558:	3356      	adds	r3, #86	; 0x56
 800655a:	4602      	mov	r2, r0
 800655c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800655e:	7bfa      	ldrb	r2, [r7, #15]
 8006560:	6879      	ldr	r1, [r7, #4]
 8006562:	4613      	mov	r3, r2
 8006564:	00db      	lsls	r3, r3, #3
 8006566:	4413      	add	r3, r2
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	440b      	add	r3, r1
 800656c:	3340      	adds	r3, #64	; 0x40
 800656e:	2200      	movs	r2, #0
 8006570:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006572:	7bfa      	ldrb	r2, [r7, #15]
 8006574:	6879      	ldr	r1, [r7, #4]
 8006576:	4613      	mov	r3, r2
 8006578:	00db      	lsls	r3, r3, #3
 800657a:	4413      	add	r3, r2
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	440b      	add	r3, r1
 8006580:	3344      	adds	r3, #68	; 0x44
 8006582:	2200      	movs	r2, #0
 8006584:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006586:	7bfa      	ldrb	r2, [r7, #15]
 8006588:	6879      	ldr	r1, [r7, #4]
 800658a:	4613      	mov	r3, r2
 800658c:	00db      	lsls	r3, r3, #3
 800658e:	4413      	add	r3, r2
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	440b      	add	r3, r1
 8006594:	3348      	adds	r3, #72	; 0x48
 8006596:	2200      	movs	r2, #0
 8006598:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800659a:	7bfa      	ldrb	r2, [r7, #15]
 800659c:	6879      	ldr	r1, [r7, #4]
 800659e:	4613      	mov	r3, r2
 80065a0:	00db      	lsls	r3, r3, #3
 80065a2:	4413      	add	r3, r2
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	440b      	add	r3, r1
 80065a8:	334c      	adds	r3, #76	; 0x4c
 80065aa:	2200      	movs	r2, #0
 80065ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80065ae:	7bfb      	ldrb	r3, [r7, #15]
 80065b0:	3301      	adds	r3, #1
 80065b2:	73fb      	strb	r3, [r7, #15]
 80065b4:	7bfa      	ldrb	r2, [r7, #15]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d3af      	bcc.n	800651e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80065be:	2300      	movs	r3, #0
 80065c0:	73fb      	strb	r3, [r7, #15]
 80065c2:	e044      	b.n	800664e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80065c4:	7bfa      	ldrb	r2, [r7, #15]
 80065c6:	6879      	ldr	r1, [r7, #4]
 80065c8:	4613      	mov	r3, r2
 80065ca:	00db      	lsls	r3, r3, #3
 80065cc:	4413      	add	r3, r2
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	440b      	add	r3, r1
 80065d2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80065d6:	2200      	movs	r2, #0
 80065d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80065da:	7bfa      	ldrb	r2, [r7, #15]
 80065dc:	6879      	ldr	r1, [r7, #4]
 80065de:	4613      	mov	r3, r2
 80065e0:	00db      	lsls	r3, r3, #3
 80065e2:	4413      	add	r3, r2
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	440b      	add	r3, r1
 80065e8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80065ec:	7bfa      	ldrb	r2, [r7, #15]
 80065ee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80065f0:	7bfa      	ldrb	r2, [r7, #15]
 80065f2:	6879      	ldr	r1, [r7, #4]
 80065f4:	4613      	mov	r3, r2
 80065f6:	00db      	lsls	r3, r3, #3
 80065f8:	4413      	add	r3, r2
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	440b      	add	r3, r1
 80065fe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006602:	2200      	movs	r2, #0
 8006604:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006606:	7bfa      	ldrb	r2, [r7, #15]
 8006608:	6879      	ldr	r1, [r7, #4]
 800660a:	4613      	mov	r3, r2
 800660c:	00db      	lsls	r3, r3, #3
 800660e:	4413      	add	r3, r2
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	440b      	add	r3, r1
 8006614:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8006618:	2200      	movs	r2, #0
 800661a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800661c:	7bfa      	ldrb	r2, [r7, #15]
 800661e:	6879      	ldr	r1, [r7, #4]
 8006620:	4613      	mov	r3, r2
 8006622:	00db      	lsls	r3, r3, #3
 8006624:	4413      	add	r3, r2
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	440b      	add	r3, r1
 800662a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800662e:	2200      	movs	r2, #0
 8006630:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006632:	7bfa      	ldrb	r2, [r7, #15]
 8006634:	6879      	ldr	r1, [r7, #4]
 8006636:	4613      	mov	r3, r2
 8006638:	00db      	lsls	r3, r3, #3
 800663a:	4413      	add	r3, r2
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	440b      	add	r3, r1
 8006640:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006644:	2200      	movs	r2, #0
 8006646:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006648:	7bfb      	ldrb	r3, [r7, #15]
 800664a:	3301      	adds	r3, #1
 800664c:	73fb      	strb	r3, [r7, #15]
 800664e:	7bfa      	ldrb	r2, [r7, #15]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	429a      	cmp	r2, r3
 8006656:	d3b5      	bcc.n	80065c4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	603b      	str	r3, [r7, #0]
 800665e:	687e      	ldr	r6, [r7, #4]
 8006660:	466d      	mov	r5, sp
 8006662:	f106 0410 	add.w	r4, r6, #16
 8006666:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006668:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800666a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800666c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800666e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006672:	e885 0003 	stmia.w	r5, {r0, r1}
 8006676:	1d33      	adds	r3, r6, #4
 8006678:	cb0e      	ldmia	r3, {r1, r2, r3}
 800667a:	6838      	ldr	r0, [r7, #0]
 800667c:	f006 fa0e 	bl	800ca9c <USB_DevInit>
 8006680:	4603      	mov	r3, r0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d005      	beq.n	8006692 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2202      	movs	r2, #2
 800668a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e014      	b.n	80066bc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2201      	movs	r2, #1
 800669e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d102      	bne.n	80066b0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 f80a 	bl	80066c4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4618      	mov	r0, r3
 80066b6:	f006 fbcc 	bl	800ce52 <USB_DevDisconnect>

  return HAL_OK;
 80066ba:	2300      	movs	r3, #0
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3714      	adds	r7, #20
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080066c4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b085      	sub	sp, #20
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2201      	movs	r2, #1
 80066d6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	699b      	ldr	r3, [r3, #24]
 80066e6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80066f2:	4b05      	ldr	r3, [pc, #20]	; (8006708 <HAL_PCDEx_ActivateLPM+0x44>)
 80066f4:	4313      	orrs	r3, r2
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3714      	adds	r7, #20
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr
 8006708:	10000003 	.word	0x10000003

0800670c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006714:	4b19      	ldr	r3, [pc, #100]	; (800677c <HAL_PWREx_ConfigSupply+0x70>)
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	f003 0304 	and.w	r3, r3, #4
 800671c:	2b04      	cmp	r3, #4
 800671e:	d00a      	beq.n	8006736 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006720:	4b16      	ldr	r3, [pc, #88]	; (800677c <HAL_PWREx_ConfigSupply+0x70>)
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	f003 0307 	and.w	r3, r3, #7
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	429a      	cmp	r2, r3
 800672c:	d001      	beq.n	8006732 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e01f      	b.n	8006772 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006732:	2300      	movs	r3, #0
 8006734:	e01d      	b.n	8006772 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006736:	4b11      	ldr	r3, [pc, #68]	; (800677c <HAL_PWREx_ConfigSupply+0x70>)
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	f023 0207 	bic.w	r2, r3, #7
 800673e:	490f      	ldr	r1, [pc, #60]	; (800677c <HAL_PWREx_ConfigSupply+0x70>)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4313      	orrs	r3, r2
 8006744:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006746:	f7fb fb5f 	bl	8001e08 <HAL_GetTick>
 800674a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800674c:	e009      	b.n	8006762 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800674e:	f7fb fb5b 	bl	8001e08 <HAL_GetTick>
 8006752:	4602      	mov	r2, r0
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	1ad3      	subs	r3, r2, r3
 8006758:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800675c:	d901      	bls.n	8006762 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e007      	b.n	8006772 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006762:	4b06      	ldr	r3, [pc, #24]	; (800677c <HAL_PWREx_ConfigSupply+0x70>)
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800676a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800676e:	d1ee      	bne.n	800674e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3710      	adds	r7, #16
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	58024800 	.word	0x58024800

08006780 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006780:	b480      	push	{r7}
 8006782:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006784:	4b05      	ldr	r3, [pc, #20]	; (800679c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	4a04      	ldr	r2, [pc, #16]	; (800679c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800678a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800678e:	60d3      	str	r3, [r2, #12]
}
 8006790:	bf00      	nop
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	58024800 	.word	0x58024800

080067a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b08c      	sub	sp, #48	; 0x30
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d102      	bne.n	80067b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	f000 bc48 	b.w	8007044 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f003 0301 	and.w	r3, r3, #1
 80067bc:	2b00      	cmp	r3, #0
 80067be:	f000 8088 	beq.w	80068d2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067c2:	4b99      	ldr	r3, [pc, #612]	; (8006a28 <HAL_RCC_OscConfig+0x288>)
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80067cc:	4b96      	ldr	r3, [pc, #600]	; (8006a28 <HAL_RCC_OscConfig+0x288>)
 80067ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80067d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d4:	2b10      	cmp	r3, #16
 80067d6:	d007      	beq.n	80067e8 <HAL_RCC_OscConfig+0x48>
 80067d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067da:	2b18      	cmp	r3, #24
 80067dc:	d111      	bne.n	8006802 <HAL_RCC_OscConfig+0x62>
 80067de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e0:	f003 0303 	and.w	r3, r3, #3
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d10c      	bne.n	8006802 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067e8:	4b8f      	ldr	r3, [pc, #572]	; (8006a28 <HAL_RCC_OscConfig+0x288>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d06d      	beq.n	80068d0 <HAL_RCC_OscConfig+0x130>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d169      	bne.n	80068d0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	f000 bc21 	b.w	8007044 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800680a:	d106      	bne.n	800681a <HAL_RCC_OscConfig+0x7a>
 800680c:	4b86      	ldr	r3, [pc, #536]	; (8006a28 <HAL_RCC_OscConfig+0x288>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a85      	ldr	r2, [pc, #532]	; (8006a28 <HAL_RCC_OscConfig+0x288>)
 8006812:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006816:	6013      	str	r3, [r2, #0]
 8006818:	e02e      	b.n	8006878 <HAL_RCC_OscConfig+0xd8>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d10c      	bne.n	800683c <HAL_RCC_OscConfig+0x9c>
 8006822:	4b81      	ldr	r3, [pc, #516]	; (8006a28 <HAL_RCC_OscConfig+0x288>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a80      	ldr	r2, [pc, #512]	; (8006a28 <HAL_RCC_OscConfig+0x288>)
 8006828:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800682c:	6013      	str	r3, [r2, #0]
 800682e:	4b7e      	ldr	r3, [pc, #504]	; (8006a28 <HAL_RCC_OscConfig+0x288>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a7d      	ldr	r2, [pc, #500]	; (8006a28 <HAL_RCC_OscConfig+0x288>)
 8006834:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006838:	6013      	str	r3, [r2, #0]
 800683a:	e01d      	b.n	8006878 <HAL_RCC_OscConfig+0xd8>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006844:	d10c      	bne.n	8006860 <HAL_RCC_OscConfig+0xc0>
 8006846:	4b78      	ldr	r3, [pc, #480]	; (8006a28 <HAL_RCC_OscConfig+0x288>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a77      	ldr	r2, [pc, #476]	; (8006a28 <HAL_RCC_OscConfig+0x288>)
 800684c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006850:	6013      	str	r3, [r2, #0]
 8006852:	4b75      	ldr	r3, [pc, #468]	; (8006a28 <HAL_RCC_OscConfig+0x288>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a74      	ldr	r2, [pc, #464]	; (8006a28 <HAL_RCC_OscConfig+0x288>)
 8006858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800685c:	6013      	str	r3, [r2, #0]
 800685e:	e00b      	b.n	8006878 <HAL_RCC_OscConfig+0xd8>
 8006860:	4b71      	ldr	r3, [pc, #452]	; (8006a28 <HAL_RCC_OscConfig+0x288>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a70      	ldr	r2, [pc, #448]	; (8006a28 <HAL_RCC_OscConfig+0x288>)
 8006866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800686a:	6013      	str	r3, [r2, #0]
 800686c:	4b6e      	ldr	r3, [pc, #440]	; (8006a28 <HAL_RCC_OscConfig+0x288>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a6d      	ldr	r2, [pc, #436]	; (8006a28 <HAL_RCC_OscConfig+0x288>)
 8006872:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006876:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d013      	beq.n	80068a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006880:	f7fb fac2 	bl	8001e08 <HAL_GetTick>
 8006884:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006886:	e008      	b.n	800689a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006888:	f7fb fabe 	bl	8001e08 <HAL_GetTick>
 800688c:	4602      	mov	r2, r0
 800688e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	2b64      	cmp	r3, #100	; 0x64
 8006894:	d901      	bls.n	800689a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006896:	2303      	movs	r3, #3
 8006898:	e3d4      	b.n	8007044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800689a:	4b63      	ldr	r3, [pc, #396]	; (8006a28 <HAL_RCC_OscConfig+0x288>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d0f0      	beq.n	8006888 <HAL_RCC_OscConfig+0xe8>
 80068a6:	e014      	b.n	80068d2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068a8:	f7fb faae 	bl	8001e08 <HAL_GetTick>
 80068ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80068ae:	e008      	b.n	80068c2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068b0:	f7fb faaa 	bl	8001e08 <HAL_GetTick>
 80068b4:	4602      	mov	r2, r0
 80068b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	2b64      	cmp	r3, #100	; 0x64
 80068bc:	d901      	bls.n	80068c2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80068be:	2303      	movs	r3, #3
 80068c0:	e3c0      	b.n	8007044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80068c2:	4b59      	ldr	r3, [pc, #356]	; (8006a28 <HAL_RCC_OscConfig+0x288>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d1f0      	bne.n	80068b0 <HAL_RCC_OscConfig+0x110>
 80068ce:	e000      	b.n	80068d2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 0302 	and.w	r3, r3, #2
 80068da:	2b00      	cmp	r3, #0
 80068dc:	f000 80ca 	beq.w	8006a74 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068e0:	4b51      	ldr	r3, [pc, #324]	; (8006a28 <HAL_RCC_OscConfig+0x288>)
 80068e2:	691b      	ldr	r3, [r3, #16]
 80068e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068e8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80068ea:	4b4f      	ldr	r3, [pc, #316]	; (8006a28 <HAL_RCC_OscConfig+0x288>)
 80068ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ee:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80068f0:	6a3b      	ldr	r3, [r7, #32]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d007      	beq.n	8006906 <HAL_RCC_OscConfig+0x166>
 80068f6:	6a3b      	ldr	r3, [r7, #32]
 80068f8:	2b18      	cmp	r3, #24
 80068fa:	d156      	bne.n	80069aa <HAL_RCC_OscConfig+0x20a>
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	f003 0303 	and.w	r3, r3, #3
 8006902:	2b00      	cmp	r3, #0
 8006904:	d151      	bne.n	80069aa <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006906:	4b48      	ldr	r3, [pc, #288]	; (8006a28 <HAL_RCC_OscConfig+0x288>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 0304 	and.w	r3, r3, #4
 800690e:	2b00      	cmp	r3, #0
 8006910:	d005      	beq.n	800691e <HAL_RCC_OscConfig+0x17e>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d101      	bne.n	800691e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	e392      	b.n	8007044 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800691e:	4b42      	ldr	r3, [pc, #264]	; (8006a28 <HAL_RCC_OscConfig+0x288>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f023 0219 	bic.w	r2, r3, #25
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	493f      	ldr	r1, [pc, #252]	; (8006a28 <HAL_RCC_OscConfig+0x288>)
 800692c:	4313      	orrs	r3, r2
 800692e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006930:	f7fb fa6a 	bl	8001e08 <HAL_GetTick>
 8006934:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006936:	e008      	b.n	800694a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006938:	f7fb fa66 	bl	8001e08 <HAL_GetTick>
 800693c:	4602      	mov	r2, r0
 800693e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	2b02      	cmp	r3, #2
 8006944:	d901      	bls.n	800694a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006946:	2303      	movs	r3, #3
 8006948:	e37c      	b.n	8007044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800694a:	4b37      	ldr	r3, [pc, #220]	; (8006a28 <HAL_RCC_OscConfig+0x288>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f003 0304 	and.w	r3, r3, #4
 8006952:	2b00      	cmp	r3, #0
 8006954:	d0f0      	beq.n	8006938 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006956:	f7fb fa87 	bl	8001e68 <HAL_GetREVID>
 800695a:	4603      	mov	r3, r0
 800695c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006960:	4293      	cmp	r3, r2
 8006962:	d817      	bhi.n	8006994 <HAL_RCC_OscConfig+0x1f4>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	2b40      	cmp	r3, #64	; 0x40
 800696a:	d108      	bne.n	800697e <HAL_RCC_OscConfig+0x1de>
 800696c:	4b2e      	ldr	r3, [pc, #184]	; (8006a28 <HAL_RCC_OscConfig+0x288>)
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006974:	4a2c      	ldr	r2, [pc, #176]	; (8006a28 <HAL_RCC_OscConfig+0x288>)
 8006976:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800697a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800697c:	e07a      	b.n	8006a74 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800697e:	4b2a      	ldr	r3, [pc, #168]	; (8006a28 <HAL_RCC_OscConfig+0x288>)
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	031b      	lsls	r3, r3, #12
 800698c:	4926      	ldr	r1, [pc, #152]	; (8006a28 <HAL_RCC_OscConfig+0x288>)
 800698e:	4313      	orrs	r3, r2
 8006990:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006992:	e06f      	b.n	8006a74 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006994:	4b24      	ldr	r3, [pc, #144]	; (8006a28 <HAL_RCC_OscConfig+0x288>)
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	061b      	lsls	r3, r3, #24
 80069a2:	4921      	ldr	r1, [pc, #132]	; (8006a28 <HAL_RCC_OscConfig+0x288>)
 80069a4:	4313      	orrs	r3, r2
 80069a6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80069a8:	e064      	b.n	8006a74 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d047      	beq.n	8006a42 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80069b2:	4b1d      	ldr	r3, [pc, #116]	; (8006a28 <HAL_RCC_OscConfig+0x288>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f023 0219 	bic.w	r2, r3, #25
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	491a      	ldr	r1, [pc, #104]	; (8006a28 <HAL_RCC_OscConfig+0x288>)
 80069c0:	4313      	orrs	r3, r2
 80069c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069c4:	f7fb fa20 	bl	8001e08 <HAL_GetTick>
 80069c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80069ca:	e008      	b.n	80069de <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069cc:	f7fb fa1c 	bl	8001e08 <HAL_GetTick>
 80069d0:	4602      	mov	r2, r0
 80069d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	2b02      	cmp	r3, #2
 80069d8:	d901      	bls.n	80069de <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80069da:	2303      	movs	r3, #3
 80069dc:	e332      	b.n	8007044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80069de:	4b12      	ldr	r3, [pc, #72]	; (8006a28 <HAL_RCC_OscConfig+0x288>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 0304 	and.w	r3, r3, #4
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d0f0      	beq.n	80069cc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069ea:	f7fb fa3d 	bl	8001e68 <HAL_GetREVID>
 80069ee:	4603      	mov	r3, r0
 80069f0:	f241 0203 	movw	r2, #4099	; 0x1003
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d819      	bhi.n	8006a2c <HAL_RCC_OscConfig+0x28c>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	2b40      	cmp	r3, #64	; 0x40
 80069fe:	d108      	bne.n	8006a12 <HAL_RCC_OscConfig+0x272>
 8006a00:	4b09      	ldr	r3, [pc, #36]	; (8006a28 <HAL_RCC_OscConfig+0x288>)
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006a08:	4a07      	ldr	r2, [pc, #28]	; (8006a28 <HAL_RCC_OscConfig+0x288>)
 8006a0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a0e:	6053      	str	r3, [r2, #4]
 8006a10:	e030      	b.n	8006a74 <HAL_RCC_OscConfig+0x2d4>
 8006a12:	4b05      	ldr	r3, [pc, #20]	; (8006a28 <HAL_RCC_OscConfig+0x288>)
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	031b      	lsls	r3, r3, #12
 8006a20:	4901      	ldr	r1, [pc, #4]	; (8006a28 <HAL_RCC_OscConfig+0x288>)
 8006a22:	4313      	orrs	r3, r2
 8006a24:	604b      	str	r3, [r1, #4]
 8006a26:	e025      	b.n	8006a74 <HAL_RCC_OscConfig+0x2d4>
 8006a28:	58024400 	.word	0x58024400
 8006a2c:	4b9a      	ldr	r3, [pc, #616]	; (8006c98 <HAL_RCC_OscConfig+0x4f8>)
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	691b      	ldr	r3, [r3, #16]
 8006a38:	061b      	lsls	r3, r3, #24
 8006a3a:	4997      	ldr	r1, [pc, #604]	; (8006c98 <HAL_RCC_OscConfig+0x4f8>)
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	604b      	str	r3, [r1, #4]
 8006a40:	e018      	b.n	8006a74 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a42:	4b95      	ldr	r3, [pc, #596]	; (8006c98 <HAL_RCC_OscConfig+0x4f8>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a94      	ldr	r2, [pc, #592]	; (8006c98 <HAL_RCC_OscConfig+0x4f8>)
 8006a48:	f023 0301 	bic.w	r3, r3, #1
 8006a4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a4e:	f7fb f9db 	bl	8001e08 <HAL_GetTick>
 8006a52:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006a54:	e008      	b.n	8006a68 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a56:	f7fb f9d7 	bl	8001e08 <HAL_GetTick>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	d901      	bls.n	8006a68 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006a64:	2303      	movs	r3, #3
 8006a66:	e2ed      	b.n	8007044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006a68:	4b8b      	ldr	r3, [pc, #556]	; (8006c98 <HAL_RCC_OscConfig+0x4f8>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 0304 	and.w	r3, r3, #4
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d1f0      	bne.n	8006a56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 0310 	and.w	r3, r3, #16
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f000 80a9 	beq.w	8006bd4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a82:	4b85      	ldr	r3, [pc, #532]	; (8006c98 <HAL_RCC_OscConfig+0x4f8>)
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a8a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006a8c:	4b82      	ldr	r3, [pc, #520]	; (8006c98 <HAL_RCC_OscConfig+0x4f8>)
 8006a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a90:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	2b08      	cmp	r3, #8
 8006a96:	d007      	beq.n	8006aa8 <HAL_RCC_OscConfig+0x308>
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	2b18      	cmp	r3, #24
 8006a9c:	d13a      	bne.n	8006b14 <HAL_RCC_OscConfig+0x374>
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	f003 0303 	and.w	r3, r3, #3
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d135      	bne.n	8006b14 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006aa8:	4b7b      	ldr	r3, [pc, #492]	; (8006c98 <HAL_RCC_OscConfig+0x4f8>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d005      	beq.n	8006ac0 <HAL_RCC_OscConfig+0x320>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	69db      	ldr	r3, [r3, #28]
 8006ab8:	2b80      	cmp	r3, #128	; 0x80
 8006aba:	d001      	beq.n	8006ac0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	e2c1      	b.n	8007044 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006ac0:	f7fb f9d2 	bl	8001e68 <HAL_GetREVID>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	f241 0203 	movw	r2, #4099	; 0x1003
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d817      	bhi.n	8006afe <HAL_RCC_OscConfig+0x35e>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6a1b      	ldr	r3, [r3, #32]
 8006ad2:	2b20      	cmp	r3, #32
 8006ad4:	d108      	bne.n	8006ae8 <HAL_RCC_OscConfig+0x348>
 8006ad6:	4b70      	ldr	r3, [pc, #448]	; (8006c98 <HAL_RCC_OscConfig+0x4f8>)
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006ade:	4a6e      	ldr	r2, [pc, #440]	; (8006c98 <HAL_RCC_OscConfig+0x4f8>)
 8006ae0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ae4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006ae6:	e075      	b.n	8006bd4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006ae8:	4b6b      	ldr	r3, [pc, #428]	; (8006c98 <HAL_RCC_OscConfig+0x4f8>)
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6a1b      	ldr	r3, [r3, #32]
 8006af4:	069b      	lsls	r3, r3, #26
 8006af6:	4968      	ldr	r1, [pc, #416]	; (8006c98 <HAL_RCC_OscConfig+0x4f8>)
 8006af8:	4313      	orrs	r3, r2
 8006afa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006afc:	e06a      	b.n	8006bd4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006afe:	4b66      	ldr	r3, [pc, #408]	; (8006c98 <HAL_RCC_OscConfig+0x4f8>)
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6a1b      	ldr	r3, [r3, #32]
 8006b0a:	061b      	lsls	r3, r3, #24
 8006b0c:	4962      	ldr	r1, [pc, #392]	; (8006c98 <HAL_RCC_OscConfig+0x4f8>)
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006b12:	e05f      	b.n	8006bd4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	69db      	ldr	r3, [r3, #28]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d042      	beq.n	8006ba2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006b1c:	4b5e      	ldr	r3, [pc, #376]	; (8006c98 <HAL_RCC_OscConfig+0x4f8>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a5d      	ldr	r2, [pc, #372]	; (8006c98 <HAL_RCC_OscConfig+0x4f8>)
 8006b22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b28:	f7fb f96e 	bl	8001e08 <HAL_GetTick>
 8006b2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006b2e:	e008      	b.n	8006b42 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006b30:	f7fb f96a 	bl	8001e08 <HAL_GetTick>
 8006b34:	4602      	mov	r2, r0
 8006b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b38:	1ad3      	subs	r3, r2, r3
 8006b3a:	2b02      	cmp	r3, #2
 8006b3c:	d901      	bls.n	8006b42 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006b3e:	2303      	movs	r3, #3
 8006b40:	e280      	b.n	8007044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006b42:	4b55      	ldr	r3, [pc, #340]	; (8006c98 <HAL_RCC_OscConfig+0x4f8>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d0f0      	beq.n	8006b30 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006b4e:	f7fb f98b 	bl	8001e68 <HAL_GetREVID>
 8006b52:	4603      	mov	r3, r0
 8006b54:	f241 0203 	movw	r2, #4099	; 0x1003
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d817      	bhi.n	8006b8c <HAL_RCC_OscConfig+0x3ec>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6a1b      	ldr	r3, [r3, #32]
 8006b60:	2b20      	cmp	r3, #32
 8006b62:	d108      	bne.n	8006b76 <HAL_RCC_OscConfig+0x3d6>
 8006b64:	4b4c      	ldr	r3, [pc, #304]	; (8006c98 <HAL_RCC_OscConfig+0x4f8>)
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006b6c:	4a4a      	ldr	r2, [pc, #296]	; (8006c98 <HAL_RCC_OscConfig+0x4f8>)
 8006b6e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b72:	6053      	str	r3, [r2, #4]
 8006b74:	e02e      	b.n	8006bd4 <HAL_RCC_OscConfig+0x434>
 8006b76:	4b48      	ldr	r3, [pc, #288]	; (8006c98 <HAL_RCC_OscConfig+0x4f8>)
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a1b      	ldr	r3, [r3, #32]
 8006b82:	069b      	lsls	r3, r3, #26
 8006b84:	4944      	ldr	r1, [pc, #272]	; (8006c98 <HAL_RCC_OscConfig+0x4f8>)
 8006b86:	4313      	orrs	r3, r2
 8006b88:	604b      	str	r3, [r1, #4]
 8006b8a:	e023      	b.n	8006bd4 <HAL_RCC_OscConfig+0x434>
 8006b8c:	4b42      	ldr	r3, [pc, #264]	; (8006c98 <HAL_RCC_OscConfig+0x4f8>)
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6a1b      	ldr	r3, [r3, #32]
 8006b98:	061b      	lsls	r3, r3, #24
 8006b9a:	493f      	ldr	r1, [pc, #252]	; (8006c98 <HAL_RCC_OscConfig+0x4f8>)
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	60cb      	str	r3, [r1, #12]
 8006ba0:	e018      	b.n	8006bd4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006ba2:	4b3d      	ldr	r3, [pc, #244]	; (8006c98 <HAL_RCC_OscConfig+0x4f8>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a3c      	ldr	r2, [pc, #240]	; (8006c98 <HAL_RCC_OscConfig+0x4f8>)
 8006ba8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bae:	f7fb f92b 	bl	8001e08 <HAL_GetTick>
 8006bb2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006bb4:	e008      	b.n	8006bc8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006bb6:	f7fb f927 	bl	8001e08 <HAL_GetTick>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbe:	1ad3      	subs	r3, r2, r3
 8006bc0:	2b02      	cmp	r3, #2
 8006bc2:	d901      	bls.n	8006bc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006bc4:	2303      	movs	r3, #3
 8006bc6:	e23d      	b.n	8007044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006bc8:	4b33      	ldr	r3, [pc, #204]	; (8006c98 <HAL_RCC_OscConfig+0x4f8>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d1f0      	bne.n	8006bb6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 0308 	and.w	r3, r3, #8
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d036      	beq.n	8006c4e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	695b      	ldr	r3, [r3, #20]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d019      	beq.n	8006c1c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006be8:	4b2b      	ldr	r3, [pc, #172]	; (8006c98 <HAL_RCC_OscConfig+0x4f8>)
 8006bea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bec:	4a2a      	ldr	r2, [pc, #168]	; (8006c98 <HAL_RCC_OscConfig+0x4f8>)
 8006bee:	f043 0301 	orr.w	r3, r3, #1
 8006bf2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bf4:	f7fb f908 	bl	8001e08 <HAL_GetTick>
 8006bf8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006bfa:	e008      	b.n	8006c0e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bfc:	f7fb f904 	bl	8001e08 <HAL_GetTick>
 8006c00:	4602      	mov	r2, r0
 8006c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c04:	1ad3      	subs	r3, r2, r3
 8006c06:	2b02      	cmp	r3, #2
 8006c08:	d901      	bls.n	8006c0e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	e21a      	b.n	8007044 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006c0e:	4b22      	ldr	r3, [pc, #136]	; (8006c98 <HAL_RCC_OscConfig+0x4f8>)
 8006c10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c12:	f003 0302 	and.w	r3, r3, #2
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d0f0      	beq.n	8006bfc <HAL_RCC_OscConfig+0x45c>
 8006c1a:	e018      	b.n	8006c4e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c1c:	4b1e      	ldr	r3, [pc, #120]	; (8006c98 <HAL_RCC_OscConfig+0x4f8>)
 8006c1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c20:	4a1d      	ldr	r2, [pc, #116]	; (8006c98 <HAL_RCC_OscConfig+0x4f8>)
 8006c22:	f023 0301 	bic.w	r3, r3, #1
 8006c26:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c28:	f7fb f8ee 	bl	8001e08 <HAL_GetTick>
 8006c2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006c2e:	e008      	b.n	8006c42 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c30:	f7fb f8ea 	bl	8001e08 <HAL_GetTick>
 8006c34:	4602      	mov	r2, r0
 8006c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c38:	1ad3      	subs	r3, r2, r3
 8006c3a:	2b02      	cmp	r3, #2
 8006c3c:	d901      	bls.n	8006c42 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e200      	b.n	8007044 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006c42:	4b15      	ldr	r3, [pc, #84]	; (8006c98 <HAL_RCC_OscConfig+0x4f8>)
 8006c44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c46:	f003 0302 	and.w	r3, r3, #2
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d1f0      	bne.n	8006c30 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f003 0320 	and.w	r3, r3, #32
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d039      	beq.n	8006cce <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d01c      	beq.n	8006c9c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006c62:	4b0d      	ldr	r3, [pc, #52]	; (8006c98 <HAL_RCC_OscConfig+0x4f8>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a0c      	ldr	r2, [pc, #48]	; (8006c98 <HAL_RCC_OscConfig+0x4f8>)
 8006c68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006c6c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006c6e:	f7fb f8cb 	bl	8001e08 <HAL_GetTick>
 8006c72:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006c74:	e008      	b.n	8006c88 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006c76:	f7fb f8c7 	bl	8001e08 <HAL_GetTick>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7e:	1ad3      	subs	r3, r2, r3
 8006c80:	2b02      	cmp	r3, #2
 8006c82:	d901      	bls.n	8006c88 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006c84:	2303      	movs	r3, #3
 8006c86:	e1dd      	b.n	8007044 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006c88:	4b03      	ldr	r3, [pc, #12]	; (8006c98 <HAL_RCC_OscConfig+0x4f8>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d0f0      	beq.n	8006c76 <HAL_RCC_OscConfig+0x4d6>
 8006c94:	e01b      	b.n	8006cce <HAL_RCC_OscConfig+0x52e>
 8006c96:	bf00      	nop
 8006c98:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006c9c:	4b9b      	ldr	r3, [pc, #620]	; (8006f0c <HAL_RCC_OscConfig+0x76c>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a9a      	ldr	r2, [pc, #616]	; (8006f0c <HAL_RCC_OscConfig+0x76c>)
 8006ca2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ca6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006ca8:	f7fb f8ae 	bl	8001e08 <HAL_GetTick>
 8006cac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006cae:	e008      	b.n	8006cc2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006cb0:	f7fb f8aa 	bl	8001e08 <HAL_GetTick>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	2b02      	cmp	r3, #2
 8006cbc:	d901      	bls.n	8006cc2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	e1c0      	b.n	8007044 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006cc2:	4b92      	ldr	r3, [pc, #584]	; (8006f0c <HAL_RCC_OscConfig+0x76c>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d1f0      	bne.n	8006cb0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 0304 	and.w	r3, r3, #4
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	f000 8081 	beq.w	8006dde <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006cdc:	4b8c      	ldr	r3, [pc, #560]	; (8006f10 <HAL_RCC_OscConfig+0x770>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a8b      	ldr	r2, [pc, #556]	; (8006f10 <HAL_RCC_OscConfig+0x770>)
 8006ce2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ce6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006ce8:	f7fb f88e 	bl	8001e08 <HAL_GetTick>
 8006cec:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006cee:	e008      	b.n	8006d02 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cf0:	f7fb f88a 	bl	8001e08 <HAL_GetTick>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	2b64      	cmp	r3, #100	; 0x64
 8006cfc:	d901      	bls.n	8006d02 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	e1a0      	b.n	8007044 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d02:	4b83      	ldr	r3, [pc, #524]	; (8006f10 <HAL_RCC_OscConfig+0x770>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d0f0      	beq.n	8006cf0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d106      	bne.n	8006d24 <HAL_RCC_OscConfig+0x584>
 8006d16:	4b7d      	ldr	r3, [pc, #500]	; (8006f0c <HAL_RCC_OscConfig+0x76c>)
 8006d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d1a:	4a7c      	ldr	r2, [pc, #496]	; (8006f0c <HAL_RCC_OscConfig+0x76c>)
 8006d1c:	f043 0301 	orr.w	r3, r3, #1
 8006d20:	6713      	str	r3, [r2, #112]	; 0x70
 8006d22:	e02d      	b.n	8006d80 <HAL_RCC_OscConfig+0x5e0>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d10c      	bne.n	8006d46 <HAL_RCC_OscConfig+0x5a6>
 8006d2c:	4b77      	ldr	r3, [pc, #476]	; (8006f0c <HAL_RCC_OscConfig+0x76c>)
 8006d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d30:	4a76      	ldr	r2, [pc, #472]	; (8006f0c <HAL_RCC_OscConfig+0x76c>)
 8006d32:	f023 0301 	bic.w	r3, r3, #1
 8006d36:	6713      	str	r3, [r2, #112]	; 0x70
 8006d38:	4b74      	ldr	r3, [pc, #464]	; (8006f0c <HAL_RCC_OscConfig+0x76c>)
 8006d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d3c:	4a73      	ldr	r2, [pc, #460]	; (8006f0c <HAL_RCC_OscConfig+0x76c>)
 8006d3e:	f023 0304 	bic.w	r3, r3, #4
 8006d42:	6713      	str	r3, [r2, #112]	; 0x70
 8006d44:	e01c      	b.n	8006d80 <HAL_RCC_OscConfig+0x5e0>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	2b05      	cmp	r3, #5
 8006d4c:	d10c      	bne.n	8006d68 <HAL_RCC_OscConfig+0x5c8>
 8006d4e:	4b6f      	ldr	r3, [pc, #444]	; (8006f0c <HAL_RCC_OscConfig+0x76c>)
 8006d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d52:	4a6e      	ldr	r2, [pc, #440]	; (8006f0c <HAL_RCC_OscConfig+0x76c>)
 8006d54:	f043 0304 	orr.w	r3, r3, #4
 8006d58:	6713      	str	r3, [r2, #112]	; 0x70
 8006d5a:	4b6c      	ldr	r3, [pc, #432]	; (8006f0c <HAL_RCC_OscConfig+0x76c>)
 8006d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d5e:	4a6b      	ldr	r2, [pc, #428]	; (8006f0c <HAL_RCC_OscConfig+0x76c>)
 8006d60:	f043 0301 	orr.w	r3, r3, #1
 8006d64:	6713      	str	r3, [r2, #112]	; 0x70
 8006d66:	e00b      	b.n	8006d80 <HAL_RCC_OscConfig+0x5e0>
 8006d68:	4b68      	ldr	r3, [pc, #416]	; (8006f0c <HAL_RCC_OscConfig+0x76c>)
 8006d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d6c:	4a67      	ldr	r2, [pc, #412]	; (8006f0c <HAL_RCC_OscConfig+0x76c>)
 8006d6e:	f023 0301 	bic.w	r3, r3, #1
 8006d72:	6713      	str	r3, [r2, #112]	; 0x70
 8006d74:	4b65      	ldr	r3, [pc, #404]	; (8006f0c <HAL_RCC_OscConfig+0x76c>)
 8006d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d78:	4a64      	ldr	r2, [pc, #400]	; (8006f0c <HAL_RCC_OscConfig+0x76c>)
 8006d7a:	f023 0304 	bic.w	r3, r3, #4
 8006d7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d015      	beq.n	8006db4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d88:	f7fb f83e 	bl	8001e08 <HAL_GetTick>
 8006d8c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d8e:	e00a      	b.n	8006da6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d90:	f7fb f83a 	bl	8001e08 <HAL_GetTick>
 8006d94:	4602      	mov	r2, r0
 8006d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d98:	1ad3      	subs	r3, r2, r3
 8006d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d901      	bls.n	8006da6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006da2:	2303      	movs	r3, #3
 8006da4:	e14e      	b.n	8007044 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006da6:	4b59      	ldr	r3, [pc, #356]	; (8006f0c <HAL_RCC_OscConfig+0x76c>)
 8006da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006daa:	f003 0302 	and.w	r3, r3, #2
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d0ee      	beq.n	8006d90 <HAL_RCC_OscConfig+0x5f0>
 8006db2:	e014      	b.n	8006dde <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006db4:	f7fb f828 	bl	8001e08 <HAL_GetTick>
 8006db8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006dba:	e00a      	b.n	8006dd2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dbc:	f7fb f824 	bl	8001e08 <HAL_GetTick>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc4:	1ad3      	subs	r3, r2, r3
 8006dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d901      	bls.n	8006dd2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006dce:	2303      	movs	r3, #3
 8006dd0:	e138      	b.n	8007044 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006dd2:	4b4e      	ldr	r3, [pc, #312]	; (8006f0c <HAL_RCC_OscConfig+0x76c>)
 8006dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dd6:	f003 0302 	and.w	r3, r3, #2
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d1ee      	bne.n	8006dbc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	f000 812d 	beq.w	8007042 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006de8:	4b48      	ldr	r3, [pc, #288]	; (8006f0c <HAL_RCC_OscConfig+0x76c>)
 8006dea:	691b      	ldr	r3, [r3, #16]
 8006dec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006df0:	2b18      	cmp	r3, #24
 8006df2:	f000 80bd 	beq.w	8006f70 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfa:	2b02      	cmp	r3, #2
 8006dfc:	f040 809e 	bne.w	8006f3c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e00:	4b42      	ldr	r3, [pc, #264]	; (8006f0c <HAL_RCC_OscConfig+0x76c>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a41      	ldr	r2, [pc, #260]	; (8006f0c <HAL_RCC_OscConfig+0x76c>)
 8006e06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e0c:	f7fa fffc 	bl	8001e08 <HAL_GetTick>
 8006e10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e12:	e008      	b.n	8006e26 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e14:	f7fa fff8 	bl	8001e08 <HAL_GetTick>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d901      	bls.n	8006e26 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e10e      	b.n	8007044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e26:	4b39      	ldr	r3, [pc, #228]	; (8006f0c <HAL_RCC_OscConfig+0x76c>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d1f0      	bne.n	8006e14 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e32:	4b36      	ldr	r3, [pc, #216]	; (8006f0c <HAL_RCC_OscConfig+0x76c>)
 8006e34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e36:	4b37      	ldr	r3, [pc, #220]	; (8006f14 <HAL_RCC_OscConfig+0x774>)
 8006e38:	4013      	ands	r3, r2
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006e42:	0112      	lsls	r2, r2, #4
 8006e44:	430a      	orrs	r2, r1
 8006e46:	4931      	ldr	r1, [pc, #196]	; (8006f0c <HAL_RCC_OscConfig+0x76c>)
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	628b      	str	r3, [r1, #40]	; 0x28
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e50:	3b01      	subs	r3, #1
 8006e52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e5a:	3b01      	subs	r3, #1
 8006e5c:	025b      	lsls	r3, r3, #9
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	431a      	orrs	r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e66:	3b01      	subs	r3, #1
 8006e68:	041b      	lsls	r3, r3, #16
 8006e6a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006e6e:	431a      	orrs	r2, r3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e74:	3b01      	subs	r3, #1
 8006e76:	061b      	lsls	r3, r3, #24
 8006e78:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006e7c:	4923      	ldr	r1, [pc, #140]	; (8006f0c <HAL_RCC_OscConfig+0x76c>)
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006e82:	4b22      	ldr	r3, [pc, #136]	; (8006f0c <HAL_RCC_OscConfig+0x76c>)
 8006e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e86:	4a21      	ldr	r2, [pc, #132]	; (8006f0c <HAL_RCC_OscConfig+0x76c>)
 8006e88:	f023 0301 	bic.w	r3, r3, #1
 8006e8c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006e8e:	4b1f      	ldr	r3, [pc, #124]	; (8006f0c <HAL_RCC_OscConfig+0x76c>)
 8006e90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e92:	4b21      	ldr	r3, [pc, #132]	; (8006f18 <HAL_RCC_OscConfig+0x778>)
 8006e94:	4013      	ands	r3, r2
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006e9a:	00d2      	lsls	r2, r2, #3
 8006e9c:	491b      	ldr	r1, [pc, #108]	; (8006f0c <HAL_RCC_OscConfig+0x76c>)
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006ea2:	4b1a      	ldr	r3, [pc, #104]	; (8006f0c <HAL_RCC_OscConfig+0x76c>)
 8006ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea6:	f023 020c 	bic.w	r2, r3, #12
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eae:	4917      	ldr	r1, [pc, #92]	; (8006f0c <HAL_RCC_OscConfig+0x76c>)
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006eb4:	4b15      	ldr	r3, [pc, #84]	; (8006f0c <HAL_RCC_OscConfig+0x76c>)
 8006eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb8:	f023 0202 	bic.w	r2, r3, #2
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ec0:	4912      	ldr	r1, [pc, #72]	; (8006f0c <HAL_RCC_OscConfig+0x76c>)
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006ec6:	4b11      	ldr	r3, [pc, #68]	; (8006f0c <HAL_RCC_OscConfig+0x76c>)
 8006ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eca:	4a10      	ldr	r2, [pc, #64]	; (8006f0c <HAL_RCC_OscConfig+0x76c>)
 8006ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ed0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ed2:	4b0e      	ldr	r3, [pc, #56]	; (8006f0c <HAL_RCC_OscConfig+0x76c>)
 8006ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed6:	4a0d      	ldr	r2, [pc, #52]	; (8006f0c <HAL_RCC_OscConfig+0x76c>)
 8006ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006edc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006ede:	4b0b      	ldr	r3, [pc, #44]	; (8006f0c <HAL_RCC_OscConfig+0x76c>)
 8006ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee2:	4a0a      	ldr	r2, [pc, #40]	; (8006f0c <HAL_RCC_OscConfig+0x76c>)
 8006ee4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ee8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006eea:	4b08      	ldr	r3, [pc, #32]	; (8006f0c <HAL_RCC_OscConfig+0x76c>)
 8006eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eee:	4a07      	ldr	r2, [pc, #28]	; (8006f0c <HAL_RCC_OscConfig+0x76c>)
 8006ef0:	f043 0301 	orr.w	r3, r3, #1
 8006ef4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ef6:	4b05      	ldr	r3, [pc, #20]	; (8006f0c <HAL_RCC_OscConfig+0x76c>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a04      	ldr	r2, [pc, #16]	; (8006f0c <HAL_RCC_OscConfig+0x76c>)
 8006efc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f02:	f7fa ff81 	bl	8001e08 <HAL_GetTick>
 8006f06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006f08:	e011      	b.n	8006f2e <HAL_RCC_OscConfig+0x78e>
 8006f0a:	bf00      	nop
 8006f0c:	58024400 	.word	0x58024400
 8006f10:	58024800 	.word	0x58024800
 8006f14:	fffffc0c 	.word	0xfffffc0c
 8006f18:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f1c:	f7fa ff74 	bl	8001e08 <HAL_GetTick>
 8006f20:	4602      	mov	r2, r0
 8006f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	2b02      	cmp	r3, #2
 8006f28:	d901      	bls.n	8006f2e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006f2a:	2303      	movs	r3, #3
 8006f2c:	e08a      	b.n	8007044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006f2e:	4b47      	ldr	r3, [pc, #284]	; (800704c <HAL_RCC_OscConfig+0x8ac>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d0f0      	beq.n	8006f1c <HAL_RCC_OscConfig+0x77c>
 8006f3a:	e082      	b.n	8007042 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f3c:	4b43      	ldr	r3, [pc, #268]	; (800704c <HAL_RCC_OscConfig+0x8ac>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a42      	ldr	r2, [pc, #264]	; (800704c <HAL_RCC_OscConfig+0x8ac>)
 8006f42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f48:	f7fa ff5e 	bl	8001e08 <HAL_GetTick>
 8006f4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f4e:	e008      	b.n	8006f62 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f50:	f7fa ff5a 	bl	8001e08 <HAL_GetTick>
 8006f54:	4602      	mov	r2, r0
 8006f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f58:	1ad3      	subs	r3, r2, r3
 8006f5a:	2b02      	cmp	r3, #2
 8006f5c:	d901      	bls.n	8006f62 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006f5e:	2303      	movs	r3, #3
 8006f60:	e070      	b.n	8007044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f62:	4b3a      	ldr	r3, [pc, #232]	; (800704c <HAL_RCC_OscConfig+0x8ac>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d1f0      	bne.n	8006f50 <HAL_RCC_OscConfig+0x7b0>
 8006f6e:	e068      	b.n	8007042 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006f70:	4b36      	ldr	r3, [pc, #216]	; (800704c <HAL_RCC_OscConfig+0x8ac>)
 8006f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f74:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006f76:	4b35      	ldr	r3, [pc, #212]	; (800704c <HAL_RCC_OscConfig+0x8ac>)
 8006f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f7a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d031      	beq.n	8006fe8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	f003 0203 	and.w	r2, r3, #3
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d12a      	bne.n	8006fe8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	091b      	lsrs	r3, r3, #4
 8006f96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d122      	bne.n	8006fe8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fac:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d11a      	bne.n	8006fe8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	0a5b      	lsrs	r3, r3, #9
 8006fb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fbe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d111      	bne.n	8006fe8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	0c1b      	lsrs	r3, r3, #16
 8006fc8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d108      	bne.n	8006fe8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	0e1b      	lsrs	r3, r3, #24
 8006fda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fe2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d001      	beq.n	8006fec <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e02b      	b.n	8007044 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006fec:	4b17      	ldr	r3, [pc, #92]	; (800704c <HAL_RCC_OscConfig+0x8ac>)
 8006fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ff0:	08db      	lsrs	r3, r3, #3
 8006ff2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ff6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ffc:	693a      	ldr	r2, [r7, #16]
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d01f      	beq.n	8007042 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007002:	4b12      	ldr	r3, [pc, #72]	; (800704c <HAL_RCC_OscConfig+0x8ac>)
 8007004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007006:	4a11      	ldr	r2, [pc, #68]	; (800704c <HAL_RCC_OscConfig+0x8ac>)
 8007008:	f023 0301 	bic.w	r3, r3, #1
 800700c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800700e:	f7fa fefb 	bl	8001e08 <HAL_GetTick>
 8007012:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007014:	bf00      	nop
 8007016:	f7fa fef7 	bl	8001e08 <HAL_GetTick>
 800701a:	4602      	mov	r2, r0
 800701c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701e:	4293      	cmp	r3, r2
 8007020:	d0f9      	beq.n	8007016 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007022:	4b0a      	ldr	r3, [pc, #40]	; (800704c <HAL_RCC_OscConfig+0x8ac>)
 8007024:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007026:	4b0a      	ldr	r3, [pc, #40]	; (8007050 <HAL_RCC_OscConfig+0x8b0>)
 8007028:	4013      	ands	r3, r2
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800702e:	00d2      	lsls	r2, r2, #3
 8007030:	4906      	ldr	r1, [pc, #24]	; (800704c <HAL_RCC_OscConfig+0x8ac>)
 8007032:	4313      	orrs	r3, r2
 8007034:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007036:	4b05      	ldr	r3, [pc, #20]	; (800704c <HAL_RCC_OscConfig+0x8ac>)
 8007038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800703a:	4a04      	ldr	r2, [pc, #16]	; (800704c <HAL_RCC_OscConfig+0x8ac>)
 800703c:	f043 0301 	orr.w	r3, r3, #1
 8007040:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007042:	2300      	movs	r3, #0
}
 8007044:	4618      	mov	r0, r3
 8007046:	3730      	adds	r7, #48	; 0x30
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}
 800704c:	58024400 	.word	0x58024400
 8007050:	ffff0007 	.word	0xffff0007

08007054 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b086      	sub	sp, #24
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d101      	bne.n	8007068 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	e19c      	b.n	80073a2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007068:	4b8a      	ldr	r3, [pc, #552]	; (8007294 <HAL_RCC_ClockConfig+0x240>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 030f 	and.w	r3, r3, #15
 8007070:	683a      	ldr	r2, [r7, #0]
 8007072:	429a      	cmp	r2, r3
 8007074:	d910      	bls.n	8007098 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007076:	4b87      	ldr	r3, [pc, #540]	; (8007294 <HAL_RCC_ClockConfig+0x240>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f023 020f 	bic.w	r2, r3, #15
 800707e:	4985      	ldr	r1, [pc, #532]	; (8007294 <HAL_RCC_ClockConfig+0x240>)
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	4313      	orrs	r3, r2
 8007084:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007086:	4b83      	ldr	r3, [pc, #524]	; (8007294 <HAL_RCC_ClockConfig+0x240>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f003 030f 	and.w	r3, r3, #15
 800708e:	683a      	ldr	r2, [r7, #0]
 8007090:	429a      	cmp	r2, r3
 8007092:	d001      	beq.n	8007098 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	e184      	b.n	80073a2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f003 0304 	and.w	r3, r3, #4
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d010      	beq.n	80070c6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	691a      	ldr	r2, [r3, #16]
 80070a8:	4b7b      	ldr	r3, [pc, #492]	; (8007298 <HAL_RCC_ClockConfig+0x244>)
 80070aa:	699b      	ldr	r3, [r3, #24]
 80070ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d908      	bls.n	80070c6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80070b4:	4b78      	ldr	r3, [pc, #480]	; (8007298 <HAL_RCC_ClockConfig+0x244>)
 80070b6:	699b      	ldr	r3, [r3, #24]
 80070b8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	691b      	ldr	r3, [r3, #16]
 80070c0:	4975      	ldr	r1, [pc, #468]	; (8007298 <HAL_RCC_ClockConfig+0x244>)
 80070c2:	4313      	orrs	r3, r2
 80070c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f003 0308 	and.w	r3, r3, #8
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d010      	beq.n	80070f4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	695a      	ldr	r2, [r3, #20]
 80070d6:	4b70      	ldr	r3, [pc, #448]	; (8007298 <HAL_RCC_ClockConfig+0x244>)
 80070d8:	69db      	ldr	r3, [r3, #28]
 80070da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80070de:	429a      	cmp	r2, r3
 80070e0:	d908      	bls.n	80070f4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80070e2:	4b6d      	ldr	r3, [pc, #436]	; (8007298 <HAL_RCC_ClockConfig+0x244>)
 80070e4:	69db      	ldr	r3, [r3, #28]
 80070e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	695b      	ldr	r3, [r3, #20]
 80070ee:	496a      	ldr	r1, [pc, #424]	; (8007298 <HAL_RCC_ClockConfig+0x244>)
 80070f0:	4313      	orrs	r3, r2
 80070f2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f003 0310 	and.w	r3, r3, #16
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d010      	beq.n	8007122 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	699a      	ldr	r2, [r3, #24]
 8007104:	4b64      	ldr	r3, [pc, #400]	; (8007298 <HAL_RCC_ClockConfig+0x244>)
 8007106:	69db      	ldr	r3, [r3, #28]
 8007108:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800710c:	429a      	cmp	r2, r3
 800710e:	d908      	bls.n	8007122 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007110:	4b61      	ldr	r3, [pc, #388]	; (8007298 <HAL_RCC_ClockConfig+0x244>)
 8007112:	69db      	ldr	r3, [r3, #28]
 8007114:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	699b      	ldr	r3, [r3, #24]
 800711c:	495e      	ldr	r1, [pc, #376]	; (8007298 <HAL_RCC_ClockConfig+0x244>)
 800711e:	4313      	orrs	r3, r2
 8007120:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f003 0320 	and.w	r3, r3, #32
 800712a:	2b00      	cmp	r3, #0
 800712c:	d010      	beq.n	8007150 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	69da      	ldr	r2, [r3, #28]
 8007132:	4b59      	ldr	r3, [pc, #356]	; (8007298 <HAL_RCC_ClockConfig+0x244>)
 8007134:	6a1b      	ldr	r3, [r3, #32]
 8007136:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800713a:	429a      	cmp	r2, r3
 800713c:	d908      	bls.n	8007150 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800713e:	4b56      	ldr	r3, [pc, #344]	; (8007298 <HAL_RCC_ClockConfig+0x244>)
 8007140:	6a1b      	ldr	r3, [r3, #32]
 8007142:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	69db      	ldr	r3, [r3, #28]
 800714a:	4953      	ldr	r1, [pc, #332]	; (8007298 <HAL_RCC_ClockConfig+0x244>)
 800714c:	4313      	orrs	r3, r2
 800714e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f003 0302 	and.w	r3, r3, #2
 8007158:	2b00      	cmp	r3, #0
 800715a:	d010      	beq.n	800717e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	68da      	ldr	r2, [r3, #12]
 8007160:	4b4d      	ldr	r3, [pc, #308]	; (8007298 <HAL_RCC_ClockConfig+0x244>)
 8007162:	699b      	ldr	r3, [r3, #24]
 8007164:	f003 030f 	and.w	r3, r3, #15
 8007168:	429a      	cmp	r2, r3
 800716a:	d908      	bls.n	800717e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800716c:	4b4a      	ldr	r3, [pc, #296]	; (8007298 <HAL_RCC_ClockConfig+0x244>)
 800716e:	699b      	ldr	r3, [r3, #24]
 8007170:	f023 020f 	bic.w	r2, r3, #15
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	4947      	ldr	r1, [pc, #284]	; (8007298 <HAL_RCC_ClockConfig+0x244>)
 800717a:	4313      	orrs	r3, r2
 800717c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 0301 	and.w	r3, r3, #1
 8007186:	2b00      	cmp	r3, #0
 8007188:	d055      	beq.n	8007236 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800718a:	4b43      	ldr	r3, [pc, #268]	; (8007298 <HAL_RCC_ClockConfig+0x244>)
 800718c:	699b      	ldr	r3, [r3, #24]
 800718e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	4940      	ldr	r1, [pc, #256]	; (8007298 <HAL_RCC_ClockConfig+0x244>)
 8007198:	4313      	orrs	r3, r2
 800719a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	d107      	bne.n	80071b4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80071a4:	4b3c      	ldr	r3, [pc, #240]	; (8007298 <HAL_RCC_ClockConfig+0x244>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d121      	bne.n	80071f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	e0f6      	b.n	80073a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	2b03      	cmp	r3, #3
 80071ba:	d107      	bne.n	80071cc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80071bc:	4b36      	ldr	r3, [pc, #216]	; (8007298 <HAL_RCC_ClockConfig+0x244>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d115      	bne.n	80071f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	e0ea      	b.n	80073a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d107      	bne.n	80071e4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80071d4:	4b30      	ldr	r3, [pc, #192]	; (8007298 <HAL_RCC_ClockConfig+0x244>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d109      	bne.n	80071f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80071e0:	2301      	movs	r3, #1
 80071e2:	e0de      	b.n	80073a2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80071e4:	4b2c      	ldr	r3, [pc, #176]	; (8007298 <HAL_RCC_ClockConfig+0x244>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f003 0304 	and.w	r3, r3, #4
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d101      	bne.n	80071f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	e0d6      	b.n	80073a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80071f4:	4b28      	ldr	r3, [pc, #160]	; (8007298 <HAL_RCC_ClockConfig+0x244>)
 80071f6:	691b      	ldr	r3, [r3, #16]
 80071f8:	f023 0207 	bic.w	r2, r3, #7
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	4925      	ldr	r1, [pc, #148]	; (8007298 <HAL_RCC_ClockConfig+0x244>)
 8007202:	4313      	orrs	r3, r2
 8007204:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007206:	f7fa fdff 	bl	8001e08 <HAL_GetTick>
 800720a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800720c:	e00a      	b.n	8007224 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800720e:	f7fa fdfb 	bl	8001e08 <HAL_GetTick>
 8007212:	4602      	mov	r2, r0
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	1ad3      	subs	r3, r2, r3
 8007218:	f241 3288 	movw	r2, #5000	; 0x1388
 800721c:	4293      	cmp	r3, r2
 800721e:	d901      	bls.n	8007224 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007220:	2303      	movs	r3, #3
 8007222:	e0be      	b.n	80073a2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007224:	4b1c      	ldr	r3, [pc, #112]	; (8007298 <HAL_RCC_ClockConfig+0x244>)
 8007226:	691b      	ldr	r3, [r3, #16]
 8007228:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	00db      	lsls	r3, r3, #3
 8007232:	429a      	cmp	r2, r3
 8007234:	d1eb      	bne.n	800720e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f003 0302 	and.w	r3, r3, #2
 800723e:	2b00      	cmp	r3, #0
 8007240:	d010      	beq.n	8007264 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	68da      	ldr	r2, [r3, #12]
 8007246:	4b14      	ldr	r3, [pc, #80]	; (8007298 <HAL_RCC_ClockConfig+0x244>)
 8007248:	699b      	ldr	r3, [r3, #24]
 800724a:	f003 030f 	and.w	r3, r3, #15
 800724e:	429a      	cmp	r2, r3
 8007250:	d208      	bcs.n	8007264 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007252:	4b11      	ldr	r3, [pc, #68]	; (8007298 <HAL_RCC_ClockConfig+0x244>)
 8007254:	699b      	ldr	r3, [r3, #24]
 8007256:	f023 020f 	bic.w	r2, r3, #15
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	68db      	ldr	r3, [r3, #12]
 800725e:	490e      	ldr	r1, [pc, #56]	; (8007298 <HAL_RCC_ClockConfig+0x244>)
 8007260:	4313      	orrs	r3, r2
 8007262:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007264:	4b0b      	ldr	r3, [pc, #44]	; (8007294 <HAL_RCC_ClockConfig+0x240>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f003 030f 	and.w	r3, r3, #15
 800726c:	683a      	ldr	r2, [r7, #0]
 800726e:	429a      	cmp	r2, r3
 8007270:	d214      	bcs.n	800729c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007272:	4b08      	ldr	r3, [pc, #32]	; (8007294 <HAL_RCC_ClockConfig+0x240>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f023 020f 	bic.w	r2, r3, #15
 800727a:	4906      	ldr	r1, [pc, #24]	; (8007294 <HAL_RCC_ClockConfig+0x240>)
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	4313      	orrs	r3, r2
 8007280:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007282:	4b04      	ldr	r3, [pc, #16]	; (8007294 <HAL_RCC_ClockConfig+0x240>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f003 030f 	and.w	r3, r3, #15
 800728a:	683a      	ldr	r2, [r7, #0]
 800728c:	429a      	cmp	r2, r3
 800728e:	d005      	beq.n	800729c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007290:	2301      	movs	r3, #1
 8007292:	e086      	b.n	80073a2 <HAL_RCC_ClockConfig+0x34e>
 8007294:	52002000 	.word	0x52002000
 8007298:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f003 0304 	and.w	r3, r3, #4
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d010      	beq.n	80072ca <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	691a      	ldr	r2, [r3, #16]
 80072ac:	4b3f      	ldr	r3, [pc, #252]	; (80073ac <HAL_RCC_ClockConfig+0x358>)
 80072ae:	699b      	ldr	r3, [r3, #24]
 80072b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d208      	bcs.n	80072ca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80072b8:	4b3c      	ldr	r3, [pc, #240]	; (80073ac <HAL_RCC_ClockConfig+0x358>)
 80072ba:	699b      	ldr	r3, [r3, #24]
 80072bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	691b      	ldr	r3, [r3, #16]
 80072c4:	4939      	ldr	r1, [pc, #228]	; (80073ac <HAL_RCC_ClockConfig+0x358>)
 80072c6:	4313      	orrs	r3, r2
 80072c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f003 0308 	and.w	r3, r3, #8
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d010      	beq.n	80072f8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	695a      	ldr	r2, [r3, #20]
 80072da:	4b34      	ldr	r3, [pc, #208]	; (80073ac <HAL_RCC_ClockConfig+0x358>)
 80072dc:	69db      	ldr	r3, [r3, #28]
 80072de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d208      	bcs.n	80072f8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80072e6:	4b31      	ldr	r3, [pc, #196]	; (80073ac <HAL_RCC_ClockConfig+0x358>)
 80072e8:	69db      	ldr	r3, [r3, #28]
 80072ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	695b      	ldr	r3, [r3, #20]
 80072f2:	492e      	ldr	r1, [pc, #184]	; (80073ac <HAL_RCC_ClockConfig+0x358>)
 80072f4:	4313      	orrs	r3, r2
 80072f6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 0310 	and.w	r3, r3, #16
 8007300:	2b00      	cmp	r3, #0
 8007302:	d010      	beq.n	8007326 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	699a      	ldr	r2, [r3, #24]
 8007308:	4b28      	ldr	r3, [pc, #160]	; (80073ac <HAL_RCC_ClockConfig+0x358>)
 800730a:	69db      	ldr	r3, [r3, #28]
 800730c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007310:	429a      	cmp	r2, r3
 8007312:	d208      	bcs.n	8007326 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007314:	4b25      	ldr	r3, [pc, #148]	; (80073ac <HAL_RCC_ClockConfig+0x358>)
 8007316:	69db      	ldr	r3, [r3, #28]
 8007318:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	699b      	ldr	r3, [r3, #24]
 8007320:	4922      	ldr	r1, [pc, #136]	; (80073ac <HAL_RCC_ClockConfig+0x358>)
 8007322:	4313      	orrs	r3, r2
 8007324:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 0320 	and.w	r3, r3, #32
 800732e:	2b00      	cmp	r3, #0
 8007330:	d010      	beq.n	8007354 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	69da      	ldr	r2, [r3, #28]
 8007336:	4b1d      	ldr	r3, [pc, #116]	; (80073ac <HAL_RCC_ClockConfig+0x358>)
 8007338:	6a1b      	ldr	r3, [r3, #32]
 800733a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800733e:	429a      	cmp	r2, r3
 8007340:	d208      	bcs.n	8007354 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007342:	4b1a      	ldr	r3, [pc, #104]	; (80073ac <HAL_RCC_ClockConfig+0x358>)
 8007344:	6a1b      	ldr	r3, [r3, #32]
 8007346:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	69db      	ldr	r3, [r3, #28]
 800734e:	4917      	ldr	r1, [pc, #92]	; (80073ac <HAL_RCC_ClockConfig+0x358>)
 8007350:	4313      	orrs	r3, r2
 8007352:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007354:	f000 f834 	bl	80073c0 <HAL_RCC_GetSysClockFreq>
 8007358:	4602      	mov	r2, r0
 800735a:	4b14      	ldr	r3, [pc, #80]	; (80073ac <HAL_RCC_ClockConfig+0x358>)
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	0a1b      	lsrs	r3, r3, #8
 8007360:	f003 030f 	and.w	r3, r3, #15
 8007364:	4912      	ldr	r1, [pc, #72]	; (80073b0 <HAL_RCC_ClockConfig+0x35c>)
 8007366:	5ccb      	ldrb	r3, [r1, r3]
 8007368:	f003 031f 	and.w	r3, r3, #31
 800736c:	fa22 f303 	lsr.w	r3, r2, r3
 8007370:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007372:	4b0e      	ldr	r3, [pc, #56]	; (80073ac <HAL_RCC_ClockConfig+0x358>)
 8007374:	699b      	ldr	r3, [r3, #24]
 8007376:	f003 030f 	and.w	r3, r3, #15
 800737a:	4a0d      	ldr	r2, [pc, #52]	; (80073b0 <HAL_RCC_ClockConfig+0x35c>)
 800737c:	5cd3      	ldrb	r3, [r2, r3]
 800737e:	f003 031f 	and.w	r3, r3, #31
 8007382:	693a      	ldr	r2, [r7, #16]
 8007384:	fa22 f303 	lsr.w	r3, r2, r3
 8007388:	4a0a      	ldr	r2, [pc, #40]	; (80073b4 <HAL_RCC_ClockConfig+0x360>)
 800738a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800738c:	4a0a      	ldr	r2, [pc, #40]	; (80073b8 <HAL_RCC_ClockConfig+0x364>)
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007392:	4b0a      	ldr	r3, [pc, #40]	; (80073bc <HAL_RCC_ClockConfig+0x368>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4618      	mov	r0, r3
 8007398:	f7fa f864 	bl	8001464 <HAL_InitTick>
 800739c:	4603      	mov	r3, r0
 800739e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80073a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3718      	adds	r7, #24
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	58024400 	.word	0x58024400
 80073b0:	0801c018 	.word	0x0801c018
 80073b4:	24000004 	.word	0x24000004
 80073b8:	24000000 	.word	0x24000000
 80073bc:	24000008 	.word	0x24000008

080073c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b089      	sub	sp, #36	; 0x24
 80073c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80073c6:	4bb3      	ldr	r3, [pc, #716]	; (8007694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073c8:	691b      	ldr	r3, [r3, #16]
 80073ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80073ce:	2b18      	cmp	r3, #24
 80073d0:	f200 8155 	bhi.w	800767e <HAL_RCC_GetSysClockFreq+0x2be>
 80073d4:	a201      	add	r2, pc, #4	; (adr r2, 80073dc <HAL_RCC_GetSysClockFreq+0x1c>)
 80073d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073da:	bf00      	nop
 80073dc:	08007441 	.word	0x08007441
 80073e0:	0800767f 	.word	0x0800767f
 80073e4:	0800767f 	.word	0x0800767f
 80073e8:	0800767f 	.word	0x0800767f
 80073ec:	0800767f 	.word	0x0800767f
 80073f0:	0800767f 	.word	0x0800767f
 80073f4:	0800767f 	.word	0x0800767f
 80073f8:	0800767f 	.word	0x0800767f
 80073fc:	08007467 	.word	0x08007467
 8007400:	0800767f 	.word	0x0800767f
 8007404:	0800767f 	.word	0x0800767f
 8007408:	0800767f 	.word	0x0800767f
 800740c:	0800767f 	.word	0x0800767f
 8007410:	0800767f 	.word	0x0800767f
 8007414:	0800767f 	.word	0x0800767f
 8007418:	0800767f 	.word	0x0800767f
 800741c:	0800746d 	.word	0x0800746d
 8007420:	0800767f 	.word	0x0800767f
 8007424:	0800767f 	.word	0x0800767f
 8007428:	0800767f 	.word	0x0800767f
 800742c:	0800767f 	.word	0x0800767f
 8007430:	0800767f 	.word	0x0800767f
 8007434:	0800767f 	.word	0x0800767f
 8007438:	0800767f 	.word	0x0800767f
 800743c:	08007473 	.word	0x08007473
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007440:	4b94      	ldr	r3, [pc, #592]	; (8007694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f003 0320 	and.w	r3, r3, #32
 8007448:	2b00      	cmp	r3, #0
 800744a:	d009      	beq.n	8007460 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800744c:	4b91      	ldr	r3, [pc, #580]	; (8007694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	08db      	lsrs	r3, r3, #3
 8007452:	f003 0303 	and.w	r3, r3, #3
 8007456:	4a90      	ldr	r2, [pc, #576]	; (8007698 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007458:	fa22 f303 	lsr.w	r3, r2, r3
 800745c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800745e:	e111      	b.n	8007684 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007460:	4b8d      	ldr	r3, [pc, #564]	; (8007698 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007462:	61bb      	str	r3, [r7, #24]
      break;
 8007464:	e10e      	b.n	8007684 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007466:	4b8d      	ldr	r3, [pc, #564]	; (800769c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007468:	61bb      	str	r3, [r7, #24]
      break;
 800746a:	e10b      	b.n	8007684 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800746c:	4b8c      	ldr	r3, [pc, #560]	; (80076a0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800746e:	61bb      	str	r3, [r7, #24]
      break;
 8007470:	e108      	b.n	8007684 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007472:	4b88      	ldr	r3, [pc, #544]	; (8007694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007476:	f003 0303 	and.w	r3, r3, #3
 800747a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800747c:	4b85      	ldr	r3, [pc, #532]	; (8007694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800747e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007480:	091b      	lsrs	r3, r3, #4
 8007482:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007486:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007488:	4b82      	ldr	r3, [pc, #520]	; (8007694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800748a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800748c:	f003 0301 	and.w	r3, r3, #1
 8007490:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007492:	4b80      	ldr	r3, [pc, #512]	; (8007694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007496:	08db      	lsrs	r3, r3, #3
 8007498:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800749c:	68fa      	ldr	r2, [r7, #12]
 800749e:	fb02 f303 	mul.w	r3, r2, r3
 80074a2:	ee07 3a90 	vmov	s15, r3
 80074a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074aa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	f000 80e1 	beq.w	8007678 <HAL_RCC_GetSysClockFreq+0x2b8>
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	2b02      	cmp	r3, #2
 80074ba:	f000 8083 	beq.w	80075c4 <HAL_RCC_GetSysClockFreq+0x204>
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	2b02      	cmp	r3, #2
 80074c2:	f200 80a1 	bhi.w	8007608 <HAL_RCC_GetSysClockFreq+0x248>
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d003      	beq.n	80074d4 <HAL_RCC_GetSysClockFreq+0x114>
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d056      	beq.n	8007580 <HAL_RCC_GetSysClockFreq+0x1c0>
 80074d2:	e099      	b.n	8007608 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074d4:	4b6f      	ldr	r3, [pc, #444]	; (8007694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f003 0320 	and.w	r3, r3, #32
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d02d      	beq.n	800753c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074e0:	4b6c      	ldr	r3, [pc, #432]	; (8007694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	08db      	lsrs	r3, r3, #3
 80074e6:	f003 0303 	and.w	r3, r3, #3
 80074ea:	4a6b      	ldr	r2, [pc, #428]	; (8007698 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80074ec:	fa22 f303 	lsr.w	r3, r2, r3
 80074f0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	ee07 3a90 	vmov	s15, r3
 80074f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	ee07 3a90 	vmov	s15, r3
 8007502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800750a:	4b62      	ldr	r3, [pc, #392]	; (8007694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800750c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800750e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007512:	ee07 3a90 	vmov	s15, r3
 8007516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800751a:	ed97 6a02 	vldr	s12, [r7, #8]
 800751e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80076a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800752a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800752e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007536:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800753a:	e087      	b.n	800764c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	ee07 3a90 	vmov	s15, r3
 8007542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007546:	eddf 6a58 	vldr	s13, [pc, #352]	; 80076a8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800754a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800754e:	4b51      	ldr	r3, [pc, #324]	; (8007694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007556:	ee07 3a90 	vmov	s15, r3
 800755a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800755e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007562:	eddf 5a50 	vldr	s11, [pc, #320]	; 80076a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800756a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800756e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800757a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800757e:	e065      	b.n	800764c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	ee07 3a90 	vmov	s15, r3
 8007586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800758a:	eddf 6a48 	vldr	s13, [pc, #288]	; 80076ac <HAL_RCC_GetSysClockFreq+0x2ec>
 800758e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007592:	4b40      	ldr	r3, [pc, #256]	; (8007694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800759a:	ee07 3a90 	vmov	s15, r3
 800759e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80075a6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80076a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80075aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80075c2:	e043      	b.n	800764c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	ee07 3a90 	vmov	s15, r3
 80075ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ce:	eddf 6a38 	vldr	s13, [pc, #224]	; 80076b0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80075d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075d6:	4b2f      	ldr	r3, [pc, #188]	; (8007694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075de:	ee07 3a90 	vmov	s15, r3
 80075e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80075ea:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80076a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80075ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007602:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007606:	e021      	b.n	800764c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	ee07 3a90 	vmov	s15, r3
 800760e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007612:	eddf 6a26 	vldr	s13, [pc, #152]	; 80076ac <HAL_RCC_GetSysClockFreq+0x2ec>
 8007616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800761a:	4b1e      	ldr	r3, [pc, #120]	; (8007694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800761c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800761e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007622:	ee07 3a90 	vmov	s15, r3
 8007626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800762a:	ed97 6a02 	vldr	s12, [r7, #8]
 800762e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80076a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800763a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800763e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007646:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800764a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800764c:	4b11      	ldr	r3, [pc, #68]	; (8007694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800764e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007650:	0a5b      	lsrs	r3, r3, #9
 8007652:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007656:	3301      	adds	r3, #1
 8007658:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	ee07 3a90 	vmov	s15, r3
 8007660:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007664:	edd7 6a07 	vldr	s13, [r7, #28]
 8007668:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800766c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007670:	ee17 3a90 	vmov	r3, s15
 8007674:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007676:	e005      	b.n	8007684 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007678:	2300      	movs	r3, #0
 800767a:	61bb      	str	r3, [r7, #24]
      break;
 800767c:	e002      	b.n	8007684 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800767e:	4b07      	ldr	r3, [pc, #28]	; (800769c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007680:	61bb      	str	r3, [r7, #24]
      break;
 8007682:	bf00      	nop
  }

  return sysclockfreq;
 8007684:	69bb      	ldr	r3, [r7, #24]
}
 8007686:	4618      	mov	r0, r3
 8007688:	3724      	adds	r7, #36	; 0x24
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr
 8007692:	bf00      	nop
 8007694:	58024400 	.word	0x58024400
 8007698:	03d09000 	.word	0x03d09000
 800769c:	003d0900 	.word	0x003d0900
 80076a0:	007a1200 	.word	0x007a1200
 80076a4:	46000000 	.word	0x46000000
 80076a8:	4c742400 	.word	0x4c742400
 80076ac:	4a742400 	.word	0x4a742400
 80076b0:	4af42400 	.word	0x4af42400

080076b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80076ba:	f7ff fe81 	bl	80073c0 <HAL_RCC_GetSysClockFreq>
 80076be:	4602      	mov	r2, r0
 80076c0:	4b10      	ldr	r3, [pc, #64]	; (8007704 <HAL_RCC_GetHCLKFreq+0x50>)
 80076c2:	699b      	ldr	r3, [r3, #24]
 80076c4:	0a1b      	lsrs	r3, r3, #8
 80076c6:	f003 030f 	and.w	r3, r3, #15
 80076ca:	490f      	ldr	r1, [pc, #60]	; (8007708 <HAL_RCC_GetHCLKFreq+0x54>)
 80076cc:	5ccb      	ldrb	r3, [r1, r3]
 80076ce:	f003 031f 	and.w	r3, r3, #31
 80076d2:	fa22 f303 	lsr.w	r3, r2, r3
 80076d6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80076d8:	4b0a      	ldr	r3, [pc, #40]	; (8007704 <HAL_RCC_GetHCLKFreq+0x50>)
 80076da:	699b      	ldr	r3, [r3, #24]
 80076dc:	f003 030f 	and.w	r3, r3, #15
 80076e0:	4a09      	ldr	r2, [pc, #36]	; (8007708 <HAL_RCC_GetHCLKFreq+0x54>)
 80076e2:	5cd3      	ldrb	r3, [r2, r3]
 80076e4:	f003 031f 	and.w	r3, r3, #31
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	fa22 f303 	lsr.w	r3, r2, r3
 80076ee:	4a07      	ldr	r2, [pc, #28]	; (800770c <HAL_RCC_GetHCLKFreq+0x58>)
 80076f0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80076f2:	4a07      	ldr	r2, [pc, #28]	; (8007710 <HAL_RCC_GetHCLKFreq+0x5c>)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80076f8:	4b04      	ldr	r3, [pc, #16]	; (800770c <HAL_RCC_GetHCLKFreq+0x58>)
 80076fa:	681b      	ldr	r3, [r3, #0]
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3708      	adds	r7, #8
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}
 8007704:	58024400 	.word	0x58024400
 8007708:	0801c018 	.word	0x0801c018
 800770c:	24000004 	.word	0x24000004
 8007710:	24000000 	.word	0x24000000

08007714 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007718:	f7ff ffcc 	bl	80076b4 <HAL_RCC_GetHCLKFreq>
 800771c:	4602      	mov	r2, r0
 800771e:	4b06      	ldr	r3, [pc, #24]	; (8007738 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007720:	69db      	ldr	r3, [r3, #28]
 8007722:	091b      	lsrs	r3, r3, #4
 8007724:	f003 0307 	and.w	r3, r3, #7
 8007728:	4904      	ldr	r1, [pc, #16]	; (800773c <HAL_RCC_GetPCLK1Freq+0x28>)
 800772a:	5ccb      	ldrb	r3, [r1, r3]
 800772c:	f003 031f 	and.w	r3, r3, #31
 8007730:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007734:	4618      	mov	r0, r3
 8007736:	bd80      	pop	{r7, pc}
 8007738:	58024400 	.word	0x58024400
 800773c:	0801c018 	.word	0x0801c018

08007740 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007744:	f7ff ffb6 	bl	80076b4 <HAL_RCC_GetHCLKFreq>
 8007748:	4602      	mov	r2, r0
 800774a:	4b06      	ldr	r3, [pc, #24]	; (8007764 <HAL_RCC_GetPCLK2Freq+0x24>)
 800774c:	69db      	ldr	r3, [r3, #28]
 800774e:	0a1b      	lsrs	r3, r3, #8
 8007750:	f003 0307 	and.w	r3, r3, #7
 8007754:	4904      	ldr	r1, [pc, #16]	; (8007768 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007756:	5ccb      	ldrb	r3, [r1, r3]
 8007758:	f003 031f 	and.w	r3, r3, #31
 800775c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007760:	4618      	mov	r0, r3
 8007762:	bd80      	pop	{r7, pc}
 8007764:	58024400 	.word	0x58024400
 8007768:	0801c018 	.word	0x0801c018

0800776c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800776c:	b480      	push	{r7}
 800776e:	b083      	sub	sp, #12
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	223f      	movs	r2, #63	; 0x3f
 800777a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800777c:	4b1a      	ldr	r3, [pc, #104]	; (80077e8 <HAL_RCC_GetClockConfig+0x7c>)
 800777e:	691b      	ldr	r3, [r3, #16]
 8007780:	f003 0207 	and.w	r2, r3, #7
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007788:	4b17      	ldr	r3, [pc, #92]	; (80077e8 <HAL_RCC_GetClockConfig+0x7c>)
 800778a:	699b      	ldr	r3, [r3, #24]
 800778c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007794:	4b14      	ldr	r3, [pc, #80]	; (80077e8 <HAL_RCC_GetClockConfig+0x7c>)
 8007796:	699b      	ldr	r3, [r3, #24]
 8007798:	f003 020f 	and.w	r2, r3, #15
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80077a0:	4b11      	ldr	r3, [pc, #68]	; (80077e8 <HAL_RCC_GetClockConfig+0x7c>)
 80077a2:	699b      	ldr	r3, [r3, #24]
 80077a4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80077ac:	4b0e      	ldr	r3, [pc, #56]	; (80077e8 <HAL_RCC_GetClockConfig+0x7c>)
 80077ae:	69db      	ldr	r3, [r3, #28]
 80077b0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80077b8:	4b0b      	ldr	r3, [pc, #44]	; (80077e8 <HAL_RCC_GetClockConfig+0x7c>)
 80077ba:	69db      	ldr	r3, [r3, #28]
 80077bc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80077c4:	4b08      	ldr	r3, [pc, #32]	; (80077e8 <HAL_RCC_GetClockConfig+0x7c>)
 80077c6:	6a1b      	ldr	r3, [r3, #32]
 80077c8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80077d0:	4b06      	ldr	r3, [pc, #24]	; (80077ec <HAL_RCC_GetClockConfig+0x80>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f003 020f 	and.w	r2, r3, #15
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	601a      	str	r2, [r3, #0]
}
 80077dc:	bf00      	nop
 80077de:	370c      	adds	r7, #12
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr
 80077e8:	58024400 	.word	0x58024400
 80077ec:	52002000 	.word	0x52002000

080077f0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80077f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80077f4:	b0ca      	sub	sp, #296	; 0x128
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80077fc:	2300      	movs	r3, #0
 80077fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007802:	2300      	movs	r3, #0
 8007804:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007808:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800780c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007810:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8007814:	2500      	movs	r5, #0
 8007816:	ea54 0305 	orrs.w	r3, r4, r5
 800781a:	d049      	beq.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800781c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007820:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007822:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007826:	d02f      	beq.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007828:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800782c:	d828      	bhi.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800782e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007832:	d01a      	beq.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007834:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007838:	d822      	bhi.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800783a:	2b00      	cmp	r3, #0
 800783c:	d003      	beq.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800783e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007842:	d007      	beq.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007844:	e01c      	b.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007846:	4bb8      	ldr	r3, [pc, #736]	; (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800784a:	4ab7      	ldr	r2, [pc, #732]	; (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800784c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007850:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007852:	e01a      	b.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007854:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007858:	3308      	adds	r3, #8
 800785a:	2102      	movs	r1, #2
 800785c:	4618      	mov	r0, r3
 800785e:	f001 fc8f 	bl	8009180 <RCCEx_PLL2_Config>
 8007862:	4603      	mov	r3, r0
 8007864:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007868:	e00f      	b.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800786a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800786e:	3328      	adds	r3, #40	; 0x28
 8007870:	2102      	movs	r1, #2
 8007872:	4618      	mov	r0, r3
 8007874:	f001 fd36 	bl	80092e4 <RCCEx_PLL3_Config>
 8007878:	4603      	mov	r3, r0
 800787a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800787e:	e004      	b.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007880:	2301      	movs	r3, #1
 8007882:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007886:	e000      	b.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007888:	bf00      	nop
    }

    if (ret == HAL_OK)
 800788a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800788e:	2b00      	cmp	r3, #0
 8007890:	d10a      	bne.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007892:	4ba5      	ldr	r3, [pc, #660]	; (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007896:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800789a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800789e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078a0:	4aa1      	ldr	r2, [pc, #644]	; (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80078a2:	430b      	orrs	r3, r1
 80078a4:	6513      	str	r3, [r2, #80]	; 0x50
 80078a6:	e003      	b.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80078b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80078bc:	f04f 0900 	mov.w	r9, #0
 80078c0:	ea58 0309 	orrs.w	r3, r8, r9
 80078c4:	d047      	beq.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80078c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078cc:	2b04      	cmp	r3, #4
 80078ce:	d82a      	bhi.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80078d0:	a201      	add	r2, pc, #4	; (adr r2, 80078d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80078d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d6:	bf00      	nop
 80078d8:	080078ed 	.word	0x080078ed
 80078dc:	080078fb 	.word	0x080078fb
 80078e0:	08007911 	.word	0x08007911
 80078e4:	0800792f 	.word	0x0800792f
 80078e8:	0800792f 	.word	0x0800792f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078ec:	4b8e      	ldr	r3, [pc, #568]	; (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80078ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f0:	4a8d      	ldr	r2, [pc, #564]	; (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80078f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80078f8:	e01a      	b.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80078fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078fe:	3308      	adds	r3, #8
 8007900:	2100      	movs	r1, #0
 8007902:	4618      	mov	r0, r3
 8007904:	f001 fc3c 	bl	8009180 <RCCEx_PLL2_Config>
 8007908:	4603      	mov	r3, r0
 800790a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800790e:	e00f      	b.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007910:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007914:	3328      	adds	r3, #40	; 0x28
 8007916:	2100      	movs	r1, #0
 8007918:	4618      	mov	r0, r3
 800791a:	f001 fce3 	bl	80092e4 <RCCEx_PLL3_Config>
 800791e:	4603      	mov	r3, r0
 8007920:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007924:	e004      	b.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007926:	2301      	movs	r3, #1
 8007928:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800792c:	e000      	b.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800792e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007930:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007934:	2b00      	cmp	r3, #0
 8007936:	d10a      	bne.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007938:	4b7b      	ldr	r3, [pc, #492]	; (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800793a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800793c:	f023 0107 	bic.w	r1, r3, #7
 8007940:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007946:	4a78      	ldr	r2, [pc, #480]	; (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007948:	430b      	orrs	r3, r1
 800794a:	6513      	str	r3, [r2, #80]	; 0x50
 800794c:	e003      	b.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800794e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007952:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007956:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800795a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800795e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8007962:	f04f 0b00 	mov.w	fp, #0
 8007966:	ea5a 030b 	orrs.w	r3, sl, fp
 800796a:	d04c      	beq.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800796c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007972:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007976:	d030      	beq.n	80079da <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007978:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800797c:	d829      	bhi.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800797e:	2bc0      	cmp	r3, #192	; 0xc0
 8007980:	d02d      	beq.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007982:	2bc0      	cmp	r3, #192	; 0xc0
 8007984:	d825      	bhi.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007986:	2b80      	cmp	r3, #128	; 0x80
 8007988:	d018      	beq.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800798a:	2b80      	cmp	r3, #128	; 0x80
 800798c:	d821      	bhi.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800798e:	2b00      	cmp	r3, #0
 8007990:	d002      	beq.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007992:	2b40      	cmp	r3, #64	; 0x40
 8007994:	d007      	beq.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007996:	e01c      	b.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007998:	4b63      	ldr	r3, [pc, #396]	; (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800799a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800799c:	4a62      	ldr	r2, [pc, #392]	; (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800799e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80079a4:	e01c      	b.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079aa:	3308      	adds	r3, #8
 80079ac:	2100      	movs	r1, #0
 80079ae:	4618      	mov	r0, r3
 80079b0:	f001 fbe6 	bl	8009180 <RCCEx_PLL2_Config>
 80079b4:	4603      	mov	r3, r0
 80079b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80079ba:	e011      	b.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80079bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079c0:	3328      	adds	r3, #40	; 0x28
 80079c2:	2100      	movs	r1, #0
 80079c4:	4618      	mov	r0, r3
 80079c6:	f001 fc8d 	bl	80092e4 <RCCEx_PLL3_Config>
 80079ca:	4603      	mov	r3, r0
 80079cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80079d0:	e006      	b.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079d2:	2301      	movs	r3, #1
 80079d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80079d8:	e002      	b.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80079da:	bf00      	nop
 80079dc:	e000      	b.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80079de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d10a      	bne.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80079e8:	4b4f      	ldr	r3, [pc, #316]	; (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079ec:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80079f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079f6:	4a4c      	ldr	r2, [pc, #304]	; (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079f8:	430b      	orrs	r3, r1
 80079fa:	6513      	str	r3, [r2, #80]	; 0x50
 80079fc:	e003      	b.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a02:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a0e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8007a12:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007a16:	2300      	movs	r3, #0
 8007a18:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007a1c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8007a20:	460b      	mov	r3, r1
 8007a22:	4313      	orrs	r3, r2
 8007a24:	d053      	beq.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a2a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007a2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007a32:	d035      	beq.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007a34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007a38:	d82e      	bhi.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007a3a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007a3e:	d031      	beq.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007a40:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007a44:	d828      	bhi.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007a46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a4a:	d01a      	beq.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007a4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a50:	d822      	bhi.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d003      	beq.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007a56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a5a:	d007      	beq.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007a5c:	e01c      	b.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a5e:	4b32      	ldr	r3, [pc, #200]	; (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a62:	4a31      	ldr	r2, [pc, #196]	; (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a68:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007a6a:	e01c      	b.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a70:	3308      	adds	r3, #8
 8007a72:	2100      	movs	r1, #0
 8007a74:	4618      	mov	r0, r3
 8007a76:	f001 fb83 	bl	8009180 <RCCEx_PLL2_Config>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007a80:	e011      	b.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a86:	3328      	adds	r3, #40	; 0x28
 8007a88:	2100      	movs	r1, #0
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f001 fc2a 	bl	80092e4 <RCCEx_PLL3_Config>
 8007a90:	4603      	mov	r3, r0
 8007a92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007a96:	e006      	b.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007a9e:	e002      	b.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007aa0:	bf00      	nop
 8007aa2:	e000      	b.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007aa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007aa6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d10b      	bne.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007aae:	4b1e      	ldr	r3, [pc, #120]	; (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ab2:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8007ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007abe:	4a1a      	ldr	r2, [pc, #104]	; (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ac0:	430b      	orrs	r3, r1
 8007ac2:	6593      	str	r3, [r2, #88]	; 0x58
 8007ac4:	e003      	b.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ac6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007aca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8007ada:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007ade:	2300      	movs	r3, #0
 8007ae0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007ae4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8007ae8:	460b      	mov	r3, r1
 8007aea:	4313      	orrs	r3, r2
 8007aec:	d056      	beq.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007af2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007af6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007afa:	d038      	beq.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007afc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b00:	d831      	bhi.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007b02:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007b06:	d034      	beq.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007b08:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007b0c:	d82b      	bhi.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007b0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b12:	d01d      	beq.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007b14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b18:	d825      	bhi.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d006      	beq.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007b1e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007b22:	d00a      	beq.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007b24:	e01f      	b.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007b26:	bf00      	nop
 8007b28:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b2c:	4ba2      	ldr	r3, [pc, #648]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b30:	4aa1      	ldr	r2, [pc, #644]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b38:	e01c      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b3e:	3308      	adds	r3, #8
 8007b40:	2100      	movs	r1, #0
 8007b42:	4618      	mov	r0, r3
 8007b44:	f001 fb1c 	bl	8009180 <RCCEx_PLL2_Config>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007b4e:	e011      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b54:	3328      	adds	r3, #40	; 0x28
 8007b56:	2100      	movs	r1, #0
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f001 fbc3 	bl	80092e4 <RCCEx_PLL3_Config>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b64:	e006      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007b6c:	e002      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007b6e:	bf00      	nop
 8007b70:	e000      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007b72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d10b      	bne.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007b7c:	4b8e      	ldr	r3, [pc, #568]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b80:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8007b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b88:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007b8c:	4a8a      	ldr	r2, [pc, #552]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b8e:	430b      	orrs	r3, r1
 8007b90:	6593      	str	r3, [r2, #88]	; 0x58
 8007b92:	e003      	b.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b98:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8007ba8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007bac:	2300      	movs	r3, #0
 8007bae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007bb2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8007bb6:	460b      	mov	r3, r1
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	d03a      	beq.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bc2:	2b30      	cmp	r3, #48	; 0x30
 8007bc4:	d01f      	beq.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007bc6:	2b30      	cmp	r3, #48	; 0x30
 8007bc8:	d819      	bhi.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007bca:	2b20      	cmp	r3, #32
 8007bcc:	d00c      	beq.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007bce:	2b20      	cmp	r3, #32
 8007bd0:	d815      	bhi.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d019      	beq.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007bd6:	2b10      	cmp	r3, #16
 8007bd8:	d111      	bne.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bda:	4b77      	ldr	r3, [pc, #476]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bde:	4a76      	ldr	r2, [pc, #472]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007be4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007be6:	e011      	b.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bec:	3308      	adds	r3, #8
 8007bee:	2102      	movs	r1, #2
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f001 fac5 	bl	8009180 <RCCEx_PLL2_Config>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007bfc:	e006      	b.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007c04:	e002      	b.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007c06:	bf00      	nop
 8007c08:	e000      	b.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007c0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d10a      	bne.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007c14:	4b68      	ldr	r3, [pc, #416]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c18:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8007c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c22:	4a65      	ldr	r2, [pc, #404]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c24:	430b      	orrs	r3, r1
 8007c26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007c28:	e003      	b.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8007c3e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007c42:	2300      	movs	r3, #0
 8007c44:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007c48:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	d051      	beq.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c5c:	d035      	beq.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007c5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c62:	d82e      	bhi.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007c64:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007c68:	d031      	beq.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007c6a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007c6e:	d828      	bhi.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007c70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c74:	d01a      	beq.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007c76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c7a:	d822      	bhi.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d003      	beq.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007c80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c84:	d007      	beq.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007c86:	e01c      	b.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c88:	4b4b      	ldr	r3, [pc, #300]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c8c:	4a4a      	ldr	r2, [pc, #296]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007c94:	e01c      	b.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c9a:	3308      	adds	r3, #8
 8007c9c:	2100      	movs	r1, #0
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f001 fa6e 	bl	8009180 <RCCEx_PLL2_Config>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007caa:	e011      	b.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cb0:	3328      	adds	r3, #40	; 0x28
 8007cb2:	2100      	movs	r1, #0
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f001 fb15 	bl	80092e4 <RCCEx_PLL3_Config>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007cc0:	e006      	b.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007cc8:	e002      	b.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007cca:	bf00      	nop
 8007ccc:	e000      	b.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007cce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cd0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d10a      	bne.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007cd8:	4b37      	ldr	r3, [pc, #220]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cdc:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8007ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ce6:	4a34      	ldr	r2, [pc, #208]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ce8:	430b      	orrs	r3, r1
 8007cea:	6513      	str	r3, [r2, #80]	; 0x50
 8007cec:	e003      	b.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007cf2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cfe:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8007d02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007d06:	2300      	movs	r3, #0
 8007d08:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007d0c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8007d10:	460b      	mov	r3, r1
 8007d12:	4313      	orrs	r3, r2
 8007d14:	d056      	beq.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d20:	d033      	beq.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007d22:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d26:	d82c      	bhi.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007d28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007d2c:	d02f      	beq.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007d2e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007d32:	d826      	bhi.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007d34:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007d38:	d02b      	beq.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007d3a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007d3e:	d820      	bhi.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007d40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d44:	d012      	beq.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007d46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d4a:	d81a      	bhi.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d022      	beq.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d54:	d115      	bne.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d5a:	3308      	adds	r3, #8
 8007d5c:	2101      	movs	r1, #1
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f001 fa0e 	bl	8009180 <RCCEx_PLL2_Config>
 8007d64:	4603      	mov	r3, r0
 8007d66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007d6a:	e015      	b.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d70:	3328      	adds	r3, #40	; 0x28
 8007d72:	2101      	movs	r1, #1
 8007d74:	4618      	mov	r0, r3
 8007d76:	f001 fab5 	bl	80092e4 <RCCEx_PLL3_Config>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007d80:	e00a      	b.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d82:	2301      	movs	r3, #1
 8007d84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007d88:	e006      	b.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007d8a:	bf00      	nop
 8007d8c:	e004      	b.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007d8e:	bf00      	nop
 8007d90:	e002      	b.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007d92:	bf00      	nop
 8007d94:	e000      	b.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007d96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d10d      	bne.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007da0:	4b05      	ldr	r3, [pc, #20]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007da4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8007da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dae:	4a02      	ldr	r2, [pc, #8]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007db0:	430b      	orrs	r3, r1
 8007db2:	6513      	str	r3, [r2, #80]	; 0x50
 8007db4:	e006      	b.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007db6:	bf00      	nop
 8007db8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dbc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007dc0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dcc:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8007dd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007dda:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8007dde:	460b      	mov	r3, r1
 8007de0:	4313      	orrs	r3, r2
 8007de2:	d055      	beq.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007de8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007dec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007df0:	d033      	beq.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007df2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007df6:	d82c      	bhi.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007df8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dfc:	d02f      	beq.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e02:	d826      	bhi.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007e04:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007e08:	d02b      	beq.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007e0a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007e0e:	d820      	bhi.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007e10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e14:	d012      	beq.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007e16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e1a:	d81a      	bhi.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d022      	beq.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007e20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e24:	d115      	bne.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e2a:	3308      	adds	r3, #8
 8007e2c:	2101      	movs	r1, #1
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f001 f9a6 	bl	8009180 <RCCEx_PLL2_Config>
 8007e34:	4603      	mov	r3, r0
 8007e36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007e3a:	e015      	b.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e40:	3328      	adds	r3, #40	; 0x28
 8007e42:	2101      	movs	r1, #1
 8007e44:	4618      	mov	r0, r3
 8007e46:	f001 fa4d 	bl	80092e4 <RCCEx_PLL3_Config>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007e50:	e00a      	b.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007e52:	2301      	movs	r3, #1
 8007e54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007e58:	e006      	b.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007e5a:	bf00      	nop
 8007e5c:	e004      	b.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007e5e:	bf00      	nop
 8007e60:	e002      	b.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007e62:	bf00      	nop
 8007e64:	e000      	b.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007e66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d10b      	bne.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007e70:	4ba3      	ldr	r3, [pc, #652]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e74:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e7c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007e80:	4a9f      	ldr	r2, [pc, #636]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e82:	430b      	orrs	r3, r1
 8007e84:	6593      	str	r3, [r2, #88]	; 0x58
 8007e86:	e003      	b.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e8c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e98:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8007e9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007ea6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007eaa:	460b      	mov	r3, r1
 8007eac:	4313      	orrs	r3, r2
 8007eae:	d037      	beq.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007eba:	d00e      	beq.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007ebc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ec0:	d816      	bhi.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d018      	beq.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007ec6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007eca:	d111      	bne.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ecc:	4b8c      	ldr	r3, [pc, #560]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed0:	4a8b      	ldr	r2, [pc, #556]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ed2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ed6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007ed8:	e00f      	b.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ede:	3308      	adds	r3, #8
 8007ee0:	2101      	movs	r1, #1
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f001 f94c 	bl	8009180 <RCCEx_PLL2_Config>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007eee:	e004      	b.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007ef6:	e000      	b.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007ef8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007efa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d10a      	bne.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007f02:	4b7f      	ldr	r3, [pc, #508]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f06:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f10:	4a7b      	ldr	r2, [pc, #492]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f12:	430b      	orrs	r3, r1
 8007f14:	6513      	str	r3, [r2, #80]	; 0x50
 8007f16:	e003      	b.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f1c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f28:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8007f2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007f30:	2300      	movs	r3, #0
 8007f32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007f36:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8007f3a:	460b      	mov	r3, r1
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	d039      	beq.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f46:	2b03      	cmp	r3, #3
 8007f48:	d81c      	bhi.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007f4a:	a201      	add	r2, pc, #4	; (adr r2, 8007f50 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f50:	08007f8d 	.word	0x08007f8d
 8007f54:	08007f61 	.word	0x08007f61
 8007f58:	08007f6f 	.word	0x08007f6f
 8007f5c:	08007f8d 	.word	0x08007f8d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f60:	4b67      	ldr	r3, [pc, #412]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f64:	4a66      	ldr	r2, [pc, #408]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007f6c:	e00f      	b.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f72:	3308      	adds	r3, #8
 8007f74:	2102      	movs	r1, #2
 8007f76:	4618      	mov	r0, r3
 8007f78:	f001 f902 	bl	8009180 <RCCEx_PLL2_Config>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007f82:	e004      	b.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007f84:	2301      	movs	r3, #1
 8007f86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007f8a:	e000      	b.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007f8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d10a      	bne.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007f96:	4b5a      	ldr	r3, [pc, #360]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f9a:	f023 0103 	bic.w	r1, r3, #3
 8007f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fa4:	4a56      	ldr	r2, [pc, #344]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fa6:	430b      	orrs	r3, r1
 8007fa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007faa:	e003      	b.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007fb0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fbc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8007fc0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007fca:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8007fce:	460b      	mov	r3, r1
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	f000 809f 	beq.w	8008114 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007fd6:	4b4b      	ldr	r3, [pc, #300]	; (8008104 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a4a      	ldr	r2, [pc, #296]	; (8008104 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fe0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007fe2:	f7f9 ff11 	bl	8001e08 <HAL_GetTick>
 8007fe6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007fea:	e00b      	b.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007fec:	f7f9 ff0c 	bl	8001e08 <HAL_GetTick>
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007ff6:	1ad3      	subs	r3, r2, r3
 8007ff8:	2b64      	cmp	r3, #100	; 0x64
 8007ffa:	d903      	bls.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007ffc:	2303      	movs	r3, #3
 8007ffe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008002:	e005      	b.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008004:	4b3f      	ldr	r3, [pc, #252]	; (8008104 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800800c:	2b00      	cmp	r3, #0
 800800e:	d0ed      	beq.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008010:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008014:	2b00      	cmp	r3, #0
 8008016:	d179      	bne.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008018:	4b39      	ldr	r3, [pc, #228]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800801a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800801c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008020:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008024:	4053      	eors	r3, r2
 8008026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800802a:	2b00      	cmp	r3, #0
 800802c:	d015      	beq.n	800805a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800802e:	4b34      	ldr	r3, [pc, #208]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008032:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008036:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800803a:	4b31      	ldr	r3, [pc, #196]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800803c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800803e:	4a30      	ldr	r2, [pc, #192]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008044:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008046:	4b2e      	ldr	r3, [pc, #184]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800804a:	4a2d      	ldr	r2, [pc, #180]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800804c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008050:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008052:	4a2b      	ldr	r2, [pc, #172]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008054:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008058:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800805a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800805e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008066:	d118      	bne.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008068:	f7f9 fece 	bl	8001e08 <HAL_GetTick>
 800806c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008070:	e00d      	b.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008072:	f7f9 fec9 	bl	8001e08 <HAL_GetTick>
 8008076:	4602      	mov	r2, r0
 8008078:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800807c:	1ad2      	subs	r2, r2, r3
 800807e:	f241 3388 	movw	r3, #5000	; 0x1388
 8008082:	429a      	cmp	r2, r3
 8008084:	d903      	bls.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8008086:	2303      	movs	r3, #3
 8008088:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800808c:	e005      	b.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800808e:	4b1c      	ldr	r3, [pc, #112]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008092:	f003 0302 	and.w	r3, r3, #2
 8008096:	2b00      	cmp	r3, #0
 8008098:	d0eb      	beq.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800809a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d129      	bne.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80080a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80080aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080b2:	d10e      	bne.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80080b4:	4b12      	ldr	r3, [pc, #72]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080b6:	691b      	ldr	r3, [r3, #16]
 80080b8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80080bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80080c4:	091a      	lsrs	r2, r3, #4
 80080c6:	4b10      	ldr	r3, [pc, #64]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80080c8:	4013      	ands	r3, r2
 80080ca:	4a0d      	ldr	r2, [pc, #52]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080cc:	430b      	orrs	r3, r1
 80080ce:	6113      	str	r3, [r2, #16]
 80080d0:	e005      	b.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80080d2:	4b0b      	ldr	r3, [pc, #44]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080d4:	691b      	ldr	r3, [r3, #16]
 80080d6:	4a0a      	ldr	r2, [pc, #40]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080d8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80080dc:	6113      	str	r3, [r2, #16]
 80080de:	4b08      	ldr	r3, [pc, #32]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080e0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80080e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80080ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080ee:	4a04      	ldr	r2, [pc, #16]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080f0:	430b      	orrs	r3, r1
 80080f2:	6713      	str	r3, [r2, #112]	; 0x70
 80080f4:	e00e      	b.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80080f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80080fe:	e009      	b.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008100:	58024400 	.word	0x58024400
 8008104:	58024800 	.word	0x58024800
 8008108:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800810c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008110:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008114:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800811c:	f002 0301 	and.w	r3, r2, #1
 8008120:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008124:	2300      	movs	r3, #0
 8008126:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800812a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800812e:	460b      	mov	r3, r1
 8008130:	4313      	orrs	r3, r2
 8008132:	f000 8089 	beq.w	8008248 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008136:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800813a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800813c:	2b28      	cmp	r3, #40	; 0x28
 800813e:	d86b      	bhi.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008140:	a201      	add	r2, pc, #4	; (adr r2, 8008148 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008146:	bf00      	nop
 8008148:	08008221 	.word	0x08008221
 800814c:	08008219 	.word	0x08008219
 8008150:	08008219 	.word	0x08008219
 8008154:	08008219 	.word	0x08008219
 8008158:	08008219 	.word	0x08008219
 800815c:	08008219 	.word	0x08008219
 8008160:	08008219 	.word	0x08008219
 8008164:	08008219 	.word	0x08008219
 8008168:	080081ed 	.word	0x080081ed
 800816c:	08008219 	.word	0x08008219
 8008170:	08008219 	.word	0x08008219
 8008174:	08008219 	.word	0x08008219
 8008178:	08008219 	.word	0x08008219
 800817c:	08008219 	.word	0x08008219
 8008180:	08008219 	.word	0x08008219
 8008184:	08008219 	.word	0x08008219
 8008188:	08008203 	.word	0x08008203
 800818c:	08008219 	.word	0x08008219
 8008190:	08008219 	.word	0x08008219
 8008194:	08008219 	.word	0x08008219
 8008198:	08008219 	.word	0x08008219
 800819c:	08008219 	.word	0x08008219
 80081a0:	08008219 	.word	0x08008219
 80081a4:	08008219 	.word	0x08008219
 80081a8:	08008221 	.word	0x08008221
 80081ac:	08008219 	.word	0x08008219
 80081b0:	08008219 	.word	0x08008219
 80081b4:	08008219 	.word	0x08008219
 80081b8:	08008219 	.word	0x08008219
 80081bc:	08008219 	.word	0x08008219
 80081c0:	08008219 	.word	0x08008219
 80081c4:	08008219 	.word	0x08008219
 80081c8:	08008221 	.word	0x08008221
 80081cc:	08008219 	.word	0x08008219
 80081d0:	08008219 	.word	0x08008219
 80081d4:	08008219 	.word	0x08008219
 80081d8:	08008219 	.word	0x08008219
 80081dc:	08008219 	.word	0x08008219
 80081e0:	08008219 	.word	0x08008219
 80081e4:	08008219 	.word	0x08008219
 80081e8:	08008221 	.word	0x08008221
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80081ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081f0:	3308      	adds	r3, #8
 80081f2:	2101      	movs	r1, #1
 80081f4:	4618      	mov	r0, r3
 80081f6:	f000 ffc3 	bl	8009180 <RCCEx_PLL2_Config>
 80081fa:	4603      	mov	r3, r0
 80081fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008200:	e00f      	b.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008202:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008206:	3328      	adds	r3, #40	; 0x28
 8008208:	2101      	movs	r1, #1
 800820a:	4618      	mov	r0, r3
 800820c:	f001 f86a 	bl	80092e4 <RCCEx_PLL3_Config>
 8008210:	4603      	mov	r3, r0
 8008212:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008216:	e004      	b.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008218:	2301      	movs	r3, #1
 800821a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800821e:	e000      	b.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008220:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008222:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008226:	2b00      	cmp	r3, #0
 8008228:	d10a      	bne.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800822a:	4bbf      	ldr	r3, [pc, #764]	; (8008528 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800822c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800822e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8008232:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008236:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008238:	4abb      	ldr	r2, [pc, #748]	; (8008528 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800823a:	430b      	orrs	r3, r1
 800823c:	6553      	str	r3, [r2, #84]	; 0x54
 800823e:	e003      	b.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008240:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008244:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008248:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800824c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008250:	f002 0302 	and.w	r3, r2, #2
 8008254:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008258:	2300      	movs	r3, #0
 800825a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800825e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8008262:	460b      	mov	r3, r1
 8008264:	4313      	orrs	r3, r2
 8008266:	d041      	beq.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008268:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800826c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800826e:	2b05      	cmp	r3, #5
 8008270:	d824      	bhi.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8008272:	a201      	add	r2, pc, #4	; (adr r2, 8008278 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008278:	080082c5 	.word	0x080082c5
 800827c:	08008291 	.word	0x08008291
 8008280:	080082a7 	.word	0x080082a7
 8008284:	080082c5 	.word	0x080082c5
 8008288:	080082c5 	.word	0x080082c5
 800828c:	080082c5 	.word	0x080082c5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008290:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008294:	3308      	adds	r3, #8
 8008296:	2101      	movs	r1, #1
 8008298:	4618      	mov	r0, r3
 800829a:	f000 ff71 	bl	8009180 <RCCEx_PLL2_Config>
 800829e:	4603      	mov	r3, r0
 80082a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80082a4:	e00f      	b.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80082a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082aa:	3328      	adds	r3, #40	; 0x28
 80082ac:	2101      	movs	r1, #1
 80082ae:	4618      	mov	r0, r3
 80082b0:	f001 f818 	bl	80092e4 <RCCEx_PLL3_Config>
 80082b4:	4603      	mov	r3, r0
 80082b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80082ba:	e004      	b.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082bc:	2301      	movs	r3, #1
 80082be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80082c2:	e000      	b.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80082c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d10a      	bne.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80082ce:	4b96      	ldr	r3, [pc, #600]	; (8008528 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80082d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082d2:	f023 0107 	bic.w	r1, r3, #7
 80082d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082dc:	4a92      	ldr	r2, [pc, #584]	; (8008528 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80082de:	430b      	orrs	r3, r1
 80082e0:	6553      	str	r3, [r2, #84]	; 0x54
 80082e2:	e003      	b.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80082e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80082ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f4:	f002 0304 	and.w	r3, r2, #4
 80082f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80082fc:	2300      	movs	r3, #0
 80082fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008302:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8008306:	460b      	mov	r3, r1
 8008308:	4313      	orrs	r3, r2
 800830a:	d044      	beq.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800830c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008310:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008314:	2b05      	cmp	r3, #5
 8008316:	d825      	bhi.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008318:	a201      	add	r2, pc, #4	; (adr r2, 8008320 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800831a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800831e:	bf00      	nop
 8008320:	0800836d 	.word	0x0800836d
 8008324:	08008339 	.word	0x08008339
 8008328:	0800834f 	.word	0x0800834f
 800832c:	0800836d 	.word	0x0800836d
 8008330:	0800836d 	.word	0x0800836d
 8008334:	0800836d 	.word	0x0800836d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008338:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800833c:	3308      	adds	r3, #8
 800833e:	2101      	movs	r1, #1
 8008340:	4618      	mov	r0, r3
 8008342:	f000 ff1d 	bl	8009180 <RCCEx_PLL2_Config>
 8008346:	4603      	mov	r3, r0
 8008348:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800834c:	e00f      	b.n	800836e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800834e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008352:	3328      	adds	r3, #40	; 0x28
 8008354:	2101      	movs	r1, #1
 8008356:	4618      	mov	r0, r3
 8008358:	f000 ffc4 	bl	80092e4 <RCCEx_PLL3_Config>
 800835c:	4603      	mov	r3, r0
 800835e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008362:	e004      	b.n	800836e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008364:	2301      	movs	r3, #1
 8008366:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800836a:	e000      	b.n	800836e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800836c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800836e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008372:	2b00      	cmp	r3, #0
 8008374:	d10b      	bne.n	800838e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008376:	4b6c      	ldr	r3, [pc, #432]	; (8008528 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800837a:	f023 0107 	bic.w	r1, r3, #7
 800837e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008382:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008386:	4a68      	ldr	r2, [pc, #416]	; (8008528 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008388:	430b      	orrs	r3, r1
 800838a:	6593      	str	r3, [r2, #88]	; 0x58
 800838c:	e003      	b.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800838e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008392:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008396:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800839a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800839e:	f002 0320 	and.w	r3, r2, #32
 80083a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80083a6:	2300      	movs	r3, #0
 80083a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80083ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80083b0:	460b      	mov	r3, r1
 80083b2:	4313      	orrs	r3, r2
 80083b4:	d055      	beq.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80083b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80083c2:	d033      	beq.n	800842c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80083c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80083c8:	d82c      	bhi.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80083ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083ce:	d02f      	beq.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80083d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083d4:	d826      	bhi.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80083d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80083da:	d02b      	beq.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80083dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80083e0:	d820      	bhi.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80083e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083e6:	d012      	beq.n	800840e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80083e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083ec:	d81a      	bhi.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d022      	beq.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80083f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083f6:	d115      	bne.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80083f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083fc:	3308      	adds	r3, #8
 80083fe:	2100      	movs	r1, #0
 8008400:	4618      	mov	r0, r3
 8008402:	f000 febd 	bl	8009180 <RCCEx_PLL2_Config>
 8008406:	4603      	mov	r3, r0
 8008408:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800840c:	e015      	b.n	800843a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800840e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008412:	3328      	adds	r3, #40	; 0x28
 8008414:	2102      	movs	r1, #2
 8008416:	4618      	mov	r0, r3
 8008418:	f000 ff64 	bl	80092e4 <RCCEx_PLL3_Config>
 800841c:	4603      	mov	r3, r0
 800841e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008422:	e00a      	b.n	800843a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008424:	2301      	movs	r3, #1
 8008426:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800842a:	e006      	b.n	800843a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800842c:	bf00      	nop
 800842e:	e004      	b.n	800843a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008430:	bf00      	nop
 8008432:	e002      	b.n	800843a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008434:	bf00      	nop
 8008436:	e000      	b.n	800843a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008438:	bf00      	nop
    }

    if (ret == HAL_OK)
 800843a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800843e:	2b00      	cmp	r3, #0
 8008440:	d10b      	bne.n	800845a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008442:	4b39      	ldr	r3, [pc, #228]	; (8008528 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008446:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800844a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800844e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008452:	4a35      	ldr	r2, [pc, #212]	; (8008528 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008454:	430b      	orrs	r3, r1
 8008456:	6553      	str	r3, [r2, #84]	; 0x54
 8008458:	e003      	b.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800845a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800845e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008462:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800846a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800846e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008472:	2300      	movs	r3, #0
 8008474:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008478:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800847c:	460b      	mov	r3, r1
 800847e:	4313      	orrs	r3, r2
 8008480:	d058      	beq.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008482:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008486:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800848a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800848e:	d033      	beq.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008490:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008494:	d82c      	bhi.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800849a:	d02f      	beq.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800849c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084a0:	d826      	bhi.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80084a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80084a6:	d02b      	beq.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80084a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80084ac:	d820      	bhi.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80084ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084b2:	d012      	beq.n	80084da <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80084b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084b8:	d81a      	bhi.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d022      	beq.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80084be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084c2:	d115      	bne.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80084c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084c8:	3308      	adds	r3, #8
 80084ca:	2100      	movs	r1, #0
 80084cc:	4618      	mov	r0, r3
 80084ce:	f000 fe57 	bl	8009180 <RCCEx_PLL2_Config>
 80084d2:	4603      	mov	r3, r0
 80084d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80084d8:	e015      	b.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80084da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084de:	3328      	adds	r3, #40	; 0x28
 80084e0:	2102      	movs	r1, #2
 80084e2:	4618      	mov	r0, r3
 80084e4:	f000 fefe 	bl	80092e4 <RCCEx_PLL3_Config>
 80084e8:	4603      	mov	r3, r0
 80084ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80084ee:	e00a      	b.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084f0:	2301      	movs	r3, #1
 80084f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80084f6:	e006      	b.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80084f8:	bf00      	nop
 80084fa:	e004      	b.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80084fc:	bf00      	nop
 80084fe:	e002      	b.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008500:	bf00      	nop
 8008502:	e000      	b.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008504:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008506:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800850a:	2b00      	cmp	r3, #0
 800850c:	d10e      	bne.n	800852c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800850e:	4b06      	ldr	r3, [pc, #24]	; (8008528 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008512:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8008516:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800851a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800851e:	4a02      	ldr	r2, [pc, #8]	; (8008528 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008520:	430b      	orrs	r3, r1
 8008522:	6593      	str	r3, [r2, #88]	; 0x58
 8008524:	e006      	b.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008526:	bf00      	nop
 8008528:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800852c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008530:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008534:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800853c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8008540:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008544:	2300      	movs	r3, #0
 8008546:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800854a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800854e:	460b      	mov	r3, r1
 8008550:	4313      	orrs	r3, r2
 8008552:	d055      	beq.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008554:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008558:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800855c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008560:	d033      	beq.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008562:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008566:	d82c      	bhi.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008568:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800856c:	d02f      	beq.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800856e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008572:	d826      	bhi.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008574:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008578:	d02b      	beq.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800857a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800857e:	d820      	bhi.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008580:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008584:	d012      	beq.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8008586:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800858a:	d81a      	bhi.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800858c:	2b00      	cmp	r3, #0
 800858e:	d022      	beq.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008590:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008594:	d115      	bne.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008596:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800859a:	3308      	adds	r3, #8
 800859c:	2100      	movs	r1, #0
 800859e:	4618      	mov	r0, r3
 80085a0:	f000 fdee 	bl	8009180 <RCCEx_PLL2_Config>
 80085a4:	4603      	mov	r3, r0
 80085a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80085aa:	e015      	b.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80085ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085b0:	3328      	adds	r3, #40	; 0x28
 80085b2:	2102      	movs	r1, #2
 80085b4:	4618      	mov	r0, r3
 80085b6:	f000 fe95 	bl	80092e4 <RCCEx_PLL3_Config>
 80085ba:	4603      	mov	r3, r0
 80085bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80085c0:	e00a      	b.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80085c8:	e006      	b.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80085ca:	bf00      	nop
 80085cc:	e004      	b.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80085ce:	bf00      	nop
 80085d0:	e002      	b.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80085d2:	bf00      	nop
 80085d4:	e000      	b.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80085d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d10b      	bne.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80085e0:	4ba1      	ldr	r3, [pc, #644]	; (8008868 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80085e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085e4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80085e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80085f0:	4a9d      	ldr	r2, [pc, #628]	; (8008868 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80085f2:	430b      	orrs	r3, r1
 80085f4:	6593      	str	r3, [r2, #88]	; 0x58
 80085f6:	e003      	b.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008600:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008608:	f002 0308 	and.w	r3, r2, #8
 800860c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008610:	2300      	movs	r3, #0
 8008612:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008616:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800861a:	460b      	mov	r3, r1
 800861c:	4313      	orrs	r3, r2
 800861e:	d01e      	beq.n	800865e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008620:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008624:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008628:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800862c:	d10c      	bne.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800862e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008632:	3328      	adds	r3, #40	; 0x28
 8008634:	2102      	movs	r1, #2
 8008636:	4618      	mov	r0, r3
 8008638:	f000 fe54 	bl	80092e4 <RCCEx_PLL3_Config>
 800863c:	4603      	mov	r3, r0
 800863e:	2b00      	cmp	r3, #0
 8008640:	d002      	beq.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008642:	2301      	movs	r3, #1
 8008644:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008648:	4b87      	ldr	r3, [pc, #540]	; (8008868 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800864a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800864c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008650:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008654:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008658:	4a83      	ldr	r2, [pc, #524]	; (8008868 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800865a:	430b      	orrs	r3, r1
 800865c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800865e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008666:	f002 0310 	and.w	r3, r2, #16
 800866a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800866e:	2300      	movs	r3, #0
 8008670:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008674:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8008678:	460b      	mov	r3, r1
 800867a:	4313      	orrs	r3, r2
 800867c:	d01e      	beq.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800867e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008682:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008686:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800868a:	d10c      	bne.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800868c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008690:	3328      	adds	r3, #40	; 0x28
 8008692:	2102      	movs	r1, #2
 8008694:	4618      	mov	r0, r3
 8008696:	f000 fe25 	bl	80092e4 <RCCEx_PLL3_Config>
 800869a:	4603      	mov	r3, r0
 800869c:	2b00      	cmp	r3, #0
 800869e:	d002      	beq.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80086a0:	2301      	movs	r3, #1
 80086a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80086a6:	4b70      	ldr	r3, [pc, #448]	; (8008868 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80086a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80086ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80086b6:	4a6c      	ldr	r2, [pc, #432]	; (8008868 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80086b8:	430b      	orrs	r3, r1
 80086ba:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80086bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80086c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80086cc:	2300      	movs	r3, #0
 80086ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80086d2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80086d6:	460b      	mov	r3, r1
 80086d8:	4313      	orrs	r3, r2
 80086da:	d03e      	beq.n	800875a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80086dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80086e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086e8:	d022      	beq.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80086ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086ee:	d81b      	bhi.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d003      	beq.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80086f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086f8:	d00b      	beq.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80086fa:	e015      	b.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80086fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008700:	3308      	adds	r3, #8
 8008702:	2100      	movs	r1, #0
 8008704:	4618      	mov	r0, r3
 8008706:	f000 fd3b 	bl	8009180 <RCCEx_PLL2_Config>
 800870a:	4603      	mov	r3, r0
 800870c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008710:	e00f      	b.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008712:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008716:	3328      	adds	r3, #40	; 0x28
 8008718:	2102      	movs	r1, #2
 800871a:	4618      	mov	r0, r3
 800871c:	f000 fde2 	bl	80092e4 <RCCEx_PLL3_Config>
 8008720:	4603      	mov	r3, r0
 8008722:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008726:	e004      	b.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008728:	2301      	movs	r3, #1
 800872a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800872e:	e000      	b.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008730:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008732:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008736:	2b00      	cmp	r3, #0
 8008738:	d10b      	bne.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800873a:	4b4b      	ldr	r3, [pc, #300]	; (8008868 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800873c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800873e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8008742:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008746:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800874a:	4a47      	ldr	r2, [pc, #284]	; (8008868 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800874c:	430b      	orrs	r3, r1
 800874e:	6593      	str	r3, [r2, #88]	; 0x58
 8008750:	e003      	b.n	800875a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008752:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008756:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800875a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800875e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008762:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8008766:	67bb      	str	r3, [r7, #120]	; 0x78
 8008768:	2300      	movs	r3, #0
 800876a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800876c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8008770:	460b      	mov	r3, r1
 8008772:	4313      	orrs	r3, r2
 8008774:	d03b      	beq.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008776:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800877a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800877e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008782:	d01f      	beq.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008784:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008788:	d818      	bhi.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800878a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800878e:	d003      	beq.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008790:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008794:	d007      	beq.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8008796:	e011      	b.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008798:	4b33      	ldr	r3, [pc, #204]	; (8008868 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800879a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800879c:	4a32      	ldr	r2, [pc, #200]	; (8008868 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800879e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80087a4:	e00f      	b.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80087a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087aa:	3328      	adds	r3, #40	; 0x28
 80087ac:	2101      	movs	r1, #1
 80087ae:	4618      	mov	r0, r3
 80087b0:	f000 fd98 	bl	80092e4 <RCCEx_PLL3_Config>
 80087b4:	4603      	mov	r3, r0
 80087b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80087ba:	e004      	b.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087bc:	2301      	movs	r3, #1
 80087be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80087c2:	e000      	b.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80087c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d10b      	bne.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80087ce:	4b26      	ldr	r3, [pc, #152]	; (8008868 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80087d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087d2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80087d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087de:	4a22      	ldr	r2, [pc, #136]	; (8008868 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80087e0:	430b      	orrs	r3, r1
 80087e2:	6553      	str	r3, [r2, #84]	; 0x54
 80087e4:	e003      	b.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80087ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80087fa:	673b      	str	r3, [r7, #112]	; 0x70
 80087fc:	2300      	movs	r3, #0
 80087fe:	677b      	str	r3, [r7, #116]	; 0x74
 8008800:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8008804:	460b      	mov	r3, r1
 8008806:	4313      	orrs	r3, r2
 8008808:	d034      	beq.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800880a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800880e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008810:	2b00      	cmp	r3, #0
 8008812:	d003      	beq.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008818:	d007      	beq.n	800882a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800881a:	e011      	b.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800881c:	4b12      	ldr	r3, [pc, #72]	; (8008868 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800881e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008820:	4a11      	ldr	r2, [pc, #68]	; (8008868 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008822:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008826:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008828:	e00e      	b.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800882a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800882e:	3308      	adds	r3, #8
 8008830:	2102      	movs	r1, #2
 8008832:	4618      	mov	r0, r3
 8008834:	f000 fca4 	bl	8009180 <RCCEx_PLL2_Config>
 8008838:	4603      	mov	r3, r0
 800883a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800883e:	e003      	b.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008840:	2301      	movs	r3, #1
 8008842:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008846:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008848:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800884c:	2b00      	cmp	r3, #0
 800884e:	d10d      	bne.n	800886c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008850:	4b05      	ldr	r3, [pc, #20]	; (8008868 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008854:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008858:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800885c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800885e:	4a02      	ldr	r2, [pc, #8]	; (8008868 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008860:	430b      	orrs	r3, r1
 8008862:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008864:	e006      	b.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008866:	bf00      	nop
 8008868:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800886c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008870:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008874:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800887c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8008880:	66bb      	str	r3, [r7, #104]	; 0x68
 8008882:	2300      	movs	r3, #0
 8008884:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008886:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800888a:	460b      	mov	r3, r1
 800888c:	4313      	orrs	r3, r2
 800888e:	d00c      	beq.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008890:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008894:	3328      	adds	r3, #40	; 0x28
 8008896:	2102      	movs	r1, #2
 8008898:	4618      	mov	r0, r3
 800889a:	f000 fd23 	bl	80092e4 <RCCEx_PLL3_Config>
 800889e:	4603      	mov	r3, r0
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d002      	beq.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80088a4:	2301      	movs	r3, #1
 80088a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80088aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80088b6:	663b      	str	r3, [r7, #96]	; 0x60
 80088b8:	2300      	movs	r3, #0
 80088ba:	667b      	str	r3, [r7, #100]	; 0x64
 80088bc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80088c0:	460b      	mov	r3, r1
 80088c2:	4313      	orrs	r3, r2
 80088c4:	d038      	beq.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80088c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80088ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80088d2:	d018      	beq.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80088d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80088d8:	d811      	bhi.n	80088fe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80088da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088de:	d014      	beq.n	800890a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80088e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088e4:	d80b      	bhi.n	80088fe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d011      	beq.n	800890e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80088ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088ee:	d106      	bne.n	80088fe <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088f0:	4bc3      	ldr	r3, [pc, #780]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80088f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f4:	4ac2      	ldr	r2, [pc, #776]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80088f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80088fc:	e008      	b.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088fe:	2301      	movs	r3, #1
 8008900:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008904:	e004      	b.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008906:	bf00      	nop
 8008908:	e002      	b.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800890a:	bf00      	nop
 800890c:	e000      	b.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800890e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008910:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008914:	2b00      	cmp	r3, #0
 8008916:	d10b      	bne.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008918:	4bb9      	ldr	r3, [pc, #740]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800891a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800891c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008920:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008924:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008928:	4ab5      	ldr	r2, [pc, #724]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800892a:	430b      	orrs	r3, r1
 800892c:	6553      	str	r3, [r2, #84]	; 0x54
 800892e:	e003      	b.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008930:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008934:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008938:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800893c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008940:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8008944:	65bb      	str	r3, [r7, #88]	; 0x58
 8008946:	2300      	movs	r3, #0
 8008948:	65fb      	str	r3, [r7, #92]	; 0x5c
 800894a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800894e:	460b      	mov	r3, r1
 8008950:	4313      	orrs	r3, r2
 8008952:	d009      	beq.n	8008968 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008954:	4baa      	ldr	r3, [pc, #680]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008958:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800895c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008960:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008962:	4aa7      	ldr	r2, [pc, #668]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008964:	430b      	orrs	r3, r1
 8008966:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008968:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800896c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008970:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8008974:	653b      	str	r3, [r7, #80]	; 0x50
 8008976:	2300      	movs	r3, #0
 8008978:	657b      	str	r3, [r7, #84]	; 0x54
 800897a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800897e:	460b      	mov	r3, r1
 8008980:	4313      	orrs	r3, r2
 8008982:	d00a      	beq.n	800899a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008984:	4b9e      	ldr	r3, [pc, #632]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008986:	691b      	ldr	r3, [r3, #16]
 8008988:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800898c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008990:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008994:	4a9a      	ldr	r2, [pc, #616]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008996:	430b      	orrs	r3, r1
 8008998:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800899a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800899e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80089a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80089a8:	2300      	movs	r3, #0
 80089aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80089ac:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80089b0:	460b      	mov	r3, r1
 80089b2:	4313      	orrs	r3, r2
 80089b4:	d009      	beq.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80089b6:	4b92      	ldr	r3, [pc, #584]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089ba:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80089be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089c4:	4a8e      	ldr	r2, [pc, #568]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089c6:	430b      	orrs	r3, r1
 80089c8:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80089ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d2:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80089d6:	643b      	str	r3, [r7, #64]	; 0x40
 80089d8:	2300      	movs	r3, #0
 80089da:	647b      	str	r3, [r7, #68]	; 0x44
 80089dc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80089e0:	460b      	mov	r3, r1
 80089e2:	4313      	orrs	r3, r2
 80089e4:	d00e      	beq.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80089e6:	4b86      	ldr	r3, [pc, #536]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089e8:	691b      	ldr	r3, [r3, #16]
 80089ea:	4a85      	ldr	r2, [pc, #532]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80089f0:	6113      	str	r3, [r2, #16]
 80089f2:	4b83      	ldr	r3, [pc, #524]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089f4:	6919      	ldr	r1, [r3, #16]
 80089f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089fa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80089fe:	4a80      	ldr	r2, [pc, #512]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a00:	430b      	orrs	r3, r1
 8008a02:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a0c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8008a10:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a12:	2300      	movs	r3, #0
 8008a14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a16:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8008a1a:	460b      	mov	r3, r1
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	d009      	beq.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008a20:	4b77      	ldr	r3, [pc, #476]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a24:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a2e:	4a74      	ldr	r2, [pc, #464]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a30:	430b      	orrs	r3, r1
 8008a32:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a3c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8008a40:	633b      	str	r3, [r7, #48]	; 0x30
 8008a42:	2300      	movs	r3, #0
 8008a44:	637b      	str	r3, [r7, #52]	; 0x34
 8008a46:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8008a4a:	460b      	mov	r3, r1
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	d00a      	beq.n	8008a66 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008a50:	4b6b      	ldr	r3, [pc, #428]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a54:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8008a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a60:	4a67      	ldr	r2, [pc, #412]	; (8008c00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a62:	430b      	orrs	r3, r1
 8008a64:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a6e:	2100      	movs	r1, #0
 8008a70:	62b9      	str	r1, [r7, #40]	; 0x28
 8008a72:	f003 0301 	and.w	r3, r3, #1
 8008a76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a78:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8008a7c:	460b      	mov	r3, r1
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	d011      	beq.n	8008aa6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a86:	3308      	adds	r3, #8
 8008a88:	2100      	movs	r1, #0
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f000 fb78 	bl	8009180 <RCCEx_PLL2_Config>
 8008a90:	4603      	mov	r3, r0
 8008a92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008a96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d003      	beq.n	8008aa6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008aa2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aae:	2100      	movs	r1, #0
 8008ab0:	6239      	str	r1, [r7, #32]
 8008ab2:	f003 0302 	and.w	r3, r3, #2
 8008ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8008ab8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008abc:	460b      	mov	r3, r1
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	d011      	beq.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ac6:	3308      	adds	r3, #8
 8008ac8:	2101      	movs	r1, #1
 8008aca:	4618      	mov	r0, r3
 8008acc:	f000 fb58 	bl	8009180 <RCCEx_PLL2_Config>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008ad6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d003      	beq.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ade:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ae2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aee:	2100      	movs	r1, #0
 8008af0:	61b9      	str	r1, [r7, #24]
 8008af2:	f003 0304 	and.w	r3, r3, #4
 8008af6:	61fb      	str	r3, [r7, #28]
 8008af8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008afc:	460b      	mov	r3, r1
 8008afe:	4313      	orrs	r3, r2
 8008b00:	d011      	beq.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b06:	3308      	adds	r3, #8
 8008b08:	2102      	movs	r1, #2
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f000 fb38 	bl	8009180 <RCCEx_PLL2_Config>
 8008b10:	4603      	mov	r3, r0
 8008b12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008b16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d003      	beq.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b22:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b2e:	2100      	movs	r1, #0
 8008b30:	6139      	str	r1, [r7, #16]
 8008b32:	f003 0308 	and.w	r3, r3, #8
 8008b36:	617b      	str	r3, [r7, #20]
 8008b38:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	d011      	beq.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b46:	3328      	adds	r3, #40	; 0x28
 8008b48:	2100      	movs	r1, #0
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f000 fbca 	bl	80092e4 <RCCEx_PLL3_Config>
 8008b50:	4603      	mov	r3, r0
 8008b52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8008b56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d003      	beq.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b6e:	2100      	movs	r1, #0
 8008b70:	60b9      	str	r1, [r7, #8]
 8008b72:	f003 0310 	and.w	r3, r3, #16
 8008b76:	60fb      	str	r3, [r7, #12]
 8008b78:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008b7c:	460b      	mov	r3, r1
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	d011      	beq.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b86:	3328      	adds	r3, #40	; 0x28
 8008b88:	2101      	movs	r1, #1
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f000 fbaa 	bl	80092e4 <RCCEx_PLL3_Config>
 8008b90:	4603      	mov	r3, r0
 8008b92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008b96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d003      	beq.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ba2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bae:	2100      	movs	r1, #0
 8008bb0:	6039      	str	r1, [r7, #0]
 8008bb2:	f003 0320 	and.w	r3, r3, #32
 8008bb6:	607b      	str	r3, [r7, #4]
 8008bb8:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008bbc:	460b      	mov	r3, r1
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	d011      	beq.n	8008be6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bc6:	3328      	adds	r3, #40	; 0x28
 8008bc8:	2102      	movs	r1, #2
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f000 fb8a 	bl	80092e4 <RCCEx_PLL3_Config>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008bd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d003      	beq.n	8008be6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008be2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8008be6:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d101      	bne.n	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	e000      	b.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008bf2:	2301      	movs	r3, #1
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c00:	58024400 	.word	0x58024400

08008c04 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008c08:	f7fe fd54 	bl	80076b4 <HAL_RCC_GetHCLKFreq>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	4b06      	ldr	r3, [pc, #24]	; (8008c28 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008c10:	6a1b      	ldr	r3, [r3, #32]
 8008c12:	091b      	lsrs	r3, r3, #4
 8008c14:	f003 0307 	and.w	r3, r3, #7
 8008c18:	4904      	ldr	r1, [pc, #16]	; (8008c2c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008c1a:	5ccb      	ldrb	r3, [r1, r3]
 8008c1c:	f003 031f 	and.w	r3, r3, #31
 8008c20:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	bd80      	pop	{r7, pc}
 8008c28:	58024400 	.word	0x58024400
 8008c2c:	0801c018 	.word	0x0801c018

08008c30 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b089      	sub	sp, #36	; 0x24
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c38:	4ba1      	ldr	r3, [pc, #644]	; (8008ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c3c:	f003 0303 	and.w	r3, r3, #3
 8008c40:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008c42:	4b9f      	ldr	r3, [pc, #636]	; (8008ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c46:	0b1b      	lsrs	r3, r3, #12
 8008c48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c4c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008c4e:	4b9c      	ldr	r3, [pc, #624]	; (8008ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c52:	091b      	lsrs	r3, r3, #4
 8008c54:	f003 0301 	and.w	r3, r3, #1
 8008c58:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008c5a:	4b99      	ldr	r3, [pc, #612]	; (8008ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c5e:	08db      	lsrs	r3, r3, #3
 8008c60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c64:	693a      	ldr	r2, [r7, #16]
 8008c66:	fb02 f303 	mul.w	r3, r2, r3
 8008c6a:	ee07 3a90 	vmov	s15, r3
 8008c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c72:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	f000 8111 	beq.w	8008ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008c7e:	69bb      	ldr	r3, [r7, #24]
 8008c80:	2b02      	cmp	r3, #2
 8008c82:	f000 8083 	beq.w	8008d8c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008c86:	69bb      	ldr	r3, [r7, #24]
 8008c88:	2b02      	cmp	r3, #2
 8008c8a:	f200 80a1 	bhi.w	8008dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008c8e:	69bb      	ldr	r3, [r7, #24]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d003      	beq.n	8008c9c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008c94:	69bb      	ldr	r3, [r7, #24]
 8008c96:	2b01      	cmp	r3, #1
 8008c98:	d056      	beq.n	8008d48 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008c9a:	e099      	b.n	8008dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c9c:	4b88      	ldr	r3, [pc, #544]	; (8008ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f003 0320 	and.w	r3, r3, #32
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d02d      	beq.n	8008d04 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ca8:	4b85      	ldr	r3, [pc, #532]	; (8008ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	08db      	lsrs	r3, r3, #3
 8008cae:	f003 0303 	and.w	r3, r3, #3
 8008cb2:	4a84      	ldr	r2, [pc, #528]	; (8008ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8008cb8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	ee07 3a90 	vmov	s15, r3
 8008cc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	ee07 3a90 	vmov	s15, r3
 8008cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cd2:	4b7b      	ldr	r3, [pc, #492]	; (8008ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cda:	ee07 3a90 	vmov	s15, r3
 8008cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ce2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ce6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cfe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008d02:	e087      	b.n	8008e14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	ee07 3a90 	vmov	s15, r3
 8008d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d0e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008ecc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d16:	4b6a      	ldr	r3, [pc, #424]	; (8008ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d1e:	ee07 3a90 	vmov	s15, r3
 8008d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d26:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d2a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d46:	e065      	b.n	8008e14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	ee07 3a90 	vmov	s15, r3
 8008d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d52:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d5a:	4b59      	ldr	r3, [pc, #356]	; (8008ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d62:	ee07 3a90 	vmov	s15, r3
 8008d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d6e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d8a:	e043      	b.n	8008e14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	ee07 3a90 	vmov	s15, r3
 8008d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d96:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d9e:	4b48      	ldr	r3, [pc, #288]	; (8008ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008da6:	ee07 3a90 	vmov	s15, r3
 8008daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dae:	ed97 6a03 	vldr	s12, [r7, #12]
 8008db2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008db6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008dce:	e021      	b.n	8008e14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	ee07 3a90 	vmov	s15, r3
 8008dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dda:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008dde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008de2:	4b37      	ldr	r3, [pc, #220]	; (8008ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008de6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dea:	ee07 3a90 	vmov	s15, r3
 8008dee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008df2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008df6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008dfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e12:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008e14:	4b2a      	ldr	r3, [pc, #168]	; (8008ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e18:	0a5b      	lsrs	r3, r3, #9
 8008e1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e1e:	ee07 3a90 	vmov	s15, r3
 8008e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e3a:	ee17 2a90 	vmov	r2, s15
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008e42:	4b1f      	ldr	r3, [pc, #124]	; (8008ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e46:	0c1b      	lsrs	r3, r3, #16
 8008e48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e4c:	ee07 3a90 	vmov	s15, r3
 8008e50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e58:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e68:	ee17 2a90 	vmov	r2, s15
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008e70:	4b13      	ldr	r3, [pc, #76]	; (8008ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e74:	0e1b      	lsrs	r3, r3, #24
 8008e76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e7a:	ee07 3a90 	vmov	s15, r3
 8008e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e96:	ee17 2a90 	vmov	r2, s15
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008e9e:	e008      	b.n	8008eb2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	609a      	str	r2, [r3, #8]
}
 8008eb2:	bf00      	nop
 8008eb4:	3724      	adds	r7, #36	; 0x24
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr
 8008ebe:	bf00      	nop
 8008ec0:	58024400 	.word	0x58024400
 8008ec4:	03d09000 	.word	0x03d09000
 8008ec8:	46000000 	.word	0x46000000
 8008ecc:	4c742400 	.word	0x4c742400
 8008ed0:	4a742400 	.word	0x4a742400
 8008ed4:	4af42400 	.word	0x4af42400

08008ed8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b089      	sub	sp, #36	; 0x24
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008ee0:	4ba1      	ldr	r3, [pc, #644]	; (8009168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ee4:	f003 0303 	and.w	r3, r3, #3
 8008ee8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008eea:	4b9f      	ldr	r3, [pc, #636]	; (8009168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eee:	0d1b      	lsrs	r3, r3, #20
 8008ef0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ef4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008ef6:	4b9c      	ldr	r3, [pc, #624]	; (8009168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008efa:	0a1b      	lsrs	r3, r3, #8
 8008efc:	f003 0301 	and.w	r3, r3, #1
 8008f00:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008f02:	4b99      	ldr	r3, [pc, #612]	; (8009168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f06:	08db      	lsrs	r3, r3, #3
 8008f08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008f0c:	693a      	ldr	r2, [r7, #16]
 8008f0e:	fb02 f303 	mul.w	r3, r2, r3
 8008f12:	ee07 3a90 	vmov	s15, r3
 8008f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f1a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	f000 8111 	beq.w	8009148 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008f26:	69bb      	ldr	r3, [r7, #24]
 8008f28:	2b02      	cmp	r3, #2
 8008f2a:	f000 8083 	beq.w	8009034 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008f2e:	69bb      	ldr	r3, [r7, #24]
 8008f30:	2b02      	cmp	r3, #2
 8008f32:	f200 80a1 	bhi.w	8009078 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008f36:	69bb      	ldr	r3, [r7, #24]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d003      	beq.n	8008f44 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008f3c:	69bb      	ldr	r3, [r7, #24]
 8008f3e:	2b01      	cmp	r3, #1
 8008f40:	d056      	beq.n	8008ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008f42:	e099      	b.n	8009078 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f44:	4b88      	ldr	r3, [pc, #544]	; (8009168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f003 0320 	and.w	r3, r3, #32
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d02d      	beq.n	8008fac <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f50:	4b85      	ldr	r3, [pc, #532]	; (8009168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	08db      	lsrs	r3, r3, #3
 8008f56:	f003 0303 	and.w	r3, r3, #3
 8008f5a:	4a84      	ldr	r2, [pc, #528]	; (800916c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8008f60:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	ee07 3a90 	vmov	s15, r3
 8008f68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	ee07 3a90 	vmov	s15, r3
 8008f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f7a:	4b7b      	ldr	r3, [pc, #492]	; (8009168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f82:	ee07 3a90 	vmov	s15, r3
 8008f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f8e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009170 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fa6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008faa:	e087      	b.n	80090bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	ee07 3a90 	vmov	s15, r3
 8008fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fb6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009174 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fbe:	4b6a      	ldr	r3, [pc, #424]	; (8009168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fc6:	ee07 3a90 	vmov	s15, r3
 8008fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fce:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fd2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009170 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008fee:	e065      	b.n	80090bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	ee07 3a90 	vmov	s15, r3
 8008ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ffa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009178 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008ffe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009002:	4b59      	ldr	r3, [pc, #356]	; (8009168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800900a:	ee07 3a90 	vmov	s15, r3
 800900e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009012:	ed97 6a03 	vldr	s12, [r7, #12]
 8009016:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009170 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800901a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800901e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009022:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800902a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800902e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009032:	e043      	b.n	80090bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	ee07 3a90 	vmov	s15, r3
 800903a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800903e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800917c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009042:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009046:	4b48      	ldr	r3, [pc, #288]	; (8009168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800904a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800904e:	ee07 3a90 	vmov	s15, r3
 8009052:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009056:	ed97 6a03 	vldr	s12, [r7, #12]
 800905a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009170 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800905e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009062:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009066:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800906a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800906e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009072:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009076:	e021      	b.n	80090bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	ee07 3a90 	vmov	s15, r3
 800907e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009082:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009178 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800908a:	4b37      	ldr	r3, [pc, #220]	; (8009168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800908c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800908e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009092:	ee07 3a90 	vmov	s15, r3
 8009096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800909a:	ed97 6a03 	vldr	s12, [r7, #12]
 800909e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009170 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80090a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090ba:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80090bc:	4b2a      	ldr	r3, [pc, #168]	; (8009168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090c0:	0a5b      	lsrs	r3, r3, #9
 80090c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090c6:	ee07 3a90 	vmov	s15, r3
 80090ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80090d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80090d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80090da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090e2:	ee17 2a90 	vmov	r2, s15
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80090ea:	4b1f      	ldr	r3, [pc, #124]	; (8009168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ee:	0c1b      	lsrs	r3, r3, #16
 80090f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090f4:	ee07 3a90 	vmov	s15, r3
 80090f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009100:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009104:	edd7 6a07 	vldr	s13, [r7, #28]
 8009108:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800910c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009110:	ee17 2a90 	vmov	r2, s15
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009118:	4b13      	ldr	r3, [pc, #76]	; (8009168 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800911a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800911c:	0e1b      	lsrs	r3, r3, #24
 800911e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009122:	ee07 3a90 	vmov	s15, r3
 8009126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800912a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800912e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009132:	edd7 6a07 	vldr	s13, [r7, #28]
 8009136:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800913a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800913e:	ee17 2a90 	vmov	r2, s15
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009146:	e008      	b.n	800915a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2200      	movs	r2, #0
 800914c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2200      	movs	r2, #0
 8009152:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2200      	movs	r2, #0
 8009158:	609a      	str	r2, [r3, #8]
}
 800915a:	bf00      	nop
 800915c:	3724      	adds	r7, #36	; 0x24
 800915e:	46bd      	mov	sp, r7
 8009160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009164:	4770      	bx	lr
 8009166:	bf00      	nop
 8009168:	58024400 	.word	0x58024400
 800916c:	03d09000 	.word	0x03d09000
 8009170:	46000000 	.word	0x46000000
 8009174:	4c742400 	.word	0x4c742400
 8009178:	4a742400 	.word	0x4a742400
 800917c:	4af42400 	.word	0x4af42400

08009180 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b084      	sub	sp, #16
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
 8009188:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800918a:	2300      	movs	r3, #0
 800918c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800918e:	4b53      	ldr	r3, [pc, #332]	; (80092dc <RCCEx_PLL2_Config+0x15c>)
 8009190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009192:	f003 0303 	and.w	r3, r3, #3
 8009196:	2b03      	cmp	r3, #3
 8009198:	d101      	bne.n	800919e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800919a:	2301      	movs	r3, #1
 800919c:	e099      	b.n	80092d2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800919e:	4b4f      	ldr	r3, [pc, #316]	; (80092dc <RCCEx_PLL2_Config+0x15c>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4a4e      	ldr	r2, [pc, #312]	; (80092dc <RCCEx_PLL2_Config+0x15c>)
 80091a4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80091a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091aa:	f7f8 fe2d 	bl	8001e08 <HAL_GetTick>
 80091ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80091b0:	e008      	b.n	80091c4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80091b2:	f7f8 fe29 	bl	8001e08 <HAL_GetTick>
 80091b6:	4602      	mov	r2, r0
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	1ad3      	subs	r3, r2, r3
 80091bc:	2b02      	cmp	r3, #2
 80091be:	d901      	bls.n	80091c4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80091c0:	2303      	movs	r3, #3
 80091c2:	e086      	b.n	80092d2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80091c4:	4b45      	ldr	r3, [pc, #276]	; (80092dc <RCCEx_PLL2_Config+0x15c>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d1f0      	bne.n	80091b2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80091d0:	4b42      	ldr	r3, [pc, #264]	; (80092dc <RCCEx_PLL2_Config+0x15c>)
 80091d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091d4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	031b      	lsls	r3, r3, #12
 80091de:	493f      	ldr	r1, [pc, #252]	; (80092dc <RCCEx_PLL2_Config+0x15c>)
 80091e0:	4313      	orrs	r3, r2
 80091e2:	628b      	str	r3, [r1, #40]	; 0x28
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	685b      	ldr	r3, [r3, #4]
 80091e8:	3b01      	subs	r3, #1
 80091ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	689b      	ldr	r3, [r3, #8]
 80091f2:	3b01      	subs	r3, #1
 80091f4:	025b      	lsls	r3, r3, #9
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	431a      	orrs	r2, r3
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	68db      	ldr	r3, [r3, #12]
 80091fe:	3b01      	subs	r3, #1
 8009200:	041b      	lsls	r3, r3, #16
 8009202:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009206:	431a      	orrs	r2, r3
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	691b      	ldr	r3, [r3, #16]
 800920c:	3b01      	subs	r3, #1
 800920e:	061b      	lsls	r3, r3, #24
 8009210:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009214:	4931      	ldr	r1, [pc, #196]	; (80092dc <RCCEx_PLL2_Config+0x15c>)
 8009216:	4313      	orrs	r3, r2
 8009218:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800921a:	4b30      	ldr	r3, [pc, #192]	; (80092dc <RCCEx_PLL2_Config+0x15c>)
 800921c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800921e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	695b      	ldr	r3, [r3, #20]
 8009226:	492d      	ldr	r1, [pc, #180]	; (80092dc <RCCEx_PLL2_Config+0x15c>)
 8009228:	4313      	orrs	r3, r2
 800922a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800922c:	4b2b      	ldr	r3, [pc, #172]	; (80092dc <RCCEx_PLL2_Config+0x15c>)
 800922e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009230:	f023 0220 	bic.w	r2, r3, #32
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	699b      	ldr	r3, [r3, #24]
 8009238:	4928      	ldr	r1, [pc, #160]	; (80092dc <RCCEx_PLL2_Config+0x15c>)
 800923a:	4313      	orrs	r3, r2
 800923c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800923e:	4b27      	ldr	r3, [pc, #156]	; (80092dc <RCCEx_PLL2_Config+0x15c>)
 8009240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009242:	4a26      	ldr	r2, [pc, #152]	; (80092dc <RCCEx_PLL2_Config+0x15c>)
 8009244:	f023 0310 	bic.w	r3, r3, #16
 8009248:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800924a:	4b24      	ldr	r3, [pc, #144]	; (80092dc <RCCEx_PLL2_Config+0x15c>)
 800924c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800924e:	4b24      	ldr	r3, [pc, #144]	; (80092e0 <RCCEx_PLL2_Config+0x160>)
 8009250:	4013      	ands	r3, r2
 8009252:	687a      	ldr	r2, [r7, #4]
 8009254:	69d2      	ldr	r2, [r2, #28]
 8009256:	00d2      	lsls	r2, r2, #3
 8009258:	4920      	ldr	r1, [pc, #128]	; (80092dc <RCCEx_PLL2_Config+0x15c>)
 800925a:	4313      	orrs	r3, r2
 800925c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800925e:	4b1f      	ldr	r3, [pc, #124]	; (80092dc <RCCEx_PLL2_Config+0x15c>)
 8009260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009262:	4a1e      	ldr	r2, [pc, #120]	; (80092dc <RCCEx_PLL2_Config+0x15c>)
 8009264:	f043 0310 	orr.w	r3, r3, #16
 8009268:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d106      	bne.n	800927e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009270:	4b1a      	ldr	r3, [pc, #104]	; (80092dc <RCCEx_PLL2_Config+0x15c>)
 8009272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009274:	4a19      	ldr	r2, [pc, #100]	; (80092dc <RCCEx_PLL2_Config+0x15c>)
 8009276:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800927a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800927c:	e00f      	b.n	800929e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	2b01      	cmp	r3, #1
 8009282:	d106      	bne.n	8009292 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009284:	4b15      	ldr	r3, [pc, #84]	; (80092dc <RCCEx_PLL2_Config+0x15c>)
 8009286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009288:	4a14      	ldr	r2, [pc, #80]	; (80092dc <RCCEx_PLL2_Config+0x15c>)
 800928a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800928e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009290:	e005      	b.n	800929e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009292:	4b12      	ldr	r3, [pc, #72]	; (80092dc <RCCEx_PLL2_Config+0x15c>)
 8009294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009296:	4a11      	ldr	r2, [pc, #68]	; (80092dc <RCCEx_PLL2_Config+0x15c>)
 8009298:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800929c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800929e:	4b0f      	ldr	r3, [pc, #60]	; (80092dc <RCCEx_PLL2_Config+0x15c>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	4a0e      	ldr	r2, [pc, #56]	; (80092dc <RCCEx_PLL2_Config+0x15c>)
 80092a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80092a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092aa:	f7f8 fdad 	bl	8001e08 <HAL_GetTick>
 80092ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80092b0:	e008      	b.n	80092c4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80092b2:	f7f8 fda9 	bl	8001e08 <HAL_GetTick>
 80092b6:	4602      	mov	r2, r0
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	1ad3      	subs	r3, r2, r3
 80092bc:	2b02      	cmp	r3, #2
 80092be:	d901      	bls.n	80092c4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80092c0:	2303      	movs	r3, #3
 80092c2:	e006      	b.n	80092d2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80092c4:	4b05      	ldr	r3, [pc, #20]	; (80092dc <RCCEx_PLL2_Config+0x15c>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d0f0      	beq.n	80092b2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80092d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3710      	adds	r7, #16
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}
 80092da:	bf00      	nop
 80092dc:	58024400 	.word	0x58024400
 80092e0:	ffff0007 	.word	0xffff0007

080092e4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b084      	sub	sp, #16
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80092ee:	2300      	movs	r3, #0
 80092f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80092f2:	4b53      	ldr	r3, [pc, #332]	; (8009440 <RCCEx_PLL3_Config+0x15c>)
 80092f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092f6:	f003 0303 	and.w	r3, r3, #3
 80092fa:	2b03      	cmp	r3, #3
 80092fc:	d101      	bne.n	8009302 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80092fe:	2301      	movs	r3, #1
 8009300:	e099      	b.n	8009436 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009302:	4b4f      	ldr	r3, [pc, #316]	; (8009440 <RCCEx_PLL3_Config+0x15c>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4a4e      	ldr	r2, [pc, #312]	; (8009440 <RCCEx_PLL3_Config+0x15c>)
 8009308:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800930c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800930e:	f7f8 fd7b 	bl	8001e08 <HAL_GetTick>
 8009312:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009314:	e008      	b.n	8009328 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009316:	f7f8 fd77 	bl	8001e08 <HAL_GetTick>
 800931a:	4602      	mov	r2, r0
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	1ad3      	subs	r3, r2, r3
 8009320:	2b02      	cmp	r3, #2
 8009322:	d901      	bls.n	8009328 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009324:	2303      	movs	r3, #3
 8009326:	e086      	b.n	8009436 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009328:	4b45      	ldr	r3, [pc, #276]	; (8009440 <RCCEx_PLL3_Config+0x15c>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009330:	2b00      	cmp	r3, #0
 8009332:	d1f0      	bne.n	8009316 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009334:	4b42      	ldr	r3, [pc, #264]	; (8009440 <RCCEx_PLL3_Config+0x15c>)
 8009336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009338:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	051b      	lsls	r3, r3, #20
 8009342:	493f      	ldr	r1, [pc, #252]	; (8009440 <RCCEx_PLL3_Config+0x15c>)
 8009344:	4313      	orrs	r3, r2
 8009346:	628b      	str	r3, [r1, #40]	; 0x28
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	3b01      	subs	r3, #1
 800934e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	689b      	ldr	r3, [r3, #8]
 8009356:	3b01      	subs	r3, #1
 8009358:	025b      	lsls	r3, r3, #9
 800935a:	b29b      	uxth	r3, r3
 800935c:	431a      	orrs	r2, r3
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	68db      	ldr	r3, [r3, #12]
 8009362:	3b01      	subs	r3, #1
 8009364:	041b      	lsls	r3, r3, #16
 8009366:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800936a:	431a      	orrs	r2, r3
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	691b      	ldr	r3, [r3, #16]
 8009370:	3b01      	subs	r3, #1
 8009372:	061b      	lsls	r3, r3, #24
 8009374:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009378:	4931      	ldr	r1, [pc, #196]	; (8009440 <RCCEx_PLL3_Config+0x15c>)
 800937a:	4313      	orrs	r3, r2
 800937c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800937e:	4b30      	ldr	r3, [pc, #192]	; (8009440 <RCCEx_PLL3_Config+0x15c>)
 8009380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009382:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	695b      	ldr	r3, [r3, #20]
 800938a:	492d      	ldr	r1, [pc, #180]	; (8009440 <RCCEx_PLL3_Config+0x15c>)
 800938c:	4313      	orrs	r3, r2
 800938e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009390:	4b2b      	ldr	r3, [pc, #172]	; (8009440 <RCCEx_PLL3_Config+0x15c>)
 8009392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009394:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	699b      	ldr	r3, [r3, #24]
 800939c:	4928      	ldr	r1, [pc, #160]	; (8009440 <RCCEx_PLL3_Config+0x15c>)
 800939e:	4313      	orrs	r3, r2
 80093a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80093a2:	4b27      	ldr	r3, [pc, #156]	; (8009440 <RCCEx_PLL3_Config+0x15c>)
 80093a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093a6:	4a26      	ldr	r2, [pc, #152]	; (8009440 <RCCEx_PLL3_Config+0x15c>)
 80093a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80093ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80093ae:	4b24      	ldr	r3, [pc, #144]	; (8009440 <RCCEx_PLL3_Config+0x15c>)
 80093b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093b2:	4b24      	ldr	r3, [pc, #144]	; (8009444 <RCCEx_PLL3_Config+0x160>)
 80093b4:	4013      	ands	r3, r2
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	69d2      	ldr	r2, [r2, #28]
 80093ba:	00d2      	lsls	r2, r2, #3
 80093bc:	4920      	ldr	r1, [pc, #128]	; (8009440 <RCCEx_PLL3_Config+0x15c>)
 80093be:	4313      	orrs	r3, r2
 80093c0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80093c2:	4b1f      	ldr	r3, [pc, #124]	; (8009440 <RCCEx_PLL3_Config+0x15c>)
 80093c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093c6:	4a1e      	ldr	r2, [pc, #120]	; (8009440 <RCCEx_PLL3_Config+0x15c>)
 80093c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d106      	bne.n	80093e2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80093d4:	4b1a      	ldr	r3, [pc, #104]	; (8009440 <RCCEx_PLL3_Config+0x15c>)
 80093d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093d8:	4a19      	ldr	r2, [pc, #100]	; (8009440 <RCCEx_PLL3_Config+0x15c>)
 80093da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80093de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80093e0:	e00f      	b.n	8009402 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	d106      	bne.n	80093f6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80093e8:	4b15      	ldr	r3, [pc, #84]	; (8009440 <RCCEx_PLL3_Config+0x15c>)
 80093ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ec:	4a14      	ldr	r2, [pc, #80]	; (8009440 <RCCEx_PLL3_Config+0x15c>)
 80093ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80093f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80093f4:	e005      	b.n	8009402 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80093f6:	4b12      	ldr	r3, [pc, #72]	; (8009440 <RCCEx_PLL3_Config+0x15c>)
 80093f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093fa:	4a11      	ldr	r2, [pc, #68]	; (8009440 <RCCEx_PLL3_Config+0x15c>)
 80093fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009400:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009402:	4b0f      	ldr	r3, [pc, #60]	; (8009440 <RCCEx_PLL3_Config+0x15c>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4a0e      	ldr	r2, [pc, #56]	; (8009440 <RCCEx_PLL3_Config+0x15c>)
 8009408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800940c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800940e:	f7f8 fcfb 	bl	8001e08 <HAL_GetTick>
 8009412:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009414:	e008      	b.n	8009428 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009416:	f7f8 fcf7 	bl	8001e08 <HAL_GetTick>
 800941a:	4602      	mov	r2, r0
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	1ad3      	subs	r3, r2, r3
 8009420:	2b02      	cmp	r3, #2
 8009422:	d901      	bls.n	8009428 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009424:	2303      	movs	r3, #3
 8009426:	e006      	b.n	8009436 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009428:	4b05      	ldr	r3, [pc, #20]	; (8009440 <RCCEx_PLL3_Config+0x15c>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009430:	2b00      	cmp	r3, #0
 8009432:	d0f0      	beq.n	8009416 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009434:	7bfb      	ldrb	r3, [r7, #15]
}
 8009436:	4618      	mov	r0, r3
 8009438:	3710      	adds	r7, #16
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
 800943e:	bf00      	nop
 8009440:	58024400 	.word	0x58024400
 8009444:	ffff0007 	.word	0xffff0007

08009448 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b082      	sub	sp, #8
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d101      	bne.n	800945a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009456:	2301      	movs	r3, #1
 8009458:	e049      	b.n	80094ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009460:	b2db      	uxtb	r3, r3
 8009462:	2b00      	cmp	r3, #0
 8009464:	d106      	bne.n	8009474 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2200      	movs	r2, #0
 800946a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f000 f841 	bl	80094f6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2202      	movs	r2, #2
 8009478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681a      	ldr	r2, [r3, #0]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	3304      	adds	r3, #4
 8009484:	4619      	mov	r1, r3
 8009486:	4610      	mov	r0, r2
 8009488:	f000 fa00 	bl	800988c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2201      	movs	r2, #1
 8009490:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2201      	movs	r2, #1
 8009498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2201      	movs	r2, #1
 80094a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2201      	movs	r2, #1
 80094a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2201      	movs	r2, #1
 80094b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2201      	movs	r2, #1
 80094b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2201      	movs	r2, #1
 80094c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2201      	movs	r2, #1
 80094c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2201      	movs	r2, #1
 80094d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2201      	movs	r2, #1
 80094d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2201      	movs	r2, #1
 80094e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2201      	movs	r2, #1
 80094e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80094ec:	2300      	movs	r3, #0
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3708      	adds	r7, #8
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}

080094f6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80094f6:	b480      	push	{r7}
 80094f8:	b083      	sub	sp, #12
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80094fe:	bf00      	nop
 8009500:	370c      	adds	r7, #12
 8009502:	46bd      	mov	sp, r7
 8009504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009508:	4770      	bx	lr
	...

0800950c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800950c:	b480      	push	{r7}
 800950e:	b085      	sub	sp, #20
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800951a:	b2db      	uxtb	r3, r3
 800951c:	2b01      	cmp	r3, #1
 800951e:	d001      	beq.n	8009524 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009520:	2301      	movs	r3, #1
 8009522:	e054      	b.n	80095ce <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2202      	movs	r2, #2
 8009528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	68da      	ldr	r2, [r3, #12]
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f042 0201 	orr.w	r2, r2, #1
 800953a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4a26      	ldr	r2, [pc, #152]	; (80095dc <HAL_TIM_Base_Start_IT+0xd0>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d022      	beq.n	800958c <HAL_TIM_Base_Start_IT+0x80>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800954e:	d01d      	beq.n	800958c <HAL_TIM_Base_Start_IT+0x80>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	4a22      	ldr	r2, [pc, #136]	; (80095e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d018      	beq.n	800958c <HAL_TIM_Base_Start_IT+0x80>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	4a21      	ldr	r2, [pc, #132]	; (80095e4 <HAL_TIM_Base_Start_IT+0xd8>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d013      	beq.n	800958c <HAL_TIM_Base_Start_IT+0x80>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a1f      	ldr	r2, [pc, #124]	; (80095e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d00e      	beq.n	800958c <HAL_TIM_Base_Start_IT+0x80>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	4a1e      	ldr	r2, [pc, #120]	; (80095ec <HAL_TIM_Base_Start_IT+0xe0>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d009      	beq.n	800958c <HAL_TIM_Base_Start_IT+0x80>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4a1c      	ldr	r2, [pc, #112]	; (80095f0 <HAL_TIM_Base_Start_IT+0xe4>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d004      	beq.n	800958c <HAL_TIM_Base_Start_IT+0x80>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4a1b      	ldr	r2, [pc, #108]	; (80095f4 <HAL_TIM_Base_Start_IT+0xe8>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d115      	bne.n	80095b8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	689a      	ldr	r2, [r3, #8]
 8009592:	4b19      	ldr	r3, [pc, #100]	; (80095f8 <HAL_TIM_Base_Start_IT+0xec>)
 8009594:	4013      	ands	r3, r2
 8009596:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	2b06      	cmp	r3, #6
 800959c:	d015      	beq.n	80095ca <HAL_TIM_Base_Start_IT+0xbe>
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095a4:	d011      	beq.n	80095ca <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	681a      	ldr	r2, [r3, #0]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f042 0201 	orr.w	r2, r2, #1
 80095b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095b6:	e008      	b.n	80095ca <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	681a      	ldr	r2, [r3, #0]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f042 0201 	orr.w	r2, r2, #1
 80095c6:	601a      	str	r2, [r3, #0]
 80095c8:	e000      	b.n	80095cc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80095cc:	2300      	movs	r3, #0
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3714      	adds	r7, #20
 80095d2:	46bd      	mov	sp, r7
 80095d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d8:	4770      	bx	lr
 80095da:	bf00      	nop
 80095dc:	40010000 	.word	0x40010000
 80095e0:	40000400 	.word	0x40000400
 80095e4:	40000800 	.word	0x40000800
 80095e8:	40000c00 	.word	0x40000c00
 80095ec:	40010400 	.word	0x40010400
 80095f0:	40001800 	.word	0x40001800
 80095f4:	40014000 	.word	0x40014000
 80095f8:	00010007 	.word	0x00010007

080095fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b082      	sub	sp, #8
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	691b      	ldr	r3, [r3, #16]
 800960a:	f003 0302 	and.w	r3, r3, #2
 800960e:	2b02      	cmp	r3, #2
 8009610:	d122      	bne.n	8009658 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	68db      	ldr	r3, [r3, #12]
 8009618:	f003 0302 	and.w	r3, r3, #2
 800961c:	2b02      	cmp	r3, #2
 800961e:	d11b      	bne.n	8009658 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f06f 0202 	mvn.w	r2, #2
 8009628:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2201      	movs	r2, #1
 800962e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	699b      	ldr	r3, [r3, #24]
 8009636:	f003 0303 	and.w	r3, r3, #3
 800963a:	2b00      	cmp	r3, #0
 800963c:	d003      	beq.n	8009646 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f000 f905 	bl	800984e <HAL_TIM_IC_CaptureCallback>
 8009644:	e005      	b.n	8009652 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f000 f8f7 	bl	800983a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f000 f908 	bl	8009862 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2200      	movs	r2, #0
 8009656:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	691b      	ldr	r3, [r3, #16]
 800965e:	f003 0304 	and.w	r3, r3, #4
 8009662:	2b04      	cmp	r3, #4
 8009664:	d122      	bne.n	80096ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	68db      	ldr	r3, [r3, #12]
 800966c:	f003 0304 	and.w	r3, r3, #4
 8009670:	2b04      	cmp	r3, #4
 8009672:	d11b      	bne.n	80096ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f06f 0204 	mvn.w	r2, #4
 800967c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2202      	movs	r2, #2
 8009682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	699b      	ldr	r3, [r3, #24]
 800968a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800968e:	2b00      	cmp	r3, #0
 8009690:	d003      	beq.n	800969a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f000 f8db 	bl	800984e <HAL_TIM_IC_CaptureCallback>
 8009698:	e005      	b.n	80096a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f000 f8cd 	bl	800983a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f000 f8de 	bl	8009862 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2200      	movs	r2, #0
 80096aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	691b      	ldr	r3, [r3, #16]
 80096b2:	f003 0308 	and.w	r3, r3, #8
 80096b6:	2b08      	cmp	r3, #8
 80096b8:	d122      	bne.n	8009700 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	68db      	ldr	r3, [r3, #12]
 80096c0:	f003 0308 	and.w	r3, r3, #8
 80096c4:	2b08      	cmp	r3, #8
 80096c6:	d11b      	bne.n	8009700 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f06f 0208 	mvn.w	r2, #8
 80096d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2204      	movs	r2, #4
 80096d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	69db      	ldr	r3, [r3, #28]
 80096de:	f003 0303 	and.w	r3, r3, #3
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d003      	beq.n	80096ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f000 f8b1 	bl	800984e <HAL_TIM_IC_CaptureCallback>
 80096ec:	e005      	b.n	80096fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f000 f8a3 	bl	800983a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f000 f8b4 	bl	8009862 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2200      	movs	r2, #0
 80096fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	691b      	ldr	r3, [r3, #16]
 8009706:	f003 0310 	and.w	r3, r3, #16
 800970a:	2b10      	cmp	r3, #16
 800970c:	d122      	bne.n	8009754 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	68db      	ldr	r3, [r3, #12]
 8009714:	f003 0310 	and.w	r3, r3, #16
 8009718:	2b10      	cmp	r3, #16
 800971a:	d11b      	bne.n	8009754 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f06f 0210 	mvn.w	r2, #16
 8009724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2208      	movs	r2, #8
 800972a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	69db      	ldr	r3, [r3, #28]
 8009732:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009736:	2b00      	cmp	r3, #0
 8009738:	d003      	beq.n	8009742 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f000 f887 	bl	800984e <HAL_TIM_IC_CaptureCallback>
 8009740:	e005      	b.n	800974e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 f879 	bl	800983a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f000 f88a 	bl	8009862 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2200      	movs	r2, #0
 8009752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	691b      	ldr	r3, [r3, #16]
 800975a:	f003 0301 	and.w	r3, r3, #1
 800975e:	2b01      	cmp	r3, #1
 8009760:	d10e      	bne.n	8009780 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	68db      	ldr	r3, [r3, #12]
 8009768:	f003 0301 	and.w	r3, r3, #1
 800976c:	2b01      	cmp	r3, #1
 800976e:	d107      	bne.n	8009780 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f06f 0201 	mvn.w	r2, #1
 8009778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f7f7 fe3c 	bl	80013f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	691b      	ldr	r3, [r3, #16]
 8009786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800978a:	2b80      	cmp	r3, #128	; 0x80
 800978c:	d10e      	bne.n	80097ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	68db      	ldr	r3, [r3, #12]
 8009794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009798:	2b80      	cmp	r3, #128	; 0x80
 800979a:	d107      	bne.n	80097ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80097a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f000 f914 	bl	80099d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	691b      	ldr	r3, [r3, #16]
 80097b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097ba:	d10e      	bne.n	80097da <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	68db      	ldr	r3, [r3, #12]
 80097c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097c6:	2b80      	cmp	r3, #128	; 0x80
 80097c8:	d107      	bne.n	80097da <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80097d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f000 f907 	bl	80099e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	691b      	ldr	r3, [r3, #16]
 80097e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097e4:	2b40      	cmp	r3, #64	; 0x40
 80097e6:	d10e      	bne.n	8009806 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	68db      	ldr	r3, [r3, #12]
 80097ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097f2:	2b40      	cmp	r3, #64	; 0x40
 80097f4:	d107      	bne.n	8009806 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80097fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f000 f838 	bl	8009876 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	691b      	ldr	r3, [r3, #16]
 800980c:	f003 0320 	and.w	r3, r3, #32
 8009810:	2b20      	cmp	r3, #32
 8009812:	d10e      	bne.n	8009832 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	68db      	ldr	r3, [r3, #12]
 800981a:	f003 0320 	and.w	r3, r3, #32
 800981e:	2b20      	cmp	r3, #32
 8009820:	d107      	bne.n	8009832 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f06f 0220 	mvn.w	r2, #32
 800982a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f000 f8c7 	bl	80099c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009832:	bf00      	nop
 8009834:	3708      	adds	r7, #8
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}

0800983a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800983a:	b480      	push	{r7}
 800983c:	b083      	sub	sp, #12
 800983e:	af00      	add	r7, sp, #0
 8009840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009842:	bf00      	nop
 8009844:	370c      	adds	r7, #12
 8009846:	46bd      	mov	sp, r7
 8009848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984c:	4770      	bx	lr

0800984e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800984e:	b480      	push	{r7}
 8009850:	b083      	sub	sp, #12
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009856:	bf00      	nop
 8009858:	370c      	adds	r7, #12
 800985a:	46bd      	mov	sp, r7
 800985c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009860:	4770      	bx	lr

08009862 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009862:	b480      	push	{r7}
 8009864:	b083      	sub	sp, #12
 8009866:	af00      	add	r7, sp, #0
 8009868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800986a:	bf00      	nop
 800986c:	370c      	adds	r7, #12
 800986e:	46bd      	mov	sp, r7
 8009870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009874:	4770      	bx	lr

08009876 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009876:	b480      	push	{r7}
 8009878:	b083      	sub	sp, #12
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800987e:	bf00      	nop
 8009880:	370c      	adds	r7, #12
 8009882:	46bd      	mov	sp, r7
 8009884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009888:	4770      	bx	lr
	...

0800988c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800988c:	b480      	push	{r7}
 800988e:	b085      	sub	sp, #20
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	4a40      	ldr	r2, [pc, #256]	; (80099a0 <TIM_Base_SetConfig+0x114>)
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d013      	beq.n	80098cc <TIM_Base_SetConfig+0x40>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098aa:	d00f      	beq.n	80098cc <TIM_Base_SetConfig+0x40>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	4a3d      	ldr	r2, [pc, #244]	; (80099a4 <TIM_Base_SetConfig+0x118>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d00b      	beq.n	80098cc <TIM_Base_SetConfig+0x40>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	4a3c      	ldr	r2, [pc, #240]	; (80099a8 <TIM_Base_SetConfig+0x11c>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d007      	beq.n	80098cc <TIM_Base_SetConfig+0x40>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	4a3b      	ldr	r2, [pc, #236]	; (80099ac <TIM_Base_SetConfig+0x120>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d003      	beq.n	80098cc <TIM_Base_SetConfig+0x40>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	4a3a      	ldr	r2, [pc, #232]	; (80099b0 <TIM_Base_SetConfig+0x124>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d108      	bne.n	80098de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	685b      	ldr	r3, [r3, #4]
 80098d8:	68fa      	ldr	r2, [r7, #12]
 80098da:	4313      	orrs	r3, r2
 80098dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	4a2f      	ldr	r2, [pc, #188]	; (80099a0 <TIM_Base_SetConfig+0x114>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d01f      	beq.n	8009926 <TIM_Base_SetConfig+0x9a>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098ec:	d01b      	beq.n	8009926 <TIM_Base_SetConfig+0x9a>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	4a2c      	ldr	r2, [pc, #176]	; (80099a4 <TIM_Base_SetConfig+0x118>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d017      	beq.n	8009926 <TIM_Base_SetConfig+0x9a>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	4a2b      	ldr	r2, [pc, #172]	; (80099a8 <TIM_Base_SetConfig+0x11c>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d013      	beq.n	8009926 <TIM_Base_SetConfig+0x9a>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	4a2a      	ldr	r2, [pc, #168]	; (80099ac <TIM_Base_SetConfig+0x120>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d00f      	beq.n	8009926 <TIM_Base_SetConfig+0x9a>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	4a29      	ldr	r2, [pc, #164]	; (80099b0 <TIM_Base_SetConfig+0x124>)
 800990a:	4293      	cmp	r3, r2
 800990c:	d00b      	beq.n	8009926 <TIM_Base_SetConfig+0x9a>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	4a28      	ldr	r2, [pc, #160]	; (80099b4 <TIM_Base_SetConfig+0x128>)
 8009912:	4293      	cmp	r3, r2
 8009914:	d007      	beq.n	8009926 <TIM_Base_SetConfig+0x9a>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	4a27      	ldr	r2, [pc, #156]	; (80099b8 <TIM_Base_SetConfig+0x12c>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d003      	beq.n	8009926 <TIM_Base_SetConfig+0x9a>
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	4a26      	ldr	r2, [pc, #152]	; (80099bc <TIM_Base_SetConfig+0x130>)
 8009922:	4293      	cmp	r3, r2
 8009924:	d108      	bne.n	8009938 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800992c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	68db      	ldr	r3, [r3, #12]
 8009932:	68fa      	ldr	r2, [r7, #12]
 8009934:	4313      	orrs	r3, r2
 8009936:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	695b      	ldr	r3, [r3, #20]
 8009942:	4313      	orrs	r3, r2
 8009944:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	68fa      	ldr	r2, [r7, #12]
 800994a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	689a      	ldr	r2, [r3, #8]
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	681a      	ldr	r2, [r3, #0]
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	4a10      	ldr	r2, [pc, #64]	; (80099a0 <TIM_Base_SetConfig+0x114>)
 8009960:	4293      	cmp	r3, r2
 8009962:	d00f      	beq.n	8009984 <TIM_Base_SetConfig+0xf8>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	4a12      	ldr	r2, [pc, #72]	; (80099b0 <TIM_Base_SetConfig+0x124>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d00b      	beq.n	8009984 <TIM_Base_SetConfig+0xf8>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	4a11      	ldr	r2, [pc, #68]	; (80099b4 <TIM_Base_SetConfig+0x128>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d007      	beq.n	8009984 <TIM_Base_SetConfig+0xf8>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	4a10      	ldr	r2, [pc, #64]	; (80099b8 <TIM_Base_SetConfig+0x12c>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d003      	beq.n	8009984 <TIM_Base_SetConfig+0xf8>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	4a0f      	ldr	r2, [pc, #60]	; (80099bc <TIM_Base_SetConfig+0x130>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d103      	bne.n	800998c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	691a      	ldr	r2, [r3, #16]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2201      	movs	r2, #1
 8009990:	615a      	str	r2, [r3, #20]
}
 8009992:	bf00      	nop
 8009994:	3714      	adds	r7, #20
 8009996:	46bd      	mov	sp, r7
 8009998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999c:	4770      	bx	lr
 800999e:	bf00      	nop
 80099a0:	40010000 	.word	0x40010000
 80099a4:	40000400 	.word	0x40000400
 80099a8:	40000800 	.word	0x40000800
 80099ac:	40000c00 	.word	0x40000c00
 80099b0:	40010400 	.word	0x40010400
 80099b4:	40014000 	.word	0x40014000
 80099b8:	40014400 	.word	0x40014400
 80099bc:	40014800 	.word	0x40014800

080099c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b083      	sub	sp, #12
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80099c8:	bf00      	nop
 80099ca:	370c      	adds	r7, #12
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr

080099d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80099d4:	b480      	push	{r7}
 80099d6:	b083      	sub	sp, #12
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80099dc:	bf00      	nop
 80099de:	370c      	adds	r7, #12
 80099e0:	46bd      	mov	sp, r7
 80099e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e6:	4770      	bx	lr

080099e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b083      	sub	sp, #12
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80099f0:	bf00      	nop
 80099f2:	370c      	adds	r7, #12
 80099f4:	46bd      	mov	sp, r7
 80099f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fa:	4770      	bx	lr

080099fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b082      	sub	sp, #8
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d101      	bne.n	8009a0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	e042      	b.n	8009a94 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d106      	bne.n	8009a26 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f7f7 ffa3 	bl	800196c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2224      	movs	r2, #36	; 0x24
 8009a2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	681a      	ldr	r2, [r3, #0]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f022 0201 	bic.w	r2, r2, #1
 8009a3c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f000 fdb4 	bl	800a5ac <UART_SetConfig>
 8009a44:	4603      	mov	r3, r0
 8009a46:	2b01      	cmp	r3, #1
 8009a48:	d101      	bne.n	8009a4e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	e022      	b.n	8009a94 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d002      	beq.n	8009a5c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f001 fb10 	bl	800b07c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	685a      	ldr	r2, [r3, #4]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009a6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	689a      	ldr	r2, [r3, #8]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009a7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	681a      	ldr	r2, [r3, #0]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f042 0201 	orr.w	r2, r2, #1
 8009a8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f001 fb97 	bl	800b1c0 <UART_CheckIdleState>
 8009a92:	4603      	mov	r3, r0
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3708      	adds	r7, #8
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b08a      	sub	sp, #40	; 0x28
 8009aa0:	af02      	add	r7, sp, #8
 8009aa2:	60f8      	str	r0, [r7, #12]
 8009aa4:	60b9      	str	r1, [r7, #8]
 8009aa6:	603b      	str	r3, [r7, #0]
 8009aa8:	4613      	mov	r3, r2
 8009aaa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ab2:	2b20      	cmp	r3, #32
 8009ab4:	d17b      	bne.n	8009bae <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d002      	beq.n	8009ac2 <HAL_UART_Transmit+0x26>
 8009abc:	88fb      	ldrh	r3, [r7, #6]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d101      	bne.n	8009ac6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	e074      	b.n	8009bb0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	2221      	movs	r2, #33	; 0x21
 8009ad2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009ad6:	f7f8 f997 	bl	8001e08 <HAL_GetTick>
 8009ada:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	88fa      	ldrh	r2, [r7, #6]
 8009ae0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	88fa      	ldrh	r2, [r7, #6]
 8009ae8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	689b      	ldr	r3, [r3, #8]
 8009af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009af4:	d108      	bne.n	8009b08 <HAL_UART_Transmit+0x6c>
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	691b      	ldr	r3, [r3, #16]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d104      	bne.n	8009b08 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009afe:	2300      	movs	r3, #0
 8009b00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	61bb      	str	r3, [r7, #24]
 8009b06:	e003      	b.n	8009b10 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009b10:	e030      	b.n	8009b74 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	9300      	str	r3, [sp, #0]
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	2180      	movs	r1, #128	; 0x80
 8009b1c:	68f8      	ldr	r0, [r7, #12]
 8009b1e:	f001 fbf9 	bl	800b314 <UART_WaitOnFlagUntilTimeout>
 8009b22:	4603      	mov	r3, r0
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d005      	beq.n	8009b34 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	2220      	movs	r2, #32
 8009b2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8009b30:	2303      	movs	r3, #3
 8009b32:	e03d      	b.n	8009bb0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009b34:	69fb      	ldr	r3, [r7, #28]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d10b      	bne.n	8009b52 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009b3a:	69bb      	ldr	r3, [r7, #24]
 8009b3c:	881b      	ldrh	r3, [r3, #0]
 8009b3e:	461a      	mov	r2, r3
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b48:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009b4a:	69bb      	ldr	r3, [r7, #24]
 8009b4c:	3302      	adds	r3, #2
 8009b4e:	61bb      	str	r3, [r7, #24]
 8009b50:	e007      	b.n	8009b62 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009b52:	69fb      	ldr	r3, [r7, #28]
 8009b54:	781a      	ldrb	r2, [r3, #0]
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009b5c:	69fb      	ldr	r3, [r7, #28]
 8009b5e:	3301      	adds	r3, #1
 8009b60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009b68:	b29b      	uxth	r3, r3
 8009b6a:	3b01      	subs	r3, #1
 8009b6c:	b29a      	uxth	r2, r3
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009b7a:	b29b      	uxth	r3, r3
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d1c8      	bne.n	8009b12 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	9300      	str	r3, [sp, #0]
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	2200      	movs	r2, #0
 8009b88:	2140      	movs	r1, #64	; 0x40
 8009b8a:	68f8      	ldr	r0, [r7, #12]
 8009b8c:	f001 fbc2 	bl	800b314 <UART_WaitOnFlagUntilTimeout>
 8009b90:	4603      	mov	r3, r0
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d005      	beq.n	8009ba2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2220      	movs	r2, #32
 8009b9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8009b9e:	2303      	movs	r3, #3
 8009ba0:	e006      	b.n	8009bb0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	2220      	movs	r2, #32
 8009ba6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8009baa:	2300      	movs	r3, #0
 8009bac:	e000      	b.n	8009bb0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009bae:	2302      	movs	r3, #2
  }
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3720      	adds	r7, #32
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}

08009bb8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b08a      	sub	sp, #40	; 0x28
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	60f8      	str	r0, [r7, #12]
 8009bc0:	60b9      	str	r1, [r7, #8]
 8009bc2:	4613      	mov	r3, r2
 8009bc4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bcc:	2b20      	cmp	r3, #32
 8009bce:	d137      	bne.n	8009c40 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d002      	beq.n	8009bdc <HAL_UART_Receive_IT+0x24>
 8009bd6:	88fb      	ldrh	r3, [r7, #6]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d101      	bne.n	8009be0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009bdc:	2301      	movs	r3, #1
 8009bde:	e030      	b.n	8009c42 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2200      	movs	r2, #0
 8009be4:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	4a18      	ldr	r2, [pc, #96]	; (8009c4c <HAL_UART_Receive_IT+0x94>)
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d01f      	beq.n	8009c30 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	685b      	ldr	r3, [r3, #4]
 8009bf6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d018      	beq.n	8009c30 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	e853 3f00 	ldrex	r3, [r3]
 8009c0a:	613b      	str	r3, [r7, #16]
   return(result);
 8009c0c:	693b      	ldr	r3, [r7, #16]
 8009c0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009c12:	627b      	str	r3, [r7, #36]	; 0x24
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	461a      	mov	r2, r3
 8009c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c1c:	623b      	str	r3, [r7, #32]
 8009c1e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c20:	69f9      	ldr	r1, [r7, #28]
 8009c22:	6a3a      	ldr	r2, [r7, #32]
 8009c24:	e841 2300 	strex	r3, r2, [r1]
 8009c28:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c2a:	69bb      	ldr	r3, [r7, #24]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d1e6      	bne.n	8009bfe <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009c30:	88fb      	ldrh	r3, [r7, #6]
 8009c32:	461a      	mov	r2, r3
 8009c34:	68b9      	ldr	r1, [r7, #8]
 8009c36:	68f8      	ldr	r0, [r7, #12]
 8009c38:	f001 fbd4 	bl	800b3e4 <UART_Start_Receive_IT>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	e000      	b.n	8009c42 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009c40:	2302      	movs	r3, #2
  }
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3728      	adds	r7, #40	; 0x28
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}
 8009c4a:	bf00      	nop
 8009c4c:	58000c00 	.word	0x58000c00

08009c50 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b08a      	sub	sp, #40	; 0x28
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	60f8      	str	r0, [r7, #12]
 8009c58:	60b9      	str	r1, [r7, #8]
 8009c5a:	4613      	mov	r3, r2
 8009c5c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c64:	2b20      	cmp	r3, #32
 8009c66:	d167      	bne.n	8009d38 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d002      	beq.n	8009c74 <HAL_UART_Transmit_DMA+0x24>
 8009c6e:	88fb      	ldrh	r3, [r7, #6]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d101      	bne.n	8009c78 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009c74:	2301      	movs	r3, #1
 8009c76:	e060      	b.n	8009d3a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	68ba      	ldr	r2, [r7, #8]
 8009c7c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	88fa      	ldrh	r2, [r7, #6]
 8009c82:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	88fa      	ldrh	r2, [r7, #6]
 8009c8a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2200      	movs	r2, #0
 8009c92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	2221      	movs	r2, #33	; 0x21
 8009c9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d028      	beq.n	8009cf8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009caa:	4a26      	ldr	r2, [pc, #152]	; (8009d44 <HAL_UART_Transmit_DMA+0xf4>)
 8009cac:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009cb2:	4a25      	ldr	r2, [pc, #148]	; (8009d48 <HAL_UART_Transmit_DMA+0xf8>)
 8009cb4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009cba:	4a24      	ldr	r2, [pc, #144]	; (8009d4c <HAL_UART_Transmit_DMA+0xfc>)
 8009cbc:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cce:	4619      	mov	r1, r3
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	3328      	adds	r3, #40	; 0x28
 8009cd6:	461a      	mov	r2, r3
 8009cd8:	88fb      	ldrh	r3, [r7, #6]
 8009cda:	f7f8 fd21 	bl	8002720 <HAL_DMA_Start_IT>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d009      	beq.n	8009cf8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	2210      	movs	r2, #16
 8009ce8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	2220      	movs	r2, #32
 8009cf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	e020      	b.n	8009d3a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	2240      	movs	r2, #64	; 0x40
 8009cfe:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	3308      	adds	r3, #8
 8009d06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	e853 3f00 	ldrex	r3, [r3]
 8009d0e:	613b      	str	r3, [r7, #16]
   return(result);
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d16:	627b      	str	r3, [r7, #36]	; 0x24
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	3308      	adds	r3, #8
 8009d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d20:	623a      	str	r2, [r7, #32]
 8009d22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d24:	69f9      	ldr	r1, [r7, #28]
 8009d26:	6a3a      	ldr	r2, [r7, #32]
 8009d28:	e841 2300 	strex	r3, r2, [r1]
 8009d2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8009d2e:	69bb      	ldr	r3, [r7, #24]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d1e5      	bne.n	8009d00 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8009d34:	2300      	movs	r3, #0
 8009d36:	e000      	b.n	8009d3a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009d38:	2302      	movs	r3, #2
  }
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3728      	adds	r7, #40	; 0x28
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}
 8009d42:	bf00      	nop
 8009d44:	0800b8c5 	.word	0x0800b8c5
 8009d48:	0800b95b 	.word	0x0800b95b
 8009d4c:	0800badd 	.word	0x0800badd

08009d50 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b08a      	sub	sp, #40	; 0x28
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	60f8      	str	r0, [r7, #12]
 8009d58:	60b9      	str	r1, [r7, #8]
 8009d5a:	4613      	mov	r3, r2
 8009d5c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d64:	2b20      	cmp	r3, #32
 8009d66:	d137      	bne.n	8009dd8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d002      	beq.n	8009d74 <HAL_UART_Receive_DMA+0x24>
 8009d6e:	88fb      	ldrh	r3, [r7, #6]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d101      	bne.n	8009d78 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009d74:	2301      	movs	r3, #1
 8009d76:	e030      	b.n	8009dda <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	4a18      	ldr	r2, [pc, #96]	; (8009de4 <HAL_UART_Receive_DMA+0x94>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d01f      	beq.n	8009dc8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	685b      	ldr	r3, [r3, #4]
 8009d8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d018      	beq.n	8009dc8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d9c:	697b      	ldr	r3, [r7, #20]
 8009d9e:	e853 3f00 	ldrex	r3, [r3]
 8009da2:	613b      	str	r3, [r7, #16]
   return(result);
 8009da4:	693b      	ldr	r3, [r7, #16]
 8009da6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009daa:	627b      	str	r3, [r7, #36]	; 0x24
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	461a      	mov	r2, r3
 8009db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db4:	623b      	str	r3, [r7, #32]
 8009db6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009db8:	69f9      	ldr	r1, [r7, #28]
 8009dba:	6a3a      	ldr	r2, [r7, #32]
 8009dbc:	e841 2300 	strex	r3, r2, [r1]
 8009dc0:	61bb      	str	r3, [r7, #24]
   return(result);
 8009dc2:	69bb      	ldr	r3, [r7, #24]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d1e6      	bne.n	8009d96 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009dc8:	88fb      	ldrh	r3, [r7, #6]
 8009dca:	461a      	mov	r2, r3
 8009dcc:	68b9      	ldr	r1, [r7, #8]
 8009dce:	68f8      	ldr	r0, [r7, #12]
 8009dd0:	f001 fc2a 	bl	800b628 <UART_Start_Receive_DMA>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	e000      	b.n	8009dda <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009dd8:	2302      	movs	r3, #2
  }
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	3728      	adds	r7, #40	; 0x28
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}
 8009de2:	bf00      	nop
 8009de4:	58000c00 	.word	0x58000c00

08009de8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b0ba      	sub	sp, #232	; 0xe8
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	69db      	ldr	r3, [r3, #28]
 8009df6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	689b      	ldr	r3, [r3, #8]
 8009e0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009e0e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009e12:	f640 030f 	movw	r3, #2063	; 0x80f
 8009e16:	4013      	ands	r3, r2
 8009e18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009e1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d11b      	bne.n	8009e5c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e28:	f003 0320 	and.w	r3, r3, #32
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d015      	beq.n	8009e5c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e34:	f003 0320 	and.w	r3, r3, #32
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d105      	bne.n	8009e48 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009e3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d009      	beq.n	8009e5c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	f000 8377 	beq.w	800a540 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	4798      	blx	r3
      }
      return;
 8009e5a:	e371      	b.n	800a540 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009e5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	f000 8123 	beq.w	800a0ac <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009e66:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009e6a:	4b8d      	ldr	r3, [pc, #564]	; (800a0a0 <HAL_UART_IRQHandler+0x2b8>)
 8009e6c:	4013      	ands	r3, r2
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d106      	bne.n	8009e80 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009e72:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009e76:	4b8b      	ldr	r3, [pc, #556]	; (800a0a4 <HAL_UART_IRQHandler+0x2bc>)
 8009e78:	4013      	ands	r3, r2
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	f000 8116 	beq.w	800a0ac <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e84:	f003 0301 	and.w	r3, r3, #1
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d011      	beq.n	8009eb0 <HAL_UART_IRQHandler+0xc8>
 8009e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d00b      	beq.n	8009eb0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	2201      	movs	r2, #1
 8009e9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ea6:	f043 0201 	orr.w	r2, r3, #1
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009eb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009eb4:	f003 0302 	and.w	r3, r3, #2
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d011      	beq.n	8009ee0 <HAL_UART_IRQHandler+0xf8>
 8009ebc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ec0:	f003 0301 	and.w	r3, r3, #1
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d00b      	beq.n	8009ee0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	2202      	movs	r2, #2
 8009ece:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ed6:	f043 0204 	orr.w	r2, r3, #4
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ee4:	f003 0304 	and.w	r3, r3, #4
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d011      	beq.n	8009f10 <HAL_UART_IRQHandler+0x128>
 8009eec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ef0:	f003 0301 	and.w	r3, r3, #1
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d00b      	beq.n	8009f10 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	2204      	movs	r2, #4
 8009efe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f06:	f043 0202 	orr.w	r2, r3, #2
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009f10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f14:	f003 0308 	and.w	r3, r3, #8
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d017      	beq.n	8009f4c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009f1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f20:	f003 0320 	and.w	r3, r3, #32
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d105      	bne.n	8009f34 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009f28:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009f2c:	4b5c      	ldr	r3, [pc, #368]	; (800a0a0 <HAL_UART_IRQHandler+0x2b8>)
 8009f2e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d00b      	beq.n	8009f4c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	2208      	movs	r2, #8
 8009f3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f42:	f043 0208 	orr.w	r2, r3, #8
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009f4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d012      	beq.n	8009f7e <HAL_UART_IRQHandler+0x196>
 8009f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d00c      	beq.n	8009f7e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009f6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f74:	f043 0220 	orr.w	r2, r3, #32
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	f000 82dd 	beq.w	800a544 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f8e:	f003 0320 	and.w	r3, r3, #32
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d013      	beq.n	8009fbe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009f96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f9a:	f003 0320 	and.w	r3, r3, #32
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d105      	bne.n	8009fae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009fa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d007      	beq.n	8009fbe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d003      	beq.n	8009fbe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fc4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	689b      	ldr	r3, [r3, #8]
 8009fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fd2:	2b40      	cmp	r3, #64	; 0x40
 8009fd4:	d005      	beq.n	8009fe2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009fd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009fda:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d054      	beq.n	800a08c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f001 fc08 	bl	800b7f8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	689b      	ldr	r3, [r3, #8]
 8009fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ff2:	2b40      	cmp	r3, #64	; 0x40
 8009ff4:	d146      	bne.n	800a084 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	3308      	adds	r3, #8
 8009ffc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a000:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a004:	e853 3f00 	ldrex	r3, [r3]
 800a008:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a00c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a010:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a014:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	3308      	adds	r3, #8
 800a01e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a022:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a026:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a02a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a02e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a032:	e841 2300 	strex	r3, r2, [r1]
 800a036:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a03a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d1d9      	bne.n	8009ff6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d017      	beq.n	800a07c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a052:	4a15      	ldr	r2, [pc, #84]	; (800a0a8 <HAL_UART_IRQHandler+0x2c0>)
 800a054:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a05c:	4618      	mov	r0, r3
 800a05e:	f7f9 f8e7 	bl	8003230 <HAL_DMA_Abort_IT>
 800a062:	4603      	mov	r3, r0
 800a064:	2b00      	cmp	r3, #0
 800a066:	d019      	beq.n	800a09c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a06e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a070:	687a      	ldr	r2, [r7, #4]
 800a072:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800a076:	4610      	mov	r0, r2
 800a078:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a07a:	e00f      	b.n	800a09c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f000 fa8b 	bl	800a598 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a082:	e00b      	b.n	800a09c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f000 fa87 	bl	800a598 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a08a:	e007      	b.n	800a09c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f000 fa83 	bl	800a598 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2200      	movs	r2, #0
 800a096:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800a09a:	e253      	b.n	800a544 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a09c:	bf00      	nop
    return;
 800a09e:	e251      	b.n	800a544 <HAL_UART_IRQHandler+0x75c>
 800a0a0:	10000001 	.word	0x10000001
 800a0a4:	04000120 	.word	0x04000120
 800a0a8:	0800bb5d 	.word	0x0800bb5d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0b0:	2b01      	cmp	r3, #1
 800a0b2:	f040 81e7 	bne.w	800a484 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a0b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0ba:	f003 0310 	and.w	r3, r3, #16
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	f000 81e0 	beq.w	800a484 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a0c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0c8:	f003 0310 	and.w	r3, r3, #16
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	f000 81d9 	beq.w	800a484 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	2210      	movs	r2, #16
 800a0d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	689b      	ldr	r3, [r3, #8]
 800a0e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0e4:	2b40      	cmp	r3, #64	; 0x40
 800a0e6:	f040 8151 	bne.w	800a38c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	4a96      	ldr	r2, [pc, #600]	; (800a34c <HAL_UART_IRQHandler+0x564>)
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d068      	beq.n	800a1ca <HAL_UART_IRQHandler+0x3e2>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	4a93      	ldr	r2, [pc, #588]	; (800a350 <HAL_UART_IRQHandler+0x568>)
 800a102:	4293      	cmp	r3, r2
 800a104:	d061      	beq.n	800a1ca <HAL_UART_IRQHandler+0x3e2>
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	4a91      	ldr	r2, [pc, #580]	; (800a354 <HAL_UART_IRQHandler+0x56c>)
 800a110:	4293      	cmp	r3, r2
 800a112:	d05a      	beq.n	800a1ca <HAL_UART_IRQHandler+0x3e2>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4a8e      	ldr	r2, [pc, #568]	; (800a358 <HAL_UART_IRQHandler+0x570>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d053      	beq.n	800a1ca <HAL_UART_IRQHandler+0x3e2>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	4a8c      	ldr	r2, [pc, #560]	; (800a35c <HAL_UART_IRQHandler+0x574>)
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d04c      	beq.n	800a1ca <HAL_UART_IRQHandler+0x3e2>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	4a89      	ldr	r2, [pc, #548]	; (800a360 <HAL_UART_IRQHandler+0x578>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d045      	beq.n	800a1ca <HAL_UART_IRQHandler+0x3e2>
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	4a87      	ldr	r2, [pc, #540]	; (800a364 <HAL_UART_IRQHandler+0x57c>)
 800a148:	4293      	cmp	r3, r2
 800a14a:	d03e      	beq.n	800a1ca <HAL_UART_IRQHandler+0x3e2>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	4a84      	ldr	r2, [pc, #528]	; (800a368 <HAL_UART_IRQHandler+0x580>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d037      	beq.n	800a1ca <HAL_UART_IRQHandler+0x3e2>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	4a82      	ldr	r2, [pc, #520]	; (800a36c <HAL_UART_IRQHandler+0x584>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d030      	beq.n	800a1ca <HAL_UART_IRQHandler+0x3e2>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	4a7f      	ldr	r2, [pc, #508]	; (800a370 <HAL_UART_IRQHandler+0x588>)
 800a172:	4293      	cmp	r3, r2
 800a174:	d029      	beq.n	800a1ca <HAL_UART_IRQHandler+0x3e2>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	4a7d      	ldr	r2, [pc, #500]	; (800a374 <HAL_UART_IRQHandler+0x58c>)
 800a180:	4293      	cmp	r3, r2
 800a182:	d022      	beq.n	800a1ca <HAL_UART_IRQHandler+0x3e2>
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	4a7a      	ldr	r2, [pc, #488]	; (800a378 <HAL_UART_IRQHandler+0x590>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	d01b      	beq.n	800a1ca <HAL_UART_IRQHandler+0x3e2>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	4a78      	ldr	r2, [pc, #480]	; (800a37c <HAL_UART_IRQHandler+0x594>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d014      	beq.n	800a1ca <HAL_UART_IRQHandler+0x3e2>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	4a75      	ldr	r2, [pc, #468]	; (800a380 <HAL_UART_IRQHandler+0x598>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d00d      	beq.n	800a1ca <HAL_UART_IRQHandler+0x3e2>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	4a73      	ldr	r2, [pc, #460]	; (800a384 <HAL_UART_IRQHandler+0x59c>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d006      	beq.n	800a1ca <HAL_UART_IRQHandler+0x3e2>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	4a70      	ldr	r2, [pc, #448]	; (800a388 <HAL_UART_IRQHandler+0x5a0>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d106      	bne.n	800a1d8 <HAL_UART_IRQHandler+0x3f0>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	e005      	b.n	800a1e4 <HAL_UART_IRQHandler+0x3fc>
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	685b      	ldr	r3, [r3, #4]
 800a1e2:	b29b      	uxth	r3, r3
 800a1e4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a1e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	f000 81ab 	beq.w	800a548 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a1f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	f080 81a3 	bcs.w	800a548 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a208:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a212:	69db      	ldr	r3, [r3, #28]
 800a214:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a218:	f000 8087 	beq.w	800a32a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a224:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a228:	e853 3f00 	ldrex	r3, [r3]
 800a22c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a230:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a234:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a238:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	461a      	mov	r2, r3
 800a242:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a246:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a24a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a24e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a252:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a256:	e841 2300 	strex	r3, r2, [r1]
 800a25a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a25e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a262:	2b00      	cmp	r3, #0
 800a264:	d1da      	bne.n	800a21c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	3308      	adds	r3, #8
 800a26c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a26e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a270:	e853 3f00 	ldrex	r3, [r3]
 800a274:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a276:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a278:	f023 0301 	bic.w	r3, r3, #1
 800a27c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	3308      	adds	r3, #8
 800a286:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a28a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a28e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a290:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a292:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a296:	e841 2300 	strex	r3, r2, [r1]
 800a29a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a29c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d1e1      	bne.n	800a266 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	3308      	adds	r3, #8
 800a2a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a2ac:	e853 3f00 	ldrex	r3, [r3]
 800a2b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a2b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a2b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	3308      	adds	r3, #8
 800a2c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a2c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a2c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a2cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a2ce:	e841 2300 	strex	r3, r2, [r1]
 800a2d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a2d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d1e3      	bne.n	800a2a2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2220      	movs	r2, #32
 800a2de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2f0:	e853 3f00 	ldrex	r3, [r3]
 800a2f4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a2f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2f8:	f023 0310 	bic.w	r3, r3, #16
 800a2fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	461a      	mov	r2, r3
 800a306:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a30a:	65bb      	str	r3, [r7, #88]	; 0x58
 800a30c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a30e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a310:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a312:	e841 2300 	strex	r3, r2, [r1]
 800a316:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a318:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d1e4      	bne.n	800a2e8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a324:	4618      	mov	r0, r3
 800a326:	f7f8 fc65 	bl	8002bf4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2202      	movs	r2, #2
 800a32e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a33c:	b29b      	uxth	r3, r3
 800a33e:	1ad3      	subs	r3, r2, r3
 800a340:	b29b      	uxth	r3, r3
 800a342:	4619      	mov	r1, r3
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f7f6 fccb 	bl	8000ce0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a34a:	e0fd      	b.n	800a548 <HAL_UART_IRQHandler+0x760>
 800a34c:	40020010 	.word	0x40020010
 800a350:	40020028 	.word	0x40020028
 800a354:	40020040 	.word	0x40020040
 800a358:	40020058 	.word	0x40020058
 800a35c:	40020070 	.word	0x40020070
 800a360:	40020088 	.word	0x40020088
 800a364:	400200a0 	.word	0x400200a0
 800a368:	400200b8 	.word	0x400200b8
 800a36c:	40020410 	.word	0x40020410
 800a370:	40020428 	.word	0x40020428
 800a374:	40020440 	.word	0x40020440
 800a378:	40020458 	.word	0x40020458
 800a37c:	40020470 	.word	0x40020470
 800a380:	40020488 	.word	0x40020488
 800a384:	400204a0 	.word	0x400204a0
 800a388:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a398:	b29b      	uxth	r3, r3
 800a39a:	1ad3      	subs	r3, r2, r3
 800a39c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a3a6:	b29b      	uxth	r3, r3
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	f000 80cf 	beq.w	800a54c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800a3ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	f000 80ca 	beq.w	800a54c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3c0:	e853 3f00 	ldrex	r3, [r3]
 800a3c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a3c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a3cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	461a      	mov	r2, r3
 800a3d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a3da:	647b      	str	r3, [r7, #68]	; 0x44
 800a3dc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a3e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a3e2:	e841 2300 	strex	r3, r2, [r1]
 800a3e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a3e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d1e4      	bne.n	800a3b8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	3308      	adds	r3, #8
 800a3f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f8:	e853 3f00 	ldrex	r3, [r3]
 800a3fc:	623b      	str	r3, [r7, #32]
   return(result);
 800a3fe:	6a3a      	ldr	r2, [r7, #32]
 800a400:	4b55      	ldr	r3, [pc, #340]	; (800a558 <HAL_UART_IRQHandler+0x770>)
 800a402:	4013      	ands	r3, r2
 800a404:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	3308      	adds	r3, #8
 800a40e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a412:	633a      	str	r2, [r7, #48]	; 0x30
 800a414:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a416:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a41a:	e841 2300 	strex	r3, r2, [r1]
 800a41e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a422:	2b00      	cmp	r3, #0
 800a424:	d1e3      	bne.n	800a3ee <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2220      	movs	r2, #32
 800a42a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2200      	movs	r2, #0
 800a432:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2200      	movs	r2, #0
 800a438:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	e853 3f00 	ldrex	r3, [r3]
 800a446:	60fb      	str	r3, [r7, #12]
   return(result);
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f023 0310 	bic.w	r3, r3, #16
 800a44e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	461a      	mov	r2, r3
 800a458:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a45c:	61fb      	str	r3, [r7, #28]
 800a45e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a460:	69b9      	ldr	r1, [r7, #24]
 800a462:	69fa      	ldr	r2, [r7, #28]
 800a464:	e841 2300 	strex	r3, r2, [r1]
 800a468:	617b      	str	r3, [r7, #20]
   return(result);
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d1e4      	bne.n	800a43a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2202      	movs	r2, #2
 800a474:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a476:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a47a:	4619      	mov	r1, r3
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f7f6 fc2f 	bl	8000ce0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a482:	e063      	b.n	800a54c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a488:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d00e      	beq.n	800a4ae <HAL_UART_IRQHandler+0x6c6>
 800a490:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a494:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d008      	beq.n	800a4ae <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a4a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f002 f8b6 	bl	800c618 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a4ac:	e051      	b.n	800a552 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a4ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d014      	beq.n	800a4e4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a4ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d105      	bne.n	800a4d2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a4c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a4ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d008      	beq.n	800a4e4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d03a      	beq.n	800a550 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	4798      	blx	r3
    }
    return;
 800a4e2:	e035      	b.n	800a550 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a4e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d009      	beq.n	800a504 <HAL_UART_IRQHandler+0x71c>
 800a4f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d003      	beq.n	800a504 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f001 fb43 	bl	800bb88 <UART_EndTransmit_IT>
    return;
 800a502:	e026      	b.n	800a552 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a508:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d009      	beq.n	800a524 <HAL_UART_IRQHandler+0x73c>
 800a510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a514:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d003      	beq.n	800a524 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f002 f88f 	bl	800c640 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a522:	e016      	b.n	800a552 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a528:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d010      	beq.n	800a552 <HAL_UART_IRQHandler+0x76a>
 800a530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a534:	2b00      	cmp	r3, #0
 800a536:	da0c      	bge.n	800a552 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f002 f877 	bl	800c62c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a53e:	e008      	b.n	800a552 <HAL_UART_IRQHandler+0x76a>
      return;
 800a540:	bf00      	nop
 800a542:	e006      	b.n	800a552 <HAL_UART_IRQHandler+0x76a>
    return;
 800a544:	bf00      	nop
 800a546:	e004      	b.n	800a552 <HAL_UART_IRQHandler+0x76a>
      return;
 800a548:	bf00      	nop
 800a54a:	e002      	b.n	800a552 <HAL_UART_IRQHandler+0x76a>
      return;
 800a54c:	bf00      	nop
 800a54e:	e000      	b.n	800a552 <HAL_UART_IRQHandler+0x76a>
    return;
 800a550:	bf00      	nop
  }
}
 800a552:	37e8      	adds	r7, #232	; 0xe8
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}
 800a558:	effffffe 	.word	0xeffffffe

0800a55c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b083      	sub	sp, #12
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a564:	bf00      	nop
 800a566:	370c      	adds	r7, #12
 800a568:	46bd      	mov	sp, r7
 800a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56e:	4770      	bx	lr

0800a570 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a570:	b480      	push	{r7}
 800a572:	b083      	sub	sp, #12
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a578:	bf00      	nop
 800a57a:	370c      	adds	r7, #12
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr

0800a584 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a584:	b480      	push	{r7}
 800a586:	b083      	sub	sp, #12
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a58c:	bf00      	nop
 800a58e:	370c      	adds	r7, #12
 800a590:	46bd      	mov	sp, r7
 800a592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a596:	4770      	bx	lr

0800a598 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a598:	b480      	push	{r7}
 800a59a:	b083      	sub	sp, #12
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a5a0:	bf00      	nop
 800a5a2:	370c      	adds	r7, #12
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5aa:	4770      	bx	lr

0800a5ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a5ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a5b0:	b092      	sub	sp, #72	; 0x48
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a5bc:	697b      	ldr	r3, [r7, #20]
 800a5be:	689a      	ldr	r2, [r3, #8]
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	691b      	ldr	r3, [r3, #16]
 800a5c4:	431a      	orrs	r2, r3
 800a5c6:	697b      	ldr	r3, [r7, #20]
 800a5c8:	695b      	ldr	r3, [r3, #20]
 800a5ca:	431a      	orrs	r2, r3
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	69db      	ldr	r3, [r3, #28]
 800a5d0:	4313      	orrs	r3, r2
 800a5d2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	681a      	ldr	r2, [r3, #0]
 800a5da:	4bbe      	ldr	r3, [pc, #760]	; (800a8d4 <UART_SetConfig+0x328>)
 800a5dc:	4013      	ands	r3, r2
 800a5de:	697a      	ldr	r2, [r7, #20]
 800a5e0:	6812      	ldr	r2, [r2, #0]
 800a5e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a5e4:	430b      	orrs	r3, r1
 800a5e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	685b      	ldr	r3, [r3, #4]
 800a5ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	68da      	ldr	r2, [r3, #12]
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	430a      	orrs	r2, r1
 800a5fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	699b      	ldr	r3, [r3, #24]
 800a602:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	4ab3      	ldr	r2, [pc, #716]	; (800a8d8 <UART_SetConfig+0x32c>)
 800a60a:	4293      	cmp	r3, r2
 800a60c:	d004      	beq.n	800a618 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a60e:	697b      	ldr	r3, [r7, #20]
 800a610:	6a1b      	ldr	r3, [r3, #32]
 800a612:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a614:	4313      	orrs	r3, r2
 800a616:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	689a      	ldr	r2, [r3, #8]
 800a61e:	4baf      	ldr	r3, [pc, #700]	; (800a8dc <UART_SetConfig+0x330>)
 800a620:	4013      	ands	r3, r2
 800a622:	697a      	ldr	r2, [r7, #20]
 800a624:	6812      	ldr	r2, [r2, #0]
 800a626:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a628:	430b      	orrs	r3, r1
 800a62a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a632:	f023 010f 	bic.w	r1, r3, #15
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	430a      	orrs	r2, r1
 800a640:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	4aa6      	ldr	r2, [pc, #664]	; (800a8e0 <UART_SetConfig+0x334>)
 800a648:	4293      	cmp	r3, r2
 800a64a:	d177      	bne.n	800a73c <UART_SetConfig+0x190>
 800a64c:	4ba5      	ldr	r3, [pc, #660]	; (800a8e4 <UART_SetConfig+0x338>)
 800a64e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a650:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a654:	2b28      	cmp	r3, #40	; 0x28
 800a656:	d86d      	bhi.n	800a734 <UART_SetConfig+0x188>
 800a658:	a201      	add	r2, pc, #4	; (adr r2, 800a660 <UART_SetConfig+0xb4>)
 800a65a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a65e:	bf00      	nop
 800a660:	0800a705 	.word	0x0800a705
 800a664:	0800a735 	.word	0x0800a735
 800a668:	0800a735 	.word	0x0800a735
 800a66c:	0800a735 	.word	0x0800a735
 800a670:	0800a735 	.word	0x0800a735
 800a674:	0800a735 	.word	0x0800a735
 800a678:	0800a735 	.word	0x0800a735
 800a67c:	0800a735 	.word	0x0800a735
 800a680:	0800a70d 	.word	0x0800a70d
 800a684:	0800a735 	.word	0x0800a735
 800a688:	0800a735 	.word	0x0800a735
 800a68c:	0800a735 	.word	0x0800a735
 800a690:	0800a735 	.word	0x0800a735
 800a694:	0800a735 	.word	0x0800a735
 800a698:	0800a735 	.word	0x0800a735
 800a69c:	0800a735 	.word	0x0800a735
 800a6a0:	0800a715 	.word	0x0800a715
 800a6a4:	0800a735 	.word	0x0800a735
 800a6a8:	0800a735 	.word	0x0800a735
 800a6ac:	0800a735 	.word	0x0800a735
 800a6b0:	0800a735 	.word	0x0800a735
 800a6b4:	0800a735 	.word	0x0800a735
 800a6b8:	0800a735 	.word	0x0800a735
 800a6bc:	0800a735 	.word	0x0800a735
 800a6c0:	0800a71d 	.word	0x0800a71d
 800a6c4:	0800a735 	.word	0x0800a735
 800a6c8:	0800a735 	.word	0x0800a735
 800a6cc:	0800a735 	.word	0x0800a735
 800a6d0:	0800a735 	.word	0x0800a735
 800a6d4:	0800a735 	.word	0x0800a735
 800a6d8:	0800a735 	.word	0x0800a735
 800a6dc:	0800a735 	.word	0x0800a735
 800a6e0:	0800a725 	.word	0x0800a725
 800a6e4:	0800a735 	.word	0x0800a735
 800a6e8:	0800a735 	.word	0x0800a735
 800a6ec:	0800a735 	.word	0x0800a735
 800a6f0:	0800a735 	.word	0x0800a735
 800a6f4:	0800a735 	.word	0x0800a735
 800a6f8:	0800a735 	.word	0x0800a735
 800a6fc:	0800a735 	.word	0x0800a735
 800a700:	0800a72d 	.word	0x0800a72d
 800a704:	2301      	movs	r3, #1
 800a706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a70a:	e222      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800a70c:	2304      	movs	r3, #4
 800a70e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a712:	e21e      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800a714:	2308      	movs	r3, #8
 800a716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a71a:	e21a      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800a71c:	2310      	movs	r3, #16
 800a71e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a722:	e216      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800a724:	2320      	movs	r3, #32
 800a726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a72a:	e212      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800a72c:	2340      	movs	r3, #64	; 0x40
 800a72e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a732:	e20e      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800a734:	2380      	movs	r3, #128	; 0x80
 800a736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a73a:	e20a      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	4a69      	ldr	r2, [pc, #420]	; (800a8e8 <UART_SetConfig+0x33c>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d130      	bne.n	800a7a8 <UART_SetConfig+0x1fc>
 800a746:	4b67      	ldr	r3, [pc, #412]	; (800a8e4 <UART_SetConfig+0x338>)
 800a748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a74a:	f003 0307 	and.w	r3, r3, #7
 800a74e:	2b05      	cmp	r3, #5
 800a750:	d826      	bhi.n	800a7a0 <UART_SetConfig+0x1f4>
 800a752:	a201      	add	r2, pc, #4	; (adr r2, 800a758 <UART_SetConfig+0x1ac>)
 800a754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a758:	0800a771 	.word	0x0800a771
 800a75c:	0800a779 	.word	0x0800a779
 800a760:	0800a781 	.word	0x0800a781
 800a764:	0800a789 	.word	0x0800a789
 800a768:	0800a791 	.word	0x0800a791
 800a76c:	0800a799 	.word	0x0800a799
 800a770:	2300      	movs	r3, #0
 800a772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a776:	e1ec      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800a778:	2304      	movs	r3, #4
 800a77a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a77e:	e1e8      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800a780:	2308      	movs	r3, #8
 800a782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a786:	e1e4      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800a788:	2310      	movs	r3, #16
 800a78a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a78e:	e1e0      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800a790:	2320      	movs	r3, #32
 800a792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a796:	e1dc      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800a798:	2340      	movs	r3, #64	; 0x40
 800a79a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a79e:	e1d8      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800a7a0:	2380      	movs	r3, #128	; 0x80
 800a7a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7a6:	e1d4      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800a7a8:	697b      	ldr	r3, [r7, #20]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	4a4f      	ldr	r2, [pc, #316]	; (800a8ec <UART_SetConfig+0x340>)
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d130      	bne.n	800a814 <UART_SetConfig+0x268>
 800a7b2:	4b4c      	ldr	r3, [pc, #304]	; (800a8e4 <UART_SetConfig+0x338>)
 800a7b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7b6:	f003 0307 	and.w	r3, r3, #7
 800a7ba:	2b05      	cmp	r3, #5
 800a7bc:	d826      	bhi.n	800a80c <UART_SetConfig+0x260>
 800a7be:	a201      	add	r2, pc, #4	; (adr r2, 800a7c4 <UART_SetConfig+0x218>)
 800a7c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7c4:	0800a7dd 	.word	0x0800a7dd
 800a7c8:	0800a7e5 	.word	0x0800a7e5
 800a7cc:	0800a7ed 	.word	0x0800a7ed
 800a7d0:	0800a7f5 	.word	0x0800a7f5
 800a7d4:	0800a7fd 	.word	0x0800a7fd
 800a7d8:	0800a805 	.word	0x0800a805
 800a7dc:	2300      	movs	r3, #0
 800a7de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7e2:	e1b6      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800a7e4:	2304      	movs	r3, #4
 800a7e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7ea:	e1b2      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800a7ec:	2308      	movs	r3, #8
 800a7ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7f2:	e1ae      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800a7f4:	2310      	movs	r3, #16
 800a7f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7fa:	e1aa      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800a7fc:	2320      	movs	r3, #32
 800a7fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a802:	e1a6      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800a804:	2340      	movs	r3, #64	; 0x40
 800a806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a80a:	e1a2      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800a80c:	2380      	movs	r3, #128	; 0x80
 800a80e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a812:	e19e      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	4a35      	ldr	r2, [pc, #212]	; (800a8f0 <UART_SetConfig+0x344>)
 800a81a:	4293      	cmp	r3, r2
 800a81c:	d130      	bne.n	800a880 <UART_SetConfig+0x2d4>
 800a81e:	4b31      	ldr	r3, [pc, #196]	; (800a8e4 <UART_SetConfig+0x338>)
 800a820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a822:	f003 0307 	and.w	r3, r3, #7
 800a826:	2b05      	cmp	r3, #5
 800a828:	d826      	bhi.n	800a878 <UART_SetConfig+0x2cc>
 800a82a:	a201      	add	r2, pc, #4	; (adr r2, 800a830 <UART_SetConfig+0x284>)
 800a82c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a830:	0800a849 	.word	0x0800a849
 800a834:	0800a851 	.word	0x0800a851
 800a838:	0800a859 	.word	0x0800a859
 800a83c:	0800a861 	.word	0x0800a861
 800a840:	0800a869 	.word	0x0800a869
 800a844:	0800a871 	.word	0x0800a871
 800a848:	2300      	movs	r3, #0
 800a84a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a84e:	e180      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800a850:	2304      	movs	r3, #4
 800a852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a856:	e17c      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800a858:	2308      	movs	r3, #8
 800a85a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a85e:	e178      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800a860:	2310      	movs	r3, #16
 800a862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a866:	e174      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800a868:	2320      	movs	r3, #32
 800a86a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a86e:	e170      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800a870:	2340      	movs	r3, #64	; 0x40
 800a872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a876:	e16c      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800a878:	2380      	movs	r3, #128	; 0x80
 800a87a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a87e:	e168      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	4a1b      	ldr	r2, [pc, #108]	; (800a8f4 <UART_SetConfig+0x348>)
 800a886:	4293      	cmp	r3, r2
 800a888:	d142      	bne.n	800a910 <UART_SetConfig+0x364>
 800a88a:	4b16      	ldr	r3, [pc, #88]	; (800a8e4 <UART_SetConfig+0x338>)
 800a88c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a88e:	f003 0307 	and.w	r3, r3, #7
 800a892:	2b05      	cmp	r3, #5
 800a894:	d838      	bhi.n	800a908 <UART_SetConfig+0x35c>
 800a896:	a201      	add	r2, pc, #4	; (adr r2, 800a89c <UART_SetConfig+0x2f0>)
 800a898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a89c:	0800a8b5 	.word	0x0800a8b5
 800a8a0:	0800a8bd 	.word	0x0800a8bd
 800a8a4:	0800a8c5 	.word	0x0800a8c5
 800a8a8:	0800a8cd 	.word	0x0800a8cd
 800a8ac:	0800a8f9 	.word	0x0800a8f9
 800a8b0:	0800a901 	.word	0x0800a901
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8ba:	e14a      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800a8bc:	2304      	movs	r3, #4
 800a8be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8c2:	e146      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800a8c4:	2308      	movs	r3, #8
 800a8c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8ca:	e142      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800a8cc:	2310      	movs	r3, #16
 800a8ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8d2:	e13e      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800a8d4:	cfff69f3 	.word	0xcfff69f3
 800a8d8:	58000c00 	.word	0x58000c00
 800a8dc:	11fff4ff 	.word	0x11fff4ff
 800a8e0:	40011000 	.word	0x40011000
 800a8e4:	58024400 	.word	0x58024400
 800a8e8:	40004400 	.word	0x40004400
 800a8ec:	40004800 	.word	0x40004800
 800a8f0:	40004c00 	.word	0x40004c00
 800a8f4:	40005000 	.word	0x40005000
 800a8f8:	2320      	movs	r3, #32
 800a8fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8fe:	e128      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800a900:	2340      	movs	r3, #64	; 0x40
 800a902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a906:	e124      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800a908:	2380      	movs	r3, #128	; 0x80
 800a90a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a90e:	e120      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	4acb      	ldr	r2, [pc, #812]	; (800ac44 <UART_SetConfig+0x698>)
 800a916:	4293      	cmp	r3, r2
 800a918:	d176      	bne.n	800aa08 <UART_SetConfig+0x45c>
 800a91a:	4bcb      	ldr	r3, [pc, #812]	; (800ac48 <UART_SetConfig+0x69c>)
 800a91c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a91e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a922:	2b28      	cmp	r3, #40	; 0x28
 800a924:	d86c      	bhi.n	800aa00 <UART_SetConfig+0x454>
 800a926:	a201      	add	r2, pc, #4	; (adr r2, 800a92c <UART_SetConfig+0x380>)
 800a928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a92c:	0800a9d1 	.word	0x0800a9d1
 800a930:	0800aa01 	.word	0x0800aa01
 800a934:	0800aa01 	.word	0x0800aa01
 800a938:	0800aa01 	.word	0x0800aa01
 800a93c:	0800aa01 	.word	0x0800aa01
 800a940:	0800aa01 	.word	0x0800aa01
 800a944:	0800aa01 	.word	0x0800aa01
 800a948:	0800aa01 	.word	0x0800aa01
 800a94c:	0800a9d9 	.word	0x0800a9d9
 800a950:	0800aa01 	.word	0x0800aa01
 800a954:	0800aa01 	.word	0x0800aa01
 800a958:	0800aa01 	.word	0x0800aa01
 800a95c:	0800aa01 	.word	0x0800aa01
 800a960:	0800aa01 	.word	0x0800aa01
 800a964:	0800aa01 	.word	0x0800aa01
 800a968:	0800aa01 	.word	0x0800aa01
 800a96c:	0800a9e1 	.word	0x0800a9e1
 800a970:	0800aa01 	.word	0x0800aa01
 800a974:	0800aa01 	.word	0x0800aa01
 800a978:	0800aa01 	.word	0x0800aa01
 800a97c:	0800aa01 	.word	0x0800aa01
 800a980:	0800aa01 	.word	0x0800aa01
 800a984:	0800aa01 	.word	0x0800aa01
 800a988:	0800aa01 	.word	0x0800aa01
 800a98c:	0800a9e9 	.word	0x0800a9e9
 800a990:	0800aa01 	.word	0x0800aa01
 800a994:	0800aa01 	.word	0x0800aa01
 800a998:	0800aa01 	.word	0x0800aa01
 800a99c:	0800aa01 	.word	0x0800aa01
 800a9a0:	0800aa01 	.word	0x0800aa01
 800a9a4:	0800aa01 	.word	0x0800aa01
 800a9a8:	0800aa01 	.word	0x0800aa01
 800a9ac:	0800a9f1 	.word	0x0800a9f1
 800a9b0:	0800aa01 	.word	0x0800aa01
 800a9b4:	0800aa01 	.word	0x0800aa01
 800a9b8:	0800aa01 	.word	0x0800aa01
 800a9bc:	0800aa01 	.word	0x0800aa01
 800a9c0:	0800aa01 	.word	0x0800aa01
 800a9c4:	0800aa01 	.word	0x0800aa01
 800a9c8:	0800aa01 	.word	0x0800aa01
 800a9cc:	0800a9f9 	.word	0x0800a9f9
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9d6:	e0bc      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800a9d8:	2304      	movs	r3, #4
 800a9da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9de:	e0b8      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800a9e0:	2308      	movs	r3, #8
 800a9e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9e6:	e0b4      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800a9e8:	2310      	movs	r3, #16
 800a9ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9ee:	e0b0      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800a9f0:	2320      	movs	r3, #32
 800a9f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9f6:	e0ac      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800a9f8:	2340      	movs	r3, #64	; 0x40
 800a9fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9fe:	e0a8      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800aa00:	2380      	movs	r3, #128	; 0x80
 800aa02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa06:	e0a4      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	4a8f      	ldr	r2, [pc, #572]	; (800ac4c <UART_SetConfig+0x6a0>)
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	d130      	bne.n	800aa74 <UART_SetConfig+0x4c8>
 800aa12:	4b8d      	ldr	r3, [pc, #564]	; (800ac48 <UART_SetConfig+0x69c>)
 800aa14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa16:	f003 0307 	and.w	r3, r3, #7
 800aa1a:	2b05      	cmp	r3, #5
 800aa1c:	d826      	bhi.n	800aa6c <UART_SetConfig+0x4c0>
 800aa1e:	a201      	add	r2, pc, #4	; (adr r2, 800aa24 <UART_SetConfig+0x478>)
 800aa20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa24:	0800aa3d 	.word	0x0800aa3d
 800aa28:	0800aa45 	.word	0x0800aa45
 800aa2c:	0800aa4d 	.word	0x0800aa4d
 800aa30:	0800aa55 	.word	0x0800aa55
 800aa34:	0800aa5d 	.word	0x0800aa5d
 800aa38:	0800aa65 	.word	0x0800aa65
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa42:	e086      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800aa44:	2304      	movs	r3, #4
 800aa46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa4a:	e082      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800aa4c:	2308      	movs	r3, #8
 800aa4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa52:	e07e      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800aa54:	2310      	movs	r3, #16
 800aa56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa5a:	e07a      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800aa5c:	2320      	movs	r3, #32
 800aa5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa62:	e076      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800aa64:	2340      	movs	r3, #64	; 0x40
 800aa66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa6a:	e072      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800aa6c:	2380      	movs	r3, #128	; 0x80
 800aa6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa72:	e06e      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	4a75      	ldr	r2, [pc, #468]	; (800ac50 <UART_SetConfig+0x6a4>)
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	d130      	bne.n	800aae0 <UART_SetConfig+0x534>
 800aa7e:	4b72      	ldr	r3, [pc, #456]	; (800ac48 <UART_SetConfig+0x69c>)
 800aa80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa82:	f003 0307 	and.w	r3, r3, #7
 800aa86:	2b05      	cmp	r3, #5
 800aa88:	d826      	bhi.n	800aad8 <UART_SetConfig+0x52c>
 800aa8a:	a201      	add	r2, pc, #4	; (adr r2, 800aa90 <UART_SetConfig+0x4e4>)
 800aa8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa90:	0800aaa9 	.word	0x0800aaa9
 800aa94:	0800aab1 	.word	0x0800aab1
 800aa98:	0800aab9 	.word	0x0800aab9
 800aa9c:	0800aac1 	.word	0x0800aac1
 800aaa0:	0800aac9 	.word	0x0800aac9
 800aaa4:	0800aad1 	.word	0x0800aad1
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aaae:	e050      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800aab0:	2304      	movs	r3, #4
 800aab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aab6:	e04c      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800aab8:	2308      	movs	r3, #8
 800aaba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aabe:	e048      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800aac0:	2310      	movs	r3, #16
 800aac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aac6:	e044      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800aac8:	2320      	movs	r3, #32
 800aaca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aace:	e040      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800aad0:	2340      	movs	r3, #64	; 0x40
 800aad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aad6:	e03c      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800aad8:	2380      	movs	r3, #128	; 0x80
 800aada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aade:	e038      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800aae0:	697b      	ldr	r3, [r7, #20]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	4a5b      	ldr	r2, [pc, #364]	; (800ac54 <UART_SetConfig+0x6a8>)
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d130      	bne.n	800ab4c <UART_SetConfig+0x5a0>
 800aaea:	4b57      	ldr	r3, [pc, #348]	; (800ac48 <UART_SetConfig+0x69c>)
 800aaec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aaee:	f003 0307 	and.w	r3, r3, #7
 800aaf2:	2b05      	cmp	r3, #5
 800aaf4:	d826      	bhi.n	800ab44 <UART_SetConfig+0x598>
 800aaf6:	a201      	add	r2, pc, #4	; (adr r2, 800aafc <UART_SetConfig+0x550>)
 800aaf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aafc:	0800ab15 	.word	0x0800ab15
 800ab00:	0800ab1d 	.word	0x0800ab1d
 800ab04:	0800ab25 	.word	0x0800ab25
 800ab08:	0800ab2d 	.word	0x0800ab2d
 800ab0c:	0800ab35 	.word	0x0800ab35
 800ab10:	0800ab3d 	.word	0x0800ab3d
 800ab14:	2302      	movs	r3, #2
 800ab16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab1a:	e01a      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800ab1c:	2304      	movs	r3, #4
 800ab1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab22:	e016      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800ab24:	2308      	movs	r3, #8
 800ab26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab2a:	e012      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800ab2c:	2310      	movs	r3, #16
 800ab2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab32:	e00e      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800ab34:	2320      	movs	r3, #32
 800ab36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab3a:	e00a      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800ab3c:	2340      	movs	r3, #64	; 0x40
 800ab3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab42:	e006      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800ab44:	2380      	movs	r3, #128	; 0x80
 800ab46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab4a:	e002      	b.n	800ab52 <UART_SetConfig+0x5a6>
 800ab4c:	2380      	movs	r3, #128	; 0x80
 800ab4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	4a3f      	ldr	r2, [pc, #252]	; (800ac54 <UART_SetConfig+0x6a8>)
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	f040 80f8 	bne.w	800ad4e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ab5e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ab62:	2b20      	cmp	r3, #32
 800ab64:	dc46      	bgt.n	800abf4 <UART_SetConfig+0x648>
 800ab66:	2b02      	cmp	r3, #2
 800ab68:	f2c0 8082 	blt.w	800ac70 <UART_SetConfig+0x6c4>
 800ab6c:	3b02      	subs	r3, #2
 800ab6e:	2b1e      	cmp	r3, #30
 800ab70:	d87e      	bhi.n	800ac70 <UART_SetConfig+0x6c4>
 800ab72:	a201      	add	r2, pc, #4	; (adr r2, 800ab78 <UART_SetConfig+0x5cc>)
 800ab74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab78:	0800abfb 	.word	0x0800abfb
 800ab7c:	0800ac71 	.word	0x0800ac71
 800ab80:	0800ac03 	.word	0x0800ac03
 800ab84:	0800ac71 	.word	0x0800ac71
 800ab88:	0800ac71 	.word	0x0800ac71
 800ab8c:	0800ac71 	.word	0x0800ac71
 800ab90:	0800ac13 	.word	0x0800ac13
 800ab94:	0800ac71 	.word	0x0800ac71
 800ab98:	0800ac71 	.word	0x0800ac71
 800ab9c:	0800ac71 	.word	0x0800ac71
 800aba0:	0800ac71 	.word	0x0800ac71
 800aba4:	0800ac71 	.word	0x0800ac71
 800aba8:	0800ac71 	.word	0x0800ac71
 800abac:	0800ac71 	.word	0x0800ac71
 800abb0:	0800ac23 	.word	0x0800ac23
 800abb4:	0800ac71 	.word	0x0800ac71
 800abb8:	0800ac71 	.word	0x0800ac71
 800abbc:	0800ac71 	.word	0x0800ac71
 800abc0:	0800ac71 	.word	0x0800ac71
 800abc4:	0800ac71 	.word	0x0800ac71
 800abc8:	0800ac71 	.word	0x0800ac71
 800abcc:	0800ac71 	.word	0x0800ac71
 800abd0:	0800ac71 	.word	0x0800ac71
 800abd4:	0800ac71 	.word	0x0800ac71
 800abd8:	0800ac71 	.word	0x0800ac71
 800abdc:	0800ac71 	.word	0x0800ac71
 800abe0:	0800ac71 	.word	0x0800ac71
 800abe4:	0800ac71 	.word	0x0800ac71
 800abe8:	0800ac71 	.word	0x0800ac71
 800abec:	0800ac71 	.word	0x0800ac71
 800abf0:	0800ac63 	.word	0x0800ac63
 800abf4:	2b40      	cmp	r3, #64	; 0x40
 800abf6:	d037      	beq.n	800ac68 <UART_SetConfig+0x6bc>
 800abf8:	e03a      	b.n	800ac70 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800abfa:	f7fe f803 	bl	8008c04 <HAL_RCCEx_GetD3PCLK1Freq>
 800abfe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ac00:	e03c      	b.n	800ac7c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac06:	4618      	mov	r0, r3
 800ac08:	f7fe f812 	bl	8008c30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ac0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac10:	e034      	b.n	800ac7c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac12:	f107 0318 	add.w	r3, r7, #24
 800ac16:	4618      	mov	r0, r3
 800ac18:	f7fe f95e 	bl	8008ed8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ac1c:	69fb      	ldr	r3, [r7, #28]
 800ac1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac20:	e02c      	b.n	800ac7c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac22:	4b09      	ldr	r3, [pc, #36]	; (800ac48 <UART_SetConfig+0x69c>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f003 0320 	and.w	r3, r3, #32
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d016      	beq.n	800ac5c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ac2e:	4b06      	ldr	r3, [pc, #24]	; (800ac48 <UART_SetConfig+0x69c>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	08db      	lsrs	r3, r3, #3
 800ac34:	f003 0303 	and.w	r3, r3, #3
 800ac38:	4a07      	ldr	r2, [pc, #28]	; (800ac58 <UART_SetConfig+0x6ac>)
 800ac3a:	fa22 f303 	lsr.w	r3, r2, r3
 800ac3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ac40:	e01c      	b.n	800ac7c <UART_SetConfig+0x6d0>
 800ac42:	bf00      	nop
 800ac44:	40011400 	.word	0x40011400
 800ac48:	58024400 	.word	0x58024400
 800ac4c:	40007800 	.word	0x40007800
 800ac50:	40007c00 	.word	0x40007c00
 800ac54:	58000c00 	.word	0x58000c00
 800ac58:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800ac5c:	4b9d      	ldr	r3, [pc, #628]	; (800aed4 <UART_SetConfig+0x928>)
 800ac5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac60:	e00c      	b.n	800ac7c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ac62:	4b9d      	ldr	r3, [pc, #628]	; (800aed8 <UART_SetConfig+0x92c>)
 800ac64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac66:	e009      	b.n	800ac7c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac6e:	e005      	b.n	800ac7c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800ac70:	2300      	movs	r3, #0
 800ac72:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ac74:	2301      	movs	r3, #1
 800ac76:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ac7a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ac7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	f000 81de 	beq.w	800b040 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac88:	4a94      	ldr	r2, [pc, #592]	; (800aedc <UART_SetConfig+0x930>)
 800ac8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac8e:	461a      	mov	r2, r3
 800ac90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac92:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac96:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	685a      	ldr	r2, [r3, #4]
 800ac9c:	4613      	mov	r3, r2
 800ac9e:	005b      	lsls	r3, r3, #1
 800aca0:	4413      	add	r3, r2
 800aca2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aca4:	429a      	cmp	r2, r3
 800aca6:	d305      	bcc.n	800acb4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	685b      	ldr	r3, [r3, #4]
 800acac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800acae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acb0:	429a      	cmp	r2, r3
 800acb2:	d903      	bls.n	800acbc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800acb4:	2301      	movs	r3, #1
 800acb6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800acba:	e1c1      	b.n	800b040 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800acbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acbe:	2200      	movs	r2, #0
 800acc0:	60bb      	str	r3, [r7, #8]
 800acc2:	60fa      	str	r2, [r7, #12]
 800acc4:	697b      	ldr	r3, [r7, #20]
 800acc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acc8:	4a84      	ldr	r2, [pc, #528]	; (800aedc <UART_SetConfig+0x930>)
 800acca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800acce:	b29b      	uxth	r3, r3
 800acd0:	2200      	movs	r2, #0
 800acd2:	603b      	str	r3, [r7, #0]
 800acd4:	607a      	str	r2, [r7, #4]
 800acd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800acda:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800acde:	f7f5 fd13 	bl	8000708 <__aeabi_uldivmod>
 800ace2:	4602      	mov	r2, r0
 800ace4:	460b      	mov	r3, r1
 800ace6:	4610      	mov	r0, r2
 800ace8:	4619      	mov	r1, r3
 800acea:	f04f 0200 	mov.w	r2, #0
 800acee:	f04f 0300 	mov.w	r3, #0
 800acf2:	020b      	lsls	r3, r1, #8
 800acf4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800acf8:	0202      	lsls	r2, r0, #8
 800acfa:	6979      	ldr	r1, [r7, #20]
 800acfc:	6849      	ldr	r1, [r1, #4]
 800acfe:	0849      	lsrs	r1, r1, #1
 800ad00:	2000      	movs	r0, #0
 800ad02:	460c      	mov	r4, r1
 800ad04:	4605      	mov	r5, r0
 800ad06:	eb12 0804 	adds.w	r8, r2, r4
 800ad0a:	eb43 0905 	adc.w	r9, r3, r5
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	685b      	ldr	r3, [r3, #4]
 800ad12:	2200      	movs	r2, #0
 800ad14:	469a      	mov	sl, r3
 800ad16:	4693      	mov	fp, r2
 800ad18:	4652      	mov	r2, sl
 800ad1a:	465b      	mov	r3, fp
 800ad1c:	4640      	mov	r0, r8
 800ad1e:	4649      	mov	r1, r9
 800ad20:	f7f5 fcf2 	bl	8000708 <__aeabi_uldivmod>
 800ad24:	4602      	mov	r2, r0
 800ad26:	460b      	mov	r3, r1
 800ad28:	4613      	mov	r3, r2
 800ad2a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ad2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ad32:	d308      	bcc.n	800ad46 <UART_SetConfig+0x79a>
 800ad34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad3a:	d204      	bcs.n	800ad46 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad42:	60da      	str	r2, [r3, #12]
 800ad44:	e17c      	b.n	800b040 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800ad46:	2301      	movs	r3, #1
 800ad48:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ad4c:	e178      	b.n	800b040 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	69db      	ldr	r3, [r3, #28]
 800ad52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad56:	f040 80c5 	bne.w	800aee4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800ad5a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ad5e:	2b20      	cmp	r3, #32
 800ad60:	dc48      	bgt.n	800adf4 <UART_SetConfig+0x848>
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	db7b      	blt.n	800ae5e <UART_SetConfig+0x8b2>
 800ad66:	2b20      	cmp	r3, #32
 800ad68:	d879      	bhi.n	800ae5e <UART_SetConfig+0x8b2>
 800ad6a:	a201      	add	r2, pc, #4	; (adr r2, 800ad70 <UART_SetConfig+0x7c4>)
 800ad6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad70:	0800adfb 	.word	0x0800adfb
 800ad74:	0800ae03 	.word	0x0800ae03
 800ad78:	0800ae5f 	.word	0x0800ae5f
 800ad7c:	0800ae5f 	.word	0x0800ae5f
 800ad80:	0800ae0b 	.word	0x0800ae0b
 800ad84:	0800ae5f 	.word	0x0800ae5f
 800ad88:	0800ae5f 	.word	0x0800ae5f
 800ad8c:	0800ae5f 	.word	0x0800ae5f
 800ad90:	0800ae1b 	.word	0x0800ae1b
 800ad94:	0800ae5f 	.word	0x0800ae5f
 800ad98:	0800ae5f 	.word	0x0800ae5f
 800ad9c:	0800ae5f 	.word	0x0800ae5f
 800ada0:	0800ae5f 	.word	0x0800ae5f
 800ada4:	0800ae5f 	.word	0x0800ae5f
 800ada8:	0800ae5f 	.word	0x0800ae5f
 800adac:	0800ae5f 	.word	0x0800ae5f
 800adb0:	0800ae2b 	.word	0x0800ae2b
 800adb4:	0800ae5f 	.word	0x0800ae5f
 800adb8:	0800ae5f 	.word	0x0800ae5f
 800adbc:	0800ae5f 	.word	0x0800ae5f
 800adc0:	0800ae5f 	.word	0x0800ae5f
 800adc4:	0800ae5f 	.word	0x0800ae5f
 800adc8:	0800ae5f 	.word	0x0800ae5f
 800adcc:	0800ae5f 	.word	0x0800ae5f
 800add0:	0800ae5f 	.word	0x0800ae5f
 800add4:	0800ae5f 	.word	0x0800ae5f
 800add8:	0800ae5f 	.word	0x0800ae5f
 800addc:	0800ae5f 	.word	0x0800ae5f
 800ade0:	0800ae5f 	.word	0x0800ae5f
 800ade4:	0800ae5f 	.word	0x0800ae5f
 800ade8:	0800ae5f 	.word	0x0800ae5f
 800adec:	0800ae5f 	.word	0x0800ae5f
 800adf0:	0800ae51 	.word	0x0800ae51
 800adf4:	2b40      	cmp	r3, #64	; 0x40
 800adf6:	d02e      	beq.n	800ae56 <UART_SetConfig+0x8aa>
 800adf8:	e031      	b.n	800ae5e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800adfa:	f7fc fc8b 	bl	8007714 <HAL_RCC_GetPCLK1Freq>
 800adfe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ae00:	e033      	b.n	800ae6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae02:	f7fc fc9d 	bl	8007740 <HAL_RCC_GetPCLK2Freq>
 800ae06:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ae08:	e02f      	b.n	800ae6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f7fd ff0e 	bl	8008c30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ae14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae18:	e027      	b.n	800ae6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae1a:	f107 0318 	add.w	r3, r7, #24
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f7fe f85a 	bl	8008ed8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ae24:	69fb      	ldr	r3, [r7, #28]
 800ae26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae28:	e01f      	b.n	800ae6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae2a:	4b2d      	ldr	r3, [pc, #180]	; (800aee0 <UART_SetConfig+0x934>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f003 0320 	and.w	r3, r3, #32
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d009      	beq.n	800ae4a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ae36:	4b2a      	ldr	r3, [pc, #168]	; (800aee0 <UART_SetConfig+0x934>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	08db      	lsrs	r3, r3, #3
 800ae3c:	f003 0303 	and.w	r3, r3, #3
 800ae40:	4a24      	ldr	r2, [pc, #144]	; (800aed4 <UART_SetConfig+0x928>)
 800ae42:	fa22 f303 	lsr.w	r3, r2, r3
 800ae46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ae48:	e00f      	b.n	800ae6a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ae4a:	4b22      	ldr	r3, [pc, #136]	; (800aed4 <UART_SetConfig+0x928>)
 800ae4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae4e:	e00c      	b.n	800ae6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ae50:	4b21      	ldr	r3, [pc, #132]	; (800aed8 <UART_SetConfig+0x92c>)
 800ae52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae54:	e009      	b.n	800ae6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae5c:	e005      	b.n	800ae6a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ae62:	2301      	movs	r3, #1
 800ae64:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ae68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ae6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	f000 80e7 	beq.w	800b040 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae76:	4a19      	ldr	r2, [pc, #100]	; (800aedc <UART_SetConfig+0x930>)
 800ae78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae7c:	461a      	mov	r2, r3
 800ae7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae80:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae84:	005a      	lsls	r2, r3, #1
 800ae86:	697b      	ldr	r3, [r7, #20]
 800ae88:	685b      	ldr	r3, [r3, #4]
 800ae8a:	085b      	lsrs	r3, r3, #1
 800ae8c:	441a      	add	r2, r3
 800ae8e:	697b      	ldr	r3, [r7, #20]
 800ae90:	685b      	ldr	r3, [r3, #4]
 800ae92:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae96:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae9a:	2b0f      	cmp	r3, #15
 800ae9c:	d916      	bls.n	800aecc <UART_SetConfig+0x920>
 800ae9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aea4:	d212      	bcs.n	800aecc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aea8:	b29b      	uxth	r3, r3
 800aeaa:	f023 030f 	bic.w	r3, r3, #15
 800aeae:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aeb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeb2:	085b      	lsrs	r3, r3, #1
 800aeb4:	b29b      	uxth	r3, r3
 800aeb6:	f003 0307 	and.w	r3, r3, #7
 800aeba:	b29a      	uxth	r2, r3
 800aebc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800aebe:	4313      	orrs	r3, r2
 800aec0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800aec8:	60da      	str	r2, [r3, #12]
 800aeca:	e0b9      	b.n	800b040 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800aecc:	2301      	movs	r3, #1
 800aece:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800aed2:	e0b5      	b.n	800b040 <UART_SetConfig+0xa94>
 800aed4:	03d09000 	.word	0x03d09000
 800aed8:	003d0900 	.word	0x003d0900
 800aedc:	0801c030 	.word	0x0801c030
 800aee0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800aee4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800aee8:	2b20      	cmp	r3, #32
 800aeea:	dc49      	bgt.n	800af80 <UART_SetConfig+0x9d4>
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	db7c      	blt.n	800afea <UART_SetConfig+0xa3e>
 800aef0:	2b20      	cmp	r3, #32
 800aef2:	d87a      	bhi.n	800afea <UART_SetConfig+0xa3e>
 800aef4:	a201      	add	r2, pc, #4	; (adr r2, 800aefc <UART_SetConfig+0x950>)
 800aef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aefa:	bf00      	nop
 800aefc:	0800af87 	.word	0x0800af87
 800af00:	0800af8f 	.word	0x0800af8f
 800af04:	0800afeb 	.word	0x0800afeb
 800af08:	0800afeb 	.word	0x0800afeb
 800af0c:	0800af97 	.word	0x0800af97
 800af10:	0800afeb 	.word	0x0800afeb
 800af14:	0800afeb 	.word	0x0800afeb
 800af18:	0800afeb 	.word	0x0800afeb
 800af1c:	0800afa7 	.word	0x0800afa7
 800af20:	0800afeb 	.word	0x0800afeb
 800af24:	0800afeb 	.word	0x0800afeb
 800af28:	0800afeb 	.word	0x0800afeb
 800af2c:	0800afeb 	.word	0x0800afeb
 800af30:	0800afeb 	.word	0x0800afeb
 800af34:	0800afeb 	.word	0x0800afeb
 800af38:	0800afeb 	.word	0x0800afeb
 800af3c:	0800afb7 	.word	0x0800afb7
 800af40:	0800afeb 	.word	0x0800afeb
 800af44:	0800afeb 	.word	0x0800afeb
 800af48:	0800afeb 	.word	0x0800afeb
 800af4c:	0800afeb 	.word	0x0800afeb
 800af50:	0800afeb 	.word	0x0800afeb
 800af54:	0800afeb 	.word	0x0800afeb
 800af58:	0800afeb 	.word	0x0800afeb
 800af5c:	0800afeb 	.word	0x0800afeb
 800af60:	0800afeb 	.word	0x0800afeb
 800af64:	0800afeb 	.word	0x0800afeb
 800af68:	0800afeb 	.word	0x0800afeb
 800af6c:	0800afeb 	.word	0x0800afeb
 800af70:	0800afeb 	.word	0x0800afeb
 800af74:	0800afeb 	.word	0x0800afeb
 800af78:	0800afeb 	.word	0x0800afeb
 800af7c:	0800afdd 	.word	0x0800afdd
 800af80:	2b40      	cmp	r3, #64	; 0x40
 800af82:	d02e      	beq.n	800afe2 <UART_SetConfig+0xa36>
 800af84:	e031      	b.n	800afea <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af86:	f7fc fbc5 	bl	8007714 <HAL_RCC_GetPCLK1Freq>
 800af8a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800af8c:	e033      	b.n	800aff6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af8e:	f7fc fbd7 	bl	8007740 <HAL_RCC_GetPCLK2Freq>
 800af92:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800af94:	e02f      	b.n	800aff6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800af9a:	4618      	mov	r0, r3
 800af9c:	f7fd fe48 	bl	8008c30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800afa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afa4:	e027      	b.n	800aff6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800afa6:	f107 0318 	add.w	r3, r7, #24
 800afaa:	4618      	mov	r0, r3
 800afac:	f7fd ff94 	bl	8008ed8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800afb0:	69fb      	ldr	r3, [r7, #28]
 800afb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afb4:	e01f      	b.n	800aff6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800afb6:	4b2d      	ldr	r3, [pc, #180]	; (800b06c <UART_SetConfig+0xac0>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f003 0320 	and.w	r3, r3, #32
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d009      	beq.n	800afd6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800afc2:	4b2a      	ldr	r3, [pc, #168]	; (800b06c <UART_SetConfig+0xac0>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	08db      	lsrs	r3, r3, #3
 800afc8:	f003 0303 	and.w	r3, r3, #3
 800afcc:	4a28      	ldr	r2, [pc, #160]	; (800b070 <UART_SetConfig+0xac4>)
 800afce:	fa22 f303 	lsr.w	r3, r2, r3
 800afd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800afd4:	e00f      	b.n	800aff6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800afd6:	4b26      	ldr	r3, [pc, #152]	; (800b070 <UART_SetConfig+0xac4>)
 800afd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afda:	e00c      	b.n	800aff6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800afdc:	4b25      	ldr	r3, [pc, #148]	; (800b074 <UART_SetConfig+0xac8>)
 800afde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afe0:	e009      	b.n	800aff6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800afe2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800afe6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afe8:	e005      	b.n	800aff6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800afea:	2300      	movs	r3, #0
 800afec:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800afee:	2301      	movs	r3, #1
 800aff0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800aff4:	bf00      	nop
    }

    if (pclk != 0U)
 800aff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d021      	beq.n	800b040 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b000:	4a1d      	ldr	r2, [pc, #116]	; (800b078 <UART_SetConfig+0xacc>)
 800b002:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b006:	461a      	mov	r2, r3
 800b008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b00a:	fbb3 f2f2 	udiv	r2, r3, r2
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	685b      	ldr	r3, [r3, #4]
 800b012:	085b      	lsrs	r3, r3, #1
 800b014:	441a      	add	r2, r3
 800b016:	697b      	ldr	r3, [r7, #20]
 800b018:	685b      	ldr	r3, [r3, #4]
 800b01a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b01e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b022:	2b0f      	cmp	r3, #15
 800b024:	d909      	bls.n	800b03a <UART_SetConfig+0xa8e>
 800b026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b02c:	d205      	bcs.n	800b03a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b02e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b030:	b29a      	uxth	r2, r3
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	60da      	str	r2, [r3, #12]
 800b038:	e002      	b.n	800b040 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b03a:	2301      	movs	r3, #1
 800b03c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b040:	697b      	ldr	r3, [r7, #20]
 800b042:	2201      	movs	r2, #1
 800b044:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	2201      	movs	r2, #1
 800b04c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b050:	697b      	ldr	r3, [r7, #20]
 800b052:	2200      	movs	r2, #0
 800b054:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800b056:	697b      	ldr	r3, [r7, #20]
 800b058:	2200      	movs	r2, #0
 800b05a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800b05c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800b060:	4618      	mov	r0, r3
 800b062:	3748      	adds	r7, #72	; 0x48
 800b064:	46bd      	mov	sp, r7
 800b066:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b06a:	bf00      	nop
 800b06c:	58024400 	.word	0x58024400
 800b070:	03d09000 	.word	0x03d09000
 800b074:	003d0900 	.word	0x003d0900
 800b078:	0801c030 	.word	0x0801c030

0800b07c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b07c:	b480      	push	{r7}
 800b07e:	b083      	sub	sp, #12
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b088:	f003 0301 	and.w	r3, r3, #1
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d00a      	beq.n	800b0a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	685b      	ldr	r3, [r3, #4]
 800b096:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	430a      	orrs	r2, r1
 800b0a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0aa:	f003 0302 	and.w	r3, r3, #2
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d00a      	beq.n	800b0c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	685b      	ldr	r3, [r3, #4]
 800b0b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	430a      	orrs	r2, r1
 800b0c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0cc:	f003 0304 	and.w	r3, r3, #4
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d00a      	beq.n	800b0ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	685b      	ldr	r3, [r3, #4]
 800b0da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	430a      	orrs	r2, r1
 800b0e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0ee:	f003 0308 	and.w	r3, r3, #8
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d00a      	beq.n	800b10c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	685b      	ldr	r3, [r3, #4]
 800b0fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	430a      	orrs	r2, r1
 800b10a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b110:	f003 0310 	and.w	r3, r3, #16
 800b114:	2b00      	cmp	r3, #0
 800b116:	d00a      	beq.n	800b12e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	689b      	ldr	r3, [r3, #8]
 800b11e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	430a      	orrs	r2, r1
 800b12c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b132:	f003 0320 	and.w	r3, r3, #32
 800b136:	2b00      	cmp	r3, #0
 800b138:	d00a      	beq.n	800b150 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	689b      	ldr	r3, [r3, #8]
 800b140:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	430a      	orrs	r2, r1
 800b14e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d01a      	beq.n	800b192 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	685b      	ldr	r3, [r3, #4]
 800b162:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	430a      	orrs	r2, r1
 800b170:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b176:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b17a:	d10a      	bne.n	800b192 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	685b      	ldr	r3, [r3, #4]
 800b182:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	430a      	orrs	r2, r1
 800b190:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d00a      	beq.n	800b1b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	685b      	ldr	r3, [r3, #4]
 800b1a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	430a      	orrs	r2, r1
 800b1b2:	605a      	str	r2, [r3, #4]
  }
}
 800b1b4:	bf00      	nop
 800b1b6:	370c      	adds	r7, #12
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1be:	4770      	bx	lr

0800b1c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b098      	sub	sp, #96	; 0x60
 800b1c4:	af02      	add	r7, sp, #8
 800b1c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b1d0:	f7f6 fe1a 	bl	8001e08 <HAL_GetTick>
 800b1d4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	f003 0308 	and.w	r3, r3, #8
 800b1e0:	2b08      	cmp	r3, #8
 800b1e2:	d12f      	bne.n	800b244 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b1e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b1e8:	9300      	str	r3, [sp, #0]
 800b1ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f000 f88e 	bl	800b314 <UART_WaitOnFlagUntilTimeout>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d022      	beq.n	800b244 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b206:	e853 3f00 	ldrex	r3, [r3]
 800b20a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b20c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b20e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b212:	653b      	str	r3, [r7, #80]	; 0x50
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	461a      	mov	r2, r3
 800b21a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b21c:	647b      	str	r3, [r7, #68]	; 0x44
 800b21e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b220:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b222:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b224:	e841 2300 	strex	r3, r2, [r1]
 800b228:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b22a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d1e6      	bne.n	800b1fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2220      	movs	r2, #32
 800b234:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2200      	movs	r2, #0
 800b23c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b240:	2303      	movs	r3, #3
 800b242:	e063      	b.n	800b30c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f003 0304 	and.w	r3, r3, #4
 800b24e:	2b04      	cmp	r3, #4
 800b250:	d149      	bne.n	800b2e6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b252:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b256:	9300      	str	r3, [sp, #0]
 800b258:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b25a:	2200      	movs	r2, #0
 800b25c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f000 f857 	bl	800b314 <UART_WaitOnFlagUntilTimeout>
 800b266:	4603      	mov	r3, r0
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d03c      	beq.n	800b2e6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b274:	e853 3f00 	ldrex	r3, [r3]
 800b278:	623b      	str	r3, [r7, #32]
   return(result);
 800b27a:	6a3b      	ldr	r3, [r7, #32]
 800b27c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b280:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	461a      	mov	r2, r3
 800b288:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b28a:	633b      	str	r3, [r7, #48]	; 0x30
 800b28c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b28e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b292:	e841 2300 	strex	r3, r2, [r1]
 800b296:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d1e6      	bne.n	800b26c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	3308      	adds	r3, #8
 800b2a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	e853 3f00 	ldrex	r3, [r3]
 800b2ac:	60fb      	str	r3, [r7, #12]
   return(result);
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	f023 0301 	bic.w	r3, r3, #1
 800b2b4:	64bb      	str	r3, [r7, #72]	; 0x48
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	3308      	adds	r3, #8
 800b2bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b2be:	61fa      	str	r2, [r7, #28]
 800b2c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2c2:	69b9      	ldr	r1, [r7, #24]
 800b2c4:	69fa      	ldr	r2, [r7, #28]
 800b2c6:	e841 2300 	strex	r3, r2, [r1]
 800b2ca:	617b      	str	r3, [r7, #20]
   return(result);
 800b2cc:	697b      	ldr	r3, [r7, #20]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d1e5      	bne.n	800b29e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2220      	movs	r2, #32
 800b2d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2200      	movs	r2, #0
 800b2de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b2e2:	2303      	movs	r3, #3
 800b2e4:	e012      	b.n	800b30c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2220      	movs	r2, #32
 800b2ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2220      	movs	r2, #32
 800b2f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2200      	movs	r2, #0
 800b300:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2200      	movs	r2, #0
 800b306:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b30a:	2300      	movs	r3, #0
}
 800b30c:	4618      	mov	r0, r3
 800b30e:	3758      	adds	r7, #88	; 0x58
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}

0800b314 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b084      	sub	sp, #16
 800b318:	af00      	add	r7, sp, #0
 800b31a:	60f8      	str	r0, [r7, #12]
 800b31c:	60b9      	str	r1, [r7, #8]
 800b31e:	603b      	str	r3, [r7, #0]
 800b320:	4613      	mov	r3, r2
 800b322:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b324:	e049      	b.n	800b3ba <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b326:	69bb      	ldr	r3, [r7, #24]
 800b328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b32c:	d045      	beq.n	800b3ba <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b32e:	f7f6 fd6b 	bl	8001e08 <HAL_GetTick>
 800b332:	4602      	mov	r2, r0
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	1ad3      	subs	r3, r2, r3
 800b338:	69ba      	ldr	r2, [r7, #24]
 800b33a:	429a      	cmp	r2, r3
 800b33c:	d302      	bcc.n	800b344 <UART_WaitOnFlagUntilTimeout+0x30>
 800b33e:	69bb      	ldr	r3, [r7, #24]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d101      	bne.n	800b348 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b344:	2303      	movs	r3, #3
 800b346:	e048      	b.n	800b3da <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	f003 0304 	and.w	r3, r3, #4
 800b352:	2b00      	cmp	r3, #0
 800b354:	d031      	beq.n	800b3ba <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	69db      	ldr	r3, [r3, #28]
 800b35c:	f003 0308 	and.w	r3, r3, #8
 800b360:	2b08      	cmp	r3, #8
 800b362:	d110      	bne.n	800b386 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	2208      	movs	r2, #8
 800b36a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800b36c:	68f8      	ldr	r0, [r7, #12]
 800b36e:	f000 fa43 	bl	800b7f8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	2208      	movs	r2, #8
 800b376:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	2200      	movs	r2, #0
 800b37e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800b382:	2301      	movs	r3, #1
 800b384:	e029      	b.n	800b3da <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	69db      	ldr	r3, [r3, #28]
 800b38c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b390:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b394:	d111      	bne.n	800b3ba <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b39e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b3a0:	68f8      	ldr	r0, [r7, #12]
 800b3a2:	f000 fa29 	bl	800b7f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	2220      	movs	r2, #32
 800b3aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800b3b6:	2303      	movs	r3, #3
 800b3b8:	e00f      	b.n	800b3da <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	69da      	ldr	r2, [r3, #28]
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	4013      	ands	r3, r2
 800b3c4:	68ba      	ldr	r2, [r7, #8]
 800b3c6:	429a      	cmp	r2, r3
 800b3c8:	bf0c      	ite	eq
 800b3ca:	2301      	moveq	r3, #1
 800b3cc:	2300      	movne	r3, #0
 800b3ce:	b2db      	uxtb	r3, r3
 800b3d0:	461a      	mov	r2, r3
 800b3d2:	79fb      	ldrb	r3, [r7, #7]
 800b3d4:	429a      	cmp	r2, r3
 800b3d6:	d0a6      	beq.n	800b326 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b3d8:	2300      	movs	r3, #0
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	3710      	adds	r7, #16
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bd80      	pop	{r7, pc}
	...

0800b3e4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b3e4:	b480      	push	{r7}
 800b3e6:	b0a3      	sub	sp, #140	; 0x8c
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	60f8      	str	r0, [r7, #12]
 800b3ec:	60b9      	str	r1, [r7, #8]
 800b3ee:	4613      	mov	r3, r2
 800b3f0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	68ba      	ldr	r2, [r7, #8]
 800b3f6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	88fa      	ldrh	r2, [r7, #6]
 800b3fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	88fa      	ldrh	r2, [r7, #6]
 800b404:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	2200      	movs	r2, #0
 800b40c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	689b      	ldr	r3, [r3, #8]
 800b412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b416:	d10e      	bne.n	800b436 <UART_Start_Receive_IT+0x52>
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	691b      	ldr	r3, [r3, #16]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d105      	bne.n	800b42c <UART_Start_Receive_IT+0x48>
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b426:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b42a:	e02d      	b.n	800b488 <UART_Start_Receive_IT+0xa4>
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	22ff      	movs	r2, #255	; 0xff
 800b430:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b434:	e028      	b.n	800b488 <UART_Start_Receive_IT+0xa4>
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	689b      	ldr	r3, [r3, #8]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d10d      	bne.n	800b45a <UART_Start_Receive_IT+0x76>
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	691b      	ldr	r3, [r3, #16]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d104      	bne.n	800b450 <UART_Start_Receive_IT+0x6c>
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	22ff      	movs	r2, #255	; 0xff
 800b44a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b44e:	e01b      	b.n	800b488 <UART_Start_Receive_IT+0xa4>
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	227f      	movs	r2, #127	; 0x7f
 800b454:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b458:	e016      	b.n	800b488 <UART_Start_Receive_IT+0xa4>
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	689b      	ldr	r3, [r3, #8]
 800b45e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b462:	d10d      	bne.n	800b480 <UART_Start_Receive_IT+0x9c>
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	691b      	ldr	r3, [r3, #16]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d104      	bne.n	800b476 <UART_Start_Receive_IT+0x92>
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	227f      	movs	r2, #127	; 0x7f
 800b470:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b474:	e008      	b.n	800b488 <UART_Start_Receive_IT+0xa4>
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	223f      	movs	r2, #63	; 0x3f
 800b47a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b47e:	e003      	b.n	800b488 <UART_Start_Receive_IT+0xa4>
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	2200      	movs	r2, #0
 800b484:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	2200      	movs	r2, #0
 800b48c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	2222      	movs	r2, #34	; 0x22
 800b494:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	3308      	adds	r3, #8
 800b49e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b4a2:	e853 3f00 	ldrex	r3, [r3]
 800b4a6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b4a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b4aa:	f043 0301 	orr.w	r3, r3, #1
 800b4ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	3308      	adds	r3, #8
 800b4b8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b4bc:	673a      	str	r2, [r7, #112]	; 0x70
 800b4be:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4c0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800b4c2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b4c4:	e841 2300 	strex	r3, r2, [r1]
 800b4c8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800b4ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d1e3      	bne.n	800b498 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b4d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4d8:	d14f      	bne.n	800b57a <UART_Start_Receive_IT+0x196>
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b4e0:	88fa      	ldrh	r2, [r7, #6]
 800b4e2:	429a      	cmp	r2, r3
 800b4e4:	d349      	bcc.n	800b57a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	689b      	ldr	r3, [r3, #8]
 800b4ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4ee:	d107      	bne.n	800b500 <UART_Start_Receive_IT+0x11c>
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	691b      	ldr	r3, [r3, #16]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d103      	bne.n	800b500 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	4a47      	ldr	r2, [pc, #284]	; (800b618 <UART_Start_Receive_IT+0x234>)
 800b4fc:	675a      	str	r2, [r3, #116]	; 0x74
 800b4fe:	e002      	b.n	800b506 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	4a46      	ldr	r2, [pc, #280]	; (800b61c <UART_Start_Receive_IT+0x238>)
 800b504:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	691b      	ldr	r3, [r3, #16]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d01a      	beq.n	800b544 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b514:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b516:	e853 3f00 	ldrex	r3, [r3]
 800b51a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b51c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b51e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b522:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	461a      	mov	r2, r3
 800b52c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b530:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b532:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b534:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b536:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b538:	e841 2300 	strex	r3, r2, [r1]
 800b53c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b53e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b540:	2b00      	cmp	r3, #0
 800b542:	d1e4      	bne.n	800b50e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	3308      	adds	r3, #8
 800b54a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b54c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b54e:	e853 3f00 	ldrex	r3, [r3]
 800b552:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b55a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	3308      	adds	r3, #8
 800b562:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b564:	64ba      	str	r2, [r7, #72]	; 0x48
 800b566:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b568:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b56a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b56c:	e841 2300 	strex	r3, r2, [r1]
 800b570:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b574:	2b00      	cmp	r3, #0
 800b576:	d1e5      	bne.n	800b544 <UART_Start_Receive_IT+0x160>
 800b578:	e046      	b.n	800b608 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	689b      	ldr	r3, [r3, #8]
 800b57e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b582:	d107      	bne.n	800b594 <UART_Start_Receive_IT+0x1b0>
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	691b      	ldr	r3, [r3, #16]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d103      	bne.n	800b594 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	4a24      	ldr	r2, [pc, #144]	; (800b620 <UART_Start_Receive_IT+0x23c>)
 800b590:	675a      	str	r2, [r3, #116]	; 0x74
 800b592:	e002      	b.n	800b59a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	4a23      	ldr	r2, [pc, #140]	; (800b624 <UART_Start_Receive_IT+0x240>)
 800b598:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	691b      	ldr	r3, [r3, #16]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d019      	beq.n	800b5d6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5aa:	e853 3f00 	ldrex	r3, [r3]
 800b5ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5b2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800b5b6:	677b      	str	r3, [r7, #116]	; 0x74
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	461a      	mov	r2, r3
 800b5be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b5c0:	637b      	str	r3, [r7, #52]	; 0x34
 800b5c2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b5c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b5c8:	e841 2300 	strex	r3, r2, [r1]
 800b5cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d1e6      	bne.n	800b5a2 <UART_Start_Receive_IT+0x1be>
 800b5d4:	e018      	b.n	800b608 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5dc:	697b      	ldr	r3, [r7, #20]
 800b5de:	e853 3f00 	ldrex	r3, [r3]
 800b5e2:	613b      	str	r3, [r7, #16]
   return(result);
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	f043 0320 	orr.w	r3, r3, #32
 800b5ea:	67bb      	str	r3, [r7, #120]	; 0x78
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	461a      	mov	r2, r3
 800b5f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b5f4:	623b      	str	r3, [r7, #32]
 800b5f6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5f8:	69f9      	ldr	r1, [r7, #28]
 800b5fa:	6a3a      	ldr	r2, [r7, #32]
 800b5fc:	e841 2300 	strex	r3, r2, [r1]
 800b600:	61bb      	str	r3, [r7, #24]
   return(result);
 800b602:	69bb      	ldr	r3, [r7, #24]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d1e6      	bne.n	800b5d6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800b608:	2300      	movs	r3, #0
}
 800b60a:	4618      	mov	r0, r3
 800b60c:	378c      	adds	r7, #140	; 0x8c
 800b60e:	46bd      	mov	sp, r7
 800b610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b614:	4770      	bx	lr
 800b616:	bf00      	nop
 800b618:	0800c2b1 	.word	0x0800c2b1
 800b61c:	0800bf51 	.word	0x0800bf51
 800b620:	0800bd99 	.word	0x0800bd99
 800b624:	0800bbe1 	.word	0x0800bbe1

0800b628 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b096      	sub	sp, #88	; 0x58
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	60f8      	str	r0, [r7, #12]
 800b630:	60b9      	str	r1, [r7, #8]
 800b632:	4613      	mov	r3, r2
 800b634:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	68ba      	ldr	r2, [r7, #8]
 800b63a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	88fa      	ldrh	r2, [r7, #6]
 800b640:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	2200      	movs	r2, #0
 800b648:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	2222      	movs	r2, #34	; 0x22
 800b650:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d02d      	beq.n	800b6ba <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b664:	4a40      	ldr	r2, [pc, #256]	; (800b768 <UART_Start_Receive_DMA+0x140>)
 800b666:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b66e:	4a3f      	ldr	r2, [pc, #252]	; (800b76c <UART_Start_Receive_DMA+0x144>)
 800b670:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b678:	4a3d      	ldr	r2, [pc, #244]	; (800b770 <UART_Start_Receive_DMA+0x148>)
 800b67a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b682:	2200      	movs	r2, #0
 800b684:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	3324      	adds	r3, #36	; 0x24
 800b692:	4619      	mov	r1, r3
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b698:	461a      	mov	r2, r3
 800b69a:	88fb      	ldrh	r3, [r7, #6]
 800b69c:	f7f7 f840 	bl	8002720 <HAL_DMA_Start_IT>
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d009      	beq.n	800b6ba <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	2210      	movs	r2, #16
 800b6aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	2220      	movs	r2, #32
 800b6b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	e051      	b.n	800b75e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	691b      	ldr	r3, [r3, #16]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d018      	beq.n	800b6f4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6ca:	e853 3f00 	ldrex	r3, [r3]
 800b6ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b6d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b6d6:	657b      	str	r3, [r7, #84]	; 0x54
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	461a      	mov	r2, r3
 800b6de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b6e0:	64bb      	str	r3, [r7, #72]	; 0x48
 800b6e2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6e4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b6e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b6e8:	e841 2300 	strex	r3, r2, [r1]
 800b6ec:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b6ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d1e6      	bne.n	800b6c2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	3308      	adds	r3, #8
 800b6fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6fe:	e853 3f00 	ldrex	r3, [r3]
 800b702:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b706:	f043 0301 	orr.w	r3, r3, #1
 800b70a:	653b      	str	r3, [r7, #80]	; 0x50
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	3308      	adds	r3, #8
 800b712:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b714:	637a      	str	r2, [r7, #52]	; 0x34
 800b716:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b718:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b71a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b71c:	e841 2300 	strex	r3, r2, [r1]
 800b720:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b724:	2b00      	cmp	r3, #0
 800b726:	d1e5      	bne.n	800b6f4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	3308      	adds	r3, #8
 800b72e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b730:	697b      	ldr	r3, [r7, #20]
 800b732:	e853 3f00 	ldrex	r3, [r3]
 800b736:	613b      	str	r3, [r7, #16]
   return(result);
 800b738:	693b      	ldr	r3, [r7, #16]
 800b73a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b73e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	3308      	adds	r3, #8
 800b746:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b748:	623a      	str	r2, [r7, #32]
 800b74a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b74c:	69f9      	ldr	r1, [r7, #28]
 800b74e:	6a3a      	ldr	r2, [r7, #32]
 800b750:	e841 2300 	strex	r3, r2, [r1]
 800b754:	61bb      	str	r3, [r7, #24]
   return(result);
 800b756:	69bb      	ldr	r3, [r7, #24]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d1e5      	bne.n	800b728 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b75c:	2300      	movs	r3, #0
}
 800b75e:	4618      	mov	r0, r3
 800b760:	3758      	adds	r7, #88	; 0x58
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}
 800b766:	bf00      	nop
 800b768:	0800b977 	.word	0x0800b977
 800b76c:	0800ba9f 	.word	0x0800ba9f
 800b770:	0800badd 	.word	0x0800badd

0800b774 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b774:	b480      	push	{r7}
 800b776:	b08f      	sub	sp, #60	; 0x3c
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b782:	6a3b      	ldr	r3, [r7, #32]
 800b784:	e853 3f00 	ldrex	r3, [r3]
 800b788:	61fb      	str	r3, [r7, #28]
   return(result);
 800b78a:	69fb      	ldr	r3, [r7, #28]
 800b78c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b790:	637b      	str	r3, [r7, #52]	; 0x34
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	461a      	mov	r2, r3
 800b798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b79a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b79c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b79e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b7a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7a2:	e841 2300 	strex	r3, r2, [r1]
 800b7a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d1e6      	bne.n	800b77c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	3308      	adds	r3, #8
 800b7b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	e853 3f00 	ldrex	r3, [r3]
 800b7bc:	60bb      	str	r3, [r7, #8]
   return(result);
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b7c4:	633b      	str	r3, [r7, #48]	; 0x30
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	3308      	adds	r3, #8
 800b7cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7ce:	61ba      	str	r2, [r7, #24]
 800b7d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7d2:	6979      	ldr	r1, [r7, #20]
 800b7d4:	69ba      	ldr	r2, [r7, #24]
 800b7d6:	e841 2300 	strex	r3, r2, [r1]
 800b7da:	613b      	str	r3, [r7, #16]
   return(result);
 800b7dc:	693b      	ldr	r3, [r7, #16]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d1e5      	bne.n	800b7ae <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2220      	movs	r2, #32
 800b7e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800b7ea:	bf00      	nop
 800b7ec:	373c      	adds	r7, #60	; 0x3c
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f4:	4770      	bx	lr
	...

0800b7f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b095      	sub	sp, #84	; 0x54
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b808:	e853 3f00 	ldrex	r3, [r3]
 800b80c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b810:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b814:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	461a      	mov	r2, r3
 800b81c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b81e:	643b      	str	r3, [r7, #64]	; 0x40
 800b820:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b822:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b824:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b826:	e841 2300 	strex	r3, r2, [r1]
 800b82a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b82c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d1e6      	bne.n	800b800 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	3308      	adds	r3, #8
 800b838:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b83a:	6a3b      	ldr	r3, [r7, #32]
 800b83c:	e853 3f00 	ldrex	r3, [r3]
 800b840:	61fb      	str	r3, [r7, #28]
   return(result);
 800b842:	69fa      	ldr	r2, [r7, #28]
 800b844:	4b1e      	ldr	r3, [pc, #120]	; (800b8c0 <UART_EndRxTransfer+0xc8>)
 800b846:	4013      	ands	r3, r2
 800b848:	64bb      	str	r3, [r7, #72]	; 0x48
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	3308      	adds	r3, #8
 800b850:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b852:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b854:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b856:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b858:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b85a:	e841 2300 	strex	r3, r2, [r1]
 800b85e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b862:	2b00      	cmp	r3, #0
 800b864:	d1e5      	bne.n	800b832 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b86a:	2b01      	cmp	r3, #1
 800b86c:	d118      	bne.n	800b8a0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	e853 3f00 	ldrex	r3, [r3]
 800b87a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	f023 0310 	bic.w	r3, r3, #16
 800b882:	647b      	str	r3, [r7, #68]	; 0x44
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	461a      	mov	r2, r3
 800b88a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b88c:	61bb      	str	r3, [r7, #24]
 800b88e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b890:	6979      	ldr	r1, [r7, #20]
 800b892:	69ba      	ldr	r2, [r7, #24]
 800b894:	e841 2300 	strex	r3, r2, [r1]
 800b898:	613b      	str	r3, [r7, #16]
   return(result);
 800b89a:	693b      	ldr	r3, [r7, #16]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d1e6      	bne.n	800b86e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2220      	movs	r2, #32
 800b8a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	675a      	str	r2, [r3, #116]	; 0x74
}
 800b8b4:	bf00      	nop
 800b8b6:	3754      	adds	r7, #84	; 0x54
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8be:	4770      	bx	lr
 800b8c0:	effffffe 	.word	0xeffffffe

0800b8c4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b090      	sub	sp, #64	; 0x40
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8d0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	69db      	ldr	r3, [r3, #28]
 800b8d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8da:	d037      	beq.n	800b94c <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800b8dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8de:	2200      	movs	r2, #0
 800b8e0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b8e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	3308      	adds	r3, #8
 800b8ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ee:	e853 3f00 	ldrex	r3, [r3]
 800b8f2:	623b      	str	r3, [r7, #32]
   return(result);
 800b8f4:	6a3b      	ldr	r3, [r7, #32]
 800b8f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b8fa:	63bb      	str	r3, [r7, #56]	; 0x38
 800b8fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	3308      	adds	r3, #8
 800b902:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b904:	633a      	str	r2, [r7, #48]	; 0x30
 800b906:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b908:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b90a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b90c:	e841 2300 	strex	r3, r2, [r1]
 800b910:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b914:	2b00      	cmp	r3, #0
 800b916:	d1e5      	bne.n	800b8e4 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	e853 3f00 	ldrex	r3, [r3]
 800b924:	60fb      	str	r3, [r7, #12]
   return(result);
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b92c:	637b      	str	r3, [r7, #52]	; 0x34
 800b92e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	461a      	mov	r2, r3
 800b934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b936:	61fb      	str	r3, [r7, #28]
 800b938:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b93a:	69b9      	ldr	r1, [r7, #24]
 800b93c:	69fa      	ldr	r2, [r7, #28]
 800b93e:	e841 2300 	strex	r3, r2, [r1]
 800b942:	617b      	str	r3, [r7, #20]
   return(result);
 800b944:	697b      	ldr	r3, [r7, #20]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d1e6      	bne.n	800b918 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b94a:	e002      	b.n	800b952 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800b94c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b94e:	f7fe fe05 	bl	800a55c <HAL_UART_TxCpltCallback>
}
 800b952:	bf00      	nop
 800b954:	3740      	adds	r7, #64	; 0x40
 800b956:	46bd      	mov	sp, r7
 800b958:	bd80      	pop	{r7, pc}

0800b95a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b95a:	b580      	push	{r7, lr}
 800b95c:	b084      	sub	sp, #16
 800b95e:	af00      	add	r7, sp, #0
 800b960:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b966:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b968:	68f8      	ldr	r0, [r7, #12]
 800b96a:	f7fe fe01 	bl	800a570 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b96e:	bf00      	nop
 800b970:	3710      	adds	r7, #16
 800b972:	46bd      	mov	sp, r7
 800b974:	bd80      	pop	{r7, pc}

0800b976 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b976:	b580      	push	{r7, lr}
 800b978:	b09c      	sub	sp, #112	; 0x70
 800b97a:	af00      	add	r7, sp, #0
 800b97c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b982:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	69db      	ldr	r3, [r3, #28]
 800b988:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b98c:	d071      	beq.n	800ba72 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800b98e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b990:	2200      	movs	r2, #0
 800b992:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b996:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b99c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b99e:	e853 3f00 	ldrex	r3, [r3]
 800b9a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b9a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b9a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b9aa:	66bb      	str	r3, [r7, #104]	; 0x68
 800b9ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	461a      	mov	r2, r3
 800b9b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b9b4:	65bb      	str	r3, [r7, #88]	; 0x58
 800b9b6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b9ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b9bc:	e841 2300 	strex	r3, r2, [r1]
 800b9c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b9c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d1e6      	bne.n	800b996 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	3308      	adds	r3, #8
 800b9ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9d2:	e853 3f00 	ldrex	r3, [r3]
 800b9d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b9d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9da:	f023 0301 	bic.w	r3, r3, #1
 800b9de:	667b      	str	r3, [r7, #100]	; 0x64
 800b9e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	3308      	adds	r3, #8
 800b9e6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b9e8:	647a      	str	r2, [r7, #68]	; 0x44
 800b9ea:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b9ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b9f0:	e841 2300 	strex	r3, r2, [r1]
 800b9f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b9f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d1e5      	bne.n	800b9c8 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b9fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	3308      	adds	r3, #8
 800ba02:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba06:	e853 3f00 	ldrex	r3, [r3]
 800ba0a:	623b      	str	r3, [r7, #32]
   return(result);
 800ba0c:	6a3b      	ldr	r3, [r7, #32]
 800ba0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba12:	663b      	str	r3, [r7, #96]	; 0x60
 800ba14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	3308      	adds	r3, #8
 800ba1a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ba1c:	633a      	str	r2, [r7, #48]	; 0x30
 800ba1e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ba22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba24:	e841 2300 	strex	r3, r2, [r1]
 800ba28:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ba2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d1e5      	bne.n	800b9fc <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ba30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba32:	2220      	movs	r2, #32
 800ba34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba3c:	2b01      	cmp	r3, #1
 800ba3e:	d118      	bne.n	800ba72 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba46:	693b      	ldr	r3, [r7, #16]
 800ba48:	e853 3f00 	ldrex	r3, [r3]
 800ba4c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	f023 0310 	bic.w	r3, r3, #16
 800ba54:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ba56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	461a      	mov	r2, r3
 800ba5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba5e:	61fb      	str	r3, [r7, #28]
 800ba60:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba62:	69b9      	ldr	r1, [r7, #24]
 800ba64:	69fa      	ldr	r2, [r7, #28]
 800ba66:	e841 2300 	strex	r3, r2, [r1]
 800ba6a:	617b      	str	r3, [r7, #20]
   return(result);
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d1e6      	bne.n	800ba40 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ba72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba74:	2200      	movs	r2, #0
 800ba76:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba7c:	2b01      	cmp	r3, #1
 800ba7e:	d107      	bne.n	800ba90 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ba80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba82:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ba86:	4619      	mov	r1, r3
 800ba88:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ba8a:	f7f5 f929 	bl	8000ce0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ba8e:	e002      	b.n	800ba96 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800ba90:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ba92:	f7f5 f907 	bl	8000ca4 <HAL_UART_RxCpltCallback>
}
 800ba96:	bf00      	nop
 800ba98:	3770      	adds	r7, #112	; 0x70
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd80      	pop	{r7, pc}

0800ba9e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ba9e:	b580      	push	{r7, lr}
 800baa0:	b084      	sub	sp, #16
 800baa2:	af00      	add	r7, sp, #0
 800baa4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baaa:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	2201      	movs	r2, #1
 800bab0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bab6:	2b01      	cmp	r3, #1
 800bab8:	d109      	bne.n	800bace <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bac0:	085b      	lsrs	r3, r3, #1
 800bac2:	b29b      	uxth	r3, r3
 800bac4:	4619      	mov	r1, r3
 800bac6:	68f8      	ldr	r0, [r7, #12]
 800bac8:	f7f5 f90a 	bl	8000ce0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bacc:	e002      	b.n	800bad4 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800bace:	68f8      	ldr	r0, [r7, #12]
 800bad0:	f7fe fd58 	bl	800a584 <HAL_UART_RxHalfCpltCallback>
}
 800bad4:	bf00      	nop
 800bad6:	3710      	adds	r7, #16
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}

0800badc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b086      	sub	sp, #24
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bae8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800baf0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800baf8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	689b      	ldr	r3, [r3, #8]
 800bb00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb04:	2b80      	cmp	r3, #128	; 0x80
 800bb06:	d109      	bne.n	800bb1c <UART_DMAError+0x40>
 800bb08:	693b      	ldr	r3, [r7, #16]
 800bb0a:	2b21      	cmp	r3, #33	; 0x21
 800bb0c:	d106      	bne.n	800bb1c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	2200      	movs	r2, #0
 800bb12:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800bb16:	6978      	ldr	r0, [r7, #20]
 800bb18:	f7ff fe2c 	bl	800b774 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bb1c:	697b      	ldr	r3, [r7, #20]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	689b      	ldr	r3, [r3, #8]
 800bb22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb26:	2b40      	cmp	r3, #64	; 0x40
 800bb28:	d109      	bne.n	800bb3e <UART_DMAError+0x62>
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	2b22      	cmp	r3, #34	; 0x22
 800bb2e:	d106      	bne.n	800bb3e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bb30:	697b      	ldr	r3, [r7, #20]
 800bb32:	2200      	movs	r2, #0
 800bb34:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800bb38:	6978      	ldr	r0, [r7, #20]
 800bb3a:	f7ff fe5d 	bl	800b7f8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bb3e:	697b      	ldr	r3, [r7, #20]
 800bb40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb44:	f043 0210 	orr.w	r2, r3, #16
 800bb48:	697b      	ldr	r3, [r7, #20]
 800bb4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bb4e:	6978      	ldr	r0, [r7, #20]
 800bb50:	f7fe fd22 	bl	800a598 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb54:	bf00      	nop
 800bb56:	3718      	adds	r7, #24
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bd80      	pop	{r7, pc}

0800bb5c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b084      	sub	sp, #16
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb68:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	2200      	movs	r2, #0
 800bb76:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bb7a:	68f8      	ldr	r0, [r7, #12]
 800bb7c:	f7fe fd0c 	bl	800a598 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb80:	bf00      	nop
 800bb82:	3710      	adds	r7, #16
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}

0800bb88 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b088      	sub	sp, #32
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	e853 3f00 	ldrex	r3, [r3]
 800bb9c:	60bb      	str	r3, [r7, #8]
   return(result);
 800bb9e:	68bb      	ldr	r3, [r7, #8]
 800bba0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bba4:	61fb      	str	r3, [r7, #28]
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	461a      	mov	r2, r3
 800bbac:	69fb      	ldr	r3, [r7, #28]
 800bbae:	61bb      	str	r3, [r7, #24]
 800bbb0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbb2:	6979      	ldr	r1, [r7, #20]
 800bbb4:	69ba      	ldr	r2, [r7, #24]
 800bbb6:	e841 2300 	strex	r3, r2, [r1]
 800bbba:	613b      	str	r3, [r7, #16]
   return(result);
 800bbbc:	693b      	ldr	r3, [r7, #16]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d1e6      	bne.n	800bb90 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	2220      	movs	r2, #32
 800bbc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2200      	movs	r2, #0
 800bbce:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f7fe fcc3 	bl	800a55c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bbd6:	bf00      	nop
 800bbd8:	3720      	adds	r7, #32
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}
	...

0800bbe0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b09c      	sub	sp, #112	; 0x70
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bbee:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bbf8:	2b22      	cmp	r3, #34	; 0x22
 800bbfa:	f040 80be 	bne.w	800bd7a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc04:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bc08:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800bc0c:	b2d9      	uxtb	r1, r3
 800bc0e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800bc12:	b2da      	uxtb	r2, r3
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc18:	400a      	ands	r2, r1
 800bc1a:	b2d2      	uxtb	r2, r2
 800bc1c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc22:	1c5a      	adds	r2, r3, #1
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bc2e:	b29b      	uxth	r3, r3
 800bc30:	3b01      	subs	r3, #1
 800bc32:	b29a      	uxth	r2, r3
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bc40:	b29b      	uxth	r3, r3
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	f040 80a1 	bne.w	800bd8a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc50:	e853 3f00 	ldrex	r3, [r3]
 800bc54:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bc56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bc5c:	66bb      	str	r3, [r7, #104]	; 0x68
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	461a      	mov	r2, r3
 800bc64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bc66:	65bb      	str	r3, [r7, #88]	; 0x58
 800bc68:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc6a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bc6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bc6e:	e841 2300 	strex	r3, r2, [r1]
 800bc72:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bc74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d1e6      	bne.n	800bc48 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	3308      	adds	r3, #8
 800bc80:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc84:	e853 3f00 	ldrex	r3, [r3]
 800bc88:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bc8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc8c:	f023 0301 	bic.w	r3, r3, #1
 800bc90:	667b      	str	r3, [r7, #100]	; 0x64
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	3308      	adds	r3, #8
 800bc98:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bc9a:	647a      	str	r2, [r7, #68]	; 0x44
 800bc9c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bca0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bca2:	e841 2300 	strex	r3, r2, [r1]
 800bca6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d1e5      	bne.n	800bc7a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	2220      	movs	r2, #32
 800bcb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	2200      	movs	r2, #0
 800bcba:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	4a33      	ldr	r2, [pc, #204]	; (800bd94 <UART_RxISR_8BIT+0x1b4>)
 800bcc8:	4293      	cmp	r3, r2
 800bcca:	d01f      	beq.n	800bd0c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	685b      	ldr	r3, [r3, #4]
 800bcd2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d018      	beq.n	800bd0c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bce2:	e853 3f00 	ldrex	r3, [r3]
 800bce6:	623b      	str	r3, [r7, #32]
   return(result);
 800bce8:	6a3b      	ldr	r3, [r7, #32]
 800bcea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bcee:	663b      	str	r3, [r7, #96]	; 0x60
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	461a      	mov	r2, r3
 800bcf6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bcf8:	633b      	str	r3, [r7, #48]	; 0x30
 800bcfa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcfc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bcfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd00:	e841 2300 	strex	r3, r2, [r1]
 800bd04:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bd06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d1e6      	bne.n	800bcda <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd10:	2b01      	cmp	r3, #1
 800bd12:	d12e      	bne.n	800bd72 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2200      	movs	r2, #0
 800bd18:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd20:	693b      	ldr	r3, [r7, #16]
 800bd22:	e853 3f00 	ldrex	r3, [r3]
 800bd26:	60fb      	str	r3, [r7, #12]
   return(result);
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	f023 0310 	bic.w	r3, r3, #16
 800bd2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	461a      	mov	r2, r3
 800bd36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd38:	61fb      	str	r3, [r7, #28]
 800bd3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd3c:	69b9      	ldr	r1, [r7, #24]
 800bd3e:	69fa      	ldr	r2, [r7, #28]
 800bd40:	e841 2300 	strex	r3, r2, [r1]
 800bd44:	617b      	str	r3, [r7, #20]
   return(result);
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d1e6      	bne.n	800bd1a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	69db      	ldr	r3, [r3, #28]
 800bd52:	f003 0310 	and.w	r3, r3, #16
 800bd56:	2b10      	cmp	r3, #16
 800bd58:	d103      	bne.n	800bd62 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	2210      	movs	r2, #16
 800bd60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bd68:	4619      	mov	r1, r3
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f7f4 ffb8 	bl	8000ce0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bd70:	e00b      	b.n	800bd8a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800bd72:	6878      	ldr	r0, [r7, #4]
 800bd74:	f7f4 ff96 	bl	8000ca4 <HAL_UART_RxCpltCallback>
}
 800bd78:	e007      	b.n	800bd8a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	699a      	ldr	r2, [r3, #24]
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	f042 0208 	orr.w	r2, r2, #8
 800bd88:	619a      	str	r2, [r3, #24]
}
 800bd8a:	bf00      	nop
 800bd8c:	3770      	adds	r7, #112	; 0x70
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd80      	pop	{r7, pc}
 800bd92:	bf00      	nop
 800bd94:	58000c00 	.word	0x58000c00

0800bd98 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b09c      	sub	sp, #112	; 0x70
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bda6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bdb0:	2b22      	cmp	r3, #34	; 0x22
 800bdb2:	f040 80be 	bne.w	800bf32 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdbc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdc4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800bdc6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800bdca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800bdce:	4013      	ands	r3, r2
 800bdd0:	b29a      	uxth	r2, r3
 800bdd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bdd4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdda:	1c9a      	adds	r2, r3, #2
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bde6:	b29b      	uxth	r3, r3
 800bde8:	3b01      	subs	r3, #1
 800bdea:	b29a      	uxth	r2, r3
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bdf8:	b29b      	uxth	r3, r3
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	f040 80a1 	bne.w	800bf42 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be08:	e853 3f00 	ldrex	r3, [r3]
 800be0c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800be0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800be14:	667b      	str	r3, [r7, #100]	; 0x64
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	461a      	mov	r2, r3
 800be1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be1e:	657b      	str	r3, [r7, #84]	; 0x54
 800be20:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be22:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800be24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800be26:	e841 2300 	strex	r3, r2, [r1]
 800be2a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800be2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d1e6      	bne.n	800be00 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	3308      	adds	r3, #8
 800be38:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be3c:	e853 3f00 	ldrex	r3, [r3]
 800be40:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800be42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be44:	f023 0301 	bic.w	r3, r3, #1
 800be48:	663b      	str	r3, [r7, #96]	; 0x60
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	3308      	adds	r3, #8
 800be50:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800be52:	643a      	str	r2, [r7, #64]	; 0x40
 800be54:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be56:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800be58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800be5a:	e841 2300 	strex	r3, r2, [r1]
 800be5e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800be60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be62:	2b00      	cmp	r3, #0
 800be64:	d1e5      	bne.n	800be32 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	2220      	movs	r2, #32
 800be6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2200      	movs	r2, #0
 800be72:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2200      	movs	r2, #0
 800be78:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	4a33      	ldr	r2, [pc, #204]	; (800bf4c <UART_RxISR_16BIT+0x1b4>)
 800be80:	4293      	cmp	r3, r2
 800be82:	d01f      	beq.n	800bec4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	685b      	ldr	r3, [r3, #4]
 800be8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d018      	beq.n	800bec4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be98:	6a3b      	ldr	r3, [r7, #32]
 800be9a:	e853 3f00 	ldrex	r3, [r3]
 800be9e:	61fb      	str	r3, [r7, #28]
   return(result);
 800bea0:	69fb      	ldr	r3, [r7, #28]
 800bea2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bea6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	461a      	mov	r2, r3
 800beae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800beb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800beb2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800beb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800beb8:	e841 2300 	strex	r3, r2, [r1]
 800bebc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d1e6      	bne.n	800be92 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bec8:	2b01      	cmp	r3, #1
 800beca:	d12e      	bne.n	800bf2a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2200      	movs	r2, #0
 800bed0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	e853 3f00 	ldrex	r3, [r3]
 800bede:	60bb      	str	r3, [r7, #8]
   return(result);
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	f023 0310 	bic.w	r3, r3, #16
 800bee6:	65bb      	str	r3, [r7, #88]	; 0x58
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	461a      	mov	r2, r3
 800beee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bef0:	61bb      	str	r3, [r7, #24]
 800bef2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bef4:	6979      	ldr	r1, [r7, #20]
 800bef6:	69ba      	ldr	r2, [r7, #24]
 800bef8:	e841 2300 	strex	r3, r2, [r1]
 800befc:	613b      	str	r3, [r7, #16]
   return(result);
 800befe:	693b      	ldr	r3, [r7, #16]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d1e6      	bne.n	800bed2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	69db      	ldr	r3, [r3, #28]
 800bf0a:	f003 0310 	and.w	r3, r3, #16
 800bf0e:	2b10      	cmp	r3, #16
 800bf10:	d103      	bne.n	800bf1a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	2210      	movs	r2, #16
 800bf18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bf20:	4619      	mov	r1, r3
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	f7f4 fedc 	bl	8000ce0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bf28:	e00b      	b.n	800bf42 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	f7f4 feba 	bl	8000ca4 <HAL_UART_RxCpltCallback>
}
 800bf30:	e007      	b.n	800bf42 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	699a      	ldr	r2, [r3, #24]
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	f042 0208 	orr.w	r2, r2, #8
 800bf40:	619a      	str	r2, [r3, #24]
}
 800bf42:	bf00      	nop
 800bf44:	3770      	adds	r7, #112	; 0x70
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bd80      	pop	{r7, pc}
 800bf4a:	bf00      	nop
 800bf4c:	58000c00 	.word	0x58000c00

0800bf50 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b0ac      	sub	sp, #176	; 0xb0
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bf5e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	69db      	ldr	r3, [r3, #28]
 800bf68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	689b      	ldr	r3, [r3, #8]
 800bf7c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf86:	2b22      	cmp	r3, #34	; 0x22
 800bf88:	f040 8180 	bne.w	800c28c <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bf92:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bf96:	e123      	b.n	800c1e0 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf9e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bfa2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800bfa6:	b2d9      	uxtb	r1, r3
 800bfa8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800bfac:	b2da      	uxtb	r2, r3
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bfb2:	400a      	ands	r2, r1
 800bfb4:	b2d2      	uxtb	r2, r2
 800bfb6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bfbc:	1c5a      	adds	r2, r3, #1
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bfc8:	b29b      	uxth	r3, r3
 800bfca:	3b01      	subs	r3, #1
 800bfcc:	b29a      	uxth	r2, r3
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	69db      	ldr	r3, [r3, #28]
 800bfda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800bfde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bfe2:	f003 0307 	and.w	r3, r3, #7
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d053      	beq.n	800c092 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bfea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bfee:	f003 0301 	and.w	r3, r3, #1
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d011      	beq.n	800c01a <UART_RxISR_8BIT_FIFOEN+0xca>
 800bff6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800bffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d00b      	beq.n	800c01a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	2201      	movs	r2, #1
 800c008:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c010:	f043 0201 	orr.w	r2, r3, #1
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c01a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c01e:	f003 0302 	and.w	r3, r3, #2
 800c022:	2b00      	cmp	r3, #0
 800c024:	d011      	beq.n	800c04a <UART_RxISR_8BIT_FIFOEN+0xfa>
 800c026:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c02a:	f003 0301 	and.w	r3, r3, #1
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d00b      	beq.n	800c04a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	2202      	movs	r2, #2
 800c038:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c040:	f043 0204 	orr.w	r2, r3, #4
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c04a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c04e:	f003 0304 	and.w	r3, r3, #4
 800c052:	2b00      	cmp	r3, #0
 800c054:	d011      	beq.n	800c07a <UART_RxISR_8BIT_FIFOEN+0x12a>
 800c056:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c05a:	f003 0301 	and.w	r3, r3, #1
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d00b      	beq.n	800c07a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	2204      	movs	r2, #4
 800c068:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c070:	f043 0202 	orr.w	r2, r3, #2
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c080:	2b00      	cmp	r3, #0
 800c082:	d006      	beq.n	800c092 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	f7fe fa87 	bl	800a598 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2200      	movs	r2, #0
 800c08e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c098:	b29b      	uxth	r3, r3
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	f040 80a0 	bne.w	800c1e0 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c0a8:	e853 3f00 	ldrex	r3, [r3]
 800c0ac:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800c0ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c0b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c0b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	461a      	mov	r2, r3
 800c0be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c0c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c0c4:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0c6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800c0c8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c0ca:	e841 2300 	strex	r3, r2, [r1]
 800c0ce:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800c0d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d1e4      	bne.n	800c0a0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	3308      	adds	r3, #8
 800c0dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c0e0:	e853 3f00 	ldrex	r3, [r3]
 800c0e4:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800c0e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c0e8:	4b6e      	ldr	r3, [pc, #440]	; (800c2a4 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800c0ea:	4013      	ands	r3, r2
 800c0ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	3308      	adds	r3, #8
 800c0f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c0fa:	66ba      	str	r2, [r7, #104]	; 0x68
 800c0fc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0fe:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c100:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c102:	e841 2300 	strex	r3, r2, [r1]
 800c106:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800c108:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d1e3      	bne.n	800c0d6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2220      	movs	r2, #32
 800c112:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2200      	movs	r2, #0
 800c11a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2200      	movs	r2, #0
 800c120:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	4a60      	ldr	r2, [pc, #384]	; (800c2a8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800c128:	4293      	cmp	r3, r2
 800c12a:	d021      	beq.n	800c170 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	685b      	ldr	r3, [r3, #4]
 800c132:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c136:	2b00      	cmp	r3, #0
 800c138:	d01a      	beq.n	800c170 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c140:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c142:	e853 3f00 	ldrex	r3, [r3]
 800c146:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c148:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c14a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c14e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	461a      	mov	r2, r3
 800c158:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c15c:	657b      	str	r3, [r7, #84]	; 0x54
 800c15e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c160:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c162:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c164:	e841 2300 	strex	r3, r2, [r1]
 800c168:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c16a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d1e4      	bne.n	800c13a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c174:	2b01      	cmp	r3, #1
 800c176:	d130      	bne.n	800c1da <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2200      	movs	r2, #0
 800c17c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c186:	e853 3f00 	ldrex	r3, [r3]
 800c18a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c18c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c18e:	f023 0310 	bic.w	r3, r3, #16
 800c192:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	461a      	mov	r2, r3
 800c19c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c1a0:	643b      	str	r3, [r7, #64]	; 0x40
 800c1a2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c1a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c1a8:	e841 2300 	strex	r3, r2, [r1]
 800c1ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d1e4      	bne.n	800c17e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	69db      	ldr	r3, [r3, #28]
 800c1ba:	f003 0310 	and.w	r3, r3, #16
 800c1be:	2b10      	cmp	r3, #16
 800c1c0:	d103      	bne.n	800c1ca <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	2210      	movs	r2, #16
 800c1c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c1d0:	4619      	mov	r1, r3
 800c1d2:	6878      	ldr	r0, [r7, #4]
 800c1d4:	f7f4 fd84 	bl	8000ce0 <HAL_UARTEx_RxEventCallback>
 800c1d8:	e002      	b.n	800c1e0 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f7f4 fd62 	bl	8000ca4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c1e0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d006      	beq.n	800c1f6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800c1e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c1ec:	f003 0320 	and.w	r3, r3, #32
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	f47f aed1 	bne.w	800bf98 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c1fc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c200:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c204:	2b00      	cmp	r3, #0
 800c206:	d049      	beq.n	800c29c <UART_RxISR_8BIT_FIFOEN+0x34c>
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c20e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800c212:	429a      	cmp	r2, r3
 800c214:	d242      	bcs.n	800c29c <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	3308      	adds	r3, #8
 800c21c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c21e:	6a3b      	ldr	r3, [r7, #32]
 800c220:	e853 3f00 	ldrex	r3, [r3]
 800c224:	61fb      	str	r3, [r7, #28]
   return(result);
 800c226:	69fb      	ldr	r3, [r7, #28]
 800c228:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c22c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	3308      	adds	r3, #8
 800c236:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c23a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c23c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c23e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c240:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c242:	e841 2300 	strex	r3, r2, [r1]
 800c246:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d1e3      	bne.n	800c216 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	4a16      	ldr	r2, [pc, #88]	; (800c2ac <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800c252:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	e853 3f00 	ldrex	r3, [r3]
 800c260:	60bb      	str	r3, [r7, #8]
   return(result);
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	f043 0320 	orr.w	r3, r3, #32
 800c268:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	461a      	mov	r2, r3
 800c272:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c276:	61bb      	str	r3, [r7, #24]
 800c278:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c27a:	6979      	ldr	r1, [r7, #20]
 800c27c:	69ba      	ldr	r2, [r7, #24]
 800c27e:	e841 2300 	strex	r3, r2, [r1]
 800c282:	613b      	str	r3, [r7, #16]
   return(result);
 800c284:	693b      	ldr	r3, [r7, #16]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d1e4      	bne.n	800c254 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c28a:	e007      	b.n	800c29c <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	699a      	ldr	r2, [r3, #24]
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	f042 0208 	orr.w	r2, r2, #8
 800c29a:	619a      	str	r2, [r3, #24]
}
 800c29c:	bf00      	nop
 800c29e:	37b0      	adds	r7, #176	; 0xb0
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	bd80      	pop	{r7, pc}
 800c2a4:	effffffe 	.word	0xeffffffe
 800c2a8:	58000c00 	.word	0x58000c00
 800c2ac:	0800bbe1 	.word	0x0800bbe1

0800c2b0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b0ae      	sub	sp, #184	; 0xb8
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c2be:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	69db      	ldr	r3, [r3, #28]
 800c2c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	689b      	ldr	r3, [r3, #8]
 800c2dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2e6:	2b22      	cmp	r3, #34	; 0x22
 800c2e8:	f040 8184 	bne.w	800c5f4 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c2f2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c2f6:	e127      	b.n	800c548 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2fe:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c306:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800c30a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800c30e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800c312:	4013      	ands	r3, r2
 800c314:	b29a      	uxth	r2, r3
 800c316:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c31a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c320:	1c9a      	adds	r2, r3, #2
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c32c:	b29b      	uxth	r3, r3
 800c32e:	3b01      	subs	r3, #1
 800c330:	b29a      	uxth	r2, r3
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	69db      	ldr	r3, [r3, #28]
 800c33e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c342:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c346:	f003 0307 	and.w	r3, r3, #7
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d053      	beq.n	800c3f6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c34e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c352:	f003 0301 	and.w	r3, r3, #1
 800c356:	2b00      	cmp	r3, #0
 800c358:	d011      	beq.n	800c37e <UART_RxISR_16BIT_FIFOEN+0xce>
 800c35a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c35e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c362:	2b00      	cmp	r3, #0
 800c364:	d00b      	beq.n	800c37e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	2201      	movs	r2, #1
 800c36c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c374:	f043 0201 	orr.w	r2, r3, #1
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c37e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c382:	f003 0302 	and.w	r3, r3, #2
 800c386:	2b00      	cmp	r3, #0
 800c388:	d011      	beq.n	800c3ae <UART_RxISR_16BIT_FIFOEN+0xfe>
 800c38a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c38e:	f003 0301 	and.w	r3, r3, #1
 800c392:	2b00      	cmp	r3, #0
 800c394:	d00b      	beq.n	800c3ae <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	2202      	movs	r2, #2
 800c39c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c3a4:	f043 0204 	orr.w	r2, r3, #4
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c3ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c3b2:	f003 0304 	and.w	r3, r3, #4
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d011      	beq.n	800c3de <UART_RxISR_16BIT_FIFOEN+0x12e>
 800c3ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c3be:	f003 0301 	and.w	r3, r3, #1
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d00b      	beq.n	800c3de <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	2204      	movs	r2, #4
 800c3cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c3d4:	f043 0202 	orr.w	r2, r3, #2
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d006      	beq.n	800c3f6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	f7fe f8d5 	bl	800a598 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c3fc:	b29b      	uxth	r3, r3
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	f040 80a2 	bne.w	800c548 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c40a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c40c:	e853 3f00 	ldrex	r3, [r3]
 800c410:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c412:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c414:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c418:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	461a      	mov	r2, r3
 800c422:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c426:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c42a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c42c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c42e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c432:	e841 2300 	strex	r3, r2, [r1]
 800c436:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c438:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d1e2      	bne.n	800c404 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	3308      	adds	r3, #8
 800c444:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c446:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c448:	e853 3f00 	ldrex	r3, [r3]
 800c44c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c44e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c450:	4b6e      	ldr	r3, [pc, #440]	; (800c60c <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800c452:	4013      	ands	r3, r2
 800c454:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	3308      	adds	r3, #8
 800c45e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800c462:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c464:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c466:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c468:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c46a:	e841 2300 	strex	r3, r2, [r1]
 800c46e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c470:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c472:	2b00      	cmp	r3, #0
 800c474:	d1e3      	bne.n	800c43e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	2220      	movs	r2, #32
 800c47a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	2200      	movs	r2, #0
 800c482:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2200      	movs	r2, #0
 800c488:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	4a60      	ldr	r2, [pc, #384]	; (800c610 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800c490:	4293      	cmp	r3, r2
 800c492:	d021      	beq.n	800c4d8 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	685b      	ldr	r3, [r3, #4]
 800c49a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d01a      	beq.n	800c4d8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4aa:	e853 3f00 	ldrex	r3, [r3]
 800c4ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c4b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c4b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	461a      	mov	r2, r3
 800c4c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c4c4:	65bb      	str	r3, [r7, #88]	; 0x58
 800c4c6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c4ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c4cc:	e841 2300 	strex	r3, r2, [r1]
 800c4d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c4d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d1e4      	bne.n	800c4a2 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4dc:	2b01      	cmp	r3, #1
 800c4de:	d130      	bne.n	800c542 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ee:	e853 3f00 	ldrex	r3, [r3]
 800c4f2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c4f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4f6:	f023 0310 	bic.w	r3, r3, #16
 800c4fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	461a      	mov	r2, r3
 800c504:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c508:	647b      	str	r3, [r7, #68]	; 0x44
 800c50a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c50c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c50e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c510:	e841 2300 	strex	r3, r2, [r1]
 800c514:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d1e4      	bne.n	800c4e6 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	69db      	ldr	r3, [r3, #28]
 800c522:	f003 0310 	and.w	r3, r3, #16
 800c526:	2b10      	cmp	r3, #16
 800c528:	d103      	bne.n	800c532 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	2210      	movs	r2, #16
 800c530:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c538:	4619      	mov	r1, r3
 800c53a:	6878      	ldr	r0, [r7, #4]
 800c53c:	f7f4 fbd0 	bl	8000ce0 <HAL_UARTEx_RxEventCallback>
 800c540:	e002      	b.n	800c548 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c542:	6878      	ldr	r0, [r7, #4]
 800c544:	f7f4 fbae 	bl	8000ca4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c548:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d006      	beq.n	800c55e <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800c550:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c554:	f003 0320 	and.w	r3, r3, #32
 800c558:	2b00      	cmp	r3, #0
 800c55a:	f47f aecd 	bne.w	800c2f8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c564:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c568:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d049      	beq.n	800c604 <UART_RxISR_16BIT_FIFOEN+0x354>
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c576:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800c57a:	429a      	cmp	r2, r3
 800c57c:	d242      	bcs.n	800c604 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	3308      	adds	r3, #8
 800c584:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c588:	e853 3f00 	ldrex	r3, [r3]
 800c58c:	623b      	str	r3, [r7, #32]
   return(result);
 800c58e:	6a3b      	ldr	r3, [r7, #32]
 800c590:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c594:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	3308      	adds	r3, #8
 800c59e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c5a2:	633a      	str	r2, [r7, #48]	; 0x30
 800c5a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c5a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c5aa:	e841 2300 	strex	r3, r2, [r1]
 800c5ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c5b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d1e3      	bne.n	800c57e <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	4a16      	ldr	r2, [pc, #88]	; (800c614 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800c5ba:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5c2:	693b      	ldr	r3, [r7, #16]
 800c5c4:	e853 3f00 	ldrex	r3, [r3]
 800c5c8:	60fb      	str	r3, [r7, #12]
   return(result);
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	f043 0320 	orr.w	r3, r3, #32
 800c5d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	461a      	mov	r2, r3
 800c5da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c5de:	61fb      	str	r3, [r7, #28]
 800c5e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5e2:	69b9      	ldr	r1, [r7, #24]
 800c5e4:	69fa      	ldr	r2, [r7, #28]
 800c5e6:	e841 2300 	strex	r3, r2, [r1]
 800c5ea:	617b      	str	r3, [r7, #20]
   return(result);
 800c5ec:	697b      	ldr	r3, [r7, #20]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d1e4      	bne.n	800c5bc <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c5f2:	e007      	b.n	800c604 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	699a      	ldr	r2, [r3, #24]
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	f042 0208 	orr.w	r2, r2, #8
 800c602:	619a      	str	r2, [r3, #24]
}
 800c604:	bf00      	nop
 800c606:	37b8      	adds	r7, #184	; 0xb8
 800c608:	46bd      	mov	sp, r7
 800c60a:	bd80      	pop	{r7, pc}
 800c60c:	effffffe 	.word	0xeffffffe
 800c610:	58000c00 	.word	0x58000c00
 800c614:	0800bd99 	.word	0x0800bd99

0800c618 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c618:	b480      	push	{r7}
 800c61a:	b083      	sub	sp, #12
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c620:	bf00      	nop
 800c622:	370c      	adds	r7, #12
 800c624:	46bd      	mov	sp, r7
 800c626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62a:	4770      	bx	lr

0800c62c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c62c:	b480      	push	{r7}
 800c62e:	b083      	sub	sp, #12
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c634:	bf00      	nop
 800c636:	370c      	adds	r7, #12
 800c638:	46bd      	mov	sp, r7
 800c63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63e:	4770      	bx	lr

0800c640 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c640:	b480      	push	{r7}
 800c642:	b083      	sub	sp, #12
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c648:	bf00      	nop
 800c64a:	370c      	adds	r7, #12
 800c64c:	46bd      	mov	sp, r7
 800c64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c652:	4770      	bx	lr

0800c654 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c654:	b480      	push	{r7}
 800c656:	b085      	sub	sp, #20
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c662:	2b01      	cmp	r3, #1
 800c664:	d101      	bne.n	800c66a <HAL_UARTEx_DisableFifoMode+0x16>
 800c666:	2302      	movs	r3, #2
 800c668:	e027      	b.n	800c6ba <HAL_UARTEx_DisableFifoMode+0x66>
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2201      	movs	r2, #1
 800c66e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	2224      	movs	r2, #36	; 0x24
 800c676:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	681a      	ldr	r2, [r3, #0]
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	f022 0201 	bic.w	r2, r2, #1
 800c690:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c698:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	2200      	movs	r2, #0
 800c69e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	68fa      	ldr	r2, [r7, #12]
 800c6a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2220      	movs	r2, #32
 800c6ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c6b8:	2300      	movs	r3, #0
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	3714      	adds	r7, #20
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c4:	4770      	bx	lr

0800c6c6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c6c6:	b580      	push	{r7, lr}
 800c6c8:	b084      	sub	sp, #16
 800c6ca:	af00      	add	r7, sp, #0
 800c6cc:	6078      	str	r0, [r7, #4]
 800c6ce:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c6d6:	2b01      	cmp	r3, #1
 800c6d8:	d101      	bne.n	800c6de <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c6da:	2302      	movs	r3, #2
 800c6dc:	e02d      	b.n	800c73a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2201      	movs	r2, #1
 800c6e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	2224      	movs	r2, #36	; 0x24
 800c6ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	681a      	ldr	r2, [r3, #0]
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	f022 0201 	bic.w	r2, r2, #1
 800c704:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	689b      	ldr	r3, [r3, #8]
 800c70c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	683a      	ldr	r2, [r7, #0]
 800c716:	430a      	orrs	r2, r1
 800c718:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c71a:	6878      	ldr	r0, [r7, #4]
 800c71c:	f000 f8a4 	bl	800c868 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	68fa      	ldr	r2, [r7, #12]
 800c726:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2220      	movs	r2, #32
 800c72c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2200      	movs	r2, #0
 800c734:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c738:	2300      	movs	r3, #0
}
 800c73a:	4618      	mov	r0, r3
 800c73c:	3710      	adds	r7, #16
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}

0800c742 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c742:	b580      	push	{r7, lr}
 800c744:	b084      	sub	sp, #16
 800c746:	af00      	add	r7, sp, #0
 800c748:	6078      	str	r0, [r7, #4]
 800c74a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c752:	2b01      	cmp	r3, #1
 800c754:	d101      	bne.n	800c75a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c756:	2302      	movs	r3, #2
 800c758:	e02d      	b.n	800c7b6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2201      	movs	r2, #1
 800c75e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	2224      	movs	r2, #36	; 0x24
 800c766:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	681a      	ldr	r2, [r3, #0]
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	f022 0201 	bic.w	r2, r2, #1
 800c780:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	689b      	ldr	r3, [r3, #8]
 800c788:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	683a      	ldr	r2, [r7, #0]
 800c792:	430a      	orrs	r2, r1
 800c794:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c796:	6878      	ldr	r0, [r7, #4]
 800c798:	f000 f866 	bl	800c868 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	68fa      	ldr	r2, [r7, #12]
 800c7a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	2220      	movs	r2, #32
 800c7a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c7b4:	2300      	movs	r3, #0
}
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	3710      	adds	r7, #16
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}

0800c7be <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c7be:	b580      	push	{r7, lr}
 800c7c0:	b08c      	sub	sp, #48	; 0x30
 800c7c2:	af00      	add	r7, sp, #0
 800c7c4:	60f8      	str	r0, [r7, #12]
 800c7c6:	60b9      	str	r1, [r7, #8]
 800c7c8:	4613      	mov	r3, r2
 800c7ca:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c7d2:	2b20      	cmp	r3, #32
 800c7d4:	d142      	bne.n	800c85c <HAL_UARTEx_ReceiveToIdle_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c7d6:	68bb      	ldr	r3, [r7, #8]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d002      	beq.n	800c7e2 <HAL_UARTEx_ReceiveToIdle_IT+0x24>
 800c7dc:	88fb      	ldrh	r3, [r7, #6]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d101      	bne.n	800c7e6 <HAL_UARTEx_ReceiveToIdle_IT+0x28>
    {
      return HAL_ERROR;
 800c7e2:	2301      	movs	r3, #1
 800c7e4:	e03b      	b.n	800c85e <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	2201      	movs	r2, #1
 800c7ea:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800c7f2:	88fb      	ldrh	r3, [r7, #6]
 800c7f4:	461a      	mov	r2, r3
 800c7f6:	68b9      	ldr	r1, [r7, #8]
 800c7f8:	68f8      	ldr	r0, [r7, #12]
 800c7fa:	f7fe fdf3 	bl	800b3e4 <UART_Start_Receive_IT>
 800c7fe:	4603      	mov	r3, r0
 800c800:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800c804:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d124      	bne.n	800c856 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c810:	2b01      	cmp	r3, #1
 800c812:	d11d      	bne.n	800c850 <HAL_UARTEx_ReceiveToIdle_IT+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	2210      	movs	r2, #16
 800c81a:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c822:	69bb      	ldr	r3, [r7, #24]
 800c824:	e853 3f00 	ldrex	r3, [r3]
 800c828:	617b      	str	r3, [r7, #20]
   return(result);
 800c82a:	697b      	ldr	r3, [r7, #20]
 800c82c:	f043 0310 	orr.w	r3, r3, #16
 800c830:	62bb      	str	r3, [r7, #40]	; 0x28
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	461a      	mov	r2, r3
 800c838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c83a:	627b      	str	r3, [r7, #36]	; 0x24
 800c83c:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c83e:	6a39      	ldr	r1, [r7, #32]
 800c840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c842:	e841 2300 	strex	r3, r2, [r1]
 800c846:	61fb      	str	r3, [r7, #28]
   return(result);
 800c848:	69fb      	ldr	r3, [r7, #28]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d1e6      	bne.n	800c81c <HAL_UARTEx_ReceiveToIdle_IT+0x5e>
 800c84e:	e002      	b.n	800c856 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800c850:	2301      	movs	r3, #1
 800c852:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800c856:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c85a:	e000      	b.n	800c85e <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800c85c:	2302      	movs	r3, #2
  }
}
 800c85e:	4618      	mov	r0, r3
 800c860:	3730      	adds	r7, #48	; 0x30
 800c862:	46bd      	mov	sp, r7
 800c864:	bd80      	pop	{r7, pc}
	...

0800c868 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c868:	b480      	push	{r7}
 800c86a:	b085      	sub	sp, #20
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c874:	2b00      	cmp	r3, #0
 800c876:	d108      	bne.n	800c88a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2201      	movs	r2, #1
 800c87c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2201      	movs	r2, #1
 800c884:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c888:	e031      	b.n	800c8ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c88a:	2310      	movs	r3, #16
 800c88c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c88e:	2310      	movs	r3, #16
 800c890:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	689b      	ldr	r3, [r3, #8]
 800c898:	0e5b      	lsrs	r3, r3, #25
 800c89a:	b2db      	uxtb	r3, r3
 800c89c:	f003 0307 	and.w	r3, r3, #7
 800c8a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	689b      	ldr	r3, [r3, #8]
 800c8a8:	0f5b      	lsrs	r3, r3, #29
 800c8aa:	b2db      	uxtb	r3, r3
 800c8ac:	f003 0307 	and.w	r3, r3, #7
 800c8b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c8b2:	7bbb      	ldrb	r3, [r7, #14]
 800c8b4:	7b3a      	ldrb	r2, [r7, #12]
 800c8b6:	4911      	ldr	r1, [pc, #68]	; (800c8fc <UARTEx_SetNbDataToProcess+0x94>)
 800c8b8:	5c8a      	ldrb	r2, [r1, r2]
 800c8ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c8be:	7b3a      	ldrb	r2, [r7, #12]
 800c8c0:	490f      	ldr	r1, [pc, #60]	; (800c900 <UARTEx_SetNbDataToProcess+0x98>)
 800c8c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c8c4:	fb93 f3f2 	sdiv	r3, r3, r2
 800c8c8:	b29a      	uxth	r2, r3
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c8d0:	7bfb      	ldrb	r3, [r7, #15]
 800c8d2:	7b7a      	ldrb	r2, [r7, #13]
 800c8d4:	4909      	ldr	r1, [pc, #36]	; (800c8fc <UARTEx_SetNbDataToProcess+0x94>)
 800c8d6:	5c8a      	ldrb	r2, [r1, r2]
 800c8d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c8dc:	7b7a      	ldrb	r2, [r7, #13]
 800c8de:	4908      	ldr	r1, [pc, #32]	; (800c900 <UARTEx_SetNbDataToProcess+0x98>)
 800c8e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c8e2:	fb93 f3f2 	sdiv	r3, r3, r2
 800c8e6:	b29a      	uxth	r2, r3
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c8ee:	bf00      	nop
 800c8f0:	3714      	adds	r7, #20
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f8:	4770      	bx	lr
 800c8fa:	bf00      	nop
 800c8fc:	0801c048 	.word	0x0801c048
 800c900:	0801c050 	.word	0x0801c050

0800c904 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c904:	b084      	sub	sp, #16
 800c906:	b580      	push	{r7, lr}
 800c908:	b084      	sub	sp, #16
 800c90a:	af00      	add	r7, sp, #0
 800c90c:	6078      	str	r0, [r7, #4]
 800c90e:	f107 001c 	add.w	r0, r7, #28
 800c912:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c918:	2b01      	cmp	r3, #1
 800c91a:	d120      	bne.n	800c95e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c920:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	68da      	ldr	r2, [r3, #12]
 800c92c:	4b2a      	ldr	r3, [pc, #168]	; (800c9d8 <USB_CoreInit+0xd4>)
 800c92e:	4013      	ands	r3, r2
 800c930:	687a      	ldr	r2, [r7, #4]
 800c932:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	68db      	ldr	r3, [r3, #12]
 800c938:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c940:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c942:	2b01      	cmp	r3, #1
 800c944:	d105      	bne.n	800c952 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	68db      	ldr	r3, [r3, #12]
 800c94a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c952:	6878      	ldr	r0, [r7, #4]
 800c954:	f000 faac 	bl	800ceb0 <USB_CoreReset>
 800c958:	4603      	mov	r3, r0
 800c95a:	73fb      	strb	r3, [r7, #15]
 800c95c:	e01a      	b.n	800c994 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	68db      	ldr	r3, [r3, #12]
 800c962:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c96a:	6878      	ldr	r0, [r7, #4]
 800c96c:	f000 faa0 	bl	800ceb0 <USB_CoreReset>
 800c970:	4603      	mov	r3, r0
 800c972:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c974:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c976:	2b00      	cmp	r3, #0
 800c978:	d106      	bne.n	800c988 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c97e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	639a      	str	r2, [r3, #56]	; 0x38
 800c986:	e005      	b.n	800c994 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c98c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c996:	2b01      	cmp	r3, #1
 800c998:	d116      	bne.n	800c9c8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c99e:	b29a      	uxth	r2, r3
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c9a8:	4b0c      	ldr	r3, [pc, #48]	; (800c9dc <USB_CoreInit+0xd8>)
 800c9aa:	4313      	orrs	r3, r2
 800c9ac:	687a      	ldr	r2, [r7, #4]
 800c9ae:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	689b      	ldr	r3, [r3, #8]
 800c9b4:	f043 0206 	orr.w	r2, r3, #6
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	689b      	ldr	r3, [r3, #8]
 800c9c0:	f043 0220 	orr.w	r2, r3, #32
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c9c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	3710      	adds	r7, #16
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c9d4:	b004      	add	sp, #16
 800c9d6:	4770      	bx	lr
 800c9d8:	ffbdffbf 	.word	0xffbdffbf
 800c9dc:	03ee0000 	.word	0x03ee0000

0800c9e0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c9e0:	b480      	push	{r7}
 800c9e2:	b083      	sub	sp, #12
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	689b      	ldr	r3, [r3, #8]
 800c9ec:	f023 0201 	bic.w	r2, r3, #1
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c9f4:	2300      	movs	r3, #0
}
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	370c      	adds	r7, #12
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca00:	4770      	bx	lr

0800ca02 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ca02:	b580      	push	{r7, lr}
 800ca04:	b084      	sub	sp, #16
 800ca06:	af00      	add	r7, sp, #0
 800ca08:	6078      	str	r0, [r7, #4]
 800ca0a:	460b      	mov	r3, r1
 800ca0c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	68db      	ldr	r3, [r3, #12]
 800ca16:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ca1e:	78fb      	ldrb	r3, [r7, #3]
 800ca20:	2b01      	cmp	r3, #1
 800ca22:	d115      	bne.n	800ca50 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	68db      	ldr	r3, [r3, #12]
 800ca28:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ca30:	2001      	movs	r0, #1
 800ca32:	f7f5 f9f5 	bl	8001e20 <HAL_Delay>
      ms++;
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	3301      	adds	r3, #1
 800ca3a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ca3c:	6878      	ldr	r0, [r7, #4]
 800ca3e:	f000 fa29 	bl	800ce94 <USB_GetMode>
 800ca42:	4603      	mov	r3, r0
 800ca44:	2b01      	cmp	r3, #1
 800ca46:	d01e      	beq.n	800ca86 <USB_SetCurrentMode+0x84>
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	2b31      	cmp	r3, #49	; 0x31
 800ca4c:	d9f0      	bls.n	800ca30 <USB_SetCurrentMode+0x2e>
 800ca4e:	e01a      	b.n	800ca86 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ca50:	78fb      	ldrb	r3, [r7, #3]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d115      	bne.n	800ca82 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	68db      	ldr	r3, [r3, #12]
 800ca5a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ca62:	2001      	movs	r0, #1
 800ca64:	f7f5 f9dc 	bl	8001e20 <HAL_Delay>
      ms++;
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	3301      	adds	r3, #1
 800ca6c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f000 fa10 	bl	800ce94 <USB_GetMode>
 800ca74:	4603      	mov	r3, r0
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d005      	beq.n	800ca86 <USB_SetCurrentMode+0x84>
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	2b31      	cmp	r3, #49	; 0x31
 800ca7e:	d9f0      	bls.n	800ca62 <USB_SetCurrentMode+0x60>
 800ca80:	e001      	b.n	800ca86 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ca82:	2301      	movs	r3, #1
 800ca84:	e005      	b.n	800ca92 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	2b32      	cmp	r3, #50	; 0x32
 800ca8a:	d101      	bne.n	800ca90 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ca8c:	2301      	movs	r3, #1
 800ca8e:	e000      	b.n	800ca92 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ca90:	2300      	movs	r3, #0
}
 800ca92:	4618      	mov	r0, r3
 800ca94:	3710      	adds	r7, #16
 800ca96:	46bd      	mov	sp, r7
 800ca98:	bd80      	pop	{r7, pc}
	...

0800ca9c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ca9c:	b084      	sub	sp, #16
 800ca9e:	b580      	push	{r7, lr}
 800caa0:	b086      	sub	sp, #24
 800caa2:	af00      	add	r7, sp, #0
 800caa4:	6078      	str	r0, [r7, #4]
 800caa6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800caaa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800caae:	2300      	movs	r3, #0
 800cab0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800cab6:	2300      	movs	r3, #0
 800cab8:	613b      	str	r3, [r7, #16]
 800caba:	e009      	b.n	800cad0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800cabc:	687a      	ldr	r2, [r7, #4]
 800cabe:	693b      	ldr	r3, [r7, #16]
 800cac0:	3340      	adds	r3, #64	; 0x40
 800cac2:	009b      	lsls	r3, r3, #2
 800cac4:	4413      	add	r3, r2
 800cac6:	2200      	movs	r2, #0
 800cac8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800caca:	693b      	ldr	r3, [r7, #16]
 800cacc:	3301      	adds	r3, #1
 800cace:	613b      	str	r3, [r7, #16]
 800cad0:	693b      	ldr	r3, [r7, #16]
 800cad2:	2b0e      	cmp	r3, #14
 800cad4:	d9f2      	bls.n	800cabc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800cad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d11c      	bne.n	800cb16 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cae2:	685b      	ldr	r3, [r3, #4]
 800cae4:	68fa      	ldr	r2, [r7, #12]
 800cae6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800caea:	f043 0302 	orr.w	r3, r3, #2
 800caee:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caf4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	601a      	str	r2, [r3, #0]
 800cb14:	e005      	b.n	800cb22 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb1a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cb28:	461a      	mov	r2, r3
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb34:	4619      	mov	r1, r3
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb3c:	461a      	mov	r2, r3
 800cb3e:	680b      	ldr	r3, [r1, #0]
 800cb40:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cb42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb44:	2b01      	cmp	r3, #1
 800cb46:	d10c      	bne.n	800cb62 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800cb48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d104      	bne.n	800cb58 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800cb4e:	2100      	movs	r1, #0
 800cb50:	6878      	ldr	r0, [r7, #4]
 800cb52:	f000 f965 	bl	800ce20 <USB_SetDevSpeed>
 800cb56:	e008      	b.n	800cb6a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800cb58:	2101      	movs	r1, #1
 800cb5a:	6878      	ldr	r0, [r7, #4]
 800cb5c:	f000 f960 	bl	800ce20 <USB_SetDevSpeed>
 800cb60:	e003      	b.n	800cb6a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800cb62:	2103      	movs	r1, #3
 800cb64:	6878      	ldr	r0, [r7, #4]
 800cb66:	f000 f95b 	bl	800ce20 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cb6a:	2110      	movs	r1, #16
 800cb6c:	6878      	ldr	r0, [r7, #4]
 800cb6e:	f000 f8f3 	bl	800cd58 <USB_FlushTxFifo>
 800cb72:	4603      	mov	r3, r0
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d001      	beq.n	800cb7c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800cb78:	2301      	movs	r3, #1
 800cb7a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f000 f91f 	bl	800cdc0 <USB_FlushRxFifo>
 800cb82:	4603      	mov	r3, r0
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d001      	beq.n	800cb8c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800cb88:	2301      	movs	r3, #1
 800cb8a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb92:	461a      	mov	r2, r3
 800cb94:	2300      	movs	r3, #0
 800cb96:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb9e:	461a      	mov	r2, r3
 800cba0:	2300      	movs	r3, #0
 800cba2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cbaa:	461a      	mov	r2, r3
 800cbac:	2300      	movs	r3, #0
 800cbae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	613b      	str	r3, [r7, #16]
 800cbb4:	e043      	b.n	800cc3e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cbb6:	693b      	ldr	r3, [r7, #16]
 800cbb8:	015a      	lsls	r2, r3, #5
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	4413      	add	r3, r2
 800cbbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cbc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cbcc:	d118      	bne.n	800cc00 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800cbce:	693b      	ldr	r3, [r7, #16]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d10a      	bne.n	800cbea <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800cbd4:	693b      	ldr	r3, [r7, #16]
 800cbd6:	015a      	lsls	r2, r3, #5
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	4413      	add	r3, r2
 800cbdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbe0:	461a      	mov	r2, r3
 800cbe2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cbe6:	6013      	str	r3, [r2, #0]
 800cbe8:	e013      	b.n	800cc12 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800cbea:	693b      	ldr	r3, [r7, #16]
 800cbec:	015a      	lsls	r2, r3, #5
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	4413      	add	r3, r2
 800cbf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbf6:	461a      	mov	r2, r3
 800cbf8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cbfc:	6013      	str	r3, [r2, #0]
 800cbfe:	e008      	b.n	800cc12 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800cc00:	693b      	ldr	r3, [r7, #16]
 800cc02:	015a      	lsls	r2, r3, #5
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	4413      	add	r3, r2
 800cc08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc0c:	461a      	mov	r2, r3
 800cc0e:	2300      	movs	r3, #0
 800cc10:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800cc12:	693b      	ldr	r3, [r7, #16]
 800cc14:	015a      	lsls	r2, r3, #5
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	4413      	add	r3, r2
 800cc1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc1e:	461a      	mov	r2, r3
 800cc20:	2300      	movs	r3, #0
 800cc22:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800cc24:	693b      	ldr	r3, [r7, #16]
 800cc26:	015a      	lsls	r2, r3, #5
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	4413      	add	r3, r2
 800cc2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc30:	461a      	mov	r2, r3
 800cc32:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cc36:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cc38:	693b      	ldr	r3, [r7, #16]
 800cc3a:	3301      	adds	r3, #1
 800cc3c:	613b      	str	r3, [r7, #16]
 800cc3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc40:	693a      	ldr	r2, [r7, #16]
 800cc42:	429a      	cmp	r2, r3
 800cc44:	d3b7      	bcc.n	800cbb6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cc46:	2300      	movs	r3, #0
 800cc48:	613b      	str	r3, [r7, #16]
 800cc4a:	e043      	b.n	800ccd4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cc4c:	693b      	ldr	r3, [r7, #16]
 800cc4e:	015a      	lsls	r2, r3, #5
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	4413      	add	r3, r2
 800cc54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cc5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cc62:	d118      	bne.n	800cc96 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800cc64:	693b      	ldr	r3, [r7, #16]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d10a      	bne.n	800cc80 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800cc6a:	693b      	ldr	r3, [r7, #16]
 800cc6c:	015a      	lsls	r2, r3, #5
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	4413      	add	r3, r2
 800cc72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc76:	461a      	mov	r2, r3
 800cc78:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cc7c:	6013      	str	r3, [r2, #0]
 800cc7e:	e013      	b.n	800cca8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800cc80:	693b      	ldr	r3, [r7, #16]
 800cc82:	015a      	lsls	r2, r3, #5
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	4413      	add	r3, r2
 800cc88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc8c:	461a      	mov	r2, r3
 800cc8e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cc92:	6013      	str	r3, [r2, #0]
 800cc94:	e008      	b.n	800cca8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800cc96:	693b      	ldr	r3, [r7, #16]
 800cc98:	015a      	lsls	r2, r3, #5
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	4413      	add	r3, r2
 800cc9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cca2:	461a      	mov	r2, r3
 800cca4:	2300      	movs	r3, #0
 800cca6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800cca8:	693b      	ldr	r3, [r7, #16]
 800ccaa:	015a      	lsls	r2, r3, #5
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	4413      	add	r3, r2
 800ccb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccb4:	461a      	mov	r2, r3
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ccba:	693b      	ldr	r3, [r7, #16]
 800ccbc:	015a      	lsls	r2, r3, #5
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	4413      	add	r3, r2
 800ccc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccc6:	461a      	mov	r2, r3
 800ccc8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cccc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ccce:	693b      	ldr	r3, [r7, #16]
 800ccd0:	3301      	adds	r3, #1
 800ccd2:	613b      	str	r3, [r7, #16]
 800ccd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccd6:	693a      	ldr	r2, [r7, #16]
 800ccd8:	429a      	cmp	r2, r3
 800ccda:	d3b7      	bcc.n	800cc4c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cce2:	691b      	ldr	r3, [r3, #16]
 800cce4:	68fa      	ldr	r2, [r7, #12]
 800cce6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ccea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ccee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ccfc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ccfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d105      	bne.n	800cd10 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	699b      	ldr	r3, [r3, #24]
 800cd08:	f043 0210 	orr.w	r2, r3, #16
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	699a      	ldr	r2, [r3, #24]
 800cd14:	4b0e      	ldr	r3, [pc, #56]	; (800cd50 <USB_DevInit+0x2b4>)
 800cd16:	4313      	orrs	r3, r2
 800cd18:	687a      	ldr	r2, [r7, #4]
 800cd1a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800cd1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d005      	beq.n	800cd2e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	699b      	ldr	r3, [r3, #24]
 800cd26:	f043 0208 	orr.w	r2, r3, #8
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800cd2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd30:	2b01      	cmp	r3, #1
 800cd32:	d105      	bne.n	800cd40 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	699a      	ldr	r2, [r3, #24]
 800cd38:	4b06      	ldr	r3, [pc, #24]	; (800cd54 <USB_DevInit+0x2b8>)
 800cd3a:	4313      	orrs	r3, r2
 800cd3c:	687a      	ldr	r2, [r7, #4]
 800cd3e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800cd40:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd42:	4618      	mov	r0, r3
 800cd44:	3718      	adds	r7, #24
 800cd46:	46bd      	mov	sp, r7
 800cd48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cd4c:	b004      	add	sp, #16
 800cd4e:	4770      	bx	lr
 800cd50:	803c3800 	.word	0x803c3800
 800cd54:	40000004 	.word	0x40000004

0800cd58 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cd58:	b480      	push	{r7}
 800cd5a:	b085      	sub	sp, #20
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
 800cd60:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800cd62:	2300      	movs	r3, #0
 800cd64:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	3301      	adds	r3, #1
 800cd6a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	4a13      	ldr	r2, [pc, #76]	; (800cdbc <USB_FlushTxFifo+0x64>)
 800cd70:	4293      	cmp	r3, r2
 800cd72:	d901      	bls.n	800cd78 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800cd74:	2303      	movs	r3, #3
 800cd76:	e01b      	b.n	800cdb0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	691b      	ldr	r3, [r3, #16]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	daf2      	bge.n	800cd66 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800cd80:	2300      	movs	r3, #0
 800cd82:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	019b      	lsls	r3, r3, #6
 800cd88:	f043 0220 	orr.w	r2, r3, #32
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	3301      	adds	r3, #1
 800cd94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	4a08      	ldr	r2, [pc, #32]	; (800cdbc <USB_FlushTxFifo+0x64>)
 800cd9a:	4293      	cmp	r3, r2
 800cd9c:	d901      	bls.n	800cda2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800cd9e:	2303      	movs	r3, #3
 800cda0:	e006      	b.n	800cdb0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	691b      	ldr	r3, [r3, #16]
 800cda6:	f003 0320 	and.w	r3, r3, #32
 800cdaa:	2b20      	cmp	r3, #32
 800cdac:	d0f0      	beq.n	800cd90 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800cdae:	2300      	movs	r3, #0
}
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	3714      	adds	r7, #20
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdba:	4770      	bx	lr
 800cdbc:	00030d40 	.word	0x00030d40

0800cdc0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800cdc0:	b480      	push	{r7}
 800cdc2:	b085      	sub	sp, #20
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cdc8:	2300      	movs	r3, #0
 800cdca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	3301      	adds	r3, #1
 800cdd0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	4a11      	ldr	r2, [pc, #68]	; (800ce1c <USB_FlushRxFifo+0x5c>)
 800cdd6:	4293      	cmp	r3, r2
 800cdd8:	d901      	bls.n	800cdde <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800cdda:	2303      	movs	r3, #3
 800cddc:	e018      	b.n	800ce10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	691b      	ldr	r3, [r3, #16]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	daf2      	bge.n	800cdcc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800cde6:	2300      	movs	r3, #0
 800cde8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	2210      	movs	r2, #16
 800cdee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	3301      	adds	r3, #1
 800cdf4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	4a08      	ldr	r2, [pc, #32]	; (800ce1c <USB_FlushRxFifo+0x5c>)
 800cdfa:	4293      	cmp	r3, r2
 800cdfc:	d901      	bls.n	800ce02 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800cdfe:	2303      	movs	r3, #3
 800ce00:	e006      	b.n	800ce10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	691b      	ldr	r3, [r3, #16]
 800ce06:	f003 0310 	and.w	r3, r3, #16
 800ce0a:	2b10      	cmp	r3, #16
 800ce0c:	d0f0      	beq.n	800cdf0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ce0e:	2300      	movs	r3, #0
}
 800ce10:	4618      	mov	r0, r3
 800ce12:	3714      	adds	r7, #20
 800ce14:	46bd      	mov	sp, r7
 800ce16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1a:	4770      	bx	lr
 800ce1c:	00030d40 	.word	0x00030d40

0800ce20 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ce20:	b480      	push	{r7}
 800ce22:	b085      	sub	sp, #20
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
 800ce28:	460b      	mov	r3, r1
 800ce2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce36:	681a      	ldr	r2, [r3, #0]
 800ce38:	78fb      	ldrb	r3, [r7, #3]
 800ce3a:	68f9      	ldr	r1, [r7, #12]
 800ce3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ce40:	4313      	orrs	r3, r2
 800ce42:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ce44:	2300      	movs	r3, #0
}
 800ce46:	4618      	mov	r0, r3
 800ce48:	3714      	adds	r7, #20
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce50:	4770      	bx	lr

0800ce52 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ce52:	b480      	push	{r7}
 800ce54:	b085      	sub	sp, #20
 800ce56:	af00      	add	r7, sp, #0
 800ce58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	68fa      	ldr	r2, [r7, #12]
 800ce68:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ce6c:	f023 0303 	bic.w	r3, r3, #3
 800ce70:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce78:	685b      	ldr	r3, [r3, #4]
 800ce7a:	68fa      	ldr	r2, [r7, #12]
 800ce7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ce80:	f043 0302 	orr.w	r3, r3, #2
 800ce84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ce86:	2300      	movs	r3, #0
}
 800ce88:	4618      	mov	r0, r3
 800ce8a:	3714      	adds	r7, #20
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce92:	4770      	bx	lr

0800ce94 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ce94:	b480      	push	{r7}
 800ce96:	b083      	sub	sp, #12
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	695b      	ldr	r3, [r3, #20]
 800cea0:	f003 0301 	and.w	r3, r3, #1
}
 800cea4:	4618      	mov	r0, r3
 800cea6:	370c      	adds	r7, #12
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceae:	4770      	bx	lr

0800ceb0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ceb0:	b480      	push	{r7}
 800ceb2:	b085      	sub	sp, #20
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ceb8:	2300      	movs	r3, #0
 800ceba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	3301      	adds	r3, #1
 800cec0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	4a13      	ldr	r2, [pc, #76]	; (800cf14 <USB_CoreReset+0x64>)
 800cec6:	4293      	cmp	r3, r2
 800cec8:	d901      	bls.n	800cece <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ceca:	2303      	movs	r3, #3
 800cecc:	e01b      	b.n	800cf06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	691b      	ldr	r3, [r3, #16]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	daf2      	bge.n	800cebc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ced6:	2300      	movs	r3, #0
 800ced8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	691b      	ldr	r3, [r3, #16]
 800cede:	f043 0201 	orr.w	r2, r3, #1
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	3301      	adds	r3, #1
 800ceea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	4a09      	ldr	r2, [pc, #36]	; (800cf14 <USB_CoreReset+0x64>)
 800cef0:	4293      	cmp	r3, r2
 800cef2:	d901      	bls.n	800cef8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cef4:	2303      	movs	r3, #3
 800cef6:	e006      	b.n	800cf06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	691b      	ldr	r3, [r3, #16]
 800cefc:	f003 0301 	and.w	r3, r3, #1
 800cf00:	2b01      	cmp	r3, #1
 800cf02:	d0f0      	beq.n	800cee6 <USB_CoreReset+0x36>

  return HAL_OK;
 800cf04:	2300      	movs	r3, #0
}
 800cf06:	4618      	mov	r0, r3
 800cf08:	3714      	adds	r7, #20
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf10:	4770      	bx	lr
 800cf12:	bf00      	nop
 800cf14:	00030d40 	.word	0x00030d40

0800cf18 <_ZN10Algorithms10AHRSKalmanC1Ev>:
{

class AHRSKalman
{
public:
	AHRSKalman(){};
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b082      	sub	sp, #8
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	3310      	adds	r3, #16
 800cf24:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800cf28:	4618      	mov	r0, r3
 800cf2a:	f000 fad5 	bl	800d4d8 <_ZN3Mat3EyeILt4EEENS_6MatrixIXT_EXT_EEEf>
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	4a08      	ldr	r2, [pc, #32]	; (800cf54 <_ZN10Algorithms10AHRSKalmanC1Ev+0x3c>)
 800cf32:	659a      	str	r2, [r3, #88]	; 0x58
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	4a08      	ldr	r2, [pc, #32]	; (800cf58 <_ZN10Algorithms10AHRSKalmanC1Ev+0x40>)
 800cf38:	65da      	str	r2, [r3, #92]	; 0x5c
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	4a07      	ldr	r2, [pc, #28]	; (800cf5c <_ZN10Algorithms10AHRSKalmanC1Ev+0x44>)
 800cf3e:	661a      	str	r2, [r3, #96]	; 0x60
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	3364      	adds	r3, #100	; 0x64
 800cf44:	4618      	mov	r0, r3
 800cf46:	f000 faeb 	bl	800d520 <_ZN3Mat6MatrixILt4ELt4EEC1Ev>
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	3708      	adds	r7, #8
 800cf50:	46bd      	mov	sp, r7
 800cf52:	bd80      	pop	{r7, pc}
 800cf54:	3a83126f 	.word	0x3a83126f
 800cf58:	3e99999a 	.word	0x3e99999a
 800cf5c:	3cf5c28f 	.word	0x3cf5c28f

0800cf60 <_ZN10Algorithms11VelocityEKFCI1NS_20ExtendedKalmanFilterILt6ELt3ELt6EEEERKN3Mat8V_VectorILt6EEERKNS3_6MatrixILt6ELt6EEEf>:
	using VelEKFBase::ControlVec;
	using VelEKFBase::MeassurementVec;
	using VelEKFBase::StateCovarianceMatrix;
	using VelEKFBase::ControlCovarianceMatrix;
	using VelEKFBase::MeasurementCovarianceMatrix;
	using VelEKFBase::VelEKFBase;
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b084      	sub	sp, #16
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	60f8      	str	r0, [r7, #12]
 800cf68:	60b9      	str	r1, [r7, #8]
 800cf6a:	607a      	str	r2, [r7, #4]
 800cf6c:	ed87 0a00 	vstr	s0, [r7]
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	edd7 7a00 	vldr	s15, [r7]
 800cf76:	eeb0 0a67 	vmov.f32	s0, s15
 800cf7a:	687a      	ldr	r2, [r7, #4]
 800cf7c:	68b9      	ldr	r1, [r7, #8]
 800cf7e:	4618      	mov	r0, r3
 800cf80:	f000 fafe 	bl	800d580 <_ZN10Algorithms20ExtendedKalmanFilterILt6ELt3ELt6EEC1ERKN3Mat8V_VectorILt6EEERKNS2_6MatrixILt6ELt6EEEf>
 800cf84:	4a03      	ldr	r2, [pc, #12]	; (800cf94 <_ZN10Algorithms11VelocityEKFCI1NS_20ExtendedKalmanFilterILt6ELt3ELt6EEEERKN3Mat8V_VectorILt6EEERKNS3_6MatrixILt6ELt6EEEf+0x34>)
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	601a      	str	r2, [r3, #0]
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	3710      	adds	r7, #16
 800cf90:	46bd      	mov	sp, r7
 800cf92:	bd80      	pop	{r7, pc}
 800cf94:	0801c08c 	.word	0x0801c08c

0800cf98 <_ZN10Algorithms15FusionAlgorithmC1Ev>:
public:
//	FusionAlgorithm(
//			const OrientationEKF::StateVec& oriState, const OrientationEKF::StateCovarianceMatrix& oriCov,
//			const VelocityEKF::StateVec& velState, const VelocityEKF::StateCovarianceMatrix& velCov,
//			float time);
	FusionAlgorithm(){
 800cf98:	b5b0      	push	{r4, r5, r7, lr}
 800cf9a:	b0b6      	sub	sp, #216	; 0xd8
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800cfa0:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800cfa2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cfa6:	ed9f 0a25 	vldr	s0, [pc, #148]	; 800d03c <_ZN10Algorithms15FusionAlgorithmC1Ev+0xa4>
 800cfaa:	4618      	mov	r0, r3
 800cfac:	f000 fa56 	bl	800d45c <_ZN3Mat8V_VectorILt6EEC1Ef>
 800cfb0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cfb4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800cfb8:	4618      	mov	r0, r3
 800cfba:	f000 fabd 	bl	800d538 <_ZN3Mat3EyeILt6EEENS_6MatrixIXT_EXT_EEEf>
 800cfbe:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800cfc2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cfc6:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 800d03c <_ZN10Algorithms15FusionAlgorithmC1Ev+0xa4>
 800cfca:	4619      	mov	r1, r3
 800cfcc:	4620      	mov	r0, r4
 800cfce:	f7ff ffc7 	bl	800cf60 <_ZN10Algorithms11VelocityEKFCI1NS_20ExtendedKalmanFilterILt6ELt3ELt6EEEERKN3Mat8V_VectorILt6EEERKNS3_6MatrixILt6ELt6EEEf>
 800cfd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfd4:	33b0      	adds	r3, #176	; 0xb0
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	f000 fafa 	bl	800d5d0 <_ZN3Mat6MatrixILt3ELt3EEC1Ev>
 800cfdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfde:	33d4      	adds	r3, #212	; 0xd4
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	f000 fb00 	bl	800d5e6 <_ZN3Mat8V_VectorILt3EEC1Ev>
 800cfe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfe8:	33e0      	adds	r3, #224	; 0xe0
 800cfea:	4618      	mov	r0, r3
 800cfec:	f000 faf0 	bl	800d5d0 <_ZN3Mat6MatrixILt3ELt3EEC1Ev>
 800cff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cff2:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800cff6:	4618      	mov	r0, r3
 800cff8:	f000 fb02 	bl	800d600 <_ZN3Mat8V_VectorILt6EEC1Ev>
 800cffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cffe:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d002:	4618      	mov	r0, r3
 800d004:	f000 fb09 	bl	800d61a <_ZN3Mat6MatrixILt6ELt6EEC1Ev>
 800d008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d00a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800d00e:	4618      	mov	r0, r3
 800d010:	f7ff ff82 	bl	800cf18 <_ZN10Algorithms10AHRSKalmanC1Ev>
		_orientationControlCov = Eye<3>(_gyroNoiseVariance);
 800d014:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800d016:	463b      	mov	r3, r7
 800d018:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800d040 <_ZN10Algorithms15FusionAlgorithmC1Ev+0xa8>
 800d01c:	4618      	mov	r0, r3
 800d01e:	f000 fb07 	bl	800d630 <_ZN3Mat3EyeILt3EEENS_6MatrixIXT_EXT_EEEf>
 800d022:	34b0      	adds	r4, #176	; 0xb0
 800d024:	463d      	mov	r5, r7
 800d026:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d028:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d02a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d02c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d02e:	682b      	ldr	r3, [r5, #0]
 800d030:	6023      	str	r3, [r4, #0]
//		_orientationMeassurementCov(1,1) = _accNoiseVariance;
//		_orientationMeassurementCov(2,2) = _accNoiseVariance;
//		_orientationMeassurementCov(3,3) = _magNoiseVariance;
//		_orientationMeassurementCov(4,4) = _magNoiseVariance;
//		_orientationMeassurementCov(5,5) = _magNoiseVariance;
	};
 800d032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d034:	4618      	mov	r0, r3
 800d036:	37d8      	adds	r7, #216	; 0xd8
 800d038:	46bd      	mov	sp, r7
 800d03a:	bdb0      	pop	{r4, r5, r7, pc}
 800d03c:	00000000 	.word	0x00000000
 800d040:	3d4ccccd 	.word	0x3d4ccccd

0800d044 <InitAlgorithms>:
Mat::Matrix<3, 1> meanMag = 0.0f;

float al = 0.01f;

uint8_t InitAlgorithms(const AGMSensorData* sensorData)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b082      	sub	sp, #8
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
	printf("InitAlgorithms\n\r");
 800d04c:	483f      	ldr	r0, [pc, #252]	; (800d14c <InitAlgorithms+0x108>)
 800d04e:	f00c ffc3 	bl	8019fd8 <iprintf>
	AccRaw(0,0) = sensorData->Acc.x;
 800d052:	2200      	movs	r2, #0
 800d054:	2100      	movs	r1, #0
 800d056:	483e      	ldr	r0, [pc, #248]	; (800d150 <InitAlgorithms+0x10c>)
 800d058:	f000 fb57 	bl	800d70a <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d05c:	4602      	mov	r2, r0
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	68db      	ldr	r3, [r3, #12]
 800d062:	6013      	str	r3, [r2, #0]
	AccRaw(1,0) = sensorData->Acc.y;
 800d064:	2200      	movs	r2, #0
 800d066:	2101      	movs	r1, #1
 800d068:	4839      	ldr	r0, [pc, #228]	; (800d150 <InitAlgorithms+0x10c>)
 800d06a:	f000 fb4e 	bl	800d70a <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d06e:	4602      	mov	r2, r0
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	691b      	ldr	r3, [r3, #16]
 800d074:	6013      	str	r3, [r2, #0]
	AccRaw(2,0) = sensorData->Acc.z;
 800d076:	2200      	movs	r2, #0
 800d078:	2102      	movs	r1, #2
 800d07a:	4835      	ldr	r0, [pc, #212]	; (800d150 <InitAlgorithms+0x10c>)
 800d07c:	f000 fb45 	bl	800d70a <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d080:	4602      	mov	r2, r0
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	695b      	ldr	r3, [r3, #20]
 800d086:	6013      	str	r3, [r2, #0]
	MagRaw(0,0) = sensorData->Mag.x;
 800d088:	2200      	movs	r2, #0
 800d08a:	2100      	movs	r1, #0
 800d08c:	4831      	ldr	r0, [pc, #196]	; (800d154 <InitAlgorithms+0x110>)
 800d08e:	f000 fb3c 	bl	800d70a <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d092:	4602      	mov	r2, r0
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	6013      	str	r3, [r2, #0]
	MagRaw(1,0) = sensorData->Mag.y;
 800d09a:	2200      	movs	r2, #0
 800d09c:	2101      	movs	r1, #1
 800d09e:	482d      	ldr	r0, [pc, #180]	; (800d154 <InitAlgorithms+0x110>)
 800d0a0:	f000 fb33 	bl	800d70a <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d0a4:	4602      	mov	r2, r0
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	685b      	ldr	r3, [r3, #4]
 800d0aa:	6013      	str	r3, [r2, #0]
	MagRaw(2,0) = sensorData->Mag.z;
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	2102      	movs	r1, #2
 800d0b0:	4828      	ldr	r0, [pc, #160]	; (800d154 <InitAlgorithms+0x110>)
 800d0b2:	f000 fb2a 	bl	800d70a <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d0b6:	4602      	mov	r2, r0
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	689b      	ldr	r3, [r3, #8]
 800d0bc:	6013      	str	r3, [r2, #0]
	AccCal = CalibrateAcc(AccRaw);
 800d0be:	4824      	ldr	r0, [pc, #144]	; (800d150 <InitAlgorithms+0x10c>)
 800d0c0:	f001 fee8 	bl	800ee94 <_Z12CalibrateAccRKN3Mat6MatrixILt3ELt1EEE>
 800d0c4:	eef0 6a40 	vmov.f32	s13, s0
 800d0c8:	eeb0 7a60 	vmov.f32	s14, s1
 800d0cc:	eef0 7a41 	vmov.f32	s15, s2
 800d0d0:	4b21      	ldr	r3, [pc, #132]	; (800d158 <InitAlgorithms+0x114>)
 800d0d2:	edc3 6a00 	vstr	s13, [r3]
 800d0d6:	ed83 7a01 	vstr	s14, [r3, #4]
 800d0da:	edc3 7a02 	vstr	s15, [r3, #8]
	MagCal = CalibrateMag(MagRaw);
 800d0de:	481d      	ldr	r0, [pc, #116]	; (800d154 <InitAlgorithms+0x110>)
 800d0e0:	f001 fe9c 	bl	800ee1c <_Z12CalibrateMagRKN3Mat6MatrixILt3ELt1EEE>
 800d0e4:	eef0 6a40 	vmov.f32	s13, s0
 800d0e8:	eeb0 7a60 	vmov.f32	s14, s1
 800d0ec:	eef0 7a41 	vmov.f32	s15, s2
 800d0f0:	4b1a      	ldr	r3, [pc, #104]	; (800d15c <InitAlgorithms+0x118>)
 800d0f2:	edc3 6a00 	vstr	s13, [r3]
 800d0f6:	ed83 7a01 	vstr	s14, [r3, #4]
 800d0fa:	edc3 7a02 	vstr	s15, [r3, #8]
	Fusion.InitState(AccCal, MagCal, (float)(HAL_GetTick()) * ms2s);
 800d0fe:	f7f4 fe83 	bl	8001e08 <HAL_GetTick>
 800d102:	ee07 0a90 	vmov	s15, r0
 800d106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d10a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800d160 <InitAlgorithms+0x11c>
 800d10e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d112:	eeb0 0a67 	vmov.f32	s0, s15
 800d116:	4a11      	ldr	r2, [pc, #68]	; (800d15c <InitAlgorithms+0x118>)
 800d118:	490f      	ldr	r1, [pc, #60]	; (800d158 <InitAlgorithms+0x114>)
 800d11a:	4812      	ldr	r0, [pc, #72]	; (800d164 <InitAlgorithms+0x120>)
 800d11c:	f007 fac1 	bl	80146a2 <_ZN10Algorithms15FusionAlgorithm9InitStateERKN3Mat6MatrixILt3ELt1EEES5_f>
	Kalman.InitialiseKalman(AccCal, MagCal, (float)(HAL_GetTick()) * ms2s);
 800d120:	f7f4 fe72 	bl	8001e08 <HAL_GetTick>
 800d124:	ee07 0a90 	vmov	s15, r0
 800d128:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d12c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800d160 <InitAlgorithms+0x11c>
 800d130:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d134:	eeb0 0a67 	vmov.f32	s0, s15
 800d138:	4a08      	ldr	r2, [pc, #32]	; (800d15c <InitAlgorithms+0x118>)
 800d13a:	4907      	ldr	r1, [pc, #28]	; (800d158 <InitAlgorithms+0x114>)
 800d13c:	480a      	ldr	r0, [pc, #40]	; (800d168 <InitAlgorithms+0x124>)
 800d13e:	f002 fa5c 	bl	800f5fa <_ZN10Algorithms10AHRSKalman16InitialiseKalmanERKN3Mat6MatrixILt3ELt1EEES5_f>
	return 1;
 800d142:	2301      	movs	r3, #1
}
 800d144:	4618      	mov	r0, r3
 800d146:	3708      	adds	r7, #8
 800d148:	46bd      	mov	sp, r7
 800d14a:	bd80      	pop	{r7, pc}
 800d14c:	0801be74 	.word	0x0801be74
 800d150:	24009044 	.word	0x24009044
 800d154:	24009014 	.word	0x24009014
 800d158:	24009038 	.word	0x24009038
 800d15c:	24009008 	.word	0x24009008
 800d160:	3a83126f 	.word	0x3a83126f
 800d164:	24008cf4 	.word	0x24008cf4
 800d168:	24008f54 	.word	0x24008f54

0800d16c <MadgwickUpdate>:
	al = al * 0.5f;
	return 1;
}

uint8_t MadgwickUpdate(const AGMSensorData* sensorData)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b094      	sub	sp, #80	; 0x50
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
	if(sensorData != nullptr)
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2b00      	cmp	r3, #0
 800d178:	f000 8145 	beq.w	800d406 <MadgwickUpdate+0x29a>
	{
		//static float x{0.0f}, y{0.0f}, z{0.0f}, step{0.005};
		static float last_time{sensorData->SensorTime * 0.001f};
 800d17c:	4ba4      	ldr	r3, [pc, #656]	; (800d410 <MadgwickUpdate+0x2a4>)
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	f3bf 8f5b 	dmb	ish
 800d184:	f003 0301 	and.w	r3, r3, #1
 800d188:	2b00      	cmp	r3, #0
 800d18a:	bf0c      	ite	eq
 800d18c:	2301      	moveq	r3, #1
 800d18e:	2300      	movne	r3, #0
 800d190:	b2db      	uxtb	r3, r3
 800d192:	2b00      	cmp	r3, #0
 800d194:	d017      	beq.n	800d1c6 <MadgwickUpdate+0x5a>
 800d196:	489e      	ldr	r0, [pc, #632]	; (800d410 <MadgwickUpdate+0x2a4>)
 800d198:	f00c f842 	bl	8019220 <__cxa_guard_acquire>
 800d19c:	4603      	mov	r3, r0
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	bf14      	ite	ne
 800d1a2:	2301      	movne	r3, #1
 800d1a4:	2300      	moveq	r3, #0
 800d1a6:	b2db      	uxtb	r3, r3
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d00c      	beq.n	800d1c6 <MadgwickUpdate+0x5a>
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d1b2:	ed9f 7a98 	vldr	s14, [pc, #608]	; 800d414 <MadgwickUpdate+0x2a8>
 800d1b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d1ba:	4b97      	ldr	r3, [pc, #604]	; (800d418 <MadgwickUpdate+0x2ac>)
 800d1bc:	edc3 7a00 	vstr	s15, [r3]
 800d1c0:	4893      	ldr	r0, [pc, #588]	; (800d410 <MadgwickUpdate+0x2a4>)
 800d1c2:	f00c f839 	bl	8019238 <__cxa_guard_release>
		float currTime = sensorData->SensorTime * 0.001f;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d1cc:	ed9f 7a91 	vldr	s14, [pc, #580]	; 800d414 <MadgwickUpdate+0x2a8>
 800d1d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d1d4:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		float deltat = (currTime - last_time);
 800d1d8:	4b8f      	ldr	r3, [pc, #572]	; (800d418 <MadgwickUpdate+0x2ac>)
 800d1da:	edd3 7a00 	vldr	s15, [r3]
 800d1de:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800d1e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d1e6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		last_time = currTime;
 800d1ea:	4a8b      	ldr	r2, [pc, #556]	; (800d418 <MadgwickUpdate+0x2ac>)
 800d1ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1ee:	6013      	str	r3, [r2, #0]

		AccRaw(0,0) = sensorData->Acc.x;
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	2100      	movs	r1, #0
 800d1f4:	4889      	ldr	r0, [pc, #548]	; (800d41c <MadgwickUpdate+0x2b0>)
 800d1f6:	f000 fa88 	bl	800d70a <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d1fa:	4602      	mov	r2, r0
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	68db      	ldr	r3, [r3, #12]
 800d200:	6013      	str	r3, [r2, #0]
		AccRaw(1,0) = sensorData->Acc.y;
 800d202:	2200      	movs	r2, #0
 800d204:	2101      	movs	r1, #1
 800d206:	4885      	ldr	r0, [pc, #532]	; (800d41c <MadgwickUpdate+0x2b0>)
 800d208:	f000 fa7f 	bl	800d70a <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d20c:	4602      	mov	r2, r0
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	691b      	ldr	r3, [r3, #16]
 800d212:	6013      	str	r3, [r2, #0]
		AccRaw(2,0) = sensorData->Acc.z;
 800d214:	2200      	movs	r2, #0
 800d216:	2102      	movs	r1, #2
 800d218:	4880      	ldr	r0, [pc, #512]	; (800d41c <MadgwickUpdate+0x2b0>)
 800d21a:	f000 fa76 	bl	800d70a <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d21e:	4602      	mov	r2, r0
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	695b      	ldr	r3, [r3, #20]
 800d224:	6013      	str	r3, [r2, #0]
		MagRaw(0,0) = sensorData->Mag.x;
 800d226:	2200      	movs	r2, #0
 800d228:	2100      	movs	r1, #0
 800d22a:	487d      	ldr	r0, [pc, #500]	; (800d420 <MadgwickUpdate+0x2b4>)
 800d22c:	f000 fa6d 	bl	800d70a <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d230:	4602      	mov	r2, r0
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	6013      	str	r3, [r2, #0]
		MagRaw(1,0) = sensorData->Mag.y;
 800d238:	2200      	movs	r2, #0
 800d23a:	2101      	movs	r1, #1
 800d23c:	4878      	ldr	r0, [pc, #480]	; (800d420 <MadgwickUpdate+0x2b4>)
 800d23e:	f000 fa64 	bl	800d70a <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d242:	4602      	mov	r2, r0
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	685b      	ldr	r3, [r3, #4]
 800d248:	6013      	str	r3, [r2, #0]
		MagRaw(2,0) = sensorData->Mag.z;
 800d24a:	2200      	movs	r2, #0
 800d24c:	2102      	movs	r1, #2
 800d24e:	4874      	ldr	r0, [pc, #464]	; (800d420 <MadgwickUpdate+0x2b4>)
 800d250:	f000 fa5b 	bl	800d70a <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d254:	4602      	mov	r2, r0
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	689b      	ldr	r3, [r3, #8]
 800d25a:	6013      	str	r3, [r2, #0]
		GyroRaw(0,0) = sensorData->Gyro.x;
 800d25c:	2200      	movs	r2, #0
 800d25e:	2100      	movs	r1, #0
 800d260:	4870      	ldr	r0, [pc, #448]	; (800d424 <MadgwickUpdate+0x2b8>)
 800d262:	f000 fa52 	bl	800d70a <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d266:	4602      	mov	r2, r0
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	699b      	ldr	r3, [r3, #24]
 800d26c:	6013      	str	r3, [r2, #0]
		GyroRaw(1,0) = sensorData->Gyro.y;
 800d26e:	2200      	movs	r2, #0
 800d270:	2101      	movs	r1, #1
 800d272:	486c      	ldr	r0, [pc, #432]	; (800d424 <MadgwickUpdate+0x2b8>)
 800d274:	f000 fa49 	bl	800d70a <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d278:	4602      	mov	r2, r0
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	69db      	ldr	r3, [r3, #28]
 800d27e:	6013      	str	r3, [r2, #0]
		GyroRaw(2,0) = sensorData->Gyro.z;
 800d280:	2200      	movs	r2, #0
 800d282:	2102      	movs	r1, #2
 800d284:	4867      	ldr	r0, [pc, #412]	; (800d424 <MadgwickUpdate+0x2b8>)
 800d286:	f000 fa40 	bl	800d70a <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d28a:	4602      	mov	r2, r0
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	6a1b      	ldr	r3, [r3, #32]
 800d290:	6013      	str	r3, [r2, #0]
		AccCal = CalibrateAcc(AccRaw);
 800d292:	4862      	ldr	r0, [pc, #392]	; (800d41c <MadgwickUpdate+0x2b0>)
 800d294:	f001 fdfe 	bl	800ee94 <_Z12CalibrateAccRKN3Mat6MatrixILt3ELt1EEE>
 800d298:	eef0 6a40 	vmov.f32	s13, s0
 800d29c:	eeb0 7a60 	vmov.f32	s14, s1
 800d2a0:	eef0 7a41 	vmov.f32	s15, s2
 800d2a4:	4b60      	ldr	r3, [pc, #384]	; (800d428 <MadgwickUpdate+0x2bc>)
 800d2a6:	edc3 6a00 	vstr	s13, [r3]
 800d2aa:	ed83 7a01 	vstr	s14, [r3, #4]
 800d2ae:	edc3 7a02 	vstr	s15, [r3, #8]
		MagCal = CalibrateMag(MagRaw);
 800d2b2:	485b      	ldr	r0, [pc, #364]	; (800d420 <MadgwickUpdate+0x2b4>)
 800d2b4:	f001 fdb2 	bl	800ee1c <_Z12CalibrateMagRKN3Mat6MatrixILt3ELt1EEE>
 800d2b8:	eef0 6a40 	vmov.f32	s13, s0
 800d2bc:	eeb0 7a60 	vmov.f32	s14, s1
 800d2c0:	eef0 7a41 	vmov.f32	s15, s2
 800d2c4:	4b59      	ldr	r3, [pc, #356]	; (800d42c <MadgwickUpdate+0x2c0>)
 800d2c6:	edc3 6a00 	vstr	s13, [r3]
 800d2ca:	ed83 7a01 	vstr	s14, [r3, #4]
 800d2ce:	edc3 7a02 	vstr	s15, [r3, #8]
		GyroCal = CalibrateGyro(GyroRaw);
 800d2d2:	4854      	ldr	r0, [pc, #336]	; (800d424 <MadgwickUpdate+0x2b8>)
 800d2d4:	f001 fe1a 	bl	800ef0c <_Z13CalibrateGyroRKN3Mat6MatrixILt3ELt1EEE>
 800d2d8:	eef0 6a40 	vmov.f32	s13, s0
 800d2dc:	eeb0 7a60 	vmov.f32	s14, s1
 800d2e0:	eef0 7a41 	vmov.f32	s15, s2
 800d2e4:	4b52      	ldr	r3, [pc, #328]	; (800d430 <MadgwickUpdate+0x2c4>)
 800d2e6:	edc3 6a00 	vstr	s13, [r3]
 800d2ea:	ed83 7a01 	vstr	s14, [r3, #4]
 800d2ee:	edc3 7a02 	vstr	s15, [r3, #8]
		//		sensorDataCal.Mag.y = MagCal(1,0);
		//		sensorDataCal.Mag.z = MagCal(2,0);
		//		sensorDataCal.Gyro.x = GyroCal(0,0);
		//		sensorDataCal.Gyro.y = GyroCal(1,0);
		//		sensorDataCal.Gyro.z = GyroCal(2,0);
		currTime = (float)(HAL_GetTick()) * ms2s;
 800d2f2:	f7f4 fd89 	bl	8001e08 <HAL_GetTick>
 800d2f6:	ee07 0a90 	vmov	s15, r0
 800d2fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2fe:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800d414 <MadgwickUpdate+0x2a8>
 800d302:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d306:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
//			first_time = false;
//			return 1;
//		}
//		currTime -= time_offset;

		Fusion.OnIMUData(AccCal, GyroCal, MagCal, currTime);
 800d30a:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 800d30e:	4b47      	ldr	r3, [pc, #284]	; (800d42c <MadgwickUpdate+0x2c0>)
 800d310:	4a47      	ldr	r2, [pc, #284]	; (800d430 <MadgwickUpdate+0x2c4>)
 800d312:	4945      	ldr	r1, [pc, #276]	; (800d428 <MadgwickUpdate+0x2bc>)
 800d314:	4847      	ldr	r0, [pc, #284]	; (800d434 <MadgwickUpdate+0x2c8>)
 800d316:	f007 f9db 	bl	80146d0 <_ZN10Algorithms15FusionAlgorithm9OnIMUDataERKN3Mat6MatrixILt3ELt1EEES5_S5_f>
//AHRS
		const auto& rotMatrix = Fusion.GetRotationMatrix();
 800d31a:	4846      	ldr	r0, [pc, #280]	; (800d434 <MadgwickUpdate+0x2c8>)
 800d31c:	f007 fcce 	bl	8014cbc <_ZNK10Algorithms15FusionAlgorithm17GetRotationMatrixEv>
 800d320:	6478      	str	r0, [r7, #68]	; 0x44
		auto acc = rotMatrix * AccCal;
 800d322:	4941      	ldr	r1, [pc, #260]	; (800d428 <MadgwickUpdate+0x2bc>)
 800d324:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d326:	f000 fa06 	bl	800d736 <_ZNK3Mat6MatrixILt3ELt3EEmlILt1EEENS0_ILt3EXT_EEERKS3_>
 800d32a:	eef0 6a40 	vmov.f32	s13, s0
 800d32e:	eeb0 7a60 	vmov.f32	s14, s1
 800d332:	eef0 7a41 	vmov.f32	s15, s2
 800d336:	edc7 6a06 	vstr	s13, [r7, #24]
 800d33a:	ed87 7a07 	vstr	s14, [r7, #28]
 800d33e:	edc7 7a08 	vstr	s15, [r7, #32]
		//LOG("AHRS: \t%f, \t%f, \t%f, \t\t\t%f, \t%f, \t%f", Kalman.GetRoll(), Kalman.GetPitch(), Kalman.GetYaw(), Fusion.GetRoll(), Fusion.GetPitch(), Fusion.GetYaw());
//		printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n\r",currTime, Fusion.GetRoll(), Fusion.GetPitch(), Fusion.GetYaw(),
//				GyroCal(0, 0), GyroCal(1, 0), GyroCal(2, 0),
//				AccCal(0, 0), AccCal(1, 0), AccCal(2, 0),
//				MagCal(0, 0), MagCal(1, 0), MagCal(2, 0));
		Mat::Quaternion newAcceleration = {0, AccCal(0,0), AccCal(1,0), AccCal(2,0)};
 800d342:	f107 0308 	add.w	r3, r7, #8
 800d346:	2200      	movs	r2, #0
 800d348:	601a      	str	r2, [r3, #0]
 800d34a:	605a      	str	r2, [r3, #4]
 800d34c:	609a      	str	r2, [r3, #8]
 800d34e:	60da      	str	r2, [r3, #12]
 800d350:	2200      	movs	r2, #0
 800d352:	2100      	movs	r1, #0
 800d354:	4834      	ldr	r0, [pc, #208]	; (800d428 <MadgwickUpdate+0x2bc>)
 800d356:	f000 f9d8 	bl	800d70a <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d35a:	4603      	mov	r3, r0
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	60fb      	str	r3, [r7, #12]
 800d360:	2200      	movs	r2, #0
 800d362:	2101      	movs	r1, #1
 800d364:	4830      	ldr	r0, [pc, #192]	; (800d428 <MadgwickUpdate+0x2bc>)
 800d366:	f000 f9d0 	bl	800d70a <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d36a:	4603      	mov	r3, r0
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	613b      	str	r3, [r7, #16]
 800d370:	2200      	movs	r2, #0
 800d372:	2102      	movs	r1, #2
 800d374:	482c      	ldr	r0, [pc, #176]	; (800d428 <MadgwickUpdate+0x2bc>)
 800d376:	f000 f9c8 	bl	800d70a <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d37a:	4603      	mov	r3, r0
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	617b      	str	r3, [r7, #20]
//		Q.w = GetW();
//		Q.x = GetX();
//		Q.y = GetY();
//		Q.z = GetZ();
		//Q = Kalman.GetState();
		newAcceleration = (Q * newAcceleration * Q.Conjugate());
 800d380:	f107 0308 	add.w	r3, r7, #8
 800d384:	4619      	mov	r1, r3
 800d386:	482c      	ldr	r0, [pc, #176]	; (800d438 <MadgwickUpdate+0x2cc>)
 800d388:	f007 ffcd 	bl	8015326 <_ZNK3Mat10QuaternionmlERKS0_>
 800d38c:	eeb0 6a40 	vmov.f32	s12, s0
 800d390:	eef0 6a60 	vmov.f32	s13, s1
 800d394:	eeb0 7a41 	vmov.f32	s14, s2
 800d398:	eef0 7a61 	vmov.f32	s15, s3
 800d39c:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800d3a0:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 800d3a4:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 800d3a8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 800d3ac:	4822      	ldr	r0, [pc, #136]	; (800d438 <MadgwickUpdate+0x2cc>)
 800d3ae:	f008 f8b6 	bl	801551e <_ZNK3Mat10Quaternion9ConjugateEv>
 800d3b2:	eeb0 6a40 	vmov.f32	s12, s0
 800d3b6:	eef0 6a60 	vmov.f32	s13, s1
 800d3ba:	eeb0 7a41 	vmov.f32	s14, s2
 800d3be:	eef0 7a61 	vmov.f32	s15, s3
 800d3c2:	ed87 6a0d 	vstr	s12, [r7, #52]	; 0x34
 800d3c6:	edc7 6a0e 	vstr	s13, [r7, #56]	; 0x38
 800d3ca:	ed87 7a0f 	vstr	s14, [r7, #60]	; 0x3c
 800d3ce:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 800d3d2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800d3d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d3da:	4611      	mov	r1, r2
 800d3dc:	4618      	mov	r0, r3
 800d3de:	f007 ffa2 	bl	8015326 <_ZNK3Mat10QuaternionmlERKS0_>
 800d3e2:	eeb0 6a40 	vmov.f32	s12, s0
 800d3e6:	eef0 6a60 	vmov.f32	s13, s1
 800d3ea:	eeb0 7a41 	vmov.f32	s14, s2
 800d3ee:	eef0 7a61 	vmov.f32	s15, s3
 800d3f2:	ed87 6a02 	vstr	s12, [r7, #8]
 800d3f6:	edc7 6a03 	vstr	s13, [r7, #12]
 800d3fa:	ed87 7a04 	vstr	s14, [r7, #16]
 800d3fe:	edc7 7a05 	vstr	s15, [r7, #20]
		//auto acc = Fusion.GetAcceleration();
//		printf("Orig: %f, \t%f, \t%f, \tMy: %f, \t%f, \t%f\n\r",
//				_acceleration.x, _acceleration.y, _acceleration.z,
//				acc.x, acc.y, acc.z);

		return 1;
 800d402:	2301      	movs	r3, #1
 800d404:	e000      	b.n	800d408 <MadgwickUpdate+0x29c>
	}
	return 0;
 800d406:	2300      	movs	r3, #0
}
 800d408:	4618      	mov	r0, r3
 800d40a:	3750      	adds	r7, #80	; 0x50
 800d40c:	46bd      	mov	sp, r7
 800d40e:	bd80      	pop	{r7, pc}
 800d410:	240090a0 	.word	0x240090a0
 800d414:	3a83126f 	.word	0x3a83126f
 800d418:	2400909c 	.word	0x2400909c
 800d41c:	24009044 	.word	0x24009044
 800d420:	24009014 	.word	0x24009014
 800d424:	2400902c 	.word	0x2400902c
 800d428:	24009038 	.word	0x24009038
 800d42c:	24009008 	.word	0x24009008
 800d430:	24009020 	.word	0x24009020
 800d434:	24008cf4 	.word	0x24008cf4
 800d438:	24009068 	.word	0x24009068

0800d43c <OnGNSSData>:

uint8_t OnGNSSData(const GNSS_StateHandle* GNSSData)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b082      	sub	sp, #8
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
	Fusion.OnGNSSData(GNSSData);
 800d444:	6879      	ldr	r1, [r7, #4]
 800d446:	4804      	ldr	r0, [pc, #16]	; (800d458 <OnGNSSData+0x1c>)
 800d448:	f007 fa3c 	bl	80148c4 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle>
}
 800d44c:	bf00      	nop
 800d44e:	4618      	mov	r0, r3
 800d450:	3708      	adds	r7, #8
 800d452:	46bd      	mov	sp, r7
 800d454:	bd80      	pop	{r7, pc}
 800d456:	bf00      	nop
 800d458:	24008cf4 	.word	0x24008cf4

0800d45c <_ZN3Mat8V_VectorILt6EEC1Ef>:

template <u_short length>
V_Vector<length>::V_Vector() : Matrix<length, 1>() {}

template <u_short length>
V_Vector<length>::V_Vector(float val) : Matrix<length, 1>(val) {}
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b082      	sub	sp, #8
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
 800d464:	ed87 0a00 	vstr	s0, [r7]
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	ed97 0a00 	vldr	s0, [r7]
 800d46e:	4618      	mov	r0, r3
 800d470:	f000 f9af 	bl	800d7d2 <_ZN3Mat6MatrixILt6ELt1EEC1Ef>
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	4618      	mov	r0, r3
 800d478:	3708      	adds	r7, #8
 800d47a:	46bd      	mov	sp, r7
 800d47c:	bd80      	pop	{r7, pc}

0800d47e <_ZZN3Mat6MatrixILt6ELt6EEC4EfENKUlRfE_clES2_>:

template <u_short heigth, u_short width>
Matrix<heigth, width>::Matrix(float val)
{
	static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 800d47e:	b480      	push	{r7}
 800d480:	b083      	sub	sp, #12
 800d482:	af00      	add	r7, sp, #0
 800d484:	6078      	str	r0, [r7, #4]
 800d486:	6039      	str	r1, [r7, #0]
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	681a      	ldr	r2, [r3, #0]
 800d48c:	683b      	ldr	r3, [r7, #0]
 800d48e:	601a      	str	r2, [r3, #0]
 800d490:	bf00      	nop
 800d492:	370c      	adds	r7, #12
 800d494:	46bd      	mov	sp, r7
 800d496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49a:	4770      	bx	lr

0800d49c <_ZN3Mat6MatrixILt6ELt6EEC1Ef>:
Matrix<heigth, width>::Matrix(float val)
 800d49c:	b590      	push	{r4, r7, lr}
 800d49e:	b083      	sub	sp, #12
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
 800d4a4:	ed87 0a00 	vstr	s0, [r7]
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	f000 f9ae 	bl	800d80c <_ZNSt5arrayIfLj36EE5beginEv>
 800d4b0:	4604      	mov	r4, r0
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	f000 f9b5 	bl	800d824 <_ZNSt5arrayIfLj36EE3endEv>
 800d4ba:	4603      	mov	r3, r0
 800d4bc:	edd7 7a00 	vldr	s15, [r7]
 800d4c0:	eeb0 0a67 	vmov.f32	s0, s15
 800d4c4:	4619      	mov	r1, r3
 800d4c6:	4620      	mov	r0, r4
 800d4c8:	f000 f9b9 	bl	800d83e <_ZSt8for_eachIPfZN3Mat6MatrixILt6ELt6EEC4EfEUlRfE_ET0_T_S7_S6_>
}
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	370c      	adds	r7, #12
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	bd90      	pop	{r4, r7, pc}
	...

0800d4d8 <_ZN3Mat3EyeILt4EEENS_6MatrixIXT_EXT_EEEf>:
Matrix<size, size> Eye(float val = 1.0f)
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b084      	sub	sp, #16
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
 800d4e0:	ed87 0a00 	vstr	s0, [r7]
	Matrix<size, size> result{0.0f};
 800d4e4:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800d51c <_ZN3Mat3EyeILt4EEENS_6MatrixIXT_EXT_EEEf+0x44>
 800d4e8:	6878      	ldr	r0, [r7, #4]
 800d4ea:	f000 f9d3 	bl	800d894 <_ZN3Mat6MatrixILt4ELt4EEC1Ef>
	for(u_short i = 0; i < size; ++i)
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	81fb      	strh	r3, [r7, #14]
 800d4f2:	e00b      	b.n	800d50c <_ZN3Mat3EyeILt4EEENS_6MatrixIXT_EXT_EEEf+0x34>
		result(i, i) = val;
 800d4f4:	89fa      	ldrh	r2, [r7, #14]
 800d4f6:	89fb      	ldrh	r3, [r7, #14]
 800d4f8:	4619      	mov	r1, r3
 800d4fa:	6878      	ldr	r0, [r7, #4]
 800d4fc:	f000 f9e7 	bl	800d8ce <_ZN3Mat6MatrixILt4ELt4EEclEtt>
 800d500:	4602      	mov	r2, r0
 800d502:	683b      	ldr	r3, [r7, #0]
 800d504:	6013      	str	r3, [r2, #0]
	for(u_short i = 0; i < size; ++i)
 800d506:	89fb      	ldrh	r3, [r7, #14]
 800d508:	3301      	adds	r3, #1
 800d50a:	81fb      	strh	r3, [r7, #14]
 800d50c:	89fb      	ldrh	r3, [r7, #14]
 800d50e:	2b03      	cmp	r3, #3
 800d510:	d9f0      	bls.n	800d4f4 <_ZN3Mat3EyeILt4EEENS_6MatrixIXT_EXT_EEEf+0x1c>
	return result;
 800d512:	bf00      	nop
}
 800d514:	6878      	ldr	r0, [r7, #4]
 800d516:	3710      	adds	r7, #16
 800d518:	46bd      	mov	sp, r7
 800d51a:	bd80      	pop	{r7, pc}
 800d51c:	00000000 	.word	0x00000000

0800d520 <_ZN3Mat6MatrixILt4ELt4EEC1Ev>:
Matrix<heigth, width>::Matrix() {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 800d520:	b480      	push	{r7}
 800d522:	b083      	sub	sp, #12
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	4618      	mov	r0, r3
 800d52c:	370c      	adds	r7, #12
 800d52e:	46bd      	mov	sp, r7
 800d530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d534:	4770      	bx	lr
	...

0800d538 <_ZN3Mat3EyeILt6EEENS_6MatrixIXT_EXT_EEEf>:
Matrix<size, size> Eye(float val = 1.0f)
 800d538:	b580      	push	{r7, lr}
 800d53a:	b084      	sub	sp, #16
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
 800d540:	ed87 0a00 	vstr	s0, [r7]
	Matrix<size, size> result{0.0f};
 800d544:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800d57c <_ZN3Mat3EyeILt6EEENS_6MatrixIXT_EXT_EEEf+0x44>
 800d548:	6878      	ldr	r0, [r7, #4]
 800d54a:	f7ff ffa7 	bl	800d49c <_ZN3Mat6MatrixILt6ELt6EEC1Ef>
	for(u_short i = 0; i < size; ++i)
 800d54e:	2300      	movs	r3, #0
 800d550:	81fb      	strh	r3, [r7, #14]
 800d552:	e00b      	b.n	800d56c <_ZN3Mat3EyeILt6EEENS_6MatrixIXT_EXT_EEEf+0x34>
		result(i, i) = val;
 800d554:	89fa      	ldrh	r2, [r7, #14]
 800d556:	89fb      	ldrh	r3, [r7, #14]
 800d558:	4619      	mov	r1, r3
 800d55a:	6878      	ldr	r0, [r7, #4]
 800d55c:	f000 f9ce 	bl	800d8fc <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 800d560:	4602      	mov	r2, r0
 800d562:	683b      	ldr	r3, [r7, #0]
 800d564:	6013      	str	r3, [r2, #0]
	for(u_short i = 0; i < size; ++i)
 800d566:	89fb      	ldrh	r3, [r7, #14]
 800d568:	3301      	adds	r3, #1
 800d56a:	81fb      	strh	r3, [r7, #14]
 800d56c:	89fb      	ldrh	r3, [r7, #14]
 800d56e:	2b05      	cmp	r3, #5
 800d570:	d9f0      	bls.n	800d554 <_ZN3Mat3EyeILt6EEENS_6MatrixIXT_EXT_EEEf+0x1c>
	return result;
 800d572:	bf00      	nop
}
 800d574:	6878      	ldr	r0, [r7, #4]
 800d576:	3710      	adds	r7, #16
 800d578:	46bd      	mov	sp, r7
 800d57a:	bd80      	pop	{r7, pc}
 800d57c:	00000000 	.word	0x00000000

0800d580 <_ZN10Algorithms20ExtendedKalmanFilterILt6ELt3ELt6EEC1ERKN3Mat8V_VectorILt6EEERKNS2_6MatrixILt6ELt6EEEf>:
	using MeassurementVec = V_Vector<meassurementLen>;
	using StateCovarianceMatrix = Matrix<stateLen, stateLen>;
	using ControlCovarianceMatrix = Matrix<controlLen, controlLen>;
	using MeasurementCovarianceMatrix = Matrix<meassurementLen, meassurementLen>;

	ExtendedKalmanFilter(const StateVec& state, const StateCovarianceMatrix& stateCovMatrix, float time)
 800d580:	b5b0      	push	{r4, r5, r7, lr}
 800d582:	b084      	sub	sp, #16
 800d584:	af00      	add	r7, sp, #0
 800d586:	60f8      	str	r0, [r7, #12]
 800d588:	60b9      	str	r1, [r7, #8]
 800d58a:	607a      	str	r2, [r7, #4]
 800d58c:	ed87 0a00 	vstr	s0, [r7]
		: _state{state}, _stateCovMatrix{stateCovMatrix}, _time{time}{}
 800d590:	4a0e      	ldr	r2, [pc, #56]	; (800d5cc <_ZN10Algorithms20ExtendedKalmanFilterILt6ELt3ELt6EEC1ERKN3Mat8V_VectorILt6EEERKNS2_6MatrixILt6ELt6EEEf+0x4c>)
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	601a      	str	r2, [r3, #0]
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	68ba      	ldr	r2, [r7, #8]
 800d59a:	1d1c      	adds	r4, r3, #4
 800d59c:	4615      	mov	r5, r2
 800d59e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d5a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d5a2:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d5a6:	e884 0003 	stmia.w	r4, {r0, r1}
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	687a      	ldr	r2, [r7, #4]
 800d5ae:	331c      	adds	r3, #28
 800d5b0:	4611      	mov	r1, r2
 800d5b2:	2290      	movs	r2, #144	; 0x90
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	f00c fde4 	bl	801a182 <memcpy>
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	683a      	ldr	r2, [r7, #0]
 800d5be:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	3710      	adds	r7, #16
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bdb0      	pop	{r4, r5, r7, pc}
 800d5cc:	0801c060 	.word	0x0801c060

0800d5d0 <_ZN3Mat6MatrixILt3ELt3EEC1Ev>:
Matrix<heigth, width>::Matrix() {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 800d5d0:	b480      	push	{r7}
 800d5d2:	b083      	sub	sp, #12
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	4618      	mov	r0, r3
 800d5dc:	370c      	adds	r7, #12
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e4:	4770      	bx	lr

0800d5e6 <_ZN3Mat8V_VectorILt3EEC1Ev>:
V_Vector<length>::V_Vector() : Matrix<length, 1>() {}
 800d5e6:	b580      	push	{r7, lr}
 800d5e8:	b082      	sub	sp, #8
 800d5ea:	af00      	add	r7, sp, #0
 800d5ec:	6078      	str	r0, [r7, #4]
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	f000 f99e 	bl	800d932 <_ZN3Mat6MatrixILt3ELt1EEC1Ev>
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	3708      	adds	r7, #8
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	bd80      	pop	{r7, pc}

0800d600 <_ZN3Mat8V_VectorILt6EEC1Ev>:
 800d600:	b580      	push	{r7, lr}
 800d602:	b082      	sub	sp, #8
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	4618      	mov	r0, r3
 800d60c:	f000 f99c 	bl	800d948 <_ZN3Mat6MatrixILt6ELt1EEC1Ev>
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	4618      	mov	r0, r3
 800d614:	3708      	adds	r7, #8
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}

0800d61a <_ZN3Mat6MatrixILt6ELt6EEC1Ev>:
 800d61a:	b480      	push	{r7}
 800d61c:	b083      	sub	sp, #12
 800d61e:	af00      	add	r7, sp, #0
 800d620:	6078      	str	r0, [r7, #4]
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	4618      	mov	r0, r3
 800d626:	370c      	adds	r7, #12
 800d628:	46bd      	mov	sp, r7
 800d62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62e:	4770      	bx	lr

0800d630 <_ZN3Mat3EyeILt3EEENS_6MatrixIXT_EXT_EEEf>:
Matrix<size, size> Eye(float val = 1.0f)
 800d630:	b580      	push	{r7, lr}
 800d632:	b084      	sub	sp, #16
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
 800d638:	ed87 0a00 	vstr	s0, [r7]
	Matrix<size, size> result{0.0f};
 800d63c:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800d674 <_ZN3Mat3EyeILt3EEENS_6MatrixIXT_EXT_EEEf+0x44>
 800d640:	6878      	ldr	r0, [r7, #4]
 800d642:	f000 f99b 	bl	800d97c <_ZN3Mat6MatrixILt3ELt3EEC1Ef>
	for(u_short i = 0; i < size; ++i)
 800d646:	2300      	movs	r3, #0
 800d648:	81fb      	strh	r3, [r7, #14]
 800d64a:	e00b      	b.n	800d664 <_ZN3Mat3EyeILt3EEENS_6MatrixIXT_EXT_EEEf+0x34>
		result(i, i) = val;
 800d64c:	89fa      	ldrh	r2, [r7, #14]
 800d64e:	89fb      	ldrh	r3, [r7, #14]
 800d650:	4619      	mov	r1, r3
 800d652:	6878      	ldr	r0, [r7, #4]
 800d654:	f000 f9af 	bl	800d9b6 <_ZN3Mat6MatrixILt3ELt3EEclEtt>
 800d658:	4602      	mov	r2, r0
 800d65a:	683b      	ldr	r3, [r7, #0]
 800d65c:	6013      	str	r3, [r2, #0]
	for(u_short i = 0; i < size; ++i)
 800d65e:	89fb      	ldrh	r3, [r7, #14]
 800d660:	3301      	adds	r3, #1
 800d662:	81fb      	strh	r3, [r7, #14]
 800d664:	89fb      	ldrh	r3, [r7, #14]
 800d666:	2b02      	cmp	r3, #2
 800d668:	d9f0      	bls.n	800d64c <_ZN3Mat3EyeILt3EEENS_6MatrixIXT_EXT_EEEf+0x1c>
	return result;
 800d66a:	bf00      	nop
}
 800d66c:	6878      	ldr	r0, [r7, #4]
 800d66e:	3710      	adds	r7, #16
 800d670:	46bd      	mov	sp, r7
 800d672:	bd80      	pop	{r7, pc}
 800d674:	00000000 	.word	0x00000000

0800d678 <_ZNK10Algorithms20ExtendedKalmanFilterILt6ELt3ELt6EE8GetStateEv>:
		_time = time;}

	virtual void Predict(const ControlVec& controlVec, const ControlCovarianceMatrix& controlCov, float time);
	virtual void Update(const MeassurementVec& meassurementVec, const MeasurementCovarianceMatrix& meassurementCov, float time);

	const StateVec& GetState() const {return _state;}
 800d678:	b480      	push	{r7}
 800d67a:	b083      	sub	sp, #12
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	3304      	adds	r3, #4
 800d684:	4618      	mov	r0, r3
 800d686:	370c      	adds	r7, #12
 800d688:	46bd      	mov	sp, r7
 800d68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68e:	4770      	bx	lr

0800d690 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>:

template <u_short heigth, u_short width>
Matrix<heigth, width>::Matrix(const std::array<float, heigth*width>& values): _values(values) {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 800d690:	b480      	push	{r7}
 800d692:	b083      	sub	sp, #12
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
 800d698:	6039      	str	r1, [r7, #0]
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	683a      	ldr	r2, [r7, #0]
 800d69e:	ca07      	ldmia	r2, {r0, r1, r2}
 800d6a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	370c      	adds	r7, #12
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b0:	4770      	bx	lr

0800d6b2 <_ZZN3Mat6MatrixILt3ELt1EEC4EfENKUlRfE_clES2_>:
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 800d6b2:	b480      	push	{r7}
 800d6b4:	b083      	sub	sp, #12
 800d6b6:	af00      	add	r7, sp, #0
 800d6b8:	6078      	str	r0, [r7, #4]
 800d6ba:	6039      	str	r1, [r7, #0]
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681a      	ldr	r2, [r3, #0]
 800d6c0:	683b      	ldr	r3, [r7, #0]
 800d6c2:	601a      	str	r2, [r3, #0]
 800d6c4:	bf00      	nop
 800d6c6:	370c      	adds	r7, #12
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ce:	4770      	bx	lr

0800d6d0 <_ZN3Mat6MatrixILt3ELt1EEC1Ef>:
Matrix<heigth, width>::Matrix(float val)
 800d6d0:	b590      	push	{r4, r7, lr}
 800d6d2:	b083      	sub	sp, #12
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
 800d6d8:	ed87 0a00 	vstr	s0, [r7]
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	4618      	mov	r0, r3
 800d6e0:	f000 f982 	bl	800d9e8 <_ZNSt5arrayIfLj3EE5beginEv>
 800d6e4:	4604      	mov	r4, r0
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	f000 f989 	bl	800da00 <_ZNSt5arrayIfLj3EE3endEv>
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	edd7 7a00 	vldr	s15, [r7]
 800d6f4:	eeb0 0a67 	vmov.f32	s0, s15
 800d6f8:	4619      	mov	r1, r3
 800d6fa:	4620      	mov	r0, r4
 800d6fc:	f000 f98d 	bl	800da1a <_ZSt8for_eachIPfZN3Mat6MatrixILt3ELt1EEC4EfEUlRfE_ET0_T_S7_S6_>
}
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	4618      	mov	r0, r3
 800d704:	370c      	adds	r7, #12
 800d706:	46bd      	mov	sp, r7
 800d708:	bd90      	pop	{r4, r7, pc}

0800d70a <_ZN3Mat6MatrixILt3ELt1EEclEtt>:

template <u_short heigth, u_short width>
float& Matrix<heigth, width>::operator()(u_short row, u_short col)
 800d70a:	b580      	push	{r7, lr}
 800d70c:	b084      	sub	sp, #16
 800d70e:	af00      	add	r7, sp, #0
 800d710:	6078      	str	r0, [r7, #4]
 800d712:	460b      	mov	r3, r1
 800d714:	807b      	strh	r3, [r7, #2]
 800d716:	4613      	mov	r3, r2
 800d718:	803b      	strh	r3, [r7, #0]
{
	u_int index = width * row + col;
 800d71a:	887a      	ldrh	r2, [r7, #2]
 800d71c:	883b      	ldrh	r3, [r7, #0]
 800d71e:	4413      	add	r3, r2
 800d720:	60fb      	str	r3, [r7, #12]
	return _values[index];
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	68f9      	ldr	r1, [r7, #12]
 800d726:	4618      	mov	r0, r3
 800d728:	f000 f993 	bl	800da52 <_ZNSt5arrayIfLj3EEixEj>
 800d72c:	4603      	mov	r3, r0
}
 800d72e:	4618      	mov	r0, r3
 800d730:	3710      	adds	r7, #16
 800d732:	46bd      	mov	sp, r7
 800d734:	bd80      	pop	{r7, pc}

0800d736 <_ZNK3Mat6MatrixILt3ELt3EEmlILt1EEENS0_ILt3EXT_EEERKS3_>:
	result *= val;
	return result;
}

template <u_short heigth, u_short width> template <u_short other_width>
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 800d736:	b580      	push	{r7, lr}
 800d738:	b08c      	sub	sp, #48	; 0x30
 800d73a:	af00      	add	r7, sp, #0
 800d73c:	6178      	str	r0, [r7, #20]
 800d73e:	6139      	str	r1, [r7, #16]
{
	Matrix<heigth, other_width> result;
 800d740:	f107 0318 	add.w	r3, r7, #24
 800d744:	4618      	mov	r0, r3
 800d746:	f000 f8f4 	bl	800d932 <_ZN3Mat6MatrixILt3ELt1EEC1Ev>
	Multiply(other, result);
 800d74a:	f107 0318 	add.w	r3, r7, #24
 800d74e:	461a      	mov	r2, r3
 800d750:	6939      	ldr	r1, [r7, #16]
 800d752:	6978      	ldr	r0, [r7, #20]
 800d754:	f000 f98c 	bl	800da70 <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_>
	return result;
 800d758:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d75c:	f107 0218 	add.w	r2, r7, #24
 800d760:	ca07      	ldmia	r2, {r0, r1, r2}
 800d762:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d766:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d768:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d76a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d76c:	ee06 1a90 	vmov	s13, r1
 800d770:	ee07 2a10 	vmov	s14, r2
 800d774:	ee07 3a90 	vmov	s15, r3
}
 800d778:	eeb0 0a66 	vmov.f32	s0, s13
 800d77c:	eef0 0a47 	vmov.f32	s1, s14
 800d780:	eeb0 1a67 	vmov.f32	s2, s15
 800d784:	3730      	adds	r7, #48	; 0x30
 800d786:	46bd      	mov	sp, r7
 800d788:	bd80      	pop	{r7, pc}

0800d78a <_ZNK3Mat8V_VectorILt6EEclEt>:
	inline float operator()(u_short index) const {return _values[index];}
 800d78a:	b580      	push	{r7, lr}
 800d78c:	b082      	sub	sp, #8
 800d78e:	af00      	add	r7, sp, #0
 800d790:	6078      	str	r0, [r7, #4]
 800d792:	460b      	mov	r3, r1
 800d794:	807b      	strh	r3, [r7, #2]
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	887a      	ldrh	r2, [r7, #2]
 800d79a:	4611      	mov	r1, r2
 800d79c:	4618      	mov	r0, r3
 800d79e:	f000 fa1b 	bl	800dbd8 <_ZNKSt5arrayIfLj6EEixEj>
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	ee07 3a90 	vmov	s15, r3
 800d7aa:	eeb0 0a67 	vmov.f32	s0, s15
 800d7ae:	3708      	adds	r7, #8
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	bd80      	pop	{r7, pc}

0800d7b4 <_ZZN3Mat6MatrixILt6ELt1EEC4EfENKUlRfE_clES2_>:
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 800d7b4:	b480      	push	{r7}
 800d7b6:	b083      	sub	sp, #12
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
 800d7bc:	6039      	str	r1, [r7, #0]
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	681a      	ldr	r2, [r3, #0]
 800d7c2:	683b      	ldr	r3, [r7, #0]
 800d7c4:	601a      	str	r2, [r3, #0]
 800d7c6:	bf00      	nop
 800d7c8:	370c      	adds	r7, #12
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d0:	4770      	bx	lr

0800d7d2 <_ZN3Mat6MatrixILt6ELt1EEC1Ef>:
Matrix<heigth, width>::Matrix(float val)
 800d7d2:	b590      	push	{r4, r7, lr}
 800d7d4:	b083      	sub	sp, #12
 800d7d6:	af00      	add	r7, sp, #0
 800d7d8:	6078      	str	r0, [r7, #4]
 800d7da:	ed87 0a00 	vstr	s0, [r7]
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	f000 fa08 	bl	800dbf6 <_ZNSt5arrayIfLj6EE5beginEv>
 800d7e6:	4604      	mov	r4, r0
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	f000 fa0f 	bl	800dc0e <_ZNSt5arrayIfLj6EE3endEv>
 800d7f0:	4603      	mov	r3, r0
 800d7f2:	edd7 7a00 	vldr	s15, [r7]
 800d7f6:	eeb0 0a67 	vmov.f32	s0, s15
 800d7fa:	4619      	mov	r1, r3
 800d7fc:	4620      	mov	r0, r4
 800d7fe:	f000 fa13 	bl	800dc28 <_ZSt8for_eachIPfZN3Mat6MatrixILt6ELt1EEC4EfEUlRfE_ET0_T_S7_S6_>
}
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	4618      	mov	r0, r3
 800d806:	370c      	adds	r7, #12
 800d808:	46bd      	mov	sp, r7
 800d80a:	bd90      	pop	{r4, r7, pc}

0800d80c <_ZNSt5arrayIfLj36EE5beginEv>:
      noexcept(_AT_Type::_Is_nothrow_swappable::value)
      { std::swap_ranges(begin(), end(), __other.begin()); }

      // Iterators.
      _GLIBCXX17_CONSTEXPR iterator
      begin() noexcept
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b082      	sub	sp, #8
 800d810:	af00      	add	r7, sp, #0
 800d812:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 800d814:	6878      	ldr	r0, [r7, #4]
 800d816:	f000 fa23 	bl	800dc60 <_ZNSt5arrayIfLj36EE4dataEv>
 800d81a:	4603      	mov	r3, r0
 800d81c:	4618      	mov	r0, r3
 800d81e:	3708      	adds	r7, #8
 800d820:	46bd      	mov	sp, r7
 800d822:	bd80      	pop	{r7, pc}

0800d824 <_ZNSt5arrayIfLj36EE3endEv>:
      _GLIBCXX17_CONSTEXPR const_iterator
      begin() const noexcept
      { return const_iterator(data()); }

      _GLIBCXX17_CONSTEXPR iterator
      end() noexcept
 800d824:	b580      	push	{r7, lr}
 800d826:	b082      	sub	sp, #8
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 800d82c:	6878      	ldr	r0, [r7, #4]
 800d82e:	f000 fa17 	bl	800dc60 <_ZNSt5arrayIfLj36EE4dataEv>
 800d832:	4603      	mov	r3, r0
 800d834:	3390      	adds	r3, #144	; 0x90
 800d836:	4618      	mov	r0, r3
 800d838:	3708      	adds	r7, #8
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bd80      	pop	{r7, pc}

0800d83e <_ZSt8for_eachIPfZN3Mat6MatrixILt6ELt6EEC4EfEUlRfE_ET0_T_S7_S6_>:
   *  If @p __f has a return value it is ignored.
  */
  template<typename _InputIterator, typename _Function>
    _GLIBCXX20_CONSTEXPR
    _Function
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
 800d83e:	b580      	push	{r7, lr}
 800d840:	b084      	sub	sp, #16
 800d842:	af00      	add	r7, sp, #0
 800d844:	60f8      	str	r0, [r7, #12]
 800d846:	60b9      	str	r1, [r7, #8]
 800d848:	ed87 0a01 	vstr	s0, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
      __glibcxx_requires_valid_range(__first, __last);
      for (; __first != __last; ++__first)
 800d84c:	e007      	b.n	800d85e <_ZSt8for_eachIPfZN3Mat6MatrixILt6ELt6EEC4EfEUlRfE_ET0_T_S7_S6_+0x20>
	__f(*__first);
 800d84e:	1d3b      	adds	r3, r7, #4
 800d850:	68f9      	ldr	r1, [r7, #12]
 800d852:	4618      	mov	r0, r3
 800d854:	f7ff fe13 	bl	800d47e <_ZZN3Mat6MatrixILt6ELt6EEC4EfENKUlRfE_clES2_>
      for (; __first != __last; ++__first)
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	3304      	adds	r3, #4
 800d85c:	60fb      	str	r3, [r7, #12]
 800d85e:	68fa      	ldr	r2, [r7, #12]
 800d860:	68bb      	ldr	r3, [r7, #8]
 800d862:	429a      	cmp	r2, r3
 800d864:	d1f3      	bne.n	800d84e <_ZSt8for_eachIPfZN3Mat6MatrixILt6ELt6EEC4EfEUlRfE_ET0_T_S7_S6_+0x10>
      return __f; // N.B. [alg.foreach] says std::move(f) but it's redundant.
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	ee07 3a90 	vmov	s15, r3
    }
 800d86c:	eeb0 0a67 	vmov.f32	s0, s15
 800d870:	3710      	adds	r7, #16
 800d872:	46bd      	mov	sp, r7
 800d874:	bd80      	pop	{r7, pc}

0800d876 <_ZZN3Mat6MatrixILt4ELt4EEC4EfENKUlRfE_clES2_>:
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 800d876:	b480      	push	{r7}
 800d878:	b083      	sub	sp, #12
 800d87a:	af00      	add	r7, sp, #0
 800d87c:	6078      	str	r0, [r7, #4]
 800d87e:	6039      	str	r1, [r7, #0]
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681a      	ldr	r2, [r3, #0]
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	601a      	str	r2, [r3, #0]
 800d888:	bf00      	nop
 800d88a:	370c      	adds	r7, #12
 800d88c:	46bd      	mov	sp, r7
 800d88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d892:	4770      	bx	lr

0800d894 <_ZN3Mat6MatrixILt4ELt4EEC1Ef>:
Matrix<heigth, width>::Matrix(float val)
 800d894:	b590      	push	{r4, r7, lr}
 800d896:	b083      	sub	sp, #12
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
 800d89c:	ed87 0a00 	vstr	s0, [r7]
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	f000 f9e9 	bl	800dc7a <_ZNSt5arrayIfLj16EE5beginEv>
 800d8a8:	4604      	mov	r4, r0
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	f000 f9f0 	bl	800dc92 <_ZNSt5arrayIfLj16EE3endEv>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	edd7 7a00 	vldr	s15, [r7]
 800d8b8:	eeb0 0a67 	vmov.f32	s0, s15
 800d8bc:	4619      	mov	r1, r3
 800d8be:	4620      	mov	r0, r4
 800d8c0:	f000 f9f4 	bl	800dcac <_ZSt8for_eachIPfZN3Mat6MatrixILt4ELt4EEC4EfEUlRfE_ET0_T_S7_S6_>
}
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	370c      	adds	r7, #12
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	bd90      	pop	{r4, r7, pc}

0800d8ce <_ZN3Mat6MatrixILt4ELt4EEclEtt>:
float& Matrix<heigth, width>::operator()(u_short row, u_short col)
 800d8ce:	b580      	push	{r7, lr}
 800d8d0:	b084      	sub	sp, #16
 800d8d2:	af00      	add	r7, sp, #0
 800d8d4:	6078      	str	r0, [r7, #4]
 800d8d6:	460b      	mov	r3, r1
 800d8d8:	807b      	strh	r3, [r7, #2]
 800d8da:	4613      	mov	r3, r2
 800d8dc:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 800d8de:	887b      	ldrh	r3, [r7, #2]
 800d8e0:	009a      	lsls	r2, r3, #2
 800d8e2:	883b      	ldrh	r3, [r7, #0]
 800d8e4:	4413      	add	r3, r2
 800d8e6:	60fb      	str	r3, [r7, #12]
	return _values[index];
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	68f9      	ldr	r1, [r7, #12]
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	f000 f9f9 	bl	800dce4 <_ZNSt5arrayIfLj16EEixEj>
 800d8f2:	4603      	mov	r3, r0
}
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	3710      	adds	r7, #16
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	bd80      	pop	{r7, pc}

0800d8fc <_ZN3Mat6MatrixILt6ELt6EEclEtt>:
float& Matrix<heigth, width>::operator()(u_short row, u_short col)
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b084      	sub	sp, #16
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
 800d904:	460b      	mov	r3, r1
 800d906:	807b      	strh	r3, [r7, #2]
 800d908:	4613      	mov	r3, r2
 800d90a:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 800d90c:	887a      	ldrh	r2, [r7, #2]
 800d90e:	4613      	mov	r3, r2
 800d910:	005b      	lsls	r3, r3, #1
 800d912:	4413      	add	r3, r2
 800d914:	005b      	lsls	r3, r3, #1
 800d916:	461a      	mov	r2, r3
 800d918:	883b      	ldrh	r3, [r7, #0]
 800d91a:	4413      	add	r3, r2
 800d91c:	60fb      	str	r3, [r7, #12]
	return _values[index];
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	68f9      	ldr	r1, [r7, #12]
 800d922:	4618      	mov	r0, r3
 800d924:	f000 f9ed 	bl	800dd02 <_ZNSt5arrayIfLj36EEixEj>
 800d928:	4603      	mov	r3, r0
}
 800d92a:	4618      	mov	r0, r3
 800d92c:	3710      	adds	r7, #16
 800d92e:	46bd      	mov	sp, r7
 800d930:	bd80      	pop	{r7, pc}

0800d932 <_ZN3Mat6MatrixILt3ELt1EEC1Ev>:
Matrix<heigth, width>::Matrix() {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 800d932:	b480      	push	{r7}
 800d934:	b083      	sub	sp, #12
 800d936:	af00      	add	r7, sp, #0
 800d938:	6078      	str	r0, [r7, #4]
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	4618      	mov	r0, r3
 800d93e:	370c      	adds	r7, #12
 800d940:	46bd      	mov	sp, r7
 800d942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d946:	4770      	bx	lr

0800d948 <_ZN3Mat6MatrixILt6ELt1EEC1Ev>:
 800d948:	b480      	push	{r7}
 800d94a:	b083      	sub	sp, #12
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	4618      	mov	r0, r3
 800d954:	370c      	adds	r7, #12
 800d956:	46bd      	mov	sp, r7
 800d958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95c:	4770      	bx	lr

0800d95e <_ZZN3Mat6MatrixILt3ELt3EEC4EfENKUlRfE_clES2_>:
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 800d95e:	b480      	push	{r7}
 800d960:	b083      	sub	sp, #12
 800d962:	af00      	add	r7, sp, #0
 800d964:	6078      	str	r0, [r7, #4]
 800d966:	6039      	str	r1, [r7, #0]
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681a      	ldr	r2, [r3, #0]
 800d96c:	683b      	ldr	r3, [r7, #0]
 800d96e:	601a      	str	r2, [r3, #0]
 800d970:	bf00      	nop
 800d972:	370c      	adds	r7, #12
 800d974:	46bd      	mov	sp, r7
 800d976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97a:	4770      	bx	lr

0800d97c <_ZN3Mat6MatrixILt3ELt3EEC1Ef>:
Matrix<heigth, width>::Matrix(float val)
 800d97c:	b590      	push	{r4, r7, lr}
 800d97e:	b083      	sub	sp, #12
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
 800d984:	ed87 0a00 	vstr	s0, [r7]
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	4618      	mov	r0, r3
 800d98c:	f000 f9c8 	bl	800dd20 <_ZNSt5arrayIfLj9EE5beginEv>
 800d990:	4604      	mov	r4, r0
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	4618      	mov	r0, r3
 800d996:	f000 f9cf 	bl	800dd38 <_ZNSt5arrayIfLj9EE3endEv>
 800d99a:	4603      	mov	r3, r0
 800d99c:	edd7 7a00 	vldr	s15, [r7]
 800d9a0:	eeb0 0a67 	vmov.f32	s0, s15
 800d9a4:	4619      	mov	r1, r3
 800d9a6:	4620      	mov	r0, r4
 800d9a8:	f000 f9d3 	bl	800dd52 <_ZSt8for_eachIPfZN3Mat6MatrixILt3ELt3EEC4EfEUlRfE_ET0_T_S7_S6_>
}
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	370c      	adds	r7, #12
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	bd90      	pop	{r4, r7, pc}

0800d9b6 <_ZN3Mat6MatrixILt3ELt3EEclEtt>:
float& Matrix<heigth, width>::operator()(u_short row, u_short col)
 800d9b6:	b580      	push	{r7, lr}
 800d9b8:	b084      	sub	sp, #16
 800d9ba:	af00      	add	r7, sp, #0
 800d9bc:	6078      	str	r0, [r7, #4]
 800d9be:	460b      	mov	r3, r1
 800d9c0:	807b      	strh	r3, [r7, #2]
 800d9c2:	4613      	mov	r3, r2
 800d9c4:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 800d9c6:	887a      	ldrh	r2, [r7, #2]
 800d9c8:	4613      	mov	r3, r2
 800d9ca:	005b      	lsls	r3, r3, #1
 800d9cc:	441a      	add	r2, r3
 800d9ce:	883b      	ldrh	r3, [r7, #0]
 800d9d0:	4413      	add	r3, r2
 800d9d2:	60fb      	str	r3, [r7, #12]
	return _values[index];
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	68f9      	ldr	r1, [r7, #12]
 800d9d8:	4618      	mov	r0, r3
 800d9da:	f000 f9d6 	bl	800dd8a <_ZNSt5arrayIfLj9EEixEj>
 800d9de:	4603      	mov	r3, r0
}
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	3710      	adds	r7, #16
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	bd80      	pop	{r7, pc}

0800d9e8 <_ZNSt5arrayIfLj3EE5beginEv>:
      begin() noexcept
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b082      	sub	sp, #8
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 800d9f0:	6878      	ldr	r0, [r7, #4]
 800d9f2:	f000 f9d9 	bl	800dda8 <_ZNSt5arrayIfLj3EE4dataEv>
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	3708      	adds	r7, #8
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	bd80      	pop	{r7, pc}

0800da00 <_ZNSt5arrayIfLj3EE3endEv>:
      end() noexcept
 800da00:	b580      	push	{r7, lr}
 800da02:	b082      	sub	sp, #8
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 800da08:	6878      	ldr	r0, [r7, #4]
 800da0a:	f000 f9cd 	bl	800dda8 <_ZNSt5arrayIfLj3EE4dataEv>
 800da0e:	4603      	mov	r3, r0
 800da10:	330c      	adds	r3, #12
 800da12:	4618      	mov	r0, r3
 800da14:	3708      	adds	r7, #8
 800da16:	46bd      	mov	sp, r7
 800da18:	bd80      	pop	{r7, pc}

0800da1a <_ZSt8for_eachIPfZN3Mat6MatrixILt3ELt1EEC4EfEUlRfE_ET0_T_S7_S6_>:
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
 800da1a:	b580      	push	{r7, lr}
 800da1c:	b084      	sub	sp, #16
 800da1e:	af00      	add	r7, sp, #0
 800da20:	60f8      	str	r0, [r7, #12]
 800da22:	60b9      	str	r1, [r7, #8]
 800da24:	ed87 0a01 	vstr	s0, [r7, #4]
      for (; __first != __last; ++__first)
 800da28:	e007      	b.n	800da3a <_ZSt8for_eachIPfZN3Mat6MatrixILt3ELt1EEC4EfEUlRfE_ET0_T_S7_S6_+0x20>
	__f(*__first);
 800da2a:	1d3b      	adds	r3, r7, #4
 800da2c:	68f9      	ldr	r1, [r7, #12]
 800da2e:	4618      	mov	r0, r3
 800da30:	f7ff fe3f 	bl	800d6b2 <_ZZN3Mat6MatrixILt3ELt1EEC4EfENKUlRfE_clES2_>
      for (; __first != __last; ++__first)
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	3304      	adds	r3, #4
 800da38:	60fb      	str	r3, [r7, #12]
 800da3a:	68fa      	ldr	r2, [r7, #12]
 800da3c:	68bb      	ldr	r3, [r7, #8]
 800da3e:	429a      	cmp	r2, r3
 800da40:	d1f3      	bne.n	800da2a <_ZSt8for_eachIPfZN3Mat6MatrixILt3ELt1EEC4EfEUlRfE_ET0_T_S7_S6_+0x10>
      return __f; // N.B. [alg.foreach] says std::move(f) but it's redundant.
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	ee07 3a90 	vmov	s15, r3
    }
 800da48:	eeb0 0a67 	vmov.f32	s0, s15
 800da4c:	3710      	adds	r7, #16
 800da4e:	46bd      	mov	sp, r7
 800da50:	bd80      	pop	{r7, pc}

0800da52 <_ZNSt5arrayIfLj3EEixEj>:
      _GLIBCXX_NODISCARD constexpr bool
      empty() const noexcept { return size() == 0; }

      // Element access.
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
 800da52:	b580      	push	{r7, lr}
 800da54:	b082      	sub	sp, #8
 800da56:	af00      	add	r7, sp, #0
 800da58:	6078      	str	r0, [r7, #4]
 800da5a:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return _AT_Type::_S_ref(_M_elems, __n);
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	6839      	ldr	r1, [r7, #0]
 800da60:	4618      	mov	r0, r3
 800da62:	f000 f9ae 	bl	800ddc2 <_ZNSt14__array_traitsIfLj3EE6_S_refERA3_Kfj>
 800da66:	4603      	mov	r3, r0
      }
 800da68:	4618      	mov	r0, r3
 800da6a:	3708      	adds	r7, #8
 800da6c:	46bd      	mov	sp, r7
 800da6e:	bd80      	pop	{r7, pc}

0800da70 <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_>:

template <u_short heigth, u_short width> template <u_short other_width>
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 800da70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da72:	b095      	sub	sp, #84	; 0x54
 800da74:	af00      	add	r7, sp, #0
 800da76:	60f8      	str	r0, [r7, #12]
 800da78:	60b9      	str	r1, [r7, #8]
 800da7a:	607a      	str	r2, [r7, #4]
{
	std::array<Row, other_width> other_columns;
	std::array<Row, heigth> this_rows;
	for(u_short row = 0; row < heigth; ++row)
 800da7c:	2300      	movs	r3, #0
 800da7e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800da82:	e02d      	b.n	800dae0 <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0x70>
		for(u_short col = 0; col < width; ++col)
 800da84:	2300      	movs	r3, #0
 800da86:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800da8a:	e020      	b.n	800dace <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 800da8c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800da90:	f107 0314 	add.w	r3, r7, #20
 800da94:	4611      	mov	r1, r2
 800da96:	4618      	mov	r0, r3
 800da98:	f000 f9a2 	bl	800dde0 <_ZNSt5arrayIS_IfLj3EELj3EEixEj>
 800da9c:	4602      	mov	r2, r0
 800da9e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800daa2:	4619      	mov	r1, r3
 800daa4:	4610      	mov	r0, r2
 800daa6:	f7ff ffd4 	bl	800da52 <_ZNSt5arrayIfLj3EEixEj>
 800daaa:	4604      	mov	r4, r0
 800daac:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800dab0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800dab4:	4619      	mov	r1, r3
 800dab6:	68f8      	ldr	r0, [r7, #12]
 800dab8:	f000 f9a1 	bl	800ddfe <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 800dabc:	eef0 7a40 	vmov.f32	s15, s0
 800dac0:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 800dac4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800dac8:	3301      	adds	r3, #1
 800daca:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800dace:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800dad2:	2b02      	cmp	r3, #2
 800dad4:	d9da      	bls.n	800da8c <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 800dad6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800dada:	3301      	adds	r3, #1
 800dadc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800dae0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800dae4:	2b02      	cmp	r3, #2
 800dae6:	d9cd      	bls.n	800da84 <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0x14>

	for(u_short col = 0; col < other_width; ++col)
 800dae8:	2300      	movs	r3, #0
 800daea:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800daee:	e02d      	b.n	800db4c <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0xdc>
		for(u_short row = 0; row < width; ++row)
 800daf0:	2300      	movs	r3, #0
 800daf2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800daf6:	e020      	b.n	800db3a <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0xca>
			other_columns[col][row] = other(row, col);
 800daf8:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800dafc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800db00:	4611      	mov	r1, r2
 800db02:	4618      	mov	r0, r3
 800db04:	f000 f998 	bl	800de38 <_ZNSt5arrayIS_IfLj3EELj1EEixEj>
 800db08:	4602      	mov	r2, r0
 800db0a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800db0e:	4619      	mov	r1, r3
 800db10:	4610      	mov	r0, r2
 800db12:	f7ff ff9e 	bl	800da52 <_ZNSt5arrayIfLj3EEixEj>
 800db16:	4604      	mov	r4, r0
 800db18:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800db1c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800db20:	4619      	mov	r1, r3
 800db22:	68b8      	ldr	r0, [r7, #8]
 800db24:	f000 f997 	bl	800de56 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 800db28:	eef0 7a40 	vmov.f32	s15, s0
 800db2c:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 800db30:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800db34:	3301      	adds	r3, #1
 800db36:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800db3a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800db3e:	2b02      	cmp	r3, #2
 800db40:	d9da      	bls.n	800daf8 <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0x88>
	for(u_short col = 0; col < other_width; ++col)
 800db42:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800db46:	3301      	adds	r3, #1
 800db48:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800db4c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800db50:	2b00      	cmp	r3, #0
 800db52:	d0cd      	beq.n	800daf0 <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0x80>

	for(u_short row = 0; row < heigth; ++row)
 800db54:	2300      	movs	r3, #0
 800db56:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800db5a:	e034      	b.n	800dbc6 <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0x156>
		for(u_short col = 0; col < other_width; ++col)
 800db5c:	2300      	movs	r3, #0
 800db5e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800db62:	e027      	b.n	800dbb4 <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 800db64:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800db68:	f107 0314 	add.w	r3, r7, #20
 800db6c:	4611      	mov	r1, r2
 800db6e:	4618      	mov	r0, r3
 800db70:	f000 f936 	bl	800dde0 <_ZNSt5arrayIS_IfLj3EELj3EEixEj>
 800db74:	4605      	mov	r5, r0
 800db76:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800db7a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800db7e:	4611      	mov	r1, r2
 800db80:	4618      	mov	r0, r3
 800db82:	f000 f959 	bl	800de38 <_ZNSt5arrayIS_IfLj3EELj1EEixEj>
 800db86:	4606      	mov	r6, r0
 800db88:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800db8c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800db90:	4619      	mov	r1, r3
 800db92:	6878      	ldr	r0, [r7, #4]
 800db94:	f7ff fdb9 	bl	800d70a <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800db98:	4604      	mov	r4, r0
 800db9a:	4631      	mov	r1, r6
 800db9c:	4628      	mov	r0, r5
 800db9e:	f000 f974 	bl	800de8a <_ZN3Mat13Multiply_rowsILj3EEEfRKSt5arrayIfXT_EES4_>
 800dba2:	eef0 7a40 	vmov.f32	s15, s0
 800dba6:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 800dbaa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800dbae:	3301      	adds	r3, #1
 800dbb0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800dbb4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d0d3      	beq.n	800db64 <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 800dbbc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800dbc0:	3301      	adds	r3, #1
 800dbc2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800dbc6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800dbca:	2b02      	cmp	r3, #2
 800dbcc:	d9c6      	bls.n	800db5c <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0xec>
}
 800dbce:	bf00      	nop
 800dbd0:	bf00      	nop
 800dbd2:	3754      	adds	r7, #84	; 0x54
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dbd8 <_ZNKSt5arrayIfLj6EEixEj>:

      constexpr const_reference
      operator[](size_type __n) const noexcept
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b082      	sub	sp, #8
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
 800dbe0:	6039      	str	r1, [r7, #0]
      {
#if __cplusplus >= 201402L
	__glibcxx_requires_subscript(__n);
#endif
	return _AT_Type::_S_ref(_M_elems, __n);
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	6839      	ldr	r1, [r7, #0]
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	f000 f982 	bl	800def0 <_ZNSt14__array_traitsIfLj6EE6_S_refERA6_Kfj>
 800dbec:	4603      	mov	r3, r0
      }
 800dbee:	4618      	mov	r0, r3
 800dbf0:	3708      	adds	r7, #8
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	bd80      	pop	{r7, pc}

0800dbf6 <_ZNSt5arrayIfLj6EE5beginEv>:
      begin() noexcept
 800dbf6:	b580      	push	{r7, lr}
 800dbf8:	b082      	sub	sp, #8
 800dbfa:	af00      	add	r7, sp, #0
 800dbfc:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 800dbfe:	6878      	ldr	r0, [r7, #4]
 800dc00:	f000 f985 	bl	800df0e <_ZNSt5arrayIfLj6EE4dataEv>
 800dc04:	4603      	mov	r3, r0
 800dc06:	4618      	mov	r0, r3
 800dc08:	3708      	adds	r7, #8
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	bd80      	pop	{r7, pc}

0800dc0e <_ZNSt5arrayIfLj6EE3endEv>:
      end() noexcept
 800dc0e:	b580      	push	{r7, lr}
 800dc10:	b082      	sub	sp, #8
 800dc12:	af00      	add	r7, sp, #0
 800dc14:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 800dc16:	6878      	ldr	r0, [r7, #4]
 800dc18:	f000 f979 	bl	800df0e <_ZNSt5arrayIfLj6EE4dataEv>
 800dc1c:	4603      	mov	r3, r0
 800dc1e:	3318      	adds	r3, #24
 800dc20:	4618      	mov	r0, r3
 800dc22:	3708      	adds	r7, #8
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bd80      	pop	{r7, pc}

0800dc28 <_ZSt8for_eachIPfZN3Mat6MatrixILt6ELt1EEC4EfEUlRfE_ET0_T_S7_S6_>:
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b084      	sub	sp, #16
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	60f8      	str	r0, [r7, #12]
 800dc30:	60b9      	str	r1, [r7, #8]
 800dc32:	ed87 0a01 	vstr	s0, [r7, #4]
      for (; __first != __last; ++__first)
 800dc36:	e007      	b.n	800dc48 <_ZSt8for_eachIPfZN3Mat6MatrixILt6ELt1EEC4EfEUlRfE_ET0_T_S7_S6_+0x20>
	__f(*__first);
 800dc38:	1d3b      	adds	r3, r7, #4
 800dc3a:	68f9      	ldr	r1, [r7, #12]
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	f7ff fdb9 	bl	800d7b4 <_ZZN3Mat6MatrixILt6ELt1EEC4EfENKUlRfE_clES2_>
      for (; __first != __last; ++__first)
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	3304      	adds	r3, #4
 800dc46:	60fb      	str	r3, [r7, #12]
 800dc48:	68fa      	ldr	r2, [r7, #12]
 800dc4a:	68bb      	ldr	r3, [r7, #8]
 800dc4c:	429a      	cmp	r2, r3
 800dc4e:	d1f3      	bne.n	800dc38 <_ZSt8for_eachIPfZN3Mat6MatrixILt6ELt1EEC4EfEUlRfE_ET0_T_S7_S6_+0x10>
      return __f; // N.B. [alg.foreach] says std::move(f) but it's redundant.
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	ee07 3a90 	vmov	s15, r3
    }
 800dc56:	eeb0 0a67 	vmov.f32	s0, s15
 800dc5a:	3710      	adds	r7, #16
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	bd80      	pop	{r7, pc}

0800dc60 <_ZNSt5arrayIfLj36EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b082      	sub	sp, #8
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	f000 f95c 	bl	800df28 <_ZNSt14__array_traitsIfLj36EE6_S_ptrERA36_Kf>
 800dc70:	4603      	mov	r3, r0
 800dc72:	4618      	mov	r0, r3
 800dc74:	3708      	adds	r7, #8
 800dc76:	46bd      	mov	sp, r7
 800dc78:	bd80      	pop	{r7, pc}

0800dc7a <_ZNSt5arrayIfLj16EE5beginEv>:
      begin() noexcept
 800dc7a:	b580      	push	{r7, lr}
 800dc7c:	b082      	sub	sp, #8
 800dc7e:	af00      	add	r7, sp, #0
 800dc80:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 800dc82:	6878      	ldr	r0, [r7, #4]
 800dc84:	f000 f95b 	bl	800df3e <_ZNSt5arrayIfLj16EE4dataEv>
 800dc88:	4603      	mov	r3, r0
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	3708      	adds	r7, #8
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	bd80      	pop	{r7, pc}

0800dc92 <_ZNSt5arrayIfLj16EE3endEv>:
      end() noexcept
 800dc92:	b580      	push	{r7, lr}
 800dc94:	b082      	sub	sp, #8
 800dc96:	af00      	add	r7, sp, #0
 800dc98:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 800dc9a:	6878      	ldr	r0, [r7, #4]
 800dc9c:	f000 f94f 	bl	800df3e <_ZNSt5arrayIfLj16EE4dataEv>
 800dca0:	4603      	mov	r3, r0
 800dca2:	3340      	adds	r3, #64	; 0x40
 800dca4:	4618      	mov	r0, r3
 800dca6:	3708      	adds	r7, #8
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	bd80      	pop	{r7, pc}

0800dcac <_ZSt8for_eachIPfZN3Mat6MatrixILt4ELt4EEC4EfEUlRfE_ET0_T_S7_S6_>:
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b084      	sub	sp, #16
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	60f8      	str	r0, [r7, #12]
 800dcb4:	60b9      	str	r1, [r7, #8]
 800dcb6:	ed87 0a01 	vstr	s0, [r7, #4]
      for (; __first != __last; ++__first)
 800dcba:	e007      	b.n	800dccc <_ZSt8for_eachIPfZN3Mat6MatrixILt4ELt4EEC4EfEUlRfE_ET0_T_S7_S6_+0x20>
	__f(*__first);
 800dcbc:	1d3b      	adds	r3, r7, #4
 800dcbe:	68f9      	ldr	r1, [r7, #12]
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	f7ff fdd8 	bl	800d876 <_ZZN3Mat6MatrixILt4ELt4EEC4EfENKUlRfE_clES2_>
      for (; __first != __last; ++__first)
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	3304      	adds	r3, #4
 800dcca:	60fb      	str	r3, [r7, #12]
 800dccc:	68fa      	ldr	r2, [r7, #12]
 800dcce:	68bb      	ldr	r3, [r7, #8]
 800dcd0:	429a      	cmp	r2, r3
 800dcd2:	d1f3      	bne.n	800dcbc <_ZSt8for_eachIPfZN3Mat6MatrixILt4ELt4EEC4EfEUlRfE_ET0_T_S7_S6_+0x10>
      return __f; // N.B. [alg.foreach] says std::move(f) but it's redundant.
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	ee07 3a90 	vmov	s15, r3
    }
 800dcda:	eeb0 0a67 	vmov.f32	s0, s15
 800dcde:	3710      	adds	r7, #16
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd80      	pop	{r7, pc}

0800dce4 <_ZNSt5arrayIfLj16EEixEj>:
      operator[](size_type __n) noexcept
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b082      	sub	sp, #8
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
 800dcec:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	6839      	ldr	r1, [r7, #0]
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	f000 f930 	bl	800df58 <_ZNSt14__array_traitsIfLj16EE6_S_refERA16_Kfj>
 800dcf8:	4603      	mov	r3, r0
      }
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	3708      	adds	r7, #8
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	bd80      	pop	{r7, pc}

0800dd02 <_ZNSt5arrayIfLj36EEixEj>:
      operator[](size_type __n) noexcept
 800dd02:	b580      	push	{r7, lr}
 800dd04:	b082      	sub	sp, #8
 800dd06:	af00      	add	r7, sp, #0
 800dd08:	6078      	str	r0, [r7, #4]
 800dd0a:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	6839      	ldr	r1, [r7, #0]
 800dd10:	4618      	mov	r0, r3
 800dd12:	f000 f930 	bl	800df76 <_ZNSt14__array_traitsIfLj36EE6_S_refERA36_Kfj>
 800dd16:	4603      	mov	r3, r0
      }
 800dd18:	4618      	mov	r0, r3
 800dd1a:	3708      	adds	r7, #8
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	bd80      	pop	{r7, pc}

0800dd20 <_ZNSt5arrayIfLj9EE5beginEv>:
      begin() noexcept
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b082      	sub	sp, #8
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 800dd28:	6878      	ldr	r0, [r7, #4]
 800dd2a:	f000 f933 	bl	800df94 <_ZNSt5arrayIfLj9EE4dataEv>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	4618      	mov	r0, r3
 800dd32:	3708      	adds	r7, #8
 800dd34:	46bd      	mov	sp, r7
 800dd36:	bd80      	pop	{r7, pc}

0800dd38 <_ZNSt5arrayIfLj9EE3endEv>:
      end() noexcept
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b082      	sub	sp, #8
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 800dd40:	6878      	ldr	r0, [r7, #4]
 800dd42:	f000 f927 	bl	800df94 <_ZNSt5arrayIfLj9EE4dataEv>
 800dd46:	4603      	mov	r3, r0
 800dd48:	3324      	adds	r3, #36	; 0x24
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	3708      	adds	r7, #8
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	bd80      	pop	{r7, pc}

0800dd52 <_ZSt8for_eachIPfZN3Mat6MatrixILt3ELt3EEC4EfEUlRfE_ET0_T_S7_S6_>:
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
 800dd52:	b580      	push	{r7, lr}
 800dd54:	b084      	sub	sp, #16
 800dd56:	af00      	add	r7, sp, #0
 800dd58:	60f8      	str	r0, [r7, #12]
 800dd5a:	60b9      	str	r1, [r7, #8]
 800dd5c:	ed87 0a01 	vstr	s0, [r7, #4]
      for (; __first != __last; ++__first)
 800dd60:	e007      	b.n	800dd72 <_ZSt8for_eachIPfZN3Mat6MatrixILt3ELt3EEC4EfEUlRfE_ET0_T_S7_S6_+0x20>
	__f(*__first);
 800dd62:	1d3b      	adds	r3, r7, #4
 800dd64:	68f9      	ldr	r1, [r7, #12]
 800dd66:	4618      	mov	r0, r3
 800dd68:	f7ff fdf9 	bl	800d95e <_ZZN3Mat6MatrixILt3ELt3EEC4EfENKUlRfE_clES2_>
      for (; __first != __last; ++__first)
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	3304      	adds	r3, #4
 800dd70:	60fb      	str	r3, [r7, #12]
 800dd72:	68fa      	ldr	r2, [r7, #12]
 800dd74:	68bb      	ldr	r3, [r7, #8]
 800dd76:	429a      	cmp	r2, r3
 800dd78:	d1f3      	bne.n	800dd62 <_ZSt8for_eachIPfZN3Mat6MatrixILt3ELt3EEC4EfEUlRfE_ET0_T_S7_S6_+0x10>
      return __f; // N.B. [alg.foreach] says std::move(f) but it's redundant.
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	ee07 3a90 	vmov	s15, r3
    }
 800dd80:	eeb0 0a67 	vmov.f32	s0, s15
 800dd84:	3710      	adds	r7, #16
 800dd86:	46bd      	mov	sp, r7
 800dd88:	bd80      	pop	{r7, pc}

0800dd8a <_ZNSt5arrayIfLj9EEixEj>:
      operator[](size_type __n) noexcept
 800dd8a:	b580      	push	{r7, lr}
 800dd8c:	b082      	sub	sp, #8
 800dd8e:	af00      	add	r7, sp, #0
 800dd90:	6078      	str	r0, [r7, #4]
 800dd92:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	6839      	ldr	r1, [r7, #0]
 800dd98:	4618      	mov	r0, r3
 800dd9a:	f000 f908 	bl	800dfae <_ZNSt14__array_traitsIfLj9EE6_S_refERA9_Kfj>
 800dd9e:	4603      	mov	r3, r0
      }
 800dda0:	4618      	mov	r0, r3
 800dda2:	3708      	adds	r7, #8
 800dda4:	46bd      	mov	sp, r7
 800dda6:	bd80      	pop	{r7, pc}

0800dda8 <_ZNSt5arrayIfLj3EE4dataEv>:
      data() noexcept
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b082      	sub	sp, #8
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	f000 f90a 	bl	800dfcc <_ZNSt14__array_traitsIfLj3EE6_S_ptrERA3_Kf>
 800ddb8:	4603      	mov	r3, r0
 800ddba:	4618      	mov	r0, r3
 800ddbc:	3708      	adds	r7, #8
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	bd80      	pop	{r7, pc}

0800ddc2 <_ZNSt14__array_traitsIfLj3EE6_S_refERA3_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800ddc2:	b480      	push	{r7}
 800ddc4:	b083      	sub	sp, #12
 800ddc6:	af00      	add	r7, sp, #0
 800ddc8:	6078      	str	r0, [r7, #4]
 800ddca:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800ddcc:	683b      	ldr	r3, [r7, #0]
 800ddce:	009b      	lsls	r3, r3, #2
 800ddd0:	687a      	ldr	r2, [r7, #4]
 800ddd2:	4413      	add	r3, r2
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	370c      	adds	r7, #12
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddde:	4770      	bx	lr

0800dde0 <_ZNSt5arrayIS_IfLj3EELj3EEixEj>:
      operator[](size_type __n) noexcept
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b082      	sub	sp, #8
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
 800dde8:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	6839      	ldr	r1, [r7, #0]
 800ddee:	4618      	mov	r0, r3
 800ddf0:	f000 f8f7 	bl	800dfe2 <_ZNSt14__array_traitsISt5arrayIfLj3EELj3EE6_S_refERA3_KS1_j>
 800ddf4:	4603      	mov	r3, r0
      }
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	3708      	adds	r7, #8
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	bd80      	pop	{r7, pc}

0800ddfe <_ZNK3Mat6MatrixILt3ELt3EEclEtt>:
float Matrix<heigth, width>::operator()(u_short row, u_short col) const
 800ddfe:	b580      	push	{r7, lr}
 800de00:	b084      	sub	sp, #16
 800de02:	af00      	add	r7, sp, #0
 800de04:	6078      	str	r0, [r7, #4]
 800de06:	460b      	mov	r3, r1
 800de08:	807b      	strh	r3, [r7, #2]
 800de0a:	4613      	mov	r3, r2
 800de0c:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 800de0e:	887a      	ldrh	r2, [r7, #2]
 800de10:	4613      	mov	r3, r2
 800de12:	005b      	lsls	r3, r3, #1
 800de14:	441a      	add	r2, r3
 800de16:	883b      	ldrh	r3, [r7, #0]
 800de18:	4413      	add	r3, r2
 800de1a:	60fb      	str	r3, [r7, #12]
	return _values[index];
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	68f9      	ldr	r1, [r7, #12]
 800de20:	4618      	mov	r0, r3
 800de22:	f000 f8f0 	bl	800e006 <_ZNKSt5arrayIfLj9EEixEj>
 800de26:	4603      	mov	r3, r0
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	ee07 3a90 	vmov	s15, r3
}
 800de2e:	eeb0 0a67 	vmov.f32	s0, s15
 800de32:	3710      	adds	r7, #16
 800de34:	46bd      	mov	sp, r7
 800de36:	bd80      	pop	{r7, pc}

0800de38 <_ZNSt5arrayIS_IfLj3EELj1EEixEj>:
      operator[](size_type __n) noexcept
 800de38:	b580      	push	{r7, lr}
 800de3a:	b082      	sub	sp, #8
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	6078      	str	r0, [r7, #4]
 800de40:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	6839      	ldr	r1, [r7, #0]
 800de46:	4618      	mov	r0, r3
 800de48:	f000 f8ec 	bl	800e024 <_ZNSt14__array_traitsISt5arrayIfLj3EELj1EE6_S_refERA1_KS1_j>
 800de4c:	4603      	mov	r3, r0
      }
 800de4e:	4618      	mov	r0, r3
 800de50:	3708      	adds	r7, #8
 800de52:	46bd      	mov	sp, r7
 800de54:	bd80      	pop	{r7, pc}

0800de56 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>:
float Matrix<heigth, width>::operator()(u_short row, u_short col) const
 800de56:	b580      	push	{r7, lr}
 800de58:	b084      	sub	sp, #16
 800de5a:	af00      	add	r7, sp, #0
 800de5c:	6078      	str	r0, [r7, #4]
 800de5e:	460b      	mov	r3, r1
 800de60:	807b      	strh	r3, [r7, #2]
 800de62:	4613      	mov	r3, r2
 800de64:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 800de66:	887a      	ldrh	r2, [r7, #2]
 800de68:	883b      	ldrh	r3, [r7, #0]
 800de6a:	4413      	add	r3, r2
 800de6c:	60fb      	str	r3, [r7, #12]
	return _values[index];
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	68f9      	ldr	r1, [r7, #12]
 800de72:	4618      	mov	r0, r3
 800de74:	f000 f8e8 	bl	800e048 <_ZNKSt5arrayIfLj3EEixEj>
 800de78:	4603      	mov	r3, r0
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	ee07 3a90 	vmov	s15, r3
}
 800de80:	eeb0 0a67 	vmov.f32	s0, s15
 800de84:	3710      	adds	r7, #16
 800de86:	46bd      	mov	sp, r7
 800de88:	bd80      	pop	{r7, pc}

0800de8a <_ZN3Mat13Multiply_rowsILj3EEEfRKSt5arrayIfXT_EES4_>:
float Multiply_rows(const std::array<float, length>& A, const std::array<float, length>& B)
 800de8a:	b580      	push	{r7, lr}
 800de8c:	ed2d 8b02 	vpush	{d8}
 800de90:	b084      	sub	sp, #16
 800de92:	af00      	add	r7, sp, #0
 800de94:	6078      	str	r0, [r7, #4]
 800de96:	6039      	str	r1, [r7, #0]
    float result = 0.0f;
 800de98:	f04f 0300 	mov.w	r3, #0
 800de9c:	60fb      	str	r3, [r7, #12]
	for(u_int i = 0; i < length; ++i) result += A[i]*B[i];
 800de9e:	2300      	movs	r3, #0
 800dea0:	60bb      	str	r3, [r7, #8]
 800dea2:	e018      	b.n	800ded6 <_ZN3Mat13Multiply_rowsILj3EEEfRKSt5arrayIfXT_EES4_+0x4c>
 800dea4:	68b9      	ldr	r1, [r7, #8]
 800dea6:	6878      	ldr	r0, [r7, #4]
 800dea8:	f000 f8ce 	bl	800e048 <_ZNKSt5arrayIfLj3EEixEj>
 800deac:	4603      	mov	r3, r0
 800deae:	ed93 8a00 	vldr	s16, [r3]
 800deb2:	68b9      	ldr	r1, [r7, #8]
 800deb4:	6838      	ldr	r0, [r7, #0]
 800deb6:	f000 f8c7 	bl	800e048 <_ZNKSt5arrayIfLj3EEixEj>
 800deba:	4603      	mov	r3, r0
 800debc:	edd3 7a00 	vldr	s15, [r3]
 800dec0:	ee68 7a27 	vmul.f32	s15, s16, s15
 800dec4:	ed97 7a03 	vldr	s14, [r7, #12]
 800dec8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800decc:	edc7 7a03 	vstr	s15, [r7, #12]
 800ded0:	68bb      	ldr	r3, [r7, #8]
 800ded2:	3301      	adds	r3, #1
 800ded4:	60bb      	str	r3, [r7, #8]
 800ded6:	68bb      	ldr	r3, [r7, #8]
 800ded8:	2b02      	cmp	r3, #2
 800deda:	d9e3      	bls.n	800dea4 <_ZN3Mat13Multiply_rowsILj3EEEfRKSt5arrayIfXT_EES4_+0x1a>
	return result;
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	ee07 3a90 	vmov	s15, r3
}
 800dee2:	eeb0 0a67 	vmov.f32	s0, s15
 800dee6:	3710      	adds	r7, #16
 800dee8:	46bd      	mov	sp, r7
 800deea:	ecbd 8b02 	vpop	{d8}
 800deee:	bd80      	pop	{r7, pc}

0800def0 <_ZNSt14__array_traitsIfLj6EE6_S_refERA6_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800def0:	b480      	push	{r7}
 800def2:	b083      	sub	sp, #12
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
 800def8:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800defa:	683b      	ldr	r3, [r7, #0]
 800defc:	009b      	lsls	r3, r3, #2
 800defe:	687a      	ldr	r2, [r7, #4]
 800df00:	4413      	add	r3, r2
 800df02:	4618      	mov	r0, r3
 800df04:	370c      	adds	r7, #12
 800df06:	46bd      	mov	sp, r7
 800df08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0c:	4770      	bx	lr

0800df0e <_ZNSt5arrayIfLj6EE4dataEv>:
      data() noexcept
 800df0e:	b580      	push	{r7, lr}
 800df10:	b082      	sub	sp, #8
 800df12:	af00      	add	r7, sp, #0
 800df14:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	4618      	mov	r0, r3
 800df1a:	f000 f8a4 	bl	800e066 <_ZNSt14__array_traitsIfLj6EE6_S_ptrERA6_Kf>
 800df1e:	4603      	mov	r3, r0
 800df20:	4618      	mov	r0, r3
 800df22:	3708      	adds	r7, #8
 800df24:	46bd      	mov	sp, r7
 800df26:	bd80      	pop	{r7, pc}

0800df28 <_ZNSt14__array_traitsIfLj36EE6_S_ptrERA36_Kf>:
      _S_ptr(const _Type& __t) noexcept
 800df28:	b480      	push	{r7}
 800df2a:	b083      	sub	sp, #12
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	4618      	mov	r0, r3
 800df34:	370c      	adds	r7, #12
 800df36:	46bd      	mov	sp, r7
 800df38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3c:	4770      	bx	lr

0800df3e <_ZNSt5arrayIfLj16EE4dataEv>:
      data() noexcept
 800df3e:	b580      	push	{r7, lr}
 800df40:	b082      	sub	sp, #8
 800df42:	af00      	add	r7, sp, #0
 800df44:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	4618      	mov	r0, r3
 800df4a:	f000 f897 	bl	800e07c <_ZNSt14__array_traitsIfLj16EE6_S_ptrERA16_Kf>
 800df4e:	4603      	mov	r3, r0
 800df50:	4618      	mov	r0, r3
 800df52:	3708      	adds	r7, #8
 800df54:	46bd      	mov	sp, r7
 800df56:	bd80      	pop	{r7, pc}

0800df58 <_ZNSt14__array_traitsIfLj16EE6_S_refERA16_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800df58:	b480      	push	{r7}
 800df5a:	b083      	sub	sp, #12
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
 800df60:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800df62:	683b      	ldr	r3, [r7, #0]
 800df64:	009b      	lsls	r3, r3, #2
 800df66:	687a      	ldr	r2, [r7, #4]
 800df68:	4413      	add	r3, r2
 800df6a:	4618      	mov	r0, r3
 800df6c:	370c      	adds	r7, #12
 800df6e:	46bd      	mov	sp, r7
 800df70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df74:	4770      	bx	lr

0800df76 <_ZNSt14__array_traitsIfLj36EE6_S_refERA36_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800df76:	b480      	push	{r7}
 800df78:	b083      	sub	sp, #12
 800df7a:	af00      	add	r7, sp, #0
 800df7c:	6078      	str	r0, [r7, #4]
 800df7e:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	009b      	lsls	r3, r3, #2
 800df84:	687a      	ldr	r2, [r7, #4]
 800df86:	4413      	add	r3, r2
 800df88:	4618      	mov	r0, r3
 800df8a:	370c      	adds	r7, #12
 800df8c:	46bd      	mov	sp, r7
 800df8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df92:	4770      	bx	lr

0800df94 <_ZNSt5arrayIfLj9EE4dataEv>:
      data() noexcept
 800df94:	b580      	push	{r7, lr}
 800df96:	b082      	sub	sp, #8
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	4618      	mov	r0, r3
 800dfa0:	f000 f877 	bl	800e092 <_ZNSt14__array_traitsIfLj9EE6_S_ptrERA9_Kf>
 800dfa4:	4603      	mov	r3, r0
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	3708      	adds	r7, #8
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	bd80      	pop	{r7, pc}

0800dfae <_ZNSt14__array_traitsIfLj9EE6_S_refERA9_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800dfae:	b480      	push	{r7}
 800dfb0:	b083      	sub	sp, #12
 800dfb2:	af00      	add	r7, sp, #0
 800dfb4:	6078      	str	r0, [r7, #4]
 800dfb6:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800dfb8:	683b      	ldr	r3, [r7, #0]
 800dfba:	009b      	lsls	r3, r3, #2
 800dfbc:	687a      	ldr	r2, [r7, #4]
 800dfbe:	4413      	add	r3, r2
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	370c      	adds	r7, #12
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfca:	4770      	bx	lr

0800dfcc <_ZNSt14__array_traitsIfLj3EE6_S_ptrERA3_Kf>:
      _S_ptr(const _Type& __t) noexcept
 800dfcc:	b480      	push	{r7}
 800dfce:	b083      	sub	sp, #12
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	370c      	adds	r7, #12
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe0:	4770      	bx	lr

0800dfe2 <_ZNSt14__array_traitsISt5arrayIfLj3EELj3EE6_S_refERA3_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800dfe2:	b480      	push	{r7}
 800dfe4:	b083      	sub	sp, #12
 800dfe6:	af00      	add	r7, sp, #0
 800dfe8:	6078      	str	r0, [r7, #4]
 800dfea:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800dfec:	683a      	ldr	r2, [r7, #0]
 800dfee:	4613      	mov	r3, r2
 800dff0:	005b      	lsls	r3, r3, #1
 800dff2:	4413      	add	r3, r2
 800dff4:	009b      	lsls	r3, r3, #2
 800dff6:	687a      	ldr	r2, [r7, #4]
 800dff8:	4413      	add	r3, r2
 800dffa:	4618      	mov	r0, r3
 800dffc:	370c      	adds	r7, #12
 800dffe:	46bd      	mov	sp, r7
 800e000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e004:	4770      	bx	lr

0800e006 <_ZNKSt5arrayIfLj9EEixEj>:
      operator[](size_type __n) const noexcept
 800e006:	b580      	push	{r7, lr}
 800e008:	b082      	sub	sp, #8
 800e00a:	af00      	add	r7, sp, #0
 800e00c:	6078      	str	r0, [r7, #4]
 800e00e:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	6839      	ldr	r1, [r7, #0]
 800e014:	4618      	mov	r0, r3
 800e016:	f7ff ffca 	bl	800dfae <_ZNSt14__array_traitsIfLj9EE6_S_refERA9_Kfj>
 800e01a:	4603      	mov	r3, r0
      }
 800e01c:	4618      	mov	r0, r3
 800e01e:	3708      	adds	r7, #8
 800e020:	46bd      	mov	sp, r7
 800e022:	bd80      	pop	{r7, pc}

0800e024 <_ZNSt14__array_traitsISt5arrayIfLj3EELj1EE6_S_refERA1_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800e024:	b480      	push	{r7}
 800e026:	b083      	sub	sp, #12
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
 800e02c:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800e02e:	683a      	ldr	r2, [r7, #0]
 800e030:	4613      	mov	r3, r2
 800e032:	005b      	lsls	r3, r3, #1
 800e034:	4413      	add	r3, r2
 800e036:	009b      	lsls	r3, r3, #2
 800e038:	687a      	ldr	r2, [r7, #4]
 800e03a:	4413      	add	r3, r2
 800e03c:	4618      	mov	r0, r3
 800e03e:	370c      	adds	r7, #12
 800e040:	46bd      	mov	sp, r7
 800e042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e046:	4770      	bx	lr

0800e048 <_ZNKSt5arrayIfLj3EEixEj>:
      operator[](size_type __n) const noexcept
 800e048:	b580      	push	{r7, lr}
 800e04a:	b082      	sub	sp, #8
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]
 800e050:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	6839      	ldr	r1, [r7, #0]
 800e056:	4618      	mov	r0, r3
 800e058:	f7ff feb3 	bl	800ddc2 <_ZNSt14__array_traitsIfLj3EE6_S_refERA3_Kfj>
 800e05c:	4603      	mov	r3, r0
      }
 800e05e:	4618      	mov	r0, r3
 800e060:	3708      	adds	r7, #8
 800e062:	46bd      	mov	sp, r7
 800e064:	bd80      	pop	{r7, pc}

0800e066 <_ZNSt14__array_traitsIfLj6EE6_S_ptrERA6_Kf>:
      _S_ptr(const _Type& __t) noexcept
 800e066:	b480      	push	{r7}
 800e068:	b083      	sub	sp, #12
 800e06a:	af00      	add	r7, sp, #0
 800e06c:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	4618      	mov	r0, r3
 800e072:	370c      	adds	r7, #12
 800e074:	46bd      	mov	sp, r7
 800e076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07a:	4770      	bx	lr

0800e07c <_ZNSt14__array_traitsIfLj16EE6_S_ptrERA16_Kf>:
      _S_ptr(const _Type& __t) noexcept
 800e07c:	b480      	push	{r7}
 800e07e:	b083      	sub	sp, #12
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	4618      	mov	r0, r3
 800e088:	370c      	adds	r7, #12
 800e08a:	46bd      	mov	sp, r7
 800e08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e090:	4770      	bx	lr

0800e092 <_ZNSt14__array_traitsIfLj9EE6_S_ptrERA9_Kf>:
      _S_ptr(const _Type& __t) noexcept
 800e092:	b480      	push	{r7}
 800e094:	b083      	sub	sp, #12
 800e096:	af00      	add	r7, sp, #0
 800e098:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	4618      	mov	r0, r3
 800e09e:	370c      	adds	r7, #12
 800e0a0:	46bd      	mov	sp, r7
 800e0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a6:	4770      	bx	lr

0800e0a8 <_Z41__static_initialization_and_destruction_0ii>:

Vec3 GetAcceleration()
{
	Vec3 result;
	return result;
}
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b09a      	sub	sp, #104	; 0x68
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
 800e0b0:	6039      	str	r1, [r7, #0]
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	2b01      	cmp	r3, #1
 800e0b6:	f040 8093 	bne.w	800e1e0 <_Z41__static_initialization_and_destruction_0ii+0x138>
 800e0ba:	683b      	ldr	r3, [r7, #0]
 800e0bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e0c0:	4293      	cmp	r3, r2
 800e0c2:	f040 808d 	bne.w	800e1e0 <_Z41__static_initialization_and_destruction_0ii+0x138>
Algorithms::FusionAlgorithm Fusion{};
 800e0c6:	4848      	ldr	r0, [pc, #288]	; (800e1e8 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 800e0c8:	f7fe ff66 	bl	800cf98 <_ZN10Algorithms15FusionAlgorithmC1Ev>
Algorithms::AHRSKalman Kalman{};
 800e0cc:	4847      	ldr	r0, [pc, #284]	; (800e1ec <_Z41__static_initialization_and_destruction_0ii+0x144>)
 800e0ce:	f7fe ff23 	bl	800cf18 <_ZN10Algorithms10AHRSKalmanC1Ev>
Mat::Matrix<3, 1> MagCal({0, 0, 0});
 800e0d2:	f04f 0300 	mov.w	r3, #0
 800e0d6:	60bb      	str	r3, [r7, #8]
 800e0d8:	f04f 0300 	mov.w	r3, #0
 800e0dc:	60fb      	str	r3, [r7, #12]
 800e0de:	f04f 0300 	mov.w	r3, #0
 800e0e2:	613b      	str	r3, [r7, #16]
 800e0e4:	f107 0308 	add.w	r3, r7, #8
 800e0e8:	4619      	mov	r1, r3
 800e0ea:	4841      	ldr	r0, [pc, #260]	; (800e1f0 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 800e0ec:	f7ff fad0 	bl	800d690 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
Mat::Matrix<3, 1> MagRaw({0, 0, 0});
 800e0f0:	f04f 0300 	mov.w	r3, #0
 800e0f4:	617b      	str	r3, [r7, #20]
 800e0f6:	f04f 0300 	mov.w	r3, #0
 800e0fa:	61bb      	str	r3, [r7, #24]
 800e0fc:	f04f 0300 	mov.w	r3, #0
 800e100:	61fb      	str	r3, [r7, #28]
 800e102:	f107 0314 	add.w	r3, r7, #20
 800e106:	4619      	mov	r1, r3
 800e108:	483a      	ldr	r0, [pc, #232]	; (800e1f4 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 800e10a:	f7ff fac1 	bl	800d690 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
Mat::Matrix<3, 1> GyroCal({0, 0, 0});
 800e10e:	f04f 0300 	mov.w	r3, #0
 800e112:	623b      	str	r3, [r7, #32]
 800e114:	f04f 0300 	mov.w	r3, #0
 800e118:	627b      	str	r3, [r7, #36]	; 0x24
 800e11a:	f04f 0300 	mov.w	r3, #0
 800e11e:	62bb      	str	r3, [r7, #40]	; 0x28
 800e120:	f107 0320 	add.w	r3, r7, #32
 800e124:	4619      	mov	r1, r3
 800e126:	4834      	ldr	r0, [pc, #208]	; (800e1f8 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 800e128:	f7ff fab2 	bl	800d690 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
Mat::Matrix<3, 1> GyroRaw({0, 0, 0});
 800e12c:	f04f 0300 	mov.w	r3, #0
 800e130:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e132:	f04f 0300 	mov.w	r3, #0
 800e136:	633b      	str	r3, [r7, #48]	; 0x30
 800e138:	f04f 0300 	mov.w	r3, #0
 800e13c:	637b      	str	r3, [r7, #52]	; 0x34
 800e13e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e142:	4619      	mov	r1, r3
 800e144:	482d      	ldr	r0, [pc, #180]	; (800e1fc <_Z41__static_initialization_and_destruction_0ii+0x154>)
 800e146:	f7ff faa3 	bl	800d690 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
Mat::Matrix<3, 1> AccCal({0, 0, 0});
 800e14a:	f04f 0300 	mov.w	r3, #0
 800e14e:	63bb      	str	r3, [r7, #56]	; 0x38
 800e150:	f04f 0300 	mov.w	r3, #0
 800e154:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e156:	f04f 0300 	mov.w	r3, #0
 800e15a:	643b      	str	r3, [r7, #64]	; 0x40
 800e15c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e160:	4619      	mov	r1, r3
 800e162:	4827      	ldr	r0, [pc, #156]	; (800e200 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 800e164:	f7ff fa94 	bl	800d690 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
Mat::Matrix<3, 1> AccRaw({0, 0, 0});
 800e168:	f04f 0300 	mov.w	r3, #0
 800e16c:	647b      	str	r3, [r7, #68]	; 0x44
 800e16e:	f04f 0300 	mov.w	r3, #0
 800e172:	64bb      	str	r3, [r7, #72]	; 0x48
 800e174:	f04f 0300 	mov.w	r3, #0
 800e178:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e17a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e17e:	4619      	mov	r1, r3
 800e180:	4820      	ldr	r0, [pc, #128]	; (800e204 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 800e182:	f7ff fa85 	bl	800d690 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
Mat::Matrix<3, 1> GyroRawMean({0, 0, 0});
 800e186:	f04f 0300 	mov.w	r3, #0
 800e18a:	653b      	str	r3, [r7, #80]	; 0x50
 800e18c:	f04f 0300 	mov.w	r3, #0
 800e190:	657b      	str	r3, [r7, #84]	; 0x54
 800e192:	f04f 0300 	mov.w	r3, #0
 800e196:	65bb      	str	r3, [r7, #88]	; 0x58
 800e198:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e19c:	4619      	mov	r1, r3
 800e19e:	481a      	ldr	r0, [pc, #104]	; (800e208 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 800e1a0:	f7ff fa76 	bl	800d690 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
Mat::Matrix<3, 1> GyroCalMean({0, 0, 0});
 800e1a4:	f04f 0300 	mov.w	r3, #0
 800e1a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e1aa:	f04f 0300 	mov.w	r3, #0
 800e1ae:	663b      	str	r3, [r7, #96]	; 0x60
 800e1b0:	f04f 0300 	mov.w	r3, #0
 800e1b4:	667b      	str	r3, [r7, #100]	; 0x64
 800e1b6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e1ba:	4619      	mov	r1, r3
 800e1bc:	4813      	ldr	r0, [pc, #76]	; (800e20c <_Z41__static_initialization_and_destruction_0ii+0x164>)
 800e1be:	f7ff fa67 	bl	800d690 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
Mat::Matrix<3, 1> angle = 0.0f;
 800e1c2:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800e210 <_Z41__static_initialization_and_destruction_0ii+0x168>
 800e1c6:	4813      	ldr	r0, [pc, #76]	; (800e214 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 800e1c8:	f7ff fa82 	bl	800d6d0 <_ZN3Mat6MatrixILt3ELt1EEC1Ef>
Mat::Matrix<3, 1> speed = 0.0f;
 800e1cc:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800e210 <_Z41__static_initialization_and_destruction_0ii+0x168>
 800e1d0:	4811      	ldr	r0, [pc, #68]	; (800e218 <_Z41__static_initialization_and_destruction_0ii+0x170>)
 800e1d2:	f7ff fa7d 	bl	800d6d0 <_ZN3Mat6MatrixILt3ELt1EEC1Ef>
Mat::Matrix<3, 1> meanMag = 0.0f;
 800e1d6:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800e210 <_Z41__static_initialization_and_destruction_0ii+0x168>
 800e1da:	4810      	ldr	r0, [pc, #64]	; (800e21c <_Z41__static_initialization_and_destruction_0ii+0x174>)
 800e1dc:	f7ff fa78 	bl	800d6d0 <_ZN3Mat6MatrixILt3ELt1EEC1Ef>
}
 800e1e0:	bf00      	nop
 800e1e2:	3768      	adds	r7, #104	; 0x68
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	bd80      	pop	{r7, pc}
 800e1e8:	24008cf4 	.word	0x24008cf4
 800e1ec:	24008f54 	.word	0x24008f54
 800e1f0:	24009008 	.word	0x24009008
 800e1f4:	24009014 	.word	0x24009014
 800e1f8:	24009020 	.word	0x24009020
 800e1fc:	2400902c 	.word	0x2400902c
 800e200:	24009038 	.word	0x24009038
 800e204:	24009044 	.word	0x24009044
 800e208:	24009050 	.word	0x24009050
 800e20c:	2400905c 	.word	0x2400905c
 800e210:	00000000 	.word	0x00000000
 800e214:	24009078 	.word	0x24009078
 800e218:	24009084 	.word	0x24009084
 800e21c:	24009090 	.word	0x24009090

0800e220 <_ZN10Algorithms20ExtendedKalmanFilterILt6ELt3ELt6EE4InitERKN3Mat8V_VectorILt6EEERKNS2_6MatrixILt6ELt6EEEf>:
	virtual void Init(const StateVec& state, const StateCovarianceMatrix& stateCovMatrix, float time)
 800e220:	b5b0      	push	{r4, r5, r7, lr}
 800e222:	b084      	sub	sp, #16
 800e224:	af00      	add	r7, sp, #0
 800e226:	60f8      	str	r0, [r7, #12]
 800e228:	60b9      	str	r1, [r7, #8]
 800e22a:	607a      	str	r2, [r7, #4]
 800e22c:	ed87 0a00 	vstr	s0, [r7]
		{_state = state;
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	68ba      	ldr	r2, [r7, #8]
 800e234:	1d1c      	adds	r4, r3, #4
 800e236:	4615      	mov	r5, r2
 800e238:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e23a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e23c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e240:	e884 0003 	stmia.w	r4, {r0, r1}
		_stateCovMatrix = stateCovMatrix;
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	687a      	ldr	r2, [r7, #4]
 800e248:	331c      	adds	r3, #28
 800e24a:	4611      	mov	r1, r2
 800e24c:	2290      	movs	r2, #144	; 0x90
 800e24e:	4618      	mov	r0, r3
 800e250:	f00b ff97 	bl	801a182 <memcpy>
		_time = time;}
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	683a      	ldr	r2, [r7, #0]
 800e258:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 800e25c:	bf00      	nop
 800e25e:	3710      	adds	r7, #16
 800e260:	46bd      	mov	sp, r7
 800e262:	bdb0      	pop	{r4, r5, r7, pc}

0800e264 <_ZN10Algorithms20ExtendedKalmanFilterILt6ELt3ELt6EE7PredictERKN3Mat8V_VectorILt3EEERKNS2_6MatrixILt3ELt3EEEf>:
	StateCovarianceMatrix _stateCovMatrix;
	float _time;
};

template <u_short stateLen, u_short controlLen, u_short meassurementLen>
void ExtendedKalmanFilter<stateLen, controlLen, meassurementLen>::Predict(
 800e264:	b5b0      	push	{r4, r5, r7, lr}
 800e266:	f5ad 7d5c 	sub.w	sp, sp, #880	; 0x370
 800e26a:	af00      	add	r7, sp, #0
 800e26c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800e270:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800e274:	6018      	str	r0, [r3, #0]
 800e276:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800e27a:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 800e27e:	6019      	str	r1, [r3, #0]
 800e280:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800e284:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 800e288:	601a      	str	r2, [r3, #0]
 800e28a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800e28e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800e292:	ed83 0a00 	vstr	s0, [r3]
		const ControlVec& controlVec,
		const ControlCovarianceMatrix& controlCov,
		float time)
{
	const StateCovarianceMatrix F = _F(controlVec, time);
 800e296:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800e29a:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	3310      	adds	r3, #16
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800e2aa:	f5a2 7434 	sub.w	r4, r2, #720	; 0x2d0
 800e2ae:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800e2b2:	f5a2 7038 	sub.w	r0, r2, #736	; 0x2e0
 800e2b6:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800e2ba:	f5a2 7236 	sub.w	r2, r2, #728	; 0x2d8
 800e2be:	f507 715c 	add.w	r1, r7, #880	; 0x370
 800e2c2:	f5a1 7135 	sub.w	r1, r1, #724	; 0x2d4
 800e2c6:	ed90 0a00 	vldr	s0, [r0]
 800e2ca:	6812      	ldr	r2, [r2, #0]
 800e2cc:	6809      	ldr	r1, [r1, #0]
 800e2ce:	4620      	mov	r0, r4
 800e2d0:	4798      	blx	r3
	_stateCovMatrix = F * _stateCovMatrix * F.Transposed() + _Q(controlVec, controlCov, time);
 800e2d2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800e2d6:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	f103 021c 	add.w	r2, r3, #28
 800e2e0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800e2e4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800e2e8:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	f000 f9a5 	bl	800e63c <_ZNK3Mat6MatrixILt6ELt6EEmlILt6EEENS0_ILt6EXT_EEERKS3_>
 800e2f2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800e2f6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800e2fa:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800e2fe:	4611      	mov	r1, r2
 800e300:	4618      	mov	r0, r3
 800e302:	f000 f9ae 	bl	800e662 <_ZNK3Mat6MatrixILt6ELt6EE10TransposedEv>
 800e306:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800e30a:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800e30e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800e312:	f507 71e0 	add.w	r1, r7, #448	; 0x1c0
 800e316:	4618      	mov	r0, r3
 800e318:	f000 f990 	bl	800e63c <_ZNK3Mat6MatrixILt6ELt6EEmlILt6EEENS0_ILt6EXT_EEERKS3_>
 800e31c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800e320:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	3314      	adds	r3, #20
 800e32a:	681c      	ldr	r4, [r3, #0]
 800e32c:	f507 7538 	add.w	r5, r7, #736	; 0x2e0
 800e330:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800e334:	f5a3 7038 	sub.w	r0, r3, #736	; 0x2e0
 800e338:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800e33c:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 800e340:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800e344:	f5a2 7236 	sub.w	r2, r2, #728	; 0x2d8
 800e348:	f507 715c 	add.w	r1, r7, #880	; 0x370
 800e34c:	f5a1 7135 	sub.w	r1, r1, #724	; 0x2d4
 800e350:	ed90 0a00 	vldr	s0, [r0]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	6812      	ldr	r2, [r2, #0]
 800e358:	6809      	ldr	r1, [r1, #0]
 800e35a:	4628      	mov	r0, r5
 800e35c:	47a0      	blx	r4
 800e35e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800e362:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800e366:	681c      	ldr	r4, [r3, #0]
 800e368:	463b      	mov	r3, r7
 800e36a:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 800e36e:	f507 7198 	add.w	r1, r7, #304	; 0x130
 800e372:	4618      	mov	r0, r3
 800e374:	f000 f9a5 	bl	800e6c2 <_ZNK3Mat6MatrixILt6ELt6EEplERKS1_>
 800e378:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800e37c:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 800e380:	f104 031c 	add.w	r3, r4, #28
 800e384:	4611      	mov	r1, r2
 800e386:	2290      	movs	r2, #144	; 0x90
 800e388:	4618      	mov	r0, r3
 800e38a:	f00b fefa 	bl	801a182 <memcpy>
	_state = _f(controlVec, time);
 800e38e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800e392:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	330c      	adds	r3, #12
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800e3a2:	f5a2 7235 	sub.w	r2, r2, #724	; 0x2d4
 800e3a6:	6814      	ldr	r4, [r2, #0]
 800e3a8:	463d      	mov	r5, r7
 800e3aa:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800e3ae:	f5a2 7038 	sub.w	r0, r2, #736	; 0x2e0
 800e3b2:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800e3b6:	f5a2 7236 	sub.w	r2, r2, #728	; 0x2d8
 800e3ba:	f507 715c 	add.w	r1, r7, #880	; 0x370
 800e3be:	f5a1 7135 	sub.w	r1, r1, #724	; 0x2d4
 800e3c2:	ed90 0a00 	vldr	s0, [r0]
 800e3c6:	6812      	ldr	r2, [r2, #0]
 800e3c8:	6809      	ldr	r1, [r1, #0]
 800e3ca:	4628      	mov	r0, r5
 800e3cc:	4798      	blx	r3
 800e3ce:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800e3d2:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 800e3d6:	3404      	adds	r4, #4
 800e3d8:	461d      	mov	r5, r3
 800e3da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e3dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e3de:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e3e2:	e884 0003 	stmia.w	r4, {r0, r1}
	_time = time;
 800e3e6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800e3ea:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800e3f4:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 800e3f8:	6812      	ldr	r2, [r2, #0]
 800e3fa:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}
 800e3fe:	bf00      	nop
 800e400:	f507 775c 	add.w	r7, r7, #880	; 0x370
 800e404:	46bd      	mov	sp, r7
 800e406:	bdb0      	pop	{r4, r5, r7, pc}

0800e408 <_ZN10Algorithms20ExtendedKalmanFilterILt6ELt3ELt6EE6UpdateERKN3Mat8V_VectorILt6EEERKNS2_6MatrixILt6ELt6EEEf>:

template <u_short stateLen, u_short controlLen, u_short meassurementLen>
void ExtendedKalmanFilter<stateLen, controlLen, meassurementLen>::Update(
 800e408:	b5b0      	push	{r4, r5, r7, lr}
 800e40a:	f5ad 6df5 	sub.w	sp, sp, #1960	; 0x7a8
 800e40e:	af00      	add	r7, sp, #0
 800e410:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800e414:	f2a3 730c 	subw	r3, r3, #1804	; 0x70c
 800e418:	6018      	str	r0, [r3, #0]
 800e41a:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800e41e:	f5a3 63e2 	sub.w	r3, r3, #1808	; 0x710
 800e422:	6019      	str	r1, [r3, #0]
 800e424:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800e428:	f2a3 7314 	subw	r3, r3, #1812	; 0x714
 800e42c:	601a      	str	r2, [r3, #0]
 800e42e:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800e432:	f5a3 63e3 	sub.w	r3, r3, #1816	; 0x718
 800e436:	ed83 0a00 	vstr	s0, [r3]
		const MeassurementVec& meassurementVec,
		const MeasurementCovarianceMatrix& meassurementCov,
		float time)
{
	auto H = _H();
 800e43a:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800e43e:	f2a3 730c 	subw	r3, r3, #1804	; 0x70c
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	331c      	adds	r3, #28
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	f507 62f5 	add.w	r2, r7, #1960	; 0x7a8
 800e44e:	f5a2 60bd 	sub.w	r0, r2, #1512	; 0x5e8
 800e452:	f507 62f5 	add.w	r2, r7, #1960	; 0x7a8
 800e456:	f2a2 720c 	subw	r2, r2, #1804	; 0x70c
 800e45a:	6811      	ldr	r1, [r2, #0]
 800e45c:	4798      	blx	r3
	auto S = H * _stateCovMatrix * H.Transposed() + meassurementCov;
 800e45e:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800e462:	f2a3 730c 	subw	r3, r3, #1804	; 0x70c
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	f103 021c 	add.w	r2, r3, #28
 800e46c:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800e470:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 800e474:	f507 71e0 	add.w	r1, r7, #448	; 0x1c0
 800e478:	4618      	mov	r0, r3
 800e47a:	f000 f8df 	bl	800e63c <_ZNK3Mat6MatrixILt6ELt6EEmlILt6EEENS0_ILt6EXT_EEERKS3_>
 800e47e:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800e482:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 800e486:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 800e48a:	4611      	mov	r1, r2
 800e48c:	4618      	mov	r0, r3
 800e48e:	f000 f8e8 	bl	800e662 <_ZNK3Mat6MatrixILt6ELt6EE10TransposedEv>
 800e492:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800e496:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 800e49a:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800e49e:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	f000 f8ca 	bl	800e63c <_ZNK3Mat6MatrixILt6ELt6EEmlILt6EEENS0_ILt6EXT_EEERKS3_>
 800e4a8:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800e4ac:	f5a3 60cf 	sub.w	r0, r3, #1656	; 0x678
 800e4b0:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800e4b4:	f2a3 7314 	subw	r3, r3, #1812	; 0x714
 800e4b8:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800e4bc:	681a      	ldr	r2, [r3, #0]
 800e4be:	f000 f900 	bl	800e6c2 <_ZNK3Mat6MatrixILt6ELt6EEplERKS1_>
	auto K = _stateCovMatrix * H.Transposed() *_InvertMatrix(S);
 800e4c2:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800e4c6:	f2a3 730c 	subw	r3, r3, #1804	; 0x70c
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	f103 041c 	add.w	r4, r3, #28
 800e4d0:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800e4d4:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 800e4d8:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 800e4dc:	4611      	mov	r1, r2
 800e4de:	4618      	mov	r0, r3
 800e4e0:	f000 f8bf 	bl	800e662 <_ZNK3Mat6MatrixILt6ELt6EE10TransposedEv>
 800e4e4:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800e4e8:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 800e4ec:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 800e4f0:	4621      	mov	r1, r4
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	f000 f8a2 	bl	800e63c <_ZNK3Mat6MatrixILt6ELt6EEmlILt6EEENS0_ILt6EXT_EEERKS3_>
 800e4f8:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800e4fc:	f2a3 730c 	subw	r3, r3, #1804	; 0x70c
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	3320      	adds	r3, #32
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	f507 62f5 	add.w	r2, r7, #1960	; 0x7a8
 800e50c:	f5a2 7022 	sub.w	r0, r2, #648	; 0x288
 800e510:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e514:	f507 61f5 	add.w	r1, r7, #1960	; 0x7a8
 800e518:	f2a1 710c 	subw	r1, r1, #1804	; 0x70c
 800e51c:	6809      	ldr	r1, [r1, #0]
 800e51e:	4798      	blx	r3
 800e520:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800e524:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 800e528:	f507 62a4 	add.w	r2, r7, #1312	; 0x520
 800e52c:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 800e530:	4618      	mov	r0, r3
 800e532:	f000 f883 	bl	800e63c <_ZNK3Mat6MatrixILt6ELt6EEmlILt6EEENS0_ILt6EXT_EEERKS3_>
	_state += K * (meassurementVec - _h());
 800e536:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800e53a:	f2a3 730c 	subw	r3, r3, #1804	; 0x70c
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	1d1c      	adds	r4, r3, #4
 800e542:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800e546:	f5a3 63e2 	sub.w	r3, r3, #1808	; 0x710
 800e54a:	681d      	ldr	r5, [r3, #0]
 800e54c:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800e550:	f2a3 730c 	subw	r3, r3, #1804	; 0x70c
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	3318      	adds	r3, #24
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	f507 62f5 	add.w	r2, r7, #1960	; 0x7a8
 800e560:	f5a2 70e4 	sub.w	r0, r2, #456	; 0x1c8
 800e564:	f507 62f5 	add.w	r2, r7, #1960	; 0x7a8
 800e568:	f2a2 720c 	subw	r2, r2, #1804	; 0x70c
 800e56c:	6811      	ldr	r1, [r2, #0]
 800e56e:	4798      	blx	r3
 800e570:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800e574:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800e578:	f507 62bc 	add.w	r2, r7, #1504	; 0x5e0
 800e57c:	4629      	mov	r1, r5
 800e57e:	4618      	mov	r0, r3
 800e580:	f000 f8b6 	bl	800e6f0 <_ZNK3Mat6MatrixILt6ELt1EEmiERKS1_>
 800e584:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800e588:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800e58c:	f507 62b9 	add.w	r2, r7, #1480	; 0x5c8
 800e590:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800e594:	4618      	mov	r0, r3
 800e596:	f000 f8c4 	bl	800e722 <_ZNK3Mat6MatrixILt6ELt6EEmlILt1EEENS0_ILt6EXT_EEERKS3_>
 800e59a:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 800e59e:	4619      	mov	r1, r3
 800e5a0:	4620      	mov	r0, r4
 800e5a2:	f000 f8d1 	bl	800e748 <_ZN3Mat6MatrixILt6ELt1EEpLERKS1_>
	_stateCovMatrix = (Eye<stateLen>(1.0f) - K*H) * _stateCovMatrix;
 800e5a6:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800e5aa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800e5ae:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	f7fe ffc0 	bl	800d538 <_ZN3Mat3EyeILt6EEENS_6MatrixIXT_EXT_EEEf>
 800e5b8:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 800e5bc:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 800e5c0:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	f000 f839 	bl	800e63c <_ZNK3Mat6MatrixILt6ELt6EEmlILt6EEENS0_ILt6EXT_EEERKS3_>
 800e5ca:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800e5ce:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800e5d2:	f507 62e3 	add.w	r2, r7, #1816	; 0x718
 800e5d6:	f507 61d1 	add.w	r1, r7, #1672	; 0x688
 800e5da:	4618      	mov	r0, r3
 800e5dc:	f000 f8e9 	bl	800e7b2 <_ZNK3Mat6MatrixILt6ELt6EEmiERKS1_>
 800e5e0:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800e5e4:	f2a3 730c 	subw	r3, r3, #1804	; 0x70c
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	f103 021c 	add.w	r2, r3, #28
 800e5ee:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800e5f2:	f2a3 730c 	subw	r3, r3, #1804	; 0x70c
 800e5f6:	681c      	ldr	r4, [r3, #0]
 800e5f8:	463b      	mov	r3, r7
 800e5fa:	f507 61bf 	add.w	r1, r7, #1528	; 0x5f8
 800e5fe:	4618      	mov	r0, r3
 800e600:	f000 f81c 	bl	800e63c <_ZNK3Mat6MatrixILt6ELt6EEmlILt6EEENS0_ILt6EXT_EEERKS3_>
 800e604:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800e608:	f5a3 62f5 	sub.w	r2, r3, #1960	; 0x7a8
 800e60c:	f104 031c 	add.w	r3, r4, #28
 800e610:	4611      	mov	r1, r2
 800e612:	2290      	movs	r2, #144	; 0x90
 800e614:	4618      	mov	r0, r3
 800e616:	f00b fdb4 	bl	801a182 <memcpy>
	_time = time;
 800e61a:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800e61e:	f2a3 730c 	subw	r3, r3, #1804	; 0x70c
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	f507 62f5 	add.w	r2, r7, #1960	; 0x7a8
 800e628:	f5a2 62e3 	sub.w	r2, r2, #1816	; 0x718
 800e62c:	6812      	ldr	r2, [r2, #0]
 800e62e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}
 800e632:	bf00      	nop
 800e634:	f507 67f5 	add.w	r7, r7, #1960	; 0x7a8
 800e638:	46bd      	mov	sp, r7
 800e63a:	bdb0      	pop	{r4, r5, r7, pc}

0800e63c <_ZNK3Mat6MatrixILt6ELt6EEmlILt6EEENS0_ILt6EXT_EEERKS3_>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b084      	sub	sp, #16
 800e640:	af00      	add	r7, sp, #0
 800e642:	60f8      	str	r0, [r7, #12]
 800e644:	60b9      	str	r1, [r7, #8]
 800e646:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 800e648:	68f8      	ldr	r0, [r7, #12]
 800e64a:	f7fe ffe6 	bl	800d61a <_ZN3Mat6MatrixILt6ELt6EEC1Ev>
	Multiply(other, result);
 800e64e:	68fa      	ldr	r2, [r7, #12]
 800e650:	6879      	ldr	r1, [r7, #4]
 800e652:	68b8      	ldr	r0, [r7, #8]
 800e654:	f000 f8c4 	bl	800e7e0 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERS3_>
	return result;
 800e658:	bf00      	nop
}
 800e65a:	68f8      	ldr	r0, [r7, #12]
 800e65c:	3710      	adds	r7, #16
 800e65e:	46bd      	mov	sp, r7
 800e660:	bd80      	pop	{r7, pc}

0800e662 <_ZNK3Mat6MatrixILt6ELt6EE10TransposedEv>:
		result += (v * v);
	return sqrt(result);
}

template <u_short heigth, u_short width>
Matrix<width, heigth> Matrix<heigth, width>::Transposed() const
 800e662:	b590      	push	{r4, r7, lr}
 800e664:	b085      	sub	sp, #20
 800e666:	af00      	add	r7, sp, #0
 800e668:	6078      	str	r0, [r7, #4]
 800e66a:	6039      	str	r1, [r7, #0]
{
	Matrix<width, heigth> result;
 800e66c:	6878      	ldr	r0, [r7, #4]
 800e66e:	f7fe ffd4 	bl	800d61a <_ZN3Mat6MatrixILt6ELt6EEC1Ev>
	for(u_short r = 0; r < width; ++r)
 800e672:	2300      	movs	r3, #0
 800e674:	81fb      	strh	r3, [r7, #14]
 800e676:	e01c      	b.n	800e6b2 <_ZNK3Mat6MatrixILt6ELt6EE10TransposedEv+0x50>
		for(u_short c = 0; c < heigth; ++c)
 800e678:	2300      	movs	r3, #0
 800e67a:	81bb      	strh	r3, [r7, #12]
 800e67c:	e013      	b.n	800e6a6 <_ZNK3Mat6MatrixILt6ELt6EE10TransposedEv+0x44>
			result(r, c) = operator()(c, r);
 800e67e:	89ba      	ldrh	r2, [r7, #12]
 800e680:	89fb      	ldrh	r3, [r7, #14]
 800e682:	4619      	mov	r1, r3
 800e684:	6878      	ldr	r0, [r7, #4]
 800e686:	f7ff f939 	bl	800d8fc <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 800e68a:	4604      	mov	r4, r0
 800e68c:	89fa      	ldrh	r2, [r7, #14]
 800e68e:	89bb      	ldrh	r3, [r7, #12]
 800e690:	4619      	mov	r1, r3
 800e692:	6838      	ldr	r0, [r7, #0]
 800e694:	f000 f96e 	bl	800e974 <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 800e698:	eef0 7a40 	vmov.f32	s15, s0
 800e69c:	edc4 7a00 	vstr	s15, [r4]
		for(u_short c = 0; c < heigth; ++c)
 800e6a0:	89bb      	ldrh	r3, [r7, #12]
 800e6a2:	3301      	adds	r3, #1
 800e6a4:	81bb      	strh	r3, [r7, #12]
 800e6a6:	89bb      	ldrh	r3, [r7, #12]
 800e6a8:	2b05      	cmp	r3, #5
 800e6aa:	d9e8      	bls.n	800e67e <_ZNK3Mat6MatrixILt6ELt6EE10TransposedEv+0x1c>
	for(u_short r = 0; r < width; ++r)
 800e6ac:	89fb      	ldrh	r3, [r7, #14]
 800e6ae:	3301      	adds	r3, #1
 800e6b0:	81fb      	strh	r3, [r7, #14]
 800e6b2:	89fb      	ldrh	r3, [r7, #14]
 800e6b4:	2b05      	cmp	r3, #5
 800e6b6:	d9df      	bls.n	800e678 <_ZNK3Mat6MatrixILt6ELt6EE10TransposedEv+0x16>
	return result;
 800e6b8:	bf00      	nop
}
 800e6ba:	6878      	ldr	r0, [r7, #4]
 800e6bc:	3714      	adds	r7, #20
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	bd90      	pop	{r4, r7, pc}

0800e6c2 <_ZNK3Mat6MatrixILt6ELt6EEplERKS1_>:
inline Matrix<heigth, width> Matrix<heigth, width>::operator+(const Matrix<heigth, width> &other) const
 800e6c2:	b580      	push	{r7, lr}
 800e6c4:	b084      	sub	sp, #16
 800e6c6:	af00      	add	r7, sp, #0
 800e6c8:	60f8      	str	r0, [r7, #12]
 800e6ca:	60b9      	str	r1, [r7, #8]
 800e6cc:	607a      	str	r2, [r7, #4]
    Matrix<heigth, width> result = *this;
 800e6ce:	68fa      	ldr	r2, [r7, #12]
 800e6d0:	68bb      	ldr	r3, [r7, #8]
 800e6d2:	4610      	mov	r0, r2
 800e6d4:	4619      	mov	r1, r3
 800e6d6:	2390      	movs	r3, #144	; 0x90
 800e6d8:	461a      	mov	r2, r3
 800e6da:	f00b fd52 	bl	801a182 <memcpy>
	result += other;
 800e6de:	6879      	ldr	r1, [r7, #4]
 800e6e0:	68f8      	ldr	r0, [r7, #12]
 800e6e2:	f000 f966 	bl	800e9b2 <_ZN3Mat6MatrixILt6ELt6EEpLERKS1_>
	return result;
 800e6e6:	bf00      	nop
}
 800e6e8:	68f8      	ldr	r0, [r7, #12]
 800e6ea:	3710      	adds	r7, #16
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	bd80      	pop	{r7, pc}

0800e6f0 <_ZNK3Mat6MatrixILt6ELt1EEmiERKS1_>:
inline Matrix<heigth, width> Matrix<heigth, width>::operator-(const Matrix<heigth, width> &other) const
 800e6f0:	b5b0      	push	{r4, r5, r7, lr}
 800e6f2:	b084      	sub	sp, #16
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	60f8      	str	r0, [r7, #12]
 800e6f8:	60b9      	str	r1, [r7, #8]
 800e6fa:	607a      	str	r2, [r7, #4]
    Matrix<heigth, width> result = *this;
 800e6fc:	68fa      	ldr	r2, [r7, #12]
 800e6fe:	68bb      	ldr	r3, [r7, #8]
 800e700:	4614      	mov	r4, r2
 800e702:	461d      	mov	r5, r3
 800e704:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e706:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e708:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e70c:	e884 0003 	stmia.w	r4, {r0, r1}
	result -= other;
 800e710:	6879      	ldr	r1, [r7, #4]
 800e712:	68f8      	ldr	r0, [r7, #12]
 800e714:	f000 f982 	bl	800ea1c <_ZN3Mat6MatrixILt6ELt1EEmIERKS1_>
	return result;
 800e718:	bf00      	nop
}
 800e71a:	68f8      	ldr	r0, [r7, #12]
 800e71c:	3710      	adds	r7, #16
 800e71e:	46bd      	mov	sp, r7
 800e720:	bdb0      	pop	{r4, r5, r7, pc}

0800e722 <_ZNK3Mat6MatrixILt6ELt6EEmlILt1EEENS0_ILt6EXT_EEERKS3_>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 800e722:	b580      	push	{r7, lr}
 800e724:	b084      	sub	sp, #16
 800e726:	af00      	add	r7, sp, #0
 800e728:	60f8      	str	r0, [r7, #12]
 800e72a:	60b9      	str	r1, [r7, #8]
 800e72c:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 800e72e:	68f8      	ldr	r0, [r7, #12]
 800e730:	f7ff f90a 	bl	800d948 <_ZN3Mat6MatrixILt6ELt1EEC1Ev>
	Multiply(other, result);
 800e734:	68fa      	ldr	r2, [r7, #12]
 800e736:	6879      	ldr	r1, [r7, #4]
 800e738:	68b8      	ldr	r0, [r7, #8]
 800e73a:	f000 f9a4 	bl	800ea86 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERS3_>
	return result;
 800e73e:	bf00      	nop
}
 800e740:	68f8      	ldr	r0, [r7, #12]
 800e742:	3710      	adds	r7, #16
 800e744:	46bd      	mov	sp, r7
 800e746:	bd80      	pop	{r7, pc}

0800e748 <_ZN3Mat6MatrixILt6ELt1EEpLERKS1_>:
inline Matrix<heigth, width> &Matrix<heigth, width>::operator+=(const Matrix<heigth, width> &other)
 800e748:	b580      	push	{r7, lr}
 800e74a:	ed2d 8b02 	vpush	{d8}
 800e74e:	b084      	sub	sp, #16
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
 800e754:	6039      	str	r1, [r7, #0]
    for(u_int i = 0; i < _values.size(); ++i) _values[i] += other._values[i];
 800e756:	2300      	movs	r3, #0
 800e758:	60fb      	str	r3, [r7, #12]
 800e75a:	e016      	b.n	800e78a <_ZN3Mat6MatrixILt6ELt1EEpLERKS1_+0x42>
 800e75c:	683b      	ldr	r3, [r7, #0]
 800e75e:	68f9      	ldr	r1, [r7, #12]
 800e760:	4618      	mov	r0, r3
 800e762:	f7ff fa39 	bl	800dbd8 <_ZNKSt5arrayIfLj6EEixEj>
 800e766:	4603      	mov	r3, r0
 800e768:	ed93 8a00 	vldr	s16, [r3]
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	68f9      	ldr	r1, [r7, #12]
 800e770:	4618      	mov	r0, r3
 800e772:	f000 fa47 	bl	800ec04 <_ZNSt5arrayIfLj6EEixEj>
 800e776:	4603      	mov	r3, r0
 800e778:	edd3 7a00 	vldr	s15, [r3]
 800e77c:	ee78 7a27 	vadd.f32	s15, s16, s15
 800e780:	edc3 7a00 	vstr	s15, [r3]
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	3301      	adds	r3, #1
 800e788:	60fb      	str	r3, [r7, #12]
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	4618      	mov	r0, r3
 800e78e:	f000 fa2e 	bl	800ebee <_ZNKSt5arrayIfLj6EE4sizeEv>
 800e792:	4602      	mov	r2, r0
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	4293      	cmp	r3, r2
 800e798:	bf34      	ite	cc
 800e79a:	2301      	movcc	r3, #1
 800e79c:	2300      	movcs	r3, #0
 800e79e:	b2db      	uxtb	r3, r3
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d1db      	bne.n	800e75c <_ZN3Mat6MatrixILt6ELt1EEpLERKS1_+0x14>
	return *this;
 800e7a4:	687b      	ldr	r3, [r7, #4]
}
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	3710      	adds	r7, #16
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	ecbd 8b02 	vpop	{d8}
 800e7b0:	bd80      	pop	{r7, pc}

0800e7b2 <_ZNK3Mat6MatrixILt6ELt6EEmiERKS1_>:
inline Matrix<heigth, width> Matrix<heigth, width>::operator-(const Matrix<heigth, width> &other) const
 800e7b2:	b580      	push	{r7, lr}
 800e7b4:	b084      	sub	sp, #16
 800e7b6:	af00      	add	r7, sp, #0
 800e7b8:	60f8      	str	r0, [r7, #12]
 800e7ba:	60b9      	str	r1, [r7, #8]
 800e7bc:	607a      	str	r2, [r7, #4]
    Matrix<heigth, width> result = *this;
 800e7be:	68fa      	ldr	r2, [r7, #12]
 800e7c0:	68bb      	ldr	r3, [r7, #8]
 800e7c2:	4610      	mov	r0, r2
 800e7c4:	4619      	mov	r1, r3
 800e7c6:	2390      	movs	r3, #144	; 0x90
 800e7c8:	461a      	mov	r2, r3
 800e7ca:	f00b fcda 	bl	801a182 <memcpy>
	result -= other;
 800e7ce:	6879      	ldr	r1, [r7, #4]
 800e7d0:	68f8      	ldr	r0, [r7, #12]
 800e7d2:	f000 fa26 	bl	800ec22 <_ZN3Mat6MatrixILt6ELt6EEmIERKS1_>
	return result;
 800e7d6:	bf00      	nop
}
 800e7d8:	68f8      	ldr	r0, [r7, #12]
 800e7da:	3710      	adds	r7, #16
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	bd80      	pop	{r7, pc}

0800e7e0 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERS3_>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 800e7e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e7e2:	b0d1      	sub	sp, #324	; 0x144
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e7ea:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800e7ee:	6018      	str	r0, [r3, #0]
 800e7f0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e7f4:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800e7f8:	6019      	str	r1, [r3, #0]
 800e7fa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e7fe:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800e802:	601a      	str	r2, [r3, #0]
	for(u_short row = 0; row < heigth; ++row)
 800e804:	2300      	movs	r3, #0
 800e806:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 800e80a:	e030      	b.n	800e86e <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERS3_+0x8e>
		for(u_short col = 0; col < width; ++col)
 800e80c:	2300      	movs	r3, #0
 800e80e:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
 800e812:	e023      	b.n	800e85c <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERS3_+0x7c>
			this_rows[row][col] = this->operator()(row, col);
 800e814:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
 800e818:	f107 0314 	add.w	r3, r7, #20
 800e81c:	4611      	mov	r1, r2
 800e81e:	4618      	mov	r0, r3
 800e820:	f000 fa34 	bl	800ec8c <_ZNSt5arrayIS_IfLj6EELj6EEixEj>
 800e824:	4602      	mov	r2, r0
 800e826:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800e82a:	4619      	mov	r1, r3
 800e82c:	4610      	mov	r0, r2
 800e82e:	f000 f9e9 	bl	800ec04 <_ZNSt5arrayIfLj6EEixEj>
 800e832:	4604      	mov	r4, r0
 800e834:	f8b7 213c 	ldrh.w	r2, [r7, #316]	; 0x13c
 800e838:	f8b7 113e 	ldrh.w	r1, [r7, #318]	; 0x13e
 800e83c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e840:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800e844:	6818      	ldr	r0, [r3, #0]
 800e846:	f000 f895 	bl	800e974 <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 800e84a:	eef0 7a40 	vmov.f32	s15, s0
 800e84e:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 800e852:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800e856:	3301      	adds	r3, #1
 800e858:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
 800e85c:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800e860:	2b05      	cmp	r3, #5
 800e862:	d9d7      	bls.n	800e814 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERS3_+0x34>
	for(u_short row = 0; row < heigth; ++row)
 800e864:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 800e868:	3301      	adds	r3, #1
 800e86a:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 800e86e:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 800e872:	2b05      	cmp	r3, #5
 800e874:	d9ca      	bls.n	800e80c <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERS3_+0x2c>
	for(u_short col = 0; col < other_width; ++col)
 800e876:	2300      	movs	r3, #0
 800e878:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a
 800e87c:	e030      	b.n	800e8e0 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERS3_+0x100>
		for(u_short row = 0; row < width; ++row)
 800e87e:	2300      	movs	r3, #0
 800e880:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
 800e884:	e023      	b.n	800e8ce <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERS3_+0xee>
			other_columns[col][row] = other(row, col);
 800e886:	f8b7 213a 	ldrh.w	r2, [r7, #314]	; 0x13a
 800e88a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e88e:	4611      	mov	r1, r2
 800e890:	4618      	mov	r0, r3
 800e892:	f000 f9fb 	bl	800ec8c <_ZNSt5arrayIS_IfLj6EELj6EEixEj>
 800e896:	4602      	mov	r2, r0
 800e898:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 800e89c:	4619      	mov	r1, r3
 800e89e:	4610      	mov	r0, r2
 800e8a0:	f000 f9b0 	bl	800ec04 <_ZNSt5arrayIfLj6EEixEj>
 800e8a4:	4604      	mov	r4, r0
 800e8a6:	f8b7 213a 	ldrh.w	r2, [r7, #314]	; 0x13a
 800e8aa:	f8b7 1138 	ldrh.w	r1, [r7, #312]	; 0x138
 800e8ae:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e8b2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800e8b6:	6818      	ldr	r0, [r3, #0]
 800e8b8:	f000 f85c 	bl	800e974 <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 800e8bc:	eef0 7a40 	vmov.f32	s15, s0
 800e8c0:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 800e8c4:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 800e8c8:	3301      	adds	r3, #1
 800e8ca:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
 800e8ce:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 800e8d2:	2b05      	cmp	r3, #5
 800e8d4:	d9d7      	bls.n	800e886 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERS3_+0xa6>
	for(u_short col = 0; col < other_width; ++col)
 800e8d6:	f8b7 313a 	ldrh.w	r3, [r7, #314]	; 0x13a
 800e8da:	3301      	adds	r3, #1
 800e8dc:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a
 800e8e0:	f8b7 313a 	ldrh.w	r3, [r7, #314]	; 0x13a
 800e8e4:	2b05      	cmp	r3, #5
 800e8e6:	d9ca      	bls.n	800e87e <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERS3_+0x9e>
	for(u_short row = 0; row < heigth; ++row)
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 800e8ee:	e037      	b.n	800e960 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERS3_+0x180>
		for(u_short col = 0; col < other_width; ++col)
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
 800e8f6:	e02a      	b.n	800e94e <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERS3_+0x16e>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 800e8f8:	f8b7 2136 	ldrh.w	r2, [r7, #310]	; 0x136
 800e8fc:	f107 0314 	add.w	r3, r7, #20
 800e900:	4611      	mov	r1, r2
 800e902:	4618      	mov	r0, r3
 800e904:	f000 f9c2 	bl	800ec8c <_ZNSt5arrayIS_IfLj6EELj6EEixEj>
 800e908:	4605      	mov	r5, r0
 800e90a:	f8b7 2134 	ldrh.w	r2, [r7, #308]	; 0x134
 800e90e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e912:	4611      	mov	r1, r2
 800e914:	4618      	mov	r0, r3
 800e916:	f000 f9b9 	bl	800ec8c <_ZNSt5arrayIS_IfLj6EELj6EEixEj>
 800e91a:	4606      	mov	r6, r0
 800e91c:	f8b7 2134 	ldrh.w	r2, [r7, #308]	; 0x134
 800e920:	f8b7 1136 	ldrh.w	r1, [r7, #310]	; 0x136
 800e924:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e928:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800e92c:	6818      	ldr	r0, [r3, #0]
 800e92e:	f7fe ffe5 	bl	800d8fc <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 800e932:	4604      	mov	r4, r0
 800e934:	4631      	mov	r1, r6
 800e936:	4628      	mov	r0, r5
 800e938:	f000 f9b7 	bl	800ecaa <_ZN3Mat13Multiply_rowsILj6EEEfRKSt5arrayIfXT_EES4_>
 800e93c:	eef0 7a40 	vmov.f32	s15, s0
 800e940:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 800e944:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800e948:	3301      	adds	r3, #1
 800e94a:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
 800e94e:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800e952:	2b05      	cmp	r3, #5
 800e954:	d9d0      	bls.n	800e8f8 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERS3_+0x118>
	for(u_short row = 0; row < heigth; ++row)
 800e956:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 800e95a:	3301      	adds	r3, #1
 800e95c:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 800e960:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 800e964:	2b05      	cmp	r3, #5
 800e966:	d9c3      	bls.n	800e8f0 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERS3_+0x110>
}
 800e968:	bf00      	nop
 800e96a:	bf00      	nop
 800e96c:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800e970:	46bd      	mov	sp, r7
 800e972:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e974 <_ZNK3Mat6MatrixILt6ELt6EEclEtt>:
float Matrix<heigth, width>::operator()(u_short row, u_short col) const
 800e974:	b580      	push	{r7, lr}
 800e976:	b084      	sub	sp, #16
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
 800e97c:	460b      	mov	r3, r1
 800e97e:	807b      	strh	r3, [r7, #2]
 800e980:	4613      	mov	r3, r2
 800e982:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 800e984:	887a      	ldrh	r2, [r7, #2]
 800e986:	4613      	mov	r3, r2
 800e988:	005b      	lsls	r3, r3, #1
 800e98a:	4413      	add	r3, r2
 800e98c:	005b      	lsls	r3, r3, #1
 800e98e:	461a      	mov	r2, r3
 800e990:	883b      	ldrh	r3, [r7, #0]
 800e992:	4413      	add	r3, r2
 800e994:	60fb      	str	r3, [r7, #12]
	return _values[index];
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	68f9      	ldr	r1, [r7, #12]
 800e99a:	4618      	mov	r0, r3
 800e99c:	f000 f9b8 	bl	800ed10 <_ZNKSt5arrayIfLj36EEixEj>
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	ee07 3a90 	vmov	s15, r3
}
 800e9a8:	eeb0 0a67 	vmov.f32	s0, s15
 800e9ac:	3710      	adds	r7, #16
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	bd80      	pop	{r7, pc}

0800e9b2 <_ZN3Mat6MatrixILt6ELt6EEpLERKS1_>:
inline Matrix<heigth, width> &Matrix<heigth, width>::operator+=(const Matrix<heigth, width> &other)
 800e9b2:	b580      	push	{r7, lr}
 800e9b4:	ed2d 8b02 	vpush	{d8}
 800e9b8:	b084      	sub	sp, #16
 800e9ba:	af00      	add	r7, sp, #0
 800e9bc:	6078      	str	r0, [r7, #4]
 800e9be:	6039      	str	r1, [r7, #0]
    for(u_int i = 0; i < _values.size(); ++i) _values[i] += other._values[i];
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	60fb      	str	r3, [r7, #12]
 800e9c4:	e016      	b.n	800e9f4 <_ZN3Mat6MatrixILt6ELt6EEpLERKS1_+0x42>
 800e9c6:	683b      	ldr	r3, [r7, #0]
 800e9c8:	68f9      	ldr	r1, [r7, #12]
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	f000 f9a0 	bl	800ed10 <_ZNKSt5arrayIfLj36EEixEj>
 800e9d0:	4603      	mov	r3, r0
 800e9d2:	ed93 8a00 	vldr	s16, [r3]
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	68f9      	ldr	r1, [r7, #12]
 800e9da:	4618      	mov	r0, r3
 800e9dc:	f7ff f991 	bl	800dd02 <_ZNSt5arrayIfLj36EEixEj>
 800e9e0:	4603      	mov	r3, r0
 800e9e2:	edd3 7a00 	vldr	s15, [r3]
 800e9e6:	ee78 7a27 	vadd.f32	s15, s16, s15
 800e9ea:	edc3 7a00 	vstr	s15, [r3]
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	3301      	adds	r3, #1
 800e9f2:	60fb      	str	r3, [r7, #12]
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	f000 f999 	bl	800ed2e <_ZNKSt5arrayIfLj36EE4sizeEv>
 800e9fc:	4602      	mov	r2, r0
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	4293      	cmp	r3, r2
 800ea02:	bf34      	ite	cc
 800ea04:	2301      	movcc	r3, #1
 800ea06:	2300      	movcs	r3, #0
 800ea08:	b2db      	uxtb	r3, r3
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d1db      	bne.n	800e9c6 <_ZN3Mat6MatrixILt6ELt6EEpLERKS1_+0x14>
	return *this;
 800ea0e:	687b      	ldr	r3, [r7, #4]
}
 800ea10:	4618      	mov	r0, r3
 800ea12:	3710      	adds	r7, #16
 800ea14:	46bd      	mov	sp, r7
 800ea16:	ecbd 8b02 	vpop	{d8}
 800ea1a:	bd80      	pop	{r7, pc}

0800ea1c <_ZN3Mat6MatrixILt6ELt1EEmIERKS1_>:
inline Matrix<heigth, width> &Matrix<heigth, width>::operator-=(const Matrix<heigth, width> &other)
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	ed2d 8b02 	vpush	{d8}
 800ea22:	b084      	sub	sp, #16
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
 800ea28:	6039      	str	r1, [r7, #0]
    for(u_int i = 0; i < _values.size(); ++i) _values[i] -= other._values[i];
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	60fb      	str	r3, [r7, #12]
 800ea2e:	e016      	b.n	800ea5e <_ZN3Mat6MatrixILt6ELt1EEmIERKS1_+0x42>
 800ea30:	683b      	ldr	r3, [r7, #0]
 800ea32:	68f9      	ldr	r1, [r7, #12]
 800ea34:	4618      	mov	r0, r3
 800ea36:	f7ff f8cf 	bl	800dbd8 <_ZNKSt5arrayIfLj6EEixEj>
 800ea3a:	4603      	mov	r3, r0
 800ea3c:	ed93 8a00 	vldr	s16, [r3]
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	68f9      	ldr	r1, [r7, #12]
 800ea44:	4618      	mov	r0, r3
 800ea46:	f000 f8dd 	bl	800ec04 <_ZNSt5arrayIfLj6EEixEj>
 800ea4a:	4603      	mov	r3, r0
 800ea4c:	edd3 7a00 	vldr	s15, [r3]
 800ea50:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800ea54:	edc3 7a00 	vstr	s15, [r3]
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	3301      	adds	r3, #1
 800ea5c:	60fb      	str	r3, [r7, #12]
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	4618      	mov	r0, r3
 800ea62:	f000 f8c4 	bl	800ebee <_ZNKSt5arrayIfLj6EE4sizeEv>
 800ea66:	4602      	mov	r2, r0
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	4293      	cmp	r3, r2
 800ea6c:	bf34      	ite	cc
 800ea6e:	2301      	movcc	r3, #1
 800ea70:	2300      	movcs	r3, #0
 800ea72:	b2db      	uxtb	r3, r3
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d1db      	bne.n	800ea30 <_ZN3Mat6MatrixILt6ELt1EEmIERKS1_+0x14>
	return *this;
 800ea78:	687b      	ldr	r3, [r7, #4]
}
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	3710      	adds	r7, #16
 800ea7e:	46bd      	mov	sp, r7
 800ea80:	ecbd 8b02 	vpop	{d8}
 800ea84:	bd80      	pop	{r7, pc}

0800ea86 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERS3_>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 800ea86:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea88:	b0b3      	sub	sp, #204	; 0xcc
 800ea8a:	af00      	add	r7, sp, #0
 800ea8c:	60f8      	str	r0, [r7, #12]
 800ea8e:	60b9      	str	r1, [r7, #8]
 800ea90:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 800ea92:	2300      	movs	r3, #0
 800ea94:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 800ea98:	e02d      	b.n	800eaf6 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERS3_+0x70>
		for(u_short col = 0; col < width; ++col)
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 800eaa0:	e020      	b.n	800eae4 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERS3_+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 800eaa2:	f8b7 20c6 	ldrh.w	r2, [r7, #198]	; 0xc6
 800eaa6:	f107 0314 	add.w	r3, r7, #20
 800eaaa:	4611      	mov	r1, r2
 800eaac:	4618      	mov	r0, r3
 800eaae:	f000 f8ed 	bl	800ec8c <_ZNSt5arrayIS_IfLj6EELj6EEixEj>
 800eab2:	4602      	mov	r2, r0
 800eab4:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 800eab8:	4619      	mov	r1, r3
 800eaba:	4610      	mov	r0, r2
 800eabc:	f000 f8a2 	bl	800ec04 <_ZNSt5arrayIfLj6EEixEj>
 800eac0:	4604      	mov	r4, r0
 800eac2:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 800eac6:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 800eaca:	4619      	mov	r1, r3
 800eacc:	68f8      	ldr	r0, [r7, #12]
 800eace:	f7ff ff51 	bl	800e974 <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 800ead2:	eef0 7a40 	vmov.f32	s15, s0
 800ead6:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 800eada:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 800eade:	3301      	adds	r3, #1
 800eae0:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 800eae4:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 800eae8:	2b05      	cmp	r3, #5
 800eaea:	d9da      	bls.n	800eaa2 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERS3_+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 800eaec:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 800eaf0:	3301      	adds	r3, #1
 800eaf2:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 800eaf6:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 800eafa:	2b05      	cmp	r3, #5
 800eafc:	d9cd      	bls.n	800ea9a <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERS3_+0x14>
	for(u_short col = 0; col < other_width; ++col)
 800eafe:	2300      	movs	r3, #0
 800eb00:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
 800eb04:	e02d      	b.n	800eb62 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERS3_+0xdc>
		for(u_short row = 0; row < width; ++row)
 800eb06:	2300      	movs	r3, #0
 800eb08:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
 800eb0c:	e020      	b.n	800eb50 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERS3_+0xca>
			other_columns[col][row] = other(row, col);
 800eb0e:	f8b7 20c2 	ldrh.w	r2, [r7, #194]	; 0xc2
 800eb12:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800eb16:	4611      	mov	r1, r2
 800eb18:	4618      	mov	r0, r3
 800eb1a:	f000 f913 	bl	800ed44 <_ZNSt5arrayIS_IfLj6EELj1EEixEj>
 800eb1e:	4602      	mov	r2, r0
 800eb20:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 800eb24:	4619      	mov	r1, r3
 800eb26:	4610      	mov	r0, r2
 800eb28:	f000 f86c 	bl	800ec04 <_ZNSt5arrayIfLj6EEixEj>
 800eb2c:	4604      	mov	r4, r0
 800eb2e:	f8b7 20c2 	ldrh.w	r2, [r7, #194]	; 0xc2
 800eb32:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 800eb36:	4619      	mov	r1, r3
 800eb38:	68b8      	ldr	r0, [r7, #8]
 800eb3a:	f000 f912 	bl	800ed62 <_ZNK3Mat6MatrixILt6ELt1EEclEtt>
 800eb3e:	eef0 7a40 	vmov.f32	s15, s0
 800eb42:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 800eb46:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 800eb4a:	3301      	adds	r3, #1
 800eb4c:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
 800eb50:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 800eb54:	2b05      	cmp	r3, #5
 800eb56:	d9da      	bls.n	800eb0e <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERS3_+0x88>
	for(u_short col = 0; col < other_width; ++col)
 800eb58:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 800eb5c:	3301      	adds	r3, #1
 800eb5e:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
 800eb62:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d0cd      	beq.n	800eb06 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERS3_+0x80>
	for(u_short row = 0; row < heigth; ++row)
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 800eb70:	e034      	b.n	800ebdc <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERS3_+0x156>
		for(u_short col = 0; col < other_width; ++col)
 800eb72:	2300      	movs	r3, #0
 800eb74:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 800eb78:	e027      	b.n	800ebca <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERS3_+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 800eb7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800eb7e:	f107 0314 	add.w	r3, r7, #20
 800eb82:	4611      	mov	r1, r2
 800eb84:	4618      	mov	r0, r3
 800eb86:	f000 f881 	bl	800ec8c <_ZNSt5arrayIS_IfLj6EELj6EEixEj>
 800eb8a:	4605      	mov	r5, r0
 800eb8c:	f8b7 20bc 	ldrh.w	r2, [r7, #188]	; 0xbc
 800eb90:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800eb94:	4611      	mov	r1, r2
 800eb96:	4618      	mov	r0, r3
 800eb98:	f000 f8d4 	bl	800ed44 <_ZNSt5arrayIS_IfLj6EELj1EEixEj>
 800eb9c:	4606      	mov	r6, r0
 800eb9e:	f8b7 20bc 	ldrh.w	r2, [r7, #188]	; 0xbc
 800eba2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800eba6:	4619      	mov	r1, r3
 800eba8:	6878      	ldr	r0, [r7, #4]
 800ebaa:	f000 f8f4 	bl	800ed96 <_ZN3Mat6MatrixILt6ELt1EEclEtt>
 800ebae:	4604      	mov	r4, r0
 800ebb0:	4631      	mov	r1, r6
 800ebb2:	4628      	mov	r0, r5
 800ebb4:	f000 f879 	bl	800ecaa <_ZN3Mat13Multiply_rowsILj6EEEfRKSt5arrayIfXT_EES4_>
 800ebb8:	eef0 7a40 	vmov.f32	s15, s0
 800ebbc:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 800ebc0:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800ebc4:	3301      	adds	r3, #1
 800ebc6:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 800ebca:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d0d3      	beq.n	800eb7a <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERS3_+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 800ebd2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ebd6:	3301      	adds	r3, #1
 800ebd8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 800ebdc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ebe0:	2b05      	cmp	r3, #5
 800ebe2:	d9c6      	bls.n	800eb72 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERS3_+0xec>
}
 800ebe4:	bf00      	nop
 800ebe6:	bf00      	nop
 800ebe8:	37cc      	adds	r7, #204	; 0xcc
 800ebea:	46bd      	mov	sp, r7
 800ebec:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ebee <_ZNKSt5arrayIfLj6EE4sizeEv>:
      size() const noexcept { return _Nm; }
 800ebee:	b480      	push	{r7}
 800ebf0:	b083      	sub	sp, #12
 800ebf2:	af00      	add	r7, sp, #0
 800ebf4:	6078      	str	r0, [r7, #4]
 800ebf6:	2306      	movs	r3, #6
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	370c      	adds	r7, #12
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec02:	4770      	bx	lr

0800ec04 <_ZNSt5arrayIfLj6EEixEj>:
      operator[](size_type __n) noexcept
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b082      	sub	sp, #8
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]
 800ec0c:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	6839      	ldr	r1, [r7, #0]
 800ec12:	4618      	mov	r0, r3
 800ec14:	f7ff f96c 	bl	800def0 <_ZNSt14__array_traitsIfLj6EE6_S_refERA6_Kfj>
 800ec18:	4603      	mov	r3, r0
      }
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	3708      	adds	r7, #8
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	bd80      	pop	{r7, pc}

0800ec22 <_ZN3Mat6MatrixILt6ELt6EEmIERKS1_>:
inline Matrix<heigth, width> &Matrix<heigth, width>::operator-=(const Matrix<heigth, width> &other)
 800ec22:	b580      	push	{r7, lr}
 800ec24:	ed2d 8b02 	vpush	{d8}
 800ec28:	b084      	sub	sp, #16
 800ec2a:	af00      	add	r7, sp, #0
 800ec2c:	6078      	str	r0, [r7, #4]
 800ec2e:	6039      	str	r1, [r7, #0]
    for(u_int i = 0; i < _values.size(); ++i) _values[i] -= other._values[i];
 800ec30:	2300      	movs	r3, #0
 800ec32:	60fb      	str	r3, [r7, #12]
 800ec34:	e016      	b.n	800ec64 <_ZN3Mat6MatrixILt6ELt6EEmIERKS1_+0x42>
 800ec36:	683b      	ldr	r3, [r7, #0]
 800ec38:	68f9      	ldr	r1, [r7, #12]
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	f000 f868 	bl	800ed10 <_ZNKSt5arrayIfLj36EEixEj>
 800ec40:	4603      	mov	r3, r0
 800ec42:	ed93 8a00 	vldr	s16, [r3]
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	68f9      	ldr	r1, [r7, #12]
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	f7ff f859 	bl	800dd02 <_ZNSt5arrayIfLj36EEixEj>
 800ec50:	4603      	mov	r3, r0
 800ec52:	edd3 7a00 	vldr	s15, [r3]
 800ec56:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800ec5a:	edc3 7a00 	vstr	s15, [r3]
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	3301      	adds	r3, #1
 800ec62:	60fb      	str	r3, [r7, #12]
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	4618      	mov	r0, r3
 800ec68:	f000 f861 	bl	800ed2e <_ZNKSt5arrayIfLj36EE4sizeEv>
 800ec6c:	4602      	mov	r2, r0
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	4293      	cmp	r3, r2
 800ec72:	bf34      	ite	cc
 800ec74:	2301      	movcc	r3, #1
 800ec76:	2300      	movcs	r3, #0
 800ec78:	b2db      	uxtb	r3, r3
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d1db      	bne.n	800ec36 <_ZN3Mat6MatrixILt6ELt6EEmIERKS1_+0x14>
	return *this;
 800ec7e:	687b      	ldr	r3, [r7, #4]
}
 800ec80:	4618      	mov	r0, r3
 800ec82:	3710      	adds	r7, #16
 800ec84:	46bd      	mov	sp, r7
 800ec86:	ecbd 8b02 	vpop	{d8}
 800ec8a:	bd80      	pop	{r7, pc}

0800ec8c <_ZNSt5arrayIS_IfLj6EELj6EEixEj>:
      operator[](size_type __n) noexcept
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b082      	sub	sp, #8
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
 800ec94:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	6839      	ldr	r1, [r7, #0]
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	f000 f891 	bl	800edc2 <_ZNSt14__array_traitsISt5arrayIfLj6EELj6EE6_S_refERA6_KS1_j>
 800eca0:	4603      	mov	r3, r0
      }
 800eca2:	4618      	mov	r0, r3
 800eca4:	3708      	adds	r7, #8
 800eca6:	46bd      	mov	sp, r7
 800eca8:	bd80      	pop	{r7, pc}

0800ecaa <_ZN3Mat13Multiply_rowsILj6EEEfRKSt5arrayIfXT_EES4_>:
float Multiply_rows(const std::array<float, length>& A, const std::array<float, length>& B)
 800ecaa:	b580      	push	{r7, lr}
 800ecac:	ed2d 8b02 	vpush	{d8}
 800ecb0:	b084      	sub	sp, #16
 800ecb2:	af00      	add	r7, sp, #0
 800ecb4:	6078      	str	r0, [r7, #4]
 800ecb6:	6039      	str	r1, [r7, #0]
    float result = 0.0f;
 800ecb8:	f04f 0300 	mov.w	r3, #0
 800ecbc:	60fb      	str	r3, [r7, #12]
	for(u_int i = 0; i < length; ++i) result += A[i]*B[i];
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	60bb      	str	r3, [r7, #8]
 800ecc2:	e018      	b.n	800ecf6 <_ZN3Mat13Multiply_rowsILj6EEEfRKSt5arrayIfXT_EES4_+0x4c>
 800ecc4:	68b9      	ldr	r1, [r7, #8]
 800ecc6:	6878      	ldr	r0, [r7, #4]
 800ecc8:	f7fe ff86 	bl	800dbd8 <_ZNKSt5arrayIfLj6EEixEj>
 800eccc:	4603      	mov	r3, r0
 800ecce:	ed93 8a00 	vldr	s16, [r3]
 800ecd2:	68b9      	ldr	r1, [r7, #8]
 800ecd4:	6838      	ldr	r0, [r7, #0]
 800ecd6:	f7fe ff7f 	bl	800dbd8 <_ZNKSt5arrayIfLj6EEixEj>
 800ecda:	4603      	mov	r3, r0
 800ecdc:	edd3 7a00 	vldr	s15, [r3]
 800ece0:	ee68 7a27 	vmul.f32	s15, s16, s15
 800ece4:	ed97 7a03 	vldr	s14, [r7, #12]
 800ece8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ecec:	edc7 7a03 	vstr	s15, [r7, #12]
 800ecf0:	68bb      	ldr	r3, [r7, #8]
 800ecf2:	3301      	adds	r3, #1
 800ecf4:	60bb      	str	r3, [r7, #8]
 800ecf6:	68bb      	ldr	r3, [r7, #8]
 800ecf8:	2b05      	cmp	r3, #5
 800ecfa:	d9e3      	bls.n	800ecc4 <_ZN3Mat13Multiply_rowsILj6EEEfRKSt5arrayIfXT_EES4_+0x1a>
	return result;
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	ee07 3a90 	vmov	s15, r3
}
 800ed02:	eeb0 0a67 	vmov.f32	s0, s15
 800ed06:	3710      	adds	r7, #16
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	ecbd 8b02 	vpop	{d8}
 800ed0e:	bd80      	pop	{r7, pc}

0800ed10 <_ZNKSt5arrayIfLj36EEixEj>:
      operator[](size_type __n) const noexcept
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b082      	sub	sp, #8
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	6078      	str	r0, [r7, #4]
 800ed18:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	6839      	ldr	r1, [r7, #0]
 800ed1e:	4618      	mov	r0, r3
 800ed20:	f7ff f929 	bl	800df76 <_ZNSt14__array_traitsIfLj36EE6_S_refERA36_Kfj>
 800ed24:	4603      	mov	r3, r0
      }
 800ed26:	4618      	mov	r0, r3
 800ed28:	3708      	adds	r7, #8
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	bd80      	pop	{r7, pc}

0800ed2e <_ZNKSt5arrayIfLj36EE4sizeEv>:
      size() const noexcept { return _Nm; }
 800ed2e:	b480      	push	{r7}
 800ed30:	b083      	sub	sp, #12
 800ed32:	af00      	add	r7, sp, #0
 800ed34:	6078      	str	r0, [r7, #4]
 800ed36:	2324      	movs	r3, #36	; 0x24
 800ed38:	4618      	mov	r0, r3
 800ed3a:	370c      	adds	r7, #12
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed42:	4770      	bx	lr

0800ed44 <_ZNSt5arrayIS_IfLj6EELj1EEixEj>:
      operator[](size_type __n) noexcept
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b082      	sub	sp, #8
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	6078      	str	r0, [r7, #4]
 800ed4c:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	6839      	ldr	r1, [r7, #0]
 800ed52:	4618      	mov	r0, r3
 800ed54:	f000 f847 	bl	800ede6 <_ZNSt14__array_traitsISt5arrayIfLj6EELj1EE6_S_refERA1_KS1_j>
 800ed58:	4603      	mov	r3, r0
      }
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	3708      	adds	r7, #8
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	bd80      	pop	{r7, pc}

0800ed62 <_ZNK3Mat6MatrixILt6ELt1EEclEtt>:
float Matrix<heigth, width>::operator()(u_short row, u_short col) const
 800ed62:	b580      	push	{r7, lr}
 800ed64:	b084      	sub	sp, #16
 800ed66:	af00      	add	r7, sp, #0
 800ed68:	6078      	str	r0, [r7, #4]
 800ed6a:	460b      	mov	r3, r1
 800ed6c:	807b      	strh	r3, [r7, #2]
 800ed6e:	4613      	mov	r3, r2
 800ed70:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 800ed72:	887a      	ldrh	r2, [r7, #2]
 800ed74:	883b      	ldrh	r3, [r7, #0]
 800ed76:	4413      	add	r3, r2
 800ed78:	60fb      	str	r3, [r7, #12]
	return _values[index];
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	68f9      	ldr	r1, [r7, #12]
 800ed7e:	4618      	mov	r0, r3
 800ed80:	f7fe ff2a 	bl	800dbd8 <_ZNKSt5arrayIfLj6EEixEj>
 800ed84:	4603      	mov	r3, r0
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	ee07 3a90 	vmov	s15, r3
}
 800ed8c:	eeb0 0a67 	vmov.f32	s0, s15
 800ed90:	3710      	adds	r7, #16
 800ed92:	46bd      	mov	sp, r7
 800ed94:	bd80      	pop	{r7, pc}

0800ed96 <_ZN3Mat6MatrixILt6ELt1EEclEtt>:
float& Matrix<heigth, width>::operator()(u_short row, u_short col)
 800ed96:	b580      	push	{r7, lr}
 800ed98:	b084      	sub	sp, #16
 800ed9a:	af00      	add	r7, sp, #0
 800ed9c:	6078      	str	r0, [r7, #4]
 800ed9e:	460b      	mov	r3, r1
 800eda0:	807b      	strh	r3, [r7, #2]
 800eda2:	4613      	mov	r3, r2
 800eda4:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 800eda6:	887a      	ldrh	r2, [r7, #2]
 800eda8:	883b      	ldrh	r3, [r7, #0]
 800edaa:	4413      	add	r3, r2
 800edac:	60fb      	str	r3, [r7, #12]
	return _values[index];
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	68f9      	ldr	r1, [r7, #12]
 800edb2:	4618      	mov	r0, r3
 800edb4:	f7ff ff26 	bl	800ec04 <_ZNSt5arrayIfLj6EEixEj>
 800edb8:	4603      	mov	r3, r0
}
 800edba:	4618      	mov	r0, r3
 800edbc:	3710      	adds	r7, #16
 800edbe:	46bd      	mov	sp, r7
 800edc0:	bd80      	pop	{r7, pc}

0800edc2 <_ZNSt14__array_traitsISt5arrayIfLj6EELj6EE6_S_refERA6_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800edc2:	b480      	push	{r7}
 800edc4:	b083      	sub	sp, #12
 800edc6:	af00      	add	r7, sp, #0
 800edc8:	6078      	str	r0, [r7, #4]
 800edca:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800edcc:	683a      	ldr	r2, [r7, #0]
 800edce:	4613      	mov	r3, r2
 800edd0:	005b      	lsls	r3, r3, #1
 800edd2:	4413      	add	r3, r2
 800edd4:	00db      	lsls	r3, r3, #3
 800edd6:	687a      	ldr	r2, [r7, #4]
 800edd8:	4413      	add	r3, r2
 800edda:	4618      	mov	r0, r3
 800eddc:	370c      	adds	r7, #12
 800edde:	46bd      	mov	sp, r7
 800ede0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede4:	4770      	bx	lr

0800ede6 <_ZNSt14__array_traitsISt5arrayIfLj6EELj1EE6_S_refERA1_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800ede6:	b480      	push	{r7}
 800ede8:	b083      	sub	sp, #12
 800edea:	af00      	add	r7, sp, #0
 800edec:	6078      	str	r0, [r7, #4]
 800edee:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800edf0:	683a      	ldr	r2, [r7, #0]
 800edf2:	4613      	mov	r3, r2
 800edf4:	005b      	lsls	r3, r3, #1
 800edf6:	4413      	add	r3, r2
 800edf8:	00db      	lsls	r3, r3, #3
 800edfa:	687a      	ldr	r2, [r7, #4]
 800edfc:	4413      	add	r3, r2
 800edfe:	4618      	mov	r0, r3
 800ee00:	370c      	adds	r7, #12
 800ee02:	46bd      	mov	sp, r7
 800ee04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee08:	4770      	bx	lr

0800ee0a <_GLOBAL__sub_I_Fusion>:
 800ee0a:	b580      	push	{r7, lr}
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ee12:	2001      	movs	r0, #1
 800ee14:	f7ff f948 	bl	800e0a8 <_Z41__static_initialization_and_destruction_0ii>
 800ee18:	bd80      	pop	{r7, pc}
	...

0800ee1c <_Z12CalibrateMagRKN3Mat6MatrixILt3ELt1EEE>:
const Matrix<3,3> GyroA({8.133f * DEG_2_RAD, 0.0, 0.0,
						0.0, 8.238f * DEG_2_RAD, 0.0,
						0.0, 0.0, 8.193f * DEG_2_RAD});
const Matrix<3, 1> GyroB({-0.045665, 0.047779, -0.005830});
Matrix<3, 1> CalibrateMag(const Matrix<3, 1>& MagVec)
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b08c      	sub	sp, #48	; 0x30
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6178      	str	r0, [r7, #20]
	return (MagA * (MagVec - MagB));
 800ee24:	4919      	ldr	r1, [pc, #100]	; (800ee8c <_Z12CalibrateMagRKN3Mat6MatrixILt3ELt1EEE+0x70>)
 800ee26:	6978      	ldr	r0, [r7, #20]
 800ee28:	f000 f8c1 	bl	800efae <_ZNK3Mat6MatrixILt3ELt1EEmiERKS1_>
 800ee2c:	eef0 6a40 	vmov.f32	s13, s0
 800ee30:	eeb0 7a60 	vmov.f32	s14, s1
 800ee34:	eef0 7a41 	vmov.f32	s15, s2
 800ee38:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 800ee3c:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 800ee40:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 800ee44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ee48:	4619      	mov	r1, r3
 800ee4a:	4811      	ldr	r0, [pc, #68]	; (800ee90 <_Z12CalibrateMagRKN3Mat6MatrixILt3ELt1EEE+0x74>)
 800ee4c:	f7fe fc73 	bl	800d736 <_ZNK3Mat6MatrixILt3ELt3EEmlILt1EEENS0_ILt3EXT_EEERKS3_>
 800ee50:	eef0 6a40 	vmov.f32	s13, s0
 800ee54:	eeb0 7a60 	vmov.f32	s14, s1
 800ee58:	eef0 7a41 	vmov.f32	s15, s2
 800ee5c:	edc7 6a06 	vstr	s13, [r7, #24]
 800ee60:	ed87 7a07 	vstr	s14, [r7, #28]
 800ee64:	edc7 7a08 	vstr	s15, [r7, #32]
 800ee68:	69b9      	ldr	r1, [r7, #24]
 800ee6a:	69fa      	ldr	r2, [r7, #28]
 800ee6c:	6a3b      	ldr	r3, [r7, #32]
 800ee6e:	ee06 1a90 	vmov	s13, r1
 800ee72:	ee07 2a10 	vmov	s14, r2
 800ee76:	ee07 3a90 	vmov	s15, r3
}
 800ee7a:	eeb0 0a66 	vmov.f32	s0, s13
 800ee7e:	eef0 0a47 	vmov.f32	s1, s14
 800ee82:	eeb0 1a67 	vmov.f32	s2, s15
 800ee86:	3730      	adds	r7, #48	; 0x30
 800ee88:	46bd      	mov	sp, r7
 800ee8a:	bd80      	pop	{r7, pc}
 800ee8c:	240090c8 	.word	0x240090c8
 800ee90:	240090a4 	.word	0x240090a4

0800ee94 <_Z12CalibrateAccRKN3Mat6MatrixILt3ELt1EEE>:
Matrix<3, 1> CalibrateAcc(const Matrix<3, 1>& AccVec)
{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b08c      	sub	sp, #48	; 0x30
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6178      	str	r0, [r7, #20]
	return (AccA * (AccVec - AccB));
 800ee9c:	4919      	ldr	r1, [pc, #100]	; (800ef04 <_Z12CalibrateAccRKN3Mat6MatrixILt3ELt1EEE+0x70>)
 800ee9e:	6978      	ldr	r0, [r7, #20]
 800eea0:	f000 f885 	bl	800efae <_ZNK3Mat6MatrixILt3ELt1EEmiERKS1_>
 800eea4:	eef0 6a40 	vmov.f32	s13, s0
 800eea8:	eeb0 7a60 	vmov.f32	s14, s1
 800eeac:	eef0 7a41 	vmov.f32	s15, s2
 800eeb0:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 800eeb4:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 800eeb8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 800eebc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eec0:	4619      	mov	r1, r3
 800eec2:	4811      	ldr	r0, [pc, #68]	; (800ef08 <_Z12CalibrateAccRKN3Mat6MatrixILt3ELt1EEE+0x74>)
 800eec4:	f7fe fc37 	bl	800d736 <_ZNK3Mat6MatrixILt3ELt3EEmlILt1EEENS0_ILt3EXT_EEERKS3_>
 800eec8:	eef0 6a40 	vmov.f32	s13, s0
 800eecc:	eeb0 7a60 	vmov.f32	s14, s1
 800eed0:	eef0 7a41 	vmov.f32	s15, s2
 800eed4:	edc7 6a06 	vstr	s13, [r7, #24]
 800eed8:	ed87 7a07 	vstr	s14, [r7, #28]
 800eedc:	edc7 7a08 	vstr	s15, [r7, #32]
 800eee0:	69b9      	ldr	r1, [r7, #24]
 800eee2:	69fa      	ldr	r2, [r7, #28]
 800eee4:	6a3b      	ldr	r3, [r7, #32]
 800eee6:	ee06 1a90 	vmov	s13, r1
 800eeea:	ee07 2a10 	vmov	s14, r2
 800eeee:	ee07 3a90 	vmov	s15, r3
}
 800eef2:	eeb0 0a66 	vmov.f32	s0, s13
 800eef6:	eef0 0a47 	vmov.f32	s1, s14
 800eefa:	eeb0 1a67 	vmov.f32	s2, s15
 800eefe:	3730      	adds	r7, #48	; 0x30
 800ef00:	46bd      	mov	sp, r7
 800ef02:	bd80      	pop	{r7, pc}
 800ef04:	240090f8 	.word	0x240090f8
 800ef08:	240090d4 	.word	0x240090d4

0800ef0c <_Z13CalibrateGyroRKN3Mat6MatrixILt3ELt1EEE>:

Matrix<3, 1> CalibrateGyro(const Matrix<3, 1>& GyroVec)
{
 800ef0c:	b580      	push	{r7, lr}
 800ef0e:	b08c      	sub	sp, #48	; 0x30
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	6178      	str	r0, [r7, #20]
	return (GyroA * (GyroVec - GyroB));
 800ef14:	4919      	ldr	r1, [pc, #100]	; (800ef7c <_Z13CalibrateGyroRKN3Mat6MatrixILt3ELt1EEE+0x70>)
 800ef16:	6978      	ldr	r0, [r7, #20]
 800ef18:	f000 f849 	bl	800efae <_ZNK3Mat6MatrixILt3ELt1EEmiERKS1_>
 800ef1c:	eef0 6a40 	vmov.f32	s13, s0
 800ef20:	eeb0 7a60 	vmov.f32	s14, s1
 800ef24:	eef0 7a41 	vmov.f32	s15, s2
 800ef28:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 800ef2c:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 800ef30:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 800ef34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ef38:	4619      	mov	r1, r3
 800ef3a:	4811      	ldr	r0, [pc, #68]	; (800ef80 <_Z13CalibrateGyroRKN3Mat6MatrixILt3ELt1EEE+0x74>)
 800ef3c:	f7fe fbfb 	bl	800d736 <_ZNK3Mat6MatrixILt3ELt3EEmlILt1EEENS0_ILt3EXT_EEERKS3_>
 800ef40:	eef0 6a40 	vmov.f32	s13, s0
 800ef44:	eeb0 7a60 	vmov.f32	s14, s1
 800ef48:	eef0 7a41 	vmov.f32	s15, s2
 800ef4c:	edc7 6a06 	vstr	s13, [r7, #24]
 800ef50:	ed87 7a07 	vstr	s14, [r7, #28]
 800ef54:	edc7 7a08 	vstr	s15, [r7, #32]
 800ef58:	69b9      	ldr	r1, [r7, #24]
 800ef5a:	69fa      	ldr	r2, [r7, #28]
 800ef5c:	6a3b      	ldr	r3, [r7, #32]
 800ef5e:	ee06 1a90 	vmov	s13, r1
 800ef62:	ee07 2a10 	vmov	s14, r2
 800ef66:	ee07 3a90 	vmov	s15, r3
}
 800ef6a:	eeb0 0a66 	vmov.f32	s0, s13
 800ef6e:	eef0 0a47 	vmov.f32	s1, s14
 800ef72:	eeb0 1a67 	vmov.f32	s2, s15
 800ef76:	3730      	adds	r7, #48	; 0x30
 800ef78:	46bd      	mov	sp, r7
 800ef7a:	bd80      	pop	{r7, pc}
 800ef7c:	24009128 	.word	0x24009128
 800ef80:	24009104 	.word	0x24009104

0800ef84 <_ZN3Mat6MatrixILt3ELt3EEC1ERKSt5arrayIfLj9EE>:
Matrix<heigth, width>::Matrix(const std::array<float, heigth*width>& values): _values(values) {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 800ef84:	b4b0      	push	{r4, r5, r7}
 800ef86:	b083      	sub	sp, #12
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	6078      	str	r0, [r7, #4]
 800ef8c:	6039      	str	r1, [r7, #0]
 800ef8e:	687a      	ldr	r2, [r7, #4]
 800ef90:	683b      	ldr	r3, [r7, #0]
 800ef92:	4614      	mov	r4, r2
 800ef94:	461d      	mov	r5, r3
 800ef96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ef98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ef9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ef9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ef9e:	682b      	ldr	r3, [r5, #0]
 800efa0:	6023      	str	r3, [r4, #0]
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	4618      	mov	r0, r3
 800efa6:	370c      	adds	r7, #12
 800efa8:	46bd      	mov	sp, r7
 800efaa:	bcb0      	pop	{r4, r5, r7}
 800efac:	4770      	bx	lr

0800efae <_ZNK3Mat6MatrixILt3ELt1EEmiERKS1_>:
inline Matrix<heigth, width> Matrix<heigth, width>::operator-(const Matrix<heigth, width> &other) const
 800efae:	b580      	push	{r7, lr}
 800efb0:	b08c      	sub	sp, #48	; 0x30
 800efb2:	af00      	add	r7, sp, #0
 800efb4:	6178      	str	r0, [r7, #20]
 800efb6:	6139      	str	r1, [r7, #16]
    Matrix<heigth, width> result = *this;
 800efb8:	697a      	ldr	r2, [r7, #20]
 800efba:	f107 0318 	add.w	r3, r7, #24
 800efbe:	ca07      	ldmia	r2, {r0, r1, r2}
 800efc0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	result -= other;
 800efc4:	f107 0318 	add.w	r3, r7, #24
 800efc8:	6939      	ldr	r1, [r7, #16]
 800efca:	4618      	mov	r0, r3
 800efcc:	f000 f819 	bl	800f002 <_ZN3Mat6MatrixILt3ELt1EEmIERKS1_>
	return result;
 800efd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800efd4:	f107 0218 	add.w	r2, r7, #24
 800efd8:	ca07      	ldmia	r2, {r0, r1, r2}
 800efda:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800efde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800efe0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800efe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efe4:	ee06 1a90 	vmov	s13, r1
 800efe8:	ee07 2a10 	vmov	s14, r2
 800efec:	ee07 3a90 	vmov	s15, r3
}
 800eff0:	eeb0 0a66 	vmov.f32	s0, s13
 800eff4:	eef0 0a47 	vmov.f32	s1, s14
 800eff8:	eeb0 1a67 	vmov.f32	s2, s15
 800effc:	3730      	adds	r7, #48	; 0x30
 800effe:	46bd      	mov	sp, r7
 800f000:	bd80      	pop	{r7, pc}

0800f002 <_ZN3Mat6MatrixILt3ELt1EEmIERKS1_>:
inline Matrix<heigth, width> &Matrix<heigth, width>::operator-=(const Matrix<heigth, width> &other)
 800f002:	b580      	push	{r7, lr}
 800f004:	ed2d 8b02 	vpush	{d8}
 800f008:	b084      	sub	sp, #16
 800f00a:	af00      	add	r7, sp, #0
 800f00c:	6078      	str	r0, [r7, #4]
 800f00e:	6039      	str	r1, [r7, #0]
    for(u_int i = 0; i < _values.size(); ++i) _values[i] -= other._values[i];
 800f010:	2300      	movs	r3, #0
 800f012:	60fb      	str	r3, [r7, #12]
 800f014:	e016      	b.n	800f044 <_ZN3Mat6MatrixILt3ELt1EEmIERKS1_+0x42>
 800f016:	683b      	ldr	r3, [r7, #0]
 800f018:	68f9      	ldr	r1, [r7, #12]
 800f01a:	4618      	mov	r0, r3
 800f01c:	f7ff f814 	bl	800e048 <_ZNKSt5arrayIfLj3EEixEj>
 800f020:	4603      	mov	r3, r0
 800f022:	ed93 8a00 	vldr	s16, [r3]
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	68f9      	ldr	r1, [r7, #12]
 800f02a:	4618      	mov	r0, r3
 800f02c:	f7fe fd11 	bl	800da52 <_ZNSt5arrayIfLj3EEixEj>
 800f030:	4603      	mov	r3, r0
 800f032:	edd3 7a00 	vldr	s15, [r3]
 800f036:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800f03a:	edc3 7a00 	vstr	s15, [r3]
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	3301      	adds	r3, #1
 800f042:	60fb      	str	r3, [r7, #12]
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	4618      	mov	r0, r3
 800f048:	f000 f810 	bl	800f06c <_ZNKSt5arrayIfLj3EE4sizeEv>
 800f04c:	4602      	mov	r2, r0
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	4293      	cmp	r3, r2
 800f052:	bf34      	ite	cc
 800f054:	2301      	movcc	r3, #1
 800f056:	2300      	movcs	r3, #0
 800f058:	b2db      	uxtb	r3, r3
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d1db      	bne.n	800f016 <_ZN3Mat6MatrixILt3ELt1EEmIERKS1_+0x14>
	return *this;
 800f05e:	687b      	ldr	r3, [r7, #4]
}
 800f060:	4618      	mov	r0, r3
 800f062:	3710      	adds	r7, #16
 800f064:	46bd      	mov	sp, r7
 800f066:	ecbd 8b02 	vpop	{d8}
 800f06a:	bd80      	pop	{r7, pc}

0800f06c <_ZNKSt5arrayIfLj3EE4sizeEv>:
      size() const noexcept { return _Nm; }
 800f06c:	b480      	push	{r7}
 800f06e:	b083      	sub	sp, #12
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]
 800f074:	2303      	movs	r3, #3
 800f076:	4618      	mov	r0, r3
 800f078:	370c      	adds	r7, #12
 800f07a:	46bd      	mov	sp, r7
 800f07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f080:	4770      	bx	lr
	...

0800f084 <_Z41__static_initialization_and_destruction_0ii>:
 800f084:	b5b0      	push	{r4, r5, r7, lr}
 800f086:	b0a6      	sub	sp, #152	; 0x98
 800f088:	af00      	add	r7, sp, #0
 800f08a:	6078      	str	r0, [r7, #4]
 800f08c:	6039      	str	r1, [r7, #0]
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	2b01      	cmp	r3, #1
 800f092:	d158      	bne.n	800f146 <_Z41__static_initialization_and_destruction_0ii+0xc2>
 800f094:	683b      	ldr	r3, [r7, #0]
 800f096:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f09a:	4293      	cmp	r3, r2
 800f09c:	d153      	bne.n	800f146 <_Z41__static_initialization_and_destruction_0ii+0xc2>
						0.0f, 0.0f, 0.13103f});
 800f09e:	4b2c      	ldr	r3, [pc, #176]	; (800f150 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 800f0a0:	f107 0408 	add.w	r4, r7, #8
 800f0a4:	461d      	mov	r5, r3
 800f0a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f0a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f0aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f0ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f0ae:	682b      	ldr	r3, [r5, #0]
 800f0b0:	6023      	str	r3, [r4, #0]
 800f0b2:	f107 0308 	add.w	r3, r7, #8
 800f0b6:	4619      	mov	r1, r3
 800f0b8:	4826      	ldr	r0, [pc, #152]	; (800f154 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 800f0ba:	f7ff ff63 	bl	800ef84 <_ZN3Mat6MatrixILt3ELt3EEC1ERKSt5arrayIfLj9EE>
const Matrix<3, 1> MagB({26.0f, 23.0f, -146.5f});
 800f0be:	4a26      	ldr	r2, [pc, #152]	; (800f158 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 800f0c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f0c4:	ca07      	ldmia	r2, {r0, r1, r2}
 800f0c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f0ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f0ce:	4619      	mov	r1, r3
 800f0d0:	4822      	ldr	r0, [pc, #136]	; (800f15c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 800f0d2:	f7fe fadd 	bl	800d690 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
						-0.001166, 0.000580, 0.980272 });
 800f0d6:	4b22      	ldr	r3, [pc, #136]	; (800f160 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 800f0d8:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800f0dc:	461d      	mov	r5, r3
 800f0de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f0e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f0e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f0e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f0e6:	682b      	ldr	r3, [r5, #0]
 800f0e8:	6023      	str	r3, [r4, #0]
 800f0ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f0ee:	4619      	mov	r1, r3
 800f0f0:	481c      	ldr	r0, [pc, #112]	; (800f164 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 800f0f2:	f7ff ff47 	bl	800ef84 <_ZN3Mat6MatrixILt3ELt3EEC1ERKSt5arrayIfLj9EE>
const Matrix<3, 1> AccB({0.357455, 0.192043, -0.190166});
 800f0f6:	4a1c      	ldr	r2, [pc, #112]	; (800f168 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 800f0f8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800f0fc:	ca07      	ldmia	r2, {r0, r1, r2}
 800f0fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f102:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800f106:	4619      	mov	r1, r3
 800f108:	4818      	ldr	r0, [pc, #96]	; (800f16c <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 800f10a:	f7fe fac1 	bl	800d690 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
						0.0, 0.0, 8.193f * DEG_2_RAD});
 800f10e:	4b18      	ldr	r3, [pc, #96]	; (800f170 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 800f110:	f107 0468 	add.w	r4, r7, #104	; 0x68
 800f114:	461d      	mov	r5, r3
 800f116:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f118:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f11a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f11c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f11e:	682b      	ldr	r3, [r5, #0]
 800f120:	6023      	str	r3, [r4, #0]
 800f122:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f126:	4619      	mov	r1, r3
 800f128:	4812      	ldr	r0, [pc, #72]	; (800f174 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 800f12a:	f7ff ff2b 	bl	800ef84 <_ZN3Mat6MatrixILt3ELt3EEC1ERKSt5arrayIfLj9EE>
const Matrix<3, 1> GyroB({-0.045665, 0.047779, -0.005830});
 800f12e:	4a12      	ldr	r2, [pc, #72]	; (800f178 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 800f130:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800f134:	ca07      	ldmia	r2, {r0, r1, r2}
 800f136:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f13a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800f13e:	4619      	mov	r1, r3
 800f140:	480e      	ldr	r0, [pc, #56]	; (800f17c <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 800f142:	f7fe faa5 	bl	800d690 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
}
 800f146:	bf00      	nop
 800f148:	3798      	adds	r7, #152	; 0x98
 800f14a:	46bd      	mov	sp, r7
 800f14c:	bdb0      	pop	{r4, r5, r7, pc}
 800f14e:	bf00      	nop
 800f150:	0801be88 	.word	0x0801be88
 800f154:	240090a4 	.word	0x240090a4
 800f158:	0801beac 	.word	0x0801beac
 800f15c:	240090c8 	.word	0x240090c8
 800f160:	0801beb8 	.word	0x0801beb8
 800f164:	240090d4 	.word	0x240090d4
 800f168:	0801bedc 	.word	0x0801bedc
 800f16c:	240090f8 	.word	0x240090f8
 800f170:	0801bee8 	.word	0x0801bee8
 800f174:	24009104 	.word	0x24009104
 800f178:	0801bf0c 	.word	0x0801bf0c
 800f17c:	24009128 	.word	0x24009128

0800f180 <_GLOBAL__sub_I__Z12CalibrateMagRKN3Mat6MatrixILt3ELt1EEE>:
 800f180:	b580      	push	{r7, lr}
 800f182:	af00      	add	r7, sp, #0
 800f184:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f188:	2001      	movs	r0, #1
 800f18a:	f7ff ff7b 	bl	800f084 <_Z41__static_initialization_and_destruction_0ii>
 800f18e:	bd80      	pop	{r7, pc}

0800f190 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 800f190:	b580      	push	{r7, lr}
 800f192:	b082      	sub	sp, #8
 800f194:	af00      	add	r7, sp, #0
 800f196:	ed87 0a01 	vstr	s0, [r7, #4]
 800f19a:	ed97 0a01 	vldr	s0, [r7, #4]
 800f19e:	f00a f84f 	bl	8019240 <sqrtf>
 800f1a2:	eef0 7a40 	vmov.f32	s15, s0
 800f1a6:	eeb0 0a67 	vmov.f32	s0, s15
 800f1aa:	3708      	adds	r7, #8
 800f1ac:	46bd      	mov	sp, r7
 800f1ae:	bd80      	pop	{r7, pc}

0800f1b0 <_ZN10Algorithms3sgnEf>:

namespace Algorithms
{

float sgn(float val)
{
 800f1b0:	b480      	push	{r7}
 800f1b2:	b083      	sub	sp, #12
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	ed87 0a01 	vstr	s0, [r7, #4]
	return ((0.0f < val) - (0.0f > val));
 800f1ba:	edd7 7a01 	vldr	s15, [r7, #4]
 800f1be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f1c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1c6:	bfcc      	ite	gt
 800f1c8:	2301      	movgt	r3, #1
 800f1ca:	2300      	movle	r3, #0
 800f1cc:	b2db      	uxtb	r3, r3
 800f1ce:	461a      	mov	r2, r3
 800f1d0:	edd7 7a01 	vldr	s15, [r7, #4]
 800f1d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f1d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1dc:	bf4c      	ite	mi
 800f1de:	2301      	movmi	r3, #1
 800f1e0:	2300      	movpl	r3, #0
 800f1e2:	b2db      	uxtb	r3, r3
 800f1e4:	1ad3      	subs	r3, r2, r3
 800f1e6:	ee07 3a90 	vmov	s15, r3
 800f1ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800f1ee:	eeb0 0a67 	vmov.f32	s0, s15
 800f1f2:	370c      	adds	r7, #12
 800f1f4:	46bd      	mov	sp, r7
 800f1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1fa:	4770      	bx	lr

0800f1fc <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE>:

const Matrix<3, 3>& Inverse3_3Matrix(const Matrix<3, 3>& mat)
{
 800f1fc:	b5b0      	push	{r4, r5, r7, lr}
 800f1fe:	b096      	sub	sp, #88	; 0x58
 800f200:	af00      	add	r7, sp, #0
 800f202:	6078      	str	r0, [r7, #4]
	static Matrix<3, 3> result;
 800f204:	4bd2      	ldr	r3, [pc, #840]	; (800f550 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x354>)
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	f3bf 8f5b 	dmb	ish
 800f20c:	f003 0301 	and.w	r3, r3, #1
 800f210:	2b00      	cmp	r3, #0
 800f212:	bf0c      	ite	eq
 800f214:	2301      	moveq	r3, #1
 800f216:	2300      	movne	r3, #0
 800f218:	b2db      	uxtb	r3, r3
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d010      	beq.n	800f240 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x44>
 800f21e:	48cc      	ldr	r0, [pc, #816]	; (800f550 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x354>)
 800f220:	f009 fffe 	bl	8019220 <__cxa_guard_acquire>
 800f224:	4603      	mov	r3, r0
 800f226:	2b00      	cmp	r3, #0
 800f228:	bf14      	ite	ne
 800f22a:	2301      	movne	r3, #1
 800f22c:	2300      	moveq	r3, #0
 800f22e:	b2db      	uxtb	r3, r3
 800f230:	2b00      	cmp	r3, #0
 800f232:	d005      	beq.n	800f240 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x44>
 800f234:	48c7      	ldr	r0, [pc, #796]	; (800f554 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x358>)
 800f236:	f7fe f9cb 	bl	800d5d0 <_ZN3Mat6MatrixILt3ELt3EEC1Ev>
 800f23a:	48c5      	ldr	r0, [pc, #788]	; (800f550 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x354>)
 800f23c:	f009 fffc 	bl	8019238 <__cxa_guard_release>
	static float a_1_1, a_1_2, a_1_3, a_2_1, a_2_2, a_2_3, a_3_1, a_3_2, a_3_3;
	a_1_1 = mat(0,0); a_1_2 = mat(0,1); a_1_3 = mat(0,2);
 800f240:	2200      	movs	r2, #0
 800f242:	2100      	movs	r1, #0
 800f244:	6878      	ldr	r0, [r7, #4]
 800f246:	f7fe fdda 	bl	800ddfe <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 800f24a:	eef0 7a40 	vmov.f32	s15, s0
 800f24e:	4bc2      	ldr	r3, [pc, #776]	; (800f558 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x35c>)
 800f250:	edc3 7a00 	vstr	s15, [r3]
 800f254:	2201      	movs	r2, #1
 800f256:	2100      	movs	r1, #0
 800f258:	6878      	ldr	r0, [r7, #4]
 800f25a:	f7fe fdd0 	bl	800ddfe <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 800f25e:	eef0 7a40 	vmov.f32	s15, s0
 800f262:	4bbe      	ldr	r3, [pc, #760]	; (800f55c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x360>)
 800f264:	edc3 7a00 	vstr	s15, [r3]
 800f268:	2202      	movs	r2, #2
 800f26a:	2100      	movs	r1, #0
 800f26c:	6878      	ldr	r0, [r7, #4]
 800f26e:	f7fe fdc6 	bl	800ddfe <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 800f272:	eef0 7a40 	vmov.f32	s15, s0
 800f276:	4bba      	ldr	r3, [pc, #744]	; (800f560 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x364>)
 800f278:	edc3 7a00 	vstr	s15, [r3]
	a_2_1 = mat(1,0); a_2_2 = mat(1,1); a_2_3 = mat(1,2);
 800f27c:	2200      	movs	r2, #0
 800f27e:	2101      	movs	r1, #1
 800f280:	6878      	ldr	r0, [r7, #4]
 800f282:	f7fe fdbc 	bl	800ddfe <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 800f286:	eef0 7a40 	vmov.f32	s15, s0
 800f28a:	4bb6      	ldr	r3, [pc, #728]	; (800f564 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x368>)
 800f28c:	edc3 7a00 	vstr	s15, [r3]
 800f290:	2201      	movs	r2, #1
 800f292:	2101      	movs	r1, #1
 800f294:	6878      	ldr	r0, [r7, #4]
 800f296:	f7fe fdb2 	bl	800ddfe <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 800f29a:	eef0 7a40 	vmov.f32	s15, s0
 800f29e:	4bb2      	ldr	r3, [pc, #712]	; (800f568 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 800f2a0:	edc3 7a00 	vstr	s15, [r3]
 800f2a4:	2202      	movs	r2, #2
 800f2a6:	2101      	movs	r1, #1
 800f2a8:	6878      	ldr	r0, [r7, #4]
 800f2aa:	f7fe fda8 	bl	800ddfe <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 800f2ae:	eef0 7a40 	vmov.f32	s15, s0
 800f2b2:	4bae      	ldr	r3, [pc, #696]	; (800f56c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 800f2b4:	edc3 7a00 	vstr	s15, [r3]
	a_3_1 = mat(2,0); a_3_2 = mat(2,1); a_3_3 = mat(2,2);
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	2102      	movs	r1, #2
 800f2bc:	6878      	ldr	r0, [r7, #4]
 800f2be:	f7fe fd9e 	bl	800ddfe <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 800f2c2:	eef0 7a40 	vmov.f32	s15, s0
 800f2c6:	4baa      	ldr	r3, [pc, #680]	; (800f570 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 800f2c8:	edc3 7a00 	vstr	s15, [r3]
 800f2cc:	2201      	movs	r2, #1
 800f2ce:	2102      	movs	r1, #2
 800f2d0:	6878      	ldr	r0, [r7, #4]
 800f2d2:	f7fe fd94 	bl	800ddfe <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 800f2d6:	eef0 7a40 	vmov.f32	s15, s0
 800f2da:	4ba6      	ldr	r3, [pc, #664]	; (800f574 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 800f2dc:	edc3 7a00 	vstr	s15, [r3]
 800f2e0:	2202      	movs	r2, #2
 800f2e2:	2102      	movs	r1, #2
 800f2e4:	6878      	ldr	r0, [r7, #4]
 800f2e6:	f7fe fd8a 	bl	800ddfe <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 800f2ea:	eef0 7a40 	vmov.f32	s15, s0
 800f2ee:	4ba2      	ldr	r3, [pc, #648]	; (800f578 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 800f2f0:	edc3 7a00 	vstr	s15, [r3]
	float det = (a_1_1*a_2_2*a_3_3 - a_1_1*a_2_3*a_3_2 - a_1_2*a_2_1*a_3_3 + a_1_2*a_2_3*a_3_1 + a_1_3*a_2_1*a_3_2 - a_1_3*a_2_2*a_3_1);
 800f2f4:	4b98      	ldr	r3, [pc, #608]	; (800f558 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x35c>)
 800f2f6:	ed93 7a00 	vldr	s14, [r3]
 800f2fa:	4b9b      	ldr	r3, [pc, #620]	; (800f568 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 800f2fc:	edd3 7a00 	vldr	s15, [r3]
 800f300:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f304:	4b9c      	ldr	r3, [pc, #624]	; (800f578 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 800f306:	edd3 7a00 	vldr	s15, [r3]
 800f30a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f30e:	4b92      	ldr	r3, [pc, #584]	; (800f558 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x35c>)
 800f310:	edd3 6a00 	vldr	s13, [r3]
 800f314:	4b95      	ldr	r3, [pc, #596]	; (800f56c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 800f316:	edd3 7a00 	vldr	s15, [r3]
 800f31a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800f31e:	4b95      	ldr	r3, [pc, #596]	; (800f574 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 800f320:	edd3 7a00 	vldr	s15, [r3]
 800f324:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f328:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f32c:	4b8b      	ldr	r3, [pc, #556]	; (800f55c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x360>)
 800f32e:	edd3 6a00 	vldr	s13, [r3]
 800f332:	4b8c      	ldr	r3, [pc, #560]	; (800f564 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x368>)
 800f334:	edd3 7a00 	vldr	s15, [r3]
 800f338:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800f33c:	4b8e      	ldr	r3, [pc, #568]	; (800f578 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 800f33e:	edd3 7a00 	vldr	s15, [r3]
 800f342:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f346:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f34a:	4b84      	ldr	r3, [pc, #528]	; (800f55c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x360>)
 800f34c:	edd3 6a00 	vldr	s13, [r3]
 800f350:	4b86      	ldr	r3, [pc, #536]	; (800f56c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 800f352:	edd3 7a00 	vldr	s15, [r3]
 800f356:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800f35a:	4b85      	ldr	r3, [pc, #532]	; (800f570 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 800f35c:	edd3 7a00 	vldr	s15, [r3]
 800f360:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f364:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f368:	4b7d      	ldr	r3, [pc, #500]	; (800f560 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x364>)
 800f36a:	edd3 6a00 	vldr	s13, [r3]
 800f36e:	4b7d      	ldr	r3, [pc, #500]	; (800f564 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x368>)
 800f370:	edd3 7a00 	vldr	s15, [r3]
 800f374:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800f378:	4b7e      	ldr	r3, [pc, #504]	; (800f574 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 800f37a:	edd3 7a00 	vldr	s15, [r3]
 800f37e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f382:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f386:	4b76      	ldr	r3, [pc, #472]	; (800f560 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x364>)
 800f388:	edd3 6a00 	vldr	s13, [r3]
 800f38c:	4b76      	ldr	r3, [pc, #472]	; (800f568 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 800f38e:	edd3 7a00 	vldr	s15, [r3]
 800f392:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800f396:	4b76      	ldr	r3, [pc, #472]	; (800f570 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 800f398:	edd3 7a00 	vldr	s15, [r3]
 800f39c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f3a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f3a4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	float det1 = 1.0f / det;
 800f3a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f3ac:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800f3b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f3b4:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	result =
	{{
		(a_2_2*a_3_3 - a_2_3*a_3_2)*det1, -(a_1_2*a_3_3 - a_1_3*a_3_2)*det1,  (a_1_2*a_2_3 - a_1_3*a_2_2)*det1,
 800f3b8:	4b6b      	ldr	r3, [pc, #428]	; (800f568 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 800f3ba:	ed93 7a00 	vldr	s14, [r3]
 800f3be:	4b6e      	ldr	r3, [pc, #440]	; (800f578 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 800f3c0:	edd3 7a00 	vldr	s15, [r3]
 800f3c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f3c8:	4b68      	ldr	r3, [pc, #416]	; (800f56c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 800f3ca:	edd3 6a00 	vldr	s13, [r3]
 800f3ce:	4b69      	ldr	r3, [pc, #420]	; (800f574 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 800f3d0:	edd3 7a00 	vldr	s15, [r3]
 800f3d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f3d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f3dc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800f3e0:	ee67 7a27 	vmul.f32	s15, s14, s15
	result =
 800f3e4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		(a_2_2*a_3_3 - a_2_3*a_3_2)*det1, -(a_1_2*a_3_3 - a_1_3*a_3_2)*det1,  (a_1_2*a_2_3 - a_1_3*a_2_2)*det1,
 800f3e8:	4b5c      	ldr	r3, [pc, #368]	; (800f55c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x360>)
 800f3ea:	ed93 7a00 	vldr	s14, [r3]
 800f3ee:	4b62      	ldr	r3, [pc, #392]	; (800f578 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 800f3f0:	edd3 7a00 	vldr	s15, [r3]
 800f3f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f3f8:	4b59      	ldr	r3, [pc, #356]	; (800f560 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x364>)
 800f3fa:	edd3 6a00 	vldr	s13, [r3]
 800f3fe:	4b5d      	ldr	r3, [pc, #372]	; (800f574 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 800f400:	edd3 7a00 	vldr	s15, [r3]
 800f404:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f408:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f40c:	eeb1 7a67 	vneg.f32	s14, s15
 800f410:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800f414:	ee67 7a27 	vmul.f32	s15, s14, s15
	result =
 800f418:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		(a_2_2*a_3_3 - a_2_3*a_3_2)*det1, -(a_1_2*a_3_3 - a_1_3*a_3_2)*det1,  (a_1_2*a_2_3 - a_1_3*a_2_2)*det1,
 800f41c:	4b4f      	ldr	r3, [pc, #316]	; (800f55c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x360>)
 800f41e:	ed93 7a00 	vldr	s14, [r3]
 800f422:	4b52      	ldr	r3, [pc, #328]	; (800f56c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 800f424:	edd3 7a00 	vldr	s15, [r3]
 800f428:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f42c:	4b4c      	ldr	r3, [pc, #304]	; (800f560 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x364>)
 800f42e:	edd3 6a00 	vldr	s13, [r3]
 800f432:	4b4d      	ldr	r3, [pc, #308]	; (800f568 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 800f434:	edd3 7a00 	vldr	s15, [r3]
 800f438:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f43c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f440:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800f444:	ee67 7a27 	vmul.f32	s15, s14, s15
	result =
 800f448:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		-(a_2_1*a_3_3 - a_2_3*a_3_1)*det1,  (a_1_1*a_3_3 - a_1_3*a_3_1)*det1, -(a_1_1*a_2_3 - a_1_3*a_2_1)*det1,
 800f44c:	4b45      	ldr	r3, [pc, #276]	; (800f564 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x368>)
 800f44e:	ed93 7a00 	vldr	s14, [r3]
 800f452:	4b49      	ldr	r3, [pc, #292]	; (800f578 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 800f454:	edd3 7a00 	vldr	s15, [r3]
 800f458:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f45c:	4b43      	ldr	r3, [pc, #268]	; (800f56c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 800f45e:	edd3 6a00 	vldr	s13, [r3]
 800f462:	4b43      	ldr	r3, [pc, #268]	; (800f570 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 800f464:	edd3 7a00 	vldr	s15, [r3]
 800f468:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f46c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f470:	eeb1 7a67 	vneg.f32	s14, s15
 800f474:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800f478:	ee67 7a27 	vmul.f32	s15, s14, s15
	result =
 800f47c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		-(a_2_1*a_3_3 - a_2_3*a_3_1)*det1,  (a_1_1*a_3_3 - a_1_3*a_3_1)*det1, -(a_1_1*a_2_3 - a_1_3*a_2_1)*det1,
 800f480:	4b35      	ldr	r3, [pc, #212]	; (800f558 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x35c>)
 800f482:	ed93 7a00 	vldr	s14, [r3]
 800f486:	4b3c      	ldr	r3, [pc, #240]	; (800f578 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 800f488:	edd3 7a00 	vldr	s15, [r3]
 800f48c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f490:	4b33      	ldr	r3, [pc, #204]	; (800f560 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x364>)
 800f492:	edd3 6a00 	vldr	s13, [r3]
 800f496:	4b36      	ldr	r3, [pc, #216]	; (800f570 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 800f498:	edd3 7a00 	vldr	s15, [r3]
 800f49c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f4a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f4a4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800f4a8:	ee67 7a27 	vmul.f32	s15, s14, s15
	result =
 800f4ac:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		-(a_2_1*a_3_3 - a_2_3*a_3_1)*det1,  (a_1_1*a_3_3 - a_1_3*a_3_1)*det1, -(a_1_1*a_2_3 - a_1_3*a_2_1)*det1,
 800f4b0:	4b29      	ldr	r3, [pc, #164]	; (800f558 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x35c>)
 800f4b2:	ed93 7a00 	vldr	s14, [r3]
 800f4b6:	4b2d      	ldr	r3, [pc, #180]	; (800f56c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 800f4b8:	edd3 7a00 	vldr	s15, [r3]
 800f4bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f4c0:	4b27      	ldr	r3, [pc, #156]	; (800f560 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x364>)
 800f4c2:	edd3 6a00 	vldr	s13, [r3]
 800f4c6:	4b27      	ldr	r3, [pc, #156]	; (800f564 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x368>)
 800f4c8:	edd3 7a00 	vldr	s15, [r3]
 800f4cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f4d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f4d4:	eeb1 7a67 	vneg.f32	s14, s15
 800f4d8:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800f4dc:	ee67 7a27 	vmul.f32	s15, s14, s15
	result =
 800f4e0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		(a_2_1*a_3_2 - a_2_2*a_3_1)*det1, -(a_1_1*a_3_2 - a_1_2*a_3_1)*det1,  (a_1_1*a_2_2 - a_1_2*a_2_1)*det1,
 800f4e4:	4b1f      	ldr	r3, [pc, #124]	; (800f564 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x368>)
 800f4e6:	ed93 7a00 	vldr	s14, [r3]
 800f4ea:	4b22      	ldr	r3, [pc, #136]	; (800f574 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 800f4ec:	edd3 7a00 	vldr	s15, [r3]
 800f4f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f4f4:	4b1c      	ldr	r3, [pc, #112]	; (800f568 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 800f4f6:	edd3 6a00 	vldr	s13, [r3]
 800f4fa:	4b1d      	ldr	r3, [pc, #116]	; (800f570 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 800f4fc:	edd3 7a00 	vldr	s15, [r3]
 800f500:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f504:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f508:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800f50c:	ee67 7a27 	vmul.f32	s15, s14, s15
	result =
 800f510:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		(a_2_1*a_3_2 - a_2_2*a_3_1)*det1, -(a_1_1*a_3_2 - a_1_2*a_3_1)*det1,  (a_1_1*a_2_2 - a_1_2*a_2_1)*det1,
 800f514:	4b10      	ldr	r3, [pc, #64]	; (800f558 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x35c>)
 800f516:	ed93 7a00 	vldr	s14, [r3]
 800f51a:	4b16      	ldr	r3, [pc, #88]	; (800f574 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 800f51c:	edd3 7a00 	vldr	s15, [r3]
 800f520:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f524:	4b0d      	ldr	r3, [pc, #52]	; (800f55c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x360>)
 800f526:	edd3 6a00 	vldr	s13, [r3]
 800f52a:	4b11      	ldr	r3, [pc, #68]	; (800f570 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 800f52c:	edd3 7a00 	vldr	s15, [r3]
 800f530:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f534:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f538:	eeb1 7a67 	vneg.f32	s14, s15
 800f53c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800f540:	ee67 7a27 	vmul.f32	s15, s14, s15
	result =
 800f544:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		(a_2_1*a_3_2 - a_2_2*a_3_1)*det1, -(a_1_1*a_3_2 - a_1_2*a_3_1)*det1,  (a_1_1*a_2_2 - a_1_2*a_2_1)*det1,
 800f548:	4b03      	ldr	r3, [pc, #12]	; (800f558 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x35c>)
 800f54a:	ed93 7a00 	vldr	s14, [r3]
 800f54e:	e015      	b.n	800f57c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x380>
 800f550:	24009158 	.word	0x24009158
 800f554:	24009134 	.word	0x24009134
 800f558:	2400915c 	.word	0x2400915c
 800f55c:	24009160 	.word	0x24009160
 800f560:	24009164 	.word	0x24009164
 800f564:	24009168 	.word	0x24009168
 800f568:	2400916c 	.word	0x2400916c
 800f56c:	24009170 	.word	0x24009170
 800f570:	24009174 	.word	0x24009174
 800f574:	24009178 	.word	0x24009178
 800f578:	2400917c 	.word	0x2400917c
 800f57c:	4b15      	ldr	r3, [pc, #84]	; (800f5d4 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x3d8>)
 800f57e:	edd3 7a00 	vldr	s15, [r3]
 800f582:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f586:	4b14      	ldr	r3, [pc, #80]	; (800f5d8 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x3dc>)
 800f588:	edd3 6a00 	vldr	s13, [r3]
 800f58c:	4b13      	ldr	r3, [pc, #76]	; (800f5dc <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x3e0>)
 800f58e:	edd3 7a00 	vldr	s15, [r3]
 800f592:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f596:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f59a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800f59e:	ee67 7a27 	vmul.f32	s15, s14, s15
	result =
 800f5a2:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
 800f5a6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800f5aa:	f107 0308 	add.w	r3, r7, #8
 800f5ae:	4611      	mov	r1, r2
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	f7ff fce7 	bl	800ef84 <_ZN3Mat6MatrixILt3ELt3EEC1ERKSt5arrayIfLj9EE>
 800f5b6:	4b0a      	ldr	r3, [pc, #40]	; (800f5e0 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x3e4>)
 800f5b8:	461d      	mov	r5, r3
 800f5ba:	f107 0408 	add.w	r4, r7, #8
 800f5be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f5c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f5c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f5c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f5c6:	6823      	ldr	r3, [r4, #0]
 800f5c8:	602b      	str	r3, [r5, #0]
	}};
	return result;
 800f5ca:	4b05      	ldr	r3, [pc, #20]	; (800f5e0 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x3e4>)
}
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	3758      	adds	r7, #88	; 0x58
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	bdb0      	pop	{r4, r5, r7, pc}
 800f5d4:	2400916c 	.word	0x2400916c
 800f5d8:	24009160 	.word	0x24009160
 800f5dc:	24009168 	.word	0x24009168
 800f5e0:	24009134 	.word	0x24009134

0800f5e4 <_ZNK10Algorithms10AHRSKalman8GetStateEv>:

const Quaternion& AHRSKalman::GetState() const
{
 800f5e4:	b480      	push	{r7}
 800f5e6:	b083      	sub	sp, #12
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	6078      	str	r0, [r7, #4]
	return _X;
 800f5ec:	687b      	ldr	r3, [r7, #4]
}
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	370c      	adds	r7, #12
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f8:	4770      	bx	lr

0800f5fa <_ZN10Algorithms10AHRSKalman16InitialiseKalmanERKN3Mat6MatrixILt3ELt1EEES5_f>:
{
	return _P;
}

void AHRSKalman::InitialiseKalman(const Matrix<3, 1>& acc, const Matrix<3, 1>& mag, float time)
{
 800f5fa:	b580      	push	{r7, lr}
 800f5fc:	ed2d 8b02 	vpush	{d8}
 800f600:	b094      	sub	sp, #80	; 0x50
 800f602:	af00      	add	r7, sp, #0
 800f604:	60f8      	str	r0, [r7, #12]
 800f606:	60b9      	str	r1, [r7, #8]
 800f608:	607a      	str	r2, [r7, #4]
 800f60a:	ed87 0a00 	vstr	s0, [r7]
	float ax{acc(0,0)}, ay{acc(1,0)}, az{acc(2,0)};
 800f60e:	2200      	movs	r2, #0
 800f610:	2100      	movs	r1, #0
 800f612:	68b8      	ldr	r0, [r7, #8]
 800f614:	f7fe fc1f 	bl	800de56 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 800f618:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
 800f61c:	2200      	movs	r2, #0
 800f61e:	2101      	movs	r1, #1
 800f620:	68b8      	ldr	r0, [r7, #8]
 800f622:	f7fe fc18 	bl	800de56 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 800f626:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
 800f62a:	2200      	movs	r2, #0
 800f62c:	2102      	movs	r1, #2
 800f62e:	68b8      	ldr	r0, [r7, #8]
 800f630:	f7fe fc11 	bl	800de56 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 800f634:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
	float mx{mag(0,0)}, my{mag(1,0)}, mz{mag(2,0)};
 800f638:	2200      	movs	r2, #0
 800f63a:	2100      	movs	r1, #0
 800f63c:	6878      	ldr	r0, [r7, #4]
 800f63e:	f7fe fc0a 	bl	800de56 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 800f642:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
 800f646:	2200      	movs	r2, #0
 800f648:	2101      	movs	r1, #1
 800f64a:	6878      	ldr	r0, [r7, #4]
 800f64c:	f7fe fc03 	bl	800de56 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 800f650:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
 800f654:	2200      	movs	r2, #0
 800f656:	2102      	movs	r1, #2
 800f658:	6878      	ldr	r0, [r7, #4]
 800f65a:	f7fe fbfc 	bl	800de56 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 800f65e:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38

	float amx{ay*mz - az*my};
 800f662:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800f666:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800f66a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f66e:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800f672:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800f676:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f67a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f67e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float amy{az*mx - ax*mz};
 800f682:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800f686:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800f68a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f68e:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800f692:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800f696:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f69a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f69e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float amz{ax*my - ay*mx};
 800f6a2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800f6a6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800f6aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f6ae:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800f6b2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800f6b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f6ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f6be:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	float amax{amy*az - amz*ay};
 800f6c2:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800f6c6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800f6ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f6ce:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800f6d2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800f6d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f6da:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f6de:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float amay{amz*ax - amx*az};
 800f6e2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800f6e6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800f6ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f6ee:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800f6f2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800f6f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f6fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f6fe:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float amaz{amx*ay - amy*ax};
 800f702:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800f706:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800f70a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f70e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800f712:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800f716:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f71a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f71e:	edc7 7a08 	vstr	s15, [r7, #32]

	float ad = 1.0f / sqrt(ax*ax + ay*ay +az*az);
 800f722:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800f726:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800f72a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800f72e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f732:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f736:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800f73a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f73e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f742:	eeb0 0a67 	vmov.f32	s0, s15
 800f746:	f7ff fd23 	bl	800f190 <_ZSt4sqrtf>
 800f74a:	eeb0 7a40 	vmov.f32	s14, s0
 800f74e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f752:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f756:	edc7 7a07 	vstr	s15, [r7, #28]
	ax *= ad; ay *= ad; az *= ad;
 800f75a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800f75e:	edd7 7a07 	vldr	s15, [r7, #28]
 800f762:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f766:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
 800f76a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800f76e:	edd7 7a07 	vldr	s15, [r7, #28]
 800f772:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f776:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
 800f77a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800f77e:	edd7 7a07 	vldr	s15, [r7, #28]
 800f782:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f786:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

	float amd = 1.0f / sqrt(amx*amx + amy*amy +amz*amz);
 800f78a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800f78e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800f792:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800f796:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f79a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f79e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800f7a2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f7a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f7aa:	eeb0 0a67 	vmov.f32	s0, s15
 800f7ae:	f7ff fcef 	bl	800f190 <_ZSt4sqrtf>
 800f7b2:	eeb0 7a40 	vmov.f32	s14, s0
 800f7b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f7ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f7be:	edc7 7a06 	vstr	s15, [r7, #24]
	amx *= amd; amy *= amd; amz *= amd;
 800f7c2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800f7c6:	edd7 7a06 	vldr	s15, [r7, #24]
 800f7ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f7ce:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 800f7d2:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800f7d6:	edd7 7a06 	vldr	s15, [r7, #24]
 800f7da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f7de:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 800f7e2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800f7e6:	edd7 7a06 	vldr	s15, [r7, #24]
 800f7ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f7ee:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	float amad = 1.0f / sqrt(amax*amax + amay*amay +amaz*amaz);
 800f7f2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800f7f6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800f7fa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800f7fe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f802:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f806:	edd7 7a08 	vldr	s15, [r7, #32]
 800f80a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f80e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f812:	eeb0 0a67 	vmov.f32	s0, s15
 800f816:	f7ff fcbb 	bl	800f190 <_ZSt4sqrtf>
 800f81a:	eeb0 7a40 	vmov.f32	s14, s0
 800f81e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f822:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f826:	edc7 7a05 	vstr	s15, [r7, #20]
	amax *= amad; amay *= amad; amaz *= amad;
 800f82a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800f82e:	edd7 7a05 	vldr	s15, [r7, #20]
 800f832:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f836:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800f83a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800f83e:	edd7 7a05 	vldr	s15, [r7, #20]
 800f842:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f846:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 800f84a:	ed97 7a08 	vldr	s14, [r7, #32]
 800f84e:	edd7 7a05 	vldr	s15, [r7, #20]
 800f852:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f856:	edc7 7a08 	vstr	s15, [r7, #32]

	_X.w = 0.5f * sqrt(amax + amy + az + 1.0f);
 800f85a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800f85e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800f862:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f866:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800f86a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f86e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f872:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f876:	eeb0 0a67 	vmov.f32	s0, s15
 800f87a:	f7ff fc89 	bl	800f190 <_ZSt4sqrtf>
 800f87e:	eef0 7a40 	vmov.f32	s15, s0
 800f882:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800f886:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	edc3 7a00 	vstr	s15, [r3]
	_X.x = 0.5f * sgn(amz - ay) * sqrt(amax - amy - az + 1.0f);
 800f890:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800f894:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800f898:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f89c:	eeb0 0a67 	vmov.f32	s0, s15
 800f8a0:	f7ff fc86 	bl	800f1b0 <_ZN10Algorithms3sgnEf>
 800f8a4:	eef0 7a40 	vmov.f32	s15, s0
 800f8a8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800f8ac:	ee27 8a87 	vmul.f32	s16, s15, s14
 800f8b0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800f8b4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800f8b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f8bc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800f8c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f8c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f8c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f8cc:	eeb0 0a67 	vmov.f32	s0, s15
 800f8d0:	f7ff fc5e 	bl	800f190 <_ZSt4sqrtf>
 800f8d4:	eef0 7a40 	vmov.f32	s15, s0
 800f8d8:	ee68 7a27 	vmul.f32	s15, s16, s15
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	edc3 7a01 	vstr	s15, [r3, #4]
	_X.y = 0.5f * sgn(ax - amaz) * sqrt(amy - amax - az + 1.0f);
 800f8e2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800f8e6:	edd7 7a08 	vldr	s15, [r7, #32]
 800f8ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f8ee:	eeb0 0a67 	vmov.f32	s0, s15
 800f8f2:	f7ff fc5d 	bl	800f1b0 <_ZN10Algorithms3sgnEf>
 800f8f6:	eef0 7a40 	vmov.f32	s15, s0
 800f8fa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800f8fe:	ee27 8a87 	vmul.f32	s16, s15, s14
 800f902:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800f906:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800f90a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f90e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800f912:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f916:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f91a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f91e:	eeb0 0a67 	vmov.f32	s0, s15
 800f922:	f7ff fc35 	bl	800f190 <_ZSt4sqrtf>
 800f926:	eef0 7a40 	vmov.f32	s15, s0
 800f92a:	ee68 7a27 	vmul.f32	s15, s16, s15
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	edc3 7a02 	vstr	s15, [r3, #8]
	_X.z = 0.5f * sgn(amz - ay) * sqrt(az - amax - amy + 1.0f);
 800f934:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800f938:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800f93c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f940:	eeb0 0a67 	vmov.f32	s0, s15
 800f944:	f7ff fc34 	bl	800f1b0 <_ZN10Algorithms3sgnEf>
 800f948:	eef0 7a40 	vmov.f32	s15, s0
 800f94c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800f950:	ee27 8a87 	vmul.f32	s16, s15, s14
 800f954:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800f958:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800f95c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f960:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800f964:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f968:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f96c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f970:	eeb0 0a67 	vmov.f32	s0, s15
 800f974:	f7ff fc0c 	bl	800f190 <_ZSt4sqrtf>
 800f978:	eef0 7a40 	vmov.f32	s15, s0
 800f97c:	ee68 7a27 	vmul.f32	s15, s16, s15
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	edc3 7a03 	vstr	s15, [r3, #12]
	_lastUpdateTime = time;
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	683a      	ldr	r2, [r7, #0]
 800f98a:	651a      	str	r2, [r3, #80]	; 0x50
	_lastCorrectionTime = time;
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	683a      	ldr	r2, [r7, #0]
 800f990:	655a      	str	r2, [r3, #84]	; 0x54
}
 800f992:	bf00      	nop
 800f994:	3750      	adds	r7, #80	; 0x50
 800f996:	46bd      	mov	sp, r7
 800f998:	ecbd 8b02 	vpop	{d8}
 800f99c:	bd80      	pop	{r7, pc}
	...

0800f9a0 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf>:

void AHRSKalman::UpdateState(const Matrix<3, 1>& U, float time)
{
 800f9a0:	b5b0      	push	{r4, r5, r7, lr}
 800f9a2:	f5ad 7d20 	sub.w	sp, sp, #640	; 0x280
 800f9a6:	af00      	add	r7, sp, #0
 800f9a8:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f9ac:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800f9b0:	6018      	str	r0, [r3, #0]
 800f9b2:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f9b6:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 800f9ba:	6019      	str	r1, [r3, #0]
 800f9bc:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f9c0:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 800f9c4:	ed83 0a00 	vstr	s0, [r3]
//Update State
	float hdt = (time - _lastUpdateTime) * 0.5f; //Half-delta-time
 800f9c8:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f9cc:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800f9d6:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f9da:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 800f9de:	ed93 7a00 	vldr	s14, [r3]
 800f9e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f9e6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800f9ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f9ee:	edc7 7a9f 	vstr	s15, [r7, #636]	; 0x27c
	_lastUpdateTime = time;
 800f9f2:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f9f6:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	f507 7220 	add.w	r2, r7, #640	; 0x280
 800fa00:	f5a2 720f 	sub.w	r2, r2, #572	; 0x23c
 800fa04:	6812      	ldr	r2, [r2, #0]
 800fa06:	651a      	str	r2, [r3, #80]	; 0x50
	static Matrix<4, 4> F;
 800fa08:	4bdc      	ldr	r3, [pc, #880]	; (800fd7c <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x3dc>)
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	f3bf 8f5b 	dmb	ish
 800fa10:	f003 0301 	and.w	r3, r3, #1
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	bf0c      	ite	eq
 800fa18:	2301      	moveq	r3, #1
 800fa1a:	2300      	movne	r3, #0
 800fa1c:	b2db      	uxtb	r3, r3
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d010      	beq.n	800fa44 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0xa4>
 800fa22:	48d6      	ldr	r0, [pc, #856]	; (800fd7c <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x3dc>)
 800fa24:	f009 fbfc 	bl	8019220 <__cxa_guard_acquire>
 800fa28:	4603      	mov	r3, r0
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	bf14      	ite	ne
 800fa2e:	2301      	movne	r3, #1
 800fa30:	2300      	moveq	r3, #0
 800fa32:	b2db      	uxtb	r3, r3
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d005      	beq.n	800fa44 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0xa4>
 800fa38:	48d1      	ldr	r0, [pc, #836]	; (800fd80 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x3e0>)
 800fa3a:	f7fd fd71 	bl	800d520 <_ZN3Mat6MatrixILt4ELt4EEC1Ev>
 800fa3e:	48cf      	ldr	r0, [pc, #828]	; (800fd7c <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x3dc>)
 800fa40:	f009 fbfa 	bl	8019238 <__cxa_guard_release>
	static Matrix<4, 3> W;
 800fa44:	4bcf      	ldr	r3, [pc, #828]	; (800fd84 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x3e4>)
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	f3bf 8f5b 	dmb	ish
 800fa4c:	f003 0301 	and.w	r3, r3, #1
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	bf0c      	ite	eq
 800fa54:	2301      	moveq	r3, #1
 800fa56:	2300      	movne	r3, #0
 800fa58:	b2db      	uxtb	r3, r3
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d010      	beq.n	800fa80 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0xe0>
 800fa5e:	48c9      	ldr	r0, [pc, #804]	; (800fd84 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x3e4>)
 800fa60:	f009 fbde 	bl	8019220 <__cxa_guard_acquire>
 800fa64:	4603      	mov	r3, r0
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	bf14      	ite	ne
 800fa6a:	2301      	movne	r3, #1
 800fa6c:	2300      	moveq	r3, #0
 800fa6e:	b2db      	uxtb	r3, r3
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d005      	beq.n	800fa80 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0xe0>
 800fa74:	48c4      	ldr	r0, [pc, #784]	; (800fd88 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x3e8>)
 800fa76:	f001 fd4b 	bl	8011510 <_ZN3Mat6MatrixILt4ELt3EEC1Ev>
 800fa7a:	48c2      	ldr	r0, [pc, #776]	; (800fd84 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x3e4>)
 800fa7c:	f009 fbdc 	bl	8019238 <__cxa_guard_release>
	static Quaternion newX;
	float wx{U(0,0)}, wy{U(1,0)}, wz{U(2,0)};
 800fa80:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fa84:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 800fa88:	2200      	movs	r2, #0
 800fa8a:	2100      	movs	r1, #0
 800fa8c:	6818      	ldr	r0, [r3, #0]
 800fa8e:	f7fe f9e2 	bl	800de56 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 800fa92:	ed87 0a9e 	vstr	s0, [r7, #632]	; 0x278
 800fa96:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fa9a:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 800fa9e:	2200      	movs	r2, #0
 800faa0:	2101      	movs	r1, #1
 800faa2:	6818      	ldr	r0, [r3, #0]
 800faa4:	f7fe f9d7 	bl	800de56 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 800faa8:	ed87 0a9d 	vstr	s0, [r7, #628]	; 0x274
 800faac:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fab0:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 800fab4:	2200      	movs	r2, #0
 800fab6:	2102      	movs	r1, #2
 800fab8:	6818      	ldr	r0, [r3, #0]
 800faba:	f7fe f9cc 	bl	800de56 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 800fabe:	ed87 0a9c 	vstr	s0, [r7, #624]	; 0x270
	newX.w = _X.w + hdt*(-wx*_X.x - wy*_X.y - wz*_X.z);
 800fac2:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fac6:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	ed93 7a00 	vldr	s14, [r3]
 800fad0:	edd7 7a9e 	vldr	s15, [r7, #632]	; 0x278
 800fad4:	eef1 6a67 	vneg.f32	s13, s15
 800fad8:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fadc:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	edd3 7a01 	vldr	s15, [r3, #4]
 800fae6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800faea:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800faee:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	ed93 6a02 	vldr	s12, [r3, #8]
 800faf8:	edd7 7a9d 	vldr	s15, [r7, #628]	; 0x274
 800fafc:	ee66 7a27 	vmul.f32	s15, s12, s15
 800fb00:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800fb04:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fb08:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	ed93 6a03 	vldr	s12, [r3, #12]
 800fb12:	edd7 7a9c 	vldr	s15, [r7, #624]	; 0x270
 800fb16:	ee66 7a27 	vmul.f32	s15, s12, s15
 800fb1a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800fb1e:	edd7 7a9f 	vldr	s15, [r7, #636]	; 0x27c
 800fb22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fb26:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fb2a:	4b98      	ldr	r3, [pc, #608]	; (800fd8c <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x3ec>)
 800fb2c:	edc3 7a00 	vstr	s15, [r3]
	newX.x = _X.x + hdt*(wx*_X.w - wy*_X.z + wz*_X.y);
 800fb30:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fb34:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	ed93 7a01 	vldr	s14, [r3, #4]
 800fb3e:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fb42:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	edd3 6a00 	vldr	s13, [r3]
 800fb4c:	edd7 7a9e 	vldr	s15, [r7, #632]	; 0x278
 800fb50:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800fb54:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fb58:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	ed93 6a03 	vldr	s12, [r3, #12]
 800fb62:	edd7 7a9d 	vldr	s15, [r7, #628]	; 0x274
 800fb66:	ee66 7a27 	vmul.f32	s15, s12, s15
 800fb6a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800fb6e:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fb72:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	ed93 6a02 	vldr	s12, [r3, #8]
 800fb7c:	edd7 7a9c 	vldr	s15, [r7, #624]	; 0x270
 800fb80:	ee66 7a27 	vmul.f32	s15, s12, s15
 800fb84:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800fb88:	edd7 7a9f 	vldr	s15, [r7, #636]	; 0x27c
 800fb8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fb90:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fb94:	4b7d      	ldr	r3, [pc, #500]	; (800fd8c <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x3ec>)
 800fb96:	edc3 7a01 	vstr	s15, [r3, #4]
	newX.y = _X.y + hdt*(wx*_X.z + wy*_X.w - wz*_X.x);
 800fb9a:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fb9e:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	ed93 7a02 	vldr	s14, [r3, #8]
 800fba8:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fbac:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	edd3 6a03 	vldr	s13, [r3, #12]
 800fbb6:	edd7 7a9e 	vldr	s15, [r7, #632]	; 0x278
 800fbba:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800fbbe:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fbc2:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	ed93 6a00 	vldr	s12, [r3]
 800fbcc:	edd7 7a9d 	vldr	s15, [r7, #628]	; 0x274
 800fbd0:	ee66 7a27 	vmul.f32	s15, s12, s15
 800fbd4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800fbd8:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fbdc:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	ed93 6a01 	vldr	s12, [r3, #4]
 800fbe6:	edd7 7a9c 	vldr	s15, [r7, #624]	; 0x270
 800fbea:	ee66 7a27 	vmul.f32	s15, s12, s15
 800fbee:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800fbf2:	edd7 7a9f 	vldr	s15, [r7, #636]	; 0x27c
 800fbf6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fbfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fbfe:	4b63      	ldr	r3, [pc, #396]	; (800fd8c <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x3ec>)
 800fc00:	edc3 7a02 	vstr	s15, [r3, #8]
	newX.z = _X.z + hdt*(-wx*_X.y + wy*_X.x + wz*_X.w);
 800fc04:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fc08:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	ed93 7a03 	vldr	s14, [r3, #12]
 800fc12:	edd7 7a9e 	vldr	s15, [r7, #632]	; 0x278
 800fc16:	eef1 6a67 	vneg.f32	s13, s15
 800fc1a:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fc1e:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	edd3 7a02 	vldr	s15, [r3, #8]
 800fc28:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800fc2c:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fc30:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	ed93 6a01 	vldr	s12, [r3, #4]
 800fc3a:	edd7 7a9d 	vldr	s15, [r7, #628]	; 0x274
 800fc3e:	ee66 7a27 	vmul.f32	s15, s12, s15
 800fc42:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800fc46:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fc4a:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	ed93 6a00 	vldr	s12, [r3]
 800fc54:	edd7 7a9c 	vldr	s15, [r7, #624]	; 0x270
 800fc58:	ee66 7a27 	vmul.f32	s15, s12, s15
 800fc5c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800fc60:	edd7 7a9f 	vldr	s15, [r7, #636]	; 0x27c
 800fc64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fc68:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fc6c:	4b47      	ldr	r3, [pc, #284]	; (800fd8c <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x3ec>)
 800fc6e:	edc3 7a03 	vstr	s15, [r3, #12]

	auto qW = _X * hdt;
 800fc72:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fc76:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	ed97 0a9f 	vldr	s0, [r7, #636]	; 0x27c
 800fc80:	4618      	mov	r0, r3
 800fc82:	f005 fc1b 	bl	80154bc <_ZNK3Mat10QuaternionmlEf>
 800fc86:	eeb0 6a40 	vmov.f32	s12, s0
 800fc8a:	eef0 6a60 	vmov.f32	s13, s1
 800fc8e:	eeb0 7a41 	vmov.f32	s14, s2
 800fc92:	eef0 7a61 	vmov.f32	s15, s3
 800fc96:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fc9a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800fc9e:	ed83 6a00 	vstr	s12, [r3]
 800fca2:	edc3 6a01 	vstr	s13, [r3, #4]
 800fca6:	ed83 7a02 	vstr	s14, [r3, #8]
 800fcaa:	edc3 7a03 	vstr	s15, [r3, #12]

	W =
	{{
		-qW.x, -qW.y, -qW.z,
 800fcae:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fcb2:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800fcb6:	edd3 7a01 	vldr	s15, [r3, #4]
 800fcba:	eef1 7a67 	vneg.f32	s15, s15
	W =
 800fcbe:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fcc2:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800fcc6:	edc3 7a00 	vstr	s15, [r3]
		-qW.x, -qW.y, -qW.z,
 800fcca:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fcce:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800fcd2:	edd3 7a02 	vldr	s15, [r3, #8]
 800fcd6:	eef1 7a67 	vneg.f32	s15, s15
	W =
 800fcda:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fcde:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800fce2:	edc3 7a01 	vstr	s15, [r3, #4]
		-qW.x, -qW.y, -qW.z,
 800fce6:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fcea:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800fcee:	edd3 7a03 	vldr	s15, [r3, #12]
 800fcf2:	eef1 7a67 	vneg.f32	s15, s15
	W =
 800fcf6:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fcfa:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800fcfe:	edc3 7a02 	vstr	s15, [r3, #8]
		qW.w, -qW.z, qW.y,
 800fd02:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fd06:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800fd0a:	681a      	ldr	r2, [r3, #0]
	W =
 800fd0c:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fd10:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800fd14:	60da      	str	r2, [r3, #12]
		qW.w, -qW.z, qW.y,
 800fd16:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fd1a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800fd1e:	edd3 7a03 	vldr	s15, [r3, #12]
 800fd22:	eef1 7a67 	vneg.f32	s15, s15
	W =
 800fd26:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fd2a:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800fd2e:	edc3 7a04 	vstr	s15, [r3, #16]
		qW.w, -qW.z, qW.y,
 800fd32:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fd36:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800fd3a:	689a      	ldr	r2, [r3, #8]
	W =
 800fd3c:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fd40:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800fd44:	615a      	str	r2, [r3, #20]
		qW.z, qW.w, -qW.x,
 800fd46:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fd4a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800fd4e:	68da      	ldr	r2, [r3, #12]
	W =
 800fd50:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fd54:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800fd58:	619a      	str	r2, [r3, #24]
		qW.z, qW.w, -qW.x,
 800fd5a:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fd5e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800fd62:	681a      	ldr	r2, [r3, #0]
	W =
 800fd64:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fd68:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800fd6c:	61da      	str	r2, [r3, #28]
		qW.z, qW.w, -qW.x,
 800fd6e:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fd72:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800fd76:	edd3 7a01 	vldr	s15, [r3, #4]
 800fd7a:	e009      	b.n	800fd90 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x3f0>
 800fd7c:	240091c0 	.word	0x240091c0
 800fd80:	24009180 	.word	0x24009180
 800fd84:	240091f4 	.word	0x240091f4
 800fd88:	240091c4 	.word	0x240091c4
 800fd8c:	240091f8 	.word	0x240091f8
 800fd90:	eef1 7a67 	vneg.f32	s15, s15
	W =
 800fd94:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fd98:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800fd9c:	edc3 7a08 	vstr	s15, [r3, #32]
		-qW.y, qW.x, qW.w
 800fda0:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fda4:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800fda8:	edd3 7a02 	vldr	s15, [r3, #8]
 800fdac:	eef1 7a67 	vneg.f32	s15, s15
	W =
 800fdb0:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fdb4:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800fdb8:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		-qW.y, qW.x, qW.w
 800fdbc:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fdc0:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800fdc4:	685a      	ldr	r2, [r3, #4]
	W =
 800fdc6:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fdca:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800fdce:	629a      	str	r2, [r3, #40]	; 0x28
		-qW.y, qW.x, qW.w
 800fdd0:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fdd4:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800fdd8:	681a      	ldr	r2, [r3, #0]
	W =
 800fdda:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fdde:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800fde2:	62da      	str	r2, [r3, #44]	; 0x2c
 800fde4:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800fde8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800fdec:	4611      	mov	r1, r2
 800fdee:	4618      	mov	r0, r3
 800fdf0:	f001 fb99 	bl	8011526 <_ZN3Mat6MatrixILt4ELt3EEC1ERKSt5arrayIfLj12EE>
 800fdf4:	4ac0      	ldr	r2, [pc, #768]	; (80100f8 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x758>)
 800fdf6:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fdfa:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800fdfe:	4614      	mov	r4, r2
 800fe00:	461d      	mov	r5, r3
 800fe02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fe04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fe06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fe08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fe0a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800fe0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}};

	_Q = W*W.Transposed() * _gyroNoiseVariance;
 800fe12:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fe16:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800fe1a:	49b7      	ldr	r1, [pc, #732]	; (80100f8 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x758>)
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	f001 fb99 	bl	8011554 <_ZNK3Mat6MatrixILt4ELt3EE10TransposedEv>
 800fe22:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fe26:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800fe2a:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800fe2e:	49b2      	ldr	r1, [pc, #712]	; (80100f8 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x758>)
 800fe30:	4618      	mov	r0, r3
 800fe32:	f001 fbbf 	bl	80115b4 <_ZNK3Mat6MatrixILt4ELt3EEmlILt4EEENS0_ILt4EXT_EEERKNS0_ILt3EXT_EEE>
 800fe36:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fe3a:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800fe44:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fe48:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800fe4c:	681c      	ldr	r4, [r3, #0]
 800fe4e:	463b      	mov	r3, r7
 800fe50:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800fe54:	eeb0 0a67 	vmov.f32	s0, s15
 800fe58:	4611      	mov	r1, r2
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	f001 fbbd 	bl	80115da <_ZNK3Mat6MatrixILt4ELt4EEmlEf>
 800fe60:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fe64:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 800fe68:	3464      	adds	r4, #100	; 0x64
 800fe6a:	461d      	mov	r5, r3
 800fe6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fe6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fe70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fe72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fe74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fe76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fe78:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800fe7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	F =
 800fe80:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fe84:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800fe88:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800fe8c:	601a      	str	r2, [r3, #0]
	{{
		1.0f, -hdt*wx, -hdt*wy, -hdt*wz,
 800fe8e:	edd7 7a9f 	vldr	s15, [r7, #636]	; 0x27c
 800fe92:	eeb1 7a67 	vneg.f32	s14, s15
 800fe96:	edd7 7a9e 	vldr	s15, [r7, #632]	; 0x278
 800fe9a:	ee67 7a27 	vmul.f32	s15, s14, s15
	F =
 800fe9e:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fea2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800fea6:	edc3 7a01 	vstr	s15, [r3, #4]
		1.0f, -hdt*wx, -hdt*wy, -hdt*wz,
 800feaa:	edd7 7a9f 	vldr	s15, [r7, #636]	; 0x27c
 800feae:	eeb1 7a67 	vneg.f32	s14, s15
 800feb2:	edd7 7a9d 	vldr	s15, [r7, #628]	; 0x274
 800feb6:	ee67 7a27 	vmul.f32	s15, s14, s15
	F =
 800feba:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800febe:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800fec2:	edc3 7a02 	vstr	s15, [r3, #8]
		1.0f, -hdt*wx, -hdt*wy, -hdt*wz,
 800fec6:	edd7 7a9f 	vldr	s15, [r7, #636]	; 0x27c
 800feca:	eeb1 7a67 	vneg.f32	s14, s15
 800fece:	edd7 7a9c 	vldr	s15, [r7, #624]	; 0x270
 800fed2:	ee67 7a27 	vmul.f32	s15, s14, s15
	F =
 800fed6:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800feda:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800fede:	edc3 7a03 	vstr	s15, [r3, #12]
		hdt*wx, 1.0f, hdt*wz, -hdt*wy,
 800fee2:	ed97 7a9f 	vldr	s14, [r7, #636]	; 0x27c
 800fee6:	edd7 7a9e 	vldr	s15, [r7, #632]	; 0x278
 800feea:	ee67 7a27 	vmul.f32	s15, s14, s15
	F =
 800feee:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fef2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800fef6:	edc3 7a04 	vstr	s15, [r3, #16]
 800fefa:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fefe:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800ff02:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ff06:	615a      	str	r2, [r3, #20]
		hdt*wx, 1.0f, hdt*wz, -hdt*wy,
 800ff08:	ed97 7a9f 	vldr	s14, [r7, #636]	; 0x27c
 800ff0c:	edd7 7a9c 	vldr	s15, [r7, #624]	; 0x270
 800ff10:	ee67 7a27 	vmul.f32	s15, s14, s15
	F =
 800ff14:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800ff18:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800ff1c:	edc3 7a06 	vstr	s15, [r3, #24]
		hdt*wx, 1.0f, hdt*wz, -hdt*wy,
 800ff20:	edd7 7a9f 	vldr	s15, [r7, #636]	; 0x27c
 800ff24:	eeb1 7a67 	vneg.f32	s14, s15
 800ff28:	edd7 7a9d 	vldr	s15, [r7, #628]	; 0x274
 800ff2c:	ee67 7a27 	vmul.f32	s15, s14, s15
	F =
 800ff30:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800ff34:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800ff38:	edc3 7a07 	vstr	s15, [r3, #28]
		hdt*wy, -hdt*wz, 1.0f, hdt*wx,
 800ff3c:	ed97 7a9f 	vldr	s14, [r7, #636]	; 0x27c
 800ff40:	edd7 7a9d 	vldr	s15, [r7, #628]	; 0x274
 800ff44:	ee67 7a27 	vmul.f32	s15, s14, s15
	F =
 800ff48:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800ff4c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800ff50:	edc3 7a08 	vstr	s15, [r3, #32]
		hdt*wy, -hdt*wz, 1.0f, hdt*wx,
 800ff54:	edd7 7a9f 	vldr	s15, [r7, #636]	; 0x27c
 800ff58:	eeb1 7a67 	vneg.f32	s14, s15
 800ff5c:	edd7 7a9c 	vldr	s15, [r7, #624]	; 0x270
 800ff60:	ee67 7a27 	vmul.f32	s15, s14, s15
	F =
 800ff64:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800ff68:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800ff6c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
 800ff70:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800ff74:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800ff78:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ff7c:	629a      	str	r2, [r3, #40]	; 0x28
		hdt*wy, -hdt*wz, 1.0f, hdt*wx,
 800ff7e:	ed97 7a9f 	vldr	s14, [r7, #636]	; 0x27c
 800ff82:	edd7 7a9e 	vldr	s15, [r7, #632]	; 0x278
 800ff86:	ee67 7a27 	vmul.f32	s15, s14, s15
	F =
 800ff8a:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800ff8e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800ff92:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		hdt*wz, hdt*wy, -hdt*wx, 1.0f
 800ff96:	ed97 7a9f 	vldr	s14, [r7, #636]	; 0x27c
 800ff9a:	edd7 7a9c 	vldr	s15, [r7, #624]	; 0x270
 800ff9e:	ee67 7a27 	vmul.f32	s15, s14, s15
	F =
 800ffa2:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800ffa6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800ffaa:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		hdt*wz, hdt*wy, -hdt*wx, 1.0f
 800ffae:	ed97 7a9f 	vldr	s14, [r7, #636]	; 0x27c
 800ffb2:	edd7 7a9d 	vldr	s15, [r7, #628]	; 0x274
 800ffb6:	ee67 7a27 	vmul.f32	s15, s14, s15
	F =
 800ffba:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800ffbe:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800ffc2:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		hdt*wz, hdt*wy, -hdt*wx, 1.0f
 800ffc6:	edd7 7a9f 	vldr	s15, [r7, #636]	; 0x27c
 800ffca:	eeb1 7a67 	vneg.f32	s14, s15
 800ffce:	edd7 7a9e 	vldr	s15, [r7, #632]	; 0x278
 800ffd2:	ee67 7a27 	vmul.f32	s15, s14, s15
	F =
 800ffd6:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800ffda:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800ffde:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
 800ffe2:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800ffe6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800ffea:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ffee:	63da      	str	r2, [r3, #60]	; 0x3c
 800fff0:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 800fff4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fff8:	4611      	mov	r1, r2
 800fffa:	4618      	mov	r0, r3
 800fffc:	f001 fb0c 	bl	8011618 <_ZN3Mat6MatrixILt4ELt4EEC1ERKSt5arrayIfLj16EE>
 8010000:	4a3e      	ldr	r2, [pc, #248]	; (80100fc <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x75c>)
 8010002:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8010006:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 801000a:	4614      	mov	r4, r2
 801000c:	461d      	mov	r5, r3
 801000e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010010:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010012:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010014:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010016:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010018:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801001a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801001e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}};

	_X = newX;
 8010022:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8010026:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	4a34      	ldr	r2, [pc, #208]	; (8010100 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x760>)
 801002e:	461c      	mov	r4, r3
 8010030:	4613      	mov	r3, r2
 8010032:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010034:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	_P = F * _P * F.Transposed() + _Q;
 8010038:	f507 7320 	add.w	r3, r7, #640	; 0x280
 801003c:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	f103 0210 	add.w	r2, r3, #16
 8010046:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 801004a:	492c      	ldr	r1, [pc, #176]	; (80100fc <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x75c>)
 801004c:	4618      	mov	r0, r3
 801004e:	f001 fafc 	bl	801164a <_ZNK3Mat6MatrixILt4ELt4EEmlILt4EEENS0_ILt4EXT_EEERKS3_>
 8010052:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8010056:	4929      	ldr	r1, [pc, #164]	; (80100fc <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x75c>)
 8010058:	4618      	mov	r0, r3
 801005a:	f001 fb09 	bl	8011670 <_ZNK3Mat6MatrixILt4ELt4EE10TransposedEv>
 801005e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8010062:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8010066:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 801006a:	4618      	mov	r0, r3
 801006c:	f001 faed 	bl	801164a <_ZNK3Mat6MatrixILt4ELt4EEmlILt4EEENS0_ILt4EXT_EEERKS3_>
 8010070:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8010074:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	f103 0264 	add.w	r2, r3, #100	; 0x64
 801007e:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8010082:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8010086:	681c      	ldr	r4, [r3, #0]
 8010088:	463b      	mov	r3, r7
 801008a:	f507 71d8 	add.w	r1, r7, #432	; 0x1b0
 801008e:	4618      	mov	r0, r3
 8010090:	f001 fb1e 	bl	80116d0 <_ZNK3Mat6MatrixILt4ELt4EEplERKS1_>
 8010094:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8010098:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 801009c:	3410      	adds	r4, #16
 801009e:	461d      	mov	r5, r3
 80100a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80100a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80100a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80100a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80100a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80100aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80100ac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80100b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	_X = _X.Normalised();
 80100b4:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80100b8:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 80100bc:	681a      	ldr	r2, [r3, #0]
 80100be:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80100c2:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 80100c6:	681c      	ldr	r4, [r3, #0]
 80100c8:	4610      	mov	r0, r2
 80100ca:	f005 fa63 	bl	8015594 <_ZNK3Mat10Quaternion10NormalisedEv>
 80100ce:	eeb0 6a40 	vmov.f32	s12, s0
 80100d2:	eef0 6a60 	vmov.f32	s13, s1
 80100d6:	eeb0 7a41 	vmov.f32	s14, s2
 80100da:	eef0 7a61 	vmov.f32	s15, s3
 80100de:	ed84 6a00 	vstr	s12, [r4]
 80100e2:	edc4 6a01 	vstr	s13, [r4, #4]
 80100e6:	ed84 7a02 	vstr	s14, [r4, #8]
 80100ea:	edc4 7a03 	vstr	s15, [r4, #12]
}
 80100ee:	bf00      	nop
 80100f0:	f507 7720 	add.w	r7, r7, #640	; 0x280
 80100f4:	46bd      	mov	sp, r7
 80100f6:	bdb0      	pop	{r4, r5, r7, pc}
 80100f8:	240091c4 	.word	0x240091c4
 80100fc:	24009180 	.word	0x24009180
 8010100:	240091f8 	.word	0x240091f8

08010104 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf>:

void AHRSKalman::CorrectStateMag(const Matrix<3, 1>& mag, float time)
{
 8010104:	b5b0      	push	{r4, r5, r7, lr}
 8010106:	ed2d 8b02 	vpush	{d8}
 801010a:	f5ad 7d1c 	sub.w	sp, sp, #624	; 0x270
 801010e:	af00      	add	r7, sp, #0
 8010110:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010114:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010118:	6018      	str	r0, [r3, #0]
 801011a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801011e:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8010122:	6019      	str	r1, [r3, #0]
 8010124:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010128:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 801012c:	ed83 0a00 	vstr	s0, [r3]
	const float dip = 0.6f;
 8010130:	4b80      	ldr	r3, [pc, #512]	; (8010334 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x230>)
 8010132:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
	static const float ry{cos(dip)}, rz{-sin(dip)};
	static Matrix<3, 1> Z;
 8010136:	4b80      	ldr	r3, [pc, #512]	; (8010338 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x234>)
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	f3bf 8f5b 	dmb	ish
 801013e:	f003 0301 	and.w	r3, r3, #1
 8010142:	2b00      	cmp	r3, #0
 8010144:	bf0c      	ite	eq
 8010146:	2301      	moveq	r3, #1
 8010148:	2300      	movne	r3, #0
 801014a:	b2db      	uxtb	r3, r3
 801014c:	2b00      	cmp	r3, #0
 801014e:	d010      	beq.n	8010172 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x6e>
 8010150:	4879      	ldr	r0, [pc, #484]	; (8010338 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x234>)
 8010152:	f009 f865 	bl	8019220 <__cxa_guard_acquire>
 8010156:	4603      	mov	r3, r0
 8010158:	2b00      	cmp	r3, #0
 801015a:	bf14      	ite	ne
 801015c:	2301      	movne	r3, #1
 801015e:	2300      	moveq	r3, #0
 8010160:	b2db      	uxtb	r3, r3
 8010162:	2b00      	cmp	r3, #0
 8010164:	d005      	beq.n	8010172 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x6e>
 8010166:	4875      	ldr	r0, [pc, #468]	; (801033c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x238>)
 8010168:	f7fd fbe3 	bl	800d932 <_ZN3Mat6MatrixILt3ELt1EEC1Ev>
 801016c:	4872      	ldr	r0, [pc, #456]	; (8010338 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x234>)
 801016e:	f009 f863 	bl	8019238 <__cxa_guard_release>
	static Matrix<3, 1> h;
 8010172:	4b73      	ldr	r3, [pc, #460]	; (8010340 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x23c>)
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	f3bf 8f5b 	dmb	ish
 801017a:	f003 0301 	and.w	r3, r3, #1
 801017e:	2b00      	cmp	r3, #0
 8010180:	bf0c      	ite	eq
 8010182:	2301      	moveq	r3, #1
 8010184:	2300      	movne	r3, #0
 8010186:	b2db      	uxtb	r3, r3
 8010188:	2b00      	cmp	r3, #0
 801018a:	d010      	beq.n	80101ae <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xaa>
 801018c:	486c      	ldr	r0, [pc, #432]	; (8010340 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x23c>)
 801018e:	f009 f847 	bl	8019220 <__cxa_guard_acquire>
 8010192:	4603      	mov	r3, r0
 8010194:	2b00      	cmp	r3, #0
 8010196:	bf14      	ite	ne
 8010198:	2301      	movne	r3, #1
 801019a:	2300      	moveq	r3, #0
 801019c:	b2db      	uxtb	r3, r3
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d005      	beq.n	80101ae <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xaa>
 80101a2:	4868      	ldr	r0, [pc, #416]	; (8010344 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x240>)
 80101a4:	f7fd fbc5 	bl	800d932 <_ZN3Mat6MatrixILt3ELt1EEC1Ev>
 80101a8:	4865      	ldr	r0, [pc, #404]	; (8010340 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x23c>)
 80101aa:	f009 f845 	bl	8019238 <__cxa_guard_release>
	static Matrix<3, 4> H;
 80101ae:	4b66      	ldr	r3, [pc, #408]	; (8010348 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x244>)
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	f3bf 8f5b 	dmb	ish
 80101b6:	f003 0301 	and.w	r3, r3, #1
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	bf0c      	ite	eq
 80101be:	2301      	moveq	r3, #1
 80101c0:	2300      	movne	r3, #0
 80101c2:	b2db      	uxtb	r3, r3
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d010      	beq.n	80101ea <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xe6>
 80101c8:	485f      	ldr	r0, [pc, #380]	; (8010348 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x244>)
 80101ca:	f009 f829 	bl	8019220 <__cxa_guard_acquire>
 80101ce:	4603      	mov	r3, r0
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	bf14      	ite	ne
 80101d4:	2301      	movne	r3, #1
 80101d6:	2300      	moveq	r3, #0
 80101d8:	b2db      	uxtb	r3, r3
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d005      	beq.n	80101ea <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xe6>
 80101de:	485b      	ldr	r0, [pc, #364]	; (801034c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x248>)
 80101e0:	f001 fa93 	bl	801170a <_ZN3Mat6MatrixILt3ELt4EEC1Ev>
 80101e4:	4858      	ldr	r0, [pc, #352]	; (8010348 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x244>)
 80101e6:	f009 f827 	bl	8019238 <__cxa_guard_release>
	static Matrix<4, 3> K;
 80101ea:	4b59      	ldr	r3, [pc, #356]	; (8010350 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x24c>)
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	f3bf 8f5b 	dmb	ish
 80101f2:	f003 0301 	and.w	r3, r3, #1
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	bf0c      	ite	eq
 80101fa:	2301      	moveq	r3, #1
 80101fc:	2300      	movne	r3, #0
 80101fe:	b2db      	uxtb	r3, r3
 8010200:	2b00      	cmp	r3, #0
 8010202:	d010      	beq.n	8010226 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x122>
 8010204:	4852      	ldr	r0, [pc, #328]	; (8010350 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x24c>)
 8010206:	f009 f80b 	bl	8019220 <__cxa_guard_acquire>
 801020a:	4603      	mov	r3, r0
 801020c:	2b00      	cmp	r3, #0
 801020e:	bf14      	ite	ne
 8010210:	2301      	movne	r3, #1
 8010212:	2300      	moveq	r3, #0
 8010214:	b2db      	uxtb	r3, r3
 8010216:	2b00      	cmp	r3, #0
 8010218:	d005      	beq.n	8010226 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x122>
 801021a:	484e      	ldr	r0, [pc, #312]	; (8010354 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x250>)
 801021c:	f001 f978 	bl	8011510 <_ZN3Mat6MatrixILt4ELt3EEC1Ev>
 8010220:	484b      	ldr	r0, [pc, #300]	; (8010350 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x24c>)
 8010222:	f009 f809 	bl	8019238 <__cxa_guard_release>
	static const Matrix<3, 3> R = Eye<3>(_magNoiseVariance);
 8010226:	4b4c      	ldr	r3, [pc, #304]	; (8010358 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x254>)
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	f3bf 8f5b 	dmb	ish
 801022e:	f003 0301 	and.w	r3, r3, #1
 8010232:	2b00      	cmp	r3, #0
 8010234:	bf0c      	ite	eq
 8010236:	2301      	moveq	r3, #1
 8010238:	2300      	movne	r3, #0
 801023a:	b2db      	uxtb	r3, r3
 801023c:	2b00      	cmp	r3, #0
 801023e:	d01a      	beq.n	8010276 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x172>
 8010240:	4845      	ldr	r0, [pc, #276]	; (8010358 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x254>)
 8010242:	f008 ffed 	bl	8019220 <__cxa_guard_acquire>
 8010246:	4603      	mov	r3, r0
 8010248:	2b00      	cmp	r3, #0
 801024a:	bf14      	ite	ne
 801024c:	2301      	movne	r3, #1
 801024e:	2300      	moveq	r3, #0
 8010250:	b2db      	uxtb	r3, r3
 8010252:	2b00      	cmp	r3, #0
 8010254:	d00f      	beq.n	8010276 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x172>
 8010256:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801025a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8010264:	4b3d      	ldr	r3, [pc, #244]	; (801035c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x258>)
 8010266:	eeb0 0a67 	vmov.f32	s0, s15
 801026a:	4618      	mov	r0, r3
 801026c:	f7fd f9e0 	bl	800d630 <_ZN3Mat3EyeILt3EEENS_6MatrixIXT_EXT_EEEf>
 8010270:	4839      	ldr	r0, [pc, #228]	; (8010358 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x254>)
 8010272:	f008 ffe1 	bl	8019238 <__cxa_guard_release>
	static Matrix<3, 3> S;
 8010276:	4b3a      	ldr	r3, [pc, #232]	; (8010360 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x25c>)
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	f3bf 8f5b 	dmb	ish
 801027e:	f003 0301 	and.w	r3, r3, #1
 8010282:	2b00      	cmp	r3, #0
 8010284:	bf0c      	ite	eq
 8010286:	2301      	moveq	r3, #1
 8010288:	2300      	movne	r3, #0
 801028a:	b2db      	uxtb	r3, r3
 801028c:	2b00      	cmp	r3, #0
 801028e:	d010      	beq.n	80102b2 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x1ae>
 8010290:	4833      	ldr	r0, [pc, #204]	; (8010360 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x25c>)
 8010292:	f008 ffc5 	bl	8019220 <__cxa_guard_acquire>
 8010296:	4603      	mov	r3, r0
 8010298:	2b00      	cmp	r3, #0
 801029a:	bf14      	ite	ne
 801029c:	2301      	movne	r3, #1
 801029e:	2300      	moveq	r3, #0
 80102a0:	b2db      	uxtb	r3, r3
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d005      	beq.n	80102b2 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x1ae>
 80102a6:	482f      	ldr	r0, [pc, #188]	; (8010364 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x260>)
 80102a8:	f7fd f992 	bl	800d5d0 <_ZN3Mat6MatrixILt3ELt3EEC1Ev>
 80102ac:	482c      	ldr	r0, [pc, #176]	; (8010360 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x25c>)
 80102ae:	f008 ffc3 	bl	8019238 <__cxa_guard_release>
	static Matrix<4, 4> I = Eye<4>(1.0f);
 80102b2:	4b2d      	ldr	r3, [pc, #180]	; (8010368 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x264>)
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	f3bf 8f5b 	dmb	ish
 80102ba:	f003 0301 	and.w	r3, r3, #1
 80102be:	2b00      	cmp	r3, #0
 80102c0:	bf0c      	ite	eq
 80102c2:	2301      	moveq	r3, #1
 80102c4:	2300      	movne	r3, #0
 80102c6:	b2db      	uxtb	r3, r3
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d013      	beq.n	80102f4 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x1f0>
 80102cc:	4826      	ldr	r0, [pc, #152]	; (8010368 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x264>)
 80102ce:	f008 ffa7 	bl	8019220 <__cxa_guard_acquire>
 80102d2:	4603      	mov	r3, r0
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	bf14      	ite	ne
 80102d8:	2301      	movne	r3, #1
 80102da:	2300      	moveq	r3, #0
 80102dc:	b2db      	uxtb	r3, r3
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d008      	beq.n	80102f4 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x1f0>
 80102e2:	4b22      	ldr	r3, [pc, #136]	; (801036c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x268>)
 80102e4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80102e8:	4618      	mov	r0, r3
 80102ea:	f7fd f8f5 	bl	800d4d8 <_ZN3Mat3EyeILt4EEENS_6MatrixIXT_EXT_EEEf>
 80102ee:	481e      	ldr	r0, [pc, #120]	; (8010368 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x264>)
 80102f0:	f008 ffa2 	bl	8019238 <__cxa_guard_release>
	static Matrix<4, 1> res;
 80102f4:	4b1e      	ldr	r3, [pc, #120]	; (8010370 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x26c>)
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	f3bf 8f5b 	dmb	ish
 80102fc:	f003 0301 	and.w	r3, r3, #1
 8010300:	2b00      	cmp	r3, #0
 8010302:	bf0c      	ite	eq
 8010304:	2301      	moveq	r3, #1
 8010306:	2300      	movne	r3, #0
 8010308:	b2db      	uxtb	r3, r3
 801030a:	2b00      	cmp	r3, #0
 801030c:	d034      	beq.n	8010378 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x274>
 801030e:	4818      	ldr	r0, [pc, #96]	; (8010370 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x26c>)
 8010310:	f008 ff86 	bl	8019220 <__cxa_guard_acquire>
 8010314:	4603      	mov	r3, r0
 8010316:	2b00      	cmp	r3, #0
 8010318:	bf14      	ite	ne
 801031a:	2301      	movne	r3, #1
 801031c:	2300      	moveq	r3, #0
 801031e:	b2db      	uxtb	r3, r3
 8010320:	2b00      	cmp	r3, #0
 8010322:	d029      	beq.n	8010378 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x274>
 8010324:	4813      	ldr	r0, [pc, #76]	; (8010374 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x270>)
 8010326:	f001 f9fb 	bl	8011720 <_ZN3Mat6MatrixILt4ELt1EEC1Ev>
 801032a:	4811      	ldr	r0, [pc, #68]	; (8010370 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x26c>)
 801032c:	f008 ff84 	bl	8019238 <__cxa_guard_release>
 8010330:	e022      	b.n	8010378 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x274>
 8010332:	bf00      	nop
 8010334:	3f19999a 	.word	0x3f19999a
 8010338:	24009214 	.word	0x24009214
 801033c:	24009208 	.word	0x24009208
 8010340:	24009224 	.word	0x24009224
 8010344:	24009218 	.word	0x24009218
 8010348:	24009258 	.word	0x24009258
 801034c:	24009228 	.word	0x24009228
 8010350:	2400928c 	.word	0x2400928c
 8010354:	2400925c 	.word	0x2400925c
 8010358:	240092b4 	.word	0x240092b4
 801035c:	24009290 	.word	0x24009290
 8010360:	240092dc 	.word	0x240092dc
 8010364:	240092b8 	.word	0x240092b8
 8010368:	24009320 	.word	0x24009320
 801036c:	240092e0 	.word	0x240092e0
 8010370:	24009334 	.word	0x24009334
 8010374:	24009324 	.word	0x24009324
	static Quaternion add;
	float md = 1.0f / sqrt(mag(0,0)*mag(0,0) + mag(1,0)*mag(1,0) + mag(2,0)*mag(2,0));
 8010378:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801037c:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8010380:	2200      	movs	r2, #0
 8010382:	2100      	movs	r1, #0
 8010384:	6818      	ldr	r0, [r3, #0]
 8010386:	f7fd fd66 	bl	800de56 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 801038a:	eeb0 8a40 	vmov.f32	s16, s0
 801038e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010392:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8010396:	2200      	movs	r2, #0
 8010398:	2100      	movs	r1, #0
 801039a:	6818      	ldr	r0, [r3, #0]
 801039c:	f7fd fd5b 	bl	800de56 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 80103a0:	eef0 7a40 	vmov.f32	s15, s0
 80103a4:	ee28 8a27 	vmul.f32	s16, s16, s15
 80103a8:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80103ac:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80103b0:	2200      	movs	r2, #0
 80103b2:	2101      	movs	r1, #1
 80103b4:	6818      	ldr	r0, [r3, #0]
 80103b6:	f7fd fd4e 	bl	800de56 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 80103ba:	eef0 8a40 	vmov.f32	s17, s0
 80103be:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80103c2:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80103c6:	2200      	movs	r2, #0
 80103c8:	2101      	movs	r1, #1
 80103ca:	6818      	ldr	r0, [r3, #0]
 80103cc:	f7fd fd43 	bl	800de56 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 80103d0:	eef0 7a40 	vmov.f32	s15, s0
 80103d4:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80103d8:	ee38 8a27 	vadd.f32	s16, s16, s15
 80103dc:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80103e0:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80103e4:	2200      	movs	r2, #0
 80103e6:	2102      	movs	r1, #2
 80103e8:	6818      	ldr	r0, [r3, #0]
 80103ea:	f7fd fd34 	bl	800de56 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 80103ee:	eef0 8a40 	vmov.f32	s17, s0
 80103f2:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80103f6:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80103fa:	2200      	movs	r2, #0
 80103fc:	2102      	movs	r1, #2
 80103fe:	6818      	ldr	r0, [r3, #0]
 8010400:	f7fd fd29 	bl	800de56 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8010404:	eef0 7a40 	vmov.f32	s15, s0
 8010408:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801040c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8010410:	eeb0 0a67 	vmov.f32	s0, s15
 8010414:	f7fe febc 	bl	800f190 <_ZSt4sqrtf>
 8010418:	eeb0 7a40 	vmov.f32	s14, s0
 801041c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010420:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010424:	edc7 7a9a 	vstr	s15, [r7, #616]	; 0x268

	Z =
	{{
		mag(0,0)*md,
 8010428:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801042c:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8010430:	2200      	movs	r2, #0
 8010432:	2100      	movs	r1, #0
 8010434:	6818      	ldr	r0, [r3, #0]
 8010436:	f7fd fd0e 	bl	800de56 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 801043a:	eeb0 7a40 	vmov.f32	s14, s0
 801043e:	edd7 7a9a 	vldr	s15, [r7, #616]	; 0x268
 8010442:	ee67 7a27 	vmul.f32	s15, s14, s15
	Z =
 8010446:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801044a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 801044e:	edc3 7a00 	vstr	s15, [r3]
		mag(1,0)*md,
 8010452:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010456:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 801045a:	2200      	movs	r2, #0
 801045c:	2101      	movs	r1, #1
 801045e:	6818      	ldr	r0, [r3, #0]
 8010460:	f7fd fcf9 	bl	800de56 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8010464:	eeb0 7a40 	vmov.f32	s14, s0
 8010468:	edd7 7a9a 	vldr	s15, [r7, #616]	; 0x268
 801046c:	ee67 7a27 	vmul.f32	s15, s14, s15
	Z =
 8010470:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010474:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8010478:	edc3 7a01 	vstr	s15, [r3, #4]
		mag(2,0)*md
 801047c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010480:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8010484:	2200      	movs	r2, #0
 8010486:	2102      	movs	r1, #2
 8010488:	6818      	ldr	r0, [r3, #0]
 801048a:	f7fd fce4 	bl	800de56 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 801048e:	eeb0 7a40 	vmov.f32	s14, s0
 8010492:	edd7 7a9a 	vldr	s15, [r7, #616]	; 0x268
 8010496:	ee67 7a27 	vmul.f32	s15, s14, s15
	Z =
 801049a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801049e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80104a2:	edc3 7a02 	vstr	s15, [r3, #8]
 80104a6:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80104aa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80104ae:	4611      	mov	r1, r2
 80104b0:	4618      	mov	r0, r3
 80104b2:	f7fd f8ed 	bl	800d690 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
 80104b6:	49ea      	ldr	r1, [pc, #936]	; (8010860 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x75c>)
 80104b8:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80104bc:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 80104c0:	460b      	mov	r3, r1
 80104c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80104c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	}};

	h =
	{{
		2.0f*(ry*(_X.w*_X.z + _X.x*_X.y) + rz*(_X.x*_X.z - _X.w*_X.y)),
 80104c8:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80104cc:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	ed93 7a00 	vldr	s14, [r3]
 80104d6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80104da:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	edd3 7a03 	vldr	s15, [r3, #12]
 80104e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80104e8:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80104ec:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	edd3 6a01 	vldr	s13, [r3, #4]
 80104f6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80104fa:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	edd3 7a02 	vldr	s15, [r3, #8]
 8010504:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010508:	ee77 7a27 	vadd.f32	s15, s14, s15
 801050c:	ed9f 7ad5 	vldr	s14, [pc, #852]	; 8010864 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x760>
 8010510:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010514:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010518:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	edd3 6a01 	vldr	s13, [r3, #4]
 8010522:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010526:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	edd3 7a03 	vldr	s15, [r3, #12]
 8010530:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8010534:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010538:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	ed93 6a00 	vldr	s12, [r3]
 8010542:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010546:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	edd3 7a02 	vldr	s15, [r3, #8]
 8010550:	ee66 7a27 	vmul.f32	s15, s12, s15
 8010554:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8010558:	eddf 6ac3 	vldr	s13, [pc, #780]	; 8010868 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x764>
 801055c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010560:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010564:	ee77 7aa7 	vadd.f32	s15, s15, s15
	h =
 8010568:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801056c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8010570:	edc3 7a00 	vstr	s15, [r3]
		2.0f*(ry*(0.5f - _X.x*_X.x - _X.z*_X.z) + rz*(_X.w*_X.x + _X.y*_X.z)),
 8010574:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010578:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	ed93 7a01 	vldr	s14, [r3, #4]
 8010582:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010586:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	edd3 7a01 	vldr	s15, [r3, #4]
 8010590:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010594:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8010598:	ee37 7a67 	vsub.f32	s14, s14, s15
 801059c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80105a0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	edd3 6a03 	vldr	s13, [r3, #12]
 80105aa:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80105ae:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	edd3 7a03 	vldr	s15, [r3, #12]
 80105b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80105bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80105c0:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 8010864 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x760>
 80105c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80105c8:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80105cc:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	edd3 6a00 	vldr	s13, [r3]
 80105d6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80105da:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	edd3 7a01 	vldr	s15, [r3, #4]
 80105e4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80105e8:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80105ec:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	ed93 6a02 	vldr	s12, [r3, #8]
 80105f6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80105fa:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	edd3 7a03 	vldr	s15, [r3, #12]
 8010604:	ee66 7a27 	vmul.f32	s15, s12, s15
 8010608:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801060c:	eddf 6a96 	vldr	s13, [pc, #600]	; 8010868 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x764>
 8010610:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010614:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010618:	ee77 7aa7 	vadd.f32	s15, s15, s15
	h =
 801061c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010620:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8010624:	edc3 7a01 	vstr	s15, [r3, #4]
		2.0f*(ry*(_X.y*_X.z - _X.w*_X.x) + rz*(0.5f - _X.x*_X.x - _X.y*_X.y))
 8010628:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801062c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	ed93 7a02 	vldr	s14, [r3, #8]
 8010636:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801063a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	edd3 7a03 	vldr	s15, [r3, #12]
 8010644:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010648:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801064c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	edd3 6a00 	vldr	s13, [r3]
 8010656:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801065a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	edd3 7a01 	vldr	s15, [r3, #4]
 8010664:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010668:	ee77 7a67 	vsub.f32	s15, s14, s15
 801066c:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8010864 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x760>
 8010670:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010674:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010678:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	edd3 6a01 	vldr	s13, [r3, #4]
 8010682:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010686:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	edd3 7a01 	vldr	s15, [r3, #4]
 8010690:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010694:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8010698:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801069c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80106a0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	ed93 6a02 	vldr	s12, [r3, #8]
 80106aa:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80106ae:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	edd3 7a02 	vldr	s15, [r3, #8]
 80106b8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80106bc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80106c0:	eddf 6a69 	vldr	s13, [pc, #420]	; 8010868 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x764>
 80106c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80106c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80106cc:	ee77 7aa7 	vadd.f32	s15, s15, s15
	h =
 80106d0:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80106d4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80106d8:	edc3 7a02 	vstr	s15, [r3, #8]
 80106dc:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80106e0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80106e4:	4611      	mov	r1, r2
 80106e6:	4618      	mov	r0, r3
 80106e8:	f7fc ffd2 	bl	800d690 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
 80106ec:	495f      	ldr	r1, [pc, #380]	; (801086c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x768>)
 80106ee:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80106f2:	f5a3 72f8 	sub.w	r2, r3, #496	; 0x1f0
 80106f6:	460b      	mov	r3, r1
 80106f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80106fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	}};

	H =
	{{
		2.0f*ry*_X.z - 2.0f*rz*_X.y, 2.0f*ry*_X.z + 2.0f*rz*_X.z, 2.0f*ry*_X.x - 2.0f*rz*_X.w, 2.0f*ry*_X.w + 2.0f*rz*_X.x,
 80106fe:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010702:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	edd3 7a03 	vldr	s15, [r3, #12]
 801070c:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8010878 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x774>
 8010710:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010714:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010718:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	edd3 7a02 	vldr	s15, [r3, #8]
 8010722:	eddf 6a54 	vldr	s13, [pc, #336]	; 8010874 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x770>
 8010726:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801072a:	ee77 7a27 	vadd.f32	s15, s14, s15
	H =
 801072e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010732:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8010736:	edc3 7a00 	vstr	s15, [r3]
		2.0f*ry*_X.z - 2.0f*rz*_X.y, 2.0f*ry*_X.z + 2.0f*rz*_X.z, 2.0f*ry*_X.x - 2.0f*rz*_X.w, 2.0f*ry*_X.w + 2.0f*rz*_X.x,
 801073a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801073e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	edd3 7a03 	vldr	s15, [r3, #12]
 8010748:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8010878 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x774>
 801074c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010750:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010754:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	edd3 7a03 	vldr	s15, [r3, #12]
 801075e:	eddf 6a47 	vldr	s13, [pc, #284]	; 801087c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x778>
 8010762:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010766:	ee77 7a27 	vadd.f32	s15, s14, s15
	H =
 801076a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801076e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8010772:	edc3 7a01 	vstr	s15, [r3, #4]
		2.0f*ry*_X.z - 2.0f*rz*_X.y, 2.0f*ry*_X.z + 2.0f*rz*_X.z, 2.0f*ry*_X.x - 2.0f*rz*_X.w, 2.0f*ry*_X.w + 2.0f*rz*_X.x,
 8010776:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801077a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	edd3 7a01 	vldr	s15, [r3, #4]
 8010784:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8010878 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x774>
 8010788:	ee27 7a87 	vmul.f32	s14, s15, s14
 801078c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010790:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	edd3 7a00 	vldr	s15, [r3]
 801079a:	eddf 6a36 	vldr	s13, [pc, #216]	; 8010874 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x770>
 801079e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80107a2:	ee77 7a27 	vadd.f32	s15, s14, s15
	H =
 80107a6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80107aa:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80107ae:	edc3 7a02 	vstr	s15, [r3, #8]
		2.0f*ry*_X.z - 2.0f*rz*_X.y, 2.0f*ry*_X.z + 2.0f*rz*_X.z, 2.0f*ry*_X.x - 2.0f*rz*_X.w, 2.0f*ry*_X.w + 2.0f*rz*_X.x,
 80107b2:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80107b6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	edd3 7a00 	vldr	s15, [r3]
 80107c0:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8010878 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x774>
 80107c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80107c8:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80107cc:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	edd3 7a01 	vldr	s15, [r3, #4]
 80107d6:	eddf 6a29 	vldr	s13, [pc, #164]	; 801087c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x778>
 80107da:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80107de:	ee77 7a27 	vadd.f32	s15, s14, s15
	H =
 80107e2:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80107e6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80107ea:	edc3 7a03 	vstr	s15, [r3, #12]
		2.0f*ry*_X.w + 2.0f*rz*_X.x, -2.0f*ry*_X.x + 2.0f*rz*_X.w, 2.0f*ry*_X.y + 2.0f*rz*_X.z, -2.0f*ry*_X.z + 2.0f*rz*_X.y,
 80107ee:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80107f2:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	edd3 7a00 	vldr	s15, [r3]
 80107fc:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8010878 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x774>
 8010800:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010804:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010808:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	edd3 7a01 	vldr	s15, [r3, #4]
 8010812:	eddf 6a1a 	vldr	s13, [pc, #104]	; 801087c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x778>
 8010816:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801081a:	ee77 7a27 	vadd.f32	s15, s14, s15
	H =
 801081e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010822:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8010826:	edc3 7a04 	vstr	s15, [r3, #16]
		2.0f*ry*_X.w + 2.0f*rz*_X.x, -2.0f*ry*_X.x + 2.0f*rz*_X.w, 2.0f*ry*_X.y + 2.0f*rz*_X.z, -2.0f*ry*_X.z + 2.0f*rz*_X.y,
 801082a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801082e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	edd3 7a01 	vldr	s15, [r3, #4]
 8010838:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8010870 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x76c>
 801083c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010840:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010844:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	edd3 7a00 	vldr	s15, [r3]
 801084e:	eddf 6a0b 	vldr	s13, [pc, #44]	; 801087c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x778>
 8010852:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010856:	ee77 7a27 	vadd.f32	s15, s14, s15
	H =
 801085a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801085e:	e00f      	b.n	8010880 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x77c>
 8010860:	24009208 	.word	0x24009208
 8010864:	3f534932 	.word	0x3f534932
 8010868:	bf108c69 	.word	0xbf108c69
 801086c:	24009218 	.word	0x24009218
 8010870:	bfd34932 	.word	0xbfd34932
 8010874:	3f908c69 	.word	0x3f908c69
 8010878:	3fd34932 	.word	0x3fd34932
 801087c:	bf908c69 	.word	0xbf908c69
 8010880:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8010884:	edc3 7a05 	vstr	s15, [r3, #20]
		2.0f*ry*_X.w + 2.0f*rz*_X.x, -2.0f*ry*_X.x + 2.0f*rz*_X.w, 2.0f*ry*_X.y + 2.0f*rz*_X.z, -2.0f*ry*_X.z + 2.0f*rz*_X.y,
 8010888:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801088c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	edd3 7a02 	vldr	s15, [r3, #8]
 8010896:	ed1f 7a08 	vldr	s14, [pc, #-32]	; 8010878 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x774>
 801089a:	ee27 7a87 	vmul.f32	s14, s15, s14
 801089e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80108a2:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	edd3 7a03 	vldr	s15, [r3, #12]
 80108ac:	ed5f 6a0d 	vldr	s13, [pc, #-52]	; 801087c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x778>
 80108b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80108b4:	ee77 7a27 	vadd.f32	s15, s14, s15
	H =
 80108b8:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80108bc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80108c0:	edc3 7a06 	vstr	s15, [r3, #24]
		2.0f*ry*_X.w + 2.0f*rz*_X.x, -2.0f*ry*_X.x + 2.0f*rz*_X.w, 2.0f*ry*_X.y + 2.0f*rz*_X.z, -2.0f*ry*_X.z + 2.0f*rz*_X.y,
 80108c4:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80108c8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	edd3 7a03 	vldr	s15, [r3, #12]
 80108d2:	ed1f 7a19 	vldr	s14, [pc, #-100]	; 8010870 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x76c>
 80108d6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80108da:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80108de:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	edd3 7a02 	vldr	s15, [r3, #8]
 80108e8:	ed5f 6a1c 	vldr	s13, [pc, #-112]	; 801087c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x778>
 80108ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80108f0:	ee77 7a27 	vadd.f32	s15, s14, s15
	H =
 80108f4:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80108f8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80108fc:	edc3 7a07 	vstr	s15, [r3, #28]
		-2.0f*ry*_X.x + 2.0f*rz*_X.w, -2.0f*ry*_X.w - 2.0f*rz*_X.x, 2.0f*ry*_X.z - 2.0f*rz*_X.y, 2.0f*ry*_X.y + 2.0f*rz*_X.z
 8010900:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010904:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	edd3 7a01 	vldr	s15, [r3, #4]
 801090e:	ed1f 7a28 	vldr	s14, [pc, #-160]	; 8010870 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x76c>
 8010912:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010916:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801091a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	edd3 7a00 	vldr	s15, [r3]
 8010924:	ed5f 6a2b 	vldr	s13, [pc, #-172]	; 801087c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x778>
 8010928:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801092c:	ee77 7a27 	vadd.f32	s15, s14, s15
	H =
 8010930:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010934:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8010938:	edc3 7a08 	vstr	s15, [r3, #32]
		-2.0f*ry*_X.x + 2.0f*rz*_X.w, -2.0f*ry*_X.w - 2.0f*rz*_X.x, 2.0f*ry*_X.z - 2.0f*rz*_X.y, 2.0f*ry*_X.y + 2.0f*rz*_X.z
 801093c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010940:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	edd3 7a00 	vldr	s15, [r3]
 801094a:	ed1f 7a37 	vldr	s14, [pc, #-220]	; 8010870 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x76c>
 801094e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010952:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010956:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	edd3 7a01 	vldr	s15, [r3, #4]
 8010960:	ed5f 6a3c 	vldr	s13, [pc, #-240]	; 8010874 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x770>
 8010964:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010968:	ee77 7a27 	vadd.f32	s15, s14, s15
	H =
 801096c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010970:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8010974:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		-2.0f*ry*_X.x + 2.0f*rz*_X.w, -2.0f*ry*_X.w - 2.0f*rz*_X.x, 2.0f*ry*_X.z - 2.0f*rz*_X.y, 2.0f*ry*_X.y + 2.0f*rz*_X.z
 8010978:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801097c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	edd3 7a03 	vldr	s15, [r3, #12]
 8010986:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 8010878 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x774>
 801098a:	ee27 7a87 	vmul.f32	s14, s15, s14
 801098e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010992:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	edd3 7a02 	vldr	s15, [r3, #8]
 801099c:	ed5f 6a4b 	vldr	s13, [pc, #-300]	; 8010874 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x770>
 80109a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80109a4:	ee77 7a27 	vadd.f32	s15, s14, s15
	H =
 80109a8:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80109ac:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80109b0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		-2.0f*ry*_X.x + 2.0f*rz*_X.w, -2.0f*ry*_X.w - 2.0f*rz*_X.x, 2.0f*ry*_X.z - 2.0f*rz*_X.y, 2.0f*ry*_X.y + 2.0f*rz*_X.z
 80109b4:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80109b8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	edd3 7a02 	vldr	s15, [r3, #8]
 80109c2:	ed1f 7a53 	vldr	s14, [pc, #-332]	; 8010878 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x774>
 80109c6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80109ca:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80109ce:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	edd3 7a03 	vldr	s15, [r3, #12]
 80109d8:	ed5f 6a58 	vldr	s13, [pc, #-352]	; 801087c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x778>
 80109dc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80109e0:	ee77 7a27 	vadd.f32	s15, s14, s15
	H =
 80109e4:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80109e8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80109ec:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
 80109f0:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 80109f4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80109f8:	4611      	mov	r1, r2
 80109fa:	4618      	mov	r0, r3
 80109fc:	f000 fe9b 	bl	8011736 <_ZN3Mat6MatrixILt3ELt4EEC1ERKSt5arrayIfLj12EE>
 8010a00:	4a89      	ldr	r2, [pc, #548]	; (8010c28 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb24>)
 8010a02:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010a06:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8010a0a:	4614      	mov	r4, r2
 8010a0c:	461d      	mov	r5, r3
 8010a0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010a10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010a12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010a14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010a16:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8010a1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}};

	S = H*_P*H.Transposed() + R;
 8010a1e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010a22:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	f103 0210 	add.w	r2, r3, #16
 8010a2c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010a30:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8010a34:	497c      	ldr	r1, [pc, #496]	; (8010c28 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb24>)
 8010a36:	4618      	mov	r0, r3
 8010a38:	f000 fe94 	bl	8011764 <_ZNK3Mat6MatrixILt3ELt4EEmlILt4EEENS0_ILt3EXT_EEERKNS0_ILt4EXT_EEE>
 8010a3c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010a40:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8010a44:	4978      	ldr	r1, [pc, #480]	; (8010c28 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb24>)
 8010a46:	4618      	mov	r0, r3
 8010a48:	f000 fe9f 	bl	801178a <_ZNK3Mat6MatrixILt3ELt4EE10TransposedEv>
 8010a4c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010a50:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8010a54:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
 8010a58:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	f000 fec4 	bl	80117ea <_ZNK3Mat6MatrixILt3ELt4EEmlILt3EEENS0_ILt3EXT_EEERKNS0_ILt4EXT_EEE>
 8010a62:	4c72      	ldr	r4, [pc, #456]	; (8010c2c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb28>)
 8010a64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010a68:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8010a6c:	4a70      	ldr	r2, [pc, #448]	; (8010c30 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb2c>)
 8010a6e:	4618      	mov	r0, r3
 8010a70:	f000 fece 	bl	8011810 <_ZNK3Mat6MatrixILt3ELt3EEplERKS1_>
 8010a74:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010a78:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8010a7c:	461d      	mov	r5, r3
 8010a7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010a80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010a82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010a84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010a86:	682b      	ldr	r3, [r5, #0]
 8010a88:	6023      	str	r3, [r4, #0]
	K = _P*H.Transposed()*Inverse3_3Matrix(S);
 8010a8a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010a8e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	f103 0410 	add.w	r4, r3, #16
 8010a98:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8010a9c:	4962      	ldr	r1, [pc, #392]	; (8010c28 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb24>)
 8010a9e:	4618      	mov	r0, r3
 8010aa0:	f000 fe73 	bl	801178a <_ZNK3Mat6MatrixILt3ELt4EE10TransposedEv>
 8010aa4:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8010aa8:	f507 72d6 	add.w	r2, r7, #428	; 0x1ac
 8010aac:	4621      	mov	r1, r4
 8010aae:	4618      	mov	r0, r3
 8010ab0:	f000 fec7 	bl	8011842 <_ZNK3Mat6MatrixILt4ELt4EEmlILt3EEENS0_ILt4EXT_EEERKS3_>
 8010ab4:	485d      	ldr	r0, [pc, #372]	; (8010c2c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb28>)
 8010ab6:	f7fe fba1 	bl	800f1fc <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE>
 8010aba:	4602      	mov	r2, r0
 8010abc:	4c5d      	ldr	r4, [pc, #372]	; (8010c34 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb30>)
 8010abe:	463b      	mov	r3, r7
 8010ac0:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 8010ac4:	4618      	mov	r0, r3
 8010ac6:	f000 fecf 	bl	8011868 <_ZNK3Mat6MatrixILt4ELt3EEmlILt3EEENS0_ILt4EXT_EEERKNS0_ILt3EXT_EEE>
 8010aca:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010ace:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8010ad2:	461d      	mov	r5, r3
 8010ad4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010ad6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010ad8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010ada:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010adc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8010ae0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	res = K*(Z - h);
 8010ae4:	4954      	ldr	r1, [pc, #336]	; (8010c38 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb34>)
 8010ae6:	4855      	ldr	r0, [pc, #340]	; (8010c3c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb38>)
 8010ae8:	f7fe fa61 	bl	800efae <_ZNK3Mat6MatrixILt3ELt1EEmiERKS1_>
 8010aec:	eef0 6a40 	vmov.f32	s13, s0
 8010af0:	eeb0 7a60 	vmov.f32	s14, s1
 8010af4:	eef0 7a41 	vmov.f32	s15, s2
 8010af8:	edc7 6a77 	vstr	s13, [r7, #476]	; 0x1dc
 8010afc:	ed87 7a78 	vstr	s14, [r7, #480]	; 0x1e0
 8010b00:	edc7 7a79 	vstr	s15, [r7, #484]	; 0x1e4
 8010b04:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8010b08:	4619      	mov	r1, r3
 8010b0a:	484a      	ldr	r0, [pc, #296]	; (8010c34 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb30>)
 8010b0c:	f000 febf 	bl	801188e <_ZNK3Mat6MatrixILt4ELt3EEmlILt1EEENS0_ILt4EXT_EEERKNS0_ILt3EXT_EEE>
 8010b10:	eeb0 6a40 	vmov.f32	s12, s0
 8010b14:	eef0 6a60 	vmov.f32	s13, s1
 8010b18:	eeb0 7a41 	vmov.f32	s14, s2
 8010b1c:	eef0 7a61 	vmov.f32	s15, s3
 8010b20:	4b47      	ldr	r3, [pc, #284]	; (8010c40 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb3c>)
 8010b22:	ed83 6a00 	vstr	s12, [r3]
 8010b26:	edc3 6a01 	vstr	s13, [r3, #4]
 8010b2a:	ed83 7a02 	vstr	s14, [r3, #8]
 8010b2e:	edc3 7a03 	vstr	s15, [r3, #12]
	add.w = res(0,0); add.x = res(1,0); add.y = res(2,0); add.z = res(3,0);
 8010b32:	2200      	movs	r2, #0
 8010b34:	2100      	movs	r1, #0
 8010b36:	4842      	ldr	r0, [pc, #264]	; (8010c40 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb3c>)
 8010b38:	f000 fed8 	bl	80118ec <_ZN3Mat6MatrixILt4ELt1EEclEtt>
 8010b3c:	4603      	mov	r3, r0
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	4a40      	ldr	r2, [pc, #256]	; (8010c44 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb40>)
 8010b42:	6013      	str	r3, [r2, #0]
 8010b44:	2200      	movs	r2, #0
 8010b46:	2101      	movs	r1, #1
 8010b48:	483d      	ldr	r0, [pc, #244]	; (8010c40 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb3c>)
 8010b4a:	f000 fecf 	bl	80118ec <_ZN3Mat6MatrixILt4ELt1EEclEtt>
 8010b4e:	4603      	mov	r3, r0
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	4a3c      	ldr	r2, [pc, #240]	; (8010c44 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb40>)
 8010b54:	6053      	str	r3, [r2, #4]
 8010b56:	2200      	movs	r2, #0
 8010b58:	2102      	movs	r1, #2
 8010b5a:	4839      	ldr	r0, [pc, #228]	; (8010c40 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb3c>)
 8010b5c:	f000 fec6 	bl	80118ec <_ZN3Mat6MatrixILt4ELt1EEclEtt>
 8010b60:	4603      	mov	r3, r0
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	4a37      	ldr	r2, [pc, #220]	; (8010c44 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb40>)
 8010b66:	6093      	str	r3, [r2, #8]
 8010b68:	2200      	movs	r2, #0
 8010b6a:	2103      	movs	r1, #3
 8010b6c:	4834      	ldr	r0, [pc, #208]	; (8010c40 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb3c>)
 8010b6e:	f000 febd 	bl	80118ec <_ZN3Mat6MatrixILt4ELt1EEclEtt>
 8010b72:	4603      	mov	r3, r0
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	4a33      	ldr	r2, [pc, #204]	; (8010c44 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb40>)
 8010b78:	60d3      	str	r3, [r2, #12]
	_X = _X + add;
 8010b7a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010b7e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010b82:	681a      	ldr	r2, [r3, #0]
 8010b84:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010b88:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010b8c:	681c      	ldr	r4, [r3, #0]
 8010b8e:	492d      	ldr	r1, [pc, #180]	; (8010c44 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb40>)
 8010b90:	4610      	mov	r0, r2
 8010b92:	f004 fb99 	bl	80152c8 <_ZNK3Mat10QuaternionplERKS0_>
 8010b96:	eeb0 6a40 	vmov.f32	s12, s0
 8010b9a:	eef0 6a60 	vmov.f32	s13, s1
 8010b9e:	eeb0 7a41 	vmov.f32	s14, s2
 8010ba2:	eef0 7a61 	vmov.f32	s15, s3
 8010ba6:	ed84 6a00 	vstr	s12, [r4]
 8010baa:	edc4 6a01 	vstr	s13, [r4, #4]
 8010bae:	ed84 7a02 	vstr	s14, [r4, #8]
 8010bb2:	edc4 7a03 	vstr	s15, [r4, #12]
	_P = (I - K*H)*_P;
 8010bb6:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8010bba:	4a1b      	ldr	r2, [pc, #108]	; (8010c28 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb24>)
 8010bbc:	491d      	ldr	r1, [pc, #116]	; (8010c34 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb30>)
 8010bbe:	4618      	mov	r0, r3
 8010bc0:	f000 fcf8 	bl	80115b4 <_ZNK3Mat6MatrixILt4ELt3EEmlILt4EEENS0_ILt4EXT_EEERKNS0_ILt3EXT_EEE>
 8010bc4:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8010bc8:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8010bcc:	491e      	ldr	r1, [pc, #120]	; (8010c48 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb44>)
 8010bce:	4618      	mov	r0, r3
 8010bd0:	f000 fea2 	bl	8011918 <_ZNK3Mat6MatrixILt4ELt4EEmiERKS1_>
 8010bd4:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010bd8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	f103 0210 	add.w	r2, r3, #16
 8010be2:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010be6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010bea:	681c      	ldr	r4, [r3, #0]
 8010bec:	463b      	mov	r3, r7
 8010bee:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	f000 fd29 	bl	801164a <_ZNK3Mat6MatrixILt4ELt4EEmlILt4EEENS0_ILt4EXT_EEERKS3_>
 8010bf8:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010bfc:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8010c00:	3410      	adds	r4, #16
 8010c02:	461d      	mov	r5, r3
 8010c04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010c06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010c08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010c0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010c0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010c0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010c10:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8010c14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8010c18:	bf00      	nop
 8010c1a:	f507 771c 	add.w	r7, r7, #624	; 0x270
 8010c1e:	46bd      	mov	sp, r7
 8010c20:	ecbd 8b02 	vpop	{d8}
 8010c24:	bdb0      	pop	{r4, r5, r7, pc}
 8010c26:	bf00      	nop
 8010c28:	24009228 	.word	0x24009228
 8010c2c:	240092b8 	.word	0x240092b8
 8010c30:	24009290 	.word	0x24009290
 8010c34:	2400925c 	.word	0x2400925c
 8010c38:	24009218 	.word	0x24009218
 8010c3c:	24009208 	.word	0x24009208
 8010c40:	24009324 	.word	0x24009324
 8010c44:	24009338 	.word	0x24009338
 8010c48:	240092e0 	.word	0x240092e0

08010c4c <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf>:

void AHRSKalman::CorrectStateAcc(const Matrix<3, 1>& acc, float time)
{
 8010c4c:	b5b0      	push	{r4, r5, r7, lr}
 8010c4e:	ed2d 8b02 	vpush	{d8}
 8010c52:	f5ad 7d1c 	sub.w	sp, sp, #624	; 0x270
 8010c56:	af00      	add	r7, sp, #0
 8010c58:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010c5c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010c60:	6018      	str	r0, [r3, #0]
 8010c62:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010c66:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8010c6a:	6019      	str	r1, [r3, #0]
 8010c6c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010c70:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8010c74:	ed83 0a00 	vstr	s0, [r3]
	static const float gz{1.0f};
	static const float gz2 = 2.0f*gz;
	static Matrix<3, 1> Z;
 8010c78:	4b7e      	ldr	r3, [pc, #504]	; (8010e74 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x228>)
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	f3bf 8f5b 	dmb	ish
 8010c80:	f003 0301 	and.w	r3, r3, #1
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	bf0c      	ite	eq
 8010c88:	2301      	moveq	r3, #1
 8010c8a:	2300      	movne	r3, #0
 8010c8c:	b2db      	uxtb	r3, r3
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d010      	beq.n	8010cb4 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x68>
 8010c92:	4878      	ldr	r0, [pc, #480]	; (8010e74 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x228>)
 8010c94:	f008 fac4 	bl	8019220 <__cxa_guard_acquire>
 8010c98:	4603      	mov	r3, r0
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	bf14      	ite	ne
 8010c9e:	2301      	movne	r3, #1
 8010ca0:	2300      	moveq	r3, #0
 8010ca2:	b2db      	uxtb	r3, r3
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d005      	beq.n	8010cb4 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x68>
 8010ca8:	4873      	ldr	r0, [pc, #460]	; (8010e78 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x22c>)
 8010caa:	f7fc fe42 	bl	800d932 <_ZN3Mat6MatrixILt3ELt1EEC1Ev>
 8010cae:	4871      	ldr	r0, [pc, #452]	; (8010e74 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x228>)
 8010cb0:	f008 fac2 	bl	8019238 <__cxa_guard_release>
	static Matrix<3, 1> h;
 8010cb4:	4b71      	ldr	r3, [pc, #452]	; (8010e7c <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x230>)
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	f3bf 8f5b 	dmb	ish
 8010cbc:	f003 0301 	and.w	r3, r3, #1
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	bf0c      	ite	eq
 8010cc4:	2301      	moveq	r3, #1
 8010cc6:	2300      	movne	r3, #0
 8010cc8:	b2db      	uxtb	r3, r3
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d010      	beq.n	8010cf0 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0xa4>
 8010cce:	486b      	ldr	r0, [pc, #428]	; (8010e7c <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x230>)
 8010cd0:	f008 faa6 	bl	8019220 <__cxa_guard_acquire>
 8010cd4:	4603      	mov	r3, r0
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	bf14      	ite	ne
 8010cda:	2301      	movne	r3, #1
 8010cdc:	2300      	moveq	r3, #0
 8010cde:	b2db      	uxtb	r3, r3
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d005      	beq.n	8010cf0 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0xa4>
 8010ce4:	4866      	ldr	r0, [pc, #408]	; (8010e80 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x234>)
 8010ce6:	f7fc fe24 	bl	800d932 <_ZN3Mat6MatrixILt3ELt1EEC1Ev>
 8010cea:	4864      	ldr	r0, [pc, #400]	; (8010e7c <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x230>)
 8010cec:	f008 faa4 	bl	8019238 <__cxa_guard_release>
	static Matrix<3, 4> H;
 8010cf0:	4b64      	ldr	r3, [pc, #400]	; (8010e84 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x238>)
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	f3bf 8f5b 	dmb	ish
 8010cf8:	f003 0301 	and.w	r3, r3, #1
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	bf0c      	ite	eq
 8010d00:	2301      	moveq	r3, #1
 8010d02:	2300      	movne	r3, #0
 8010d04:	b2db      	uxtb	r3, r3
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d010      	beq.n	8010d2c <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0xe0>
 8010d0a:	485e      	ldr	r0, [pc, #376]	; (8010e84 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x238>)
 8010d0c:	f008 fa88 	bl	8019220 <__cxa_guard_acquire>
 8010d10:	4603      	mov	r3, r0
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	bf14      	ite	ne
 8010d16:	2301      	movne	r3, #1
 8010d18:	2300      	moveq	r3, #0
 8010d1a:	b2db      	uxtb	r3, r3
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d005      	beq.n	8010d2c <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0xe0>
 8010d20:	4859      	ldr	r0, [pc, #356]	; (8010e88 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x23c>)
 8010d22:	f000 fcf2 	bl	801170a <_ZN3Mat6MatrixILt3ELt4EEC1Ev>
 8010d26:	4857      	ldr	r0, [pc, #348]	; (8010e84 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x238>)
 8010d28:	f008 fa86 	bl	8019238 <__cxa_guard_release>
	static Matrix<4, 3> K;
 8010d2c:	4b57      	ldr	r3, [pc, #348]	; (8010e8c <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x240>)
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	f3bf 8f5b 	dmb	ish
 8010d34:	f003 0301 	and.w	r3, r3, #1
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	bf0c      	ite	eq
 8010d3c:	2301      	moveq	r3, #1
 8010d3e:	2300      	movne	r3, #0
 8010d40:	b2db      	uxtb	r3, r3
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d010      	beq.n	8010d68 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x11c>
 8010d46:	4851      	ldr	r0, [pc, #324]	; (8010e8c <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x240>)
 8010d48:	f008 fa6a 	bl	8019220 <__cxa_guard_acquire>
 8010d4c:	4603      	mov	r3, r0
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	bf14      	ite	ne
 8010d52:	2301      	movne	r3, #1
 8010d54:	2300      	moveq	r3, #0
 8010d56:	b2db      	uxtb	r3, r3
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d005      	beq.n	8010d68 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x11c>
 8010d5c:	484c      	ldr	r0, [pc, #304]	; (8010e90 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x244>)
 8010d5e:	f000 fbd7 	bl	8011510 <_ZN3Mat6MatrixILt4ELt3EEC1Ev>
 8010d62:	484a      	ldr	r0, [pc, #296]	; (8010e8c <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x240>)
 8010d64:	f008 fa68 	bl	8019238 <__cxa_guard_release>
	static const Matrix<3, 3> R = Eye<3>(_accNoiseVariance);
 8010d68:	4b4a      	ldr	r3, [pc, #296]	; (8010e94 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x248>)
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	f3bf 8f5b 	dmb	ish
 8010d70:	f003 0301 	and.w	r3, r3, #1
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	bf0c      	ite	eq
 8010d78:	2301      	moveq	r3, #1
 8010d7a:	2300      	movne	r3, #0
 8010d7c:	b2db      	uxtb	r3, r3
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d01a      	beq.n	8010db8 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x16c>
 8010d82:	4844      	ldr	r0, [pc, #272]	; (8010e94 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x248>)
 8010d84:	f008 fa4c 	bl	8019220 <__cxa_guard_acquire>
 8010d88:	4603      	mov	r3, r0
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	bf14      	ite	ne
 8010d8e:	2301      	movne	r3, #1
 8010d90:	2300      	moveq	r3, #0
 8010d92:	b2db      	uxtb	r3, r3
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d00f      	beq.n	8010db8 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x16c>
 8010d98:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010d9c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8010da6:	4b3c      	ldr	r3, [pc, #240]	; (8010e98 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x24c>)
 8010da8:	eeb0 0a67 	vmov.f32	s0, s15
 8010dac:	4618      	mov	r0, r3
 8010dae:	f7fc fc3f 	bl	800d630 <_ZN3Mat3EyeILt3EEENS_6MatrixIXT_EXT_EEEf>
 8010db2:	4838      	ldr	r0, [pc, #224]	; (8010e94 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x248>)
 8010db4:	f008 fa40 	bl	8019238 <__cxa_guard_release>
	static Matrix<3, 3> S;
 8010db8:	4b38      	ldr	r3, [pc, #224]	; (8010e9c <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x250>)
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	f3bf 8f5b 	dmb	ish
 8010dc0:	f003 0301 	and.w	r3, r3, #1
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	bf0c      	ite	eq
 8010dc8:	2301      	moveq	r3, #1
 8010dca:	2300      	movne	r3, #0
 8010dcc:	b2db      	uxtb	r3, r3
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d010      	beq.n	8010df4 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x1a8>
 8010dd2:	4832      	ldr	r0, [pc, #200]	; (8010e9c <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x250>)
 8010dd4:	f008 fa24 	bl	8019220 <__cxa_guard_acquire>
 8010dd8:	4603      	mov	r3, r0
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	bf14      	ite	ne
 8010dde:	2301      	movne	r3, #1
 8010de0:	2300      	moveq	r3, #0
 8010de2:	b2db      	uxtb	r3, r3
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d005      	beq.n	8010df4 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x1a8>
 8010de8:	482d      	ldr	r0, [pc, #180]	; (8010ea0 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x254>)
 8010dea:	f7fc fbf1 	bl	800d5d0 <_ZN3Mat6MatrixILt3ELt3EEC1Ev>
 8010dee:	482b      	ldr	r0, [pc, #172]	; (8010e9c <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x250>)
 8010df0:	f008 fa22 	bl	8019238 <__cxa_guard_release>
	static Matrix<4, 4> I = Eye<4>();
 8010df4:	4b2b      	ldr	r3, [pc, #172]	; (8010ea4 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x258>)
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	f3bf 8f5b 	dmb	ish
 8010dfc:	f003 0301 	and.w	r3, r3, #1
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	bf0c      	ite	eq
 8010e04:	2301      	moveq	r3, #1
 8010e06:	2300      	movne	r3, #0
 8010e08:	b2db      	uxtb	r3, r3
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d013      	beq.n	8010e36 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x1ea>
 8010e0e:	4825      	ldr	r0, [pc, #148]	; (8010ea4 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x258>)
 8010e10:	f008 fa06 	bl	8019220 <__cxa_guard_acquire>
 8010e14:	4603      	mov	r3, r0
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	bf14      	ite	ne
 8010e1a:	2301      	movne	r3, #1
 8010e1c:	2300      	moveq	r3, #0
 8010e1e:	b2db      	uxtb	r3, r3
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d008      	beq.n	8010e36 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x1ea>
 8010e24:	4b20      	ldr	r3, [pc, #128]	; (8010ea8 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x25c>)
 8010e26:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8010e2a:	4618      	mov	r0, r3
 8010e2c:	f7fc fb54 	bl	800d4d8 <_ZN3Mat3EyeILt4EEENS_6MatrixIXT_EXT_EEEf>
 8010e30:	481c      	ldr	r0, [pc, #112]	; (8010ea4 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x258>)
 8010e32:	f008 fa01 	bl	8019238 <__cxa_guard_release>
	static Matrix<4, 1> res;
 8010e36:	4b1d      	ldr	r3, [pc, #116]	; (8010eac <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x260>)
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	f3bf 8f5b 	dmb	ish
 8010e3e:	f003 0301 	and.w	r3, r3, #1
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	bf0c      	ite	eq
 8010e46:	2301      	moveq	r3, #1
 8010e48:	2300      	movne	r3, #0
 8010e4a:	b2db      	uxtb	r3, r3
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d031      	beq.n	8010eb4 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x268>
 8010e50:	4816      	ldr	r0, [pc, #88]	; (8010eac <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x260>)
 8010e52:	f008 f9e5 	bl	8019220 <__cxa_guard_acquire>
 8010e56:	4603      	mov	r3, r0
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	bf14      	ite	ne
 8010e5c:	2301      	movne	r3, #1
 8010e5e:	2300      	moveq	r3, #0
 8010e60:	b2db      	uxtb	r3, r3
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d026      	beq.n	8010eb4 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x268>
 8010e66:	4812      	ldr	r0, [pc, #72]	; (8010eb0 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x264>)
 8010e68:	f000 fc5a 	bl	8011720 <_ZN3Mat6MatrixILt4ELt1EEC1Ev>
 8010e6c:	480f      	ldr	r0, [pc, #60]	; (8010eac <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x260>)
 8010e6e:	f008 f9e3 	bl	8019238 <__cxa_guard_release>
 8010e72:	e01f      	b.n	8010eb4 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x268>
 8010e74:	24009354 	.word	0x24009354
 8010e78:	24009348 	.word	0x24009348
 8010e7c:	24009364 	.word	0x24009364
 8010e80:	24009358 	.word	0x24009358
 8010e84:	24009398 	.word	0x24009398
 8010e88:	24009368 	.word	0x24009368
 8010e8c:	240093cc 	.word	0x240093cc
 8010e90:	2400939c 	.word	0x2400939c
 8010e94:	240093f4 	.word	0x240093f4
 8010e98:	240093d0 	.word	0x240093d0
 8010e9c:	2400941c 	.word	0x2400941c
 8010ea0:	240093f8 	.word	0x240093f8
 8010ea4:	24009460 	.word	0x24009460
 8010ea8:	24009420 	.word	0x24009420
 8010eac:	24009474 	.word	0x24009474
 8010eb0:	24009464 	.word	0x24009464
	static Quaternion add;

	float gd = 1.0f / sqrt(acc(0,0)*acc(0,0) + acc(1,0)*acc(1,0) + acc(2,0)*acc(2,0));
 8010eb4:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010eb8:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8010ebc:	2200      	movs	r2, #0
 8010ebe:	2100      	movs	r1, #0
 8010ec0:	6818      	ldr	r0, [r3, #0]
 8010ec2:	f7fc ffc8 	bl	800de56 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8010ec6:	eeb0 8a40 	vmov.f32	s16, s0
 8010eca:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010ece:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8010ed2:	2200      	movs	r2, #0
 8010ed4:	2100      	movs	r1, #0
 8010ed6:	6818      	ldr	r0, [r3, #0]
 8010ed8:	f7fc ffbd 	bl	800de56 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8010edc:	eef0 7a40 	vmov.f32	s15, s0
 8010ee0:	ee28 8a27 	vmul.f32	s16, s16, s15
 8010ee4:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010ee8:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8010eec:	2200      	movs	r2, #0
 8010eee:	2101      	movs	r1, #1
 8010ef0:	6818      	ldr	r0, [r3, #0]
 8010ef2:	f7fc ffb0 	bl	800de56 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8010ef6:	eef0 8a40 	vmov.f32	s17, s0
 8010efa:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010efe:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8010f02:	2200      	movs	r2, #0
 8010f04:	2101      	movs	r1, #1
 8010f06:	6818      	ldr	r0, [r3, #0]
 8010f08:	f7fc ffa5 	bl	800de56 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8010f0c:	eef0 7a40 	vmov.f32	s15, s0
 8010f10:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8010f14:	ee38 8a27 	vadd.f32	s16, s16, s15
 8010f18:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010f1c:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8010f20:	2200      	movs	r2, #0
 8010f22:	2102      	movs	r1, #2
 8010f24:	6818      	ldr	r0, [r3, #0]
 8010f26:	f7fc ff96 	bl	800de56 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8010f2a:	eef0 8a40 	vmov.f32	s17, s0
 8010f2e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010f32:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8010f36:	2200      	movs	r2, #0
 8010f38:	2102      	movs	r1, #2
 8010f3a:	6818      	ldr	r0, [r3, #0]
 8010f3c:	f7fc ff8b 	bl	800de56 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8010f40:	eef0 7a40 	vmov.f32	s15, s0
 8010f44:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8010f48:	ee78 7a27 	vadd.f32	s15, s16, s15
 8010f4c:	eeb0 0a67 	vmov.f32	s0, s15
 8010f50:	f7fe f91e 	bl	800f190 <_ZSt4sqrtf>
 8010f54:	eeb0 7a40 	vmov.f32	s14, s0
 8010f58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010f5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010f60:	edc7 7a9b 	vstr	s15, [r7, #620]	; 0x26c
	Z =
	{{
		acc(0,0)*gd,
 8010f64:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010f68:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8010f6c:	2200      	movs	r2, #0
 8010f6e:	2100      	movs	r1, #0
 8010f70:	6818      	ldr	r0, [r3, #0]
 8010f72:	f7fc ff70 	bl	800de56 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8010f76:	eeb0 7a40 	vmov.f32	s14, s0
 8010f7a:	edd7 7a9b 	vldr	s15, [r7, #620]	; 0x26c
 8010f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
	Z =
 8010f82:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010f86:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8010f8a:	edc3 7a00 	vstr	s15, [r3]
		acc(1,0)*gd,
 8010f8e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010f92:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8010f96:	2200      	movs	r2, #0
 8010f98:	2101      	movs	r1, #1
 8010f9a:	6818      	ldr	r0, [r3, #0]
 8010f9c:	f7fc ff5b 	bl	800de56 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8010fa0:	eeb0 7a40 	vmov.f32	s14, s0
 8010fa4:	edd7 7a9b 	vldr	s15, [r7, #620]	; 0x26c
 8010fa8:	ee67 7a27 	vmul.f32	s15, s14, s15
	Z =
 8010fac:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010fb0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8010fb4:	edc3 7a01 	vstr	s15, [r3, #4]
		acc(2,0)*gd
 8010fb8:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010fbc:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8010fc0:	2200      	movs	r2, #0
 8010fc2:	2102      	movs	r1, #2
 8010fc4:	6818      	ldr	r0, [r3, #0]
 8010fc6:	f7fc ff46 	bl	800de56 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8010fca:	eeb0 7a40 	vmov.f32	s14, s0
 8010fce:	edd7 7a9b 	vldr	s15, [r7, #620]	; 0x26c
 8010fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
	Z =
 8010fd6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010fda:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8010fde:	edc3 7a02 	vstr	s15, [r3, #8]
 8010fe2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8010fe6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010fea:	4611      	mov	r1, r2
 8010fec:	4618      	mov	r0, r3
 8010fee:	f7fc fb4f 	bl	800d690 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
 8010ff2:	49e6      	ldr	r1, [pc, #920]	; (801138c <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x740>)
 8010ff4:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010ff8:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 8010ffc:	460b      	mov	r3, r1
 8010ffe:	ca07      	ldmia	r2, {r0, r1, r2}
 8011000:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	}};

	h =
	{{
		gz2*(_X.x*_X.z - _X.w*_X.y),
 8011004:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8011008:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	ed93 7a01 	vldr	s14, [r3, #4]
 8011012:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8011016:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	edd3 7a03 	vldr	s15, [r3, #12]
 8011020:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011024:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8011028:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	edd3 6a00 	vldr	s13, [r3]
 8011032:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8011036:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	edd3 7a02 	vldr	s15, [r3, #8]
 8011040:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011044:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011048:	ee77 7aa7 	vadd.f32	s15, s15, s15
	h =
 801104c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8011050:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8011054:	edc3 7a00 	vstr	s15, [r3]
		gz2*(_X.w*_X.x + _X.y*_X.z),
 8011058:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801105c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	ed93 7a00 	vldr	s14, [r3]
 8011066:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801106a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	edd3 7a01 	vldr	s15, [r3, #4]
 8011074:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011078:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801107c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	edd3 6a02 	vldr	s13, [r3, #8]
 8011086:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801108a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	edd3 7a03 	vldr	s15, [r3, #12]
 8011094:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011098:	ee77 7a27 	vadd.f32	s15, s14, s15
 801109c:	ee77 7aa7 	vadd.f32	s15, s15, s15
	h =
 80110a0:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80110a4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80110a8:	edc3 7a01 	vstr	s15, [r3, #4]
		gz2*(0.5f - _X.x*_X.x - _X.y*_X.y)
 80110ac:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80110b0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	ed93 7a01 	vldr	s14, [r3, #4]
 80110ba:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80110be:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80110c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80110cc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80110d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80110d4:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80110d8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	edd3 6a02 	vldr	s13, [r3, #8]
 80110e2:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80110e6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80110f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80110f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80110f8:	ee77 7aa7 	vadd.f32	s15, s15, s15
	h =
 80110fc:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8011100:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8011104:	edc3 7a02 	vstr	s15, [r3, #8]
 8011108:	f107 0290 	add.w	r2, r7, #144	; 0x90
 801110c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8011110:	4611      	mov	r1, r2
 8011112:	4618      	mov	r0, r3
 8011114:	f7fc fabc 	bl	800d690 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
 8011118:	499d      	ldr	r1, [pc, #628]	; (8011390 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x744>)
 801111a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801111e:	f5a3 72f6 	sub.w	r2, r3, #492	; 0x1ec
 8011122:	460b      	mov	r3, r1
 8011124:	ca07      	ldmia	r2, {r0, r1, r2}
 8011126:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	}};

	H =
	{{
		-gz2*_X.y, gz2*_X.z, -gz2*_X.w, gz2*_X.x,
 801112a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801112e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	edd3 7a02 	vldr	s15, [r3, #8]
 8011138:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 801113c:	ee67 7a87 	vmul.f32	s15, s15, s14
	H =
 8011140:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8011144:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8011148:	edc3 7a00 	vstr	s15, [r3]
		-gz2*_X.y, gz2*_X.z, -gz2*_X.w, gz2*_X.x,
 801114c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8011150:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	edd3 7a03 	vldr	s15, [r3, #12]
 801115a:	ee77 7aa7 	vadd.f32	s15, s15, s15
	H =
 801115e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8011162:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8011166:	edc3 7a01 	vstr	s15, [r3, #4]
		-gz2*_X.y, gz2*_X.z, -gz2*_X.w, gz2*_X.x,
 801116a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801116e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	edd3 7a00 	vldr	s15, [r3]
 8011178:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 801117c:	ee67 7a87 	vmul.f32	s15, s15, s14
	H =
 8011180:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8011184:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8011188:	edc3 7a02 	vstr	s15, [r3, #8]
		-gz2*_X.y, gz2*_X.z, -gz2*_X.w, gz2*_X.x,
 801118c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8011190:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	edd3 7a01 	vldr	s15, [r3, #4]
 801119a:	ee77 7aa7 	vadd.f32	s15, s15, s15
	H =
 801119e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80111a2:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80111a6:	edc3 7a03 	vstr	s15, [r3, #12]
		gz2*_X.x, gz2*_X.w, gz2*_X.z, gz2*_X.y,
 80111aa:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80111ae:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	edd3 7a01 	vldr	s15, [r3, #4]
 80111b8:	ee77 7aa7 	vadd.f32	s15, s15, s15
	H =
 80111bc:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80111c0:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80111c4:	edc3 7a04 	vstr	s15, [r3, #16]
		gz2*_X.x, gz2*_X.w, gz2*_X.z, gz2*_X.y,
 80111c8:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80111cc:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	edd3 7a00 	vldr	s15, [r3]
 80111d6:	ee77 7aa7 	vadd.f32	s15, s15, s15
	H =
 80111da:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80111de:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80111e2:	edc3 7a05 	vstr	s15, [r3, #20]
		gz2*_X.x, gz2*_X.w, gz2*_X.z, gz2*_X.y,
 80111e6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80111ea:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	edd3 7a03 	vldr	s15, [r3, #12]
 80111f4:	ee77 7aa7 	vadd.f32	s15, s15, s15
	H =
 80111f8:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80111fc:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8011200:	edc3 7a06 	vstr	s15, [r3, #24]
		gz2*_X.x, gz2*_X.w, gz2*_X.z, gz2*_X.y,
 8011204:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8011208:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	edd3 7a02 	vldr	s15, [r3, #8]
 8011212:	ee77 7aa7 	vadd.f32	s15, s15, s15
	H =
 8011216:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801121a:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 801121e:	edc3 7a07 	vstr	s15, [r3, #28]
		gz2*_X.w, -gz2*_X.x, -gz2*_X.y, gz2*_X.z
 8011222:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8011226:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	edd3 7a00 	vldr	s15, [r3]
 8011230:	ee77 7aa7 	vadd.f32	s15, s15, s15
	H =
 8011234:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8011238:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 801123c:	edc3 7a08 	vstr	s15, [r3, #32]
		gz2*_X.w, -gz2*_X.x, -gz2*_X.y, gz2*_X.z
 8011240:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8011244:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	edd3 7a01 	vldr	s15, [r3, #4]
 801124e:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8011252:	ee67 7a87 	vmul.f32	s15, s15, s14
	H =
 8011256:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801125a:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 801125e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		gz2*_X.w, -gz2*_X.x, -gz2*_X.y, gz2*_X.z
 8011262:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8011266:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	edd3 7a02 	vldr	s15, [r3, #8]
 8011270:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8011274:	ee67 7a87 	vmul.f32	s15, s15, s14
	H =
 8011278:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801127c:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8011280:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		gz2*_X.w, -gz2*_X.x, -gz2*_X.y, gz2*_X.z
 8011284:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8011288:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	edd3 7a03 	vldr	s15, [r3, #12]
 8011292:	ee77 7aa7 	vadd.f32	s15, s15, s15
	H =
 8011296:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801129a:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 801129e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
 80112a2:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 80112a6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80112aa:	4611      	mov	r1, r2
 80112ac:	4618      	mov	r0, r3
 80112ae:	f000 fa42 	bl	8011736 <_ZN3Mat6MatrixILt3ELt4EEC1ERKSt5arrayIfLj12EE>
 80112b2:	4a38      	ldr	r2, [pc, #224]	; (8011394 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x748>)
 80112b4:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80112b8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80112bc:	4614      	mov	r4, r2
 80112be:	461d      	mov	r5, r3
 80112c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80112c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80112c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80112c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80112c8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80112cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}};

	S = H*_P*H.Transposed() + R;
 80112d0:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80112d4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	f103 0210 	add.w	r2, r3, #16
 80112de:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80112e2:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80112e6:	492b      	ldr	r1, [pc, #172]	; (8011394 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x748>)
 80112e8:	4618      	mov	r0, r3
 80112ea:	f000 fa3b 	bl	8011764 <_ZNK3Mat6MatrixILt3ELt4EEmlILt4EEENS0_ILt3EXT_EEERKNS0_ILt4EXT_EEE>
 80112ee:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80112f2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80112f6:	4927      	ldr	r1, [pc, #156]	; (8011394 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x748>)
 80112f8:	4618      	mov	r0, r3
 80112fa:	f000 fa46 	bl	801178a <_ZNK3Mat6MatrixILt3ELt4EE10TransposedEv>
 80112fe:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8011302:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8011306:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 801130a:	f507 7190 	add.w	r1, r7, #288	; 0x120
 801130e:	4618      	mov	r0, r3
 8011310:	f000 fa6b 	bl	80117ea <_ZNK3Mat6MatrixILt3ELt4EEmlILt3EEENS0_ILt3EXT_EEERKNS0_ILt4EXT_EEE>
 8011314:	4c20      	ldr	r4, [pc, #128]	; (8011398 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x74c>)
 8011316:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801131a:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 801131e:	4a1f      	ldr	r2, [pc, #124]	; (801139c <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x750>)
 8011320:	4618      	mov	r0, r3
 8011322:	f000 fa75 	bl	8011810 <_ZNK3Mat6MatrixILt3ELt3EEplERKS1_>
 8011326:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801132a:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 801132e:	461d      	mov	r5, r3
 8011330:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011332:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011334:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011336:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011338:	682b      	ldr	r3, [r5, #0]
 801133a:	6023      	str	r3, [r4, #0]
	K = _P*H.Transposed()*Inverse3_3Matrix(S);
 801133c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8011340:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	f103 0410 	add.w	r4, r3, #16
 801134a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 801134e:	4911      	ldr	r1, [pc, #68]	; (8011394 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x748>)
 8011350:	4618      	mov	r0, r3
 8011352:	f000 fa1a 	bl	801178a <_ZNK3Mat6MatrixILt3ELt4EE10TransposedEv>
 8011356:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 801135a:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 801135e:	4621      	mov	r1, r4
 8011360:	4618      	mov	r0, r3
 8011362:	f000 fa6e 	bl	8011842 <_ZNK3Mat6MatrixILt4ELt4EEmlILt3EEENS0_ILt4EXT_EEERKS3_>
 8011366:	480c      	ldr	r0, [pc, #48]	; (8011398 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x74c>)
 8011368:	f7fd ff48 	bl	800f1fc <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE>
 801136c:	4602      	mov	r2, r0
 801136e:	4c0c      	ldr	r4, [pc, #48]	; (80113a0 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x754>)
 8011370:	463b      	mov	r3, r7
 8011372:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 8011376:	4618      	mov	r0, r3
 8011378:	f000 fa76 	bl	8011868 <_ZNK3Mat6MatrixILt4ELt3EEmlILt3EEENS0_ILt4EXT_EEERKNS0_ILt3EXT_EEE>
 801137c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8011380:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8011384:	461d      	mov	r5, r3
 8011386:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011388:	e00c      	b.n	80113a4 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x758>
 801138a:	bf00      	nop
 801138c:	24009348 	.word	0x24009348
 8011390:	24009358 	.word	0x24009358
 8011394:	24009368 	.word	0x24009368
 8011398:	240093f8 	.word	0x240093f8
 801139c:	240093d0 	.word	0x240093d0
 80113a0:	2400939c 	.word	0x2400939c
 80113a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80113a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80113a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80113aa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80113ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	res = K*(Z - h);
 80113b2:	4950      	ldr	r1, [pc, #320]	; (80114f4 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8a8>)
 80113b4:	4850      	ldr	r0, [pc, #320]	; (80114f8 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8ac>)
 80113b6:	f7fd fdfa 	bl	800efae <_ZNK3Mat6MatrixILt3ELt1EEmiERKS1_>
 80113ba:	eef0 6a40 	vmov.f32	s13, s0
 80113be:	eeb0 7a60 	vmov.f32	s14, s1
 80113c2:	eef0 7a41 	vmov.f32	s15, s2
 80113c6:	edc7 6a78 	vstr	s13, [r7, #480]	; 0x1e0
 80113ca:	ed87 7a79 	vstr	s14, [r7, #484]	; 0x1e4
 80113ce:	edc7 7a7a 	vstr	s15, [r7, #488]	; 0x1e8
 80113d2:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80113d6:	4619      	mov	r1, r3
 80113d8:	4848      	ldr	r0, [pc, #288]	; (80114fc <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8b0>)
 80113da:	f000 fa58 	bl	801188e <_ZNK3Mat6MatrixILt4ELt3EEmlILt1EEENS0_ILt4EXT_EEERKNS0_ILt3EXT_EEE>
 80113de:	eeb0 6a40 	vmov.f32	s12, s0
 80113e2:	eef0 6a60 	vmov.f32	s13, s1
 80113e6:	eeb0 7a41 	vmov.f32	s14, s2
 80113ea:	eef0 7a61 	vmov.f32	s15, s3
 80113ee:	4b44      	ldr	r3, [pc, #272]	; (8011500 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8b4>)
 80113f0:	ed83 6a00 	vstr	s12, [r3]
 80113f4:	edc3 6a01 	vstr	s13, [r3, #4]
 80113f8:	ed83 7a02 	vstr	s14, [r3, #8]
 80113fc:	edc3 7a03 	vstr	s15, [r3, #12]
	add.w = res(0,0); add.x = res(1,0); add.y = res(2,0); add.z = res(3,0);
 8011400:	2200      	movs	r2, #0
 8011402:	2100      	movs	r1, #0
 8011404:	483e      	ldr	r0, [pc, #248]	; (8011500 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8b4>)
 8011406:	f000 fa71 	bl	80118ec <_ZN3Mat6MatrixILt4ELt1EEclEtt>
 801140a:	4603      	mov	r3, r0
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	4a3d      	ldr	r2, [pc, #244]	; (8011504 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8b8>)
 8011410:	6013      	str	r3, [r2, #0]
 8011412:	2200      	movs	r2, #0
 8011414:	2101      	movs	r1, #1
 8011416:	483a      	ldr	r0, [pc, #232]	; (8011500 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8b4>)
 8011418:	f000 fa68 	bl	80118ec <_ZN3Mat6MatrixILt4ELt1EEclEtt>
 801141c:	4603      	mov	r3, r0
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	4a38      	ldr	r2, [pc, #224]	; (8011504 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8b8>)
 8011422:	6053      	str	r3, [r2, #4]
 8011424:	2200      	movs	r2, #0
 8011426:	2102      	movs	r1, #2
 8011428:	4835      	ldr	r0, [pc, #212]	; (8011500 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8b4>)
 801142a:	f000 fa5f 	bl	80118ec <_ZN3Mat6MatrixILt4ELt1EEclEtt>
 801142e:	4603      	mov	r3, r0
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	4a34      	ldr	r2, [pc, #208]	; (8011504 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8b8>)
 8011434:	6093      	str	r3, [r2, #8]
 8011436:	2200      	movs	r2, #0
 8011438:	2103      	movs	r1, #3
 801143a:	4831      	ldr	r0, [pc, #196]	; (8011500 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8b4>)
 801143c:	f000 fa56 	bl	80118ec <_ZN3Mat6MatrixILt4ELt1EEclEtt>
 8011440:	4603      	mov	r3, r0
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	4a2f      	ldr	r2, [pc, #188]	; (8011504 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8b8>)
 8011446:	60d3      	str	r3, [r2, #12]
	_X = _X + add;
 8011448:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801144c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8011450:	681a      	ldr	r2, [r3, #0]
 8011452:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8011456:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801145a:	681c      	ldr	r4, [r3, #0]
 801145c:	4929      	ldr	r1, [pc, #164]	; (8011504 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8b8>)
 801145e:	4610      	mov	r0, r2
 8011460:	f003 ff32 	bl	80152c8 <_ZNK3Mat10QuaternionplERKS0_>
 8011464:	eeb0 6a40 	vmov.f32	s12, s0
 8011468:	eef0 6a60 	vmov.f32	s13, s1
 801146c:	eeb0 7a41 	vmov.f32	s14, s2
 8011470:	eef0 7a61 	vmov.f32	s15, s3
 8011474:	ed84 6a00 	vstr	s12, [r4]
 8011478:	edc4 6a01 	vstr	s13, [r4, #4]
 801147c:	ed84 7a02 	vstr	s14, [r4, #8]
 8011480:	edc4 7a03 	vstr	s15, [r4, #12]
	_P = (I - K*H)*_P;
 8011484:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8011488:	4a1f      	ldr	r2, [pc, #124]	; (8011508 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8bc>)
 801148a:	491c      	ldr	r1, [pc, #112]	; (80114fc <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8b0>)
 801148c:	4618      	mov	r0, r3
 801148e:	f000 f891 	bl	80115b4 <_ZNK3Mat6MatrixILt4ELt3EEmlILt4EEENS0_ILt4EXT_EEERKNS0_ILt3EXT_EEE>
 8011492:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8011496:	f507 720b 	add.w	r2, r7, #556	; 0x22c
 801149a:	491c      	ldr	r1, [pc, #112]	; (801150c <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8c0>)
 801149c:	4618      	mov	r0, r3
 801149e:	f000 fa3b 	bl	8011918 <_ZNK3Mat6MatrixILt4ELt4EEmiERKS1_>
 80114a2:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80114a6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	f103 0210 	add.w	r2, r3, #16
 80114b0:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80114b4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80114b8:	681c      	ldr	r4, [r3, #0]
 80114ba:	463b      	mov	r3, r7
 80114bc:	f507 71f6 	add.w	r1, r7, #492	; 0x1ec
 80114c0:	4618      	mov	r0, r3
 80114c2:	f000 f8c2 	bl	801164a <_ZNK3Mat6MatrixILt4ELt4EEmlILt4EEENS0_ILt4EXT_EEERKS3_>
 80114c6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80114ca:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 80114ce:	3410      	adds	r4, #16
 80114d0:	461d      	mov	r5, r3
 80114d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80114d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80114d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80114d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80114da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80114dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80114de:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80114e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80114e6:	bf00      	nop
 80114e8:	f507 771c 	add.w	r7, r7, #624	; 0x270
 80114ec:	46bd      	mov	sp, r7
 80114ee:	ecbd 8b02 	vpop	{d8}
 80114f2:	bdb0      	pop	{r4, r5, r7, pc}
 80114f4:	24009358 	.word	0x24009358
 80114f8:	24009348 	.word	0x24009348
 80114fc:	2400939c 	.word	0x2400939c
 8011500:	24009464 	.word	0x24009464
 8011504:	24009478 	.word	0x24009478
 8011508:	24009368 	.word	0x24009368
 801150c:	24009420 	.word	0x24009420

08011510 <_ZN3Mat6MatrixILt4ELt3EEC1Ev>:
Matrix<heigth, width>::Matrix() {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 8011510:	b480      	push	{r7}
 8011512:	b083      	sub	sp, #12
 8011514:	af00      	add	r7, sp, #0
 8011516:	6078      	str	r0, [r7, #4]
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	4618      	mov	r0, r3
 801151c:	370c      	adds	r7, #12
 801151e:	46bd      	mov	sp, r7
 8011520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011524:	4770      	bx	lr

08011526 <_ZN3Mat6MatrixILt4ELt3EEC1ERKSt5arrayIfLj12EE>:
Matrix<heigth, width>::Matrix(const std::array<float, heigth*width>& values): _values(values) {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 8011526:	b4b0      	push	{r4, r5, r7}
 8011528:	b083      	sub	sp, #12
 801152a:	af00      	add	r7, sp, #0
 801152c:	6078      	str	r0, [r7, #4]
 801152e:	6039      	str	r1, [r7, #0]
 8011530:	687a      	ldr	r2, [r7, #4]
 8011532:	683b      	ldr	r3, [r7, #0]
 8011534:	4614      	mov	r4, r2
 8011536:	461d      	mov	r5, r3
 8011538:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801153a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801153c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801153e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011540:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8011544:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	4618      	mov	r0, r3
 801154c:	370c      	adds	r7, #12
 801154e:	46bd      	mov	sp, r7
 8011550:	bcb0      	pop	{r4, r5, r7}
 8011552:	4770      	bx	lr

08011554 <_ZNK3Mat6MatrixILt4ELt3EE10TransposedEv>:
Matrix<width, heigth> Matrix<heigth, width>::Transposed() const
 8011554:	b590      	push	{r4, r7, lr}
 8011556:	b085      	sub	sp, #20
 8011558:	af00      	add	r7, sp, #0
 801155a:	6078      	str	r0, [r7, #4]
 801155c:	6039      	str	r1, [r7, #0]
	Matrix<width, heigth> result;
 801155e:	6878      	ldr	r0, [r7, #4]
 8011560:	f000 f8d3 	bl	801170a <_ZN3Mat6MatrixILt3ELt4EEC1Ev>
	for(u_short r = 0; r < width; ++r)
 8011564:	2300      	movs	r3, #0
 8011566:	81fb      	strh	r3, [r7, #14]
 8011568:	e01c      	b.n	80115a4 <_ZNK3Mat6MatrixILt4ELt3EE10TransposedEv+0x50>
		for(u_short c = 0; c < heigth; ++c)
 801156a:	2300      	movs	r3, #0
 801156c:	81bb      	strh	r3, [r7, #12]
 801156e:	e013      	b.n	8011598 <_ZNK3Mat6MatrixILt4ELt3EE10TransposedEv+0x44>
			result(r, c) = operator()(c, r);
 8011570:	89ba      	ldrh	r2, [r7, #12]
 8011572:	89fb      	ldrh	r3, [r7, #14]
 8011574:	4619      	mov	r1, r3
 8011576:	6878      	ldr	r0, [r7, #4]
 8011578:	f000 f9eb 	bl	8011952 <_ZN3Mat6MatrixILt3ELt4EEclEtt>
 801157c:	4604      	mov	r4, r0
 801157e:	89fa      	ldrh	r2, [r7, #14]
 8011580:	89bb      	ldrh	r3, [r7, #12]
 8011582:	4619      	mov	r1, r3
 8011584:	6838      	ldr	r0, [r7, #0]
 8011586:	f000 f9fb 	bl	8011980 <_ZNK3Mat6MatrixILt4ELt3EEclEtt>
 801158a:	eef0 7a40 	vmov.f32	s15, s0
 801158e:	edc4 7a00 	vstr	s15, [r4]
		for(u_short c = 0; c < heigth; ++c)
 8011592:	89bb      	ldrh	r3, [r7, #12]
 8011594:	3301      	adds	r3, #1
 8011596:	81bb      	strh	r3, [r7, #12]
 8011598:	89bb      	ldrh	r3, [r7, #12]
 801159a:	2b03      	cmp	r3, #3
 801159c:	d9e8      	bls.n	8011570 <_ZNK3Mat6MatrixILt4ELt3EE10TransposedEv+0x1c>
	for(u_short r = 0; r < width; ++r)
 801159e:	89fb      	ldrh	r3, [r7, #14]
 80115a0:	3301      	adds	r3, #1
 80115a2:	81fb      	strh	r3, [r7, #14]
 80115a4:	89fb      	ldrh	r3, [r7, #14]
 80115a6:	2b02      	cmp	r3, #2
 80115a8:	d9df      	bls.n	801156a <_ZNK3Mat6MatrixILt4ELt3EE10TransposedEv+0x16>
	return result;
 80115aa:	bf00      	nop
}
 80115ac:	6878      	ldr	r0, [r7, #4]
 80115ae:	3714      	adds	r7, #20
 80115b0:	46bd      	mov	sp, r7
 80115b2:	bd90      	pop	{r4, r7, pc}

080115b4 <_ZNK3Mat6MatrixILt4ELt3EEmlILt4EEENS0_ILt4EXT_EEERKNS0_ILt3EXT_EEE>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 80115b4:	b580      	push	{r7, lr}
 80115b6:	b084      	sub	sp, #16
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	60f8      	str	r0, [r7, #12]
 80115bc:	60b9      	str	r1, [r7, #8]
 80115be:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 80115c0:	68f8      	ldr	r0, [r7, #12]
 80115c2:	f7fb ffad 	bl	800d520 <_ZN3Mat6MatrixILt4ELt4EEC1Ev>
	Multiply(other, result);
 80115c6:	68fa      	ldr	r2, [r7, #12]
 80115c8:	6879      	ldr	r1, [r7, #4]
 80115ca:	68b8      	ldr	r0, [r7, #8]
 80115cc:	f000 f9f5 	bl	80119ba <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt4EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE>
	return result;
 80115d0:	bf00      	nop
}
 80115d2:	68f8      	ldr	r0, [r7, #12]
 80115d4:	3710      	adds	r7, #16
 80115d6:	46bd      	mov	sp, r7
 80115d8:	bd80      	pop	{r7, pc}

080115da <_ZNK3Mat6MatrixILt4ELt4EEmlEf>:
inline Matrix<heigth, width> Matrix<heigth, width>::operator*(float val) const
 80115da:	b5b0      	push	{r4, r5, r7, lr}
 80115dc:	b084      	sub	sp, #16
 80115de:	af00      	add	r7, sp, #0
 80115e0:	60f8      	str	r0, [r7, #12]
 80115e2:	60b9      	str	r1, [r7, #8]
 80115e4:	ed87 0a01 	vstr	s0, [r7, #4]
    Matrix<heigth, width> result = *this;
 80115e8:	68fa      	ldr	r2, [r7, #12]
 80115ea:	68bb      	ldr	r3, [r7, #8]
 80115ec:	4614      	mov	r4, r2
 80115ee:	461d      	mov	r5, r3
 80115f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80115f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80115f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80115f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80115f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80115fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80115fc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8011600:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	result *= val;
 8011604:	ed97 0a01 	vldr	s0, [r7, #4]
 8011608:	68f8      	ldr	r0, [r7, #12]
 801160a:	f000 fa8a 	bl	8011b22 <_ZN3Mat6MatrixILt4ELt4EEmLEf>
	return result;
 801160e:	bf00      	nop
}
 8011610:	68f8      	ldr	r0, [r7, #12]
 8011612:	3710      	adds	r7, #16
 8011614:	46bd      	mov	sp, r7
 8011616:	bdb0      	pop	{r4, r5, r7, pc}

08011618 <_ZN3Mat6MatrixILt4ELt4EEC1ERKSt5arrayIfLj16EE>:
Matrix<heigth, width>::Matrix(const std::array<float, heigth*width>& values): _values(values) {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 8011618:	b4b0      	push	{r4, r5, r7}
 801161a:	b083      	sub	sp, #12
 801161c:	af00      	add	r7, sp, #0
 801161e:	6078      	str	r0, [r7, #4]
 8011620:	6039      	str	r1, [r7, #0]
 8011622:	687a      	ldr	r2, [r7, #4]
 8011624:	683b      	ldr	r3, [r7, #0]
 8011626:	4614      	mov	r4, r2
 8011628:	461d      	mov	r5, r3
 801162a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801162c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801162e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011630:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011632:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011634:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011636:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801163a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	4618      	mov	r0, r3
 8011642:	370c      	adds	r7, #12
 8011644:	46bd      	mov	sp, r7
 8011646:	bcb0      	pop	{r4, r5, r7}
 8011648:	4770      	bx	lr

0801164a <_ZNK3Mat6MatrixILt4ELt4EEmlILt4EEENS0_ILt4EXT_EEERKS3_>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 801164a:	b580      	push	{r7, lr}
 801164c:	b084      	sub	sp, #16
 801164e:	af00      	add	r7, sp, #0
 8011650:	60f8      	str	r0, [r7, #12]
 8011652:	60b9      	str	r1, [r7, #8]
 8011654:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 8011656:	68f8      	ldr	r0, [r7, #12]
 8011658:	f7fb ff62 	bl	800d520 <_ZN3Mat6MatrixILt4ELt4EEC1Ev>
	Multiply(other, result);
 801165c:	68fa      	ldr	r2, [r7, #12]
 801165e:	6879      	ldr	r1, [r7, #4]
 8011660:	68b8      	ldr	r0, [r7, #8]
 8011662:	f000 fa8a 	bl	8011b7a <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERS3_>
	return result;
 8011666:	bf00      	nop
}
 8011668:	68f8      	ldr	r0, [r7, #12]
 801166a:	3710      	adds	r7, #16
 801166c:	46bd      	mov	sp, r7
 801166e:	bd80      	pop	{r7, pc}

08011670 <_ZNK3Mat6MatrixILt4ELt4EE10TransposedEv>:
Matrix<width, heigth> Matrix<heigth, width>::Transposed() const
 8011670:	b590      	push	{r4, r7, lr}
 8011672:	b085      	sub	sp, #20
 8011674:	af00      	add	r7, sp, #0
 8011676:	6078      	str	r0, [r7, #4]
 8011678:	6039      	str	r1, [r7, #0]
	Matrix<width, heigth> result;
 801167a:	6878      	ldr	r0, [r7, #4]
 801167c:	f7fb ff50 	bl	800d520 <_ZN3Mat6MatrixILt4ELt4EEC1Ev>
	for(u_short r = 0; r < width; ++r)
 8011680:	2300      	movs	r3, #0
 8011682:	81fb      	strh	r3, [r7, #14]
 8011684:	e01c      	b.n	80116c0 <_ZNK3Mat6MatrixILt4ELt4EE10TransposedEv+0x50>
		for(u_short c = 0; c < heigth; ++c)
 8011686:	2300      	movs	r3, #0
 8011688:	81bb      	strh	r3, [r7, #12]
 801168a:	e013      	b.n	80116b4 <_ZNK3Mat6MatrixILt4ELt4EE10TransposedEv+0x44>
			result(r, c) = operator()(c, r);
 801168c:	89ba      	ldrh	r2, [r7, #12]
 801168e:	89fb      	ldrh	r3, [r7, #14]
 8011690:	4619      	mov	r1, r3
 8011692:	6878      	ldr	r0, [r7, #4]
 8011694:	f7fc f91b 	bl	800d8ce <_ZN3Mat6MatrixILt4ELt4EEclEtt>
 8011698:	4604      	mov	r4, r0
 801169a:	89fa      	ldrh	r2, [r7, #14]
 801169c:	89bb      	ldrh	r3, [r7, #12]
 801169e:	4619      	mov	r1, r3
 80116a0:	6838      	ldr	r0, [r7, #0]
 80116a2:	f000 fb1e 	bl	8011ce2 <_ZNK3Mat6MatrixILt4ELt4EEclEtt>
 80116a6:	eef0 7a40 	vmov.f32	s15, s0
 80116aa:	edc4 7a00 	vstr	s15, [r4]
		for(u_short c = 0; c < heigth; ++c)
 80116ae:	89bb      	ldrh	r3, [r7, #12]
 80116b0:	3301      	adds	r3, #1
 80116b2:	81bb      	strh	r3, [r7, #12]
 80116b4:	89bb      	ldrh	r3, [r7, #12]
 80116b6:	2b03      	cmp	r3, #3
 80116b8:	d9e8      	bls.n	801168c <_ZNK3Mat6MatrixILt4ELt4EE10TransposedEv+0x1c>
	for(u_short r = 0; r < width; ++r)
 80116ba:	89fb      	ldrh	r3, [r7, #14]
 80116bc:	3301      	adds	r3, #1
 80116be:	81fb      	strh	r3, [r7, #14]
 80116c0:	89fb      	ldrh	r3, [r7, #14]
 80116c2:	2b03      	cmp	r3, #3
 80116c4:	d9df      	bls.n	8011686 <_ZNK3Mat6MatrixILt4ELt4EE10TransposedEv+0x16>
	return result;
 80116c6:	bf00      	nop
}
 80116c8:	6878      	ldr	r0, [r7, #4]
 80116ca:	3714      	adds	r7, #20
 80116cc:	46bd      	mov	sp, r7
 80116ce:	bd90      	pop	{r4, r7, pc}

080116d0 <_ZNK3Mat6MatrixILt4ELt4EEplERKS1_>:
inline Matrix<heigth, width> Matrix<heigth, width>::operator+(const Matrix<heigth, width> &other) const
 80116d0:	b5b0      	push	{r4, r5, r7, lr}
 80116d2:	b084      	sub	sp, #16
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	60f8      	str	r0, [r7, #12]
 80116d8:	60b9      	str	r1, [r7, #8]
 80116da:	607a      	str	r2, [r7, #4]
    Matrix<heigth, width> result = *this;
 80116dc:	68fa      	ldr	r2, [r7, #12]
 80116de:	68bb      	ldr	r3, [r7, #8]
 80116e0:	4614      	mov	r4, r2
 80116e2:	461d      	mov	r5, r3
 80116e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80116e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80116e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80116ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80116ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80116ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80116f0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80116f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	result += other;
 80116f8:	6879      	ldr	r1, [r7, #4]
 80116fa:	68f8      	ldr	r0, [r7, #12]
 80116fc:	f000 fb0c 	bl	8011d18 <_ZN3Mat6MatrixILt4ELt4EEpLERKS1_>
	return result;
 8011700:	bf00      	nop
}
 8011702:	68f8      	ldr	r0, [r7, #12]
 8011704:	3710      	adds	r7, #16
 8011706:	46bd      	mov	sp, r7
 8011708:	bdb0      	pop	{r4, r5, r7, pc}

0801170a <_ZN3Mat6MatrixILt3ELt4EEC1Ev>:
Matrix<heigth, width>::Matrix() {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 801170a:	b480      	push	{r7}
 801170c:	b083      	sub	sp, #12
 801170e:	af00      	add	r7, sp, #0
 8011710:	6078      	str	r0, [r7, #4]
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	4618      	mov	r0, r3
 8011716:	370c      	adds	r7, #12
 8011718:	46bd      	mov	sp, r7
 801171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801171e:	4770      	bx	lr

08011720 <_ZN3Mat6MatrixILt4ELt1EEC1Ev>:
 8011720:	b480      	push	{r7}
 8011722:	b083      	sub	sp, #12
 8011724:	af00      	add	r7, sp, #0
 8011726:	6078      	str	r0, [r7, #4]
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	4618      	mov	r0, r3
 801172c:	370c      	adds	r7, #12
 801172e:	46bd      	mov	sp, r7
 8011730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011734:	4770      	bx	lr

08011736 <_ZN3Mat6MatrixILt3ELt4EEC1ERKSt5arrayIfLj12EE>:
Matrix<heigth, width>::Matrix(const std::array<float, heigth*width>& values): _values(values) {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 8011736:	b4b0      	push	{r4, r5, r7}
 8011738:	b083      	sub	sp, #12
 801173a:	af00      	add	r7, sp, #0
 801173c:	6078      	str	r0, [r7, #4]
 801173e:	6039      	str	r1, [r7, #0]
 8011740:	687a      	ldr	r2, [r7, #4]
 8011742:	683b      	ldr	r3, [r7, #0]
 8011744:	4614      	mov	r4, r2
 8011746:	461d      	mov	r5, r3
 8011748:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801174a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801174c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801174e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011750:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8011754:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	4618      	mov	r0, r3
 801175c:	370c      	adds	r7, #12
 801175e:	46bd      	mov	sp, r7
 8011760:	bcb0      	pop	{r4, r5, r7}
 8011762:	4770      	bx	lr

08011764 <_ZNK3Mat6MatrixILt3ELt4EEmlILt4EEENS0_ILt3EXT_EEERKNS0_ILt4EXT_EEE>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 8011764:	b580      	push	{r7, lr}
 8011766:	b084      	sub	sp, #16
 8011768:	af00      	add	r7, sp, #0
 801176a:	60f8      	str	r0, [r7, #12]
 801176c:	60b9      	str	r1, [r7, #8]
 801176e:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 8011770:	68f8      	ldr	r0, [r7, #12]
 8011772:	f7ff ffca 	bl	801170a <_ZN3Mat6MatrixILt3ELt4EEC1Ev>
	Multiply(other, result);
 8011776:	68fa      	ldr	r2, [r7, #12]
 8011778:	6879      	ldr	r1, [r7, #4]
 801177a:	68b8      	ldr	r0, [r7, #8]
 801177c:	f000 fb01 	bl	8011d82 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE>
	return result;
 8011780:	bf00      	nop
}
 8011782:	68f8      	ldr	r0, [r7, #12]
 8011784:	3710      	adds	r7, #16
 8011786:	46bd      	mov	sp, r7
 8011788:	bd80      	pop	{r7, pc}

0801178a <_ZNK3Mat6MatrixILt3ELt4EE10TransposedEv>:
Matrix<width, heigth> Matrix<heigth, width>::Transposed() const
 801178a:	b590      	push	{r4, r7, lr}
 801178c:	b085      	sub	sp, #20
 801178e:	af00      	add	r7, sp, #0
 8011790:	6078      	str	r0, [r7, #4]
 8011792:	6039      	str	r1, [r7, #0]
	Matrix<width, heigth> result;
 8011794:	6878      	ldr	r0, [r7, #4]
 8011796:	f7ff febb 	bl	8011510 <_ZN3Mat6MatrixILt4ELt3EEC1Ev>
	for(u_short r = 0; r < width; ++r)
 801179a:	2300      	movs	r3, #0
 801179c:	81fb      	strh	r3, [r7, #14]
 801179e:	e01c      	b.n	80117da <_ZNK3Mat6MatrixILt3ELt4EE10TransposedEv+0x50>
		for(u_short c = 0; c < heigth; ++c)
 80117a0:	2300      	movs	r3, #0
 80117a2:	81bb      	strh	r3, [r7, #12]
 80117a4:	e013      	b.n	80117ce <_ZNK3Mat6MatrixILt3ELt4EE10TransposedEv+0x44>
			result(r, c) = operator()(c, r);
 80117a6:	89ba      	ldrh	r2, [r7, #12]
 80117a8:	89fb      	ldrh	r3, [r7, #14]
 80117aa:	4619      	mov	r1, r3
 80117ac:	6878      	ldr	r0, [r7, #4]
 80117ae:	f000 fb9c 	bl	8011eea <_ZN3Mat6MatrixILt4ELt3EEclEtt>
 80117b2:	4604      	mov	r4, r0
 80117b4:	89fa      	ldrh	r2, [r7, #14]
 80117b6:	89bb      	ldrh	r3, [r7, #12]
 80117b8:	4619      	mov	r1, r3
 80117ba:	6838      	ldr	r0, [r7, #0]
 80117bc:	f000 fbae 	bl	8011f1c <_ZNK3Mat6MatrixILt3ELt4EEclEtt>
 80117c0:	eef0 7a40 	vmov.f32	s15, s0
 80117c4:	edc4 7a00 	vstr	s15, [r4]
		for(u_short c = 0; c < heigth; ++c)
 80117c8:	89bb      	ldrh	r3, [r7, #12]
 80117ca:	3301      	adds	r3, #1
 80117cc:	81bb      	strh	r3, [r7, #12]
 80117ce:	89bb      	ldrh	r3, [r7, #12]
 80117d0:	2b02      	cmp	r3, #2
 80117d2:	d9e8      	bls.n	80117a6 <_ZNK3Mat6MatrixILt3ELt4EE10TransposedEv+0x1c>
	for(u_short r = 0; r < width; ++r)
 80117d4:	89fb      	ldrh	r3, [r7, #14]
 80117d6:	3301      	adds	r3, #1
 80117d8:	81fb      	strh	r3, [r7, #14]
 80117da:	89fb      	ldrh	r3, [r7, #14]
 80117dc:	2b03      	cmp	r3, #3
 80117de:	d9df      	bls.n	80117a0 <_ZNK3Mat6MatrixILt3ELt4EE10TransposedEv+0x16>
	return result;
 80117e0:	bf00      	nop
}
 80117e2:	6878      	ldr	r0, [r7, #4]
 80117e4:	3714      	adds	r7, #20
 80117e6:	46bd      	mov	sp, r7
 80117e8:	bd90      	pop	{r4, r7, pc}

080117ea <_ZNK3Mat6MatrixILt3ELt4EEmlILt3EEENS0_ILt3EXT_EEERKNS0_ILt4EXT_EEE>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 80117ea:	b580      	push	{r7, lr}
 80117ec:	b084      	sub	sp, #16
 80117ee:	af00      	add	r7, sp, #0
 80117f0:	60f8      	str	r0, [r7, #12]
 80117f2:	60b9      	str	r1, [r7, #8]
 80117f4:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 80117f6:	68f8      	ldr	r0, [r7, #12]
 80117f8:	f7fb feea 	bl	800d5d0 <_ZN3Mat6MatrixILt3ELt3EEC1Ev>
	Multiply(other, result);
 80117fc:	68fa      	ldr	r2, [r7, #12]
 80117fe:	6879      	ldr	r1, [r7, #4]
 8011800:	68b8      	ldr	r0, [r7, #8]
 8011802:	f000 fba6 	bl	8011f52 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE>
	return result;
 8011806:	bf00      	nop
}
 8011808:	68f8      	ldr	r0, [r7, #12]
 801180a:	3710      	adds	r7, #16
 801180c:	46bd      	mov	sp, r7
 801180e:	bd80      	pop	{r7, pc}

08011810 <_ZNK3Mat6MatrixILt3ELt3EEplERKS1_>:
inline Matrix<heigth, width> Matrix<heigth, width>::operator+(const Matrix<heigth, width> &other) const
 8011810:	b5b0      	push	{r4, r5, r7, lr}
 8011812:	b084      	sub	sp, #16
 8011814:	af00      	add	r7, sp, #0
 8011816:	60f8      	str	r0, [r7, #12]
 8011818:	60b9      	str	r1, [r7, #8]
 801181a:	607a      	str	r2, [r7, #4]
    Matrix<heigth, width> result = *this;
 801181c:	68fa      	ldr	r2, [r7, #12]
 801181e:	68bb      	ldr	r3, [r7, #8]
 8011820:	4614      	mov	r4, r2
 8011822:	461d      	mov	r5, r3
 8011824:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011826:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011828:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801182a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801182c:	682b      	ldr	r3, [r5, #0]
 801182e:	6023      	str	r3, [r4, #0]
	result += other;
 8011830:	6879      	ldr	r1, [r7, #4]
 8011832:	68f8      	ldr	r0, [r7, #12]
 8011834:	f000 fc41 	bl	80120ba <_ZN3Mat6MatrixILt3ELt3EEpLERKS1_>
	return result;
 8011838:	bf00      	nop
}
 801183a:	68f8      	ldr	r0, [r7, #12]
 801183c:	3710      	adds	r7, #16
 801183e:	46bd      	mov	sp, r7
 8011840:	bdb0      	pop	{r4, r5, r7, pc}

08011842 <_ZNK3Mat6MatrixILt4ELt4EEmlILt3EEENS0_ILt4EXT_EEERKS3_>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 8011842:	b580      	push	{r7, lr}
 8011844:	b084      	sub	sp, #16
 8011846:	af00      	add	r7, sp, #0
 8011848:	60f8      	str	r0, [r7, #12]
 801184a:	60b9      	str	r1, [r7, #8]
 801184c:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 801184e:	68f8      	ldr	r0, [r7, #12]
 8011850:	f7ff fe5e 	bl	8011510 <_ZN3Mat6MatrixILt4ELt3EEC1Ev>
	Multiply(other, result);
 8011854:	68fa      	ldr	r2, [r7, #12]
 8011856:	6879      	ldr	r1, [r7, #4]
 8011858:	68b8      	ldr	r0, [r7, #8]
 801185a:	f000 fc63 	bl	8012124 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERS3_>
	return result;
 801185e:	bf00      	nop
}
 8011860:	68f8      	ldr	r0, [r7, #12]
 8011862:	3710      	adds	r7, #16
 8011864:	46bd      	mov	sp, r7
 8011866:	bd80      	pop	{r7, pc}

08011868 <_ZNK3Mat6MatrixILt4ELt3EEmlILt3EEENS0_ILt4EXT_EEERKNS0_ILt3EXT_EEE>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 8011868:	b580      	push	{r7, lr}
 801186a:	b084      	sub	sp, #16
 801186c:	af00      	add	r7, sp, #0
 801186e:	60f8      	str	r0, [r7, #12]
 8011870:	60b9      	str	r1, [r7, #8]
 8011872:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 8011874:	68f8      	ldr	r0, [r7, #12]
 8011876:	f7ff fe4b 	bl	8011510 <_ZN3Mat6MatrixILt4ELt3EEC1Ev>
	Multiply(other, result);
 801187a:	68fa      	ldr	r2, [r7, #12]
 801187c:	6879      	ldr	r1, [r7, #4]
 801187e:	68b8      	ldr	r0, [r7, #8]
 8011880:	f000 fd04 	bl	801228c <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE>
	return result;
 8011884:	bf00      	nop
}
 8011886:	68f8      	ldr	r0, [r7, #12]
 8011888:	3710      	adds	r7, #16
 801188a:	46bd      	mov	sp, r7
 801188c:	bd80      	pop	{r7, pc}

0801188e <_ZNK3Mat6MatrixILt4ELt3EEmlILt1EEENS0_ILt4EXT_EEERKNS0_ILt3EXT_EEE>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 801188e:	b590      	push	{r4, r7, lr}
 8011890:	b08f      	sub	sp, #60	; 0x3c
 8011892:	af00      	add	r7, sp, #0
 8011894:	6178      	str	r0, [r7, #20]
 8011896:	6139      	str	r1, [r7, #16]
	Matrix<heigth, other_width> result;
 8011898:	f107 0318 	add.w	r3, r7, #24
 801189c:	4618      	mov	r0, r3
 801189e:	f7ff ff3f 	bl	8011720 <_ZN3Mat6MatrixILt4ELt1EEC1Ev>
	Multiply(other, result);
 80118a2:	f107 0318 	add.w	r3, r7, #24
 80118a6:	461a      	mov	r2, r3
 80118a8:	6939      	ldr	r1, [r7, #16]
 80118aa:	6978      	ldr	r0, [r7, #20]
 80118ac:	f000 fda2 	bl	80123f4 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE>
	return result;
 80118b0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80118b4:	f107 0318 	add.w	r3, r7, #24
 80118b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80118ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80118be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80118c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80118c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80118c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118c6:	ee06 0a10 	vmov	s12, r0
 80118ca:	ee06 1a90 	vmov	s13, r1
 80118ce:	ee07 2a10 	vmov	s14, r2
 80118d2:	ee07 3a90 	vmov	s15, r3
}
 80118d6:	eeb0 0a46 	vmov.f32	s0, s12
 80118da:	eef0 0a66 	vmov.f32	s1, s13
 80118de:	eeb0 1a47 	vmov.f32	s2, s14
 80118e2:	eef0 1a67 	vmov.f32	s3, s15
 80118e6:	373c      	adds	r7, #60	; 0x3c
 80118e8:	46bd      	mov	sp, r7
 80118ea:	bd90      	pop	{r4, r7, pc}

080118ec <_ZN3Mat6MatrixILt4ELt1EEclEtt>:
float& Matrix<heigth, width>::operator()(u_short row, u_short col)
 80118ec:	b580      	push	{r7, lr}
 80118ee:	b084      	sub	sp, #16
 80118f0:	af00      	add	r7, sp, #0
 80118f2:	6078      	str	r0, [r7, #4]
 80118f4:	460b      	mov	r3, r1
 80118f6:	807b      	strh	r3, [r7, #2]
 80118f8:	4613      	mov	r3, r2
 80118fa:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 80118fc:	887a      	ldrh	r2, [r7, #2]
 80118fe:	883b      	ldrh	r3, [r7, #0]
 8011900:	4413      	add	r3, r2
 8011902:	60fb      	str	r3, [r7, #12]
	return _values[index];
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	68f9      	ldr	r1, [r7, #12]
 8011908:	4618      	mov	r0, r3
 801190a:	f000 fe27 	bl	801255c <_ZNSt5arrayIfLj4EEixEj>
 801190e:	4603      	mov	r3, r0
}
 8011910:	4618      	mov	r0, r3
 8011912:	3710      	adds	r7, #16
 8011914:	46bd      	mov	sp, r7
 8011916:	bd80      	pop	{r7, pc}

08011918 <_ZNK3Mat6MatrixILt4ELt4EEmiERKS1_>:
inline Matrix<heigth, width> Matrix<heigth, width>::operator-(const Matrix<heigth, width> &other) const
 8011918:	b5b0      	push	{r4, r5, r7, lr}
 801191a:	b084      	sub	sp, #16
 801191c:	af00      	add	r7, sp, #0
 801191e:	60f8      	str	r0, [r7, #12]
 8011920:	60b9      	str	r1, [r7, #8]
 8011922:	607a      	str	r2, [r7, #4]
    Matrix<heigth, width> result = *this;
 8011924:	68fa      	ldr	r2, [r7, #12]
 8011926:	68bb      	ldr	r3, [r7, #8]
 8011928:	4614      	mov	r4, r2
 801192a:	461d      	mov	r5, r3
 801192c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801192e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011930:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011932:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011934:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011936:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011938:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801193c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	result -= other;
 8011940:	6879      	ldr	r1, [r7, #4]
 8011942:	68f8      	ldr	r0, [r7, #12]
 8011944:	f000 fe19 	bl	801257a <_ZN3Mat6MatrixILt4ELt4EEmIERKS1_>
	return result;
 8011948:	bf00      	nop
}
 801194a:	68f8      	ldr	r0, [r7, #12]
 801194c:	3710      	adds	r7, #16
 801194e:	46bd      	mov	sp, r7
 8011950:	bdb0      	pop	{r4, r5, r7, pc}

08011952 <_ZN3Mat6MatrixILt3ELt4EEclEtt>:
float& Matrix<heigth, width>::operator()(u_short row, u_short col)
 8011952:	b580      	push	{r7, lr}
 8011954:	b084      	sub	sp, #16
 8011956:	af00      	add	r7, sp, #0
 8011958:	6078      	str	r0, [r7, #4]
 801195a:	460b      	mov	r3, r1
 801195c:	807b      	strh	r3, [r7, #2]
 801195e:	4613      	mov	r3, r2
 8011960:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 8011962:	887b      	ldrh	r3, [r7, #2]
 8011964:	009a      	lsls	r2, r3, #2
 8011966:	883b      	ldrh	r3, [r7, #0]
 8011968:	4413      	add	r3, r2
 801196a:	60fb      	str	r3, [r7, #12]
	return _values[index];
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	68f9      	ldr	r1, [r7, #12]
 8011970:	4618      	mov	r0, r3
 8011972:	f000 fe37 	bl	80125e4 <_ZNSt5arrayIfLj12EEixEj>
 8011976:	4603      	mov	r3, r0
}
 8011978:	4618      	mov	r0, r3
 801197a:	3710      	adds	r7, #16
 801197c:	46bd      	mov	sp, r7
 801197e:	bd80      	pop	{r7, pc}

08011980 <_ZNK3Mat6MatrixILt4ELt3EEclEtt>:
float Matrix<heigth, width>::operator()(u_short row, u_short col) const
 8011980:	b580      	push	{r7, lr}
 8011982:	b084      	sub	sp, #16
 8011984:	af00      	add	r7, sp, #0
 8011986:	6078      	str	r0, [r7, #4]
 8011988:	460b      	mov	r3, r1
 801198a:	807b      	strh	r3, [r7, #2]
 801198c:	4613      	mov	r3, r2
 801198e:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 8011990:	887a      	ldrh	r2, [r7, #2]
 8011992:	4613      	mov	r3, r2
 8011994:	005b      	lsls	r3, r3, #1
 8011996:	441a      	add	r2, r3
 8011998:	883b      	ldrh	r3, [r7, #0]
 801199a:	4413      	add	r3, r2
 801199c:	60fb      	str	r3, [r7, #12]
	return _values[index];
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	68f9      	ldr	r1, [r7, #12]
 80119a2:	4618      	mov	r0, r3
 80119a4:	f000 fe2d 	bl	8012602 <_ZNKSt5arrayIfLj12EEixEj>
 80119a8:	4603      	mov	r3, r0
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	ee07 3a90 	vmov	s15, r3
}
 80119b0:	eeb0 0a67 	vmov.f32	s0, s15
 80119b4:	3710      	adds	r7, #16
 80119b6:	46bd      	mov	sp, r7
 80119b8:	bd80      	pop	{r7, pc}

080119ba <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt4EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 80119ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80119bc:	b0a1      	sub	sp, #132	; 0x84
 80119be:	af00      	add	r7, sp, #0
 80119c0:	60f8      	str	r0, [r7, #12]
 80119c2:	60b9      	str	r1, [r7, #8]
 80119c4:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 80119c6:	2300      	movs	r3, #0
 80119c8:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80119cc:	e02d      	b.n	8011a2a <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt4EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x70>
		for(u_short col = 0; col < width; ++col)
 80119ce:	2300      	movs	r3, #0
 80119d0:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80119d4:	e020      	b.n	8011a18 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt4EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 80119d6:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 80119da:	f107 0314 	add.w	r3, r7, #20
 80119de:	4611      	mov	r1, r2
 80119e0:	4618      	mov	r0, r3
 80119e2:	f000 fe1d 	bl	8012620 <_ZNSt5arrayIS_IfLj3EELj4EEixEj>
 80119e6:	4602      	mov	r2, r0
 80119e8:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80119ec:	4619      	mov	r1, r3
 80119ee:	4610      	mov	r0, r2
 80119f0:	f7fc f82f 	bl	800da52 <_ZNSt5arrayIfLj3EEixEj>
 80119f4:	4604      	mov	r4, r0
 80119f6:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80119fa:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80119fe:	4619      	mov	r1, r3
 8011a00:	68f8      	ldr	r0, [r7, #12]
 8011a02:	f7ff ffbd 	bl	8011980 <_ZNK3Mat6MatrixILt4ELt3EEclEtt>
 8011a06:	eef0 7a40 	vmov.f32	s15, s0
 8011a0a:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 8011a0e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8011a12:	3301      	adds	r3, #1
 8011a14:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8011a18:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8011a1c:	2b02      	cmp	r3, #2
 8011a1e:	d9da      	bls.n	80119d6 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt4EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 8011a20:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8011a24:	3301      	adds	r3, #1
 8011a26:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8011a2a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8011a2e:	2b03      	cmp	r3, #3
 8011a30:	d9cd      	bls.n	80119ce <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt4EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x14>
	for(u_short col = 0; col < other_width; ++col)
 8011a32:	2300      	movs	r3, #0
 8011a34:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8011a38:	e02d      	b.n	8011a96 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt4EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0xdc>
		for(u_short row = 0; row < width; ++row)
 8011a3a:	2300      	movs	r3, #0
 8011a3c:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8011a40:	e020      	b.n	8011a84 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt4EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0xca>
			other_columns[col][row] = other(row, col);
 8011a42:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8011a46:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011a4a:	4611      	mov	r1, r2
 8011a4c:	4618      	mov	r0, r3
 8011a4e:	f000 fde7 	bl	8012620 <_ZNSt5arrayIS_IfLj3EELj4EEixEj>
 8011a52:	4602      	mov	r2, r0
 8011a54:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8011a58:	4619      	mov	r1, r3
 8011a5a:	4610      	mov	r0, r2
 8011a5c:	f7fb fff9 	bl	800da52 <_ZNSt5arrayIfLj3EEixEj>
 8011a60:	4604      	mov	r4, r0
 8011a62:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8011a66:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8011a6a:	4619      	mov	r1, r3
 8011a6c:	68b8      	ldr	r0, [r7, #8]
 8011a6e:	f000 fa55 	bl	8011f1c <_ZNK3Mat6MatrixILt3ELt4EEclEtt>
 8011a72:	eef0 7a40 	vmov.f32	s15, s0
 8011a76:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 8011a7a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8011a7e:	3301      	adds	r3, #1
 8011a80:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8011a84:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8011a88:	2b02      	cmp	r3, #2
 8011a8a:	d9da      	bls.n	8011a42 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt4EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x88>
	for(u_short col = 0; col < other_width; ++col)
 8011a8c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8011a90:	3301      	adds	r3, #1
 8011a92:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8011a96:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8011a9a:	2b03      	cmp	r3, #3
 8011a9c:	d9cd      	bls.n	8011a3a <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt4EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x80>
	for(u_short row = 0; row < heigth; ++row)
 8011a9e:	2300      	movs	r3, #0
 8011aa0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8011aa4:	e034      	b.n	8011b10 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt4EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x156>
		for(u_short col = 0; col < other_width; ++col)
 8011aa6:	2300      	movs	r3, #0
 8011aa8:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8011aac:	e027      	b.n	8011afe <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt4EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 8011aae:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011ab2:	f107 0314 	add.w	r3, r7, #20
 8011ab6:	4611      	mov	r1, r2
 8011ab8:	4618      	mov	r0, r3
 8011aba:	f000 fdb1 	bl	8012620 <_ZNSt5arrayIS_IfLj3EELj4EEixEj>
 8011abe:	4605      	mov	r5, r0
 8011ac0:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8011ac4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011ac8:	4611      	mov	r1, r2
 8011aca:	4618      	mov	r0, r3
 8011acc:	f000 fda8 	bl	8012620 <_ZNSt5arrayIS_IfLj3EELj4EEixEj>
 8011ad0:	4606      	mov	r6, r0
 8011ad2:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8011ad6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8011ada:	4619      	mov	r1, r3
 8011adc:	6878      	ldr	r0, [r7, #4]
 8011ade:	f7fb fef6 	bl	800d8ce <_ZN3Mat6MatrixILt4ELt4EEclEtt>
 8011ae2:	4604      	mov	r4, r0
 8011ae4:	4631      	mov	r1, r6
 8011ae6:	4628      	mov	r0, r5
 8011ae8:	f7fc f9cf 	bl	800de8a <_ZN3Mat13Multiply_rowsILj3EEEfRKSt5arrayIfXT_EES4_>
 8011aec:	eef0 7a40 	vmov.f32	s15, s0
 8011af0:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 8011af4:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8011af8:	3301      	adds	r3, #1
 8011afa:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8011afe:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8011b02:	2b03      	cmp	r3, #3
 8011b04:	d9d3      	bls.n	8011aae <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt4EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 8011b06:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8011b0a:	3301      	adds	r3, #1
 8011b0c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8011b10:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8011b14:	2b03      	cmp	r3, #3
 8011b16:	d9c6      	bls.n	8011aa6 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt4EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0xec>
}
 8011b18:	bf00      	nop
 8011b1a:	bf00      	nop
 8011b1c:	3784      	adds	r7, #132	; 0x84
 8011b1e:	46bd      	mov	sp, r7
 8011b20:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011b22 <_ZN3Mat6MatrixILt4ELt4EEmLEf>:
inline Matrix<heigth, width> &Matrix<heigth, width>::operator*=(float val)
 8011b22:	b580      	push	{r7, lr}
 8011b24:	b084      	sub	sp, #16
 8011b26:	af00      	add	r7, sp, #0
 8011b28:	6078      	str	r0, [r7, #4]
 8011b2a:	ed87 0a00 	vstr	s0, [r7]
    for(u_int i = 0; i < _values.size(); ++i) _values[i] *= val;
 8011b2e:	2300      	movs	r3, #0
 8011b30:	60fb      	str	r3, [r7, #12]
 8011b32:	e010      	b.n	8011b56 <_ZN3Mat6MatrixILt4ELt4EEmLEf+0x34>
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	68f9      	ldr	r1, [r7, #12]
 8011b38:	4618      	mov	r0, r3
 8011b3a:	f7fc f8d3 	bl	800dce4 <_ZNSt5arrayIfLj16EEixEj>
 8011b3e:	4603      	mov	r3, r0
 8011b40:	ed93 7a00 	vldr	s14, [r3]
 8011b44:	edd7 7a00 	vldr	s15, [r7]
 8011b48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011b4c:	edc3 7a00 	vstr	s15, [r3]
 8011b50:	68fb      	ldr	r3, [r7, #12]
 8011b52:	3301      	adds	r3, #1
 8011b54:	60fb      	str	r3, [r7, #12]
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	4618      	mov	r0, r3
 8011b5a:	f000 fd70 	bl	801263e <_ZNKSt5arrayIfLj16EE4sizeEv>
 8011b5e:	4602      	mov	r2, r0
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	4293      	cmp	r3, r2
 8011b64:	bf34      	ite	cc
 8011b66:	2301      	movcc	r3, #1
 8011b68:	2300      	movcs	r3, #0
 8011b6a:	b2db      	uxtb	r3, r3
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d1e1      	bne.n	8011b34 <_ZN3Mat6MatrixILt4ELt4EEmLEf+0x12>
	return *this;
 8011b70:	687b      	ldr	r3, [r7, #4]
}
 8011b72:	4618      	mov	r0, r3
 8011b74:	3710      	adds	r7, #16
 8011b76:	46bd      	mov	sp, r7
 8011b78:	bd80      	pop	{r7, pc}

08011b7a <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERS3_>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 8011b7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b7c:	b0a9      	sub	sp, #164	; 0xa4
 8011b7e:	af00      	add	r7, sp, #0
 8011b80:	60f8      	str	r0, [r7, #12]
 8011b82:	60b9      	str	r1, [r7, #8]
 8011b84:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 8011b86:	2300      	movs	r3, #0
 8011b88:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8011b8c:	e02d      	b.n	8011bea <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERS3_+0x70>
		for(u_short col = 0; col < width; ++col)
 8011b8e:	2300      	movs	r3, #0
 8011b90:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8011b94:	e020      	b.n	8011bd8 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERS3_+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 8011b96:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8011b9a:	f107 0314 	add.w	r3, r7, #20
 8011b9e:	4611      	mov	r1, r2
 8011ba0:	4618      	mov	r0, r3
 8011ba2:	f000 fd57 	bl	8012654 <_ZNSt5arrayIS_IfLj4EELj4EEixEj>
 8011ba6:	4602      	mov	r2, r0
 8011ba8:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8011bac:	4619      	mov	r1, r3
 8011bae:	4610      	mov	r0, r2
 8011bb0:	f000 fcd4 	bl	801255c <_ZNSt5arrayIfLj4EEixEj>
 8011bb4:	4604      	mov	r4, r0
 8011bb6:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8011bba:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8011bbe:	4619      	mov	r1, r3
 8011bc0:	68f8      	ldr	r0, [r7, #12]
 8011bc2:	f000 f88e 	bl	8011ce2 <_ZNK3Mat6MatrixILt4ELt4EEclEtt>
 8011bc6:	eef0 7a40 	vmov.f32	s15, s0
 8011bca:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 8011bce:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8011bd2:	3301      	adds	r3, #1
 8011bd4:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8011bd8:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8011bdc:	2b03      	cmp	r3, #3
 8011bde:	d9da      	bls.n	8011b96 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERS3_+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 8011be0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8011be4:	3301      	adds	r3, #1
 8011be6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8011bea:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8011bee:	2b03      	cmp	r3, #3
 8011bf0:	d9cd      	bls.n	8011b8e <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERS3_+0x14>
	for(u_short col = 0; col < other_width; ++col)
 8011bf2:	2300      	movs	r3, #0
 8011bf4:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8011bf8:	e02d      	b.n	8011c56 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERS3_+0xdc>
		for(u_short row = 0; row < width; ++row)
 8011bfa:	2300      	movs	r3, #0
 8011bfc:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8011c00:	e020      	b.n	8011c44 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERS3_+0xca>
			other_columns[col][row] = other(row, col);
 8011c02:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 8011c06:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011c0a:	4611      	mov	r1, r2
 8011c0c:	4618      	mov	r0, r3
 8011c0e:	f000 fd21 	bl	8012654 <_ZNSt5arrayIS_IfLj4EELj4EEixEj>
 8011c12:	4602      	mov	r2, r0
 8011c14:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8011c18:	4619      	mov	r1, r3
 8011c1a:	4610      	mov	r0, r2
 8011c1c:	f000 fc9e 	bl	801255c <_ZNSt5arrayIfLj4EEixEj>
 8011c20:	4604      	mov	r4, r0
 8011c22:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 8011c26:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8011c2a:	4619      	mov	r1, r3
 8011c2c:	68b8      	ldr	r0, [r7, #8]
 8011c2e:	f000 f858 	bl	8011ce2 <_ZNK3Mat6MatrixILt4ELt4EEclEtt>
 8011c32:	eef0 7a40 	vmov.f32	s15, s0
 8011c36:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 8011c3a:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8011c3e:	3301      	adds	r3, #1
 8011c40:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8011c44:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8011c48:	2b03      	cmp	r3, #3
 8011c4a:	d9da      	bls.n	8011c02 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERS3_+0x88>
	for(u_short col = 0; col < other_width; ++col)
 8011c4c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8011c50:	3301      	adds	r3, #1
 8011c52:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8011c56:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8011c5a:	2b03      	cmp	r3, #3
 8011c5c:	d9cd      	bls.n	8011bfa <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERS3_+0x80>
	for(u_short row = 0; row < heigth; ++row)
 8011c5e:	2300      	movs	r3, #0
 8011c60:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8011c64:	e034      	b.n	8011cd0 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERS3_+0x156>
		for(u_short col = 0; col < other_width; ++col)
 8011c66:	2300      	movs	r3, #0
 8011c68:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8011c6c:	e027      	b.n	8011cbe <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERS3_+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 8011c6e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8011c72:	f107 0314 	add.w	r3, r7, #20
 8011c76:	4611      	mov	r1, r2
 8011c78:	4618      	mov	r0, r3
 8011c7a:	f000 fceb 	bl	8012654 <_ZNSt5arrayIS_IfLj4EELj4EEixEj>
 8011c7e:	4605      	mov	r5, r0
 8011c80:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 8011c84:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011c88:	4611      	mov	r1, r2
 8011c8a:	4618      	mov	r0, r3
 8011c8c:	f000 fce2 	bl	8012654 <_ZNSt5arrayIS_IfLj4EELj4EEixEj>
 8011c90:	4606      	mov	r6, r0
 8011c92:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 8011c96:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8011c9a:	4619      	mov	r1, r3
 8011c9c:	6878      	ldr	r0, [r7, #4]
 8011c9e:	f7fb fe16 	bl	800d8ce <_ZN3Mat6MatrixILt4ELt4EEclEtt>
 8011ca2:	4604      	mov	r4, r0
 8011ca4:	4631      	mov	r1, r6
 8011ca6:	4628      	mov	r0, r5
 8011ca8:	f000 fce3 	bl	8012672 <_ZN3Mat13Multiply_rowsILj4EEEfRKSt5arrayIfXT_EES4_>
 8011cac:	eef0 7a40 	vmov.f32	s15, s0
 8011cb0:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 8011cb4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8011cb8:	3301      	adds	r3, #1
 8011cba:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8011cbe:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8011cc2:	2b03      	cmp	r3, #3
 8011cc4:	d9d3      	bls.n	8011c6e <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERS3_+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 8011cc6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8011cca:	3301      	adds	r3, #1
 8011ccc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8011cd0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8011cd4:	2b03      	cmp	r3, #3
 8011cd6:	d9c6      	bls.n	8011c66 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERS3_+0xec>
}
 8011cd8:	bf00      	nop
 8011cda:	bf00      	nop
 8011cdc:	37a4      	adds	r7, #164	; 0xa4
 8011cde:	46bd      	mov	sp, r7
 8011ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011ce2 <_ZNK3Mat6MatrixILt4ELt4EEclEtt>:
float Matrix<heigth, width>::operator()(u_short row, u_short col) const
 8011ce2:	b580      	push	{r7, lr}
 8011ce4:	b084      	sub	sp, #16
 8011ce6:	af00      	add	r7, sp, #0
 8011ce8:	6078      	str	r0, [r7, #4]
 8011cea:	460b      	mov	r3, r1
 8011cec:	807b      	strh	r3, [r7, #2]
 8011cee:	4613      	mov	r3, r2
 8011cf0:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 8011cf2:	887b      	ldrh	r3, [r7, #2]
 8011cf4:	009a      	lsls	r2, r3, #2
 8011cf6:	883b      	ldrh	r3, [r7, #0]
 8011cf8:	4413      	add	r3, r2
 8011cfa:	60fb      	str	r3, [r7, #12]
	return _values[index];
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	68f9      	ldr	r1, [r7, #12]
 8011d00:	4618      	mov	r0, r3
 8011d02:	f000 fce9 	bl	80126d8 <_ZNKSt5arrayIfLj16EEixEj>
 8011d06:	4603      	mov	r3, r0
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	ee07 3a90 	vmov	s15, r3
}
 8011d0e:	eeb0 0a67 	vmov.f32	s0, s15
 8011d12:	3710      	adds	r7, #16
 8011d14:	46bd      	mov	sp, r7
 8011d16:	bd80      	pop	{r7, pc}

08011d18 <_ZN3Mat6MatrixILt4ELt4EEpLERKS1_>:
inline Matrix<heigth, width> &Matrix<heigth, width>::operator+=(const Matrix<heigth, width> &other)
 8011d18:	b580      	push	{r7, lr}
 8011d1a:	ed2d 8b02 	vpush	{d8}
 8011d1e:	b084      	sub	sp, #16
 8011d20:	af00      	add	r7, sp, #0
 8011d22:	6078      	str	r0, [r7, #4]
 8011d24:	6039      	str	r1, [r7, #0]
    for(u_int i = 0; i < _values.size(); ++i) _values[i] += other._values[i];
 8011d26:	2300      	movs	r3, #0
 8011d28:	60fb      	str	r3, [r7, #12]
 8011d2a:	e016      	b.n	8011d5a <_ZN3Mat6MatrixILt4ELt4EEpLERKS1_+0x42>
 8011d2c:	683b      	ldr	r3, [r7, #0]
 8011d2e:	68f9      	ldr	r1, [r7, #12]
 8011d30:	4618      	mov	r0, r3
 8011d32:	f000 fcd1 	bl	80126d8 <_ZNKSt5arrayIfLj16EEixEj>
 8011d36:	4603      	mov	r3, r0
 8011d38:	ed93 8a00 	vldr	s16, [r3]
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	68f9      	ldr	r1, [r7, #12]
 8011d40:	4618      	mov	r0, r3
 8011d42:	f7fb ffcf 	bl	800dce4 <_ZNSt5arrayIfLj16EEixEj>
 8011d46:	4603      	mov	r3, r0
 8011d48:	edd3 7a00 	vldr	s15, [r3]
 8011d4c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8011d50:	edc3 7a00 	vstr	s15, [r3]
 8011d54:	68fb      	ldr	r3, [r7, #12]
 8011d56:	3301      	adds	r3, #1
 8011d58:	60fb      	str	r3, [r7, #12]
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	4618      	mov	r0, r3
 8011d5e:	f000 fc6e 	bl	801263e <_ZNKSt5arrayIfLj16EE4sizeEv>
 8011d62:	4602      	mov	r2, r0
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	4293      	cmp	r3, r2
 8011d68:	bf34      	ite	cc
 8011d6a:	2301      	movcc	r3, #1
 8011d6c:	2300      	movcs	r3, #0
 8011d6e:	b2db      	uxtb	r3, r3
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d1db      	bne.n	8011d2c <_ZN3Mat6MatrixILt4ELt4EEpLERKS1_+0x14>
	return *this;
 8011d74:	687b      	ldr	r3, [r7, #4]
}
 8011d76:	4618      	mov	r0, r3
 8011d78:	3710      	adds	r7, #16
 8011d7a:	46bd      	mov	sp, r7
 8011d7c:	ecbd 8b02 	vpop	{d8}
 8011d80:	bd80      	pop	{r7, pc}

08011d82 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 8011d82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011d84:	b0a5      	sub	sp, #148	; 0x94
 8011d86:	af00      	add	r7, sp, #0
 8011d88:	60f8      	str	r0, [r7, #12]
 8011d8a:	60b9      	str	r1, [r7, #8]
 8011d8c:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 8011d8e:	2300      	movs	r3, #0
 8011d90:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8011d94:	e02d      	b.n	8011df2 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x70>
		for(u_short col = 0; col < width; ++col)
 8011d96:	2300      	movs	r3, #0
 8011d98:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8011d9c:	e020      	b.n	8011de0 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 8011d9e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8011da2:	f107 0314 	add.w	r3, r7, #20
 8011da6:	4611      	mov	r1, r2
 8011da8:	4618      	mov	r0, r3
 8011daa:	f000 fca4 	bl	80126f6 <_ZNSt5arrayIS_IfLj4EELj3EEixEj>
 8011dae:	4602      	mov	r2, r0
 8011db0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8011db4:	4619      	mov	r1, r3
 8011db6:	4610      	mov	r0, r2
 8011db8:	f000 fbd0 	bl	801255c <_ZNSt5arrayIfLj4EEixEj>
 8011dbc:	4604      	mov	r4, r0
 8011dbe:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8011dc2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8011dc6:	4619      	mov	r1, r3
 8011dc8:	68f8      	ldr	r0, [r7, #12]
 8011dca:	f000 f8a7 	bl	8011f1c <_ZNK3Mat6MatrixILt3ELt4EEclEtt>
 8011dce:	eef0 7a40 	vmov.f32	s15, s0
 8011dd2:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 8011dd6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8011dda:	3301      	adds	r3, #1
 8011ddc:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8011de0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8011de4:	2b03      	cmp	r3, #3
 8011de6:	d9da      	bls.n	8011d9e <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 8011de8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8011dec:	3301      	adds	r3, #1
 8011dee:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8011df2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8011df6:	2b02      	cmp	r3, #2
 8011df8:	d9cd      	bls.n	8011d96 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x14>
	for(u_short col = 0; col < other_width; ++col)
 8011dfa:	2300      	movs	r3, #0
 8011dfc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8011e00:	e02d      	b.n	8011e5e <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0xdc>
		for(u_short row = 0; row < width; ++row)
 8011e02:	2300      	movs	r3, #0
 8011e04:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8011e08:	e020      	b.n	8011e4c <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0xca>
			other_columns[col][row] = other(row, col);
 8011e0a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8011e0e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011e12:	4611      	mov	r1, r2
 8011e14:	4618      	mov	r0, r3
 8011e16:	f000 fc1d 	bl	8012654 <_ZNSt5arrayIS_IfLj4EELj4EEixEj>
 8011e1a:	4602      	mov	r2, r0
 8011e1c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8011e20:	4619      	mov	r1, r3
 8011e22:	4610      	mov	r0, r2
 8011e24:	f000 fb9a 	bl	801255c <_ZNSt5arrayIfLj4EEixEj>
 8011e28:	4604      	mov	r4, r0
 8011e2a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8011e2e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8011e32:	4619      	mov	r1, r3
 8011e34:	68b8      	ldr	r0, [r7, #8]
 8011e36:	f7ff ff54 	bl	8011ce2 <_ZNK3Mat6MatrixILt4ELt4EEclEtt>
 8011e3a:	eef0 7a40 	vmov.f32	s15, s0
 8011e3e:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 8011e42:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8011e46:	3301      	adds	r3, #1
 8011e48:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8011e4c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8011e50:	2b03      	cmp	r3, #3
 8011e52:	d9da      	bls.n	8011e0a <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x88>
	for(u_short col = 0; col < other_width; ++col)
 8011e54:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011e58:	3301      	adds	r3, #1
 8011e5a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8011e5e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011e62:	2b03      	cmp	r3, #3
 8011e64:	d9cd      	bls.n	8011e02 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x80>
	for(u_short row = 0; row < heigth; ++row)
 8011e66:	2300      	movs	r3, #0
 8011e68:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8011e6c:	e034      	b.n	8011ed8 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x156>
		for(u_short col = 0; col < other_width; ++col)
 8011e6e:	2300      	movs	r3, #0
 8011e70:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8011e74:	e027      	b.n	8011ec6 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 8011e76:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 8011e7a:	f107 0314 	add.w	r3, r7, #20
 8011e7e:	4611      	mov	r1, r2
 8011e80:	4618      	mov	r0, r3
 8011e82:	f000 fc38 	bl	80126f6 <_ZNSt5arrayIS_IfLj4EELj3EEixEj>
 8011e86:	4605      	mov	r5, r0
 8011e88:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 8011e8c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011e90:	4611      	mov	r1, r2
 8011e92:	4618      	mov	r0, r3
 8011e94:	f000 fbde 	bl	8012654 <_ZNSt5arrayIS_IfLj4EELj4EEixEj>
 8011e98:	4606      	mov	r6, r0
 8011e9a:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 8011e9e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8011ea2:	4619      	mov	r1, r3
 8011ea4:	6878      	ldr	r0, [r7, #4]
 8011ea6:	f7ff fd54 	bl	8011952 <_ZN3Mat6MatrixILt3ELt4EEclEtt>
 8011eaa:	4604      	mov	r4, r0
 8011eac:	4631      	mov	r1, r6
 8011eae:	4628      	mov	r0, r5
 8011eb0:	f000 fbdf 	bl	8012672 <_ZN3Mat13Multiply_rowsILj4EEEfRKSt5arrayIfXT_EES4_>
 8011eb4:	eef0 7a40 	vmov.f32	s15, s0
 8011eb8:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 8011ebc:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8011ec0:	3301      	adds	r3, #1
 8011ec2:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8011ec6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8011eca:	2b03      	cmp	r3, #3
 8011ecc:	d9d3      	bls.n	8011e76 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 8011ece:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8011ed2:	3301      	adds	r3, #1
 8011ed4:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8011ed8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8011edc:	2b02      	cmp	r3, #2
 8011ede:	d9c6      	bls.n	8011e6e <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0xec>
}
 8011ee0:	bf00      	nop
 8011ee2:	bf00      	nop
 8011ee4:	3794      	adds	r7, #148	; 0x94
 8011ee6:	46bd      	mov	sp, r7
 8011ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011eea <_ZN3Mat6MatrixILt4ELt3EEclEtt>:
float& Matrix<heigth, width>::operator()(u_short row, u_short col)
 8011eea:	b580      	push	{r7, lr}
 8011eec:	b084      	sub	sp, #16
 8011eee:	af00      	add	r7, sp, #0
 8011ef0:	6078      	str	r0, [r7, #4]
 8011ef2:	460b      	mov	r3, r1
 8011ef4:	807b      	strh	r3, [r7, #2]
 8011ef6:	4613      	mov	r3, r2
 8011ef8:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 8011efa:	887a      	ldrh	r2, [r7, #2]
 8011efc:	4613      	mov	r3, r2
 8011efe:	005b      	lsls	r3, r3, #1
 8011f00:	441a      	add	r2, r3
 8011f02:	883b      	ldrh	r3, [r7, #0]
 8011f04:	4413      	add	r3, r2
 8011f06:	60fb      	str	r3, [r7, #12]
	return _values[index];
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	68f9      	ldr	r1, [r7, #12]
 8011f0c:	4618      	mov	r0, r3
 8011f0e:	f000 fb69 	bl	80125e4 <_ZNSt5arrayIfLj12EEixEj>
 8011f12:	4603      	mov	r3, r0
}
 8011f14:	4618      	mov	r0, r3
 8011f16:	3710      	adds	r7, #16
 8011f18:	46bd      	mov	sp, r7
 8011f1a:	bd80      	pop	{r7, pc}

08011f1c <_ZNK3Mat6MatrixILt3ELt4EEclEtt>:
float Matrix<heigth, width>::operator()(u_short row, u_short col) const
 8011f1c:	b580      	push	{r7, lr}
 8011f1e:	b084      	sub	sp, #16
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	6078      	str	r0, [r7, #4]
 8011f24:	460b      	mov	r3, r1
 8011f26:	807b      	strh	r3, [r7, #2]
 8011f28:	4613      	mov	r3, r2
 8011f2a:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 8011f2c:	887b      	ldrh	r3, [r7, #2]
 8011f2e:	009a      	lsls	r2, r3, #2
 8011f30:	883b      	ldrh	r3, [r7, #0]
 8011f32:	4413      	add	r3, r2
 8011f34:	60fb      	str	r3, [r7, #12]
	return _values[index];
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	68f9      	ldr	r1, [r7, #12]
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	f000 fb61 	bl	8012602 <_ZNKSt5arrayIfLj12EEixEj>
 8011f40:	4603      	mov	r3, r0
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	ee07 3a90 	vmov	s15, r3
}
 8011f48:	eeb0 0a67 	vmov.f32	s0, s15
 8011f4c:	3710      	adds	r7, #16
 8011f4e:	46bd      	mov	sp, r7
 8011f50:	bd80      	pop	{r7, pc}

08011f52 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 8011f52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f54:	b0a1      	sub	sp, #132	; 0x84
 8011f56:	af00      	add	r7, sp, #0
 8011f58:	60f8      	str	r0, [r7, #12]
 8011f5a:	60b9      	str	r1, [r7, #8]
 8011f5c:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 8011f5e:	2300      	movs	r3, #0
 8011f60:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8011f64:	e02d      	b.n	8011fc2 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x70>
		for(u_short col = 0; col < width; ++col)
 8011f66:	2300      	movs	r3, #0
 8011f68:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8011f6c:	e020      	b.n	8011fb0 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 8011f6e:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8011f72:	f107 0314 	add.w	r3, r7, #20
 8011f76:	4611      	mov	r1, r2
 8011f78:	4618      	mov	r0, r3
 8011f7a:	f000 fbbc 	bl	80126f6 <_ZNSt5arrayIS_IfLj4EELj3EEixEj>
 8011f7e:	4602      	mov	r2, r0
 8011f80:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8011f84:	4619      	mov	r1, r3
 8011f86:	4610      	mov	r0, r2
 8011f88:	f000 fae8 	bl	801255c <_ZNSt5arrayIfLj4EEixEj>
 8011f8c:	4604      	mov	r4, r0
 8011f8e:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8011f92:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8011f96:	4619      	mov	r1, r3
 8011f98:	68f8      	ldr	r0, [r7, #12]
 8011f9a:	f7ff ffbf 	bl	8011f1c <_ZNK3Mat6MatrixILt3ELt4EEclEtt>
 8011f9e:	eef0 7a40 	vmov.f32	s15, s0
 8011fa2:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 8011fa6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8011faa:	3301      	adds	r3, #1
 8011fac:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8011fb0:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8011fb4:	2b03      	cmp	r3, #3
 8011fb6:	d9da      	bls.n	8011f6e <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 8011fb8:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8011fbc:	3301      	adds	r3, #1
 8011fbe:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8011fc2:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8011fc6:	2b02      	cmp	r3, #2
 8011fc8:	d9cd      	bls.n	8011f66 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x14>
	for(u_short col = 0; col < other_width; ++col)
 8011fca:	2300      	movs	r3, #0
 8011fcc:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8011fd0:	e02d      	b.n	801202e <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0xdc>
		for(u_short row = 0; row < width; ++row)
 8011fd2:	2300      	movs	r3, #0
 8011fd4:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8011fd8:	e020      	b.n	801201c <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0xca>
			other_columns[col][row] = other(row, col);
 8011fda:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8011fde:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011fe2:	4611      	mov	r1, r2
 8011fe4:	4618      	mov	r0, r3
 8011fe6:	f000 fb86 	bl	80126f6 <_ZNSt5arrayIS_IfLj4EELj3EEixEj>
 8011fea:	4602      	mov	r2, r0
 8011fec:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8011ff0:	4619      	mov	r1, r3
 8011ff2:	4610      	mov	r0, r2
 8011ff4:	f000 fab2 	bl	801255c <_ZNSt5arrayIfLj4EEixEj>
 8011ff8:	4604      	mov	r4, r0
 8011ffa:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8011ffe:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8012002:	4619      	mov	r1, r3
 8012004:	68b8      	ldr	r0, [r7, #8]
 8012006:	f7ff fcbb 	bl	8011980 <_ZNK3Mat6MatrixILt4ELt3EEclEtt>
 801200a:	eef0 7a40 	vmov.f32	s15, s0
 801200e:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 8012012:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8012016:	3301      	adds	r3, #1
 8012018:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 801201c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8012020:	2b03      	cmp	r3, #3
 8012022:	d9da      	bls.n	8011fda <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x88>
	for(u_short col = 0; col < other_width; ++col)
 8012024:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8012028:	3301      	adds	r3, #1
 801202a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 801202e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8012032:	2b02      	cmp	r3, #2
 8012034:	d9cd      	bls.n	8011fd2 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x80>
	for(u_short row = 0; row < heigth; ++row)
 8012036:	2300      	movs	r3, #0
 8012038:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 801203c:	e034      	b.n	80120a8 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x156>
		for(u_short col = 0; col < other_width; ++col)
 801203e:	2300      	movs	r3, #0
 8012040:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8012044:	e027      	b.n	8012096 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 8012046:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 801204a:	f107 0314 	add.w	r3, r7, #20
 801204e:	4611      	mov	r1, r2
 8012050:	4618      	mov	r0, r3
 8012052:	f000 fb50 	bl	80126f6 <_ZNSt5arrayIS_IfLj4EELj3EEixEj>
 8012056:	4605      	mov	r5, r0
 8012058:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 801205c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012060:	4611      	mov	r1, r2
 8012062:	4618      	mov	r0, r3
 8012064:	f000 fb47 	bl	80126f6 <_ZNSt5arrayIS_IfLj4EELj3EEixEj>
 8012068:	4606      	mov	r6, r0
 801206a:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 801206e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8012072:	4619      	mov	r1, r3
 8012074:	6878      	ldr	r0, [r7, #4]
 8012076:	f7fb fc9e 	bl	800d9b6 <_ZN3Mat6MatrixILt3ELt3EEclEtt>
 801207a:	4604      	mov	r4, r0
 801207c:	4631      	mov	r1, r6
 801207e:	4628      	mov	r0, r5
 8012080:	f000 faf7 	bl	8012672 <_ZN3Mat13Multiply_rowsILj4EEEfRKSt5arrayIfXT_EES4_>
 8012084:	eef0 7a40 	vmov.f32	s15, s0
 8012088:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 801208c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8012090:	3301      	adds	r3, #1
 8012092:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8012096:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 801209a:	2b02      	cmp	r3, #2
 801209c:	d9d3      	bls.n	8012046 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 801209e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80120a2:	3301      	adds	r3, #1
 80120a4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 80120a8:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80120ac:	2b02      	cmp	r3, #2
 80120ae:	d9c6      	bls.n	801203e <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0xec>
}
 80120b0:	bf00      	nop
 80120b2:	bf00      	nop
 80120b4:	3784      	adds	r7, #132	; 0x84
 80120b6:	46bd      	mov	sp, r7
 80120b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080120ba <_ZN3Mat6MatrixILt3ELt3EEpLERKS1_>:
inline Matrix<heigth, width> &Matrix<heigth, width>::operator+=(const Matrix<heigth, width> &other)
 80120ba:	b580      	push	{r7, lr}
 80120bc:	ed2d 8b02 	vpush	{d8}
 80120c0:	b084      	sub	sp, #16
 80120c2:	af00      	add	r7, sp, #0
 80120c4:	6078      	str	r0, [r7, #4]
 80120c6:	6039      	str	r1, [r7, #0]
    for(u_int i = 0; i < _values.size(); ++i) _values[i] += other._values[i];
 80120c8:	2300      	movs	r3, #0
 80120ca:	60fb      	str	r3, [r7, #12]
 80120cc:	e016      	b.n	80120fc <_ZN3Mat6MatrixILt3ELt3EEpLERKS1_+0x42>
 80120ce:	683b      	ldr	r3, [r7, #0]
 80120d0:	68f9      	ldr	r1, [r7, #12]
 80120d2:	4618      	mov	r0, r3
 80120d4:	f7fb ff97 	bl	800e006 <_ZNKSt5arrayIfLj9EEixEj>
 80120d8:	4603      	mov	r3, r0
 80120da:	ed93 8a00 	vldr	s16, [r3]
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	68f9      	ldr	r1, [r7, #12]
 80120e2:	4618      	mov	r0, r3
 80120e4:	f7fb fe51 	bl	800dd8a <_ZNSt5arrayIfLj9EEixEj>
 80120e8:	4603      	mov	r3, r0
 80120ea:	edd3 7a00 	vldr	s15, [r3]
 80120ee:	ee78 7a27 	vadd.f32	s15, s16, s15
 80120f2:	edc3 7a00 	vstr	s15, [r3]
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	3301      	adds	r3, #1
 80120fa:	60fb      	str	r3, [r7, #12]
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	4618      	mov	r0, r3
 8012100:	f000 fb08 	bl	8012714 <_ZNKSt5arrayIfLj9EE4sizeEv>
 8012104:	4602      	mov	r2, r0
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	4293      	cmp	r3, r2
 801210a:	bf34      	ite	cc
 801210c:	2301      	movcc	r3, #1
 801210e:	2300      	movcs	r3, #0
 8012110:	b2db      	uxtb	r3, r3
 8012112:	2b00      	cmp	r3, #0
 8012114:	d1db      	bne.n	80120ce <_ZN3Mat6MatrixILt3ELt3EEpLERKS1_+0x14>
	return *this;
 8012116:	687b      	ldr	r3, [r7, #4]
}
 8012118:	4618      	mov	r0, r3
 801211a:	3710      	adds	r7, #16
 801211c:	46bd      	mov	sp, r7
 801211e:	ecbd 8b02 	vpop	{d8}
 8012122:	bd80      	pop	{r7, pc}

08012124 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERS3_>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 8012124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012126:	b0a5      	sub	sp, #148	; 0x94
 8012128:	af00      	add	r7, sp, #0
 801212a:	60f8      	str	r0, [r7, #12]
 801212c:	60b9      	str	r1, [r7, #8]
 801212e:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 8012130:	2300      	movs	r3, #0
 8012132:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8012136:	e02d      	b.n	8012194 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERS3_+0x70>
		for(u_short col = 0; col < width; ++col)
 8012138:	2300      	movs	r3, #0
 801213a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 801213e:	e020      	b.n	8012182 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERS3_+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 8012140:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8012144:	f107 0314 	add.w	r3, r7, #20
 8012148:	4611      	mov	r1, r2
 801214a:	4618      	mov	r0, r3
 801214c:	f000 fa82 	bl	8012654 <_ZNSt5arrayIS_IfLj4EELj4EEixEj>
 8012150:	4602      	mov	r2, r0
 8012152:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8012156:	4619      	mov	r1, r3
 8012158:	4610      	mov	r0, r2
 801215a:	f000 f9ff 	bl	801255c <_ZNSt5arrayIfLj4EEixEj>
 801215e:	4604      	mov	r4, r0
 8012160:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8012164:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8012168:	4619      	mov	r1, r3
 801216a:	68f8      	ldr	r0, [r7, #12]
 801216c:	f7ff fdb9 	bl	8011ce2 <_ZNK3Mat6MatrixILt4ELt4EEclEtt>
 8012170:	eef0 7a40 	vmov.f32	s15, s0
 8012174:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 8012178:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 801217c:	3301      	adds	r3, #1
 801217e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8012182:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8012186:	2b03      	cmp	r3, #3
 8012188:	d9da      	bls.n	8012140 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERS3_+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 801218a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 801218e:	3301      	adds	r3, #1
 8012190:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8012194:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8012198:	2b03      	cmp	r3, #3
 801219a:	d9cd      	bls.n	8012138 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERS3_+0x14>
	for(u_short col = 0; col < other_width; ++col)
 801219c:	2300      	movs	r3, #0
 801219e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80121a2:	e02d      	b.n	8012200 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERS3_+0xdc>
		for(u_short row = 0; row < width; ++row)
 80121a4:	2300      	movs	r3, #0
 80121a6:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80121aa:	e020      	b.n	80121ee <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERS3_+0xca>
			other_columns[col][row] = other(row, col);
 80121ac:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80121b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80121b4:	4611      	mov	r1, r2
 80121b6:	4618      	mov	r0, r3
 80121b8:	f000 fa9d 	bl	80126f6 <_ZNSt5arrayIS_IfLj4EELj3EEixEj>
 80121bc:	4602      	mov	r2, r0
 80121be:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80121c2:	4619      	mov	r1, r3
 80121c4:	4610      	mov	r0, r2
 80121c6:	f000 f9c9 	bl	801255c <_ZNSt5arrayIfLj4EEixEj>
 80121ca:	4604      	mov	r4, r0
 80121cc:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80121d0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80121d4:	4619      	mov	r1, r3
 80121d6:	68b8      	ldr	r0, [r7, #8]
 80121d8:	f7ff fbd2 	bl	8011980 <_ZNK3Mat6MatrixILt4ELt3EEclEtt>
 80121dc:	eef0 7a40 	vmov.f32	s15, s0
 80121e0:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 80121e4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80121e8:	3301      	adds	r3, #1
 80121ea:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80121ee:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80121f2:	2b03      	cmp	r3, #3
 80121f4:	d9da      	bls.n	80121ac <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERS3_+0x88>
	for(u_short col = 0; col < other_width; ++col)
 80121f6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80121fa:	3301      	adds	r3, #1
 80121fc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8012200:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8012204:	2b02      	cmp	r3, #2
 8012206:	d9cd      	bls.n	80121a4 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERS3_+0x80>
	for(u_short row = 0; row < heigth; ++row)
 8012208:	2300      	movs	r3, #0
 801220a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 801220e:	e034      	b.n	801227a <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERS3_+0x156>
		for(u_short col = 0; col < other_width; ++col)
 8012210:	2300      	movs	r3, #0
 8012212:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8012216:	e027      	b.n	8012268 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERS3_+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 8012218:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 801221c:	f107 0314 	add.w	r3, r7, #20
 8012220:	4611      	mov	r1, r2
 8012222:	4618      	mov	r0, r3
 8012224:	f000 fa16 	bl	8012654 <_ZNSt5arrayIS_IfLj4EELj4EEixEj>
 8012228:	4605      	mov	r5, r0
 801222a:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 801222e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012232:	4611      	mov	r1, r2
 8012234:	4618      	mov	r0, r3
 8012236:	f000 fa5e 	bl	80126f6 <_ZNSt5arrayIS_IfLj4EELj3EEixEj>
 801223a:	4606      	mov	r6, r0
 801223c:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 8012240:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8012244:	4619      	mov	r1, r3
 8012246:	6878      	ldr	r0, [r7, #4]
 8012248:	f7ff fe4f 	bl	8011eea <_ZN3Mat6MatrixILt4ELt3EEclEtt>
 801224c:	4604      	mov	r4, r0
 801224e:	4631      	mov	r1, r6
 8012250:	4628      	mov	r0, r5
 8012252:	f000 fa0e 	bl	8012672 <_ZN3Mat13Multiply_rowsILj4EEEfRKSt5arrayIfXT_EES4_>
 8012256:	eef0 7a40 	vmov.f32	s15, s0
 801225a:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 801225e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8012262:	3301      	adds	r3, #1
 8012264:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8012268:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 801226c:	2b02      	cmp	r3, #2
 801226e:	d9d3      	bls.n	8012218 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERS3_+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 8012270:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8012274:	3301      	adds	r3, #1
 8012276:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 801227a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 801227e:	2b03      	cmp	r3, #3
 8012280:	d9c6      	bls.n	8012210 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERS3_+0xec>
}
 8012282:	bf00      	nop
 8012284:	bf00      	nop
 8012286:	3794      	adds	r7, #148	; 0x94
 8012288:	46bd      	mov	sp, r7
 801228a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801228c <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 801228c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801228e:	b09d      	sub	sp, #116	; 0x74
 8012290:	af00      	add	r7, sp, #0
 8012292:	60f8      	str	r0, [r7, #12]
 8012294:	60b9      	str	r1, [r7, #8]
 8012296:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 8012298:	2300      	movs	r3, #0
 801229a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 801229e:	e02d      	b.n	80122fc <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x70>
		for(u_short col = 0; col < width; ++col)
 80122a0:	2300      	movs	r3, #0
 80122a2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 80122a6:	e020      	b.n	80122ea <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 80122a8:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 80122ac:	f107 0310 	add.w	r3, r7, #16
 80122b0:	4611      	mov	r1, r2
 80122b2:	4618      	mov	r0, r3
 80122b4:	f000 f9b4 	bl	8012620 <_ZNSt5arrayIS_IfLj3EELj4EEixEj>
 80122b8:	4602      	mov	r2, r0
 80122ba:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80122be:	4619      	mov	r1, r3
 80122c0:	4610      	mov	r0, r2
 80122c2:	f7fb fbc6 	bl	800da52 <_ZNSt5arrayIfLj3EEixEj>
 80122c6:	4604      	mov	r4, r0
 80122c8:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80122cc:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80122d0:	4619      	mov	r1, r3
 80122d2:	68f8      	ldr	r0, [r7, #12]
 80122d4:	f7ff fb54 	bl	8011980 <_ZNK3Mat6MatrixILt4ELt3EEclEtt>
 80122d8:	eef0 7a40 	vmov.f32	s15, s0
 80122dc:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 80122e0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80122e4:	3301      	adds	r3, #1
 80122e6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 80122ea:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80122ee:	2b02      	cmp	r3, #2
 80122f0:	d9da      	bls.n	80122a8 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 80122f2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80122f6:	3301      	adds	r3, #1
 80122f8:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 80122fc:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8012300:	2b03      	cmp	r3, #3
 8012302:	d9cd      	bls.n	80122a0 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x14>
	for(u_short col = 0; col < other_width; ++col)
 8012304:	2300      	movs	r3, #0
 8012306:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 801230a:	e02d      	b.n	8012368 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0xdc>
		for(u_short row = 0; row < width; ++row)
 801230c:	2300      	movs	r3, #0
 801230e:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8012312:	e020      	b.n	8012356 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0xca>
			other_columns[col][row] = other(row, col);
 8012314:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 8012318:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801231c:	4611      	mov	r1, r2
 801231e:	4618      	mov	r0, r3
 8012320:	f7fb fd5e 	bl	800dde0 <_ZNSt5arrayIS_IfLj3EELj3EEixEj>
 8012324:	4602      	mov	r2, r0
 8012326:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 801232a:	4619      	mov	r1, r3
 801232c:	4610      	mov	r0, r2
 801232e:	f7fb fb90 	bl	800da52 <_ZNSt5arrayIfLj3EEixEj>
 8012332:	4604      	mov	r4, r0
 8012334:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 8012338:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 801233c:	4619      	mov	r1, r3
 801233e:	68b8      	ldr	r0, [r7, #8]
 8012340:	f7fb fd5d 	bl	800ddfe <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 8012344:	eef0 7a40 	vmov.f32	s15, s0
 8012348:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 801234c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8012350:	3301      	adds	r3, #1
 8012352:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8012356:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 801235a:	2b02      	cmp	r3, #2
 801235c:	d9da      	bls.n	8012314 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x88>
	for(u_short col = 0; col < other_width; ++col)
 801235e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8012362:	3301      	adds	r3, #1
 8012364:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8012368:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 801236c:	2b02      	cmp	r3, #2
 801236e:	d9cd      	bls.n	801230c <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x80>
	for(u_short row = 0; row < heigth; ++row)
 8012370:	2300      	movs	r3, #0
 8012372:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8012376:	e034      	b.n	80123e2 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x156>
		for(u_short col = 0; col < other_width; ++col)
 8012378:	2300      	movs	r3, #0
 801237a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 801237e:	e027      	b.n	80123d0 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 8012380:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8012384:	f107 0310 	add.w	r3, r7, #16
 8012388:	4611      	mov	r1, r2
 801238a:	4618      	mov	r0, r3
 801238c:	f000 f948 	bl	8012620 <_ZNSt5arrayIS_IfLj3EELj4EEixEj>
 8012390:	4605      	mov	r5, r0
 8012392:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8012396:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801239a:	4611      	mov	r1, r2
 801239c:	4618      	mov	r0, r3
 801239e:	f7fb fd1f 	bl	800dde0 <_ZNSt5arrayIS_IfLj3EELj3EEixEj>
 80123a2:	4606      	mov	r6, r0
 80123a4:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 80123a8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80123ac:	4619      	mov	r1, r3
 80123ae:	6878      	ldr	r0, [r7, #4]
 80123b0:	f7ff fd9b 	bl	8011eea <_ZN3Mat6MatrixILt4ELt3EEclEtt>
 80123b4:	4604      	mov	r4, r0
 80123b6:	4631      	mov	r1, r6
 80123b8:	4628      	mov	r0, r5
 80123ba:	f7fb fd66 	bl	800de8a <_ZN3Mat13Multiply_rowsILj3EEEfRKSt5arrayIfXT_EES4_>
 80123be:	eef0 7a40 	vmov.f32	s15, s0
 80123c2:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 80123c6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80123ca:	3301      	adds	r3, #1
 80123cc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80123d0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80123d4:	2b02      	cmp	r3, #2
 80123d6:	d9d3      	bls.n	8012380 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 80123d8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80123dc:	3301      	adds	r3, #1
 80123de:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80123e2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80123e6:	2b03      	cmp	r3, #3
 80123e8:	d9c6      	bls.n	8012378 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0xec>
}
 80123ea:	bf00      	nop
 80123ec:	bf00      	nop
 80123ee:	3774      	adds	r7, #116	; 0x74
 80123f0:	46bd      	mov	sp, r7
 80123f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080123f4 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 80123f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80123f6:	b097      	sub	sp, #92	; 0x5c
 80123f8:	af00      	add	r7, sp, #0
 80123fa:	60f8      	str	r0, [r7, #12]
 80123fc:	60b9      	str	r1, [r7, #8]
 80123fe:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 8012400:	2300      	movs	r3, #0
 8012402:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8012406:	e02d      	b.n	8012464 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x70>
		for(u_short col = 0; col < width; ++col)
 8012408:	2300      	movs	r3, #0
 801240a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 801240e:	e020      	b.n	8012452 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 8012410:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8012414:	f107 0310 	add.w	r3, r7, #16
 8012418:	4611      	mov	r1, r2
 801241a:	4618      	mov	r0, r3
 801241c:	f000 f900 	bl	8012620 <_ZNSt5arrayIS_IfLj3EELj4EEixEj>
 8012420:	4602      	mov	r2, r0
 8012422:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8012426:	4619      	mov	r1, r3
 8012428:	4610      	mov	r0, r2
 801242a:	f7fb fb12 	bl	800da52 <_ZNSt5arrayIfLj3EEixEj>
 801242e:	4604      	mov	r4, r0
 8012430:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8012434:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8012438:	4619      	mov	r1, r3
 801243a:	68f8      	ldr	r0, [r7, #12]
 801243c:	f7ff faa0 	bl	8011980 <_ZNK3Mat6MatrixILt4ELt3EEclEtt>
 8012440:	eef0 7a40 	vmov.f32	s15, s0
 8012444:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 8012448:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 801244c:	3301      	adds	r3, #1
 801244e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8012452:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8012456:	2b02      	cmp	r3, #2
 8012458:	d9da      	bls.n	8012410 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 801245a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801245e:	3301      	adds	r3, #1
 8012460:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8012464:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8012468:	2b03      	cmp	r3, #3
 801246a:	d9cd      	bls.n	8012408 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x14>
	for(u_short col = 0; col < other_width; ++col)
 801246c:	2300      	movs	r3, #0
 801246e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8012472:	e02d      	b.n	80124d0 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0xdc>
		for(u_short row = 0; row < width; ++row)
 8012474:	2300      	movs	r3, #0
 8012476:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 801247a:	e020      	b.n	80124be <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0xca>
			other_columns[col][row] = other(row, col);
 801247c:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8012480:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012484:	4611      	mov	r1, r2
 8012486:	4618      	mov	r0, r3
 8012488:	f7fb fcd6 	bl	800de38 <_ZNSt5arrayIS_IfLj3EELj1EEixEj>
 801248c:	4602      	mov	r2, r0
 801248e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8012492:	4619      	mov	r1, r3
 8012494:	4610      	mov	r0, r2
 8012496:	f7fb fadc 	bl	800da52 <_ZNSt5arrayIfLj3EEixEj>
 801249a:	4604      	mov	r4, r0
 801249c:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 80124a0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80124a4:	4619      	mov	r1, r3
 80124a6:	68b8      	ldr	r0, [r7, #8]
 80124a8:	f7fb fcd5 	bl	800de56 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 80124ac:	eef0 7a40 	vmov.f32	s15, s0
 80124b0:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 80124b4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80124b8:	3301      	adds	r3, #1
 80124ba:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80124be:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80124c2:	2b02      	cmp	r3, #2
 80124c4:	d9da      	bls.n	801247c <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x88>
	for(u_short col = 0; col < other_width; ++col)
 80124c6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80124ca:	3301      	adds	r3, #1
 80124cc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80124d0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d0cd      	beq.n	8012474 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x80>
	for(u_short row = 0; row < heigth; ++row)
 80124d8:	2300      	movs	r3, #0
 80124da:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80124de:	e034      	b.n	801254a <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x156>
		for(u_short col = 0; col < other_width; ++col)
 80124e0:	2300      	movs	r3, #0
 80124e2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80124e6:	e027      	b.n	8012538 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 80124e8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80124ec:	f107 0310 	add.w	r3, r7, #16
 80124f0:	4611      	mov	r1, r2
 80124f2:	4618      	mov	r0, r3
 80124f4:	f000 f894 	bl	8012620 <_ZNSt5arrayIS_IfLj3EELj4EEixEj>
 80124f8:	4605      	mov	r5, r0
 80124fa:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80124fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012502:	4611      	mov	r1, r2
 8012504:	4618      	mov	r0, r3
 8012506:	f7fb fc97 	bl	800de38 <_ZNSt5arrayIS_IfLj3EELj1EEixEj>
 801250a:	4606      	mov	r6, r0
 801250c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8012510:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012514:	4619      	mov	r1, r3
 8012516:	6878      	ldr	r0, [r7, #4]
 8012518:	f7ff f9e8 	bl	80118ec <_ZN3Mat6MatrixILt4ELt1EEclEtt>
 801251c:	4604      	mov	r4, r0
 801251e:	4631      	mov	r1, r6
 8012520:	4628      	mov	r0, r5
 8012522:	f7fb fcb2 	bl	800de8a <_ZN3Mat13Multiply_rowsILj3EEEfRKSt5arrayIfXT_EES4_>
 8012526:	eef0 7a40 	vmov.f32	s15, s0
 801252a:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 801252e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8012532:	3301      	adds	r3, #1
 8012534:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8012538:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 801253c:	2b00      	cmp	r3, #0
 801253e:	d0d3      	beq.n	80124e8 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 8012540:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012544:	3301      	adds	r3, #1
 8012546:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 801254a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801254e:	2b03      	cmp	r3, #3
 8012550:	d9c6      	bls.n	80124e0 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0xec>
}
 8012552:	bf00      	nop
 8012554:	bf00      	nop
 8012556:	375c      	adds	r7, #92	; 0x5c
 8012558:	46bd      	mov	sp, r7
 801255a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801255c <_ZNSt5arrayIfLj4EEixEj>:
      operator[](size_type __n) noexcept
 801255c:	b580      	push	{r7, lr}
 801255e:	b082      	sub	sp, #8
 8012560:	af00      	add	r7, sp, #0
 8012562:	6078      	str	r0, [r7, #4]
 8012564:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	6839      	ldr	r1, [r7, #0]
 801256a:	4618      	mov	r0, r3
 801256c:	f000 f8dd 	bl	801272a <_ZNSt14__array_traitsIfLj4EE6_S_refERA4_Kfj>
 8012570:	4603      	mov	r3, r0
      }
 8012572:	4618      	mov	r0, r3
 8012574:	3708      	adds	r7, #8
 8012576:	46bd      	mov	sp, r7
 8012578:	bd80      	pop	{r7, pc}

0801257a <_ZN3Mat6MatrixILt4ELt4EEmIERKS1_>:
inline Matrix<heigth, width> &Matrix<heigth, width>::operator-=(const Matrix<heigth, width> &other)
 801257a:	b580      	push	{r7, lr}
 801257c:	ed2d 8b02 	vpush	{d8}
 8012580:	b084      	sub	sp, #16
 8012582:	af00      	add	r7, sp, #0
 8012584:	6078      	str	r0, [r7, #4]
 8012586:	6039      	str	r1, [r7, #0]
    for(u_int i = 0; i < _values.size(); ++i) _values[i] -= other._values[i];
 8012588:	2300      	movs	r3, #0
 801258a:	60fb      	str	r3, [r7, #12]
 801258c:	e016      	b.n	80125bc <_ZN3Mat6MatrixILt4ELt4EEmIERKS1_+0x42>
 801258e:	683b      	ldr	r3, [r7, #0]
 8012590:	68f9      	ldr	r1, [r7, #12]
 8012592:	4618      	mov	r0, r3
 8012594:	f000 f8a0 	bl	80126d8 <_ZNKSt5arrayIfLj16EEixEj>
 8012598:	4603      	mov	r3, r0
 801259a:	ed93 8a00 	vldr	s16, [r3]
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	68f9      	ldr	r1, [r7, #12]
 80125a2:	4618      	mov	r0, r3
 80125a4:	f7fb fb9e 	bl	800dce4 <_ZNSt5arrayIfLj16EEixEj>
 80125a8:	4603      	mov	r3, r0
 80125aa:	edd3 7a00 	vldr	s15, [r3]
 80125ae:	ee77 7ac8 	vsub.f32	s15, s15, s16
 80125b2:	edc3 7a00 	vstr	s15, [r3]
 80125b6:	68fb      	ldr	r3, [r7, #12]
 80125b8:	3301      	adds	r3, #1
 80125ba:	60fb      	str	r3, [r7, #12]
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	4618      	mov	r0, r3
 80125c0:	f000 f83d 	bl	801263e <_ZNKSt5arrayIfLj16EE4sizeEv>
 80125c4:	4602      	mov	r2, r0
 80125c6:	68fb      	ldr	r3, [r7, #12]
 80125c8:	4293      	cmp	r3, r2
 80125ca:	bf34      	ite	cc
 80125cc:	2301      	movcc	r3, #1
 80125ce:	2300      	movcs	r3, #0
 80125d0:	b2db      	uxtb	r3, r3
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d1db      	bne.n	801258e <_ZN3Mat6MatrixILt4ELt4EEmIERKS1_+0x14>
	return *this;
 80125d6:	687b      	ldr	r3, [r7, #4]
}
 80125d8:	4618      	mov	r0, r3
 80125da:	3710      	adds	r7, #16
 80125dc:	46bd      	mov	sp, r7
 80125de:	ecbd 8b02 	vpop	{d8}
 80125e2:	bd80      	pop	{r7, pc}

080125e4 <_ZNSt5arrayIfLj12EEixEj>:
      operator[](size_type __n) noexcept
 80125e4:	b580      	push	{r7, lr}
 80125e6:	b082      	sub	sp, #8
 80125e8:	af00      	add	r7, sp, #0
 80125ea:	6078      	str	r0, [r7, #4]
 80125ec:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	6839      	ldr	r1, [r7, #0]
 80125f2:	4618      	mov	r0, r3
 80125f4:	f000 f8a8 	bl	8012748 <_ZNSt14__array_traitsIfLj12EE6_S_refERA12_Kfj>
 80125f8:	4603      	mov	r3, r0
      }
 80125fa:	4618      	mov	r0, r3
 80125fc:	3708      	adds	r7, #8
 80125fe:	46bd      	mov	sp, r7
 8012600:	bd80      	pop	{r7, pc}

08012602 <_ZNKSt5arrayIfLj12EEixEj>:
      operator[](size_type __n) const noexcept
 8012602:	b580      	push	{r7, lr}
 8012604:	b082      	sub	sp, #8
 8012606:	af00      	add	r7, sp, #0
 8012608:	6078      	str	r0, [r7, #4]
 801260a:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	6839      	ldr	r1, [r7, #0]
 8012610:	4618      	mov	r0, r3
 8012612:	f000 f899 	bl	8012748 <_ZNSt14__array_traitsIfLj12EE6_S_refERA12_Kfj>
 8012616:	4603      	mov	r3, r0
      }
 8012618:	4618      	mov	r0, r3
 801261a:	3708      	adds	r7, #8
 801261c:	46bd      	mov	sp, r7
 801261e:	bd80      	pop	{r7, pc}

08012620 <_ZNSt5arrayIS_IfLj3EELj4EEixEj>:
      operator[](size_type __n) noexcept
 8012620:	b580      	push	{r7, lr}
 8012622:	b082      	sub	sp, #8
 8012624:	af00      	add	r7, sp, #0
 8012626:	6078      	str	r0, [r7, #4]
 8012628:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	6839      	ldr	r1, [r7, #0]
 801262e:	4618      	mov	r0, r3
 8012630:	f000 f899 	bl	8012766 <_ZNSt14__array_traitsISt5arrayIfLj3EELj4EE6_S_refERA4_KS1_j>
 8012634:	4603      	mov	r3, r0
      }
 8012636:	4618      	mov	r0, r3
 8012638:	3708      	adds	r7, #8
 801263a:	46bd      	mov	sp, r7
 801263c:	bd80      	pop	{r7, pc}

0801263e <_ZNKSt5arrayIfLj16EE4sizeEv>:
      size() const noexcept { return _Nm; }
 801263e:	b480      	push	{r7}
 8012640:	b083      	sub	sp, #12
 8012642:	af00      	add	r7, sp, #0
 8012644:	6078      	str	r0, [r7, #4]
 8012646:	2310      	movs	r3, #16
 8012648:	4618      	mov	r0, r3
 801264a:	370c      	adds	r7, #12
 801264c:	46bd      	mov	sp, r7
 801264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012652:	4770      	bx	lr

08012654 <_ZNSt5arrayIS_IfLj4EELj4EEixEj>:
      operator[](size_type __n) noexcept
 8012654:	b580      	push	{r7, lr}
 8012656:	b082      	sub	sp, #8
 8012658:	af00      	add	r7, sp, #0
 801265a:	6078      	str	r0, [r7, #4]
 801265c:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	6839      	ldr	r1, [r7, #0]
 8012662:	4618      	mov	r0, r3
 8012664:	f000 f891 	bl	801278a <_ZNSt14__array_traitsISt5arrayIfLj4EELj4EE6_S_refERA4_KS1_j>
 8012668:	4603      	mov	r3, r0
      }
 801266a:	4618      	mov	r0, r3
 801266c:	3708      	adds	r7, #8
 801266e:	46bd      	mov	sp, r7
 8012670:	bd80      	pop	{r7, pc}

08012672 <_ZN3Mat13Multiply_rowsILj4EEEfRKSt5arrayIfXT_EES4_>:
float Multiply_rows(const std::array<float, length>& A, const std::array<float, length>& B)
 8012672:	b580      	push	{r7, lr}
 8012674:	ed2d 8b02 	vpush	{d8}
 8012678:	b084      	sub	sp, #16
 801267a:	af00      	add	r7, sp, #0
 801267c:	6078      	str	r0, [r7, #4]
 801267e:	6039      	str	r1, [r7, #0]
    float result = 0.0f;
 8012680:	f04f 0300 	mov.w	r3, #0
 8012684:	60fb      	str	r3, [r7, #12]
	for(u_int i = 0; i < length; ++i) result += A[i]*B[i];
 8012686:	2300      	movs	r3, #0
 8012688:	60bb      	str	r3, [r7, #8]
 801268a:	e018      	b.n	80126be <_ZN3Mat13Multiply_rowsILj4EEEfRKSt5arrayIfXT_EES4_+0x4c>
 801268c:	68b9      	ldr	r1, [r7, #8]
 801268e:	6878      	ldr	r0, [r7, #4]
 8012690:	f000 f88a 	bl	80127a8 <_ZNKSt5arrayIfLj4EEixEj>
 8012694:	4603      	mov	r3, r0
 8012696:	ed93 8a00 	vldr	s16, [r3]
 801269a:	68b9      	ldr	r1, [r7, #8]
 801269c:	6838      	ldr	r0, [r7, #0]
 801269e:	f000 f883 	bl	80127a8 <_ZNKSt5arrayIfLj4EEixEj>
 80126a2:	4603      	mov	r3, r0
 80126a4:	edd3 7a00 	vldr	s15, [r3]
 80126a8:	ee68 7a27 	vmul.f32	s15, s16, s15
 80126ac:	ed97 7a03 	vldr	s14, [r7, #12]
 80126b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80126b4:	edc7 7a03 	vstr	s15, [r7, #12]
 80126b8:	68bb      	ldr	r3, [r7, #8]
 80126ba:	3301      	adds	r3, #1
 80126bc:	60bb      	str	r3, [r7, #8]
 80126be:	68bb      	ldr	r3, [r7, #8]
 80126c0:	2b03      	cmp	r3, #3
 80126c2:	d9e3      	bls.n	801268c <_ZN3Mat13Multiply_rowsILj4EEEfRKSt5arrayIfXT_EES4_+0x1a>
	return result;
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	ee07 3a90 	vmov	s15, r3
}
 80126ca:	eeb0 0a67 	vmov.f32	s0, s15
 80126ce:	3710      	adds	r7, #16
 80126d0:	46bd      	mov	sp, r7
 80126d2:	ecbd 8b02 	vpop	{d8}
 80126d6:	bd80      	pop	{r7, pc}

080126d8 <_ZNKSt5arrayIfLj16EEixEj>:
      operator[](size_type __n) const noexcept
 80126d8:	b580      	push	{r7, lr}
 80126da:	b082      	sub	sp, #8
 80126dc:	af00      	add	r7, sp, #0
 80126de:	6078      	str	r0, [r7, #4]
 80126e0:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	6839      	ldr	r1, [r7, #0]
 80126e6:	4618      	mov	r0, r3
 80126e8:	f7fb fc36 	bl	800df58 <_ZNSt14__array_traitsIfLj16EE6_S_refERA16_Kfj>
 80126ec:	4603      	mov	r3, r0
      }
 80126ee:	4618      	mov	r0, r3
 80126f0:	3708      	adds	r7, #8
 80126f2:	46bd      	mov	sp, r7
 80126f4:	bd80      	pop	{r7, pc}

080126f6 <_ZNSt5arrayIS_IfLj4EELj3EEixEj>:
      operator[](size_type __n) noexcept
 80126f6:	b580      	push	{r7, lr}
 80126f8:	b082      	sub	sp, #8
 80126fa:	af00      	add	r7, sp, #0
 80126fc:	6078      	str	r0, [r7, #4]
 80126fe:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	6839      	ldr	r1, [r7, #0]
 8012704:	4618      	mov	r0, r3
 8012706:	f000 f85e 	bl	80127c6 <_ZNSt14__array_traitsISt5arrayIfLj4EELj3EE6_S_refERA3_KS1_j>
 801270a:	4603      	mov	r3, r0
      }
 801270c:	4618      	mov	r0, r3
 801270e:	3708      	adds	r7, #8
 8012710:	46bd      	mov	sp, r7
 8012712:	bd80      	pop	{r7, pc}

08012714 <_ZNKSt5arrayIfLj9EE4sizeEv>:
      size() const noexcept { return _Nm; }
 8012714:	b480      	push	{r7}
 8012716:	b083      	sub	sp, #12
 8012718:	af00      	add	r7, sp, #0
 801271a:	6078      	str	r0, [r7, #4]
 801271c:	2309      	movs	r3, #9
 801271e:	4618      	mov	r0, r3
 8012720:	370c      	adds	r7, #12
 8012722:	46bd      	mov	sp, r7
 8012724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012728:	4770      	bx	lr

0801272a <_ZNSt14__array_traitsIfLj4EE6_S_refERA4_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 801272a:	b480      	push	{r7}
 801272c:	b083      	sub	sp, #12
 801272e:	af00      	add	r7, sp, #0
 8012730:	6078      	str	r0, [r7, #4]
 8012732:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8012734:	683b      	ldr	r3, [r7, #0]
 8012736:	009b      	lsls	r3, r3, #2
 8012738:	687a      	ldr	r2, [r7, #4]
 801273a:	4413      	add	r3, r2
 801273c:	4618      	mov	r0, r3
 801273e:	370c      	adds	r7, #12
 8012740:	46bd      	mov	sp, r7
 8012742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012746:	4770      	bx	lr

08012748 <_ZNSt14__array_traitsIfLj12EE6_S_refERA12_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8012748:	b480      	push	{r7}
 801274a:	b083      	sub	sp, #12
 801274c:	af00      	add	r7, sp, #0
 801274e:	6078      	str	r0, [r7, #4]
 8012750:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8012752:	683b      	ldr	r3, [r7, #0]
 8012754:	009b      	lsls	r3, r3, #2
 8012756:	687a      	ldr	r2, [r7, #4]
 8012758:	4413      	add	r3, r2
 801275a:	4618      	mov	r0, r3
 801275c:	370c      	adds	r7, #12
 801275e:	46bd      	mov	sp, r7
 8012760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012764:	4770      	bx	lr

08012766 <_ZNSt14__array_traitsISt5arrayIfLj3EELj4EE6_S_refERA4_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8012766:	b480      	push	{r7}
 8012768:	b083      	sub	sp, #12
 801276a:	af00      	add	r7, sp, #0
 801276c:	6078      	str	r0, [r7, #4]
 801276e:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8012770:	683a      	ldr	r2, [r7, #0]
 8012772:	4613      	mov	r3, r2
 8012774:	005b      	lsls	r3, r3, #1
 8012776:	4413      	add	r3, r2
 8012778:	009b      	lsls	r3, r3, #2
 801277a:	687a      	ldr	r2, [r7, #4]
 801277c:	4413      	add	r3, r2
 801277e:	4618      	mov	r0, r3
 8012780:	370c      	adds	r7, #12
 8012782:	46bd      	mov	sp, r7
 8012784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012788:	4770      	bx	lr

0801278a <_ZNSt14__array_traitsISt5arrayIfLj4EELj4EE6_S_refERA4_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 801278a:	b480      	push	{r7}
 801278c:	b083      	sub	sp, #12
 801278e:	af00      	add	r7, sp, #0
 8012790:	6078      	str	r0, [r7, #4]
 8012792:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8012794:	683b      	ldr	r3, [r7, #0]
 8012796:	011b      	lsls	r3, r3, #4
 8012798:	687a      	ldr	r2, [r7, #4]
 801279a:	4413      	add	r3, r2
 801279c:	4618      	mov	r0, r3
 801279e:	370c      	adds	r7, #12
 80127a0:	46bd      	mov	sp, r7
 80127a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127a6:	4770      	bx	lr

080127a8 <_ZNKSt5arrayIfLj4EEixEj>:
      operator[](size_type __n) const noexcept
 80127a8:	b580      	push	{r7, lr}
 80127aa:	b082      	sub	sp, #8
 80127ac:	af00      	add	r7, sp, #0
 80127ae:	6078      	str	r0, [r7, #4]
 80127b0:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	6839      	ldr	r1, [r7, #0]
 80127b6:	4618      	mov	r0, r3
 80127b8:	f7ff ffb7 	bl	801272a <_ZNSt14__array_traitsIfLj4EE6_S_refERA4_Kfj>
 80127bc:	4603      	mov	r3, r0
      }
 80127be:	4618      	mov	r0, r3
 80127c0:	3708      	adds	r7, #8
 80127c2:	46bd      	mov	sp, r7
 80127c4:	bd80      	pop	{r7, pc}

080127c6 <_ZNSt14__array_traitsISt5arrayIfLj4EELj3EE6_S_refERA3_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 80127c6:	b480      	push	{r7}
 80127c8:	b083      	sub	sp, #12
 80127ca:	af00      	add	r7, sp, #0
 80127cc:	6078      	str	r0, [r7, #4]
 80127ce:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 80127d0:	683b      	ldr	r3, [r7, #0]
 80127d2:	011b      	lsls	r3, r3, #4
 80127d4:	687a      	ldr	r2, [r7, #4]
 80127d6:	4413      	add	r3, r2
 80127d8:	4618      	mov	r0, r3
 80127da:	370c      	adds	r7, #12
 80127dc:	46bd      	mov	sp, r7
 80127de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e2:	4770      	bx	lr

080127e4 <_ZN3Mat8V_VectorILt3EEC1ERKSt5arrayIfLj3EE>:

template <u_short length>
V_Vector<length>::V_Vector(const std::array<float, length>& values) : Matrix<length, 1>(values) {}
 80127e4:	b580      	push	{r7, lr}
 80127e6:	b082      	sub	sp, #8
 80127e8:	af00      	add	r7, sp, #0
 80127ea:	6078      	str	r0, [r7, #4]
 80127ec:	6039      	str	r1, [r7, #0]
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	6839      	ldr	r1, [r7, #0]
 80127f2:	4618      	mov	r0, r3
 80127f4:	f7fa ff4c 	bl	800d690 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	4618      	mov	r0, r3
 80127fc:	3708      	adds	r7, #8
 80127fe:	46bd      	mov	sp, r7
 8012800:	bd80      	pop	{r7, pc}

08012802 <_ZNK3Mat8V_VectorILt3EEclEt>:
	inline float operator()(u_short index) const {return _values[index];}
 8012802:	b580      	push	{r7, lr}
 8012804:	b082      	sub	sp, #8
 8012806:	af00      	add	r7, sp, #0
 8012808:	6078      	str	r0, [r7, #4]
 801280a:	460b      	mov	r3, r1
 801280c:	807b      	strh	r3, [r7, #2]
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	887a      	ldrh	r2, [r7, #2]
 8012812:	4611      	mov	r1, r2
 8012814:	4618      	mov	r0, r3
 8012816:	f7fb fc17 	bl	800e048 <_ZNKSt5arrayIfLj3EEixEj>
 801281a:	4603      	mov	r3, r0
 801281c:	681b      	ldr	r3, [r3, #0]
 801281e:	ee07 3a90 	vmov	s15, r3
 8012822:	eeb0 0a67 	vmov.f32	s0, s15
 8012826:	3708      	adds	r7, #8
 8012828:	46bd      	mov	sp, r7
 801282a:	bd80      	pop	{r7, pc}

0801282c <_ZZNK3Mat8V_VectorILt3EE4NormEvENKUlfE_clEf>:

template <u_short length>
float V_Vector<length>::Norm() const
{
	float result = 0.0f;
	std::for_each(_values.begin(), _values.end(), [&result](float n){result += n * n;});
 801282c:	b480      	push	{r7}
 801282e:	b083      	sub	sp, #12
 8012830:	af00      	add	r7, sp, #0
 8012832:	6078      	str	r0, [r7, #4]
 8012834:	ed87 0a00 	vstr	s0, [r7]
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	ed93 7a00 	vldr	s14, [r3]
 8012840:	edd7 7a00 	vldr	s15, [r7]
 8012844:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012850:	edc3 7a00 	vstr	s15, [r3]
 8012854:	bf00      	nop
 8012856:	370c      	adds	r7, #12
 8012858:	46bd      	mov	sp, r7
 801285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801285e:	4770      	bx	lr

08012860 <_ZNK3Mat8V_VectorILt3EE4NormEv>:
float V_Vector<length>::Norm() const
 8012860:	b590      	push	{r4, r7, lr}
 8012862:	b085      	sub	sp, #20
 8012864:	af00      	add	r7, sp, #0
 8012866:	6078      	str	r0, [r7, #4]
	float result = 0.0f;
 8012868:	f04f 0300 	mov.w	r3, #0
 801286c:	60fb      	str	r3, [r7, #12]
	std::for_each(_values.begin(), _values.end(), [&result](float n){result += n * n;});
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	4618      	mov	r0, r3
 8012872:	f000 f83d 	bl	80128f0 <_ZNKSt5arrayIfLj3EE5beginEv>
 8012876:	4604      	mov	r4, r0
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	4618      	mov	r0, r3
 801287c:	f000 f844 	bl	8012908 <_ZNKSt5arrayIfLj3EE3endEv>
 8012880:	4603      	mov	r3, r0
 8012882:	f107 020c 	add.w	r2, r7, #12
 8012886:	4619      	mov	r1, r3
 8012888:	4620      	mov	r0, r4
 801288a:	f000 f84a 	bl	8012922 <_ZSt8for_eachIPKfZNK3Mat8V_VectorILt3EE4NormEvEUlfE_ET0_T_S7_S6_>
	return std::sqrt(result);
 801288e:	edd7 7a03 	vldr	s15, [r7, #12]
 8012892:	eeb0 0a67 	vmov.f32	s0, s15
 8012896:	f7fc fc7b 	bl	800f190 <_ZSt4sqrtf>
 801289a:	eef0 7a40 	vmov.f32	s15, s0
}
 801289e:	eeb0 0a67 	vmov.f32	s0, s15
 80128a2:	3714      	adds	r7, #20
 80128a4:	46bd      	mov	sp, r7
 80128a6:	bd90      	pop	{r4, r7, pc}

080128a8 <_ZNK3Mat8V_VectorILt4EEclEt>:
	inline float operator()(u_short index) const {return _values[index];}
 80128a8:	b580      	push	{r7, lr}
 80128aa:	b082      	sub	sp, #8
 80128ac:	af00      	add	r7, sp, #0
 80128ae:	6078      	str	r0, [r7, #4]
 80128b0:	460b      	mov	r3, r1
 80128b2:	807b      	strh	r3, [r7, #2]
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	887a      	ldrh	r2, [r7, #2]
 80128b8:	4611      	mov	r1, r2
 80128ba:	4618      	mov	r0, r3
 80128bc:	f7ff ff74 	bl	80127a8 <_ZNKSt5arrayIfLj4EEixEj>
 80128c0:	4603      	mov	r3, r0
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	ee07 3a90 	vmov	s15, r3
 80128c8:	eeb0 0a67 	vmov.f32	s0, s15
 80128cc:	3708      	adds	r7, #8
 80128ce:	46bd      	mov	sp, r7
 80128d0:	bd80      	pop	{r7, pc}

080128d2 <_ZN3Mat8V_VectorILt4EEC1ERKSt5arrayIfLj4EE>:
V_Vector<length>::V_Vector(const std::array<float, length>& values) : Matrix<length, 1>(values) {}
 80128d2:	b580      	push	{r7, lr}
 80128d4:	b082      	sub	sp, #8
 80128d6:	af00      	add	r7, sp, #0
 80128d8:	6078      	str	r0, [r7, #4]
 80128da:	6039      	str	r1, [r7, #0]
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	6839      	ldr	r1, [r7, #0]
 80128e0:	4618      	mov	r0, r3
 80128e2:	f000 f83a 	bl	801295a <_ZN3Mat6MatrixILt4ELt1EEC1ERKSt5arrayIfLj4EE>
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	4618      	mov	r0, r3
 80128ea:	3708      	adds	r7, #8
 80128ec:	46bd      	mov	sp, r7
 80128ee:	bd80      	pop	{r7, pc}

080128f0 <_ZNKSt5arrayIfLj3EE5beginEv>:
      begin() const noexcept
 80128f0:	b580      	push	{r7, lr}
 80128f2:	b082      	sub	sp, #8
 80128f4:	af00      	add	r7, sp, #0
 80128f6:	6078      	str	r0, [r7, #4]
      { return const_iterator(data()); }
 80128f8:	6878      	ldr	r0, [r7, #4]
 80128fa:	f000 f83f 	bl	801297c <_ZNKSt5arrayIfLj3EE4dataEv>
 80128fe:	4603      	mov	r3, r0
 8012900:	4618      	mov	r0, r3
 8012902:	3708      	adds	r7, #8
 8012904:	46bd      	mov	sp, r7
 8012906:	bd80      	pop	{r7, pc}

08012908 <_ZNKSt5arrayIfLj3EE3endEv>:
      end() const noexcept
 8012908:	b580      	push	{r7, lr}
 801290a:	b082      	sub	sp, #8
 801290c:	af00      	add	r7, sp, #0
 801290e:	6078      	str	r0, [r7, #4]
      { return const_iterator(data() + _Nm); }
 8012910:	6878      	ldr	r0, [r7, #4]
 8012912:	f000 f833 	bl	801297c <_ZNKSt5arrayIfLj3EE4dataEv>
 8012916:	4603      	mov	r3, r0
 8012918:	330c      	adds	r3, #12
 801291a:	4618      	mov	r0, r3
 801291c:	3708      	adds	r7, #8
 801291e:	46bd      	mov	sp, r7
 8012920:	bd80      	pop	{r7, pc}

08012922 <_ZSt8for_eachIPKfZNK3Mat8V_VectorILt3EE4NormEvEUlfE_ET0_T_S7_S6_>:
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
 8012922:	b580      	push	{r7, lr}
 8012924:	b084      	sub	sp, #16
 8012926:	af00      	add	r7, sp, #0
 8012928:	60f8      	str	r0, [r7, #12]
 801292a:	60b9      	str	r1, [r7, #8]
 801292c:	607a      	str	r2, [r7, #4]
      for (; __first != __last; ++__first)
 801292e:	e00b      	b.n	8012948 <_ZSt8for_eachIPKfZNK3Mat8V_VectorILt3EE4NormEvEUlfE_ET0_T_S7_S6_+0x26>
	__f(*__first);
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	edd3 7a00 	vldr	s15, [r3]
 8012936:	1d3b      	adds	r3, r7, #4
 8012938:	eeb0 0a67 	vmov.f32	s0, s15
 801293c:	4618      	mov	r0, r3
 801293e:	f7ff ff75 	bl	801282c <_ZZNK3Mat8V_VectorILt3EE4NormEvENKUlfE_clEf>
      for (; __first != __last; ++__first)
 8012942:	68fb      	ldr	r3, [r7, #12]
 8012944:	3304      	adds	r3, #4
 8012946:	60fb      	str	r3, [r7, #12]
 8012948:	68fa      	ldr	r2, [r7, #12]
 801294a:	68bb      	ldr	r3, [r7, #8]
 801294c:	429a      	cmp	r2, r3
 801294e:	d1ef      	bne.n	8012930 <_ZSt8for_eachIPKfZNK3Mat8V_VectorILt3EE4NormEvEUlfE_ET0_T_S7_S6_+0xe>
      return __f; // N.B. [alg.foreach] says std::move(f) but it's redundant.
 8012950:	687b      	ldr	r3, [r7, #4]
    }
 8012952:	4618      	mov	r0, r3
 8012954:	3710      	adds	r7, #16
 8012956:	46bd      	mov	sp, r7
 8012958:	bd80      	pop	{r7, pc}

0801295a <_ZN3Mat6MatrixILt4ELt1EEC1ERKSt5arrayIfLj4EE>:
Matrix<heigth, width>::Matrix(const std::array<float, heigth*width>& values): _values(values) {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 801295a:	b490      	push	{r4, r7}
 801295c:	b082      	sub	sp, #8
 801295e:	af00      	add	r7, sp, #0
 8012960:	6078      	str	r0, [r7, #4]
 8012962:	6039      	str	r1, [r7, #0]
 8012964:	687a      	ldr	r2, [r7, #4]
 8012966:	683b      	ldr	r3, [r7, #0]
 8012968:	4614      	mov	r4, r2
 801296a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801296c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	4618      	mov	r0, r3
 8012974:	3708      	adds	r7, #8
 8012976:	46bd      	mov	sp, r7
 8012978:	bc90      	pop	{r4, r7}
 801297a:	4770      	bx	lr

0801297c <_ZNKSt5arrayIfLj3EE4dataEv>:

      _GLIBCXX17_CONSTEXPR const_pointer
      data() const noexcept
 801297c:	b580      	push	{r7, lr}
 801297e:	b082      	sub	sp, #8
 8012980:	af00      	add	r7, sp, #0
 8012982:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	4618      	mov	r0, r3
 8012988:	f7fb fb20 	bl	800dfcc <_ZNSt14__array_traitsIfLj3EE6_S_ptrERA3_Kf>
 801298c:	4603      	mov	r3, r0
 801298e:	4618      	mov	r0, r3
 8012990:	3708      	adds	r7, #8
 8012992:	46bd      	mov	sp, r7
 8012994:	bd80      	pop	{r7, pc}
	...

08012998 <_Z41__static_initialization_and_destruction_0ii>:
		(a_2_1*a_3_2 - a_2_2*a_3_1)*det1, -(a_1_1*a_3_2 - a_1_2*a_3_1)*det1,  (a_1_1*a_2_2 - a_1_2*a_2_1)*det1,
	}};
	return result;
}

} //namespace Algorithms
 8012998:	b580      	push	{r7, lr}
 801299a:	ed2d 8b02 	vpush	{d8}
 801299e:	b08c      	sub	sp, #48	; 0x30
 80129a0:	af00      	add	r7, sp, #0
 80129a2:	6078      	str	r0, [r7, #4]
 80129a4:	6039      	str	r1, [r7, #0]
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	2b01      	cmp	r3, #1
 80129aa:	d15c      	bne.n	8012a66 <_Z41__static_initialization_and_destruction_0ii+0xce>
 80129ac:	683b      	ldr	r3, [r7, #0]
 80129ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80129b2:	4293      	cmp	r3, r2
 80129b4:	d157      	bne.n	8012a66 <_Z41__static_initialization_and_destruction_0ii+0xce>
const V_Vector<3> _r{{0.0f, cos(magDip), -sin(magDip)}};
 80129b6:	4a2f      	ldr	r2, [pc, #188]	; (8012a74 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 80129b8:	f107 030c 	add.w	r3, r7, #12
 80129bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80129be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80129c2:	f107 030c 	add.w	r3, r7, #12
 80129c6:	4619      	mov	r1, r3
 80129c8:	482b      	ldr	r0, [pc, #172]	; (8012a78 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 80129ca:	f7ff ff0b 	bl	80127e4 <_ZN3Mat8V_VectorILt3EEC1ERKSt5arrayIfLj3EE>
const V_Vector<3> r{{0.0f, _r(1) * (1 / _r.Norm()), _r(2) * (1 / _r.Norm())}};
 80129ce:	f04f 0300 	mov.w	r3, #0
 80129d2:	61bb      	str	r3, [r7, #24]
 80129d4:	2101      	movs	r1, #1
 80129d6:	4828      	ldr	r0, [pc, #160]	; (8012a78 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 80129d8:	f7ff ff13 	bl	8012802 <_ZNK3Mat8V_VectorILt3EEclEt>
 80129dc:	eeb0 8a40 	vmov.f32	s16, s0
 80129e0:	4825      	ldr	r0, [pc, #148]	; (8012a78 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 80129e2:	f7ff ff3d 	bl	8012860 <_ZNK3Mat8V_VectorILt3EE4NormEv>
 80129e6:	eeb0 7a40 	vmov.f32	s14, s0
 80129ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80129ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80129f2:	ee68 7a27 	vmul.f32	s15, s16, s15
 80129f6:	edc7 7a07 	vstr	s15, [r7, #28]
 80129fa:	2102      	movs	r1, #2
 80129fc:	481e      	ldr	r0, [pc, #120]	; (8012a78 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 80129fe:	f7ff ff00 	bl	8012802 <_ZNK3Mat8V_VectorILt3EEclEt>
 8012a02:	eeb0 8a40 	vmov.f32	s16, s0
 8012a06:	481c      	ldr	r0, [pc, #112]	; (8012a78 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8012a08:	f7ff ff2a 	bl	8012860 <_ZNK3Mat8V_VectorILt3EE4NormEv>
 8012a0c:	eeb0 7a40 	vmov.f32	s14, s0
 8012a10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012a14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012a18:	ee68 7a27 	vmul.f32	s15, s16, s15
 8012a1c:	edc7 7a08 	vstr	s15, [r7, #32]
 8012a20:	f107 0318 	add.w	r3, r7, #24
 8012a24:	4619      	mov	r1, r3
 8012a26:	4815      	ldr	r0, [pc, #84]	; (8012a7c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8012a28:	f7ff fedc 	bl	80127e4 <_ZN3Mat8V_VectorILt3EEC1ERKSt5arrayIfLj3EE>
const V_Vector<3> r2{{0.0f, r(1)*2.0f, r(2)*2.0f}};
 8012a2c:	f04f 0300 	mov.w	r3, #0
 8012a30:	627b      	str	r3, [r7, #36]	; 0x24
 8012a32:	2101      	movs	r1, #1
 8012a34:	4811      	ldr	r0, [pc, #68]	; (8012a7c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8012a36:	f7ff fee4 	bl	8012802 <_ZNK3Mat8V_VectorILt3EEclEt>
 8012a3a:	eef0 7a40 	vmov.f32	s15, s0
 8012a3e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8012a42:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8012a46:	2102      	movs	r1, #2
 8012a48:	480c      	ldr	r0, [pc, #48]	; (8012a7c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8012a4a:	f7ff feda 	bl	8012802 <_ZNK3Mat8V_VectorILt3EEclEt>
 8012a4e:	eef0 7a40 	vmov.f32	s15, s0
 8012a52:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8012a56:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8012a5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012a5e:	4619      	mov	r1, r3
 8012a60:	4807      	ldr	r0, [pc, #28]	; (8012a80 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8012a62:	f7ff febf 	bl	80127e4 <_ZN3Mat8V_VectorILt3EEC1ERKSt5arrayIfLj3EE>
} //namespace Algorithms
 8012a66:	bf00      	nop
 8012a68:	3730      	adds	r7, #48	; 0x30
 8012a6a:	46bd      	mov	sp, r7
 8012a6c:	ecbd 8b02 	vpop	{d8}
 8012a70:	bd80      	pop	{r7, pc}
 8012a72:	bf00      	nop
 8012a74:	0801bf18 	.word	0x0801bf18
 8012a78:	24009488 	.word	0x24009488
 8012a7c:	24009494 	.word	0x24009494
 8012a80:	240094a0 	.word	0x240094a0

08012a84 <_GLOBAL__sub_I__ZN10Algorithms14OrientationEKF6UpdateERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEEf>:
 8012a84:	b580      	push	{r7, lr}
 8012a86:	af00      	add	r7, sp, #0
 8012a88:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012a8c:	2001      	movs	r0, #1
 8012a8e:	f7ff ff83 	bl	8012998 <_Z41__static_initialization_and_destruction_0ii>
 8012a92:	bd80      	pop	{r7, pc}

08012a94 <_ZSt3cosf>:
  { return __builtin_cosf(__x); }
 8012a94:	b580      	push	{r7, lr}
 8012a96:	b082      	sub	sp, #8
 8012a98:	af00      	add	r7, sp, #0
 8012a9a:	ed87 0a01 	vstr	s0, [r7, #4]
 8012a9e:	ed97 0a01 	vldr	s0, [r7, #4]
 8012aa2:	f006 fcd9 	bl	8019458 <cosf>
 8012aa6:	eef0 7a40 	vmov.f32	s15, s0
 8012aaa:	eeb0 0a67 	vmov.f32	s0, s15
 8012aae:	3708      	adds	r7, #8
 8012ab0:	46bd      	mov	sp, r7
 8012ab2:	bd80      	pop	{r7, pc}

08012ab4 <_ZSt3sinf>:
  { return __builtin_sinf(__x); }
 8012ab4:	b580      	push	{r7, lr}
 8012ab6:	b082      	sub	sp, #8
 8012ab8:	af00      	add	r7, sp, #0
 8012aba:	ed87 0a01 	vstr	s0, [r7, #4]
 8012abe:	ed97 0a01 	vldr	s0, [r7, #4]
 8012ac2:	f006 fc05 	bl	80192d0 <sinf>
 8012ac6:	eef0 7a40 	vmov.f32	s15, s0
 8012aca:	eeb0 0a67 	vmov.f32	s0, s15
 8012ace:	3708      	adds	r7, #8
 8012ad0:	46bd      	mov	sp, r7
 8012ad2:	bd80      	pop	{r7, pc}

08012ad4 <_ZN10Algorithms11VelocityEKF6UpdateERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEEf>:

namespace Algorithms
{

void VelocityEKF::Update(const MeassurementVec& meassurementVec, const MeasurementCovarianceMatrix& meassurementCov, float time)
{
 8012ad4:	b580      	push	{r7, lr}
 8012ad6:	b084      	sub	sp, #16
 8012ad8:	af00      	add	r7, sp, #0
 8012ada:	60f8      	str	r0, [r7, #12]
 8012adc:	60b9      	str	r1, [r7, #8]
 8012ade:	607a      	str	r2, [r7, #4]
 8012ae0:	ed87 0a00 	vstr	s0, [r7]
	_stateCovMatrix(0,0) = 0.002;
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	331c      	adds	r3, #28
 8012ae8:	2200      	movs	r2, #0
 8012aea:	2100      	movs	r1, #0
 8012aec:	4618      	mov	r0, r3
 8012aee:	f7fa ff05 	bl	800d8fc <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 8012af2:	4603      	mov	r3, r0
 8012af4:	4a21      	ldr	r2, [pc, #132]	; (8012b7c <_ZN10Algorithms11VelocityEKF6UpdateERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEEf+0xa8>)
 8012af6:	601a      	str	r2, [r3, #0]
	_stateCovMatrix(1,1) = 0.002;
 8012af8:	68fb      	ldr	r3, [r7, #12]
 8012afa:	331c      	adds	r3, #28
 8012afc:	2201      	movs	r2, #1
 8012afe:	2101      	movs	r1, #1
 8012b00:	4618      	mov	r0, r3
 8012b02:	f7fa fefb 	bl	800d8fc <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 8012b06:	4603      	mov	r3, r0
 8012b08:	4a1c      	ldr	r2, [pc, #112]	; (8012b7c <_ZN10Algorithms11VelocityEKF6UpdateERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEEf+0xa8>)
 8012b0a:	601a      	str	r2, [r3, #0]
	_stateCovMatrix(2,2) = 0.002;
 8012b0c:	68fb      	ldr	r3, [r7, #12]
 8012b0e:	331c      	adds	r3, #28
 8012b10:	2202      	movs	r2, #2
 8012b12:	2102      	movs	r1, #2
 8012b14:	4618      	mov	r0, r3
 8012b16:	f7fa fef1 	bl	800d8fc <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 8012b1a:	4603      	mov	r3, r0
 8012b1c:	4a17      	ldr	r2, [pc, #92]	; (8012b7c <_ZN10Algorithms11VelocityEKF6UpdateERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEEf+0xa8>)
 8012b1e:	601a      	str	r2, [r3, #0]
	_stateCovMatrix(3,3) = 1.000000;
 8012b20:	68fb      	ldr	r3, [r7, #12]
 8012b22:	331c      	adds	r3, #28
 8012b24:	2203      	movs	r2, #3
 8012b26:	2103      	movs	r1, #3
 8012b28:	4618      	mov	r0, r3
 8012b2a:	f7fa fee7 	bl	800d8fc <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 8012b2e:	4603      	mov	r3, r0
 8012b30:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8012b34:	601a      	str	r2, [r3, #0]
	_stateCovMatrix(4,4) = 1.000000;
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	331c      	adds	r3, #28
 8012b3a:	2204      	movs	r2, #4
 8012b3c:	2104      	movs	r1, #4
 8012b3e:	4618      	mov	r0, r3
 8012b40:	f7fa fedc 	bl	800d8fc <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 8012b44:	4603      	mov	r3, r0
 8012b46:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8012b4a:	601a      	str	r2, [r3, #0]
	_stateCovMatrix(5,5) = 1.000000;
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	331c      	adds	r3, #28
 8012b50:	2205      	movs	r2, #5
 8012b52:	2105      	movs	r1, #5
 8012b54:	4618      	mov	r0, r3
 8012b56:	f7fa fed1 	bl	800d8fc <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 8012b5a:	4603      	mov	r3, r0
 8012b5c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8012b60:	601a      	str	r2, [r3, #0]
	_UpdateVelocity(meassurementVec, meassurementCov);
 8012b62:	687a      	ldr	r2, [r7, #4]
 8012b64:	68b9      	ldr	r1, [r7, #8]
 8012b66:	68f8      	ldr	r0, [r7, #12]
 8012b68:	f000 f80a 	bl	8012b80 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE>
	//_UpdatePosition(meassurementVec, meassurementCov);
	_time = time;
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	683a      	ldr	r2, [r7, #0]
 8012b70:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}
 8012b74:	bf00      	nop
 8012b76:	3710      	adds	r7, #16
 8012b78:	46bd      	mov	sp, r7
 8012b7a:	bd80      	pop	{r7, pc}
 8012b7c:	3b03126f 	.word	0x3b03126f

08012b80 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE>:

void VelocityEKF::_UpdateVelocity(const MeassurementVec& meassurementVec, const MeasurementCovarianceMatrix& meassurementCov)
{
 8012b80:	b590      	push	{r4, r7, lr}
 8012b82:	ed2d 8b06 	vpush	{d8-d10}
 8012b86:	f2ad 4d74 	subw	sp, sp, #1140	; 0x474
 8012b8a:	af06      	add	r7, sp, #24
 8012b8c:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8012b90:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8012b94:	6018      	str	r0, [r3, #0]
 8012b96:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8012b9a:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8012b9e:	6019      	str	r1, [r3, #0]
 8012ba0:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8012ba4:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8012ba8:	601a      	str	r2, [r3, #0]
	V_Vector<3> z{{meassurementVec(0), meassurementVec(1), meassurementVec(2)}};
 8012baa:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8012bae:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8012bb2:	2100      	movs	r1, #0
 8012bb4:	6818      	ldr	r0, [r3, #0]
 8012bb6:	f7fa fde8 	bl	800d78a <_ZNK3Mat8V_VectorILt6EEclEt>
 8012bba:	eef0 7a40 	vmov.f32	s15, s0
 8012bbe:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8012bc2:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8012bc6:	edc3 7a00 	vstr	s15, [r3]
 8012bca:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8012bce:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8012bd2:	2101      	movs	r1, #1
 8012bd4:	6818      	ldr	r0, [r3, #0]
 8012bd6:	f7fa fdd8 	bl	800d78a <_ZNK3Mat8V_VectorILt6EEclEt>
 8012bda:	eef0 7a40 	vmov.f32	s15, s0
 8012bde:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8012be2:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8012be6:	edc3 7a01 	vstr	s15, [r3, #4]
 8012bea:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8012bee:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8012bf2:	2102      	movs	r1, #2
 8012bf4:	6818      	ldr	r0, [r3, #0]
 8012bf6:	f7fa fdc8 	bl	800d78a <_ZNK3Mat8V_VectorILt6EEclEt>
 8012bfa:	eef0 7a40 	vmov.f32	s15, s0
 8012bfe:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8012c02:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8012c06:	edc3 7a02 	vstr	s15, [r3, #8]
 8012c0a:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8012c0e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8012c12:	4611      	mov	r1, r2
 8012c14:	4618      	mov	r0, r3
 8012c16:	f7ff fde5 	bl	80127e4 <_ZN3Mat8V_VectorILt3EEC1ERKSt5arrayIfLj3EE>
	//LOG("State: %f, %f, %f, %f, %f, %f", _state(0), _state(1), _state(2), _state(3), _state(4), _state(5));
	V_Vector<3> h{{_state(0), _state(1), _state(2)}};
 8012c1a:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8012c1e:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	3304      	adds	r3, #4
 8012c26:	2100      	movs	r1, #0
 8012c28:	4618      	mov	r0, r3
 8012c2a:	f000 fe69 	bl	8013900 <_ZN3Mat8V_VectorILt6EEclEt>
 8012c2e:	4603      	mov	r3, r0
 8012c30:	681a      	ldr	r2, [r3, #0]
 8012c32:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8012c36:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 8012c3a:	601a      	str	r2, [r3, #0]
 8012c3c:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8012c40:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	3304      	adds	r3, #4
 8012c48:	2101      	movs	r1, #1
 8012c4a:	4618      	mov	r0, r3
 8012c4c:	f000 fe58 	bl	8013900 <_ZN3Mat8V_VectorILt6EEclEt>
 8012c50:	4603      	mov	r3, r0
 8012c52:	681a      	ldr	r2, [r3, #0]
 8012c54:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8012c58:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 8012c5c:	605a      	str	r2, [r3, #4]
 8012c5e:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8012c62:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	3304      	adds	r3, #4
 8012c6a:	2102      	movs	r1, #2
 8012c6c:	4618      	mov	r0, r3
 8012c6e:	f000 fe47 	bl	8013900 <_ZN3Mat8V_VectorILt6EEclEt>
 8012c72:	4603      	mov	r3, r0
 8012c74:	681a      	ldr	r2, [r3, #0]
 8012c76:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8012c7a:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 8012c7e:	609a      	str	r2, [r3, #8]
 8012c80:	f507 729a 	add.w	r2, r7, #308	; 0x134
 8012c84:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012c88:	4611      	mov	r1, r2
 8012c8a:	4618      	mov	r0, r3
 8012c8c:	f7ff fdaa 	bl	80127e4 <_ZN3Mat8V_VectorILt3EEC1ERKSt5arrayIfLj3EE>
	static Matrix<3, VelocityEKF_stateLen> H{0.0f};
 8012c90:	4bc6      	ldr	r3, [pc, #792]	; (8012fac <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x42c>)
 8012c92:	681b      	ldr	r3, [r3, #0]
 8012c94:	f3bf 8f5b 	dmb	ish
 8012c98:	f003 0301 	and.w	r3, r3, #1
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	bf0c      	ite	eq
 8012ca0:	2301      	moveq	r3, #1
 8012ca2:	2300      	movne	r3, #0
 8012ca4:	b2db      	uxtb	r3, r3
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d012      	beq.n	8012cd0 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x150>
 8012caa:	48c0      	ldr	r0, [pc, #768]	; (8012fac <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x42c>)
 8012cac:	f006 fab8 	bl	8019220 <__cxa_guard_acquire>
 8012cb0:	4603      	mov	r3, r0
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	bf14      	ite	ne
 8012cb6:	2301      	movne	r3, #1
 8012cb8:	2300      	moveq	r3, #0
 8012cba:	b2db      	uxtb	r3, r3
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d007      	beq.n	8012cd0 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x150>
 8012cc0:	ed9f 0abb 	vldr	s0, [pc, #748]	; 8012fb0 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x430>
 8012cc4:	48bb      	ldr	r0, [pc, #748]	; (8012fb4 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x434>)
 8012cc6:	f000 fe3b 	bl	8013940 <_ZN3Mat6MatrixILt3ELt6EEC1Ef>
 8012cca:	48b8      	ldr	r0, [pc, #736]	; (8012fac <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x42c>)
 8012ccc:	f006 fab4 	bl	8019238 <__cxa_guard_release>
	H(0,0) = 1.0f; H(1,1) = 1.0f; H(2,2) = 1.0f;
 8012cd0:	2200      	movs	r2, #0
 8012cd2:	2100      	movs	r1, #0
 8012cd4:	48b7      	ldr	r0, [pc, #732]	; (8012fb4 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x434>)
 8012cd6:	f000 fe50 	bl	801397a <_ZN3Mat6MatrixILt3ELt6EEclEtt>
 8012cda:	4603      	mov	r3, r0
 8012cdc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8012ce0:	601a      	str	r2, [r3, #0]
 8012ce2:	2201      	movs	r2, #1
 8012ce4:	2101      	movs	r1, #1
 8012ce6:	48b3      	ldr	r0, [pc, #716]	; (8012fb4 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x434>)
 8012ce8:	f000 fe47 	bl	801397a <_ZN3Mat6MatrixILt3ELt6EEclEtt>
 8012cec:	4603      	mov	r3, r0
 8012cee:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8012cf2:	601a      	str	r2, [r3, #0]
 8012cf4:	2202      	movs	r2, #2
 8012cf6:	2102      	movs	r1, #2
 8012cf8:	48ae      	ldr	r0, [pc, #696]	; (8012fb4 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x434>)
 8012cfa:	f000 fe3e 	bl	801397a <_ZN3Mat6MatrixILt3ELt6EEclEtt>
 8012cfe:	4603      	mov	r3, r0
 8012d00:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8012d04:	601a      	str	r2, [r3, #0]
	static Matrix<3, 3> R{0.0f};
 8012d06:	4bac      	ldr	r3, [pc, #688]	; (8012fb8 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x438>)
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	f3bf 8f5b 	dmb	ish
 8012d0e:	f003 0301 	and.w	r3, r3, #1
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	bf0c      	ite	eq
 8012d16:	2301      	moveq	r3, #1
 8012d18:	2300      	movne	r3, #0
 8012d1a:	b2db      	uxtb	r3, r3
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d012      	beq.n	8012d46 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x1c6>
 8012d20:	48a5      	ldr	r0, [pc, #660]	; (8012fb8 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x438>)
 8012d22:	f006 fa7d 	bl	8019220 <__cxa_guard_acquire>
 8012d26:	4603      	mov	r3, r0
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	bf14      	ite	ne
 8012d2c:	2301      	movne	r3, #1
 8012d2e:	2300      	moveq	r3, #0
 8012d30:	b2db      	uxtb	r3, r3
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d007      	beq.n	8012d46 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x1c6>
 8012d36:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 8012fb0 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x430>
 8012d3a:	48a0      	ldr	r0, [pc, #640]	; (8012fbc <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x43c>)
 8012d3c:	f7fa fe1e 	bl	800d97c <_ZN3Mat6MatrixILt3ELt3EEC1Ef>
 8012d40:	489d      	ldr	r0, [pc, #628]	; (8012fb8 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x438>)
 8012d42:	f006 fa79 	bl	8019238 <__cxa_guard_release>
	R(0,0) = meassurementCov(0,0); R(1,1) = meassurementCov(1,1); R(2,2) = meassurementCov(2,2);
 8012d46:	2200      	movs	r2, #0
 8012d48:	2100      	movs	r1, #0
 8012d4a:	489c      	ldr	r0, [pc, #624]	; (8012fbc <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x43c>)
 8012d4c:	f7fa fe33 	bl	800d9b6 <_ZN3Mat6MatrixILt3ELt3EEclEtt>
 8012d50:	4604      	mov	r4, r0
 8012d52:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8012d56:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8012d5a:	2200      	movs	r2, #0
 8012d5c:	2100      	movs	r1, #0
 8012d5e:	6818      	ldr	r0, [r3, #0]
 8012d60:	f7fb fe08 	bl	800e974 <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 8012d64:	eef0 7a40 	vmov.f32	s15, s0
 8012d68:	edc4 7a00 	vstr	s15, [r4]
 8012d6c:	2201      	movs	r2, #1
 8012d6e:	2101      	movs	r1, #1
 8012d70:	4892      	ldr	r0, [pc, #584]	; (8012fbc <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x43c>)
 8012d72:	f7fa fe20 	bl	800d9b6 <_ZN3Mat6MatrixILt3ELt3EEclEtt>
 8012d76:	4604      	mov	r4, r0
 8012d78:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8012d7c:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8012d80:	2201      	movs	r2, #1
 8012d82:	2101      	movs	r1, #1
 8012d84:	6818      	ldr	r0, [r3, #0]
 8012d86:	f7fb fdf5 	bl	800e974 <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 8012d8a:	eef0 7a40 	vmov.f32	s15, s0
 8012d8e:	edc4 7a00 	vstr	s15, [r4]
 8012d92:	2202      	movs	r2, #2
 8012d94:	2102      	movs	r1, #2
 8012d96:	4889      	ldr	r0, [pc, #548]	; (8012fbc <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x43c>)
 8012d98:	f7fa fe0d 	bl	800d9b6 <_ZN3Mat6MatrixILt3ELt3EEclEtt>
 8012d9c:	4604      	mov	r4, r0
 8012d9e:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8012da2:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8012da6:	2202      	movs	r2, #2
 8012da8:	2102      	movs	r1, #2
 8012daa:	6818      	ldr	r0, [r3, #0]
 8012dac:	f7fb fde2 	bl	800e974 <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 8012db0:	eef0 7a40 	vmov.f32	s15, s0
 8012db4:	edc4 7a00 	vstr	s15, [r4]
	//LOG("COV: %f, %f, %f, %f, %f, %f", R(0,0), R(0,0), R(0,0));
	auto S = H * _stateCovMatrix * H.Transposed();
 8012db8:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8012dbc:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	f103 021c 	add.w	r2, r3, #28
 8012dc6:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8012dca:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 8012dce:	4979      	ldr	r1, [pc, #484]	; (8012fb4 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x434>)
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	f000 fded 	bl	80139b0 <_ZNK3Mat6MatrixILt3ELt6EEmlILt6EEENS0_ILt3EXT_EEERKNS0_ILt6EXT_EEE>
 8012dd6:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8012dda:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8012dde:	4975      	ldr	r1, [pc, #468]	; (8012fb4 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x434>)
 8012de0:	4618      	mov	r0, r3
 8012de2:	f000 fdf8 	bl	80139d6 <_ZNK3Mat6MatrixILt3ELt6EE10TransposedEv>
 8012de6:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8012dea:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8012dee:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8012df2:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8012df6:	4618      	mov	r0, r3
 8012df8:	f000 fe1d 	bl	8013a36 <_ZNK3Mat6MatrixILt3ELt6EEmlILt3EEENS0_ILt3EXT_EEERKNS0_ILt6EXT_EEE>
	auto K = _stateCovMatrix * H.Transposed() * _Invert3x3Matrix(S);
 8012dfc:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8012e00:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	f103 041c 	add.w	r4, r3, #28
 8012e0a:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8012e0e:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8012e12:	4968      	ldr	r1, [pc, #416]	; (8012fb4 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x434>)
 8012e14:	4618      	mov	r0, r3
 8012e16:	f000 fdde 	bl	80139d6 <_ZNK3Mat6MatrixILt3ELt6EE10TransposedEv>
 8012e1a:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8012e1e:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8012e22:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8012e26:	4621      	mov	r1, r4
 8012e28:	4618      	mov	r0, r3
 8012e2a:	f000 fe17 	bl	8013a5c <_ZNK3Mat6MatrixILt6ELt6EEmlILt3EEENS0_ILt6EXT_EEERKS3_>
 8012e2e:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8012e32:	f5a3 70fc 	sub.w	r0, r3, #504	; 0x1f8
 8012e36:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 8012e3a:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8012e3e:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8012e42:	6819      	ldr	r1, [r3, #0]
 8012e44:	f000 fb6e 	bl	8013524 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE>
 8012e48:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8012e4c:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 8012e50:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8012e54:	f507 71e8 	add.w	r1, r7, #464	; 0x1d0
 8012e58:	4618      	mov	r0, r3
 8012e5a:	f000 fe12 	bl	8013a82 <_ZNK3Mat6MatrixILt6ELt3EEmlILt3EEENS0_ILt6EXT_EEERKNS0_ILt3EXT_EEE>
	_state += K * (z - h);
 8012e5e:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8012e62:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	1d1c      	adds	r4, r3, #4
 8012e6a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8012e6e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8012e72:	4611      	mov	r1, r2
 8012e74:	4618      	mov	r0, r3
 8012e76:	f7fc f89a 	bl	800efae <_ZNK3Mat6MatrixILt3ELt1EEmiERKS1_>
 8012e7a:	eef0 6a40 	vmov.f32	s13, s0
 8012e7e:	eeb0 7a60 	vmov.f32	s14, s1
 8012e82:	eef0 7a41 	vmov.f32	s15, s2
 8012e86:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8012e8a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8012e8e:	edc3 6a00 	vstr	s13, [r3]
 8012e92:	ed83 7a01 	vstr	s14, [r3, #4]
 8012e96:	edc3 7a02 	vstr	s15, [r3, #8]
 8012e9a:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8012e9e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8012ea2:	f507 7227 	add.w	r2, r7, #668	; 0x29c
 8012ea6:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8012eaa:	4618      	mov	r0, r3
 8012eac:	f000 fdfc 	bl	8013aa8 <_ZNK3Mat6MatrixILt6ELt3EEmlILt1EEENS0_ILt6EXT_EEERKNS0_ILt3EXT_EEE>
 8012eb0:	f507 7321 	add.w	r3, r7, #644	; 0x284
 8012eb4:	4619      	mov	r1, r3
 8012eb6:	4620      	mov	r0, r4
 8012eb8:	f7fb fc46 	bl	800e748 <_ZN3Mat6MatrixILt6ELt1EEpLERKS1_>
	//LOG("State: %f, %f, %f, %f, %f, %f", _state(0), _state(1), _state(2), _state(3), _state(4), _state(5));
	printf("%f, %f, %f, %f\n\r", _time, meassurementVec(0), meassurementVec(1), meassurementVec(2));
 8012ebc:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8012ec0:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8012ec4:	681b      	ldr	r3, [r3, #0]
 8012ec6:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 8012eca:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8012ece:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8012ed2:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8012ed6:	2100      	movs	r1, #0
 8012ed8:	6818      	ldr	r0, [r3, #0]
 8012eda:	f7fa fc56 	bl	800d78a <_ZNK3Mat8V_VectorILt6EEclEt>
 8012ede:	eef0 7a40 	vmov.f32	s15, s0
 8012ee2:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8012ee6:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8012eea:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8012eee:	2101      	movs	r1, #1
 8012ef0:	6818      	ldr	r0, [r3, #0]
 8012ef2:	f7fa fc4a 	bl	800d78a <_ZNK3Mat8V_VectorILt6EEclEt>
 8012ef6:	eef0 7a40 	vmov.f32	s15, s0
 8012efa:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8012efe:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8012f02:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8012f06:	2102      	movs	r1, #2
 8012f08:	6818      	ldr	r0, [r3, #0]
 8012f0a:	f7fa fc3e 	bl	800d78a <_ZNK3Mat8V_VectorILt6EEclEt>
 8012f0e:	eef0 7a40 	vmov.f32	s15, s0
 8012f12:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8012f16:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012f1a:	ed8d 9b02 	vstr	d9, [sp, #8]
 8012f1e:	ed8d 8b00 	vstr	d8, [sp]
 8012f22:	ec53 2b1a 	vmov	r2, r3, d10
 8012f26:	4826      	ldr	r0, [pc, #152]	; (8012fc0 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x440>)
 8012f28:	f007 f856 	bl	8019fd8 <iprintf>
	//LOG("COV: %f, %f, %f, %f, %f, %f", _stateCovMatrix(0,0), _stateCovMatrix(1,1), _stateCovMatrix(2,2), _stateCovMatrix(3,3), _stateCovMatrix(4,4), _stateCovMatrix(5,5));
	_stateCovMatrix = (Eye<VelocityEKF_stateLen>(1.0f) - K*H) * _stateCovMatrix;
 8012f2c:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8012f30:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8012f34:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012f38:	4618      	mov	r0, r3
 8012f3a:	f7fa fafd 	bl	800d538 <_ZN3Mat3EyeILt6EEENS_6MatrixIXT_EXT_EEEf>
 8012f3e:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 8012f42:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8012f46:	4a1b      	ldr	r2, [pc, #108]	; (8012fb4 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x434>)
 8012f48:	4618      	mov	r0, r3
 8012f4a:	f000 fdc0 	bl	8013ace <_ZNK3Mat6MatrixILt6ELt3EEmlILt6EEENS0_ILt6EXT_EEERKNS0_ILt3EXT_EEE>
 8012f4e:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8012f52:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8012f56:	f507 7272 	add.w	r2, r7, #968	; 0x3c8
 8012f5a:	f507 714e 	add.w	r1, r7, #824	; 0x338
 8012f5e:	4618      	mov	r0, r3
 8012f60:	f7fb fc27 	bl	800e7b2 <_ZNK3Mat6MatrixILt6ELt6EEmiERKS1_>
 8012f64:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8012f68:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	f103 021c 	add.w	r2, r3, #28
 8012f72:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8012f76:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8012f7a:	681c      	ldr	r4, [r3, #0]
 8012f7c:	463b      	mov	r3, r7
 8012f7e:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 8012f82:	4618      	mov	r0, r3
 8012f84:	f7fb fb5a 	bl	800e63c <_ZNK3Mat6MatrixILt6ELt6EEmlILt6EEENS0_ILt6EXT_EEERKS3_>
 8012f88:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8012f8c:	f5a3 628b 	sub.w	r2, r3, #1112	; 0x458
 8012f90:	f104 031c 	add.w	r3, r4, #28
 8012f94:	4611      	mov	r1, r2
 8012f96:	2290      	movs	r2, #144	; 0x90
 8012f98:	4618      	mov	r0, r3
 8012f9a:	f007 f8f2 	bl	801a182 <memcpy>
	//LOG("COV: %f, %f, %f, %f, %f, %f", _stateCovMatrix(0,0), _stateCovMatrix(1,1), _stateCovMatrix(2,2), _stateCovMatrix(3,3), _stateCovMatrix(4,4), _stateCovMatrix(5,5));
}
 8012f9e:	bf00      	nop
 8012fa0:	f207 475c 	addw	r7, r7, #1116	; 0x45c
 8012fa4:	46bd      	mov	sp, r7
 8012fa6:	ecbd 8b06 	vpop	{d8-d10}
 8012faa:	bd90      	pop	{r4, r7, pc}
 8012fac:	240094f4 	.word	0x240094f4
 8012fb0:	00000000 	.word	0x00000000
 8012fb4:	240094ac 	.word	0x240094ac
 8012fb8:	2400951c 	.word	0x2400951c
 8012fbc:	240094f8 	.word	0x240094f8
 8012fc0:	0801bf24 	.word	0x0801bf24

08012fc4 <_ZNK10Algorithms11VelocityEKF2_fERKN3Mat8V_VectorILt3EEEf>:
	_stateCovMatrix = (Eye<VelocityEKF_stateLen>(1.0f) - K*H) * _stateCovMatrix;
	//LOG("State: %f, %f, %f, %f, %f, %f", _state(0), _state(1), _state(2), _state(3), _state(4), _state(5));
}

VelocityEKF::StateVec VelocityEKF::_f(const ControlVec& controlVec, float time) const
{
 8012fc4:	b580      	push	{r7, lr}
 8012fc6:	ed2d 8b04 	vpush	{d8-d9}
 8012fca:	b088      	sub	sp, #32
 8012fcc:	af00      	add	r7, sp, #0
 8012fce:	60f8      	str	r0, [r7, #12]
 8012fd0:	60b9      	str	r1, [r7, #8]
 8012fd2:	607a      	str	r2, [r7, #4]
 8012fd4:	ed87 0a00 	vstr	s0, [r7]
	const float dt = time - _time;
 8012fd8:	68bb      	ldr	r3, [r7, #8]
 8012fda:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 8012fde:	ed97 7a00 	vldr	s14, [r7]
 8012fe2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012fe6:	edc7 7a07 	vstr	s15, [r7, #28]
	const float dt2 = dt*dt;
 8012fea:	edd7 7a07 	vldr	s15, [r7, #28]
 8012fee:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012ff2:	edc7 7a06 	vstr	s15, [r7, #24]
	const float dt2_2 = dt2 * 0.5f;
 8012ff6:	edd7 7a06 	vldr	s15, [r7, #24]
 8012ffa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8012ffe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013002:	edc7 7a05 	vstr	s15, [r7, #20]
	StateVec result;
 8013006:	68f8      	ldr	r0, [r7, #12]
 8013008:	f7fa fafa 	bl	800d600 <_ZN3Mat8V_VectorILt6EEC1Ev>
	result(0) = _state(0) + controlVec(0)*dt;
 801300c:	68bb      	ldr	r3, [r7, #8]
 801300e:	3304      	adds	r3, #4
 8013010:	2100      	movs	r1, #0
 8013012:	4618      	mov	r0, r3
 8013014:	f7fa fbb9 	bl	800d78a <_ZNK3Mat8V_VectorILt6EEclEt>
 8013018:	eef0 8a40 	vmov.f32	s17, s0
 801301c:	2100      	movs	r1, #0
 801301e:	6878      	ldr	r0, [r7, #4]
 8013020:	f7ff fbef 	bl	8012802 <_ZNK3Mat8V_VectorILt3EEclEt>
 8013024:	eeb0 7a40 	vmov.f32	s14, s0
 8013028:	edd7 7a07 	vldr	s15, [r7, #28]
 801302c:	ee27 8a27 	vmul.f32	s16, s14, s15
 8013030:	2100      	movs	r1, #0
 8013032:	68f8      	ldr	r0, [r7, #12]
 8013034:	f000 fc64 	bl	8013900 <_ZN3Mat8V_VectorILt6EEclEt>
 8013038:	4603      	mov	r3, r0
 801303a:	ee78 7a88 	vadd.f32	s15, s17, s16
 801303e:	edc3 7a00 	vstr	s15, [r3]
	result(1) = _state(1) + controlVec(1)*dt;
 8013042:	68bb      	ldr	r3, [r7, #8]
 8013044:	3304      	adds	r3, #4
 8013046:	2101      	movs	r1, #1
 8013048:	4618      	mov	r0, r3
 801304a:	f7fa fb9e 	bl	800d78a <_ZNK3Mat8V_VectorILt6EEclEt>
 801304e:	eef0 8a40 	vmov.f32	s17, s0
 8013052:	2101      	movs	r1, #1
 8013054:	6878      	ldr	r0, [r7, #4]
 8013056:	f7ff fbd4 	bl	8012802 <_ZNK3Mat8V_VectorILt3EEclEt>
 801305a:	eeb0 7a40 	vmov.f32	s14, s0
 801305e:	edd7 7a07 	vldr	s15, [r7, #28]
 8013062:	ee27 8a27 	vmul.f32	s16, s14, s15
 8013066:	2101      	movs	r1, #1
 8013068:	68f8      	ldr	r0, [r7, #12]
 801306a:	f000 fc49 	bl	8013900 <_ZN3Mat8V_VectorILt6EEclEt>
 801306e:	4603      	mov	r3, r0
 8013070:	ee78 7a88 	vadd.f32	s15, s17, s16
 8013074:	edc3 7a00 	vstr	s15, [r3]
	result(2) = _state(2) + controlVec(2)*dt;
 8013078:	68bb      	ldr	r3, [r7, #8]
 801307a:	3304      	adds	r3, #4
 801307c:	2102      	movs	r1, #2
 801307e:	4618      	mov	r0, r3
 8013080:	f7fa fb83 	bl	800d78a <_ZNK3Mat8V_VectorILt6EEclEt>
 8013084:	eef0 8a40 	vmov.f32	s17, s0
 8013088:	2102      	movs	r1, #2
 801308a:	6878      	ldr	r0, [r7, #4]
 801308c:	f7ff fbb9 	bl	8012802 <_ZNK3Mat8V_VectorILt3EEclEt>
 8013090:	eeb0 7a40 	vmov.f32	s14, s0
 8013094:	edd7 7a07 	vldr	s15, [r7, #28]
 8013098:	ee27 8a27 	vmul.f32	s16, s14, s15
 801309c:	2102      	movs	r1, #2
 801309e:	68f8      	ldr	r0, [r7, #12]
 80130a0:	f000 fc2e 	bl	8013900 <_ZN3Mat8V_VectorILt6EEclEt>
 80130a4:	4603      	mov	r3, r0
 80130a6:	ee78 7a88 	vadd.f32	s15, s17, s16
 80130aa:	edc3 7a00 	vstr	s15, [r3]
	result(3) = _state(3) + (_state(1)*dt + controlVec(1)*dt2_2)*_ER;
 80130ae:	68bb      	ldr	r3, [r7, #8]
 80130b0:	3304      	adds	r3, #4
 80130b2:	2103      	movs	r1, #3
 80130b4:	4618      	mov	r0, r3
 80130b6:	f7fa fb68 	bl	800d78a <_ZNK3Mat8V_VectorILt6EEclEt>
 80130ba:	eef0 8a40 	vmov.f32	s17, s0
 80130be:	68bb      	ldr	r3, [r7, #8]
 80130c0:	3304      	adds	r3, #4
 80130c2:	2101      	movs	r1, #1
 80130c4:	4618      	mov	r0, r3
 80130c6:	f7fa fb60 	bl	800d78a <_ZNK3Mat8V_VectorILt6EEclEt>
 80130ca:	eeb0 7a40 	vmov.f32	s14, s0
 80130ce:	edd7 7a07 	vldr	s15, [r7, #28]
 80130d2:	ee27 8a27 	vmul.f32	s16, s14, s15
 80130d6:	2101      	movs	r1, #1
 80130d8:	6878      	ldr	r0, [r7, #4]
 80130da:	f7ff fb92 	bl	8012802 <_ZNK3Mat8V_VectorILt3EEclEt>
 80130de:	eeb0 7a40 	vmov.f32	s14, s0
 80130e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80130e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80130ea:	ee78 7a27 	vadd.f32	s15, s16, s15
 80130ee:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80131e4 <_ZNK10Algorithms11VelocityEKF2_fERKN3Mat8V_VectorILt3EEEf+0x220>
 80130f2:	ee27 8a87 	vmul.f32	s16, s15, s14
 80130f6:	2103      	movs	r1, #3
 80130f8:	68f8      	ldr	r0, [r7, #12]
 80130fa:	f000 fc01 	bl	8013900 <_ZN3Mat8V_VectorILt6EEclEt>
 80130fe:	4603      	mov	r3, r0
 8013100:	ee78 7a88 	vadd.f32	s15, s17, s16
 8013104:	edc3 7a00 	vstr	s15, [r3]
	result(4) = _state(4) + (_state(0)*dt + controlVec(0)*dt2_2)*_ER / cos(_state(3));
 8013108:	68bb      	ldr	r3, [r7, #8]
 801310a:	3304      	adds	r3, #4
 801310c:	2104      	movs	r1, #4
 801310e:	4618      	mov	r0, r3
 8013110:	f7fa fb3b 	bl	800d78a <_ZNK3Mat8V_VectorILt6EEclEt>
 8013114:	eeb0 9a40 	vmov.f32	s18, s0
 8013118:	68bb      	ldr	r3, [r7, #8]
 801311a:	3304      	adds	r3, #4
 801311c:	2100      	movs	r1, #0
 801311e:	4618      	mov	r0, r3
 8013120:	f7fa fb33 	bl	800d78a <_ZNK3Mat8V_VectorILt6EEclEt>
 8013124:	eeb0 7a40 	vmov.f32	s14, s0
 8013128:	edd7 7a07 	vldr	s15, [r7, #28]
 801312c:	ee27 8a27 	vmul.f32	s16, s14, s15
 8013130:	2100      	movs	r1, #0
 8013132:	6878      	ldr	r0, [r7, #4]
 8013134:	f7ff fb65 	bl	8012802 <_ZNK3Mat8V_VectorILt3EEclEt>
 8013138:	eeb0 7a40 	vmov.f32	s14, s0
 801313c:	edd7 7a05 	vldr	s15, [r7, #20]
 8013140:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013144:	ee78 7a27 	vadd.f32	s15, s16, s15
 8013148:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80131e4 <_ZNK10Algorithms11VelocityEKF2_fERKN3Mat8V_VectorILt3EEEf+0x220>
 801314c:	ee67 8a87 	vmul.f32	s17, s15, s14
 8013150:	68bb      	ldr	r3, [r7, #8]
 8013152:	3304      	adds	r3, #4
 8013154:	2103      	movs	r1, #3
 8013156:	4618      	mov	r0, r3
 8013158:	f7fa fb17 	bl	800d78a <_ZNK3Mat8V_VectorILt6EEclEt>
 801315c:	eef0 7a40 	vmov.f32	s15, s0
 8013160:	eeb0 0a67 	vmov.f32	s0, s15
 8013164:	f7ff fc96 	bl	8012a94 <_ZSt3cosf>
 8013168:	eef0 7a40 	vmov.f32	s15, s0
 801316c:	ee88 8aa7 	vdiv.f32	s16, s17, s15
 8013170:	2104      	movs	r1, #4
 8013172:	68f8      	ldr	r0, [r7, #12]
 8013174:	f000 fbc4 	bl	8013900 <_ZN3Mat8V_VectorILt6EEclEt>
 8013178:	4603      	mov	r3, r0
 801317a:	ee79 7a08 	vadd.f32	s15, s18, s16
 801317e:	edc3 7a00 	vstr	s15, [r3]
	result(5) = _state(5) + _state(2)*dt + controlVec(2)*dt2_2;
 8013182:	68bb      	ldr	r3, [r7, #8]
 8013184:	3304      	adds	r3, #4
 8013186:	2105      	movs	r1, #5
 8013188:	4618      	mov	r0, r3
 801318a:	f7fa fafe 	bl	800d78a <_ZNK3Mat8V_VectorILt6EEclEt>
 801318e:	eeb0 8a40 	vmov.f32	s16, s0
 8013192:	68bb      	ldr	r3, [r7, #8]
 8013194:	3304      	adds	r3, #4
 8013196:	2102      	movs	r1, #2
 8013198:	4618      	mov	r0, r3
 801319a:	f7fa faf6 	bl	800d78a <_ZNK3Mat8V_VectorILt6EEclEt>
 801319e:	eeb0 7a40 	vmov.f32	s14, s0
 80131a2:	edd7 7a07 	vldr	s15, [r7, #28]
 80131a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80131aa:	ee78 8a27 	vadd.f32	s17, s16, s15
 80131ae:	2102      	movs	r1, #2
 80131b0:	6878      	ldr	r0, [r7, #4]
 80131b2:	f7ff fb26 	bl	8012802 <_ZNK3Mat8V_VectorILt3EEclEt>
 80131b6:	eeb0 7a40 	vmov.f32	s14, s0
 80131ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80131be:	ee27 8a27 	vmul.f32	s16, s14, s15
 80131c2:	2105      	movs	r1, #5
 80131c4:	68f8      	ldr	r0, [r7, #12]
 80131c6:	f000 fb9b 	bl	8013900 <_ZN3Mat8V_VectorILt6EEclEt>
 80131ca:	4603      	mov	r3, r0
 80131cc:	ee78 7a88 	vadd.f32	s15, s17, s16
 80131d0:	edc3 7a00 	vstr	s15, [r3]
	return result;
 80131d4:	bf00      	nop
}
 80131d6:	68f8      	ldr	r0, [r7, #12]
 80131d8:	3720      	adds	r7, #32
 80131da:	46bd      	mov	sp, r7
 80131dc:	ecbd 8b04 	vpop	{d8-d9}
 80131e0:	bd80      	pop	{r7, pc}
 80131e2:	bf00      	nop
 80131e4:	3428892d 	.word	0x3428892d

080131e8 <_ZNK10Algorithms11VelocityEKF2_FERKN3Mat8V_VectorILt3EEEf>:

VelocityEKF::StateCovarianceMatrix VelocityEKF::_F(const ControlVec& controlVec, float time) const
{
 80131e8:	b580      	push	{r7, lr}
 80131ea:	ed2d 8b02 	vpush	{d8}
 80131ee:	b088      	sub	sp, #32
 80131f0:	af00      	add	r7, sp, #0
 80131f2:	60f8      	str	r0, [r7, #12]
 80131f4:	60b9      	str	r1, [r7, #8]
 80131f6:	607a      	str	r2, [r7, #4]
 80131f8:	ed87 0a00 	vstr	s0, [r7]
	const float dt = time - _time;
 80131fc:	68bb      	ldr	r3, [r7, #8]
 80131fe:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 8013202:	ed97 7a00 	vldr	s14, [r7]
 8013206:	ee77 7a67 	vsub.f32	s15, s14, s15
 801320a:	edc7 7a07 	vstr	s15, [r7, #28]
	const float dt2 = dt*dt;
 801320e:	edd7 7a07 	vldr	s15, [r7, #28]
 8013212:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013216:	edc7 7a06 	vstr	s15, [r7, #24]
	const float dt2_2 = dt2 * 0.5f;
 801321a:	edd7 7a06 	vldr	s15, [r7, #24]
 801321e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8013222:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013226:	edc7 7a05 	vstr	s15, [r7, #20]
	StateCovarianceMatrix result = Eye<VelocityEKF_stateLen>(1.0f);
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013230:	4618      	mov	r0, r3
 8013232:	f7fa f981 	bl	800d538 <_ZN3Mat3EyeILt6EEENS_6MatrixIXT_EXT_EEEf>
	result(3, 1) = dt*_ER;
 8013236:	2201      	movs	r2, #1
 8013238:	2103      	movs	r1, #3
 801323a:	68f8      	ldr	r0, [r7, #12]
 801323c:	f7fa fb5e 	bl	800d8fc <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 8013240:	4603      	mov	r3, r0
 8013242:	edd7 7a07 	vldr	s15, [r7, #28]
 8013246:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8013354 <_ZNK10Algorithms11VelocityEKF2_FERKN3Mat8V_VectorILt3EEEf+0x16c>
 801324a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801324e:	edc3 7a00 	vstr	s15, [r3]
	result(4, 0) = dt*_ER / cos(_state(3)); result(4, 3) = (_state(0)*dt + dt2_2*controlVec(0)) * sin(_state(3)) * _ER / (cos(_state(3)) * cos(_state(3)));
 8013252:	edd7 7a07 	vldr	s15, [r7, #28]
 8013256:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8013354 <_ZNK10Algorithms11VelocityEKF2_FERKN3Mat8V_VectorILt3EEEf+0x16c>
 801325a:	ee27 8a87 	vmul.f32	s16, s15, s14
 801325e:	68bb      	ldr	r3, [r7, #8]
 8013260:	3304      	adds	r3, #4
 8013262:	2103      	movs	r1, #3
 8013264:	4618      	mov	r0, r3
 8013266:	f7fa fa90 	bl	800d78a <_ZNK3Mat8V_VectorILt6EEclEt>
 801326a:	eef0 7a40 	vmov.f32	s15, s0
 801326e:	eeb0 0a67 	vmov.f32	s0, s15
 8013272:	f7ff fc0f 	bl	8012a94 <_ZSt3cosf>
 8013276:	eef0 8a40 	vmov.f32	s17, s0
 801327a:	2200      	movs	r2, #0
 801327c:	2104      	movs	r1, #4
 801327e:	68f8      	ldr	r0, [r7, #12]
 8013280:	f7fa fb3c 	bl	800d8fc <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 8013284:	4603      	mov	r3, r0
 8013286:	eec8 7a28 	vdiv.f32	s15, s16, s17
 801328a:	edc3 7a00 	vstr	s15, [r3]
 801328e:	68bb      	ldr	r3, [r7, #8]
 8013290:	3304      	adds	r3, #4
 8013292:	2100      	movs	r1, #0
 8013294:	4618      	mov	r0, r3
 8013296:	f7fa fa78 	bl	800d78a <_ZNK3Mat8V_VectorILt6EEclEt>
 801329a:	eeb0 7a40 	vmov.f32	s14, s0
 801329e:	edd7 7a07 	vldr	s15, [r7, #28]
 80132a2:	ee27 8a27 	vmul.f32	s16, s14, s15
 80132a6:	2100      	movs	r1, #0
 80132a8:	6878      	ldr	r0, [r7, #4]
 80132aa:	f7ff faaa 	bl	8012802 <_ZNK3Mat8V_VectorILt3EEclEt>
 80132ae:	eeb0 7a40 	vmov.f32	s14, s0
 80132b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80132b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80132ba:	ee38 8a27 	vadd.f32	s16, s16, s15
 80132be:	68bb      	ldr	r3, [r7, #8]
 80132c0:	3304      	adds	r3, #4
 80132c2:	2103      	movs	r1, #3
 80132c4:	4618      	mov	r0, r3
 80132c6:	f7fa fa60 	bl	800d78a <_ZNK3Mat8V_VectorILt6EEclEt>
 80132ca:	eef0 7a40 	vmov.f32	s15, s0
 80132ce:	eeb0 0a67 	vmov.f32	s0, s15
 80132d2:	f7ff fbef 	bl	8012ab4 <_ZSt3sinf>
 80132d6:	eef0 7a40 	vmov.f32	s15, s0
 80132da:	ee68 7a27 	vmul.f32	s15, s16, s15
 80132de:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8013354 <_ZNK10Algorithms11VelocityEKF2_FERKN3Mat8V_VectorILt3EEEf+0x16c>
 80132e2:	ee67 8a87 	vmul.f32	s17, s15, s14
 80132e6:	68bb      	ldr	r3, [r7, #8]
 80132e8:	3304      	adds	r3, #4
 80132ea:	2103      	movs	r1, #3
 80132ec:	4618      	mov	r0, r3
 80132ee:	f7fa fa4c 	bl	800d78a <_ZNK3Mat8V_VectorILt6EEclEt>
 80132f2:	eef0 7a40 	vmov.f32	s15, s0
 80132f6:	eeb0 0a67 	vmov.f32	s0, s15
 80132fa:	f7ff fbcb 	bl	8012a94 <_ZSt3cosf>
 80132fe:	eeb0 8a40 	vmov.f32	s16, s0
 8013302:	68bb      	ldr	r3, [r7, #8]
 8013304:	3304      	adds	r3, #4
 8013306:	2103      	movs	r1, #3
 8013308:	4618      	mov	r0, r3
 801330a:	f7fa fa3e 	bl	800d78a <_ZNK3Mat8V_VectorILt6EEclEt>
 801330e:	eef0 7a40 	vmov.f32	s15, s0
 8013312:	eeb0 0a67 	vmov.f32	s0, s15
 8013316:	f7ff fbbd 	bl	8012a94 <_ZSt3cosf>
 801331a:	eef0 7a40 	vmov.f32	s15, s0
 801331e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8013322:	2203      	movs	r2, #3
 8013324:	2104      	movs	r1, #4
 8013326:	68f8      	ldr	r0, [r7, #12]
 8013328:	f7fa fae8 	bl	800d8fc <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 801332c:	4603      	mov	r3, r0
 801332e:	eec8 7a88 	vdiv.f32	s15, s17, s16
 8013332:	edc3 7a00 	vstr	s15, [r3]
	result(5, 2) = dt;
 8013336:	2202      	movs	r2, #2
 8013338:	2105      	movs	r1, #5
 801333a:	68f8      	ldr	r0, [r7, #12]
 801333c:	f7fa fade 	bl	800d8fc <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 8013340:	4602      	mov	r2, r0
 8013342:	69fb      	ldr	r3, [r7, #28]
 8013344:	6013      	str	r3, [r2, #0]
	return result;
 8013346:	bf00      	nop
}
 8013348:	68f8      	ldr	r0, [r7, #12]
 801334a:	3720      	adds	r7, #32
 801334c:	46bd      	mov	sp, r7
 801334e:	ecbd 8b02 	vpop	{d8}
 8013352:	bd80      	pop	{r7, pc}
 8013354:	3428892d 	.word	0x3428892d

08013358 <_ZNK10Algorithms11VelocityEKF2_QERKN3Mat8V_VectorILt3EEERKNS1_6MatrixILt3ELt3EEEf>:

VelocityEKF::StateCovarianceMatrix VelocityEKF::_Q(const ControlVec& controlVec, const ControlCovarianceMatrix& controlCov, float time) const
{
 8013358:	b580      	push	{r7, lr}
 801335a:	ed2d 8b02 	vpush	{d8}
 801335e:	b0c0      	sub	sp, #256	; 0x100
 8013360:	af00      	add	r7, sp, #0
 8013362:	6178      	str	r0, [r7, #20]
 8013364:	6139      	str	r1, [r7, #16]
 8013366:	60fa      	str	r2, [r7, #12]
 8013368:	60bb      	str	r3, [r7, #8]
 801336a:	ed87 0a01 	vstr	s0, [r7, #4]
	const float dt = time - _time;
 801336e:	693b      	ldr	r3, [r7, #16]
 8013370:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 8013374:	ed97 7a01 	vldr	s14, [r7, #4]
 8013378:	ee77 7a67 	vsub.f32	s15, s14, s15
 801337c:	edc7 7a3f 	vstr	s15, [r7, #252]	; 0xfc
	const float dt2 = dt*dt;
 8013380:	edd7 7a3f 	vldr	s15, [r7, #252]	; 0xfc
 8013384:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013388:	edc7 7a3e 	vstr	s15, [r7, #248]	; 0xf8
	const float dt2_2 = dt2 * 0.5f;
 801338c:	edd7 7a3e 	vldr	s15, [r7, #248]	; 0xf8
 8013390:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8013394:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013398:	edc7 7a3d 	vstr	s15, [r7, #244]	; 0xf4
	Matrix<VelocityEKF_stateLen, VelocityEKF_controlLen> W{0.0f};
 801339c:	f107 031c 	add.w	r3, r7, #28
 80133a0:	ed9f 0a42 	vldr	s0, [pc, #264]	; 80134ac <_ZNK10Algorithms11VelocityEKF2_QERKN3Mat8V_VectorILt3EEERKNS1_6MatrixILt3ELt3EEEf+0x154>
 80133a4:	4618      	mov	r0, r3
 80133a6:	f000 fbb4 	bl	8013b12 <_ZN3Mat6MatrixILt6ELt3EEC1Ef>
	W(0,0) = dt; W(1,1) = dt; W(2,2) = dt;
 80133aa:	f107 031c 	add.w	r3, r7, #28
 80133ae:	2200      	movs	r2, #0
 80133b0:	2100      	movs	r1, #0
 80133b2:	4618      	mov	r0, r3
 80133b4:	f000 fbca 	bl	8013b4c <_ZN3Mat6MatrixILt6ELt3EEclEtt>
 80133b8:	4602      	mov	r2, r0
 80133ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80133be:	6013      	str	r3, [r2, #0]
 80133c0:	f107 031c 	add.w	r3, r7, #28
 80133c4:	2201      	movs	r2, #1
 80133c6:	2101      	movs	r1, #1
 80133c8:	4618      	mov	r0, r3
 80133ca:	f000 fbbf 	bl	8013b4c <_ZN3Mat6MatrixILt6ELt3EEclEtt>
 80133ce:	4602      	mov	r2, r0
 80133d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80133d4:	6013      	str	r3, [r2, #0]
 80133d6:	f107 031c 	add.w	r3, r7, #28
 80133da:	2202      	movs	r2, #2
 80133dc:	2102      	movs	r1, #2
 80133de:	4618      	mov	r0, r3
 80133e0:	f000 fbb4 	bl	8013b4c <_ZN3Mat6MatrixILt6ELt3EEclEtt>
 80133e4:	4602      	mov	r2, r0
 80133e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80133ea:	6013      	str	r3, [r2, #0]
	W(3,1) = dt2_2*_ER;
 80133ec:	f107 031c 	add.w	r3, r7, #28
 80133f0:	2201      	movs	r2, #1
 80133f2:	2103      	movs	r1, #3
 80133f4:	4618      	mov	r0, r3
 80133f6:	f000 fba9 	bl	8013b4c <_ZN3Mat6MatrixILt6ELt3EEclEtt>
 80133fa:	4603      	mov	r3, r0
 80133fc:	edd7 7a3d 	vldr	s15, [r7, #244]	; 0xf4
 8013400:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80134b0 <_ZNK10Algorithms11VelocityEKF2_QERKN3Mat8V_VectorILt3EEERKNS1_6MatrixILt3ELt3EEEf+0x158>
 8013404:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013408:	edc3 7a00 	vstr	s15, [r3]
	W(4,0) = W(3,1) / cos(_state(3));
 801340c:	f107 031c 	add.w	r3, r7, #28
 8013410:	2201      	movs	r2, #1
 8013412:	2103      	movs	r1, #3
 8013414:	4618      	mov	r0, r3
 8013416:	f000 fb99 	bl	8013b4c <_ZN3Mat6MatrixILt6ELt3EEclEtt>
 801341a:	4603      	mov	r3, r0
 801341c:	ed93 8a00 	vldr	s16, [r3]
 8013420:	693b      	ldr	r3, [r7, #16]
 8013422:	3304      	adds	r3, #4
 8013424:	2103      	movs	r1, #3
 8013426:	4618      	mov	r0, r3
 8013428:	f7fa f9af 	bl	800d78a <_ZNK3Mat8V_VectorILt6EEclEt>
 801342c:	eef0 7a40 	vmov.f32	s15, s0
 8013430:	eeb0 0a67 	vmov.f32	s0, s15
 8013434:	f7ff fb2e 	bl	8012a94 <_ZSt3cosf>
 8013438:	eef0 8a40 	vmov.f32	s17, s0
 801343c:	f107 031c 	add.w	r3, r7, #28
 8013440:	2200      	movs	r2, #0
 8013442:	2104      	movs	r1, #4
 8013444:	4618      	mov	r0, r3
 8013446:	f000 fb81 	bl	8013b4c <_ZN3Mat6MatrixILt6ELt3EEclEtt>
 801344a:	4603      	mov	r3, r0
 801344c:	eec8 7a28 	vdiv.f32	s15, s16, s17
 8013450:	edc3 7a00 	vstr	s15, [r3]
	W(5,2) = dt2_2;
 8013454:	f107 031c 	add.w	r3, r7, #28
 8013458:	2202      	movs	r2, #2
 801345a:	2105      	movs	r1, #5
 801345c:	4618      	mov	r0, r3
 801345e:	f000 fb75 	bl	8013b4c <_ZN3Mat6MatrixILt6ELt3EEclEtt>
 8013462:	4602      	mov	r2, r0
 8013464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013468:	6013      	str	r3, [r2, #0]
//	W(0,0) = sqrt(dt); W(1,1) = sqrt(dt); W(2,2) = sqrt(dt);
//	W(3,1) = sqrt(dt2_2*_ER);
//	W(4,0) = W(3,1) / sqrt(cos(_state(3)));
//	W(5,2) = sqrt(dt2_2);
	auto result = W*controlCov*W.Transposed();
 801346a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801346e:	f107 011c 	add.w	r1, r7, #28
 8013472:	68ba      	ldr	r2, [r7, #8]
 8013474:	4618      	mov	r0, r3
 8013476:	f000 fb04 	bl	8013a82 <_ZNK3Mat6MatrixILt6ELt3EEmlILt3EEENS0_ILt6EXT_EEERKNS0_ILt3EXT_EEE>
 801347a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801347e:	f107 021c 	add.w	r2, r7, #28
 8013482:	4611      	mov	r1, r2
 8013484:	4618      	mov	r0, r3
 8013486:	f000 fb7a 	bl	8013b7e <_ZNK3Mat6MatrixILt6ELt3EE10TransposedEv>
 801348a:	697b      	ldr	r3, [r7, #20]
 801348c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8013490:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8013494:	4618      	mov	r0, r3
 8013496:	f000 fb1a 	bl	8013ace <_ZNK3Mat6MatrixILt6ELt3EEmlILt6EEENS0_ILt6EXT_EEERKNS0_ILt3EXT_EEE>
	//LOG("");
	return result;
 801349a:	bf00      	nop
}
 801349c:	6978      	ldr	r0, [r7, #20]
 801349e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80134a2:	46bd      	mov	sp, r7
 80134a4:	ecbd 8b02 	vpop	{d8}
 80134a8:	bd80      	pop	{r7, pc}
 80134aa:	bf00      	nop
 80134ac:	00000000 	.word	0x00000000
 80134b0:	3428892d 	.word	0x3428892d

080134b4 <_ZNK10Algorithms11VelocityEKF2_hEv>:

VelocityEKF::MeassurementVec VelocityEKF::_h() const
{
 80134b4:	b4b0      	push	{r4, r5, r7}
 80134b6:	b083      	sub	sp, #12
 80134b8:	af00      	add	r7, sp, #0
 80134ba:	6078      	str	r0, [r7, #4]
 80134bc:	6039      	str	r1, [r7, #0]
	return _state;
 80134be:	687a      	ldr	r2, [r7, #4]
 80134c0:	683b      	ldr	r3, [r7, #0]
 80134c2:	4615      	mov	r5, r2
 80134c4:	1d1c      	adds	r4, r3, #4
 80134c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80134c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80134ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80134ce:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80134d2:	6878      	ldr	r0, [r7, #4]
 80134d4:	370c      	adds	r7, #12
 80134d6:	46bd      	mov	sp, r7
 80134d8:	bcb0      	pop	{r4, r5, r7}
 80134da:	4770      	bx	lr

080134dc <_ZNK10Algorithms11VelocityEKF2_HEv>:

Matrix<VelocityEKF_meassurementLen, VelocityEKF_stateLen> VelocityEKF::_H() const
{
 80134dc:	b580      	push	{r7, lr}
 80134de:	b082      	sub	sp, #8
 80134e0:	af00      	add	r7, sp, #0
 80134e2:	6078      	str	r0, [r7, #4]
 80134e4:	6039      	str	r1, [r7, #0]
	return Eye<VelocityEKF_meassurementLen>(1.0f);
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80134ec:	4618      	mov	r0, r3
 80134ee:	f7fa f823 	bl	800d538 <_ZN3Mat3EyeILt6EEENS_6MatrixIXT_EXT_EEEf>
 80134f2:	bf00      	nop
}
 80134f4:	6878      	ldr	r0, [r7, #4]
 80134f6:	3708      	adds	r7, #8
 80134f8:	46bd      	mov	sp, r7
 80134fa:	bd80      	pop	{r7, pc}

080134fc <_ZNK10Algorithms11VelocityEKF13_InvertMatrixERKN3Mat6MatrixILt6ELt6EEE>:

VelocityEKF::MeasurementCovarianceMatrix VelocityEKF::_InvertMatrix(const MeasurementCovarianceMatrix& matrix) const
{
 80134fc:	b580      	push	{r7, lr}
 80134fe:	b084      	sub	sp, #16
 8013500:	af00      	add	r7, sp, #0
 8013502:	60f8      	str	r0, [r7, #12]
 8013504:	60b9      	str	r1, [r7, #8]
 8013506:	607a      	str	r2, [r7, #4]
	auto result = matrix;
 8013508:	68fa      	ldr	r2, [r7, #12]
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	4610      	mov	r0, r2
 801350e:	4619      	mov	r1, r3
 8013510:	2390      	movs	r3, #144	; 0x90
 8013512:	461a      	mov	r2, r3
 8013514:	f006 fe35 	bl	801a182 <memcpy>
	return result;
 8013518:	bf00      	nop
}
 801351a:	68f8      	ldr	r0, [r7, #12]
 801351c:	3710      	adds	r7, #16
 801351e:	46bd      	mov	sp, r7
 8013520:	bd80      	pop	{r7, pc}
	...

08013524 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE>:

Matrix<3,3> VelocityEKF::_Invert3x3Matrix(const Matrix<3,3>& matrix) const
{
 8013524:	b5b0      	push	{r4, r5, r7, lr}
 8013526:	b090      	sub	sp, #64	; 0x40
 8013528:	af00      	add	r7, sp, #0
 801352a:	60f8      	str	r0, [r7, #12]
 801352c:	60b9      	str	r1, [r7, #8]
 801352e:	607a      	str	r2, [r7, #4]
	static float a_1_1, a_1_2, a_1_3, a_2_1, a_2_2, a_2_3, a_3_1, a_3_2, a_3_3;
	a_1_1 = matrix(0,0); a_1_2 = matrix(0,1); a_1_3 = matrix(0,2);
 8013530:	2200      	movs	r2, #0
 8013532:	2100      	movs	r1, #0
 8013534:	6878      	ldr	r0, [r7, #4]
 8013536:	f7fa fc62 	bl	800ddfe <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 801353a:	eef0 7a40 	vmov.f32	s15, s0
 801353e:	4bd4      	ldr	r3, [pc, #848]	; (8013890 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 8013540:	edc3 7a00 	vstr	s15, [r3]
 8013544:	2201      	movs	r2, #1
 8013546:	2100      	movs	r1, #0
 8013548:	6878      	ldr	r0, [r7, #4]
 801354a:	f7fa fc58 	bl	800ddfe <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 801354e:	eef0 7a40 	vmov.f32	s15, s0
 8013552:	4bd0      	ldr	r3, [pc, #832]	; (8013894 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 8013554:	edc3 7a00 	vstr	s15, [r3]
 8013558:	2202      	movs	r2, #2
 801355a:	2100      	movs	r1, #0
 801355c:	6878      	ldr	r0, [r7, #4]
 801355e:	f7fa fc4e 	bl	800ddfe <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 8013562:	eef0 7a40 	vmov.f32	s15, s0
 8013566:	4bcc      	ldr	r3, [pc, #816]	; (8013898 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 8013568:	edc3 7a00 	vstr	s15, [r3]
	a_2_1 = matrix(1,0); a_2_2 = matrix(1,1); a_2_3 = matrix(1,2);
 801356c:	2200      	movs	r2, #0
 801356e:	2101      	movs	r1, #1
 8013570:	6878      	ldr	r0, [r7, #4]
 8013572:	f7fa fc44 	bl	800ddfe <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 8013576:	eef0 7a40 	vmov.f32	s15, s0
 801357a:	4bc8      	ldr	r3, [pc, #800]	; (801389c <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 801357c:	edc3 7a00 	vstr	s15, [r3]
 8013580:	2201      	movs	r2, #1
 8013582:	2101      	movs	r1, #1
 8013584:	6878      	ldr	r0, [r7, #4]
 8013586:	f7fa fc3a 	bl	800ddfe <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 801358a:	eef0 7a40 	vmov.f32	s15, s0
 801358e:	4bc4      	ldr	r3, [pc, #784]	; (80138a0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 8013590:	edc3 7a00 	vstr	s15, [r3]
 8013594:	2202      	movs	r2, #2
 8013596:	2101      	movs	r1, #1
 8013598:	6878      	ldr	r0, [r7, #4]
 801359a:	f7fa fc30 	bl	800ddfe <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 801359e:	eef0 7a40 	vmov.f32	s15, s0
 80135a2:	4bc0      	ldr	r3, [pc, #768]	; (80138a4 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x380>)
 80135a4:	edc3 7a00 	vstr	s15, [r3]
	a_3_1 = matrix(2,0); a_3_2 = matrix(2,1); a_3_3 = matrix(2,2);
 80135a8:	2200      	movs	r2, #0
 80135aa:	2102      	movs	r1, #2
 80135ac:	6878      	ldr	r0, [r7, #4]
 80135ae:	f7fa fc26 	bl	800ddfe <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 80135b2:	eef0 7a40 	vmov.f32	s15, s0
 80135b6:	4bbc      	ldr	r3, [pc, #752]	; (80138a8 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x384>)
 80135b8:	edc3 7a00 	vstr	s15, [r3]
 80135bc:	2201      	movs	r2, #1
 80135be:	2102      	movs	r1, #2
 80135c0:	6878      	ldr	r0, [r7, #4]
 80135c2:	f7fa fc1c 	bl	800ddfe <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 80135c6:	eef0 7a40 	vmov.f32	s15, s0
 80135ca:	4bb8      	ldr	r3, [pc, #736]	; (80138ac <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x388>)
 80135cc:	edc3 7a00 	vstr	s15, [r3]
 80135d0:	2202      	movs	r2, #2
 80135d2:	2102      	movs	r1, #2
 80135d4:	6878      	ldr	r0, [r7, #4]
 80135d6:	f7fa fc12 	bl	800ddfe <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 80135da:	eef0 7a40 	vmov.f32	s15, s0
 80135de:	4bb4      	ldr	r3, [pc, #720]	; (80138b0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x38c>)
 80135e0:	edc3 7a00 	vstr	s15, [r3]
	float det = (a_1_1*a_2_2*a_3_3 - a_1_1*a_2_3*a_3_2 - a_1_2*a_2_1*a_3_3 + a_1_2*a_2_3*a_3_1 + a_1_3*a_2_1*a_3_2 - a_1_3*a_2_2*a_3_1);
 80135e4:	4baa      	ldr	r3, [pc, #680]	; (8013890 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 80135e6:	ed93 7a00 	vldr	s14, [r3]
 80135ea:	4bad      	ldr	r3, [pc, #692]	; (80138a0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 80135ec:	edd3 7a00 	vldr	s15, [r3]
 80135f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80135f4:	4bae      	ldr	r3, [pc, #696]	; (80138b0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x38c>)
 80135f6:	edd3 7a00 	vldr	s15, [r3]
 80135fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80135fe:	4ba4      	ldr	r3, [pc, #656]	; (8013890 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 8013600:	edd3 6a00 	vldr	s13, [r3]
 8013604:	4ba7      	ldr	r3, [pc, #668]	; (80138a4 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x380>)
 8013606:	edd3 7a00 	vldr	s15, [r3]
 801360a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801360e:	4ba7      	ldr	r3, [pc, #668]	; (80138ac <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x388>)
 8013610:	edd3 7a00 	vldr	s15, [r3]
 8013614:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013618:	ee37 7a67 	vsub.f32	s14, s14, s15
 801361c:	4b9d      	ldr	r3, [pc, #628]	; (8013894 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 801361e:	edd3 6a00 	vldr	s13, [r3]
 8013622:	4b9e      	ldr	r3, [pc, #632]	; (801389c <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 8013624:	edd3 7a00 	vldr	s15, [r3]
 8013628:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801362c:	4ba0      	ldr	r3, [pc, #640]	; (80138b0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x38c>)
 801362e:	edd3 7a00 	vldr	s15, [r3]
 8013632:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013636:	ee37 7a67 	vsub.f32	s14, s14, s15
 801363a:	4b96      	ldr	r3, [pc, #600]	; (8013894 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 801363c:	edd3 6a00 	vldr	s13, [r3]
 8013640:	4b98      	ldr	r3, [pc, #608]	; (80138a4 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x380>)
 8013642:	edd3 7a00 	vldr	s15, [r3]
 8013646:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801364a:	4b97      	ldr	r3, [pc, #604]	; (80138a8 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x384>)
 801364c:	edd3 7a00 	vldr	s15, [r3]
 8013650:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013654:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013658:	4b8f      	ldr	r3, [pc, #572]	; (8013898 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 801365a:	edd3 6a00 	vldr	s13, [r3]
 801365e:	4b8f      	ldr	r3, [pc, #572]	; (801389c <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 8013660:	edd3 7a00 	vldr	s15, [r3]
 8013664:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8013668:	4b90      	ldr	r3, [pc, #576]	; (80138ac <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x388>)
 801366a:	edd3 7a00 	vldr	s15, [r3]
 801366e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013672:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013676:	4b88      	ldr	r3, [pc, #544]	; (8013898 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 8013678:	edd3 6a00 	vldr	s13, [r3]
 801367c:	4b88      	ldr	r3, [pc, #544]	; (80138a0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 801367e:	edd3 7a00 	vldr	s15, [r3]
 8013682:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8013686:	4b88      	ldr	r3, [pc, #544]	; (80138a8 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x384>)
 8013688:	edd3 7a00 	vldr	s15, [r3]
 801368c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013690:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013694:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float det1 = 1.0f / det;
 8013698:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801369c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80136a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80136a4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	static Matrix<3, 3> result =
	{{
		(a_2_2*a_3_3 - a_2_3*a_3_2)*det1, -(a_1_2*a_3_3 - a_1_3*a_3_2)*det1,  (a_1_2*a_2_3 - a_1_3*a_2_2)*det1,
		-(a_2_1*a_3_3 - a_2_3*a_3_1)*det1,  (a_1_1*a_3_3 - a_1_3*a_3_1)*det1, -(a_1_1*a_2_3 - a_1_3*a_2_1)*det1,
		(a_2_1*a_3_2 - a_2_2*a_3_1)*det1, -(a_1_1*a_3_2 - a_1_2*a_3_1)*det1,  (a_1_1*a_2_2 - a_1_2*a_2_1)*det1,
	}};
 80136a8:	4b82      	ldr	r3, [pc, #520]	; (80138b4 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x390>)
 80136aa:	681b      	ldr	r3, [r3, #0]
 80136ac:	f3bf 8f5b 	dmb	ish
 80136b0:	f003 0301 	and.w	r3, r3, #1
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	bf0c      	ite	eq
 80136b8:	2301      	moveq	r3, #1
 80136ba:	2300      	movne	r3, #0
 80136bc:	b2db      	uxtb	r3, r3
 80136be:	2b00      	cmp	r3, #0
 80136c0:	f000 810b 	beq.w	80138da <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x3b6>
 80136c4:	487b      	ldr	r0, [pc, #492]	; (80138b4 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x390>)
 80136c6:	f005 fdab 	bl	8019220 <__cxa_guard_acquire>
 80136ca:	4603      	mov	r3, r0
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	bf14      	ite	ne
 80136d0:	2301      	movne	r3, #1
 80136d2:	2300      	moveq	r3, #0
 80136d4:	b2db      	uxtb	r3, r3
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	f000 80ff 	beq.w	80138da <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x3b6>
		(a_2_2*a_3_3 - a_2_3*a_3_2)*det1, -(a_1_2*a_3_3 - a_1_3*a_3_2)*det1,  (a_1_2*a_2_3 - a_1_3*a_2_2)*det1,
 80136dc:	4b70      	ldr	r3, [pc, #448]	; (80138a0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 80136de:	ed93 7a00 	vldr	s14, [r3]
 80136e2:	4b73      	ldr	r3, [pc, #460]	; (80138b0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x38c>)
 80136e4:	edd3 7a00 	vldr	s15, [r3]
 80136e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80136ec:	4b6d      	ldr	r3, [pc, #436]	; (80138a4 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x380>)
 80136ee:	edd3 6a00 	vldr	s13, [r3]
 80136f2:	4b6e      	ldr	r3, [pc, #440]	; (80138ac <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x388>)
 80136f4:	edd3 7a00 	vldr	s15, [r3]
 80136f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80136fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013700:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8013704:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 8013708:	edc7 7a05 	vstr	s15, [r7, #20]
		(a_2_2*a_3_3 - a_2_3*a_3_2)*det1, -(a_1_2*a_3_3 - a_1_3*a_3_2)*det1,  (a_1_2*a_2_3 - a_1_3*a_2_2)*det1,
 801370c:	4b61      	ldr	r3, [pc, #388]	; (8013894 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 801370e:	ed93 7a00 	vldr	s14, [r3]
 8013712:	4b67      	ldr	r3, [pc, #412]	; (80138b0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x38c>)
 8013714:	edd3 7a00 	vldr	s15, [r3]
 8013718:	ee27 7a27 	vmul.f32	s14, s14, s15
 801371c:	4b5e      	ldr	r3, [pc, #376]	; (8013898 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 801371e:	edd3 6a00 	vldr	s13, [r3]
 8013722:	4b62      	ldr	r3, [pc, #392]	; (80138ac <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x388>)
 8013724:	edd3 7a00 	vldr	s15, [r3]
 8013728:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801372c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013730:	eeb1 7a67 	vneg.f32	s14, s15
 8013734:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8013738:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 801373c:	edc7 7a06 	vstr	s15, [r7, #24]
		(a_2_2*a_3_3 - a_2_3*a_3_2)*det1, -(a_1_2*a_3_3 - a_1_3*a_3_2)*det1,  (a_1_2*a_2_3 - a_1_3*a_2_2)*det1,
 8013740:	4b54      	ldr	r3, [pc, #336]	; (8013894 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 8013742:	ed93 7a00 	vldr	s14, [r3]
 8013746:	4b57      	ldr	r3, [pc, #348]	; (80138a4 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x380>)
 8013748:	edd3 7a00 	vldr	s15, [r3]
 801374c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013750:	4b51      	ldr	r3, [pc, #324]	; (8013898 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 8013752:	edd3 6a00 	vldr	s13, [r3]
 8013756:	4b52      	ldr	r3, [pc, #328]	; (80138a0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 8013758:	edd3 7a00 	vldr	s15, [r3]
 801375c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013760:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013764:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8013768:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 801376c:	edc7 7a07 	vstr	s15, [r7, #28]
		-(a_2_1*a_3_3 - a_2_3*a_3_1)*det1,  (a_1_1*a_3_3 - a_1_3*a_3_1)*det1, -(a_1_1*a_2_3 - a_1_3*a_2_1)*det1,
 8013770:	4b4a      	ldr	r3, [pc, #296]	; (801389c <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 8013772:	ed93 7a00 	vldr	s14, [r3]
 8013776:	4b4e      	ldr	r3, [pc, #312]	; (80138b0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x38c>)
 8013778:	edd3 7a00 	vldr	s15, [r3]
 801377c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013780:	4b48      	ldr	r3, [pc, #288]	; (80138a4 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x380>)
 8013782:	edd3 6a00 	vldr	s13, [r3]
 8013786:	4b48      	ldr	r3, [pc, #288]	; (80138a8 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x384>)
 8013788:	edd3 7a00 	vldr	s15, [r3]
 801378c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013790:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013794:	eeb1 7a67 	vneg.f32	s14, s15
 8013798:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801379c:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 80137a0:	edc7 7a08 	vstr	s15, [r7, #32]
		-(a_2_1*a_3_3 - a_2_3*a_3_1)*det1,  (a_1_1*a_3_3 - a_1_3*a_3_1)*det1, -(a_1_1*a_2_3 - a_1_3*a_2_1)*det1,
 80137a4:	4b3a      	ldr	r3, [pc, #232]	; (8013890 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 80137a6:	ed93 7a00 	vldr	s14, [r3]
 80137aa:	4b41      	ldr	r3, [pc, #260]	; (80138b0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x38c>)
 80137ac:	edd3 7a00 	vldr	s15, [r3]
 80137b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80137b4:	4b38      	ldr	r3, [pc, #224]	; (8013898 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 80137b6:	edd3 6a00 	vldr	s13, [r3]
 80137ba:	4b3b      	ldr	r3, [pc, #236]	; (80138a8 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x384>)
 80137bc:	edd3 7a00 	vldr	s15, [r3]
 80137c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80137c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80137c8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80137cc:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 80137d0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		-(a_2_1*a_3_3 - a_2_3*a_3_1)*det1,  (a_1_1*a_3_3 - a_1_3*a_3_1)*det1, -(a_1_1*a_2_3 - a_1_3*a_2_1)*det1,
 80137d4:	4b2e      	ldr	r3, [pc, #184]	; (8013890 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 80137d6:	ed93 7a00 	vldr	s14, [r3]
 80137da:	4b32      	ldr	r3, [pc, #200]	; (80138a4 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x380>)
 80137dc:	edd3 7a00 	vldr	s15, [r3]
 80137e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80137e4:	4b2c      	ldr	r3, [pc, #176]	; (8013898 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 80137e6:	edd3 6a00 	vldr	s13, [r3]
 80137ea:	4b2c      	ldr	r3, [pc, #176]	; (801389c <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 80137ec:	edd3 7a00 	vldr	s15, [r3]
 80137f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80137f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80137f8:	eeb1 7a67 	vneg.f32	s14, s15
 80137fc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8013800:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 8013804:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		(a_2_1*a_3_2 - a_2_2*a_3_1)*det1, -(a_1_1*a_3_2 - a_1_2*a_3_1)*det1,  (a_1_1*a_2_2 - a_1_2*a_2_1)*det1,
 8013808:	4b24      	ldr	r3, [pc, #144]	; (801389c <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 801380a:	ed93 7a00 	vldr	s14, [r3]
 801380e:	4b27      	ldr	r3, [pc, #156]	; (80138ac <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x388>)
 8013810:	edd3 7a00 	vldr	s15, [r3]
 8013814:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013818:	4b21      	ldr	r3, [pc, #132]	; (80138a0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 801381a:	edd3 6a00 	vldr	s13, [r3]
 801381e:	4b22      	ldr	r3, [pc, #136]	; (80138a8 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x384>)
 8013820:	edd3 7a00 	vldr	s15, [r3]
 8013824:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013828:	ee37 7a67 	vsub.f32	s14, s14, s15
 801382c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8013830:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 8013834:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		(a_2_1*a_3_2 - a_2_2*a_3_1)*det1, -(a_1_1*a_3_2 - a_1_2*a_3_1)*det1,  (a_1_1*a_2_2 - a_1_2*a_2_1)*det1,
 8013838:	4b15      	ldr	r3, [pc, #84]	; (8013890 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 801383a:	ed93 7a00 	vldr	s14, [r3]
 801383e:	4b1b      	ldr	r3, [pc, #108]	; (80138ac <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x388>)
 8013840:	edd3 7a00 	vldr	s15, [r3]
 8013844:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013848:	4b12      	ldr	r3, [pc, #72]	; (8013894 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 801384a:	edd3 6a00 	vldr	s13, [r3]
 801384e:	4b16      	ldr	r3, [pc, #88]	; (80138a8 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x384>)
 8013850:	edd3 7a00 	vldr	s15, [r3]
 8013854:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013858:	ee77 7a67 	vsub.f32	s15, s14, s15
 801385c:	eeb1 7a67 	vneg.f32	s14, s15
 8013860:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8013864:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 8013868:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		(a_2_1*a_3_2 - a_2_2*a_3_1)*det1, -(a_1_1*a_3_2 - a_1_2*a_3_1)*det1,  (a_1_1*a_2_2 - a_1_2*a_2_1)*det1,
 801386c:	4b08      	ldr	r3, [pc, #32]	; (8013890 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 801386e:	ed93 7a00 	vldr	s14, [r3]
 8013872:	4b0b      	ldr	r3, [pc, #44]	; (80138a0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 8013874:	edd3 7a00 	vldr	s15, [r3]
 8013878:	ee27 7a27 	vmul.f32	s14, s14, s15
 801387c:	4b05      	ldr	r3, [pc, #20]	; (8013894 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 801387e:	edd3 6a00 	vldr	s13, [r3]
 8013882:	4b06      	ldr	r3, [pc, #24]	; (801389c <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 8013884:	edd3 7a00 	vldr	s15, [r3]
 8013888:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801388c:	e014      	b.n	80138b8 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x394>
 801388e:	bf00      	nop
 8013890:	24009520 	.word	0x24009520
 8013894:	24009524 	.word	0x24009524
 8013898:	24009528 	.word	0x24009528
 801389c:	2400952c 	.word	0x2400952c
 80138a0:	24009530 	.word	0x24009530
 80138a4:	24009534 	.word	0x24009534
 80138a8:	24009538 	.word	0x24009538
 80138ac:	2400953c 	.word	0x2400953c
 80138b0:	24009540 	.word	0x24009540
 80138b4:	24009568 	.word	0x24009568
 80138b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80138bc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80138c0:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 80138c4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 80138c8:	f107 0314 	add.w	r3, r7, #20
 80138cc:	4619      	mov	r1, r3
 80138ce:	480a      	ldr	r0, [pc, #40]	; (80138f8 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x3d4>)
 80138d0:	f7fb fb58 	bl	800ef84 <_ZN3Mat6MatrixILt3ELt3EEC1ERKSt5arrayIfLj9EE>
 80138d4:	4809      	ldr	r0, [pc, #36]	; (80138fc <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x3d8>)
 80138d6:	f005 fcaf 	bl	8019238 <__cxa_guard_release>
	return result;
 80138da:	68fb      	ldr	r3, [r7, #12]
 80138dc:	4a06      	ldr	r2, [pc, #24]	; (80138f8 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x3d4>)
 80138de:	461c      	mov	r4, r3
 80138e0:	4615      	mov	r5, r2
 80138e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80138e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80138e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80138e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80138ea:	682b      	ldr	r3, [r5, #0]
 80138ec:	6023      	str	r3, [r4, #0]
}
 80138ee:	68f8      	ldr	r0, [r7, #12]
 80138f0:	3740      	adds	r7, #64	; 0x40
 80138f2:	46bd      	mov	sp, r7
 80138f4:	bdb0      	pop	{r4, r5, r7, pc}
 80138f6:	bf00      	nop
 80138f8:	24009544 	.word	0x24009544
 80138fc:	24009568 	.word	0x24009568

08013900 <_ZN3Mat8V_VectorILt6EEclEt>:
	inline float& operator()(u_short index) {return _values[index];}
 8013900:	b580      	push	{r7, lr}
 8013902:	b082      	sub	sp, #8
 8013904:	af00      	add	r7, sp, #0
 8013906:	6078      	str	r0, [r7, #4]
 8013908:	460b      	mov	r3, r1
 801390a:	807b      	strh	r3, [r7, #2]
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	887a      	ldrh	r2, [r7, #2]
 8013910:	4611      	mov	r1, r2
 8013912:	4618      	mov	r0, r3
 8013914:	f7fb f976 	bl	800ec04 <_ZNSt5arrayIfLj6EEixEj>
 8013918:	4603      	mov	r3, r0
 801391a:	4618      	mov	r0, r3
 801391c:	3708      	adds	r7, #8
 801391e:	46bd      	mov	sp, r7
 8013920:	bd80      	pop	{r7, pc}

08013922 <_ZZN3Mat6MatrixILt3ELt6EEC4EfENKUlRfE_clES2_>:
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 8013922:	b480      	push	{r7}
 8013924:	b083      	sub	sp, #12
 8013926:	af00      	add	r7, sp, #0
 8013928:	6078      	str	r0, [r7, #4]
 801392a:	6039      	str	r1, [r7, #0]
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	681a      	ldr	r2, [r3, #0]
 8013930:	683b      	ldr	r3, [r7, #0]
 8013932:	601a      	str	r2, [r3, #0]
 8013934:	bf00      	nop
 8013936:	370c      	adds	r7, #12
 8013938:	46bd      	mov	sp, r7
 801393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801393e:	4770      	bx	lr

08013940 <_ZN3Mat6MatrixILt3ELt6EEC1Ef>:
Matrix<heigth, width>::Matrix(float val)
 8013940:	b590      	push	{r4, r7, lr}
 8013942:	b083      	sub	sp, #12
 8013944:	af00      	add	r7, sp, #0
 8013946:	6078      	str	r0, [r7, #4]
 8013948:	ed87 0a00 	vstr	s0, [r7]
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	4618      	mov	r0, r3
 8013950:	f000 f945 	bl	8013bde <_ZNSt5arrayIfLj18EE5beginEv>
 8013954:	4604      	mov	r4, r0
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	4618      	mov	r0, r3
 801395a:	f000 f94c 	bl	8013bf6 <_ZNSt5arrayIfLj18EE3endEv>
 801395e:	4603      	mov	r3, r0
 8013960:	edd7 7a00 	vldr	s15, [r7]
 8013964:	eeb0 0a67 	vmov.f32	s0, s15
 8013968:	4619      	mov	r1, r3
 801396a:	4620      	mov	r0, r4
 801396c:	f000 f950 	bl	8013c10 <_ZSt8for_eachIPfZN3Mat6MatrixILt3ELt6EEC4EfEUlRfE_ET0_T_S7_S6_>
}
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	4618      	mov	r0, r3
 8013974:	370c      	adds	r7, #12
 8013976:	46bd      	mov	sp, r7
 8013978:	bd90      	pop	{r4, r7, pc}

0801397a <_ZN3Mat6MatrixILt3ELt6EEclEtt>:
float& Matrix<heigth, width>::operator()(u_short row, u_short col)
 801397a:	b580      	push	{r7, lr}
 801397c:	b084      	sub	sp, #16
 801397e:	af00      	add	r7, sp, #0
 8013980:	6078      	str	r0, [r7, #4]
 8013982:	460b      	mov	r3, r1
 8013984:	807b      	strh	r3, [r7, #2]
 8013986:	4613      	mov	r3, r2
 8013988:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 801398a:	887a      	ldrh	r2, [r7, #2]
 801398c:	4613      	mov	r3, r2
 801398e:	005b      	lsls	r3, r3, #1
 8013990:	4413      	add	r3, r2
 8013992:	005b      	lsls	r3, r3, #1
 8013994:	461a      	mov	r2, r3
 8013996:	883b      	ldrh	r3, [r7, #0]
 8013998:	4413      	add	r3, r2
 801399a:	60fb      	str	r3, [r7, #12]
	return _values[index];
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	68f9      	ldr	r1, [r7, #12]
 80139a0:	4618      	mov	r0, r3
 80139a2:	f000 f951 	bl	8013c48 <_ZNSt5arrayIfLj18EEixEj>
 80139a6:	4603      	mov	r3, r0
}
 80139a8:	4618      	mov	r0, r3
 80139aa:	3710      	adds	r7, #16
 80139ac:	46bd      	mov	sp, r7
 80139ae:	bd80      	pop	{r7, pc}

080139b0 <_ZNK3Mat6MatrixILt3ELt6EEmlILt6EEENS0_ILt3EXT_EEERKNS0_ILt6EXT_EEE>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 80139b0:	b580      	push	{r7, lr}
 80139b2:	b084      	sub	sp, #16
 80139b4:	af00      	add	r7, sp, #0
 80139b6:	60f8      	str	r0, [r7, #12]
 80139b8:	60b9      	str	r1, [r7, #8]
 80139ba:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 80139bc:	68f8      	ldr	r0, [r7, #12]
 80139be:	f000 f952 	bl	8013c66 <_ZN3Mat6MatrixILt3ELt6EEC1Ev>
	Multiply(other, result);
 80139c2:	68fa      	ldr	r2, [r7, #12]
 80139c4:	6879      	ldr	r1, [r7, #4]
 80139c6:	68b8      	ldr	r0, [r7, #8]
 80139c8:	f000 f958 	bl	8013c7c <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE>
	return result;
 80139cc:	bf00      	nop
}
 80139ce:	68f8      	ldr	r0, [r7, #12]
 80139d0:	3710      	adds	r7, #16
 80139d2:	46bd      	mov	sp, r7
 80139d4:	bd80      	pop	{r7, pc}

080139d6 <_ZNK3Mat6MatrixILt3ELt6EE10TransposedEv>:
Matrix<width, heigth> Matrix<heigth, width>::Transposed() const
 80139d6:	b590      	push	{r4, r7, lr}
 80139d8:	b085      	sub	sp, #20
 80139da:	af00      	add	r7, sp, #0
 80139dc:	6078      	str	r0, [r7, #4]
 80139de:	6039      	str	r1, [r7, #0]
	Matrix<width, heigth> result;
 80139e0:	6878      	ldr	r0, [r7, #4]
 80139e2:	f000 f9ff 	bl	8013de4 <_ZN3Mat6MatrixILt6ELt3EEC1Ev>
	for(u_short r = 0; r < width; ++r)
 80139e6:	2300      	movs	r3, #0
 80139e8:	81fb      	strh	r3, [r7, #14]
 80139ea:	e01c      	b.n	8013a26 <_ZNK3Mat6MatrixILt3ELt6EE10TransposedEv+0x50>
		for(u_short c = 0; c < heigth; ++c)
 80139ec:	2300      	movs	r3, #0
 80139ee:	81bb      	strh	r3, [r7, #12]
 80139f0:	e013      	b.n	8013a1a <_ZNK3Mat6MatrixILt3ELt6EE10TransposedEv+0x44>
			result(r, c) = operator()(c, r);
 80139f2:	89ba      	ldrh	r2, [r7, #12]
 80139f4:	89fb      	ldrh	r3, [r7, #14]
 80139f6:	4619      	mov	r1, r3
 80139f8:	6878      	ldr	r0, [r7, #4]
 80139fa:	f000 f8a7 	bl	8013b4c <_ZN3Mat6MatrixILt6ELt3EEclEtt>
 80139fe:	4604      	mov	r4, r0
 8013a00:	89fa      	ldrh	r2, [r7, #14]
 8013a02:	89bb      	ldrh	r3, [r7, #12]
 8013a04:	4619      	mov	r1, r3
 8013a06:	6838      	ldr	r0, [r7, #0]
 8013a08:	f000 f9f7 	bl	8013dfa <_ZNK3Mat6MatrixILt3ELt6EEclEtt>
 8013a0c:	eef0 7a40 	vmov.f32	s15, s0
 8013a10:	edc4 7a00 	vstr	s15, [r4]
		for(u_short c = 0; c < heigth; ++c)
 8013a14:	89bb      	ldrh	r3, [r7, #12]
 8013a16:	3301      	adds	r3, #1
 8013a18:	81bb      	strh	r3, [r7, #12]
 8013a1a:	89bb      	ldrh	r3, [r7, #12]
 8013a1c:	2b02      	cmp	r3, #2
 8013a1e:	d9e8      	bls.n	80139f2 <_ZNK3Mat6MatrixILt3ELt6EE10TransposedEv+0x1c>
	for(u_short r = 0; r < width; ++r)
 8013a20:	89fb      	ldrh	r3, [r7, #14]
 8013a22:	3301      	adds	r3, #1
 8013a24:	81fb      	strh	r3, [r7, #14]
 8013a26:	89fb      	ldrh	r3, [r7, #14]
 8013a28:	2b05      	cmp	r3, #5
 8013a2a:	d9df      	bls.n	80139ec <_ZNK3Mat6MatrixILt3ELt6EE10TransposedEv+0x16>
	return result;
 8013a2c:	bf00      	nop
}
 8013a2e:	6878      	ldr	r0, [r7, #4]
 8013a30:	3714      	adds	r7, #20
 8013a32:	46bd      	mov	sp, r7
 8013a34:	bd90      	pop	{r4, r7, pc}

08013a36 <_ZNK3Mat6MatrixILt3ELt6EEmlILt3EEENS0_ILt3EXT_EEERKNS0_ILt6EXT_EEE>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 8013a36:	b580      	push	{r7, lr}
 8013a38:	b084      	sub	sp, #16
 8013a3a:	af00      	add	r7, sp, #0
 8013a3c:	60f8      	str	r0, [r7, #12]
 8013a3e:	60b9      	str	r1, [r7, #8]
 8013a40:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 8013a42:	68f8      	ldr	r0, [r7, #12]
 8013a44:	f7f9 fdc4 	bl	800d5d0 <_ZN3Mat6MatrixILt3ELt3EEC1Ev>
	Multiply(other, result);
 8013a48:	68fa      	ldr	r2, [r7, #12]
 8013a4a:	6879      	ldr	r1, [r7, #4]
 8013a4c:	68b8      	ldr	r0, [r7, #8]
 8013a4e:	f000 f9f3 	bl	8013e38 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE>
	return result;
 8013a52:	bf00      	nop
}
 8013a54:	68f8      	ldr	r0, [r7, #12]
 8013a56:	3710      	adds	r7, #16
 8013a58:	46bd      	mov	sp, r7
 8013a5a:	bd80      	pop	{r7, pc}

08013a5c <_ZNK3Mat6MatrixILt6ELt6EEmlILt3EEENS0_ILt6EXT_EEERKS3_>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 8013a5c:	b580      	push	{r7, lr}
 8013a5e:	b084      	sub	sp, #16
 8013a60:	af00      	add	r7, sp, #0
 8013a62:	60f8      	str	r0, [r7, #12]
 8013a64:	60b9      	str	r1, [r7, #8]
 8013a66:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 8013a68:	68f8      	ldr	r0, [r7, #12]
 8013a6a:	f000 f9bb 	bl	8013de4 <_ZN3Mat6MatrixILt6ELt3EEC1Ev>
	Multiply(other, result);
 8013a6e:	68fa      	ldr	r2, [r7, #12]
 8013a70:	6879      	ldr	r1, [r7, #4]
 8013a72:	68b8      	ldr	r0, [r7, #8]
 8013a74:	f000 fa94 	bl	8013fa0 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERS3_>
	return result;
 8013a78:	bf00      	nop
}
 8013a7a:	68f8      	ldr	r0, [r7, #12]
 8013a7c:	3710      	adds	r7, #16
 8013a7e:	46bd      	mov	sp, r7
 8013a80:	bd80      	pop	{r7, pc}

08013a82 <_ZNK3Mat6MatrixILt6ELt3EEmlILt3EEENS0_ILt6EXT_EEERKNS0_ILt3EXT_EEE>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 8013a82:	b580      	push	{r7, lr}
 8013a84:	b084      	sub	sp, #16
 8013a86:	af00      	add	r7, sp, #0
 8013a88:	60f8      	str	r0, [r7, #12]
 8013a8a:	60b9      	str	r1, [r7, #8]
 8013a8c:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 8013a8e:	68f8      	ldr	r0, [r7, #12]
 8013a90:	f000 f9a8 	bl	8013de4 <_ZN3Mat6MatrixILt6ELt3EEC1Ev>
	Multiply(other, result);
 8013a94:	68fa      	ldr	r2, [r7, #12]
 8013a96:	6879      	ldr	r1, [r7, #4]
 8013a98:	68b8      	ldr	r0, [r7, #8]
 8013a9a:	f000 fb35 	bl	8014108 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE>
	return result;
 8013a9e:	bf00      	nop
}
 8013aa0:	68f8      	ldr	r0, [r7, #12]
 8013aa2:	3710      	adds	r7, #16
 8013aa4:	46bd      	mov	sp, r7
 8013aa6:	bd80      	pop	{r7, pc}

08013aa8 <_ZNK3Mat6MatrixILt6ELt3EEmlILt1EEENS0_ILt6EXT_EEERKNS0_ILt3EXT_EEE>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 8013aa8:	b580      	push	{r7, lr}
 8013aaa:	b084      	sub	sp, #16
 8013aac:	af00      	add	r7, sp, #0
 8013aae:	60f8      	str	r0, [r7, #12]
 8013ab0:	60b9      	str	r1, [r7, #8]
 8013ab2:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 8013ab4:	68f8      	ldr	r0, [r7, #12]
 8013ab6:	f7f9 ff47 	bl	800d948 <_ZN3Mat6MatrixILt6ELt1EEC1Ev>
	Multiply(other, result);
 8013aba:	68fa      	ldr	r2, [r7, #12]
 8013abc:	6879      	ldr	r1, [r7, #4]
 8013abe:	68b8      	ldr	r0, [r7, #8]
 8013ac0:	f000 fbd6 	bl	8014270 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE>
	return result;
 8013ac4:	bf00      	nop
}
 8013ac6:	68f8      	ldr	r0, [r7, #12]
 8013ac8:	3710      	adds	r7, #16
 8013aca:	46bd      	mov	sp, r7
 8013acc:	bd80      	pop	{r7, pc}

08013ace <_ZNK3Mat6MatrixILt6ELt3EEmlILt6EEENS0_ILt6EXT_EEERKNS0_ILt3EXT_EEE>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 8013ace:	b580      	push	{r7, lr}
 8013ad0:	b084      	sub	sp, #16
 8013ad2:	af00      	add	r7, sp, #0
 8013ad4:	60f8      	str	r0, [r7, #12]
 8013ad6:	60b9      	str	r1, [r7, #8]
 8013ad8:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 8013ada:	68f8      	ldr	r0, [r7, #12]
 8013adc:	f7f9 fd9d 	bl	800d61a <_ZN3Mat6MatrixILt6ELt6EEC1Ev>
	Multiply(other, result);
 8013ae0:	68fa      	ldr	r2, [r7, #12]
 8013ae2:	6879      	ldr	r1, [r7, #4]
 8013ae4:	68b8      	ldr	r0, [r7, #8]
 8013ae6:	f000 fc77 	bl	80143d8 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt6EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE>
	return result;
 8013aea:	bf00      	nop
}
 8013aec:	68f8      	ldr	r0, [r7, #12]
 8013aee:	3710      	adds	r7, #16
 8013af0:	46bd      	mov	sp, r7
 8013af2:	bd80      	pop	{r7, pc}

08013af4 <_ZZN3Mat6MatrixILt6ELt3EEC4EfENKUlRfE_clES2_>:
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 8013af4:	b480      	push	{r7}
 8013af6:	b083      	sub	sp, #12
 8013af8:	af00      	add	r7, sp, #0
 8013afa:	6078      	str	r0, [r7, #4]
 8013afc:	6039      	str	r1, [r7, #0]
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	681a      	ldr	r2, [r3, #0]
 8013b02:	683b      	ldr	r3, [r7, #0]
 8013b04:	601a      	str	r2, [r3, #0]
 8013b06:	bf00      	nop
 8013b08:	370c      	adds	r7, #12
 8013b0a:	46bd      	mov	sp, r7
 8013b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b10:	4770      	bx	lr

08013b12 <_ZN3Mat6MatrixILt6ELt3EEC1Ef>:
Matrix<heigth, width>::Matrix(float val)
 8013b12:	b590      	push	{r4, r7, lr}
 8013b14:	b083      	sub	sp, #12
 8013b16:	af00      	add	r7, sp, #0
 8013b18:	6078      	str	r0, [r7, #4]
 8013b1a:	ed87 0a00 	vstr	s0, [r7]
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	4618      	mov	r0, r3
 8013b22:	f000 f85c 	bl	8013bde <_ZNSt5arrayIfLj18EE5beginEv>
 8013b26:	4604      	mov	r4, r0
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	4618      	mov	r0, r3
 8013b2c:	f000 f863 	bl	8013bf6 <_ZNSt5arrayIfLj18EE3endEv>
 8013b30:	4603      	mov	r3, r0
 8013b32:	edd7 7a00 	vldr	s15, [r7]
 8013b36:	eeb0 0a67 	vmov.f32	s0, s15
 8013b3a:	4619      	mov	r1, r3
 8013b3c:	4620      	mov	r0, r4
 8013b3e:	f000 fcff 	bl	8014540 <_ZSt8for_eachIPfZN3Mat6MatrixILt6ELt3EEC4EfEUlRfE_ET0_T_S7_S6_>
}
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	4618      	mov	r0, r3
 8013b46:	370c      	adds	r7, #12
 8013b48:	46bd      	mov	sp, r7
 8013b4a:	bd90      	pop	{r4, r7, pc}

08013b4c <_ZN3Mat6MatrixILt6ELt3EEclEtt>:
float& Matrix<heigth, width>::operator()(u_short row, u_short col)
 8013b4c:	b580      	push	{r7, lr}
 8013b4e:	b084      	sub	sp, #16
 8013b50:	af00      	add	r7, sp, #0
 8013b52:	6078      	str	r0, [r7, #4]
 8013b54:	460b      	mov	r3, r1
 8013b56:	807b      	strh	r3, [r7, #2]
 8013b58:	4613      	mov	r3, r2
 8013b5a:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 8013b5c:	887a      	ldrh	r2, [r7, #2]
 8013b5e:	4613      	mov	r3, r2
 8013b60:	005b      	lsls	r3, r3, #1
 8013b62:	441a      	add	r2, r3
 8013b64:	883b      	ldrh	r3, [r7, #0]
 8013b66:	4413      	add	r3, r2
 8013b68:	60fb      	str	r3, [r7, #12]
	return _values[index];
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	68f9      	ldr	r1, [r7, #12]
 8013b6e:	4618      	mov	r0, r3
 8013b70:	f000 f86a 	bl	8013c48 <_ZNSt5arrayIfLj18EEixEj>
 8013b74:	4603      	mov	r3, r0
}
 8013b76:	4618      	mov	r0, r3
 8013b78:	3710      	adds	r7, #16
 8013b7a:	46bd      	mov	sp, r7
 8013b7c:	bd80      	pop	{r7, pc}

08013b7e <_ZNK3Mat6MatrixILt6ELt3EE10TransposedEv>:
Matrix<width, heigth> Matrix<heigth, width>::Transposed() const
 8013b7e:	b590      	push	{r4, r7, lr}
 8013b80:	b085      	sub	sp, #20
 8013b82:	af00      	add	r7, sp, #0
 8013b84:	6078      	str	r0, [r7, #4]
 8013b86:	6039      	str	r1, [r7, #0]
	Matrix<width, heigth> result;
 8013b88:	6878      	ldr	r0, [r7, #4]
 8013b8a:	f000 f86c 	bl	8013c66 <_ZN3Mat6MatrixILt3ELt6EEC1Ev>
	for(u_short r = 0; r < width; ++r)
 8013b8e:	2300      	movs	r3, #0
 8013b90:	81fb      	strh	r3, [r7, #14]
 8013b92:	e01c      	b.n	8013bce <_ZNK3Mat6MatrixILt6ELt3EE10TransposedEv+0x50>
		for(u_short c = 0; c < heigth; ++c)
 8013b94:	2300      	movs	r3, #0
 8013b96:	81bb      	strh	r3, [r7, #12]
 8013b98:	e013      	b.n	8013bc2 <_ZNK3Mat6MatrixILt6ELt3EE10TransposedEv+0x44>
			result(r, c) = operator()(c, r);
 8013b9a:	89ba      	ldrh	r2, [r7, #12]
 8013b9c:	89fb      	ldrh	r3, [r7, #14]
 8013b9e:	4619      	mov	r1, r3
 8013ba0:	6878      	ldr	r0, [r7, #4]
 8013ba2:	f7ff feea 	bl	801397a <_ZN3Mat6MatrixILt3ELt6EEclEtt>
 8013ba6:	4604      	mov	r4, r0
 8013ba8:	89fa      	ldrh	r2, [r7, #14]
 8013baa:	89bb      	ldrh	r3, [r7, #12]
 8013bac:	4619      	mov	r1, r3
 8013bae:	6838      	ldr	r0, [r7, #0]
 8013bb0:	f000 fce2 	bl	8014578 <_ZNK3Mat6MatrixILt6ELt3EEclEtt>
 8013bb4:	eef0 7a40 	vmov.f32	s15, s0
 8013bb8:	edc4 7a00 	vstr	s15, [r4]
		for(u_short c = 0; c < heigth; ++c)
 8013bbc:	89bb      	ldrh	r3, [r7, #12]
 8013bbe:	3301      	adds	r3, #1
 8013bc0:	81bb      	strh	r3, [r7, #12]
 8013bc2:	89bb      	ldrh	r3, [r7, #12]
 8013bc4:	2b05      	cmp	r3, #5
 8013bc6:	d9e8      	bls.n	8013b9a <_ZNK3Mat6MatrixILt6ELt3EE10TransposedEv+0x1c>
	for(u_short r = 0; r < width; ++r)
 8013bc8:	89fb      	ldrh	r3, [r7, #14]
 8013bca:	3301      	adds	r3, #1
 8013bcc:	81fb      	strh	r3, [r7, #14]
 8013bce:	89fb      	ldrh	r3, [r7, #14]
 8013bd0:	2b02      	cmp	r3, #2
 8013bd2:	d9df      	bls.n	8013b94 <_ZNK3Mat6MatrixILt6ELt3EE10TransposedEv+0x16>
	return result;
 8013bd4:	bf00      	nop
}
 8013bd6:	6878      	ldr	r0, [r7, #4]
 8013bd8:	3714      	adds	r7, #20
 8013bda:	46bd      	mov	sp, r7
 8013bdc:	bd90      	pop	{r4, r7, pc}

08013bde <_ZNSt5arrayIfLj18EE5beginEv>:
      begin() noexcept
 8013bde:	b580      	push	{r7, lr}
 8013be0:	b082      	sub	sp, #8
 8013be2:	af00      	add	r7, sp, #0
 8013be4:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8013be6:	6878      	ldr	r0, [r7, #4]
 8013be8:	f000 fce3 	bl	80145b2 <_ZNSt5arrayIfLj18EE4dataEv>
 8013bec:	4603      	mov	r3, r0
 8013bee:	4618      	mov	r0, r3
 8013bf0:	3708      	adds	r7, #8
 8013bf2:	46bd      	mov	sp, r7
 8013bf4:	bd80      	pop	{r7, pc}

08013bf6 <_ZNSt5arrayIfLj18EE3endEv>:
      end() noexcept
 8013bf6:	b580      	push	{r7, lr}
 8013bf8:	b082      	sub	sp, #8
 8013bfa:	af00      	add	r7, sp, #0
 8013bfc:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 8013bfe:	6878      	ldr	r0, [r7, #4]
 8013c00:	f000 fcd7 	bl	80145b2 <_ZNSt5arrayIfLj18EE4dataEv>
 8013c04:	4603      	mov	r3, r0
 8013c06:	3348      	adds	r3, #72	; 0x48
 8013c08:	4618      	mov	r0, r3
 8013c0a:	3708      	adds	r7, #8
 8013c0c:	46bd      	mov	sp, r7
 8013c0e:	bd80      	pop	{r7, pc}

08013c10 <_ZSt8for_eachIPfZN3Mat6MatrixILt3ELt6EEC4EfEUlRfE_ET0_T_S7_S6_>:
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
 8013c10:	b580      	push	{r7, lr}
 8013c12:	b084      	sub	sp, #16
 8013c14:	af00      	add	r7, sp, #0
 8013c16:	60f8      	str	r0, [r7, #12]
 8013c18:	60b9      	str	r1, [r7, #8]
 8013c1a:	ed87 0a01 	vstr	s0, [r7, #4]
      for (; __first != __last; ++__first)
 8013c1e:	e007      	b.n	8013c30 <_ZSt8for_eachIPfZN3Mat6MatrixILt3ELt6EEC4EfEUlRfE_ET0_T_S7_S6_+0x20>
	__f(*__first);
 8013c20:	1d3b      	adds	r3, r7, #4
 8013c22:	68f9      	ldr	r1, [r7, #12]
 8013c24:	4618      	mov	r0, r3
 8013c26:	f7ff fe7c 	bl	8013922 <_ZZN3Mat6MatrixILt3ELt6EEC4EfENKUlRfE_clES2_>
      for (; __first != __last; ++__first)
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	3304      	adds	r3, #4
 8013c2e:	60fb      	str	r3, [r7, #12]
 8013c30:	68fa      	ldr	r2, [r7, #12]
 8013c32:	68bb      	ldr	r3, [r7, #8]
 8013c34:	429a      	cmp	r2, r3
 8013c36:	d1f3      	bne.n	8013c20 <_ZSt8for_eachIPfZN3Mat6MatrixILt3ELt6EEC4EfEUlRfE_ET0_T_S7_S6_+0x10>
      return __f; // N.B. [alg.foreach] says std::move(f) but it's redundant.
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	ee07 3a90 	vmov	s15, r3
    }
 8013c3e:	eeb0 0a67 	vmov.f32	s0, s15
 8013c42:	3710      	adds	r7, #16
 8013c44:	46bd      	mov	sp, r7
 8013c46:	bd80      	pop	{r7, pc}

08013c48 <_ZNSt5arrayIfLj18EEixEj>:
      operator[](size_type __n) noexcept
 8013c48:	b580      	push	{r7, lr}
 8013c4a:	b082      	sub	sp, #8
 8013c4c:	af00      	add	r7, sp, #0
 8013c4e:	6078      	str	r0, [r7, #4]
 8013c50:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	6839      	ldr	r1, [r7, #0]
 8013c56:	4618      	mov	r0, r3
 8013c58:	f000 fcb8 	bl	80145cc <_ZNSt14__array_traitsIfLj18EE6_S_refERA18_Kfj>
 8013c5c:	4603      	mov	r3, r0
      }
 8013c5e:	4618      	mov	r0, r3
 8013c60:	3708      	adds	r7, #8
 8013c62:	46bd      	mov	sp, r7
 8013c64:	bd80      	pop	{r7, pc}

08013c66 <_ZN3Mat6MatrixILt3ELt6EEC1Ev>:
Matrix<heigth, width>::Matrix() {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 8013c66:	b480      	push	{r7}
 8013c68:	b083      	sub	sp, #12
 8013c6a:	af00      	add	r7, sp, #0
 8013c6c:	6078      	str	r0, [r7, #4]
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	4618      	mov	r0, r3
 8013c72:	370c      	adds	r7, #12
 8013c74:	46bd      	mov	sp, r7
 8013c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c7a:	4770      	bx	lr

08013c7c <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 8013c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013c7e:	b0bf      	sub	sp, #252	; 0xfc
 8013c80:	af00      	add	r7, sp, #0
 8013c82:	60f8      	str	r0, [r7, #12]
 8013c84:	60b9      	str	r1, [r7, #8]
 8013c86:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 8013c88:	2300      	movs	r3, #0
 8013c8a:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
 8013c8e:	e02d      	b.n	8013cec <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x70>
		for(u_short col = 0; col < width; ++col)
 8013c90:	2300      	movs	r3, #0
 8013c92:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
 8013c96:	e020      	b.n	8013cda <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 8013c98:	f8b7 20f6 	ldrh.w	r2, [r7, #246]	; 0xf6
 8013c9c:	f107 0314 	add.w	r3, r7, #20
 8013ca0:	4611      	mov	r1, r2
 8013ca2:	4618      	mov	r0, r3
 8013ca4:	f000 fca1 	bl	80145ea <_ZNSt5arrayIS_IfLj6EELj3EEixEj>
 8013ca8:	4602      	mov	r2, r0
 8013caa:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 8013cae:	4619      	mov	r1, r3
 8013cb0:	4610      	mov	r0, r2
 8013cb2:	f7fa ffa7 	bl	800ec04 <_ZNSt5arrayIfLj6EEixEj>
 8013cb6:	4604      	mov	r4, r0
 8013cb8:	f8b7 20f4 	ldrh.w	r2, [r7, #244]	; 0xf4
 8013cbc:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8013cc0:	4619      	mov	r1, r3
 8013cc2:	68f8      	ldr	r0, [r7, #12]
 8013cc4:	f000 f899 	bl	8013dfa <_ZNK3Mat6MatrixILt3ELt6EEclEtt>
 8013cc8:	eef0 7a40 	vmov.f32	s15, s0
 8013ccc:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 8013cd0:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 8013cd4:	3301      	adds	r3, #1
 8013cd6:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
 8013cda:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 8013cde:	2b05      	cmp	r3, #5
 8013ce0:	d9da      	bls.n	8013c98 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 8013ce2:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8013ce6:	3301      	adds	r3, #1
 8013ce8:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
 8013cec:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8013cf0:	2b02      	cmp	r3, #2
 8013cf2:	d9cd      	bls.n	8013c90 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x14>
	for(u_short col = 0; col < other_width; ++col)
 8013cf4:	2300      	movs	r3, #0
 8013cf6:	f8a7 30f2 	strh.w	r3, [r7, #242]	; 0xf2
 8013cfa:	e02d      	b.n	8013d58 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0xdc>
		for(u_short row = 0; row < width; ++row)
 8013cfc:	2300      	movs	r3, #0
 8013cfe:	f8a7 30f0 	strh.w	r3, [r7, #240]	; 0xf0
 8013d02:	e020      	b.n	8013d46 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0xca>
			other_columns[col][row] = other(row, col);
 8013d04:	f8b7 20f2 	ldrh.w	r2, [r7, #242]	; 0xf2
 8013d08:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013d0c:	4611      	mov	r1, r2
 8013d0e:	4618      	mov	r0, r3
 8013d10:	f7fa ffbc 	bl	800ec8c <_ZNSt5arrayIS_IfLj6EELj6EEixEj>
 8013d14:	4602      	mov	r2, r0
 8013d16:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 8013d1a:	4619      	mov	r1, r3
 8013d1c:	4610      	mov	r0, r2
 8013d1e:	f7fa ff71 	bl	800ec04 <_ZNSt5arrayIfLj6EEixEj>
 8013d22:	4604      	mov	r4, r0
 8013d24:	f8b7 20f2 	ldrh.w	r2, [r7, #242]	; 0xf2
 8013d28:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 8013d2c:	4619      	mov	r1, r3
 8013d2e:	68b8      	ldr	r0, [r7, #8]
 8013d30:	f7fa fe20 	bl	800e974 <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 8013d34:	eef0 7a40 	vmov.f32	s15, s0
 8013d38:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 8013d3c:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 8013d40:	3301      	adds	r3, #1
 8013d42:	f8a7 30f0 	strh.w	r3, [r7, #240]	; 0xf0
 8013d46:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 8013d4a:	2b05      	cmp	r3, #5
 8013d4c:	d9da      	bls.n	8013d04 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x88>
	for(u_short col = 0; col < other_width; ++col)
 8013d4e:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	; 0xf2
 8013d52:	3301      	adds	r3, #1
 8013d54:	f8a7 30f2 	strh.w	r3, [r7, #242]	; 0xf2
 8013d58:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	; 0xf2
 8013d5c:	2b05      	cmp	r3, #5
 8013d5e:	d9cd      	bls.n	8013cfc <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x80>
	for(u_short row = 0; row < heigth; ++row)
 8013d60:	2300      	movs	r3, #0
 8013d62:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
 8013d66:	e034      	b.n	8013dd2 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x156>
		for(u_short col = 0; col < other_width; ++col)
 8013d68:	2300      	movs	r3, #0
 8013d6a:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec
 8013d6e:	e027      	b.n	8013dc0 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 8013d70:	f8b7 20ee 	ldrh.w	r2, [r7, #238]	; 0xee
 8013d74:	f107 0314 	add.w	r3, r7, #20
 8013d78:	4611      	mov	r1, r2
 8013d7a:	4618      	mov	r0, r3
 8013d7c:	f000 fc35 	bl	80145ea <_ZNSt5arrayIS_IfLj6EELj3EEixEj>
 8013d80:	4605      	mov	r5, r0
 8013d82:	f8b7 20ec 	ldrh.w	r2, [r7, #236]	; 0xec
 8013d86:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013d8a:	4611      	mov	r1, r2
 8013d8c:	4618      	mov	r0, r3
 8013d8e:	f7fa ff7d 	bl	800ec8c <_ZNSt5arrayIS_IfLj6EELj6EEixEj>
 8013d92:	4606      	mov	r6, r0
 8013d94:	f8b7 20ec 	ldrh.w	r2, [r7, #236]	; 0xec
 8013d98:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8013d9c:	4619      	mov	r1, r3
 8013d9e:	6878      	ldr	r0, [r7, #4]
 8013da0:	f7ff fdeb 	bl	801397a <_ZN3Mat6MatrixILt3ELt6EEclEtt>
 8013da4:	4604      	mov	r4, r0
 8013da6:	4631      	mov	r1, r6
 8013da8:	4628      	mov	r0, r5
 8013daa:	f7fa ff7e 	bl	800ecaa <_ZN3Mat13Multiply_rowsILj6EEEfRKSt5arrayIfXT_EES4_>
 8013dae:	eef0 7a40 	vmov.f32	s15, s0
 8013db2:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 8013db6:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 8013dba:	3301      	adds	r3, #1
 8013dbc:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec
 8013dc0:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 8013dc4:	2b05      	cmp	r3, #5
 8013dc6:	d9d3      	bls.n	8013d70 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 8013dc8:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8013dcc:	3301      	adds	r3, #1
 8013dce:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
 8013dd2:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8013dd6:	2b02      	cmp	r3, #2
 8013dd8:	d9c6      	bls.n	8013d68 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0xec>
}
 8013dda:	bf00      	nop
 8013ddc:	bf00      	nop
 8013dde:	37fc      	adds	r7, #252	; 0xfc
 8013de0:	46bd      	mov	sp, r7
 8013de2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013de4 <_ZN3Mat6MatrixILt6ELt3EEC1Ev>:
Matrix<heigth, width>::Matrix() {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 8013de4:	b480      	push	{r7}
 8013de6:	b083      	sub	sp, #12
 8013de8:	af00      	add	r7, sp, #0
 8013dea:	6078      	str	r0, [r7, #4]
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	4618      	mov	r0, r3
 8013df0:	370c      	adds	r7, #12
 8013df2:	46bd      	mov	sp, r7
 8013df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013df8:	4770      	bx	lr

08013dfa <_ZNK3Mat6MatrixILt3ELt6EEclEtt>:
float Matrix<heigth, width>::operator()(u_short row, u_short col) const
 8013dfa:	b580      	push	{r7, lr}
 8013dfc:	b084      	sub	sp, #16
 8013dfe:	af00      	add	r7, sp, #0
 8013e00:	6078      	str	r0, [r7, #4]
 8013e02:	460b      	mov	r3, r1
 8013e04:	807b      	strh	r3, [r7, #2]
 8013e06:	4613      	mov	r3, r2
 8013e08:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 8013e0a:	887a      	ldrh	r2, [r7, #2]
 8013e0c:	4613      	mov	r3, r2
 8013e0e:	005b      	lsls	r3, r3, #1
 8013e10:	4413      	add	r3, r2
 8013e12:	005b      	lsls	r3, r3, #1
 8013e14:	461a      	mov	r2, r3
 8013e16:	883b      	ldrh	r3, [r7, #0]
 8013e18:	4413      	add	r3, r2
 8013e1a:	60fb      	str	r3, [r7, #12]
	return _values[index];
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	68f9      	ldr	r1, [r7, #12]
 8013e20:	4618      	mov	r0, r3
 8013e22:	f000 fbf1 	bl	8014608 <_ZNKSt5arrayIfLj18EEixEj>
 8013e26:	4603      	mov	r3, r0
 8013e28:	681b      	ldr	r3, [r3, #0]
 8013e2a:	ee07 3a90 	vmov	s15, r3
}
 8013e2e:	eeb0 0a67 	vmov.f32	s0, s15
 8013e32:	3710      	adds	r7, #16
 8013e34:	46bd      	mov	sp, r7
 8013e36:	bd80      	pop	{r7, pc}

08013e38 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 8013e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e3a:	b0ad      	sub	sp, #180	; 0xb4
 8013e3c:	af00      	add	r7, sp, #0
 8013e3e:	60f8      	str	r0, [r7, #12]
 8013e40:	60b9      	str	r1, [r7, #8]
 8013e42:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 8013e44:	2300      	movs	r3, #0
 8013e46:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8013e4a:	e02d      	b.n	8013ea8 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x70>
		for(u_short col = 0; col < width; ++col)
 8013e4c:	2300      	movs	r3, #0
 8013e4e:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 8013e52:	e020      	b.n	8013e96 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 8013e54:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 8013e58:	f107 0314 	add.w	r3, r7, #20
 8013e5c:	4611      	mov	r1, r2
 8013e5e:	4618      	mov	r0, r3
 8013e60:	f000 fbc3 	bl	80145ea <_ZNSt5arrayIS_IfLj6EELj3EEixEj>
 8013e64:	4602      	mov	r2, r0
 8013e66:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8013e6a:	4619      	mov	r1, r3
 8013e6c:	4610      	mov	r0, r2
 8013e6e:	f7fa fec9 	bl	800ec04 <_ZNSt5arrayIfLj6EEixEj>
 8013e72:	4604      	mov	r4, r0
 8013e74:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8013e78:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8013e7c:	4619      	mov	r1, r3
 8013e7e:	68f8      	ldr	r0, [r7, #12]
 8013e80:	f7ff ffbb 	bl	8013dfa <_ZNK3Mat6MatrixILt3ELt6EEclEtt>
 8013e84:	eef0 7a40 	vmov.f32	s15, s0
 8013e88:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 8013e8c:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8013e90:	3301      	adds	r3, #1
 8013e92:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 8013e96:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8013e9a:	2b05      	cmp	r3, #5
 8013e9c:	d9da      	bls.n	8013e54 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 8013e9e:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8013ea2:	3301      	adds	r3, #1
 8013ea4:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8013ea8:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8013eac:	2b02      	cmp	r3, #2
 8013eae:	d9cd      	bls.n	8013e4c <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x14>
	for(u_short col = 0; col < other_width; ++col)
 8013eb0:	2300      	movs	r3, #0
 8013eb2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8013eb6:	e02d      	b.n	8013f14 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0xdc>
		for(u_short row = 0; row < width; ++row)
 8013eb8:	2300      	movs	r3, #0
 8013eba:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8013ebe:	e020      	b.n	8013f02 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0xca>
			other_columns[col][row] = other(row, col);
 8013ec0:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 8013ec4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013ec8:	4611      	mov	r1, r2
 8013eca:	4618      	mov	r0, r3
 8013ecc:	f000 fb8d 	bl	80145ea <_ZNSt5arrayIS_IfLj6EELj3EEixEj>
 8013ed0:	4602      	mov	r2, r0
 8013ed2:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8013ed6:	4619      	mov	r1, r3
 8013ed8:	4610      	mov	r0, r2
 8013eda:	f7fa fe93 	bl	800ec04 <_ZNSt5arrayIfLj6EEixEj>
 8013ede:	4604      	mov	r4, r0
 8013ee0:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 8013ee4:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8013ee8:	4619      	mov	r1, r3
 8013eea:	68b8      	ldr	r0, [r7, #8]
 8013eec:	f000 fb44 	bl	8014578 <_ZNK3Mat6MatrixILt6ELt3EEclEtt>
 8013ef0:	eef0 7a40 	vmov.f32	s15, s0
 8013ef4:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 8013ef8:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8013efc:	3301      	adds	r3, #1
 8013efe:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8013f02:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8013f06:	2b05      	cmp	r3, #5
 8013f08:	d9da      	bls.n	8013ec0 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x88>
	for(u_short col = 0; col < other_width; ++col)
 8013f0a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8013f0e:	3301      	adds	r3, #1
 8013f10:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8013f14:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8013f18:	2b02      	cmp	r3, #2
 8013f1a:	d9cd      	bls.n	8013eb8 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x80>
	for(u_short row = 0; row < heigth; ++row)
 8013f1c:	2300      	movs	r3, #0
 8013f1e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8013f22:	e034      	b.n	8013f8e <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x156>
		for(u_short col = 0; col < other_width; ++col)
 8013f24:	2300      	movs	r3, #0
 8013f26:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8013f2a:	e027      	b.n	8013f7c <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 8013f2c:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8013f30:	f107 0314 	add.w	r3, r7, #20
 8013f34:	4611      	mov	r1, r2
 8013f36:	4618      	mov	r0, r3
 8013f38:	f000 fb57 	bl	80145ea <_ZNSt5arrayIS_IfLj6EELj3EEixEj>
 8013f3c:	4605      	mov	r5, r0
 8013f3e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8013f42:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013f46:	4611      	mov	r1, r2
 8013f48:	4618      	mov	r0, r3
 8013f4a:	f000 fb4e 	bl	80145ea <_ZNSt5arrayIS_IfLj6EELj3EEixEj>
 8013f4e:	4606      	mov	r6, r0
 8013f50:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8013f54:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8013f58:	4619      	mov	r1, r3
 8013f5a:	6878      	ldr	r0, [r7, #4]
 8013f5c:	f7f9 fd2b 	bl	800d9b6 <_ZN3Mat6MatrixILt3ELt3EEclEtt>
 8013f60:	4604      	mov	r4, r0
 8013f62:	4631      	mov	r1, r6
 8013f64:	4628      	mov	r0, r5
 8013f66:	f7fa fea0 	bl	800ecaa <_ZN3Mat13Multiply_rowsILj6EEEfRKSt5arrayIfXT_EES4_>
 8013f6a:	eef0 7a40 	vmov.f32	s15, s0
 8013f6e:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 8013f72:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8013f76:	3301      	adds	r3, #1
 8013f78:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8013f7c:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8013f80:	2b02      	cmp	r3, #2
 8013f82:	d9d3      	bls.n	8013f2c <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 8013f84:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8013f88:	3301      	adds	r3, #1
 8013f8a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8013f8e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8013f92:	2b02      	cmp	r3, #2
 8013f94:	d9c6      	bls.n	8013f24 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0xec>
}
 8013f96:	bf00      	nop
 8013f98:	bf00      	nop
 8013f9a:	37b4      	adds	r7, #180	; 0xb4
 8013f9c:	46bd      	mov	sp, r7
 8013f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013fa0 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERS3_>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 8013fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013fa2:	b0bf      	sub	sp, #252	; 0xfc
 8013fa4:	af00      	add	r7, sp, #0
 8013fa6:	60f8      	str	r0, [r7, #12]
 8013fa8:	60b9      	str	r1, [r7, #8]
 8013faa:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 8013fac:	2300      	movs	r3, #0
 8013fae:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
 8013fb2:	e02d      	b.n	8014010 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERS3_+0x70>
		for(u_short col = 0; col < width; ++col)
 8013fb4:	2300      	movs	r3, #0
 8013fb6:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
 8013fba:	e020      	b.n	8013ffe <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERS3_+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 8013fbc:	f8b7 20f6 	ldrh.w	r2, [r7, #246]	; 0xf6
 8013fc0:	f107 0314 	add.w	r3, r7, #20
 8013fc4:	4611      	mov	r1, r2
 8013fc6:	4618      	mov	r0, r3
 8013fc8:	f7fa fe60 	bl	800ec8c <_ZNSt5arrayIS_IfLj6EELj6EEixEj>
 8013fcc:	4602      	mov	r2, r0
 8013fce:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 8013fd2:	4619      	mov	r1, r3
 8013fd4:	4610      	mov	r0, r2
 8013fd6:	f7fa fe15 	bl	800ec04 <_ZNSt5arrayIfLj6EEixEj>
 8013fda:	4604      	mov	r4, r0
 8013fdc:	f8b7 20f4 	ldrh.w	r2, [r7, #244]	; 0xf4
 8013fe0:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8013fe4:	4619      	mov	r1, r3
 8013fe6:	68f8      	ldr	r0, [r7, #12]
 8013fe8:	f7fa fcc4 	bl	800e974 <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 8013fec:	eef0 7a40 	vmov.f32	s15, s0
 8013ff0:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 8013ff4:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 8013ff8:	3301      	adds	r3, #1
 8013ffa:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
 8013ffe:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 8014002:	2b05      	cmp	r3, #5
 8014004:	d9da      	bls.n	8013fbc <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERS3_+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 8014006:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 801400a:	3301      	adds	r3, #1
 801400c:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
 8014010:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8014014:	2b05      	cmp	r3, #5
 8014016:	d9cd      	bls.n	8013fb4 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERS3_+0x14>
	for(u_short col = 0; col < other_width; ++col)
 8014018:	2300      	movs	r3, #0
 801401a:	f8a7 30f2 	strh.w	r3, [r7, #242]	; 0xf2
 801401e:	e02d      	b.n	801407c <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERS3_+0xdc>
		for(u_short row = 0; row < width; ++row)
 8014020:	2300      	movs	r3, #0
 8014022:	f8a7 30f0 	strh.w	r3, [r7, #240]	; 0xf0
 8014026:	e020      	b.n	801406a <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERS3_+0xca>
			other_columns[col][row] = other(row, col);
 8014028:	f8b7 20f2 	ldrh.w	r2, [r7, #242]	; 0xf2
 801402c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8014030:	4611      	mov	r1, r2
 8014032:	4618      	mov	r0, r3
 8014034:	f000 fad9 	bl	80145ea <_ZNSt5arrayIS_IfLj6EELj3EEixEj>
 8014038:	4602      	mov	r2, r0
 801403a:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 801403e:	4619      	mov	r1, r3
 8014040:	4610      	mov	r0, r2
 8014042:	f7fa fddf 	bl	800ec04 <_ZNSt5arrayIfLj6EEixEj>
 8014046:	4604      	mov	r4, r0
 8014048:	f8b7 20f2 	ldrh.w	r2, [r7, #242]	; 0xf2
 801404c:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 8014050:	4619      	mov	r1, r3
 8014052:	68b8      	ldr	r0, [r7, #8]
 8014054:	f000 fa90 	bl	8014578 <_ZNK3Mat6MatrixILt6ELt3EEclEtt>
 8014058:	eef0 7a40 	vmov.f32	s15, s0
 801405c:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 8014060:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 8014064:	3301      	adds	r3, #1
 8014066:	f8a7 30f0 	strh.w	r3, [r7, #240]	; 0xf0
 801406a:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 801406e:	2b05      	cmp	r3, #5
 8014070:	d9da      	bls.n	8014028 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERS3_+0x88>
	for(u_short col = 0; col < other_width; ++col)
 8014072:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	; 0xf2
 8014076:	3301      	adds	r3, #1
 8014078:	f8a7 30f2 	strh.w	r3, [r7, #242]	; 0xf2
 801407c:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	; 0xf2
 8014080:	2b02      	cmp	r3, #2
 8014082:	d9cd      	bls.n	8014020 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERS3_+0x80>
	for(u_short row = 0; row < heigth; ++row)
 8014084:	2300      	movs	r3, #0
 8014086:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
 801408a:	e034      	b.n	80140f6 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERS3_+0x156>
		for(u_short col = 0; col < other_width; ++col)
 801408c:	2300      	movs	r3, #0
 801408e:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec
 8014092:	e027      	b.n	80140e4 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERS3_+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 8014094:	f8b7 20ee 	ldrh.w	r2, [r7, #238]	; 0xee
 8014098:	f107 0314 	add.w	r3, r7, #20
 801409c:	4611      	mov	r1, r2
 801409e:	4618      	mov	r0, r3
 80140a0:	f7fa fdf4 	bl	800ec8c <_ZNSt5arrayIS_IfLj6EELj6EEixEj>
 80140a4:	4605      	mov	r5, r0
 80140a6:	f8b7 20ec 	ldrh.w	r2, [r7, #236]	; 0xec
 80140aa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80140ae:	4611      	mov	r1, r2
 80140b0:	4618      	mov	r0, r3
 80140b2:	f000 fa9a 	bl	80145ea <_ZNSt5arrayIS_IfLj6EELj3EEixEj>
 80140b6:	4606      	mov	r6, r0
 80140b8:	f8b7 20ec 	ldrh.w	r2, [r7, #236]	; 0xec
 80140bc:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 80140c0:	4619      	mov	r1, r3
 80140c2:	6878      	ldr	r0, [r7, #4]
 80140c4:	f7ff fd42 	bl	8013b4c <_ZN3Mat6MatrixILt6ELt3EEclEtt>
 80140c8:	4604      	mov	r4, r0
 80140ca:	4631      	mov	r1, r6
 80140cc:	4628      	mov	r0, r5
 80140ce:	f7fa fdec 	bl	800ecaa <_ZN3Mat13Multiply_rowsILj6EEEfRKSt5arrayIfXT_EES4_>
 80140d2:	eef0 7a40 	vmov.f32	s15, s0
 80140d6:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 80140da:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 80140de:	3301      	adds	r3, #1
 80140e0:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec
 80140e4:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 80140e8:	2b02      	cmp	r3, #2
 80140ea:	d9d3      	bls.n	8014094 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERS3_+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 80140ec:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 80140f0:	3301      	adds	r3, #1
 80140f2:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
 80140f6:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 80140fa:	2b05      	cmp	r3, #5
 80140fc:	d9c6      	bls.n	801408c <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERS3_+0xec>
}
 80140fe:	bf00      	nop
 8014100:	bf00      	nop
 8014102:	37fc      	adds	r7, #252	; 0xfc
 8014104:	46bd      	mov	sp, r7
 8014106:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014108 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 8014108:	b5f0      	push	{r4, r5, r6, r7, lr}
 801410a:	b0a3      	sub	sp, #140	; 0x8c
 801410c:	af00      	add	r7, sp, #0
 801410e:	60f8      	str	r0, [r7, #12]
 8014110:	60b9      	str	r1, [r7, #8]
 8014112:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 8014114:	2300      	movs	r3, #0
 8014116:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 801411a:	e02d      	b.n	8014178 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x70>
		for(u_short col = 0; col < width; ++col)
 801411c:	2300      	movs	r3, #0
 801411e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8014122:	e020      	b.n	8014166 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 8014124:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 8014128:	f107 0310 	add.w	r3, r7, #16
 801412c:	4611      	mov	r1, r2
 801412e:	4618      	mov	r0, r3
 8014130:	f000 fa79 	bl	8014626 <_ZNSt5arrayIS_IfLj3EELj6EEixEj>
 8014134:	4602      	mov	r2, r0
 8014136:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 801413a:	4619      	mov	r1, r3
 801413c:	4610      	mov	r0, r2
 801413e:	f7f9 fc88 	bl	800da52 <_ZNSt5arrayIfLj3EEixEj>
 8014142:	4604      	mov	r4, r0
 8014144:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 8014148:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 801414c:	4619      	mov	r1, r3
 801414e:	68f8      	ldr	r0, [r7, #12]
 8014150:	f000 fa12 	bl	8014578 <_ZNK3Mat6MatrixILt6ELt3EEclEtt>
 8014154:	eef0 7a40 	vmov.f32	s15, s0
 8014158:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 801415c:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8014160:	3301      	adds	r3, #1
 8014162:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8014166:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 801416a:	2b02      	cmp	r3, #2
 801416c:	d9da      	bls.n	8014124 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 801416e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8014172:	3301      	adds	r3, #1
 8014174:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8014178:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 801417c:	2b05      	cmp	r3, #5
 801417e:	d9cd      	bls.n	801411c <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x14>
	for(u_short col = 0; col < other_width; ++col)
 8014180:	2300      	movs	r3, #0
 8014182:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 8014186:	e02d      	b.n	80141e4 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0xdc>
		for(u_short row = 0; row < width; ++row)
 8014188:	2300      	movs	r3, #0
 801418a:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
 801418e:	e020      	b.n	80141d2 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0xca>
			other_columns[col][row] = other(row, col);
 8014190:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 8014194:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014198:	4611      	mov	r1, r2
 801419a:	4618      	mov	r0, r3
 801419c:	f7f9 fe20 	bl	800dde0 <_ZNSt5arrayIS_IfLj3EELj3EEixEj>
 80141a0:	4602      	mov	r2, r0
 80141a2:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 80141a6:	4619      	mov	r1, r3
 80141a8:	4610      	mov	r0, r2
 80141aa:	f7f9 fc52 	bl	800da52 <_ZNSt5arrayIfLj3EEixEj>
 80141ae:	4604      	mov	r4, r0
 80141b0:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 80141b4:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 80141b8:	4619      	mov	r1, r3
 80141ba:	68b8      	ldr	r0, [r7, #8]
 80141bc:	f7f9 fe1f 	bl	800ddfe <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 80141c0:	eef0 7a40 	vmov.f32	s15, s0
 80141c4:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 80141c8:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 80141cc:	3301      	adds	r3, #1
 80141ce:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
 80141d2:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 80141d6:	2b02      	cmp	r3, #2
 80141d8:	d9da      	bls.n	8014190 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x88>
	for(u_short col = 0; col < other_width; ++col)
 80141da:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80141de:	3301      	adds	r3, #1
 80141e0:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 80141e4:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80141e8:	2b02      	cmp	r3, #2
 80141ea:	d9cd      	bls.n	8014188 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x80>
	for(u_short row = 0; row < heigth; ++row)
 80141ec:	2300      	movs	r3, #0
 80141ee:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80141f2:	e034      	b.n	801425e <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x156>
		for(u_short col = 0; col < other_width; ++col)
 80141f4:	2300      	movs	r3, #0
 80141f6:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80141fa:	e027      	b.n	801424c <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 80141fc:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8014200:	f107 0310 	add.w	r3, r7, #16
 8014204:	4611      	mov	r1, r2
 8014206:	4618      	mov	r0, r3
 8014208:	f000 fa0d 	bl	8014626 <_ZNSt5arrayIS_IfLj3EELj6EEixEj>
 801420c:	4605      	mov	r5, r0
 801420e:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8014212:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014216:	4611      	mov	r1, r2
 8014218:	4618      	mov	r0, r3
 801421a:	f7f9 fde1 	bl	800dde0 <_ZNSt5arrayIS_IfLj3EELj3EEixEj>
 801421e:	4606      	mov	r6, r0
 8014220:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8014224:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8014228:	4619      	mov	r1, r3
 801422a:	6878      	ldr	r0, [r7, #4]
 801422c:	f7ff fc8e 	bl	8013b4c <_ZN3Mat6MatrixILt6ELt3EEclEtt>
 8014230:	4604      	mov	r4, r0
 8014232:	4631      	mov	r1, r6
 8014234:	4628      	mov	r0, r5
 8014236:	f7f9 fe28 	bl	800de8a <_ZN3Mat13Multiply_rowsILj3EEEfRKSt5arrayIfXT_EES4_>
 801423a:	eef0 7a40 	vmov.f32	s15, s0
 801423e:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 8014242:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8014246:	3301      	adds	r3, #1
 8014248:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 801424c:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8014250:	2b02      	cmp	r3, #2
 8014252:	d9d3      	bls.n	80141fc <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 8014254:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8014258:	3301      	adds	r3, #1
 801425a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 801425e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8014262:	2b05      	cmp	r3, #5
 8014264:	d9c6      	bls.n	80141f4 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0xec>
}
 8014266:	bf00      	nop
 8014268:	bf00      	nop
 801426a:	378c      	adds	r7, #140	; 0x8c
 801426c:	46bd      	mov	sp, r7
 801426e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014270 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 8014270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014272:	b09d      	sub	sp, #116	; 0x74
 8014274:	af00      	add	r7, sp, #0
 8014276:	60f8      	str	r0, [r7, #12]
 8014278:	60b9      	str	r1, [r7, #8]
 801427a:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 801427c:	2300      	movs	r3, #0
 801427e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8014282:	e02d      	b.n	80142e0 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x70>
		for(u_short col = 0; col < width; ++col)
 8014284:	2300      	movs	r3, #0
 8014286:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 801428a:	e020      	b.n	80142ce <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 801428c:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8014290:	f107 0310 	add.w	r3, r7, #16
 8014294:	4611      	mov	r1, r2
 8014296:	4618      	mov	r0, r3
 8014298:	f000 f9c5 	bl	8014626 <_ZNSt5arrayIS_IfLj3EELj6EEixEj>
 801429c:	4602      	mov	r2, r0
 801429e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80142a2:	4619      	mov	r1, r3
 80142a4:	4610      	mov	r0, r2
 80142a6:	f7f9 fbd4 	bl	800da52 <_ZNSt5arrayIfLj3EEixEj>
 80142aa:	4604      	mov	r4, r0
 80142ac:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80142b0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80142b4:	4619      	mov	r1, r3
 80142b6:	68f8      	ldr	r0, [r7, #12]
 80142b8:	f000 f95e 	bl	8014578 <_ZNK3Mat6MatrixILt6ELt3EEclEtt>
 80142bc:	eef0 7a40 	vmov.f32	s15, s0
 80142c0:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 80142c4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80142c8:	3301      	adds	r3, #1
 80142ca:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 80142ce:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80142d2:	2b02      	cmp	r3, #2
 80142d4:	d9da      	bls.n	801428c <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 80142d6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80142da:	3301      	adds	r3, #1
 80142dc:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 80142e0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80142e4:	2b05      	cmp	r3, #5
 80142e6:	d9cd      	bls.n	8014284 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x14>
	for(u_short col = 0; col < other_width; ++col)
 80142e8:	2300      	movs	r3, #0
 80142ea:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80142ee:	e02d      	b.n	801434c <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0xdc>
		for(u_short row = 0; row < width; ++row)
 80142f0:	2300      	movs	r3, #0
 80142f2:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80142f6:	e020      	b.n	801433a <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0xca>
			other_columns[col][row] = other(row, col);
 80142f8:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 80142fc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014300:	4611      	mov	r1, r2
 8014302:	4618      	mov	r0, r3
 8014304:	f7f9 fd98 	bl	800de38 <_ZNSt5arrayIS_IfLj3EELj1EEixEj>
 8014308:	4602      	mov	r2, r0
 801430a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 801430e:	4619      	mov	r1, r3
 8014310:	4610      	mov	r0, r2
 8014312:	f7f9 fb9e 	bl	800da52 <_ZNSt5arrayIfLj3EEixEj>
 8014316:	4604      	mov	r4, r0
 8014318:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 801431c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8014320:	4619      	mov	r1, r3
 8014322:	68b8      	ldr	r0, [r7, #8]
 8014324:	f7f9 fd97 	bl	800de56 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8014328:	eef0 7a40 	vmov.f32	s15, s0
 801432c:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 8014330:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8014334:	3301      	adds	r3, #1
 8014336:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 801433a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 801433e:	2b02      	cmp	r3, #2
 8014340:	d9da      	bls.n	80142f8 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x88>
	for(u_short col = 0; col < other_width; ++col)
 8014342:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8014346:	3301      	adds	r3, #1
 8014348:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 801434c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8014350:	2b00      	cmp	r3, #0
 8014352:	d0cd      	beq.n	80142f0 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x80>
	for(u_short row = 0; row < heigth; ++row)
 8014354:	2300      	movs	r3, #0
 8014356:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 801435a:	e034      	b.n	80143c6 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x156>
		for(u_short col = 0; col < other_width; ++col)
 801435c:	2300      	movs	r3, #0
 801435e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8014362:	e027      	b.n	80143b4 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 8014364:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8014368:	f107 0310 	add.w	r3, r7, #16
 801436c:	4611      	mov	r1, r2
 801436e:	4618      	mov	r0, r3
 8014370:	f000 f959 	bl	8014626 <_ZNSt5arrayIS_IfLj3EELj6EEixEj>
 8014374:	4605      	mov	r5, r0
 8014376:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 801437a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801437e:	4611      	mov	r1, r2
 8014380:	4618      	mov	r0, r3
 8014382:	f7f9 fd59 	bl	800de38 <_ZNSt5arrayIS_IfLj3EELj1EEixEj>
 8014386:	4606      	mov	r6, r0
 8014388:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 801438c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8014390:	4619      	mov	r1, r3
 8014392:	6878      	ldr	r0, [r7, #4]
 8014394:	f7fa fcff 	bl	800ed96 <_ZN3Mat6MatrixILt6ELt1EEclEtt>
 8014398:	4604      	mov	r4, r0
 801439a:	4631      	mov	r1, r6
 801439c:	4628      	mov	r0, r5
 801439e:	f7f9 fd74 	bl	800de8a <_ZN3Mat13Multiply_rowsILj3EEEfRKSt5arrayIfXT_EES4_>
 80143a2:	eef0 7a40 	vmov.f32	s15, s0
 80143a6:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 80143aa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80143ae:	3301      	adds	r3, #1
 80143b0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80143b4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d0d3      	beq.n	8014364 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 80143bc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80143c0:	3301      	adds	r3, #1
 80143c2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80143c6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80143ca:	2b05      	cmp	r3, #5
 80143cc:	d9c6      	bls.n	801435c <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0xec>
}
 80143ce:	bf00      	nop
 80143d0:	bf00      	nop
 80143d2:	3774      	adds	r7, #116	; 0x74
 80143d4:	46bd      	mov	sp, r7
 80143d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080143d8 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt6EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 80143d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80143da:	b0ad      	sub	sp, #180	; 0xb4
 80143dc:	af00      	add	r7, sp, #0
 80143de:	60f8      	str	r0, [r7, #12]
 80143e0:	60b9      	str	r1, [r7, #8]
 80143e2:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 80143e4:	2300      	movs	r3, #0
 80143e6:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 80143ea:	e02d      	b.n	8014448 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt6EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x70>
		for(u_short col = 0; col < width; ++col)
 80143ec:	2300      	movs	r3, #0
 80143ee:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 80143f2:	e020      	b.n	8014436 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt6EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 80143f4:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 80143f8:	f107 0314 	add.w	r3, r7, #20
 80143fc:	4611      	mov	r1, r2
 80143fe:	4618      	mov	r0, r3
 8014400:	f000 f911 	bl	8014626 <_ZNSt5arrayIS_IfLj3EELj6EEixEj>
 8014404:	4602      	mov	r2, r0
 8014406:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 801440a:	4619      	mov	r1, r3
 801440c:	4610      	mov	r0, r2
 801440e:	f7f9 fb20 	bl	800da52 <_ZNSt5arrayIfLj3EEixEj>
 8014412:	4604      	mov	r4, r0
 8014414:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8014418:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 801441c:	4619      	mov	r1, r3
 801441e:	68f8      	ldr	r0, [r7, #12]
 8014420:	f000 f8aa 	bl	8014578 <_ZNK3Mat6MatrixILt6ELt3EEclEtt>
 8014424:	eef0 7a40 	vmov.f32	s15, s0
 8014428:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 801442c:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8014430:	3301      	adds	r3, #1
 8014432:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 8014436:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 801443a:	2b02      	cmp	r3, #2
 801443c:	d9da      	bls.n	80143f4 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt6EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 801443e:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8014442:	3301      	adds	r3, #1
 8014444:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8014448:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 801444c:	2b05      	cmp	r3, #5
 801444e:	d9cd      	bls.n	80143ec <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt6EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x14>
	for(u_short col = 0; col < other_width; ++col)
 8014450:	2300      	movs	r3, #0
 8014452:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8014456:	e02d      	b.n	80144b4 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt6EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0xdc>
		for(u_short row = 0; row < width; ++row)
 8014458:	2300      	movs	r3, #0
 801445a:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 801445e:	e020      	b.n	80144a2 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt6EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0xca>
			other_columns[col][row] = other(row, col);
 8014460:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 8014464:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8014468:	4611      	mov	r1, r2
 801446a:	4618      	mov	r0, r3
 801446c:	f000 f8db 	bl	8014626 <_ZNSt5arrayIS_IfLj3EELj6EEixEj>
 8014470:	4602      	mov	r2, r0
 8014472:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8014476:	4619      	mov	r1, r3
 8014478:	4610      	mov	r0, r2
 801447a:	f7f9 faea 	bl	800da52 <_ZNSt5arrayIfLj3EEixEj>
 801447e:	4604      	mov	r4, r0
 8014480:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 8014484:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8014488:	4619      	mov	r1, r3
 801448a:	68b8      	ldr	r0, [r7, #8]
 801448c:	f7ff fcb5 	bl	8013dfa <_ZNK3Mat6MatrixILt3ELt6EEclEtt>
 8014490:	eef0 7a40 	vmov.f32	s15, s0
 8014494:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 8014498:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 801449c:	3301      	adds	r3, #1
 801449e:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80144a2:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80144a6:	2b02      	cmp	r3, #2
 80144a8:	d9da      	bls.n	8014460 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt6EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x88>
	for(u_short col = 0; col < other_width; ++col)
 80144aa:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80144ae:	3301      	adds	r3, #1
 80144b0:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80144b4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80144b8:	2b05      	cmp	r3, #5
 80144ba:	d9cd      	bls.n	8014458 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt6EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x80>
	for(u_short row = 0; row < heigth; ++row)
 80144bc:	2300      	movs	r3, #0
 80144be:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 80144c2:	e034      	b.n	801452e <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt6EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x156>
		for(u_short col = 0; col < other_width; ++col)
 80144c4:	2300      	movs	r3, #0
 80144c6:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 80144ca:	e027      	b.n	801451c <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt6EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 80144cc:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 80144d0:	f107 0314 	add.w	r3, r7, #20
 80144d4:	4611      	mov	r1, r2
 80144d6:	4618      	mov	r0, r3
 80144d8:	f000 f8a5 	bl	8014626 <_ZNSt5arrayIS_IfLj3EELj6EEixEj>
 80144dc:	4605      	mov	r5, r0
 80144de:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80144e2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80144e6:	4611      	mov	r1, r2
 80144e8:	4618      	mov	r0, r3
 80144ea:	f000 f89c 	bl	8014626 <_ZNSt5arrayIS_IfLj3EELj6EEixEj>
 80144ee:	4606      	mov	r6, r0
 80144f0:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80144f4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80144f8:	4619      	mov	r1, r3
 80144fa:	6878      	ldr	r0, [r7, #4]
 80144fc:	f7f9 f9fe 	bl	800d8fc <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 8014500:	4604      	mov	r4, r0
 8014502:	4631      	mov	r1, r6
 8014504:	4628      	mov	r0, r5
 8014506:	f7f9 fcc0 	bl	800de8a <_ZN3Mat13Multiply_rowsILj3EEEfRKSt5arrayIfXT_EES4_>
 801450a:	eef0 7a40 	vmov.f32	s15, s0
 801450e:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 8014512:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8014516:	3301      	adds	r3, #1
 8014518:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 801451c:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8014520:	2b05      	cmp	r3, #5
 8014522:	d9d3      	bls.n	80144cc <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt6EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 8014524:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8014528:	3301      	adds	r3, #1
 801452a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 801452e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8014532:	2b05      	cmp	r3, #5
 8014534:	d9c6      	bls.n	80144c4 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt6EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0xec>
}
 8014536:	bf00      	nop
 8014538:	bf00      	nop
 801453a:	37b4      	adds	r7, #180	; 0xb4
 801453c:	46bd      	mov	sp, r7
 801453e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014540 <_ZSt8for_eachIPfZN3Mat6MatrixILt6ELt3EEC4EfEUlRfE_ET0_T_S7_S6_>:
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
 8014540:	b580      	push	{r7, lr}
 8014542:	b084      	sub	sp, #16
 8014544:	af00      	add	r7, sp, #0
 8014546:	60f8      	str	r0, [r7, #12]
 8014548:	60b9      	str	r1, [r7, #8]
 801454a:	ed87 0a01 	vstr	s0, [r7, #4]
      for (; __first != __last; ++__first)
 801454e:	e007      	b.n	8014560 <_ZSt8for_eachIPfZN3Mat6MatrixILt6ELt3EEC4EfEUlRfE_ET0_T_S7_S6_+0x20>
	__f(*__first);
 8014550:	1d3b      	adds	r3, r7, #4
 8014552:	68f9      	ldr	r1, [r7, #12]
 8014554:	4618      	mov	r0, r3
 8014556:	f7ff facd 	bl	8013af4 <_ZZN3Mat6MatrixILt6ELt3EEC4EfENKUlRfE_clES2_>
      for (; __first != __last; ++__first)
 801455a:	68fb      	ldr	r3, [r7, #12]
 801455c:	3304      	adds	r3, #4
 801455e:	60fb      	str	r3, [r7, #12]
 8014560:	68fa      	ldr	r2, [r7, #12]
 8014562:	68bb      	ldr	r3, [r7, #8]
 8014564:	429a      	cmp	r2, r3
 8014566:	d1f3      	bne.n	8014550 <_ZSt8for_eachIPfZN3Mat6MatrixILt6ELt3EEC4EfEUlRfE_ET0_T_S7_S6_+0x10>
      return __f; // N.B. [alg.foreach] says std::move(f) but it's redundant.
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	ee07 3a90 	vmov	s15, r3
    }
 801456e:	eeb0 0a67 	vmov.f32	s0, s15
 8014572:	3710      	adds	r7, #16
 8014574:	46bd      	mov	sp, r7
 8014576:	bd80      	pop	{r7, pc}

08014578 <_ZNK3Mat6MatrixILt6ELt3EEclEtt>:
float Matrix<heigth, width>::operator()(u_short row, u_short col) const
 8014578:	b580      	push	{r7, lr}
 801457a:	b084      	sub	sp, #16
 801457c:	af00      	add	r7, sp, #0
 801457e:	6078      	str	r0, [r7, #4]
 8014580:	460b      	mov	r3, r1
 8014582:	807b      	strh	r3, [r7, #2]
 8014584:	4613      	mov	r3, r2
 8014586:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 8014588:	887a      	ldrh	r2, [r7, #2]
 801458a:	4613      	mov	r3, r2
 801458c:	005b      	lsls	r3, r3, #1
 801458e:	441a      	add	r2, r3
 8014590:	883b      	ldrh	r3, [r7, #0]
 8014592:	4413      	add	r3, r2
 8014594:	60fb      	str	r3, [r7, #12]
	return _values[index];
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	68f9      	ldr	r1, [r7, #12]
 801459a:	4618      	mov	r0, r3
 801459c:	f000 f834 	bl	8014608 <_ZNKSt5arrayIfLj18EEixEj>
 80145a0:	4603      	mov	r3, r0
 80145a2:	681b      	ldr	r3, [r3, #0]
 80145a4:	ee07 3a90 	vmov	s15, r3
}
 80145a8:	eeb0 0a67 	vmov.f32	s0, s15
 80145ac:	3710      	adds	r7, #16
 80145ae:	46bd      	mov	sp, r7
 80145b0:	bd80      	pop	{r7, pc}

080145b2 <_ZNSt5arrayIfLj18EE4dataEv>:
      data() noexcept
 80145b2:	b580      	push	{r7, lr}
 80145b4:	b082      	sub	sp, #8
 80145b6:	af00      	add	r7, sp, #0
 80145b8:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	4618      	mov	r0, r3
 80145be:	f000 f841 	bl	8014644 <_ZNSt14__array_traitsIfLj18EE6_S_ptrERA18_Kf>
 80145c2:	4603      	mov	r3, r0
 80145c4:	4618      	mov	r0, r3
 80145c6:	3708      	adds	r7, #8
 80145c8:	46bd      	mov	sp, r7
 80145ca:	bd80      	pop	{r7, pc}

080145cc <_ZNSt14__array_traitsIfLj18EE6_S_refERA18_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 80145cc:	b480      	push	{r7}
 80145ce:	b083      	sub	sp, #12
 80145d0:	af00      	add	r7, sp, #0
 80145d2:	6078      	str	r0, [r7, #4]
 80145d4:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 80145d6:	683b      	ldr	r3, [r7, #0]
 80145d8:	009b      	lsls	r3, r3, #2
 80145da:	687a      	ldr	r2, [r7, #4]
 80145dc:	4413      	add	r3, r2
 80145de:	4618      	mov	r0, r3
 80145e0:	370c      	adds	r7, #12
 80145e2:	46bd      	mov	sp, r7
 80145e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145e8:	4770      	bx	lr

080145ea <_ZNSt5arrayIS_IfLj6EELj3EEixEj>:
      operator[](size_type __n) noexcept
 80145ea:	b580      	push	{r7, lr}
 80145ec:	b082      	sub	sp, #8
 80145ee:	af00      	add	r7, sp, #0
 80145f0:	6078      	str	r0, [r7, #4]
 80145f2:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	6839      	ldr	r1, [r7, #0]
 80145f8:	4618      	mov	r0, r3
 80145fa:	f000 f82e 	bl	801465a <_ZNSt14__array_traitsISt5arrayIfLj6EELj3EE6_S_refERA3_KS1_j>
 80145fe:	4603      	mov	r3, r0
      }
 8014600:	4618      	mov	r0, r3
 8014602:	3708      	adds	r7, #8
 8014604:	46bd      	mov	sp, r7
 8014606:	bd80      	pop	{r7, pc}

08014608 <_ZNKSt5arrayIfLj18EEixEj>:
      operator[](size_type __n) const noexcept
 8014608:	b580      	push	{r7, lr}
 801460a:	b082      	sub	sp, #8
 801460c:	af00      	add	r7, sp, #0
 801460e:	6078      	str	r0, [r7, #4]
 8014610:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	6839      	ldr	r1, [r7, #0]
 8014616:	4618      	mov	r0, r3
 8014618:	f7ff ffd8 	bl	80145cc <_ZNSt14__array_traitsIfLj18EE6_S_refERA18_Kfj>
 801461c:	4603      	mov	r3, r0
      }
 801461e:	4618      	mov	r0, r3
 8014620:	3708      	adds	r7, #8
 8014622:	46bd      	mov	sp, r7
 8014624:	bd80      	pop	{r7, pc}

08014626 <_ZNSt5arrayIS_IfLj3EELj6EEixEj>:
      operator[](size_type __n) noexcept
 8014626:	b580      	push	{r7, lr}
 8014628:	b082      	sub	sp, #8
 801462a:	af00      	add	r7, sp, #0
 801462c:	6078      	str	r0, [r7, #4]
 801462e:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	6839      	ldr	r1, [r7, #0]
 8014634:	4618      	mov	r0, r3
 8014636:	f000 f822 	bl	801467e <_ZNSt14__array_traitsISt5arrayIfLj3EELj6EE6_S_refERA6_KS1_j>
 801463a:	4603      	mov	r3, r0
      }
 801463c:	4618      	mov	r0, r3
 801463e:	3708      	adds	r7, #8
 8014640:	46bd      	mov	sp, r7
 8014642:	bd80      	pop	{r7, pc}

08014644 <_ZNSt14__array_traitsIfLj18EE6_S_ptrERA18_Kf>:
      _S_ptr(const _Type& __t) noexcept
 8014644:	b480      	push	{r7}
 8014646:	b083      	sub	sp, #12
 8014648:	af00      	add	r7, sp, #0
 801464a:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	4618      	mov	r0, r3
 8014650:	370c      	adds	r7, #12
 8014652:	46bd      	mov	sp, r7
 8014654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014658:	4770      	bx	lr

0801465a <_ZNSt14__array_traitsISt5arrayIfLj6EELj3EE6_S_refERA3_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 801465a:	b480      	push	{r7}
 801465c:	b083      	sub	sp, #12
 801465e:	af00      	add	r7, sp, #0
 8014660:	6078      	str	r0, [r7, #4]
 8014662:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8014664:	683a      	ldr	r2, [r7, #0]
 8014666:	4613      	mov	r3, r2
 8014668:	005b      	lsls	r3, r3, #1
 801466a:	4413      	add	r3, r2
 801466c:	00db      	lsls	r3, r3, #3
 801466e:	687a      	ldr	r2, [r7, #4]
 8014670:	4413      	add	r3, r2
 8014672:	4618      	mov	r0, r3
 8014674:	370c      	adds	r7, #12
 8014676:	46bd      	mov	sp, r7
 8014678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801467c:	4770      	bx	lr

0801467e <_ZNSt14__array_traitsISt5arrayIfLj3EELj6EE6_S_refERA6_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 801467e:	b480      	push	{r7}
 8014680:	b083      	sub	sp, #12
 8014682:	af00      	add	r7, sp, #0
 8014684:	6078      	str	r0, [r7, #4]
 8014686:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8014688:	683a      	ldr	r2, [r7, #0]
 801468a:	4613      	mov	r3, r2
 801468c:	005b      	lsls	r3, r3, #1
 801468e:	4413      	add	r3, r2
 8014690:	009b      	lsls	r3, r3, #2
 8014692:	687a      	ldr	r2, [r7, #4]
 8014694:	4413      	add	r3, r2
 8014696:	4618      	mov	r0, r3
 8014698:	370c      	adds	r7, #12
 801469a:	46bd      	mov	sp, r7
 801469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146a0:	4770      	bx	lr

080146a2 <_ZN10Algorithms15FusionAlgorithm9InitStateERKN3Mat6MatrixILt3ELt1EEES5_f>:
//		const OrientationEKF::StateVec& oriState, const OrientationEKF::StateCovarianceMatrix& oriCov,
//		const VelocityEKF::StateVec& velState, const VelocityEKF::StateCovarianceMatrix& velCov,
//		float time) : _orientationEKF{oriState, oriCov, time}, _velocityEKF{velState, velCov, time}{}

void FusionAlgorithm::InitState(const Matrix<3, 1>& acc, const Matrix<3, 1>& mag, float time)
{
 80146a2:	b580      	push	{r7, lr}
 80146a4:	b084      	sub	sp, #16
 80146a6:	af00      	add	r7, sp, #0
 80146a8:	60f8      	str	r0, [r7, #12]
 80146aa:	60b9      	str	r1, [r7, #8]
 80146ac:	607a      	str	r2, [r7, #4]
 80146ae:	ed87 0a00 	vstr	s0, [r7]
	LOG("INIT");
//	_orientationEKF.Initialise(acc, mag, time);
//	const auto& _state = _orientationEKF.GetState();
//	LOG("State: %f, %f, %f, %f", _state(0), _state(1), _state(2), _state(3));
	_AHRSKalman.InitialiseKalman(acc, mag, time);
 80146b2:	68fb      	ldr	r3, [r7, #12]
 80146b4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80146b8:	ed97 0a00 	vldr	s0, [r7]
 80146bc:	687a      	ldr	r2, [r7, #4]
 80146be:	68b9      	ldr	r1, [r7, #8]
 80146c0:	4618      	mov	r0, r3
 80146c2:	f7fa ff9a 	bl	800f5fa <_ZN10Algorithms10AHRSKalman16InitialiseKalmanERKN3Mat6MatrixILt3ELt1EEES5_f>
}
 80146c6:	bf00      	nop
 80146c8:	3710      	adds	r7, #16
 80146ca:	46bd      	mov	sp, r7
 80146cc:	bd80      	pop	{r7, pc}
	...

080146d0 <_ZN10Algorithms15FusionAlgorithm9OnIMUDataERKN3Mat6MatrixILt3ELt1EEES5_S5_f>:

//void FusionAlgorithm::OnIMUData(const AGMSensorData& imuData)
void FusionAlgorithm::OnIMUData(const Matrix<3, 1>& acc, const Matrix<3, 1>& gyro, const Matrix<3, 1>& mag, float time)
{
 80146d0:	b580      	push	{r7, lr}
 80146d2:	b09c      	sub	sp, #112	; 0x70
 80146d4:	af00      	add	r7, sp, #0
 80146d6:	6178      	str	r0, [r7, #20]
 80146d8:	6139      	str	r1, [r7, #16]
 80146da:	60fa      	str	r2, [r7, #12]
 80146dc:	60bb      	str	r3, [r7, #8]
 80146de:	ed87 0a01 	vstr	s0, [r7, #4]
//	_orientationEKF.Update(_orientationMeassurementVec, _orientationMeassurementCov, imuData.SensorTime);
	//const OrientationEKF::StateVec& q = _orientationEKF.GetState();
	//LOG("EKF: \t%f, \t%f, \t%f", GetRoll(), GetPitch(), GetYaw());
	//LOG("ORIENTATION: \t%f, \t%f, \t%f, \t%f", q(0), q(1), q(2), q(3));
//AHRS
	_AHRSKalman.UpdateState(gyro, time);
 80146e2:	697b      	ldr	r3, [r7, #20]
 80146e4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80146e8:	ed97 0a01 	vldr	s0, [r7, #4]
 80146ec:	68f9      	ldr	r1, [r7, #12]
 80146ee:	4618      	mov	r0, r3
 80146f0:	f7fb f956 	bl	800f9a0 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf>
	_AHRSKalman.CorrectStateAcc(acc, time);
 80146f4:	697b      	ldr	r3, [r7, #20]
 80146f6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80146fa:	ed97 0a01 	vldr	s0, [r7, #4]
 80146fe:	6939      	ldr	r1, [r7, #16]
 8014700:	4618      	mov	r0, r3
 8014702:	f7fc faa3 	bl	8010c4c <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf>
	_AHRSKalman.CorrectStateMag(mag, time);
 8014706:	697b      	ldr	r3, [r7, #20]
 8014708:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801470c:	ed97 0a01 	vldr	s0, [r7, #4]
 8014710:	68b9      	ldr	r1, [r7, #8]
 8014712:	4618      	mov	r0, r3
 8014714:	f7fb fcf6 	bl	8010104 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf>
	const auto& Q = _AHRSKalman.GetState();
 8014718:	697b      	ldr	r3, [r7, #20]
 801471a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801471e:	4618      	mov	r0, r3
 8014720:	f7fa ff60 	bl	800f5e4 <_ZNK10Algorithms10AHRSKalman8GetStateEv>
 8014724:	66f8      	str	r0, [r7, #108]	; 0x6c
	Mat::Quaternion newAcceleration = {0, acc(0,0), acc(1,0), acc(2,0)};
 8014726:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801472a:	2200      	movs	r2, #0
 801472c:	601a      	str	r2, [r3, #0]
 801472e:	605a      	str	r2, [r3, #4]
 8014730:	609a      	str	r2, [r3, #8]
 8014732:	60da      	str	r2, [r3, #12]
 8014734:	2200      	movs	r2, #0
 8014736:	2100      	movs	r1, #0
 8014738:	6938      	ldr	r0, [r7, #16]
 801473a:	f7f9 fb8c 	bl	800de56 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 801473e:	eef0 7a40 	vmov.f32	s15, s0
 8014742:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8014746:	2200      	movs	r2, #0
 8014748:	2101      	movs	r1, #1
 801474a:	6938      	ldr	r0, [r7, #16]
 801474c:	f7f9 fb83 	bl	800de56 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8014750:	eef0 7a40 	vmov.f32	s15, s0
 8014754:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8014758:	2200      	movs	r2, #0
 801475a:	2102      	movs	r1, #2
 801475c:	6938      	ldr	r0, [r7, #16]
 801475e:	f7f9 fb7a 	bl	800de56 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8014762:	eef0 7a40 	vmov.f32	s15, s0
 8014766:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	newAcceleration = (Q * newAcceleration * Q.Conjugate());
 801476a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801476e:	4619      	mov	r1, r3
 8014770:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8014772:	f000 fdd8 	bl	8015326 <_ZNK3Mat10QuaternionmlERKS0_>
 8014776:	eeb0 6a40 	vmov.f32	s12, s0
 801477a:	eef0 6a60 	vmov.f32	s13, s1
 801477e:	eeb0 7a41 	vmov.f32	s14, s2
 8014782:	eef0 7a61 	vmov.f32	s15, s3
 8014786:	ed87 6a0e 	vstr	s12, [r7, #56]	; 0x38
 801478a:	edc7 6a0f 	vstr	s13, [r7, #60]	; 0x3c
 801478e:	ed87 7a10 	vstr	s14, [r7, #64]	; 0x40
 8014792:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 8014796:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8014798:	f000 fec1 	bl	801551e <_ZNK3Mat10Quaternion9ConjugateEv>
 801479c:	eeb0 6a40 	vmov.f32	s12, s0
 80147a0:	eef0 6a60 	vmov.f32	s13, s1
 80147a4:	eeb0 7a41 	vmov.f32	s14, s2
 80147a8:	eef0 7a61 	vmov.f32	s15, s3
 80147ac:	ed87 6a12 	vstr	s12, [r7, #72]	; 0x48
 80147b0:	edc7 6a13 	vstr	s13, [r7, #76]	; 0x4c
 80147b4:	ed87 7a14 	vstr	s14, [r7, #80]	; 0x50
 80147b8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
 80147bc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80147c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80147c4:	4611      	mov	r1, r2
 80147c6:	4618      	mov	r0, r3
 80147c8:	f000 fdad 	bl	8015326 <_ZNK3Mat10QuaternionmlERKS0_>
 80147cc:	eeb0 6a40 	vmov.f32	s12, s0
 80147d0:	eef0 6a60 	vmov.f32	s13, s1
 80147d4:	eeb0 7a41 	vmov.f32	s14, s2
 80147d8:	eef0 7a61 	vmov.f32	s15, s3
 80147dc:	ed87 6a0a 	vstr	s12, [r7, #40]	; 0x28
 80147e0:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 80147e4:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 80147e8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	V_Vector<3> accENU{{newAcceleration.x, newAcceleration.y, newAcceleration.z}};
 80147ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80147f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80147f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80147f6:	663b      	str	r3, [r7, #96]	; 0x60
 80147f8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80147fc:	f107 031c 	add.w	r3, r7, #28
 8014800:	4611      	mov	r1, r2
 8014802:	4618      	mov	r0, r3
 8014804:	f7fd ffee 	bl	80127e4 <_ZN3Mat8V_VectorILt3EEC1ERKSt5arrayIfLj3EE>
	//accENU(2) -= Gravity;
	accENU(1) += 0.5f;
 8014808:	f107 031c 	add.w	r3, r7, #28
 801480c:	2101      	movs	r1, #1
 801480e:	4618      	mov	r0, r3
 8014810:	f000 fca0 	bl	8015154 <_ZN3Mat8V_VectorILt3EEclEt>
 8014814:	4603      	mov	r3, r0
 8014816:	edd3 7a00 	vldr	s15, [r3]
 801481a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801481e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014822:	edc3 7a00 	vstr	s15, [r3]
	accENU(2) -= 9.65f;
 8014826:	f107 031c 	add.w	r3, r7, #28
 801482a:	2102      	movs	r1, #2
 801482c:	4618      	mov	r0, r3
 801482e:	f000 fc91 	bl	8015154 <_ZN3Mat8V_VectorILt3EEclEt>
 8014832:	4603      	mov	r3, r0
 8014834:	edd3 7a00 	vldr	s15, [r3]
 8014838:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80148b4 <_ZN10Algorithms15FusionAlgorithm9OnIMUDataERKN3Mat6MatrixILt3ELt1EEES5_S5_f+0x1e4>
 801483c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014840:	edc3 7a00 	vstr	s15, [r3]
	static const Mat::Matrix<3,3> globalAccCov = Eye<3>(0.1f);
 8014844:	4b1c      	ldr	r3, [pc, #112]	; (80148b8 <_ZN10Algorithms15FusionAlgorithm9OnIMUDataERKN3Mat6MatrixILt3ELt1EEES5_S5_f+0x1e8>)
 8014846:	681b      	ldr	r3, [r3, #0]
 8014848:	f3bf 8f5b 	dmb	ish
 801484c:	f003 0301 	and.w	r3, r3, #1
 8014850:	2b00      	cmp	r3, #0
 8014852:	bf0c      	ite	eq
 8014854:	2301      	moveq	r3, #1
 8014856:	2300      	movne	r3, #0
 8014858:	b2db      	uxtb	r3, r3
 801485a:	2b00      	cmp	r3, #0
 801485c:	d013      	beq.n	8014886 <_ZN10Algorithms15FusionAlgorithm9OnIMUDataERKN3Mat6MatrixILt3ELt1EEES5_S5_f+0x1b6>
 801485e:	4816      	ldr	r0, [pc, #88]	; (80148b8 <_ZN10Algorithms15FusionAlgorithm9OnIMUDataERKN3Mat6MatrixILt3ELt1EEES5_S5_f+0x1e8>)
 8014860:	f004 fcde 	bl	8019220 <__cxa_guard_acquire>
 8014864:	4603      	mov	r3, r0
 8014866:	2b00      	cmp	r3, #0
 8014868:	bf14      	ite	ne
 801486a:	2301      	movne	r3, #1
 801486c:	2300      	moveq	r3, #0
 801486e:	b2db      	uxtb	r3, r3
 8014870:	2b00      	cmp	r3, #0
 8014872:	d008      	beq.n	8014886 <_ZN10Algorithms15FusionAlgorithm9OnIMUDataERKN3Mat6MatrixILt3ELt1EEES5_S5_f+0x1b6>
 8014874:	4b11      	ldr	r3, [pc, #68]	; (80148bc <_ZN10Algorithms15FusionAlgorithm9OnIMUDataERKN3Mat6MatrixILt3ELt1EEES5_S5_f+0x1ec>)
 8014876:	ed9f 0a12 	vldr	s0, [pc, #72]	; 80148c0 <_ZN10Algorithms15FusionAlgorithm9OnIMUDataERKN3Mat6MatrixILt3ELt1EEES5_S5_f+0x1f0>
 801487a:	4618      	mov	r0, r3
 801487c:	f7f8 fed8 	bl	800d630 <_ZN3Mat3EyeILt3EEENS_6MatrixIXT_EXT_EEEf>
 8014880:	480d      	ldr	r0, [pc, #52]	; (80148b8 <_ZN10Algorithms15FusionAlgorithm9OnIMUDataERKN3Mat6MatrixILt3ELt1EEES5_S5_f+0x1e8>)
 8014882:	f004 fcd9 	bl	8019238 <__cxa_guard_release>
//	_velocityEKF.Predict(static_cast<const V_Vector<3>&>(accENU), _GetGlobalAccCov(acc(0,0), acc(1,0), acc(2,0)), time);
	_velocityEKF.Predict(static_cast<const V_Vector<3>&>(accENU), globalAccCov, time);
 8014886:	697b      	ldr	r3, [r7, #20]
 8014888:	f107 011c 	add.w	r1, r7, #28
 801488c:	ed97 0a01 	vldr	s0, [r7, #4]
 8014890:	4a0a      	ldr	r2, [pc, #40]	; (80148bc <_ZN10Algorithms15FusionAlgorithm9OnIMUDataERKN3Mat6MatrixILt3ELt1EEES5_S5_f+0x1ec>)
 8014892:	4618      	mov	r0, r3
 8014894:	f7f9 fce6 	bl	800e264 <_ZN10Algorithms20ExtendedKalmanFilterILt6ELt3ELt6EE7PredictERKN3Mat8V_VectorILt3EEERKNS2_6MatrixILt3ELt3EEEf>
	const auto& vel = _velocityEKF.GetState();
 8014898:	697b      	ldr	r3, [r7, #20]
 801489a:	4618      	mov	r0, r3
 801489c:	f7f8 feec 	bl	800d678 <_ZNK10Algorithms20ExtendedKalmanFilterILt6ELt3ELt6EE8GetStateEv>
 80148a0:	66b8      	str	r0, [r7, #104]	; 0x68
	const auto& cov = _velocityEKF.GetStateCov();
 80148a2:	697b      	ldr	r3, [r7, #20]
 80148a4:	4618      	mov	r0, r3
 80148a6:	f000 fc66 	bl	8015176 <_ZNK10Algorithms20ExtendedKalmanFilterILt6ELt3ELt6EE11GetStateCovEv>
 80148aa:	6678      	str	r0, [r7, #100]	; 0x64
//AHRS
	//V_Vector<3> accL{{imuData.Acc.x, imuData.Acc.y, imuData.Acc.z}};
	//auto accENU = GetRotationMatrix()*accL;
	//accENU(2,0) -= Gravity;
	//_velocityEKF.Predict(static_cast<const V_Vector<3>&>(accENU), _GetGlobalAccCov(accL(0), accL(1), accL(2)), imuData.SensorTime);
}
 80148ac:	bf00      	nop
 80148ae:	3770      	adds	r7, #112	; 0x70
 80148b0:	46bd      	mov	sp, r7
 80148b2:	bd80      	pop	{r7, pc}
 80148b4:	411a6666 	.word	0x411a6666
 80148b8:	24009590 	.word	0x24009590
 80148bc:	2400956c 	.word	0x2400956c
 80148c0:	3dcccccd 	.word	0x3dcccccd

080148c4 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle>:

void FusionAlgorithm::OnGNSSData(const GNSS_StateHandle* GNSSData)
{
 80148c4:	b590      	push	{r4, r7, lr}
 80148c6:	ed2d 8b0c 	vpush	{d8-d13}
 80148ca:	b095      	sub	sp, #84	; 0x54
 80148cc:	af12      	add	r7, sp, #72	; 0x48
 80148ce:	6078      	str	r0, [r7, #4]
 80148d0:	6039      	str	r1, [r7, #0]
	static VelocityEKF::MeassurementVec measurementVec;
 80148d2:	4bd7      	ldr	r3, [pc, #860]	; (8014c30 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x36c>)
 80148d4:	681b      	ldr	r3, [r3, #0]
 80148d6:	f3bf 8f5b 	dmb	ish
 80148da:	f003 0301 	and.w	r3, r3, #1
 80148de:	2b00      	cmp	r3, #0
 80148e0:	bf0c      	ite	eq
 80148e2:	2301      	moveq	r3, #1
 80148e4:	2300      	movne	r3, #0
 80148e6:	b2db      	uxtb	r3, r3
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	d010      	beq.n	801490e <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x4a>
 80148ec:	48d0      	ldr	r0, [pc, #832]	; (8014c30 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x36c>)
 80148ee:	f004 fc97 	bl	8019220 <__cxa_guard_acquire>
 80148f2:	4603      	mov	r3, r0
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	bf14      	ite	ne
 80148f8:	2301      	movne	r3, #1
 80148fa:	2300      	moveq	r3, #0
 80148fc:	b2db      	uxtb	r3, r3
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d005      	beq.n	801490e <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x4a>
 8014902:	48cc      	ldr	r0, [pc, #816]	; (8014c34 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x370>)
 8014904:	f7f8 fe7c 	bl	800d600 <_ZN3Mat8V_VectorILt6EEC1Ev>
 8014908:	48c9      	ldr	r0, [pc, #804]	; (8014c30 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x36c>)
 801490a:	f004 fc95 	bl	8019238 <__cxa_guard_release>
	static VelocityEKF::MeasurementCovarianceMatrix measurementCov = Eye<6>(1.0f);
 801490e:	4bca      	ldr	r3, [pc, #808]	; (8014c38 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x374>)
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	f3bf 8f5b 	dmb	ish
 8014916:	f003 0301 	and.w	r3, r3, #1
 801491a:	2b00      	cmp	r3, #0
 801491c:	bf0c      	ite	eq
 801491e:	2301      	moveq	r3, #1
 8014920:	2300      	movne	r3, #0
 8014922:	b2db      	uxtb	r3, r3
 8014924:	2b00      	cmp	r3, #0
 8014926:	d013      	beq.n	8014950 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x8c>
 8014928:	48c3      	ldr	r0, [pc, #780]	; (8014c38 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x374>)
 801492a:	f004 fc79 	bl	8019220 <__cxa_guard_acquire>
 801492e:	4603      	mov	r3, r0
 8014930:	2b00      	cmp	r3, #0
 8014932:	bf14      	ite	ne
 8014934:	2301      	movne	r3, #1
 8014936:	2300      	moveq	r3, #0
 8014938:	b2db      	uxtb	r3, r3
 801493a:	2b00      	cmp	r3, #0
 801493c:	d008      	beq.n	8014950 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x8c>
 801493e:	4bbf      	ldr	r3, [pc, #764]	; (8014c3c <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x378>)
 8014940:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014944:	4618      	mov	r0, r3
 8014946:	f7f8 fdf7 	bl	800d538 <_ZN3Mat3EyeILt6EEENS_6MatrixIXT_EXT_EEEf>
 801494a:	48bb      	ldr	r0, [pc, #748]	; (8014c38 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x374>)
 801494c:	f004 fc74 	bl	8019238 <__cxa_guard_release>
	measurementVec(0) = ((float)GNSSData->velE) * mm2m;
 8014950:	683b      	ldr	r3, [r7, #0]
 8014952:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8014956:	ee07 3a90 	vmov	s15, r3
 801495a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 801495e:	2100      	movs	r1, #0
 8014960:	48b4      	ldr	r0, [pc, #720]	; (8014c34 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x370>)
 8014962:	f7fe ffcd 	bl	8013900 <_ZN3Mat8V_VectorILt6EEclEt>
 8014966:	4603      	mov	r3, r0
 8014968:	eddf 7ab7 	vldr	s15, [pc, #732]	; 8014c48 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x384>
 801496c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8014970:	edc3 7a00 	vstr	s15, [r3]
	measurementVec(1) = ((float)GNSSData->velN) * mm2m;
 8014974:	683b      	ldr	r3, [r7, #0]
 8014976:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 801497a:	ee07 3a90 	vmov	s15, r3
 801497e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8014982:	2101      	movs	r1, #1
 8014984:	48ab      	ldr	r0, [pc, #684]	; (8014c34 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x370>)
 8014986:	f7fe ffbb 	bl	8013900 <_ZN3Mat8V_VectorILt6EEclEt>
 801498a:	4603      	mov	r3, r0
 801498c:	eddf 7aae 	vldr	s15, [pc, #696]	; 8014c48 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x384>
 8014990:	ee68 7a27 	vmul.f32	s15, s16, s15
 8014994:	edc3 7a00 	vstr	s15, [r3]
	measurementVec(2) = -((float)GNSSData->velD) * mm2m;
 8014998:	683b      	ldr	r3, [r7, #0]
 801499a:	f8d3 3434 	ldr.w	r3, [r3, #1076]	; 0x434
 801499e:	ee07 3a90 	vmov	s15, r3
 80149a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80149a6:	eeb1 8a67 	vneg.f32	s16, s15
 80149aa:	2102      	movs	r1, #2
 80149ac:	48a1      	ldr	r0, [pc, #644]	; (8014c34 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x370>)
 80149ae:	f7fe ffa7 	bl	8013900 <_ZN3Mat8V_VectorILt6EEclEt>
 80149b2:	4603      	mov	r3, r0
 80149b4:	eddf 7aa4 	vldr	s15, [pc, #656]	; 8014c48 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x384>
 80149b8:	ee68 7a27 	vmul.f32	s15, s16, s15
 80149bc:	edc3 7a00 	vstr	s15, [r3]
	measurementVec(3) = GNSSData->fLat;
 80149c0:	2103      	movs	r1, #3
 80149c2:	489c      	ldr	r0, [pc, #624]	; (8014c34 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x370>)
 80149c4:	f7fe ff9c 	bl	8013900 <_ZN3Mat8V_VectorILt6EEclEt>
 80149c8:	4602      	mov	r2, r0
 80149ca:	683b      	ldr	r3, [r7, #0]
 80149cc:	f203 4314 	addw	r3, r3, #1044	; 0x414
 80149d0:	681b      	ldr	r3, [r3, #0]
 80149d2:	6013      	str	r3, [r2, #0]
	measurementVec(4) = GNSSData->fLon;
 80149d4:	2104      	movs	r1, #4
 80149d6:	4897      	ldr	r0, [pc, #604]	; (8014c34 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x370>)
 80149d8:	f7fe ff92 	bl	8013900 <_ZN3Mat8V_VectorILt6EEclEt>
 80149dc:	4602      	mov	r2, r0
 80149de:	683b      	ldr	r3, [r7, #0]
 80149e0:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80149e4:	681b      	ldr	r3, [r3, #0]
 80149e6:	6013      	str	r3, [r2, #0]
	measurementVec(5) = ((float)GNSSData->hMSL) * mm2m;
 80149e8:	683b      	ldr	r3, [r7, #0]
 80149ea:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 80149ee:	ee07 3a90 	vmov	s15, r3
 80149f2:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80149f6:	2105      	movs	r1, #5
 80149f8:	488e      	ldr	r0, [pc, #568]	; (8014c34 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x370>)
 80149fa:	f7fe ff81 	bl	8013900 <_ZN3Mat8V_VectorILt6EEclEt>
 80149fe:	4603      	mov	r3, r0
 8014a00:	eddf 7a91 	vldr	s15, [pc, #580]	; 8014c48 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x384>
 8014a04:	ee68 7a27 	vmul.f32	s15, s16, s15
 8014a08:	edc3 7a00 	vstr	s15, [r3]
	//LOG("measurementVec: \t%f, \t%f, \t%f, \t%f, \t%f, \t%f", measurementVec(0), measurementVec(1), measurementVec(2), measurementVec(3), measurementVec(4), measurementVec(5));
	measurementCov(0,0) = ((float)GNSSData->sAcc) * mm2m * ((float)GNSSData->sAcc) * mm2m;
 8014a0c:	683b      	ldr	r3, [r7, #0]
 8014a0e:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
 8014a12:	ee07 3a90 	vmov	s15, r3
 8014a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014a1a:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8014c48 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x384>
 8014a1e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8014a22:	683b      	ldr	r3, [r7, #0]
 8014a24:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
 8014a28:	ee07 3a90 	vmov	s15, r3
 8014a2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014a30:	ee27 8a27 	vmul.f32	s16, s14, s15
 8014a34:	2200      	movs	r2, #0
 8014a36:	2100      	movs	r1, #0
 8014a38:	4880      	ldr	r0, [pc, #512]	; (8014c3c <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x378>)
 8014a3a:	f7f8 ff5f 	bl	800d8fc <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 8014a3e:	4603      	mov	r3, r0
 8014a40:	eddf 7a81 	vldr	s15, [pc, #516]	; 8014c48 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x384>
 8014a44:	ee68 7a27 	vmul.f32	s15, s16, s15
 8014a48:	edc3 7a00 	vstr	s15, [r3]
	measurementCov(1,1) = ((float)GNSSData->sAcc) * mm2m * ((float)GNSSData->sAcc) * mm2m;
 8014a4c:	683b      	ldr	r3, [r7, #0]
 8014a4e:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
 8014a52:	ee07 3a90 	vmov	s15, r3
 8014a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014a5a:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8014c48 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x384>
 8014a5e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8014a62:	683b      	ldr	r3, [r7, #0]
 8014a64:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
 8014a68:	ee07 3a90 	vmov	s15, r3
 8014a6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014a70:	ee27 8a27 	vmul.f32	s16, s14, s15
 8014a74:	2201      	movs	r2, #1
 8014a76:	2101      	movs	r1, #1
 8014a78:	4870      	ldr	r0, [pc, #448]	; (8014c3c <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x378>)
 8014a7a:	f7f8 ff3f 	bl	800d8fc <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 8014a7e:	4603      	mov	r3, r0
 8014a80:	eddf 7a71 	vldr	s15, [pc, #452]	; 8014c48 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x384>
 8014a84:	ee68 7a27 	vmul.f32	s15, s16, s15
 8014a88:	edc3 7a00 	vstr	s15, [r3]
	measurementCov(2,2) = ((float)GNSSData->sAcc) * mm2m * ((float)GNSSData->sAcc) * mm2m;
 8014a8c:	683b      	ldr	r3, [r7, #0]
 8014a8e:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
 8014a92:	ee07 3a90 	vmov	s15, r3
 8014a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014a9a:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8014c48 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x384>
 8014a9e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8014aa2:	683b      	ldr	r3, [r7, #0]
 8014aa4:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
 8014aa8:	ee07 3a90 	vmov	s15, r3
 8014aac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014ab0:	ee27 8a27 	vmul.f32	s16, s14, s15
 8014ab4:	2202      	movs	r2, #2
 8014ab6:	2102      	movs	r1, #2
 8014ab8:	4860      	ldr	r0, [pc, #384]	; (8014c3c <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x378>)
 8014aba:	f7f8 ff1f 	bl	800d8fc <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 8014abe:	4603      	mov	r3, r0
 8014ac0:	eddf 7a61 	vldr	s15, [pc, #388]	; 8014c48 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x384>
 8014ac4:	ee68 7a27 	vmul.f32	s15, s16, s15
 8014ac8:	edc3 7a00 	vstr	s15, [r3]
	measurementCov(3,3) = ((float)GNSSData->hAcc) * mm2m * _ER;
 8014acc:	683b      	ldr	r3, [r7, #0]
 8014ace:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8014ad2:	ee07 3a90 	vmov	s15, r3
 8014ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014ada:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8014c48 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x384>
 8014ade:	ee27 8a87 	vmul.f32	s16, s15, s14
 8014ae2:	2203      	movs	r2, #3
 8014ae4:	2103      	movs	r1, #3
 8014ae6:	4855      	ldr	r0, [pc, #340]	; (8014c3c <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x378>)
 8014ae8:	f7f8 ff08 	bl	800d8fc <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 8014aec:	4603      	mov	r3, r0
 8014aee:	eddf 7a55 	vldr	s15, [pc, #340]	; 8014c44 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x380>
 8014af2:	ee68 7a27 	vmul.f32	s15, s16, s15
 8014af6:	edc3 7a00 	vstr	s15, [r3]
	measurementCov(4,4) = ((float)GNSSData->hAcc) * mm2m * _ER / cos(GNSSData->fLat * DEG_2_RAD);
 8014afa:	683b      	ldr	r3, [r7, #0]
 8014afc:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8014b00:	ee07 3a90 	vmov	s15, r3
 8014b04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014b08:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8014c48 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x384>
 8014b0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014b10:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8014c44 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x380>
 8014b14:	ee27 8a87 	vmul.f32	s16, s15, s14
 8014b18:	683b      	ldr	r3, [r7, #0]
 8014b1a:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8014b1e:	edd3 7a00 	vldr	s15, [r3]
 8014b22:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8014c40 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x37c>
 8014b26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014b2a:	eeb0 0a67 	vmov.f32	s0, s15
 8014b2e:	f7fd ffb1 	bl	8012a94 <_ZSt3cosf>
 8014b32:	eef0 8a40 	vmov.f32	s17, s0
 8014b36:	2204      	movs	r2, #4
 8014b38:	2104      	movs	r1, #4
 8014b3a:	4840      	ldr	r0, [pc, #256]	; (8014c3c <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x378>)
 8014b3c:	f7f8 fede 	bl	800d8fc <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 8014b40:	4603      	mov	r3, r0
 8014b42:	eec8 7a28 	vdiv.f32	s15, s16, s17
 8014b46:	edc3 7a00 	vstr	s15, [r3]
	measurementCov(5,5) = ((float)GNSSData->vAcc) * mm2m;
 8014b4a:	683b      	ldr	r3, [r7, #0]
 8014b4c:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 8014b50:	ee07 3a90 	vmov	s15, r3
 8014b54:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8014b58:	2205      	movs	r2, #5
 8014b5a:	2105      	movs	r1, #5
 8014b5c:	4837      	ldr	r0, [pc, #220]	; (8014c3c <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x378>)
 8014b5e:	f7f8 fecd 	bl	800d8fc <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 8014b62:	4603      	mov	r3, r0
 8014b64:	eddf 7a38 	vldr	s15, [pc, #224]	; 8014c48 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x384>
 8014b68:	ee68 7a27 	vmul.f32	s15, s16, s15
 8014b6c:	edc3 7a00 	vstr	s15, [r3]
	//LOG("measurementVec: \t%f, \t%f, \t%f, \t%f, \t%f, \t%f", measurementCov(0,0), measurementCov(1,1), measurementCov(2,2), measurementCov(3,3), measurementCov(4,4), measurementCov(5,5));
	_velocityEKF.Update(measurementVec, measurementCov, _velocityEKF.GetTime());
 8014b70:	687c      	ldr	r4, [r7, #4]
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	4618      	mov	r0, r3
 8014b76:	f000 fb0a 	bl	801518e <_ZNK10Algorithms20ExtendedKalmanFilterILt6ELt3ELt6EE7GetTimeEv>
 8014b7a:	eef0 7a40 	vmov.f32	s15, s0
 8014b7e:	eeb0 0a67 	vmov.f32	s0, s15
 8014b82:	4a2e      	ldr	r2, [pc, #184]	; (8014c3c <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x378>)
 8014b84:	492b      	ldr	r1, [pc, #172]	; (8014c34 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x370>)
 8014b86:	4620      	mov	r0, r4
 8014b88:	f7fd ffa4 	bl	8012ad4 <_ZN10Algorithms11VelocityEKF6UpdateERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEEf>
	printf("%f, %.15f, %.15f, %.15f, %.15f, %.15f, %.15f, %.15f, %.15f, %.15f\n\r", _velocityEKF.GetTime(),
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	4618      	mov	r0, r3
 8014b90:	f000 fafd 	bl	801518e <_ZNK10Algorithms20ExtendedKalmanFilterILt6ELt3ELt6EE7GetTimeEv>
 8014b94:	eef0 7a40 	vmov.f32	s15, s0
 8014b98:	eeb7 dae7 	vcvt.f64.f32	d13, s15
			measurementVec(0), measurementVec(1), measurementVec(2),
 8014b9c:	2100      	movs	r1, #0
 8014b9e:	4825      	ldr	r0, [pc, #148]	; (8014c34 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x370>)
 8014ba0:	f7fe feae 	bl	8013900 <_ZN3Mat8V_VectorILt6EEclEt>
 8014ba4:	4603      	mov	r3, r0
 8014ba6:	edd3 7a00 	vldr	s15, [r3]
	printf("%f, %.15f, %.15f, %.15f, %.15f, %.15f, %.15f, %.15f, %.15f, %.15f\n\r", _velocityEKF.GetTime(),
 8014baa:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
			measurementVec(0), measurementVec(1), measurementVec(2),
 8014bae:	2101      	movs	r1, #1
 8014bb0:	4820      	ldr	r0, [pc, #128]	; (8014c34 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x370>)
 8014bb2:	f7fe fea5 	bl	8013900 <_ZN3Mat8V_VectorILt6EEclEt>
 8014bb6:	4603      	mov	r3, r0
 8014bb8:	edd3 7a00 	vldr	s15, [r3]
	printf("%f, %.15f, %.15f, %.15f, %.15f, %.15f, %.15f, %.15f, %.15f, %.15f\n\r", _velocityEKF.GetTime(),
 8014bbc:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
			measurementVec(0), measurementVec(1), measurementVec(2),
 8014bc0:	2102      	movs	r1, #2
 8014bc2:	481c      	ldr	r0, [pc, #112]	; (8014c34 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x370>)
 8014bc4:	f7fe fe9c 	bl	8013900 <_ZN3Mat8V_VectorILt6EEclEt>
 8014bc8:	4603      	mov	r3, r0
 8014bca:	edd3 7a00 	vldr	s15, [r3]
	printf("%f, %.15f, %.15f, %.15f, %.15f, %.15f, %.15f, %.15f, %.15f, %.15f\n\r", _velocityEKF.GetTime(),
 8014bce:	eeb7 aae7 	vcvt.f64.f32	d10, s15
			measurementVec(3), measurementVec(4), measurementVec(5),
 8014bd2:	2103      	movs	r1, #3
 8014bd4:	4817      	ldr	r0, [pc, #92]	; (8014c34 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x370>)
 8014bd6:	f7fe fe93 	bl	8013900 <_ZN3Mat8V_VectorILt6EEclEt>
 8014bda:	4603      	mov	r3, r0
 8014bdc:	edd3 7a00 	vldr	s15, [r3]
	printf("%f, %.15f, %.15f, %.15f, %.15f, %.15f, %.15f, %.15f, %.15f, %.15f\n\r", _velocityEKF.GetTime(),
 8014be0:	eeb7 bae7 	vcvt.f64.f32	d11, s15
			measurementVec(3), measurementVec(4), measurementVec(5),
 8014be4:	2104      	movs	r1, #4
 8014be6:	4813      	ldr	r0, [pc, #76]	; (8014c34 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x370>)
 8014be8:	f7fe fe8a 	bl	8013900 <_ZN3Mat8V_VectorILt6EEclEt>
 8014bec:	4603      	mov	r3, r0
 8014bee:	edd3 7a00 	vldr	s15, [r3]
	printf("%f, %.15f, %.15f, %.15f, %.15f, %.15f, %.15f, %.15f, %.15f, %.15f\n\r", _velocityEKF.GetTime(),
 8014bf2:	eeb7 cae7 	vcvt.f64.f32	d12, s15
			measurementVec(3), measurementVec(4), measurementVec(5),
 8014bf6:	2105      	movs	r1, #5
 8014bf8:	480e      	ldr	r0, [pc, #56]	; (8014c34 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x370>)
 8014bfa:	f7fe fe81 	bl	8013900 <_ZN3Mat8V_VectorILt6EEclEt>
 8014bfe:	4603      	mov	r3, r0
 8014c00:	edd3 7a00 	vldr	s15, [r3]
	printf("%f, %.15f, %.15f, %.15f, %.15f, %.15f, %.15f, %.15f, %.15f, %.15f\n\r", _velocityEKF.GetTime(),
 8014c04:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			((float)GNSSData->sAcc) * mm2m, ((float)GNSSData->hAcc) * mm2m * _ER, ((float)GNSSData->vAcc) * mm2m);
 8014c08:	683b      	ldr	r3, [r7, #0]
 8014c0a:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
 8014c0e:	ee06 3a90 	vmov	s13, r3
 8014c12:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8014c16:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 8014c48 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x384>
 8014c1a:	ee66 6a86 	vmul.f32	s13, s13, s12
	printf("%f, %.15f, %.15f, %.15f, %.15f, %.15f, %.15f, %.15f, %.15f, %.15f\n\r", _velocityEKF.GetTime(),
 8014c1e:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
			((float)GNSSData->sAcc) * mm2m, ((float)GNSSData->hAcc) * mm2m * _ER, ((float)GNSSData->vAcc) * mm2m);
 8014c22:	683b      	ldr	r3, [r7, #0]
 8014c24:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8014c28:	ee05 3a90 	vmov	s11, r3
 8014c2c:	e00e      	b.n	8014c4c <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x388>
 8014c2e:	bf00      	nop
 8014c30:	240095ac 	.word	0x240095ac
 8014c34:	24009594 	.word	0x24009594
 8014c38:	24009640 	.word	0x24009640
 8014c3c:	240095b0 	.word	0x240095b0
 8014c40:	3c8ee7a4 	.word	0x3c8ee7a4
 8014c44:	3428892d 	.word	0x3428892d
 8014c48:	3a83126f 	.word	0x3a83126f
 8014c4c:	eef8 5a65 	vcvt.f32.u32	s11, s11
 8014c50:	ed1f 5a03 	vldr	s10, [pc, #-12]	; 8014c48 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x384>
 8014c54:	ee65 5a85 	vmul.f32	s11, s11, s10
 8014c58:	ed1f 5a06 	vldr	s10, [pc, #-24]	; 8014c44 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x380>
 8014c5c:	ee65 5a85 	vmul.f32	s11, s11, s10
	printf("%f, %.15f, %.15f, %.15f, %.15f, %.15f, %.15f, %.15f, %.15f, %.15f\n\r", _velocityEKF.GetTime(),
 8014c60:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
			((float)GNSSData->sAcc) * mm2m, ((float)GNSSData->hAcc) * mm2m * _ER, ((float)GNSSData->vAcc) * mm2m);
 8014c64:	683b      	ldr	r3, [r7, #0]
 8014c66:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 8014c6a:	ee04 3a90 	vmov	s9, r3
 8014c6e:	eef8 4a64 	vcvt.f32.u32	s9, s9
 8014c72:	ed1f 4a0b 	vldr	s8, [pc, #-44]	; 8014c48 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x384>
 8014c76:	ee64 4a84 	vmul.f32	s9, s9, s8
	printf("%f, %.15f, %.15f, %.15f, %.15f, %.15f, %.15f, %.15f, %.15f, %.15f\n\r", _velocityEKF.GetTime(),
 8014c7a:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 8014c7e:	ed8d 4b10 	vstr	d4, [sp, #64]	; 0x40
 8014c82:	ed8d 5b0e 	vstr	d5, [sp, #56]	; 0x38
 8014c86:	ed8d 6b0c 	vstr	d6, [sp, #48]	; 0x30
 8014c8a:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8014c8e:	ed8d cb08 	vstr	d12, [sp, #32]
 8014c92:	ed8d bb06 	vstr	d11, [sp, #24]
 8014c96:	ed8d ab04 	vstr	d10, [sp, #16]
 8014c9a:	ed8d 9b02 	vstr	d9, [sp, #8]
 8014c9e:	ed8d 8b00 	vstr	d8, [sp]
 8014ca2:	ec53 2b1d 	vmov	r2, r3, d13
 8014ca6:	4804      	ldr	r0, [pc, #16]	; (8014cb8 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x3f4>)
 8014ca8:	f005 f996 	bl	8019fd8 <iprintf>
}
 8014cac:	bf00      	nop
 8014cae:	370c      	adds	r7, #12
 8014cb0:	46bd      	mov	sp, r7
 8014cb2:	ecbd 8b0c 	vpop	{d8-d13}
 8014cb6:	bd90      	pop	{r4, r7, pc}
 8014cb8:	0801bf38 	.word	0x0801bf38

08014cbc <_ZNK10Algorithms15FusionAlgorithm17GetRotationMatrixEv>:
	float yaw = atan2(2.0f * (q(1) * q(2) + q(0) * q(3)), q(0) * q(0) + q(1) * q(1) - q(2) * q(2) - q(3) * q(3));
	return yaw * 57.29578f + 180.0f;
}

const Matrix<3,3>& FusionAlgorithm::GetRotationMatrix() const
{
 8014cbc:	b5b0      	push	{r4, r5, r7, lr}
 8014cbe:	ed2d 8b02 	vpush	{d8}
 8014cc2:	b09e      	sub	sp, #120	; 0x78
 8014cc4:	af00      	add	r7, sp, #0
 8014cc6:	6078      	str	r0, [r7, #4]
	static Matrix<3,3> rotationMatrix;
 8014cc8:	4b0f      	ldr	r3, [pc, #60]	; (8014d08 <_ZNK10Algorithms15FusionAlgorithm17GetRotationMatrixEv+0x4c>)
 8014cca:	681b      	ldr	r3, [r3, #0]
 8014ccc:	f3bf 8f5b 	dmb	ish
 8014cd0:	f003 0301 	and.w	r3, r3, #1
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	bf0c      	ite	eq
 8014cd8:	2301      	moveq	r3, #1
 8014cda:	2300      	movne	r3, #0
 8014cdc:	b2db      	uxtb	r3, r3
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	d016      	beq.n	8014d10 <_ZNK10Algorithms15FusionAlgorithm17GetRotationMatrixEv+0x54>
 8014ce2:	4809      	ldr	r0, [pc, #36]	; (8014d08 <_ZNK10Algorithms15FusionAlgorithm17GetRotationMatrixEv+0x4c>)
 8014ce4:	f004 fa9c 	bl	8019220 <__cxa_guard_acquire>
 8014ce8:	4603      	mov	r3, r0
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	bf14      	ite	ne
 8014cee:	2301      	movne	r3, #1
 8014cf0:	2300      	moveq	r3, #0
 8014cf2:	b2db      	uxtb	r3, r3
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	d00b      	beq.n	8014d10 <_ZNK10Algorithms15FusionAlgorithm17GetRotationMatrixEv+0x54>
 8014cf8:	4804      	ldr	r0, [pc, #16]	; (8014d0c <_ZNK10Algorithms15FusionAlgorithm17GetRotationMatrixEv+0x50>)
 8014cfa:	f7f8 fc69 	bl	800d5d0 <_ZN3Mat6MatrixILt3ELt3EEC1Ev>
 8014cfe:	4802      	ldr	r0, [pc, #8]	; (8014d08 <_ZNK10Algorithms15FusionAlgorithm17GetRotationMatrixEv+0x4c>)
 8014d00:	f004 fa9a 	bl	8019238 <__cxa_guard_release>
 8014d04:	e004      	b.n	8014d10 <_ZNK10Algorithms15FusionAlgorithm17GetRotationMatrixEv+0x54>
 8014d06:	bf00      	nop
 8014d08:	24009668 	.word	0x24009668
 8014d0c:	24009644 	.word	0x24009644
	//const OrientationEKF::StateVec& q = _orientationEKF.GetState();
//AHRS
	const auto& Q = _AHRSKalman.GetState();
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8014d16:	4618      	mov	r0, r3
 8014d18:	f7fa fc64 	bl	800f5e4 <_ZNK10Algorithms10AHRSKalman8GetStateEv>
 8014d1c:	6778      	str	r0, [r7, #116]	; 0x74
	const OrientationEKF::StateVec q{{Q.w, Q.x, Q.y, Q.z}};
 8014d1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014d20:	681b      	ldr	r3, [r3, #0]
 8014d22:	61fb      	str	r3, [r7, #28]
 8014d24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014d26:	685b      	ldr	r3, [r3, #4]
 8014d28:	623b      	str	r3, [r7, #32]
 8014d2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014d2c:	689b      	ldr	r3, [r3, #8]
 8014d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8014d30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014d32:	68db      	ldr	r3, [r3, #12]
 8014d34:	62bb      	str	r3, [r7, #40]	; 0x28
 8014d36:	f107 021c 	add.w	r2, r7, #28
 8014d3a:	f107 030c 	add.w	r3, r7, #12
 8014d3e:	4611      	mov	r1, r2
 8014d40:	4618      	mov	r0, r3
 8014d42:	f7fd fdc6 	bl	80128d2 <_ZN3Mat8V_VectorILt4EEC1ERKSt5arrayIfLj4EE>
//AHRS
	rotationMatrix = {{
			q(0)*q(0)+q(1)*q(1)-q(2)*q(2)-q(3)*q(3), 	2.0f*(q(1)*q(2)-q(0)*q(3)), 	2.0f*(q(1)*q(3)+q(0)*q(2)),
 8014d46:	f107 030c 	add.w	r3, r7, #12
 8014d4a:	2100      	movs	r1, #0
 8014d4c:	4618      	mov	r0, r3
 8014d4e:	f7fd fdab 	bl	80128a8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014d52:	eeb0 8a40 	vmov.f32	s16, s0
 8014d56:	f107 030c 	add.w	r3, r7, #12
 8014d5a:	2100      	movs	r1, #0
 8014d5c:	4618      	mov	r0, r3
 8014d5e:	f7fd fda3 	bl	80128a8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014d62:	eef0 7a40 	vmov.f32	s15, s0
 8014d66:	ee28 8a27 	vmul.f32	s16, s16, s15
 8014d6a:	f107 030c 	add.w	r3, r7, #12
 8014d6e:	2101      	movs	r1, #1
 8014d70:	4618      	mov	r0, r3
 8014d72:	f7fd fd99 	bl	80128a8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014d76:	eef0 8a40 	vmov.f32	s17, s0
 8014d7a:	f107 030c 	add.w	r3, r7, #12
 8014d7e:	2101      	movs	r1, #1
 8014d80:	4618      	mov	r0, r3
 8014d82:	f7fd fd91 	bl	80128a8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014d86:	eef0 7a40 	vmov.f32	s15, s0
 8014d8a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8014d8e:	ee38 8a27 	vadd.f32	s16, s16, s15
 8014d92:	f107 030c 	add.w	r3, r7, #12
 8014d96:	2102      	movs	r1, #2
 8014d98:	4618      	mov	r0, r3
 8014d9a:	f7fd fd85 	bl	80128a8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014d9e:	eef0 8a40 	vmov.f32	s17, s0
 8014da2:	f107 030c 	add.w	r3, r7, #12
 8014da6:	2102      	movs	r1, #2
 8014da8:	4618      	mov	r0, r3
 8014daa:	f7fd fd7d 	bl	80128a8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014dae:	eef0 7a40 	vmov.f32	s15, s0
 8014db2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8014db6:	ee38 8a67 	vsub.f32	s16, s16, s15
 8014dba:	f107 030c 	add.w	r3, r7, #12
 8014dbe:	2103      	movs	r1, #3
 8014dc0:	4618      	mov	r0, r3
 8014dc2:	f7fd fd71 	bl	80128a8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014dc6:	eef0 8a40 	vmov.f32	s17, s0
 8014dca:	f107 030c 	add.w	r3, r7, #12
 8014dce:	2103      	movs	r1, #3
 8014dd0:	4618      	mov	r0, r3
 8014dd2:	f7fd fd69 	bl	80128a8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014dd6:	eef0 7a40 	vmov.f32	s15, s0
 8014dda:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8014dde:	ee78 7a67 	vsub.f32	s15, s16, s15
	rotationMatrix = {{
 8014de2:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
			q(0)*q(0)+q(1)*q(1)-q(2)*q(2)-q(3)*q(3), 	2.0f*(q(1)*q(2)-q(0)*q(3)), 	2.0f*(q(1)*q(3)+q(0)*q(2)),
 8014de6:	f107 030c 	add.w	r3, r7, #12
 8014dea:	2101      	movs	r1, #1
 8014dec:	4618      	mov	r0, r3
 8014dee:	f7fd fd5b 	bl	80128a8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014df2:	eeb0 8a40 	vmov.f32	s16, s0
 8014df6:	f107 030c 	add.w	r3, r7, #12
 8014dfa:	2102      	movs	r1, #2
 8014dfc:	4618      	mov	r0, r3
 8014dfe:	f7fd fd53 	bl	80128a8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014e02:	eef0 7a40 	vmov.f32	s15, s0
 8014e06:	ee28 8a27 	vmul.f32	s16, s16, s15
 8014e0a:	f107 030c 	add.w	r3, r7, #12
 8014e0e:	2100      	movs	r1, #0
 8014e10:	4618      	mov	r0, r3
 8014e12:	f7fd fd49 	bl	80128a8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014e16:	eef0 8a40 	vmov.f32	s17, s0
 8014e1a:	f107 030c 	add.w	r3, r7, #12
 8014e1e:	2103      	movs	r1, #3
 8014e20:	4618      	mov	r0, r3
 8014e22:	f7fd fd41 	bl	80128a8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014e26:	eef0 7a40 	vmov.f32	s15, s0
 8014e2a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8014e2e:	ee78 7a67 	vsub.f32	s15, s16, s15
 8014e32:	ee77 7aa7 	vadd.f32	s15, s15, s15
	rotationMatrix = {{
 8014e36:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
			q(0)*q(0)+q(1)*q(1)-q(2)*q(2)-q(3)*q(3), 	2.0f*(q(1)*q(2)-q(0)*q(3)), 	2.0f*(q(1)*q(3)+q(0)*q(2)),
 8014e3a:	f107 030c 	add.w	r3, r7, #12
 8014e3e:	2101      	movs	r1, #1
 8014e40:	4618      	mov	r0, r3
 8014e42:	f7fd fd31 	bl	80128a8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014e46:	eeb0 8a40 	vmov.f32	s16, s0
 8014e4a:	f107 030c 	add.w	r3, r7, #12
 8014e4e:	2103      	movs	r1, #3
 8014e50:	4618      	mov	r0, r3
 8014e52:	f7fd fd29 	bl	80128a8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014e56:	eef0 7a40 	vmov.f32	s15, s0
 8014e5a:	ee28 8a27 	vmul.f32	s16, s16, s15
 8014e5e:	f107 030c 	add.w	r3, r7, #12
 8014e62:	2100      	movs	r1, #0
 8014e64:	4618      	mov	r0, r3
 8014e66:	f7fd fd1f 	bl	80128a8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014e6a:	eef0 8a40 	vmov.f32	s17, s0
 8014e6e:	f107 030c 	add.w	r3, r7, #12
 8014e72:	2102      	movs	r1, #2
 8014e74:	4618      	mov	r0, r3
 8014e76:	f7fd fd17 	bl	80128a8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014e7a:	eef0 7a40 	vmov.f32	s15, s0
 8014e7e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8014e82:	ee78 7a27 	vadd.f32	s15, s16, s15
 8014e86:	ee77 7aa7 	vadd.f32	s15, s15, s15
	rotationMatrix = {{
 8014e8a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
			2.0f*(q(1)*q(2)+q(0)*q(3)), 	q(0)*q(0)-q(1)*q(1)+q(2)*q(2)-q(3)*q(3),	2.0f*(q(2)*q(3)-q(0)*q(1)),
 8014e8e:	f107 030c 	add.w	r3, r7, #12
 8014e92:	2101      	movs	r1, #1
 8014e94:	4618      	mov	r0, r3
 8014e96:	f7fd fd07 	bl	80128a8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014e9a:	eeb0 8a40 	vmov.f32	s16, s0
 8014e9e:	f107 030c 	add.w	r3, r7, #12
 8014ea2:	2102      	movs	r1, #2
 8014ea4:	4618      	mov	r0, r3
 8014ea6:	f7fd fcff 	bl	80128a8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014eaa:	eef0 7a40 	vmov.f32	s15, s0
 8014eae:	ee28 8a27 	vmul.f32	s16, s16, s15
 8014eb2:	f107 030c 	add.w	r3, r7, #12
 8014eb6:	2100      	movs	r1, #0
 8014eb8:	4618      	mov	r0, r3
 8014eba:	f7fd fcf5 	bl	80128a8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014ebe:	eef0 8a40 	vmov.f32	s17, s0
 8014ec2:	f107 030c 	add.w	r3, r7, #12
 8014ec6:	2103      	movs	r1, #3
 8014ec8:	4618      	mov	r0, r3
 8014eca:	f7fd fced 	bl	80128a8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014ece:	eef0 7a40 	vmov.f32	s15, s0
 8014ed2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8014ed6:	ee78 7a27 	vadd.f32	s15, s16, s15
 8014eda:	ee77 7aa7 	vadd.f32	s15, s15, s15
	rotationMatrix = {{
 8014ede:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
			2.0f*(q(1)*q(2)+q(0)*q(3)), 	q(0)*q(0)-q(1)*q(1)+q(2)*q(2)-q(3)*q(3),	2.0f*(q(2)*q(3)-q(0)*q(1)),
 8014ee2:	f107 030c 	add.w	r3, r7, #12
 8014ee6:	2100      	movs	r1, #0
 8014ee8:	4618      	mov	r0, r3
 8014eea:	f7fd fcdd 	bl	80128a8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014eee:	eeb0 8a40 	vmov.f32	s16, s0
 8014ef2:	f107 030c 	add.w	r3, r7, #12
 8014ef6:	2100      	movs	r1, #0
 8014ef8:	4618      	mov	r0, r3
 8014efa:	f7fd fcd5 	bl	80128a8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014efe:	eef0 7a40 	vmov.f32	s15, s0
 8014f02:	ee28 8a27 	vmul.f32	s16, s16, s15
 8014f06:	f107 030c 	add.w	r3, r7, #12
 8014f0a:	2101      	movs	r1, #1
 8014f0c:	4618      	mov	r0, r3
 8014f0e:	f7fd fccb 	bl	80128a8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014f12:	eef0 8a40 	vmov.f32	s17, s0
 8014f16:	f107 030c 	add.w	r3, r7, #12
 8014f1a:	2101      	movs	r1, #1
 8014f1c:	4618      	mov	r0, r3
 8014f1e:	f7fd fcc3 	bl	80128a8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014f22:	eef0 7a40 	vmov.f32	s15, s0
 8014f26:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8014f2a:	ee38 8a67 	vsub.f32	s16, s16, s15
 8014f2e:	f107 030c 	add.w	r3, r7, #12
 8014f32:	2102      	movs	r1, #2
 8014f34:	4618      	mov	r0, r3
 8014f36:	f7fd fcb7 	bl	80128a8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014f3a:	eef0 8a40 	vmov.f32	s17, s0
 8014f3e:	f107 030c 	add.w	r3, r7, #12
 8014f42:	2102      	movs	r1, #2
 8014f44:	4618      	mov	r0, r3
 8014f46:	f7fd fcaf 	bl	80128a8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014f4a:	eef0 7a40 	vmov.f32	s15, s0
 8014f4e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8014f52:	ee38 8a27 	vadd.f32	s16, s16, s15
 8014f56:	f107 030c 	add.w	r3, r7, #12
 8014f5a:	2103      	movs	r1, #3
 8014f5c:	4618      	mov	r0, r3
 8014f5e:	f7fd fca3 	bl	80128a8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014f62:	eef0 8a40 	vmov.f32	s17, s0
 8014f66:	f107 030c 	add.w	r3, r7, #12
 8014f6a:	2103      	movs	r1, #3
 8014f6c:	4618      	mov	r0, r3
 8014f6e:	f7fd fc9b 	bl	80128a8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014f72:	eef0 7a40 	vmov.f32	s15, s0
 8014f76:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8014f7a:	ee78 7a67 	vsub.f32	s15, s16, s15
	rotationMatrix = {{
 8014f7e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
			2.0f*(q(1)*q(2)+q(0)*q(3)), 	q(0)*q(0)-q(1)*q(1)+q(2)*q(2)-q(3)*q(3),	2.0f*(q(2)*q(3)-q(0)*q(1)),
 8014f82:	f107 030c 	add.w	r3, r7, #12
 8014f86:	2102      	movs	r1, #2
 8014f88:	4618      	mov	r0, r3
 8014f8a:	f7fd fc8d 	bl	80128a8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014f8e:	eeb0 8a40 	vmov.f32	s16, s0
 8014f92:	f107 030c 	add.w	r3, r7, #12
 8014f96:	2103      	movs	r1, #3
 8014f98:	4618      	mov	r0, r3
 8014f9a:	f7fd fc85 	bl	80128a8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014f9e:	eef0 7a40 	vmov.f32	s15, s0
 8014fa2:	ee28 8a27 	vmul.f32	s16, s16, s15
 8014fa6:	f107 030c 	add.w	r3, r7, #12
 8014faa:	2100      	movs	r1, #0
 8014fac:	4618      	mov	r0, r3
 8014fae:	f7fd fc7b 	bl	80128a8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014fb2:	eef0 8a40 	vmov.f32	s17, s0
 8014fb6:	f107 030c 	add.w	r3, r7, #12
 8014fba:	2101      	movs	r1, #1
 8014fbc:	4618      	mov	r0, r3
 8014fbe:	f7fd fc73 	bl	80128a8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014fc2:	eef0 7a40 	vmov.f32	s15, s0
 8014fc6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8014fca:	ee78 7a67 	vsub.f32	s15, s16, s15
 8014fce:	ee77 7aa7 	vadd.f32	s15, s15, s15
	rotationMatrix = {{
 8014fd2:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
			2.0f*(q(1)*q(3)-q(0)*q(2)),		2.0f*(q(0)*q(1)+q(2)*q(3)), 	q(0)*q(0)-q(1)*q(1)-q(2)*q(2)+q(3)*q(3)
 8014fd6:	f107 030c 	add.w	r3, r7, #12
 8014fda:	2101      	movs	r1, #1
 8014fdc:	4618      	mov	r0, r3
 8014fde:	f7fd fc63 	bl	80128a8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014fe2:	eeb0 8a40 	vmov.f32	s16, s0
 8014fe6:	f107 030c 	add.w	r3, r7, #12
 8014fea:	2103      	movs	r1, #3
 8014fec:	4618      	mov	r0, r3
 8014fee:	f7fd fc5b 	bl	80128a8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014ff2:	eef0 7a40 	vmov.f32	s15, s0
 8014ff6:	ee28 8a27 	vmul.f32	s16, s16, s15
 8014ffa:	f107 030c 	add.w	r3, r7, #12
 8014ffe:	2100      	movs	r1, #0
 8015000:	4618      	mov	r0, r3
 8015002:	f7fd fc51 	bl	80128a8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8015006:	eef0 8a40 	vmov.f32	s17, s0
 801500a:	f107 030c 	add.w	r3, r7, #12
 801500e:	2102      	movs	r1, #2
 8015010:	4618      	mov	r0, r3
 8015012:	f7fd fc49 	bl	80128a8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8015016:	eef0 7a40 	vmov.f32	s15, s0
 801501a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801501e:	ee78 7a67 	vsub.f32	s15, s16, s15
 8015022:	ee77 7aa7 	vadd.f32	s15, s15, s15
	rotationMatrix = {{
 8015026:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
			2.0f*(q(1)*q(3)-q(0)*q(2)),		2.0f*(q(0)*q(1)+q(2)*q(3)), 	q(0)*q(0)-q(1)*q(1)-q(2)*q(2)+q(3)*q(3)
 801502a:	f107 030c 	add.w	r3, r7, #12
 801502e:	2100      	movs	r1, #0
 8015030:	4618      	mov	r0, r3
 8015032:	f7fd fc39 	bl	80128a8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8015036:	eeb0 8a40 	vmov.f32	s16, s0
 801503a:	f107 030c 	add.w	r3, r7, #12
 801503e:	2101      	movs	r1, #1
 8015040:	4618      	mov	r0, r3
 8015042:	f7fd fc31 	bl	80128a8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8015046:	eef0 7a40 	vmov.f32	s15, s0
 801504a:	ee28 8a27 	vmul.f32	s16, s16, s15
 801504e:	f107 030c 	add.w	r3, r7, #12
 8015052:	2102      	movs	r1, #2
 8015054:	4618      	mov	r0, r3
 8015056:	f7fd fc27 	bl	80128a8 <_ZNK3Mat8V_VectorILt4EEclEt>
 801505a:	eef0 8a40 	vmov.f32	s17, s0
 801505e:	f107 030c 	add.w	r3, r7, #12
 8015062:	2103      	movs	r1, #3
 8015064:	4618      	mov	r0, r3
 8015066:	f7fd fc1f 	bl	80128a8 <_ZNK3Mat8V_VectorILt4EEclEt>
 801506a:	eef0 7a40 	vmov.f32	s15, s0
 801506e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8015072:	ee78 7a27 	vadd.f32	s15, s16, s15
 8015076:	ee77 7aa7 	vadd.f32	s15, s15, s15
	rotationMatrix = {{
 801507a:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
			2.0f*(q(1)*q(3)-q(0)*q(2)),		2.0f*(q(0)*q(1)+q(2)*q(3)), 	q(0)*q(0)-q(1)*q(1)-q(2)*q(2)+q(3)*q(3)
 801507e:	f107 030c 	add.w	r3, r7, #12
 8015082:	2100      	movs	r1, #0
 8015084:	4618      	mov	r0, r3
 8015086:	f7fd fc0f 	bl	80128a8 <_ZNK3Mat8V_VectorILt4EEclEt>
 801508a:	eeb0 8a40 	vmov.f32	s16, s0
 801508e:	f107 030c 	add.w	r3, r7, #12
 8015092:	2100      	movs	r1, #0
 8015094:	4618      	mov	r0, r3
 8015096:	f7fd fc07 	bl	80128a8 <_ZNK3Mat8V_VectorILt4EEclEt>
 801509a:	eef0 7a40 	vmov.f32	s15, s0
 801509e:	ee28 8a27 	vmul.f32	s16, s16, s15
 80150a2:	f107 030c 	add.w	r3, r7, #12
 80150a6:	2101      	movs	r1, #1
 80150a8:	4618      	mov	r0, r3
 80150aa:	f7fd fbfd 	bl	80128a8 <_ZNK3Mat8V_VectorILt4EEclEt>
 80150ae:	eef0 8a40 	vmov.f32	s17, s0
 80150b2:	f107 030c 	add.w	r3, r7, #12
 80150b6:	2101      	movs	r1, #1
 80150b8:	4618      	mov	r0, r3
 80150ba:	f7fd fbf5 	bl	80128a8 <_ZNK3Mat8V_VectorILt4EEclEt>
 80150be:	eef0 7a40 	vmov.f32	s15, s0
 80150c2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80150c6:	ee38 8a67 	vsub.f32	s16, s16, s15
 80150ca:	f107 030c 	add.w	r3, r7, #12
 80150ce:	2102      	movs	r1, #2
 80150d0:	4618      	mov	r0, r3
 80150d2:	f7fd fbe9 	bl	80128a8 <_ZNK3Mat8V_VectorILt4EEclEt>
 80150d6:	eef0 8a40 	vmov.f32	s17, s0
 80150da:	f107 030c 	add.w	r3, r7, #12
 80150de:	2102      	movs	r1, #2
 80150e0:	4618      	mov	r0, r3
 80150e2:	f7fd fbe1 	bl	80128a8 <_ZNK3Mat8V_VectorILt4EEclEt>
 80150e6:	eef0 7a40 	vmov.f32	s15, s0
 80150ea:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80150ee:	ee38 8a67 	vsub.f32	s16, s16, s15
 80150f2:	f107 030c 	add.w	r3, r7, #12
 80150f6:	2103      	movs	r1, #3
 80150f8:	4618      	mov	r0, r3
 80150fa:	f7fd fbd5 	bl	80128a8 <_ZNK3Mat8V_VectorILt4EEclEt>
 80150fe:	eef0 8a40 	vmov.f32	s17, s0
 8015102:	f107 030c 	add.w	r3, r7, #12
 8015106:	2103      	movs	r1, #3
 8015108:	4618      	mov	r0, r3
 801510a:	f7fd fbcd 	bl	80128a8 <_ZNK3Mat8V_VectorILt4EEclEt>
 801510e:	eef0 7a40 	vmov.f32	s15, s0
 8015112:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8015116:	ee78 7a27 	vadd.f32	s15, s16, s15
	rotationMatrix = {{
 801511a:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
 801511e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8015122:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015126:	4611      	mov	r1, r2
 8015128:	4618      	mov	r0, r3
 801512a:	f7f9 ff2b 	bl	800ef84 <_ZN3Mat6MatrixILt3ELt3EEC1ERKSt5arrayIfLj9EE>
 801512e:	4b08      	ldr	r3, [pc, #32]	; (8015150 <_ZNK10Algorithms15FusionAlgorithm17GetRotationMatrixEv+0x494>)
 8015130:	461d      	mov	r5, r3
 8015132:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8015136:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015138:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801513a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801513c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801513e:	6823      	ldr	r3, [r4, #0]
 8015140:	602b      	str	r3, [r5, #0]
	}};
	return rotationMatrix;
 8015142:	4b03      	ldr	r3, [pc, #12]	; (8015150 <_ZNK10Algorithms15FusionAlgorithm17GetRotationMatrixEv+0x494>)
}
 8015144:	4618      	mov	r0, r3
 8015146:	3778      	adds	r7, #120	; 0x78
 8015148:	46bd      	mov	sp, r7
 801514a:	ecbd 8b02 	vpop	{d8}
 801514e:	bdb0      	pop	{r4, r5, r7, pc}
 8015150:	24009644 	.word	0x24009644

08015154 <_ZN3Mat8V_VectorILt3EEclEt>:
 8015154:	b580      	push	{r7, lr}
 8015156:	b082      	sub	sp, #8
 8015158:	af00      	add	r7, sp, #0
 801515a:	6078      	str	r0, [r7, #4]
 801515c:	460b      	mov	r3, r1
 801515e:	807b      	strh	r3, [r7, #2]
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	887a      	ldrh	r2, [r7, #2]
 8015164:	4611      	mov	r1, r2
 8015166:	4618      	mov	r0, r3
 8015168:	f7f8 fc73 	bl	800da52 <_ZNSt5arrayIfLj3EEixEj>
 801516c:	4603      	mov	r3, r0
 801516e:	4618      	mov	r0, r3
 8015170:	3708      	adds	r7, #8
 8015172:	46bd      	mov	sp, r7
 8015174:	bd80      	pop	{r7, pc}

08015176 <_ZNK10Algorithms20ExtendedKalmanFilterILt6ELt3ELt6EE11GetStateCovEv>:

	virtual void Predict(const ControlVec& controlVec, const ControlCovarianceMatrix& controlCov, float time);
	virtual void Update(const MeassurementVec& meassurementVec, const MeasurementCovarianceMatrix& meassurementCov, float time);

	const StateVec& GetState() const {return _state;}
	const StateCovarianceMatrix& GetStateCov() const {return _stateCovMatrix;}
 8015176:	b480      	push	{r7}
 8015178:	b083      	sub	sp, #12
 801517a:	af00      	add	r7, sp, #0
 801517c:	6078      	str	r0, [r7, #4]
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	331c      	adds	r3, #28
 8015182:	4618      	mov	r0, r3
 8015184:	370c      	adds	r7, #12
 8015186:	46bd      	mov	sp, r7
 8015188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801518c:	4770      	bx	lr

0801518e <_ZNK10Algorithms20ExtendedKalmanFilterILt6ELt3ELt6EE7GetTimeEv>:
	float GetTime() const {return _time;}
 801518e:	b480      	push	{r7}
 8015190:	b083      	sub	sp, #12
 8015192:	af00      	add	r7, sp, #0
 8015194:	6078      	str	r0, [r7, #4]
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801519c:	ee07 3a90 	vmov	s15, r3
 80151a0:	eeb0 0a67 	vmov.f32	s0, s15
 80151a4:	370c      	adds	r7, #12
 80151a6:	46bd      	mov	sp, r7
 80151a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151ac:	4770      	bx	lr

080151ae <_ZN3Mat10QuaternionpLERKS0_>:

namespace Mat
{

Quaternion& Quaternion::operator+=(const Quaternion& other)
{
 80151ae:	b480      	push	{r7}
 80151b0:	b083      	sub	sp, #12
 80151b2:	af00      	add	r7, sp, #0
 80151b4:	6078      	str	r0, [r7, #4]
 80151b6:	6039      	str	r1, [r7, #0]
	w += other.w;
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	ed93 7a00 	vldr	s14, [r3]
 80151be:	683b      	ldr	r3, [r7, #0]
 80151c0:	edd3 7a00 	vldr	s15, [r3]
 80151c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	edc3 7a00 	vstr	s15, [r3]
	x += other.x;
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	ed93 7a01 	vldr	s14, [r3, #4]
 80151d4:	683b      	ldr	r3, [r7, #0]
 80151d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80151da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	edc3 7a01 	vstr	s15, [r3, #4]
	y += other.y;
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	ed93 7a02 	vldr	s14, [r3, #8]
 80151ea:	683b      	ldr	r3, [r7, #0]
 80151ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80151f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	edc3 7a02 	vstr	s15, [r3, #8]
	z += other.z;
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	ed93 7a03 	vldr	s14, [r3, #12]
 8015200:	683b      	ldr	r3, [r7, #0]
 8015202:	edd3 7a03 	vldr	s15, [r3, #12]
 8015206:	ee77 7a27 	vadd.f32	s15, s14, s15
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	edc3 7a03 	vstr	s15, [r3, #12]
	return *this;
 8015210:	687b      	ldr	r3, [r7, #4]
}
 8015212:	4618      	mov	r0, r3
 8015214:	370c      	adds	r7, #12
 8015216:	46bd      	mov	sp, r7
 8015218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801521c:	4770      	bx	lr

0801521e <_ZN3Mat10QuaternionmLEf>:
	*this = operator*(other);
	return *this;
}

Quaternion& Quaternion::operator*=(float f)
{
 801521e:	b480      	push	{r7}
 8015220:	b083      	sub	sp, #12
 8015222:	af00      	add	r7, sp, #0
 8015224:	6078      	str	r0, [r7, #4]
 8015226:	ed87 0a00 	vstr	s0, [r7]
	w *= f;
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	ed93 7a00 	vldr	s14, [r3]
 8015230:	edd7 7a00 	vldr	s15, [r7]
 8015234:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	edc3 7a00 	vstr	s15, [r3]
	x *= f;
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	ed93 7a01 	vldr	s14, [r3, #4]
 8015244:	edd7 7a00 	vldr	s15, [r7]
 8015248:	ee67 7a27 	vmul.f32	s15, s14, s15
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	edc3 7a01 	vstr	s15, [r3, #4]
	y *= f;
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	ed93 7a02 	vldr	s14, [r3, #8]
 8015258:	edd7 7a00 	vldr	s15, [r7]
 801525c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	edc3 7a02 	vstr	s15, [r3, #8]
	z *= f;
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	ed93 7a03 	vldr	s14, [r3, #12]
 801526c:	edd7 7a00 	vldr	s15, [r7]
 8015270:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	edc3 7a03 	vstr	s15, [r3, #12]
	return *this;
 801527a:	687b      	ldr	r3, [r7, #4]
}
 801527c:	4618      	mov	r0, r3
 801527e:	370c      	adds	r7, #12
 8015280:	46bd      	mov	sp, r7
 8015282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015286:	4770      	bx	lr

08015288 <_ZN3Mat10Quaternion9NormaliseEv>:

Quaternion& Quaternion::Normalise()
{
 8015288:	b580      	push	{r7, lr}
 801528a:	b084      	sub	sp, #16
 801528c:	af00      	add	r7, sp, #0
 801528e:	6078      	str	r0, [r7, #4]
	float norm = Norm();
 8015290:	6878      	ldr	r0, [r7, #4]
 8015292:	f000 f9ac 	bl	80155ee <_ZNK3Mat10Quaternion4NormEv>
 8015296:	ed87 0a03 	vstr	s0, [r7, #12]
	if(norm != 0.0f) this->operator *=((1.0f / norm));
 801529a:	edd7 7a03 	vldr	s15, [r7, #12]
 801529e:	eef5 7a40 	vcmp.f32	s15, #0.0
 80152a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152a6:	d00a      	beq.n	80152be <_ZN3Mat10Quaternion9NormaliseEv+0x36>
 80152a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80152ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80152b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80152b4:	eeb0 0a47 	vmov.f32	s0, s14
 80152b8:	6878      	ldr	r0, [r7, #4]
 80152ba:	f7ff ffb0 	bl	801521e <_ZN3Mat10QuaternionmLEf>
	return *this;
 80152be:	687b      	ldr	r3, [r7, #4]
}
 80152c0:	4618      	mov	r0, r3
 80152c2:	3710      	adds	r7, #16
 80152c4:	46bd      	mov	sp, r7
 80152c6:	bd80      	pop	{r7, pc}

080152c8 <_ZNK3Mat10QuaternionplERKS0_>:

Quaternion Quaternion::operator+(const Quaternion& other) const
{
 80152c8:	b590      	push	{r4, r7, lr}
 80152ca:	b08f      	sub	sp, #60	; 0x3c
 80152cc:	af00      	add	r7, sp, #0
 80152ce:	6178      	str	r0, [r7, #20]
 80152d0:	6139      	str	r1, [r7, #16]
	Quaternion result = *this;
 80152d2:	697b      	ldr	r3, [r7, #20]
 80152d4:	f107 0418 	add.w	r4, r7, #24
 80152d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80152da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	result += other;
 80152de:	f107 0318 	add.w	r3, r7, #24
 80152e2:	6939      	ldr	r1, [r7, #16]
 80152e4:	4618      	mov	r0, r3
 80152e6:	f7ff ff62 	bl	80151ae <_ZN3Mat10QuaternionpLERKS0_>
	return result;
 80152ea:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80152ee:	f107 0318 	add.w	r3, r7, #24
 80152f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80152f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80152f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80152fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80152fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80152fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015300:	ee06 0a10 	vmov	s12, r0
 8015304:	ee06 1a90 	vmov	s13, r1
 8015308:	ee07 2a10 	vmov	s14, r2
 801530c:	ee07 3a90 	vmov	s15, r3
}
 8015310:	eeb0 0a46 	vmov.f32	s0, s12
 8015314:	eef0 0a66 	vmov.f32	s1, s13
 8015318:	eeb0 1a47 	vmov.f32	s2, s14
 801531c:	eef0 1a67 	vmov.f32	s3, s15
 8015320:	373c      	adds	r7, #60	; 0x3c
 8015322:	46bd      	mov	sp, r7
 8015324:	bd90      	pop	{r4, r7, pc}

08015326 <_ZNK3Mat10QuaternionmlERKS0_>:
	result -= other;
	return result;
}

Quaternion Quaternion::operator*(const Quaternion& other) const
{
 8015326:	b490      	push	{r4, r7}
 8015328:	b08e      	sub	sp, #56	; 0x38
 801532a:	af00      	add	r7, sp, #0
 801532c:	6178      	str	r0, [r7, #20]
 801532e:	6139      	str	r1, [r7, #16]
	Quaternion result{};
 8015330:	f107 0318 	add.w	r3, r7, #24
 8015334:	2200      	movs	r2, #0
 8015336:	601a      	str	r2, [r3, #0]
 8015338:	605a      	str	r2, [r3, #4]
 801533a:	609a      	str	r2, [r3, #8]
 801533c:	60da      	str	r2, [r3, #12]
	result.w = this->w*other.w - this->x*other.x - this->y*other.y - this->z*other.z;
 801533e:	697b      	ldr	r3, [r7, #20]
 8015340:	ed93 7a00 	vldr	s14, [r3]
 8015344:	693b      	ldr	r3, [r7, #16]
 8015346:	edd3 7a00 	vldr	s15, [r3]
 801534a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801534e:	697b      	ldr	r3, [r7, #20]
 8015350:	edd3 6a01 	vldr	s13, [r3, #4]
 8015354:	693b      	ldr	r3, [r7, #16]
 8015356:	edd3 7a01 	vldr	s15, [r3, #4]
 801535a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801535e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015362:	697b      	ldr	r3, [r7, #20]
 8015364:	edd3 6a02 	vldr	s13, [r3, #8]
 8015368:	693b      	ldr	r3, [r7, #16]
 801536a:	edd3 7a02 	vldr	s15, [r3, #8]
 801536e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015372:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015376:	697b      	ldr	r3, [r7, #20]
 8015378:	edd3 6a03 	vldr	s13, [r3, #12]
 801537c:	693b      	ldr	r3, [r7, #16]
 801537e:	edd3 7a03 	vldr	s15, [r3, #12]
 8015382:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015386:	ee77 7a67 	vsub.f32	s15, s14, s15
 801538a:	edc7 7a06 	vstr	s15, [r7, #24]
	result.x = this->w*other.x + this->x*other.w + this->y*other.z - this->z*other.y;
 801538e:	697b      	ldr	r3, [r7, #20]
 8015390:	ed93 7a00 	vldr	s14, [r3]
 8015394:	693b      	ldr	r3, [r7, #16]
 8015396:	edd3 7a01 	vldr	s15, [r3, #4]
 801539a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801539e:	697b      	ldr	r3, [r7, #20]
 80153a0:	edd3 6a01 	vldr	s13, [r3, #4]
 80153a4:	693b      	ldr	r3, [r7, #16]
 80153a6:	edd3 7a00 	vldr	s15, [r3]
 80153aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80153ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80153b2:	697b      	ldr	r3, [r7, #20]
 80153b4:	edd3 6a02 	vldr	s13, [r3, #8]
 80153b8:	693b      	ldr	r3, [r7, #16]
 80153ba:	edd3 7a03 	vldr	s15, [r3, #12]
 80153be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80153c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80153c6:	697b      	ldr	r3, [r7, #20]
 80153c8:	edd3 6a03 	vldr	s13, [r3, #12]
 80153cc:	693b      	ldr	r3, [r7, #16]
 80153ce:	edd3 7a02 	vldr	s15, [r3, #8]
 80153d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80153d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80153da:	edc7 7a07 	vstr	s15, [r7, #28]
	result.y = this->w*other.y - this->x*other.z + this->y*other.w + this->z*other.x;
 80153de:	697b      	ldr	r3, [r7, #20]
 80153e0:	ed93 7a00 	vldr	s14, [r3]
 80153e4:	693b      	ldr	r3, [r7, #16]
 80153e6:	edd3 7a02 	vldr	s15, [r3, #8]
 80153ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80153ee:	697b      	ldr	r3, [r7, #20]
 80153f0:	edd3 6a01 	vldr	s13, [r3, #4]
 80153f4:	693b      	ldr	r3, [r7, #16]
 80153f6:	edd3 7a03 	vldr	s15, [r3, #12]
 80153fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80153fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015402:	697b      	ldr	r3, [r7, #20]
 8015404:	edd3 6a02 	vldr	s13, [r3, #8]
 8015408:	693b      	ldr	r3, [r7, #16]
 801540a:	edd3 7a00 	vldr	s15, [r3]
 801540e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015412:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015416:	697b      	ldr	r3, [r7, #20]
 8015418:	edd3 6a03 	vldr	s13, [r3, #12]
 801541c:	693b      	ldr	r3, [r7, #16]
 801541e:	edd3 7a01 	vldr	s15, [r3, #4]
 8015422:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015426:	ee77 7a27 	vadd.f32	s15, s14, s15
 801542a:	edc7 7a08 	vstr	s15, [r7, #32]
	result.z = this->w*other.z + this->x*other.y - this->y*other.x + this->z*other.w;
 801542e:	697b      	ldr	r3, [r7, #20]
 8015430:	ed93 7a00 	vldr	s14, [r3]
 8015434:	693b      	ldr	r3, [r7, #16]
 8015436:	edd3 7a03 	vldr	s15, [r3, #12]
 801543a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801543e:	697b      	ldr	r3, [r7, #20]
 8015440:	edd3 6a01 	vldr	s13, [r3, #4]
 8015444:	693b      	ldr	r3, [r7, #16]
 8015446:	edd3 7a02 	vldr	s15, [r3, #8]
 801544a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801544e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015452:	697b      	ldr	r3, [r7, #20]
 8015454:	edd3 6a02 	vldr	s13, [r3, #8]
 8015458:	693b      	ldr	r3, [r7, #16]
 801545a:	edd3 7a01 	vldr	s15, [r3, #4]
 801545e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015462:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015466:	697b      	ldr	r3, [r7, #20]
 8015468:	edd3 6a03 	vldr	s13, [r3, #12]
 801546c:	693b      	ldr	r3, [r7, #16]
 801546e:	edd3 7a00 	vldr	s15, [r3]
 8015472:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015476:	ee77 7a27 	vadd.f32	s15, s14, s15
 801547a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	return result;
 801547e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8015482:	f107 0318 	add.w	r3, r7, #24
 8015486:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015488:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801548c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801548e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015490:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015494:	ee06 0a10 	vmov	s12, r0
 8015498:	ee06 1a90 	vmov	s13, r1
 801549c:	ee07 2a10 	vmov	s14, r2
 80154a0:	ee07 3a90 	vmov	s15, r3
}
 80154a4:	eeb0 0a46 	vmov.f32	s0, s12
 80154a8:	eef0 0a66 	vmov.f32	s1, s13
 80154ac:	eeb0 1a47 	vmov.f32	s2, s14
 80154b0:	eef0 1a67 	vmov.f32	s3, s15
 80154b4:	3738      	adds	r7, #56	; 0x38
 80154b6:	46bd      	mov	sp, r7
 80154b8:	bc90      	pop	{r4, r7}
 80154ba:	4770      	bx	lr

080154bc <_ZNK3Mat10QuaternionmlEf>:

Quaternion Quaternion::operator*(float f) const
{
 80154bc:	b590      	push	{r4, r7, lr}
 80154be:	b08f      	sub	sp, #60	; 0x3c
 80154c0:	af00      	add	r7, sp, #0
 80154c2:	6178      	str	r0, [r7, #20]
 80154c4:	ed87 0a04 	vstr	s0, [r7, #16]
	Quaternion result = *this;
 80154c8:	697b      	ldr	r3, [r7, #20]
 80154ca:	f107 0418 	add.w	r4, r7, #24
 80154ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80154d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	result *= f;
 80154d4:	f107 0318 	add.w	r3, r7, #24
 80154d8:	ed97 0a04 	vldr	s0, [r7, #16]
 80154dc:	4618      	mov	r0, r3
 80154de:	f7ff fe9e 	bl	801521e <_ZN3Mat10QuaternionmLEf>
	return result;
 80154e2:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80154e6:	f107 0318 	add.w	r3, r7, #24
 80154ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80154ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80154f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80154f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80154f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80154f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80154f8:	ee06 0a10 	vmov	s12, r0
 80154fc:	ee06 1a90 	vmov	s13, r1
 8015500:	ee07 2a10 	vmov	s14, r2
 8015504:	ee07 3a90 	vmov	s15, r3
}
 8015508:	eeb0 0a46 	vmov.f32	s0, s12
 801550c:	eef0 0a66 	vmov.f32	s1, s13
 8015510:	eeb0 1a47 	vmov.f32	s2, s14
 8015514:	eef0 1a67 	vmov.f32	s3, s15
 8015518:	373c      	adds	r7, #60	; 0x3c
 801551a:	46bd      	mov	sp, r7
 801551c:	bd90      	pop	{r4, r7, pc}

0801551e <_ZNK3Mat10Quaternion9ConjugateEv>:

Quaternion Quaternion::Conjugate() const
{
 801551e:	b490      	push	{r4, r7}
 8015520:	b08e      	sub	sp, #56	; 0x38
 8015522:	af00      	add	r7, sp, #0
 8015524:	6178      	str	r0, [r7, #20]
	Quaternion result = *this;
 8015526:	697b      	ldr	r3, [r7, #20]
 8015528:	f107 0418 	add.w	r4, r7, #24
 801552c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801552e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	result.x*= -1.0f;
 8015532:	edd7 7a07 	vldr	s15, [r7, #28]
 8015536:	eef1 7a67 	vneg.f32	s15, s15
 801553a:	edc7 7a07 	vstr	s15, [r7, #28]
	result.y*= -1.0f;
 801553e:	edd7 7a08 	vldr	s15, [r7, #32]
 8015542:	eef1 7a67 	vneg.f32	s15, s15
 8015546:	edc7 7a08 	vstr	s15, [r7, #32]
	result.z*= -1.0f;
 801554a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801554e:	eef1 7a67 	vneg.f32	s15, s15
 8015552:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	return result;
 8015556:	f107 0428 	add.w	r4, r7, #40	; 0x28
 801555a:	f107 0318 	add.w	r3, r7, #24
 801555e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015560:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8015564:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015566:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015568:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801556a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801556c:	ee06 0a10 	vmov	s12, r0
 8015570:	ee06 1a90 	vmov	s13, r1
 8015574:	ee07 2a10 	vmov	s14, r2
 8015578:	ee07 3a90 	vmov	s15, r3
}
 801557c:	eeb0 0a46 	vmov.f32	s0, s12
 8015580:	eef0 0a66 	vmov.f32	s1, s13
 8015584:	eeb0 1a47 	vmov.f32	s2, s14
 8015588:	eef0 1a67 	vmov.f32	s3, s15
 801558c:	3738      	adds	r7, #56	; 0x38
 801558e:	46bd      	mov	sp, r7
 8015590:	bc90      	pop	{r4, r7}
 8015592:	4770      	bx	lr

08015594 <_ZNK3Mat10Quaternion10NormalisedEv>:

Quaternion Quaternion::Normalised() const
{
 8015594:	b590      	push	{r4, r7, lr}
 8015596:	b08f      	sub	sp, #60	; 0x3c
 8015598:	af00      	add	r7, sp, #0
 801559a:	6178      	str	r0, [r7, #20]
	Quaternion normalised = *this;
 801559c:	697b      	ldr	r3, [r7, #20]
 801559e:	f107 0418 	add.w	r4, r7, #24
 80155a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80155a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	normalised.Normalise();
 80155a8:	f107 0318 	add.w	r3, r7, #24
 80155ac:	4618      	mov	r0, r3
 80155ae:	f7ff fe6b 	bl	8015288 <_ZN3Mat10Quaternion9NormaliseEv>
	return normalised;
 80155b2:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80155b6:	f107 0318 	add.w	r3, r7, #24
 80155ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80155bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80155c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80155c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80155c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80155c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80155c8:	ee06 0a10 	vmov	s12, r0
 80155cc:	ee06 1a90 	vmov	s13, r1
 80155d0:	ee07 2a10 	vmov	s14, r2
 80155d4:	ee07 3a90 	vmov	s15, r3
}
 80155d8:	eeb0 0a46 	vmov.f32	s0, s12
 80155dc:	eef0 0a66 	vmov.f32	s1, s13
 80155e0:	eeb0 1a47 	vmov.f32	s2, s14
 80155e4:	eef0 1a67 	vmov.f32	s3, s15
 80155e8:	373c      	adds	r7, #60	; 0x3c
 80155ea:	46bd      	mov	sp, r7
 80155ec:	bd90      	pop	{r4, r7, pc}

080155ee <_ZNK3Mat10Quaternion4NormEv>:
	conjugate.Normalise();
	return conjugate;
}

float Quaternion::Norm() const
{
 80155ee:	b580      	push	{r7, lr}
 80155f0:	b082      	sub	sp, #8
 80155f2:	af00      	add	r7, sp, #0
 80155f4:	6078      	str	r0, [r7, #4]
	return sqrt(w*w + x*x + y*y + z*z);
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	ed93 7a00 	vldr	s14, [r3]
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	edd3 7a00 	vldr	s15, [r3]
 8015602:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	edd3 6a01 	vldr	s13, [r3, #4]
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	edd3 7a01 	vldr	s15, [r3, #4]
 8015612:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015616:	ee37 7a27 	vadd.f32	s14, s14, s15
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	edd3 6a02 	vldr	s13, [r3, #8]
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	edd3 7a02 	vldr	s15, [r3, #8]
 8015626:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801562a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	edd3 6a03 	vldr	s13, [r3, #12]
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	edd3 7a03 	vldr	s15, [r3, #12]
 801563a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801563e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015642:	eeb0 0a67 	vmov.f32	s0, s15
 8015646:	f7f9 fda3 	bl	800f190 <_ZSt4sqrtf>
 801564a:	eef0 7a40 	vmov.f32	s15, s0
}
 801564e:	eeb0 0a67 	vmov.f32	s0, s15
 8015652:	3708      	adds	r7, #8
 8015654:	46bd      	mov	sp, r7
 8015656:	bd80      	pop	{r7, pc}

08015658 <__NVIC_SetPriority>:
{
 8015658:	b480      	push	{r7}
 801565a:	b083      	sub	sp, #12
 801565c:	af00      	add	r7, sp, #0
 801565e:	4603      	mov	r3, r0
 8015660:	6039      	str	r1, [r7, #0]
 8015662:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8015664:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015668:	2b00      	cmp	r3, #0
 801566a:	db0a      	blt.n	8015682 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801566c:	683b      	ldr	r3, [r7, #0]
 801566e:	b2da      	uxtb	r2, r3
 8015670:	490c      	ldr	r1, [pc, #48]	; (80156a4 <__NVIC_SetPriority+0x4c>)
 8015672:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015676:	0112      	lsls	r2, r2, #4
 8015678:	b2d2      	uxtb	r2, r2
 801567a:	440b      	add	r3, r1
 801567c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8015680:	e00a      	b.n	8015698 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015682:	683b      	ldr	r3, [r7, #0]
 8015684:	b2da      	uxtb	r2, r3
 8015686:	4908      	ldr	r1, [pc, #32]	; (80156a8 <__NVIC_SetPriority+0x50>)
 8015688:	88fb      	ldrh	r3, [r7, #6]
 801568a:	f003 030f 	and.w	r3, r3, #15
 801568e:	3b04      	subs	r3, #4
 8015690:	0112      	lsls	r2, r2, #4
 8015692:	b2d2      	uxtb	r2, r2
 8015694:	440b      	add	r3, r1
 8015696:	761a      	strb	r2, [r3, #24]
}
 8015698:	bf00      	nop
 801569a:	370c      	adds	r7, #12
 801569c:	46bd      	mov	sp, r7
 801569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156a2:	4770      	bx	lr
 80156a4:	e000e100 	.word	0xe000e100
 80156a8:	e000ed00 	.word	0xe000ed00

080156ac <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80156ac:	b580      	push	{r7, lr}
 80156ae:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80156b0:	4b05      	ldr	r3, [pc, #20]	; (80156c8 <SysTick_Handler+0x1c>)
 80156b2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80156b4:	f001 ffa2 	bl	80175fc <xTaskGetSchedulerState>
 80156b8:	4603      	mov	r3, r0
 80156ba:	2b01      	cmp	r3, #1
 80156bc:	d001      	beq.n	80156c2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80156be:	f002 fe8b 	bl	80183d8 <xPortSysTickHandler>
  }
}
 80156c2:	bf00      	nop
 80156c4:	bd80      	pop	{r7, pc}
 80156c6:	bf00      	nop
 80156c8:	e000e010 	.word	0xe000e010

080156cc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80156cc:	b580      	push	{r7, lr}
 80156ce:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80156d0:	2100      	movs	r1, #0
 80156d2:	f06f 0004 	mvn.w	r0, #4
 80156d6:	f7ff ffbf 	bl	8015658 <__NVIC_SetPriority>
#endif
}
 80156da:	bf00      	nop
 80156dc:	bd80      	pop	{r7, pc}
	...

080156e0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80156e0:	b480      	push	{r7}
 80156e2:	b083      	sub	sp, #12
 80156e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80156e6:	f3ef 8305 	mrs	r3, IPSR
 80156ea:	603b      	str	r3, [r7, #0]
  return(result);
 80156ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d003      	beq.n	80156fa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80156f2:	f06f 0305 	mvn.w	r3, #5
 80156f6:	607b      	str	r3, [r7, #4]
 80156f8:	e00c      	b.n	8015714 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80156fa:	4b0a      	ldr	r3, [pc, #40]	; (8015724 <osKernelInitialize+0x44>)
 80156fc:	681b      	ldr	r3, [r3, #0]
 80156fe:	2b00      	cmp	r3, #0
 8015700:	d105      	bne.n	801570e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8015702:	4b08      	ldr	r3, [pc, #32]	; (8015724 <osKernelInitialize+0x44>)
 8015704:	2201      	movs	r2, #1
 8015706:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8015708:	2300      	movs	r3, #0
 801570a:	607b      	str	r3, [r7, #4]
 801570c:	e002      	b.n	8015714 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 801570e:	f04f 33ff 	mov.w	r3, #4294967295
 8015712:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8015714:	687b      	ldr	r3, [r7, #4]
}
 8015716:	4618      	mov	r0, r3
 8015718:	370c      	adds	r7, #12
 801571a:	46bd      	mov	sp, r7
 801571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015720:	4770      	bx	lr
 8015722:	bf00      	nop
 8015724:	2400966c 	.word	0x2400966c

08015728 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8015728:	b580      	push	{r7, lr}
 801572a:	b082      	sub	sp, #8
 801572c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801572e:	f3ef 8305 	mrs	r3, IPSR
 8015732:	603b      	str	r3, [r7, #0]
  return(result);
 8015734:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015736:	2b00      	cmp	r3, #0
 8015738:	d003      	beq.n	8015742 <osKernelStart+0x1a>
    stat = osErrorISR;
 801573a:	f06f 0305 	mvn.w	r3, #5
 801573e:	607b      	str	r3, [r7, #4]
 8015740:	e010      	b.n	8015764 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8015742:	4b0b      	ldr	r3, [pc, #44]	; (8015770 <osKernelStart+0x48>)
 8015744:	681b      	ldr	r3, [r3, #0]
 8015746:	2b01      	cmp	r3, #1
 8015748:	d109      	bne.n	801575e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801574a:	f7ff ffbf 	bl	80156cc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801574e:	4b08      	ldr	r3, [pc, #32]	; (8015770 <osKernelStart+0x48>)
 8015750:	2202      	movs	r2, #2
 8015752:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8015754:	f001 fb42 	bl	8016ddc <vTaskStartScheduler>
      stat = osOK;
 8015758:	2300      	movs	r3, #0
 801575a:	607b      	str	r3, [r7, #4]
 801575c:	e002      	b.n	8015764 <osKernelStart+0x3c>
    } else {
      stat = osError;
 801575e:	f04f 33ff 	mov.w	r3, #4294967295
 8015762:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8015764:	687b      	ldr	r3, [r7, #4]
}
 8015766:	4618      	mov	r0, r3
 8015768:	3708      	adds	r7, #8
 801576a:	46bd      	mov	sp, r7
 801576c:	bd80      	pop	{r7, pc}
 801576e:	bf00      	nop
 8015770:	2400966c 	.word	0x2400966c

08015774 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8015774:	b580      	push	{r7, lr}
 8015776:	b08e      	sub	sp, #56	; 0x38
 8015778:	af04      	add	r7, sp, #16
 801577a:	60f8      	str	r0, [r7, #12]
 801577c:	60b9      	str	r1, [r7, #8]
 801577e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8015780:	2300      	movs	r3, #0
 8015782:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015784:	f3ef 8305 	mrs	r3, IPSR
 8015788:	617b      	str	r3, [r7, #20]
  return(result);
 801578a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 801578c:	2b00      	cmp	r3, #0
 801578e:	d17e      	bne.n	801588e <osThreadNew+0x11a>
 8015790:	68fb      	ldr	r3, [r7, #12]
 8015792:	2b00      	cmp	r3, #0
 8015794:	d07b      	beq.n	801588e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8015796:	2380      	movs	r3, #128	; 0x80
 8015798:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801579a:	2318      	movs	r3, #24
 801579c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801579e:	2300      	movs	r3, #0
 80157a0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80157a2:	f04f 33ff 	mov.w	r3, #4294967295
 80157a6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	d045      	beq.n	801583a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	681b      	ldr	r3, [r3, #0]
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d002      	beq.n	80157bc <osThreadNew+0x48>
        name = attr->name;
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	681b      	ldr	r3, [r3, #0]
 80157ba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	699b      	ldr	r3, [r3, #24]
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	d002      	beq.n	80157ca <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	699b      	ldr	r3, [r3, #24]
 80157c8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80157ca:	69fb      	ldr	r3, [r7, #28]
 80157cc:	2b00      	cmp	r3, #0
 80157ce:	d008      	beq.n	80157e2 <osThreadNew+0x6e>
 80157d0:	69fb      	ldr	r3, [r7, #28]
 80157d2:	2b38      	cmp	r3, #56	; 0x38
 80157d4:	d805      	bhi.n	80157e2 <osThreadNew+0x6e>
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	685b      	ldr	r3, [r3, #4]
 80157da:	f003 0301 	and.w	r3, r3, #1
 80157de:	2b00      	cmp	r3, #0
 80157e0:	d001      	beq.n	80157e6 <osThreadNew+0x72>
        return (NULL);
 80157e2:	2300      	movs	r3, #0
 80157e4:	e054      	b.n	8015890 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80157e6:	687b      	ldr	r3, [r7, #4]
 80157e8:	695b      	ldr	r3, [r3, #20]
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	d003      	beq.n	80157f6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	695b      	ldr	r3, [r3, #20]
 80157f2:	089b      	lsrs	r3, r3, #2
 80157f4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	689b      	ldr	r3, [r3, #8]
 80157fa:	2b00      	cmp	r3, #0
 80157fc:	d00e      	beq.n	801581c <osThreadNew+0xa8>
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	68db      	ldr	r3, [r3, #12]
 8015802:	2b5b      	cmp	r3, #91	; 0x5b
 8015804:	d90a      	bls.n	801581c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801580a:	2b00      	cmp	r3, #0
 801580c:	d006      	beq.n	801581c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	695b      	ldr	r3, [r3, #20]
 8015812:	2b00      	cmp	r3, #0
 8015814:	d002      	beq.n	801581c <osThreadNew+0xa8>
        mem = 1;
 8015816:	2301      	movs	r3, #1
 8015818:	61bb      	str	r3, [r7, #24]
 801581a:	e010      	b.n	801583e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	689b      	ldr	r3, [r3, #8]
 8015820:	2b00      	cmp	r3, #0
 8015822:	d10c      	bne.n	801583e <osThreadNew+0xca>
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	68db      	ldr	r3, [r3, #12]
 8015828:	2b00      	cmp	r3, #0
 801582a:	d108      	bne.n	801583e <osThreadNew+0xca>
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	691b      	ldr	r3, [r3, #16]
 8015830:	2b00      	cmp	r3, #0
 8015832:	d104      	bne.n	801583e <osThreadNew+0xca>
          mem = 0;
 8015834:	2300      	movs	r3, #0
 8015836:	61bb      	str	r3, [r7, #24]
 8015838:	e001      	b.n	801583e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801583a:	2300      	movs	r3, #0
 801583c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801583e:	69bb      	ldr	r3, [r7, #24]
 8015840:	2b01      	cmp	r3, #1
 8015842:	d110      	bne.n	8015866 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8015848:	687a      	ldr	r2, [r7, #4]
 801584a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801584c:	9202      	str	r2, [sp, #8]
 801584e:	9301      	str	r3, [sp, #4]
 8015850:	69fb      	ldr	r3, [r7, #28]
 8015852:	9300      	str	r3, [sp, #0]
 8015854:	68bb      	ldr	r3, [r7, #8]
 8015856:	6a3a      	ldr	r2, [r7, #32]
 8015858:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801585a:	68f8      	ldr	r0, [r7, #12]
 801585c:	f001 f8f8 	bl	8016a50 <xTaskCreateStatic>
 8015860:	4603      	mov	r3, r0
 8015862:	613b      	str	r3, [r7, #16]
 8015864:	e013      	b.n	801588e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8015866:	69bb      	ldr	r3, [r7, #24]
 8015868:	2b00      	cmp	r3, #0
 801586a:	d110      	bne.n	801588e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801586c:	6a3b      	ldr	r3, [r7, #32]
 801586e:	b29a      	uxth	r2, r3
 8015870:	f107 0310 	add.w	r3, r7, #16
 8015874:	9301      	str	r3, [sp, #4]
 8015876:	69fb      	ldr	r3, [r7, #28]
 8015878:	9300      	str	r3, [sp, #0]
 801587a:	68bb      	ldr	r3, [r7, #8]
 801587c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801587e:	68f8      	ldr	r0, [r7, #12]
 8015880:	f001 f943 	bl	8016b0a <xTaskCreate>
 8015884:	4603      	mov	r3, r0
 8015886:	2b01      	cmp	r3, #1
 8015888:	d001      	beq.n	801588e <osThreadNew+0x11a>
            hTask = NULL;
 801588a:	2300      	movs	r3, #0
 801588c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801588e:	693b      	ldr	r3, [r7, #16]
}
 8015890:	4618      	mov	r0, r3
 8015892:	3728      	adds	r7, #40	; 0x28
 8015894:	46bd      	mov	sp, r7
 8015896:	bd80      	pop	{r7, pc}

08015898 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8015898:	b580      	push	{r7, lr}
 801589a:	b084      	sub	sp, #16
 801589c:	af00      	add	r7, sp, #0
 801589e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80158a0:	f3ef 8305 	mrs	r3, IPSR
 80158a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80158a6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	d003      	beq.n	80158b4 <osDelay+0x1c>
    stat = osErrorISR;
 80158ac:	f06f 0305 	mvn.w	r3, #5
 80158b0:	60fb      	str	r3, [r7, #12]
 80158b2:	e007      	b.n	80158c4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80158b4:	2300      	movs	r3, #0
 80158b6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	d002      	beq.n	80158c4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80158be:	6878      	ldr	r0, [r7, #4]
 80158c0:	f001 fa58 	bl	8016d74 <vTaskDelay>
    }
  }

  return (stat);
 80158c4:	68fb      	ldr	r3, [r7, #12]
}
 80158c6:	4618      	mov	r0, r3
 80158c8:	3710      	adds	r7, #16
 80158ca:	46bd      	mov	sp, r7
 80158cc:	bd80      	pop	{r7, pc}

080158ce <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80158ce:	b580      	push	{r7, lr}
 80158d0:	b08a      	sub	sp, #40	; 0x28
 80158d2:	af02      	add	r7, sp, #8
 80158d4:	60f8      	str	r0, [r7, #12]
 80158d6:	60b9      	str	r1, [r7, #8]
 80158d8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80158da:	2300      	movs	r3, #0
 80158dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80158de:	f3ef 8305 	mrs	r3, IPSR
 80158e2:	613b      	str	r3, [r7, #16]
  return(result);
 80158e4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80158e6:	2b00      	cmp	r3, #0
 80158e8:	d175      	bne.n	80159d6 <osSemaphoreNew+0x108>
 80158ea:	68fb      	ldr	r3, [r7, #12]
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	d072      	beq.n	80159d6 <osSemaphoreNew+0x108>
 80158f0:	68ba      	ldr	r2, [r7, #8]
 80158f2:	68fb      	ldr	r3, [r7, #12]
 80158f4:	429a      	cmp	r2, r3
 80158f6:	d86e      	bhi.n	80159d6 <osSemaphoreNew+0x108>
    mem = -1;
 80158f8:	f04f 33ff 	mov.w	r3, #4294967295
 80158fc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	2b00      	cmp	r3, #0
 8015902:	d015      	beq.n	8015930 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	689b      	ldr	r3, [r3, #8]
 8015908:	2b00      	cmp	r3, #0
 801590a:	d006      	beq.n	801591a <osSemaphoreNew+0x4c>
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	68db      	ldr	r3, [r3, #12]
 8015910:	2b4f      	cmp	r3, #79	; 0x4f
 8015912:	d902      	bls.n	801591a <osSemaphoreNew+0x4c>
        mem = 1;
 8015914:	2301      	movs	r3, #1
 8015916:	61bb      	str	r3, [r7, #24]
 8015918:	e00c      	b.n	8015934 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	689b      	ldr	r3, [r3, #8]
 801591e:	2b00      	cmp	r3, #0
 8015920:	d108      	bne.n	8015934 <osSemaphoreNew+0x66>
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	68db      	ldr	r3, [r3, #12]
 8015926:	2b00      	cmp	r3, #0
 8015928:	d104      	bne.n	8015934 <osSemaphoreNew+0x66>
          mem = 0;
 801592a:	2300      	movs	r3, #0
 801592c:	61bb      	str	r3, [r7, #24]
 801592e:	e001      	b.n	8015934 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8015930:	2300      	movs	r3, #0
 8015932:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8015934:	69bb      	ldr	r3, [r7, #24]
 8015936:	f1b3 3fff 	cmp.w	r3, #4294967295
 801593a:	d04c      	beq.n	80159d6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 801593c:	68fb      	ldr	r3, [r7, #12]
 801593e:	2b01      	cmp	r3, #1
 8015940:	d128      	bne.n	8015994 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8015942:	69bb      	ldr	r3, [r7, #24]
 8015944:	2b01      	cmp	r3, #1
 8015946:	d10a      	bne.n	801595e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	689b      	ldr	r3, [r3, #8]
 801594c:	2203      	movs	r2, #3
 801594e:	9200      	str	r2, [sp, #0]
 8015950:	2200      	movs	r2, #0
 8015952:	2100      	movs	r1, #0
 8015954:	2001      	movs	r0, #1
 8015956:	f000 f986 	bl	8015c66 <xQueueGenericCreateStatic>
 801595a:	61f8      	str	r0, [r7, #28]
 801595c:	e005      	b.n	801596a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 801595e:	2203      	movs	r2, #3
 8015960:	2100      	movs	r1, #0
 8015962:	2001      	movs	r0, #1
 8015964:	f000 f9f7 	bl	8015d56 <xQueueGenericCreate>
 8015968:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 801596a:	69fb      	ldr	r3, [r7, #28]
 801596c:	2b00      	cmp	r3, #0
 801596e:	d022      	beq.n	80159b6 <osSemaphoreNew+0xe8>
 8015970:	68bb      	ldr	r3, [r7, #8]
 8015972:	2b00      	cmp	r3, #0
 8015974:	d01f      	beq.n	80159b6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8015976:	2300      	movs	r3, #0
 8015978:	2200      	movs	r2, #0
 801597a:	2100      	movs	r1, #0
 801597c:	69f8      	ldr	r0, [r7, #28]
 801597e:	f000 fab1 	bl	8015ee4 <xQueueGenericSend>
 8015982:	4603      	mov	r3, r0
 8015984:	2b01      	cmp	r3, #1
 8015986:	d016      	beq.n	80159b6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8015988:	69f8      	ldr	r0, [r7, #28]
 801598a:	f000 fe8d 	bl	80166a8 <vQueueDelete>
            hSemaphore = NULL;
 801598e:	2300      	movs	r3, #0
 8015990:	61fb      	str	r3, [r7, #28]
 8015992:	e010      	b.n	80159b6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8015994:	69bb      	ldr	r3, [r7, #24]
 8015996:	2b01      	cmp	r3, #1
 8015998:	d108      	bne.n	80159ac <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	689b      	ldr	r3, [r3, #8]
 801599e:	461a      	mov	r2, r3
 80159a0:	68b9      	ldr	r1, [r7, #8]
 80159a2:	68f8      	ldr	r0, [r7, #12]
 80159a4:	f000 fa34 	bl	8015e10 <xQueueCreateCountingSemaphoreStatic>
 80159a8:	61f8      	str	r0, [r7, #28]
 80159aa:	e004      	b.n	80159b6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80159ac:	68b9      	ldr	r1, [r7, #8]
 80159ae:	68f8      	ldr	r0, [r7, #12]
 80159b0:	f000 fa65 	bl	8015e7e <xQueueCreateCountingSemaphore>
 80159b4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80159b6:	69fb      	ldr	r3, [r7, #28]
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	d00c      	beq.n	80159d6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	2b00      	cmp	r3, #0
 80159c0:	d003      	beq.n	80159ca <osSemaphoreNew+0xfc>
          name = attr->name;
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	681b      	ldr	r3, [r3, #0]
 80159c6:	617b      	str	r3, [r7, #20]
 80159c8:	e001      	b.n	80159ce <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80159ca:	2300      	movs	r3, #0
 80159cc:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80159ce:	6979      	ldr	r1, [r7, #20]
 80159d0:	69f8      	ldr	r0, [r7, #28]
 80159d2:	f000 ffb5 	bl	8016940 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80159d6:	69fb      	ldr	r3, [r7, #28]
}
 80159d8:	4618      	mov	r0, r3
 80159da:	3720      	adds	r7, #32
 80159dc:	46bd      	mov	sp, r7
 80159de:	bd80      	pop	{r7, pc}

080159e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80159e0:	b480      	push	{r7}
 80159e2:	b085      	sub	sp, #20
 80159e4:	af00      	add	r7, sp, #0
 80159e6:	60f8      	str	r0, [r7, #12]
 80159e8:	60b9      	str	r1, [r7, #8]
 80159ea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80159ec:	68fb      	ldr	r3, [r7, #12]
 80159ee:	4a07      	ldr	r2, [pc, #28]	; (8015a0c <vApplicationGetIdleTaskMemory+0x2c>)
 80159f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80159f2:	68bb      	ldr	r3, [r7, #8]
 80159f4:	4a06      	ldr	r2, [pc, #24]	; (8015a10 <vApplicationGetIdleTaskMemory+0x30>)
 80159f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	2280      	movs	r2, #128	; 0x80
 80159fc:	601a      	str	r2, [r3, #0]
}
 80159fe:	bf00      	nop
 8015a00:	3714      	adds	r7, #20
 8015a02:	46bd      	mov	sp, r7
 8015a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a08:	4770      	bx	lr
 8015a0a:	bf00      	nop
 8015a0c:	24009670 	.word	0x24009670
 8015a10:	240096cc 	.word	0x240096cc

08015a14 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8015a14:	b480      	push	{r7}
 8015a16:	b085      	sub	sp, #20
 8015a18:	af00      	add	r7, sp, #0
 8015a1a:	60f8      	str	r0, [r7, #12]
 8015a1c:	60b9      	str	r1, [r7, #8]
 8015a1e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8015a20:	68fb      	ldr	r3, [r7, #12]
 8015a22:	4a07      	ldr	r2, [pc, #28]	; (8015a40 <vApplicationGetTimerTaskMemory+0x2c>)
 8015a24:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8015a26:	68bb      	ldr	r3, [r7, #8]
 8015a28:	4a06      	ldr	r2, [pc, #24]	; (8015a44 <vApplicationGetTimerTaskMemory+0x30>)
 8015a2a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015a32:	601a      	str	r2, [r3, #0]
}
 8015a34:	bf00      	nop
 8015a36:	3714      	adds	r7, #20
 8015a38:	46bd      	mov	sp, r7
 8015a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a3e:	4770      	bx	lr
 8015a40:	240098cc 	.word	0x240098cc
 8015a44:	24009928 	.word	0x24009928

08015a48 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8015a48:	b480      	push	{r7}
 8015a4a:	b083      	sub	sp, #12
 8015a4c:	af00      	add	r7, sp, #0
 8015a4e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	f103 0208 	add.w	r2, r3, #8
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8015a60:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	f103 0208 	add.w	r2, r3, #8
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	f103 0208 	add.w	r2, r3, #8
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	2200      	movs	r2, #0
 8015a7a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8015a7c:	bf00      	nop
 8015a7e:	370c      	adds	r7, #12
 8015a80:	46bd      	mov	sp, r7
 8015a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a86:	4770      	bx	lr

08015a88 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8015a88:	b480      	push	{r7}
 8015a8a:	b083      	sub	sp, #12
 8015a8c:	af00      	add	r7, sp, #0
 8015a8e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	2200      	movs	r2, #0
 8015a94:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8015a96:	bf00      	nop
 8015a98:	370c      	adds	r7, #12
 8015a9a:	46bd      	mov	sp, r7
 8015a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aa0:	4770      	bx	lr

08015aa2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015aa2:	b480      	push	{r7}
 8015aa4:	b085      	sub	sp, #20
 8015aa6:	af00      	add	r7, sp, #0
 8015aa8:	6078      	str	r0, [r7, #4]
 8015aaa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	685b      	ldr	r3, [r3, #4]
 8015ab0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8015ab2:	683b      	ldr	r3, [r7, #0]
 8015ab4:	68fa      	ldr	r2, [r7, #12]
 8015ab6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8015ab8:	68fb      	ldr	r3, [r7, #12]
 8015aba:	689a      	ldr	r2, [r3, #8]
 8015abc:	683b      	ldr	r3, [r7, #0]
 8015abe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8015ac0:	68fb      	ldr	r3, [r7, #12]
 8015ac2:	689b      	ldr	r3, [r3, #8]
 8015ac4:	683a      	ldr	r2, [r7, #0]
 8015ac6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8015ac8:	68fb      	ldr	r3, [r7, #12]
 8015aca:	683a      	ldr	r2, [r7, #0]
 8015acc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8015ace:	683b      	ldr	r3, [r7, #0]
 8015ad0:	687a      	ldr	r2, [r7, #4]
 8015ad2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	681b      	ldr	r3, [r3, #0]
 8015ad8:	1c5a      	adds	r2, r3, #1
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	601a      	str	r2, [r3, #0]
}
 8015ade:	bf00      	nop
 8015ae0:	3714      	adds	r7, #20
 8015ae2:	46bd      	mov	sp, r7
 8015ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ae8:	4770      	bx	lr

08015aea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015aea:	b480      	push	{r7}
 8015aec:	b085      	sub	sp, #20
 8015aee:	af00      	add	r7, sp, #0
 8015af0:	6078      	str	r0, [r7, #4]
 8015af2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8015af4:	683b      	ldr	r3, [r7, #0]
 8015af6:	681b      	ldr	r3, [r3, #0]
 8015af8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8015afa:	68bb      	ldr	r3, [r7, #8]
 8015afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b00:	d103      	bne.n	8015b0a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	691b      	ldr	r3, [r3, #16]
 8015b06:	60fb      	str	r3, [r7, #12]
 8015b08:	e00c      	b.n	8015b24 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	3308      	adds	r3, #8
 8015b0e:	60fb      	str	r3, [r7, #12]
 8015b10:	e002      	b.n	8015b18 <vListInsert+0x2e>
 8015b12:	68fb      	ldr	r3, [r7, #12]
 8015b14:	685b      	ldr	r3, [r3, #4]
 8015b16:	60fb      	str	r3, [r7, #12]
 8015b18:	68fb      	ldr	r3, [r7, #12]
 8015b1a:	685b      	ldr	r3, [r3, #4]
 8015b1c:	681b      	ldr	r3, [r3, #0]
 8015b1e:	68ba      	ldr	r2, [r7, #8]
 8015b20:	429a      	cmp	r2, r3
 8015b22:	d2f6      	bcs.n	8015b12 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8015b24:	68fb      	ldr	r3, [r7, #12]
 8015b26:	685a      	ldr	r2, [r3, #4]
 8015b28:	683b      	ldr	r3, [r7, #0]
 8015b2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8015b2c:	683b      	ldr	r3, [r7, #0]
 8015b2e:	685b      	ldr	r3, [r3, #4]
 8015b30:	683a      	ldr	r2, [r7, #0]
 8015b32:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8015b34:	683b      	ldr	r3, [r7, #0]
 8015b36:	68fa      	ldr	r2, [r7, #12]
 8015b38:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8015b3a:	68fb      	ldr	r3, [r7, #12]
 8015b3c:	683a      	ldr	r2, [r7, #0]
 8015b3e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8015b40:	683b      	ldr	r3, [r7, #0]
 8015b42:	687a      	ldr	r2, [r7, #4]
 8015b44:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	681b      	ldr	r3, [r3, #0]
 8015b4a:	1c5a      	adds	r2, r3, #1
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	601a      	str	r2, [r3, #0]
}
 8015b50:	bf00      	nop
 8015b52:	3714      	adds	r7, #20
 8015b54:	46bd      	mov	sp, r7
 8015b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b5a:	4770      	bx	lr

08015b5c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8015b5c:	b480      	push	{r7}
 8015b5e:	b085      	sub	sp, #20
 8015b60:	af00      	add	r7, sp, #0
 8015b62:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	691b      	ldr	r3, [r3, #16]
 8015b68:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	685b      	ldr	r3, [r3, #4]
 8015b6e:	687a      	ldr	r2, [r7, #4]
 8015b70:	6892      	ldr	r2, [r2, #8]
 8015b72:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	689b      	ldr	r3, [r3, #8]
 8015b78:	687a      	ldr	r2, [r7, #4]
 8015b7a:	6852      	ldr	r2, [r2, #4]
 8015b7c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8015b7e:	68fb      	ldr	r3, [r7, #12]
 8015b80:	685b      	ldr	r3, [r3, #4]
 8015b82:	687a      	ldr	r2, [r7, #4]
 8015b84:	429a      	cmp	r2, r3
 8015b86:	d103      	bne.n	8015b90 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	689a      	ldr	r2, [r3, #8]
 8015b8c:	68fb      	ldr	r3, [r7, #12]
 8015b8e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	2200      	movs	r2, #0
 8015b94:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8015b96:	68fb      	ldr	r3, [r7, #12]
 8015b98:	681b      	ldr	r3, [r3, #0]
 8015b9a:	1e5a      	subs	r2, r3, #1
 8015b9c:	68fb      	ldr	r3, [r7, #12]
 8015b9e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8015ba0:	68fb      	ldr	r3, [r7, #12]
 8015ba2:	681b      	ldr	r3, [r3, #0]
}
 8015ba4:	4618      	mov	r0, r3
 8015ba6:	3714      	adds	r7, #20
 8015ba8:	46bd      	mov	sp, r7
 8015baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bae:	4770      	bx	lr

08015bb0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8015bb0:	b580      	push	{r7, lr}
 8015bb2:	b084      	sub	sp, #16
 8015bb4:	af00      	add	r7, sp, #0
 8015bb6:	6078      	str	r0, [r7, #4]
 8015bb8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8015bbe:	68fb      	ldr	r3, [r7, #12]
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	d10a      	bne.n	8015bda <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8015bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bc8:	f383 8811 	msr	BASEPRI, r3
 8015bcc:	f3bf 8f6f 	isb	sy
 8015bd0:	f3bf 8f4f 	dsb	sy
 8015bd4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8015bd6:	bf00      	nop
 8015bd8:	e7fe      	b.n	8015bd8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8015bda:	f002 fb6b 	bl	80182b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015bde:	68fb      	ldr	r3, [r7, #12]
 8015be0:	681a      	ldr	r2, [r3, #0]
 8015be2:	68fb      	ldr	r3, [r7, #12]
 8015be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015be6:	68f9      	ldr	r1, [r7, #12]
 8015be8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015bea:	fb01 f303 	mul.w	r3, r1, r3
 8015bee:	441a      	add	r2, r3
 8015bf0:	68fb      	ldr	r3, [r7, #12]
 8015bf2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8015bf4:	68fb      	ldr	r3, [r7, #12]
 8015bf6:	2200      	movs	r2, #0
 8015bf8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8015bfa:	68fb      	ldr	r3, [r7, #12]
 8015bfc:	681a      	ldr	r2, [r3, #0]
 8015bfe:	68fb      	ldr	r3, [r7, #12]
 8015c00:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015c02:	68fb      	ldr	r3, [r7, #12]
 8015c04:	681a      	ldr	r2, [r3, #0]
 8015c06:	68fb      	ldr	r3, [r7, #12]
 8015c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015c0a:	3b01      	subs	r3, #1
 8015c0c:	68f9      	ldr	r1, [r7, #12]
 8015c0e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015c10:	fb01 f303 	mul.w	r3, r1, r3
 8015c14:	441a      	add	r2, r3
 8015c16:	68fb      	ldr	r3, [r7, #12]
 8015c18:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8015c1a:	68fb      	ldr	r3, [r7, #12]
 8015c1c:	22ff      	movs	r2, #255	; 0xff
 8015c1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8015c22:	68fb      	ldr	r3, [r7, #12]
 8015c24:	22ff      	movs	r2, #255	; 0xff
 8015c26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8015c2a:	683b      	ldr	r3, [r7, #0]
 8015c2c:	2b00      	cmp	r3, #0
 8015c2e:	d109      	bne.n	8015c44 <xQueueGenericReset+0x94>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015c30:	68fb      	ldr	r3, [r7, #12]
 8015c32:	691b      	ldr	r3, [r3, #16]
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	d00f      	beq.n	8015c58 <xQueueGenericReset+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015c38:	68fb      	ldr	r3, [r7, #12]
 8015c3a:	3310      	adds	r3, #16
 8015c3c:	4618      	mov	r0, r3
 8015c3e:	f001 fb25 	bl	801728c <xTaskRemoveFromEventList>
 8015c42:	e009      	b.n	8015c58 <xQueueGenericReset+0xa8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8015c44:	68fb      	ldr	r3, [r7, #12]
 8015c46:	3310      	adds	r3, #16
 8015c48:	4618      	mov	r0, r3
 8015c4a:	f7ff fefd 	bl	8015a48 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8015c4e:	68fb      	ldr	r3, [r7, #12]
 8015c50:	3324      	adds	r3, #36	; 0x24
 8015c52:	4618      	mov	r0, r3
 8015c54:	f7ff fef8 	bl	8015a48 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8015c58:	f002 fb5c 	bl	8018314 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8015c5c:	2301      	movs	r3, #1
}
 8015c5e:	4618      	mov	r0, r3
 8015c60:	3710      	adds	r7, #16
 8015c62:	46bd      	mov	sp, r7
 8015c64:	bd80      	pop	{r7, pc}

08015c66 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8015c66:	b580      	push	{r7, lr}
 8015c68:	b08e      	sub	sp, #56	; 0x38
 8015c6a:	af02      	add	r7, sp, #8
 8015c6c:	60f8      	str	r0, [r7, #12]
 8015c6e:	60b9      	str	r1, [r7, #8]
 8015c70:	607a      	str	r2, [r7, #4]
 8015c72:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015c74:	68fb      	ldr	r3, [r7, #12]
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	d10a      	bne.n	8015c90 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8015c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c7e:	f383 8811 	msr	BASEPRI, r3
 8015c82:	f3bf 8f6f 	isb	sy
 8015c86:	f3bf 8f4f 	dsb	sy
 8015c8a:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015c8c:	bf00      	nop
 8015c8e:	e7fe      	b.n	8015c8e <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8015c90:	683b      	ldr	r3, [r7, #0]
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	d10a      	bne.n	8015cac <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8015c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c9a:	f383 8811 	msr	BASEPRI, r3
 8015c9e:	f3bf 8f6f 	isb	sy
 8015ca2:	f3bf 8f4f 	dsb	sy
 8015ca6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015ca8:	bf00      	nop
 8015caa:	e7fe      	b.n	8015caa <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d002      	beq.n	8015cb8 <xQueueGenericCreateStatic+0x52>
 8015cb2:	68bb      	ldr	r3, [r7, #8]
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	d001      	beq.n	8015cbc <xQueueGenericCreateStatic+0x56>
 8015cb8:	2301      	movs	r3, #1
 8015cba:	e000      	b.n	8015cbe <xQueueGenericCreateStatic+0x58>
 8015cbc:	2300      	movs	r3, #0
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	d10a      	bne.n	8015cd8 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8015cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cc6:	f383 8811 	msr	BASEPRI, r3
 8015cca:	f3bf 8f6f 	isb	sy
 8015cce:	f3bf 8f4f 	dsb	sy
 8015cd2:	623b      	str	r3, [r7, #32]
}
 8015cd4:	bf00      	nop
 8015cd6:	e7fe      	b.n	8015cd6 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d102      	bne.n	8015ce4 <xQueueGenericCreateStatic+0x7e>
 8015cde:	68bb      	ldr	r3, [r7, #8]
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	d101      	bne.n	8015ce8 <xQueueGenericCreateStatic+0x82>
 8015ce4:	2301      	movs	r3, #1
 8015ce6:	e000      	b.n	8015cea <xQueueGenericCreateStatic+0x84>
 8015ce8:	2300      	movs	r3, #0
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	d10a      	bne.n	8015d04 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8015cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cf2:	f383 8811 	msr	BASEPRI, r3
 8015cf6:	f3bf 8f6f 	isb	sy
 8015cfa:	f3bf 8f4f 	dsb	sy
 8015cfe:	61fb      	str	r3, [r7, #28]
}
 8015d00:	bf00      	nop
 8015d02:	e7fe      	b.n	8015d02 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8015d04:	2350      	movs	r3, #80	; 0x50
 8015d06:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8015d08:	697b      	ldr	r3, [r7, #20]
 8015d0a:	2b50      	cmp	r3, #80	; 0x50
 8015d0c:	d00a      	beq.n	8015d24 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8015d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d12:	f383 8811 	msr	BASEPRI, r3
 8015d16:	f3bf 8f6f 	isb	sy
 8015d1a:	f3bf 8f4f 	dsb	sy
 8015d1e:	61bb      	str	r3, [r7, #24]
}
 8015d20:	bf00      	nop
 8015d22:	e7fe      	b.n	8015d22 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8015d24:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015d26:	683b      	ldr	r3, [r7, #0]
 8015d28:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8015d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	d00d      	beq.n	8015d4c <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8015d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d32:	2201      	movs	r2, #1
 8015d34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015d38:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8015d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d3e:	9300      	str	r3, [sp, #0]
 8015d40:	4613      	mov	r3, r2
 8015d42:	687a      	ldr	r2, [r7, #4]
 8015d44:	68b9      	ldr	r1, [r7, #8]
 8015d46:	68f8      	ldr	r0, [r7, #12]
 8015d48:	f000 f83f 	bl	8015dca <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8015d4e:	4618      	mov	r0, r3
 8015d50:	3730      	adds	r7, #48	; 0x30
 8015d52:	46bd      	mov	sp, r7
 8015d54:	bd80      	pop	{r7, pc}

08015d56 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8015d56:	b580      	push	{r7, lr}
 8015d58:	b08a      	sub	sp, #40	; 0x28
 8015d5a:	af02      	add	r7, sp, #8
 8015d5c:	60f8      	str	r0, [r7, #12]
 8015d5e:	60b9      	str	r1, [r7, #8]
 8015d60:	4613      	mov	r3, r2
 8015d62:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015d64:	68fb      	ldr	r3, [r7, #12]
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	d10a      	bne.n	8015d80 <xQueueGenericCreate+0x2a>
	__asm volatile
 8015d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d6e:	f383 8811 	msr	BASEPRI, r3
 8015d72:	f3bf 8f6f 	isb	sy
 8015d76:	f3bf 8f4f 	dsb	sy
 8015d7a:	613b      	str	r3, [r7, #16]
}
 8015d7c:	bf00      	nop
 8015d7e:	e7fe      	b.n	8015d7e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015d80:	68fb      	ldr	r3, [r7, #12]
 8015d82:	68ba      	ldr	r2, [r7, #8]
 8015d84:	fb02 f303 	mul.w	r3, r2, r3
 8015d88:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8015d8a:	69fb      	ldr	r3, [r7, #28]
 8015d8c:	3350      	adds	r3, #80	; 0x50
 8015d8e:	4618      	mov	r0, r3
 8015d90:	f002 fbb2 	bl	80184f8 <pvPortMalloc>
 8015d94:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8015d96:	69bb      	ldr	r3, [r7, #24]
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	d011      	beq.n	8015dc0 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8015d9c:	69bb      	ldr	r3, [r7, #24]
 8015d9e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015da0:	697b      	ldr	r3, [r7, #20]
 8015da2:	3350      	adds	r3, #80	; 0x50
 8015da4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015da6:	69bb      	ldr	r3, [r7, #24]
 8015da8:	2200      	movs	r2, #0
 8015daa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015dae:	79fa      	ldrb	r2, [r7, #7]
 8015db0:	69bb      	ldr	r3, [r7, #24]
 8015db2:	9300      	str	r3, [sp, #0]
 8015db4:	4613      	mov	r3, r2
 8015db6:	697a      	ldr	r2, [r7, #20]
 8015db8:	68b9      	ldr	r1, [r7, #8]
 8015dba:	68f8      	ldr	r0, [r7, #12]
 8015dbc:	f000 f805 	bl	8015dca <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015dc0:	69bb      	ldr	r3, [r7, #24]
	}
 8015dc2:	4618      	mov	r0, r3
 8015dc4:	3720      	adds	r7, #32
 8015dc6:	46bd      	mov	sp, r7
 8015dc8:	bd80      	pop	{r7, pc}

08015dca <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8015dca:	b580      	push	{r7, lr}
 8015dcc:	b084      	sub	sp, #16
 8015dce:	af00      	add	r7, sp, #0
 8015dd0:	60f8      	str	r0, [r7, #12]
 8015dd2:	60b9      	str	r1, [r7, #8]
 8015dd4:	607a      	str	r2, [r7, #4]
 8015dd6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8015dd8:	68bb      	ldr	r3, [r7, #8]
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	d103      	bne.n	8015de6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8015dde:	69bb      	ldr	r3, [r7, #24]
 8015de0:	69ba      	ldr	r2, [r7, #24]
 8015de2:	601a      	str	r2, [r3, #0]
 8015de4:	e002      	b.n	8015dec <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8015de6:	69bb      	ldr	r3, [r7, #24]
 8015de8:	687a      	ldr	r2, [r7, #4]
 8015dea:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8015dec:	69bb      	ldr	r3, [r7, #24]
 8015dee:	68fa      	ldr	r2, [r7, #12]
 8015df0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8015df2:	69bb      	ldr	r3, [r7, #24]
 8015df4:	68ba      	ldr	r2, [r7, #8]
 8015df6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8015df8:	2101      	movs	r1, #1
 8015dfa:	69b8      	ldr	r0, [r7, #24]
 8015dfc:	f7ff fed8 	bl	8015bb0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8015e00:	69bb      	ldr	r3, [r7, #24]
 8015e02:	78fa      	ldrb	r2, [r7, #3]
 8015e04:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8015e08:	bf00      	nop
 8015e0a:	3710      	adds	r7, #16
 8015e0c:	46bd      	mov	sp, r7
 8015e0e:	bd80      	pop	{r7, pc}

08015e10 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8015e10:	b580      	push	{r7, lr}
 8015e12:	b08a      	sub	sp, #40	; 0x28
 8015e14:	af02      	add	r7, sp, #8
 8015e16:	60f8      	str	r0, [r7, #12]
 8015e18:	60b9      	str	r1, [r7, #8]
 8015e1a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8015e1c:	68fb      	ldr	r3, [r7, #12]
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	d10a      	bne.n	8015e38 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8015e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e26:	f383 8811 	msr	BASEPRI, r3
 8015e2a:	f3bf 8f6f 	isb	sy
 8015e2e:	f3bf 8f4f 	dsb	sy
 8015e32:	61bb      	str	r3, [r7, #24]
}
 8015e34:	bf00      	nop
 8015e36:	e7fe      	b.n	8015e36 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8015e38:	68ba      	ldr	r2, [r7, #8]
 8015e3a:	68fb      	ldr	r3, [r7, #12]
 8015e3c:	429a      	cmp	r2, r3
 8015e3e:	d90a      	bls.n	8015e56 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8015e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e44:	f383 8811 	msr	BASEPRI, r3
 8015e48:	f3bf 8f6f 	isb	sy
 8015e4c:	f3bf 8f4f 	dsb	sy
 8015e50:	617b      	str	r3, [r7, #20]
}
 8015e52:	bf00      	nop
 8015e54:	e7fe      	b.n	8015e54 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8015e56:	2302      	movs	r3, #2
 8015e58:	9300      	str	r3, [sp, #0]
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	2200      	movs	r2, #0
 8015e5e:	2100      	movs	r1, #0
 8015e60:	68f8      	ldr	r0, [r7, #12]
 8015e62:	f7ff ff00 	bl	8015c66 <xQueueGenericCreateStatic>
 8015e66:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8015e68:	69fb      	ldr	r3, [r7, #28]
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	d002      	beq.n	8015e74 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8015e6e:	69fb      	ldr	r3, [r7, #28]
 8015e70:	68ba      	ldr	r2, [r7, #8]
 8015e72:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8015e74:	69fb      	ldr	r3, [r7, #28]
	}
 8015e76:	4618      	mov	r0, r3
 8015e78:	3720      	adds	r7, #32
 8015e7a:	46bd      	mov	sp, r7
 8015e7c:	bd80      	pop	{r7, pc}

08015e7e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8015e7e:	b580      	push	{r7, lr}
 8015e80:	b086      	sub	sp, #24
 8015e82:	af00      	add	r7, sp, #0
 8015e84:	6078      	str	r0, [r7, #4]
 8015e86:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d10a      	bne.n	8015ea4 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8015e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e92:	f383 8811 	msr	BASEPRI, r3
 8015e96:	f3bf 8f6f 	isb	sy
 8015e9a:	f3bf 8f4f 	dsb	sy
 8015e9e:	613b      	str	r3, [r7, #16]
}
 8015ea0:	bf00      	nop
 8015ea2:	e7fe      	b.n	8015ea2 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8015ea4:	683a      	ldr	r2, [r7, #0]
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	429a      	cmp	r2, r3
 8015eaa:	d90a      	bls.n	8015ec2 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8015eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015eb0:	f383 8811 	msr	BASEPRI, r3
 8015eb4:	f3bf 8f6f 	isb	sy
 8015eb8:	f3bf 8f4f 	dsb	sy
 8015ebc:	60fb      	str	r3, [r7, #12]
}
 8015ebe:	bf00      	nop
 8015ec0:	e7fe      	b.n	8015ec0 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8015ec2:	2202      	movs	r2, #2
 8015ec4:	2100      	movs	r1, #0
 8015ec6:	6878      	ldr	r0, [r7, #4]
 8015ec8:	f7ff ff45 	bl	8015d56 <xQueueGenericCreate>
 8015ecc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8015ece:	697b      	ldr	r3, [r7, #20]
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d002      	beq.n	8015eda <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8015ed4:	697b      	ldr	r3, [r7, #20]
 8015ed6:	683a      	ldr	r2, [r7, #0]
 8015ed8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8015eda:	697b      	ldr	r3, [r7, #20]
	}
 8015edc:	4618      	mov	r0, r3
 8015ede:	3718      	adds	r7, #24
 8015ee0:	46bd      	mov	sp, r7
 8015ee2:	bd80      	pop	{r7, pc}

08015ee4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8015ee4:	b580      	push	{r7, lr}
 8015ee6:	b08e      	sub	sp, #56	; 0x38
 8015ee8:	af00      	add	r7, sp, #0
 8015eea:	60f8      	str	r0, [r7, #12]
 8015eec:	60b9      	str	r1, [r7, #8]
 8015eee:	607a      	str	r2, [r7, #4]
 8015ef0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8015ef2:	2300      	movs	r3, #0
 8015ef4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015ef6:	68fb      	ldr	r3, [r7, #12]
 8015ef8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015efc:	2b00      	cmp	r3, #0
 8015efe:	d10a      	bne.n	8015f16 <xQueueGenericSend+0x32>
	__asm volatile
 8015f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f04:	f383 8811 	msr	BASEPRI, r3
 8015f08:	f3bf 8f6f 	isb	sy
 8015f0c:	f3bf 8f4f 	dsb	sy
 8015f10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015f12:	bf00      	nop
 8015f14:	e7fe      	b.n	8015f14 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015f16:	68bb      	ldr	r3, [r7, #8]
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d103      	bne.n	8015f24 <xQueueGenericSend+0x40>
 8015f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	d101      	bne.n	8015f28 <xQueueGenericSend+0x44>
 8015f24:	2301      	movs	r3, #1
 8015f26:	e000      	b.n	8015f2a <xQueueGenericSend+0x46>
 8015f28:	2300      	movs	r3, #0
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d10a      	bne.n	8015f44 <xQueueGenericSend+0x60>
	__asm volatile
 8015f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f32:	f383 8811 	msr	BASEPRI, r3
 8015f36:	f3bf 8f6f 	isb	sy
 8015f3a:	f3bf 8f4f 	dsb	sy
 8015f3e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015f40:	bf00      	nop
 8015f42:	e7fe      	b.n	8015f42 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015f44:	683b      	ldr	r3, [r7, #0]
 8015f46:	2b02      	cmp	r3, #2
 8015f48:	d103      	bne.n	8015f52 <xQueueGenericSend+0x6e>
 8015f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015f4e:	2b01      	cmp	r3, #1
 8015f50:	d101      	bne.n	8015f56 <xQueueGenericSend+0x72>
 8015f52:	2301      	movs	r3, #1
 8015f54:	e000      	b.n	8015f58 <xQueueGenericSend+0x74>
 8015f56:	2300      	movs	r3, #0
 8015f58:	2b00      	cmp	r3, #0
 8015f5a:	d10a      	bne.n	8015f72 <xQueueGenericSend+0x8e>
	__asm volatile
 8015f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f60:	f383 8811 	msr	BASEPRI, r3
 8015f64:	f3bf 8f6f 	isb	sy
 8015f68:	f3bf 8f4f 	dsb	sy
 8015f6c:	623b      	str	r3, [r7, #32]
}
 8015f6e:	bf00      	nop
 8015f70:	e7fe      	b.n	8015f70 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015f72:	f001 fb43 	bl	80175fc <xTaskGetSchedulerState>
 8015f76:	4603      	mov	r3, r0
 8015f78:	2b00      	cmp	r3, #0
 8015f7a:	d102      	bne.n	8015f82 <xQueueGenericSend+0x9e>
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	2b00      	cmp	r3, #0
 8015f80:	d101      	bne.n	8015f86 <xQueueGenericSend+0xa2>
 8015f82:	2301      	movs	r3, #1
 8015f84:	e000      	b.n	8015f88 <xQueueGenericSend+0xa4>
 8015f86:	2300      	movs	r3, #0
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d10a      	bne.n	8015fa2 <xQueueGenericSend+0xbe>
	__asm volatile
 8015f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f90:	f383 8811 	msr	BASEPRI, r3
 8015f94:	f3bf 8f6f 	isb	sy
 8015f98:	f3bf 8f4f 	dsb	sy
 8015f9c:	61fb      	str	r3, [r7, #28]
}
 8015f9e:	bf00      	nop
 8015fa0:	e7fe      	b.n	8015fa0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015fa2:	f002 f987 	bl	80182b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015fae:	429a      	cmp	r2, r3
 8015fb0:	d302      	bcc.n	8015fb8 <xQueueGenericSend+0xd4>
 8015fb2:	683b      	ldr	r3, [r7, #0]
 8015fb4:	2b02      	cmp	r3, #2
 8015fb6:	d112      	bne.n	8015fde <xQueueGenericSend+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015fb8:	683a      	ldr	r2, [r7, #0]
 8015fba:	68b9      	ldr	r1, [r7, #8]
 8015fbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015fbe:	f000 fbae 	bl	801671e <prvCopyDataToQueue>
 8015fc2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015fc8:	2b00      	cmp	r3, #0
 8015fca:	d004      	beq.n	8015fd6 <xQueueGenericSend+0xf2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fce:	3324      	adds	r3, #36	; 0x24
 8015fd0:	4618      	mov	r0, r3
 8015fd2:	f001 f95b 	bl	801728c <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8015fd6:	f002 f99d 	bl	8018314 <vPortExitCritical>
				return pdPASS;
 8015fda:	2301      	movs	r3, #1
 8015fdc:	e062      	b.n	80160a4 <xQueueGenericSend+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	2b00      	cmp	r3, #0
 8015fe2:	d103      	bne.n	8015fec <xQueueGenericSend+0x108>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015fe4:	f002 f996 	bl	8018314 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8015fe8:	2300      	movs	r3, #0
 8015fea:	e05b      	b.n	80160a4 <xQueueGenericSend+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	d106      	bne.n	8016000 <xQueueGenericSend+0x11c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015ff2:	f107 0314 	add.w	r3, r7, #20
 8015ff6:	4618      	mov	r0, r3
 8015ff8:	f001 f9ac 	bl	8017354 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015ffc:	2301      	movs	r3, #1
 8015ffe:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016000:	f002 f988 	bl	8018314 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016004:	f000 ff50 	bl	8016ea8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016008:	f002 f954 	bl	80182b4 <vPortEnterCritical>
 801600c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801600e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016012:	b25b      	sxtb	r3, r3
 8016014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016018:	d103      	bne.n	8016022 <xQueueGenericSend+0x13e>
 801601a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801601c:	2200      	movs	r2, #0
 801601e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016024:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016028:	b25b      	sxtb	r3, r3
 801602a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801602e:	d103      	bne.n	8016038 <xQueueGenericSend+0x154>
 8016030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016032:	2200      	movs	r2, #0
 8016034:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016038:	f002 f96c 	bl	8018314 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801603c:	1d3a      	adds	r2, r7, #4
 801603e:	f107 0314 	add.w	r3, r7, #20
 8016042:	4611      	mov	r1, r2
 8016044:	4618      	mov	r0, r3
 8016046:	f001 f99b 	bl	8017380 <xTaskCheckForTimeOut>
 801604a:	4603      	mov	r3, r0
 801604c:	2b00      	cmp	r3, #0
 801604e:	d123      	bne.n	8016098 <xQueueGenericSend+0x1b4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8016050:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016052:	f000 fc5c 	bl	801690e <prvIsQueueFull>
 8016056:	4603      	mov	r3, r0
 8016058:	2b00      	cmp	r3, #0
 801605a:	d017      	beq.n	801608c <xQueueGenericSend+0x1a8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801605c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801605e:	3310      	adds	r3, #16
 8016060:	687a      	ldr	r2, [r7, #4]
 8016062:	4611      	mov	r1, r2
 8016064:	4618      	mov	r0, r3
 8016066:	f001 f8c1 	bl	80171ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801606a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801606c:	f000 fbe7 	bl	801683e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8016070:	f000 ff28 	bl	8016ec4 <xTaskResumeAll>
 8016074:	4603      	mov	r3, r0
 8016076:	2b00      	cmp	r3, #0
 8016078:	d193      	bne.n	8015fa2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801607a:	4b0c      	ldr	r3, [pc, #48]	; (80160ac <xQueueGenericSend+0x1c8>)
 801607c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016080:	601a      	str	r2, [r3, #0]
 8016082:	f3bf 8f4f 	dsb	sy
 8016086:	f3bf 8f6f 	isb	sy
 801608a:	e78a      	b.n	8015fa2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801608c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801608e:	f000 fbd6 	bl	801683e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016092:	f000 ff17 	bl	8016ec4 <xTaskResumeAll>
 8016096:	e784      	b.n	8015fa2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8016098:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801609a:	f000 fbd0 	bl	801683e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801609e:	f000 ff11 	bl	8016ec4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80160a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80160a4:	4618      	mov	r0, r3
 80160a6:	3738      	adds	r7, #56	; 0x38
 80160a8:	46bd      	mov	sp, r7
 80160aa:	bd80      	pop	{r7, pc}
 80160ac:	e000ed04 	.word	0xe000ed04

080160b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80160b0:	b580      	push	{r7, lr}
 80160b2:	b090      	sub	sp, #64	; 0x40
 80160b4:	af00      	add	r7, sp, #0
 80160b6:	60f8      	str	r0, [r7, #12]
 80160b8:	60b9      	str	r1, [r7, #8]
 80160ba:	607a      	str	r2, [r7, #4]
 80160bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80160be:	68fb      	ldr	r3, [r7, #12]
 80160c0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80160c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	d10a      	bne.n	80160de <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80160c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160cc:	f383 8811 	msr	BASEPRI, r3
 80160d0:	f3bf 8f6f 	isb	sy
 80160d4:	f3bf 8f4f 	dsb	sy
 80160d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80160da:	bf00      	nop
 80160dc:	e7fe      	b.n	80160dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80160de:	68bb      	ldr	r3, [r7, #8]
 80160e0:	2b00      	cmp	r3, #0
 80160e2:	d103      	bne.n	80160ec <xQueueGenericSendFromISR+0x3c>
 80160e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80160e8:	2b00      	cmp	r3, #0
 80160ea:	d101      	bne.n	80160f0 <xQueueGenericSendFromISR+0x40>
 80160ec:	2301      	movs	r3, #1
 80160ee:	e000      	b.n	80160f2 <xQueueGenericSendFromISR+0x42>
 80160f0:	2300      	movs	r3, #0
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	d10a      	bne.n	801610c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80160f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160fa:	f383 8811 	msr	BASEPRI, r3
 80160fe:	f3bf 8f6f 	isb	sy
 8016102:	f3bf 8f4f 	dsb	sy
 8016106:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016108:	bf00      	nop
 801610a:	e7fe      	b.n	801610a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801610c:	683b      	ldr	r3, [r7, #0]
 801610e:	2b02      	cmp	r3, #2
 8016110:	d103      	bne.n	801611a <xQueueGenericSendFromISR+0x6a>
 8016112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016116:	2b01      	cmp	r3, #1
 8016118:	d101      	bne.n	801611e <xQueueGenericSendFromISR+0x6e>
 801611a:	2301      	movs	r3, #1
 801611c:	e000      	b.n	8016120 <xQueueGenericSendFromISR+0x70>
 801611e:	2300      	movs	r3, #0
 8016120:	2b00      	cmp	r3, #0
 8016122:	d10a      	bne.n	801613a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8016124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016128:	f383 8811 	msr	BASEPRI, r3
 801612c:	f3bf 8f6f 	isb	sy
 8016130:	f3bf 8f4f 	dsb	sy
 8016134:	623b      	str	r3, [r7, #32]
}
 8016136:	bf00      	nop
 8016138:	e7fe      	b.n	8016138 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801613a:	f002 f99d 	bl	8018478 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801613e:	f3ef 8211 	mrs	r2, BASEPRI
 8016142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016146:	f383 8811 	msr	BASEPRI, r3
 801614a:	f3bf 8f6f 	isb	sy
 801614e:	f3bf 8f4f 	dsb	sy
 8016152:	61fa      	str	r2, [r7, #28]
 8016154:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8016156:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016158:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801615a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801615c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801615e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016162:	429a      	cmp	r2, r3
 8016164:	d302      	bcc.n	801616c <xQueueGenericSendFromISR+0xbc>
 8016166:	683b      	ldr	r3, [r7, #0]
 8016168:	2b02      	cmp	r3, #2
 801616a:	d12f      	bne.n	80161cc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801616c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801616e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016172:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801617a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801617c:	683a      	ldr	r2, [r7, #0]
 801617e:	68b9      	ldr	r1, [r7, #8]
 8016180:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016182:	f000 facc 	bl	801671e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8016186:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801618a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801618e:	d112      	bne.n	80161b6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016194:	2b00      	cmp	r3, #0
 8016196:	d016      	beq.n	80161c6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801619a:	3324      	adds	r3, #36	; 0x24
 801619c:	4618      	mov	r0, r3
 801619e:	f001 f875 	bl	801728c <xTaskRemoveFromEventList>
 80161a2:	4603      	mov	r3, r0
 80161a4:	2b00      	cmp	r3, #0
 80161a6:	d00e      	beq.n	80161c6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d00b      	beq.n	80161c6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	2201      	movs	r2, #1
 80161b2:	601a      	str	r2, [r3, #0]
 80161b4:	e007      	b.n	80161c6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80161b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80161ba:	3301      	adds	r3, #1
 80161bc:	b2db      	uxtb	r3, r3
 80161be:	b25a      	sxtb	r2, r3
 80161c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80161c6:	2301      	movs	r3, #1
 80161c8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80161ca:	e001      	b.n	80161d0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80161cc:	2300      	movs	r3, #0
 80161ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80161d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161d2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80161d4:	697b      	ldr	r3, [r7, #20]
 80161d6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80161da:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80161dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80161de:	4618      	mov	r0, r3
 80161e0:	3740      	adds	r7, #64	; 0x40
 80161e2:	46bd      	mov	sp, r7
 80161e4:	bd80      	pop	{r7, pc}

080161e6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80161e6:	b580      	push	{r7, lr}
 80161e8:	b08e      	sub	sp, #56	; 0x38
 80161ea:	af00      	add	r7, sp, #0
 80161ec:	6078      	str	r0, [r7, #4]
 80161ee:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80161f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	d10a      	bne.n	8016210 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80161fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161fe:	f383 8811 	msr	BASEPRI, r3
 8016202:	f3bf 8f6f 	isb	sy
 8016206:	f3bf 8f4f 	dsb	sy
 801620a:	623b      	str	r3, [r7, #32]
}
 801620c:	bf00      	nop
 801620e:	e7fe      	b.n	801620e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8016210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016214:	2b00      	cmp	r3, #0
 8016216:	d00a      	beq.n	801622e <xQueueGiveFromISR+0x48>
	__asm volatile
 8016218:	f04f 0350 	mov.w	r3, #80	; 0x50
 801621c:	f383 8811 	msr	BASEPRI, r3
 8016220:	f3bf 8f6f 	isb	sy
 8016224:	f3bf 8f4f 	dsb	sy
 8016228:	61fb      	str	r3, [r7, #28]
}
 801622a:	bf00      	nop
 801622c:	e7fe      	b.n	801622c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801622e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016230:	681b      	ldr	r3, [r3, #0]
 8016232:	2b00      	cmp	r3, #0
 8016234:	d103      	bne.n	801623e <xQueueGiveFromISR+0x58>
 8016236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016238:	689b      	ldr	r3, [r3, #8]
 801623a:	2b00      	cmp	r3, #0
 801623c:	d101      	bne.n	8016242 <xQueueGiveFromISR+0x5c>
 801623e:	2301      	movs	r3, #1
 8016240:	e000      	b.n	8016244 <xQueueGiveFromISR+0x5e>
 8016242:	2300      	movs	r3, #0
 8016244:	2b00      	cmp	r3, #0
 8016246:	d10a      	bne.n	801625e <xQueueGiveFromISR+0x78>
	__asm volatile
 8016248:	f04f 0350 	mov.w	r3, #80	; 0x50
 801624c:	f383 8811 	msr	BASEPRI, r3
 8016250:	f3bf 8f6f 	isb	sy
 8016254:	f3bf 8f4f 	dsb	sy
 8016258:	61bb      	str	r3, [r7, #24]
}
 801625a:	bf00      	nop
 801625c:	e7fe      	b.n	801625c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801625e:	f002 f90b 	bl	8018478 <vPortValidateInterruptPriority>
	__asm volatile
 8016262:	f3ef 8211 	mrs	r2, BASEPRI
 8016266:	f04f 0350 	mov.w	r3, #80	; 0x50
 801626a:	f383 8811 	msr	BASEPRI, r3
 801626e:	f3bf 8f6f 	isb	sy
 8016272:	f3bf 8f4f 	dsb	sy
 8016276:	617a      	str	r2, [r7, #20]
 8016278:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801627a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801627c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801627e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016282:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8016284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016288:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801628a:	429a      	cmp	r2, r3
 801628c:	d22b      	bcs.n	80162e6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801628e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016290:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016294:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801629a:	1c5a      	adds	r2, r3, #1
 801629c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801629e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80162a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80162a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80162a8:	d112      	bne.n	80162d0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80162aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	d016      	beq.n	80162e0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80162b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162b4:	3324      	adds	r3, #36	; 0x24
 80162b6:	4618      	mov	r0, r3
 80162b8:	f000 ffe8 	bl	801728c <xTaskRemoveFromEventList>
 80162bc:	4603      	mov	r3, r0
 80162be:	2b00      	cmp	r3, #0
 80162c0:	d00e      	beq.n	80162e0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80162c2:	683b      	ldr	r3, [r7, #0]
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	d00b      	beq.n	80162e0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80162c8:	683b      	ldr	r3, [r7, #0]
 80162ca:	2201      	movs	r2, #1
 80162cc:	601a      	str	r2, [r3, #0]
 80162ce:	e007      	b.n	80162e0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80162d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80162d4:	3301      	adds	r3, #1
 80162d6:	b2db      	uxtb	r3, r3
 80162d8:	b25a      	sxtb	r2, r3
 80162da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80162e0:	2301      	movs	r3, #1
 80162e2:	637b      	str	r3, [r7, #52]	; 0x34
 80162e4:	e001      	b.n	80162ea <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80162e6:	2300      	movs	r3, #0
 80162e8:	637b      	str	r3, [r7, #52]	; 0x34
 80162ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162ec:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80162ee:	68fb      	ldr	r3, [r7, #12]
 80162f0:	f383 8811 	msr	BASEPRI, r3
}
 80162f4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80162f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80162f8:	4618      	mov	r0, r3
 80162fa:	3738      	adds	r7, #56	; 0x38
 80162fc:	46bd      	mov	sp, r7
 80162fe:	bd80      	pop	{r7, pc}

08016300 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8016300:	b580      	push	{r7, lr}
 8016302:	b08c      	sub	sp, #48	; 0x30
 8016304:	af00      	add	r7, sp, #0
 8016306:	60f8      	str	r0, [r7, #12]
 8016308:	60b9      	str	r1, [r7, #8]
 801630a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801630c:	2300      	movs	r3, #0
 801630e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016310:	68fb      	ldr	r3, [r7, #12]
 8016312:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8016314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016316:	2b00      	cmp	r3, #0
 8016318:	d10a      	bne.n	8016330 <xQueueReceive+0x30>
	__asm volatile
 801631a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801631e:	f383 8811 	msr	BASEPRI, r3
 8016322:	f3bf 8f6f 	isb	sy
 8016326:	f3bf 8f4f 	dsb	sy
 801632a:	623b      	str	r3, [r7, #32]
}
 801632c:	bf00      	nop
 801632e:	e7fe      	b.n	801632e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016330:	68bb      	ldr	r3, [r7, #8]
 8016332:	2b00      	cmp	r3, #0
 8016334:	d103      	bne.n	801633e <xQueueReceive+0x3e>
 8016336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801633a:	2b00      	cmp	r3, #0
 801633c:	d101      	bne.n	8016342 <xQueueReceive+0x42>
 801633e:	2301      	movs	r3, #1
 8016340:	e000      	b.n	8016344 <xQueueReceive+0x44>
 8016342:	2300      	movs	r3, #0
 8016344:	2b00      	cmp	r3, #0
 8016346:	d10a      	bne.n	801635e <xQueueReceive+0x5e>
	__asm volatile
 8016348:	f04f 0350 	mov.w	r3, #80	; 0x50
 801634c:	f383 8811 	msr	BASEPRI, r3
 8016350:	f3bf 8f6f 	isb	sy
 8016354:	f3bf 8f4f 	dsb	sy
 8016358:	61fb      	str	r3, [r7, #28]
}
 801635a:	bf00      	nop
 801635c:	e7fe      	b.n	801635c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801635e:	f001 f94d 	bl	80175fc <xTaskGetSchedulerState>
 8016362:	4603      	mov	r3, r0
 8016364:	2b00      	cmp	r3, #0
 8016366:	d102      	bne.n	801636e <xQueueReceive+0x6e>
 8016368:	687b      	ldr	r3, [r7, #4]
 801636a:	2b00      	cmp	r3, #0
 801636c:	d101      	bne.n	8016372 <xQueueReceive+0x72>
 801636e:	2301      	movs	r3, #1
 8016370:	e000      	b.n	8016374 <xQueueReceive+0x74>
 8016372:	2300      	movs	r3, #0
 8016374:	2b00      	cmp	r3, #0
 8016376:	d10a      	bne.n	801638e <xQueueReceive+0x8e>
	__asm volatile
 8016378:	f04f 0350 	mov.w	r3, #80	; 0x50
 801637c:	f383 8811 	msr	BASEPRI, r3
 8016380:	f3bf 8f6f 	isb	sy
 8016384:	f3bf 8f4f 	dsb	sy
 8016388:	61bb      	str	r3, [r7, #24]
}
 801638a:	bf00      	nop
 801638c:	e7fe      	b.n	801638c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801638e:	f001 ff91 	bl	80182b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016396:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801639a:	2b00      	cmp	r3, #0
 801639c:	d014      	beq.n	80163c8 <xQueueReceive+0xc8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801639e:	68b9      	ldr	r1, [r7, #8]
 80163a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80163a2:	f000 fa26 	bl	80167f2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80163a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163a8:	1e5a      	subs	r2, r3, #1
 80163aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163ac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80163ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163b0:	691b      	ldr	r3, [r3, #16]
 80163b2:	2b00      	cmp	r3, #0
 80163b4:	d004      	beq.n	80163c0 <xQueueReceive+0xc0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80163b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163b8:	3310      	adds	r3, #16
 80163ba:	4618      	mov	r0, r3
 80163bc:	f000 ff66 	bl	801728c <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80163c0:	f001 ffa8 	bl	8018314 <vPortExitCritical>
				return pdPASS;
 80163c4:	2301      	movs	r3, #1
 80163c6:	e069      	b.n	801649c <xQueueReceive+0x19c>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	d103      	bne.n	80163d6 <xQueueReceive+0xd6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80163ce:	f001 ffa1 	bl	8018314 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80163d2:	2300      	movs	r3, #0
 80163d4:	e062      	b.n	801649c <xQueueReceive+0x19c>
				}
				else if( xEntryTimeSet == pdFALSE )
 80163d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163d8:	2b00      	cmp	r3, #0
 80163da:	d106      	bne.n	80163ea <xQueueReceive+0xea>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80163dc:	f107 0310 	add.w	r3, r7, #16
 80163e0:	4618      	mov	r0, r3
 80163e2:	f000 ffb7 	bl	8017354 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80163e6:	2301      	movs	r3, #1
 80163e8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80163ea:	f001 ff93 	bl	8018314 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80163ee:	f000 fd5b 	bl	8016ea8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80163f2:	f001 ff5f 	bl	80182b4 <vPortEnterCritical>
 80163f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80163fc:	b25b      	sxtb	r3, r3
 80163fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016402:	d103      	bne.n	801640c <xQueueReceive+0x10c>
 8016404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016406:	2200      	movs	r2, #0
 8016408:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801640c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801640e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016412:	b25b      	sxtb	r3, r3
 8016414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016418:	d103      	bne.n	8016422 <xQueueReceive+0x122>
 801641a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801641c:	2200      	movs	r2, #0
 801641e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016422:	f001 ff77 	bl	8018314 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016426:	1d3a      	adds	r2, r7, #4
 8016428:	f107 0310 	add.w	r3, r7, #16
 801642c:	4611      	mov	r1, r2
 801642e:	4618      	mov	r0, r3
 8016430:	f000 ffa6 	bl	8017380 <xTaskCheckForTimeOut>
 8016434:	4603      	mov	r3, r0
 8016436:	2b00      	cmp	r3, #0
 8016438:	d123      	bne.n	8016482 <xQueueReceive+0x182>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801643a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801643c:	f000 fa51 	bl	80168e2 <prvIsQueueEmpty>
 8016440:	4603      	mov	r3, r0
 8016442:	2b00      	cmp	r3, #0
 8016444:	d017      	beq.n	8016476 <xQueueReceive+0x176>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016448:	3324      	adds	r3, #36	; 0x24
 801644a:	687a      	ldr	r2, [r7, #4]
 801644c:	4611      	mov	r1, r2
 801644e:	4618      	mov	r0, r3
 8016450:	f000 fecc 	bl	80171ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8016454:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016456:	f000 f9f2 	bl	801683e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801645a:	f000 fd33 	bl	8016ec4 <xTaskResumeAll>
 801645e:	4603      	mov	r3, r0
 8016460:	2b00      	cmp	r3, #0
 8016462:	d194      	bne.n	801638e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8016464:	4b0f      	ldr	r3, [pc, #60]	; (80164a4 <xQueueReceive+0x1a4>)
 8016466:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801646a:	601a      	str	r2, [r3, #0]
 801646c:	f3bf 8f4f 	dsb	sy
 8016470:	f3bf 8f6f 	isb	sy
 8016474:	e78b      	b.n	801638e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8016476:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016478:	f000 f9e1 	bl	801683e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801647c:	f000 fd22 	bl	8016ec4 <xTaskResumeAll>
 8016480:	e785      	b.n	801638e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8016482:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016484:	f000 f9db 	bl	801683e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016488:	f000 fd1c 	bl	8016ec4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801648c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801648e:	f000 fa28 	bl	80168e2 <prvIsQueueEmpty>
 8016492:	4603      	mov	r3, r0
 8016494:	2b00      	cmp	r3, #0
 8016496:	f43f af7a 	beq.w	801638e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801649a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801649c:	4618      	mov	r0, r3
 801649e:	3730      	adds	r7, #48	; 0x30
 80164a0:	46bd      	mov	sp, r7
 80164a2:	bd80      	pop	{r7, pc}
 80164a4:	e000ed04 	.word	0xe000ed04

080164a8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80164a8:	b580      	push	{r7, lr}
 80164aa:	b08e      	sub	sp, #56	; 0x38
 80164ac:	af00      	add	r7, sp, #0
 80164ae:	6078      	str	r0, [r7, #4]
 80164b0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80164b2:	2300      	movs	r3, #0
 80164b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80164ba:	2300      	movs	r3, #0
 80164bc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80164be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164c0:	2b00      	cmp	r3, #0
 80164c2:	d10a      	bne.n	80164da <xQueueSemaphoreTake+0x32>
	__asm volatile
 80164c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164c8:	f383 8811 	msr	BASEPRI, r3
 80164cc:	f3bf 8f6f 	isb	sy
 80164d0:	f3bf 8f4f 	dsb	sy
 80164d4:	623b      	str	r3, [r7, #32]
}
 80164d6:	bf00      	nop
 80164d8:	e7fe      	b.n	80164d8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80164da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80164de:	2b00      	cmp	r3, #0
 80164e0:	d00a      	beq.n	80164f8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80164e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164e6:	f383 8811 	msr	BASEPRI, r3
 80164ea:	f3bf 8f6f 	isb	sy
 80164ee:	f3bf 8f4f 	dsb	sy
 80164f2:	61fb      	str	r3, [r7, #28]
}
 80164f4:	bf00      	nop
 80164f6:	e7fe      	b.n	80164f6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80164f8:	f001 f880 	bl	80175fc <xTaskGetSchedulerState>
 80164fc:	4603      	mov	r3, r0
 80164fe:	2b00      	cmp	r3, #0
 8016500:	d102      	bne.n	8016508 <xQueueSemaphoreTake+0x60>
 8016502:	683b      	ldr	r3, [r7, #0]
 8016504:	2b00      	cmp	r3, #0
 8016506:	d101      	bne.n	801650c <xQueueSemaphoreTake+0x64>
 8016508:	2301      	movs	r3, #1
 801650a:	e000      	b.n	801650e <xQueueSemaphoreTake+0x66>
 801650c:	2300      	movs	r3, #0
 801650e:	2b00      	cmp	r3, #0
 8016510:	d10a      	bne.n	8016528 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8016512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016516:	f383 8811 	msr	BASEPRI, r3
 801651a:	f3bf 8f6f 	isb	sy
 801651e:	f3bf 8f4f 	dsb	sy
 8016522:	61bb      	str	r3, [r7, #24]
}
 8016524:	bf00      	nop
 8016526:	e7fe      	b.n	8016526 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016528:	f001 fec4 	bl	80182b4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801652c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801652e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016530:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8016532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016534:	2b00      	cmp	r3, #0
 8016536:	d019      	beq.n	801656c <xQueueSemaphoreTake+0xc4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8016538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801653a:	1e5a      	subs	r2, r3, #1
 801653c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801653e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016542:	681b      	ldr	r3, [r3, #0]
 8016544:	2b00      	cmp	r3, #0
 8016546:	d104      	bne.n	8016552 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8016548:	f001 f9ce 	bl	80178e8 <pvTaskIncrementMutexHeldCount>
 801654c:	4602      	mov	r2, r0
 801654e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016550:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016554:	691b      	ldr	r3, [r3, #16]
 8016556:	2b00      	cmp	r3, #0
 8016558:	d004      	beq.n	8016564 <xQueueSemaphoreTake+0xbc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801655a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801655c:	3310      	adds	r3, #16
 801655e:	4618      	mov	r0, r3
 8016560:	f000 fe94 	bl	801728c <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8016564:	f001 fed6 	bl	8018314 <vPortExitCritical>
				return pdPASS;
 8016568:	2301      	movs	r3, #1
 801656a:	e097      	b.n	801669c <xQueueSemaphoreTake+0x1f4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801656c:	683b      	ldr	r3, [r7, #0]
 801656e:	2b00      	cmp	r3, #0
 8016570:	d111      	bne.n	8016596 <xQueueSemaphoreTake+0xee>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8016572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016574:	2b00      	cmp	r3, #0
 8016576:	d00a      	beq.n	801658e <xQueueSemaphoreTake+0xe6>
	__asm volatile
 8016578:	f04f 0350 	mov.w	r3, #80	; 0x50
 801657c:	f383 8811 	msr	BASEPRI, r3
 8016580:	f3bf 8f6f 	isb	sy
 8016584:	f3bf 8f4f 	dsb	sy
 8016588:	617b      	str	r3, [r7, #20]
}
 801658a:	bf00      	nop
 801658c:	e7fe      	b.n	801658c <xQueueSemaphoreTake+0xe4>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801658e:	f001 fec1 	bl	8018314 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8016592:	2300      	movs	r3, #0
 8016594:	e082      	b.n	801669c <xQueueSemaphoreTake+0x1f4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016598:	2b00      	cmp	r3, #0
 801659a:	d106      	bne.n	80165aa <xQueueSemaphoreTake+0x102>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801659c:	f107 030c 	add.w	r3, r7, #12
 80165a0:	4618      	mov	r0, r3
 80165a2:	f000 fed7 	bl	8017354 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80165a6:	2301      	movs	r3, #1
 80165a8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80165aa:	f001 feb3 	bl	8018314 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80165ae:	f000 fc7b 	bl	8016ea8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80165b2:	f001 fe7f 	bl	80182b4 <vPortEnterCritical>
 80165b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80165bc:	b25b      	sxtb	r3, r3
 80165be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80165c2:	d103      	bne.n	80165cc <xQueueSemaphoreTake+0x124>
 80165c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165c6:	2200      	movs	r2, #0
 80165c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80165cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80165d2:	b25b      	sxtb	r3, r3
 80165d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80165d8:	d103      	bne.n	80165e2 <xQueueSemaphoreTake+0x13a>
 80165da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165dc:	2200      	movs	r2, #0
 80165de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80165e2:	f001 fe97 	bl	8018314 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80165e6:	463a      	mov	r2, r7
 80165e8:	f107 030c 	add.w	r3, r7, #12
 80165ec:	4611      	mov	r1, r2
 80165ee:	4618      	mov	r0, r3
 80165f0:	f000 fec6 	bl	8017380 <xTaskCheckForTimeOut>
 80165f4:	4603      	mov	r3, r0
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d132      	bne.n	8016660 <xQueueSemaphoreTake+0x1b8>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80165fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80165fc:	f000 f971 	bl	80168e2 <prvIsQueueEmpty>
 8016600:	4603      	mov	r3, r0
 8016602:	2b00      	cmp	r3, #0
 8016604:	d026      	beq.n	8016654 <xQueueSemaphoreTake+0x1ac>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016608:	681b      	ldr	r3, [r3, #0]
 801660a:	2b00      	cmp	r3, #0
 801660c:	d109      	bne.n	8016622 <xQueueSemaphoreTake+0x17a>
					{
						taskENTER_CRITICAL();
 801660e:	f001 fe51 	bl	80182b4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016614:	689b      	ldr	r3, [r3, #8]
 8016616:	4618      	mov	r0, r3
 8016618:	f001 f80e 	bl	8017638 <xTaskPriorityInherit>
 801661c:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801661e:	f001 fe79 	bl	8018314 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016624:	3324      	adds	r3, #36	; 0x24
 8016626:	683a      	ldr	r2, [r7, #0]
 8016628:	4611      	mov	r1, r2
 801662a:	4618      	mov	r0, r3
 801662c:	f000 fdde 	bl	80171ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8016630:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016632:	f000 f904 	bl	801683e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016636:	f000 fc45 	bl	8016ec4 <xTaskResumeAll>
 801663a:	4603      	mov	r3, r0
 801663c:	2b00      	cmp	r3, #0
 801663e:	f47f af73 	bne.w	8016528 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8016642:	4b18      	ldr	r3, [pc, #96]	; (80166a4 <xQueueSemaphoreTake+0x1fc>)
 8016644:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016648:	601a      	str	r2, [r3, #0]
 801664a:	f3bf 8f4f 	dsb	sy
 801664e:	f3bf 8f6f 	isb	sy
 8016652:	e769      	b.n	8016528 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8016654:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016656:	f000 f8f2 	bl	801683e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801665a:	f000 fc33 	bl	8016ec4 <xTaskResumeAll>
 801665e:	e763      	b.n	8016528 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8016660:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016662:	f000 f8ec 	bl	801683e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016666:	f000 fc2d 	bl	8016ec4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801666a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801666c:	f000 f939 	bl	80168e2 <prvIsQueueEmpty>
 8016670:	4603      	mov	r3, r0
 8016672:	2b00      	cmp	r3, #0
 8016674:	f43f af58 	beq.w	8016528 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8016678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801667a:	2b00      	cmp	r3, #0
 801667c:	d00d      	beq.n	801669a <xQueueSemaphoreTake+0x1f2>
					{
						taskENTER_CRITICAL();
 801667e:	f001 fe19 	bl	80182b4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8016682:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016684:	f000 f833 	bl	80166ee <prvGetDisinheritPriorityAfterTimeout>
 8016688:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801668a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801668c:	689b      	ldr	r3, [r3, #8]
 801668e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016690:	4618      	mov	r0, r3
 8016692:	f001 f8a7 	bl	80177e4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8016696:	f001 fe3d 	bl	8018314 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801669a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801669c:	4618      	mov	r0, r3
 801669e:	3738      	adds	r7, #56	; 0x38
 80166a0:	46bd      	mov	sp, r7
 80166a2:	bd80      	pop	{r7, pc}
 80166a4:	e000ed04 	.word	0xe000ed04

080166a8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80166a8:	b580      	push	{r7, lr}
 80166aa:	b084      	sub	sp, #16
 80166ac:	af00      	add	r7, sp, #0
 80166ae:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80166b4:	68fb      	ldr	r3, [r7, #12]
 80166b6:	2b00      	cmp	r3, #0
 80166b8:	d10a      	bne.n	80166d0 <vQueueDelete+0x28>
	__asm volatile
 80166ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166be:	f383 8811 	msr	BASEPRI, r3
 80166c2:	f3bf 8f6f 	isb	sy
 80166c6:	f3bf 8f4f 	dsb	sy
 80166ca:	60bb      	str	r3, [r7, #8]
}
 80166cc:	bf00      	nop
 80166ce:	e7fe      	b.n	80166ce <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80166d0:	68f8      	ldr	r0, [r7, #12]
 80166d2:	f000 f95f 	bl	8016994 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80166d6:	68fb      	ldr	r3, [r7, #12]
 80166d8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80166dc:	2b00      	cmp	r3, #0
 80166de:	d102      	bne.n	80166e6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80166e0:	68f8      	ldr	r0, [r7, #12]
 80166e2:	f001 ffd5 	bl	8018690 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80166e6:	bf00      	nop
 80166e8:	3710      	adds	r7, #16
 80166ea:	46bd      	mov	sp, r7
 80166ec:	bd80      	pop	{r7, pc}

080166ee <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80166ee:	b480      	push	{r7}
 80166f0:	b085      	sub	sp, #20
 80166f2:	af00      	add	r7, sp, #0
 80166f4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80166fa:	2b00      	cmp	r3, #0
 80166fc:	d006      	beq.n	801670c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016702:	681b      	ldr	r3, [r3, #0]
 8016704:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8016708:	60fb      	str	r3, [r7, #12]
 801670a:	e001      	b.n	8016710 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801670c:	2300      	movs	r3, #0
 801670e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8016710:	68fb      	ldr	r3, [r7, #12]
	}
 8016712:	4618      	mov	r0, r3
 8016714:	3714      	adds	r7, #20
 8016716:	46bd      	mov	sp, r7
 8016718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801671c:	4770      	bx	lr

0801671e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801671e:	b580      	push	{r7, lr}
 8016720:	b086      	sub	sp, #24
 8016722:	af00      	add	r7, sp, #0
 8016724:	60f8      	str	r0, [r7, #12]
 8016726:	60b9      	str	r1, [r7, #8]
 8016728:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801672a:	2300      	movs	r3, #0
 801672c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801672e:	68fb      	ldr	r3, [r7, #12]
 8016730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016732:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8016734:	68fb      	ldr	r3, [r7, #12]
 8016736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016738:	2b00      	cmp	r3, #0
 801673a:	d10d      	bne.n	8016758 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801673c:	68fb      	ldr	r3, [r7, #12]
 801673e:	681b      	ldr	r3, [r3, #0]
 8016740:	2b00      	cmp	r3, #0
 8016742:	d14d      	bne.n	80167e0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016744:	68fb      	ldr	r3, [r7, #12]
 8016746:	689b      	ldr	r3, [r3, #8]
 8016748:	4618      	mov	r0, r3
 801674a:	f000 ffdd 	bl	8017708 <xTaskPriorityDisinherit>
 801674e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8016750:	68fb      	ldr	r3, [r7, #12]
 8016752:	2200      	movs	r2, #0
 8016754:	609a      	str	r2, [r3, #8]
 8016756:	e043      	b.n	80167e0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	2b00      	cmp	r3, #0
 801675c:	d119      	bne.n	8016792 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801675e:	68fb      	ldr	r3, [r7, #12]
 8016760:	6858      	ldr	r0, [r3, #4]
 8016762:	68fb      	ldr	r3, [r7, #12]
 8016764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016766:	461a      	mov	r2, r3
 8016768:	68b9      	ldr	r1, [r7, #8]
 801676a:	f003 fd0a 	bl	801a182 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801676e:	68fb      	ldr	r3, [r7, #12]
 8016770:	685a      	ldr	r2, [r3, #4]
 8016772:	68fb      	ldr	r3, [r7, #12]
 8016774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016776:	441a      	add	r2, r3
 8016778:	68fb      	ldr	r3, [r7, #12]
 801677a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801677c:	68fb      	ldr	r3, [r7, #12]
 801677e:	685a      	ldr	r2, [r3, #4]
 8016780:	68fb      	ldr	r3, [r7, #12]
 8016782:	689b      	ldr	r3, [r3, #8]
 8016784:	429a      	cmp	r2, r3
 8016786:	d32b      	bcc.n	80167e0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8016788:	68fb      	ldr	r3, [r7, #12]
 801678a:	681a      	ldr	r2, [r3, #0]
 801678c:	68fb      	ldr	r3, [r7, #12]
 801678e:	605a      	str	r2, [r3, #4]
 8016790:	e026      	b.n	80167e0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8016792:	68fb      	ldr	r3, [r7, #12]
 8016794:	68d8      	ldr	r0, [r3, #12]
 8016796:	68fb      	ldr	r3, [r7, #12]
 8016798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801679a:	461a      	mov	r2, r3
 801679c:	68b9      	ldr	r1, [r7, #8]
 801679e:	f003 fcf0 	bl	801a182 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80167a2:	68fb      	ldr	r3, [r7, #12]
 80167a4:	68da      	ldr	r2, [r3, #12]
 80167a6:	68fb      	ldr	r3, [r7, #12]
 80167a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80167aa:	425b      	negs	r3, r3
 80167ac:	441a      	add	r2, r3
 80167ae:	68fb      	ldr	r3, [r7, #12]
 80167b0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80167b2:	68fb      	ldr	r3, [r7, #12]
 80167b4:	68da      	ldr	r2, [r3, #12]
 80167b6:	68fb      	ldr	r3, [r7, #12]
 80167b8:	681b      	ldr	r3, [r3, #0]
 80167ba:	429a      	cmp	r2, r3
 80167bc:	d207      	bcs.n	80167ce <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80167be:	68fb      	ldr	r3, [r7, #12]
 80167c0:	689a      	ldr	r2, [r3, #8]
 80167c2:	68fb      	ldr	r3, [r7, #12]
 80167c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80167c6:	425b      	negs	r3, r3
 80167c8:	441a      	add	r2, r3
 80167ca:	68fb      	ldr	r3, [r7, #12]
 80167cc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	2b02      	cmp	r3, #2
 80167d2:	d105      	bne.n	80167e0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80167d4:	693b      	ldr	r3, [r7, #16]
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	d002      	beq.n	80167e0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80167da:	693b      	ldr	r3, [r7, #16]
 80167dc:	3b01      	subs	r3, #1
 80167de:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80167e0:	693b      	ldr	r3, [r7, #16]
 80167e2:	1c5a      	adds	r2, r3, #1
 80167e4:	68fb      	ldr	r3, [r7, #12]
 80167e6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80167e8:	697b      	ldr	r3, [r7, #20]
}
 80167ea:	4618      	mov	r0, r3
 80167ec:	3718      	adds	r7, #24
 80167ee:	46bd      	mov	sp, r7
 80167f0:	bd80      	pop	{r7, pc}

080167f2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80167f2:	b580      	push	{r7, lr}
 80167f4:	b082      	sub	sp, #8
 80167f6:	af00      	add	r7, sp, #0
 80167f8:	6078      	str	r0, [r7, #4]
 80167fa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016800:	2b00      	cmp	r3, #0
 8016802:	d018      	beq.n	8016836 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	68da      	ldr	r2, [r3, #12]
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801680c:	441a      	add	r2, r3
 801680e:	687b      	ldr	r3, [r7, #4]
 8016810:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	68da      	ldr	r2, [r3, #12]
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	689b      	ldr	r3, [r3, #8]
 801681a:	429a      	cmp	r2, r3
 801681c:	d303      	bcc.n	8016826 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	681a      	ldr	r2, [r3, #0]
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	68d9      	ldr	r1, [r3, #12]
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801682e:	461a      	mov	r2, r3
 8016830:	6838      	ldr	r0, [r7, #0]
 8016832:	f003 fca6 	bl	801a182 <memcpy>
	}
}
 8016836:	bf00      	nop
 8016838:	3708      	adds	r7, #8
 801683a:	46bd      	mov	sp, r7
 801683c:	bd80      	pop	{r7, pc}

0801683e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801683e:	b580      	push	{r7, lr}
 8016840:	b084      	sub	sp, #16
 8016842:	af00      	add	r7, sp, #0
 8016844:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8016846:	f001 fd35 	bl	80182b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016850:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016852:	e011      	b.n	8016878 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016858:	2b00      	cmp	r3, #0
 801685a:	d012      	beq.n	8016882 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	3324      	adds	r3, #36	; 0x24
 8016860:	4618      	mov	r0, r3
 8016862:	f000 fd13 	bl	801728c <xTaskRemoveFromEventList>
 8016866:	4603      	mov	r3, r0
 8016868:	2b00      	cmp	r3, #0
 801686a:	d001      	beq.n	8016870 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801686c:	f000 fdea 	bl	8017444 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8016870:	7bfb      	ldrb	r3, [r7, #15]
 8016872:	3b01      	subs	r3, #1
 8016874:	b2db      	uxtb	r3, r3
 8016876:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016878:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801687c:	2b00      	cmp	r3, #0
 801687e:	dce9      	bgt.n	8016854 <prvUnlockQueue+0x16>
 8016880:	e000      	b.n	8016884 <prvUnlockQueue+0x46>
					break;
 8016882:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	22ff      	movs	r2, #255	; 0xff
 8016888:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801688c:	f001 fd42 	bl	8018314 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8016890:	f001 fd10 	bl	80182b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801689a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801689c:	e011      	b.n	80168c2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801689e:	687b      	ldr	r3, [r7, #4]
 80168a0:	691b      	ldr	r3, [r3, #16]
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	d012      	beq.n	80168cc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	3310      	adds	r3, #16
 80168aa:	4618      	mov	r0, r3
 80168ac:	f000 fcee 	bl	801728c <xTaskRemoveFromEventList>
 80168b0:	4603      	mov	r3, r0
 80168b2:	2b00      	cmp	r3, #0
 80168b4:	d001      	beq.n	80168ba <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80168b6:	f000 fdc5 	bl	8017444 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80168ba:	7bbb      	ldrb	r3, [r7, #14]
 80168bc:	3b01      	subs	r3, #1
 80168be:	b2db      	uxtb	r3, r3
 80168c0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80168c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80168c6:	2b00      	cmp	r3, #0
 80168c8:	dce9      	bgt.n	801689e <prvUnlockQueue+0x60>
 80168ca:	e000      	b.n	80168ce <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80168cc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	22ff      	movs	r2, #255	; 0xff
 80168d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80168d6:	f001 fd1d 	bl	8018314 <vPortExitCritical>
}
 80168da:	bf00      	nop
 80168dc:	3710      	adds	r7, #16
 80168de:	46bd      	mov	sp, r7
 80168e0:	bd80      	pop	{r7, pc}

080168e2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80168e2:	b580      	push	{r7, lr}
 80168e4:	b084      	sub	sp, #16
 80168e6:	af00      	add	r7, sp, #0
 80168e8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80168ea:	f001 fce3 	bl	80182b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80168f2:	2b00      	cmp	r3, #0
 80168f4:	d102      	bne.n	80168fc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80168f6:	2301      	movs	r3, #1
 80168f8:	60fb      	str	r3, [r7, #12]
 80168fa:	e001      	b.n	8016900 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80168fc:	2300      	movs	r3, #0
 80168fe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016900:	f001 fd08 	bl	8018314 <vPortExitCritical>

	return xReturn;
 8016904:	68fb      	ldr	r3, [r7, #12]
}
 8016906:	4618      	mov	r0, r3
 8016908:	3710      	adds	r7, #16
 801690a:	46bd      	mov	sp, r7
 801690c:	bd80      	pop	{r7, pc}

0801690e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801690e:	b580      	push	{r7, lr}
 8016910:	b084      	sub	sp, #16
 8016912:	af00      	add	r7, sp, #0
 8016914:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016916:	f001 fccd 	bl	80182b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016922:	429a      	cmp	r2, r3
 8016924:	d102      	bne.n	801692c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8016926:	2301      	movs	r3, #1
 8016928:	60fb      	str	r3, [r7, #12]
 801692a:	e001      	b.n	8016930 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801692c:	2300      	movs	r3, #0
 801692e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016930:	f001 fcf0 	bl	8018314 <vPortExitCritical>

	return xReturn;
 8016934:	68fb      	ldr	r3, [r7, #12]
}
 8016936:	4618      	mov	r0, r3
 8016938:	3710      	adds	r7, #16
 801693a:	46bd      	mov	sp, r7
 801693c:	bd80      	pop	{r7, pc}
	...

08016940 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8016940:	b480      	push	{r7}
 8016942:	b085      	sub	sp, #20
 8016944:	af00      	add	r7, sp, #0
 8016946:	6078      	str	r0, [r7, #4]
 8016948:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801694a:	2300      	movs	r3, #0
 801694c:	60fb      	str	r3, [r7, #12]
 801694e:	e014      	b.n	801697a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8016950:	4a0f      	ldr	r2, [pc, #60]	; (8016990 <vQueueAddToRegistry+0x50>)
 8016952:	68fb      	ldr	r3, [r7, #12]
 8016954:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8016958:	2b00      	cmp	r3, #0
 801695a:	d10b      	bne.n	8016974 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801695c:	490c      	ldr	r1, [pc, #48]	; (8016990 <vQueueAddToRegistry+0x50>)
 801695e:	68fb      	ldr	r3, [r7, #12]
 8016960:	683a      	ldr	r2, [r7, #0]
 8016962:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8016966:	4a0a      	ldr	r2, [pc, #40]	; (8016990 <vQueueAddToRegistry+0x50>)
 8016968:	68fb      	ldr	r3, [r7, #12]
 801696a:	00db      	lsls	r3, r3, #3
 801696c:	4413      	add	r3, r2
 801696e:	687a      	ldr	r2, [r7, #4]
 8016970:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8016972:	e006      	b.n	8016982 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016974:	68fb      	ldr	r3, [r7, #12]
 8016976:	3301      	adds	r3, #1
 8016978:	60fb      	str	r3, [r7, #12]
 801697a:	68fb      	ldr	r3, [r7, #12]
 801697c:	2b07      	cmp	r3, #7
 801697e:	d9e7      	bls.n	8016950 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8016980:	bf00      	nop
 8016982:	bf00      	nop
 8016984:	3714      	adds	r7, #20
 8016986:	46bd      	mov	sp, r7
 8016988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801698c:	4770      	bx	lr
 801698e:	bf00      	nop
 8016990:	24009d28 	.word	0x24009d28

08016994 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8016994:	b480      	push	{r7}
 8016996:	b085      	sub	sp, #20
 8016998:	af00      	add	r7, sp, #0
 801699a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801699c:	2300      	movs	r3, #0
 801699e:	60fb      	str	r3, [r7, #12]
 80169a0:	e016      	b.n	80169d0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80169a2:	4a10      	ldr	r2, [pc, #64]	; (80169e4 <vQueueUnregisterQueue+0x50>)
 80169a4:	68fb      	ldr	r3, [r7, #12]
 80169a6:	00db      	lsls	r3, r3, #3
 80169a8:	4413      	add	r3, r2
 80169aa:	685b      	ldr	r3, [r3, #4]
 80169ac:	687a      	ldr	r2, [r7, #4]
 80169ae:	429a      	cmp	r2, r3
 80169b0:	d10b      	bne.n	80169ca <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80169b2:	4a0c      	ldr	r2, [pc, #48]	; (80169e4 <vQueueUnregisterQueue+0x50>)
 80169b4:	68fb      	ldr	r3, [r7, #12]
 80169b6:	2100      	movs	r1, #0
 80169b8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80169bc:	4a09      	ldr	r2, [pc, #36]	; (80169e4 <vQueueUnregisterQueue+0x50>)
 80169be:	68fb      	ldr	r3, [r7, #12]
 80169c0:	00db      	lsls	r3, r3, #3
 80169c2:	4413      	add	r3, r2
 80169c4:	2200      	movs	r2, #0
 80169c6:	605a      	str	r2, [r3, #4]
				break;
 80169c8:	e006      	b.n	80169d8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80169ca:	68fb      	ldr	r3, [r7, #12]
 80169cc:	3301      	adds	r3, #1
 80169ce:	60fb      	str	r3, [r7, #12]
 80169d0:	68fb      	ldr	r3, [r7, #12]
 80169d2:	2b07      	cmp	r3, #7
 80169d4:	d9e5      	bls.n	80169a2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80169d6:	bf00      	nop
 80169d8:	bf00      	nop
 80169da:	3714      	adds	r7, #20
 80169dc:	46bd      	mov	sp, r7
 80169de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169e2:	4770      	bx	lr
 80169e4:	24009d28 	.word	0x24009d28

080169e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80169e8:	b580      	push	{r7, lr}
 80169ea:	b086      	sub	sp, #24
 80169ec:	af00      	add	r7, sp, #0
 80169ee:	60f8      	str	r0, [r7, #12]
 80169f0:	60b9      	str	r1, [r7, #8]
 80169f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80169f4:	68fb      	ldr	r3, [r7, #12]
 80169f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80169f8:	f001 fc5c 	bl	80182b4 <vPortEnterCritical>
 80169fc:	697b      	ldr	r3, [r7, #20]
 80169fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016a02:	b25b      	sxtb	r3, r3
 8016a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a08:	d103      	bne.n	8016a12 <vQueueWaitForMessageRestricted+0x2a>
 8016a0a:	697b      	ldr	r3, [r7, #20]
 8016a0c:	2200      	movs	r2, #0
 8016a0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016a12:	697b      	ldr	r3, [r7, #20]
 8016a14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016a18:	b25b      	sxtb	r3, r3
 8016a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a1e:	d103      	bne.n	8016a28 <vQueueWaitForMessageRestricted+0x40>
 8016a20:	697b      	ldr	r3, [r7, #20]
 8016a22:	2200      	movs	r2, #0
 8016a24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016a28:	f001 fc74 	bl	8018314 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8016a2c:	697b      	ldr	r3, [r7, #20]
 8016a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016a30:	2b00      	cmp	r3, #0
 8016a32:	d106      	bne.n	8016a42 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8016a34:	697b      	ldr	r3, [r7, #20]
 8016a36:	3324      	adds	r3, #36	; 0x24
 8016a38:	687a      	ldr	r2, [r7, #4]
 8016a3a:	68b9      	ldr	r1, [r7, #8]
 8016a3c:	4618      	mov	r0, r3
 8016a3e:	f000 fbf9 	bl	8017234 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8016a42:	6978      	ldr	r0, [r7, #20]
 8016a44:	f7ff fefb 	bl	801683e <prvUnlockQueue>
	}
 8016a48:	bf00      	nop
 8016a4a:	3718      	adds	r7, #24
 8016a4c:	46bd      	mov	sp, r7
 8016a4e:	bd80      	pop	{r7, pc}

08016a50 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8016a50:	b580      	push	{r7, lr}
 8016a52:	b08e      	sub	sp, #56	; 0x38
 8016a54:	af04      	add	r7, sp, #16
 8016a56:	60f8      	str	r0, [r7, #12]
 8016a58:	60b9      	str	r1, [r7, #8]
 8016a5a:	607a      	str	r2, [r7, #4]
 8016a5c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8016a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a60:	2b00      	cmp	r3, #0
 8016a62:	d10a      	bne.n	8016a7a <xTaskCreateStatic+0x2a>
	__asm volatile
 8016a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a68:	f383 8811 	msr	BASEPRI, r3
 8016a6c:	f3bf 8f6f 	isb	sy
 8016a70:	f3bf 8f4f 	dsb	sy
 8016a74:	623b      	str	r3, [r7, #32]
}
 8016a76:	bf00      	nop
 8016a78:	e7fe      	b.n	8016a78 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8016a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a7c:	2b00      	cmp	r3, #0
 8016a7e:	d10a      	bne.n	8016a96 <xTaskCreateStatic+0x46>
	__asm volatile
 8016a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a84:	f383 8811 	msr	BASEPRI, r3
 8016a88:	f3bf 8f6f 	isb	sy
 8016a8c:	f3bf 8f4f 	dsb	sy
 8016a90:	61fb      	str	r3, [r7, #28]
}
 8016a92:	bf00      	nop
 8016a94:	e7fe      	b.n	8016a94 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8016a96:	235c      	movs	r3, #92	; 0x5c
 8016a98:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8016a9a:	693b      	ldr	r3, [r7, #16]
 8016a9c:	2b5c      	cmp	r3, #92	; 0x5c
 8016a9e:	d00a      	beq.n	8016ab6 <xTaskCreateStatic+0x66>
	__asm volatile
 8016aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016aa4:	f383 8811 	msr	BASEPRI, r3
 8016aa8:	f3bf 8f6f 	isb	sy
 8016aac:	f3bf 8f4f 	dsb	sy
 8016ab0:	61bb      	str	r3, [r7, #24]
}
 8016ab2:	bf00      	nop
 8016ab4:	e7fe      	b.n	8016ab4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8016ab6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8016ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016aba:	2b00      	cmp	r3, #0
 8016abc:	d01e      	beq.n	8016afc <xTaskCreateStatic+0xac>
 8016abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	d01b      	beq.n	8016afc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ac6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8016ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016aca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016acc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8016ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ad0:	2202      	movs	r2, #2
 8016ad2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8016ad6:	2300      	movs	r3, #0
 8016ad8:	9303      	str	r3, [sp, #12]
 8016ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016adc:	9302      	str	r3, [sp, #8]
 8016ade:	f107 0314 	add.w	r3, r7, #20
 8016ae2:	9301      	str	r3, [sp, #4]
 8016ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ae6:	9300      	str	r3, [sp, #0]
 8016ae8:	683b      	ldr	r3, [r7, #0]
 8016aea:	687a      	ldr	r2, [r7, #4]
 8016aec:	68b9      	ldr	r1, [r7, #8]
 8016aee:	68f8      	ldr	r0, [r7, #12]
 8016af0:	f000 f850 	bl	8016b94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016af4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016af6:	f000 f8dd 	bl	8016cb4 <prvAddNewTaskToReadyList>
 8016afa:	e001      	b.n	8016b00 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8016afc:	2300      	movs	r3, #0
 8016afe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8016b00:	697b      	ldr	r3, [r7, #20]
	}
 8016b02:	4618      	mov	r0, r3
 8016b04:	3728      	adds	r7, #40	; 0x28
 8016b06:	46bd      	mov	sp, r7
 8016b08:	bd80      	pop	{r7, pc}

08016b0a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8016b0a:	b580      	push	{r7, lr}
 8016b0c:	b08c      	sub	sp, #48	; 0x30
 8016b0e:	af04      	add	r7, sp, #16
 8016b10:	60f8      	str	r0, [r7, #12]
 8016b12:	60b9      	str	r1, [r7, #8]
 8016b14:	603b      	str	r3, [r7, #0]
 8016b16:	4613      	mov	r3, r2
 8016b18:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8016b1a:	88fb      	ldrh	r3, [r7, #6]
 8016b1c:	009b      	lsls	r3, r3, #2
 8016b1e:	4618      	mov	r0, r3
 8016b20:	f001 fcea 	bl	80184f8 <pvPortMalloc>
 8016b24:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8016b26:	697b      	ldr	r3, [r7, #20]
 8016b28:	2b00      	cmp	r3, #0
 8016b2a:	d00e      	beq.n	8016b4a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8016b2c:	205c      	movs	r0, #92	; 0x5c
 8016b2e:	f001 fce3 	bl	80184f8 <pvPortMalloc>
 8016b32:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8016b34:	69fb      	ldr	r3, [r7, #28]
 8016b36:	2b00      	cmp	r3, #0
 8016b38:	d003      	beq.n	8016b42 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8016b3a:	69fb      	ldr	r3, [r7, #28]
 8016b3c:	697a      	ldr	r2, [r7, #20]
 8016b3e:	631a      	str	r2, [r3, #48]	; 0x30
 8016b40:	e005      	b.n	8016b4e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8016b42:	6978      	ldr	r0, [r7, #20]
 8016b44:	f001 fda4 	bl	8018690 <vPortFree>
 8016b48:	e001      	b.n	8016b4e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8016b4a:	2300      	movs	r3, #0
 8016b4c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8016b4e:	69fb      	ldr	r3, [r7, #28]
 8016b50:	2b00      	cmp	r3, #0
 8016b52:	d017      	beq.n	8016b84 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8016b54:	69fb      	ldr	r3, [r7, #28]
 8016b56:	2200      	movs	r2, #0
 8016b58:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8016b5c:	88fa      	ldrh	r2, [r7, #6]
 8016b5e:	2300      	movs	r3, #0
 8016b60:	9303      	str	r3, [sp, #12]
 8016b62:	69fb      	ldr	r3, [r7, #28]
 8016b64:	9302      	str	r3, [sp, #8]
 8016b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b68:	9301      	str	r3, [sp, #4]
 8016b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b6c:	9300      	str	r3, [sp, #0]
 8016b6e:	683b      	ldr	r3, [r7, #0]
 8016b70:	68b9      	ldr	r1, [r7, #8]
 8016b72:	68f8      	ldr	r0, [r7, #12]
 8016b74:	f000 f80e 	bl	8016b94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016b78:	69f8      	ldr	r0, [r7, #28]
 8016b7a:	f000 f89b 	bl	8016cb4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8016b7e:	2301      	movs	r3, #1
 8016b80:	61bb      	str	r3, [r7, #24]
 8016b82:	e002      	b.n	8016b8a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8016b84:	f04f 33ff 	mov.w	r3, #4294967295
 8016b88:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8016b8a:	69bb      	ldr	r3, [r7, #24]
	}
 8016b8c:	4618      	mov	r0, r3
 8016b8e:	3720      	adds	r7, #32
 8016b90:	46bd      	mov	sp, r7
 8016b92:	bd80      	pop	{r7, pc}

08016b94 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8016b94:	b580      	push	{r7, lr}
 8016b96:	b088      	sub	sp, #32
 8016b98:	af00      	add	r7, sp, #0
 8016b9a:	60f8      	str	r0, [r7, #12]
 8016b9c:	60b9      	str	r1, [r7, #8]
 8016b9e:	607a      	str	r2, [r7, #4]
 8016ba0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8016ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ba4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	009b      	lsls	r3, r3, #2
 8016baa:	461a      	mov	r2, r3
 8016bac:	21a5      	movs	r1, #165	; 0xa5
 8016bae:	f003 fa68 	bl	801a082 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8016bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016bb6:	6879      	ldr	r1, [r7, #4]
 8016bb8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8016bbc:	440b      	add	r3, r1
 8016bbe:	009b      	lsls	r3, r3, #2
 8016bc0:	4413      	add	r3, r2
 8016bc2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8016bc4:	69bb      	ldr	r3, [r7, #24]
 8016bc6:	f023 0307 	bic.w	r3, r3, #7
 8016bca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8016bcc:	69bb      	ldr	r3, [r7, #24]
 8016bce:	f003 0307 	and.w	r3, r3, #7
 8016bd2:	2b00      	cmp	r3, #0
 8016bd4:	d00a      	beq.n	8016bec <prvInitialiseNewTask+0x58>
	__asm volatile
 8016bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bda:	f383 8811 	msr	BASEPRI, r3
 8016bde:	f3bf 8f6f 	isb	sy
 8016be2:	f3bf 8f4f 	dsb	sy
 8016be6:	617b      	str	r3, [r7, #20]
}
 8016be8:	bf00      	nop
 8016bea:	e7fe      	b.n	8016bea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8016bec:	68bb      	ldr	r3, [r7, #8]
 8016bee:	2b00      	cmp	r3, #0
 8016bf0:	d01f      	beq.n	8016c32 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016bf2:	2300      	movs	r3, #0
 8016bf4:	61fb      	str	r3, [r7, #28]
 8016bf6:	e012      	b.n	8016c1e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8016bf8:	68ba      	ldr	r2, [r7, #8]
 8016bfa:	69fb      	ldr	r3, [r7, #28]
 8016bfc:	4413      	add	r3, r2
 8016bfe:	7819      	ldrb	r1, [r3, #0]
 8016c00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016c02:	69fb      	ldr	r3, [r7, #28]
 8016c04:	4413      	add	r3, r2
 8016c06:	3334      	adds	r3, #52	; 0x34
 8016c08:	460a      	mov	r2, r1
 8016c0a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8016c0c:	68ba      	ldr	r2, [r7, #8]
 8016c0e:	69fb      	ldr	r3, [r7, #28]
 8016c10:	4413      	add	r3, r2
 8016c12:	781b      	ldrb	r3, [r3, #0]
 8016c14:	2b00      	cmp	r3, #0
 8016c16:	d006      	beq.n	8016c26 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016c18:	69fb      	ldr	r3, [r7, #28]
 8016c1a:	3301      	adds	r3, #1
 8016c1c:	61fb      	str	r3, [r7, #28]
 8016c1e:	69fb      	ldr	r3, [r7, #28]
 8016c20:	2b0f      	cmp	r3, #15
 8016c22:	d9e9      	bls.n	8016bf8 <prvInitialiseNewTask+0x64>
 8016c24:	e000      	b.n	8016c28 <prvInitialiseNewTask+0x94>
			{
				break;
 8016c26:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8016c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c2a:	2200      	movs	r2, #0
 8016c2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8016c30:	e003      	b.n	8016c3a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8016c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c34:	2200      	movs	r2, #0
 8016c36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8016c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c3c:	2b37      	cmp	r3, #55	; 0x37
 8016c3e:	d901      	bls.n	8016c44 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8016c40:	2337      	movs	r3, #55	; 0x37
 8016c42:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8016c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016c48:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8016c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016c4e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8016c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c52:	2200      	movs	r2, #0
 8016c54:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8016c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c58:	3304      	adds	r3, #4
 8016c5a:	4618      	mov	r0, r3
 8016c5c:	f7fe ff14 	bl	8015a88 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8016c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c62:	3318      	adds	r3, #24
 8016c64:	4618      	mov	r0, r3
 8016c66:	f7fe ff0f 	bl	8015a88 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8016c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016c6e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c72:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8016c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c78:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8016c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016c7e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8016c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c82:	2200      	movs	r2, #0
 8016c84:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8016c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c88:	2200      	movs	r2, #0
 8016c8a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8016c8e:	683a      	ldr	r2, [r7, #0]
 8016c90:	68f9      	ldr	r1, [r7, #12]
 8016c92:	69b8      	ldr	r0, [r7, #24]
 8016c94:	f001 f9de 	bl	8018054 <pxPortInitialiseStack>
 8016c98:	4602      	mov	r2, r0
 8016c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c9c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8016c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ca0:	2b00      	cmp	r3, #0
 8016ca2:	d002      	beq.n	8016caa <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8016ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ca6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016ca8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016caa:	bf00      	nop
 8016cac:	3720      	adds	r7, #32
 8016cae:	46bd      	mov	sp, r7
 8016cb0:	bd80      	pop	{r7, pc}
	...

08016cb4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8016cb4:	b580      	push	{r7, lr}
 8016cb6:	b082      	sub	sp, #8
 8016cb8:	af00      	add	r7, sp, #0
 8016cba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8016cbc:	f001 fafa 	bl	80182b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8016cc0:	4b26      	ldr	r3, [pc, #152]	; (8016d5c <prvAddNewTaskToReadyList+0xa8>)
 8016cc2:	681b      	ldr	r3, [r3, #0]
 8016cc4:	3301      	adds	r3, #1
 8016cc6:	4a25      	ldr	r2, [pc, #148]	; (8016d5c <prvAddNewTaskToReadyList+0xa8>)
 8016cc8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8016cca:	4b25      	ldr	r3, [pc, #148]	; (8016d60 <prvAddNewTaskToReadyList+0xac>)
 8016ccc:	681b      	ldr	r3, [r3, #0]
 8016cce:	2b00      	cmp	r3, #0
 8016cd0:	d109      	bne.n	8016ce6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8016cd2:	4a23      	ldr	r2, [pc, #140]	; (8016d60 <prvAddNewTaskToReadyList+0xac>)
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8016cd8:	4b20      	ldr	r3, [pc, #128]	; (8016d5c <prvAddNewTaskToReadyList+0xa8>)
 8016cda:	681b      	ldr	r3, [r3, #0]
 8016cdc:	2b01      	cmp	r3, #1
 8016cde:	d110      	bne.n	8016d02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8016ce0:	f000 fbce 	bl	8017480 <prvInitialiseTaskLists>
 8016ce4:	e00d      	b.n	8016d02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8016ce6:	4b1f      	ldr	r3, [pc, #124]	; (8016d64 <prvAddNewTaskToReadyList+0xb0>)
 8016ce8:	681b      	ldr	r3, [r3, #0]
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	d109      	bne.n	8016d02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8016cee:	4b1c      	ldr	r3, [pc, #112]	; (8016d60 <prvAddNewTaskToReadyList+0xac>)
 8016cf0:	681b      	ldr	r3, [r3, #0]
 8016cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016cf4:	687b      	ldr	r3, [r7, #4]
 8016cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016cf8:	429a      	cmp	r2, r3
 8016cfa:	d802      	bhi.n	8016d02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8016cfc:	4a18      	ldr	r2, [pc, #96]	; (8016d60 <prvAddNewTaskToReadyList+0xac>)
 8016cfe:	687b      	ldr	r3, [r7, #4]
 8016d00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8016d02:	4b19      	ldr	r3, [pc, #100]	; (8016d68 <prvAddNewTaskToReadyList+0xb4>)
 8016d04:	681b      	ldr	r3, [r3, #0]
 8016d06:	3301      	adds	r3, #1
 8016d08:	4a17      	ldr	r2, [pc, #92]	; (8016d68 <prvAddNewTaskToReadyList+0xb4>)
 8016d0a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8016d0c:	4b16      	ldr	r3, [pc, #88]	; (8016d68 <prvAddNewTaskToReadyList+0xb4>)
 8016d0e:	681a      	ldr	r2, [r3, #0]
 8016d10:	687b      	ldr	r3, [r7, #4]
 8016d12:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d18:	4b14      	ldr	r3, [pc, #80]	; (8016d6c <prvAddNewTaskToReadyList+0xb8>)
 8016d1a:	681b      	ldr	r3, [r3, #0]
 8016d1c:	429a      	cmp	r2, r3
 8016d1e:	d903      	bls.n	8016d28 <prvAddNewTaskToReadyList+0x74>
 8016d20:	687b      	ldr	r3, [r7, #4]
 8016d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d24:	4a11      	ldr	r2, [pc, #68]	; (8016d6c <prvAddNewTaskToReadyList+0xb8>)
 8016d26:	6013      	str	r3, [r2, #0]
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d2c:	4613      	mov	r3, r2
 8016d2e:	009b      	lsls	r3, r3, #2
 8016d30:	4413      	add	r3, r2
 8016d32:	009b      	lsls	r3, r3, #2
 8016d34:	4a0e      	ldr	r2, [pc, #56]	; (8016d70 <prvAddNewTaskToReadyList+0xbc>)
 8016d36:	441a      	add	r2, r3
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	3304      	adds	r3, #4
 8016d3c:	4619      	mov	r1, r3
 8016d3e:	4610      	mov	r0, r2
 8016d40:	f7fe feaf 	bl	8015aa2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8016d44:	f001 fae6 	bl	8018314 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8016d48:	4b06      	ldr	r3, [pc, #24]	; (8016d64 <prvAddNewTaskToReadyList+0xb0>)
 8016d4a:	681b      	ldr	r3, [r3, #0]
 8016d4c:	2b00      	cmp	r3, #0
 8016d4e:	d001      	beq.n	8016d54 <prvAddNewTaskToReadyList+0xa0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8016d50:	4b03      	ldr	r3, [pc, #12]	; (8016d60 <prvAddNewTaskToReadyList+0xac>)
 8016d52:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016d54:	bf00      	nop
 8016d56:	3708      	adds	r7, #8
 8016d58:	46bd      	mov	sp, r7
 8016d5a:	bd80      	pop	{r7, pc}
 8016d5c:	2400a23c 	.word	0x2400a23c
 8016d60:	24009d68 	.word	0x24009d68
 8016d64:	2400a248 	.word	0x2400a248
 8016d68:	2400a258 	.word	0x2400a258
 8016d6c:	2400a244 	.word	0x2400a244
 8016d70:	24009d6c 	.word	0x24009d6c

08016d74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8016d74:	b580      	push	{r7, lr}
 8016d76:	b084      	sub	sp, #16
 8016d78:	af00      	add	r7, sp, #0
 8016d7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8016d7c:	2300      	movs	r3, #0
 8016d7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	2b00      	cmp	r3, #0
 8016d84:	d017      	beq.n	8016db6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8016d86:	4b13      	ldr	r3, [pc, #76]	; (8016dd4 <vTaskDelay+0x60>)
 8016d88:	681b      	ldr	r3, [r3, #0]
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	d00a      	beq.n	8016da4 <vTaskDelay+0x30>
	__asm volatile
 8016d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d92:	f383 8811 	msr	BASEPRI, r3
 8016d96:	f3bf 8f6f 	isb	sy
 8016d9a:	f3bf 8f4f 	dsb	sy
 8016d9e:	60bb      	str	r3, [r7, #8]
}
 8016da0:	bf00      	nop
 8016da2:	e7fe      	b.n	8016da2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8016da4:	f000 f880 	bl	8016ea8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8016da8:	2100      	movs	r1, #0
 8016daa:	6878      	ldr	r0, [r7, #4]
 8016dac:	f000 fdb0 	bl	8017910 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8016db0:	f000 f888 	bl	8016ec4 <xTaskResumeAll>
 8016db4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8016db6:	68fb      	ldr	r3, [r7, #12]
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	d107      	bne.n	8016dcc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8016dbc:	4b06      	ldr	r3, [pc, #24]	; (8016dd8 <vTaskDelay+0x64>)
 8016dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016dc2:	601a      	str	r2, [r3, #0]
 8016dc4:	f3bf 8f4f 	dsb	sy
 8016dc8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016dcc:	bf00      	nop
 8016dce:	3710      	adds	r7, #16
 8016dd0:	46bd      	mov	sp, r7
 8016dd2:	bd80      	pop	{r7, pc}
 8016dd4:	2400a264 	.word	0x2400a264
 8016dd8:	e000ed04 	.word	0xe000ed04

08016ddc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8016ddc:	b580      	push	{r7, lr}
 8016dde:	b08a      	sub	sp, #40	; 0x28
 8016de0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8016de2:	2300      	movs	r3, #0
 8016de4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8016de6:	2300      	movs	r3, #0
 8016de8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8016dea:	463a      	mov	r2, r7
 8016dec:	1d39      	adds	r1, r7, #4
 8016dee:	f107 0308 	add.w	r3, r7, #8
 8016df2:	4618      	mov	r0, r3
 8016df4:	f7fe fdf4 	bl	80159e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8016df8:	6839      	ldr	r1, [r7, #0]
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	68ba      	ldr	r2, [r7, #8]
 8016dfe:	9202      	str	r2, [sp, #8]
 8016e00:	9301      	str	r3, [sp, #4]
 8016e02:	2300      	movs	r3, #0
 8016e04:	9300      	str	r3, [sp, #0]
 8016e06:	2300      	movs	r3, #0
 8016e08:	460a      	mov	r2, r1
 8016e0a:	4921      	ldr	r1, [pc, #132]	; (8016e90 <vTaskStartScheduler+0xb4>)
 8016e0c:	4821      	ldr	r0, [pc, #132]	; (8016e94 <vTaskStartScheduler+0xb8>)
 8016e0e:	f7ff fe1f 	bl	8016a50 <xTaskCreateStatic>
 8016e12:	4603      	mov	r3, r0
 8016e14:	4a20      	ldr	r2, [pc, #128]	; (8016e98 <vTaskStartScheduler+0xbc>)
 8016e16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8016e18:	4b1f      	ldr	r3, [pc, #124]	; (8016e98 <vTaskStartScheduler+0xbc>)
 8016e1a:	681b      	ldr	r3, [r3, #0]
 8016e1c:	2b00      	cmp	r3, #0
 8016e1e:	d002      	beq.n	8016e26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8016e20:	2301      	movs	r3, #1
 8016e22:	617b      	str	r3, [r7, #20]
 8016e24:	e001      	b.n	8016e2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8016e26:	2300      	movs	r3, #0
 8016e28:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8016e2a:	697b      	ldr	r3, [r7, #20]
 8016e2c:	2b01      	cmp	r3, #1
 8016e2e:	d102      	bne.n	8016e36 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8016e30:	f000 fdc2 	bl	80179b8 <xTimerCreateTimerTask>
 8016e34:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8016e36:	697b      	ldr	r3, [r7, #20]
 8016e38:	2b01      	cmp	r3, #1
 8016e3a:	d116      	bne.n	8016e6a <vTaskStartScheduler+0x8e>
	__asm volatile
 8016e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e40:	f383 8811 	msr	BASEPRI, r3
 8016e44:	f3bf 8f6f 	isb	sy
 8016e48:	f3bf 8f4f 	dsb	sy
 8016e4c:	613b      	str	r3, [r7, #16]
}
 8016e4e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8016e50:	4b12      	ldr	r3, [pc, #72]	; (8016e9c <vTaskStartScheduler+0xc0>)
 8016e52:	f04f 32ff 	mov.w	r2, #4294967295
 8016e56:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8016e58:	4b11      	ldr	r3, [pc, #68]	; (8016ea0 <vTaskStartScheduler+0xc4>)
 8016e5a:	2201      	movs	r2, #1
 8016e5c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8016e5e:	4b11      	ldr	r3, [pc, #68]	; (8016ea4 <vTaskStartScheduler+0xc8>)
 8016e60:	2200      	movs	r2, #0
 8016e62:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8016e64:	f001 f984 	bl	8018170 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8016e68:	e00e      	b.n	8016e88 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8016e6a:	697b      	ldr	r3, [r7, #20]
 8016e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e70:	d10a      	bne.n	8016e88 <vTaskStartScheduler+0xac>
	__asm volatile
 8016e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e76:	f383 8811 	msr	BASEPRI, r3
 8016e7a:	f3bf 8f6f 	isb	sy
 8016e7e:	f3bf 8f4f 	dsb	sy
 8016e82:	60fb      	str	r3, [r7, #12]
}
 8016e84:	bf00      	nop
 8016e86:	e7fe      	b.n	8016e86 <vTaskStartScheduler+0xaa>
}
 8016e88:	bf00      	nop
 8016e8a:	3718      	adds	r7, #24
 8016e8c:	46bd      	mov	sp, r7
 8016e8e:	bd80      	pop	{r7, pc}
 8016e90:	0801bf7c 	.word	0x0801bf7c
 8016e94:	0801745d 	.word	0x0801745d
 8016e98:	2400a260 	.word	0x2400a260
 8016e9c:	2400a25c 	.word	0x2400a25c
 8016ea0:	2400a248 	.word	0x2400a248
 8016ea4:	2400a240 	.word	0x2400a240

08016ea8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8016ea8:	b480      	push	{r7}
 8016eaa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8016eac:	4b04      	ldr	r3, [pc, #16]	; (8016ec0 <vTaskSuspendAll+0x18>)
 8016eae:	681b      	ldr	r3, [r3, #0]
 8016eb0:	3301      	adds	r3, #1
 8016eb2:	4a03      	ldr	r2, [pc, #12]	; (8016ec0 <vTaskSuspendAll+0x18>)
 8016eb4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8016eb6:	bf00      	nop
 8016eb8:	46bd      	mov	sp, r7
 8016eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ebe:	4770      	bx	lr
 8016ec0:	2400a264 	.word	0x2400a264

08016ec4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8016ec4:	b580      	push	{r7, lr}
 8016ec6:	b084      	sub	sp, #16
 8016ec8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8016eca:	2300      	movs	r3, #0
 8016ecc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8016ece:	2300      	movs	r3, #0
 8016ed0:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8016ed2:	4b3c      	ldr	r3, [pc, #240]	; (8016fc4 <xTaskResumeAll+0x100>)
 8016ed4:	681b      	ldr	r3, [r3, #0]
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	d10a      	bne.n	8016ef0 <xTaskResumeAll+0x2c>
	__asm volatile
 8016eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ede:	f383 8811 	msr	BASEPRI, r3
 8016ee2:	f3bf 8f6f 	isb	sy
 8016ee6:	f3bf 8f4f 	dsb	sy
 8016eea:	603b      	str	r3, [r7, #0]
}
 8016eec:	bf00      	nop
 8016eee:	e7fe      	b.n	8016eee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8016ef0:	f001 f9e0 	bl	80182b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8016ef4:	4b33      	ldr	r3, [pc, #204]	; (8016fc4 <xTaskResumeAll+0x100>)
 8016ef6:	681b      	ldr	r3, [r3, #0]
 8016ef8:	3b01      	subs	r3, #1
 8016efa:	4a32      	ldr	r2, [pc, #200]	; (8016fc4 <xTaskResumeAll+0x100>)
 8016efc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016efe:	4b31      	ldr	r3, [pc, #196]	; (8016fc4 <xTaskResumeAll+0x100>)
 8016f00:	681b      	ldr	r3, [r3, #0]
 8016f02:	2b00      	cmp	r3, #0
 8016f04:	d156      	bne.n	8016fb4 <xTaskResumeAll+0xf0>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8016f06:	4b30      	ldr	r3, [pc, #192]	; (8016fc8 <xTaskResumeAll+0x104>)
 8016f08:	681b      	ldr	r3, [r3, #0]
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	d052      	beq.n	8016fb4 <xTaskResumeAll+0xf0>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016f0e:	e02f      	b.n	8016f70 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016f10:	4b2e      	ldr	r3, [pc, #184]	; (8016fcc <xTaskResumeAll+0x108>)
 8016f12:	68db      	ldr	r3, [r3, #12]
 8016f14:	68db      	ldr	r3, [r3, #12]
 8016f16:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016f18:	68fb      	ldr	r3, [r7, #12]
 8016f1a:	3318      	adds	r3, #24
 8016f1c:	4618      	mov	r0, r3
 8016f1e:	f7fe fe1d 	bl	8015b5c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016f22:	68fb      	ldr	r3, [r7, #12]
 8016f24:	3304      	adds	r3, #4
 8016f26:	4618      	mov	r0, r3
 8016f28:	f7fe fe18 	bl	8015b5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8016f2c:	68fb      	ldr	r3, [r7, #12]
 8016f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016f30:	4b27      	ldr	r3, [pc, #156]	; (8016fd0 <xTaskResumeAll+0x10c>)
 8016f32:	681b      	ldr	r3, [r3, #0]
 8016f34:	429a      	cmp	r2, r3
 8016f36:	d903      	bls.n	8016f40 <xTaskResumeAll+0x7c>
 8016f38:	68fb      	ldr	r3, [r7, #12]
 8016f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f3c:	4a24      	ldr	r2, [pc, #144]	; (8016fd0 <xTaskResumeAll+0x10c>)
 8016f3e:	6013      	str	r3, [r2, #0]
 8016f40:	68fb      	ldr	r3, [r7, #12]
 8016f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016f44:	4613      	mov	r3, r2
 8016f46:	009b      	lsls	r3, r3, #2
 8016f48:	4413      	add	r3, r2
 8016f4a:	009b      	lsls	r3, r3, #2
 8016f4c:	4a21      	ldr	r2, [pc, #132]	; (8016fd4 <xTaskResumeAll+0x110>)
 8016f4e:	441a      	add	r2, r3
 8016f50:	68fb      	ldr	r3, [r7, #12]
 8016f52:	3304      	adds	r3, #4
 8016f54:	4619      	mov	r1, r3
 8016f56:	4610      	mov	r0, r2
 8016f58:	f7fe fda3 	bl	8015aa2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016f5c:	68fb      	ldr	r3, [r7, #12]
 8016f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016f60:	4b1d      	ldr	r3, [pc, #116]	; (8016fd8 <xTaskResumeAll+0x114>)
 8016f62:	681b      	ldr	r3, [r3, #0]
 8016f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f66:	429a      	cmp	r2, r3
 8016f68:	d302      	bcc.n	8016f70 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8016f6a:	4b1c      	ldr	r3, [pc, #112]	; (8016fdc <xTaskResumeAll+0x118>)
 8016f6c:	2201      	movs	r2, #1
 8016f6e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016f70:	4b16      	ldr	r3, [pc, #88]	; (8016fcc <xTaskResumeAll+0x108>)
 8016f72:	681b      	ldr	r3, [r3, #0]
 8016f74:	2b00      	cmp	r3, #0
 8016f76:	d1cb      	bne.n	8016f10 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8016f78:	68fb      	ldr	r3, [r7, #12]
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	d001      	beq.n	8016f82 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8016f7e:	f000 fb1d 	bl	80175bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8016f82:	4b17      	ldr	r3, [pc, #92]	; (8016fe0 <xTaskResumeAll+0x11c>)
 8016f84:	681b      	ldr	r3, [r3, #0]
 8016f86:	60bb      	str	r3, [r7, #8]

					if( xPendedCounts > ( TickType_t ) 0U )
 8016f88:	68bb      	ldr	r3, [r7, #8]
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	d010      	beq.n	8016fb0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8016f8e:	f000 f839 	bl	8017004 <xTaskIncrementTick>
 8016f92:	4603      	mov	r3, r0
 8016f94:	2b00      	cmp	r3, #0
 8016f96:	d002      	beq.n	8016f9e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8016f98:	4b10      	ldr	r3, [pc, #64]	; (8016fdc <xTaskResumeAll+0x118>)
 8016f9a:	2201      	movs	r2, #1
 8016f9c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8016f9e:	68bb      	ldr	r3, [r7, #8]
 8016fa0:	3b01      	subs	r3, #1
 8016fa2:	60bb      	str	r3, [r7, #8]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8016fa4:	68bb      	ldr	r3, [r7, #8]
 8016fa6:	2b00      	cmp	r3, #0
 8016fa8:	d1f1      	bne.n	8016f8e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8016faa:	4b0d      	ldr	r3, [pc, #52]	; (8016fe0 <xTaskResumeAll+0x11c>)
 8016fac:	2200      	movs	r2, #0
 8016fae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8016fb0:	4b0a      	ldr	r3, [pc, #40]	; (8016fdc <xTaskResumeAll+0x118>)
 8016fb2:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8016fb4:	f001 f9ae 	bl	8018314 <vPortExitCritical>

	return xAlreadyYielded;
 8016fb8:	687b      	ldr	r3, [r7, #4]
}
 8016fba:	4618      	mov	r0, r3
 8016fbc:	3710      	adds	r7, #16
 8016fbe:	46bd      	mov	sp, r7
 8016fc0:	bd80      	pop	{r7, pc}
 8016fc2:	bf00      	nop
 8016fc4:	2400a264 	.word	0x2400a264
 8016fc8:	2400a23c 	.word	0x2400a23c
 8016fcc:	2400a1fc 	.word	0x2400a1fc
 8016fd0:	2400a244 	.word	0x2400a244
 8016fd4:	24009d6c 	.word	0x24009d6c
 8016fd8:	24009d68 	.word	0x24009d68
 8016fdc:	2400a250 	.word	0x2400a250
 8016fe0:	2400a24c 	.word	0x2400a24c

08016fe4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8016fe4:	b480      	push	{r7}
 8016fe6:	b083      	sub	sp, #12
 8016fe8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8016fea:	4b05      	ldr	r3, [pc, #20]	; (8017000 <xTaskGetTickCount+0x1c>)
 8016fec:	681b      	ldr	r3, [r3, #0]
 8016fee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8016ff0:	687b      	ldr	r3, [r7, #4]
}
 8016ff2:	4618      	mov	r0, r3
 8016ff4:	370c      	adds	r7, #12
 8016ff6:	46bd      	mov	sp, r7
 8016ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ffc:	4770      	bx	lr
 8016ffe:	bf00      	nop
 8017000:	2400a240 	.word	0x2400a240

08017004 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8017004:	b580      	push	{r7, lr}
 8017006:	b086      	sub	sp, #24
 8017008:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801700a:	2300      	movs	r3, #0
 801700c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801700e:	4b3f      	ldr	r3, [pc, #252]	; (801710c <xTaskIncrementTick+0x108>)
 8017010:	681b      	ldr	r3, [r3, #0]
 8017012:	2b00      	cmp	r3, #0
 8017014:	d170      	bne.n	80170f8 <xTaskIncrementTick+0xf4>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8017016:	4b3e      	ldr	r3, [pc, #248]	; (8017110 <xTaskIncrementTick+0x10c>)
 8017018:	681b      	ldr	r3, [r3, #0]
 801701a:	3301      	adds	r3, #1
 801701c:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801701e:	4a3c      	ldr	r2, [pc, #240]	; (8017110 <xTaskIncrementTick+0x10c>)
 8017020:	693b      	ldr	r3, [r7, #16]
 8017022:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8017024:	693b      	ldr	r3, [r7, #16]
 8017026:	2b00      	cmp	r3, #0
 8017028:	d120      	bne.n	801706c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 801702a:	4b3a      	ldr	r3, [pc, #232]	; (8017114 <xTaskIncrementTick+0x110>)
 801702c:	681b      	ldr	r3, [r3, #0]
 801702e:	681b      	ldr	r3, [r3, #0]
 8017030:	2b00      	cmp	r3, #0
 8017032:	d00a      	beq.n	801704a <xTaskIncrementTick+0x46>
	__asm volatile
 8017034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017038:	f383 8811 	msr	BASEPRI, r3
 801703c:	f3bf 8f6f 	isb	sy
 8017040:	f3bf 8f4f 	dsb	sy
 8017044:	603b      	str	r3, [r7, #0]
}
 8017046:	bf00      	nop
 8017048:	e7fe      	b.n	8017048 <xTaskIncrementTick+0x44>
 801704a:	4b32      	ldr	r3, [pc, #200]	; (8017114 <xTaskIncrementTick+0x110>)
 801704c:	681b      	ldr	r3, [r3, #0]
 801704e:	60fb      	str	r3, [r7, #12]
 8017050:	4b31      	ldr	r3, [pc, #196]	; (8017118 <xTaskIncrementTick+0x114>)
 8017052:	681b      	ldr	r3, [r3, #0]
 8017054:	4a2f      	ldr	r2, [pc, #188]	; (8017114 <xTaskIncrementTick+0x110>)
 8017056:	6013      	str	r3, [r2, #0]
 8017058:	4a2f      	ldr	r2, [pc, #188]	; (8017118 <xTaskIncrementTick+0x114>)
 801705a:	68fb      	ldr	r3, [r7, #12]
 801705c:	6013      	str	r3, [r2, #0]
 801705e:	4b2f      	ldr	r3, [pc, #188]	; (801711c <xTaskIncrementTick+0x118>)
 8017060:	681b      	ldr	r3, [r3, #0]
 8017062:	3301      	adds	r3, #1
 8017064:	4a2d      	ldr	r2, [pc, #180]	; (801711c <xTaskIncrementTick+0x118>)
 8017066:	6013      	str	r3, [r2, #0]
 8017068:	f000 faa8 	bl	80175bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801706c:	4b2c      	ldr	r3, [pc, #176]	; (8017120 <xTaskIncrementTick+0x11c>)
 801706e:	681b      	ldr	r3, [r3, #0]
 8017070:	693a      	ldr	r2, [r7, #16]
 8017072:	429a      	cmp	r2, r3
 8017074:	d345      	bcc.n	8017102 <xTaskIncrementTick+0xfe>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017076:	4b27      	ldr	r3, [pc, #156]	; (8017114 <xTaskIncrementTick+0x110>)
 8017078:	681b      	ldr	r3, [r3, #0]
 801707a:	681b      	ldr	r3, [r3, #0]
 801707c:	2b00      	cmp	r3, #0
 801707e:	d104      	bne.n	801708a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017080:	4b27      	ldr	r3, [pc, #156]	; (8017120 <xTaskIncrementTick+0x11c>)
 8017082:	f04f 32ff 	mov.w	r2, #4294967295
 8017086:	601a      	str	r2, [r3, #0]
					break;
 8017088:	e03b      	b.n	8017102 <xTaskIncrementTick+0xfe>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801708a:	4b22      	ldr	r3, [pc, #136]	; (8017114 <xTaskIncrementTick+0x110>)
 801708c:	681b      	ldr	r3, [r3, #0]
 801708e:	68db      	ldr	r3, [r3, #12]
 8017090:	68db      	ldr	r3, [r3, #12]
 8017092:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8017094:	68bb      	ldr	r3, [r7, #8]
 8017096:	685b      	ldr	r3, [r3, #4]
 8017098:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801709a:	693a      	ldr	r2, [r7, #16]
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	429a      	cmp	r2, r3
 80170a0:	d203      	bcs.n	80170aa <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80170a2:	4a1f      	ldr	r2, [pc, #124]	; (8017120 <xTaskIncrementTick+0x11c>)
 80170a4:	687b      	ldr	r3, [r7, #4]
 80170a6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80170a8:	e02b      	b.n	8017102 <xTaskIncrementTick+0xfe>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80170aa:	68bb      	ldr	r3, [r7, #8]
 80170ac:	3304      	adds	r3, #4
 80170ae:	4618      	mov	r0, r3
 80170b0:	f7fe fd54 	bl	8015b5c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80170b4:	68bb      	ldr	r3, [r7, #8]
 80170b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80170b8:	2b00      	cmp	r3, #0
 80170ba:	d004      	beq.n	80170c6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80170bc:	68bb      	ldr	r3, [r7, #8]
 80170be:	3318      	adds	r3, #24
 80170c0:	4618      	mov	r0, r3
 80170c2:	f7fe fd4b 	bl	8015b5c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80170c6:	68bb      	ldr	r3, [r7, #8]
 80170c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80170ca:	4b16      	ldr	r3, [pc, #88]	; (8017124 <xTaskIncrementTick+0x120>)
 80170cc:	681b      	ldr	r3, [r3, #0]
 80170ce:	429a      	cmp	r2, r3
 80170d0:	d903      	bls.n	80170da <xTaskIncrementTick+0xd6>
 80170d2:	68bb      	ldr	r3, [r7, #8]
 80170d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170d6:	4a13      	ldr	r2, [pc, #76]	; (8017124 <xTaskIncrementTick+0x120>)
 80170d8:	6013      	str	r3, [r2, #0]
 80170da:	68bb      	ldr	r3, [r7, #8]
 80170dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80170de:	4613      	mov	r3, r2
 80170e0:	009b      	lsls	r3, r3, #2
 80170e2:	4413      	add	r3, r2
 80170e4:	009b      	lsls	r3, r3, #2
 80170e6:	4a10      	ldr	r2, [pc, #64]	; (8017128 <xTaskIncrementTick+0x124>)
 80170e8:	441a      	add	r2, r3
 80170ea:	68bb      	ldr	r3, [r7, #8]
 80170ec:	3304      	adds	r3, #4
 80170ee:	4619      	mov	r1, r3
 80170f0:	4610      	mov	r0, r2
 80170f2:	f7fe fcd6 	bl	8015aa2 <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80170f6:	e7be      	b.n	8017076 <xTaskIncrementTick+0x72>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80170f8:	4b0c      	ldr	r3, [pc, #48]	; (801712c <xTaskIncrementTick+0x128>)
 80170fa:	681b      	ldr	r3, [r3, #0]
 80170fc:	3301      	adds	r3, #1
 80170fe:	4a0b      	ldr	r2, [pc, #44]	; (801712c <xTaskIncrementTick+0x128>)
 8017100:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8017102:	697b      	ldr	r3, [r7, #20]
}
 8017104:	4618      	mov	r0, r3
 8017106:	3718      	adds	r7, #24
 8017108:	46bd      	mov	sp, r7
 801710a:	bd80      	pop	{r7, pc}
 801710c:	2400a264 	.word	0x2400a264
 8017110:	2400a240 	.word	0x2400a240
 8017114:	2400a1f4 	.word	0x2400a1f4
 8017118:	2400a1f8 	.word	0x2400a1f8
 801711c:	2400a254 	.word	0x2400a254
 8017120:	2400a25c 	.word	0x2400a25c
 8017124:	2400a244 	.word	0x2400a244
 8017128:	24009d6c 	.word	0x24009d6c
 801712c:	2400a24c 	.word	0x2400a24c

08017130 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8017130:	b480      	push	{r7}
 8017132:	b085      	sub	sp, #20
 8017134:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8017136:	4b28      	ldr	r3, [pc, #160]	; (80171d8 <vTaskSwitchContext+0xa8>)
 8017138:	681b      	ldr	r3, [r3, #0]
 801713a:	2b00      	cmp	r3, #0
 801713c:	d003      	beq.n	8017146 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801713e:	4b27      	ldr	r3, [pc, #156]	; (80171dc <vTaskSwitchContext+0xac>)
 8017140:	2201      	movs	r2, #1
 8017142:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8017144:	e041      	b.n	80171ca <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8017146:	4b25      	ldr	r3, [pc, #148]	; (80171dc <vTaskSwitchContext+0xac>)
 8017148:	2200      	movs	r2, #0
 801714a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801714c:	4b24      	ldr	r3, [pc, #144]	; (80171e0 <vTaskSwitchContext+0xb0>)
 801714e:	681b      	ldr	r3, [r3, #0]
 8017150:	60fb      	str	r3, [r7, #12]
 8017152:	e010      	b.n	8017176 <vTaskSwitchContext+0x46>
 8017154:	68fb      	ldr	r3, [r7, #12]
 8017156:	2b00      	cmp	r3, #0
 8017158:	d10a      	bne.n	8017170 <vTaskSwitchContext+0x40>
	__asm volatile
 801715a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801715e:	f383 8811 	msr	BASEPRI, r3
 8017162:	f3bf 8f6f 	isb	sy
 8017166:	f3bf 8f4f 	dsb	sy
 801716a:	607b      	str	r3, [r7, #4]
}
 801716c:	bf00      	nop
 801716e:	e7fe      	b.n	801716e <vTaskSwitchContext+0x3e>
 8017170:	68fb      	ldr	r3, [r7, #12]
 8017172:	3b01      	subs	r3, #1
 8017174:	60fb      	str	r3, [r7, #12]
 8017176:	491b      	ldr	r1, [pc, #108]	; (80171e4 <vTaskSwitchContext+0xb4>)
 8017178:	68fa      	ldr	r2, [r7, #12]
 801717a:	4613      	mov	r3, r2
 801717c:	009b      	lsls	r3, r3, #2
 801717e:	4413      	add	r3, r2
 8017180:	009b      	lsls	r3, r3, #2
 8017182:	440b      	add	r3, r1
 8017184:	681b      	ldr	r3, [r3, #0]
 8017186:	2b00      	cmp	r3, #0
 8017188:	d0e4      	beq.n	8017154 <vTaskSwitchContext+0x24>
 801718a:	68fa      	ldr	r2, [r7, #12]
 801718c:	4613      	mov	r3, r2
 801718e:	009b      	lsls	r3, r3, #2
 8017190:	4413      	add	r3, r2
 8017192:	009b      	lsls	r3, r3, #2
 8017194:	4a13      	ldr	r2, [pc, #76]	; (80171e4 <vTaskSwitchContext+0xb4>)
 8017196:	4413      	add	r3, r2
 8017198:	60bb      	str	r3, [r7, #8]
 801719a:	68bb      	ldr	r3, [r7, #8]
 801719c:	685b      	ldr	r3, [r3, #4]
 801719e:	685a      	ldr	r2, [r3, #4]
 80171a0:	68bb      	ldr	r3, [r7, #8]
 80171a2:	605a      	str	r2, [r3, #4]
 80171a4:	68bb      	ldr	r3, [r7, #8]
 80171a6:	685a      	ldr	r2, [r3, #4]
 80171a8:	68bb      	ldr	r3, [r7, #8]
 80171aa:	3308      	adds	r3, #8
 80171ac:	429a      	cmp	r2, r3
 80171ae:	d104      	bne.n	80171ba <vTaskSwitchContext+0x8a>
 80171b0:	68bb      	ldr	r3, [r7, #8]
 80171b2:	685b      	ldr	r3, [r3, #4]
 80171b4:	685a      	ldr	r2, [r3, #4]
 80171b6:	68bb      	ldr	r3, [r7, #8]
 80171b8:	605a      	str	r2, [r3, #4]
 80171ba:	68bb      	ldr	r3, [r7, #8]
 80171bc:	685b      	ldr	r3, [r3, #4]
 80171be:	68db      	ldr	r3, [r3, #12]
 80171c0:	4a09      	ldr	r2, [pc, #36]	; (80171e8 <vTaskSwitchContext+0xb8>)
 80171c2:	6013      	str	r3, [r2, #0]
 80171c4:	4a06      	ldr	r2, [pc, #24]	; (80171e0 <vTaskSwitchContext+0xb0>)
 80171c6:	68fb      	ldr	r3, [r7, #12]
 80171c8:	6013      	str	r3, [r2, #0]
}
 80171ca:	bf00      	nop
 80171cc:	3714      	adds	r7, #20
 80171ce:	46bd      	mov	sp, r7
 80171d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171d4:	4770      	bx	lr
 80171d6:	bf00      	nop
 80171d8:	2400a264 	.word	0x2400a264
 80171dc:	2400a250 	.word	0x2400a250
 80171e0:	2400a244 	.word	0x2400a244
 80171e4:	24009d6c 	.word	0x24009d6c
 80171e8:	24009d68 	.word	0x24009d68

080171ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80171ec:	b580      	push	{r7, lr}
 80171ee:	b084      	sub	sp, #16
 80171f0:	af00      	add	r7, sp, #0
 80171f2:	6078      	str	r0, [r7, #4]
 80171f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80171f6:	687b      	ldr	r3, [r7, #4]
 80171f8:	2b00      	cmp	r3, #0
 80171fa:	d10a      	bne.n	8017212 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80171fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017200:	f383 8811 	msr	BASEPRI, r3
 8017204:	f3bf 8f6f 	isb	sy
 8017208:	f3bf 8f4f 	dsb	sy
 801720c:	60fb      	str	r3, [r7, #12]
}
 801720e:	bf00      	nop
 8017210:	e7fe      	b.n	8017210 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017212:	4b07      	ldr	r3, [pc, #28]	; (8017230 <vTaskPlaceOnEventList+0x44>)
 8017214:	681b      	ldr	r3, [r3, #0]
 8017216:	3318      	adds	r3, #24
 8017218:	4619      	mov	r1, r3
 801721a:	6878      	ldr	r0, [r7, #4]
 801721c:	f7fe fc65 	bl	8015aea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8017220:	2101      	movs	r1, #1
 8017222:	6838      	ldr	r0, [r7, #0]
 8017224:	f000 fb74 	bl	8017910 <prvAddCurrentTaskToDelayedList>
}
 8017228:	bf00      	nop
 801722a:	3710      	adds	r7, #16
 801722c:	46bd      	mov	sp, r7
 801722e:	bd80      	pop	{r7, pc}
 8017230:	24009d68 	.word	0x24009d68

08017234 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017234:	b580      	push	{r7, lr}
 8017236:	b086      	sub	sp, #24
 8017238:	af00      	add	r7, sp, #0
 801723a:	60f8      	str	r0, [r7, #12]
 801723c:	60b9      	str	r1, [r7, #8]
 801723e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8017240:	68fb      	ldr	r3, [r7, #12]
 8017242:	2b00      	cmp	r3, #0
 8017244:	d10a      	bne.n	801725c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8017246:	f04f 0350 	mov.w	r3, #80	; 0x50
 801724a:	f383 8811 	msr	BASEPRI, r3
 801724e:	f3bf 8f6f 	isb	sy
 8017252:	f3bf 8f4f 	dsb	sy
 8017256:	617b      	str	r3, [r7, #20]
}
 8017258:	bf00      	nop
 801725a:	e7fe      	b.n	801725a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801725c:	4b0a      	ldr	r3, [pc, #40]	; (8017288 <vTaskPlaceOnEventListRestricted+0x54>)
 801725e:	681b      	ldr	r3, [r3, #0]
 8017260:	3318      	adds	r3, #24
 8017262:	4619      	mov	r1, r3
 8017264:	68f8      	ldr	r0, [r7, #12]
 8017266:	f7fe fc1c 	bl	8015aa2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801726a:	687b      	ldr	r3, [r7, #4]
 801726c:	2b00      	cmp	r3, #0
 801726e:	d002      	beq.n	8017276 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8017270:	f04f 33ff 	mov.w	r3, #4294967295
 8017274:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8017276:	6879      	ldr	r1, [r7, #4]
 8017278:	68b8      	ldr	r0, [r7, #8]
 801727a:	f000 fb49 	bl	8017910 <prvAddCurrentTaskToDelayedList>
	}
 801727e:	bf00      	nop
 8017280:	3718      	adds	r7, #24
 8017282:	46bd      	mov	sp, r7
 8017284:	bd80      	pop	{r7, pc}
 8017286:	bf00      	nop
 8017288:	24009d68 	.word	0x24009d68

0801728c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801728c:	b580      	push	{r7, lr}
 801728e:	b086      	sub	sp, #24
 8017290:	af00      	add	r7, sp, #0
 8017292:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	68db      	ldr	r3, [r3, #12]
 8017298:	68db      	ldr	r3, [r3, #12]
 801729a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801729c:	693b      	ldr	r3, [r7, #16]
 801729e:	2b00      	cmp	r3, #0
 80172a0:	d10a      	bne.n	80172b8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80172a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172a6:	f383 8811 	msr	BASEPRI, r3
 80172aa:	f3bf 8f6f 	isb	sy
 80172ae:	f3bf 8f4f 	dsb	sy
 80172b2:	60fb      	str	r3, [r7, #12]
}
 80172b4:	bf00      	nop
 80172b6:	e7fe      	b.n	80172b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80172b8:	693b      	ldr	r3, [r7, #16]
 80172ba:	3318      	adds	r3, #24
 80172bc:	4618      	mov	r0, r3
 80172be:	f7fe fc4d 	bl	8015b5c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80172c2:	4b1e      	ldr	r3, [pc, #120]	; (801733c <xTaskRemoveFromEventList+0xb0>)
 80172c4:	681b      	ldr	r3, [r3, #0]
 80172c6:	2b00      	cmp	r3, #0
 80172c8:	d11d      	bne.n	8017306 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80172ca:	693b      	ldr	r3, [r7, #16]
 80172cc:	3304      	adds	r3, #4
 80172ce:	4618      	mov	r0, r3
 80172d0:	f7fe fc44 	bl	8015b5c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80172d4:	693b      	ldr	r3, [r7, #16]
 80172d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80172d8:	4b19      	ldr	r3, [pc, #100]	; (8017340 <xTaskRemoveFromEventList+0xb4>)
 80172da:	681b      	ldr	r3, [r3, #0]
 80172dc:	429a      	cmp	r2, r3
 80172de:	d903      	bls.n	80172e8 <xTaskRemoveFromEventList+0x5c>
 80172e0:	693b      	ldr	r3, [r7, #16]
 80172e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80172e4:	4a16      	ldr	r2, [pc, #88]	; (8017340 <xTaskRemoveFromEventList+0xb4>)
 80172e6:	6013      	str	r3, [r2, #0]
 80172e8:	693b      	ldr	r3, [r7, #16]
 80172ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80172ec:	4613      	mov	r3, r2
 80172ee:	009b      	lsls	r3, r3, #2
 80172f0:	4413      	add	r3, r2
 80172f2:	009b      	lsls	r3, r3, #2
 80172f4:	4a13      	ldr	r2, [pc, #76]	; (8017344 <xTaskRemoveFromEventList+0xb8>)
 80172f6:	441a      	add	r2, r3
 80172f8:	693b      	ldr	r3, [r7, #16]
 80172fa:	3304      	adds	r3, #4
 80172fc:	4619      	mov	r1, r3
 80172fe:	4610      	mov	r0, r2
 8017300:	f7fe fbcf 	bl	8015aa2 <vListInsertEnd>
 8017304:	e005      	b.n	8017312 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8017306:	693b      	ldr	r3, [r7, #16]
 8017308:	3318      	adds	r3, #24
 801730a:	4619      	mov	r1, r3
 801730c:	480e      	ldr	r0, [pc, #56]	; (8017348 <xTaskRemoveFromEventList+0xbc>)
 801730e:	f7fe fbc8 	bl	8015aa2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8017312:	693b      	ldr	r3, [r7, #16]
 8017314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017316:	4b0d      	ldr	r3, [pc, #52]	; (801734c <xTaskRemoveFromEventList+0xc0>)
 8017318:	681b      	ldr	r3, [r3, #0]
 801731a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801731c:	429a      	cmp	r2, r3
 801731e:	d905      	bls.n	801732c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8017320:	2301      	movs	r3, #1
 8017322:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8017324:	4b0a      	ldr	r3, [pc, #40]	; (8017350 <xTaskRemoveFromEventList+0xc4>)
 8017326:	2201      	movs	r2, #1
 8017328:	601a      	str	r2, [r3, #0]
 801732a:	e001      	b.n	8017330 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801732c:	2300      	movs	r3, #0
 801732e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8017330:	697b      	ldr	r3, [r7, #20]
}
 8017332:	4618      	mov	r0, r3
 8017334:	3718      	adds	r7, #24
 8017336:	46bd      	mov	sp, r7
 8017338:	bd80      	pop	{r7, pc}
 801733a:	bf00      	nop
 801733c:	2400a264 	.word	0x2400a264
 8017340:	2400a244 	.word	0x2400a244
 8017344:	24009d6c 	.word	0x24009d6c
 8017348:	2400a1fc 	.word	0x2400a1fc
 801734c:	24009d68 	.word	0x24009d68
 8017350:	2400a250 	.word	0x2400a250

08017354 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8017354:	b480      	push	{r7}
 8017356:	b083      	sub	sp, #12
 8017358:	af00      	add	r7, sp, #0
 801735a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801735c:	4b06      	ldr	r3, [pc, #24]	; (8017378 <vTaskInternalSetTimeOutState+0x24>)
 801735e:	681a      	ldr	r2, [r3, #0]
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8017364:	4b05      	ldr	r3, [pc, #20]	; (801737c <vTaskInternalSetTimeOutState+0x28>)
 8017366:	681a      	ldr	r2, [r3, #0]
 8017368:	687b      	ldr	r3, [r7, #4]
 801736a:	605a      	str	r2, [r3, #4]
}
 801736c:	bf00      	nop
 801736e:	370c      	adds	r7, #12
 8017370:	46bd      	mov	sp, r7
 8017372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017376:	4770      	bx	lr
 8017378:	2400a254 	.word	0x2400a254
 801737c:	2400a240 	.word	0x2400a240

08017380 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8017380:	b580      	push	{r7, lr}
 8017382:	b088      	sub	sp, #32
 8017384:	af00      	add	r7, sp, #0
 8017386:	6078      	str	r0, [r7, #4]
 8017388:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801738a:	687b      	ldr	r3, [r7, #4]
 801738c:	2b00      	cmp	r3, #0
 801738e:	d10a      	bne.n	80173a6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8017390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017394:	f383 8811 	msr	BASEPRI, r3
 8017398:	f3bf 8f6f 	isb	sy
 801739c:	f3bf 8f4f 	dsb	sy
 80173a0:	613b      	str	r3, [r7, #16]
}
 80173a2:	bf00      	nop
 80173a4:	e7fe      	b.n	80173a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80173a6:	683b      	ldr	r3, [r7, #0]
 80173a8:	2b00      	cmp	r3, #0
 80173aa:	d10a      	bne.n	80173c2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80173ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80173b0:	f383 8811 	msr	BASEPRI, r3
 80173b4:	f3bf 8f6f 	isb	sy
 80173b8:	f3bf 8f4f 	dsb	sy
 80173bc:	60fb      	str	r3, [r7, #12]
}
 80173be:	bf00      	nop
 80173c0:	e7fe      	b.n	80173c0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80173c2:	f000 ff77 	bl	80182b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80173c6:	4b1d      	ldr	r3, [pc, #116]	; (801743c <xTaskCheckForTimeOut+0xbc>)
 80173c8:	681b      	ldr	r3, [r3, #0]
 80173ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	685b      	ldr	r3, [r3, #4]
 80173d0:	69ba      	ldr	r2, [r7, #24]
 80173d2:	1ad3      	subs	r3, r2, r3
 80173d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80173d6:	683b      	ldr	r3, [r7, #0]
 80173d8:	681b      	ldr	r3, [r3, #0]
 80173da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80173de:	d102      	bne.n	80173e6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80173e0:	2300      	movs	r3, #0
 80173e2:	61fb      	str	r3, [r7, #28]
 80173e4:	e023      	b.n	801742e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80173e6:	687b      	ldr	r3, [r7, #4]
 80173e8:	681a      	ldr	r2, [r3, #0]
 80173ea:	4b15      	ldr	r3, [pc, #84]	; (8017440 <xTaskCheckForTimeOut+0xc0>)
 80173ec:	681b      	ldr	r3, [r3, #0]
 80173ee:	429a      	cmp	r2, r3
 80173f0:	d007      	beq.n	8017402 <xTaskCheckForTimeOut+0x82>
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	685b      	ldr	r3, [r3, #4]
 80173f6:	69ba      	ldr	r2, [r7, #24]
 80173f8:	429a      	cmp	r2, r3
 80173fa:	d302      	bcc.n	8017402 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80173fc:	2301      	movs	r3, #1
 80173fe:	61fb      	str	r3, [r7, #28]
 8017400:	e015      	b.n	801742e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8017402:	683b      	ldr	r3, [r7, #0]
 8017404:	681b      	ldr	r3, [r3, #0]
 8017406:	697a      	ldr	r2, [r7, #20]
 8017408:	429a      	cmp	r2, r3
 801740a:	d20b      	bcs.n	8017424 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801740c:	683b      	ldr	r3, [r7, #0]
 801740e:	681a      	ldr	r2, [r3, #0]
 8017410:	697b      	ldr	r3, [r7, #20]
 8017412:	1ad2      	subs	r2, r2, r3
 8017414:	683b      	ldr	r3, [r7, #0]
 8017416:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8017418:	6878      	ldr	r0, [r7, #4]
 801741a:	f7ff ff9b 	bl	8017354 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801741e:	2300      	movs	r3, #0
 8017420:	61fb      	str	r3, [r7, #28]
 8017422:	e004      	b.n	801742e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8017424:	683b      	ldr	r3, [r7, #0]
 8017426:	2200      	movs	r2, #0
 8017428:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801742a:	2301      	movs	r3, #1
 801742c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801742e:	f000 ff71 	bl	8018314 <vPortExitCritical>

	return xReturn;
 8017432:	69fb      	ldr	r3, [r7, #28]
}
 8017434:	4618      	mov	r0, r3
 8017436:	3720      	adds	r7, #32
 8017438:	46bd      	mov	sp, r7
 801743a:	bd80      	pop	{r7, pc}
 801743c:	2400a240 	.word	0x2400a240
 8017440:	2400a254 	.word	0x2400a254

08017444 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8017444:	b480      	push	{r7}
 8017446:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8017448:	4b03      	ldr	r3, [pc, #12]	; (8017458 <vTaskMissedYield+0x14>)
 801744a:	2201      	movs	r2, #1
 801744c:	601a      	str	r2, [r3, #0]
}
 801744e:	bf00      	nop
 8017450:	46bd      	mov	sp, r7
 8017452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017456:	4770      	bx	lr
 8017458:	2400a250 	.word	0x2400a250

0801745c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801745c:	b580      	push	{r7, lr}
 801745e:	b082      	sub	sp, #8
 8017460:	af00      	add	r7, sp, #0
 8017462:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8017464:	f000 f84c 	bl	8017500 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 8017468:	4b04      	ldr	r3, [pc, #16]	; (801747c <prvIdleTask+0x20>)
 801746a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801746e:	601a      	str	r2, [r3, #0]
 8017470:	f3bf 8f4f 	dsb	sy
 8017474:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8017478:	e7f4      	b.n	8017464 <prvIdleTask+0x8>
 801747a:	bf00      	nop
 801747c:	e000ed04 	.word	0xe000ed04

08017480 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8017480:	b580      	push	{r7, lr}
 8017482:	b082      	sub	sp, #8
 8017484:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017486:	2300      	movs	r3, #0
 8017488:	607b      	str	r3, [r7, #4]
 801748a:	e00c      	b.n	80174a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801748c:	687a      	ldr	r2, [r7, #4]
 801748e:	4613      	mov	r3, r2
 8017490:	009b      	lsls	r3, r3, #2
 8017492:	4413      	add	r3, r2
 8017494:	009b      	lsls	r3, r3, #2
 8017496:	4a12      	ldr	r2, [pc, #72]	; (80174e0 <prvInitialiseTaskLists+0x60>)
 8017498:	4413      	add	r3, r2
 801749a:	4618      	mov	r0, r3
 801749c:	f7fe fad4 	bl	8015a48 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80174a0:	687b      	ldr	r3, [r7, #4]
 80174a2:	3301      	adds	r3, #1
 80174a4:	607b      	str	r3, [r7, #4]
 80174a6:	687b      	ldr	r3, [r7, #4]
 80174a8:	2b37      	cmp	r3, #55	; 0x37
 80174aa:	d9ef      	bls.n	801748c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80174ac:	480d      	ldr	r0, [pc, #52]	; (80174e4 <prvInitialiseTaskLists+0x64>)
 80174ae:	f7fe facb 	bl	8015a48 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80174b2:	480d      	ldr	r0, [pc, #52]	; (80174e8 <prvInitialiseTaskLists+0x68>)
 80174b4:	f7fe fac8 	bl	8015a48 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80174b8:	480c      	ldr	r0, [pc, #48]	; (80174ec <prvInitialiseTaskLists+0x6c>)
 80174ba:	f7fe fac5 	bl	8015a48 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80174be:	480c      	ldr	r0, [pc, #48]	; (80174f0 <prvInitialiseTaskLists+0x70>)
 80174c0:	f7fe fac2 	bl	8015a48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80174c4:	480b      	ldr	r0, [pc, #44]	; (80174f4 <prvInitialiseTaskLists+0x74>)
 80174c6:	f7fe fabf 	bl	8015a48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80174ca:	4b0b      	ldr	r3, [pc, #44]	; (80174f8 <prvInitialiseTaskLists+0x78>)
 80174cc:	4a05      	ldr	r2, [pc, #20]	; (80174e4 <prvInitialiseTaskLists+0x64>)
 80174ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80174d0:	4b0a      	ldr	r3, [pc, #40]	; (80174fc <prvInitialiseTaskLists+0x7c>)
 80174d2:	4a05      	ldr	r2, [pc, #20]	; (80174e8 <prvInitialiseTaskLists+0x68>)
 80174d4:	601a      	str	r2, [r3, #0]
}
 80174d6:	bf00      	nop
 80174d8:	3708      	adds	r7, #8
 80174da:	46bd      	mov	sp, r7
 80174dc:	bd80      	pop	{r7, pc}
 80174de:	bf00      	nop
 80174e0:	24009d6c 	.word	0x24009d6c
 80174e4:	2400a1cc 	.word	0x2400a1cc
 80174e8:	2400a1e0 	.word	0x2400a1e0
 80174ec:	2400a1fc 	.word	0x2400a1fc
 80174f0:	2400a210 	.word	0x2400a210
 80174f4:	2400a228 	.word	0x2400a228
 80174f8:	2400a1f4 	.word	0x2400a1f4
 80174fc:	2400a1f8 	.word	0x2400a1f8

08017500 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8017500:	b580      	push	{r7, lr}
 8017502:	b082      	sub	sp, #8
 8017504:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017506:	e019      	b.n	801753c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8017508:	f000 fed4 	bl	80182b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801750c:	4b10      	ldr	r3, [pc, #64]	; (8017550 <prvCheckTasksWaitingTermination+0x50>)
 801750e:	68db      	ldr	r3, [r3, #12]
 8017510:	68db      	ldr	r3, [r3, #12]
 8017512:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017514:	687b      	ldr	r3, [r7, #4]
 8017516:	3304      	adds	r3, #4
 8017518:	4618      	mov	r0, r3
 801751a:	f7fe fb1f 	bl	8015b5c <uxListRemove>
				--uxCurrentNumberOfTasks;
 801751e:	4b0d      	ldr	r3, [pc, #52]	; (8017554 <prvCheckTasksWaitingTermination+0x54>)
 8017520:	681b      	ldr	r3, [r3, #0]
 8017522:	3b01      	subs	r3, #1
 8017524:	4a0b      	ldr	r2, [pc, #44]	; (8017554 <prvCheckTasksWaitingTermination+0x54>)
 8017526:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8017528:	4b0b      	ldr	r3, [pc, #44]	; (8017558 <prvCheckTasksWaitingTermination+0x58>)
 801752a:	681b      	ldr	r3, [r3, #0]
 801752c:	3b01      	subs	r3, #1
 801752e:	4a0a      	ldr	r2, [pc, #40]	; (8017558 <prvCheckTasksWaitingTermination+0x58>)
 8017530:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8017532:	f000 feef 	bl	8018314 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8017536:	6878      	ldr	r0, [r7, #4]
 8017538:	f000 f810 	bl	801755c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801753c:	4b06      	ldr	r3, [pc, #24]	; (8017558 <prvCheckTasksWaitingTermination+0x58>)
 801753e:	681b      	ldr	r3, [r3, #0]
 8017540:	2b00      	cmp	r3, #0
 8017542:	d1e1      	bne.n	8017508 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8017544:	bf00      	nop
 8017546:	bf00      	nop
 8017548:	3708      	adds	r7, #8
 801754a:	46bd      	mov	sp, r7
 801754c:	bd80      	pop	{r7, pc}
 801754e:	bf00      	nop
 8017550:	2400a210 	.word	0x2400a210
 8017554:	2400a23c 	.word	0x2400a23c
 8017558:	2400a224 	.word	0x2400a224

0801755c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801755c:	b580      	push	{r7, lr}
 801755e:	b084      	sub	sp, #16
 8017560:	af00      	add	r7, sp, #0
 8017562:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8017564:	687b      	ldr	r3, [r7, #4]
 8017566:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801756a:	2b00      	cmp	r3, #0
 801756c:	d108      	bne.n	8017580 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017572:	4618      	mov	r0, r3
 8017574:	f001 f88c 	bl	8018690 <vPortFree>
				vPortFree( pxTCB );
 8017578:	6878      	ldr	r0, [r7, #4]
 801757a:	f001 f889 	bl	8018690 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801757e:	e018      	b.n	80175b2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8017586:	2b01      	cmp	r3, #1
 8017588:	d103      	bne.n	8017592 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801758a:	6878      	ldr	r0, [r7, #4]
 801758c:	f001 f880 	bl	8018690 <vPortFree>
	}
 8017590:	e00f      	b.n	80175b2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8017592:	687b      	ldr	r3, [r7, #4]
 8017594:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8017598:	2b02      	cmp	r3, #2
 801759a:	d00a      	beq.n	80175b2 <prvDeleteTCB+0x56>
	__asm volatile
 801759c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175a0:	f383 8811 	msr	BASEPRI, r3
 80175a4:	f3bf 8f6f 	isb	sy
 80175a8:	f3bf 8f4f 	dsb	sy
 80175ac:	60fb      	str	r3, [r7, #12]
}
 80175ae:	bf00      	nop
 80175b0:	e7fe      	b.n	80175b0 <prvDeleteTCB+0x54>
	}
 80175b2:	bf00      	nop
 80175b4:	3710      	adds	r7, #16
 80175b6:	46bd      	mov	sp, r7
 80175b8:	bd80      	pop	{r7, pc}
	...

080175bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80175bc:	b480      	push	{r7}
 80175be:	b083      	sub	sp, #12
 80175c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80175c2:	4b0c      	ldr	r3, [pc, #48]	; (80175f4 <prvResetNextTaskUnblockTime+0x38>)
 80175c4:	681b      	ldr	r3, [r3, #0]
 80175c6:	681b      	ldr	r3, [r3, #0]
 80175c8:	2b00      	cmp	r3, #0
 80175ca:	d104      	bne.n	80175d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80175cc:	4b0a      	ldr	r3, [pc, #40]	; (80175f8 <prvResetNextTaskUnblockTime+0x3c>)
 80175ce:	f04f 32ff 	mov.w	r2, #4294967295
 80175d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80175d4:	e008      	b.n	80175e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80175d6:	4b07      	ldr	r3, [pc, #28]	; (80175f4 <prvResetNextTaskUnblockTime+0x38>)
 80175d8:	681b      	ldr	r3, [r3, #0]
 80175da:	68db      	ldr	r3, [r3, #12]
 80175dc:	68db      	ldr	r3, [r3, #12]
 80175de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80175e0:	687b      	ldr	r3, [r7, #4]
 80175e2:	685b      	ldr	r3, [r3, #4]
 80175e4:	4a04      	ldr	r2, [pc, #16]	; (80175f8 <prvResetNextTaskUnblockTime+0x3c>)
 80175e6:	6013      	str	r3, [r2, #0]
}
 80175e8:	bf00      	nop
 80175ea:	370c      	adds	r7, #12
 80175ec:	46bd      	mov	sp, r7
 80175ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175f2:	4770      	bx	lr
 80175f4:	2400a1f4 	.word	0x2400a1f4
 80175f8:	2400a25c 	.word	0x2400a25c

080175fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80175fc:	b480      	push	{r7}
 80175fe:	b083      	sub	sp, #12
 8017600:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8017602:	4b0b      	ldr	r3, [pc, #44]	; (8017630 <xTaskGetSchedulerState+0x34>)
 8017604:	681b      	ldr	r3, [r3, #0]
 8017606:	2b00      	cmp	r3, #0
 8017608:	d102      	bne.n	8017610 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801760a:	2301      	movs	r3, #1
 801760c:	607b      	str	r3, [r7, #4]
 801760e:	e008      	b.n	8017622 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017610:	4b08      	ldr	r3, [pc, #32]	; (8017634 <xTaskGetSchedulerState+0x38>)
 8017612:	681b      	ldr	r3, [r3, #0]
 8017614:	2b00      	cmp	r3, #0
 8017616:	d102      	bne.n	801761e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8017618:	2302      	movs	r3, #2
 801761a:	607b      	str	r3, [r7, #4]
 801761c:	e001      	b.n	8017622 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801761e:	2300      	movs	r3, #0
 8017620:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8017622:	687b      	ldr	r3, [r7, #4]
	}
 8017624:	4618      	mov	r0, r3
 8017626:	370c      	adds	r7, #12
 8017628:	46bd      	mov	sp, r7
 801762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801762e:	4770      	bx	lr
 8017630:	2400a248 	.word	0x2400a248
 8017634:	2400a264 	.word	0x2400a264

08017638 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8017638:	b580      	push	{r7, lr}
 801763a:	b084      	sub	sp, #16
 801763c:	af00      	add	r7, sp, #0
 801763e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8017644:	2300      	movs	r3, #0
 8017646:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8017648:	687b      	ldr	r3, [r7, #4]
 801764a:	2b00      	cmp	r3, #0
 801764c:	d051      	beq.n	80176f2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801764e:	68bb      	ldr	r3, [r7, #8]
 8017650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017652:	4b2a      	ldr	r3, [pc, #168]	; (80176fc <xTaskPriorityInherit+0xc4>)
 8017654:	681b      	ldr	r3, [r3, #0]
 8017656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017658:	429a      	cmp	r2, r3
 801765a:	d241      	bcs.n	80176e0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801765c:	68bb      	ldr	r3, [r7, #8]
 801765e:	699b      	ldr	r3, [r3, #24]
 8017660:	2b00      	cmp	r3, #0
 8017662:	db06      	blt.n	8017672 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017664:	4b25      	ldr	r3, [pc, #148]	; (80176fc <xTaskPriorityInherit+0xc4>)
 8017666:	681b      	ldr	r3, [r3, #0]
 8017668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801766a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801766e:	68bb      	ldr	r3, [r7, #8]
 8017670:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8017672:	68bb      	ldr	r3, [r7, #8]
 8017674:	6959      	ldr	r1, [r3, #20]
 8017676:	68bb      	ldr	r3, [r7, #8]
 8017678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801767a:	4613      	mov	r3, r2
 801767c:	009b      	lsls	r3, r3, #2
 801767e:	4413      	add	r3, r2
 8017680:	009b      	lsls	r3, r3, #2
 8017682:	4a1f      	ldr	r2, [pc, #124]	; (8017700 <xTaskPriorityInherit+0xc8>)
 8017684:	4413      	add	r3, r2
 8017686:	4299      	cmp	r1, r3
 8017688:	d122      	bne.n	80176d0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801768a:	68bb      	ldr	r3, [r7, #8]
 801768c:	3304      	adds	r3, #4
 801768e:	4618      	mov	r0, r3
 8017690:	f7fe fa64 	bl	8015b5c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8017694:	4b19      	ldr	r3, [pc, #100]	; (80176fc <xTaskPriorityInherit+0xc4>)
 8017696:	681b      	ldr	r3, [r3, #0]
 8017698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801769a:	68bb      	ldr	r3, [r7, #8]
 801769c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801769e:	68bb      	ldr	r3, [r7, #8]
 80176a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80176a2:	4b18      	ldr	r3, [pc, #96]	; (8017704 <xTaskPriorityInherit+0xcc>)
 80176a4:	681b      	ldr	r3, [r3, #0]
 80176a6:	429a      	cmp	r2, r3
 80176a8:	d903      	bls.n	80176b2 <xTaskPriorityInherit+0x7a>
 80176aa:	68bb      	ldr	r3, [r7, #8]
 80176ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80176ae:	4a15      	ldr	r2, [pc, #84]	; (8017704 <xTaskPriorityInherit+0xcc>)
 80176b0:	6013      	str	r3, [r2, #0]
 80176b2:	68bb      	ldr	r3, [r7, #8]
 80176b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80176b6:	4613      	mov	r3, r2
 80176b8:	009b      	lsls	r3, r3, #2
 80176ba:	4413      	add	r3, r2
 80176bc:	009b      	lsls	r3, r3, #2
 80176be:	4a10      	ldr	r2, [pc, #64]	; (8017700 <xTaskPriorityInherit+0xc8>)
 80176c0:	441a      	add	r2, r3
 80176c2:	68bb      	ldr	r3, [r7, #8]
 80176c4:	3304      	adds	r3, #4
 80176c6:	4619      	mov	r1, r3
 80176c8:	4610      	mov	r0, r2
 80176ca:	f7fe f9ea 	bl	8015aa2 <vListInsertEnd>
 80176ce:	e004      	b.n	80176da <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80176d0:	4b0a      	ldr	r3, [pc, #40]	; (80176fc <xTaskPriorityInherit+0xc4>)
 80176d2:	681b      	ldr	r3, [r3, #0]
 80176d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80176d6:	68bb      	ldr	r3, [r7, #8]
 80176d8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80176da:	2301      	movs	r3, #1
 80176dc:	60fb      	str	r3, [r7, #12]
 80176de:	e008      	b.n	80176f2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80176e0:	68bb      	ldr	r3, [r7, #8]
 80176e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80176e4:	4b05      	ldr	r3, [pc, #20]	; (80176fc <xTaskPriorityInherit+0xc4>)
 80176e6:	681b      	ldr	r3, [r3, #0]
 80176e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80176ea:	429a      	cmp	r2, r3
 80176ec:	d201      	bcs.n	80176f2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80176ee:	2301      	movs	r3, #1
 80176f0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80176f2:	68fb      	ldr	r3, [r7, #12]
	}
 80176f4:	4618      	mov	r0, r3
 80176f6:	3710      	adds	r7, #16
 80176f8:	46bd      	mov	sp, r7
 80176fa:	bd80      	pop	{r7, pc}
 80176fc:	24009d68 	.word	0x24009d68
 8017700:	24009d6c 	.word	0x24009d6c
 8017704:	2400a244 	.word	0x2400a244

08017708 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8017708:	b580      	push	{r7, lr}
 801770a:	b086      	sub	sp, #24
 801770c:	af00      	add	r7, sp, #0
 801770e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8017710:	687b      	ldr	r3, [r7, #4]
 8017712:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8017714:	2300      	movs	r3, #0
 8017716:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8017718:	687b      	ldr	r3, [r7, #4]
 801771a:	2b00      	cmp	r3, #0
 801771c:	d056      	beq.n	80177cc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801771e:	4b2e      	ldr	r3, [pc, #184]	; (80177d8 <xTaskPriorityDisinherit+0xd0>)
 8017720:	681b      	ldr	r3, [r3, #0]
 8017722:	693a      	ldr	r2, [r7, #16]
 8017724:	429a      	cmp	r2, r3
 8017726:	d00a      	beq.n	801773e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8017728:	f04f 0350 	mov.w	r3, #80	; 0x50
 801772c:	f383 8811 	msr	BASEPRI, r3
 8017730:	f3bf 8f6f 	isb	sy
 8017734:	f3bf 8f4f 	dsb	sy
 8017738:	60fb      	str	r3, [r7, #12]
}
 801773a:	bf00      	nop
 801773c:	e7fe      	b.n	801773c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801773e:	693b      	ldr	r3, [r7, #16]
 8017740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017742:	2b00      	cmp	r3, #0
 8017744:	d10a      	bne.n	801775c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8017746:	f04f 0350 	mov.w	r3, #80	; 0x50
 801774a:	f383 8811 	msr	BASEPRI, r3
 801774e:	f3bf 8f6f 	isb	sy
 8017752:	f3bf 8f4f 	dsb	sy
 8017756:	60bb      	str	r3, [r7, #8]
}
 8017758:	bf00      	nop
 801775a:	e7fe      	b.n	801775a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801775c:	693b      	ldr	r3, [r7, #16]
 801775e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017760:	1e5a      	subs	r2, r3, #1
 8017762:	693b      	ldr	r3, [r7, #16]
 8017764:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8017766:	693b      	ldr	r3, [r7, #16]
 8017768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801776a:	693b      	ldr	r3, [r7, #16]
 801776c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801776e:	429a      	cmp	r2, r3
 8017770:	d02c      	beq.n	80177cc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8017772:	693b      	ldr	r3, [r7, #16]
 8017774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017776:	2b00      	cmp	r3, #0
 8017778:	d128      	bne.n	80177cc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801777a:	693b      	ldr	r3, [r7, #16]
 801777c:	3304      	adds	r3, #4
 801777e:	4618      	mov	r0, r3
 8017780:	f7fe f9ec 	bl	8015b5c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8017784:	693b      	ldr	r3, [r7, #16]
 8017786:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017788:	693b      	ldr	r3, [r7, #16]
 801778a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801778c:	693b      	ldr	r3, [r7, #16]
 801778e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017790:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017794:	693b      	ldr	r3, [r7, #16]
 8017796:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8017798:	693b      	ldr	r3, [r7, #16]
 801779a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801779c:	4b0f      	ldr	r3, [pc, #60]	; (80177dc <xTaskPriorityDisinherit+0xd4>)
 801779e:	681b      	ldr	r3, [r3, #0]
 80177a0:	429a      	cmp	r2, r3
 80177a2:	d903      	bls.n	80177ac <xTaskPriorityDisinherit+0xa4>
 80177a4:	693b      	ldr	r3, [r7, #16]
 80177a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80177a8:	4a0c      	ldr	r2, [pc, #48]	; (80177dc <xTaskPriorityDisinherit+0xd4>)
 80177aa:	6013      	str	r3, [r2, #0]
 80177ac:	693b      	ldr	r3, [r7, #16]
 80177ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80177b0:	4613      	mov	r3, r2
 80177b2:	009b      	lsls	r3, r3, #2
 80177b4:	4413      	add	r3, r2
 80177b6:	009b      	lsls	r3, r3, #2
 80177b8:	4a09      	ldr	r2, [pc, #36]	; (80177e0 <xTaskPriorityDisinherit+0xd8>)
 80177ba:	441a      	add	r2, r3
 80177bc:	693b      	ldr	r3, [r7, #16]
 80177be:	3304      	adds	r3, #4
 80177c0:	4619      	mov	r1, r3
 80177c2:	4610      	mov	r0, r2
 80177c4:	f7fe f96d 	bl	8015aa2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80177c8:	2301      	movs	r3, #1
 80177ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80177cc:	697b      	ldr	r3, [r7, #20]
	}
 80177ce:	4618      	mov	r0, r3
 80177d0:	3718      	adds	r7, #24
 80177d2:	46bd      	mov	sp, r7
 80177d4:	bd80      	pop	{r7, pc}
 80177d6:	bf00      	nop
 80177d8:	24009d68 	.word	0x24009d68
 80177dc:	2400a244 	.word	0x2400a244
 80177e0:	24009d6c 	.word	0x24009d6c

080177e4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80177e4:	b580      	push	{r7, lr}
 80177e6:	b088      	sub	sp, #32
 80177e8:	af00      	add	r7, sp, #0
 80177ea:	6078      	str	r0, [r7, #4]
 80177ec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80177f2:	2301      	movs	r3, #1
 80177f4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80177f6:	687b      	ldr	r3, [r7, #4]
 80177f8:	2b00      	cmp	r3, #0
 80177fa:	d06a      	beq.n	80178d2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80177fc:	69bb      	ldr	r3, [r7, #24]
 80177fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017800:	2b00      	cmp	r3, #0
 8017802:	d10a      	bne.n	801781a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8017804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017808:	f383 8811 	msr	BASEPRI, r3
 801780c:	f3bf 8f6f 	isb	sy
 8017810:	f3bf 8f4f 	dsb	sy
 8017814:	60fb      	str	r3, [r7, #12]
}
 8017816:	bf00      	nop
 8017818:	e7fe      	b.n	8017818 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801781a:	69bb      	ldr	r3, [r7, #24]
 801781c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801781e:	683a      	ldr	r2, [r7, #0]
 8017820:	429a      	cmp	r2, r3
 8017822:	d902      	bls.n	801782a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8017824:	683b      	ldr	r3, [r7, #0]
 8017826:	61fb      	str	r3, [r7, #28]
 8017828:	e002      	b.n	8017830 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801782a:	69bb      	ldr	r3, [r7, #24]
 801782c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801782e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8017830:	69bb      	ldr	r3, [r7, #24]
 8017832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017834:	69fa      	ldr	r2, [r7, #28]
 8017836:	429a      	cmp	r2, r3
 8017838:	d04b      	beq.n	80178d2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801783a:	69bb      	ldr	r3, [r7, #24]
 801783c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801783e:	697a      	ldr	r2, [r7, #20]
 8017840:	429a      	cmp	r2, r3
 8017842:	d146      	bne.n	80178d2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8017844:	4b25      	ldr	r3, [pc, #148]	; (80178dc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8017846:	681b      	ldr	r3, [r3, #0]
 8017848:	69ba      	ldr	r2, [r7, #24]
 801784a:	429a      	cmp	r2, r3
 801784c:	d10a      	bne.n	8017864 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801784e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017852:	f383 8811 	msr	BASEPRI, r3
 8017856:	f3bf 8f6f 	isb	sy
 801785a:	f3bf 8f4f 	dsb	sy
 801785e:	60bb      	str	r3, [r7, #8]
}
 8017860:	bf00      	nop
 8017862:	e7fe      	b.n	8017862 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8017864:	69bb      	ldr	r3, [r7, #24]
 8017866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017868:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801786a:	69bb      	ldr	r3, [r7, #24]
 801786c:	69fa      	ldr	r2, [r7, #28]
 801786e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8017870:	69bb      	ldr	r3, [r7, #24]
 8017872:	699b      	ldr	r3, [r3, #24]
 8017874:	2b00      	cmp	r3, #0
 8017876:	db04      	blt.n	8017882 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017878:	69fb      	ldr	r3, [r7, #28]
 801787a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801787e:	69bb      	ldr	r3, [r7, #24]
 8017880:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8017882:	69bb      	ldr	r3, [r7, #24]
 8017884:	6959      	ldr	r1, [r3, #20]
 8017886:	693a      	ldr	r2, [r7, #16]
 8017888:	4613      	mov	r3, r2
 801788a:	009b      	lsls	r3, r3, #2
 801788c:	4413      	add	r3, r2
 801788e:	009b      	lsls	r3, r3, #2
 8017890:	4a13      	ldr	r2, [pc, #76]	; (80178e0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8017892:	4413      	add	r3, r2
 8017894:	4299      	cmp	r1, r3
 8017896:	d11c      	bne.n	80178d2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017898:	69bb      	ldr	r3, [r7, #24]
 801789a:	3304      	adds	r3, #4
 801789c:	4618      	mov	r0, r3
 801789e:	f7fe f95d 	bl	8015b5c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80178a2:	69bb      	ldr	r3, [r7, #24]
 80178a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80178a6:	4b0f      	ldr	r3, [pc, #60]	; (80178e4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80178a8:	681b      	ldr	r3, [r3, #0]
 80178aa:	429a      	cmp	r2, r3
 80178ac:	d903      	bls.n	80178b6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80178ae:	69bb      	ldr	r3, [r7, #24]
 80178b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80178b2:	4a0c      	ldr	r2, [pc, #48]	; (80178e4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80178b4:	6013      	str	r3, [r2, #0]
 80178b6:	69bb      	ldr	r3, [r7, #24]
 80178b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80178ba:	4613      	mov	r3, r2
 80178bc:	009b      	lsls	r3, r3, #2
 80178be:	4413      	add	r3, r2
 80178c0:	009b      	lsls	r3, r3, #2
 80178c2:	4a07      	ldr	r2, [pc, #28]	; (80178e0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80178c4:	441a      	add	r2, r3
 80178c6:	69bb      	ldr	r3, [r7, #24]
 80178c8:	3304      	adds	r3, #4
 80178ca:	4619      	mov	r1, r3
 80178cc:	4610      	mov	r0, r2
 80178ce:	f7fe f8e8 	bl	8015aa2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80178d2:	bf00      	nop
 80178d4:	3720      	adds	r7, #32
 80178d6:	46bd      	mov	sp, r7
 80178d8:	bd80      	pop	{r7, pc}
 80178da:	bf00      	nop
 80178dc:	24009d68 	.word	0x24009d68
 80178e0:	24009d6c 	.word	0x24009d6c
 80178e4:	2400a244 	.word	0x2400a244

080178e8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80178e8:	b480      	push	{r7}
 80178ea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80178ec:	4b07      	ldr	r3, [pc, #28]	; (801790c <pvTaskIncrementMutexHeldCount+0x24>)
 80178ee:	681b      	ldr	r3, [r3, #0]
 80178f0:	2b00      	cmp	r3, #0
 80178f2:	d004      	beq.n	80178fe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80178f4:	4b05      	ldr	r3, [pc, #20]	; (801790c <pvTaskIncrementMutexHeldCount+0x24>)
 80178f6:	681b      	ldr	r3, [r3, #0]
 80178f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80178fa:	3201      	adds	r2, #1
 80178fc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80178fe:	4b03      	ldr	r3, [pc, #12]	; (801790c <pvTaskIncrementMutexHeldCount+0x24>)
 8017900:	681b      	ldr	r3, [r3, #0]
	}
 8017902:	4618      	mov	r0, r3
 8017904:	46bd      	mov	sp, r7
 8017906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801790a:	4770      	bx	lr
 801790c:	24009d68 	.word	0x24009d68

08017910 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8017910:	b580      	push	{r7, lr}
 8017912:	b084      	sub	sp, #16
 8017914:	af00      	add	r7, sp, #0
 8017916:	6078      	str	r0, [r7, #4]
 8017918:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801791a:	4b21      	ldr	r3, [pc, #132]	; (80179a0 <prvAddCurrentTaskToDelayedList+0x90>)
 801791c:	681b      	ldr	r3, [r3, #0]
 801791e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017920:	4b20      	ldr	r3, [pc, #128]	; (80179a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8017922:	681b      	ldr	r3, [r3, #0]
 8017924:	3304      	adds	r3, #4
 8017926:	4618      	mov	r0, r3
 8017928:	f7fe f918 	bl	8015b5c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017932:	d10a      	bne.n	801794a <prvAddCurrentTaskToDelayedList+0x3a>
 8017934:	683b      	ldr	r3, [r7, #0]
 8017936:	2b00      	cmp	r3, #0
 8017938:	d007      	beq.n	801794a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801793a:	4b1a      	ldr	r3, [pc, #104]	; (80179a4 <prvAddCurrentTaskToDelayedList+0x94>)
 801793c:	681b      	ldr	r3, [r3, #0]
 801793e:	3304      	adds	r3, #4
 8017940:	4619      	mov	r1, r3
 8017942:	4819      	ldr	r0, [pc, #100]	; (80179a8 <prvAddCurrentTaskToDelayedList+0x98>)
 8017944:	f7fe f8ad 	bl	8015aa2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8017948:	e026      	b.n	8017998 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801794a:	68fa      	ldr	r2, [r7, #12]
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	4413      	add	r3, r2
 8017950:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8017952:	4b14      	ldr	r3, [pc, #80]	; (80179a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8017954:	681b      	ldr	r3, [r3, #0]
 8017956:	68ba      	ldr	r2, [r7, #8]
 8017958:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801795a:	68ba      	ldr	r2, [r7, #8]
 801795c:	68fb      	ldr	r3, [r7, #12]
 801795e:	429a      	cmp	r2, r3
 8017960:	d209      	bcs.n	8017976 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017962:	4b12      	ldr	r3, [pc, #72]	; (80179ac <prvAddCurrentTaskToDelayedList+0x9c>)
 8017964:	681a      	ldr	r2, [r3, #0]
 8017966:	4b0f      	ldr	r3, [pc, #60]	; (80179a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8017968:	681b      	ldr	r3, [r3, #0]
 801796a:	3304      	adds	r3, #4
 801796c:	4619      	mov	r1, r3
 801796e:	4610      	mov	r0, r2
 8017970:	f7fe f8bb 	bl	8015aea <vListInsert>
}
 8017974:	e010      	b.n	8017998 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017976:	4b0e      	ldr	r3, [pc, #56]	; (80179b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8017978:	681a      	ldr	r2, [r3, #0]
 801797a:	4b0a      	ldr	r3, [pc, #40]	; (80179a4 <prvAddCurrentTaskToDelayedList+0x94>)
 801797c:	681b      	ldr	r3, [r3, #0]
 801797e:	3304      	adds	r3, #4
 8017980:	4619      	mov	r1, r3
 8017982:	4610      	mov	r0, r2
 8017984:	f7fe f8b1 	bl	8015aea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8017988:	4b0a      	ldr	r3, [pc, #40]	; (80179b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 801798a:	681b      	ldr	r3, [r3, #0]
 801798c:	68ba      	ldr	r2, [r7, #8]
 801798e:	429a      	cmp	r2, r3
 8017990:	d202      	bcs.n	8017998 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8017992:	4a08      	ldr	r2, [pc, #32]	; (80179b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8017994:	68bb      	ldr	r3, [r7, #8]
 8017996:	6013      	str	r3, [r2, #0]
}
 8017998:	bf00      	nop
 801799a:	3710      	adds	r7, #16
 801799c:	46bd      	mov	sp, r7
 801799e:	bd80      	pop	{r7, pc}
 80179a0:	2400a240 	.word	0x2400a240
 80179a4:	24009d68 	.word	0x24009d68
 80179a8:	2400a228 	.word	0x2400a228
 80179ac:	2400a1f8 	.word	0x2400a1f8
 80179b0:	2400a1f4 	.word	0x2400a1f4
 80179b4:	2400a25c 	.word	0x2400a25c

080179b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80179b8:	b580      	push	{r7, lr}
 80179ba:	b08a      	sub	sp, #40	; 0x28
 80179bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80179be:	2300      	movs	r3, #0
 80179c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80179c2:	f000 fb07 	bl	8017fd4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80179c6:	4b1c      	ldr	r3, [pc, #112]	; (8017a38 <xTimerCreateTimerTask+0x80>)
 80179c8:	681b      	ldr	r3, [r3, #0]
 80179ca:	2b00      	cmp	r3, #0
 80179cc:	d021      	beq.n	8017a12 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80179ce:	2300      	movs	r3, #0
 80179d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80179d2:	2300      	movs	r3, #0
 80179d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80179d6:	1d3a      	adds	r2, r7, #4
 80179d8:	f107 0108 	add.w	r1, r7, #8
 80179dc:	f107 030c 	add.w	r3, r7, #12
 80179e0:	4618      	mov	r0, r3
 80179e2:	f7fe f817 	bl	8015a14 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80179e6:	6879      	ldr	r1, [r7, #4]
 80179e8:	68bb      	ldr	r3, [r7, #8]
 80179ea:	68fa      	ldr	r2, [r7, #12]
 80179ec:	9202      	str	r2, [sp, #8]
 80179ee:	9301      	str	r3, [sp, #4]
 80179f0:	2302      	movs	r3, #2
 80179f2:	9300      	str	r3, [sp, #0]
 80179f4:	2300      	movs	r3, #0
 80179f6:	460a      	mov	r2, r1
 80179f8:	4910      	ldr	r1, [pc, #64]	; (8017a3c <xTimerCreateTimerTask+0x84>)
 80179fa:	4811      	ldr	r0, [pc, #68]	; (8017a40 <xTimerCreateTimerTask+0x88>)
 80179fc:	f7ff f828 	bl	8016a50 <xTaskCreateStatic>
 8017a00:	4603      	mov	r3, r0
 8017a02:	4a10      	ldr	r2, [pc, #64]	; (8017a44 <xTimerCreateTimerTask+0x8c>)
 8017a04:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8017a06:	4b0f      	ldr	r3, [pc, #60]	; (8017a44 <xTimerCreateTimerTask+0x8c>)
 8017a08:	681b      	ldr	r3, [r3, #0]
 8017a0a:	2b00      	cmp	r3, #0
 8017a0c:	d001      	beq.n	8017a12 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8017a0e:	2301      	movs	r3, #1
 8017a10:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8017a12:	697b      	ldr	r3, [r7, #20]
 8017a14:	2b00      	cmp	r3, #0
 8017a16:	d10a      	bne.n	8017a2e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8017a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a1c:	f383 8811 	msr	BASEPRI, r3
 8017a20:	f3bf 8f6f 	isb	sy
 8017a24:	f3bf 8f4f 	dsb	sy
 8017a28:	613b      	str	r3, [r7, #16]
}
 8017a2a:	bf00      	nop
 8017a2c:	e7fe      	b.n	8017a2c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8017a2e:	697b      	ldr	r3, [r7, #20]
}
 8017a30:	4618      	mov	r0, r3
 8017a32:	3718      	adds	r7, #24
 8017a34:	46bd      	mov	sp, r7
 8017a36:	bd80      	pop	{r7, pc}
 8017a38:	2400a298 	.word	0x2400a298
 8017a3c:	0801bf84 	.word	0x0801bf84
 8017a40:	08017b7d 	.word	0x08017b7d
 8017a44:	2400a29c 	.word	0x2400a29c

08017a48 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8017a48:	b580      	push	{r7, lr}
 8017a4a:	b08a      	sub	sp, #40	; 0x28
 8017a4c:	af00      	add	r7, sp, #0
 8017a4e:	60f8      	str	r0, [r7, #12]
 8017a50:	60b9      	str	r1, [r7, #8]
 8017a52:	607a      	str	r2, [r7, #4]
 8017a54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8017a56:	2300      	movs	r3, #0
 8017a58:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8017a5a:	68fb      	ldr	r3, [r7, #12]
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	d10a      	bne.n	8017a76 <xTimerGenericCommand+0x2e>
	__asm volatile
 8017a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a64:	f383 8811 	msr	BASEPRI, r3
 8017a68:	f3bf 8f6f 	isb	sy
 8017a6c:	f3bf 8f4f 	dsb	sy
 8017a70:	623b      	str	r3, [r7, #32]
}
 8017a72:	bf00      	nop
 8017a74:	e7fe      	b.n	8017a74 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8017a76:	4b1a      	ldr	r3, [pc, #104]	; (8017ae0 <xTimerGenericCommand+0x98>)
 8017a78:	681b      	ldr	r3, [r3, #0]
 8017a7a:	2b00      	cmp	r3, #0
 8017a7c:	d02a      	beq.n	8017ad4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8017a7e:	68bb      	ldr	r3, [r7, #8]
 8017a80:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8017a82:	687b      	ldr	r3, [r7, #4]
 8017a84:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8017a86:	68fb      	ldr	r3, [r7, #12]
 8017a88:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8017a8a:	68bb      	ldr	r3, [r7, #8]
 8017a8c:	2b05      	cmp	r3, #5
 8017a8e:	dc18      	bgt.n	8017ac2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8017a90:	f7ff fdb4 	bl	80175fc <xTaskGetSchedulerState>
 8017a94:	4603      	mov	r3, r0
 8017a96:	2b02      	cmp	r3, #2
 8017a98:	d109      	bne.n	8017aae <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8017a9a:	4b11      	ldr	r3, [pc, #68]	; (8017ae0 <xTimerGenericCommand+0x98>)
 8017a9c:	6818      	ldr	r0, [r3, #0]
 8017a9e:	f107 0110 	add.w	r1, r7, #16
 8017aa2:	2300      	movs	r3, #0
 8017aa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017aa6:	f7fe fa1d 	bl	8015ee4 <xQueueGenericSend>
 8017aaa:	6278      	str	r0, [r7, #36]	; 0x24
 8017aac:	e012      	b.n	8017ad4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8017aae:	4b0c      	ldr	r3, [pc, #48]	; (8017ae0 <xTimerGenericCommand+0x98>)
 8017ab0:	6818      	ldr	r0, [r3, #0]
 8017ab2:	f107 0110 	add.w	r1, r7, #16
 8017ab6:	2300      	movs	r3, #0
 8017ab8:	2200      	movs	r2, #0
 8017aba:	f7fe fa13 	bl	8015ee4 <xQueueGenericSend>
 8017abe:	6278      	str	r0, [r7, #36]	; 0x24
 8017ac0:	e008      	b.n	8017ad4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8017ac2:	4b07      	ldr	r3, [pc, #28]	; (8017ae0 <xTimerGenericCommand+0x98>)
 8017ac4:	6818      	ldr	r0, [r3, #0]
 8017ac6:	f107 0110 	add.w	r1, r7, #16
 8017aca:	2300      	movs	r3, #0
 8017acc:	683a      	ldr	r2, [r7, #0]
 8017ace:	f7fe faef 	bl	80160b0 <xQueueGenericSendFromISR>
 8017ad2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8017ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8017ad6:	4618      	mov	r0, r3
 8017ad8:	3728      	adds	r7, #40	; 0x28
 8017ada:	46bd      	mov	sp, r7
 8017adc:	bd80      	pop	{r7, pc}
 8017ade:	bf00      	nop
 8017ae0:	2400a298 	.word	0x2400a298

08017ae4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8017ae4:	b580      	push	{r7, lr}
 8017ae6:	b088      	sub	sp, #32
 8017ae8:	af02      	add	r7, sp, #8
 8017aea:	6078      	str	r0, [r7, #4]
 8017aec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017aee:	4b22      	ldr	r3, [pc, #136]	; (8017b78 <prvProcessExpiredTimer+0x94>)
 8017af0:	681b      	ldr	r3, [r3, #0]
 8017af2:	68db      	ldr	r3, [r3, #12]
 8017af4:	68db      	ldr	r3, [r3, #12]
 8017af6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017af8:	697b      	ldr	r3, [r7, #20]
 8017afa:	3304      	adds	r3, #4
 8017afc:	4618      	mov	r0, r3
 8017afe:	f7fe f82d 	bl	8015b5c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017b02:	697b      	ldr	r3, [r7, #20]
 8017b04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017b08:	f003 0304 	and.w	r3, r3, #4
 8017b0c:	2b00      	cmp	r3, #0
 8017b0e:	d022      	beq.n	8017b56 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8017b10:	697b      	ldr	r3, [r7, #20]
 8017b12:	699a      	ldr	r2, [r3, #24]
 8017b14:	687b      	ldr	r3, [r7, #4]
 8017b16:	18d1      	adds	r1, r2, r3
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	683a      	ldr	r2, [r7, #0]
 8017b1c:	6978      	ldr	r0, [r7, #20]
 8017b1e:	f000 f8d1 	bl	8017cc4 <prvInsertTimerInActiveList>
 8017b22:	4603      	mov	r3, r0
 8017b24:	2b00      	cmp	r3, #0
 8017b26:	d01f      	beq.n	8017b68 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017b28:	2300      	movs	r3, #0
 8017b2a:	9300      	str	r3, [sp, #0]
 8017b2c:	2300      	movs	r3, #0
 8017b2e:	687a      	ldr	r2, [r7, #4]
 8017b30:	2100      	movs	r1, #0
 8017b32:	6978      	ldr	r0, [r7, #20]
 8017b34:	f7ff ff88 	bl	8017a48 <xTimerGenericCommand>
 8017b38:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8017b3a:	693b      	ldr	r3, [r7, #16]
 8017b3c:	2b00      	cmp	r3, #0
 8017b3e:	d113      	bne.n	8017b68 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8017b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b44:	f383 8811 	msr	BASEPRI, r3
 8017b48:	f3bf 8f6f 	isb	sy
 8017b4c:	f3bf 8f4f 	dsb	sy
 8017b50:	60fb      	str	r3, [r7, #12]
}
 8017b52:	bf00      	nop
 8017b54:	e7fe      	b.n	8017b54 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017b56:	697b      	ldr	r3, [r7, #20]
 8017b58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017b5c:	f023 0301 	bic.w	r3, r3, #1
 8017b60:	b2da      	uxtb	r2, r3
 8017b62:	697b      	ldr	r3, [r7, #20]
 8017b64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017b68:	697b      	ldr	r3, [r7, #20]
 8017b6a:	6a1b      	ldr	r3, [r3, #32]
 8017b6c:	6978      	ldr	r0, [r7, #20]
 8017b6e:	4798      	blx	r3
}
 8017b70:	bf00      	nop
 8017b72:	3718      	adds	r7, #24
 8017b74:	46bd      	mov	sp, r7
 8017b76:	bd80      	pop	{r7, pc}
 8017b78:	2400a290 	.word	0x2400a290

08017b7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8017b7c:	b580      	push	{r7, lr}
 8017b7e:	b084      	sub	sp, #16
 8017b80:	af00      	add	r7, sp, #0
 8017b82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8017b84:	f107 0308 	add.w	r3, r7, #8
 8017b88:	4618      	mov	r0, r3
 8017b8a:	f000 f857 	bl	8017c3c <prvGetNextExpireTime>
 8017b8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8017b90:	68bb      	ldr	r3, [r7, #8]
 8017b92:	4619      	mov	r1, r3
 8017b94:	68f8      	ldr	r0, [r7, #12]
 8017b96:	f000 f803 	bl	8017ba0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8017b9a:	f000 f8d5 	bl	8017d48 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8017b9e:	e7f1      	b.n	8017b84 <prvTimerTask+0x8>

08017ba0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8017ba0:	b580      	push	{r7, lr}
 8017ba2:	b084      	sub	sp, #16
 8017ba4:	af00      	add	r7, sp, #0
 8017ba6:	6078      	str	r0, [r7, #4]
 8017ba8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8017baa:	f7ff f97d 	bl	8016ea8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8017bae:	f107 0308 	add.w	r3, r7, #8
 8017bb2:	4618      	mov	r0, r3
 8017bb4:	f000 f866 	bl	8017c84 <prvSampleTimeNow>
 8017bb8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8017bba:	68bb      	ldr	r3, [r7, #8]
 8017bbc:	2b00      	cmp	r3, #0
 8017bbe:	d130      	bne.n	8017c22 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8017bc0:	683b      	ldr	r3, [r7, #0]
 8017bc2:	2b00      	cmp	r3, #0
 8017bc4:	d10a      	bne.n	8017bdc <prvProcessTimerOrBlockTask+0x3c>
 8017bc6:	687a      	ldr	r2, [r7, #4]
 8017bc8:	68fb      	ldr	r3, [r7, #12]
 8017bca:	429a      	cmp	r2, r3
 8017bcc:	d806      	bhi.n	8017bdc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8017bce:	f7ff f979 	bl	8016ec4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8017bd2:	68f9      	ldr	r1, [r7, #12]
 8017bd4:	6878      	ldr	r0, [r7, #4]
 8017bd6:	f7ff ff85 	bl	8017ae4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8017bda:	e024      	b.n	8017c26 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8017bdc:	683b      	ldr	r3, [r7, #0]
 8017bde:	2b00      	cmp	r3, #0
 8017be0:	d008      	beq.n	8017bf4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8017be2:	4b13      	ldr	r3, [pc, #76]	; (8017c30 <prvProcessTimerOrBlockTask+0x90>)
 8017be4:	681b      	ldr	r3, [r3, #0]
 8017be6:	681b      	ldr	r3, [r3, #0]
 8017be8:	2b00      	cmp	r3, #0
 8017bea:	d101      	bne.n	8017bf0 <prvProcessTimerOrBlockTask+0x50>
 8017bec:	2301      	movs	r3, #1
 8017bee:	e000      	b.n	8017bf2 <prvProcessTimerOrBlockTask+0x52>
 8017bf0:	2300      	movs	r3, #0
 8017bf2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8017bf4:	4b0f      	ldr	r3, [pc, #60]	; (8017c34 <prvProcessTimerOrBlockTask+0x94>)
 8017bf6:	6818      	ldr	r0, [r3, #0]
 8017bf8:	687a      	ldr	r2, [r7, #4]
 8017bfa:	68fb      	ldr	r3, [r7, #12]
 8017bfc:	1ad3      	subs	r3, r2, r3
 8017bfe:	683a      	ldr	r2, [r7, #0]
 8017c00:	4619      	mov	r1, r3
 8017c02:	f7fe fef1 	bl	80169e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8017c06:	f7ff f95d 	bl	8016ec4 <xTaskResumeAll>
 8017c0a:	4603      	mov	r3, r0
 8017c0c:	2b00      	cmp	r3, #0
 8017c0e:	d10a      	bne.n	8017c26 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8017c10:	4b09      	ldr	r3, [pc, #36]	; (8017c38 <prvProcessTimerOrBlockTask+0x98>)
 8017c12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017c16:	601a      	str	r2, [r3, #0]
 8017c18:	f3bf 8f4f 	dsb	sy
 8017c1c:	f3bf 8f6f 	isb	sy
}
 8017c20:	e001      	b.n	8017c26 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8017c22:	f7ff f94f 	bl	8016ec4 <xTaskResumeAll>
}
 8017c26:	bf00      	nop
 8017c28:	3710      	adds	r7, #16
 8017c2a:	46bd      	mov	sp, r7
 8017c2c:	bd80      	pop	{r7, pc}
 8017c2e:	bf00      	nop
 8017c30:	2400a294 	.word	0x2400a294
 8017c34:	2400a298 	.word	0x2400a298
 8017c38:	e000ed04 	.word	0xe000ed04

08017c3c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8017c3c:	b480      	push	{r7}
 8017c3e:	b085      	sub	sp, #20
 8017c40:	af00      	add	r7, sp, #0
 8017c42:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8017c44:	4b0e      	ldr	r3, [pc, #56]	; (8017c80 <prvGetNextExpireTime+0x44>)
 8017c46:	681b      	ldr	r3, [r3, #0]
 8017c48:	681b      	ldr	r3, [r3, #0]
 8017c4a:	2b00      	cmp	r3, #0
 8017c4c:	d101      	bne.n	8017c52 <prvGetNextExpireTime+0x16>
 8017c4e:	2201      	movs	r2, #1
 8017c50:	e000      	b.n	8017c54 <prvGetNextExpireTime+0x18>
 8017c52:	2200      	movs	r2, #0
 8017c54:	687b      	ldr	r3, [r7, #4]
 8017c56:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	681b      	ldr	r3, [r3, #0]
 8017c5c:	2b00      	cmp	r3, #0
 8017c5e:	d105      	bne.n	8017c6c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017c60:	4b07      	ldr	r3, [pc, #28]	; (8017c80 <prvGetNextExpireTime+0x44>)
 8017c62:	681b      	ldr	r3, [r3, #0]
 8017c64:	68db      	ldr	r3, [r3, #12]
 8017c66:	681b      	ldr	r3, [r3, #0]
 8017c68:	60fb      	str	r3, [r7, #12]
 8017c6a:	e001      	b.n	8017c70 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8017c6c:	2300      	movs	r3, #0
 8017c6e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8017c70:	68fb      	ldr	r3, [r7, #12]
}
 8017c72:	4618      	mov	r0, r3
 8017c74:	3714      	adds	r7, #20
 8017c76:	46bd      	mov	sp, r7
 8017c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c7c:	4770      	bx	lr
 8017c7e:	bf00      	nop
 8017c80:	2400a290 	.word	0x2400a290

08017c84 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8017c84:	b580      	push	{r7, lr}
 8017c86:	b084      	sub	sp, #16
 8017c88:	af00      	add	r7, sp, #0
 8017c8a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8017c8c:	f7ff f9aa 	bl	8016fe4 <xTaskGetTickCount>
 8017c90:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8017c92:	4b0b      	ldr	r3, [pc, #44]	; (8017cc0 <prvSampleTimeNow+0x3c>)
 8017c94:	681b      	ldr	r3, [r3, #0]
 8017c96:	68fa      	ldr	r2, [r7, #12]
 8017c98:	429a      	cmp	r2, r3
 8017c9a:	d205      	bcs.n	8017ca8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8017c9c:	f000 f936 	bl	8017f0c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8017ca0:	687b      	ldr	r3, [r7, #4]
 8017ca2:	2201      	movs	r2, #1
 8017ca4:	601a      	str	r2, [r3, #0]
 8017ca6:	e002      	b.n	8017cae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8017ca8:	687b      	ldr	r3, [r7, #4]
 8017caa:	2200      	movs	r2, #0
 8017cac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8017cae:	4a04      	ldr	r2, [pc, #16]	; (8017cc0 <prvSampleTimeNow+0x3c>)
 8017cb0:	68fb      	ldr	r3, [r7, #12]
 8017cb2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8017cb4:	68fb      	ldr	r3, [r7, #12]
}
 8017cb6:	4618      	mov	r0, r3
 8017cb8:	3710      	adds	r7, #16
 8017cba:	46bd      	mov	sp, r7
 8017cbc:	bd80      	pop	{r7, pc}
 8017cbe:	bf00      	nop
 8017cc0:	2400a2a0 	.word	0x2400a2a0

08017cc4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8017cc4:	b580      	push	{r7, lr}
 8017cc6:	b086      	sub	sp, #24
 8017cc8:	af00      	add	r7, sp, #0
 8017cca:	60f8      	str	r0, [r7, #12]
 8017ccc:	60b9      	str	r1, [r7, #8]
 8017cce:	607a      	str	r2, [r7, #4]
 8017cd0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8017cd2:	2300      	movs	r3, #0
 8017cd4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8017cd6:	68fb      	ldr	r3, [r7, #12]
 8017cd8:	68ba      	ldr	r2, [r7, #8]
 8017cda:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8017cdc:	68fb      	ldr	r3, [r7, #12]
 8017cde:	68fa      	ldr	r2, [r7, #12]
 8017ce0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8017ce2:	68ba      	ldr	r2, [r7, #8]
 8017ce4:	687b      	ldr	r3, [r7, #4]
 8017ce6:	429a      	cmp	r2, r3
 8017ce8:	d812      	bhi.n	8017d10 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017cea:	687a      	ldr	r2, [r7, #4]
 8017cec:	683b      	ldr	r3, [r7, #0]
 8017cee:	1ad2      	subs	r2, r2, r3
 8017cf0:	68fb      	ldr	r3, [r7, #12]
 8017cf2:	699b      	ldr	r3, [r3, #24]
 8017cf4:	429a      	cmp	r2, r3
 8017cf6:	d302      	bcc.n	8017cfe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8017cf8:	2301      	movs	r3, #1
 8017cfa:	617b      	str	r3, [r7, #20]
 8017cfc:	e01b      	b.n	8017d36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8017cfe:	4b10      	ldr	r3, [pc, #64]	; (8017d40 <prvInsertTimerInActiveList+0x7c>)
 8017d00:	681a      	ldr	r2, [r3, #0]
 8017d02:	68fb      	ldr	r3, [r7, #12]
 8017d04:	3304      	adds	r3, #4
 8017d06:	4619      	mov	r1, r3
 8017d08:	4610      	mov	r0, r2
 8017d0a:	f7fd feee 	bl	8015aea <vListInsert>
 8017d0e:	e012      	b.n	8017d36 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8017d10:	687a      	ldr	r2, [r7, #4]
 8017d12:	683b      	ldr	r3, [r7, #0]
 8017d14:	429a      	cmp	r2, r3
 8017d16:	d206      	bcs.n	8017d26 <prvInsertTimerInActiveList+0x62>
 8017d18:	68ba      	ldr	r2, [r7, #8]
 8017d1a:	683b      	ldr	r3, [r7, #0]
 8017d1c:	429a      	cmp	r2, r3
 8017d1e:	d302      	bcc.n	8017d26 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8017d20:	2301      	movs	r3, #1
 8017d22:	617b      	str	r3, [r7, #20]
 8017d24:	e007      	b.n	8017d36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8017d26:	4b07      	ldr	r3, [pc, #28]	; (8017d44 <prvInsertTimerInActiveList+0x80>)
 8017d28:	681a      	ldr	r2, [r3, #0]
 8017d2a:	68fb      	ldr	r3, [r7, #12]
 8017d2c:	3304      	adds	r3, #4
 8017d2e:	4619      	mov	r1, r3
 8017d30:	4610      	mov	r0, r2
 8017d32:	f7fd feda 	bl	8015aea <vListInsert>
		}
	}

	return xProcessTimerNow;
 8017d36:	697b      	ldr	r3, [r7, #20]
}
 8017d38:	4618      	mov	r0, r3
 8017d3a:	3718      	adds	r7, #24
 8017d3c:	46bd      	mov	sp, r7
 8017d3e:	bd80      	pop	{r7, pc}
 8017d40:	2400a294 	.word	0x2400a294
 8017d44:	2400a290 	.word	0x2400a290

08017d48 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8017d48:	b580      	push	{r7, lr}
 8017d4a:	b08e      	sub	sp, #56	; 0x38
 8017d4c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8017d4e:	e0ca      	b.n	8017ee6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8017d50:	687b      	ldr	r3, [r7, #4]
 8017d52:	2b00      	cmp	r3, #0
 8017d54:	da18      	bge.n	8017d88 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8017d56:	1d3b      	adds	r3, r7, #4
 8017d58:	3304      	adds	r3, #4
 8017d5a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8017d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d5e:	2b00      	cmp	r3, #0
 8017d60:	d10a      	bne.n	8017d78 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8017d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d66:	f383 8811 	msr	BASEPRI, r3
 8017d6a:	f3bf 8f6f 	isb	sy
 8017d6e:	f3bf 8f4f 	dsb	sy
 8017d72:	61fb      	str	r3, [r7, #28]
}
 8017d74:	bf00      	nop
 8017d76:	e7fe      	b.n	8017d76 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8017d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d7a:	681b      	ldr	r3, [r3, #0]
 8017d7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017d7e:	6850      	ldr	r0, [r2, #4]
 8017d80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017d82:	6892      	ldr	r2, [r2, #8]
 8017d84:	4611      	mov	r1, r2
 8017d86:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8017d88:	687b      	ldr	r3, [r7, #4]
 8017d8a:	2b00      	cmp	r3, #0
 8017d8c:	f2c0 80ab 	blt.w	8017ee6 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8017d90:	68fb      	ldr	r3, [r7, #12]
 8017d92:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8017d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d96:	695b      	ldr	r3, [r3, #20]
 8017d98:	2b00      	cmp	r3, #0
 8017d9a:	d004      	beq.n	8017da6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d9e:	3304      	adds	r3, #4
 8017da0:	4618      	mov	r0, r3
 8017da2:	f7fd fedb 	bl	8015b5c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8017da6:	463b      	mov	r3, r7
 8017da8:	4618      	mov	r0, r3
 8017daa:	f7ff ff6b 	bl	8017c84 <prvSampleTimeNow>
 8017dae:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8017db0:	687b      	ldr	r3, [r7, #4]
 8017db2:	2b09      	cmp	r3, #9
 8017db4:	f200 8096 	bhi.w	8017ee4 <prvProcessReceivedCommands+0x19c>
 8017db8:	a201      	add	r2, pc, #4	; (adr r2, 8017dc0 <prvProcessReceivedCommands+0x78>)
 8017dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017dbe:	bf00      	nop
 8017dc0:	08017de9 	.word	0x08017de9
 8017dc4:	08017de9 	.word	0x08017de9
 8017dc8:	08017de9 	.word	0x08017de9
 8017dcc:	08017e5d 	.word	0x08017e5d
 8017dd0:	08017e71 	.word	0x08017e71
 8017dd4:	08017ebb 	.word	0x08017ebb
 8017dd8:	08017de9 	.word	0x08017de9
 8017ddc:	08017de9 	.word	0x08017de9
 8017de0:	08017e5d 	.word	0x08017e5d
 8017de4:	08017e71 	.word	0x08017e71
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8017de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017dea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017dee:	f043 0301 	orr.w	r3, r3, #1
 8017df2:	b2da      	uxtb	r2, r3
 8017df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017df6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8017dfa:	68ba      	ldr	r2, [r7, #8]
 8017dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017dfe:	699b      	ldr	r3, [r3, #24]
 8017e00:	18d1      	adds	r1, r2, r3
 8017e02:	68bb      	ldr	r3, [r7, #8]
 8017e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017e06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017e08:	f7ff ff5c 	bl	8017cc4 <prvInsertTimerInActiveList>
 8017e0c:	4603      	mov	r3, r0
 8017e0e:	2b00      	cmp	r3, #0
 8017e10:	d069      	beq.n	8017ee6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e14:	6a1b      	ldr	r3, [r3, #32]
 8017e16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017e18:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017e20:	f003 0304 	and.w	r3, r3, #4
 8017e24:	2b00      	cmp	r3, #0
 8017e26:	d05e      	beq.n	8017ee6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8017e28:	68ba      	ldr	r2, [r7, #8]
 8017e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e2c:	699b      	ldr	r3, [r3, #24]
 8017e2e:	441a      	add	r2, r3
 8017e30:	2300      	movs	r3, #0
 8017e32:	9300      	str	r3, [sp, #0]
 8017e34:	2300      	movs	r3, #0
 8017e36:	2100      	movs	r1, #0
 8017e38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017e3a:	f7ff fe05 	bl	8017a48 <xTimerGenericCommand>
 8017e3e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8017e40:	6a3b      	ldr	r3, [r7, #32]
 8017e42:	2b00      	cmp	r3, #0
 8017e44:	d14f      	bne.n	8017ee6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8017e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e4a:	f383 8811 	msr	BASEPRI, r3
 8017e4e:	f3bf 8f6f 	isb	sy
 8017e52:	f3bf 8f4f 	dsb	sy
 8017e56:	61bb      	str	r3, [r7, #24]
}
 8017e58:	bf00      	nop
 8017e5a:	e7fe      	b.n	8017e5a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017e62:	f023 0301 	bic.w	r3, r3, #1
 8017e66:	b2da      	uxtb	r2, r3
 8017e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8017e6e:	e03a      	b.n	8017ee6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8017e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017e76:	f043 0301 	orr.w	r3, r3, #1
 8017e7a:	b2da      	uxtb	r2, r3
 8017e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8017e82:	68ba      	ldr	r2, [r7, #8]
 8017e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e86:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8017e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e8a:	699b      	ldr	r3, [r3, #24]
 8017e8c:	2b00      	cmp	r3, #0
 8017e8e:	d10a      	bne.n	8017ea6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8017e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e94:	f383 8811 	msr	BASEPRI, r3
 8017e98:	f3bf 8f6f 	isb	sy
 8017e9c:	f3bf 8f4f 	dsb	sy
 8017ea0:	617b      	str	r3, [r7, #20]
}
 8017ea2:	bf00      	nop
 8017ea4:	e7fe      	b.n	8017ea4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8017ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ea8:	699a      	ldr	r2, [r3, #24]
 8017eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017eac:	18d1      	adds	r1, r2, r3
 8017eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017eb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017eb4:	f7ff ff06 	bl	8017cc4 <prvInsertTimerInActiveList>
					break;
 8017eb8:	e015      	b.n	8017ee6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8017eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ebc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017ec0:	f003 0302 	and.w	r3, r3, #2
 8017ec4:	2b00      	cmp	r3, #0
 8017ec6:	d103      	bne.n	8017ed0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8017ec8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017eca:	f000 fbe1 	bl	8018690 <vPortFree>
 8017ece:	e00a      	b.n	8017ee6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ed2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017ed6:	f023 0301 	bic.w	r3, r3, #1
 8017eda:	b2da      	uxtb	r2, r3
 8017edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ede:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8017ee2:	e000      	b.n	8017ee6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8017ee4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8017ee6:	4b08      	ldr	r3, [pc, #32]	; (8017f08 <prvProcessReceivedCommands+0x1c0>)
 8017ee8:	681b      	ldr	r3, [r3, #0]
 8017eea:	1d39      	adds	r1, r7, #4
 8017eec:	2200      	movs	r2, #0
 8017eee:	4618      	mov	r0, r3
 8017ef0:	f7fe fa06 	bl	8016300 <xQueueReceive>
 8017ef4:	4603      	mov	r3, r0
 8017ef6:	2b00      	cmp	r3, #0
 8017ef8:	f47f af2a 	bne.w	8017d50 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8017efc:	bf00      	nop
 8017efe:	bf00      	nop
 8017f00:	3730      	adds	r7, #48	; 0x30
 8017f02:	46bd      	mov	sp, r7
 8017f04:	bd80      	pop	{r7, pc}
 8017f06:	bf00      	nop
 8017f08:	2400a298 	.word	0x2400a298

08017f0c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8017f0c:	b580      	push	{r7, lr}
 8017f0e:	b088      	sub	sp, #32
 8017f10:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8017f12:	e048      	b.n	8017fa6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017f14:	4b2d      	ldr	r3, [pc, #180]	; (8017fcc <prvSwitchTimerLists+0xc0>)
 8017f16:	681b      	ldr	r3, [r3, #0]
 8017f18:	68db      	ldr	r3, [r3, #12]
 8017f1a:	681b      	ldr	r3, [r3, #0]
 8017f1c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017f1e:	4b2b      	ldr	r3, [pc, #172]	; (8017fcc <prvSwitchTimerLists+0xc0>)
 8017f20:	681b      	ldr	r3, [r3, #0]
 8017f22:	68db      	ldr	r3, [r3, #12]
 8017f24:	68db      	ldr	r3, [r3, #12]
 8017f26:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017f28:	68fb      	ldr	r3, [r7, #12]
 8017f2a:	3304      	adds	r3, #4
 8017f2c:	4618      	mov	r0, r3
 8017f2e:	f7fd fe15 	bl	8015b5c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017f32:	68fb      	ldr	r3, [r7, #12]
 8017f34:	6a1b      	ldr	r3, [r3, #32]
 8017f36:	68f8      	ldr	r0, [r7, #12]
 8017f38:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017f3a:	68fb      	ldr	r3, [r7, #12]
 8017f3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017f40:	f003 0304 	and.w	r3, r3, #4
 8017f44:	2b00      	cmp	r3, #0
 8017f46:	d02e      	beq.n	8017fa6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8017f48:	68fb      	ldr	r3, [r7, #12]
 8017f4a:	699b      	ldr	r3, [r3, #24]
 8017f4c:	693a      	ldr	r2, [r7, #16]
 8017f4e:	4413      	add	r3, r2
 8017f50:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8017f52:	68ba      	ldr	r2, [r7, #8]
 8017f54:	693b      	ldr	r3, [r7, #16]
 8017f56:	429a      	cmp	r2, r3
 8017f58:	d90e      	bls.n	8017f78 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8017f5a:	68fb      	ldr	r3, [r7, #12]
 8017f5c:	68ba      	ldr	r2, [r7, #8]
 8017f5e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8017f60:	68fb      	ldr	r3, [r7, #12]
 8017f62:	68fa      	ldr	r2, [r7, #12]
 8017f64:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8017f66:	4b19      	ldr	r3, [pc, #100]	; (8017fcc <prvSwitchTimerLists+0xc0>)
 8017f68:	681a      	ldr	r2, [r3, #0]
 8017f6a:	68fb      	ldr	r3, [r7, #12]
 8017f6c:	3304      	adds	r3, #4
 8017f6e:	4619      	mov	r1, r3
 8017f70:	4610      	mov	r0, r2
 8017f72:	f7fd fdba 	bl	8015aea <vListInsert>
 8017f76:	e016      	b.n	8017fa6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017f78:	2300      	movs	r3, #0
 8017f7a:	9300      	str	r3, [sp, #0]
 8017f7c:	2300      	movs	r3, #0
 8017f7e:	693a      	ldr	r2, [r7, #16]
 8017f80:	2100      	movs	r1, #0
 8017f82:	68f8      	ldr	r0, [r7, #12]
 8017f84:	f7ff fd60 	bl	8017a48 <xTimerGenericCommand>
 8017f88:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8017f8a:	687b      	ldr	r3, [r7, #4]
 8017f8c:	2b00      	cmp	r3, #0
 8017f8e:	d10a      	bne.n	8017fa6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8017f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f94:	f383 8811 	msr	BASEPRI, r3
 8017f98:	f3bf 8f6f 	isb	sy
 8017f9c:	f3bf 8f4f 	dsb	sy
 8017fa0:	603b      	str	r3, [r7, #0]
}
 8017fa2:	bf00      	nop
 8017fa4:	e7fe      	b.n	8017fa4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8017fa6:	4b09      	ldr	r3, [pc, #36]	; (8017fcc <prvSwitchTimerLists+0xc0>)
 8017fa8:	681b      	ldr	r3, [r3, #0]
 8017faa:	681b      	ldr	r3, [r3, #0]
 8017fac:	2b00      	cmp	r3, #0
 8017fae:	d1b1      	bne.n	8017f14 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8017fb0:	4b06      	ldr	r3, [pc, #24]	; (8017fcc <prvSwitchTimerLists+0xc0>)
 8017fb2:	681b      	ldr	r3, [r3, #0]
 8017fb4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8017fb6:	4b06      	ldr	r3, [pc, #24]	; (8017fd0 <prvSwitchTimerLists+0xc4>)
 8017fb8:	681b      	ldr	r3, [r3, #0]
 8017fba:	4a04      	ldr	r2, [pc, #16]	; (8017fcc <prvSwitchTimerLists+0xc0>)
 8017fbc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8017fbe:	4a04      	ldr	r2, [pc, #16]	; (8017fd0 <prvSwitchTimerLists+0xc4>)
 8017fc0:	697b      	ldr	r3, [r7, #20]
 8017fc2:	6013      	str	r3, [r2, #0]
}
 8017fc4:	bf00      	nop
 8017fc6:	3718      	adds	r7, #24
 8017fc8:	46bd      	mov	sp, r7
 8017fca:	bd80      	pop	{r7, pc}
 8017fcc:	2400a290 	.word	0x2400a290
 8017fd0:	2400a294 	.word	0x2400a294

08017fd4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8017fd4:	b580      	push	{r7, lr}
 8017fd6:	b082      	sub	sp, #8
 8017fd8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8017fda:	f000 f96b 	bl	80182b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8017fde:	4b15      	ldr	r3, [pc, #84]	; (8018034 <prvCheckForValidListAndQueue+0x60>)
 8017fe0:	681b      	ldr	r3, [r3, #0]
 8017fe2:	2b00      	cmp	r3, #0
 8017fe4:	d120      	bne.n	8018028 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8017fe6:	4814      	ldr	r0, [pc, #80]	; (8018038 <prvCheckForValidListAndQueue+0x64>)
 8017fe8:	f7fd fd2e 	bl	8015a48 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8017fec:	4813      	ldr	r0, [pc, #76]	; (801803c <prvCheckForValidListAndQueue+0x68>)
 8017fee:	f7fd fd2b 	bl	8015a48 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8017ff2:	4b13      	ldr	r3, [pc, #76]	; (8018040 <prvCheckForValidListAndQueue+0x6c>)
 8017ff4:	4a10      	ldr	r2, [pc, #64]	; (8018038 <prvCheckForValidListAndQueue+0x64>)
 8017ff6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8017ff8:	4b12      	ldr	r3, [pc, #72]	; (8018044 <prvCheckForValidListAndQueue+0x70>)
 8017ffa:	4a10      	ldr	r2, [pc, #64]	; (801803c <prvCheckForValidListAndQueue+0x68>)
 8017ffc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8017ffe:	2300      	movs	r3, #0
 8018000:	9300      	str	r3, [sp, #0]
 8018002:	4b11      	ldr	r3, [pc, #68]	; (8018048 <prvCheckForValidListAndQueue+0x74>)
 8018004:	4a11      	ldr	r2, [pc, #68]	; (801804c <prvCheckForValidListAndQueue+0x78>)
 8018006:	2110      	movs	r1, #16
 8018008:	200a      	movs	r0, #10
 801800a:	f7fd fe2c 	bl	8015c66 <xQueueGenericCreateStatic>
 801800e:	4603      	mov	r3, r0
 8018010:	4a08      	ldr	r2, [pc, #32]	; (8018034 <prvCheckForValidListAndQueue+0x60>)
 8018012:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8018014:	4b07      	ldr	r3, [pc, #28]	; (8018034 <prvCheckForValidListAndQueue+0x60>)
 8018016:	681b      	ldr	r3, [r3, #0]
 8018018:	2b00      	cmp	r3, #0
 801801a:	d005      	beq.n	8018028 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801801c:	4b05      	ldr	r3, [pc, #20]	; (8018034 <prvCheckForValidListAndQueue+0x60>)
 801801e:	681b      	ldr	r3, [r3, #0]
 8018020:	490b      	ldr	r1, [pc, #44]	; (8018050 <prvCheckForValidListAndQueue+0x7c>)
 8018022:	4618      	mov	r0, r3
 8018024:	f7fe fc8c 	bl	8016940 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018028:	f000 f974 	bl	8018314 <vPortExitCritical>
}
 801802c:	bf00      	nop
 801802e:	46bd      	mov	sp, r7
 8018030:	bd80      	pop	{r7, pc}
 8018032:	bf00      	nop
 8018034:	2400a298 	.word	0x2400a298
 8018038:	2400a268 	.word	0x2400a268
 801803c:	2400a27c 	.word	0x2400a27c
 8018040:	2400a290 	.word	0x2400a290
 8018044:	2400a294 	.word	0x2400a294
 8018048:	2400a344 	.word	0x2400a344
 801804c:	2400a2a4 	.word	0x2400a2a4
 8018050:	0801bf8c 	.word	0x0801bf8c

08018054 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8018054:	b480      	push	{r7}
 8018056:	b085      	sub	sp, #20
 8018058:	af00      	add	r7, sp, #0
 801805a:	60f8      	str	r0, [r7, #12]
 801805c:	60b9      	str	r1, [r7, #8]
 801805e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8018060:	68fb      	ldr	r3, [r7, #12]
 8018062:	3b04      	subs	r3, #4
 8018064:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8018066:	68fb      	ldr	r3, [r7, #12]
 8018068:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801806c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801806e:	68fb      	ldr	r3, [r7, #12]
 8018070:	3b04      	subs	r3, #4
 8018072:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8018074:	68bb      	ldr	r3, [r7, #8]
 8018076:	f023 0201 	bic.w	r2, r3, #1
 801807a:	68fb      	ldr	r3, [r7, #12]
 801807c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801807e:	68fb      	ldr	r3, [r7, #12]
 8018080:	3b04      	subs	r3, #4
 8018082:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8018084:	4a0c      	ldr	r2, [pc, #48]	; (80180b8 <pxPortInitialiseStack+0x64>)
 8018086:	68fb      	ldr	r3, [r7, #12]
 8018088:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801808a:	68fb      	ldr	r3, [r7, #12]
 801808c:	3b14      	subs	r3, #20
 801808e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8018090:	687a      	ldr	r2, [r7, #4]
 8018092:	68fb      	ldr	r3, [r7, #12]
 8018094:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8018096:	68fb      	ldr	r3, [r7, #12]
 8018098:	3b04      	subs	r3, #4
 801809a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801809c:	68fb      	ldr	r3, [r7, #12]
 801809e:	f06f 0202 	mvn.w	r2, #2
 80180a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80180a4:	68fb      	ldr	r3, [r7, #12]
 80180a6:	3b20      	subs	r3, #32
 80180a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80180aa:	68fb      	ldr	r3, [r7, #12]
}
 80180ac:	4618      	mov	r0, r3
 80180ae:	3714      	adds	r7, #20
 80180b0:	46bd      	mov	sp, r7
 80180b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180b6:	4770      	bx	lr
 80180b8:	080180bd 	.word	0x080180bd

080180bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80180bc:	b480      	push	{r7}
 80180be:	b085      	sub	sp, #20
 80180c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80180c2:	2300      	movs	r3, #0
 80180c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80180c6:	4b12      	ldr	r3, [pc, #72]	; (8018110 <prvTaskExitError+0x54>)
 80180c8:	681b      	ldr	r3, [r3, #0]
 80180ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80180ce:	d00a      	beq.n	80180e6 <prvTaskExitError+0x2a>
	__asm volatile
 80180d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180d4:	f383 8811 	msr	BASEPRI, r3
 80180d8:	f3bf 8f6f 	isb	sy
 80180dc:	f3bf 8f4f 	dsb	sy
 80180e0:	60fb      	str	r3, [r7, #12]
}
 80180e2:	bf00      	nop
 80180e4:	e7fe      	b.n	80180e4 <prvTaskExitError+0x28>
	__asm volatile
 80180e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180ea:	f383 8811 	msr	BASEPRI, r3
 80180ee:	f3bf 8f6f 	isb	sy
 80180f2:	f3bf 8f4f 	dsb	sy
 80180f6:	60bb      	str	r3, [r7, #8]
}
 80180f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80180fa:	bf00      	nop
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	2b00      	cmp	r3, #0
 8018100:	d0fc      	beq.n	80180fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8018102:	bf00      	nop
 8018104:	bf00      	nop
 8018106:	3714      	adds	r7, #20
 8018108:	46bd      	mov	sp, r7
 801810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801810e:	4770      	bx	lr
 8018110:	24000010 	.word	0x24000010
	...

08018120 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8018120:	4b07      	ldr	r3, [pc, #28]	; (8018140 <pxCurrentTCBConst2>)
 8018122:	6819      	ldr	r1, [r3, #0]
 8018124:	6808      	ldr	r0, [r1, #0]
 8018126:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801812a:	f380 8809 	msr	PSP, r0
 801812e:	f3bf 8f6f 	isb	sy
 8018132:	f04f 0000 	mov.w	r0, #0
 8018136:	f380 8811 	msr	BASEPRI, r0
 801813a:	4770      	bx	lr
 801813c:	f3af 8000 	nop.w

08018140 <pxCurrentTCBConst2>:
 8018140:	24009d68 	.word	0x24009d68
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8018144:	bf00      	nop
 8018146:	bf00      	nop

08018148 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8018148:	4808      	ldr	r0, [pc, #32]	; (801816c <prvPortStartFirstTask+0x24>)
 801814a:	6800      	ldr	r0, [r0, #0]
 801814c:	6800      	ldr	r0, [r0, #0]
 801814e:	f380 8808 	msr	MSP, r0
 8018152:	f04f 0000 	mov.w	r0, #0
 8018156:	f380 8814 	msr	CONTROL, r0
 801815a:	b662      	cpsie	i
 801815c:	b661      	cpsie	f
 801815e:	f3bf 8f4f 	dsb	sy
 8018162:	f3bf 8f6f 	isb	sy
 8018166:	df00      	svc	0
 8018168:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801816a:	bf00      	nop
 801816c:	e000ed08 	.word	0xe000ed08

08018170 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8018170:	b580      	push	{r7, lr}
 8018172:	b086      	sub	sp, #24
 8018174:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8018176:	4b46      	ldr	r3, [pc, #280]	; (8018290 <xPortStartScheduler+0x120>)
 8018178:	681b      	ldr	r3, [r3, #0]
 801817a:	4a46      	ldr	r2, [pc, #280]	; (8018294 <xPortStartScheduler+0x124>)
 801817c:	4293      	cmp	r3, r2
 801817e:	d10a      	bne.n	8018196 <xPortStartScheduler+0x26>
	__asm volatile
 8018180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018184:	f383 8811 	msr	BASEPRI, r3
 8018188:	f3bf 8f6f 	isb	sy
 801818c:	f3bf 8f4f 	dsb	sy
 8018190:	613b      	str	r3, [r7, #16]
}
 8018192:	bf00      	nop
 8018194:	e7fe      	b.n	8018194 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8018196:	4b3e      	ldr	r3, [pc, #248]	; (8018290 <xPortStartScheduler+0x120>)
 8018198:	681b      	ldr	r3, [r3, #0]
 801819a:	4a3f      	ldr	r2, [pc, #252]	; (8018298 <xPortStartScheduler+0x128>)
 801819c:	4293      	cmp	r3, r2
 801819e:	d10a      	bne.n	80181b6 <xPortStartScheduler+0x46>
	__asm volatile
 80181a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181a4:	f383 8811 	msr	BASEPRI, r3
 80181a8:	f3bf 8f6f 	isb	sy
 80181ac:	f3bf 8f4f 	dsb	sy
 80181b0:	60fb      	str	r3, [r7, #12]
}
 80181b2:	bf00      	nop
 80181b4:	e7fe      	b.n	80181b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80181b6:	4b39      	ldr	r3, [pc, #228]	; (801829c <xPortStartScheduler+0x12c>)
 80181b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80181ba:	697b      	ldr	r3, [r7, #20]
 80181bc:	781b      	ldrb	r3, [r3, #0]
 80181be:	b2db      	uxtb	r3, r3
 80181c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80181c2:	697b      	ldr	r3, [r7, #20]
 80181c4:	22ff      	movs	r2, #255	; 0xff
 80181c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80181c8:	697b      	ldr	r3, [r7, #20]
 80181ca:	781b      	ldrb	r3, [r3, #0]
 80181cc:	b2db      	uxtb	r3, r3
 80181ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80181d0:	78fb      	ldrb	r3, [r7, #3]
 80181d2:	b2db      	uxtb	r3, r3
 80181d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80181d8:	b2da      	uxtb	r2, r3
 80181da:	4b31      	ldr	r3, [pc, #196]	; (80182a0 <xPortStartScheduler+0x130>)
 80181dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80181de:	4b31      	ldr	r3, [pc, #196]	; (80182a4 <xPortStartScheduler+0x134>)
 80181e0:	2207      	movs	r2, #7
 80181e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80181e4:	e009      	b.n	80181fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80181e6:	4b2f      	ldr	r3, [pc, #188]	; (80182a4 <xPortStartScheduler+0x134>)
 80181e8:	681b      	ldr	r3, [r3, #0]
 80181ea:	3b01      	subs	r3, #1
 80181ec:	4a2d      	ldr	r2, [pc, #180]	; (80182a4 <xPortStartScheduler+0x134>)
 80181ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80181f0:	78fb      	ldrb	r3, [r7, #3]
 80181f2:	b2db      	uxtb	r3, r3
 80181f4:	005b      	lsls	r3, r3, #1
 80181f6:	b2db      	uxtb	r3, r3
 80181f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80181fa:	78fb      	ldrb	r3, [r7, #3]
 80181fc:	b2db      	uxtb	r3, r3
 80181fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018202:	2b80      	cmp	r3, #128	; 0x80
 8018204:	d0ef      	beq.n	80181e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8018206:	4b27      	ldr	r3, [pc, #156]	; (80182a4 <xPortStartScheduler+0x134>)
 8018208:	681b      	ldr	r3, [r3, #0]
 801820a:	f1c3 0307 	rsb	r3, r3, #7
 801820e:	2b04      	cmp	r3, #4
 8018210:	d00a      	beq.n	8018228 <xPortStartScheduler+0xb8>
	__asm volatile
 8018212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018216:	f383 8811 	msr	BASEPRI, r3
 801821a:	f3bf 8f6f 	isb	sy
 801821e:	f3bf 8f4f 	dsb	sy
 8018222:	60bb      	str	r3, [r7, #8]
}
 8018224:	bf00      	nop
 8018226:	e7fe      	b.n	8018226 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8018228:	4b1e      	ldr	r3, [pc, #120]	; (80182a4 <xPortStartScheduler+0x134>)
 801822a:	681b      	ldr	r3, [r3, #0]
 801822c:	021b      	lsls	r3, r3, #8
 801822e:	4a1d      	ldr	r2, [pc, #116]	; (80182a4 <xPortStartScheduler+0x134>)
 8018230:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8018232:	4b1c      	ldr	r3, [pc, #112]	; (80182a4 <xPortStartScheduler+0x134>)
 8018234:	681b      	ldr	r3, [r3, #0]
 8018236:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801823a:	4a1a      	ldr	r2, [pc, #104]	; (80182a4 <xPortStartScheduler+0x134>)
 801823c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801823e:	687b      	ldr	r3, [r7, #4]
 8018240:	b2da      	uxtb	r2, r3
 8018242:	697b      	ldr	r3, [r7, #20]
 8018244:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8018246:	4b18      	ldr	r3, [pc, #96]	; (80182a8 <xPortStartScheduler+0x138>)
 8018248:	681b      	ldr	r3, [r3, #0]
 801824a:	4a17      	ldr	r2, [pc, #92]	; (80182a8 <xPortStartScheduler+0x138>)
 801824c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8018250:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8018252:	4b15      	ldr	r3, [pc, #84]	; (80182a8 <xPortStartScheduler+0x138>)
 8018254:	681b      	ldr	r3, [r3, #0]
 8018256:	4a14      	ldr	r2, [pc, #80]	; (80182a8 <xPortStartScheduler+0x138>)
 8018258:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801825c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801825e:	f000 f8dd 	bl	801841c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8018262:	4b12      	ldr	r3, [pc, #72]	; (80182ac <xPortStartScheduler+0x13c>)
 8018264:	2200      	movs	r2, #0
 8018266:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8018268:	f000 f8fc 	bl	8018464 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801826c:	4b10      	ldr	r3, [pc, #64]	; (80182b0 <xPortStartScheduler+0x140>)
 801826e:	681b      	ldr	r3, [r3, #0]
 8018270:	4a0f      	ldr	r2, [pc, #60]	; (80182b0 <xPortStartScheduler+0x140>)
 8018272:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8018276:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8018278:	f7ff ff66 	bl	8018148 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801827c:	f7fe ff58 	bl	8017130 <vTaskSwitchContext>
	prvTaskExitError();
 8018280:	f7ff ff1c 	bl	80180bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8018284:	2300      	movs	r3, #0
}
 8018286:	4618      	mov	r0, r3
 8018288:	3718      	adds	r7, #24
 801828a:	46bd      	mov	sp, r7
 801828c:	bd80      	pop	{r7, pc}
 801828e:	bf00      	nop
 8018290:	e000ed00 	.word	0xe000ed00
 8018294:	410fc271 	.word	0x410fc271
 8018298:	410fc270 	.word	0x410fc270
 801829c:	e000e400 	.word	0xe000e400
 80182a0:	2400a394 	.word	0x2400a394
 80182a4:	2400a398 	.word	0x2400a398
 80182a8:	e000ed20 	.word	0xe000ed20
 80182ac:	24000010 	.word	0x24000010
 80182b0:	e000ef34 	.word	0xe000ef34

080182b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80182b4:	b480      	push	{r7}
 80182b6:	b083      	sub	sp, #12
 80182b8:	af00      	add	r7, sp, #0
	__asm volatile
 80182ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80182be:	f383 8811 	msr	BASEPRI, r3
 80182c2:	f3bf 8f6f 	isb	sy
 80182c6:	f3bf 8f4f 	dsb	sy
 80182ca:	607b      	str	r3, [r7, #4]
}
 80182cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80182ce:	4b0f      	ldr	r3, [pc, #60]	; (801830c <vPortEnterCritical+0x58>)
 80182d0:	681b      	ldr	r3, [r3, #0]
 80182d2:	3301      	adds	r3, #1
 80182d4:	4a0d      	ldr	r2, [pc, #52]	; (801830c <vPortEnterCritical+0x58>)
 80182d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80182d8:	4b0c      	ldr	r3, [pc, #48]	; (801830c <vPortEnterCritical+0x58>)
 80182da:	681b      	ldr	r3, [r3, #0]
 80182dc:	2b01      	cmp	r3, #1
 80182de:	d10f      	bne.n	8018300 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80182e0:	4b0b      	ldr	r3, [pc, #44]	; (8018310 <vPortEnterCritical+0x5c>)
 80182e2:	681b      	ldr	r3, [r3, #0]
 80182e4:	b2db      	uxtb	r3, r3
 80182e6:	2b00      	cmp	r3, #0
 80182e8:	d00a      	beq.n	8018300 <vPortEnterCritical+0x4c>
	__asm volatile
 80182ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80182ee:	f383 8811 	msr	BASEPRI, r3
 80182f2:	f3bf 8f6f 	isb	sy
 80182f6:	f3bf 8f4f 	dsb	sy
 80182fa:	603b      	str	r3, [r7, #0]
}
 80182fc:	bf00      	nop
 80182fe:	e7fe      	b.n	80182fe <vPortEnterCritical+0x4a>
	}
}
 8018300:	bf00      	nop
 8018302:	370c      	adds	r7, #12
 8018304:	46bd      	mov	sp, r7
 8018306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801830a:	4770      	bx	lr
 801830c:	24000010 	.word	0x24000010
 8018310:	e000ed04 	.word	0xe000ed04

08018314 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8018314:	b480      	push	{r7}
 8018316:	b083      	sub	sp, #12
 8018318:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801831a:	4b12      	ldr	r3, [pc, #72]	; (8018364 <vPortExitCritical+0x50>)
 801831c:	681b      	ldr	r3, [r3, #0]
 801831e:	2b00      	cmp	r3, #0
 8018320:	d10a      	bne.n	8018338 <vPortExitCritical+0x24>
	__asm volatile
 8018322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018326:	f383 8811 	msr	BASEPRI, r3
 801832a:	f3bf 8f6f 	isb	sy
 801832e:	f3bf 8f4f 	dsb	sy
 8018332:	607b      	str	r3, [r7, #4]
}
 8018334:	bf00      	nop
 8018336:	e7fe      	b.n	8018336 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8018338:	4b0a      	ldr	r3, [pc, #40]	; (8018364 <vPortExitCritical+0x50>)
 801833a:	681b      	ldr	r3, [r3, #0]
 801833c:	3b01      	subs	r3, #1
 801833e:	4a09      	ldr	r2, [pc, #36]	; (8018364 <vPortExitCritical+0x50>)
 8018340:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8018342:	4b08      	ldr	r3, [pc, #32]	; (8018364 <vPortExitCritical+0x50>)
 8018344:	681b      	ldr	r3, [r3, #0]
 8018346:	2b00      	cmp	r3, #0
 8018348:	d105      	bne.n	8018356 <vPortExitCritical+0x42>
 801834a:	2300      	movs	r3, #0
 801834c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801834e:	683b      	ldr	r3, [r7, #0]
 8018350:	f383 8811 	msr	BASEPRI, r3
}
 8018354:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8018356:	bf00      	nop
 8018358:	370c      	adds	r7, #12
 801835a:	46bd      	mov	sp, r7
 801835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018360:	4770      	bx	lr
 8018362:	bf00      	nop
 8018364:	24000010 	.word	0x24000010
	...

08018370 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8018370:	f3ef 8009 	mrs	r0, PSP
 8018374:	f3bf 8f6f 	isb	sy
 8018378:	4b15      	ldr	r3, [pc, #84]	; (80183d0 <pxCurrentTCBConst>)
 801837a:	681a      	ldr	r2, [r3, #0]
 801837c:	f01e 0f10 	tst.w	lr, #16
 8018380:	bf08      	it	eq
 8018382:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8018386:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801838a:	6010      	str	r0, [r2, #0]
 801838c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8018390:	f04f 0050 	mov.w	r0, #80	; 0x50
 8018394:	f380 8811 	msr	BASEPRI, r0
 8018398:	f3bf 8f4f 	dsb	sy
 801839c:	f3bf 8f6f 	isb	sy
 80183a0:	f7fe fec6 	bl	8017130 <vTaskSwitchContext>
 80183a4:	f04f 0000 	mov.w	r0, #0
 80183a8:	f380 8811 	msr	BASEPRI, r0
 80183ac:	bc09      	pop	{r0, r3}
 80183ae:	6819      	ldr	r1, [r3, #0]
 80183b0:	6808      	ldr	r0, [r1, #0]
 80183b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183b6:	f01e 0f10 	tst.w	lr, #16
 80183ba:	bf08      	it	eq
 80183bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80183c0:	f380 8809 	msr	PSP, r0
 80183c4:	f3bf 8f6f 	isb	sy
 80183c8:	4770      	bx	lr
 80183ca:	bf00      	nop
 80183cc:	f3af 8000 	nop.w

080183d0 <pxCurrentTCBConst>:
 80183d0:	24009d68 	.word	0x24009d68
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80183d4:	bf00      	nop
 80183d6:	bf00      	nop

080183d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80183d8:	b580      	push	{r7, lr}
 80183da:	b082      	sub	sp, #8
 80183dc:	af00      	add	r7, sp, #0
	__asm volatile
 80183de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80183e2:	f383 8811 	msr	BASEPRI, r3
 80183e6:	f3bf 8f6f 	isb	sy
 80183ea:	f3bf 8f4f 	dsb	sy
 80183ee:	607b      	str	r3, [r7, #4]
}
 80183f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80183f2:	f7fe fe07 	bl	8017004 <xTaskIncrementTick>
 80183f6:	4603      	mov	r3, r0
 80183f8:	2b00      	cmp	r3, #0
 80183fa:	d003      	beq.n	8018404 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80183fc:	4b06      	ldr	r3, [pc, #24]	; (8018418 <xPortSysTickHandler+0x40>)
 80183fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018402:	601a      	str	r2, [r3, #0]
 8018404:	2300      	movs	r3, #0
 8018406:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018408:	683b      	ldr	r3, [r7, #0]
 801840a:	f383 8811 	msr	BASEPRI, r3
}
 801840e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8018410:	bf00      	nop
 8018412:	3708      	adds	r7, #8
 8018414:	46bd      	mov	sp, r7
 8018416:	bd80      	pop	{r7, pc}
 8018418:	e000ed04 	.word	0xe000ed04

0801841c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801841c:	b480      	push	{r7}
 801841e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8018420:	4b0b      	ldr	r3, [pc, #44]	; (8018450 <vPortSetupTimerInterrupt+0x34>)
 8018422:	2200      	movs	r2, #0
 8018424:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8018426:	4b0b      	ldr	r3, [pc, #44]	; (8018454 <vPortSetupTimerInterrupt+0x38>)
 8018428:	2200      	movs	r2, #0
 801842a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801842c:	4b0a      	ldr	r3, [pc, #40]	; (8018458 <vPortSetupTimerInterrupt+0x3c>)
 801842e:	681b      	ldr	r3, [r3, #0]
 8018430:	4a0a      	ldr	r2, [pc, #40]	; (801845c <vPortSetupTimerInterrupt+0x40>)
 8018432:	fba2 2303 	umull	r2, r3, r2, r3
 8018436:	099b      	lsrs	r3, r3, #6
 8018438:	4a09      	ldr	r2, [pc, #36]	; (8018460 <vPortSetupTimerInterrupt+0x44>)
 801843a:	3b01      	subs	r3, #1
 801843c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801843e:	4b04      	ldr	r3, [pc, #16]	; (8018450 <vPortSetupTimerInterrupt+0x34>)
 8018440:	2207      	movs	r2, #7
 8018442:	601a      	str	r2, [r3, #0]
}
 8018444:	bf00      	nop
 8018446:	46bd      	mov	sp, r7
 8018448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801844c:	4770      	bx	lr
 801844e:	bf00      	nop
 8018450:	e000e010 	.word	0xe000e010
 8018454:	e000e018 	.word	0xe000e018
 8018458:	24000000 	.word	0x24000000
 801845c:	10624dd3 	.word	0x10624dd3
 8018460:	e000e014 	.word	0xe000e014

08018464 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8018464:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8018474 <vPortEnableVFP+0x10>
 8018468:	6801      	ldr	r1, [r0, #0]
 801846a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801846e:	6001      	str	r1, [r0, #0]
 8018470:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8018472:	bf00      	nop
 8018474:	e000ed88 	.word	0xe000ed88

08018478 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8018478:	b480      	push	{r7}
 801847a:	b085      	sub	sp, #20
 801847c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801847e:	f3ef 8305 	mrs	r3, IPSR
 8018482:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8018484:	68fb      	ldr	r3, [r7, #12]
 8018486:	2b0f      	cmp	r3, #15
 8018488:	d914      	bls.n	80184b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801848a:	4a17      	ldr	r2, [pc, #92]	; (80184e8 <vPortValidateInterruptPriority+0x70>)
 801848c:	68fb      	ldr	r3, [r7, #12]
 801848e:	4413      	add	r3, r2
 8018490:	781b      	ldrb	r3, [r3, #0]
 8018492:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8018494:	4b15      	ldr	r3, [pc, #84]	; (80184ec <vPortValidateInterruptPriority+0x74>)
 8018496:	781b      	ldrb	r3, [r3, #0]
 8018498:	7afa      	ldrb	r2, [r7, #11]
 801849a:	429a      	cmp	r2, r3
 801849c:	d20a      	bcs.n	80184b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801849e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184a2:	f383 8811 	msr	BASEPRI, r3
 80184a6:	f3bf 8f6f 	isb	sy
 80184aa:	f3bf 8f4f 	dsb	sy
 80184ae:	607b      	str	r3, [r7, #4]
}
 80184b0:	bf00      	nop
 80184b2:	e7fe      	b.n	80184b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80184b4:	4b0e      	ldr	r3, [pc, #56]	; (80184f0 <vPortValidateInterruptPriority+0x78>)
 80184b6:	681b      	ldr	r3, [r3, #0]
 80184b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80184bc:	4b0d      	ldr	r3, [pc, #52]	; (80184f4 <vPortValidateInterruptPriority+0x7c>)
 80184be:	681b      	ldr	r3, [r3, #0]
 80184c0:	429a      	cmp	r2, r3
 80184c2:	d90a      	bls.n	80184da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80184c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184c8:	f383 8811 	msr	BASEPRI, r3
 80184cc:	f3bf 8f6f 	isb	sy
 80184d0:	f3bf 8f4f 	dsb	sy
 80184d4:	603b      	str	r3, [r7, #0]
}
 80184d6:	bf00      	nop
 80184d8:	e7fe      	b.n	80184d8 <vPortValidateInterruptPriority+0x60>
	}
 80184da:	bf00      	nop
 80184dc:	3714      	adds	r7, #20
 80184de:	46bd      	mov	sp, r7
 80184e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184e4:	4770      	bx	lr
 80184e6:	bf00      	nop
 80184e8:	e000e3f0 	.word	0xe000e3f0
 80184ec:	2400a394 	.word	0x2400a394
 80184f0:	e000ed0c 	.word	0xe000ed0c
 80184f4:	2400a398 	.word	0x2400a398

080184f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80184f8:	b580      	push	{r7, lr}
 80184fa:	b08a      	sub	sp, #40	; 0x28
 80184fc:	af00      	add	r7, sp, #0
 80184fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8018500:	2300      	movs	r3, #0
 8018502:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8018504:	f7fe fcd0 	bl	8016ea8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8018508:	4b5b      	ldr	r3, [pc, #364]	; (8018678 <pvPortMalloc+0x180>)
 801850a:	681b      	ldr	r3, [r3, #0]
 801850c:	2b00      	cmp	r3, #0
 801850e:	d101      	bne.n	8018514 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8018510:	f000 f920 	bl	8018754 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8018514:	4b59      	ldr	r3, [pc, #356]	; (801867c <pvPortMalloc+0x184>)
 8018516:	681a      	ldr	r2, [r3, #0]
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	4013      	ands	r3, r2
 801851c:	2b00      	cmp	r3, #0
 801851e:	f040 8093 	bne.w	8018648 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8018522:	687b      	ldr	r3, [r7, #4]
 8018524:	2b00      	cmp	r3, #0
 8018526:	d01d      	beq.n	8018564 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8018528:	2208      	movs	r2, #8
 801852a:	687b      	ldr	r3, [r7, #4]
 801852c:	4413      	add	r3, r2
 801852e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8018530:	687b      	ldr	r3, [r7, #4]
 8018532:	f003 0307 	and.w	r3, r3, #7
 8018536:	2b00      	cmp	r3, #0
 8018538:	d014      	beq.n	8018564 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801853a:	687b      	ldr	r3, [r7, #4]
 801853c:	f023 0307 	bic.w	r3, r3, #7
 8018540:	3308      	adds	r3, #8
 8018542:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018544:	687b      	ldr	r3, [r7, #4]
 8018546:	f003 0307 	and.w	r3, r3, #7
 801854a:	2b00      	cmp	r3, #0
 801854c:	d00a      	beq.n	8018564 <pvPortMalloc+0x6c>
	__asm volatile
 801854e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018552:	f383 8811 	msr	BASEPRI, r3
 8018556:	f3bf 8f6f 	isb	sy
 801855a:	f3bf 8f4f 	dsb	sy
 801855e:	617b      	str	r3, [r7, #20]
}
 8018560:	bf00      	nop
 8018562:	e7fe      	b.n	8018562 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8018564:	687b      	ldr	r3, [r7, #4]
 8018566:	2b00      	cmp	r3, #0
 8018568:	d06e      	beq.n	8018648 <pvPortMalloc+0x150>
 801856a:	4b45      	ldr	r3, [pc, #276]	; (8018680 <pvPortMalloc+0x188>)
 801856c:	681b      	ldr	r3, [r3, #0]
 801856e:	687a      	ldr	r2, [r7, #4]
 8018570:	429a      	cmp	r2, r3
 8018572:	d869      	bhi.n	8018648 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8018574:	4b43      	ldr	r3, [pc, #268]	; (8018684 <pvPortMalloc+0x18c>)
 8018576:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8018578:	4b42      	ldr	r3, [pc, #264]	; (8018684 <pvPortMalloc+0x18c>)
 801857a:	681b      	ldr	r3, [r3, #0]
 801857c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801857e:	e004      	b.n	801858a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8018580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018582:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8018584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018586:	681b      	ldr	r3, [r3, #0]
 8018588:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801858a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801858c:	685b      	ldr	r3, [r3, #4]
 801858e:	687a      	ldr	r2, [r7, #4]
 8018590:	429a      	cmp	r2, r3
 8018592:	d903      	bls.n	801859c <pvPortMalloc+0xa4>
 8018594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018596:	681b      	ldr	r3, [r3, #0]
 8018598:	2b00      	cmp	r3, #0
 801859a:	d1f1      	bne.n	8018580 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801859c:	4b36      	ldr	r3, [pc, #216]	; (8018678 <pvPortMalloc+0x180>)
 801859e:	681b      	ldr	r3, [r3, #0]
 80185a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80185a2:	429a      	cmp	r2, r3
 80185a4:	d050      	beq.n	8018648 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80185a6:	6a3b      	ldr	r3, [r7, #32]
 80185a8:	681b      	ldr	r3, [r3, #0]
 80185aa:	2208      	movs	r2, #8
 80185ac:	4413      	add	r3, r2
 80185ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80185b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185b2:	681a      	ldr	r2, [r3, #0]
 80185b4:	6a3b      	ldr	r3, [r7, #32]
 80185b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80185b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185ba:	685a      	ldr	r2, [r3, #4]
 80185bc:	687b      	ldr	r3, [r7, #4]
 80185be:	1ad2      	subs	r2, r2, r3
 80185c0:	2308      	movs	r3, #8
 80185c2:	005b      	lsls	r3, r3, #1
 80185c4:	429a      	cmp	r2, r3
 80185c6:	d91f      	bls.n	8018608 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80185c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80185ca:	687b      	ldr	r3, [r7, #4]
 80185cc:	4413      	add	r3, r2
 80185ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80185d0:	69bb      	ldr	r3, [r7, #24]
 80185d2:	f003 0307 	and.w	r3, r3, #7
 80185d6:	2b00      	cmp	r3, #0
 80185d8:	d00a      	beq.n	80185f0 <pvPortMalloc+0xf8>
	__asm volatile
 80185da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80185de:	f383 8811 	msr	BASEPRI, r3
 80185e2:	f3bf 8f6f 	isb	sy
 80185e6:	f3bf 8f4f 	dsb	sy
 80185ea:	613b      	str	r3, [r7, #16]
}
 80185ec:	bf00      	nop
 80185ee:	e7fe      	b.n	80185ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80185f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185f2:	685a      	ldr	r2, [r3, #4]
 80185f4:	687b      	ldr	r3, [r7, #4]
 80185f6:	1ad2      	subs	r2, r2, r3
 80185f8:	69bb      	ldr	r3, [r7, #24]
 80185fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80185fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185fe:	687a      	ldr	r2, [r7, #4]
 8018600:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8018602:	69b8      	ldr	r0, [r7, #24]
 8018604:	f000 f908 	bl	8018818 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8018608:	4b1d      	ldr	r3, [pc, #116]	; (8018680 <pvPortMalloc+0x188>)
 801860a:	681a      	ldr	r2, [r3, #0]
 801860c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801860e:	685b      	ldr	r3, [r3, #4]
 8018610:	1ad3      	subs	r3, r2, r3
 8018612:	4a1b      	ldr	r2, [pc, #108]	; (8018680 <pvPortMalloc+0x188>)
 8018614:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8018616:	4b1a      	ldr	r3, [pc, #104]	; (8018680 <pvPortMalloc+0x188>)
 8018618:	681a      	ldr	r2, [r3, #0]
 801861a:	4b1b      	ldr	r3, [pc, #108]	; (8018688 <pvPortMalloc+0x190>)
 801861c:	681b      	ldr	r3, [r3, #0]
 801861e:	429a      	cmp	r2, r3
 8018620:	d203      	bcs.n	801862a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8018622:	4b17      	ldr	r3, [pc, #92]	; (8018680 <pvPortMalloc+0x188>)
 8018624:	681b      	ldr	r3, [r3, #0]
 8018626:	4a18      	ldr	r2, [pc, #96]	; (8018688 <pvPortMalloc+0x190>)
 8018628:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801862a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801862c:	685a      	ldr	r2, [r3, #4]
 801862e:	4b13      	ldr	r3, [pc, #76]	; (801867c <pvPortMalloc+0x184>)
 8018630:	681b      	ldr	r3, [r3, #0]
 8018632:	431a      	orrs	r2, r3
 8018634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018636:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8018638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801863a:	2200      	movs	r2, #0
 801863c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801863e:	4b13      	ldr	r3, [pc, #76]	; (801868c <pvPortMalloc+0x194>)
 8018640:	681b      	ldr	r3, [r3, #0]
 8018642:	3301      	adds	r3, #1
 8018644:	4a11      	ldr	r2, [pc, #68]	; (801868c <pvPortMalloc+0x194>)
 8018646:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8018648:	f7fe fc3c 	bl	8016ec4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801864c:	69fb      	ldr	r3, [r7, #28]
 801864e:	f003 0307 	and.w	r3, r3, #7
 8018652:	2b00      	cmp	r3, #0
 8018654:	d00a      	beq.n	801866c <pvPortMalloc+0x174>
	__asm volatile
 8018656:	f04f 0350 	mov.w	r3, #80	; 0x50
 801865a:	f383 8811 	msr	BASEPRI, r3
 801865e:	f3bf 8f6f 	isb	sy
 8018662:	f3bf 8f4f 	dsb	sy
 8018666:	60fb      	str	r3, [r7, #12]
}
 8018668:	bf00      	nop
 801866a:	e7fe      	b.n	801866a <pvPortMalloc+0x172>
	return pvReturn;
 801866c:	69fb      	ldr	r3, [r7, #28]
}
 801866e:	4618      	mov	r0, r3
 8018670:	3728      	adds	r7, #40	; 0x28
 8018672:	46bd      	mov	sp, r7
 8018674:	bd80      	pop	{r7, pc}
 8018676:	bf00      	nop
 8018678:	2400dfa4 	.word	0x2400dfa4
 801867c:	2400dfb8 	.word	0x2400dfb8
 8018680:	2400dfa8 	.word	0x2400dfa8
 8018684:	2400df9c 	.word	0x2400df9c
 8018688:	2400dfac 	.word	0x2400dfac
 801868c:	2400dfb0 	.word	0x2400dfb0

08018690 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8018690:	b580      	push	{r7, lr}
 8018692:	b086      	sub	sp, #24
 8018694:	af00      	add	r7, sp, #0
 8018696:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8018698:	687b      	ldr	r3, [r7, #4]
 801869a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801869c:	687b      	ldr	r3, [r7, #4]
 801869e:	2b00      	cmp	r3, #0
 80186a0:	d04d      	beq.n	801873e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80186a2:	2308      	movs	r3, #8
 80186a4:	425b      	negs	r3, r3
 80186a6:	697a      	ldr	r2, [r7, #20]
 80186a8:	4413      	add	r3, r2
 80186aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80186ac:	697b      	ldr	r3, [r7, #20]
 80186ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80186b0:	693b      	ldr	r3, [r7, #16]
 80186b2:	685a      	ldr	r2, [r3, #4]
 80186b4:	4b24      	ldr	r3, [pc, #144]	; (8018748 <vPortFree+0xb8>)
 80186b6:	681b      	ldr	r3, [r3, #0]
 80186b8:	4013      	ands	r3, r2
 80186ba:	2b00      	cmp	r3, #0
 80186bc:	d10a      	bne.n	80186d4 <vPortFree+0x44>
	__asm volatile
 80186be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186c2:	f383 8811 	msr	BASEPRI, r3
 80186c6:	f3bf 8f6f 	isb	sy
 80186ca:	f3bf 8f4f 	dsb	sy
 80186ce:	60fb      	str	r3, [r7, #12]
}
 80186d0:	bf00      	nop
 80186d2:	e7fe      	b.n	80186d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80186d4:	693b      	ldr	r3, [r7, #16]
 80186d6:	681b      	ldr	r3, [r3, #0]
 80186d8:	2b00      	cmp	r3, #0
 80186da:	d00a      	beq.n	80186f2 <vPortFree+0x62>
	__asm volatile
 80186dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186e0:	f383 8811 	msr	BASEPRI, r3
 80186e4:	f3bf 8f6f 	isb	sy
 80186e8:	f3bf 8f4f 	dsb	sy
 80186ec:	60bb      	str	r3, [r7, #8]
}
 80186ee:	bf00      	nop
 80186f0:	e7fe      	b.n	80186f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80186f2:	693b      	ldr	r3, [r7, #16]
 80186f4:	685a      	ldr	r2, [r3, #4]
 80186f6:	4b14      	ldr	r3, [pc, #80]	; (8018748 <vPortFree+0xb8>)
 80186f8:	681b      	ldr	r3, [r3, #0]
 80186fa:	4013      	ands	r3, r2
 80186fc:	2b00      	cmp	r3, #0
 80186fe:	d01e      	beq.n	801873e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8018700:	693b      	ldr	r3, [r7, #16]
 8018702:	681b      	ldr	r3, [r3, #0]
 8018704:	2b00      	cmp	r3, #0
 8018706:	d11a      	bne.n	801873e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8018708:	693b      	ldr	r3, [r7, #16]
 801870a:	685a      	ldr	r2, [r3, #4]
 801870c:	4b0e      	ldr	r3, [pc, #56]	; (8018748 <vPortFree+0xb8>)
 801870e:	681b      	ldr	r3, [r3, #0]
 8018710:	43db      	mvns	r3, r3
 8018712:	401a      	ands	r2, r3
 8018714:	693b      	ldr	r3, [r7, #16]
 8018716:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8018718:	f7fe fbc6 	bl	8016ea8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801871c:	693b      	ldr	r3, [r7, #16]
 801871e:	685a      	ldr	r2, [r3, #4]
 8018720:	4b0a      	ldr	r3, [pc, #40]	; (801874c <vPortFree+0xbc>)
 8018722:	681b      	ldr	r3, [r3, #0]
 8018724:	4413      	add	r3, r2
 8018726:	4a09      	ldr	r2, [pc, #36]	; (801874c <vPortFree+0xbc>)
 8018728:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801872a:	6938      	ldr	r0, [r7, #16]
 801872c:	f000 f874 	bl	8018818 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8018730:	4b07      	ldr	r3, [pc, #28]	; (8018750 <vPortFree+0xc0>)
 8018732:	681b      	ldr	r3, [r3, #0]
 8018734:	3301      	adds	r3, #1
 8018736:	4a06      	ldr	r2, [pc, #24]	; (8018750 <vPortFree+0xc0>)
 8018738:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801873a:	f7fe fbc3 	bl	8016ec4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801873e:	bf00      	nop
 8018740:	3718      	adds	r7, #24
 8018742:	46bd      	mov	sp, r7
 8018744:	bd80      	pop	{r7, pc}
 8018746:	bf00      	nop
 8018748:	2400dfb8 	.word	0x2400dfb8
 801874c:	2400dfa8 	.word	0x2400dfa8
 8018750:	2400dfb4 	.word	0x2400dfb4

08018754 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8018754:	b480      	push	{r7}
 8018756:	b085      	sub	sp, #20
 8018758:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801875a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801875e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8018760:	4b27      	ldr	r3, [pc, #156]	; (8018800 <prvHeapInit+0xac>)
 8018762:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8018764:	68fb      	ldr	r3, [r7, #12]
 8018766:	f003 0307 	and.w	r3, r3, #7
 801876a:	2b00      	cmp	r3, #0
 801876c:	d00c      	beq.n	8018788 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801876e:	68fb      	ldr	r3, [r7, #12]
 8018770:	3307      	adds	r3, #7
 8018772:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018774:	68fb      	ldr	r3, [r7, #12]
 8018776:	f023 0307 	bic.w	r3, r3, #7
 801877a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801877c:	68ba      	ldr	r2, [r7, #8]
 801877e:	68fb      	ldr	r3, [r7, #12]
 8018780:	1ad3      	subs	r3, r2, r3
 8018782:	4a1f      	ldr	r2, [pc, #124]	; (8018800 <prvHeapInit+0xac>)
 8018784:	4413      	add	r3, r2
 8018786:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8018788:	68fb      	ldr	r3, [r7, #12]
 801878a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801878c:	4a1d      	ldr	r2, [pc, #116]	; (8018804 <prvHeapInit+0xb0>)
 801878e:	687b      	ldr	r3, [r7, #4]
 8018790:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8018792:	4b1c      	ldr	r3, [pc, #112]	; (8018804 <prvHeapInit+0xb0>)
 8018794:	2200      	movs	r2, #0
 8018796:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8018798:	687b      	ldr	r3, [r7, #4]
 801879a:	68ba      	ldr	r2, [r7, #8]
 801879c:	4413      	add	r3, r2
 801879e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80187a0:	2208      	movs	r2, #8
 80187a2:	68fb      	ldr	r3, [r7, #12]
 80187a4:	1a9b      	subs	r3, r3, r2
 80187a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80187a8:	68fb      	ldr	r3, [r7, #12]
 80187aa:	f023 0307 	bic.w	r3, r3, #7
 80187ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80187b0:	68fb      	ldr	r3, [r7, #12]
 80187b2:	4a15      	ldr	r2, [pc, #84]	; (8018808 <prvHeapInit+0xb4>)
 80187b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80187b6:	4b14      	ldr	r3, [pc, #80]	; (8018808 <prvHeapInit+0xb4>)
 80187b8:	681b      	ldr	r3, [r3, #0]
 80187ba:	2200      	movs	r2, #0
 80187bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80187be:	4b12      	ldr	r3, [pc, #72]	; (8018808 <prvHeapInit+0xb4>)
 80187c0:	681b      	ldr	r3, [r3, #0]
 80187c2:	2200      	movs	r2, #0
 80187c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80187c6:	687b      	ldr	r3, [r7, #4]
 80187c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80187ca:	683b      	ldr	r3, [r7, #0]
 80187cc:	68fa      	ldr	r2, [r7, #12]
 80187ce:	1ad2      	subs	r2, r2, r3
 80187d0:	683b      	ldr	r3, [r7, #0]
 80187d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80187d4:	4b0c      	ldr	r3, [pc, #48]	; (8018808 <prvHeapInit+0xb4>)
 80187d6:	681a      	ldr	r2, [r3, #0]
 80187d8:	683b      	ldr	r3, [r7, #0]
 80187da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80187dc:	683b      	ldr	r3, [r7, #0]
 80187de:	685b      	ldr	r3, [r3, #4]
 80187e0:	4a0a      	ldr	r2, [pc, #40]	; (801880c <prvHeapInit+0xb8>)
 80187e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80187e4:	683b      	ldr	r3, [r7, #0]
 80187e6:	685b      	ldr	r3, [r3, #4]
 80187e8:	4a09      	ldr	r2, [pc, #36]	; (8018810 <prvHeapInit+0xbc>)
 80187ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80187ec:	4b09      	ldr	r3, [pc, #36]	; (8018814 <prvHeapInit+0xc0>)
 80187ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80187f2:	601a      	str	r2, [r3, #0]
}
 80187f4:	bf00      	nop
 80187f6:	3714      	adds	r7, #20
 80187f8:	46bd      	mov	sp, r7
 80187fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187fe:	4770      	bx	lr
 8018800:	2400a39c 	.word	0x2400a39c
 8018804:	2400df9c 	.word	0x2400df9c
 8018808:	2400dfa4 	.word	0x2400dfa4
 801880c:	2400dfac 	.word	0x2400dfac
 8018810:	2400dfa8 	.word	0x2400dfa8
 8018814:	2400dfb8 	.word	0x2400dfb8

08018818 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8018818:	b480      	push	{r7}
 801881a:	b085      	sub	sp, #20
 801881c:	af00      	add	r7, sp, #0
 801881e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8018820:	4b28      	ldr	r3, [pc, #160]	; (80188c4 <prvInsertBlockIntoFreeList+0xac>)
 8018822:	60fb      	str	r3, [r7, #12]
 8018824:	e002      	b.n	801882c <prvInsertBlockIntoFreeList+0x14>
 8018826:	68fb      	ldr	r3, [r7, #12]
 8018828:	681b      	ldr	r3, [r3, #0]
 801882a:	60fb      	str	r3, [r7, #12]
 801882c:	68fb      	ldr	r3, [r7, #12]
 801882e:	681b      	ldr	r3, [r3, #0]
 8018830:	687a      	ldr	r2, [r7, #4]
 8018832:	429a      	cmp	r2, r3
 8018834:	d8f7      	bhi.n	8018826 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8018836:	68fb      	ldr	r3, [r7, #12]
 8018838:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801883a:	68fb      	ldr	r3, [r7, #12]
 801883c:	685b      	ldr	r3, [r3, #4]
 801883e:	68ba      	ldr	r2, [r7, #8]
 8018840:	4413      	add	r3, r2
 8018842:	687a      	ldr	r2, [r7, #4]
 8018844:	429a      	cmp	r2, r3
 8018846:	d108      	bne.n	801885a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8018848:	68fb      	ldr	r3, [r7, #12]
 801884a:	685a      	ldr	r2, [r3, #4]
 801884c:	687b      	ldr	r3, [r7, #4]
 801884e:	685b      	ldr	r3, [r3, #4]
 8018850:	441a      	add	r2, r3
 8018852:	68fb      	ldr	r3, [r7, #12]
 8018854:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8018856:	68fb      	ldr	r3, [r7, #12]
 8018858:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801885a:	687b      	ldr	r3, [r7, #4]
 801885c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801885e:	687b      	ldr	r3, [r7, #4]
 8018860:	685b      	ldr	r3, [r3, #4]
 8018862:	68ba      	ldr	r2, [r7, #8]
 8018864:	441a      	add	r2, r3
 8018866:	68fb      	ldr	r3, [r7, #12]
 8018868:	681b      	ldr	r3, [r3, #0]
 801886a:	429a      	cmp	r2, r3
 801886c:	d118      	bne.n	80188a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801886e:	68fb      	ldr	r3, [r7, #12]
 8018870:	681a      	ldr	r2, [r3, #0]
 8018872:	4b15      	ldr	r3, [pc, #84]	; (80188c8 <prvInsertBlockIntoFreeList+0xb0>)
 8018874:	681b      	ldr	r3, [r3, #0]
 8018876:	429a      	cmp	r2, r3
 8018878:	d00d      	beq.n	8018896 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801887a:	687b      	ldr	r3, [r7, #4]
 801887c:	685a      	ldr	r2, [r3, #4]
 801887e:	68fb      	ldr	r3, [r7, #12]
 8018880:	681b      	ldr	r3, [r3, #0]
 8018882:	685b      	ldr	r3, [r3, #4]
 8018884:	441a      	add	r2, r3
 8018886:	687b      	ldr	r3, [r7, #4]
 8018888:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801888a:	68fb      	ldr	r3, [r7, #12]
 801888c:	681b      	ldr	r3, [r3, #0]
 801888e:	681a      	ldr	r2, [r3, #0]
 8018890:	687b      	ldr	r3, [r7, #4]
 8018892:	601a      	str	r2, [r3, #0]
 8018894:	e008      	b.n	80188a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8018896:	4b0c      	ldr	r3, [pc, #48]	; (80188c8 <prvInsertBlockIntoFreeList+0xb0>)
 8018898:	681a      	ldr	r2, [r3, #0]
 801889a:	687b      	ldr	r3, [r7, #4]
 801889c:	601a      	str	r2, [r3, #0]
 801889e:	e003      	b.n	80188a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80188a0:	68fb      	ldr	r3, [r7, #12]
 80188a2:	681a      	ldr	r2, [r3, #0]
 80188a4:	687b      	ldr	r3, [r7, #4]
 80188a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80188a8:	68fa      	ldr	r2, [r7, #12]
 80188aa:	687b      	ldr	r3, [r7, #4]
 80188ac:	429a      	cmp	r2, r3
 80188ae:	d002      	beq.n	80188b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80188b0:	68fb      	ldr	r3, [r7, #12]
 80188b2:	687a      	ldr	r2, [r7, #4]
 80188b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80188b6:	bf00      	nop
 80188b8:	3714      	adds	r7, #20
 80188ba:	46bd      	mov	sp, r7
 80188bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188c0:	4770      	bx	lr
 80188c2:	bf00      	nop
 80188c4:	2400df9c 	.word	0x2400df9c
 80188c8:	2400dfa4 	.word	0x2400dfa4

080188cc <Bmx160_init>:
const float gyroRange = Bmx160_GYRO_SENSITIVITY_250DPS;

sBmx160Dev_t Obmx160;

void Bmx160_init()
{
 80188cc:	b580      	push	{r7, lr}
 80188ce:	af00      	add	r7, sp, #0
    Obmx160.delayMs = HAL_Delay;
 80188d0:	4b04      	ldr	r3, [pc, #16]	; (80188e4 <Bmx160_init+0x18>)
 80188d2:	4a05      	ldr	r2, [pc, #20]	; (80188e8 <Bmx160_init+0x1c>)
 80188d4:	621a      	str	r2, [r3, #32]
    Bmx160_begin();
 80188d6:	f000 f809 	bl	80188ec <Bmx160_begin>
    DelayUs(100);
 80188da:	2064      	movs	r0, #100	; 0x64
 80188dc:	f000 fa4e 	bl	8018d7c <DelayUs>
}
 80188e0:	bf00      	nop
 80188e2:	bd80      	pop	{r7, pc}
 80188e4:	2400dfbc 	.word	0x2400dfbc
 80188e8:	08001e21 	.word	0x08001e21

080188ec <Bmx160_begin>:

uint8_t Bmx160_begin()
{
 80188ec:	b580      	push	{r7, lr}
 80188ee:	af00      	add	r7, sp, #0
    if (Bmx160_scan() == TRUE){
 80188f0:	f000 fa3b 	bl	8018d6a <Bmx160_scan>
 80188f4:	4603      	mov	r3, r0
 80188f6:	2b01      	cmp	r3, #1
 80188f8:	d11d      	bne.n	8018936 <Bmx160_begin+0x4a>
        Bmx160_softReset_();
 80188fa:	f000 f821 	bl	8018940 <Bmx160_softReset_>
        Bmx160_writeBmxReg(Bmx160_COMMAND_REG_ADDR, 0x11);
 80188fe:	2111      	movs	r1, #17
 8018900:	207e      	movs	r0, #126	; 0x7e
 8018902:	f000 f9f9 	bl	8018cf8 <Bmx160_writeBmxReg>
        Obmx160.delayMs(50);
 8018906:	4b0d      	ldr	r3, [pc, #52]	; (801893c <Bmx160_begin+0x50>)
 8018908:	6a1b      	ldr	r3, [r3, #32]
 801890a:	2032      	movs	r0, #50	; 0x32
 801890c:	4798      	blx	r3
        /* Set gyro to normal mode */
        Bmx160_writeBmxReg(Bmx160_COMMAND_REG_ADDR, 0x15);
 801890e:	2115      	movs	r1, #21
 8018910:	207e      	movs	r0, #126	; 0x7e
 8018912:	f000 f9f1 	bl	8018cf8 <Bmx160_writeBmxReg>
        Obmx160.delayMs(100);
 8018916:	4b09      	ldr	r3, [pc, #36]	; (801893c <Bmx160_begin+0x50>)
 8018918:	6a1b      	ldr	r3, [r3, #32]
 801891a:	2064      	movs	r0, #100	; 0x64
 801891c:	4798      	blx	r3
        /* Set mag to normal mode */
        Bmx160_writeBmxReg(Bmx160_COMMAND_REG_ADDR, 0x19);
 801891e:	2119      	movs	r1, #25
 8018920:	207e      	movs	r0, #126	; 0x7e
 8018922:	f000 f9e9 	bl	8018cf8 <Bmx160_writeBmxReg>
        Obmx160.delayMs(10);
 8018926:	4b05      	ldr	r3, [pc, #20]	; (801893c <Bmx160_begin+0x50>)
 8018928:	6a1b      	ldr	r3, [r3, #32]
 801892a:	200a      	movs	r0, #10
 801892c:	4798      	blx	r3
        Bmx160_setMagnConf();
 801892e:	f000 f873 	bl	8018a18 <Bmx160_setMagnConf>
        return TRUE;
 8018932:	2301      	movs	r3, #1
 8018934:	e000      	b.n	8018938 <Bmx160_begin+0x4c>
    }
    else
        return FALSE;
 8018936:	2300      	movs	r3, #0
}
 8018938:	4618      	mov	r0, r3
 801893a:	bd80      	pop	{r7, pc}
 801893c:	2400dfbc 	.word	0x2400dfbc

08018940 <Bmx160_softReset_>:
    Bmx160_writeBmxReg(Bmx160_COMMAND_REG_ADDR, 0x19);
    Obmx160.delayMs(100);
}

uint8_t Bmx160_softReset_()
{
 8018940:	b580      	push	{r7, lr}
 8018942:	b082      	sub	sp, #8
 8018944:	af00      	add	r7, sp, #0
  int8_t rslt=Bmx160_OK;
 8018946:	2300      	movs	r3, #0
 8018948:	71fb      	strb	r3, [r7, #7]
  rslt = Bmx160_softReset(&Obmx160);
 801894a:	4808      	ldr	r0, [pc, #32]	; (801896c <Bmx160_softReset_+0x2c>)
 801894c:	f000 f810 	bl	8018970 <Bmx160_softReset>
 8018950:	4603      	mov	r3, r0
 8018952:	71fb      	strb	r3, [r7, #7]
  if (rslt == 0)
 8018954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018958:	2b00      	cmp	r3, #0
 801895a:	d101      	bne.n	8018960 <Bmx160_softReset_+0x20>
    return TRUE;
 801895c:	2301      	movs	r3, #1
 801895e:	e000      	b.n	8018962 <Bmx160_softReset_+0x22>
  else
    return FALSE;
 8018960:	2300      	movs	r3, #0
}
 8018962:	4618      	mov	r0, r3
 8018964:	3708      	adds	r7, #8
 8018966:	46bd      	mov	sp, r7
 8018968:	bd80      	pop	{r7, pc}
 801896a:	bf00      	nop
 801896c:	2400dfbc 	.word	0x2400dfbc

08018970 <Bmx160_softReset>:

int8_t Bmx160_softReset(sBmx160Dev_t *dev)
{
 8018970:	b580      	push	{r7, lr}
 8018972:	b084      	sub	sp, #16
 8018974:	af00      	add	r7, sp, #0
 8018976:	6078      	str	r0, [r7, #4]
  int8_t rslt=Bmx160_OK;
 8018978:	2300      	movs	r3, #0
 801897a:	73fb      	strb	r3, [r7, #15]
  uint8_t data = Bmx160_SOFT_RESET_CMD;
 801897c:	23b6      	movs	r3, #182	; 0xb6
 801897e:	73bb      	strb	r3, [r7, #14]
  if (dev==NULL){
 8018980:	687b      	ldr	r3, [r7, #4]
 8018982:	2b00      	cmp	r3, #0
 8018984:	d101      	bne.n	801898a <Bmx160_softReset+0x1a>
    rslt = Bmx160_E_NULL_PTR;
 8018986:	23ff      	movs	r3, #255	; 0xff
 8018988:	73fb      	strb	r3, [r7, #15]
  }
  Bmx160_writeBmxReg(Bmx160_COMMAND_REG_ADDR, data);
 801898a:	7bbb      	ldrb	r3, [r7, #14]
 801898c:	4619      	mov	r1, r3
 801898e:	207e      	movs	r0, #126	; 0x7e
 8018990:	f000 f9b2 	bl	8018cf8 <Bmx160_writeBmxReg>
  Obmx160.delayMs(Bmx160_SOFT_RESET_DELAY_MS);
 8018994:	4b08      	ldr	r3, [pc, #32]	; (80189b8 <Bmx160_softReset+0x48>)
 8018996:	6a1b      	ldr	r3, [r3, #32]
 8018998:	200f      	movs	r0, #15
 801899a:	4798      	blx	r3
  if (rslt == Bmx160_OK){
 801899c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80189a0:	2b00      	cmp	r3, #0
 80189a2:	d102      	bne.n	80189aa <Bmx160_softReset+0x3a>
    Bmx160_defaultParamSettg(dev);
 80189a4:	6878      	ldr	r0, [r7, #4]
 80189a6:	f000 f809 	bl	80189bc <Bmx160_defaultParamSettg>
  }
  return rslt;
 80189aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80189ae:	4618      	mov	r0, r3
 80189b0:	3710      	adds	r7, #16
 80189b2:	46bd      	mov	sp, r7
 80189b4:	bd80      	pop	{r7, pc}
 80189b6:	bf00      	nop
 80189b8:	2400dfbc 	.word	0x2400dfbc

080189bc <Bmx160_defaultParamSettg>:

void Bmx160_defaultParamSettg(sBmx160Dev_t *dev)
{
 80189bc:	b480      	push	{r7}
 80189be:	b083      	sub	sp, #12
 80189c0:	af00      	add	r7, sp, #0
 80189c2:	6078      	str	r0, [r7, #4]
  // Initializing accel and gyro params with
  dev->gyroCfg.bw = Bmx160_GYRO_BW_NORMAL_MODE;
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	2202      	movs	r2, #2
 80189c8:	75da      	strb	r2, [r3, #23]
  dev->gyroCfg.odr = Bmx160_GYRO_ODR_100HZ;
 80189ca:	687b      	ldr	r3, [r7, #4]
 80189cc:	2208      	movs	r2, #8
 80189ce:	755a      	strb	r2, [r3, #21]
  dev->gyroCfg.power = Bmx160_GYRO_SUSPEND_MODE;
 80189d0:	687b      	ldr	r3, [r7, #4]
 80189d2:	2214      	movs	r2, #20
 80189d4:	751a      	strb	r2, [r3, #20]
  dev->gyroCfg.range = Bmx160_GYRO_RANGE_250_DPS;
 80189d6:	687b      	ldr	r3, [r7, #4]
 80189d8:	2203      	movs	r2, #3
 80189da:	759a      	strb	r2, [r3, #22]
  dev->accelCfg.bw = Bmx160_ACCEL_BW_NORMAL_AVG4;
 80189dc:	687b      	ldr	r3, [r7, #4]
 80189de:	2202      	movs	r2, #2
 80189e0:	73da      	strb	r2, [r3, #15]
  dev->accelCfg.odr = Bmx160_ACCEL_ODR_100HZ;
 80189e2:	687b      	ldr	r3, [r7, #4]
 80189e4:	2208      	movs	r2, #8
 80189e6:	735a      	strb	r2, [r3, #13]
  dev->accelCfg.power = Bmx160_ACCEL_SUSPEND_MODE;
 80189e8:	687b      	ldr	r3, [r7, #4]
 80189ea:	2210      	movs	r2, #16
 80189ec:	731a      	strb	r2, [r3, #12]
  dev->accelCfg.range = Bmx160_ACCEL_RANGE_2G;
 80189ee:	687b      	ldr	r3, [r7, #4]
 80189f0:	2203      	movs	r2, #3
 80189f2:	739a      	strb	r2, [r3, #14]


  dev->prevMagnCfg = dev->magnCfg;
 80189f4:	687b      	ldr	r3, [r7, #4]
 80189f6:	687a      	ldr	r2, [r7, #4]
 80189f8:	6852      	ldr	r2, [r2, #4]
 80189fa:	609a      	str	r2, [r3, #8]
  dev->prevGyroCfg = dev->gyroCfg;
 80189fc:	687b      	ldr	r3, [r7, #4]
 80189fe:	687a      	ldr	r2, [r7, #4]
 8018a00:	6952      	ldr	r2, [r2, #20]
 8018a02:	619a      	str	r2, [r3, #24]
  dev->prevAccelCfg = dev->accelCfg;
 8018a04:	687b      	ldr	r3, [r7, #4]
 8018a06:	687a      	ldr	r2, [r7, #4]
 8018a08:	68d2      	ldr	r2, [r2, #12]
 8018a0a:	611a      	str	r2, [r3, #16]
}
 8018a0c:	bf00      	nop
 8018a0e:	370c      	adds	r7, #12
 8018a10:	46bd      	mov	sp, r7
 8018a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a16:	4770      	bx	lr

08018a18 <Bmx160_setMagnConf>:

void Bmx160_setMagnConf()
{
 8018a18:	b580      	push	{r7, lr}
 8018a1a:	af00      	add	r7, sp, #0
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_0_ADDR, 0x80);
 8018a1c:	2180      	movs	r1, #128	; 0x80
 8018a1e:	204c      	movs	r0, #76	; 0x4c
 8018a20:	f000 f96a 	bl	8018cf8 <Bmx160_writeBmxReg>
    Obmx160.delayMs(150);
 8018a24:	4b1a      	ldr	r3, [pc, #104]	; (8018a90 <Bmx160_setMagnConf+0x78>)
 8018a26:	6a1b      	ldr	r3, [r3, #32]
 8018a28:	2096      	movs	r0, #150	; 0x96
 8018a2a:	4798      	blx	r3
    // Sleep mode
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_3_ADDR, 0x01);
 8018a2c:	2101      	movs	r1, #1
 8018a2e:	204f      	movs	r0, #79	; 0x4f
 8018a30:	f000 f962 	bl	8018cf8 <Bmx160_writeBmxReg>
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_2_ADDR, 0x4B);
 8018a34:	214b      	movs	r1, #75	; 0x4b
 8018a36:	204e      	movs	r0, #78	; 0x4e
 8018a38:	f000 f95e 	bl	8018cf8 <Bmx160_writeBmxReg>
    // REPXY regular preset
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_3_ADDR, 0x04);
 8018a3c:	2104      	movs	r1, #4
 8018a3e:	204f      	movs	r0, #79	; 0x4f
 8018a40:	f000 f95a 	bl	8018cf8 <Bmx160_writeBmxReg>
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_2_ADDR, 0x51);
 8018a44:	2151      	movs	r1, #81	; 0x51
 8018a46:	204e      	movs	r0, #78	; 0x4e
 8018a48:	f000 f956 	bl	8018cf8 <Bmx160_writeBmxReg>
    // REPZ regular preset
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_3_ADDR, 0x0E);
 8018a4c:	210e      	movs	r1, #14
 8018a4e:	204f      	movs	r0, #79	; 0x4f
 8018a50:	f000 f952 	bl	8018cf8 <Bmx160_writeBmxReg>
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_2_ADDR, 0x52);
 8018a54:	2152      	movs	r1, #82	; 0x52
 8018a56:	204e      	movs	r0, #78	; 0x4e
 8018a58:	f000 f94e 	bl	8018cf8 <Bmx160_writeBmxReg>

    Bmx160_writeBmxReg(Bmx160_MAGN_IF_3_ADDR, 0x02);
 8018a5c:	2102      	movs	r1, #2
 8018a5e:	204f      	movs	r0, #79	; 0x4f
 8018a60:	f000 f94a 	bl	8018cf8 <Bmx160_writeBmxReg>
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_2_ADDR, 0x4C);
 8018a64:	214c      	movs	r1, #76	; 0x4c
 8018a66:	204e      	movs	r0, #78	; 0x4e
 8018a68:	f000 f946 	bl	8018cf8 <Bmx160_writeBmxReg>
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_1_ADDR, 0x42);
 8018a6c:	2142      	movs	r1, #66	; 0x42
 8018a6e:	204d      	movs	r0, #77	; 0x4d
 8018a70:	f000 f942 	bl	8018cf8 <Bmx160_writeBmxReg>
    Bmx160_writeBmxReg(Bmx160_MAGN_CONFIG_ADDR, Bmx160_MAGN_ODR_100HZ);
 8018a74:	2108      	movs	r1, #8
 8018a76:	2044      	movs	r0, #68	; 0x44
 8018a78:	f000 f93e 	bl	8018cf8 <Bmx160_writeBmxReg>
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_0_ADDR, 0x03);
 8018a7c:	2103      	movs	r1, #3
 8018a7e:	204c      	movs	r0, #76	; 0x4c
 8018a80:	f000 f93a 	bl	8018cf8 <Bmx160_writeBmxReg>
    Obmx160.delayMs(150);
 8018a84:	4b02      	ldr	r3, [pc, #8]	; (8018a90 <Bmx160_setMagnConf+0x78>)
 8018a86:	6a1b      	ldr	r3, [r3, #32]
 8018a88:	2096      	movs	r0, #150	; 0x96
 8018a8a:	4798      	blx	r3
}
 8018a8c:	bf00      	nop
 8018a8e:	bd80      	pop	{r7, pc}
 8018a90:	2400dfbc 	.word	0x2400dfbc

08018a94 <Bmx160_getAllData>:

void Bmx160_getAllData(sBmx160SensorData_t *magn, sBmx160SensorData_t *gyro, sBmx160SensorData_t *accel){
 8018a94:	b580      	push	{r7, lr}
 8018a96:	b08e      	sub	sp, #56	; 0x38
 8018a98:	af00      	add	r7, sp, #0
 8018a9a:	60f8      	str	r0, [r7, #12]
 8018a9c:	60b9      	str	r1, [r7, #8]
 8018a9e:	607a      	str	r2, [r7, #4]

    uint8_t data[23] = {0};
 8018aa0:	2300      	movs	r3, #0
 8018aa2:	613b      	str	r3, [r7, #16]
 8018aa4:	f107 0314 	add.w	r3, r7, #20
 8018aa8:	2200      	movs	r2, #0
 8018aaa:	601a      	str	r2, [r3, #0]
 8018aac:	605a      	str	r2, [r3, #4]
 8018aae:	609a      	str	r2, [r3, #8]
 8018ab0:	60da      	str	r2, [r3, #12]
 8018ab2:	f8c3 200f 	str.w	r2, [r3, #15]
    int16_t x=0,y=0,z=0;
 8018ab6:	2300      	movs	r3, #0
 8018ab8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8018aba:	2300      	movs	r3, #0
 8018abc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8018abe:	2300      	movs	r3, #0
 8018ac0:	867b      	strh	r3, [r7, #50]	; 0x32
    static int16_t old_x=0, old_y=0, old_z=0;
    uint32_t time = 0;
 8018ac2:	2300      	movs	r3, #0
 8018ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
    float time_f;
    Bmx160_readReg(Bmx160_MAG_DATA_ADDR, data, 23);
 8018ac6:	f107 0310 	add.w	r3, r7, #16
 8018aca:	2217      	movs	r2, #23
 8018acc:	4619      	mov	r1, r3
 8018ace:	2004      	movs	r0, #4
 8018ad0:	f000 f939 	bl	8018d46 <Bmx160_readReg>
    time = (uint32_t) ((uint32_t)(((uint16_t)data[22] << 8) | data[21]) << 8 | data[20]);
 8018ad4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018ad8:	021b      	lsls	r3, r3, #8
 8018ada:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8018ade:	4313      	orrs	r3, r2
 8018ae0:	021b      	lsls	r3, r3, #8
 8018ae2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8018ae6:	4313      	orrs	r3, r2
 8018ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
    time_f = ((float)(time)) * 0.039f;
 8018aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018aec:	ee07 3a90 	vmov	s15, r3
 8018af0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018af4:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8018cd8 <Bmx160_getAllData+0x244>
 8018af8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018afc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    if(magn){
 8018b00:	68fb      	ldr	r3, [r7, #12]
 8018b02:	2b00      	cmp	r3, #0
 8018b04:	d05c      	beq.n	8018bc0 <Bmx160_getAllData+0x12c>
    	x = (int16_t) (((uint16_t)data[1] << 8) | data[0]);
 8018b06:	7c7b      	ldrb	r3, [r7, #17]
 8018b08:	021b      	lsls	r3, r3, #8
 8018b0a:	b21a      	sxth	r2, r3
 8018b0c:	7c3b      	ldrb	r3, [r7, #16]
 8018b0e:	b21b      	sxth	r3, r3
 8018b10:	4313      	orrs	r3, r2
 8018b12:	86fb      	strh	r3, [r7, #54]	; 0x36
        y = (int16_t) (((uint16_t)data[3] << 8) | data[2]);
 8018b14:	7cfb      	ldrb	r3, [r7, #19]
 8018b16:	021b      	lsls	r3, r3, #8
 8018b18:	b21a      	sxth	r2, r3
 8018b1a:	7cbb      	ldrb	r3, [r7, #18]
 8018b1c:	b21b      	sxth	r3, r3
 8018b1e:	4313      	orrs	r3, r2
 8018b20:	86bb      	strh	r3, [r7, #52]	; 0x34
        z = (int16_t) (((uint16_t)data[5] << 8) | data[4]);
 8018b22:	7d7b      	ldrb	r3, [r7, #21]
 8018b24:	021b      	lsls	r3, r3, #8
 8018b26:	b21a      	sxth	r2, r3
 8018b28:	7d3b      	ldrb	r3, [r7, #20]
 8018b2a:	b21b      	sxth	r3, r3
 8018b2c:	4313      	orrs	r3, r2
 8018b2e:	867b      	strh	r3, [r7, #50]	; 0x32
        if(x == old_x && y == old_y && z == old_z)
 8018b30:	4b6a      	ldr	r3, [pc, #424]	; (8018cdc <Bmx160_getAllData+0x248>)
 8018b32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018b36:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8018b3a:	429a      	cmp	r2, r3
 8018b3c:	d110      	bne.n	8018b60 <Bmx160_getAllData+0xcc>
 8018b3e:	4b68      	ldr	r3, [pc, #416]	; (8018ce0 <Bmx160_getAllData+0x24c>)
 8018b40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018b44:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8018b48:	429a      	cmp	r2, r3
 8018b4a:	d109      	bne.n	8018b60 <Bmx160_getAllData+0xcc>
 8018b4c:	4b65      	ldr	r3, [pc, #404]	; (8018ce4 <Bmx160_getAllData+0x250>)
 8018b4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018b52:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8018b56:	429a      	cmp	r2, r3
 8018b58:	d102      	bne.n	8018b60 <Bmx160_getAllData+0xcc>
        	//printf("ERROR: X: %d, Y: %d, Z: %d\n\r", x, y, z);
        old_x = x; old_y = y; old_z = z;
 8018b5a:	4a60      	ldr	r2, [pc, #384]	; (8018cdc <Bmx160_getAllData+0x248>)
 8018b5c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8018b5e:	8013      	strh	r3, [r2, #0]
 8018b60:	4a5f      	ldr	r2, [pc, #380]	; (8018ce0 <Bmx160_getAllData+0x24c>)
 8018b62:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018b64:	8013      	strh	r3, [r2, #0]
 8018b66:	4a5f      	ldr	r2, [pc, #380]	; (8018ce4 <Bmx160_getAllData+0x250>)
 8018b68:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8018b6a:	8013      	strh	r3, [r2, #0]
        //printf("Raw:%d,%d,%d,%d,%d,%d,%d,%d,%d\n\r", 0, 0, 0, 0, 0, 0, x, y, z);
        magn->x = x * Bmx160_MAGN_UT_LSB_XY;
 8018b6c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8018b70:	ee07 3a90 	vmov	s15, r3
 8018b74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018b78:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8018ce8 <Bmx160_getAllData+0x254>
 8018b7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018b80:	68fb      	ldr	r3, [r7, #12]
 8018b82:	edc3 7a00 	vstr	s15, [r3]
        magn->y = y * Bmx160_MAGN_UT_LSB_XY;
 8018b86:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8018b8a:	ee07 3a90 	vmov	s15, r3
 8018b8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018b92:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8018ce8 <Bmx160_getAllData+0x254>
 8018b96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018b9a:	68fb      	ldr	r3, [r7, #12]
 8018b9c:	edc3 7a01 	vstr	s15, [r3, #4]
        magn->z = z * Bmx160_MAGN_UT_LSB_Z;
 8018ba0:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8018ba4:	ee07 3a90 	vmov	s15, r3
 8018ba8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018bac:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8018cec <Bmx160_getAllData+0x258>
 8018bb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018bb4:	68fb      	ldr	r3, [r7, #12]
 8018bb6:	edc3 7a02 	vstr	s15, [r3, #8]
//        magn->x = x;
//		magn->y = y;
//		magn->z = z;
        magn->sensortime = time_f;
 8018bba:	68fb      	ldr	r3, [r7, #12]
 8018bbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018bbe:	60da      	str	r2, [r3, #12]
    }
    if(gyro){
 8018bc0:	68bb      	ldr	r3, [r7, #8]
 8018bc2:	2b00      	cmp	r3, #0
 8018bc4:	d03e      	beq.n	8018c44 <Bmx160_getAllData+0x1b0>
        x = (int16_t) (((uint16_t)data[9] << 8) | data[8]);
 8018bc6:	7e7b      	ldrb	r3, [r7, #25]
 8018bc8:	021b      	lsls	r3, r3, #8
 8018bca:	b21a      	sxth	r2, r3
 8018bcc:	7e3b      	ldrb	r3, [r7, #24]
 8018bce:	b21b      	sxth	r3, r3
 8018bd0:	4313      	orrs	r3, r2
 8018bd2:	86fb      	strh	r3, [r7, #54]	; 0x36
        y = (int16_t) (((uint16_t)data[11] << 8) | data[10]);
 8018bd4:	7efb      	ldrb	r3, [r7, #27]
 8018bd6:	021b      	lsls	r3, r3, #8
 8018bd8:	b21a      	sxth	r2, r3
 8018bda:	7ebb      	ldrb	r3, [r7, #26]
 8018bdc:	b21b      	sxth	r3, r3
 8018bde:	4313      	orrs	r3, r2
 8018be0:	86bb      	strh	r3, [r7, #52]	; 0x34
        z = (int16_t) (((uint16_t)data[13] << 8) | data[12]);
 8018be2:	7f7b      	ldrb	r3, [r7, #29]
 8018be4:	021b      	lsls	r3, r3, #8
 8018be6:	b21a      	sxth	r2, r3
 8018be8:	7f3b      	ldrb	r3, [r7, #28]
 8018bea:	b21b      	sxth	r3, r3
 8018bec:	4313      	orrs	r3, r2
 8018bee:	867b      	strh	r3, [r7, #50]	; 0x32
        gyro->x = x * gyroRange;
 8018bf0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8018bf4:	ee07 3a90 	vmov	s15, r3
 8018bf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018bfc:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8018cf0 <Bmx160_getAllData+0x25c>
 8018c00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018c04:	68bb      	ldr	r3, [r7, #8]
 8018c06:	edc3 7a00 	vstr	s15, [r3]
        gyro->y = y * gyroRange;
 8018c0a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8018c0e:	ee07 3a90 	vmov	s15, r3
 8018c12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018c16:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8018cf0 <Bmx160_getAllData+0x25c>
 8018c1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018c1e:	68bb      	ldr	r3, [r7, #8]
 8018c20:	edc3 7a01 	vstr	s15, [r3, #4]
        gyro->z = z * gyroRange;
 8018c24:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8018c28:	ee07 3a90 	vmov	s15, r3
 8018c2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018c30:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8018cf0 <Bmx160_getAllData+0x25c>
 8018c34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018c38:	68bb      	ldr	r3, [r7, #8]
 8018c3a:	edc3 7a02 	vstr	s15, [r3, #8]
        gyro->sensortime = time_f;
 8018c3e:	68bb      	ldr	r3, [r7, #8]
 8018c40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018c42:	60da      	str	r2, [r3, #12]
    }
    if(accel){
 8018c44:	687b      	ldr	r3, [r7, #4]
 8018c46:	2b00      	cmp	r3, #0
 8018c48:	d042      	beq.n	8018cd0 <Bmx160_getAllData+0x23c>
        x = (int16_t) (((uint16_t)data[15] << 8) | data[14]);
 8018c4a:	7ffb      	ldrb	r3, [r7, #31]
 8018c4c:	021b      	lsls	r3, r3, #8
 8018c4e:	b21a      	sxth	r2, r3
 8018c50:	7fbb      	ldrb	r3, [r7, #30]
 8018c52:	b21b      	sxth	r3, r3
 8018c54:	4313      	orrs	r3, r2
 8018c56:	86fb      	strh	r3, [r7, #54]	; 0x36
        y = (int16_t) (((uint16_t)data[17] << 8) | data[16]);
 8018c58:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8018c5c:	021b      	lsls	r3, r3, #8
 8018c5e:	b21a      	sxth	r2, r3
 8018c60:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018c64:	b21b      	sxth	r3, r3
 8018c66:	4313      	orrs	r3, r2
 8018c68:	86bb      	strh	r3, [r7, #52]	; 0x34
        z = (int16_t) (((uint16_t)data[19] << 8) | data[18]);
 8018c6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018c6e:	021b      	lsls	r3, r3, #8
 8018c70:	b21a      	sxth	r2, r3
 8018c72:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8018c76:	b21b      	sxth	r3, r3
 8018c78:	4313      	orrs	r3, r2
 8018c7a:	867b      	strh	r3, [r7, #50]	; 0x32
        accel->x = x * accelRange;
 8018c7c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8018c80:	ee07 3a90 	vmov	s15, r3
 8018c84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018c88:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8018cf4 <Bmx160_getAllData+0x260>
 8018c8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018c90:	687b      	ldr	r3, [r7, #4]
 8018c92:	edc3 7a00 	vstr	s15, [r3]
        accel->y = y * accelRange;
 8018c96:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8018c9a:	ee07 3a90 	vmov	s15, r3
 8018c9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018ca2:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8018cf4 <Bmx160_getAllData+0x260>
 8018ca6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018caa:	687b      	ldr	r3, [r7, #4]
 8018cac:	edc3 7a01 	vstr	s15, [r3, #4]
        accel->z = z * accelRange;
 8018cb0:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8018cb4:	ee07 3a90 	vmov	s15, r3
 8018cb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018cbc:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8018cf4 <Bmx160_getAllData+0x260>
 8018cc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018cc4:	687b      	ldr	r3, [r7, #4]
 8018cc6:	edc3 7a02 	vstr	s15, [r3, #8]
        accel->sensortime = time_f;
 8018cca:	687b      	ldr	r3, [r7, #4]
 8018ccc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018cce:	60da      	str	r2, [r3, #12]
    }
}
 8018cd0:	bf00      	nop
 8018cd2:	3738      	adds	r7, #56	; 0x38
 8018cd4:	46bd      	mov	sp, r7
 8018cd6:	bd80      	pop	{r7, pc}
 8018cd8:	3d1fbe77 	.word	0x3d1fbe77
 8018cdc:	2400dfe0 	.word	0x2400dfe0
 8018ce0:	2400dfe2 	.word	0x2400dfe2
 8018ce4:	2400dfe4 	.word	0x2400dfe4
 8018ce8:	3eb3b107 	.word	0x3eb3b107
 8018cec:	3fa2c3ca 	.word	0x3fa2c3ca
 8018cf0:	3bf9c1f8 	.word	0x3bf9c1f8
 8018cf4:	3a1ce7f0 	.word	0x3a1ce7f0

08018cf8 <Bmx160_writeBmxReg>:

void Bmx160_writeBmxReg(uint8_t reg, uint8_t value)
{
 8018cf8:	b580      	push	{r7, lr}
 8018cfa:	b084      	sub	sp, #16
 8018cfc:	af00      	add	r7, sp, #0
 8018cfe:	4603      	mov	r3, r0
 8018d00:	460a      	mov	r2, r1
 8018d02:	71fb      	strb	r3, [r7, #7]
 8018d04:	4613      	mov	r3, r2
 8018d06:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer[1] = {value};
 8018d08:	79bb      	ldrb	r3, [r7, #6]
 8018d0a:	733b      	strb	r3, [r7, #12]
    Bmx160_writeReg(reg, buffer, 1);
 8018d0c:	f107 010c 	add.w	r1, r7, #12
 8018d10:	79fb      	ldrb	r3, [r7, #7]
 8018d12:	2201      	movs	r2, #1
 8018d14:	4618      	mov	r0, r3
 8018d16:	f000 f804 	bl	8018d22 <Bmx160_writeReg>
}
 8018d1a:	bf00      	nop
 8018d1c:	3710      	adds	r7, #16
 8018d1e:	46bd      	mov	sp, r7
 8018d20:	bd80      	pop	{r7, pc}

08018d22 <Bmx160_writeReg>:

void Bmx160_writeReg(uint8_t reg, uint8_t *pBuf, uint16_t len)
{
 8018d22:	b580      	push	{r7, lr}
 8018d24:	b082      	sub	sp, #8
 8018d26:	af00      	add	r7, sp, #0
 8018d28:	4603      	mov	r3, r0
 8018d2a:	6039      	str	r1, [r7, #0]
 8018d2c:	71fb      	strb	r3, [r7, #7]
 8018d2e:	4613      	mov	r3, r2
 8018d30:	80bb      	strh	r3, [r7, #4]
    SensorAPI_I2Cx_Write(0, reg, pBuf, len);
 8018d32:	88bb      	ldrh	r3, [r7, #4]
 8018d34:	79f9      	ldrb	r1, [r7, #7]
 8018d36:	683a      	ldr	r2, [r7, #0]
 8018d38:	2000      	movs	r0, #0
 8018d3a:	f000 f85f 	bl	8018dfc <SensorAPI_I2Cx_Write>
}
 8018d3e:	bf00      	nop
 8018d40:	3708      	adds	r7, #8
 8018d42:	46bd      	mov	sp, r7
 8018d44:	bd80      	pop	{r7, pc}

08018d46 <Bmx160_readReg>:

void Bmx160_readReg(uint8_t reg, uint8_t *pBuf, uint16_t len)
{
 8018d46:	b580      	push	{r7, lr}
 8018d48:	b082      	sub	sp, #8
 8018d4a:	af00      	add	r7, sp, #0
 8018d4c:	4603      	mov	r3, r0
 8018d4e:	6039      	str	r1, [r7, #0]
 8018d50:	71fb      	strb	r3, [r7, #7]
 8018d52:	4613      	mov	r3, r2
 8018d54:	80bb      	strh	r3, [r7, #4]
    SensorAPI_I2Cx_Read(0, reg, pBuf, len);
 8018d56:	88bb      	ldrh	r3, [r7, #4]
 8018d58:	79f9      	ldrb	r1, [r7, #7]
 8018d5a:	683a      	ldr	r2, [r7, #0]
 8018d5c:	2000      	movs	r0, #0
 8018d5e:	f000 f82b 	bl	8018db8 <SensorAPI_I2Cx_Read>
}
 8018d62:	bf00      	nop
 8018d64:	3708      	adds	r7, #8
 8018d66:	46bd      	mov	sp, r7
 8018d68:	bd80      	pop	{r7, pc}

08018d6a <Bmx160_scan>:

uint8_t Bmx160_scan()
{
 8018d6a:	b480      	push	{r7}
 8018d6c:	af00      	add	r7, sp, #0
    return TRUE;
 8018d6e:	2301      	movs	r3, #1
}
 8018d70:	4618      	mov	r0, r3
 8018d72:	46bd      	mov	sp, r7
 8018d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d78:	4770      	bx	lr
	...

08018d7c <DelayUs>:

uint8_t GTXBuffer[512], GRXBuffer[2048];


void DelayUs(uint32_t Delay)
{
 8018d7c:	b480      	push	{r7}
 8018d7e:	b085      	sub	sp, #20
 8018d80:	af00      	add	r7, sp, #0
 8018d82:	6078      	str	r0, [r7, #4]
	uint32_t i;

	while(--Delay)
 8018d84:	e009      	b.n	8018d9a <DelayUs+0x1e>
	{
		for(i = 0; i < 84000; i++)
 8018d86:	2300      	movs	r3, #0
 8018d88:	60fb      	str	r3, [r7, #12]
 8018d8a:	e002      	b.n	8018d92 <DelayUs+0x16>
 8018d8c:	68fb      	ldr	r3, [r7, #12]
 8018d8e:	3301      	adds	r3, #1
 8018d90:	60fb      	str	r3, [r7, #12]
 8018d92:	68fb      	ldr	r3, [r7, #12]
 8018d94:	4a07      	ldr	r2, [pc, #28]	; (8018db4 <DelayUs+0x38>)
 8018d96:	4293      	cmp	r3, r2
 8018d98:	d9f8      	bls.n	8018d8c <DelayUs+0x10>
	while(--Delay)
 8018d9a:	687b      	ldr	r3, [r7, #4]
 8018d9c:	3b01      	subs	r3, #1
 8018d9e:	607b      	str	r3, [r7, #4]
 8018da0:	687b      	ldr	r3, [r7, #4]
 8018da2:	2b00      	cmp	r3, #0
 8018da4:	d1ef      	bne.n	8018d86 <DelayUs+0xa>
		{
			;
		}
	}
}
 8018da6:	bf00      	nop
 8018da8:	bf00      	nop
 8018daa:	3714      	adds	r7, #20
 8018dac:	46bd      	mov	sp, r7
 8018dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018db2:	4770      	bx	lr
 8018db4:	0001481f 	.word	0x0001481f

08018db8 <SensorAPI_I2Cx_Read>:
* Input          : I2C2 device_address, register address, data, data lenght
* Output         : None
* Return         : None
*******************************************************************************/
int8_t SensorAPI_I2Cx_Read(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8018db8:	b580      	push	{r7, lr}
 8018dba:	b084      	sub	sp, #16
 8018dbc:	af02      	add	r7, sp, #8
 8018dbe:	603a      	str	r2, [r7, #0]
 8018dc0:	461a      	mov	r2, r3
 8018dc2:	4603      	mov	r3, r0
 8018dc4:	71fb      	strb	r3, [r7, #7]
 8018dc6:	460b      	mov	r3, r1
 8018dc8:	71bb      	strb	r3, [r7, #6]
 8018dca:	4613      	mov	r3, r2
 8018dcc:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&I2C_HANDLE, BMI160_ADDR, &reg_addr, 1, I2CTIMEOUT);
 8018dce:	1dba      	adds	r2, r7, #6
 8018dd0:	2364      	movs	r3, #100	; 0x64
 8018dd2:	9300      	str	r3, [sp, #0]
 8018dd4:	2301      	movs	r3, #1
 8018dd6:	21d0      	movs	r1, #208	; 0xd0
 8018dd8:	4807      	ldr	r0, [pc, #28]	; (8018df8 <SensorAPI_I2Cx_Read+0x40>)
 8018dda:	f7ec fe17 	bl	8005a0c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&I2C_HANDLE, BMI160_ADDR, data, len, I2CTIMEOUT);
 8018dde:	88bb      	ldrh	r3, [r7, #4]
 8018de0:	2264      	movs	r2, #100	; 0x64
 8018de2:	9200      	str	r2, [sp, #0]
 8018de4:	683a      	ldr	r2, [r7, #0]
 8018de6:	21d0      	movs	r1, #208	; 0xd0
 8018de8:	4803      	ldr	r0, [pc, #12]	; (8018df8 <SensorAPI_I2Cx_Read+0x40>)
 8018dea:	f7ec ff03 	bl	8005bf4 <HAL_I2C_Master_Receive>
	return 0;
 8018dee:	2300      	movs	r3, #0
}
 8018df0:	4618      	mov	r0, r3
 8018df2:	3708      	adds	r7, #8
 8018df4:	46bd      	mov	sp, r7
 8018df6:	bd80      	pop	{r7, pc}
 8018df8:	24008528 	.word	0x24008528

08018dfc <SensorAPI_I2Cx_Write>:
* Input          : I2C2 device_address, register address, data, data lenght
* Output         : None
* Return         : None
*******************************************************************************/
int8_t SensorAPI_I2Cx_Write(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8018dfc:	b580      	push	{r7, lr}
 8018dfe:	b084      	sub	sp, #16
 8018e00:	af02      	add	r7, sp, #8
 8018e02:	603a      	str	r2, [r7, #0]
 8018e04:	461a      	mov	r2, r3
 8018e06:	4603      	mov	r3, r0
 8018e08:	71fb      	strb	r3, [r7, #7]
 8018e0a:	460b      	mov	r3, r1
 8018e0c:	71bb      	strb	r3, [r7, #6]
 8018e0e:	4613      	mov	r3, r2
 8018e10:	80bb      	strh	r3, [r7, #4]
	GTXBuffer[0] = reg_addr;
 8018e12:	4a0c      	ldr	r2, [pc, #48]	; (8018e44 <SensorAPI_I2Cx_Write+0x48>)
 8018e14:	79bb      	ldrb	r3, [r7, #6]
 8018e16:	7013      	strb	r3, [r2, #0]
	memcpy(&GTXBuffer[1], data, len);
 8018e18:	88bb      	ldrh	r3, [r7, #4]
 8018e1a:	461a      	mov	r2, r3
 8018e1c:	6839      	ldr	r1, [r7, #0]
 8018e1e:	480a      	ldr	r0, [pc, #40]	; (8018e48 <SensorAPI_I2Cx_Write+0x4c>)
 8018e20:	f001 f9af 	bl	801a182 <memcpy>

	HAL_I2C_Master_Transmit(&I2C_HANDLE, BMI160_ADDR, GTXBuffer, len+1, I2CTIMEOUT);
 8018e24:	88bb      	ldrh	r3, [r7, #4]
 8018e26:	3301      	adds	r3, #1
 8018e28:	b29b      	uxth	r3, r3
 8018e2a:	2264      	movs	r2, #100	; 0x64
 8018e2c:	9200      	str	r2, [sp, #0]
 8018e2e:	4a05      	ldr	r2, [pc, #20]	; (8018e44 <SensorAPI_I2Cx_Write+0x48>)
 8018e30:	21d0      	movs	r1, #208	; 0xd0
 8018e32:	4806      	ldr	r0, [pc, #24]	; (8018e4c <SensorAPI_I2Cx_Write+0x50>)
 8018e34:	f7ec fdea 	bl	8005a0c <HAL_I2C_Master_Transmit>
	return 0;
 8018e38:	2300      	movs	r3, #0
}
 8018e3a:	4618      	mov	r0, r3
 8018e3c:	3708      	adds	r7, #8
 8018e3e:	46bd      	mov	sp, r7
 8018e40:	bd80      	pop	{r7, pc}
 8018e42:	bf00      	nop
 8018e44:	2400dfe8 	.word	0x2400dfe8
 8018e48:	2400dfe9 	.word	0x2400dfe9
 8018e4c:	24008528 	.word	0x24008528

08018e50 <GNSS_Init>:
/*!
 * Structure initialization.
 * @param GNSS Pointer to main GNSS structure.
 * @param huart Pointer to uart handle.
 */
void GNSS_Init(GNSS_StateHandle *GNSS, UART_HandleTypeDef *huart, DelayFunc delayFunc) {
 8018e50:	b480      	push	{r7}
 8018e52:	b085      	sub	sp, #20
 8018e54:	af00      	add	r7, sp, #0
 8018e56:	60f8      	str	r0, [r7, #12]
 8018e58:	60b9      	str	r1, [r7, #8]
 8018e5a:	607a      	str	r2, [r7, #4]
	GNSS->huart = huart;
 8018e5c:	68fb      	ldr	r3, [r7, #12]
 8018e5e:	68ba      	ldr	r2, [r7, #8]
 8018e60:	601a      	str	r2, [r3, #0]
	GNSS->delayFunc = delayFunc;
 8018e62:	68fb      	ldr	r3, [r7, #12]
 8018e64:	687a      	ldr	r2, [r7, #4]
 8018e66:	605a      	str	r2, [r3, #4]
	GNSS->year = 0;
 8018e68:	68fb      	ldr	r3, [r7, #12]
 8018e6a:	2200      	movs	r2, #0
 8018e6c:	f8a3 23f4 	strh.w	r2, [r3, #1012]	; 0x3f4
	GNSS->month = 0;
 8018e70:	68fb      	ldr	r3, [r7, #12]
 8018e72:	2200      	movs	r2, #0
 8018e74:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
	GNSS->day = 0;
 8018e78:	68fb      	ldr	r3, [r7, #12]
 8018e7a:	2200      	movs	r2, #0
 8018e7c:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
	GNSS->hour = 0;
 8018e80:	68fb      	ldr	r3, [r7, #12]
 8018e82:	2200      	movs	r2, #0
 8018e84:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
	GNSS->min = 0;
 8018e88:	68fb      	ldr	r3, [r7, #12]
 8018e8a:	2200      	movs	r2, #0
 8018e8c:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
	GNSS->sec = 0;
 8018e90:	68fb      	ldr	r3, [r7, #12]
 8018e92:	2200      	movs	r2, #0
 8018e94:	f883 23fc 	strb.w	r2, [r3, #1020]	; 0x3fc
	GNSS->fixType = 0;
 8018e98:	68fb      	ldr	r3, [r7, #12]
 8018e9a:	2200      	movs	r2, #0
 8018e9c:	f883 23fd 	strb.w	r2, [r3, #1021]	; 0x3fd
	GNSS->lon = 0;
 8018ea0:	68fb      	ldr	r3, [r7, #12]
 8018ea2:	2200      	movs	r2, #0
 8018ea4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	GNSS->lat = 0;
 8018ea8:	68fb      	ldr	r3, [r7, #12]
 8018eaa:	2200      	movs	r2, #0
 8018eac:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
	GNSS->height = 0;
 8018eb0:	68fb      	ldr	r3, [r7, #12]
 8018eb2:	2200      	movs	r2, #0
 8018eb4:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
	GNSS->hMSL = 0;
 8018eb8:	68fb      	ldr	r3, [r7, #12]
 8018eba:	2200      	movs	r2, #0
 8018ebc:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
	GNSS->hAcc = 0;
 8018ec0:	68fb      	ldr	r3, [r7, #12]
 8018ec2:	2200      	movs	r2, #0
 8018ec4:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
	GNSS->vAcc = 0;
 8018ec8:	68fb      	ldr	r3, [r7, #12]
 8018eca:	2200      	movs	r2, #0
 8018ecc:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
	GNSS->gSpeed = 0;
 8018ed0:	68fb      	ldr	r3, [r7, #12]
 8018ed2:	2200      	movs	r2, #0
 8018ed4:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
	GNSS->headMot = 0;
 8018ed8:	68fb      	ldr	r3, [r7, #12]
 8018eda:	2200      	movs	r2, #0
 8018edc:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
}
 8018ee0:	bf00      	nop
 8018ee2:	3714      	adds	r7, #20
 8018ee4:	46bd      	mov	sp, r7
 8018ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018eea:	4770      	bx	lr
 8018eec:	0000      	movs	r0, r0
	...

08018ef0 <GNSS_ParsePVTDataPTR>:
/*!
 * Parse data to navigation position velocity time solution standard.
 * Look at: 32.17.15.1 u-blox 8 Receiver description.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParsePVTDataPTR(GNSS_StateHandle *GNSS) {
 8018ef0:	b480      	push	{r7}
 8018ef2:	b091      	sub	sp, #68	; 0x44
 8018ef4:	af00      	add	r7, sp, #0
 8018ef6:	6078      	str	r0, [r7, #4]
	uint8_t* bufferPtr = GNSS_Handle.uartWorkingBuffer + UBX_MESSAGE_OFFSET;
 8018ef8:	4ba1      	ldr	r3, [pc, #644]	; (8019180 <GNSS_ParsePVTDataPTR+0x290>)
 8018efa:	60fb      	str	r3, [r7, #12]

	for (int var = 0; var < 4; ++var) {
 8018efc:	2300      	movs	r3, #0
 8018efe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018f00:	e018      	b.n	8018f34 <GNSS_ParsePVTDataPTR+0x44>
		iLong.bytes[var] = bufferPtr[var + 24];
 8018f02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018f04:	3318      	adds	r3, #24
 8018f06:	68fa      	ldr	r2, [r7, #12]
 8018f08:	4413      	add	r3, r2
 8018f0a:	7819      	ldrb	r1, [r3, #0]
 8018f0c:	4a9d      	ldr	r2, [pc, #628]	; (8019184 <GNSS_ParsePVTDataPTR+0x294>)
 8018f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018f10:	4413      	add	r3, r2
 8018f12:	460a      	mov	r2, r1
 8018f14:	701a      	strb	r2, [r3, #0]
		GNSS->lonBytes[var]= bufferPtr[var + 24];
 8018f16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018f18:	3318      	adds	r3, #24
 8018f1a:	68fa      	ldr	r2, [r7, #12]
 8018f1c:	4413      	add	r3, r2
 8018f1e:	7819      	ldrb	r1, [r3, #0]
 8018f20:	687a      	ldr	r2, [r7, #4]
 8018f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018f24:	4413      	add	r3, r2
 8018f26:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8018f2a:	460a      	mov	r2, r1
 8018f2c:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8018f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018f30:	3301      	adds	r3, #1
 8018f32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018f34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018f36:	2b03      	cmp	r3, #3
 8018f38:	dde3      	ble.n	8018f02 <GNSS_ParsePVTDataPTR+0x12>
	}
	GNSS->lon = iLong.iLong;
 8018f3a:	4b92      	ldr	r3, [pc, #584]	; (8019184 <GNSS_ParsePVTDataPTR+0x294>)
 8018f3c:	681a      	ldr	r2, [r3, #0]
 8018f3e:	687b      	ldr	r3, [r7, #4]
 8018f40:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	GNSS->fLon=((float)iLong.iLong)/10000000.0;
 8018f44:	4b8f      	ldr	r3, [pc, #572]	; (8019184 <GNSS_ParsePVTDataPTR+0x294>)
 8018f46:	681b      	ldr	r3, [r3, #0]
 8018f48:	ee07 3a90 	vmov	s15, r3
 8018f4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8018f50:	eddf 6a8d 	vldr	s13, [pc, #564]	; 8019188 <GNSS_ParsePVTDataPTR+0x298>
 8018f54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8018f58:	687b      	ldr	r3, [r7, #4]
 8018f5a:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8018f5e:	edc3 7a00 	vstr	s15, [r3]
	for (int var = 0; var < 4; ++var) {
 8018f62:	2300      	movs	r3, #0
 8018f64:	63bb      	str	r3, [r7, #56]	; 0x38
 8018f66:	e018      	b.n	8018f9a <GNSS_ParsePVTDataPTR+0xaa>
		iLong.bytes[var] = bufferPtr[var + 28];
 8018f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f6a:	331c      	adds	r3, #28
 8018f6c:	68fa      	ldr	r2, [r7, #12]
 8018f6e:	4413      	add	r3, r2
 8018f70:	7819      	ldrb	r1, [r3, #0]
 8018f72:	4a84      	ldr	r2, [pc, #528]	; (8019184 <GNSS_ParsePVTDataPTR+0x294>)
 8018f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f76:	4413      	add	r3, r2
 8018f78:	460a      	mov	r2, r1
 8018f7a:	701a      	strb	r2, [r3, #0]
		GNSS->latBytes[var]= bufferPtr[var + 28];
 8018f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f7e:	331c      	adds	r3, #28
 8018f80:	68fa      	ldr	r2, [r7, #12]
 8018f82:	4413      	add	r3, r2
 8018f84:	7819      	ldrb	r1, [r3, #0]
 8018f86:	687a      	ldr	r2, [r7, #4]
 8018f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f8a:	4413      	add	r3, r2
 8018f8c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8018f90:	460a      	mov	r2, r1
 8018f92:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8018f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f96:	3301      	adds	r3, #1
 8018f98:	63bb      	str	r3, [r7, #56]	; 0x38
 8018f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f9c:	2b03      	cmp	r3, #3
 8018f9e:	dde3      	ble.n	8018f68 <GNSS_ParsePVTDataPTR+0x78>
	}
	GNSS->lat = iLong.iLong;
 8018fa0:	4b78      	ldr	r3, [pc, #480]	; (8019184 <GNSS_ParsePVTDataPTR+0x294>)
 8018fa2:	681a      	ldr	r2, [r3, #0]
 8018fa4:	687b      	ldr	r3, [r7, #4]
 8018fa6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
	GNSS->fLat=((float)iLong.iLong)/10000000.0;
 8018faa:	4b76      	ldr	r3, [pc, #472]	; (8019184 <GNSS_ParsePVTDataPTR+0x294>)
 8018fac:	681b      	ldr	r3, [r3, #0]
 8018fae:	ee07 3a90 	vmov	s15, r3
 8018fb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8018fb6:	eddf 6a74 	vldr	s13, [pc, #464]	; 8019188 <GNSS_ParsePVTDataPTR+0x298>
 8018fba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8018fbe:	687b      	ldr	r3, [r7, #4]
 8018fc0:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8018fc4:	edc3 7a00 	vstr	s15, [r3]
	for (int var = 0; var < 4; ++var) {
 8018fc8:	2300      	movs	r3, #0
 8018fca:	637b      	str	r3, [r7, #52]	; 0x34
 8018fcc:	e00c      	b.n	8018fe8 <GNSS_ParsePVTDataPTR+0xf8>
		iLong.bytes[var] = bufferPtr[var + 32];
 8018fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018fd0:	3320      	adds	r3, #32
 8018fd2:	68fa      	ldr	r2, [r7, #12]
 8018fd4:	4413      	add	r3, r2
 8018fd6:	7819      	ldrb	r1, [r3, #0]
 8018fd8:	4a6a      	ldr	r2, [pc, #424]	; (8019184 <GNSS_ParsePVTDataPTR+0x294>)
 8018fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018fdc:	4413      	add	r3, r2
 8018fde:	460a      	mov	r2, r1
 8018fe0:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8018fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018fe4:	3301      	adds	r3, #1
 8018fe6:	637b      	str	r3, [r7, #52]	; 0x34
 8018fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018fea:	2b03      	cmp	r3, #3
 8018fec:	ddef      	ble.n	8018fce <GNSS_ParsePVTDataPTR+0xde>
	}
	GNSS->height = iLong.iLong;
 8018fee:	4b65      	ldr	r3, [pc, #404]	; (8019184 <GNSS_ParsePVTDataPTR+0x294>)
 8018ff0:	681a      	ldr	r2, [r3, #0]
 8018ff2:	687b      	ldr	r3, [r7, #4]
 8018ff4:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

	for (int var = 0; var < 4; ++var) {
 8018ff8:	2300      	movs	r3, #0
 8018ffa:	633b      	str	r3, [r7, #48]	; 0x30
 8018ffc:	e018      	b.n	8019030 <GNSS_ParsePVTDataPTR+0x140>
		iLong.bytes[var] = bufferPtr[var + 36];
 8018ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019000:	3324      	adds	r3, #36	; 0x24
 8019002:	68fa      	ldr	r2, [r7, #12]
 8019004:	4413      	add	r3, r2
 8019006:	7819      	ldrb	r1, [r3, #0]
 8019008:	4a5e      	ldr	r2, [pc, #376]	; (8019184 <GNSS_ParsePVTDataPTR+0x294>)
 801900a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801900c:	4413      	add	r3, r2
 801900e:	460a      	mov	r2, r1
 8019010:	701a      	strb	r2, [r3, #0]
		GNSS->hMSLBytes[var] = bufferPtr[var + 36];
 8019012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019014:	3324      	adds	r3, #36	; 0x24
 8019016:	68fa      	ldr	r2, [r7, #12]
 8019018:	4413      	add	r3, r2
 801901a:	7819      	ldrb	r1, [r3, #0]
 801901c:	687a      	ldr	r2, [r7, #4]
 801901e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019020:	4413      	add	r3, r2
 8019022:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8019026:	460a      	mov	r2, r1
 8019028:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 801902a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801902c:	3301      	adds	r3, #1
 801902e:	633b      	str	r3, [r7, #48]	; 0x30
 8019030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019032:	2b03      	cmp	r3, #3
 8019034:	dde3      	ble.n	8018ffe <GNSS_ParsePVTDataPTR+0x10e>
	}
	GNSS->hMSL = iLong.iLong;
 8019036:	4b53      	ldr	r3, [pc, #332]	; (8019184 <GNSS_ParsePVTDataPTR+0x294>)
 8019038:	681a      	ldr	r2, [r3, #0]
 801903a:	687b      	ldr	r3, [r7, #4]
 801903c:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

	for (int var = 0; var < 4; ++var) {
 8019040:	2300      	movs	r3, #0
 8019042:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019044:	e00c      	b.n	8019060 <GNSS_ParsePVTDataPTR+0x170>
		uLong.bytes[var] = bufferPtr[var + 40];
 8019046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019048:	3328      	adds	r3, #40	; 0x28
 801904a:	68fa      	ldr	r2, [r7, #12]
 801904c:	4413      	add	r3, r2
 801904e:	7819      	ldrb	r1, [r3, #0]
 8019050:	4a4e      	ldr	r2, [pc, #312]	; (801918c <GNSS_ParsePVTDataPTR+0x29c>)
 8019052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019054:	4413      	add	r3, r2
 8019056:	460a      	mov	r2, r1
 8019058:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 801905a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801905c:	3301      	adds	r3, #1
 801905e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019062:	2b03      	cmp	r3, #3
 8019064:	ddef      	ble.n	8019046 <GNSS_ParsePVTDataPTR+0x156>
	}
	GNSS->hAcc = uLong.uLong;
 8019066:	4b49      	ldr	r3, [pc, #292]	; (801918c <GNSS_ParsePVTDataPTR+0x29c>)
 8019068:	681a      	ldr	r2, [r3, #0]
 801906a:	687b      	ldr	r3, [r7, #4]
 801906c:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424

	for (int var = 0; var < 4; ++var) {
 8019070:	2300      	movs	r3, #0
 8019072:	62bb      	str	r3, [r7, #40]	; 0x28
 8019074:	e00c      	b.n	8019090 <GNSS_ParsePVTDataPTR+0x1a0>
		uLong.bytes[var] = bufferPtr[var + 44];
 8019076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019078:	332c      	adds	r3, #44	; 0x2c
 801907a:	68fa      	ldr	r2, [r7, #12]
 801907c:	4413      	add	r3, r2
 801907e:	7819      	ldrb	r1, [r3, #0]
 8019080:	4a42      	ldr	r2, [pc, #264]	; (801918c <GNSS_ParsePVTDataPTR+0x29c>)
 8019082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019084:	4413      	add	r3, r2
 8019086:	460a      	mov	r2, r1
 8019088:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 801908a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801908c:	3301      	adds	r3, #1
 801908e:	62bb      	str	r3, [r7, #40]	; 0x28
 8019090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019092:	2b03      	cmp	r3, #3
 8019094:	ddef      	ble.n	8019076 <GNSS_ParsePVTDataPTR+0x186>
	}
	GNSS->vAcc = uLong.uLong;
 8019096:	4b3d      	ldr	r3, [pc, #244]	; (801918c <GNSS_ParsePVTDataPTR+0x29c>)
 8019098:	681a      	ldr	r2, [r3, #0]
 801909a:	687b      	ldr	r3, [r7, #4]
 801909c:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428

	for (int var = 0; var < 4; ++var) {
 80190a0:	2300      	movs	r3, #0
 80190a2:	627b      	str	r3, [r7, #36]	; 0x24
 80190a4:	e00c      	b.n	80190c0 <GNSS_ParsePVTDataPTR+0x1d0>
		iLong.bytes[var] = bufferPtr[var + 48];
 80190a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190a8:	3330      	adds	r3, #48	; 0x30
 80190aa:	68fa      	ldr	r2, [r7, #12]
 80190ac:	4413      	add	r3, r2
 80190ae:	7819      	ldrb	r1, [r3, #0]
 80190b0:	4a34      	ldr	r2, [pc, #208]	; (8019184 <GNSS_ParsePVTDataPTR+0x294>)
 80190b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190b4:	4413      	add	r3, r2
 80190b6:	460a      	mov	r2, r1
 80190b8:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80190ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190bc:	3301      	adds	r3, #1
 80190be:	627b      	str	r3, [r7, #36]	; 0x24
 80190c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190c2:	2b03      	cmp	r3, #3
 80190c4:	ddef      	ble.n	80190a6 <GNSS_ParsePVTDataPTR+0x1b6>
	}
	GNSS->velN = iLong.iLong;
 80190c6:	4b2f      	ldr	r3, [pc, #188]	; (8019184 <GNSS_ParsePVTDataPTR+0x294>)
 80190c8:	681a      	ldr	r2, [r3, #0]
 80190ca:	687b      	ldr	r3, [r7, #4]
 80190cc:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c

	for (int var = 0; var < 4; ++var) {
 80190d0:	2300      	movs	r3, #0
 80190d2:	623b      	str	r3, [r7, #32]
 80190d4:	e00c      	b.n	80190f0 <GNSS_ParsePVTDataPTR+0x200>
		iLong.bytes[var] = bufferPtr[var + 52];
 80190d6:	6a3b      	ldr	r3, [r7, #32]
 80190d8:	3334      	adds	r3, #52	; 0x34
 80190da:	68fa      	ldr	r2, [r7, #12]
 80190dc:	4413      	add	r3, r2
 80190de:	7819      	ldrb	r1, [r3, #0]
 80190e0:	4a28      	ldr	r2, [pc, #160]	; (8019184 <GNSS_ParsePVTDataPTR+0x294>)
 80190e2:	6a3b      	ldr	r3, [r7, #32]
 80190e4:	4413      	add	r3, r2
 80190e6:	460a      	mov	r2, r1
 80190e8:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80190ea:	6a3b      	ldr	r3, [r7, #32]
 80190ec:	3301      	adds	r3, #1
 80190ee:	623b      	str	r3, [r7, #32]
 80190f0:	6a3b      	ldr	r3, [r7, #32]
 80190f2:	2b03      	cmp	r3, #3
 80190f4:	ddef      	ble.n	80190d6 <GNSS_ParsePVTDataPTR+0x1e6>
	}
	GNSS->velE = iLong.iLong;
 80190f6:	4b23      	ldr	r3, [pc, #140]	; (8019184 <GNSS_ParsePVTDataPTR+0x294>)
 80190f8:	681a      	ldr	r2, [r3, #0]
 80190fa:	687b      	ldr	r3, [r7, #4]
 80190fc:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

	for (int var = 0; var < 4; ++var) {
 8019100:	2300      	movs	r3, #0
 8019102:	61fb      	str	r3, [r7, #28]
 8019104:	e00c      	b.n	8019120 <GNSS_ParsePVTDataPTR+0x230>
		iLong.bytes[var] = bufferPtr[var + 56];
 8019106:	69fb      	ldr	r3, [r7, #28]
 8019108:	3338      	adds	r3, #56	; 0x38
 801910a:	68fa      	ldr	r2, [r7, #12]
 801910c:	4413      	add	r3, r2
 801910e:	7819      	ldrb	r1, [r3, #0]
 8019110:	4a1c      	ldr	r2, [pc, #112]	; (8019184 <GNSS_ParsePVTDataPTR+0x294>)
 8019112:	69fb      	ldr	r3, [r7, #28]
 8019114:	4413      	add	r3, r2
 8019116:	460a      	mov	r2, r1
 8019118:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 801911a:	69fb      	ldr	r3, [r7, #28]
 801911c:	3301      	adds	r3, #1
 801911e:	61fb      	str	r3, [r7, #28]
 8019120:	69fb      	ldr	r3, [r7, #28]
 8019122:	2b03      	cmp	r3, #3
 8019124:	ddef      	ble.n	8019106 <GNSS_ParsePVTDataPTR+0x216>
	}
	GNSS->velD = iLong.iLong;
 8019126:	4b17      	ldr	r3, [pc, #92]	; (8019184 <GNSS_ParsePVTDataPTR+0x294>)
 8019128:	681a      	ldr	r2, [r3, #0]
 801912a:	687b      	ldr	r3, [r7, #4]
 801912c:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434


	for (int var = 0; var < 4; ++var) {
 8019130:	2300      	movs	r3, #0
 8019132:	61bb      	str	r3, [r7, #24]
 8019134:	e018      	b.n	8019168 <GNSS_ParsePVTDataPTR+0x278>
		iLong.bytes[var] = bufferPtr[var + 60];
 8019136:	69bb      	ldr	r3, [r7, #24]
 8019138:	333c      	adds	r3, #60	; 0x3c
 801913a:	68fa      	ldr	r2, [r7, #12]
 801913c:	4413      	add	r3, r2
 801913e:	7819      	ldrb	r1, [r3, #0]
 8019140:	4a10      	ldr	r2, [pc, #64]	; (8019184 <GNSS_ParsePVTDataPTR+0x294>)
 8019142:	69bb      	ldr	r3, [r7, #24]
 8019144:	4413      	add	r3, r2
 8019146:	460a      	mov	r2, r1
 8019148:	701a      	strb	r2, [r3, #0]
		GNSS->gSpeedBytes[var] = bufferPtr[var + 60];
 801914a:	69bb      	ldr	r3, [r7, #24]
 801914c:	333c      	adds	r3, #60	; 0x3c
 801914e:	68fa      	ldr	r2, [r7, #12]
 8019150:	4413      	add	r3, r2
 8019152:	7819      	ldrb	r1, [r3, #0]
 8019154:	687a      	ldr	r2, [r7, #4]
 8019156:	69bb      	ldr	r3, [r7, #24]
 8019158:	4413      	add	r3, r2
 801915a:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 801915e:	460a      	mov	r2, r1
 8019160:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8019162:	69bb      	ldr	r3, [r7, #24]
 8019164:	3301      	adds	r3, #1
 8019166:	61bb      	str	r3, [r7, #24]
 8019168:	69bb      	ldr	r3, [r7, #24]
 801916a:	2b03      	cmp	r3, #3
 801916c:	dde3      	ble.n	8019136 <GNSS_ParsePVTDataPTR+0x246>
	}
	GNSS->gSpeed = iLong.iLong;
 801916e:	4b05      	ldr	r3, [pc, #20]	; (8019184 <GNSS_ParsePVTDataPTR+0x294>)
 8019170:	681a      	ldr	r2, [r3, #0]
 8019172:	687b      	ldr	r3, [r7, #4]
 8019174:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438

	for (int var = 0; var < 4; ++var) {
 8019178:	2300      	movs	r3, #0
 801917a:	617b      	str	r3, [r7, #20]
 801917c:	e015      	b.n	80191aa <GNSS_ParsePVTDataPTR+0x2ba>
 801917e:	bf00      	nop
 8019180:	2400e202 	.word	0x2400e202
 8019184:	2400e1ec 	.word	0x2400e1ec
 8019188:	4b189680 	.word	0x4b189680
 801918c:	2400e1e8 	.word	0x2400e1e8
		iLong.bytes[var] = bufferPtr[var + 64];
 8019190:	697b      	ldr	r3, [r7, #20]
 8019192:	3340      	adds	r3, #64	; 0x40
 8019194:	68fa      	ldr	r2, [r7, #12]
 8019196:	4413      	add	r3, r2
 8019198:	7819      	ldrb	r1, [r3, #0]
 801919a:	4a1f      	ldr	r2, [pc, #124]	; (8019218 <GNSS_ParsePVTDataPTR+0x328>)
 801919c:	697b      	ldr	r3, [r7, #20]
 801919e:	4413      	add	r3, r2
 80191a0:	460a      	mov	r2, r1
 80191a2:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80191a4:	697b      	ldr	r3, [r7, #20]
 80191a6:	3301      	adds	r3, #1
 80191a8:	617b      	str	r3, [r7, #20]
 80191aa:	697b      	ldr	r3, [r7, #20]
 80191ac:	2b03      	cmp	r3, #3
 80191ae:	ddef      	ble.n	8019190 <GNSS_ParsePVTDataPTR+0x2a0>
	}
	GNSS->headMot = iLong.iLong * 1e-5; // todo I'm not sure this good options.
 80191b0:	4b19      	ldr	r3, [pc, #100]	; (8019218 <GNSS_ParsePVTDataPTR+0x328>)
 80191b2:	681b      	ldr	r3, [r3, #0]
 80191b4:	ee07 3a90 	vmov	s15, r3
 80191b8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80191bc:	ed9f 6b14 	vldr	d6, [pc, #80]	; 8019210 <GNSS_ParsePVTDataPTR+0x320>
 80191c0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80191c4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80191c8:	ee17 2a90 	vmov	r2, s15
 80191cc:	687b      	ldr	r3, [r7, #4]
 80191ce:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440

	for (int var = 0; var < 4; ++var) {
 80191d2:	2300      	movs	r3, #0
 80191d4:	613b      	str	r3, [r7, #16]
 80191d6:	e00c      	b.n	80191f2 <GNSS_ParsePVTDataPTR+0x302>
		uLong.bytes[var] = bufferPtr[var + 68];
 80191d8:	693b      	ldr	r3, [r7, #16]
 80191da:	3344      	adds	r3, #68	; 0x44
 80191dc:	68fa      	ldr	r2, [r7, #12]
 80191de:	4413      	add	r3, r2
 80191e0:	7819      	ldrb	r1, [r3, #0]
 80191e2:	4a0e      	ldr	r2, [pc, #56]	; (801921c <GNSS_ParsePVTDataPTR+0x32c>)
 80191e4:	693b      	ldr	r3, [r7, #16]
 80191e6:	4413      	add	r3, r2
 80191e8:	460a      	mov	r2, r1
 80191ea:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80191ec:	693b      	ldr	r3, [r7, #16]
 80191ee:	3301      	adds	r3, #1
 80191f0:	613b      	str	r3, [r7, #16]
 80191f2:	693b      	ldr	r3, [r7, #16]
 80191f4:	2b03      	cmp	r3, #3
 80191f6:	ddef      	ble.n	80191d8 <GNSS_ParsePVTDataPTR+0x2e8>
	}
	GNSS->sAcc = uLong.uLong;
 80191f8:	4b08      	ldr	r3, [pc, #32]	; (801921c <GNSS_ParsePVTDataPTR+0x32c>)
 80191fa:	681a      	ldr	r2, [r3, #0]
 80191fc:	687b      	ldr	r3, [r7, #4]
 80191fe:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
}
 8019202:	bf00      	nop
 8019204:	3744      	adds	r7, #68	; 0x44
 8019206:	46bd      	mov	sp, r7
 8019208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801920c:	4770      	bx	lr
 801920e:	bf00      	nop
 8019210:	88e368f1 	.word	0x88e368f1
 8019214:	3ee4f8b5 	.word	0x3ee4f8b5
 8019218:	2400e1ec 	.word	0x2400e1ec
 801921c:	2400e1e8 	.word	0x2400e1e8

08019220 <__cxa_guard_acquire>:
 8019220:	6803      	ldr	r3, [r0, #0]
 8019222:	07db      	lsls	r3, r3, #31
 8019224:	d406      	bmi.n	8019234 <__cxa_guard_acquire+0x14>
 8019226:	7843      	ldrb	r3, [r0, #1]
 8019228:	b103      	cbz	r3, 801922c <__cxa_guard_acquire+0xc>
 801922a:	deff      	udf	#255	; 0xff
 801922c:	2301      	movs	r3, #1
 801922e:	7043      	strb	r3, [r0, #1]
 8019230:	4618      	mov	r0, r3
 8019232:	4770      	bx	lr
 8019234:	2000      	movs	r0, #0
 8019236:	4770      	bx	lr

08019238 <__cxa_guard_release>:
 8019238:	2301      	movs	r3, #1
 801923a:	6003      	str	r3, [r0, #0]
 801923c:	4770      	bx	lr
	...

08019240 <sqrtf>:
 8019240:	b508      	push	{r3, lr}
 8019242:	ed2d 8b02 	vpush	{d8}
 8019246:	eeb0 8a40 	vmov.f32	s16, s0
 801924a:	f000 f9c3 	bl	80195d4 <__ieee754_sqrtf>
 801924e:	eeb4 8a48 	vcmp.f32	s16, s16
 8019252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019256:	d60c      	bvs.n	8019272 <sqrtf+0x32>
 8019258:	eddf 8a07 	vldr	s17, [pc, #28]	; 8019278 <sqrtf+0x38>
 801925c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8019260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019264:	d505      	bpl.n	8019272 <sqrtf+0x32>
 8019266:	f000 ff5f 	bl	801a128 <__errno>
 801926a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801926e:	2321      	movs	r3, #33	; 0x21
 8019270:	6003      	str	r3, [r0, #0]
 8019272:	ecbd 8b02 	vpop	{d8}
 8019276:	bd08      	pop	{r3, pc}
 8019278:	00000000 	.word	0x00000000

0801927c <sinf_poly>:
 801927c:	07cb      	lsls	r3, r1, #31
 801927e:	d412      	bmi.n	80192a6 <sinf_poly+0x2a>
 8019280:	ee21 5b00 	vmul.f64	d5, d1, d0
 8019284:	ed90 6b1a 	vldr	d6, [r0, #104]	; 0x68
 8019288:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 801928c:	eea6 7b01 	vfma.f64	d7, d6, d1
 8019290:	ed90 6b16 	vldr	d6, [r0, #88]	; 0x58
 8019294:	ee21 1b05 	vmul.f64	d1, d1, d5
 8019298:	eea6 0b05 	vfma.f64	d0, d6, d5
 801929c:	eea7 0b01 	vfma.f64	d0, d7, d1
 80192a0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80192a4:	4770      	bx	lr
 80192a6:	ed90 6b14 	vldr	d6, [r0, #80]	; 0x50
 80192aa:	ee21 5b01 	vmul.f64	d5, d1, d1
 80192ae:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 80192b2:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 80192b6:	eea1 7b06 	vfma.f64	d7, d1, d6
 80192ba:	ed90 6b0e 	vldr	d6, [r0, #56]	; 0x38
 80192be:	eea1 0b06 	vfma.f64	d0, d1, d6
 80192c2:	ed90 6b10 	vldr	d6, [r0, #64]	; 0x40
 80192c6:	ee21 1b05 	vmul.f64	d1, d1, d5
 80192ca:	eea5 0b06 	vfma.f64	d0, d5, d6
 80192ce:	e7e5      	b.n	801929c <sinf_poly+0x20>

080192d0 <sinf>:
 80192d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80192d2:	ee10 4a10 	vmov	r4, s0
 80192d6:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80192da:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 80192de:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 80192e2:	eef0 7a40 	vmov.f32	s15, s0
 80192e6:	ea4f 5214 	mov.w	r2, r4, lsr #20
 80192ea:	d218      	bcs.n	801931e <sinf+0x4e>
 80192ec:	ee26 1b06 	vmul.f64	d1, d6, d6
 80192f0:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 80192f4:	d20a      	bcs.n	801930c <sinf+0x3c>
 80192f6:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 80192fa:	d103      	bne.n	8019304 <sinf+0x34>
 80192fc:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8019300:	ed8d 1a01 	vstr	s2, [sp, #4]
 8019304:	eeb0 0a67 	vmov.f32	s0, s15
 8019308:	b003      	add	sp, #12
 801930a:	bd30      	pop	{r4, r5, pc}
 801930c:	483a      	ldr	r0, [pc, #232]	; (80193f8 <sinf+0x128>)
 801930e:	eeb0 0b46 	vmov.f64	d0, d6
 8019312:	2100      	movs	r1, #0
 8019314:	b003      	add	sp, #12
 8019316:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801931a:	f7ff bfaf 	b.w	801927c <sinf_poly>
 801931e:	f240 422e 	movw	r2, #1070	; 0x42e
 8019322:	4293      	cmp	r3, r2
 8019324:	d824      	bhi.n	8019370 <sinf+0xa0>
 8019326:	4b34      	ldr	r3, [pc, #208]	; (80193f8 <sinf+0x128>)
 8019328:	ed93 7b08 	vldr	d7, [r3, #32]
 801932c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8019330:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8019334:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8019338:	ee17 1a90 	vmov	r1, s15
 801933c:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 8019340:	1609      	asrs	r1, r1, #24
 8019342:	ee07 1a90 	vmov	s15, r1
 8019346:	f001 0203 	and.w	r2, r1, #3
 801934a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801934e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8019352:	ed92 0b00 	vldr	d0, [r2]
 8019356:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 801935a:	f011 0f02 	tst.w	r1, #2
 801935e:	eea5 6b47 	vfms.f64	d6, d5, d7
 8019362:	bf08      	it	eq
 8019364:	4618      	moveq	r0, r3
 8019366:	ee26 1b06 	vmul.f64	d1, d6, d6
 801936a:	ee20 0b06 	vmul.f64	d0, d0, d6
 801936e:	e7d1      	b.n	8019314 <sinf+0x44>
 8019370:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8019374:	d237      	bcs.n	80193e6 <sinf+0x116>
 8019376:	4a21      	ldr	r2, [pc, #132]	; (80193fc <sinf+0x12c>)
 8019378:	f3c4 6183 	ubfx	r1, r4, #26, #4
 801937c:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 8019380:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8019384:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 8019388:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 801938c:	6a2a      	ldr	r2, [r5, #32]
 801938e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8019392:	4083      	lsls	r3, r0
 8019394:	fba3 2002 	umull	r2, r0, r3, r2
 8019398:	692a      	ldr	r2, [r5, #16]
 801939a:	4359      	muls	r1, r3
 801939c:	fbe3 0102 	umlal	r0, r1, r3, r2
 80193a0:	f101 5300 	add.w	r3, r1, #536870912	; 0x20000000
 80193a4:	0f9d      	lsrs	r5, r3, #30
 80193a6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80193aa:	1ac9      	subs	r1, r1, r3
 80193ac:	f7e7 f97e 	bl	80006ac <__aeabi_l2d>
 80193b0:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 80193b4:	4b10      	ldr	r3, [pc, #64]	; (80193f8 <sinf+0x128>)
 80193b6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80193f0 <sinf+0x120>
 80193ba:	ec41 0b17 	vmov	d7, r0, r1
 80193be:	f004 0203 	and.w	r2, r4, #3
 80193c2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80193c6:	ee27 0b00 	vmul.f64	d0, d7, d0
 80193ca:	ed92 7b00 	vldr	d7, [r2]
 80193ce:	ee20 1b00 	vmul.f64	d1, d0, d0
 80193d2:	f014 0f02 	tst.w	r4, #2
 80193d6:	f103 0070 	add.w	r0, r3, #112	; 0x70
 80193da:	4629      	mov	r1, r5
 80193dc:	bf08      	it	eq
 80193de:	4618      	moveq	r0, r3
 80193e0:	ee27 0b00 	vmul.f64	d0, d7, d0
 80193e4:	e796      	b.n	8019314 <sinf+0x44>
 80193e6:	b003      	add	sp, #12
 80193e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80193ec:	f000 b8e3 	b.w	80195b6 <__math_invalidf>
 80193f0:	54442d18 	.word	0x54442d18
 80193f4:	3c1921fb 	.word	0x3c1921fb
 80193f8:	0801c110 	.word	0x0801c110
 80193fc:	0801c0b0 	.word	0x0801c0b0

08019400 <sinf_poly>:
 8019400:	07cb      	lsls	r3, r1, #31
 8019402:	d412      	bmi.n	801942a <sinf_poly+0x2a>
 8019404:	ee21 5b00 	vmul.f64	d5, d1, d0
 8019408:	ed90 6b1a 	vldr	d6, [r0, #104]	; 0x68
 801940c:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 8019410:	eea6 7b01 	vfma.f64	d7, d6, d1
 8019414:	ed90 6b16 	vldr	d6, [r0, #88]	; 0x58
 8019418:	ee21 1b05 	vmul.f64	d1, d1, d5
 801941c:	eea6 0b05 	vfma.f64	d0, d6, d5
 8019420:	eea7 0b01 	vfma.f64	d0, d7, d1
 8019424:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8019428:	4770      	bx	lr
 801942a:	ed90 6b14 	vldr	d6, [r0, #80]	; 0x50
 801942e:	ee21 5b01 	vmul.f64	d5, d1, d1
 8019432:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 8019436:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 801943a:	eea1 7b06 	vfma.f64	d7, d1, d6
 801943e:	ed90 6b0e 	vldr	d6, [r0, #56]	; 0x38
 8019442:	eea1 0b06 	vfma.f64	d0, d1, d6
 8019446:	ed90 6b10 	vldr	d6, [r0, #64]	; 0x40
 801944a:	ee21 1b05 	vmul.f64	d1, d1, d5
 801944e:	eea5 0b06 	vfma.f64	d0, d5, d6
 8019452:	e7e5      	b.n	8019420 <sinf_poly+0x20>
 8019454:	0000      	movs	r0, r0
	...

08019458 <cosf>:
 8019458:	b538      	push	{r3, r4, r5, lr}
 801945a:	ee10 4a10 	vmov	r4, s0
 801945e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8019462:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 8019466:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 801946a:	d21f      	bcs.n	80194ac <cosf+0x54>
 801946c:	ee27 7b07 	vmul.f64	d7, d7, d7
 8019470:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 8019474:	f0c0 8086 	bcc.w	8019584 <cosf+0x12c>
 8019478:	ee27 4b07 	vmul.f64	d4, d7, d7
 801947c:	4b46      	ldr	r3, [pc, #280]	; (8019598 <cosf+0x140>)
 801947e:	ed93 5b14 	vldr	d5, [r3, #80]	; 0x50
 8019482:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8019486:	ed93 0b0c 	vldr	d0, [r3, #48]	; 0x30
 801948a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801948e:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
 8019492:	eea7 0b05 	vfma.f64	d0, d7, d5
 8019496:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 801949a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801949e:	eea4 0b05 	vfma.f64	d0, d4, d5
 80194a2:	eea6 0b07 	vfma.f64	d0, d6, d7
 80194a6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80194aa:	bd38      	pop	{r3, r4, r5, pc}
 80194ac:	f240 422e 	movw	r2, #1070	; 0x42e
 80194b0:	4293      	cmp	r3, r2
 80194b2:	d829      	bhi.n	8019508 <cosf+0xb0>
 80194b4:	4b38      	ldr	r3, [pc, #224]	; (8019598 <cosf+0x140>)
 80194b6:	ed93 6b08 	vldr	d6, [r3, #32]
 80194ba:	ee27 6b06 	vmul.f64	d6, d7, d6
 80194be:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 80194c2:	f103 0070 	add.w	r0, r3, #112	; 0x70
 80194c6:	ee16 1a90 	vmov	r1, s13
 80194ca:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 80194ce:	1609      	asrs	r1, r1, #24
 80194d0:	ee06 1a90 	vmov	s13, r1
 80194d4:	f001 0203 	and.w	r2, r1, #3
 80194d8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80194dc:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80194e0:	ed92 0b00 	vldr	d0, [r2]
 80194e4:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 80194e8:	f011 0f02 	tst.w	r1, #2
 80194ec:	bf08      	it	eq
 80194ee:	4618      	moveq	r0, r3
 80194f0:	f081 0101 	eor.w	r1, r1, #1
 80194f4:	eea5 7b46 	vfms.f64	d7, d5, d6
 80194f8:	ee27 1b07 	vmul.f64	d1, d7, d7
 80194fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019500:	ee27 0b00 	vmul.f64	d0, d7, d0
 8019504:	f7ff bf7c 	b.w	8019400 <sinf_poly>
 8019508:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 801950c:	d236      	bcs.n	801957c <cosf+0x124>
 801950e:	4a23      	ldr	r2, [pc, #140]	; (801959c <cosf+0x144>)
 8019510:	f3c4 6183 	ubfx	r1, r4, #26, #4
 8019514:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 8019518:	f3c4 0316 	ubfx	r3, r4, #0, #23
 801951c:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 8019520:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8019524:	6a2a      	ldr	r2, [r5, #32]
 8019526:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801952a:	4083      	lsls	r3, r0
 801952c:	fba3 2002 	umull	r2, r0, r3, r2
 8019530:	692a      	ldr	r2, [r5, #16]
 8019532:	4359      	muls	r1, r3
 8019534:	fbe3 0102 	umlal	r0, r1, r3, r2
 8019538:	f101 5300 	add.w	r3, r1, #536870912	; 0x20000000
 801953c:	0f9d      	lsrs	r5, r3, #30
 801953e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8019542:	1ac9      	subs	r1, r1, r3
 8019544:	f7e7 f8b2 	bl	80006ac <__aeabi_l2d>
 8019548:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 801954c:	4b12      	ldr	r3, [pc, #72]	; (8019598 <cosf+0x140>)
 801954e:	ed9f 0b10 	vldr	d0, [pc, #64]	; 8019590 <cosf+0x138>
 8019552:	ec41 0b17 	vmov	d7, r0, r1
 8019556:	f004 0203 	and.w	r2, r4, #3
 801955a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801955e:	f014 0f02 	tst.w	r4, #2
 8019562:	ee27 0b00 	vmul.f64	d0, d7, d0
 8019566:	f103 0070 	add.w	r0, r3, #112	; 0x70
 801956a:	ed92 7b00 	vldr	d7, [r2]
 801956e:	ee20 1b00 	vmul.f64	d1, d0, d0
 8019572:	f085 0101 	eor.w	r1, r5, #1
 8019576:	bf08      	it	eq
 8019578:	4618      	moveq	r0, r3
 801957a:	e7bf      	b.n	80194fc <cosf+0xa4>
 801957c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019580:	f000 b819 	b.w	80195b6 <__math_invalidf>
 8019584:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8019588:	e78f      	b.n	80194aa <cosf+0x52>
 801958a:	bf00      	nop
 801958c:	f3af 8000 	nop.w
 8019590:	54442d18 	.word	0x54442d18
 8019594:	3c1921fb 	.word	0x3c1921fb
 8019598:	0801c110 	.word	0x0801c110
 801959c:	0801c0b0 	.word	0x0801c0b0

080195a0 <with_errnof>:
 80195a0:	b513      	push	{r0, r1, r4, lr}
 80195a2:	4604      	mov	r4, r0
 80195a4:	ed8d 0a01 	vstr	s0, [sp, #4]
 80195a8:	f000 fdbe 	bl	801a128 <__errno>
 80195ac:	ed9d 0a01 	vldr	s0, [sp, #4]
 80195b0:	6004      	str	r4, [r0, #0]
 80195b2:	b002      	add	sp, #8
 80195b4:	bd10      	pop	{r4, pc}

080195b6 <__math_invalidf>:
 80195b6:	eef0 7a40 	vmov.f32	s15, s0
 80195ba:	ee30 7a40 	vsub.f32	s14, s0, s0
 80195be:	eef4 7a67 	vcmp.f32	s15, s15
 80195c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195c6:	ee87 0a07 	vdiv.f32	s0, s14, s14
 80195ca:	d602      	bvs.n	80195d2 <__math_invalidf+0x1c>
 80195cc:	2021      	movs	r0, #33	; 0x21
 80195ce:	f7ff bfe7 	b.w	80195a0 <with_errnof>
 80195d2:	4770      	bx	lr

080195d4 <__ieee754_sqrtf>:
 80195d4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80195d8:	4770      	bx	lr

080195da <__cvt>:
 80195da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80195dc:	ed2d 8b02 	vpush	{d8}
 80195e0:	eeb0 8b40 	vmov.f64	d8, d0
 80195e4:	b085      	sub	sp, #20
 80195e6:	4617      	mov	r7, r2
 80195e8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80195ea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80195ec:	ee18 2a90 	vmov	r2, s17
 80195f0:	f025 0520 	bic.w	r5, r5, #32
 80195f4:	2a00      	cmp	r2, #0
 80195f6:	bfb6      	itet	lt
 80195f8:	222d      	movlt	r2, #45	; 0x2d
 80195fa:	2200      	movge	r2, #0
 80195fc:	eeb1 8b40 	vneglt.f64	d8, d0
 8019600:	2d46      	cmp	r5, #70	; 0x46
 8019602:	460c      	mov	r4, r1
 8019604:	701a      	strb	r2, [r3, #0]
 8019606:	d004      	beq.n	8019612 <__cvt+0x38>
 8019608:	2d45      	cmp	r5, #69	; 0x45
 801960a:	d100      	bne.n	801960e <__cvt+0x34>
 801960c:	3401      	adds	r4, #1
 801960e:	2102      	movs	r1, #2
 8019610:	e000      	b.n	8019614 <__cvt+0x3a>
 8019612:	2103      	movs	r1, #3
 8019614:	ab03      	add	r3, sp, #12
 8019616:	9301      	str	r3, [sp, #4]
 8019618:	ab02      	add	r3, sp, #8
 801961a:	9300      	str	r3, [sp, #0]
 801961c:	4622      	mov	r2, r4
 801961e:	4633      	mov	r3, r6
 8019620:	eeb0 0b48 	vmov.f64	d0, d8
 8019624:	f000 fe44 	bl	801a2b0 <_dtoa_r>
 8019628:	2d47      	cmp	r5, #71	; 0x47
 801962a:	d101      	bne.n	8019630 <__cvt+0x56>
 801962c:	07fb      	lsls	r3, r7, #31
 801962e:	d51a      	bpl.n	8019666 <__cvt+0x8c>
 8019630:	2d46      	cmp	r5, #70	; 0x46
 8019632:	eb00 0204 	add.w	r2, r0, r4
 8019636:	d10c      	bne.n	8019652 <__cvt+0x78>
 8019638:	7803      	ldrb	r3, [r0, #0]
 801963a:	2b30      	cmp	r3, #48	; 0x30
 801963c:	d107      	bne.n	801964e <__cvt+0x74>
 801963e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8019642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019646:	bf1c      	itt	ne
 8019648:	f1c4 0401 	rsbne	r4, r4, #1
 801964c:	6034      	strne	r4, [r6, #0]
 801964e:	6833      	ldr	r3, [r6, #0]
 8019650:	441a      	add	r2, r3
 8019652:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8019656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801965a:	bf08      	it	eq
 801965c:	9203      	streq	r2, [sp, #12]
 801965e:	2130      	movs	r1, #48	; 0x30
 8019660:	9b03      	ldr	r3, [sp, #12]
 8019662:	4293      	cmp	r3, r2
 8019664:	d307      	bcc.n	8019676 <__cvt+0x9c>
 8019666:	9b03      	ldr	r3, [sp, #12]
 8019668:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801966a:	1a1b      	subs	r3, r3, r0
 801966c:	6013      	str	r3, [r2, #0]
 801966e:	b005      	add	sp, #20
 8019670:	ecbd 8b02 	vpop	{d8}
 8019674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019676:	1c5c      	adds	r4, r3, #1
 8019678:	9403      	str	r4, [sp, #12]
 801967a:	7019      	strb	r1, [r3, #0]
 801967c:	e7f0      	b.n	8019660 <__cvt+0x86>

0801967e <__exponent>:
 801967e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019680:	4603      	mov	r3, r0
 8019682:	2900      	cmp	r1, #0
 8019684:	bfb8      	it	lt
 8019686:	4249      	neglt	r1, r1
 8019688:	f803 2b02 	strb.w	r2, [r3], #2
 801968c:	bfb4      	ite	lt
 801968e:	222d      	movlt	r2, #45	; 0x2d
 8019690:	222b      	movge	r2, #43	; 0x2b
 8019692:	2909      	cmp	r1, #9
 8019694:	7042      	strb	r2, [r0, #1]
 8019696:	dd2a      	ble.n	80196ee <__exponent+0x70>
 8019698:	f10d 0207 	add.w	r2, sp, #7
 801969c:	4617      	mov	r7, r2
 801969e:	260a      	movs	r6, #10
 80196a0:	4694      	mov	ip, r2
 80196a2:	fb91 f5f6 	sdiv	r5, r1, r6
 80196a6:	fb06 1415 	mls	r4, r6, r5, r1
 80196aa:	3430      	adds	r4, #48	; 0x30
 80196ac:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80196b0:	460c      	mov	r4, r1
 80196b2:	2c63      	cmp	r4, #99	; 0x63
 80196b4:	f102 32ff 	add.w	r2, r2, #4294967295
 80196b8:	4629      	mov	r1, r5
 80196ba:	dcf1      	bgt.n	80196a0 <__exponent+0x22>
 80196bc:	3130      	adds	r1, #48	; 0x30
 80196be:	f1ac 0402 	sub.w	r4, ip, #2
 80196c2:	f802 1c01 	strb.w	r1, [r2, #-1]
 80196c6:	1c41      	adds	r1, r0, #1
 80196c8:	4622      	mov	r2, r4
 80196ca:	42ba      	cmp	r2, r7
 80196cc:	d30a      	bcc.n	80196e4 <__exponent+0x66>
 80196ce:	f10d 0209 	add.w	r2, sp, #9
 80196d2:	eba2 020c 	sub.w	r2, r2, ip
 80196d6:	42bc      	cmp	r4, r7
 80196d8:	bf88      	it	hi
 80196da:	2200      	movhi	r2, #0
 80196dc:	4413      	add	r3, r2
 80196de:	1a18      	subs	r0, r3, r0
 80196e0:	b003      	add	sp, #12
 80196e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80196e4:	f812 5b01 	ldrb.w	r5, [r2], #1
 80196e8:	f801 5f01 	strb.w	r5, [r1, #1]!
 80196ec:	e7ed      	b.n	80196ca <__exponent+0x4c>
 80196ee:	2330      	movs	r3, #48	; 0x30
 80196f0:	3130      	adds	r1, #48	; 0x30
 80196f2:	7083      	strb	r3, [r0, #2]
 80196f4:	70c1      	strb	r1, [r0, #3]
 80196f6:	1d03      	adds	r3, r0, #4
 80196f8:	e7f1      	b.n	80196de <__exponent+0x60>
 80196fa:	0000      	movs	r0, r0
 80196fc:	0000      	movs	r0, r0
	...

08019700 <_printf_float>:
 8019700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019704:	b08b      	sub	sp, #44	; 0x2c
 8019706:	460c      	mov	r4, r1
 8019708:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801970c:	4616      	mov	r6, r2
 801970e:	461f      	mov	r7, r3
 8019710:	4605      	mov	r5, r0
 8019712:	f000 fcbf 	bl	801a094 <_localeconv_r>
 8019716:	f8d0 b000 	ldr.w	fp, [r0]
 801971a:	4658      	mov	r0, fp
 801971c:	f7e6 fe30 	bl	8000380 <strlen>
 8019720:	2300      	movs	r3, #0
 8019722:	9308      	str	r3, [sp, #32]
 8019724:	f8d8 3000 	ldr.w	r3, [r8]
 8019728:	f894 9018 	ldrb.w	r9, [r4, #24]
 801972c:	6822      	ldr	r2, [r4, #0]
 801972e:	3307      	adds	r3, #7
 8019730:	f023 0307 	bic.w	r3, r3, #7
 8019734:	f103 0108 	add.w	r1, r3, #8
 8019738:	f8c8 1000 	str.w	r1, [r8]
 801973c:	ed93 0b00 	vldr	d0, [r3]
 8019740:	ed9f 6b97 	vldr	d6, [pc, #604]	; 80199a0 <_printf_float+0x2a0>
 8019744:	eeb0 7bc0 	vabs.f64	d7, d0
 8019748:	eeb4 7b46 	vcmp.f64	d7, d6
 801974c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019750:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8019754:	4682      	mov	sl, r0
 8019756:	dd24      	ble.n	80197a2 <_printf_float+0xa2>
 8019758:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801975c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019760:	d502      	bpl.n	8019768 <_printf_float+0x68>
 8019762:	232d      	movs	r3, #45	; 0x2d
 8019764:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019768:	498f      	ldr	r1, [pc, #572]	; (80199a8 <_printf_float+0x2a8>)
 801976a:	4b90      	ldr	r3, [pc, #576]	; (80199ac <_printf_float+0x2ac>)
 801976c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8019770:	bf94      	ite	ls
 8019772:	4688      	movls	r8, r1
 8019774:	4698      	movhi	r8, r3
 8019776:	2303      	movs	r3, #3
 8019778:	6123      	str	r3, [r4, #16]
 801977a:	f022 0204 	bic.w	r2, r2, #4
 801977e:	2300      	movs	r3, #0
 8019780:	6022      	str	r2, [r4, #0]
 8019782:	9304      	str	r3, [sp, #16]
 8019784:	9700      	str	r7, [sp, #0]
 8019786:	4633      	mov	r3, r6
 8019788:	aa09      	add	r2, sp, #36	; 0x24
 801978a:	4621      	mov	r1, r4
 801978c:	4628      	mov	r0, r5
 801978e:	f000 f9d1 	bl	8019b34 <_printf_common>
 8019792:	3001      	adds	r0, #1
 8019794:	f040 808a 	bne.w	80198ac <_printf_float+0x1ac>
 8019798:	f04f 30ff 	mov.w	r0, #4294967295
 801979c:	b00b      	add	sp, #44	; 0x2c
 801979e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197a2:	eeb4 0b40 	vcmp.f64	d0, d0
 80197a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197aa:	d709      	bvc.n	80197c0 <_printf_float+0xc0>
 80197ac:	ee10 3a90 	vmov	r3, s1
 80197b0:	2b00      	cmp	r3, #0
 80197b2:	bfbc      	itt	lt
 80197b4:	232d      	movlt	r3, #45	; 0x2d
 80197b6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80197ba:	497d      	ldr	r1, [pc, #500]	; (80199b0 <_printf_float+0x2b0>)
 80197bc:	4b7d      	ldr	r3, [pc, #500]	; (80199b4 <_printf_float+0x2b4>)
 80197be:	e7d5      	b.n	801976c <_printf_float+0x6c>
 80197c0:	6863      	ldr	r3, [r4, #4]
 80197c2:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80197c6:	9104      	str	r1, [sp, #16]
 80197c8:	1c59      	adds	r1, r3, #1
 80197ca:	d13c      	bne.n	8019846 <_printf_float+0x146>
 80197cc:	2306      	movs	r3, #6
 80197ce:	6063      	str	r3, [r4, #4]
 80197d0:	2300      	movs	r3, #0
 80197d2:	9303      	str	r3, [sp, #12]
 80197d4:	ab08      	add	r3, sp, #32
 80197d6:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80197da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80197de:	ab07      	add	r3, sp, #28
 80197e0:	6861      	ldr	r1, [r4, #4]
 80197e2:	9300      	str	r3, [sp, #0]
 80197e4:	6022      	str	r2, [r4, #0]
 80197e6:	f10d 031b 	add.w	r3, sp, #27
 80197ea:	4628      	mov	r0, r5
 80197ec:	f7ff fef5 	bl	80195da <__cvt>
 80197f0:	9b04      	ldr	r3, [sp, #16]
 80197f2:	9907      	ldr	r1, [sp, #28]
 80197f4:	2b47      	cmp	r3, #71	; 0x47
 80197f6:	4680      	mov	r8, r0
 80197f8:	d108      	bne.n	801980c <_printf_float+0x10c>
 80197fa:	1cc8      	adds	r0, r1, #3
 80197fc:	db02      	blt.n	8019804 <_printf_float+0x104>
 80197fe:	6863      	ldr	r3, [r4, #4]
 8019800:	4299      	cmp	r1, r3
 8019802:	dd41      	ble.n	8019888 <_printf_float+0x188>
 8019804:	f1a9 0902 	sub.w	r9, r9, #2
 8019808:	fa5f f989 	uxtb.w	r9, r9
 801980c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8019810:	d820      	bhi.n	8019854 <_printf_float+0x154>
 8019812:	3901      	subs	r1, #1
 8019814:	464a      	mov	r2, r9
 8019816:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801981a:	9107      	str	r1, [sp, #28]
 801981c:	f7ff ff2f 	bl	801967e <__exponent>
 8019820:	9a08      	ldr	r2, [sp, #32]
 8019822:	9004      	str	r0, [sp, #16]
 8019824:	1813      	adds	r3, r2, r0
 8019826:	2a01      	cmp	r2, #1
 8019828:	6123      	str	r3, [r4, #16]
 801982a:	dc02      	bgt.n	8019832 <_printf_float+0x132>
 801982c:	6822      	ldr	r2, [r4, #0]
 801982e:	07d2      	lsls	r2, r2, #31
 8019830:	d501      	bpl.n	8019836 <_printf_float+0x136>
 8019832:	3301      	adds	r3, #1
 8019834:	6123      	str	r3, [r4, #16]
 8019836:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801983a:	2b00      	cmp	r3, #0
 801983c:	d0a2      	beq.n	8019784 <_printf_float+0x84>
 801983e:	232d      	movs	r3, #45	; 0x2d
 8019840:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019844:	e79e      	b.n	8019784 <_printf_float+0x84>
 8019846:	9904      	ldr	r1, [sp, #16]
 8019848:	2947      	cmp	r1, #71	; 0x47
 801984a:	d1c1      	bne.n	80197d0 <_printf_float+0xd0>
 801984c:	2b00      	cmp	r3, #0
 801984e:	d1bf      	bne.n	80197d0 <_printf_float+0xd0>
 8019850:	2301      	movs	r3, #1
 8019852:	e7bc      	b.n	80197ce <_printf_float+0xce>
 8019854:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8019858:	d118      	bne.n	801988c <_printf_float+0x18c>
 801985a:	2900      	cmp	r1, #0
 801985c:	6863      	ldr	r3, [r4, #4]
 801985e:	dd0b      	ble.n	8019878 <_printf_float+0x178>
 8019860:	6121      	str	r1, [r4, #16]
 8019862:	b913      	cbnz	r3, 801986a <_printf_float+0x16a>
 8019864:	6822      	ldr	r2, [r4, #0]
 8019866:	07d0      	lsls	r0, r2, #31
 8019868:	d502      	bpl.n	8019870 <_printf_float+0x170>
 801986a:	3301      	adds	r3, #1
 801986c:	440b      	add	r3, r1
 801986e:	6123      	str	r3, [r4, #16]
 8019870:	2300      	movs	r3, #0
 8019872:	65a1      	str	r1, [r4, #88]	; 0x58
 8019874:	9304      	str	r3, [sp, #16]
 8019876:	e7de      	b.n	8019836 <_printf_float+0x136>
 8019878:	b913      	cbnz	r3, 8019880 <_printf_float+0x180>
 801987a:	6822      	ldr	r2, [r4, #0]
 801987c:	07d2      	lsls	r2, r2, #31
 801987e:	d501      	bpl.n	8019884 <_printf_float+0x184>
 8019880:	3302      	adds	r3, #2
 8019882:	e7f4      	b.n	801986e <_printf_float+0x16e>
 8019884:	2301      	movs	r3, #1
 8019886:	e7f2      	b.n	801986e <_printf_float+0x16e>
 8019888:	f04f 0967 	mov.w	r9, #103	; 0x67
 801988c:	9b08      	ldr	r3, [sp, #32]
 801988e:	4299      	cmp	r1, r3
 8019890:	db05      	blt.n	801989e <_printf_float+0x19e>
 8019892:	6823      	ldr	r3, [r4, #0]
 8019894:	6121      	str	r1, [r4, #16]
 8019896:	07d8      	lsls	r0, r3, #31
 8019898:	d5ea      	bpl.n	8019870 <_printf_float+0x170>
 801989a:	1c4b      	adds	r3, r1, #1
 801989c:	e7e7      	b.n	801986e <_printf_float+0x16e>
 801989e:	2900      	cmp	r1, #0
 80198a0:	bfd4      	ite	le
 80198a2:	f1c1 0202 	rsble	r2, r1, #2
 80198a6:	2201      	movgt	r2, #1
 80198a8:	4413      	add	r3, r2
 80198aa:	e7e0      	b.n	801986e <_printf_float+0x16e>
 80198ac:	6823      	ldr	r3, [r4, #0]
 80198ae:	055a      	lsls	r2, r3, #21
 80198b0:	d407      	bmi.n	80198c2 <_printf_float+0x1c2>
 80198b2:	6923      	ldr	r3, [r4, #16]
 80198b4:	4642      	mov	r2, r8
 80198b6:	4631      	mov	r1, r6
 80198b8:	4628      	mov	r0, r5
 80198ba:	47b8      	blx	r7
 80198bc:	3001      	adds	r0, #1
 80198be:	d12a      	bne.n	8019916 <_printf_float+0x216>
 80198c0:	e76a      	b.n	8019798 <_printf_float+0x98>
 80198c2:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80198c6:	f240 80e0 	bls.w	8019a8a <_printf_float+0x38a>
 80198ca:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80198ce:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80198d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198d6:	d133      	bne.n	8019940 <_printf_float+0x240>
 80198d8:	4a37      	ldr	r2, [pc, #220]	; (80199b8 <_printf_float+0x2b8>)
 80198da:	2301      	movs	r3, #1
 80198dc:	4631      	mov	r1, r6
 80198de:	4628      	mov	r0, r5
 80198e0:	47b8      	blx	r7
 80198e2:	3001      	adds	r0, #1
 80198e4:	f43f af58 	beq.w	8019798 <_printf_float+0x98>
 80198e8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80198ec:	429a      	cmp	r2, r3
 80198ee:	db02      	blt.n	80198f6 <_printf_float+0x1f6>
 80198f0:	6823      	ldr	r3, [r4, #0]
 80198f2:	07d8      	lsls	r0, r3, #31
 80198f4:	d50f      	bpl.n	8019916 <_printf_float+0x216>
 80198f6:	4653      	mov	r3, sl
 80198f8:	465a      	mov	r2, fp
 80198fa:	4631      	mov	r1, r6
 80198fc:	4628      	mov	r0, r5
 80198fe:	47b8      	blx	r7
 8019900:	3001      	adds	r0, #1
 8019902:	f43f af49 	beq.w	8019798 <_printf_float+0x98>
 8019906:	f04f 0800 	mov.w	r8, #0
 801990a:	f104 091a 	add.w	r9, r4, #26
 801990e:	9b08      	ldr	r3, [sp, #32]
 8019910:	3b01      	subs	r3, #1
 8019912:	4543      	cmp	r3, r8
 8019914:	dc09      	bgt.n	801992a <_printf_float+0x22a>
 8019916:	6823      	ldr	r3, [r4, #0]
 8019918:	079b      	lsls	r3, r3, #30
 801991a:	f100 8106 	bmi.w	8019b2a <_printf_float+0x42a>
 801991e:	68e0      	ldr	r0, [r4, #12]
 8019920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019922:	4298      	cmp	r0, r3
 8019924:	bfb8      	it	lt
 8019926:	4618      	movlt	r0, r3
 8019928:	e738      	b.n	801979c <_printf_float+0x9c>
 801992a:	2301      	movs	r3, #1
 801992c:	464a      	mov	r2, r9
 801992e:	4631      	mov	r1, r6
 8019930:	4628      	mov	r0, r5
 8019932:	47b8      	blx	r7
 8019934:	3001      	adds	r0, #1
 8019936:	f43f af2f 	beq.w	8019798 <_printf_float+0x98>
 801993a:	f108 0801 	add.w	r8, r8, #1
 801993e:	e7e6      	b.n	801990e <_printf_float+0x20e>
 8019940:	9b07      	ldr	r3, [sp, #28]
 8019942:	2b00      	cmp	r3, #0
 8019944:	dc3a      	bgt.n	80199bc <_printf_float+0x2bc>
 8019946:	4a1c      	ldr	r2, [pc, #112]	; (80199b8 <_printf_float+0x2b8>)
 8019948:	2301      	movs	r3, #1
 801994a:	4631      	mov	r1, r6
 801994c:	4628      	mov	r0, r5
 801994e:	47b8      	blx	r7
 8019950:	3001      	adds	r0, #1
 8019952:	f43f af21 	beq.w	8019798 <_printf_float+0x98>
 8019956:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801995a:	4313      	orrs	r3, r2
 801995c:	d102      	bne.n	8019964 <_printf_float+0x264>
 801995e:	6823      	ldr	r3, [r4, #0]
 8019960:	07d9      	lsls	r1, r3, #31
 8019962:	d5d8      	bpl.n	8019916 <_printf_float+0x216>
 8019964:	4653      	mov	r3, sl
 8019966:	465a      	mov	r2, fp
 8019968:	4631      	mov	r1, r6
 801996a:	4628      	mov	r0, r5
 801996c:	47b8      	blx	r7
 801996e:	3001      	adds	r0, #1
 8019970:	f43f af12 	beq.w	8019798 <_printf_float+0x98>
 8019974:	f04f 0900 	mov.w	r9, #0
 8019978:	f104 0a1a 	add.w	sl, r4, #26
 801997c:	9b07      	ldr	r3, [sp, #28]
 801997e:	425b      	negs	r3, r3
 8019980:	454b      	cmp	r3, r9
 8019982:	dc01      	bgt.n	8019988 <_printf_float+0x288>
 8019984:	9b08      	ldr	r3, [sp, #32]
 8019986:	e795      	b.n	80198b4 <_printf_float+0x1b4>
 8019988:	2301      	movs	r3, #1
 801998a:	4652      	mov	r2, sl
 801998c:	4631      	mov	r1, r6
 801998e:	4628      	mov	r0, r5
 8019990:	47b8      	blx	r7
 8019992:	3001      	adds	r0, #1
 8019994:	f43f af00 	beq.w	8019798 <_printf_float+0x98>
 8019998:	f109 0901 	add.w	r9, r9, #1
 801999c:	e7ee      	b.n	801997c <_printf_float+0x27c>
 801999e:	bf00      	nop
 80199a0:	ffffffff 	.word	0xffffffff
 80199a4:	7fefffff 	.word	0x7fefffff
 80199a8:	0801c1f0 	.word	0x0801c1f0
 80199ac:	0801c1f4 	.word	0x0801c1f4
 80199b0:	0801c1f8 	.word	0x0801c1f8
 80199b4:	0801c1fc 	.word	0x0801c1fc
 80199b8:	0801c200 	.word	0x0801c200
 80199bc:	9a08      	ldr	r2, [sp, #32]
 80199be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80199c0:	429a      	cmp	r2, r3
 80199c2:	bfa8      	it	ge
 80199c4:	461a      	movge	r2, r3
 80199c6:	2a00      	cmp	r2, #0
 80199c8:	4691      	mov	r9, r2
 80199ca:	dc38      	bgt.n	8019a3e <_printf_float+0x33e>
 80199cc:	2300      	movs	r3, #0
 80199ce:	9305      	str	r3, [sp, #20]
 80199d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80199d4:	f104 021a 	add.w	r2, r4, #26
 80199d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80199da:	9905      	ldr	r1, [sp, #20]
 80199dc:	9304      	str	r3, [sp, #16]
 80199de:	eba3 0309 	sub.w	r3, r3, r9
 80199e2:	428b      	cmp	r3, r1
 80199e4:	dc33      	bgt.n	8019a4e <_printf_float+0x34e>
 80199e6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80199ea:	429a      	cmp	r2, r3
 80199ec:	db3c      	blt.n	8019a68 <_printf_float+0x368>
 80199ee:	6823      	ldr	r3, [r4, #0]
 80199f0:	07da      	lsls	r2, r3, #31
 80199f2:	d439      	bmi.n	8019a68 <_printf_float+0x368>
 80199f4:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80199f8:	eba2 0903 	sub.w	r9, r2, r3
 80199fc:	9b04      	ldr	r3, [sp, #16]
 80199fe:	1ad2      	subs	r2, r2, r3
 8019a00:	4591      	cmp	r9, r2
 8019a02:	bfa8      	it	ge
 8019a04:	4691      	movge	r9, r2
 8019a06:	f1b9 0f00 	cmp.w	r9, #0
 8019a0a:	dc35      	bgt.n	8019a78 <_printf_float+0x378>
 8019a0c:	f04f 0800 	mov.w	r8, #0
 8019a10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019a14:	f104 0a1a 	add.w	sl, r4, #26
 8019a18:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8019a1c:	1a9b      	subs	r3, r3, r2
 8019a1e:	eba3 0309 	sub.w	r3, r3, r9
 8019a22:	4543      	cmp	r3, r8
 8019a24:	f77f af77 	ble.w	8019916 <_printf_float+0x216>
 8019a28:	2301      	movs	r3, #1
 8019a2a:	4652      	mov	r2, sl
 8019a2c:	4631      	mov	r1, r6
 8019a2e:	4628      	mov	r0, r5
 8019a30:	47b8      	blx	r7
 8019a32:	3001      	adds	r0, #1
 8019a34:	f43f aeb0 	beq.w	8019798 <_printf_float+0x98>
 8019a38:	f108 0801 	add.w	r8, r8, #1
 8019a3c:	e7ec      	b.n	8019a18 <_printf_float+0x318>
 8019a3e:	4613      	mov	r3, r2
 8019a40:	4631      	mov	r1, r6
 8019a42:	4642      	mov	r2, r8
 8019a44:	4628      	mov	r0, r5
 8019a46:	47b8      	blx	r7
 8019a48:	3001      	adds	r0, #1
 8019a4a:	d1bf      	bne.n	80199cc <_printf_float+0x2cc>
 8019a4c:	e6a4      	b.n	8019798 <_printf_float+0x98>
 8019a4e:	2301      	movs	r3, #1
 8019a50:	4631      	mov	r1, r6
 8019a52:	4628      	mov	r0, r5
 8019a54:	9204      	str	r2, [sp, #16]
 8019a56:	47b8      	blx	r7
 8019a58:	3001      	adds	r0, #1
 8019a5a:	f43f ae9d 	beq.w	8019798 <_printf_float+0x98>
 8019a5e:	9b05      	ldr	r3, [sp, #20]
 8019a60:	9a04      	ldr	r2, [sp, #16]
 8019a62:	3301      	adds	r3, #1
 8019a64:	9305      	str	r3, [sp, #20]
 8019a66:	e7b7      	b.n	80199d8 <_printf_float+0x2d8>
 8019a68:	4653      	mov	r3, sl
 8019a6a:	465a      	mov	r2, fp
 8019a6c:	4631      	mov	r1, r6
 8019a6e:	4628      	mov	r0, r5
 8019a70:	47b8      	blx	r7
 8019a72:	3001      	adds	r0, #1
 8019a74:	d1be      	bne.n	80199f4 <_printf_float+0x2f4>
 8019a76:	e68f      	b.n	8019798 <_printf_float+0x98>
 8019a78:	9a04      	ldr	r2, [sp, #16]
 8019a7a:	464b      	mov	r3, r9
 8019a7c:	4442      	add	r2, r8
 8019a7e:	4631      	mov	r1, r6
 8019a80:	4628      	mov	r0, r5
 8019a82:	47b8      	blx	r7
 8019a84:	3001      	adds	r0, #1
 8019a86:	d1c1      	bne.n	8019a0c <_printf_float+0x30c>
 8019a88:	e686      	b.n	8019798 <_printf_float+0x98>
 8019a8a:	9a08      	ldr	r2, [sp, #32]
 8019a8c:	2a01      	cmp	r2, #1
 8019a8e:	dc01      	bgt.n	8019a94 <_printf_float+0x394>
 8019a90:	07db      	lsls	r3, r3, #31
 8019a92:	d537      	bpl.n	8019b04 <_printf_float+0x404>
 8019a94:	2301      	movs	r3, #1
 8019a96:	4642      	mov	r2, r8
 8019a98:	4631      	mov	r1, r6
 8019a9a:	4628      	mov	r0, r5
 8019a9c:	47b8      	blx	r7
 8019a9e:	3001      	adds	r0, #1
 8019aa0:	f43f ae7a 	beq.w	8019798 <_printf_float+0x98>
 8019aa4:	4653      	mov	r3, sl
 8019aa6:	465a      	mov	r2, fp
 8019aa8:	4631      	mov	r1, r6
 8019aaa:	4628      	mov	r0, r5
 8019aac:	47b8      	blx	r7
 8019aae:	3001      	adds	r0, #1
 8019ab0:	f43f ae72 	beq.w	8019798 <_printf_float+0x98>
 8019ab4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8019ab8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ac0:	9b08      	ldr	r3, [sp, #32]
 8019ac2:	d01a      	beq.n	8019afa <_printf_float+0x3fa>
 8019ac4:	3b01      	subs	r3, #1
 8019ac6:	f108 0201 	add.w	r2, r8, #1
 8019aca:	4631      	mov	r1, r6
 8019acc:	4628      	mov	r0, r5
 8019ace:	47b8      	blx	r7
 8019ad0:	3001      	adds	r0, #1
 8019ad2:	d10e      	bne.n	8019af2 <_printf_float+0x3f2>
 8019ad4:	e660      	b.n	8019798 <_printf_float+0x98>
 8019ad6:	2301      	movs	r3, #1
 8019ad8:	464a      	mov	r2, r9
 8019ada:	4631      	mov	r1, r6
 8019adc:	4628      	mov	r0, r5
 8019ade:	47b8      	blx	r7
 8019ae0:	3001      	adds	r0, #1
 8019ae2:	f43f ae59 	beq.w	8019798 <_printf_float+0x98>
 8019ae6:	f108 0801 	add.w	r8, r8, #1
 8019aea:	9b08      	ldr	r3, [sp, #32]
 8019aec:	3b01      	subs	r3, #1
 8019aee:	4543      	cmp	r3, r8
 8019af0:	dcf1      	bgt.n	8019ad6 <_printf_float+0x3d6>
 8019af2:	9b04      	ldr	r3, [sp, #16]
 8019af4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8019af8:	e6dd      	b.n	80198b6 <_printf_float+0x1b6>
 8019afa:	f04f 0800 	mov.w	r8, #0
 8019afe:	f104 091a 	add.w	r9, r4, #26
 8019b02:	e7f2      	b.n	8019aea <_printf_float+0x3ea>
 8019b04:	2301      	movs	r3, #1
 8019b06:	4642      	mov	r2, r8
 8019b08:	e7df      	b.n	8019aca <_printf_float+0x3ca>
 8019b0a:	2301      	movs	r3, #1
 8019b0c:	464a      	mov	r2, r9
 8019b0e:	4631      	mov	r1, r6
 8019b10:	4628      	mov	r0, r5
 8019b12:	47b8      	blx	r7
 8019b14:	3001      	adds	r0, #1
 8019b16:	f43f ae3f 	beq.w	8019798 <_printf_float+0x98>
 8019b1a:	f108 0801 	add.w	r8, r8, #1
 8019b1e:	68e3      	ldr	r3, [r4, #12]
 8019b20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019b22:	1a5b      	subs	r3, r3, r1
 8019b24:	4543      	cmp	r3, r8
 8019b26:	dcf0      	bgt.n	8019b0a <_printf_float+0x40a>
 8019b28:	e6f9      	b.n	801991e <_printf_float+0x21e>
 8019b2a:	f04f 0800 	mov.w	r8, #0
 8019b2e:	f104 0919 	add.w	r9, r4, #25
 8019b32:	e7f4      	b.n	8019b1e <_printf_float+0x41e>

08019b34 <_printf_common>:
 8019b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019b38:	4616      	mov	r6, r2
 8019b3a:	4699      	mov	r9, r3
 8019b3c:	688a      	ldr	r2, [r1, #8]
 8019b3e:	690b      	ldr	r3, [r1, #16]
 8019b40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019b44:	4293      	cmp	r3, r2
 8019b46:	bfb8      	it	lt
 8019b48:	4613      	movlt	r3, r2
 8019b4a:	6033      	str	r3, [r6, #0]
 8019b4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019b50:	4607      	mov	r7, r0
 8019b52:	460c      	mov	r4, r1
 8019b54:	b10a      	cbz	r2, 8019b5a <_printf_common+0x26>
 8019b56:	3301      	adds	r3, #1
 8019b58:	6033      	str	r3, [r6, #0]
 8019b5a:	6823      	ldr	r3, [r4, #0]
 8019b5c:	0699      	lsls	r1, r3, #26
 8019b5e:	bf42      	ittt	mi
 8019b60:	6833      	ldrmi	r3, [r6, #0]
 8019b62:	3302      	addmi	r3, #2
 8019b64:	6033      	strmi	r3, [r6, #0]
 8019b66:	6825      	ldr	r5, [r4, #0]
 8019b68:	f015 0506 	ands.w	r5, r5, #6
 8019b6c:	d106      	bne.n	8019b7c <_printf_common+0x48>
 8019b6e:	f104 0a19 	add.w	sl, r4, #25
 8019b72:	68e3      	ldr	r3, [r4, #12]
 8019b74:	6832      	ldr	r2, [r6, #0]
 8019b76:	1a9b      	subs	r3, r3, r2
 8019b78:	42ab      	cmp	r3, r5
 8019b7a:	dc26      	bgt.n	8019bca <_printf_common+0x96>
 8019b7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019b80:	1e13      	subs	r3, r2, #0
 8019b82:	6822      	ldr	r2, [r4, #0]
 8019b84:	bf18      	it	ne
 8019b86:	2301      	movne	r3, #1
 8019b88:	0692      	lsls	r2, r2, #26
 8019b8a:	d42b      	bmi.n	8019be4 <_printf_common+0xb0>
 8019b8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019b90:	4649      	mov	r1, r9
 8019b92:	4638      	mov	r0, r7
 8019b94:	47c0      	blx	r8
 8019b96:	3001      	adds	r0, #1
 8019b98:	d01e      	beq.n	8019bd8 <_printf_common+0xa4>
 8019b9a:	6823      	ldr	r3, [r4, #0]
 8019b9c:	6922      	ldr	r2, [r4, #16]
 8019b9e:	f003 0306 	and.w	r3, r3, #6
 8019ba2:	2b04      	cmp	r3, #4
 8019ba4:	bf02      	ittt	eq
 8019ba6:	68e5      	ldreq	r5, [r4, #12]
 8019ba8:	6833      	ldreq	r3, [r6, #0]
 8019baa:	1aed      	subeq	r5, r5, r3
 8019bac:	68a3      	ldr	r3, [r4, #8]
 8019bae:	bf0c      	ite	eq
 8019bb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019bb4:	2500      	movne	r5, #0
 8019bb6:	4293      	cmp	r3, r2
 8019bb8:	bfc4      	itt	gt
 8019bba:	1a9b      	subgt	r3, r3, r2
 8019bbc:	18ed      	addgt	r5, r5, r3
 8019bbe:	2600      	movs	r6, #0
 8019bc0:	341a      	adds	r4, #26
 8019bc2:	42b5      	cmp	r5, r6
 8019bc4:	d11a      	bne.n	8019bfc <_printf_common+0xc8>
 8019bc6:	2000      	movs	r0, #0
 8019bc8:	e008      	b.n	8019bdc <_printf_common+0xa8>
 8019bca:	2301      	movs	r3, #1
 8019bcc:	4652      	mov	r2, sl
 8019bce:	4649      	mov	r1, r9
 8019bd0:	4638      	mov	r0, r7
 8019bd2:	47c0      	blx	r8
 8019bd4:	3001      	adds	r0, #1
 8019bd6:	d103      	bne.n	8019be0 <_printf_common+0xac>
 8019bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8019bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019be0:	3501      	adds	r5, #1
 8019be2:	e7c6      	b.n	8019b72 <_printf_common+0x3e>
 8019be4:	18e1      	adds	r1, r4, r3
 8019be6:	1c5a      	adds	r2, r3, #1
 8019be8:	2030      	movs	r0, #48	; 0x30
 8019bea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019bee:	4422      	add	r2, r4
 8019bf0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019bf4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019bf8:	3302      	adds	r3, #2
 8019bfa:	e7c7      	b.n	8019b8c <_printf_common+0x58>
 8019bfc:	2301      	movs	r3, #1
 8019bfe:	4622      	mov	r2, r4
 8019c00:	4649      	mov	r1, r9
 8019c02:	4638      	mov	r0, r7
 8019c04:	47c0      	blx	r8
 8019c06:	3001      	adds	r0, #1
 8019c08:	d0e6      	beq.n	8019bd8 <_printf_common+0xa4>
 8019c0a:	3601      	adds	r6, #1
 8019c0c:	e7d9      	b.n	8019bc2 <_printf_common+0x8e>
	...

08019c10 <_printf_i>:
 8019c10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019c14:	7e0f      	ldrb	r7, [r1, #24]
 8019c16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019c18:	2f78      	cmp	r7, #120	; 0x78
 8019c1a:	4691      	mov	r9, r2
 8019c1c:	4680      	mov	r8, r0
 8019c1e:	460c      	mov	r4, r1
 8019c20:	469a      	mov	sl, r3
 8019c22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8019c26:	d807      	bhi.n	8019c38 <_printf_i+0x28>
 8019c28:	2f62      	cmp	r7, #98	; 0x62
 8019c2a:	d80a      	bhi.n	8019c42 <_printf_i+0x32>
 8019c2c:	2f00      	cmp	r7, #0
 8019c2e:	f000 80d4 	beq.w	8019dda <_printf_i+0x1ca>
 8019c32:	2f58      	cmp	r7, #88	; 0x58
 8019c34:	f000 80c0 	beq.w	8019db8 <_printf_i+0x1a8>
 8019c38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019c3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019c40:	e03a      	b.n	8019cb8 <_printf_i+0xa8>
 8019c42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019c46:	2b15      	cmp	r3, #21
 8019c48:	d8f6      	bhi.n	8019c38 <_printf_i+0x28>
 8019c4a:	a101      	add	r1, pc, #4	; (adr r1, 8019c50 <_printf_i+0x40>)
 8019c4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019c50:	08019ca9 	.word	0x08019ca9
 8019c54:	08019cbd 	.word	0x08019cbd
 8019c58:	08019c39 	.word	0x08019c39
 8019c5c:	08019c39 	.word	0x08019c39
 8019c60:	08019c39 	.word	0x08019c39
 8019c64:	08019c39 	.word	0x08019c39
 8019c68:	08019cbd 	.word	0x08019cbd
 8019c6c:	08019c39 	.word	0x08019c39
 8019c70:	08019c39 	.word	0x08019c39
 8019c74:	08019c39 	.word	0x08019c39
 8019c78:	08019c39 	.word	0x08019c39
 8019c7c:	08019dc1 	.word	0x08019dc1
 8019c80:	08019ce9 	.word	0x08019ce9
 8019c84:	08019d7b 	.word	0x08019d7b
 8019c88:	08019c39 	.word	0x08019c39
 8019c8c:	08019c39 	.word	0x08019c39
 8019c90:	08019de3 	.word	0x08019de3
 8019c94:	08019c39 	.word	0x08019c39
 8019c98:	08019ce9 	.word	0x08019ce9
 8019c9c:	08019c39 	.word	0x08019c39
 8019ca0:	08019c39 	.word	0x08019c39
 8019ca4:	08019d83 	.word	0x08019d83
 8019ca8:	682b      	ldr	r3, [r5, #0]
 8019caa:	1d1a      	adds	r2, r3, #4
 8019cac:	681b      	ldr	r3, [r3, #0]
 8019cae:	602a      	str	r2, [r5, #0]
 8019cb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019cb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019cb8:	2301      	movs	r3, #1
 8019cba:	e09f      	b.n	8019dfc <_printf_i+0x1ec>
 8019cbc:	6820      	ldr	r0, [r4, #0]
 8019cbe:	682b      	ldr	r3, [r5, #0]
 8019cc0:	0607      	lsls	r7, r0, #24
 8019cc2:	f103 0104 	add.w	r1, r3, #4
 8019cc6:	6029      	str	r1, [r5, #0]
 8019cc8:	d501      	bpl.n	8019cce <_printf_i+0xbe>
 8019cca:	681e      	ldr	r6, [r3, #0]
 8019ccc:	e003      	b.n	8019cd6 <_printf_i+0xc6>
 8019cce:	0646      	lsls	r6, r0, #25
 8019cd0:	d5fb      	bpl.n	8019cca <_printf_i+0xba>
 8019cd2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8019cd6:	2e00      	cmp	r6, #0
 8019cd8:	da03      	bge.n	8019ce2 <_printf_i+0xd2>
 8019cda:	232d      	movs	r3, #45	; 0x2d
 8019cdc:	4276      	negs	r6, r6
 8019cde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019ce2:	485a      	ldr	r0, [pc, #360]	; (8019e4c <_printf_i+0x23c>)
 8019ce4:	230a      	movs	r3, #10
 8019ce6:	e012      	b.n	8019d0e <_printf_i+0xfe>
 8019ce8:	682b      	ldr	r3, [r5, #0]
 8019cea:	6820      	ldr	r0, [r4, #0]
 8019cec:	1d19      	adds	r1, r3, #4
 8019cee:	6029      	str	r1, [r5, #0]
 8019cf0:	0605      	lsls	r5, r0, #24
 8019cf2:	d501      	bpl.n	8019cf8 <_printf_i+0xe8>
 8019cf4:	681e      	ldr	r6, [r3, #0]
 8019cf6:	e002      	b.n	8019cfe <_printf_i+0xee>
 8019cf8:	0641      	lsls	r1, r0, #25
 8019cfa:	d5fb      	bpl.n	8019cf4 <_printf_i+0xe4>
 8019cfc:	881e      	ldrh	r6, [r3, #0]
 8019cfe:	4853      	ldr	r0, [pc, #332]	; (8019e4c <_printf_i+0x23c>)
 8019d00:	2f6f      	cmp	r7, #111	; 0x6f
 8019d02:	bf0c      	ite	eq
 8019d04:	2308      	moveq	r3, #8
 8019d06:	230a      	movne	r3, #10
 8019d08:	2100      	movs	r1, #0
 8019d0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019d0e:	6865      	ldr	r5, [r4, #4]
 8019d10:	60a5      	str	r5, [r4, #8]
 8019d12:	2d00      	cmp	r5, #0
 8019d14:	bfa2      	ittt	ge
 8019d16:	6821      	ldrge	r1, [r4, #0]
 8019d18:	f021 0104 	bicge.w	r1, r1, #4
 8019d1c:	6021      	strge	r1, [r4, #0]
 8019d1e:	b90e      	cbnz	r6, 8019d24 <_printf_i+0x114>
 8019d20:	2d00      	cmp	r5, #0
 8019d22:	d04b      	beq.n	8019dbc <_printf_i+0x1ac>
 8019d24:	4615      	mov	r5, r2
 8019d26:	fbb6 f1f3 	udiv	r1, r6, r3
 8019d2a:	fb03 6711 	mls	r7, r3, r1, r6
 8019d2e:	5dc7      	ldrb	r7, [r0, r7]
 8019d30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8019d34:	4637      	mov	r7, r6
 8019d36:	42bb      	cmp	r3, r7
 8019d38:	460e      	mov	r6, r1
 8019d3a:	d9f4      	bls.n	8019d26 <_printf_i+0x116>
 8019d3c:	2b08      	cmp	r3, #8
 8019d3e:	d10b      	bne.n	8019d58 <_printf_i+0x148>
 8019d40:	6823      	ldr	r3, [r4, #0]
 8019d42:	07de      	lsls	r6, r3, #31
 8019d44:	d508      	bpl.n	8019d58 <_printf_i+0x148>
 8019d46:	6923      	ldr	r3, [r4, #16]
 8019d48:	6861      	ldr	r1, [r4, #4]
 8019d4a:	4299      	cmp	r1, r3
 8019d4c:	bfde      	ittt	le
 8019d4e:	2330      	movle	r3, #48	; 0x30
 8019d50:	f805 3c01 	strble.w	r3, [r5, #-1]
 8019d54:	f105 35ff 	addle.w	r5, r5, #4294967295
 8019d58:	1b52      	subs	r2, r2, r5
 8019d5a:	6122      	str	r2, [r4, #16]
 8019d5c:	f8cd a000 	str.w	sl, [sp]
 8019d60:	464b      	mov	r3, r9
 8019d62:	aa03      	add	r2, sp, #12
 8019d64:	4621      	mov	r1, r4
 8019d66:	4640      	mov	r0, r8
 8019d68:	f7ff fee4 	bl	8019b34 <_printf_common>
 8019d6c:	3001      	adds	r0, #1
 8019d6e:	d14a      	bne.n	8019e06 <_printf_i+0x1f6>
 8019d70:	f04f 30ff 	mov.w	r0, #4294967295
 8019d74:	b004      	add	sp, #16
 8019d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019d7a:	6823      	ldr	r3, [r4, #0]
 8019d7c:	f043 0320 	orr.w	r3, r3, #32
 8019d80:	6023      	str	r3, [r4, #0]
 8019d82:	4833      	ldr	r0, [pc, #204]	; (8019e50 <_printf_i+0x240>)
 8019d84:	2778      	movs	r7, #120	; 0x78
 8019d86:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8019d8a:	6823      	ldr	r3, [r4, #0]
 8019d8c:	6829      	ldr	r1, [r5, #0]
 8019d8e:	061f      	lsls	r7, r3, #24
 8019d90:	f851 6b04 	ldr.w	r6, [r1], #4
 8019d94:	d402      	bmi.n	8019d9c <_printf_i+0x18c>
 8019d96:	065f      	lsls	r7, r3, #25
 8019d98:	bf48      	it	mi
 8019d9a:	b2b6      	uxthmi	r6, r6
 8019d9c:	07df      	lsls	r7, r3, #31
 8019d9e:	bf48      	it	mi
 8019da0:	f043 0320 	orrmi.w	r3, r3, #32
 8019da4:	6029      	str	r1, [r5, #0]
 8019da6:	bf48      	it	mi
 8019da8:	6023      	strmi	r3, [r4, #0]
 8019daa:	b91e      	cbnz	r6, 8019db4 <_printf_i+0x1a4>
 8019dac:	6823      	ldr	r3, [r4, #0]
 8019dae:	f023 0320 	bic.w	r3, r3, #32
 8019db2:	6023      	str	r3, [r4, #0]
 8019db4:	2310      	movs	r3, #16
 8019db6:	e7a7      	b.n	8019d08 <_printf_i+0xf8>
 8019db8:	4824      	ldr	r0, [pc, #144]	; (8019e4c <_printf_i+0x23c>)
 8019dba:	e7e4      	b.n	8019d86 <_printf_i+0x176>
 8019dbc:	4615      	mov	r5, r2
 8019dbe:	e7bd      	b.n	8019d3c <_printf_i+0x12c>
 8019dc0:	682b      	ldr	r3, [r5, #0]
 8019dc2:	6826      	ldr	r6, [r4, #0]
 8019dc4:	6961      	ldr	r1, [r4, #20]
 8019dc6:	1d18      	adds	r0, r3, #4
 8019dc8:	6028      	str	r0, [r5, #0]
 8019dca:	0635      	lsls	r5, r6, #24
 8019dcc:	681b      	ldr	r3, [r3, #0]
 8019dce:	d501      	bpl.n	8019dd4 <_printf_i+0x1c4>
 8019dd0:	6019      	str	r1, [r3, #0]
 8019dd2:	e002      	b.n	8019dda <_printf_i+0x1ca>
 8019dd4:	0670      	lsls	r0, r6, #25
 8019dd6:	d5fb      	bpl.n	8019dd0 <_printf_i+0x1c0>
 8019dd8:	8019      	strh	r1, [r3, #0]
 8019dda:	2300      	movs	r3, #0
 8019ddc:	6123      	str	r3, [r4, #16]
 8019dde:	4615      	mov	r5, r2
 8019de0:	e7bc      	b.n	8019d5c <_printf_i+0x14c>
 8019de2:	682b      	ldr	r3, [r5, #0]
 8019de4:	1d1a      	adds	r2, r3, #4
 8019de6:	602a      	str	r2, [r5, #0]
 8019de8:	681d      	ldr	r5, [r3, #0]
 8019dea:	6862      	ldr	r2, [r4, #4]
 8019dec:	2100      	movs	r1, #0
 8019dee:	4628      	mov	r0, r5
 8019df0:	f7e6 fa76 	bl	80002e0 <memchr>
 8019df4:	b108      	cbz	r0, 8019dfa <_printf_i+0x1ea>
 8019df6:	1b40      	subs	r0, r0, r5
 8019df8:	6060      	str	r0, [r4, #4]
 8019dfa:	6863      	ldr	r3, [r4, #4]
 8019dfc:	6123      	str	r3, [r4, #16]
 8019dfe:	2300      	movs	r3, #0
 8019e00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019e04:	e7aa      	b.n	8019d5c <_printf_i+0x14c>
 8019e06:	6923      	ldr	r3, [r4, #16]
 8019e08:	462a      	mov	r2, r5
 8019e0a:	4649      	mov	r1, r9
 8019e0c:	4640      	mov	r0, r8
 8019e0e:	47d0      	blx	sl
 8019e10:	3001      	adds	r0, #1
 8019e12:	d0ad      	beq.n	8019d70 <_printf_i+0x160>
 8019e14:	6823      	ldr	r3, [r4, #0]
 8019e16:	079b      	lsls	r3, r3, #30
 8019e18:	d413      	bmi.n	8019e42 <_printf_i+0x232>
 8019e1a:	68e0      	ldr	r0, [r4, #12]
 8019e1c:	9b03      	ldr	r3, [sp, #12]
 8019e1e:	4298      	cmp	r0, r3
 8019e20:	bfb8      	it	lt
 8019e22:	4618      	movlt	r0, r3
 8019e24:	e7a6      	b.n	8019d74 <_printf_i+0x164>
 8019e26:	2301      	movs	r3, #1
 8019e28:	4632      	mov	r2, r6
 8019e2a:	4649      	mov	r1, r9
 8019e2c:	4640      	mov	r0, r8
 8019e2e:	47d0      	blx	sl
 8019e30:	3001      	adds	r0, #1
 8019e32:	d09d      	beq.n	8019d70 <_printf_i+0x160>
 8019e34:	3501      	adds	r5, #1
 8019e36:	68e3      	ldr	r3, [r4, #12]
 8019e38:	9903      	ldr	r1, [sp, #12]
 8019e3a:	1a5b      	subs	r3, r3, r1
 8019e3c:	42ab      	cmp	r3, r5
 8019e3e:	dcf2      	bgt.n	8019e26 <_printf_i+0x216>
 8019e40:	e7eb      	b.n	8019e1a <_printf_i+0x20a>
 8019e42:	2500      	movs	r5, #0
 8019e44:	f104 0619 	add.w	r6, r4, #25
 8019e48:	e7f5      	b.n	8019e36 <_printf_i+0x226>
 8019e4a:	bf00      	nop
 8019e4c:	0801c202 	.word	0x0801c202
 8019e50:	0801c213 	.word	0x0801c213

08019e54 <std>:
 8019e54:	2300      	movs	r3, #0
 8019e56:	b510      	push	{r4, lr}
 8019e58:	4604      	mov	r4, r0
 8019e5a:	e9c0 3300 	strd	r3, r3, [r0]
 8019e5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019e62:	6083      	str	r3, [r0, #8]
 8019e64:	8181      	strh	r1, [r0, #12]
 8019e66:	6643      	str	r3, [r0, #100]	; 0x64
 8019e68:	81c2      	strh	r2, [r0, #14]
 8019e6a:	6183      	str	r3, [r0, #24]
 8019e6c:	4619      	mov	r1, r3
 8019e6e:	2208      	movs	r2, #8
 8019e70:	305c      	adds	r0, #92	; 0x5c
 8019e72:	f000 f906 	bl	801a082 <memset>
 8019e76:	4b0d      	ldr	r3, [pc, #52]	; (8019eac <std+0x58>)
 8019e78:	6263      	str	r3, [r4, #36]	; 0x24
 8019e7a:	4b0d      	ldr	r3, [pc, #52]	; (8019eb0 <std+0x5c>)
 8019e7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8019e7e:	4b0d      	ldr	r3, [pc, #52]	; (8019eb4 <std+0x60>)
 8019e80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019e82:	4b0d      	ldr	r3, [pc, #52]	; (8019eb8 <std+0x64>)
 8019e84:	6323      	str	r3, [r4, #48]	; 0x30
 8019e86:	4b0d      	ldr	r3, [pc, #52]	; (8019ebc <std+0x68>)
 8019e88:	6224      	str	r4, [r4, #32]
 8019e8a:	429c      	cmp	r4, r3
 8019e8c:	d006      	beq.n	8019e9c <std+0x48>
 8019e8e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8019e92:	4294      	cmp	r4, r2
 8019e94:	d002      	beq.n	8019e9c <std+0x48>
 8019e96:	33d0      	adds	r3, #208	; 0xd0
 8019e98:	429c      	cmp	r4, r3
 8019e9a:	d105      	bne.n	8019ea8 <std+0x54>
 8019e9c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019ea4:	f000 b96a 	b.w	801a17c <__retarget_lock_init_recursive>
 8019ea8:	bd10      	pop	{r4, pc}
 8019eaa:	bf00      	nop
 8019eac:	08019ffd 	.word	0x08019ffd
 8019eb0:	0801a01f 	.word	0x0801a01f
 8019eb4:	0801a057 	.word	0x0801a057
 8019eb8:	0801a07b 	.word	0x0801a07b
 8019ebc:	2400e638 	.word	0x2400e638

08019ec0 <stdio_exit_handler>:
 8019ec0:	4a02      	ldr	r2, [pc, #8]	; (8019ecc <stdio_exit_handler+0xc>)
 8019ec2:	4903      	ldr	r1, [pc, #12]	; (8019ed0 <stdio_exit_handler+0x10>)
 8019ec4:	4803      	ldr	r0, [pc, #12]	; (8019ed4 <stdio_exit_handler+0x14>)
 8019ec6:	f000 b869 	b.w	8019f9c <_fwalk_sglue>
 8019eca:	bf00      	nop
 8019ecc:	24000014 	.word	0x24000014
 8019ed0:	0801ba15 	.word	0x0801ba15
 8019ed4:	24000020 	.word	0x24000020

08019ed8 <cleanup_stdio>:
 8019ed8:	6841      	ldr	r1, [r0, #4]
 8019eda:	4b0c      	ldr	r3, [pc, #48]	; (8019f0c <cleanup_stdio+0x34>)
 8019edc:	4299      	cmp	r1, r3
 8019ede:	b510      	push	{r4, lr}
 8019ee0:	4604      	mov	r4, r0
 8019ee2:	d001      	beq.n	8019ee8 <cleanup_stdio+0x10>
 8019ee4:	f001 fd96 	bl	801ba14 <_fflush_r>
 8019ee8:	68a1      	ldr	r1, [r4, #8]
 8019eea:	4b09      	ldr	r3, [pc, #36]	; (8019f10 <cleanup_stdio+0x38>)
 8019eec:	4299      	cmp	r1, r3
 8019eee:	d002      	beq.n	8019ef6 <cleanup_stdio+0x1e>
 8019ef0:	4620      	mov	r0, r4
 8019ef2:	f001 fd8f 	bl	801ba14 <_fflush_r>
 8019ef6:	68e1      	ldr	r1, [r4, #12]
 8019ef8:	4b06      	ldr	r3, [pc, #24]	; (8019f14 <cleanup_stdio+0x3c>)
 8019efa:	4299      	cmp	r1, r3
 8019efc:	d004      	beq.n	8019f08 <cleanup_stdio+0x30>
 8019efe:	4620      	mov	r0, r4
 8019f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019f04:	f001 bd86 	b.w	801ba14 <_fflush_r>
 8019f08:	bd10      	pop	{r4, pc}
 8019f0a:	bf00      	nop
 8019f0c:	2400e638 	.word	0x2400e638
 8019f10:	2400e6a0 	.word	0x2400e6a0
 8019f14:	2400e708 	.word	0x2400e708

08019f18 <global_stdio_init.part.0>:
 8019f18:	b510      	push	{r4, lr}
 8019f1a:	4b0b      	ldr	r3, [pc, #44]	; (8019f48 <global_stdio_init.part.0+0x30>)
 8019f1c:	4c0b      	ldr	r4, [pc, #44]	; (8019f4c <global_stdio_init.part.0+0x34>)
 8019f1e:	4a0c      	ldr	r2, [pc, #48]	; (8019f50 <global_stdio_init.part.0+0x38>)
 8019f20:	601a      	str	r2, [r3, #0]
 8019f22:	4620      	mov	r0, r4
 8019f24:	2200      	movs	r2, #0
 8019f26:	2104      	movs	r1, #4
 8019f28:	f7ff ff94 	bl	8019e54 <std>
 8019f2c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8019f30:	2201      	movs	r2, #1
 8019f32:	2109      	movs	r1, #9
 8019f34:	f7ff ff8e 	bl	8019e54 <std>
 8019f38:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8019f3c:	2202      	movs	r2, #2
 8019f3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019f42:	2112      	movs	r1, #18
 8019f44:	f7ff bf86 	b.w	8019e54 <std>
 8019f48:	2400e770 	.word	0x2400e770
 8019f4c:	2400e638 	.word	0x2400e638
 8019f50:	08019ec1 	.word	0x08019ec1

08019f54 <__sfp_lock_acquire>:
 8019f54:	4801      	ldr	r0, [pc, #4]	; (8019f5c <__sfp_lock_acquire+0x8>)
 8019f56:	f000 b912 	b.w	801a17e <__retarget_lock_acquire_recursive>
 8019f5a:	bf00      	nop
 8019f5c:	2400e779 	.word	0x2400e779

08019f60 <__sfp_lock_release>:
 8019f60:	4801      	ldr	r0, [pc, #4]	; (8019f68 <__sfp_lock_release+0x8>)
 8019f62:	f000 b90d 	b.w	801a180 <__retarget_lock_release_recursive>
 8019f66:	bf00      	nop
 8019f68:	2400e779 	.word	0x2400e779

08019f6c <__sinit>:
 8019f6c:	b510      	push	{r4, lr}
 8019f6e:	4604      	mov	r4, r0
 8019f70:	f7ff fff0 	bl	8019f54 <__sfp_lock_acquire>
 8019f74:	6a23      	ldr	r3, [r4, #32]
 8019f76:	b11b      	cbz	r3, 8019f80 <__sinit+0x14>
 8019f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019f7c:	f7ff bff0 	b.w	8019f60 <__sfp_lock_release>
 8019f80:	4b04      	ldr	r3, [pc, #16]	; (8019f94 <__sinit+0x28>)
 8019f82:	6223      	str	r3, [r4, #32]
 8019f84:	4b04      	ldr	r3, [pc, #16]	; (8019f98 <__sinit+0x2c>)
 8019f86:	681b      	ldr	r3, [r3, #0]
 8019f88:	2b00      	cmp	r3, #0
 8019f8a:	d1f5      	bne.n	8019f78 <__sinit+0xc>
 8019f8c:	f7ff ffc4 	bl	8019f18 <global_stdio_init.part.0>
 8019f90:	e7f2      	b.n	8019f78 <__sinit+0xc>
 8019f92:	bf00      	nop
 8019f94:	08019ed9 	.word	0x08019ed9
 8019f98:	2400e770 	.word	0x2400e770

08019f9c <_fwalk_sglue>:
 8019f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019fa0:	4607      	mov	r7, r0
 8019fa2:	4688      	mov	r8, r1
 8019fa4:	4614      	mov	r4, r2
 8019fa6:	2600      	movs	r6, #0
 8019fa8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019fac:	f1b9 0901 	subs.w	r9, r9, #1
 8019fb0:	d505      	bpl.n	8019fbe <_fwalk_sglue+0x22>
 8019fb2:	6824      	ldr	r4, [r4, #0]
 8019fb4:	2c00      	cmp	r4, #0
 8019fb6:	d1f7      	bne.n	8019fa8 <_fwalk_sglue+0xc>
 8019fb8:	4630      	mov	r0, r6
 8019fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019fbe:	89ab      	ldrh	r3, [r5, #12]
 8019fc0:	2b01      	cmp	r3, #1
 8019fc2:	d907      	bls.n	8019fd4 <_fwalk_sglue+0x38>
 8019fc4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019fc8:	3301      	adds	r3, #1
 8019fca:	d003      	beq.n	8019fd4 <_fwalk_sglue+0x38>
 8019fcc:	4629      	mov	r1, r5
 8019fce:	4638      	mov	r0, r7
 8019fd0:	47c0      	blx	r8
 8019fd2:	4306      	orrs	r6, r0
 8019fd4:	3568      	adds	r5, #104	; 0x68
 8019fd6:	e7e9      	b.n	8019fac <_fwalk_sglue+0x10>

08019fd8 <iprintf>:
 8019fd8:	b40f      	push	{r0, r1, r2, r3}
 8019fda:	b507      	push	{r0, r1, r2, lr}
 8019fdc:	4906      	ldr	r1, [pc, #24]	; (8019ff8 <iprintf+0x20>)
 8019fde:	ab04      	add	r3, sp, #16
 8019fe0:	6808      	ldr	r0, [r1, #0]
 8019fe2:	f853 2b04 	ldr.w	r2, [r3], #4
 8019fe6:	6881      	ldr	r1, [r0, #8]
 8019fe8:	9301      	str	r3, [sp, #4]
 8019fea:	f001 fb73 	bl	801b6d4 <_vfiprintf_r>
 8019fee:	b003      	add	sp, #12
 8019ff0:	f85d eb04 	ldr.w	lr, [sp], #4
 8019ff4:	b004      	add	sp, #16
 8019ff6:	4770      	bx	lr
 8019ff8:	2400006c 	.word	0x2400006c

08019ffc <__sread>:
 8019ffc:	b510      	push	{r4, lr}
 8019ffe:	460c      	mov	r4, r1
 801a000:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a004:	f000 f86c 	bl	801a0e0 <_read_r>
 801a008:	2800      	cmp	r0, #0
 801a00a:	bfab      	itete	ge
 801a00c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a00e:	89a3      	ldrhlt	r3, [r4, #12]
 801a010:	181b      	addge	r3, r3, r0
 801a012:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a016:	bfac      	ite	ge
 801a018:	6563      	strge	r3, [r4, #84]	; 0x54
 801a01a:	81a3      	strhlt	r3, [r4, #12]
 801a01c:	bd10      	pop	{r4, pc}

0801a01e <__swrite>:
 801a01e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a022:	461f      	mov	r7, r3
 801a024:	898b      	ldrh	r3, [r1, #12]
 801a026:	05db      	lsls	r3, r3, #23
 801a028:	4605      	mov	r5, r0
 801a02a:	460c      	mov	r4, r1
 801a02c:	4616      	mov	r6, r2
 801a02e:	d505      	bpl.n	801a03c <__swrite+0x1e>
 801a030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a034:	2302      	movs	r3, #2
 801a036:	2200      	movs	r2, #0
 801a038:	f000 f840 	bl	801a0bc <_lseek_r>
 801a03c:	89a3      	ldrh	r3, [r4, #12]
 801a03e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a042:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a046:	81a3      	strh	r3, [r4, #12]
 801a048:	4632      	mov	r2, r6
 801a04a:	463b      	mov	r3, r7
 801a04c:	4628      	mov	r0, r5
 801a04e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a052:	f000 b857 	b.w	801a104 <_write_r>

0801a056 <__sseek>:
 801a056:	b510      	push	{r4, lr}
 801a058:	460c      	mov	r4, r1
 801a05a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a05e:	f000 f82d 	bl	801a0bc <_lseek_r>
 801a062:	1c43      	adds	r3, r0, #1
 801a064:	89a3      	ldrh	r3, [r4, #12]
 801a066:	bf15      	itete	ne
 801a068:	6560      	strne	r0, [r4, #84]	; 0x54
 801a06a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a06e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a072:	81a3      	strheq	r3, [r4, #12]
 801a074:	bf18      	it	ne
 801a076:	81a3      	strhne	r3, [r4, #12]
 801a078:	bd10      	pop	{r4, pc}

0801a07a <__sclose>:
 801a07a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a07e:	f000 b80d 	b.w	801a09c <_close_r>

0801a082 <memset>:
 801a082:	4402      	add	r2, r0
 801a084:	4603      	mov	r3, r0
 801a086:	4293      	cmp	r3, r2
 801a088:	d100      	bne.n	801a08c <memset+0xa>
 801a08a:	4770      	bx	lr
 801a08c:	f803 1b01 	strb.w	r1, [r3], #1
 801a090:	e7f9      	b.n	801a086 <memset+0x4>
	...

0801a094 <_localeconv_r>:
 801a094:	4800      	ldr	r0, [pc, #0]	; (801a098 <_localeconv_r+0x4>)
 801a096:	4770      	bx	lr
 801a098:	24000160 	.word	0x24000160

0801a09c <_close_r>:
 801a09c:	b538      	push	{r3, r4, r5, lr}
 801a09e:	4d06      	ldr	r5, [pc, #24]	; (801a0b8 <_close_r+0x1c>)
 801a0a0:	2300      	movs	r3, #0
 801a0a2:	4604      	mov	r4, r0
 801a0a4:	4608      	mov	r0, r1
 801a0a6:	602b      	str	r3, [r5, #0]
 801a0a8:	f7e7 fad5 	bl	8001656 <_close>
 801a0ac:	1c43      	adds	r3, r0, #1
 801a0ae:	d102      	bne.n	801a0b6 <_close_r+0x1a>
 801a0b0:	682b      	ldr	r3, [r5, #0]
 801a0b2:	b103      	cbz	r3, 801a0b6 <_close_r+0x1a>
 801a0b4:	6023      	str	r3, [r4, #0]
 801a0b6:	bd38      	pop	{r3, r4, r5, pc}
 801a0b8:	2400e774 	.word	0x2400e774

0801a0bc <_lseek_r>:
 801a0bc:	b538      	push	{r3, r4, r5, lr}
 801a0be:	4d07      	ldr	r5, [pc, #28]	; (801a0dc <_lseek_r+0x20>)
 801a0c0:	4604      	mov	r4, r0
 801a0c2:	4608      	mov	r0, r1
 801a0c4:	4611      	mov	r1, r2
 801a0c6:	2200      	movs	r2, #0
 801a0c8:	602a      	str	r2, [r5, #0]
 801a0ca:	461a      	mov	r2, r3
 801a0cc:	f7e7 faea 	bl	80016a4 <_lseek>
 801a0d0:	1c43      	adds	r3, r0, #1
 801a0d2:	d102      	bne.n	801a0da <_lseek_r+0x1e>
 801a0d4:	682b      	ldr	r3, [r5, #0]
 801a0d6:	b103      	cbz	r3, 801a0da <_lseek_r+0x1e>
 801a0d8:	6023      	str	r3, [r4, #0]
 801a0da:	bd38      	pop	{r3, r4, r5, pc}
 801a0dc:	2400e774 	.word	0x2400e774

0801a0e0 <_read_r>:
 801a0e0:	b538      	push	{r3, r4, r5, lr}
 801a0e2:	4d07      	ldr	r5, [pc, #28]	; (801a100 <_read_r+0x20>)
 801a0e4:	4604      	mov	r4, r0
 801a0e6:	4608      	mov	r0, r1
 801a0e8:	4611      	mov	r1, r2
 801a0ea:	2200      	movs	r2, #0
 801a0ec:	602a      	str	r2, [r5, #0]
 801a0ee:	461a      	mov	r2, r3
 801a0f0:	f7e7 fa78 	bl	80015e4 <_read>
 801a0f4:	1c43      	adds	r3, r0, #1
 801a0f6:	d102      	bne.n	801a0fe <_read_r+0x1e>
 801a0f8:	682b      	ldr	r3, [r5, #0]
 801a0fa:	b103      	cbz	r3, 801a0fe <_read_r+0x1e>
 801a0fc:	6023      	str	r3, [r4, #0]
 801a0fe:	bd38      	pop	{r3, r4, r5, pc}
 801a100:	2400e774 	.word	0x2400e774

0801a104 <_write_r>:
 801a104:	b538      	push	{r3, r4, r5, lr}
 801a106:	4d07      	ldr	r5, [pc, #28]	; (801a124 <_write_r+0x20>)
 801a108:	4604      	mov	r4, r0
 801a10a:	4608      	mov	r0, r1
 801a10c:	4611      	mov	r1, r2
 801a10e:	2200      	movs	r2, #0
 801a110:	602a      	str	r2, [r5, #0]
 801a112:	461a      	mov	r2, r3
 801a114:	f7e7 fa83 	bl	800161e <_write>
 801a118:	1c43      	adds	r3, r0, #1
 801a11a:	d102      	bne.n	801a122 <_write_r+0x1e>
 801a11c:	682b      	ldr	r3, [r5, #0]
 801a11e:	b103      	cbz	r3, 801a122 <_write_r+0x1e>
 801a120:	6023      	str	r3, [r4, #0]
 801a122:	bd38      	pop	{r3, r4, r5, pc}
 801a124:	2400e774 	.word	0x2400e774

0801a128 <__errno>:
 801a128:	4b01      	ldr	r3, [pc, #4]	; (801a130 <__errno+0x8>)
 801a12a:	6818      	ldr	r0, [r3, #0]
 801a12c:	4770      	bx	lr
 801a12e:	bf00      	nop
 801a130:	2400006c 	.word	0x2400006c

0801a134 <__libc_init_array>:
 801a134:	b570      	push	{r4, r5, r6, lr}
 801a136:	4d0d      	ldr	r5, [pc, #52]	; (801a16c <__libc_init_array+0x38>)
 801a138:	4c0d      	ldr	r4, [pc, #52]	; (801a170 <__libc_init_array+0x3c>)
 801a13a:	1b64      	subs	r4, r4, r5
 801a13c:	10a4      	asrs	r4, r4, #2
 801a13e:	2600      	movs	r6, #0
 801a140:	42a6      	cmp	r6, r4
 801a142:	d109      	bne.n	801a158 <__libc_init_array+0x24>
 801a144:	4d0b      	ldr	r5, [pc, #44]	; (801a174 <__libc_init_array+0x40>)
 801a146:	4c0c      	ldr	r4, [pc, #48]	; (801a178 <__libc_init_array+0x44>)
 801a148:	f001 fe68 	bl	801be1c <_init>
 801a14c:	1b64      	subs	r4, r4, r5
 801a14e:	10a4      	asrs	r4, r4, #2
 801a150:	2600      	movs	r6, #0
 801a152:	42a6      	cmp	r6, r4
 801a154:	d105      	bne.n	801a162 <__libc_init_array+0x2e>
 801a156:	bd70      	pop	{r4, r5, r6, pc}
 801a158:	f855 3b04 	ldr.w	r3, [r5], #4
 801a15c:	4798      	blx	r3
 801a15e:	3601      	adds	r6, #1
 801a160:	e7ee      	b.n	801a140 <__libc_init_array+0xc>
 801a162:	f855 3b04 	ldr.w	r3, [r5], #4
 801a166:	4798      	blx	r3
 801a168:	3601      	adds	r6, #1
 801a16a:	e7f2      	b.n	801a152 <__libc_init_array+0x1e>
 801a16c:	0801c56c 	.word	0x0801c56c
 801a170:	0801c56c 	.word	0x0801c56c
 801a174:	0801c56c 	.word	0x0801c56c
 801a178:	0801c57c 	.word	0x0801c57c

0801a17c <__retarget_lock_init_recursive>:
 801a17c:	4770      	bx	lr

0801a17e <__retarget_lock_acquire_recursive>:
 801a17e:	4770      	bx	lr

0801a180 <__retarget_lock_release_recursive>:
 801a180:	4770      	bx	lr

0801a182 <memcpy>:
 801a182:	440a      	add	r2, r1
 801a184:	4291      	cmp	r1, r2
 801a186:	f100 33ff 	add.w	r3, r0, #4294967295
 801a18a:	d100      	bne.n	801a18e <memcpy+0xc>
 801a18c:	4770      	bx	lr
 801a18e:	b510      	push	{r4, lr}
 801a190:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a194:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a198:	4291      	cmp	r1, r2
 801a19a:	d1f9      	bne.n	801a190 <memcpy+0xe>
 801a19c:	bd10      	pop	{r4, pc}

0801a19e <quorem>:
 801a19e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1a2:	6903      	ldr	r3, [r0, #16]
 801a1a4:	690c      	ldr	r4, [r1, #16]
 801a1a6:	42a3      	cmp	r3, r4
 801a1a8:	4607      	mov	r7, r0
 801a1aa:	db7e      	blt.n	801a2aa <quorem+0x10c>
 801a1ac:	3c01      	subs	r4, #1
 801a1ae:	f101 0814 	add.w	r8, r1, #20
 801a1b2:	f100 0514 	add.w	r5, r0, #20
 801a1b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a1ba:	9301      	str	r3, [sp, #4]
 801a1bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801a1c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a1c4:	3301      	adds	r3, #1
 801a1c6:	429a      	cmp	r2, r3
 801a1c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801a1cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801a1d0:	fbb2 f6f3 	udiv	r6, r2, r3
 801a1d4:	d331      	bcc.n	801a23a <quorem+0x9c>
 801a1d6:	f04f 0e00 	mov.w	lr, #0
 801a1da:	4640      	mov	r0, r8
 801a1dc:	46ac      	mov	ip, r5
 801a1de:	46f2      	mov	sl, lr
 801a1e0:	f850 2b04 	ldr.w	r2, [r0], #4
 801a1e4:	b293      	uxth	r3, r2
 801a1e6:	fb06 e303 	mla	r3, r6, r3, lr
 801a1ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801a1ee:	0c1a      	lsrs	r2, r3, #16
 801a1f0:	b29b      	uxth	r3, r3
 801a1f2:	ebaa 0303 	sub.w	r3, sl, r3
 801a1f6:	f8dc a000 	ldr.w	sl, [ip]
 801a1fa:	fa13 f38a 	uxtah	r3, r3, sl
 801a1fe:	fb06 220e 	mla	r2, r6, lr, r2
 801a202:	9300      	str	r3, [sp, #0]
 801a204:	9b00      	ldr	r3, [sp, #0]
 801a206:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801a20a:	b292      	uxth	r2, r2
 801a20c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801a210:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a214:	f8bd 3000 	ldrh.w	r3, [sp]
 801a218:	4581      	cmp	r9, r0
 801a21a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a21e:	f84c 3b04 	str.w	r3, [ip], #4
 801a222:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801a226:	d2db      	bcs.n	801a1e0 <quorem+0x42>
 801a228:	f855 300b 	ldr.w	r3, [r5, fp]
 801a22c:	b92b      	cbnz	r3, 801a23a <quorem+0x9c>
 801a22e:	9b01      	ldr	r3, [sp, #4]
 801a230:	3b04      	subs	r3, #4
 801a232:	429d      	cmp	r5, r3
 801a234:	461a      	mov	r2, r3
 801a236:	d32c      	bcc.n	801a292 <quorem+0xf4>
 801a238:	613c      	str	r4, [r7, #16]
 801a23a:	4638      	mov	r0, r7
 801a23c:	f001 f920 	bl	801b480 <__mcmp>
 801a240:	2800      	cmp	r0, #0
 801a242:	db22      	blt.n	801a28a <quorem+0xec>
 801a244:	3601      	adds	r6, #1
 801a246:	4629      	mov	r1, r5
 801a248:	2000      	movs	r0, #0
 801a24a:	f858 2b04 	ldr.w	r2, [r8], #4
 801a24e:	f8d1 c000 	ldr.w	ip, [r1]
 801a252:	b293      	uxth	r3, r2
 801a254:	1ac3      	subs	r3, r0, r3
 801a256:	0c12      	lsrs	r2, r2, #16
 801a258:	fa13 f38c 	uxtah	r3, r3, ip
 801a25c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801a260:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a264:	b29b      	uxth	r3, r3
 801a266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a26a:	45c1      	cmp	r9, r8
 801a26c:	f841 3b04 	str.w	r3, [r1], #4
 801a270:	ea4f 4022 	mov.w	r0, r2, asr #16
 801a274:	d2e9      	bcs.n	801a24a <quorem+0xac>
 801a276:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a27a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a27e:	b922      	cbnz	r2, 801a28a <quorem+0xec>
 801a280:	3b04      	subs	r3, #4
 801a282:	429d      	cmp	r5, r3
 801a284:	461a      	mov	r2, r3
 801a286:	d30a      	bcc.n	801a29e <quorem+0x100>
 801a288:	613c      	str	r4, [r7, #16]
 801a28a:	4630      	mov	r0, r6
 801a28c:	b003      	add	sp, #12
 801a28e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a292:	6812      	ldr	r2, [r2, #0]
 801a294:	3b04      	subs	r3, #4
 801a296:	2a00      	cmp	r2, #0
 801a298:	d1ce      	bne.n	801a238 <quorem+0x9a>
 801a29a:	3c01      	subs	r4, #1
 801a29c:	e7c9      	b.n	801a232 <quorem+0x94>
 801a29e:	6812      	ldr	r2, [r2, #0]
 801a2a0:	3b04      	subs	r3, #4
 801a2a2:	2a00      	cmp	r2, #0
 801a2a4:	d1f0      	bne.n	801a288 <quorem+0xea>
 801a2a6:	3c01      	subs	r4, #1
 801a2a8:	e7eb      	b.n	801a282 <quorem+0xe4>
 801a2aa:	2000      	movs	r0, #0
 801a2ac:	e7ee      	b.n	801a28c <quorem+0xee>
	...

0801a2b0 <_dtoa_r>:
 801a2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a2b4:	ed2d 8b02 	vpush	{d8}
 801a2b8:	69c5      	ldr	r5, [r0, #28]
 801a2ba:	b091      	sub	sp, #68	; 0x44
 801a2bc:	ed8d 0b02 	vstr	d0, [sp, #8]
 801a2c0:	ec59 8b10 	vmov	r8, r9, d0
 801a2c4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801a2c6:	9106      	str	r1, [sp, #24]
 801a2c8:	4606      	mov	r6, r0
 801a2ca:	9208      	str	r2, [sp, #32]
 801a2cc:	930c      	str	r3, [sp, #48]	; 0x30
 801a2ce:	b975      	cbnz	r5, 801a2ee <_dtoa_r+0x3e>
 801a2d0:	2010      	movs	r0, #16
 801a2d2:	f000 fda5 	bl	801ae20 <malloc>
 801a2d6:	4602      	mov	r2, r0
 801a2d8:	61f0      	str	r0, [r6, #28]
 801a2da:	b920      	cbnz	r0, 801a2e6 <_dtoa_r+0x36>
 801a2dc:	4ba6      	ldr	r3, [pc, #664]	; (801a578 <_dtoa_r+0x2c8>)
 801a2de:	21ef      	movs	r1, #239	; 0xef
 801a2e0:	48a6      	ldr	r0, [pc, #664]	; (801a57c <_dtoa_r+0x2cc>)
 801a2e2:	f001 fc65 	bl	801bbb0 <__assert_func>
 801a2e6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801a2ea:	6005      	str	r5, [r0, #0]
 801a2ec:	60c5      	str	r5, [r0, #12]
 801a2ee:	69f3      	ldr	r3, [r6, #28]
 801a2f0:	6819      	ldr	r1, [r3, #0]
 801a2f2:	b151      	cbz	r1, 801a30a <_dtoa_r+0x5a>
 801a2f4:	685a      	ldr	r2, [r3, #4]
 801a2f6:	604a      	str	r2, [r1, #4]
 801a2f8:	2301      	movs	r3, #1
 801a2fa:	4093      	lsls	r3, r2
 801a2fc:	608b      	str	r3, [r1, #8]
 801a2fe:	4630      	mov	r0, r6
 801a300:	f000 fe82 	bl	801b008 <_Bfree>
 801a304:	69f3      	ldr	r3, [r6, #28]
 801a306:	2200      	movs	r2, #0
 801a308:	601a      	str	r2, [r3, #0]
 801a30a:	f1b9 0300 	subs.w	r3, r9, #0
 801a30e:	bfbb      	ittet	lt
 801a310:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801a314:	9303      	strlt	r3, [sp, #12]
 801a316:	2300      	movge	r3, #0
 801a318:	2201      	movlt	r2, #1
 801a31a:	bfac      	ite	ge
 801a31c:	6023      	strge	r3, [r4, #0]
 801a31e:	6022      	strlt	r2, [r4, #0]
 801a320:	4b97      	ldr	r3, [pc, #604]	; (801a580 <_dtoa_r+0x2d0>)
 801a322:	9c03      	ldr	r4, [sp, #12]
 801a324:	43a3      	bics	r3, r4
 801a326:	d11c      	bne.n	801a362 <_dtoa_r+0xb2>
 801a328:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a32a:	f242 730f 	movw	r3, #9999	; 0x270f
 801a32e:	6013      	str	r3, [r2, #0]
 801a330:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801a334:	ea53 0308 	orrs.w	r3, r3, r8
 801a338:	f000 84fb 	beq.w	801ad32 <_dtoa_r+0xa82>
 801a33c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a33e:	b963      	cbnz	r3, 801a35a <_dtoa_r+0xaa>
 801a340:	4b90      	ldr	r3, [pc, #576]	; (801a584 <_dtoa_r+0x2d4>)
 801a342:	e020      	b.n	801a386 <_dtoa_r+0xd6>
 801a344:	4b90      	ldr	r3, [pc, #576]	; (801a588 <_dtoa_r+0x2d8>)
 801a346:	9301      	str	r3, [sp, #4]
 801a348:	3308      	adds	r3, #8
 801a34a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801a34c:	6013      	str	r3, [r2, #0]
 801a34e:	9801      	ldr	r0, [sp, #4]
 801a350:	b011      	add	sp, #68	; 0x44
 801a352:	ecbd 8b02 	vpop	{d8}
 801a356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a35a:	4b8a      	ldr	r3, [pc, #552]	; (801a584 <_dtoa_r+0x2d4>)
 801a35c:	9301      	str	r3, [sp, #4]
 801a35e:	3303      	adds	r3, #3
 801a360:	e7f3      	b.n	801a34a <_dtoa_r+0x9a>
 801a362:	ed9d 8b02 	vldr	d8, [sp, #8]
 801a366:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801a36a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a36e:	d10c      	bne.n	801a38a <_dtoa_r+0xda>
 801a370:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a372:	2301      	movs	r3, #1
 801a374:	6013      	str	r3, [r2, #0]
 801a376:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a378:	2b00      	cmp	r3, #0
 801a37a:	f000 84d7 	beq.w	801ad2c <_dtoa_r+0xa7c>
 801a37e:	4b83      	ldr	r3, [pc, #524]	; (801a58c <_dtoa_r+0x2dc>)
 801a380:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801a382:	6013      	str	r3, [r2, #0]
 801a384:	3b01      	subs	r3, #1
 801a386:	9301      	str	r3, [sp, #4]
 801a388:	e7e1      	b.n	801a34e <_dtoa_r+0x9e>
 801a38a:	aa0e      	add	r2, sp, #56	; 0x38
 801a38c:	a90f      	add	r1, sp, #60	; 0x3c
 801a38e:	4630      	mov	r0, r6
 801a390:	eeb0 0b48 	vmov.f64	d0, d8
 801a394:	f001 f91a 	bl	801b5cc <__d2b>
 801a398:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801a39c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a39e:	4605      	mov	r5, r0
 801a3a0:	2b00      	cmp	r3, #0
 801a3a2:	d046      	beq.n	801a432 <_dtoa_r+0x182>
 801a3a4:	eeb0 7b48 	vmov.f64	d7, d8
 801a3a8:	ee18 1a90 	vmov	r1, s17
 801a3ac:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801a3b0:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 801a3b4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801a3b8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801a3bc:	2000      	movs	r0, #0
 801a3be:	ee07 1a90 	vmov	s15, r1
 801a3c2:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 801a3c6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 801a560 <_dtoa_r+0x2b0>
 801a3ca:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a3ce:	ed9f 6b66 	vldr	d6, [pc, #408]	; 801a568 <_dtoa_r+0x2b8>
 801a3d2:	eea7 6b05 	vfma.f64	d6, d7, d5
 801a3d6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 801a570 <_dtoa_r+0x2c0>
 801a3da:	ee07 3a90 	vmov	s15, r3
 801a3de:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801a3e2:	eeb0 7b46 	vmov.f64	d7, d6
 801a3e6:	eea4 7b05 	vfma.f64	d7, d4, d5
 801a3ea:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801a3ee:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801a3f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a3f6:	ee16 ba90 	vmov	fp, s13
 801a3fa:	9009      	str	r0, [sp, #36]	; 0x24
 801a3fc:	d508      	bpl.n	801a410 <_dtoa_r+0x160>
 801a3fe:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801a402:	eeb4 6b47 	vcmp.f64	d6, d7
 801a406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a40a:	bf18      	it	ne
 801a40c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801a410:	f1bb 0f16 	cmp.w	fp, #22
 801a414:	d82b      	bhi.n	801a46e <_dtoa_r+0x1be>
 801a416:	495e      	ldr	r1, [pc, #376]	; (801a590 <_dtoa_r+0x2e0>)
 801a418:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 801a41c:	ed91 7b00 	vldr	d7, [r1]
 801a420:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801a424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a428:	d501      	bpl.n	801a42e <_dtoa_r+0x17e>
 801a42a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a42e:	2100      	movs	r1, #0
 801a430:	e01e      	b.n	801a470 <_dtoa_r+0x1c0>
 801a432:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a434:	4413      	add	r3, r2
 801a436:	f203 4132 	addw	r1, r3, #1074	; 0x432
 801a43a:	2920      	cmp	r1, #32
 801a43c:	bfc1      	itttt	gt
 801a43e:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 801a442:	408c      	lslgt	r4, r1
 801a444:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 801a448:	fa28 f101 	lsrgt.w	r1, r8, r1
 801a44c:	bfd6      	itet	le
 801a44e:	f1c1 0120 	rsble	r1, r1, #32
 801a452:	4321      	orrgt	r1, r4
 801a454:	fa08 f101 	lslle.w	r1, r8, r1
 801a458:	ee07 1a90 	vmov	s15, r1
 801a45c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801a460:	3b01      	subs	r3, #1
 801a462:	ee17 1a90 	vmov	r1, s15
 801a466:	2001      	movs	r0, #1
 801a468:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801a46c:	e7a7      	b.n	801a3be <_dtoa_r+0x10e>
 801a46e:	2101      	movs	r1, #1
 801a470:	1ad2      	subs	r2, r2, r3
 801a472:	1e53      	subs	r3, r2, #1
 801a474:	9305      	str	r3, [sp, #20]
 801a476:	bf45      	ittet	mi
 801a478:	f1c2 0301 	rsbmi	r3, r2, #1
 801a47c:	9304      	strmi	r3, [sp, #16]
 801a47e:	2300      	movpl	r3, #0
 801a480:	2300      	movmi	r3, #0
 801a482:	bf4c      	ite	mi
 801a484:	9305      	strmi	r3, [sp, #20]
 801a486:	9304      	strpl	r3, [sp, #16]
 801a488:	f1bb 0f00 	cmp.w	fp, #0
 801a48c:	910b      	str	r1, [sp, #44]	; 0x2c
 801a48e:	db18      	blt.n	801a4c2 <_dtoa_r+0x212>
 801a490:	9b05      	ldr	r3, [sp, #20]
 801a492:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801a496:	445b      	add	r3, fp
 801a498:	9305      	str	r3, [sp, #20]
 801a49a:	2300      	movs	r3, #0
 801a49c:	9a06      	ldr	r2, [sp, #24]
 801a49e:	2a09      	cmp	r2, #9
 801a4a0:	d848      	bhi.n	801a534 <_dtoa_r+0x284>
 801a4a2:	2a05      	cmp	r2, #5
 801a4a4:	bfc4      	itt	gt
 801a4a6:	3a04      	subgt	r2, #4
 801a4a8:	9206      	strgt	r2, [sp, #24]
 801a4aa:	9a06      	ldr	r2, [sp, #24]
 801a4ac:	f1a2 0202 	sub.w	r2, r2, #2
 801a4b0:	bfcc      	ite	gt
 801a4b2:	2400      	movgt	r4, #0
 801a4b4:	2401      	movle	r4, #1
 801a4b6:	2a03      	cmp	r2, #3
 801a4b8:	d847      	bhi.n	801a54a <_dtoa_r+0x29a>
 801a4ba:	e8df f002 	tbb	[pc, r2]
 801a4be:	2d0b      	.short	0x2d0b
 801a4c0:	392b      	.short	0x392b
 801a4c2:	9b04      	ldr	r3, [sp, #16]
 801a4c4:	2200      	movs	r2, #0
 801a4c6:	eba3 030b 	sub.w	r3, r3, fp
 801a4ca:	9304      	str	r3, [sp, #16]
 801a4cc:	920a      	str	r2, [sp, #40]	; 0x28
 801a4ce:	f1cb 0300 	rsb	r3, fp, #0
 801a4d2:	e7e3      	b.n	801a49c <_dtoa_r+0x1ec>
 801a4d4:	2200      	movs	r2, #0
 801a4d6:	9207      	str	r2, [sp, #28]
 801a4d8:	9a08      	ldr	r2, [sp, #32]
 801a4da:	2a00      	cmp	r2, #0
 801a4dc:	dc38      	bgt.n	801a550 <_dtoa_r+0x2a0>
 801a4de:	f04f 0a01 	mov.w	sl, #1
 801a4e2:	46d1      	mov	r9, sl
 801a4e4:	4652      	mov	r2, sl
 801a4e6:	f8cd a020 	str.w	sl, [sp, #32]
 801a4ea:	69f7      	ldr	r7, [r6, #28]
 801a4ec:	2100      	movs	r1, #0
 801a4ee:	2004      	movs	r0, #4
 801a4f0:	f100 0c14 	add.w	ip, r0, #20
 801a4f4:	4594      	cmp	ip, r2
 801a4f6:	d930      	bls.n	801a55a <_dtoa_r+0x2aa>
 801a4f8:	6079      	str	r1, [r7, #4]
 801a4fa:	4630      	mov	r0, r6
 801a4fc:	930d      	str	r3, [sp, #52]	; 0x34
 801a4fe:	f000 fd43 	bl	801af88 <_Balloc>
 801a502:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a504:	9001      	str	r0, [sp, #4]
 801a506:	4602      	mov	r2, r0
 801a508:	2800      	cmp	r0, #0
 801a50a:	d145      	bne.n	801a598 <_dtoa_r+0x2e8>
 801a50c:	4b21      	ldr	r3, [pc, #132]	; (801a594 <_dtoa_r+0x2e4>)
 801a50e:	f240 11af 	movw	r1, #431	; 0x1af
 801a512:	e6e5      	b.n	801a2e0 <_dtoa_r+0x30>
 801a514:	2201      	movs	r2, #1
 801a516:	e7de      	b.n	801a4d6 <_dtoa_r+0x226>
 801a518:	2200      	movs	r2, #0
 801a51a:	9207      	str	r2, [sp, #28]
 801a51c:	9a08      	ldr	r2, [sp, #32]
 801a51e:	eb0b 0a02 	add.w	sl, fp, r2
 801a522:	f10a 0901 	add.w	r9, sl, #1
 801a526:	464a      	mov	r2, r9
 801a528:	2a01      	cmp	r2, #1
 801a52a:	bfb8      	it	lt
 801a52c:	2201      	movlt	r2, #1
 801a52e:	e7dc      	b.n	801a4ea <_dtoa_r+0x23a>
 801a530:	2201      	movs	r2, #1
 801a532:	e7f2      	b.n	801a51a <_dtoa_r+0x26a>
 801a534:	2401      	movs	r4, #1
 801a536:	2200      	movs	r2, #0
 801a538:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801a53c:	f04f 3aff 	mov.w	sl, #4294967295
 801a540:	2100      	movs	r1, #0
 801a542:	46d1      	mov	r9, sl
 801a544:	2212      	movs	r2, #18
 801a546:	9108      	str	r1, [sp, #32]
 801a548:	e7cf      	b.n	801a4ea <_dtoa_r+0x23a>
 801a54a:	2201      	movs	r2, #1
 801a54c:	9207      	str	r2, [sp, #28]
 801a54e:	e7f5      	b.n	801a53c <_dtoa_r+0x28c>
 801a550:	f8dd a020 	ldr.w	sl, [sp, #32]
 801a554:	46d1      	mov	r9, sl
 801a556:	4652      	mov	r2, sl
 801a558:	e7c7      	b.n	801a4ea <_dtoa_r+0x23a>
 801a55a:	3101      	adds	r1, #1
 801a55c:	0040      	lsls	r0, r0, #1
 801a55e:	e7c7      	b.n	801a4f0 <_dtoa_r+0x240>
 801a560:	636f4361 	.word	0x636f4361
 801a564:	3fd287a7 	.word	0x3fd287a7
 801a568:	8b60c8b3 	.word	0x8b60c8b3
 801a56c:	3fc68a28 	.word	0x3fc68a28
 801a570:	509f79fb 	.word	0x509f79fb
 801a574:	3fd34413 	.word	0x3fd34413
 801a578:	0801c231 	.word	0x0801c231
 801a57c:	0801c248 	.word	0x0801c248
 801a580:	7ff00000 	.word	0x7ff00000
 801a584:	0801c22d 	.word	0x0801c22d
 801a588:	0801c224 	.word	0x0801c224
 801a58c:	0801c201 	.word	0x0801c201
 801a590:	0801c338 	.word	0x0801c338
 801a594:	0801c2a0 	.word	0x0801c2a0
 801a598:	69f2      	ldr	r2, [r6, #28]
 801a59a:	9901      	ldr	r1, [sp, #4]
 801a59c:	6011      	str	r1, [r2, #0]
 801a59e:	f1b9 0f0e 	cmp.w	r9, #14
 801a5a2:	d86c      	bhi.n	801a67e <_dtoa_r+0x3ce>
 801a5a4:	2c00      	cmp	r4, #0
 801a5a6:	d06a      	beq.n	801a67e <_dtoa_r+0x3ce>
 801a5a8:	f1bb 0f00 	cmp.w	fp, #0
 801a5ac:	f340 80a0 	ble.w	801a6f0 <_dtoa_r+0x440>
 801a5b0:	4ac1      	ldr	r2, [pc, #772]	; (801a8b8 <_dtoa_r+0x608>)
 801a5b2:	f00b 010f 	and.w	r1, fp, #15
 801a5b6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801a5ba:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801a5be:	ed92 7b00 	vldr	d7, [r2]
 801a5c2:	ea4f 122b 	mov.w	r2, fp, asr #4
 801a5c6:	f000 8087 	beq.w	801a6d8 <_dtoa_r+0x428>
 801a5ca:	49bc      	ldr	r1, [pc, #752]	; (801a8bc <_dtoa_r+0x60c>)
 801a5cc:	ed91 6b08 	vldr	d6, [r1, #32]
 801a5d0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801a5d4:	ed8d 6b02 	vstr	d6, [sp, #8]
 801a5d8:	f002 020f 	and.w	r2, r2, #15
 801a5dc:	2103      	movs	r1, #3
 801a5de:	48b7      	ldr	r0, [pc, #732]	; (801a8bc <_dtoa_r+0x60c>)
 801a5e0:	2a00      	cmp	r2, #0
 801a5e2:	d17b      	bne.n	801a6dc <_dtoa_r+0x42c>
 801a5e4:	ed9d 6b02 	vldr	d6, [sp, #8]
 801a5e8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801a5ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a5f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a5f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a5f6:	2a00      	cmp	r2, #0
 801a5f8:	f000 80a0 	beq.w	801a73c <_dtoa_r+0x48c>
 801a5fc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801a600:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801a604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a608:	f140 8098 	bpl.w	801a73c <_dtoa_r+0x48c>
 801a60c:	f1b9 0f00 	cmp.w	r9, #0
 801a610:	f000 8094 	beq.w	801a73c <_dtoa_r+0x48c>
 801a614:	f1ba 0f00 	cmp.w	sl, #0
 801a618:	dd2f      	ble.n	801a67a <_dtoa_r+0x3ca>
 801a61a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801a61e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a622:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a626:	f10b 32ff 	add.w	r2, fp, #4294967295
 801a62a:	3101      	adds	r1, #1
 801a62c:	4654      	mov	r4, sl
 801a62e:	ed9d 6b02 	vldr	d6, [sp, #8]
 801a632:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801a636:	ee07 1a90 	vmov	s15, r1
 801a63a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a63e:	eea7 5b06 	vfma.f64	d5, d7, d6
 801a642:	ee15 7a90 	vmov	r7, s11
 801a646:	ec51 0b15 	vmov	r0, r1, d5
 801a64a:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 801a64e:	2c00      	cmp	r4, #0
 801a650:	d177      	bne.n	801a742 <_dtoa_r+0x492>
 801a652:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801a656:	ee36 6b47 	vsub.f64	d6, d6, d7
 801a65a:	ec41 0b17 	vmov	d7, r0, r1
 801a65e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a666:	f300 826a 	bgt.w	801ab3e <_dtoa_r+0x88e>
 801a66a:	eeb1 7b47 	vneg.f64	d7, d7
 801a66e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a676:	f100 8260 	bmi.w	801ab3a <_dtoa_r+0x88a>
 801a67a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801a67e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a680:	2a00      	cmp	r2, #0
 801a682:	f2c0 811d 	blt.w	801a8c0 <_dtoa_r+0x610>
 801a686:	f1bb 0f0e 	cmp.w	fp, #14
 801a68a:	f300 8119 	bgt.w	801a8c0 <_dtoa_r+0x610>
 801a68e:	4b8a      	ldr	r3, [pc, #552]	; (801a8b8 <_dtoa_r+0x608>)
 801a690:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801a694:	ed93 6b00 	vldr	d6, [r3]
 801a698:	9b08      	ldr	r3, [sp, #32]
 801a69a:	2b00      	cmp	r3, #0
 801a69c:	f280 80b7 	bge.w	801a80e <_dtoa_r+0x55e>
 801a6a0:	f1b9 0f00 	cmp.w	r9, #0
 801a6a4:	f300 80b3 	bgt.w	801a80e <_dtoa_r+0x55e>
 801a6a8:	f040 8246 	bne.w	801ab38 <_dtoa_r+0x888>
 801a6ac:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801a6b0:	ee26 6b07 	vmul.f64	d6, d6, d7
 801a6b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a6b8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a6bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a6c0:	464c      	mov	r4, r9
 801a6c2:	464f      	mov	r7, r9
 801a6c4:	f280 821c 	bge.w	801ab00 <_dtoa_r+0x850>
 801a6c8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a6cc:	2331      	movs	r3, #49	; 0x31
 801a6ce:	f808 3b01 	strb.w	r3, [r8], #1
 801a6d2:	f10b 0b01 	add.w	fp, fp, #1
 801a6d6:	e218      	b.n	801ab0a <_dtoa_r+0x85a>
 801a6d8:	2102      	movs	r1, #2
 801a6da:	e780      	b.n	801a5de <_dtoa_r+0x32e>
 801a6dc:	07d4      	lsls	r4, r2, #31
 801a6de:	d504      	bpl.n	801a6ea <_dtoa_r+0x43a>
 801a6e0:	ed90 6b00 	vldr	d6, [r0]
 801a6e4:	3101      	adds	r1, #1
 801a6e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a6ea:	1052      	asrs	r2, r2, #1
 801a6ec:	3008      	adds	r0, #8
 801a6ee:	e777      	b.n	801a5e0 <_dtoa_r+0x330>
 801a6f0:	d022      	beq.n	801a738 <_dtoa_r+0x488>
 801a6f2:	f1cb 0200 	rsb	r2, fp, #0
 801a6f6:	4970      	ldr	r1, [pc, #448]	; (801a8b8 <_dtoa_r+0x608>)
 801a6f8:	f002 000f 	and.w	r0, r2, #15
 801a6fc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801a700:	ed91 7b00 	vldr	d7, [r1]
 801a704:	ee28 7b07 	vmul.f64	d7, d8, d7
 801a708:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a70c:	486b      	ldr	r0, [pc, #428]	; (801a8bc <_dtoa_r+0x60c>)
 801a70e:	1112      	asrs	r2, r2, #4
 801a710:	2400      	movs	r4, #0
 801a712:	2102      	movs	r1, #2
 801a714:	b92a      	cbnz	r2, 801a722 <_dtoa_r+0x472>
 801a716:	2c00      	cmp	r4, #0
 801a718:	f43f af6a 	beq.w	801a5f0 <_dtoa_r+0x340>
 801a71c:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a720:	e766      	b.n	801a5f0 <_dtoa_r+0x340>
 801a722:	07d7      	lsls	r7, r2, #31
 801a724:	d505      	bpl.n	801a732 <_dtoa_r+0x482>
 801a726:	ed90 6b00 	vldr	d6, [r0]
 801a72a:	3101      	adds	r1, #1
 801a72c:	2401      	movs	r4, #1
 801a72e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a732:	1052      	asrs	r2, r2, #1
 801a734:	3008      	adds	r0, #8
 801a736:	e7ed      	b.n	801a714 <_dtoa_r+0x464>
 801a738:	2102      	movs	r1, #2
 801a73a:	e759      	b.n	801a5f0 <_dtoa_r+0x340>
 801a73c:	465a      	mov	r2, fp
 801a73e:	464c      	mov	r4, r9
 801a740:	e775      	b.n	801a62e <_dtoa_r+0x37e>
 801a742:	ec41 0b17 	vmov	d7, r0, r1
 801a746:	495c      	ldr	r1, [pc, #368]	; (801a8b8 <_dtoa_r+0x608>)
 801a748:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 801a74c:	ed11 4b02 	vldr	d4, [r1, #-8]
 801a750:	9901      	ldr	r1, [sp, #4]
 801a752:	440c      	add	r4, r1
 801a754:	9907      	ldr	r1, [sp, #28]
 801a756:	b351      	cbz	r1, 801a7ae <_dtoa_r+0x4fe>
 801a758:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801a75c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801a760:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a764:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801a768:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801a76c:	ee35 7b47 	vsub.f64	d7, d5, d7
 801a770:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801a774:	ee14 1a90 	vmov	r1, s9
 801a778:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801a77c:	3130      	adds	r1, #48	; 0x30
 801a77e:	ee36 6b45 	vsub.f64	d6, d6, d5
 801a782:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a78a:	f808 1b01 	strb.w	r1, [r8], #1
 801a78e:	d439      	bmi.n	801a804 <_dtoa_r+0x554>
 801a790:	ee32 5b46 	vsub.f64	d5, d2, d6
 801a794:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801a798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a79c:	d472      	bmi.n	801a884 <_dtoa_r+0x5d4>
 801a79e:	45a0      	cmp	r8, r4
 801a7a0:	f43f af6b 	beq.w	801a67a <_dtoa_r+0x3ca>
 801a7a4:	ee27 7b03 	vmul.f64	d7, d7, d3
 801a7a8:	ee26 6b03 	vmul.f64	d6, d6, d3
 801a7ac:	e7e0      	b.n	801a770 <_dtoa_r+0x4c0>
 801a7ae:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a7b2:	ee27 7b04 	vmul.f64	d7, d7, d4
 801a7b6:	4620      	mov	r0, r4
 801a7b8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801a7bc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801a7c0:	ee14 1a90 	vmov	r1, s9
 801a7c4:	3130      	adds	r1, #48	; 0x30
 801a7c6:	f808 1b01 	strb.w	r1, [r8], #1
 801a7ca:	45a0      	cmp	r8, r4
 801a7cc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801a7d0:	ee36 6b45 	vsub.f64	d6, d6, d5
 801a7d4:	d118      	bne.n	801a808 <_dtoa_r+0x558>
 801a7d6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801a7da:	ee37 4b05 	vadd.f64	d4, d7, d5
 801a7de:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801a7e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7e6:	dc4d      	bgt.n	801a884 <_dtoa_r+0x5d4>
 801a7e8:	ee35 5b47 	vsub.f64	d5, d5, d7
 801a7ec:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801a7f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7f4:	f57f af41 	bpl.w	801a67a <_dtoa_r+0x3ca>
 801a7f8:	4680      	mov	r8, r0
 801a7fa:	3801      	subs	r0, #1
 801a7fc:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801a800:	2b30      	cmp	r3, #48	; 0x30
 801a802:	d0f9      	beq.n	801a7f8 <_dtoa_r+0x548>
 801a804:	4693      	mov	fp, r2
 801a806:	e02a      	b.n	801a85e <_dtoa_r+0x5ae>
 801a808:	ee26 6b03 	vmul.f64	d6, d6, d3
 801a80c:	e7d6      	b.n	801a7bc <_dtoa_r+0x50c>
 801a80e:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a812:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801a816:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a81a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801a81e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801a822:	ee15 3a10 	vmov	r3, s10
 801a826:	3330      	adds	r3, #48	; 0x30
 801a828:	f808 3b01 	strb.w	r3, [r8], #1
 801a82c:	9b01      	ldr	r3, [sp, #4]
 801a82e:	eba8 0303 	sub.w	r3, r8, r3
 801a832:	4599      	cmp	r9, r3
 801a834:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801a838:	eea3 7b46 	vfms.f64	d7, d3, d6
 801a83c:	d133      	bne.n	801a8a6 <_dtoa_r+0x5f6>
 801a83e:	ee37 7b07 	vadd.f64	d7, d7, d7
 801a842:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801a846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a84a:	dc1a      	bgt.n	801a882 <_dtoa_r+0x5d2>
 801a84c:	eeb4 7b46 	vcmp.f64	d7, d6
 801a850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a854:	d103      	bne.n	801a85e <_dtoa_r+0x5ae>
 801a856:	ee15 3a10 	vmov	r3, s10
 801a85a:	07d9      	lsls	r1, r3, #31
 801a85c:	d411      	bmi.n	801a882 <_dtoa_r+0x5d2>
 801a85e:	4629      	mov	r1, r5
 801a860:	4630      	mov	r0, r6
 801a862:	f000 fbd1 	bl	801b008 <_Bfree>
 801a866:	2300      	movs	r3, #0
 801a868:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a86a:	f888 3000 	strb.w	r3, [r8]
 801a86e:	f10b 0301 	add.w	r3, fp, #1
 801a872:	6013      	str	r3, [r2, #0]
 801a874:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a876:	2b00      	cmp	r3, #0
 801a878:	f43f ad69 	beq.w	801a34e <_dtoa_r+0x9e>
 801a87c:	f8c3 8000 	str.w	r8, [r3]
 801a880:	e565      	b.n	801a34e <_dtoa_r+0x9e>
 801a882:	465a      	mov	r2, fp
 801a884:	4643      	mov	r3, r8
 801a886:	4698      	mov	r8, r3
 801a888:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 801a88c:	2939      	cmp	r1, #57	; 0x39
 801a88e:	d106      	bne.n	801a89e <_dtoa_r+0x5ee>
 801a890:	9901      	ldr	r1, [sp, #4]
 801a892:	4299      	cmp	r1, r3
 801a894:	d1f7      	bne.n	801a886 <_dtoa_r+0x5d6>
 801a896:	9801      	ldr	r0, [sp, #4]
 801a898:	2130      	movs	r1, #48	; 0x30
 801a89a:	3201      	adds	r2, #1
 801a89c:	7001      	strb	r1, [r0, #0]
 801a89e:	7819      	ldrb	r1, [r3, #0]
 801a8a0:	3101      	adds	r1, #1
 801a8a2:	7019      	strb	r1, [r3, #0]
 801a8a4:	e7ae      	b.n	801a804 <_dtoa_r+0x554>
 801a8a6:	ee27 7b04 	vmul.f64	d7, d7, d4
 801a8aa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801a8ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8b2:	d1b2      	bne.n	801a81a <_dtoa_r+0x56a>
 801a8b4:	e7d3      	b.n	801a85e <_dtoa_r+0x5ae>
 801a8b6:	bf00      	nop
 801a8b8:	0801c338 	.word	0x0801c338
 801a8bc:	0801c310 	.word	0x0801c310
 801a8c0:	9907      	ldr	r1, [sp, #28]
 801a8c2:	2900      	cmp	r1, #0
 801a8c4:	f000 80d0 	beq.w	801aa68 <_dtoa_r+0x7b8>
 801a8c8:	9906      	ldr	r1, [sp, #24]
 801a8ca:	2901      	cmp	r1, #1
 801a8cc:	f300 80b4 	bgt.w	801aa38 <_dtoa_r+0x788>
 801a8d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a8d2:	2900      	cmp	r1, #0
 801a8d4:	f000 80ac 	beq.w	801aa30 <_dtoa_r+0x780>
 801a8d8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801a8dc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801a8e0:	461c      	mov	r4, r3
 801a8e2:	9309      	str	r3, [sp, #36]	; 0x24
 801a8e4:	9b04      	ldr	r3, [sp, #16]
 801a8e6:	4413      	add	r3, r2
 801a8e8:	9304      	str	r3, [sp, #16]
 801a8ea:	9b05      	ldr	r3, [sp, #20]
 801a8ec:	2101      	movs	r1, #1
 801a8ee:	4413      	add	r3, r2
 801a8f0:	4630      	mov	r0, r6
 801a8f2:	9305      	str	r3, [sp, #20]
 801a8f4:	f000 fc3e 	bl	801b174 <__i2b>
 801a8f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a8fa:	4607      	mov	r7, r0
 801a8fc:	f1b8 0f00 	cmp.w	r8, #0
 801a900:	d00d      	beq.n	801a91e <_dtoa_r+0x66e>
 801a902:	9a05      	ldr	r2, [sp, #20]
 801a904:	2a00      	cmp	r2, #0
 801a906:	dd0a      	ble.n	801a91e <_dtoa_r+0x66e>
 801a908:	4542      	cmp	r2, r8
 801a90a:	9904      	ldr	r1, [sp, #16]
 801a90c:	bfa8      	it	ge
 801a90e:	4642      	movge	r2, r8
 801a910:	1a89      	subs	r1, r1, r2
 801a912:	9104      	str	r1, [sp, #16]
 801a914:	9905      	ldr	r1, [sp, #20]
 801a916:	eba8 0802 	sub.w	r8, r8, r2
 801a91a:	1a8a      	subs	r2, r1, r2
 801a91c:	9205      	str	r2, [sp, #20]
 801a91e:	b303      	cbz	r3, 801a962 <_dtoa_r+0x6b2>
 801a920:	9a07      	ldr	r2, [sp, #28]
 801a922:	2a00      	cmp	r2, #0
 801a924:	f000 80a5 	beq.w	801aa72 <_dtoa_r+0x7c2>
 801a928:	2c00      	cmp	r4, #0
 801a92a:	dd13      	ble.n	801a954 <_dtoa_r+0x6a4>
 801a92c:	4639      	mov	r1, r7
 801a92e:	4622      	mov	r2, r4
 801a930:	4630      	mov	r0, r6
 801a932:	930d      	str	r3, [sp, #52]	; 0x34
 801a934:	f000 fcde 	bl	801b2f4 <__pow5mult>
 801a938:	462a      	mov	r2, r5
 801a93a:	4601      	mov	r1, r0
 801a93c:	4607      	mov	r7, r0
 801a93e:	4630      	mov	r0, r6
 801a940:	f000 fc2e 	bl	801b1a0 <__multiply>
 801a944:	4629      	mov	r1, r5
 801a946:	9009      	str	r0, [sp, #36]	; 0x24
 801a948:	4630      	mov	r0, r6
 801a94a:	f000 fb5d 	bl	801b008 <_Bfree>
 801a94e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a950:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a952:	4615      	mov	r5, r2
 801a954:	1b1a      	subs	r2, r3, r4
 801a956:	d004      	beq.n	801a962 <_dtoa_r+0x6b2>
 801a958:	4629      	mov	r1, r5
 801a95a:	4630      	mov	r0, r6
 801a95c:	f000 fcca 	bl	801b2f4 <__pow5mult>
 801a960:	4605      	mov	r5, r0
 801a962:	2101      	movs	r1, #1
 801a964:	4630      	mov	r0, r6
 801a966:	f000 fc05 	bl	801b174 <__i2b>
 801a96a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a96c:	2b00      	cmp	r3, #0
 801a96e:	4604      	mov	r4, r0
 801a970:	f340 8081 	ble.w	801aa76 <_dtoa_r+0x7c6>
 801a974:	461a      	mov	r2, r3
 801a976:	4601      	mov	r1, r0
 801a978:	4630      	mov	r0, r6
 801a97a:	f000 fcbb 	bl	801b2f4 <__pow5mult>
 801a97e:	9b06      	ldr	r3, [sp, #24]
 801a980:	2b01      	cmp	r3, #1
 801a982:	4604      	mov	r4, r0
 801a984:	dd7a      	ble.n	801aa7c <_dtoa_r+0x7cc>
 801a986:	2300      	movs	r3, #0
 801a988:	9309      	str	r3, [sp, #36]	; 0x24
 801a98a:	6922      	ldr	r2, [r4, #16]
 801a98c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801a990:	6910      	ldr	r0, [r2, #16]
 801a992:	f000 fba1 	bl	801b0d8 <__hi0bits>
 801a996:	f1c0 0020 	rsb	r0, r0, #32
 801a99a:	9b05      	ldr	r3, [sp, #20]
 801a99c:	4418      	add	r0, r3
 801a99e:	f010 001f 	ands.w	r0, r0, #31
 801a9a2:	f000 8093 	beq.w	801aacc <_dtoa_r+0x81c>
 801a9a6:	f1c0 0220 	rsb	r2, r0, #32
 801a9aa:	2a04      	cmp	r2, #4
 801a9ac:	f340 8085 	ble.w	801aaba <_dtoa_r+0x80a>
 801a9b0:	9b04      	ldr	r3, [sp, #16]
 801a9b2:	f1c0 001c 	rsb	r0, r0, #28
 801a9b6:	4403      	add	r3, r0
 801a9b8:	9304      	str	r3, [sp, #16]
 801a9ba:	9b05      	ldr	r3, [sp, #20]
 801a9bc:	4480      	add	r8, r0
 801a9be:	4403      	add	r3, r0
 801a9c0:	9305      	str	r3, [sp, #20]
 801a9c2:	9b04      	ldr	r3, [sp, #16]
 801a9c4:	2b00      	cmp	r3, #0
 801a9c6:	dd05      	ble.n	801a9d4 <_dtoa_r+0x724>
 801a9c8:	4629      	mov	r1, r5
 801a9ca:	461a      	mov	r2, r3
 801a9cc:	4630      	mov	r0, r6
 801a9ce:	f000 fceb 	bl	801b3a8 <__lshift>
 801a9d2:	4605      	mov	r5, r0
 801a9d4:	9b05      	ldr	r3, [sp, #20]
 801a9d6:	2b00      	cmp	r3, #0
 801a9d8:	dd05      	ble.n	801a9e6 <_dtoa_r+0x736>
 801a9da:	4621      	mov	r1, r4
 801a9dc:	461a      	mov	r2, r3
 801a9de:	4630      	mov	r0, r6
 801a9e0:	f000 fce2 	bl	801b3a8 <__lshift>
 801a9e4:	4604      	mov	r4, r0
 801a9e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a9e8:	2b00      	cmp	r3, #0
 801a9ea:	d071      	beq.n	801aad0 <_dtoa_r+0x820>
 801a9ec:	4621      	mov	r1, r4
 801a9ee:	4628      	mov	r0, r5
 801a9f0:	f000 fd46 	bl	801b480 <__mcmp>
 801a9f4:	2800      	cmp	r0, #0
 801a9f6:	da6b      	bge.n	801aad0 <_dtoa_r+0x820>
 801a9f8:	2300      	movs	r3, #0
 801a9fa:	4629      	mov	r1, r5
 801a9fc:	220a      	movs	r2, #10
 801a9fe:	4630      	mov	r0, r6
 801aa00:	f000 fb24 	bl	801b04c <__multadd>
 801aa04:	9b07      	ldr	r3, [sp, #28]
 801aa06:	f10b 3bff 	add.w	fp, fp, #4294967295
 801aa0a:	4605      	mov	r5, r0
 801aa0c:	2b00      	cmp	r3, #0
 801aa0e:	f000 8197 	beq.w	801ad40 <_dtoa_r+0xa90>
 801aa12:	4639      	mov	r1, r7
 801aa14:	2300      	movs	r3, #0
 801aa16:	220a      	movs	r2, #10
 801aa18:	4630      	mov	r0, r6
 801aa1a:	f000 fb17 	bl	801b04c <__multadd>
 801aa1e:	f1ba 0f00 	cmp.w	sl, #0
 801aa22:	4607      	mov	r7, r0
 801aa24:	f300 8093 	bgt.w	801ab4e <_dtoa_r+0x89e>
 801aa28:	9b06      	ldr	r3, [sp, #24]
 801aa2a:	2b02      	cmp	r3, #2
 801aa2c:	dc57      	bgt.n	801aade <_dtoa_r+0x82e>
 801aa2e:	e08e      	b.n	801ab4e <_dtoa_r+0x89e>
 801aa30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801aa32:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801aa36:	e751      	b.n	801a8dc <_dtoa_r+0x62c>
 801aa38:	f109 34ff 	add.w	r4, r9, #4294967295
 801aa3c:	42a3      	cmp	r3, r4
 801aa3e:	bfbf      	itttt	lt
 801aa40:	1ae2      	sublt	r2, r4, r3
 801aa42:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801aa44:	189b      	addlt	r3, r3, r2
 801aa46:	930a      	strlt	r3, [sp, #40]	; 0x28
 801aa48:	bfae      	itee	ge
 801aa4a:	1b1c      	subge	r4, r3, r4
 801aa4c:	4623      	movlt	r3, r4
 801aa4e:	2400      	movlt	r4, #0
 801aa50:	f1b9 0f00 	cmp.w	r9, #0
 801aa54:	bfb5      	itete	lt
 801aa56:	9a04      	ldrlt	r2, [sp, #16]
 801aa58:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801aa5c:	eba2 0809 	sublt.w	r8, r2, r9
 801aa60:	464a      	movge	r2, r9
 801aa62:	bfb8      	it	lt
 801aa64:	2200      	movlt	r2, #0
 801aa66:	e73c      	b.n	801a8e2 <_dtoa_r+0x632>
 801aa68:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801aa6c:	9f07      	ldr	r7, [sp, #28]
 801aa6e:	461c      	mov	r4, r3
 801aa70:	e744      	b.n	801a8fc <_dtoa_r+0x64c>
 801aa72:	461a      	mov	r2, r3
 801aa74:	e770      	b.n	801a958 <_dtoa_r+0x6a8>
 801aa76:	9b06      	ldr	r3, [sp, #24]
 801aa78:	2b01      	cmp	r3, #1
 801aa7a:	dc18      	bgt.n	801aaae <_dtoa_r+0x7fe>
 801aa7c:	9b02      	ldr	r3, [sp, #8]
 801aa7e:	b9b3      	cbnz	r3, 801aaae <_dtoa_r+0x7fe>
 801aa80:	9b03      	ldr	r3, [sp, #12]
 801aa82:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801aa86:	b9a2      	cbnz	r2, 801aab2 <_dtoa_r+0x802>
 801aa88:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801aa8c:	0d12      	lsrs	r2, r2, #20
 801aa8e:	0512      	lsls	r2, r2, #20
 801aa90:	b18a      	cbz	r2, 801aab6 <_dtoa_r+0x806>
 801aa92:	9b04      	ldr	r3, [sp, #16]
 801aa94:	3301      	adds	r3, #1
 801aa96:	9304      	str	r3, [sp, #16]
 801aa98:	9b05      	ldr	r3, [sp, #20]
 801aa9a:	3301      	adds	r3, #1
 801aa9c:	9305      	str	r3, [sp, #20]
 801aa9e:	2301      	movs	r3, #1
 801aaa0:	9309      	str	r3, [sp, #36]	; 0x24
 801aaa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aaa4:	2b00      	cmp	r3, #0
 801aaa6:	f47f af70 	bne.w	801a98a <_dtoa_r+0x6da>
 801aaaa:	2001      	movs	r0, #1
 801aaac:	e775      	b.n	801a99a <_dtoa_r+0x6ea>
 801aaae:	2300      	movs	r3, #0
 801aab0:	e7f6      	b.n	801aaa0 <_dtoa_r+0x7f0>
 801aab2:	9b02      	ldr	r3, [sp, #8]
 801aab4:	e7f4      	b.n	801aaa0 <_dtoa_r+0x7f0>
 801aab6:	9209      	str	r2, [sp, #36]	; 0x24
 801aab8:	e7f3      	b.n	801aaa2 <_dtoa_r+0x7f2>
 801aaba:	d082      	beq.n	801a9c2 <_dtoa_r+0x712>
 801aabc:	9b04      	ldr	r3, [sp, #16]
 801aabe:	321c      	adds	r2, #28
 801aac0:	4413      	add	r3, r2
 801aac2:	9304      	str	r3, [sp, #16]
 801aac4:	9b05      	ldr	r3, [sp, #20]
 801aac6:	4490      	add	r8, r2
 801aac8:	4413      	add	r3, r2
 801aaca:	e779      	b.n	801a9c0 <_dtoa_r+0x710>
 801aacc:	4602      	mov	r2, r0
 801aace:	e7f5      	b.n	801aabc <_dtoa_r+0x80c>
 801aad0:	f1b9 0f00 	cmp.w	r9, #0
 801aad4:	dc36      	bgt.n	801ab44 <_dtoa_r+0x894>
 801aad6:	9b06      	ldr	r3, [sp, #24]
 801aad8:	2b02      	cmp	r3, #2
 801aada:	dd33      	ble.n	801ab44 <_dtoa_r+0x894>
 801aadc:	46ca      	mov	sl, r9
 801aade:	f1ba 0f00 	cmp.w	sl, #0
 801aae2:	d10d      	bne.n	801ab00 <_dtoa_r+0x850>
 801aae4:	4621      	mov	r1, r4
 801aae6:	4653      	mov	r3, sl
 801aae8:	2205      	movs	r2, #5
 801aaea:	4630      	mov	r0, r6
 801aaec:	f000 faae 	bl	801b04c <__multadd>
 801aaf0:	4601      	mov	r1, r0
 801aaf2:	4604      	mov	r4, r0
 801aaf4:	4628      	mov	r0, r5
 801aaf6:	f000 fcc3 	bl	801b480 <__mcmp>
 801aafa:	2800      	cmp	r0, #0
 801aafc:	f73f ade4 	bgt.w	801a6c8 <_dtoa_r+0x418>
 801ab00:	9b08      	ldr	r3, [sp, #32]
 801ab02:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801ab06:	ea6f 0b03 	mvn.w	fp, r3
 801ab0a:	f04f 0900 	mov.w	r9, #0
 801ab0e:	4621      	mov	r1, r4
 801ab10:	4630      	mov	r0, r6
 801ab12:	f000 fa79 	bl	801b008 <_Bfree>
 801ab16:	2f00      	cmp	r7, #0
 801ab18:	f43f aea1 	beq.w	801a85e <_dtoa_r+0x5ae>
 801ab1c:	f1b9 0f00 	cmp.w	r9, #0
 801ab20:	d005      	beq.n	801ab2e <_dtoa_r+0x87e>
 801ab22:	45b9      	cmp	r9, r7
 801ab24:	d003      	beq.n	801ab2e <_dtoa_r+0x87e>
 801ab26:	4649      	mov	r1, r9
 801ab28:	4630      	mov	r0, r6
 801ab2a:	f000 fa6d 	bl	801b008 <_Bfree>
 801ab2e:	4639      	mov	r1, r7
 801ab30:	4630      	mov	r0, r6
 801ab32:	f000 fa69 	bl	801b008 <_Bfree>
 801ab36:	e692      	b.n	801a85e <_dtoa_r+0x5ae>
 801ab38:	2400      	movs	r4, #0
 801ab3a:	4627      	mov	r7, r4
 801ab3c:	e7e0      	b.n	801ab00 <_dtoa_r+0x850>
 801ab3e:	4693      	mov	fp, r2
 801ab40:	4627      	mov	r7, r4
 801ab42:	e5c1      	b.n	801a6c8 <_dtoa_r+0x418>
 801ab44:	9b07      	ldr	r3, [sp, #28]
 801ab46:	46ca      	mov	sl, r9
 801ab48:	2b00      	cmp	r3, #0
 801ab4a:	f000 8100 	beq.w	801ad4e <_dtoa_r+0xa9e>
 801ab4e:	f1b8 0f00 	cmp.w	r8, #0
 801ab52:	dd05      	ble.n	801ab60 <_dtoa_r+0x8b0>
 801ab54:	4639      	mov	r1, r7
 801ab56:	4642      	mov	r2, r8
 801ab58:	4630      	mov	r0, r6
 801ab5a:	f000 fc25 	bl	801b3a8 <__lshift>
 801ab5e:	4607      	mov	r7, r0
 801ab60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ab62:	2b00      	cmp	r3, #0
 801ab64:	d05d      	beq.n	801ac22 <_dtoa_r+0x972>
 801ab66:	6879      	ldr	r1, [r7, #4]
 801ab68:	4630      	mov	r0, r6
 801ab6a:	f000 fa0d 	bl	801af88 <_Balloc>
 801ab6e:	4680      	mov	r8, r0
 801ab70:	b928      	cbnz	r0, 801ab7e <_dtoa_r+0x8ce>
 801ab72:	4b82      	ldr	r3, [pc, #520]	; (801ad7c <_dtoa_r+0xacc>)
 801ab74:	4602      	mov	r2, r0
 801ab76:	f240 21ef 	movw	r1, #751	; 0x2ef
 801ab7a:	f7ff bbb1 	b.w	801a2e0 <_dtoa_r+0x30>
 801ab7e:	693a      	ldr	r2, [r7, #16]
 801ab80:	3202      	adds	r2, #2
 801ab82:	0092      	lsls	r2, r2, #2
 801ab84:	f107 010c 	add.w	r1, r7, #12
 801ab88:	300c      	adds	r0, #12
 801ab8a:	f7ff fafa 	bl	801a182 <memcpy>
 801ab8e:	2201      	movs	r2, #1
 801ab90:	4641      	mov	r1, r8
 801ab92:	4630      	mov	r0, r6
 801ab94:	f000 fc08 	bl	801b3a8 <__lshift>
 801ab98:	9b01      	ldr	r3, [sp, #4]
 801ab9a:	3301      	adds	r3, #1
 801ab9c:	9304      	str	r3, [sp, #16]
 801ab9e:	9b01      	ldr	r3, [sp, #4]
 801aba0:	4453      	add	r3, sl
 801aba2:	9308      	str	r3, [sp, #32]
 801aba4:	9b02      	ldr	r3, [sp, #8]
 801aba6:	f003 0301 	and.w	r3, r3, #1
 801abaa:	46b9      	mov	r9, r7
 801abac:	9307      	str	r3, [sp, #28]
 801abae:	4607      	mov	r7, r0
 801abb0:	9b04      	ldr	r3, [sp, #16]
 801abb2:	4621      	mov	r1, r4
 801abb4:	3b01      	subs	r3, #1
 801abb6:	4628      	mov	r0, r5
 801abb8:	9302      	str	r3, [sp, #8]
 801abba:	f7ff faf0 	bl	801a19e <quorem>
 801abbe:	4603      	mov	r3, r0
 801abc0:	3330      	adds	r3, #48	; 0x30
 801abc2:	9005      	str	r0, [sp, #20]
 801abc4:	4649      	mov	r1, r9
 801abc6:	4628      	mov	r0, r5
 801abc8:	9309      	str	r3, [sp, #36]	; 0x24
 801abca:	f000 fc59 	bl	801b480 <__mcmp>
 801abce:	463a      	mov	r2, r7
 801abd0:	4682      	mov	sl, r0
 801abd2:	4621      	mov	r1, r4
 801abd4:	4630      	mov	r0, r6
 801abd6:	f000 fc6f 	bl	801b4b8 <__mdiff>
 801abda:	68c2      	ldr	r2, [r0, #12]
 801abdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801abde:	4680      	mov	r8, r0
 801abe0:	bb0a      	cbnz	r2, 801ac26 <_dtoa_r+0x976>
 801abe2:	4601      	mov	r1, r0
 801abe4:	4628      	mov	r0, r5
 801abe6:	f000 fc4b 	bl	801b480 <__mcmp>
 801abea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801abec:	4602      	mov	r2, r0
 801abee:	4641      	mov	r1, r8
 801abf0:	4630      	mov	r0, r6
 801abf2:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801abf6:	f000 fa07 	bl	801b008 <_Bfree>
 801abfa:	9b06      	ldr	r3, [sp, #24]
 801abfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801abfe:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801ac02:	ea43 0102 	orr.w	r1, r3, r2
 801ac06:	9b07      	ldr	r3, [sp, #28]
 801ac08:	4319      	orrs	r1, r3
 801ac0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ac0c:	d10d      	bne.n	801ac2a <_dtoa_r+0x97a>
 801ac0e:	2b39      	cmp	r3, #57	; 0x39
 801ac10:	d029      	beq.n	801ac66 <_dtoa_r+0x9b6>
 801ac12:	f1ba 0f00 	cmp.w	sl, #0
 801ac16:	dd01      	ble.n	801ac1c <_dtoa_r+0x96c>
 801ac18:	9b05      	ldr	r3, [sp, #20]
 801ac1a:	3331      	adds	r3, #49	; 0x31
 801ac1c:	9a02      	ldr	r2, [sp, #8]
 801ac1e:	7013      	strb	r3, [r2, #0]
 801ac20:	e775      	b.n	801ab0e <_dtoa_r+0x85e>
 801ac22:	4638      	mov	r0, r7
 801ac24:	e7b8      	b.n	801ab98 <_dtoa_r+0x8e8>
 801ac26:	2201      	movs	r2, #1
 801ac28:	e7e1      	b.n	801abee <_dtoa_r+0x93e>
 801ac2a:	f1ba 0f00 	cmp.w	sl, #0
 801ac2e:	db06      	blt.n	801ac3e <_dtoa_r+0x98e>
 801ac30:	9906      	ldr	r1, [sp, #24]
 801ac32:	ea41 0a0a 	orr.w	sl, r1, sl
 801ac36:	9907      	ldr	r1, [sp, #28]
 801ac38:	ea5a 0a01 	orrs.w	sl, sl, r1
 801ac3c:	d120      	bne.n	801ac80 <_dtoa_r+0x9d0>
 801ac3e:	2a00      	cmp	r2, #0
 801ac40:	ddec      	ble.n	801ac1c <_dtoa_r+0x96c>
 801ac42:	4629      	mov	r1, r5
 801ac44:	2201      	movs	r2, #1
 801ac46:	4630      	mov	r0, r6
 801ac48:	9304      	str	r3, [sp, #16]
 801ac4a:	f000 fbad 	bl	801b3a8 <__lshift>
 801ac4e:	4621      	mov	r1, r4
 801ac50:	4605      	mov	r5, r0
 801ac52:	f000 fc15 	bl	801b480 <__mcmp>
 801ac56:	2800      	cmp	r0, #0
 801ac58:	9b04      	ldr	r3, [sp, #16]
 801ac5a:	dc02      	bgt.n	801ac62 <_dtoa_r+0x9b2>
 801ac5c:	d1de      	bne.n	801ac1c <_dtoa_r+0x96c>
 801ac5e:	07da      	lsls	r2, r3, #31
 801ac60:	d5dc      	bpl.n	801ac1c <_dtoa_r+0x96c>
 801ac62:	2b39      	cmp	r3, #57	; 0x39
 801ac64:	d1d8      	bne.n	801ac18 <_dtoa_r+0x968>
 801ac66:	9a02      	ldr	r2, [sp, #8]
 801ac68:	2339      	movs	r3, #57	; 0x39
 801ac6a:	7013      	strb	r3, [r2, #0]
 801ac6c:	4643      	mov	r3, r8
 801ac6e:	4698      	mov	r8, r3
 801ac70:	3b01      	subs	r3, #1
 801ac72:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801ac76:	2a39      	cmp	r2, #57	; 0x39
 801ac78:	d051      	beq.n	801ad1e <_dtoa_r+0xa6e>
 801ac7a:	3201      	adds	r2, #1
 801ac7c:	701a      	strb	r2, [r3, #0]
 801ac7e:	e746      	b.n	801ab0e <_dtoa_r+0x85e>
 801ac80:	2a00      	cmp	r2, #0
 801ac82:	dd03      	ble.n	801ac8c <_dtoa_r+0x9dc>
 801ac84:	2b39      	cmp	r3, #57	; 0x39
 801ac86:	d0ee      	beq.n	801ac66 <_dtoa_r+0x9b6>
 801ac88:	3301      	adds	r3, #1
 801ac8a:	e7c7      	b.n	801ac1c <_dtoa_r+0x96c>
 801ac8c:	9a04      	ldr	r2, [sp, #16]
 801ac8e:	9908      	ldr	r1, [sp, #32]
 801ac90:	f802 3c01 	strb.w	r3, [r2, #-1]
 801ac94:	428a      	cmp	r2, r1
 801ac96:	d02b      	beq.n	801acf0 <_dtoa_r+0xa40>
 801ac98:	4629      	mov	r1, r5
 801ac9a:	2300      	movs	r3, #0
 801ac9c:	220a      	movs	r2, #10
 801ac9e:	4630      	mov	r0, r6
 801aca0:	f000 f9d4 	bl	801b04c <__multadd>
 801aca4:	45b9      	cmp	r9, r7
 801aca6:	4605      	mov	r5, r0
 801aca8:	f04f 0300 	mov.w	r3, #0
 801acac:	f04f 020a 	mov.w	r2, #10
 801acb0:	4649      	mov	r1, r9
 801acb2:	4630      	mov	r0, r6
 801acb4:	d107      	bne.n	801acc6 <_dtoa_r+0xa16>
 801acb6:	f000 f9c9 	bl	801b04c <__multadd>
 801acba:	4681      	mov	r9, r0
 801acbc:	4607      	mov	r7, r0
 801acbe:	9b04      	ldr	r3, [sp, #16]
 801acc0:	3301      	adds	r3, #1
 801acc2:	9304      	str	r3, [sp, #16]
 801acc4:	e774      	b.n	801abb0 <_dtoa_r+0x900>
 801acc6:	f000 f9c1 	bl	801b04c <__multadd>
 801acca:	4639      	mov	r1, r7
 801accc:	4681      	mov	r9, r0
 801acce:	2300      	movs	r3, #0
 801acd0:	220a      	movs	r2, #10
 801acd2:	4630      	mov	r0, r6
 801acd4:	f000 f9ba 	bl	801b04c <__multadd>
 801acd8:	4607      	mov	r7, r0
 801acda:	e7f0      	b.n	801acbe <_dtoa_r+0xa0e>
 801acdc:	f1ba 0f00 	cmp.w	sl, #0
 801ace0:	9a01      	ldr	r2, [sp, #4]
 801ace2:	bfcc      	ite	gt
 801ace4:	46d0      	movgt	r8, sl
 801ace6:	f04f 0801 	movle.w	r8, #1
 801acea:	4490      	add	r8, r2
 801acec:	f04f 0900 	mov.w	r9, #0
 801acf0:	4629      	mov	r1, r5
 801acf2:	2201      	movs	r2, #1
 801acf4:	4630      	mov	r0, r6
 801acf6:	9302      	str	r3, [sp, #8]
 801acf8:	f000 fb56 	bl	801b3a8 <__lshift>
 801acfc:	4621      	mov	r1, r4
 801acfe:	4605      	mov	r5, r0
 801ad00:	f000 fbbe 	bl	801b480 <__mcmp>
 801ad04:	2800      	cmp	r0, #0
 801ad06:	dcb1      	bgt.n	801ac6c <_dtoa_r+0x9bc>
 801ad08:	d102      	bne.n	801ad10 <_dtoa_r+0xa60>
 801ad0a:	9b02      	ldr	r3, [sp, #8]
 801ad0c:	07db      	lsls	r3, r3, #31
 801ad0e:	d4ad      	bmi.n	801ac6c <_dtoa_r+0x9bc>
 801ad10:	4643      	mov	r3, r8
 801ad12:	4698      	mov	r8, r3
 801ad14:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ad18:	2a30      	cmp	r2, #48	; 0x30
 801ad1a:	d0fa      	beq.n	801ad12 <_dtoa_r+0xa62>
 801ad1c:	e6f7      	b.n	801ab0e <_dtoa_r+0x85e>
 801ad1e:	9a01      	ldr	r2, [sp, #4]
 801ad20:	429a      	cmp	r2, r3
 801ad22:	d1a4      	bne.n	801ac6e <_dtoa_r+0x9be>
 801ad24:	f10b 0b01 	add.w	fp, fp, #1
 801ad28:	2331      	movs	r3, #49	; 0x31
 801ad2a:	e778      	b.n	801ac1e <_dtoa_r+0x96e>
 801ad2c:	4b14      	ldr	r3, [pc, #80]	; (801ad80 <_dtoa_r+0xad0>)
 801ad2e:	f7ff bb2a 	b.w	801a386 <_dtoa_r+0xd6>
 801ad32:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ad34:	2b00      	cmp	r3, #0
 801ad36:	f47f ab05 	bne.w	801a344 <_dtoa_r+0x94>
 801ad3a:	4b12      	ldr	r3, [pc, #72]	; (801ad84 <_dtoa_r+0xad4>)
 801ad3c:	f7ff bb23 	b.w	801a386 <_dtoa_r+0xd6>
 801ad40:	f1ba 0f00 	cmp.w	sl, #0
 801ad44:	dc03      	bgt.n	801ad4e <_dtoa_r+0xa9e>
 801ad46:	9b06      	ldr	r3, [sp, #24]
 801ad48:	2b02      	cmp	r3, #2
 801ad4a:	f73f aec8 	bgt.w	801aade <_dtoa_r+0x82e>
 801ad4e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801ad52:	4621      	mov	r1, r4
 801ad54:	4628      	mov	r0, r5
 801ad56:	f7ff fa22 	bl	801a19e <quorem>
 801ad5a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801ad5e:	f808 3b01 	strb.w	r3, [r8], #1
 801ad62:	9a01      	ldr	r2, [sp, #4]
 801ad64:	eba8 0202 	sub.w	r2, r8, r2
 801ad68:	4592      	cmp	sl, r2
 801ad6a:	ddb7      	ble.n	801acdc <_dtoa_r+0xa2c>
 801ad6c:	4629      	mov	r1, r5
 801ad6e:	2300      	movs	r3, #0
 801ad70:	220a      	movs	r2, #10
 801ad72:	4630      	mov	r0, r6
 801ad74:	f000 f96a 	bl	801b04c <__multadd>
 801ad78:	4605      	mov	r5, r0
 801ad7a:	e7ea      	b.n	801ad52 <_dtoa_r+0xaa2>
 801ad7c:	0801c2a0 	.word	0x0801c2a0
 801ad80:	0801c200 	.word	0x0801c200
 801ad84:	0801c224 	.word	0x0801c224

0801ad88 <_free_r>:
 801ad88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ad8a:	2900      	cmp	r1, #0
 801ad8c:	d044      	beq.n	801ae18 <_free_r+0x90>
 801ad8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ad92:	9001      	str	r0, [sp, #4]
 801ad94:	2b00      	cmp	r3, #0
 801ad96:	f1a1 0404 	sub.w	r4, r1, #4
 801ad9a:	bfb8      	it	lt
 801ad9c:	18e4      	addlt	r4, r4, r3
 801ad9e:	f000 f8e7 	bl	801af70 <__malloc_lock>
 801ada2:	4a1e      	ldr	r2, [pc, #120]	; (801ae1c <_free_r+0x94>)
 801ada4:	9801      	ldr	r0, [sp, #4]
 801ada6:	6813      	ldr	r3, [r2, #0]
 801ada8:	b933      	cbnz	r3, 801adb8 <_free_r+0x30>
 801adaa:	6063      	str	r3, [r4, #4]
 801adac:	6014      	str	r4, [r2, #0]
 801adae:	b003      	add	sp, #12
 801adb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801adb4:	f000 b8e2 	b.w	801af7c <__malloc_unlock>
 801adb8:	42a3      	cmp	r3, r4
 801adba:	d908      	bls.n	801adce <_free_r+0x46>
 801adbc:	6825      	ldr	r5, [r4, #0]
 801adbe:	1961      	adds	r1, r4, r5
 801adc0:	428b      	cmp	r3, r1
 801adc2:	bf01      	itttt	eq
 801adc4:	6819      	ldreq	r1, [r3, #0]
 801adc6:	685b      	ldreq	r3, [r3, #4]
 801adc8:	1949      	addeq	r1, r1, r5
 801adca:	6021      	streq	r1, [r4, #0]
 801adcc:	e7ed      	b.n	801adaa <_free_r+0x22>
 801adce:	461a      	mov	r2, r3
 801add0:	685b      	ldr	r3, [r3, #4]
 801add2:	b10b      	cbz	r3, 801add8 <_free_r+0x50>
 801add4:	42a3      	cmp	r3, r4
 801add6:	d9fa      	bls.n	801adce <_free_r+0x46>
 801add8:	6811      	ldr	r1, [r2, #0]
 801adda:	1855      	adds	r5, r2, r1
 801addc:	42a5      	cmp	r5, r4
 801adde:	d10b      	bne.n	801adf8 <_free_r+0x70>
 801ade0:	6824      	ldr	r4, [r4, #0]
 801ade2:	4421      	add	r1, r4
 801ade4:	1854      	adds	r4, r2, r1
 801ade6:	42a3      	cmp	r3, r4
 801ade8:	6011      	str	r1, [r2, #0]
 801adea:	d1e0      	bne.n	801adae <_free_r+0x26>
 801adec:	681c      	ldr	r4, [r3, #0]
 801adee:	685b      	ldr	r3, [r3, #4]
 801adf0:	6053      	str	r3, [r2, #4]
 801adf2:	440c      	add	r4, r1
 801adf4:	6014      	str	r4, [r2, #0]
 801adf6:	e7da      	b.n	801adae <_free_r+0x26>
 801adf8:	d902      	bls.n	801ae00 <_free_r+0x78>
 801adfa:	230c      	movs	r3, #12
 801adfc:	6003      	str	r3, [r0, #0]
 801adfe:	e7d6      	b.n	801adae <_free_r+0x26>
 801ae00:	6825      	ldr	r5, [r4, #0]
 801ae02:	1961      	adds	r1, r4, r5
 801ae04:	428b      	cmp	r3, r1
 801ae06:	bf04      	itt	eq
 801ae08:	6819      	ldreq	r1, [r3, #0]
 801ae0a:	685b      	ldreq	r3, [r3, #4]
 801ae0c:	6063      	str	r3, [r4, #4]
 801ae0e:	bf04      	itt	eq
 801ae10:	1949      	addeq	r1, r1, r5
 801ae12:	6021      	streq	r1, [r4, #0]
 801ae14:	6054      	str	r4, [r2, #4]
 801ae16:	e7ca      	b.n	801adae <_free_r+0x26>
 801ae18:	b003      	add	sp, #12
 801ae1a:	bd30      	pop	{r4, r5, pc}
 801ae1c:	2400e77c 	.word	0x2400e77c

0801ae20 <malloc>:
 801ae20:	4b02      	ldr	r3, [pc, #8]	; (801ae2c <malloc+0xc>)
 801ae22:	4601      	mov	r1, r0
 801ae24:	6818      	ldr	r0, [r3, #0]
 801ae26:	f000 b823 	b.w	801ae70 <_malloc_r>
 801ae2a:	bf00      	nop
 801ae2c:	2400006c 	.word	0x2400006c

0801ae30 <sbrk_aligned>:
 801ae30:	b570      	push	{r4, r5, r6, lr}
 801ae32:	4e0e      	ldr	r6, [pc, #56]	; (801ae6c <sbrk_aligned+0x3c>)
 801ae34:	460c      	mov	r4, r1
 801ae36:	6831      	ldr	r1, [r6, #0]
 801ae38:	4605      	mov	r5, r0
 801ae3a:	b911      	cbnz	r1, 801ae42 <sbrk_aligned+0x12>
 801ae3c:	f000 fea8 	bl	801bb90 <_sbrk_r>
 801ae40:	6030      	str	r0, [r6, #0]
 801ae42:	4621      	mov	r1, r4
 801ae44:	4628      	mov	r0, r5
 801ae46:	f000 fea3 	bl	801bb90 <_sbrk_r>
 801ae4a:	1c43      	adds	r3, r0, #1
 801ae4c:	d00a      	beq.n	801ae64 <sbrk_aligned+0x34>
 801ae4e:	1cc4      	adds	r4, r0, #3
 801ae50:	f024 0403 	bic.w	r4, r4, #3
 801ae54:	42a0      	cmp	r0, r4
 801ae56:	d007      	beq.n	801ae68 <sbrk_aligned+0x38>
 801ae58:	1a21      	subs	r1, r4, r0
 801ae5a:	4628      	mov	r0, r5
 801ae5c:	f000 fe98 	bl	801bb90 <_sbrk_r>
 801ae60:	3001      	adds	r0, #1
 801ae62:	d101      	bne.n	801ae68 <sbrk_aligned+0x38>
 801ae64:	f04f 34ff 	mov.w	r4, #4294967295
 801ae68:	4620      	mov	r0, r4
 801ae6a:	bd70      	pop	{r4, r5, r6, pc}
 801ae6c:	2400e780 	.word	0x2400e780

0801ae70 <_malloc_r>:
 801ae70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ae74:	1ccd      	adds	r5, r1, #3
 801ae76:	f025 0503 	bic.w	r5, r5, #3
 801ae7a:	3508      	adds	r5, #8
 801ae7c:	2d0c      	cmp	r5, #12
 801ae7e:	bf38      	it	cc
 801ae80:	250c      	movcc	r5, #12
 801ae82:	2d00      	cmp	r5, #0
 801ae84:	4607      	mov	r7, r0
 801ae86:	db01      	blt.n	801ae8c <_malloc_r+0x1c>
 801ae88:	42a9      	cmp	r1, r5
 801ae8a:	d905      	bls.n	801ae98 <_malloc_r+0x28>
 801ae8c:	230c      	movs	r3, #12
 801ae8e:	603b      	str	r3, [r7, #0]
 801ae90:	2600      	movs	r6, #0
 801ae92:	4630      	mov	r0, r6
 801ae94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ae98:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801af6c <_malloc_r+0xfc>
 801ae9c:	f000 f868 	bl	801af70 <__malloc_lock>
 801aea0:	f8d8 3000 	ldr.w	r3, [r8]
 801aea4:	461c      	mov	r4, r3
 801aea6:	bb5c      	cbnz	r4, 801af00 <_malloc_r+0x90>
 801aea8:	4629      	mov	r1, r5
 801aeaa:	4638      	mov	r0, r7
 801aeac:	f7ff ffc0 	bl	801ae30 <sbrk_aligned>
 801aeb0:	1c43      	adds	r3, r0, #1
 801aeb2:	4604      	mov	r4, r0
 801aeb4:	d155      	bne.n	801af62 <_malloc_r+0xf2>
 801aeb6:	f8d8 4000 	ldr.w	r4, [r8]
 801aeba:	4626      	mov	r6, r4
 801aebc:	2e00      	cmp	r6, #0
 801aebe:	d145      	bne.n	801af4c <_malloc_r+0xdc>
 801aec0:	2c00      	cmp	r4, #0
 801aec2:	d048      	beq.n	801af56 <_malloc_r+0xe6>
 801aec4:	6823      	ldr	r3, [r4, #0]
 801aec6:	4631      	mov	r1, r6
 801aec8:	4638      	mov	r0, r7
 801aeca:	eb04 0903 	add.w	r9, r4, r3
 801aece:	f000 fe5f 	bl	801bb90 <_sbrk_r>
 801aed2:	4581      	cmp	r9, r0
 801aed4:	d13f      	bne.n	801af56 <_malloc_r+0xe6>
 801aed6:	6821      	ldr	r1, [r4, #0]
 801aed8:	1a6d      	subs	r5, r5, r1
 801aeda:	4629      	mov	r1, r5
 801aedc:	4638      	mov	r0, r7
 801aede:	f7ff ffa7 	bl	801ae30 <sbrk_aligned>
 801aee2:	3001      	adds	r0, #1
 801aee4:	d037      	beq.n	801af56 <_malloc_r+0xe6>
 801aee6:	6823      	ldr	r3, [r4, #0]
 801aee8:	442b      	add	r3, r5
 801aeea:	6023      	str	r3, [r4, #0]
 801aeec:	f8d8 3000 	ldr.w	r3, [r8]
 801aef0:	2b00      	cmp	r3, #0
 801aef2:	d038      	beq.n	801af66 <_malloc_r+0xf6>
 801aef4:	685a      	ldr	r2, [r3, #4]
 801aef6:	42a2      	cmp	r2, r4
 801aef8:	d12b      	bne.n	801af52 <_malloc_r+0xe2>
 801aefa:	2200      	movs	r2, #0
 801aefc:	605a      	str	r2, [r3, #4]
 801aefe:	e00f      	b.n	801af20 <_malloc_r+0xb0>
 801af00:	6822      	ldr	r2, [r4, #0]
 801af02:	1b52      	subs	r2, r2, r5
 801af04:	d41f      	bmi.n	801af46 <_malloc_r+0xd6>
 801af06:	2a0b      	cmp	r2, #11
 801af08:	d917      	bls.n	801af3a <_malloc_r+0xca>
 801af0a:	1961      	adds	r1, r4, r5
 801af0c:	42a3      	cmp	r3, r4
 801af0e:	6025      	str	r5, [r4, #0]
 801af10:	bf18      	it	ne
 801af12:	6059      	strne	r1, [r3, #4]
 801af14:	6863      	ldr	r3, [r4, #4]
 801af16:	bf08      	it	eq
 801af18:	f8c8 1000 	streq.w	r1, [r8]
 801af1c:	5162      	str	r2, [r4, r5]
 801af1e:	604b      	str	r3, [r1, #4]
 801af20:	4638      	mov	r0, r7
 801af22:	f104 060b 	add.w	r6, r4, #11
 801af26:	f000 f829 	bl	801af7c <__malloc_unlock>
 801af2a:	f026 0607 	bic.w	r6, r6, #7
 801af2e:	1d23      	adds	r3, r4, #4
 801af30:	1af2      	subs	r2, r6, r3
 801af32:	d0ae      	beq.n	801ae92 <_malloc_r+0x22>
 801af34:	1b9b      	subs	r3, r3, r6
 801af36:	50a3      	str	r3, [r4, r2]
 801af38:	e7ab      	b.n	801ae92 <_malloc_r+0x22>
 801af3a:	42a3      	cmp	r3, r4
 801af3c:	6862      	ldr	r2, [r4, #4]
 801af3e:	d1dd      	bne.n	801aefc <_malloc_r+0x8c>
 801af40:	f8c8 2000 	str.w	r2, [r8]
 801af44:	e7ec      	b.n	801af20 <_malloc_r+0xb0>
 801af46:	4623      	mov	r3, r4
 801af48:	6864      	ldr	r4, [r4, #4]
 801af4a:	e7ac      	b.n	801aea6 <_malloc_r+0x36>
 801af4c:	4634      	mov	r4, r6
 801af4e:	6876      	ldr	r6, [r6, #4]
 801af50:	e7b4      	b.n	801aebc <_malloc_r+0x4c>
 801af52:	4613      	mov	r3, r2
 801af54:	e7cc      	b.n	801aef0 <_malloc_r+0x80>
 801af56:	230c      	movs	r3, #12
 801af58:	603b      	str	r3, [r7, #0]
 801af5a:	4638      	mov	r0, r7
 801af5c:	f000 f80e 	bl	801af7c <__malloc_unlock>
 801af60:	e797      	b.n	801ae92 <_malloc_r+0x22>
 801af62:	6025      	str	r5, [r4, #0]
 801af64:	e7dc      	b.n	801af20 <_malloc_r+0xb0>
 801af66:	605b      	str	r3, [r3, #4]
 801af68:	deff      	udf	#255	; 0xff
 801af6a:	bf00      	nop
 801af6c:	2400e77c 	.word	0x2400e77c

0801af70 <__malloc_lock>:
 801af70:	4801      	ldr	r0, [pc, #4]	; (801af78 <__malloc_lock+0x8>)
 801af72:	f7ff b904 	b.w	801a17e <__retarget_lock_acquire_recursive>
 801af76:	bf00      	nop
 801af78:	2400e778 	.word	0x2400e778

0801af7c <__malloc_unlock>:
 801af7c:	4801      	ldr	r0, [pc, #4]	; (801af84 <__malloc_unlock+0x8>)
 801af7e:	f7ff b8ff 	b.w	801a180 <__retarget_lock_release_recursive>
 801af82:	bf00      	nop
 801af84:	2400e778 	.word	0x2400e778

0801af88 <_Balloc>:
 801af88:	b570      	push	{r4, r5, r6, lr}
 801af8a:	69c6      	ldr	r6, [r0, #28]
 801af8c:	4604      	mov	r4, r0
 801af8e:	460d      	mov	r5, r1
 801af90:	b976      	cbnz	r6, 801afb0 <_Balloc+0x28>
 801af92:	2010      	movs	r0, #16
 801af94:	f7ff ff44 	bl	801ae20 <malloc>
 801af98:	4602      	mov	r2, r0
 801af9a:	61e0      	str	r0, [r4, #28]
 801af9c:	b920      	cbnz	r0, 801afa8 <_Balloc+0x20>
 801af9e:	4b18      	ldr	r3, [pc, #96]	; (801b000 <_Balloc+0x78>)
 801afa0:	4818      	ldr	r0, [pc, #96]	; (801b004 <_Balloc+0x7c>)
 801afa2:	216b      	movs	r1, #107	; 0x6b
 801afa4:	f000 fe04 	bl	801bbb0 <__assert_func>
 801afa8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801afac:	6006      	str	r6, [r0, #0]
 801afae:	60c6      	str	r6, [r0, #12]
 801afb0:	69e6      	ldr	r6, [r4, #28]
 801afb2:	68f3      	ldr	r3, [r6, #12]
 801afb4:	b183      	cbz	r3, 801afd8 <_Balloc+0x50>
 801afb6:	69e3      	ldr	r3, [r4, #28]
 801afb8:	68db      	ldr	r3, [r3, #12]
 801afba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801afbe:	b9b8      	cbnz	r0, 801aff0 <_Balloc+0x68>
 801afc0:	2101      	movs	r1, #1
 801afc2:	fa01 f605 	lsl.w	r6, r1, r5
 801afc6:	1d72      	adds	r2, r6, #5
 801afc8:	0092      	lsls	r2, r2, #2
 801afca:	4620      	mov	r0, r4
 801afcc:	f000 fe0e 	bl	801bbec <_calloc_r>
 801afd0:	b160      	cbz	r0, 801afec <_Balloc+0x64>
 801afd2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801afd6:	e00e      	b.n	801aff6 <_Balloc+0x6e>
 801afd8:	2221      	movs	r2, #33	; 0x21
 801afda:	2104      	movs	r1, #4
 801afdc:	4620      	mov	r0, r4
 801afde:	f000 fe05 	bl	801bbec <_calloc_r>
 801afe2:	69e3      	ldr	r3, [r4, #28]
 801afe4:	60f0      	str	r0, [r6, #12]
 801afe6:	68db      	ldr	r3, [r3, #12]
 801afe8:	2b00      	cmp	r3, #0
 801afea:	d1e4      	bne.n	801afb6 <_Balloc+0x2e>
 801afec:	2000      	movs	r0, #0
 801afee:	bd70      	pop	{r4, r5, r6, pc}
 801aff0:	6802      	ldr	r2, [r0, #0]
 801aff2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801aff6:	2300      	movs	r3, #0
 801aff8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801affc:	e7f7      	b.n	801afee <_Balloc+0x66>
 801affe:	bf00      	nop
 801b000:	0801c231 	.word	0x0801c231
 801b004:	0801c2b1 	.word	0x0801c2b1

0801b008 <_Bfree>:
 801b008:	b570      	push	{r4, r5, r6, lr}
 801b00a:	69c6      	ldr	r6, [r0, #28]
 801b00c:	4605      	mov	r5, r0
 801b00e:	460c      	mov	r4, r1
 801b010:	b976      	cbnz	r6, 801b030 <_Bfree+0x28>
 801b012:	2010      	movs	r0, #16
 801b014:	f7ff ff04 	bl	801ae20 <malloc>
 801b018:	4602      	mov	r2, r0
 801b01a:	61e8      	str	r0, [r5, #28]
 801b01c:	b920      	cbnz	r0, 801b028 <_Bfree+0x20>
 801b01e:	4b09      	ldr	r3, [pc, #36]	; (801b044 <_Bfree+0x3c>)
 801b020:	4809      	ldr	r0, [pc, #36]	; (801b048 <_Bfree+0x40>)
 801b022:	218f      	movs	r1, #143	; 0x8f
 801b024:	f000 fdc4 	bl	801bbb0 <__assert_func>
 801b028:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b02c:	6006      	str	r6, [r0, #0]
 801b02e:	60c6      	str	r6, [r0, #12]
 801b030:	b13c      	cbz	r4, 801b042 <_Bfree+0x3a>
 801b032:	69eb      	ldr	r3, [r5, #28]
 801b034:	6862      	ldr	r2, [r4, #4]
 801b036:	68db      	ldr	r3, [r3, #12]
 801b038:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801b03c:	6021      	str	r1, [r4, #0]
 801b03e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801b042:	bd70      	pop	{r4, r5, r6, pc}
 801b044:	0801c231 	.word	0x0801c231
 801b048:	0801c2b1 	.word	0x0801c2b1

0801b04c <__multadd>:
 801b04c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b050:	690d      	ldr	r5, [r1, #16]
 801b052:	4607      	mov	r7, r0
 801b054:	460c      	mov	r4, r1
 801b056:	461e      	mov	r6, r3
 801b058:	f101 0c14 	add.w	ip, r1, #20
 801b05c:	2000      	movs	r0, #0
 801b05e:	f8dc 3000 	ldr.w	r3, [ip]
 801b062:	b299      	uxth	r1, r3
 801b064:	fb02 6101 	mla	r1, r2, r1, r6
 801b068:	0c1e      	lsrs	r6, r3, #16
 801b06a:	0c0b      	lsrs	r3, r1, #16
 801b06c:	fb02 3306 	mla	r3, r2, r6, r3
 801b070:	b289      	uxth	r1, r1
 801b072:	3001      	adds	r0, #1
 801b074:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801b078:	4285      	cmp	r5, r0
 801b07a:	f84c 1b04 	str.w	r1, [ip], #4
 801b07e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801b082:	dcec      	bgt.n	801b05e <__multadd+0x12>
 801b084:	b30e      	cbz	r6, 801b0ca <__multadd+0x7e>
 801b086:	68a3      	ldr	r3, [r4, #8]
 801b088:	42ab      	cmp	r3, r5
 801b08a:	dc19      	bgt.n	801b0c0 <__multadd+0x74>
 801b08c:	6861      	ldr	r1, [r4, #4]
 801b08e:	4638      	mov	r0, r7
 801b090:	3101      	adds	r1, #1
 801b092:	f7ff ff79 	bl	801af88 <_Balloc>
 801b096:	4680      	mov	r8, r0
 801b098:	b928      	cbnz	r0, 801b0a6 <__multadd+0x5a>
 801b09a:	4602      	mov	r2, r0
 801b09c:	4b0c      	ldr	r3, [pc, #48]	; (801b0d0 <__multadd+0x84>)
 801b09e:	480d      	ldr	r0, [pc, #52]	; (801b0d4 <__multadd+0x88>)
 801b0a0:	21ba      	movs	r1, #186	; 0xba
 801b0a2:	f000 fd85 	bl	801bbb0 <__assert_func>
 801b0a6:	6922      	ldr	r2, [r4, #16]
 801b0a8:	3202      	adds	r2, #2
 801b0aa:	f104 010c 	add.w	r1, r4, #12
 801b0ae:	0092      	lsls	r2, r2, #2
 801b0b0:	300c      	adds	r0, #12
 801b0b2:	f7ff f866 	bl	801a182 <memcpy>
 801b0b6:	4621      	mov	r1, r4
 801b0b8:	4638      	mov	r0, r7
 801b0ba:	f7ff ffa5 	bl	801b008 <_Bfree>
 801b0be:	4644      	mov	r4, r8
 801b0c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801b0c4:	3501      	adds	r5, #1
 801b0c6:	615e      	str	r6, [r3, #20]
 801b0c8:	6125      	str	r5, [r4, #16]
 801b0ca:	4620      	mov	r0, r4
 801b0cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b0d0:	0801c2a0 	.word	0x0801c2a0
 801b0d4:	0801c2b1 	.word	0x0801c2b1

0801b0d8 <__hi0bits>:
 801b0d8:	0c03      	lsrs	r3, r0, #16
 801b0da:	041b      	lsls	r3, r3, #16
 801b0dc:	b9d3      	cbnz	r3, 801b114 <__hi0bits+0x3c>
 801b0de:	0400      	lsls	r0, r0, #16
 801b0e0:	2310      	movs	r3, #16
 801b0e2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801b0e6:	bf04      	itt	eq
 801b0e8:	0200      	lsleq	r0, r0, #8
 801b0ea:	3308      	addeq	r3, #8
 801b0ec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801b0f0:	bf04      	itt	eq
 801b0f2:	0100      	lsleq	r0, r0, #4
 801b0f4:	3304      	addeq	r3, #4
 801b0f6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801b0fa:	bf04      	itt	eq
 801b0fc:	0080      	lsleq	r0, r0, #2
 801b0fe:	3302      	addeq	r3, #2
 801b100:	2800      	cmp	r0, #0
 801b102:	db05      	blt.n	801b110 <__hi0bits+0x38>
 801b104:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801b108:	f103 0301 	add.w	r3, r3, #1
 801b10c:	bf08      	it	eq
 801b10e:	2320      	moveq	r3, #32
 801b110:	4618      	mov	r0, r3
 801b112:	4770      	bx	lr
 801b114:	2300      	movs	r3, #0
 801b116:	e7e4      	b.n	801b0e2 <__hi0bits+0xa>

0801b118 <__lo0bits>:
 801b118:	6803      	ldr	r3, [r0, #0]
 801b11a:	f013 0207 	ands.w	r2, r3, #7
 801b11e:	d00c      	beq.n	801b13a <__lo0bits+0x22>
 801b120:	07d9      	lsls	r1, r3, #31
 801b122:	d422      	bmi.n	801b16a <__lo0bits+0x52>
 801b124:	079a      	lsls	r2, r3, #30
 801b126:	bf49      	itett	mi
 801b128:	085b      	lsrmi	r3, r3, #1
 801b12a:	089b      	lsrpl	r3, r3, #2
 801b12c:	6003      	strmi	r3, [r0, #0]
 801b12e:	2201      	movmi	r2, #1
 801b130:	bf5c      	itt	pl
 801b132:	6003      	strpl	r3, [r0, #0]
 801b134:	2202      	movpl	r2, #2
 801b136:	4610      	mov	r0, r2
 801b138:	4770      	bx	lr
 801b13a:	b299      	uxth	r1, r3
 801b13c:	b909      	cbnz	r1, 801b142 <__lo0bits+0x2a>
 801b13e:	0c1b      	lsrs	r3, r3, #16
 801b140:	2210      	movs	r2, #16
 801b142:	b2d9      	uxtb	r1, r3
 801b144:	b909      	cbnz	r1, 801b14a <__lo0bits+0x32>
 801b146:	3208      	adds	r2, #8
 801b148:	0a1b      	lsrs	r3, r3, #8
 801b14a:	0719      	lsls	r1, r3, #28
 801b14c:	bf04      	itt	eq
 801b14e:	091b      	lsreq	r3, r3, #4
 801b150:	3204      	addeq	r2, #4
 801b152:	0799      	lsls	r1, r3, #30
 801b154:	bf04      	itt	eq
 801b156:	089b      	lsreq	r3, r3, #2
 801b158:	3202      	addeq	r2, #2
 801b15a:	07d9      	lsls	r1, r3, #31
 801b15c:	d403      	bmi.n	801b166 <__lo0bits+0x4e>
 801b15e:	085b      	lsrs	r3, r3, #1
 801b160:	f102 0201 	add.w	r2, r2, #1
 801b164:	d003      	beq.n	801b16e <__lo0bits+0x56>
 801b166:	6003      	str	r3, [r0, #0]
 801b168:	e7e5      	b.n	801b136 <__lo0bits+0x1e>
 801b16a:	2200      	movs	r2, #0
 801b16c:	e7e3      	b.n	801b136 <__lo0bits+0x1e>
 801b16e:	2220      	movs	r2, #32
 801b170:	e7e1      	b.n	801b136 <__lo0bits+0x1e>
	...

0801b174 <__i2b>:
 801b174:	b510      	push	{r4, lr}
 801b176:	460c      	mov	r4, r1
 801b178:	2101      	movs	r1, #1
 801b17a:	f7ff ff05 	bl	801af88 <_Balloc>
 801b17e:	4602      	mov	r2, r0
 801b180:	b928      	cbnz	r0, 801b18e <__i2b+0x1a>
 801b182:	4b05      	ldr	r3, [pc, #20]	; (801b198 <__i2b+0x24>)
 801b184:	4805      	ldr	r0, [pc, #20]	; (801b19c <__i2b+0x28>)
 801b186:	f240 1145 	movw	r1, #325	; 0x145
 801b18a:	f000 fd11 	bl	801bbb0 <__assert_func>
 801b18e:	2301      	movs	r3, #1
 801b190:	6144      	str	r4, [r0, #20]
 801b192:	6103      	str	r3, [r0, #16]
 801b194:	bd10      	pop	{r4, pc}
 801b196:	bf00      	nop
 801b198:	0801c2a0 	.word	0x0801c2a0
 801b19c:	0801c2b1 	.word	0x0801c2b1

0801b1a0 <__multiply>:
 801b1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1a4:	4691      	mov	r9, r2
 801b1a6:	690a      	ldr	r2, [r1, #16]
 801b1a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801b1ac:	429a      	cmp	r2, r3
 801b1ae:	bfb8      	it	lt
 801b1b0:	460b      	movlt	r3, r1
 801b1b2:	460c      	mov	r4, r1
 801b1b4:	bfbc      	itt	lt
 801b1b6:	464c      	movlt	r4, r9
 801b1b8:	4699      	movlt	r9, r3
 801b1ba:	6927      	ldr	r7, [r4, #16]
 801b1bc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801b1c0:	68a3      	ldr	r3, [r4, #8]
 801b1c2:	6861      	ldr	r1, [r4, #4]
 801b1c4:	eb07 060a 	add.w	r6, r7, sl
 801b1c8:	42b3      	cmp	r3, r6
 801b1ca:	b085      	sub	sp, #20
 801b1cc:	bfb8      	it	lt
 801b1ce:	3101      	addlt	r1, #1
 801b1d0:	f7ff feda 	bl	801af88 <_Balloc>
 801b1d4:	b930      	cbnz	r0, 801b1e4 <__multiply+0x44>
 801b1d6:	4602      	mov	r2, r0
 801b1d8:	4b44      	ldr	r3, [pc, #272]	; (801b2ec <__multiply+0x14c>)
 801b1da:	4845      	ldr	r0, [pc, #276]	; (801b2f0 <__multiply+0x150>)
 801b1dc:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801b1e0:	f000 fce6 	bl	801bbb0 <__assert_func>
 801b1e4:	f100 0514 	add.w	r5, r0, #20
 801b1e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801b1ec:	462b      	mov	r3, r5
 801b1ee:	2200      	movs	r2, #0
 801b1f0:	4543      	cmp	r3, r8
 801b1f2:	d321      	bcc.n	801b238 <__multiply+0x98>
 801b1f4:	f104 0314 	add.w	r3, r4, #20
 801b1f8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801b1fc:	f109 0314 	add.w	r3, r9, #20
 801b200:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801b204:	9202      	str	r2, [sp, #8]
 801b206:	1b3a      	subs	r2, r7, r4
 801b208:	3a15      	subs	r2, #21
 801b20a:	f022 0203 	bic.w	r2, r2, #3
 801b20e:	3204      	adds	r2, #4
 801b210:	f104 0115 	add.w	r1, r4, #21
 801b214:	428f      	cmp	r7, r1
 801b216:	bf38      	it	cc
 801b218:	2204      	movcc	r2, #4
 801b21a:	9201      	str	r2, [sp, #4]
 801b21c:	9a02      	ldr	r2, [sp, #8]
 801b21e:	9303      	str	r3, [sp, #12]
 801b220:	429a      	cmp	r2, r3
 801b222:	d80c      	bhi.n	801b23e <__multiply+0x9e>
 801b224:	2e00      	cmp	r6, #0
 801b226:	dd03      	ble.n	801b230 <__multiply+0x90>
 801b228:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801b22c:	2b00      	cmp	r3, #0
 801b22e:	d05b      	beq.n	801b2e8 <__multiply+0x148>
 801b230:	6106      	str	r6, [r0, #16]
 801b232:	b005      	add	sp, #20
 801b234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b238:	f843 2b04 	str.w	r2, [r3], #4
 801b23c:	e7d8      	b.n	801b1f0 <__multiply+0x50>
 801b23e:	f8b3 a000 	ldrh.w	sl, [r3]
 801b242:	f1ba 0f00 	cmp.w	sl, #0
 801b246:	d024      	beq.n	801b292 <__multiply+0xf2>
 801b248:	f104 0e14 	add.w	lr, r4, #20
 801b24c:	46a9      	mov	r9, r5
 801b24e:	f04f 0c00 	mov.w	ip, #0
 801b252:	f85e 2b04 	ldr.w	r2, [lr], #4
 801b256:	f8d9 1000 	ldr.w	r1, [r9]
 801b25a:	fa1f fb82 	uxth.w	fp, r2
 801b25e:	b289      	uxth	r1, r1
 801b260:	fb0a 110b 	mla	r1, sl, fp, r1
 801b264:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801b268:	f8d9 2000 	ldr.w	r2, [r9]
 801b26c:	4461      	add	r1, ip
 801b26e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801b272:	fb0a c20b 	mla	r2, sl, fp, ip
 801b276:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801b27a:	b289      	uxth	r1, r1
 801b27c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801b280:	4577      	cmp	r7, lr
 801b282:	f849 1b04 	str.w	r1, [r9], #4
 801b286:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801b28a:	d8e2      	bhi.n	801b252 <__multiply+0xb2>
 801b28c:	9a01      	ldr	r2, [sp, #4]
 801b28e:	f845 c002 	str.w	ip, [r5, r2]
 801b292:	9a03      	ldr	r2, [sp, #12]
 801b294:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801b298:	3304      	adds	r3, #4
 801b29a:	f1b9 0f00 	cmp.w	r9, #0
 801b29e:	d021      	beq.n	801b2e4 <__multiply+0x144>
 801b2a0:	6829      	ldr	r1, [r5, #0]
 801b2a2:	f104 0c14 	add.w	ip, r4, #20
 801b2a6:	46ae      	mov	lr, r5
 801b2a8:	f04f 0a00 	mov.w	sl, #0
 801b2ac:	f8bc b000 	ldrh.w	fp, [ip]
 801b2b0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801b2b4:	fb09 220b 	mla	r2, r9, fp, r2
 801b2b8:	4452      	add	r2, sl
 801b2ba:	b289      	uxth	r1, r1
 801b2bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801b2c0:	f84e 1b04 	str.w	r1, [lr], #4
 801b2c4:	f85c 1b04 	ldr.w	r1, [ip], #4
 801b2c8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801b2cc:	f8be 1000 	ldrh.w	r1, [lr]
 801b2d0:	fb09 110a 	mla	r1, r9, sl, r1
 801b2d4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801b2d8:	4567      	cmp	r7, ip
 801b2da:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801b2de:	d8e5      	bhi.n	801b2ac <__multiply+0x10c>
 801b2e0:	9a01      	ldr	r2, [sp, #4]
 801b2e2:	50a9      	str	r1, [r5, r2]
 801b2e4:	3504      	adds	r5, #4
 801b2e6:	e799      	b.n	801b21c <__multiply+0x7c>
 801b2e8:	3e01      	subs	r6, #1
 801b2ea:	e79b      	b.n	801b224 <__multiply+0x84>
 801b2ec:	0801c2a0 	.word	0x0801c2a0
 801b2f0:	0801c2b1 	.word	0x0801c2b1

0801b2f4 <__pow5mult>:
 801b2f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b2f8:	4615      	mov	r5, r2
 801b2fa:	f012 0203 	ands.w	r2, r2, #3
 801b2fe:	4606      	mov	r6, r0
 801b300:	460f      	mov	r7, r1
 801b302:	d007      	beq.n	801b314 <__pow5mult+0x20>
 801b304:	4c25      	ldr	r4, [pc, #148]	; (801b39c <__pow5mult+0xa8>)
 801b306:	3a01      	subs	r2, #1
 801b308:	2300      	movs	r3, #0
 801b30a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801b30e:	f7ff fe9d 	bl	801b04c <__multadd>
 801b312:	4607      	mov	r7, r0
 801b314:	10ad      	asrs	r5, r5, #2
 801b316:	d03d      	beq.n	801b394 <__pow5mult+0xa0>
 801b318:	69f4      	ldr	r4, [r6, #28]
 801b31a:	b97c      	cbnz	r4, 801b33c <__pow5mult+0x48>
 801b31c:	2010      	movs	r0, #16
 801b31e:	f7ff fd7f 	bl	801ae20 <malloc>
 801b322:	4602      	mov	r2, r0
 801b324:	61f0      	str	r0, [r6, #28]
 801b326:	b928      	cbnz	r0, 801b334 <__pow5mult+0x40>
 801b328:	4b1d      	ldr	r3, [pc, #116]	; (801b3a0 <__pow5mult+0xac>)
 801b32a:	481e      	ldr	r0, [pc, #120]	; (801b3a4 <__pow5mult+0xb0>)
 801b32c:	f240 11b3 	movw	r1, #435	; 0x1b3
 801b330:	f000 fc3e 	bl	801bbb0 <__assert_func>
 801b334:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801b338:	6004      	str	r4, [r0, #0]
 801b33a:	60c4      	str	r4, [r0, #12]
 801b33c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801b340:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801b344:	b94c      	cbnz	r4, 801b35a <__pow5mult+0x66>
 801b346:	f240 2171 	movw	r1, #625	; 0x271
 801b34a:	4630      	mov	r0, r6
 801b34c:	f7ff ff12 	bl	801b174 <__i2b>
 801b350:	2300      	movs	r3, #0
 801b352:	f8c8 0008 	str.w	r0, [r8, #8]
 801b356:	4604      	mov	r4, r0
 801b358:	6003      	str	r3, [r0, #0]
 801b35a:	f04f 0900 	mov.w	r9, #0
 801b35e:	07eb      	lsls	r3, r5, #31
 801b360:	d50a      	bpl.n	801b378 <__pow5mult+0x84>
 801b362:	4639      	mov	r1, r7
 801b364:	4622      	mov	r2, r4
 801b366:	4630      	mov	r0, r6
 801b368:	f7ff ff1a 	bl	801b1a0 <__multiply>
 801b36c:	4639      	mov	r1, r7
 801b36e:	4680      	mov	r8, r0
 801b370:	4630      	mov	r0, r6
 801b372:	f7ff fe49 	bl	801b008 <_Bfree>
 801b376:	4647      	mov	r7, r8
 801b378:	106d      	asrs	r5, r5, #1
 801b37a:	d00b      	beq.n	801b394 <__pow5mult+0xa0>
 801b37c:	6820      	ldr	r0, [r4, #0]
 801b37e:	b938      	cbnz	r0, 801b390 <__pow5mult+0x9c>
 801b380:	4622      	mov	r2, r4
 801b382:	4621      	mov	r1, r4
 801b384:	4630      	mov	r0, r6
 801b386:	f7ff ff0b 	bl	801b1a0 <__multiply>
 801b38a:	6020      	str	r0, [r4, #0]
 801b38c:	f8c0 9000 	str.w	r9, [r0]
 801b390:	4604      	mov	r4, r0
 801b392:	e7e4      	b.n	801b35e <__pow5mult+0x6a>
 801b394:	4638      	mov	r0, r7
 801b396:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b39a:	bf00      	nop
 801b39c:	0801c400 	.word	0x0801c400
 801b3a0:	0801c231 	.word	0x0801c231
 801b3a4:	0801c2b1 	.word	0x0801c2b1

0801b3a8 <__lshift>:
 801b3a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b3ac:	460c      	mov	r4, r1
 801b3ae:	6849      	ldr	r1, [r1, #4]
 801b3b0:	6923      	ldr	r3, [r4, #16]
 801b3b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801b3b6:	68a3      	ldr	r3, [r4, #8]
 801b3b8:	4607      	mov	r7, r0
 801b3ba:	4691      	mov	r9, r2
 801b3bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801b3c0:	f108 0601 	add.w	r6, r8, #1
 801b3c4:	42b3      	cmp	r3, r6
 801b3c6:	db0b      	blt.n	801b3e0 <__lshift+0x38>
 801b3c8:	4638      	mov	r0, r7
 801b3ca:	f7ff fddd 	bl	801af88 <_Balloc>
 801b3ce:	4605      	mov	r5, r0
 801b3d0:	b948      	cbnz	r0, 801b3e6 <__lshift+0x3e>
 801b3d2:	4602      	mov	r2, r0
 801b3d4:	4b28      	ldr	r3, [pc, #160]	; (801b478 <__lshift+0xd0>)
 801b3d6:	4829      	ldr	r0, [pc, #164]	; (801b47c <__lshift+0xd4>)
 801b3d8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801b3dc:	f000 fbe8 	bl	801bbb0 <__assert_func>
 801b3e0:	3101      	adds	r1, #1
 801b3e2:	005b      	lsls	r3, r3, #1
 801b3e4:	e7ee      	b.n	801b3c4 <__lshift+0x1c>
 801b3e6:	2300      	movs	r3, #0
 801b3e8:	f100 0114 	add.w	r1, r0, #20
 801b3ec:	f100 0210 	add.w	r2, r0, #16
 801b3f0:	4618      	mov	r0, r3
 801b3f2:	4553      	cmp	r3, sl
 801b3f4:	db33      	blt.n	801b45e <__lshift+0xb6>
 801b3f6:	6920      	ldr	r0, [r4, #16]
 801b3f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801b3fc:	f104 0314 	add.w	r3, r4, #20
 801b400:	f019 091f 	ands.w	r9, r9, #31
 801b404:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801b408:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801b40c:	d02b      	beq.n	801b466 <__lshift+0xbe>
 801b40e:	f1c9 0e20 	rsb	lr, r9, #32
 801b412:	468a      	mov	sl, r1
 801b414:	2200      	movs	r2, #0
 801b416:	6818      	ldr	r0, [r3, #0]
 801b418:	fa00 f009 	lsl.w	r0, r0, r9
 801b41c:	4310      	orrs	r0, r2
 801b41e:	f84a 0b04 	str.w	r0, [sl], #4
 801b422:	f853 2b04 	ldr.w	r2, [r3], #4
 801b426:	459c      	cmp	ip, r3
 801b428:	fa22 f20e 	lsr.w	r2, r2, lr
 801b42c:	d8f3      	bhi.n	801b416 <__lshift+0x6e>
 801b42e:	ebac 0304 	sub.w	r3, ip, r4
 801b432:	3b15      	subs	r3, #21
 801b434:	f023 0303 	bic.w	r3, r3, #3
 801b438:	3304      	adds	r3, #4
 801b43a:	f104 0015 	add.w	r0, r4, #21
 801b43e:	4584      	cmp	ip, r0
 801b440:	bf38      	it	cc
 801b442:	2304      	movcc	r3, #4
 801b444:	50ca      	str	r2, [r1, r3]
 801b446:	b10a      	cbz	r2, 801b44c <__lshift+0xa4>
 801b448:	f108 0602 	add.w	r6, r8, #2
 801b44c:	3e01      	subs	r6, #1
 801b44e:	4638      	mov	r0, r7
 801b450:	612e      	str	r6, [r5, #16]
 801b452:	4621      	mov	r1, r4
 801b454:	f7ff fdd8 	bl	801b008 <_Bfree>
 801b458:	4628      	mov	r0, r5
 801b45a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b45e:	f842 0f04 	str.w	r0, [r2, #4]!
 801b462:	3301      	adds	r3, #1
 801b464:	e7c5      	b.n	801b3f2 <__lshift+0x4a>
 801b466:	3904      	subs	r1, #4
 801b468:	f853 2b04 	ldr.w	r2, [r3], #4
 801b46c:	f841 2f04 	str.w	r2, [r1, #4]!
 801b470:	459c      	cmp	ip, r3
 801b472:	d8f9      	bhi.n	801b468 <__lshift+0xc0>
 801b474:	e7ea      	b.n	801b44c <__lshift+0xa4>
 801b476:	bf00      	nop
 801b478:	0801c2a0 	.word	0x0801c2a0
 801b47c:	0801c2b1 	.word	0x0801c2b1

0801b480 <__mcmp>:
 801b480:	b530      	push	{r4, r5, lr}
 801b482:	6902      	ldr	r2, [r0, #16]
 801b484:	690c      	ldr	r4, [r1, #16]
 801b486:	1b12      	subs	r2, r2, r4
 801b488:	d10e      	bne.n	801b4a8 <__mcmp+0x28>
 801b48a:	f100 0314 	add.w	r3, r0, #20
 801b48e:	3114      	adds	r1, #20
 801b490:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801b494:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801b498:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801b49c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801b4a0:	42a5      	cmp	r5, r4
 801b4a2:	d003      	beq.n	801b4ac <__mcmp+0x2c>
 801b4a4:	d305      	bcc.n	801b4b2 <__mcmp+0x32>
 801b4a6:	2201      	movs	r2, #1
 801b4a8:	4610      	mov	r0, r2
 801b4aa:	bd30      	pop	{r4, r5, pc}
 801b4ac:	4283      	cmp	r3, r0
 801b4ae:	d3f3      	bcc.n	801b498 <__mcmp+0x18>
 801b4b0:	e7fa      	b.n	801b4a8 <__mcmp+0x28>
 801b4b2:	f04f 32ff 	mov.w	r2, #4294967295
 801b4b6:	e7f7      	b.n	801b4a8 <__mcmp+0x28>

0801b4b8 <__mdiff>:
 801b4b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4bc:	460c      	mov	r4, r1
 801b4be:	4606      	mov	r6, r0
 801b4c0:	4611      	mov	r1, r2
 801b4c2:	4620      	mov	r0, r4
 801b4c4:	4690      	mov	r8, r2
 801b4c6:	f7ff ffdb 	bl	801b480 <__mcmp>
 801b4ca:	1e05      	subs	r5, r0, #0
 801b4cc:	d110      	bne.n	801b4f0 <__mdiff+0x38>
 801b4ce:	4629      	mov	r1, r5
 801b4d0:	4630      	mov	r0, r6
 801b4d2:	f7ff fd59 	bl	801af88 <_Balloc>
 801b4d6:	b930      	cbnz	r0, 801b4e6 <__mdiff+0x2e>
 801b4d8:	4b3a      	ldr	r3, [pc, #232]	; (801b5c4 <__mdiff+0x10c>)
 801b4da:	4602      	mov	r2, r0
 801b4dc:	f240 2137 	movw	r1, #567	; 0x237
 801b4e0:	4839      	ldr	r0, [pc, #228]	; (801b5c8 <__mdiff+0x110>)
 801b4e2:	f000 fb65 	bl	801bbb0 <__assert_func>
 801b4e6:	2301      	movs	r3, #1
 801b4e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801b4ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b4f0:	bfa4      	itt	ge
 801b4f2:	4643      	movge	r3, r8
 801b4f4:	46a0      	movge	r8, r4
 801b4f6:	4630      	mov	r0, r6
 801b4f8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801b4fc:	bfa6      	itte	ge
 801b4fe:	461c      	movge	r4, r3
 801b500:	2500      	movge	r5, #0
 801b502:	2501      	movlt	r5, #1
 801b504:	f7ff fd40 	bl	801af88 <_Balloc>
 801b508:	b920      	cbnz	r0, 801b514 <__mdiff+0x5c>
 801b50a:	4b2e      	ldr	r3, [pc, #184]	; (801b5c4 <__mdiff+0x10c>)
 801b50c:	4602      	mov	r2, r0
 801b50e:	f240 2145 	movw	r1, #581	; 0x245
 801b512:	e7e5      	b.n	801b4e0 <__mdiff+0x28>
 801b514:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801b518:	6926      	ldr	r6, [r4, #16]
 801b51a:	60c5      	str	r5, [r0, #12]
 801b51c:	f104 0914 	add.w	r9, r4, #20
 801b520:	f108 0514 	add.w	r5, r8, #20
 801b524:	f100 0e14 	add.w	lr, r0, #20
 801b528:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801b52c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801b530:	f108 0210 	add.w	r2, r8, #16
 801b534:	46f2      	mov	sl, lr
 801b536:	2100      	movs	r1, #0
 801b538:	f859 3b04 	ldr.w	r3, [r9], #4
 801b53c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801b540:	fa11 f88b 	uxtah	r8, r1, fp
 801b544:	b299      	uxth	r1, r3
 801b546:	0c1b      	lsrs	r3, r3, #16
 801b548:	eba8 0801 	sub.w	r8, r8, r1
 801b54c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801b550:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801b554:	fa1f f888 	uxth.w	r8, r8
 801b558:	1419      	asrs	r1, r3, #16
 801b55a:	454e      	cmp	r6, r9
 801b55c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801b560:	f84a 3b04 	str.w	r3, [sl], #4
 801b564:	d8e8      	bhi.n	801b538 <__mdiff+0x80>
 801b566:	1b33      	subs	r3, r6, r4
 801b568:	3b15      	subs	r3, #21
 801b56a:	f023 0303 	bic.w	r3, r3, #3
 801b56e:	3304      	adds	r3, #4
 801b570:	3415      	adds	r4, #21
 801b572:	42a6      	cmp	r6, r4
 801b574:	bf38      	it	cc
 801b576:	2304      	movcc	r3, #4
 801b578:	441d      	add	r5, r3
 801b57a:	4473      	add	r3, lr
 801b57c:	469e      	mov	lr, r3
 801b57e:	462e      	mov	r6, r5
 801b580:	4566      	cmp	r6, ip
 801b582:	d30e      	bcc.n	801b5a2 <__mdiff+0xea>
 801b584:	f10c 0203 	add.w	r2, ip, #3
 801b588:	1b52      	subs	r2, r2, r5
 801b58a:	f022 0203 	bic.w	r2, r2, #3
 801b58e:	3d03      	subs	r5, #3
 801b590:	45ac      	cmp	ip, r5
 801b592:	bf38      	it	cc
 801b594:	2200      	movcc	r2, #0
 801b596:	4413      	add	r3, r2
 801b598:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801b59c:	b17a      	cbz	r2, 801b5be <__mdiff+0x106>
 801b59e:	6107      	str	r7, [r0, #16]
 801b5a0:	e7a4      	b.n	801b4ec <__mdiff+0x34>
 801b5a2:	f856 8b04 	ldr.w	r8, [r6], #4
 801b5a6:	fa11 f288 	uxtah	r2, r1, r8
 801b5aa:	1414      	asrs	r4, r2, #16
 801b5ac:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801b5b0:	b292      	uxth	r2, r2
 801b5b2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801b5b6:	f84e 2b04 	str.w	r2, [lr], #4
 801b5ba:	1421      	asrs	r1, r4, #16
 801b5bc:	e7e0      	b.n	801b580 <__mdiff+0xc8>
 801b5be:	3f01      	subs	r7, #1
 801b5c0:	e7ea      	b.n	801b598 <__mdiff+0xe0>
 801b5c2:	bf00      	nop
 801b5c4:	0801c2a0 	.word	0x0801c2a0
 801b5c8:	0801c2b1 	.word	0x0801c2b1

0801b5cc <__d2b>:
 801b5cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801b5d0:	460f      	mov	r7, r1
 801b5d2:	2101      	movs	r1, #1
 801b5d4:	ec59 8b10 	vmov	r8, r9, d0
 801b5d8:	4616      	mov	r6, r2
 801b5da:	f7ff fcd5 	bl	801af88 <_Balloc>
 801b5de:	4604      	mov	r4, r0
 801b5e0:	b930      	cbnz	r0, 801b5f0 <__d2b+0x24>
 801b5e2:	4602      	mov	r2, r0
 801b5e4:	4b24      	ldr	r3, [pc, #144]	; (801b678 <__d2b+0xac>)
 801b5e6:	4825      	ldr	r0, [pc, #148]	; (801b67c <__d2b+0xb0>)
 801b5e8:	f240 310f 	movw	r1, #783	; 0x30f
 801b5ec:	f000 fae0 	bl	801bbb0 <__assert_func>
 801b5f0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801b5f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801b5f8:	bb2d      	cbnz	r5, 801b646 <__d2b+0x7a>
 801b5fa:	9301      	str	r3, [sp, #4]
 801b5fc:	f1b8 0300 	subs.w	r3, r8, #0
 801b600:	d026      	beq.n	801b650 <__d2b+0x84>
 801b602:	4668      	mov	r0, sp
 801b604:	9300      	str	r3, [sp, #0]
 801b606:	f7ff fd87 	bl	801b118 <__lo0bits>
 801b60a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801b60e:	b1e8      	cbz	r0, 801b64c <__d2b+0x80>
 801b610:	f1c0 0320 	rsb	r3, r0, #32
 801b614:	fa02 f303 	lsl.w	r3, r2, r3
 801b618:	430b      	orrs	r3, r1
 801b61a:	40c2      	lsrs	r2, r0
 801b61c:	6163      	str	r3, [r4, #20]
 801b61e:	9201      	str	r2, [sp, #4]
 801b620:	9b01      	ldr	r3, [sp, #4]
 801b622:	61a3      	str	r3, [r4, #24]
 801b624:	2b00      	cmp	r3, #0
 801b626:	bf14      	ite	ne
 801b628:	2202      	movne	r2, #2
 801b62a:	2201      	moveq	r2, #1
 801b62c:	6122      	str	r2, [r4, #16]
 801b62e:	b1bd      	cbz	r5, 801b660 <__d2b+0x94>
 801b630:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801b634:	4405      	add	r5, r0
 801b636:	603d      	str	r5, [r7, #0]
 801b638:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801b63c:	6030      	str	r0, [r6, #0]
 801b63e:	4620      	mov	r0, r4
 801b640:	b003      	add	sp, #12
 801b642:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b646:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801b64a:	e7d6      	b.n	801b5fa <__d2b+0x2e>
 801b64c:	6161      	str	r1, [r4, #20]
 801b64e:	e7e7      	b.n	801b620 <__d2b+0x54>
 801b650:	a801      	add	r0, sp, #4
 801b652:	f7ff fd61 	bl	801b118 <__lo0bits>
 801b656:	9b01      	ldr	r3, [sp, #4]
 801b658:	6163      	str	r3, [r4, #20]
 801b65a:	3020      	adds	r0, #32
 801b65c:	2201      	movs	r2, #1
 801b65e:	e7e5      	b.n	801b62c <__d2b+0x60>
 801b660:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801b664:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801b668:	6038      	str	r0, [r7, #0]
 801b66a:	6918      	ldr	r0, [r3, #16]
 801b66c:	f7ff fd34 	bl	801b0d8 <__hi0bits>
 801b670:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801b674:	e7e2      	b.n	801b63c <__d2b+0x70>
 801b676:	bf00      	nop
 801b678:	0801c2a0 	.word	0x0801c2a0
 801b67c:	0801c2b1 	.word	0x0801c2b1

0801b680 <__sfputc_r>:
 801b680:	6893      	ldr	r3, [r2, #8]
 801b682:	3b01      	subs	r3, #1
 801b684:	2b00      	cmp	r3, #0
 801b686:	b410      	push	{r4}
 801b688:	6093      	str	r3, [r2, #8]
 801b68a:	da08      	bge.n	801b69e <__sfputc_r+0x1e>
 801b68c:	6994      	ldr	r4, [r2, #24]
 801b68e:	42a3      	cmp	r3, r4
 801b690:	db01      	blt.n	801b696 <__sfputc_r+0x16>
 801b692:	290a      	cmp	r1, #10
 801b694:	d103      	bne.n	801b69e <__sfputc_r+0x1e>
 801b696:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b69a:	f000 b9e3 	b.w	801ba64 <__swbuf_r>
 801b69e:	6813      	ldr	r3, [r2, #0]
 801b6a0:	1c58      	adds	r0, r3, #1
 801b6a2:	6010      	str	r0, [r2, #0]
 801b6a4:	7019      	strb	r1, [r3, #0]
 801b6a6:	4608      	mov	r0, r1
 801b6a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b6ac:	4770      	bx	lr

0801b6ae <__sfputs_r>:
 801b6ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b6b0:	4606      	mov	r6, r0
 801b6b2:	460f      	mov	r7, r1
 801b6b4:	4614      	mov	r4, r2
 801b6b6:	18d5      	adds	r5, r2, r3
 801b6b8:	42ac      	cmp	r4, r5
 801b6ba:	d101      	bne.n	801b6c0 <__sfputs_r+0x12>
 801b6bc:	2000      	movs	r0, #0
 801b6be:	e007      	b.n	801b6d0 <__sfputs_r+0x22>
 801b6c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b6c4:	463a      	mov	r2, r7
 801b6c6:	4630      	mov	r0, r6
 801b6c8:	f7ff ffda 	bl	801b680 <__sfputc_r>
 801b6cc:	1c43      	adds	r3, r0, #1
 801b6ce:	d1f3      	bne.n	801b6b8 <__sfputs_r+0xa>
 801b6d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b6d4 <_vfiprintf_r>:
 801b6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6d8:	460d      	mov	r5, r1
 801b6da:	b09d      	sub	sp, #116	; 0x74
 801b6dc:	4614      	mov	r4, r2
 801b6de:	4698      	mov	r8, r3
 801b6e0:	4606      	mov	r6, r0
 801b6e2:	b118      	cbz	r0, 801b6ec <_vfiprintf_r+0x18>
 801b6e4:	6a03      	ldr	r3, [r0, #32]
 801b6e6:	b90b      	cbnz	r3, 801b6ec <_vfiprintf_r+0x18>
 801b6e8:	f7fe fc40 	bl	8019f6c <__sinit>
 801b6ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b6ee:	07d9      	lsls	r1, r3, #31
 801b6f0:	d405      	bmi.n	801b6fe <_vfiprintf_r+0x2a>
 801b6f2:	89ab      	ldrh	r3, [r5, #12]
 801b6f4:	059a      	lsls	r2, r3, #22
 801b6f6:	d402      	bmi.n	801b6fe <_vfiprintf_r+0x2a>
 801b6f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b6fa:	f7fe fd40 	bl	801a17e <__retarget_lock_acquire_recursive>
 801b6fe:	89ab      	ldrh	r3, [r5, #12]
 801b700:	071b      	lsls	r3, r3, #28
 801b702:	d501      	bpl.n	801b708 <_vfiprintf_r+0x34>
 801b704:	692b      	ldr	r3, [r5, #16]
 801b706:	b99b      	cbnz	r3, 801b730 <_vfiprintf_r+0x5c>
 801b708:	4629      	mov	r1, r5
 801b70a:	4630      	mov	r0, r6
 801b70c:	f000 f9e8 	bl	801bae0 <__swsetup_r>
 801b710:	b170      	cbz	r0, 801b730 <_vfiprintf_r+0x5c>
 801b712:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b714:	07dc      	lsls	r4, r3, #31
 801b716:	d504      	bpl.n	801b722 <_vfiprintf_r+0x4e>
 801b718:	f04f 30ff 	mov.w	r0, #4294967295
 801b71c:	b01d      	add	sp, #116	; 0x74
 801b71e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b722:	89ab      	ldrh	r3, [r5, #12]
 801b724:	0598      	lsls	r0, r3, #22
 801b726:	d4f7      	bmi.n	801b718 <_vfiprintf_r+0x44>
 801b728:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b72a:	f7fe fd29 	bl	801a180 <__retarget_lock_release_recursive>
 801b72e:	e7f3      	b.n	801b718 <_vfiprintf_r+0x44>
 801b730:	2300      	movs	r3, #0
 801b732:	9309      	str	r3, [sp, #36]	; 0x24
 801b734:	2320      	movs	r3, #32
 801b736:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b73a:	f8cd 800c 	str.w	r8, [sp, #12]
 801b73e:	2330      	movs	r3, #48	; 0x30
 801b740:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801b8f4 <_vfiprintf_r+0x220>
 801b744:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b748:	f04f 0901 	mov.w	r9, #1
 801b74c:	4623      	mov	r3, r4
 801b74e:	469a      	mov	sl, r3
 801b750:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b754:	b10a      	cbz	r2, 801b75a <_vfiprintf_r+0x86>
 801b756:	2a25      	cmp	r2, #37	; 0x25
 801b758:	d1f9      	bne.n	801b74e <_vfiprintf_r+0x7a>
 801b75a:	ebba 0b04 	subs.w	fp, sl, r4
 801b75e:	d00b      	beq.n	801b778 <_vfiprintf_r+0xa4>
 801b760:	465b      	mov	r3, fp
 801b762:	4622      	mov	r2, r4
 801b764:	4629      	mov	r1, r5
 801b766:	4630      	mov	r0, r6
 801b768:	f7ff ffa1 	bl	801b6ae <__sfputs_r>
 801b76c:	3001      	adds	r0, #1
 801b76e:	f000 80a9 	beq.w	801b8c4 <_vfiprintf_r+0x1f0>
 801b772:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b774:	445a      	add	r2, fp
 801b776:	9209      	str	r2, [sp, #36]	; 0x24
 801b778:	f89a 3000 	ldrb.w	r3, [sl]
 801b77c:	2b00      	cmp	r3, #0
 801b77e:	f000 80a1 	beq.w	801b8c4 <_vfiprintf_r+0x1f0>
 801b782:	2300      	movs	r3, #0
 801b784:	f04f 32ff 	mov.w	r2, #4294967295
 801b788:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b78c:	f10a 0a01 	add.w	sl, sl, #1
 801b790:	9304      	str	r3, [sp, #16]
 801b792:	9307      	str	r3, [sp, #28]
 801b794:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b798:	931a      	str	r3, [sp, #104]	; 0x68
 801b79a:	4654      	mov	r4, sl
 801b79c:	2205      	movs	r2, #5
 801b79e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b7a2:	4854      	ldr	r0, [pc, #336]	; (801b8f4 <_vfiprintf_r+0x220>)
 801b7a4:	f7e4 fd9c 	bl	80002e0 <memchr>
 801b7a8:	9a04      	ldr	r2, [sp, #16]
 801b7aa:	b9d8      	cbnz	r0, 801b7e4 <_vfiprintf_r+0x110>
 801b7ac:	06d1      	lsls	r1, r2, #27
 801b7ae:	bf44      	itt	mi
 801b7b0:	2320      	movmi	r3, #32
 801b7b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b7b6:	0713      	lsls	r3, r2, #28
 801b7b8:	bf44      	itt	mi
 801b7ba:	232b      	movmi	r3, #43	; 0x2b
 801b7bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b7c0:	f89a 3000 	ldrb.w	r3, [sl]
 801b7c4:	2b2a      	cmp	r3, #42	; 0x2a
 801b7c6:	d015      	beq.n	801b7f4 <_vfiprintf_r+0x120>
 801b7c8:	9a07      	ldr	r2, [sp, #28]
 801b7ca:	4654      	mov	r4, sl
 801b7cc:	2000      	movs	r0, #0
 801b7ce:	f04f 0c0a 	mov.w	ip, #10
 801b7d2:	4621      	mov	r1, r4
 801b7d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b7d8:	3b30      	subs	r3, #48	; 0x30
 801b7da:	2b09      	cmp	r3, #9
 801b7dc:	d94d      	bls.n	801b87a <_vfiprintf_r+0x1a6>
 801b7de:	b1b0      	cbz	r0, 801b80e <_vfiprintf_r+0x13a>
 801b7e0:	9207      	str	r2, [sp, #28]
 801b7e2:	e014      	b.n	801b80e <_vfiprintf_r+0x13a>
 801b7e4:	eba0 0308 	sub.w	r3, r0, r8
 801b7e8:	fa09 f303 	lsl.w	r3, r9, r3
 801b7ec:	4313      	orrs	r3, r2
 801b7ee:	9304      	str	r3, [sp, #16]
 801b7f0:	46a2      	mov	sl, r4
 801b7f2:	e7d2      	b.n	801b79a <_vfiprintf_r+0xc6>
 801b7f4:	9b03      	ldr	r3, [sp, #12]
 801b7f6:	1d19      	adds	r1, r3, #4
 801b7f8:	681b      	ldr	r3, [r3, #0]
 801b7fa:	9103      	str	r1, [sp, #12]
 801b7fc:	2b00      	cmp	r3, #0
 801b7fe:	bfbb      	ittet	lt
 801b800:	425b      	neglt	r3, r3
 801b802:	f042 0202 	orrlt.w	r2, r2, #2
 801b806:	9307      	strge	r3, [sp, #28]
 801b808:	9307      	strlt	r3, [sp, #28]
 801b80a:	bfb8      	it	lt
 801b80c:	9204      	strlt	r2, [sp, #16]
 801b80e:	7823      	ldrb	r3, [r4, #0]
 801b810:	2b2e      	cmp	r3, #46	; 0x2e
 801b812:	d10c      	bne.n	801b82e <_vfiprintf_r+0x15a>
 801b814:	7863      	ldrb	r3, [r4, #1]
 801b816:	2b2a      	cmp	r3, #42	; 0x2a
 801b818:	d134      	bne.n	801b884 <_vfiprintf_r+0x1b0>
 801b81a:	9b03      	ldr	r3, [sp, #12]
 801b81c:	1d1a      	adds	r2, r3, #4
 801b81e:	681b      	ldr	r3, [r3, #0]
 801b820:	9203      	str	r2, [sp, #12]
 801b822:	2b00      	cmp	r3, #0
 801b824:	bfb8      	it	lt
 801b826:	f04f 33ff 	movlt.w	r3, #4294967295
 801b82a:	3402      	adds	r4, #2
 801b82c:	9305      	str	r3, [sp, #20]
 801b82e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801b904 <_vfiprintf_r+0x230>
 801b832:	7821      	ldrb	r1, [r4, #0]
 801b834:	2203      	movs	r2, #3
 801b836:	4650      	mov	r0, sl
 801b838:	f7e4 fd52 	bl	80002e0 <memchr>
 801b83c:	b138      	cbz	r0, 801b84e <_vfiprintf_r+0x17a>
 801b83e:	9b04      	ldr	r3, [sp, #16]
 801b840:	eba0 000a 	sub.w	r0, r0, sl
 801b844:	2240      	movs	r2, #64	; 0x40
 801b846:	4082      	lsls	r2, r0
 801b848:	4313      	orrs	r3, r2
 801b84a:	3401      	adds	r4, #1
 801b84c:	9304      	str	r3, [sp, #16]
 801b84e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b852:	4829      	ldr	r0, [pc, #164]	; (801b8f8 <_vfiprintf_r+0x224>)
 801b854:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b858:	2206      	movs	r2, #6
 801b85a:	f7e4 fd41 	bl	80002e0 <memchr>
 801b85e:	2800      	cmp	r0, #0
 801b860:	d03f      	beq.n	801b8e2 <_vfiprintf_r+0x20e>
 801b862:	4b26      	ldr	r3, [pc, #152]	; (801b8fc <_vfiprintf_r+0x228>)
 801b864:	bb1b      	cbnz	r3, 801b8ae <_vfiprintf_r+0x1da>
 801b866:	9b03      	ldr	r3, [sp, #12]
 801b868:	3307      	adds	r3, #7
 801b86a:	f023 0307 	bic.w	r3, r3, #7
 801b86e:	3308      	adds	r3, #8
 801b870:	9303      	str	r3, [sp, #12]
 801b872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b874:	443b      	add	r3, r7
 801b876:	9309      	str	r3, [sp, #36]	; 0x24
 801b878:	e768      	b.n	801b74c <_vfiprintf_r+0x78>
 801b87a:	fb0c 3202 	mla	r2, ip, r2, r3
 801b87e:	460c      	mov	r4, r1
 801b880:	2001      	movs	r0, #1
 801b882:	e7a6      	b.n	801b7d2 <_vfiprintf_r+0xfe>
 801b884:	2300      	movs	r3, #0
 801b886:	3401      	adds	r4, #1
 801b888:	9305      	str	r3, [sp, #20]
 801b88a:	4619      	mov	r1, r3
 801b88c:	f04f 0c0a 	mov.w	ip, #10
 801b890:	4620      	mov	r0, r4
 801b892:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b896:	3a30      	subs	r2, #48	; 0x30
 801b898:	2a09      	cmp	r2, #9
 801b89a:	d903      	bls.n	801b8a4 <_vfiprintf_r+0x1d0>
 801b89c:	2b00      	cmp	r3, #0
 801b89e:	d0c6      	beq.n	801b82e <_vfiprintf_r+0x15a>
 801b8a0:	9105      	str	r1, [sp, #20]
 801b8a2:	e7c4      	b.n	801b82e <_vfiprintf_r+0x15a>
 801b8a4:	fb0c 2101 	mla	r1, ip, r1, r2
 801b8a8:	4604      	mov	r4, r0
 801b8aa:	2301      	movs	r3, #1
 801b8ac:	e7f0      	b.n	801b890 <_vfiprintf_r+0x1bc>
 801b8ae:	ab03      	add	r3, sp, #12
 801b8b0:	9300      	str	r3, [sp, #0]
 801b8b2:	462a      	mov	r2, r5
 801b8b4:	4b12      	ldr	r3, [pc, #72]	; (801b900 <_vfiprintf_r+0x22c>)
 801b8b6:	a904      	add	r1, sp, #16
 801b8b8:	4630      	mov	r0, r6
 801b8ba:	f7fd ff21 	bl	8019700 <_printf_float>
 801b8be:	4607      	mov	r7, r0
 801b8c0:	1c78      	adds	r0, r7, #1
 801b8c2:	d1d6      	bne.n	801b872 <_vfiprintf_r+0x19e>
 801b8c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b8c6:	07d9      	lsls	r1, r3, #31
 801b8c8:	d405      	bmi.n	801b8d6 <_vfiprintf_r+0x202>
 801b8ca:	89ab      	ldrh	r3, [r5, #12]
 801b8cc:	059a      	lsls	r2, r3, #22
 801b8ce:	d402      	bmi.n	801b8d6 <_vfiprintf_r+0x202>
 801b8d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b8d2:	f7fe fc55 	bl	801a180 <__retarget_lock_release_recursive>
 801b8d6:	89ab      	ldrh	r3, [r5, #12]
 801b8d8:	065b      	lsls	r3, r3, #25
 801b8da:	f53f af1d 	bmi.w	801b718 <_vfiprintf_r+0x44>
 801b8de:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b8e0:	e71c      	b.n	801b71c <_vfiprintf_r+0x48>
 801b8e2:	ab03      	add	r3, sp, #12
 801b8e4:	9300      	str	r3, [sp, #0]
 801b8e6:	462a      	mov	r2, r5
 801b8e8:	4b05      	ldr	r3, [pc, #20]	; (801b900 <_vfiprintf_r+0x22c>)
 801b8ea:	a904      	add	r1, sp, #16
 801b8ec:	4630      	mov	r0, r6
 801b8ee:	f7fe f98f 	bl	8019c10 <_printf_i>
 801b8f2:	e7e4      	b.n	801b8be <_vfiprintf_r+0x1ea>
 801b8f4:	0801c40c 	.word	0x0801c40c
 801b8f8:	0801c416 	.word	0x0801c416
 801b8fc:	08019701 	.word	0x08019701
 801b900:	0801b6af 	.word	0x0801b6af
 801b904:	0801c412 	.word	0x0801c412

0801b908 <__sflush_r>:
 801b908:	898a      	ldrh	r2, [r1, #12]
 801b90a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b90e:	4605      	mov	r5, r0
 801b910:	0710      	lsls	r0, r2, #28
 801b912:	460c      	mov	r4, r1
 801b914:	d458      	bmi.n	801b9c8 <__sflush_r+0xc0>
 801b916:	684b      	ldr	r3, [r1, #4]
 801b918:	2b00      	cmp	r3, #0
 801b91a:	dc05      	bgt.n	801b928 <__sflush_r+0x20>
 801b91c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b91e:	2b00      	cmp	r3, #0
 801b920:	dc02      	bgt.n	801b928 <__sflush_r+0x20>
 801b922:	2000      	movs	r0, #0
 801b924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b928:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b92a:	2e00      	cmp	r6, #0
 801b92c:	d0f9      	beq.n	801b922 <__sflush_r+0x1a>
 801b92e:	2300      	movs	r3, #0
 801b930:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b934:	682f      	ldr	r7, [r5, #0]
 801b936:	6a21      	ldr	r1, [r4, #32]
 801b938:	602b      	str	r3, [r5, #0]
 801b93a:	d032      	beq.n	801b9a2 <__sflush_r+0x9a>
 801b93c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b93e:	89a3      	ldrh	r3, [r4, #12]
 801b940:	075a      	lsls	r2, r3, #29
 801b942:	d505      	bpl.n	801b950 <__sflush_r+0x48>
 801b944:	6863      	ldr	r3, [r4, #4]
 801b946:	1ac0      	subs	r0, r0, r3
 801b948:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b94a:	b10b      	cbz	r3, 801b950 <__sflush_r+0x48>
 801b94c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b94e:	1ac0      	subs	r0, r0, r3
 801b950:	2300      	movs	r3, #0
 801b952:	4602      	mov	r2, r0
 801b954:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b956:	6a21      	ldr	r1, [r4, #32]
 801b958:	4628      	mov	r0, r5
 801b95a:	47b0      	blx	r6
 801b95c:	1c43      	adds	r3, r0, #1
 801b95e:	89a3      	ldrh	r3, [r4, #12]
 801b960:	d106      	bne.n	801b970 <__sflush_r+0x68>
 801b962:	6829      	ldr	r1, [r5, #0]
 801b964:	291d      	cmp	r1, #29
 801b966:	d82b      	bhi.n	801b9c0 <__sflush_r+0xb8>
 801b968:	4a29      	ldr	r2, [pc, #164]	; (801ba10 <__sflush_r+0x108>)
 801b96a:	410a      	asrs	r2, r1
 801b96c:	07d6      	lsls	r6, r2, #31
 801b96e:	d427      	bmi.n	801b9c0 <__sflush_r+0xb8>
 801b970:	2200      	movs	r2, #0
 801b972:	6062      	str	r2, [r4, #4]
 801b974:	04d9      	lsls	r1, r3, #19
 801b976:	6922      	ldr	r2, [r4, #16]
 801b978:	6022      	str	r2, [r4, #0]
 801b97a:	d504      	bpl.n	801b986 <__sflush_r+0x7e>
 801b97c:	1c42      	adds	r2, r0, #1
 801b97e:	d101      	bne.n	801b984 <__sflush_r+0x7c>
 801b980:	682b      	ldr	r3, [r5, #0]
 801b982:	b903      	cbnz	r3, 801b986 <__sflush_r+0x7e>
 801b984:	6560      	str	r0, [r4, #84]	; 0x54
 801b986:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b988:	602f      	str	r7, [r5, #0]
 801b98a:	2900      	cmp	r1, #0
 801b98c:	d0c9      	beq.n	801b922 <__sflush_r+0x1a>
 801b98e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b992:	4299      	cmp	r1, r3
 801b994:	d002      	beq.n	801b99c <__sflush_r+0x94>
 801b996:	4628      	mov	r0, r5
 801b998:	f7ff f9f6 	bl	801ad88 <_free_r>
 801b99c:	2000      	movs	r0, #0
 801b99e:	6360      	str	r0, [r4, #52]	; 0x34
 801b9a0:	e7c0      	b.n	801b924 <__sflush_r+0x1c>
 801b9a2:	2301      	movs	r3, #1
 801b9a4:	4628      	mov	r0, r5
 801b9a6:	47b0      	blx	r6
 801b9a8:	1c41      	adds	r1, r0, #1
 801b9aa:	d1c8      	bne.n	801b93e <__sflush_r+0x36>
 801b9ac:	682b      	ldr	r3, [r5, #0]
 801b9ae:	2b00      	cmp	r3, #0
 801b9b0:	d0c5      	beq.n	801b93e <__sflush_r+0x36>
 801b9b2:	2b1d      	cmp	r3, #29
 801b9b4:	d001      	beq.n	801b9ba <__sflush_r+0xb2>
 801b9b6:	2b16      	cmp	r3, #22
 801b9b8:	d101      	bne.n	801b9be <__sflush_r+0xb6>
 801b9ba:	602f      	str	r7, [r5, #0]
 801b9bc:	e7b1      	b.n	801b922 <__sflush_r+0x1a>
 801b9be:	89a3      	ldrh	r3, [r4, #12]
 801b9c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b9c4:	81a3      	strh	r3, [r4, #12]
 801b9c6:	e7ad      	b.n	801b924 <__sflush_r+0x1c>
 801b9c8:	690f      	ldr	r7, [r1, #16]
 801b9ca:	2f00      	cmp	r7, #0
 801b9cc:	d0a9      	beq.n	801b922 <__sflush_r+0x1a>
 801b9ce:	0793      	lsls	r3, r2, #30
 801b9d0:	680e      	ldr	r6, [r1, #0]
 801b9d2:	bf08      	it	eq
 801b9d4:	694b      	ldreq	r3, [r1, #20]
 801b9d6:	600f      	str	r7, [r1, #0]
 801b9d8:	bf18      	it	ne
 801b9da:	2300      	movne	r3, #0
 801b9dc:	eba6 0807 	sub.w	r8, r6, r7
 801b9e0:	608b      	str	r3, [r1, #8]
 801b9e2:	f1b8 0f00 	cmp.w	r8, #0
 801b9e6:	dd9c      	ble.n	801b922 <__sflush_r+0x1a>
 801b9e8:	6a21      	ldr	r1, [r4, #32]
 801b9ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b9ec:	4643      	mov	r3, r8
 801b9ee:	463a      	mov	r2, r7
 801b9f0:	4628      	mov	r0, r5
 801b9f2:	47b0      	blx	r6
 801b9f4:	2800      	cmp	r0, #0
 801b9f6:	dc06      	bgt.n	801ba06 <__sflush_r+0xfe>
 801b9f8:	89a3      	ldrh	r3, [r4, #12]
 801b9fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b9fe:	81a3      	strh	r3, [r4, #12]
 801ba00:	f04f 30ff 	mov.w	r0, #4294967295
 801ba04:	e78e      	b.n	801b924 <__sflush_r+0x1c>
 801ba06:	4407      	add	r7, r0
 801ba08:	eba8 0800 	sub.w	r8, r8, r0
 801ba0c:	e7e9      	b.n	801b9e2 <__sflush_r+0xda>
 801ba0e:	bf00      	nop
 801ba10:	dfbffffe 	.word	0xdfbffffe

0801ba14 <_fflush_r>:
 801ba14:	b538      	push	{r3, r4, r5, lr}
 801ba16:	690b      	ldr	r3, [r1, #16]
 801ba18:	4605      	mov	r5, r0
 801ba1a:	460c      	mov	r4, r1
 801ba1c:	b913      	cbnz	r3, 801ba24 <_fflush_r+0x10>
 801ba1e:	2500      	movs	r5, #0
 801ba20:	4628      	mov	r0, r5
 801ba22:	bd38      	pop	{r3, r4, r5, pc}
 801ba24:	b118      	cbz	r0, 801ba2e <_fflush_r+0x1a>
 801ba26:	6a03      	ldr	r3, [r0, #32]
 801ba28:	b90b      	cbnz	r3, 801ba2e <_fflush_r+0x1a>
 801ba2a:	f7fe fa9f 	bl	8019f6c <__sinit>
 801ba2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ba32:	2b00      	cmp	r3, #0
 801ba34:	d0f3      	beq.n	801ba1e <_fflush_r+0xa>
 801ba36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801ba38:	07d0      	lsls	r0, r2, #31
 801ba3a:	d404      	bmi.n	801ba46 <_fflush_r+0x32>
 801ba3c:	0599      	lsls	r1, r3, #22
 801ba3e:	d402      	bmi.n	801ba46 <_fflush_r+0x32>
 801ba40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ba42:	f7fe fb9c 	bl	801a17e <__retarget_lock_acquire_recursive>
 801ba46:	4628      	mov	r0, r5
 801ba48:	4621      	mov	r1, r4
 801ba4a:	f7ff ff5d 	bl	801b908 <__sflush_r>
 801ba4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ba50:	07da      	lsls	r2, r3, #31
 801ba52:	4605      	mov	r5, r0
 801ba54:	d4e4      	bmi.n	801ba20 <_fflush_r+0xc>
 801ba56:	89a3      	ldrh	r3, [r4, #12]
 801ba58:	059b      	lsls	r3, r3, #22
 801ba5a:	d4e1      	bmi.n	801ba20 <_fflush_r+0xc>
 801ba5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ba5e:	f7fe fb8f 	bl	801a180 <__retarget_lock_release_recursive>
 801ba62:	e7dd      	b.n	801ba20 <_fflush_r+0xc>

0801ba64 <__swbuf_r>:
 801ba64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ba66:	460e      	mov	r6, r1
 801ba68:	4614      	mov	r4, r2
 801ba6a:	4605      	mov	r5, r0
 801ba6c:	b118      	cbz	r0, 801ba76 <__swbuf_r+0x12>
 801ba6e:	6a03      	ldr	r3, [r0, #32]
 801ba70:	b90b      	cbnz	r3, 801ba76 <__swbuf_r+0x12>
 801ba72:	f7fe fa7b 	bl	8019f6c <__sinit>
 801ba76:	69a3      	ldr	r3, [r4, #24]
 801ba78:	60a3      	str	r3, [r4, #8]
 801ba7a:	89a3      	ldrh	r3, [r4, #12]
 801ba7c:	071a      	lsls	r2, r3, #28
 801ba7e:	d525      	bpl.n	801bacc <__swbuf_r+0x68>
 801ba80:	6923      	ldr	r3, [r4, #16]
 801ba82:	b31b      	cbz	r3, 801bacc <__swbuf_r+0x68>
 801ba84:	6823      	ldr	r3, [r4, #0]
 801ba86:	6922      	ldr	r2, [r4, #16]
 801ba88:	1a98      	subs	r0, r3, r2
 801ba8a:	6963      	ldr	r3, [r4, #20]
 801ba8c:	b2f6      	uxtb	r6, r6
 801ba8e:	4283      	cmp	r3, r0
 801ba90:	4637      	mov	r7, r6
 801ba92:	dc04      	bgt.n	801ba9e <__swbuf_r+0x3a>
 801ba94:	4621      	mov	r1, r4
 801ba96:	4628      	mov	r0, r5
 801ba98:	f7ff ffbc 	bl	801ba14 <_fflush_r>
 801ba9c:	b9e0      	cbnz	r0, 801bad8 <__swbuf_r+0x74>
 801ba9e:	68a3      	ldr	r3, [r4, #8]
 801baa0:	3b01      	subs	r3, #1
 801baa2:	60a3      	str	r3, [r4, #8]
 801baa4:	6823      	ldr	r3, [r4, #0]
 801baa6:	1c5a      	adds	r2, r3, #1
 801baa8:	6022      	str	r2, [r4, #0]
 801baaa:	701e      	strb	r6, [r3, #0]
 801baac:	6962      	ldr	r2, [r4, #20]
 801baae:	1c43      	adds	r3, r0, #1
 801bab0:	429a      	cmp	r2, r3
 801bab2:	d004      	beq.n	801babe <__swbuf_r+0x5a>
 801bab4:	89a3      	ldrh	r3, [r4, #12]
 801bab6:	07db      	lsls	r3, r3, #31
 801bab8:	d506      	bpl.n	801bac8 <__swbuf_r+0x64>
 801baba:	2e0a      	cmp	r6, #10
 801babc:	d104      	bne.n	801bac8 <__swbuf_r+0x64>
 801babe:	4621      	mov	r1, r4
 801bac0:	4628      	mov	r0, r5
 801bac2:	f7ff ffa7 	bl	801ba14 <_fflush_r>
 801bac6:	b938      	cbnz	r0, 801bad8 <__swbuf_r+0x74>
 801bac8:	4638      	mov	r0, r7
 801baca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bacc:	4621      	mov	r1, r4
 801bace:	4628      	mov	r0, r5
 801bad0:	f000 f806 	bl	801bae0 <__swsetup_r>
 801bad4:	2800      	cmp	r0, #0
 801bad6:	d0d5      	beq.n	801ba84 <__swbuf_r+0x20>
 801bad8:	f04f 37ff 	mov.w	r7, #4294967295
 801badc:	e7f4      	b.n	801bac8 <__swbuf_r+0x64>
	...

0801bae0 <__swsetup_r>:
 801bae0:	b538      	push	{r3, r4, r5, lr}
 801bae2:	4b2a      	ldr	r3, [pc, #168]	; (801bb8c <__swsetup_r+0xac>)
 801bae4:	4605      	mov	r5, r0
 801bae6:	6818      	ldr	r0, [r3, #0]
 801bae8:	460c      	mov	r4, r1
 801baea:	b118      	cbz	r0, 801baf4 <__swsetup_r+0x14>
 801baec:	6a03      	ldr	r3, [r0, #32]
 801baee:	b90b      	cbnz	r3, 801baf4 <__swsetup_r+0x14>
 801baf0:	f7fe fa3c 	bl	8019f6c <__sinit>
 801baf4:	89a3      	ldrh	r3, [r4, #12]
 801baf6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801bafa:	0718      	lsls	r0, r3, #28
 801bafc:	d422      	bmi.n	801bb44 <__swsetup_r+0x64>
 801bafe:	06d9      	lsls	r1, r3, #27
 801bb00:	d407      	bmi.n	801bb12 <__swsetup_r+0x32>
 801bb02:	2309      	movs	r3, #9
 801bb04:	602b      	str	r3, [r5, #0]
 801bb06:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801bb0a:	81a3      	strh	r3, [r4, #12]
 801bb0c:	f04f 30ff 	mov.w	r0, #4294967295
 801bb10:	e034      	b.n	801bb7c <__swsetup_r+0x9c>
 801bb12:	0758      	lsls	r0, r3, #29
 801bb14:	d512      	bpl.n	801bb3c <__swsetup_r+0x5c>
 801bb16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bb18:	b141      	cbz	r1, 801bb2c <__swsetup_r+0x4c>
 801bb1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bb1e:	4299      	cmp	r1, r3
 801bb20:	d002      	beq.n	801bb28 <__swsetup_r+0x48>
 801bb22:	4628      	mov	r0, r5
 801bb24:	f7ff f930 	bl	801ad88 <_free_r>
 801bb28:	2300      	movs	r3, #0
 801bb2a:	6363      	str	r3, [r4, #52]	; 0x34
 801bb2c:	89a3      	ldrh	r3, [r4, #12]
 801bb2e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801bb32:	81a3      	strh	r3, [r4, #12]
 801bb34:	2300      	movs	r3, #0
 801bb36:	6063      	str	r3, [r4, #4]
 801bb38:	6923      	ldr	r3, [r4, #16]
 801bb3a:	6023      	str	r3, [r4, #0]
 801bb3c:	89a3      	ldrh	r3, [r4, #12]
 801bb3e:	f043 0308 	orr.w	r3, r3, #8
 801bb42:	81a3      	strh	r3, [r4, #12]
 801bb44:	6923      	ldr	r3, [r4, #16]
 801bb46:	b94b      	cbnz	r3, 801bb5c <__swsetup_r+0x7c>
 801bb48:	89a3      	ldrh	r3, [r4, #12]
 801bb4a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801bb4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801bb52:	d003      	beq.n	801bb5c <__swsetup_r+0x7c>
 801bb54:	4621      	mov	r1, r4
 801bb56:	4628      	mov	r0, r5
 801bb58:	f000 f8b6 	bl	801bcc8 <__smakebuf_r>
 801bb5c:	89a0      	ldrh	r0, [r4, #12]
 801bb5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801bb62:	f010 0301 	ands.w	r3, r0, #1
 801bb66:	d00a      	beq.n	801bb7e <__swsetup_r+0x9e>
 801bb68:	2300      	movs	r3, #0
 801bb6a:	60a3      	str	r3, [r4, #8]
 801bb6c:	6963      	ldr	r3, [r4, #20]
 801bb6e:	425b      	negs	r3, r3
 801bb70:	61a3      	str	r3, [r4, #24]
 801bb72:	6923      	ldr	r3, [r4, #16]
 801bb74:	b943      	cbnz	r3, 801bb88 <__swsetup_r+0xa8>
 801bb76:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801bb7a:	d1c4      	bne.n	801bb06 <__swsetup_r+0x26>
 801bb7c:	bd38      	pop	{r3, r4, r5, pc}
 801bb7e:	0781      	lsls	r1, r0, #30
 801bb80:	bf58      	it	pl
 801bb82:	6963      	ldrpl	r3, [r4, #20]
 801bb84:	60a3      	str	r3, [r4, #8]
 801bb86:	e7f4      	b.n	801bb72 <__swsetup_r+0x92>
 801bb88:	2000      	movs	r0, #0
 801bb8a:	e7f7      	b.n	801bb7c <__swsetup_r+0x9c>
 801bb8c:	2400006c 	.word	0x2400006c

0801bb90 <_sbrk_r>:
 801bb90:	b538      	push	{r3, r4, r5, lr}
 801bb92:	4d06      	ldr	r5, [pc, #24]	; (801bbac <_sbrk_r+0x1c>)
 801bb94:	2300      	movs	r3, #0
 801bb96:	4604      	mov	r4, r0
 801bb98:	4608      	mov	r0, r1
 801bb9a:	602b      	str	r3, [r5, #0]
 801bb9c:	f7e5 fd90 	bl	80016c0 <_sbrk>
 801bba0:	1c43      	adds	r3, r0, #1
 801bba2:	d102      	bne.n	801bbaa <_sbrk_r+0x1a>
 801bba4:	682b      	ldr	r3, [r5, #0]
 801bba6:	b103      	cbz	r3, 801bbaa <_sbrk_r+0x1a>
 801bba8:	6023      	str	r3, [r4, #0]
 801bbaa:	bd38      	pop	{r3, r4, r5, pc}
 801bbac:	2400e774 	.word	0x2400e774

0801bbb0 <__assert_func>:
 801bbb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801bbb2:	4614      	mov	r4, r2
 801bbb4:	461a      	mov	r2, r3
 801bbb6:	4b09      	ldr	r3, [pc, #36]	; (801bbdc <__assert_func+0x2c>)
 801bbb8:	681b      	ldr	r3, [r3, #0]
 801bbba:	4605      	mov	r5, r0
 801bbbc:	68d8      	ldr	r0, [r3, #12]
 801bbbe:	b14c      	cbz	r4, 801bbd4 <__assert_func+0x24>
 801bbc0:	4b07      	ldr	r3, [pc, #28]	; (801bbe0 <__assert_func+0x30>)
 801bbc2:	9100      	str	r1, [sp, #0]
 801bbc4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801bbc8:	4906      	ldr	r1, [pc, #24]	; (801bbe4 <__assert_func+0x34>)
 801bbca:	462b      	mov	r3, r5
 801bbcc:	f000 f844 	bl	801bc58 <fiprintf>
 801bbd0:	f000 f8d8 	bl	801bd84 <abort>
 801bbd4:	4b04      	ldr	r3, [pc, #16]	; (801bbe8 <__assert_func+0x38>)
 801bbd6:	461c      	mov	r4, r3
 801bbd8:	e7f3      	b.n	801bbc2 <__assert_func+0x12>
 801bbda:	bf00      	nop
 801bbdc:	2400006c 	.word	0x2400006c
 801bbe0:	0801c427 	.word	0x0801c427
 801bbe4:	0801c434 	.word	0x0801c434
 801bbe8:	0801c462 	.word	0x0801c462

0801bbec <_calloc_r>:
 801bbec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bbee:	fba1 2402 	umull	r2, r4, r1, r2
 801bbf2:	b94c      	cbnz	r4, 801bc08 <_calloc_r+0x1c>
 801bbf4:	4611      	mov	r1, r2
 801bbf6:	9201      	str	r2, [sp, #4]
 801bbf8:	f7ff f93a 	bl	801ae70 <_malloc_r>
 801bbfc:	9a01      	ldr	r2, [sp, #4]
 801bbfe:	4605      	mov	r5, r0
 801bc00:	b930      	cbnz	r0, 801bc10 <_calloc_r+0x24>
 801bc02:	4628      	mov	r0, r5
 801bc04:	b003      	add	sp, #12
 801bc06:	bd30      	pop	{r4, r5, pc}
 801bc08:	220c      	movs	r2, #12
 801bc0a:	6002      	str	r2, [r0, #0]
 801bc0c:	2500      	movs	r5, #0
 801bc0e:	e7f8      	b.n	801bc02 <_calloc_r+0x16>
 801bc10:	4621      	mov	r1, r4
 801bc12:	f7fe fa36 	bl	801a082 <memset>
 801bc16:	e7f4      	b.n	801bc02 <_calloc_r+0x16>

0801bc18 <__ascii_mbtowc>:
 801bc18:	b082      	sub	sp, #8
 801bc1a:	b901      	cbnz	r1, 801bc1e <__ascii_mbtowc+0x6>
 801bc1c:	a901      	add	r1, sp, #4
 801bc1e:	b142      	cbz	r2, 801bc32 <__ascii_mbtowc+0x1a>
 801bc20:	b14b      	cbz	r3, 801bc36 <__ascii_mbtowc+0x1e>
 801bc22:	7813      	ldrb	r3, [r2, #0]
 801bc24:	600b      	str	r3, [r1, #0]
 801bc26:	7812      	ldrb	r2, [r2, #0]
 801bc28:	1e10      	subs	r0, r2, #0
 801bc2a:	bf18      	it	ne
 801bc2c:	2001      	movne	r0, #1
 801bc2e:	b002      	add	sp, #8
 801bc30:	4770      	bx	lr
 801bc32:	4610      	mov	r0, r2
 801bc34:	e7fb      	b.n	801bc2e <__ascii_mbtowc+0x16>
 801bc36:	f06f 0001 	mvn.w	r0, #1
 801bc3a:	e7f8      	b.n	801bc2e <__ascii_mbtowc+0x16>

0801bc3c <__ascii_wctomb>:
 801bc3c:	b149      	cbz	r1, 801bc52 <__ascii_wctomb+0x16>
 801bc3e:	2aff      	cmp	r2, #255	; 0xff
 801bc40:	bf85      	ittet	hi
 801bc42:	238a      	movhi	r3, #138	; 0x8a
 801bc44:	6003      	strhi	r3, [r0, #0]
 801bc46:	700a      	strbls	r2, [r1, #0]
 801bc48:	f04f 30ff 	movhi.w	r0, #4294967295
 801bc4c:	bf98      	it	ls
 801bc4e:	2001      	movls	r0, #1
 801bc50:	4770      	bx	lr
 801bc52:	4608      	mov	r0, r1
 801bc54:	4770      	bx	lr
	...

0801bc58 <fiprintf>:
 801bc58:	b40e      	push	{r1, r2, r3}
 801bc5a:	b503      	push	{r0, r1, lr}
 801bc5c:	4601      	mov	r1, r0
 801bc5e:	ab03      	add	r3, sp, #12
 801bc60:	4805      	ldr	r0, [pc, #20]	; (801bc78 <fiprintf+0x20>)
 801bc62:	f853 2b04 	ldr.w	r2, [r3], #4
 801bc66:	6800      	ldr	r0, [r0, #0]
 801bc68:	9301      	str	r3, [sp, #4]
 801bc6a:	f7ff fd33 	bl	801b6d4 <_vfiprintf_r>
 801bc6e:	b002      	add	sp, #8
 801bc70:	f85d eb04 	ldr.w	lr, [sp], #4
 801bc74:	b003      	add	sp, #12
 801bc76:	4770      	bx	lr
 801bc78:	2400006c 	.word	0x2400006c

0801bc7c <__swhatbuf_r>:
 801bc7c:	b570      	push	{r4, r5, r6, lr}
 801bc7e:	460c      	mov	r4, r1
 801bc80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bc84:	2900      	cmp	r1, #0
 801bc86:	b096      	sub	sp, #88	; 0x58
 801bc88:	4615      	mov	r5, r2
 801bc8a:	461e      	mov	r6, r3
 801bc8c:	da0d      	bge.n	801bcaa <__swhatbuf_r+0x2e>
 801bc8e:	89a3      	ldrh	r3, [r4, #12]
 801bc90:	f013 0f80 	tst.w	r3, #128	; 0x80
 801bc94:	f04f 0100 	mov.w	r1, #0
 801bc98:	bf0c      	ite	eq
 801bc9a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801bc9e:	2340      	movne	r3, #64	; 0x40
 801bca0:	2000      	movs	r0, #0
 801bca2:	6031      	str	r1, [r6, #0]
 801bca4:	602b      	str	r3, [r5, #0]
 801bca6:	b016      	add	sp, #88	; 0x58
 801bca8:	bd70      	pop	{r4, r5, r6, pc}
 801bcaa:	466a      	mov	r2, sp
 801bcac:	f000 f848 	bl	801bd40 <_fstat_r>
 801bcb0:	2800      	cmp	r0, #0
 801bcb2:	dbec      	blt.n	801bc8e <__swhatbuf_r+0x12>
 801bcb4:	9901      	ldr	r1, [sp, #4]
 801bcb6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801bcba:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801bcbe:	4259      	negs	r1, r3
 801bcc0:	4159      	adcs	r1, r3
 801bcc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801bcc6:	e7eb      	b.n	801bca0 <__swhatbuf_r+0x24>

0801bcc8 <__smakebuf_r>:
 801bcc8:	898b      	ldrh	r3, [r1, #12]
 801bcca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801bccc:	079d      	lsls	r5, r3, #30
 801bcce:	4606      	mov	r6, r0
 801bcd0:	460c      	mov	r4, r1
 801bcd2:	d507      	bpl.n	801bce4 <__smakebuf_r+0x1c>
 801bcd4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801bcd8:	6023      	str	r3, [r4, #0]
 801bcda:	6123      	str	r3, [r4, #16]
 801bcdc:	2301      	movs	r3, #1
 801bcde:	6163      	str	r3, [r4, #20]
 801bce0:	b002      	add	sp, #8
 801bce2:	bd70      	pop	{r4, r5, r6, pc}
 801bce4:	ab01      	add	r3, sp, #4
 801bce6:	466a      	mov	r2, sp
 801bce8:	f7ff ffc8 	bl	801bc7c <__swhatbuf_r>
 801bcec:	9900      	ldr	r1, [sp, #0]
 801bcee:	4605      	mov	r5, r0
 801bcf0:	4630      	mov	r0, r6
 801bcf2:	f7ff f8bd 	bl	801ae70 <_malloc_r>
 801bcf6:	b948      	cbnz	r0, 801bd0c <__smakebuf_r+0x44>
 801bcf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bcfc:	059a      	lsls	r2, r3, #22
 801bcfe:	d4ef      	bmi.n	801bce0 <__smakebuf_r+0x18>
 801bd00:	f023 0303 	bic.w	r3, r3, #3
 801bd04:	f043 0302 	orr.w	r3, r3, #2
 801bd08:	81a3      	strh	r3, [r4, #12]
 801bd0a:	e7e3      	b.n	801bcd4 <__smakebuf_r+0xc>
 801bd0c:	89a3      	ldrh	r3, [r4, #12]
 801bd0e:	6020      	str	r0, [r4, #0]
 801bd10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bd14:	81a3      	strh	r3, [r4, #12]
 801bd16:	9b00      	ldr	r3, [sp, #0]
 801bd18:	6163      	str	r3, [r4, #20]
 801bd1a:	9b01      	ldr	r3, [sp, #4]
 801bd1c:	6120      	str	r0, [r4, #16]
 801bd1e:	b15b      	cbz	r3, 801bd38 <__smakebuf_r+0x70>
 801bd20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bd24:	4630      	mov	r0, r6
 801bd26:	f000 f81d 	bl	801bd64 <_isatty_r>
 801bd2a:	b128      	cbz	r0, 801bd38 <__smakebuf_r+0x70>
 801bd2c:	89a3      	ldrh	r3, [r4, #12]
 801bd2e:	f023 0303 	bic.w	r3, r3, #3
 801bd32:	f043 0301 	orr.w	r3, r3, #1
 801bd36:	81a3      	strh	r3, [r4, #12]
 801bd38:	89a3      	ldrh	r3, [r4, #12]
 801bd3a:	431d      	orrs	r5, r3
 801bd3c:	81a5      	strh	r5, [r4, #12]
 801bd3e:	e7cf      	b.n	801bce0 <__smakebuf_r+0x18>

0801bd40 <_fstat_r>:
 801bd40:	b538      	push	{r3, r4, r5, lr}
 801bd42:	4d07      	ldr	r5, [pc, #28]	; (801bd60 <_fstat_r+0x20>)
 801bd44:	2300      	movs	r3, #0
 801bd46:	4604      	mov	r4, r0
 801bd48:	4608      	mov	r0, r1
 801bd4a:	4611      	mov	r1, r2
 801bd4c:	602b      	str	r3, [r5, #0]
 801bd4e:	f7e5 fc8e 	bl	800166e <_fstat>
 801bd52:	1c43      	adds	r3, r0, #1
 801bd54:	d102      	bne.n	801bd5c <_fstat_r+0x1c>
 801bd56:	682b      	ldr	r3, [r5, #0]
 801bd58:	b103      	cbz	r3, 801bd5c <_fstat_r+0x1c>
 801bd5a:	6023      	str	r3, [r4, #0]
 801bd5c:	bd38      	pop	{r3, r4, r5, pc}
 801bd5e:	bf00      	nop
 801bd60:	2400e774 	.word	0x2400e774

0801bd64 <_isatty_r>:
 801bd64:	b538      	push	{r3, r4, r5, lr}
 801bd66:	4d06      	ldr	r5, [pc, #24]	; (801bd80 <_isatty_r+0x1c>)
 801bd68:	2300      	movs	r3, #0
 801bd6a:	4604      	mov	r4, r0
 801bd6c:	4608      	mov	r0, r1
 801bd6e:	602b      	str	r3, [r5, #0]
 801bd70:	f7e5 fc8d 	bl	800168e <_isatty>
 801bd74:	1c43      	adds	r3, r0, #1
 801bd76:	d102      	bne.n	801bd7e <_isatty_r+0x1a>
 801bd78:	682b      	ldr	r3, [r5, #0]
 801bd7a:	b103      	cbz	r3, 801bd7e <_isatty_r+0x1a>
 801bd7c:	6023      	str	r3, [r4, #0]
 801bd7e:	bd38      	pop	{r3, r4, r5, pc}
 801bd80:	2400e774 	.word	0x2400e774

0801bd84 <abort>:
 801bd84:	b508      	push	{r3, lr}
 801bd86:	2006      	movs	r0, #6
 801bd88:	f000 f82c 	bl	801bde4 <raise>
 801bd8c:	2001      	movs	r0, #1
 801bd8e:	f7e5 fc1f 	bl	80015d0 <_exit>

0801bd92 <_raise_r>:
 801bd92:	291f      	cmp	r1, #31
 801bd94:	b538      	push	{r3, r4, r5, lr}
 801bd96:	4604      	mov	r4, r0
 801bd98:	460d      	mov	r5, r1
 801bd9a:	d904      	bls.n	801bda6 <_raise_r+0x14>
 801bd9c:	2316      	movs	r3, #22
 801bd9e:	6003      	str	r3, [r0, #0]
 801bda0:	f04f 30ff 	mov.w	r0, #4294967295
 801bda4:	bd38      	pop	{r3, r4, r5, pc}
 801bda6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801bda8:	b112      	cbz	r2, 801bdb0 <_raise_r+0x1e>
 801bdaa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801bdae:	b94b      	cbnz	r3, 801bdc4 <_raise_r+0x32>
 801bdb0:	4620      	mov	r0, r4
 801bdb2:	f000 f831 	bl	801be18 <_getpid_r>
 801bdb6:	462a      	mov	r2, r5
 801bdb8:	4601      	mov	r1, r0
 801bdba:	4620      	mov	r0, r4
 801bdbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bdc0:	f000 b818 	b.w	801bdf4 <_kill_r>
 801bdc4:	2b01      	cmp	r3, #1
 801bdc6:	d00a      	beq.n	801bdde <_raise_r+0x4c>
 801bdc8:	1c59      	adds	r1, r3, #1
 801bdca:	d103      	bne.n	801bdd4 <_raise_r+0x42>
 801bdcc:	2316      	movs	r3, #22
 801bdce:	6003      	str	r3, [r0, #0]
 801bdd0:	2001      	movs	r0, #1
 801bdd2:	e7e7      	b.n	801bda4 <_raise_r+0x12>
 801bdd4:	2400      	movs	r4, #0
 801bdd6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801bdda:	4628      	mov	r0, r5
 801bddc:	4798      	blx	r3
 801bdde:	2000      	movs	r0, #0
 801bde0:	e7e0      	b.n	801bda4 <_raise_r+0x12>
	...

0801bde4 <raise>:
 801bde4:	4b02      	ldr	r3, [pc, #8]	; (801bdf0 <raise+0xc>)
 801bde6:	4601      	mov	r1, r0
 801bde8:	6818      	ldr	r0, [r3, #0]
 801bdea:	f7ff bfd2 	b.w	801bd92 <_raise_r>
 801bdee:	bf00      	nop
 801bdf0:	2400006c 	.word	0x2400006c

0801bdf4 <_kill_r>:
 801bdf4:	b538      	push	{r3, r4, r5, lr}
 801bdf6:	4d07      	ldr	r5, [pc, #28]	; (801be14 <_kill_r+0x20>)
 801bdf8:	2300      	movs	r3, #0
 801bdfa:	4604      	mov	r4, r0
 801bdfc:	4608      	mov	r0, r1
 801bdfe:	4611      	mov	r1, r2
 801be00:	602b      	str	r3, [r5, #0]
 801be02:	f7e5 fbd5 	bl	80015b0 <_kill>
 801be06:	1c43      	adds	r3, r0, #1
 801be08:	d102      	bne.n	801be10 <_kill_r+0x1c>
 801be0a:	682b      	ldr	r3, [r5, #0]
 801be0c:	b103      	cbz	r3, 801be10 <_kill_r+0x1c>
 801be0e:	6023      	str	r3, [r4, #0]
 801be10:	bd38      	pop	{r3, r4, r5, pc}
 801be12:	bf00      	nop
 801be14:	2400e774 	.word	0x2400e774

0801be18 <_getpid_r>:
 801be18:	f7e5 bbc2 	b.w	80015a0 <_getpid>

0801be1c <_init>:
 801be1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801be1e:	bf00      	nop
 801be20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801be22:	bc08      	pop	{r3}
 801be24:	469e      	mov	lr, r3
 801be26:	4770      	bx	lr

0801be28 <_fini>:
 801be28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801be2a:	bf00      	nop
 801be2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801be2e:	bc08      	pop	{r3}
 801be30:	469e      	mov	lr, r3
 801be32:	4770      	bx	lr
