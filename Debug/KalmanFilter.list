
KalmanFilter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c324  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000994  0801c5c8  0801c5c8  0002c5c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801cf5c  0801cf5c  0002cf5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000010  0801cf64  0801cf64  0002cf64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801cf74  0801cf74  0002cf74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  24000000  0801cf78  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  240001dc  0801d154  000301dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  2400023c  0801d1b4  0003023c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a44c  2400029c  0801d214  0003029c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2400a6e8  0801d214  0003a6e8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003029c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000302ca  2**0
                  CONTENTS, READONLY
 13 .debug_info   00066da0  00000000  00000000  0003030d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000925e  00000000  00000000  000970ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003850  00000000  00000000  000a0310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002b41  00000000  00000000  000a3b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000459c1  00000000  00000000  000a66a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004238f  00000000  00000000  000ec062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0018b19d  00000000  00000000  0012e3f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00010b8c  00000000  00000000  002b9590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  002ca11c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400029c 	.word	0x2400029c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801c5ac 	.word	0x0801c5ac

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002a0 	.word	0x240002a0
 80002dc:	0801c5ac 	.word	0x0801c5ac

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b970 	b.w	8000a00 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f806 	bl	8000738 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__udivmoddi4>:
 8000738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800073c:	9e08      	ldr	r6, [sp, #32]
 800073e:	460d      	mov	r5, r1
 8000740:	4604      	mov	r4, r0
 8000742:	460f      	mov	r7, r1
 8000744:	2b00      	cmp	r3, #0
 8000746:	d14a      	bne.n	80007de <__udivmoddi4+0xa6>
 8000748:	428a      	cmp	r2, r1
 800074a:	4694      	mov	ip, r2
 800074c:	d965      	bls.n	800081a <__udivmoddi4+0xe2>
 800074e:	fab2 f382 	clz	r3, r2
 8000752:	b143      	cbz	r3, 8000766 <__udivmoddi4+0x2e>
 8000754:	fa02 fc03 	lsl.w	ip, r2, r3
 8000758:	f1c3 0220 	rsb	r2, r3, #32
 800075c:	409f      	lsls	r7, r3
 800075e:	fa20 f202 	lsr.w	r2, r0, r2
 8000762:	4317      	orrs	r7, r2
 8000764:	409c      	lsls	r4, r3
 8000766:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800076a:	fa1f f58c 	uxth.w	r5, ip
 800076e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000772:	0c22      	lsrs	r2, r4, #16
 8000774:	fb0e 7711 	mls	r7, lr, r1, r7
 8000778:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800077c:	fb01 f005 	mul.w	r0, r1, r5
 8000780:	4290      	cmp	r0, r2
 8000782:	d90a      	bls.n	800079a <__udivmoddi4+0x62>
 8000784:	eb1c 0202 	adds.w	r2, ip, r2
 8000788:	f101 37ff 	add.w	r7, r1, #4294967295
 800078c:	f080 811c 	bcs.w	80009c8 <__udivmoddi4+0x290>
 8000790:	4290      	cmp	r0, r2
 8000792:	f240 8119 	bls.w	80009c8 <__udivmoddi4+0x290>
 8000796:	3902      	subs	r1, #2
 8000798:	4462      	add	r2, ip
 800079a:	1a12      	subs	r2, r2, r0
 800079c:	b2a4      	uxth	r4, r4
 800079e:	fbb2 f0fe 	udiv	r0, r2, lr
 80007a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80007a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80007aa:	fb00 f505 	mul.w	r5, r0, r5
 80007ae:	42a5      	cmp	r5, r4
 80007b0:	d90a      	bls.n	80007c8 <__udivmoddi4+0x90>
 80007b2:	eb1c 0404 	adds.w	r4, ip, r4
 80007b6:	f100 32ff 	add.w	r2, r0, #4294967295
 80007ba:	f080 8107 	bcs.w	80009cc <__udivmoddi4+0x294>
 80007be:	42a5      	cmp	r5, r4
 80007c0:	f240 8104 	bls.w	80009cc <__udivmoddi4+0x294>
 80007c4:	4464      	add	r4, ip
 80007c6:	3802      	subs	r0, #2
 80007c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80007cc:	1b64      	subs	r4, r4, r5
 80007ce:	2100      	movs	r1, #0
 80007d0:	b11e      	cbz	r6, 80007da <__udivmoddi4+0xa2>
 80007d2:	40dc      	lsrs	r4, r3
 80007d4:	2300      	movs	r3, #0
 80007d6:	e9c6 4300 	strd	r4, r3, [r6]
 80007da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007de:	428b      	cmp	r3, r1
 80007e0:	d908      	bls.n	80007f4 <__udivmoddi4+0xbc>
 80007e2:	2e00      	cmp	r6, #0
 80007e4:	f000 80ed 	beq.w	80009c2 <__udivmoddi4+0x28a>
 80007e8:	2100      	movs	r1, #0
 80007ea:	e9c6 0500 	strd	r0, r5, [r6]
 80007ee:	4608      	mov	r0, r1
 80007f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007f4:	fab3 f183 	clz	r1, r3
 80007f8:	2900      	cmp	r1, #0
 80007fa:	d149      	bne.n	8000890 <__udivmoddi4+0x158>
 80007fc:	42ab      	cmp	r3, r5
 80007fe:	d302      	bcc.n	8000806 <__udivmoddi4+0xce>
 8000800:	4282      	cmp	r2, r0
 8000802:	f200 80f8 	bhi.w	80009f6 <__udivmoddi4+0x2be>
 8000806:	1a84      	subs	r4, r0, r2
 8000808:	eb65 0203 	sbc.w	r2, r5, r3
 800080c:	2001      	movs	r0, #1
 800080e:	4617      	mov	r7, r2
 8000810:	2e00      	cmp	r6, #0
 8000812:	d0e2      	beq.n	80007da <__udivmoddi4+0xa2>
 8000814:	e9c6 4700 	strd	r4, r7, [r6]
 8000818:	e7df      	b.n	80007da <__udivmoddi4+0xa2>
 800081a:	b902      	cbnz	r2, 800081e <__udivmoddi4+0xe6>
 800081c:	deff      	udf	#255	; 0xff
 800081e:	fab2 f382 	clz	r3, r2
 8000822:	2b00      	cmp	r3, #0
 8000824:	f040 8090 	bne.w	8000948 <__udivmoddi4+0x210>
 8000828:	1a8a      	subs	r2, r1, r2
 800082a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800082e:	fa1f fe8c 	uxth.w	lr, ip
 8000832:	2101      	movs	r1, #1
 8000834:	fbb2 f5f7 	udiv	r5, r2, r7
 8000838:	fb07 2015 	mls	r0, r7, r5, r2
 800083c:	0c22      	lsrs	r2, r4, #16
 800083e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000842:	fb0e f005 	mul.w	r0, lr, r5
 8000846:	4290      	cmp	r0, r2
 8000848:	d908      	bls.n	800085c <__udivmoddi4+0x124>
 800084a:	eb1c 0202 	adds.w	r2, ip, r2
 800084e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000852:	d202      	bcs.n	800085a <__udivmoddi4+0x122>
 8000854:	4290      	cmp	r0, r2
 8000856:	f200 80cb 	bhi.w	80009f0 <__udivmoddi4+0x2b8>
 800085a:	4645      	mov	r5, r8
 800085c:	1a12      	subs	r2, r2, r0
 800085e:	b2a4      	uxth	r4, r4
 8000860:	fbb2 f0f7 	udiv	r0, r2, r7
 8000864:	fb07 2210 	mls	r2, r7, r0, r2
 8000868:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800086c:	fb0e fe00 	mul.w	lr, lr, r0
 8000870:	45a6      	cmp	lr, r4
 8000872:	d908      	bls.n	8000886 <__udivmoddi4+0x14e>
 8000874:	eb1c 0404 	adds.w	r4, ip, r4
 8000878:	f100 32ff 	add.w	r2, r0, #4294967295
 800087c:	d202      	bcs.n	8000884 <__udivmoddi4+0x14c>
 800087e:	45a6      	cmp	lr, r4
 8000880:	f200 80bb 	bhi.w	80009fa <__udivmoddi4+0x2c2>
 8000884:	4610      	mov	r0, r2
 8000886:	eba4 040e 	sub.w	r4, r4, lr
 800088a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800088e:	e79f      	b.n	80007d0 <__udivmoddi4+0x98>
 8000890:	f1c1 0720 	rsb	r7, r1, #32
 8000894:	408b      	lsls	r3, r1
 8000896:	fa22 fc07 	lsr.w	ip, r2, r7
 800089a:	ea4c 0c03 	orr.w	ip, ip, r3
 800089e:	fa05 f401 	lsl.w	r4, r5, r1
 80008a2:	fa20 f307 	lsr.w	r3, r0, r7
 80008a6:	40fd      	lsrs	r5, r7
 80008a8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80008ac:	4323      	orrs	r3, r4
 80008ae:	fbb5 f8f9 	udiv	r8, r5, r9
 80008b2:	fa1f fe8c 	uxth.w	lr, ip
 80008b6:	fb09 5518 	mls	r5, r9, r8, r5
 80008ba:	0c1c      	lsrs	r4, r3, #16
 80008bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80008c0:	fb08 f50e 	mul.w	r5, r8, lr
 80008c4:	42a5      	cmp	r5, r4
 80008c6:	fa02 f201 	lsl.w	r2, r2, r1
 80008ca:	fa00 f001 	lsl.w	r0, r0, r1
 80008ce:	d90b      	bls.n	80008e8 <__udivmoddi4+0x1b0>
 80008d0:	eb1c 0404 	adds.w	r4, ip, r4
 80008d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80008d8:	f080 8088 	bcs.w	80009ec <__udivmoddi4+0x2b4>
 80008dc:	42a5      	cmp	r5, r4
 80008de:	f240 8085 	bls.w	80009ec <__udivmoddi4+0x2b4>
 80008e2:	f1a8 0802 	sub.w	r8, r8, #2
 80008e6:	4464      	add	r4, ip
 80008e8:	1b64      	subs	r4, r4, r5
 80008ea:	b29d      	uxth	r5, r3
 80008ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80008f0:	fb09 4413 	mls	r4, r9, r3, r4
 80008f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80008f8:	fb03 fe0e 	mul.w	lr, r3, lr
 80008fc:	45a6      	cmp	lr, r4
 80008fe:	d908      	bls.n	8000912 <__udivmoddi4+0x1da>
 8000900:	eb1c 0404 	adds.w	r4, ip, r4
 8000904:	f103 35ff 	add.w	r5, r3, #4294967295
 8000908:	d26c      	bcs.n	80009e4 <__udivmoddi4+0x2ac>
 800090a:	45a6      	cmp	lr, r4
 800090c:	d96a      	bls.n	80009e4 <__udivmoddi4+0x2ac>
 800090e:	3b02      	subs	r3, #2
 8000910:	4464      	add	r4, ip
 8000912:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000916:	fba3 9502 	umull	r9, r5, r3, r2
 800091a:	eba4 040e 	sub.w	r4, r4, lr
 800091e:	42ac      	cmp	r4, r5
 8000920:	46c8      	mov	r8, r9
 8000922:	46ae      	mov	lr, r5
 8000924:	d356      	bcc.n	80009d4 <__udivmoddi4+0x29c>
 8000926:	d053      	beq.n	80009d0 <__udivmoddi4+0x298>
 8000928:	b156      	cbz	r6, 8000940 <__udivmoddi4+0x208>
 800092a:	ebb0 0208 	subs.w	r2, r0, r8
 800092e:	eb64 040e 	sbc.w	r4, r4, lr
 8000932:	fa04 f707 	lsl.w	r7, r4, r7
 8000936:	40ca      	lsrs	r2, r1
 8000938:	40cc      	lsrs	r4, r1
 800093a:	4317      	orrs	r7, r2
 800093c:	e9c6 7400 	strd	r7, r4, [r6]
 8000940:	4618      	mov	r0, r3
 8000942:	2100      	movs	r1, #0
 8000944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000948:	f1c3 0120 	rsb	r1, r3, #32
 800094c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000950:	fa20 f201 	lsr.w	r2, r0, r1
 8000954:	fa25 f101 	lsr.w	r1, r5, r1
 8000958:	409d      	lsls	r5, r3
 800095a:	432a      	orrs	r2, r5
 800095c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000960:	fa1f fe8c 	uxth.w	lr, ip
 8000964:	fbb1 f0f7 	udiv	r0, r1, r7
 8000968:	fb07 1510 	mls	r5, r7, r0, r1
 800096c:	0c11      	lsrs	r1, r2, #16
 800096e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000972:	fb00 f50e 	mul.w	r5, r0, lr
 8000976:	428d      	cmp	r5, r1
 8000978:	fa04 f403 	lsl.w	r4, r4, r3
 800097c:	d908      	bls.n	8000990 <__udivmoddi4+0x258>
 800097e:	eb1c 0101 	adds.w	r1, ip, r1
 8000982:	f100 38ff 	add.w	r8, r0, #4294967295
 8000986:	d22f      	bcs.n	80009e8 <__udivmoddi4+0x2b0>
 8000988:	428d      	cmp	r5, r1
 800098a:	d92d      	bls.n	80009e8 <__udivmoddi4+0x2b0>
 800098c:	3802      	subs	r0, #2
 800098e:	4461      	add	r1, ip
 8000990:	1b49      	subs	r1, r1, r5
 8000992:	b292      	uxth	r2, r2
 8000994:	fbb1 f5f7 	udiv	r5, r1, r7
 8000998:	fb07 1115 	mls	r1, r7, r5, r1
 800099c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80009a0:	fb05 f10e 	mul.w	r1, r5, lr
 80009a4:	4291      	cmp	r1, r2
 80009a6:	d908      	bls.n	80009ba <__udivmoddi4+0x282>
 80009a8:	eb1c 0202 	adds.w	r2, ip, r2
 80009ac:	f105 38ff 	add.w	r8, r5, #4294967295
 80009b0:	d216      	bcs.n	80009e0 <__udivmoddi4+0x2a8>
 80009b2:	4291      	cmp	r1, r2
 80009b4:	d914      	bls.n	80009e0 <__udivmoddi4+0x2a8>
 80009b6:	3d02      	subs	r5, #2
 80009b8:	4462      	add	r2, ip
 80009ba:	1a52      	subs	r2, r2, r1
 80009bc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80009c0:	e738      	b.n	8000834 <__udivmoddi4+0xfc>
 80009c2:	4631      	mov	r1, r6
 80009c4:	4630      	mov	r0, r6
 80009c6:	e708      	b.n	80007da <__udivmoddi4+0xa2>
 80009c8:	4639      	mov	r1, r7
 80009ca:	e6e6      	b.n	800079a <__udivmoddi4+0x62>
 80009cc:	4610      	mov	r0, r2
 80009ce:	e6fb      	b.n	80007c8 <__udivmoddi4+0x90>
 80009d0:	4548      	cmp	r0, r9
 80009d2:	d2a9      	bcs.n	8000928 <__udivmoddi4+0x1f0>
 80009d4:	ebb9 0802 	subs.w	r8, r9, r2
 80009d8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80009dc:	3b01      	subs	r3, #1
 80009de:	e7a3      	b.n	8000928 <__udivmoddi4+0x1f0>
 80009e0:	4645      	mov	r5, r8
 80009e2:	e7ea      	b.n	80009ba <__udivmoddi4+0x282>
 80009e4:	462b      	mov	r3, r5
 80009e6:	e794      	b.n	8000912 <__udivmoddi4+0x1da>
 80009e8:	4640      	mov	r0, r8
 80009ea:	e7d1      	b.n	8000990 <__udivmoddi4+0x258>
 80009ec:	46d0      	mov	r8, sl
 80009ee:	e77b      	b.n	80008e8 <__udivmoddi4+0x1b0>
 80009f0:	3d02      	subs	r5, #2
 80009f2:	4462      	add	r2, ip
 80009f4:	e732      	b.n	800085c <__udivmoddi4+0x124>
 80009f6:	4608      	mov	r0, r1
 80009f8:	e70a      	b.n	8000810 <__udivmoddi4+0xd8>
 80009fa:	4464      	add	r4, ip
 80009fc:	3802      	subs	r0, #2
 80009fe:	e742      	b.n	8000886 <__udivmoddi4+0x14e>

08000a00 <__aeabi_idiv0>:
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a0a:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <MX_DMA_Init+0x4c>)
 8000a0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a10:	4a0f      	ldr	r2, [pc, #60]	; (8000a50 <MX_DMA_Init+0x4c>)
 8000a12:	f043 0301 	orr.w	r3, r3, #1
 8000a16:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000a1a:	4b0d      	ldr	r3, [pc, #52]	; (8000a50 <MX_DMA_Init+0x4c>)
 8000a1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a20:	f003 0301 	and.w	r3, r3, #1
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2105      	movs	r1, #5
 8000a2c:	200b      	movs	r0, #11
 8000a2e:	f001 fb21 	bl	8002074 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a32:	200b      	movs	r0, #11
 8000a34:	f001 fb38 	bl	80020a8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2105      	movs	r1, #5
 8000a3c:	200c      	movs	r0, #12
 8000a3e:	f001 fb19 	bl	8002074 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000a42:	200c      	movs	r0, #12
 8000a44:	f001 fb30 	bl	80020a8 <HAL_NVIC_EnableIRQ>

}
 8000a48:	bf00      	nop
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	58024400 	.word	0x58024400

08000a54 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a58:	4b1e      	ldr	r3, [pc, #120]	; (8000ad4 <MX_ETH_Init+0x80>)
 8000a5a:	4a1f      	ldr	r2, [pc, #124]	; (8000ad8 <MX_ETH_Init+0x84>)
 8000a5c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000a5e:	4b1f      	ldr	r3, [pc, #124]	; (8000adc <MX_ETH_Init+0x88>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000a64:	4b1d      	ldr	r3, [pc, #116]	; (8000adc <MX_ETH_Init+0x88>)
 8000a66:	2280      	movs	r2, #128	; 0x80
 8000a68:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000a6a:	4b1c      	ldr	r3, [pc, #112]	; (8000adc <MX_ETH_Init+0x88>)
 8000a6c:	22e1      	movs	r2, #225	; 0xe1
 8000a6e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000a70:	4b1a      	ldr	r3, [pc, #104]	; (8000adc <MX_ETH_Init+0x88>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000a76:	4b19      	ldr	r3, [pc, #100]	; (8000adc <MX_ETH_Init+0x88>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a7c:	4b17      	ldr	r3, [pc, #92]	; (8000adc <MX_ETH_Init+0x88>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a82:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <MX_ETH_Init+0x80>)
 8000a84:	4a15      	ldr	r2, [pc, #84]	; (8000adc <MX_ETH_Init+0x88>)
 8000a86:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <MX_ETH_Init+0x80>)
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a8e:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <MX_ETH_Init+0x80>)
 8000a90:	4a13      	ldr	r2, [pc, #76]	; (8000ae0 <MX_ETH_Init+0x8c>)
 8000a92:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a94:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <MX_ETH_Init+0x80>)
 8000a96:	4a13      	ldr	r2, [pc, #76]	; (8000ae4 <MX_ETH_Init+0x90>)
 8000a98:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <MX_ETH_Init+0x80>)
 8000a9c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000aa0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000aa2:	480c      	ldr	r0, [pc, #48]	; (8000ad4 <MX_ETH_Init+0x80>)
 8000aa4:	f004 f94a 	bl	8004d3c <HAL_ETH_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000aae:	f000 fce3 	bl	8001478 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000ab2:	2238      	movs	r2, #56	; 0x38
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	480c      	ldr	r0, [pc, #48]	; (8000ae8 <MX_ETH_Init+0x94>)
 8000ab8:	f019 feab 	bl	801a812 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000abc:	4b0a      	ldr	r3, [pc, #40]	; (8000ae8 <MX_ETH_Init+0x94>)
 8000abe:	2221      	movs	r2, #33	; 0x21
 8000ac0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000ac2:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <MX_ETH_Init+0x94>)
 8000ac4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ac8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000aca:	4b07      	ldr	r3, [pc, #28]	; (8000ae8 <MX_ETH_Init+0x94>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	240002f0 	.word	0x240002f0
 8000ad8:	40028000 	.word	0x40028000
 8000adc:	240003a0 	.word	0x240003a0
 8000ae0:	2400023c 	.word	0x2400023c
 8000ae4:	240001dc 	.word	0x240001dc
 8000ae8:	240002b8 	.word	0x240002b8

08000aec <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08e      	sub	sp, #56	; 0x38
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a59      	ldr	r2, [pc, #356]	; (8000c70 <HAL_ETH_MspInit+0x184>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	f040 80ab 	bne.w	8000c66 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000b10:	4b58      	ldr	r3, [pc, #352]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b12:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b16:	4a57      	ldr	r2, [pc, #348]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b1c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b20:	4b54      	ldr	r3, [pc, #336]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b22:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b2a:	623b      	str	r3, [r7, #32]
 8000b2c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000b2e:	4b51      	ldr	r3, [pc, #324]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b34:	4a4f      	ldr	r2, [pc, #316]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b3a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b3e:	4b4d      	ldr	r3, [pc, #308]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b48:	61fb      	str	r3, [r7, #28]
 8000b4a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000b4c:	4b49      	ldr	r3, [pc, #292]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b52:	4a48      	ldr	r2, [pc, #288]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b58:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b5c:	4b45      	ldr	r3, [pc, #276]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b66:	61bb      	str	r3, [r7, #24]
 8000b68:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6a:	4b42      	ldr	r3, [pc, #264]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b70:	4a40      	ldr	r2, [pc, #256]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b72:	f043 0304 	orr.w	r3, r3, #4
 8000b76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b7a:	4b3e      	ldr	r3, [pc, #248]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b80:	f003 0304 	and.w	r3, r3, #4
 8000b84:	617b      	str	r3, [r7, #20]
 8000b86:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b88:	4b3a      	ldr	r3, [pc, #232]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8e:	4a39      	ldr	r2, [pc, #228]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b98:	4b36      	ldr	r3, [pc, #216]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba6:	4b33      	ldr	r3, [pc, #204]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bac:	4a31      	ldr	r2, [pc, #196]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000bae:	f043 0302 	orr.w	r3, r3, #2
 8000bb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bb6:	4b2f      	ldr	r3, [pc, #188]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bbc:	f003 0302 	and.w	r3, r3, #2
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bc4:	4b2b      	ldr	r3, [pc, #172]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000bc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bca:	4a2a      	ldr	r2, [pc, #168]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000bcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bd4:	4b27      	ldr	r3, [pc, #156]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bde:	60bb      	str	r3, [r7, #8]
 8000be0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000be2:	2332      	movs	r3, #50	; 0x32
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be6:	2302      	movs	r3, #2
 8000be8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bf2:	230b      	movs	r3, #11
 8000bf4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	481e      	ldr	r0, [pc, #120]	; (8000c78 <HAL_ETH_MspInit+0x18c>)
 8000bfe:	f004 fcc1 	bl	8005584 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c02:	2386      	movs	r3, #134	; 0x86
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c06:	2302      	movs	r3, #2
 8000c08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c12:	230b      	movs	r3, #11
 8000c14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4817      	ldr	r0, [pc, #92]	; (8000c7c <HAL_ETH_MspInit+0x190>)
 8000c1e:	f004 fcb1 	bl	8005584 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c30:	2300      	movs	r3, #0
 8000c32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c34:	230b      	movs	r3, #11
 8000c36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4810      	ldr	r0, [pc, #64]	; (8000c80 <HAL_ETH_MspInit+0x194>)
 8000c40:	f004 fca0 	bl	8005584 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c44:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c52:	2300      	movs	r3, #0
 8000c54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c56:	230b      	movs	r3, #11
 8000c58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4808      	ldr	r0, [pc, #32]	; (8000c84 <HAL_ETH_MspInit+0x198>)
 8000c62:	f004 fc8f 	bl	8005584 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000c66:	bf00      	nop
 8000c68:	3738      	adds	r7, #56	; 0x38
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40028000 	.word	0x40028000
 8000c74:	58024400 	.word	0x58024400
 8000c78:	58020800 	.word	0x58020800
 8000c7c:	58020000 	.word	0x58020000
 8000c80:	58020400 	.word	0x58020400
 8000c84:	58021800 	.word	0x58021800

08000c88 <HAL_UART_RxCpltCallback>:
{
	osDelay(ms);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]

	inter_flag = 0;
 8000c90:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <HAL_UART_RxCpltCallback+0x2c>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
	++INTERRUPTS;
 8000c96:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <HAL_UART_RxCpltCallback+0x30>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	4a06      	ldr	r2, [pc, #24]	; (8000cb8 <HAL_UART_RxCpltCallback+0x30>)
 8000c9e:	6013      	str	r3, [r2, #0]
	//HAL_UART_Receive_DMA(&huart2, GNSS_Handle.uartWorkingBuffer, 10);
	//xTaskResumeFromISR(ReceiveGNSSDataHandle);
	xSemaphoreGiveFromISR(GNNS_UART_INTERRUPTHandle, &GiveSemaphoreResult);
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_UART_RxCpltCallback+0x34>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4906      	ldr	r1, [pc, #24]	; (8000cc0 <HAL_UART_RxCpltCallback+0x38>)
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f015 ffb7 	bl	8016c1a <xQueueGiveFromISR>
}
 8000cac:	bf00      	nop
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	24000400 	.word	0x24000400
 8000cb8:	24000404 	.word	0x24000404
 8000cbc:	24004474 	.word	0x24004474
 8000cc0:	24000408 	.word	0x24000408

08000cc4 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	460b      	mov	r3, r1
 8000cce:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == USART1)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a0a      	ldr	r2, [pc, #40]	; (8000d00 <HAL_UARTEx_RxEventCallback+0x3c>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d10d      	bne.n	8000cf6 <HAL_UARTEx_RxEventCallback+0x32>
	{
		inter_flag = Size;
 8000cda:	887b      	ldrh	r3, [r7, #2]
 8000cdc:	4a09      	ldr	r2, [pc, #36]	; (8000d04 <HAL_UARTEx_RxEventCallback+0x40>)
 8000cde:	6013      	str	r3, [r2, #0]
		++INTERRUPTS;
 8000ce0:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <HAL_UARTEx_RxEventCallback+0x44>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	4a08      	ldr	r2, [pc, #32]	; (8000d08 <HAL_UARTEx_RxEventCallback+0x44>)
 8000ce8:	6013      	str	r3, [r2, #0]
		xSemaphoreGiveFromISR(GNNS_UART_INTERRUPTHandle, &GiveSemaphoreResult);
 8000cea:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <HAL_UARTEx_RxEventCallback+0x48>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4908      	ldr	r1, [pc, #32]	; (8000d10 <HAL_UARTEx_RxEventCallback+0x4c>)
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f015 ff92 	bl	8016c1a <xQueueGiveFromISR>
	}
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40011000 	.word	0x40011000
 8000d04:	24000400 	.word	0x24000400
 8000d08:	24000404 	.word	0x24000404
 8000d0c:	24004474 	.word	0x24004474
 8000d10:	24000408 	.word	0x24000408

08000d14 <Receive_IT>:

void Receive_IT()
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
	uart_result = HAL_UART_Receive_IT(GNSS_Handle.huart, GNSS_Handle.uartWorkingBuffer, 421);
 8000d18:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <Receive_IT+0x4c>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f240 12a5 	movw	r2, #421	; 0x1a5
 8000d20:	4910      	ldr	r1, [pc, #64]	; (8000d64 <Receive_IT+0x50>)
 8000d22:	4618      	mov	r0, r3
 8000d24:	f008 ff76 	bl	8009c14 <HAL_UART_Receive_IT>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <Receive_IT+0x54>)
 8000d2e:	701a      	strb	r2, [r3, #0]
	if(uart_result != 0) LOG("Receive_IT Status: %d", uart_result);
 8000d30:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <Receive_IT+0x54>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d010      	beq.n	8000d5a <Receive_IT+0x46>
 8000d38:	f001 f894 	bl	8001e64 <HAL_GetTick>
 8000d3c:	4601      	mov	r1, r0
 8000d3e:	23a5      	movs	r3, #165	; 0xa5
 8000d40:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <Receive_IT+0x58>)
 8000d42:	480b      	ldr	r0, [pc, #44]	; (8000d70 <Receive_IT+0x5c>)
 8000d44:	f019 fd10 	bl	801a768 <iprintf>
 8000d48:	4b07      	ldr	r3, [pc, #28]	; (8000d68 <Receive_IT+0x54>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4809      	ldr	r0, [pc, #36]	; (8000d74 <Receive_IT+0x60>)
 8000d50:	f019 fd0a 	bl	801a768 <iprintf>
 8000d54:	4808      	ldr	r0, [pc, #32]	; (8000d78 <Receive_IT+0x64>)
 8000d56:	f019 fd07 	bl	801a768 <iprintf>
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	2400a154 	.word	0x2400a154
 8000d64:	2400a160 	.word	0x2400a160
 8000d68:	2400040c 	.word	0x2400040c
 8000d6c:	0801c968 	.word	0x0801c968
 8000d70:	0801c604 	.word	0x0801c604
 8000d74:	0801c614 	.word	0x0801c614
 8000d78:	0801c62c 	.word	0x0801c62c

08000d7c <Receive_DMA>:
	uart_result = HAL_UARTEx_ReceiveToIdle_IT(GNSS_Handle.huart, GNSS_Handle.uartWorkingBuffer, 100);
	if(uart_result != 0) LOG("Receive_IT_IDLE Status: %d", uart_result);
}

void Receive_DMA()
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
	uart_result = HAL_UART_Receive_DMA(GNSS_Handle.huart, GNSS_Handle.uartWorkingBuffer, 10);
 8000d80:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <Receive_DMA+0x48>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	220a      	movs	r2, #10
 8000d86:	4910      	ldr	r1, [pc, #64]	; (8000dc8 <Receive_DMA+0x4c>)
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f008 ff8f 	bl	8009cac <HAL_UART_Receive_DMA>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	461a      	mov	r2, r3
 8000d92:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <Receive_DMA+0x50>)
 8000d94:	701a      	strb	r2, [r3, #0]
	if(uart_result != 0) LOG("Receive_DMA Status: %d", uart_result);
 8000d96:	4b0d      	ldr	r3, [pc, #52]	; (8000dcc <Receive_DMA+0x50>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d010      	beq.n	8000dc0 <Receive_DMA+0x44>
 8000d9e:	f001 f861 	bl	8001e64 <HAL_GetTick>
 8000da2:	4601      	mov	r1, r0
 8000da4:	23bb      	movs	r3, #187	; 0xbb
 8000da6:	4a0a      	ldr	r2, [pc, #40]	; (8000dd0 <Receive_DMA+0x54>)
 8000da8:	480a      	ldr	r0, [pc, #40]	; (8000dd4 <Receive_DMA+0x58>)
 8000daa:	f019 fcdd 	bl	801a768 <iprintf>
 8000dae:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <Receive_DMA+0x50>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	4619      	mov	r1, r3
 8000db4:	4808      	ldr	r0, [pc, #32]	; (8000dd8 <Receive_DMA+0x5c>)
 8000db6:	f019 fcd7 	bl	801a768 <iprintf>
 8000dba:	4808      	ldr	r0, [pc, #32]	; (8000ddc <Receive_DMA+0x60>)
 8000dbc:	f019 fcd4 	bl	801a768 <iprintf>
}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	2400a154 	.word	0x2400a154
 8000dc8:	2400a160 	.word	0x2400a160
 8000dcc:	2400040c 	.word	0x2400040c
 8000dd0:	0801c974 	.word	0x0801c974
 8000dd4:	0801c604 	.word	0x0801c604
 8000dd8:	0801c694 	.word	0x0801c694
 8000ddc:	0801c62c 	.word	0x0801c62c

08000de0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
//		Bmx160_init();
	LOG("BMX INIT");
 8000de4:	f001 f83e 	bl	8001e64 <HAL_GetTick>
 8000de8:	4601      	mov	r1, r0
 8000dea:	23d9      	movs	r3, #217	; 0xd9
 8000dec:	4a11      	ldr	r2, [pc, #68]	; (8000e34 <MX_FREERTOS_Init+0x54>)
 8000dee:	4812      	ldr	r0, [pc, #72]	; (8000e38 <MX_FREERTOS_Init+0x58>)
 8000df0:	f019 fcba 	bl	801a768 <iprintf>
 8000df4:	4811      	ldr	r0, [pc, #68]	; (8000e3c <MX_FREERTOS_Init+0x5c>)
 8000df6:	f019 fcb7 	bl	801a768 <iprintf>
 8000dfa:	4811      	ldr	r0, [pc, #68]	; (8000e40 <MX_FREERTOS_Init+0x60>)
 8000dfc:	f019 fcb4 	bl	801a768 <iprintf>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of GNNS_UART_INTERRUPT */
  GNNS_UART_INTERRUPTHandle = osSemaphoreNew(1, 1, &GNNS_UART_INTERRUPT_attributes);
 8000e00:	4a10      	ldr	r2, [pc, #64]	; (8000e44 <MX_FREERTOS_Init+0x64>)
 8000e02:	2101      	movs	r1, #1
 8000e04:	2001      	movs	r0, #1
 8000e06:	f015 fa7c 	bl	8016302 <osSemaphoreNew>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	4a0e      	ldr	r2, [pc, #56]	; (8000e48 <MX_FREERTOS_Init+0x68>)
 8000e0e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000e10:	4a0e      	ldr	r2, [pc, #56]	; (8000e4c <MX_FREERTOS_Init+0x6c>)
 8000e12:	2100      	movs	r1, #0
 8000e14:	480e      	ldr	r0, [pc, #56]	; (8000e50 <MX_FREERTOS_Init+0x70>)
 8000e16:	f015 f9c7 	bl	80161a8 <osThreadNew>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	4a0d      	ldr	r2, [pc, #52]	; (8000e54 <MX_FREERTOS_Init+0x74>)
 8000e1e:	6013      	str	r3, [r2, #0]

  /* creation of AccMeassure */
  AccMeassureHandle = osThreadNew(StartAccMeassureTask, NULL, &AccMeassure_attributes);
 8000e20:	4a0d      	ldr	r2, [pc, #52]	; (8000e58 <MX_FREERTOS_Init+0x78>)
 8000e22:	2100      	movs	r1, #0
 8000e24:	480d      	ldr	r0, [pc, #52]	; (8000e5c <MX_FREERTOS_Init+0x7c>)
 8000e26:	f015 f9bf 	bl	80161a8 <osThreadNew>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	4a0c      	ldr	r2, [pc, #48]	; (8000e60 <MX_FREERTOS_Init+0x80>)
 8000e2e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	0801c980 	.word	0x0801c980
 8000e38:	0801c604 	.word	0x0801c604
 8000e3c:	0801c6c8 	.word	0x0801c6c8
 8000e40:	0801c62c 	.word	0x0801c62c
 8000e44:	0801c958 	.word	0x0801c958
 8000e48:	24004474 	.word	0x24004474
 8000e4c:	0801c910 	.word	0x0801c910
 8000e50:	08000e65 	.word	0x08000e65
 8000e54:	24000410 	.word	0x24000410
 8000e58:	0801c934 	.word	0x0801c934
 8000e5c:	08000f19 	.word	0x08000f19
 8000e60:	24000414 	.word	0x24000414

08000e64 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08c      	sub	sp, #48	; 0x30
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	Vec3 Pos, Acc, Vel;
	int flag = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Infinite loop */
  for(;;)
  {
	if(HAL_GPIO_ReadPin(UserButton_GPIO_Port, UserButton_Pin))
 8000e70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e74:	4821      	ldr	r0, [pc, #132]	; (8000efc <StartDefaultTask+0x98>)
 8000e76:	f004 fd35 	bl	80058e4 <HAL_GPIO_ReadPin>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d038      	beq.n	8000ef2 <StartDefaultTask+0x8e>
	{
		LOG("PUSHED BUTTON");
 8000e80:	f000 fff0 	bl	8001e64 <HAL_GetTick>
 8000e84:	4601      	mov	r1, r0
 8000e86:	f240 1315 	movw	r3, #277	; 0x115
 8000e8a:	4a1d      	ldr	r2, [pc, #116]	; (8000f00 <StartDefaultTask+0x9c>)
 8000e8c:	481d      	ldr	r0, [pc, #116]	; (8000f04 <StartDefaultTask+0xa0>)
 8000e8e:	f019 fc6b 	bl	801a768 <iprintf>
 8000e92:	481d      	ldr	r0, [pc, #116]	; (8000f08 <StartDefaultTask+0xa4>)
 8000e94:	f019 fc68 	bl	801a768 <iprintf>
 8000e98:	481c      	ldr	r0, [pc, #112]	; (8000f0c <StartDefaultTask+0xa8>)
 8000e9a:	f019 fc65 	bl	801a768 <iprintf>
		//GNSS_GetUniqID(&GNSS_Handle);
		if(flag == 0)
 8000e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d113      	bne.n	8000ecc <StartDefaultTask+0x68>
		{
			LOG("Receive DMA");
 8000ea4:	f000 ffde 	bl	8001e64 <HAL_GetTick>
 8000ea8:	4601      	mov	r1, r0
 8000eaa:	f240 1319 	movw	r3, #281	; 0x119
 8000eae:	4a14      	ldr	r2, [pc, #80]	; (8000f00 <StartDefaultTask+0x9c>)
 8000eb0:	4814      	ldr	r0, [pc, #80]	; (8000f04 <StartDefaultTask+0xa0>)
 8000eb2:	f019 fc59 	bl	801a768 <iprintf>
 8000eb6:	4816      	ldr	r0, [pc, #88]	; (8000f10 <StartDefaultTask+0xac>)
 8000eb8:	f019 fc56 	bl	801a768 <iprintf>
 8000ebc:	4813      	ldr	r0, [pc, #76]	; (8000f0c <StartDefaultTask+0xa8>)
 8000ebe:	f019 fc53 	bl	801a768 <iprintf>
			Receive_DMA();
 8000ec2:	f7ff ff5b 	bl	8000d7c <Receive_DMA>
			flag = 1;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000eca:	e012      	b.n	8000ef2 <StartDefaultTask+0x8e>
		}
		else
		{
			LOG("Receive IT");
 8000ecc:	f000 ffca 	bl	8001e64 <HAL_GetTick>
 8000ed0:	4601      	mov	r1, r0
 8000ed2:	f240 131f 	movw	r3, #287	; 0x11f
 8000ed6:	4a0a      	ldr	r2, [pc, #40]	; (8000f00 <StartDefaultTask+0x9c>)
 8000ed8:	480a      	ldr	r0, [pc, #40]	; (8000f04 <StartDefaultTask+0xa0>)
 8000eda:	f019 fc45 	bl	801a768 <iprintf>
 8000ede:	480d      	ldr	r0, [pc, #52]	; (8000f14 <StartDefaultTask+0xb0>)
 8000ee0:	f019 fc42 	bl	801a768 <iprintf>
 8000ee4:	4809      	ldr	r0, [pc, #36]	; (8000f0c <StartDefaultTask+0xa8>)
 8000ee6:	f019 fc3f 	bl	801a768 <iprintf>
			Receive_IT();
 8000eea:	f7ff ff13 	bl	8000d14 <Receive_IT>
			flag = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
//	Vel = GetVelocity();
	//LOG("Vel: %f, \t%f, \t%f\tPos: %f, \t%f, \t%f", Vel.x, Vel.y, Vel.z, Pos.x, Pos.y, Pos.z);
	//LOG("INTERRUPTS: %d, inter_flag: %d, UART state: %d", INTERRUPTS, inter_flag, GNSS_Handle.huart->RxState);
	//GNSS_GetPVTData(&GNSS_Handle);
	//GNSS_GetPVTData(&GNSS_Handle);
    osDelay(1000);
 8000ef2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ef6:	f015 f9e9 	bl	80162cc <osDelay>
	if(HAL_GPIO_ReadPin(UserButton_GPIO_Port, UserButton_Pin))
 8000efa:	e7b9      	b.n	8000e70 <StartDefaultTask+0xc>
 8000efc:	58020800 	.word	0x58020800
 8000f00:	0801c994 	.word	0x0801c994
 8000f04:	0801c604 	.word	0x0801c604
 8000f08:	0801c6d4 	.word	0x0801c6d4
 8000f0c:	0801c62c 	.word	0x0801c62c
 8000f10:	0801c6e4 	.word	0x0801c6e4
 8000f14:	0801c6f0 	.word	0x0801c6f0

08000f18 <StartAccMeassureTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAccMeassureTask */
void StartAccMeassureTask(void *argument)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAccMeassureTask */
  /* Infinite loop */
	Bmx160_init();
 8000f20:	f017 ffd4 	bl	8018ecc <Bmx160_init>
	LOG("After INIT");
 8000f24:	f000 ff9e 	bl	8001e64 <HAL_GetTick>
 8000f28:	4601      	mov	r1, r0
 8000f2a:	f44f 73aa 	mov.w	r3, #340	; 0x154
 8000f2e:	4a37      	ldr	r2, [pc, #220]	; (800100c <StartAccMeassureTask+0xf4>)
 8000f30:	4837      	ldr	r0, [pc, #220]	; (8001010 <StartAccMeassureTask+0xf8>)
 8000f32:	f019 fc19 	bl	801a768 <iprintf>
 8000f36:	4837      	ldr	r0, [pc, #220]	; (8001014 <StartAccMeassureTask+0xfc>)
 8000f38:	f019 fc16 	bl	801a768 <iprintf>
 8000f3c:	4836      	ldr	r0, [pc, #216]	; (8001018 <StartAccMeassureTask+0x100>)
 8000f3e:	f019 fc13 	bl	801a768 <iprintf>
	Bmx160_getAllData(&Omagn, &Ogyro, &Oaccel);
 8000f42:	4a36      	ldr	r2, [pc, #216]	; (800101c <StartAccMeassureTask+0x104>)
 8000f44:	4936      	ldr	r1, [pc, #216]	; (8001020 <StartAccMeassureTask+0x108>)
 8000f46:	4837      	ldr	r0, [pc, #220]	; (8001024 <StartAccMeassureTask+0x10c>)
 8000f48:	f018 f8a4 	bl	8019094 <Bmx160_getAllData>
	SensorData.Acc.x = Oaccel.x;
 8000f4c:	4b33      	ldr	r3, [pc, #204]	; (800101c <StartAccMeassureTask+0x104>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a35      	ldr	r2, [pc, #212]	; (8001028 <StartAccMeassureTask+0x110>)
 8000f52:	60d3      	str	r3, [r2, #12]
	SensorData.Acc.y = Oaccel.y;
 8000f54:	4b31      	ldr	r3, [pc, #196]	; (800101c <StartAccMeassureTask+0x104>)
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	4a33      	ldr	r2, [pc, #204]	; (8001028 <StartAccMeassureTask+0x110>)
 8000f5a:	6113      	str	r3, [r2, #16]
	SensorData.Acc.z = Oaccel.z;
 8000f5c:	4b2f      	ldr	r3, [pc, #188]	; (800101c <StartAccMeassureTask+0x104>)
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	4a31      	ldr	r2, [pc, #196]	; (8001028 <StartAccMeassureTask+0x110>)
 8000f62:	6153      	str	r3, [r2, #20]
	SensorData.Gyro.x = Ogyro.x;
 8000f64:	4b2e      	ldr	r3, [pc, #184]	; (8001020 <StartAccMeassureTask+0x108>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a2f      	ldr	r2, [pc, #188]	; (8001028 <StartAccMeassureTask+0x110>)
 8000f6a:	6193      	str	r3, [r2, #24]
	SensorData.Gyro.y = Ogyro.y;
 8000f6c:	4b2c      	ldr	r3, [pc, #176]	; (8001020 <StartAccMeassureTask+0x108>)
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	4a2d      	ldr	r2, [pc, #180]	; (8001028 <StartAccMeassureTask+0x110>)
 8000f72:	61d3      	str	r3, [r2, #28]
	SensorData.Gyro.z = Ogyro.z;
 8000f74:	4b2a      	ldr	r3, [pc, #168]	; (8001020 <StartAccMeassureTask+0x108>)
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	4a2b      	ldr	r2, [pc, #172]	; (8001028 <StartAccMeassureTask+0x110>)
 8000f7a:	6213      	str	r3, [r2, #32]
	SensorData.Mag.x = Omagn.x;
 8000f7c:	4b29      	ldr	r3, [pc, #164]	; (8001024 <StartAccMeassureTask+0x10c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a29      	ldr	r2, [pc, #164]	; (8001028 <StartAccMeassureTask+0x110>)
 8000f82:	6013      	str	r3, [r2, #0]
	SensorData.Mag.y = Omagn.y;
 8000f84:	4b27      	ldr	r3, [pc, #156]	; (8001024 <StartAccMeassureTask+0x10c>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	4a27      	ldr	r2, [pc, #156]	; (8001028 <StartAccMeassureTask+0x110>)
 8000f8a:	6053      	str	r3, [r2, #4]
	SensorData.Mag.z = Omagn.z;
 8000f8c:	4b25      	ldr	r3, [pc, #148]	; (8001024 <StartAccMeassureTask+0x10c>)
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	4a25      	ldr	r2, [pc, #148]	; (8001028 <StartAccMeassureTask+0x110>)
 8000f92:	6093      	str	r3, [r2, #8]
	SensorData.SensorTime = Omagn.sensortime;
 8000f94:	4b23      	ldr	r3, [pc, #140]	; (8001024 <StartAccMeassureTask+0x10c>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	4a23      	ldr	r2, [pc, #140]	; (8001028 <StartAccMeassureTask+0x110>)
 8000f9a:	6253      	str	r3, [r2, #36]	; 0x24
	InitAlgorithms(&SensorData);
 8000f9c:	4822      	ldr	r0, [pc, #136]	; (8001028 <StartAccMeassureTask+0x110>)
 8000f9e:	f00b ff41 	bl	800ce24 <InitAlgorithms>
//			osDelay(5);
//		}
//		printf("%f %f %f\n\r", (sum_x/((float)(steps))), (sum_y/((float)(steps))), (sum_z/((float)(steps))));
//		sum_x = 0.0f; sum_y = 0.0f; sum_z = 0.0f;
//	}
	Bmx160_getAllData(&Omagn, &Ogyro, &Oaccel);
 8000fa2:	4a1e      	ldr	r2, [pc, #120]	; (800101c <StartAccMeassureTask+0x104>)
 8000fa4:	491e      	ldr	r1, [pc, #120]	; (8001020 <StartAccMeassureTask+0x108>)
 8000fa6:	481f      	ldr	r0, [pc, #124]	; (8001024 <StartAccMeassureTask+0x10c>)
 8000fa8:	f018 f874 	bl	8019094 <Bmx160_getAllData>
	SensorData.Acc.x = Oaccel.x;
 8000fac:	4b1b      	ldr	r3, [pc, #108]	; (800101c <StartAccMeassureTask+0x104>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a1d      	ldr	r2, [pc, #116]	; (8001028 <StartAccMeassureTask+0x110>)
 8000fb2:	60d3      	str	r3, [r2, #12]
	SensorData.Acc.y = Oaccel.y;
 8000fb4:	4b19      	ldr	r3, [pc, #100]	; (800101c <StartAccMeassureTask+0x104>)
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	4a1b      	ldr	r2, [pc, #108]	; (8001028 <StartAccMeassureTask+0x110>)
 8000fba:	6113      	str	r3, [r2, #16]
	SensorData.Acc.z = Oaccel.z;
 8000fbc:	4b17      	ldr	r3, [pc, #92]	; (800101c <StartAccMeassureTask+0x104>)
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	4a19      	ldr	r2, [pc, #100]	; (8001028 <StartAccMeassureTask+0x110>)
 8000fc2:	6153      	str	r3, [r2, #20]
	SensorData.Gyro.x = Ogyro.x;
 8000fc4:	4b16      	ldr	r3, [pc, #88]	; (8001020 <StartAccMeassureTask+0x108>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a17      	ldr	r2, [pc, #92]	; (8001028 <StartAccMeassureTask+0x110>)
 8000fca:	6193      	str	r3, [r2, #24]
	SensorData.Gyro.y = Ogyro.y;
 8000fcc:	4b14      	ldr	r3, [pc, #80]	; (8001020 <StartAccMeassureTask+0x108>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	4a15      	ldr	r2, [pc, #84]	; (8001028 <StartAccMeassureTask+0x110>)
 8000fd2:	61d3      	str	r3, [r2, #28]
	SensorData.Gyro.z = Ogyro.z;
 8000fd4:	4b12      	ldr	r3, [pc, #72]	; (8001020 <StartAccMeassureTask+0x108>)
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	4a13      	ldr	r2, [pc, #76]	; (8001028 <StartAccMeassureTask+0x110>)
 8000fda:	6213      	str	r3, [r2, #32]
	SensorData.Mag.x = Omagn.x;
 8000fdc:	4b11      	ldr	r3, [pc, #68]	; (8001024 <StartAccMeassureTask+0x10c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a11      	ldr	r2, [pc, #68]	; (8001028 <StartAccMeassureTask+0x110>)
 8000fe2:	6013      	str	r3, [r2, #0]
	SensorData.Mag.y = Omagn.y;
 8000fe4:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <StartAccMeassureTask+0x10c>)
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	4a0f      	ldr	r2, [pc, #60]	; (8001028 <StartAccMeassureTask+0x110>)
 8000fea:	6053      	str	r3, [r2, #4]
	SensorData.Mag.z = Omagn.z;
 8000fec:	4b0d      	ldr	r3, [pc, #52]	; (8001024 <StartAccMeassureTask+0x10c>)
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	4a0d      	ldr	r2, [pc, #52]	; (8001028 <StartAccMeassureTask+0x110>)
 8000ff2:	6093      	str	r3, [r2, #8]
	SensorData.SensorTime = Omagn.sensortime;
 8000ff4:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <StartAccMeassureTask+0x10c>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	4a0b      	ldr	r2, [pc, #44]	; (8001028 <StartAccMeassureTask+0x110>)
 8000ffa:	6253      	str	r3, [r2, #36]	; 0x24
	MadgwickUpdate(&SensorData);
 8000ffc:	480a      	ldr	r0, [pc, #40]	; (8001028 <StartAccMeassureTask+0x110>)
 8000ffe:	f00b ffa5 	bl	800cf4c <MadgwickUpdate>
//	//LOG("Raw:0,0,0,0,0,0,%d,%d,%d\n\r", mx, my, mz);
//	LOG("Raw:%f,%f,%f,%f,%f,%f,%f,%f,%f\n\r",
//			SensorData.Acc.x, SensorData.Acc.y, SensorData.Acc.z,
//			SensorData.Gyro.x, SensorData.Gyro.y, SensorData.Gyro.z,
//			SensorData.Mag.x, SensorData.Mag.y, SensorData.Mag.z);
	osDelay(1);
 8001002:	2001      	movs	r0, #1
 8001004:	f015 f962 	bl	80162cc <osDelay>
	Bmx160_getAllData(&Omagn, &Ogyro, &Oaccel);
 8001008:	e7cb      	b.n	8000fa2 <StartAccMeassureTask+0x8a>
 800100a:	bf00      	nop
 800100c:	0801c9a8 	.word	0x0801c9a8
 8001010:	0801c604 	.word	0x0801c604
 8001014:	0801c6fc 	.word	0x0801c6fc
 8001018:	0801c62c 	.word	0x0801c62c
 800101c:	240003b8 	.word	0x240003b8
 8001020:	240003c8 	.word	0x240003c8
 8001024:	240003a8 	.word	0x240003a8
 8001028:	240003d8 	.word	0x240003d8

0800102c <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08c      	sub	sp, #48	; 0x30
 8001030:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001032:	f107 031c 	add.w	r3, r7, #28
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
 8001040:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001042:	4b57      	ldr	r3, [pc, #348]	; (80011a0 <MX_GPIO_Init+0x174>)
 8001044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001048:	4a55      	ldr	r2, [pc, #340]	; (80011a0 <MX_GPIO_Init+0x174>)
 800104a:	f043 0304 	orr.w	r3, r3, #4
 800104e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001052:	4b53      	ldr	r3, [pc, #332]	; (80011a0 <MX_GPIO_Init+0x174>)
 8001054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001058:	f003 0304 	and.w	r3, r3, #4
 800105c:	61bb      	str	r3, [r7, #24]
 800105e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001060:	4b4f      	ldr	r3, [pc, #316]	; (80011a0 <MX_GPIO_Init+0x174>)
 8001062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001066:	4a4e      	ldr	r2, [pc, #312]	; (80011a0 <MX_GPIO_Init+0x174>)
 8001068:	f043 0320 	orr.w	r3, r3, #32
 800106c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001070:	4b4b      	ldr	r3, [pc, #300]	; (80011a0 <MX_GPIO_Init+0x174>)
 8001072:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001076:	f003 0320 	and.w	r3, r3, #32
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800107e:	4b48      	ldr	r3, [pc, #288]	; (80011a0 <MX_GPIO_Init+0x174>)
 8001080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001084:	4a46      	ldr	r2, [pc, #280]	; (80011a0 <MX_GPIO_Init+0x174>)
 8001086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800108a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800108e:	4b44      	ldr	r3, [pc, #272]	; (80011a0 <MX_GPIO_Init+0x174>)
 8001090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001098:	613b      	str	r3, [r7, #16]
 800109a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800109c:	4b40      	ldr	r3, [pc, #256]	; (80011a0 <MX_GPIO_Init+0x174>)
 800109e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a2:	4a3f      	ldr	r2, [pc, #252]	; (80011a0 <MX_GPIO_Init+0x174>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ac:	4b3c      	ldr	r3, [pc, #240]	; (80011a0 <MX_GPIO_Init+0x174>)
 80010ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ba:	4b39      	ldr	r3, [pc, #228]	; (80011a0 <MX_GPIO_Init+0x174>)
 80010bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c0:	4a37      	ldr	r2, [pc, #220]	; (80011a0 <MX_GPIO_Init+0x174>)
 80010c2:	f043 0302 	orr.w	r3, r3, #2
 80010c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ca:	4b35      	ldr	r3, [pc, #212]	; (80011a0 <MX_GPIO_Init+0x174>)
 80010cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d0:	f003 0302 	and.w	r3, r3, #2
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010d8:	4b31      	ldr	r3, [pc, #196]	; (80011a0 <MX_GPIO_Init+0x174>)
 80010da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010de:	4a30      	ldr	r2, [pc, #192]	; (80011a0 <MX_GPIO_Init+0x174>)
 80010e0:	f043 0308 	orr.w	r3, r3, #8
 80010e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010e8:	4b2d      	ldr	r3, [pc, #180]	; (80011a0 <MX_GPIO_Init+0x174>)
 80010ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ee:	f003 0308 	and.w	r3, r3, #8
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010f6:	4b2a      	ldr	r3, [pc, #168]	; (80011a0 <MX_GPIO_Init+0x174>)
 80010f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010fc:	4a28      	ldr	r2, [pc, #160]	; (80011a0 <MX_GPIO_Init+0x174>)
 80010fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001102:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001106:	4b26      	ldr	r3, [pc, #152]	; (80011a0 <MX_GPIO_Init+0x174>)
 8001108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800110c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001110:	603b      	str	r3, [r7, #0]
 8001112:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED3_GPIO_Port, USR_LED3_Pin, GPIO_PIN_RESET);
 8001114:	2200      	movs	r2, #0
 8001116:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800111a:	4822      	ldr	r0, [pc, #136]	; (80011a4 <MX_GPIO_Init+0x178>)
 800111c:	f004 fbfa 	bl	8005914 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001120:	2200      	movs	r2, #0
 8001122:	2140      	movs	r1, #64	; 0x40
 8001124:	4820      	ldr	r0, [pc, #128]	; (80011a8 <MX_GPIO_Init+0x17c>)
 8001126:	f004 fbf5 	bl	8005914 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UserButton_Pin;
 800112a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800112e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001130:	2300      	movs	r3, #0
 8001132:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UserButton_GPIO_Port, &GPIO_InitStruct);
 8001138:	f107 031c 	add.w	r3, r7, #28
 800113c:	4619      	mov	r1, r3
 800113e:	481b      	ldr	r0, [pc, #108]	; (80011ac <MX_GPIO_Init+0x180>)
 8001140:	f004 fa20 	bl	8005584 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED3_Pin;
 8001144:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001148:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114a:	2301      	movs	r3, #1
 800114c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001152:	2300      	movs	r3, #0
 8001154:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USR_LED3_GPIO_Port, &GPIO_InitStruct);
 8001156:	f107 031c 	add.w	r3, r7, #28
 800115a:	4619      	mov	r1, r3
 800115c:	4811      	ldr	r0, [pc, #68]	; (80011a4 <MX_GPIO_Init+0x178>)
 800115e:	f004 fa11 	bl	8005584 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001162:	2340      	movs	r3, #64	; 0x40
 8001164:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001166:	2301      	movs	r3, #1
 8001168:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116e:	2300      	movs	r3, #0
 8001170:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001172:	f107 031c 	add.w	r3, r7, #28
 8001176:	4619      	mov	r1, r3
 8001178:	480b      	ldr	r0, [pc, #44]	; (80011a8 <MX_GPIO_Init+0x17c>)
 800117a:	f004 fa03 	bl	8005584 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800117e:	2380      	movs	r3, #128	; 0x80
 8001180:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001182:	2300      	movs	r3, #0
 8001184:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800118a:	f107 031c 	add.w	r3, r7, #28
 800118e:	4619      	mov	r1, r3
 8001190:	4805      	ldr	r0, [pc, #20]	; (80011a8 <MX_GPIO_Init+0x17c>)
 8001192:	f004 f9f7 	bl	8005584 <HAL_GPIO_Init>

}
 8001196:	bf00      	nop
 8001198:	3730      	adds	r7, #48	; 0x30
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	58024400 	.word	0x58024400
 80011a4:	58020400 	.word	0x58020400
 80011a8:	58021800 	.word	0x58021800
 80011ac:	58020800 	.word	0x58020800

080011b0 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80011b4:	4b1c      	ldr	r3, [pc, #112]	; (8001228 <MX_I2C2_Init+0x78>)
 80011b6:	4a1d      	ldr	r2, [pc, #116]	; (800122c <MX_I2C2_Init+0x7c>)
 80011b8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0040163A;
 80011ba:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <MX_I2C2_Init+0x78>)
 80011bc:	4a1c      	ldr	r2, [pc, #112]	; (8001230 <MX_I2C2_Init+0x80>)
 80011be:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80011c0:	4b19      	ldr	r3, [pc, #100]	; (8001228 <MX_I2C2_Init+0x78>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011c6:	4b18      	ldr	r3, [pc, #96]	; (8001228 <MX_I2C2_Init+0x78>)
 80011c8:	2201      	movs	r2, #1
 80011ca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011cc:	4b16      	ldr	r3, [pc, #88]	; (8001228 <MX_I2C2_Init+0x78>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80011d2:	4b15      	ldr	r3, [pc, #84]	; (8001228 <MX_I2C2_Init+0x78>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011d8:	4b13      	ldr	r3, [pc, #76]	; (8001228 <MX_I2C2_Init+0x78>)
 80011da:	2200      	movs	r2, #0
 80011dc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011de:	4b12      	ldr	r3, [pc, #72]	; (8001228 <MX_I2C2_Init+0x78>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011e4:	4b10      	ldr	r3, [pc, #64]	; (8001228 <MX_I2C2_Init+0x78>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80011ea:	480f      	ldr	r0, [pc, #60]	; (8001228 <MX_I2C2_Init+0x78>)
 80011ec:	f004 fbac 	bl	8005948 <HAL_I2C_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80011f6:	f000 f93f 	bl	8001478 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011fa:	2100      	movs	r1, #0
 80011fc:	480a      	ldr	r0, [pc, #40]	; (8001228 <MX_I2C2_Init+0x78>)
 80011fe:	f005 f8af 	bl	8006360 <HAL_I2CEx_ConfigAnalogFilter>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001208:	f000 f936 	bl	8001478 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800120c:	2100      	movs	r1, #0
 800120e:	4806      	ldr	r0, [pc, #24]	; (8001228 <MX_I2C2_Init+0x78>)
 8001210:	f005 f8f1 	bl	80063f6 <HAL_I2CEx_ConfigDigitalFilter>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800121a:	f000 f92d 	bl	8001478 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C2);
 800121e:	2002      	movs	r0, #2
 8001220:	f005 f936 	bl	8006490 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001224:	bf00      	nop
 8001226:	bd80      	pop	{r7, pc}
 8001228:	240044c8 	.word	0x240044c8
 800122c:	40005800 	.word	0x40005800
 8001230:	0040163a 	.word	0x0040163a

08001234 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b0ba      	sub	sp, #232	; 0xe8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800124c:	f107 0310 	add.w	r3, r7, #16
 8001250:	22c0      	movs	r2, #192	; 0xc0
 8001252:	2100      	movs	r1, #0
 8001254:	4618      	mov	r0, r3
 8001256:	f019 fadc 	bl	801a812 <memset>
  if(i2cHandle->Instance==I2C2)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a26      	ldr	r2, [pc, #152]	; (80012f8 <HAL_I2C_MspInit+0xc4>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d145      	bne.n	80012f0 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001264:	f04f 0208 	mov.w	r2, #8
 8001268:	f04f 0300 	mov.w	r3, #0
 800126c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001270:	2300      	movs	r3, #0
 8001272:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001276:	f107 0310 	add.w	r3, r7, #16
 800127a:	4618      	mov	r0, r3
 800127c:	f006 fae6 	bl	800784c <HAL_RCCEx_PeriphCLKConfig>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001286:	f000 f8f7 	bl	8001478 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800128a:	4b1c      	ldr	r3, [pc, #112]	; (80012fc <HAL_I2C_MspInit+0xc8>)
 800128c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001290:	4a1a      	ldr	r2, [pc, #104]	; (80012fc <HAL_I2C_MspInit+0xc8>)
 8001292:	f043 0320 	orr.w	r3, r3, #32
 8001296:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800129a:	4b18      	ldr	r3, [pc, #96]	; (80012fc <HAL_I2C_MspInit+0xc8>)
 800129c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a0:	f003 0320 	and.w	r3, r3, #32
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012a8:	2303      	movs	r3, #3
 80012aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ae:	2312      	movs	r3, #18
 80012b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ba:	2300      	movs	r3, #0
 80012bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80012c0:	2304      	movs	r3, #4
 80012c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012c6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012ca:	4619      	mov	r1, r3
 80012cc:	480c      	ldr	r0, [pc, #48]	; (8001300 <HAL_I2C_MspInit+0xcc>)
 80012ce:	f004 f959 	bl	8005584 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80012d2:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <HAL_I2C_MspInit+0xc8>)
 80012d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012d8:	4a08      	ldr	r2, [pc, #32]	; (80012fc <HAL_I2C_MspInit+0xc8>)
 80012da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012de:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80012e2:	4b06      	ldr	r3, [pc, #24]	; (80012fc <HAL_I2C_MspInit+0xc8>)
 80012e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80012f0:	bf00      	nop
 80012f2:	37e8      	adds	r7, #232	; 0xe8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40005800 	.word	0x40005800
 80012fc:	58024400 	.word	0x58024400
 8001300:	58021400 	.word	0x58021400

08001304 <__io_putchar>:
 */
#include "logger.h"

#ifdef DEBUG
PUTCHAR_PROTOTYPE
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 800130c:	1d39      	adds	r1, r7, #4
 800130e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001312:	2201      	movs	r2, #1
 8001314:	4803      	ldr	r0, [pc, #12]	; (8001324 <__io_putchar+0x20>)
 8001316:	f008 fbef 	bl	8009af8 <HAL_UART_Transmit>

  return ch;
 800131a:	687b      	ldr	r3, [r7, #4]
}
 800131c:	4618      	mov	r0, r3
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	24004600 	.word	0x24004600

08001328 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800132c:	f000 fd4a 	bl	8001dc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001330:	f000 f816 	bl	8001360 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001334:	f7ff fe7a 	bl	800102c <MX_GPIO_Init>
  MX_DMA_Init();
 8001338:	f7ff fb64 	bl	8000a04 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 800133c:	f000 fc6a 	bl	8001c14 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 8001340:	f7ff ff36 	bl	80011b0 <MX_I2C2_Init>
  MX_ETH_Init();
 8001344:	f7ff fb86 	bl	8000a54 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001348:	f000 faf2 	bl	8001930 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 800134c:	f000 faa4 	bl	8001898 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001350:	f014 fee0 	bl	8016114 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001354:	f7ff fd44 	bl	8000de0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001358:	f014 ff00 	bl	801615c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800135c:	e7fe      	b.n	800135c <main+0x34>
	...

08001360 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b09c      	sub	sp, #112	; 0x70
 8001364:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001366:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136a:	224c      	movs	r2, #76	; 0x4c
 800136c:	2100      	movs	r1, #0
 800136e:	4618      	mov	r0, r3
 8001370:	f019 fa4f 	bl	801a812 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	2220      	movs	r2, #32
 8001378:	2100      	movs	r1, #0
 800137a:	4618      	mov	r0, r3
 800137c:	f019 fa49 	bl	801a812 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001380:	2002      	movs	r0, #2
 8001382:	f005 f9f1 	bl	8006768 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001386:	2300      	movs	r3, #0
 8001388:	603b      	str	r3, [r7, #0]
 800138a:	4b30      	ldr	r3, [pc, #192]	; (800144c <SystemClock_Config+0xec>)
 800138c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800138e:	4a2f      	ldr	r2, [pc, #188]	; (800144c <SystemClock_Config+0xec>)
 8001390:	f023 0301 	bic.w	r3, r3, #1
 8001394:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001396:	4b2d      	ldr	r3, [pc, #180]	; (800144c <SystemClock_Config+0xec>)
 8001398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	603b      	str	r3, [r7, #0]
 80013a0:	4b2b      	ldr	r3, [pc, #172]	; (8001450 <SystemClock_Config+0xf0>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	4a2a      	ldr	r2, [pc, #168]	; (8001450 <SystemClock_Config+0xf0>)
 80013a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013aa:	6193      	str	r3, [r2, #24]
 80013ac:	4b28      	ldr	r3, [pc, #160]	; (8001450 <SystemClock_Config+0xf0>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013b4:	603b      	str	r3, [r7, #0]
 80013b6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80013b8:	bf00      	nop
 80013ba:	4b25      	ldr	r3, [pc, #148]	; (8001450 <SystemClock_Config+0xf0>)
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013c6:	d1f8      	bne.n	80013ba <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013c8:	2301      	movs	r3, #1
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80013cc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80013d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013d2:	2302      	movs	r3, #2
 80013d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013d6:	2302      	movs	r3, #2
 80013d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013da:	2301      	movs	r3, #1
 80013dc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80013de:	2318      	movs	r3, #24
 80013e0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80013e2:	2302      	movs	r3, #2
 80013e4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013e6:	2304      	movs	r3, #4
 80013e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013ea:	2302      	movs	r3, #2
 80013ec:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80013ee:	230c      	movs	r3, #12
 80013f0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80013f2:	2300      	movs	r3, #0
 80013f4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fe:	4618      	mov	r0, r3
 8001400:	f005 f9fc 	bl	80067fc <HAL_RCC_OscConfig>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800140a:	f000 f835 	bl	8001478 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800140e:	233f      	movs	r3, #63	; 0x3f
 8001410:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001412:	2303      	movs	r3, #3
 8001414:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800141a:	2300      	movs	r3, #0
 800141c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800141e:	2300      	movs	r3, #0
 8001420:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001422:	2300      	movs	r3, #0
 8001424:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001426:	2300      	movs	r3, #0
 8001428:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800142a:	2300      	movs	r3, #0
 800142c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800142e:	1d3b      	adds	r3, r7, #4
 8001430:	2101      	movs	r1, #1
 8001432:	4618      	mov	r0, r3
 8001434:	f005 fe3c 	bl	80070b0 <HAL_RCC_ClockConfig>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 800143e:	f000 f81b 	bl	8001478 <Error_Handler>
  }
}
 8001442:	bf00      	nop
 8001444:	3770      	adds	r7, #112	; 0x70
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	58000400 	.word	0x58000400
 8001450:	58024800 	.word	0x58024800

08001454 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a04      	ldr	r2, [pc, #16]	; (8001474 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d101      	bne.n	800146a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001466:	f000 fce9 	bl	8001e3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40014800 	.word	0x40014800

08001478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800147c:	b672      	cpsid	i
}
 800147e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001480:	e7fe      	b.n	8001480 <Error_Handler+0x8>
	...

08001484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148a:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <HAL_MspInit+0x38>)
 800148c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001490:	4a0a      	ldr	r2, [pc, #40]	; (80014bc <HAL_MspInit+0x38>)
 8001492:	f043 0302 	orr.w	r3, r3, #2
 8001496:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800149a:	4b08      	ldr	r3, [pc, #32]	; (80014bc <HAL_MspInit+0x38>)
 800149c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014a8:	2200      	movs	r2, #0
 80014aa:	210f      	movs	r1, #15
 80014ac:	f06f 0001 	mvn.w	r0, #1
 80014b0:	f000 fde0 	bl	8002074 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014b4:	bf00      	nop
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	58024400 	.word	0x58024400

080014c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08e      	sub	sp, #56	; 0x38
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM17 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b0f      	cmp	r3, #15
 80014cc:	d842      	bhi.n	8001554 <HAL_InitTick+0x94>
  {
  HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0U);
 80014ce:	2200      	movs	r2, #0
 80014d0:	6879      	ldr	r1, [r7, #4]
 80014d2:	2076      	movs	r0, #118	; 0x76
 80014d4:	f000 fdce 	bl	8002074 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80014d8:	2076      	movs	r0, #118	; 0x76
 80014da:	f000 fde5 	bl	80020a8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80014de:	4a23      	ldr	r2, [pc, #140]	; (800156c <HAL_InitTick+0xac>)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80014e4:	4b22      	ldr	r3, [pc, #136]	; (8001570 <HAL_InitTick+0xb0>)
 80014e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014ea:	4a21      	ldr	r2, [pc, #132]	; (8001570 <HAL_InitTick+0xb0>)
 80014ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014f0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80014f4:	4b1e      	ldr	r3, [pc, #120]	; (8001570 <HAL_InitTick+0xb0>)
 80014f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014fe:	60bb      	str	r3, [r7, #8]
 8001500:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001502:	f107 020c 	add.w	r2, r7, #12
 8001506:	f107 0310 	add.w	r3, r7, #16
 800150a:	4611      	mov	r1, r2
 800150c:	4618      	mov	r0, r3
 800150e:	f006 f95b 	bl	80077c8 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001512:	f006 f943 	bl	800779c <HAL_RCC_GetPCLK2Freq>
 8001516:	6378      	str	r0, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800151a:	4a16      	ldr	r2, [pc, #88]	; (8001574 <HAL_InitTick+0xb4>)
 800151c:	fba2 2303 	umull	r2, r3, r2, r3
 8001520:	0c9b      	lsrs	r3, r3, #18
 8001522:	3b01      	subs	r3, #1
 8001524:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8001526:	4b14      	ldr	r3, [pc, #80]	; (8001578 <HAL_InitTick+0xb8>)
 8001528:	4a14      	ldr	r2, [pc, #80]	; (800157c <HAL_InitTick+0xbc>)
 800152a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 800152c:	4b12      	ldr	r3, [pc, #72]	; (8001578 <HAL_InitTick+0xb8>)
 800152e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001532:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8001534:	4a10      	ldr	r2, [pc, #64]	; (8001578 <HAL_InitTick+0xb8>)
 8001536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001538:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 800153a:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <HAL_InitTick+0xb8>)
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001540:	4b0d      	ldr	r3, [pc, #52]	; (8001578 <HAL_InitTick+0xb8>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8001546:	480c      	ldr	r0, [pc, #48]	; (8001578 <HAL_InitTick+0xb8>)
 8001548:	f007 ffac 	bl	80094a4 <HAL_TIM_Base_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d107      	bne.n	8001562 <HAL_InitTick+0xa2>
 8001552:	e001      	b.n	8001558 <HAL_InitTick+0x98>
    return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e005      	b.n	8001564 <HAL_InitTick+0xa4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8001558:	4807      	ldr	r0, [pc, #28]	; (8001578 <HAL_InitTick+0xb8>)
 800155a:	f008 f805 	bl	8009568 <HAL_TIM_Base_Start_IT>
 800155e:	4603      	mov	r3, r0
 8001560:	e000      	b.n	8001564 <HAL_InitTick+0xa4>
  }

  /* Return function status */
  return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
}
 8001564:	4618      	mov	r0, r3
 8001566:	3738      	adds	r7, #56	; 0x38
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	24000008 	.word	0x24000008
 8001570:	58024400 	.word	0x58024400
 8001574:	431bde83 	.word	0x431bde83
 8001578:	2400451c 	.word	0x2400451c
 800157c:	40014800 	.word	0x40014800

08001580 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001584:	e7fe      	b.n	8001584 <NMI_Handler+0x4>

08001586 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800158a:	e7fe      	b.n	800158a <HardFault_Handler+0x4>

0800158c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001590:	e7fe      	b.n	8001590 <MemManage_Handler+0x4>

08001592 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001596:	e7fe      	b.n	8001596 <BusFault_Handler+0x4>

08001598 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800159c:	e7fe      	b.n	800159c <UsageFault_Handler+0x4>

0800159e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80015b0:	4802      	ldr	r0, [pc, #8]	; (80015bc <DMA1_Stream0_IRQHandler+0x10>)
 80015b2:	f002 f8b1 	bl	8003718 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	24004694 	.word	0x24004694

080015c0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80015c4:	4802      	ldr	r0, [pc, #8]	; (80015d0 <DMA1_Stream1_IRQHandler+0x10>)
 80015c6:	f002 f8a7 	bl	8003718 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	2400470c 	.word	0x2400470c

080015d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80015d8:	4802      	ldr	r0, [pc, #8]	; (80015e4 <USART1_IRQHandler+0x10>)
 80015da:	f008 fbb3 	bl	8009d44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	2400456c 	.word	0x2400456c

080015e8 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80015ec:	4802      	ldr	r0, [pc, #8]	; (80015f8 <TIM17_IRQHandler+0x10>)
 80015ee:	f008 f833 	bl	8009658 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	2400451c 	.word	0x2400451c

080015fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  return 1;
 8001600:	2301      	movs	r3, #1
}
 8001602:	4618      	mov	r0, r3
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <_kill>:

int _kill(int pid, int sig)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001616:	f019 f94f 	bl	801a8b8 <__errno>
 800161a:	4603      	mov	r3, r0
 800161c:	2216      	movs	r2, #22
 800161e:	601a      	str	r2, [r3, #0]
  return -1;
 8001620:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001624:	4618      	mov	r0, r3
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <_exit>:

void _exit (int status)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001634:	f04f 31ff 	mov.w	r1, #4294967295
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7ff ffe7 	bl	800160c <_kill>
  while (1) {}    /* Make sure we hang here */
 800163e:	e7fe      	b.n	800163e <_exit+0x12>

08001640 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
 8001650:	e00a      	b.n	8001668 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001652:	f3af 8000 	nop.w
 8001656:	4601      	mov	r1, r0
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	1c5a      	adds	r2, r3, #1
 800165c:	60ba      	str	r2, [r7, #8]
 800165e:	b2ca      	uxtb	r2, r1
 8001660:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	3301      	adds	r3, #1
 8001666:	617b      	str	r3, [r7, #20]
 8001668:	697a      	ldr	r2, [r7, #20]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	429a      	cmp	r2, r3
 800166e:	dbf0      	blt.n	8001652 <_read+0x12>
  }

  return len;
 8001670:	687b      	ldr	r3, [r7, #4]
}
 8001672:	4618      	mov	r0, r3
 8001674:	3718      	adds	r7, #24
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b086      	sub	sp, #24
 800167e:	af00      	add	r7, sp, #0
 8001680:	60f8      	str	r0, [r7, #12]
 8001682:	60b9      	str	r1, [r7, #8]
 8001684:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001686:	2300      	movs	r3, #0
 8001688:	617b      	str	r3, [r7, #20]
 800168a:	e009      	b.n	80016a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	1c5a      	adds	r2, r3, #1
 8001690:	60ba      	str	r2, [r7, #8]
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff fe35 	bl	8001304 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	3301      	adds	r3, #1
 800169e:	617b      	str	r3, [r7, #20]
 80016a0:	697a      	ldr	r2, [r7, #20]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	dbf1      	blt.n	800168c <_write+0x12>
  }
  return len;
 80016a8:	687b      	ldr	r3, [r7, #4]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3718      	adds	r7, #24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <_close>:

int _close(int file)
{
 80016b2:	b480      	push	{r7}
 80016b4:	b083      	sub	sp, #12
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016be:	4618      	mov	r0, r3
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016ca:	b480      	push	{r7}
 80016cc:	b083      	sub	sp, #12
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
 80016d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016da:	605a      	str	r2, [r3, #4]
  return 0;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <_isatty>:

int _isatty(int file)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016f2:	2301      	movs	r3, #1
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3714      	adds	r7, #20
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
	...

0800171c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001724:	4a14      	ldr	r2, [pc, #80]	; (8001778 <_sbrk+0x5c>)
 8001726:	4b15      	ldr	r3, [pc, #84]	; (800177c <_sbrk+0x60>)
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001730:	4b13      	ldr	r3, [pc, #76]	; (8001780 <_sbrk+0x64>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d102      	bne.n	800173e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001738:	4b11      	ldr	r3, [pc, #68]	; (8001780 <_sbrk+0x64>)
 800173a:	4a12      	ldr	r2, [pc, #72]	; (8001784 <_sbrk+0x68>)
 800173c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800173e:	4b10      	ldr	r3, [pc, #64]	; (8001780 <_sbrk+0x64>)
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4413      	add	r3, r2
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	429a      	cmp	r2, r3
 800174a:	d207      	bcs.n	800175c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800174c:	f019 f8b4 	bl	801a8b8 <__errno>
 8001750:	4603      	mov	r3, r0
 8001752:	220c      	movs	r2, #12
 8001754:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001756:	f04f 33ff 	mov.w	r3, #4294967295
 800175a:	e009      	b.n	8001770 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800175c:	4b08      	ldr	r3, [pc, #32]	; (8001780 <_sbrk+0x64>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001762:	4b07      	ldr	r3, [pc, #28]	; (8001780 <_sbrk+0x64>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4413      	add	r3, r2
 800176a:	4a05      	ldr	r2, [pc, #20]	; (8001780 <_sbrk+0x64>)
 800176c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800176e:	68fb      	ldr	r3, [r7, #12]
}
 8001770:	4618      	mov	r0, r3
 8001772:	3718      	adds	r7, #24
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	24080000 	.word	0x24080000
 800177c:	00000400 	.word	0x00000400
 8001780:	24004568 	.word	0x24004568
 8001784:	2400a6e8 	.word	0x2400a6e8

08001788 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800178c:	4b37      	ldr	r3, [pc, #220]	; (800186c <SystemInit+0xe4>)
 800178e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001792:	4a36      	ldr	r2, [pc, #216]	; (800186c <SystemInit+0xe4>)
 8001794:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001798:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800179c:	4b34      	ldr	r3, [pc, #208]	; (8001870 <SystemInit+0xe8>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 030f 	and.w	r3, r3, #15
 80017a4:	2b06      	cmp	r3, #6
 80017a6:	d807      	bhi.n	80017b8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80017a8:	4b31      	ldr	r3, [pc, #196]	; (8001870 <SystemInit+0xe8>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f023 030f 	bic.w	r3, r3, #15
 80017b0:	4a2f      	ldr	r2, [pc, #188]	; (8001870 <SystemInit+0xe8>)
 80017b2:	f043 0307 	orr.w	r3, r3, #7
 80017b6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80017b8:	4b2e      	ldr	r3, [pc, #184]	; (8001874 <SystemInit+0xec>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a2d      	ldr	r2, [pc, #180]	; (8001874 <SystemInit+0xec>)
 80017be:	f043 0301 	orr.w	r3, r3, #1
 80017c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80017c4:	4b2b      	ldr	r3, [pc, #172]	; (8001874 <SystemInit+0xec>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80017ca:	4b2a      	ldr	r3, [pc, #168]	; (8001874 <SystemInit+0xec>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	4929      	ldr	r1, [pc, #164]	; (8001874 <SystemInit+0xec>)
 80017d0:	4b29      	ldr	r3, [pc, #164]	; (8001878 <SystemInit+0xf0>)
 80017d2:	4013      	ands	r3, r2
 80017d4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80017d6:	4b26      	ldr	r3, [pc, #152]	; (8001870 <SystemInit+0xe8>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0308 	and.w	r3, r3, #8
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d007      	beq.n	80017f2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80017e2:	4b23      	ldr	r3, [pc, #140]	; (8001870 <SystemInit+0xe8>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f023 030f 	bic.w	r3, r3, #15
 80017ea:	4a21      	ldr	r2, [pc, #132]	; (8001870 <SystemInit+0xe8>)
 80017ec:	f043 0307 	orr.w	r3, r3, #7
 80017f0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80017f2:	4b20      	ldr	r3, [pc, #128]	; (8001874 <SystemInit+0xec>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80017f8:	4b1e      	ldr	r3, [pc, #120]	; (8001874 <SystemInit+0xec>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80017fe:	4b1d      	ldr	r3, [pc, #116]	; (8001874 <SystemInit+0xec>)
 8001800:	2200      	movs	r2, #0
 8001802:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001804:	4b1b      	ldr	r3, [pc, #108]	; (8001874 <SystemInit+0xec>)
 8001806:	4a1d      	ldr	r2, [pc, #116]	; (800187c <SystemInit+0xf4>)
 8001808:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800180a:	4b1a      	ldr	r3, [pc, #104]	; (8001874 <SystemInit+0xec>)
 800180c:	4a1c      	ldr	r2, [pc, #112]	; (8001880 <SystemInit+0xf8>)
 800180e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001810:	4b18      	ldr	r3, [pc, #96]	; (8001874 <SystemInit+0xec>)
 8001812:	4a1c      	ldr	r2, [pc, #112]	; (8001884 <SystemInit+0xfc>)
 8001814:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001816:	4b17      	ldr	r3, [pc, #92]	; (8001874 <SystemInit+0xec>)
 8001818:	2200      	movs	r2, #0
 800181a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800181c:	4b15      	ldr	r3, [pc, #84]	; (8001874 <SystemInit+0xec>)
 800181e:	4a19      	ldr	r2, [pc, #100]	; (8001884 <SystemInit+0xfc>)
 8001820:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001822:	4b14      	ldr	r3, [pc, #80]	; (8001874 <SystemInit+0xec>)
 8001824:	2200      	movs	r2, #0
 8001826:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001828:	4b12      	ldr	r3, [pc, #72]	; (8001874 <SystemInit+0xec>)
 800182a:	4a16      	ldr	r2, [pc, #88]	; (8001884 <SystemInit+0xfc>)
 800182c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800182e:	4b11      	ldr	r3, [pc, #68]	; (8001874 <SystemInit+0xec>)
 8001830:	2200      	movs	r2, #0
 8001832:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001834:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <SystemInit+0xec>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a0e      	ldr	r2, [pc, #56]	; (8001874 <SystemInit+0xec>)
 800183a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800183e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001840:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <SystemInit+0xec>)
 8001842:	2200      	movs	r2, #0
 8001844:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001846:	4b10      	ldr	r3, [pc, #64]	; (8001888 <SystemInit+0x100>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	4b10      	ldr	r3, [pc, #64]	; (800188c <SystemInit+0x104>)
 800184c:	4013      	ands	r3, r2
 800184e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001852:	d202      	bcs.n	800185a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001854:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <SystemInit+0x108>)
 8001856:	2201      	movs	r2, #1
 8001858:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800185a:	4b0e      	ldr	r3, [pc, #56]	; (8001894 <SystemInit+0x10c>)
 800185c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001860:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001862:	bf00      	nop
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	e000ed00 	.word	0xe000ed00
 8001870:	52002000 	.word	0x52002000
 8001874:	58024400 	.word	0x58024400
 8001878:	eaf6ed7f 	.word	0xeaf6ed7f
 800187c:	02020200 	.word	0x02020200
 8001880:	01ff0000 	.word	0x01ff0000
 8001884:	01010280 	.word	0x01010280
 8001888:	5c001000 	.word	0x5c001000
 800188c:	ffff0000 	.word	0xffff0000
 8001890:	51008108 	.word	0x51008108
 8001894:	52004000 	.word	0x52004000

08001898 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800189c:	4b22      	ldr	r3, [pc, #136]	; (8001928 <MX_USART1_UART_Init+0x90>)
 800189e:	4a23      	ldr	r2, [pc, #140]	; (800192c <MX_USART1_UART_Init+0x94>)
 80018a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80018a2:	4b21      	ldr	r3, [pc, #132]	; (8001928 <MX_USART1_UART_Init+0x90>)
 80018a4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80018a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018aa:	4b1f      	ldr	r3, [pc, #124]	; (8001928 <MX_USART1_UART_Init+0x90>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018b0:	4b1d      	ldr	r3, [pc, #116]	; (8001928 <MX_USART1_UART_Init+0x90>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018b6:	4b1c      	ldr	r3, [pc, #112]	; (8001928 <MX_USART1_UART_Init+0x90>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018bc:	4b1a      	ldr	r3, [pc, #104]	; (8001928 <MX_USART1_UART_Init+0x90>)
 80018be:	220c      	movs	r2, #12
 80018c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018c2:	4b19      	ldr	r3, [pc, #100]	; (8001928 <MX_USART1_UART_Init+0x90>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018c8:	4b17      	ldr	r3, [pc, #92]	; (8001928 <MX_USART1_UART_Init+0x90>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018ce:	4b16      	ldr	r3, [pc, #88]	; (8001928 <MX_USART1_UART_Init+0x90>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018d4:	4b14      	ldr	r3, [pc, #80]	; (8001928 <MX_USART1_UART_Init+0x90>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018da:	4b13      	ldr	r3, [pc, #76]	; (8001928 <MX_USART1_UART_Init+0x90>)
 80018dc:	2200      	movs	r2, #0
 80018de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018e0:	4811      	ldr	r0, [pc, #68]	; (8001928 <MX_USART1_UART_Init+0x90>)
 80018e2:	f008 f8b9 	bl	8009a58 <HAL_UART_Init>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80018ec:	f7ff fdc4 	bl	8001478 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018f0:	2100      	movs	r1, #0
 80018f2:	480d      	ldr	r0, [pc, #52]	; (8001928 <MX_USART1_UART_Init+0x90>)
 80018f4:	f00a fe31 	bl	800c55a <HAL_UARTEx_SetTxFifoThreshold>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80018fe:	f7ff fdbb 	bl	8001478 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001902:	2100      	movs	r1, #0
 8001904:	4808      	ldr	r0, [pc, #32]	; (8001928 <MX_USART1_UART_Init+0x90>)
 8001906:	f00a fe66 	bl	800c5d6 <HAL_UARTEx_SetRxFifoThreshold>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001910:	f7ff fdb2 	bl	8001478 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001914:	4804      	ldr	r0, [pc, #16]	; (8001928 <MX_USART1_UART_Init+0x90>)
 8001916:	f00a fde7 	bl	800c4e8 <HAL_UARTEx_DisableFifoMode>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001920:	f7ff fdaa 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001924:	bf00      	nop
 8001926:	bd80      	pop	{r7, pc}
 8001928:	2400456c 	.word	0x2400456c
 800192c:	40011000 	.word	0x40011000

08001930 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001934:	4b22      	ldr	r3, [pc, #136]	; (80019c0 <MX_USART3_UART_Init+0x90>)
 8001936:	4a23      	ldr	r2, [pc, #140]	; (80019c4 <MX_USART3_UART_Init+0x94>)
 8001938:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800193a:	4b21      	ldr	r3, [pc, #132]	; (80019c0 <MX_USART3_UART_Init+0x90>)
 800193c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001940:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001942:	4b1f      	ldr	r3, [pc, #124]	; (80019c0 <MX_USART3_UART_Init+0x90>)
 8001944:	2200      	movs	r2, #0
 8001946:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001948:	4b1d      	ldr	r3, [pc, #116]	; (80019c0 <MX_USART3_UART_Init+0x90>)
 800194a:	2200      	movs	r2, #0
 800194c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800194e:	4b1c      	ldr	r3, [pc, #112]	; (80019c0 <MX_USART3_UART_Init+0x90>)
 8001950:	2200      	movs	r2, #0
 8001952:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001954:	4b1a      	ldr	r3, [pc, #104]	; (80019c0 <MX_USART3_UART_Init+0x90>)
 8001956:	220c      	movs	r2, #12
 8001958:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800195a:	4b19      	ldr	r3, [pc, #100]	; (80019c0 <MX_USART3_UART_Init+0x90>)
 800195c:	2200      	movs	r2, #0
 800195e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001960:	4b17      	ldr	r3, [pc, #92]	; (80019c0 <MX_USART3_UART_Init+0x90>)
 8001962:	2200      	movs	r2, #0
 8001964:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001966:	4b16      	ldr	r3, [pc, #88]	; (80019c0 <MX_USART3_UART_Init+0x90>)
 8001968:	2200      	movs	r2, #0
 800196a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800196c:	4b14      	ldr	r3, [pc, #80]	; (80019c0 <MX_USART3_UART_Init+0x90>)
 800196e:	2200      	movs	r2, #0
 8001970:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001972:	4b13      	ldr	r3, [pc, #76]	; (80019c0 <MX_USART3_UART_Init+0x90>)
 8001974:	2200      	movs	r2, #0
 8001976:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001978:	4811      	ldr	r0, [pc, #68]	; (80019c0 <MX_USART3_UART_Init+0x90>)
 800197a:	f008 f86d 	bl	8009a58 <HAL_UART_Init>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001984:	f7ff fd78 	bl	8001478 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001988:	2100      	movs	r1, #0
 800198a:	480d      	ldr	r0, [pc, #52]	; (80019c0 <MX_USART3_UART_Init+0x90>)
 800198c:	f00a fde5 	bl	800c55a <HAL_UARTEx_SetTxFifoThreshold>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001996:	f7ff fd6f 	bl	8001478 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800199a:	2100      	movs	r1, #0
 800199c:	4808      	ldr	r0, [pc, #32]	; (80019c0 <MX_USART3_UART_Init+0x90>)
 800199e:	f00a fe1a 	bl	800c5d6 <HAL_UARTEx_SetRxFifoThreshold>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80019a8:	f7ff fd66 	bl	8001478 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80019ac:	4804      	ldr	r0, [pc, #16]	; (80019c0 <MX_USART3_UART_Init+0x90>)
 80019ae:	f00a fd9b 	bl	800c4e8 <HAL_UARTEx_DisableFifoMode>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80019b8:	f7ff fd5e 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	24004600 	.word	0x24004600
 80019c4:	40004800 	.word	0x40004800

080019c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b0bc      	sub	sp, #240	; 0xf0
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019e0:	f107 0318 	add.w	r3, r7, #24
 80019e4:	22c0      	movs	r2, #192	; 0xc0
 80019e6:	2100      	movs	r1, #0
 80019e8:	4618      	mov	r0, r3
 80019ea:	f018 ff12 	bl	801a812 <memset>
  if(uartHandle->Instance==USART1)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a7f      	ldr	r2, [pc, #508]	; (8001bf0 <HAL_UART_MspInit+0x228>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	f040 80aa 	bne.w	8001b4e <HAL_UART_MspInit+0x186>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80019fa:	f04f 0201 	mov.w	r2, #1
 80019fe:	f04f 0300 	mov.w	r3, #0
 8001a02:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001a06:	2300      	movs	r3, #0
 8001a08:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a0c:	f107 0318 	add.w	r3, r7, #24
 8001a10:	4618      	mov	r0, r3
 8001a12:	f005 ff1b 	bl	800784c <HAL_RCCEx_PeriphCLKConfig>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8001a1c:	f7ff fd2c 	bl	8001478 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a20:	4b74      	ldr	r3, [pc, #464]	; (8001bf4 <HAL_UART_MspInit+0x22c>)
 8001a22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a26:	4a73      	ldr	r2, [pc, #460]	; (8001bf4 <HAL_UART_MspInit+0x22c>)
 8001a28:	f043 0310 	orr.w	r3, r3, #16
 8001a2c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001a30:	4b70      	ldr	r3, [pc, #448]	; (8001bf4 <HAL_UART_MspInit+0x22c>)
 8001a32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a36:	f003 0310 	and.w	r3, r3, #16
 8001a3a:	617b      	str	r3, [r7, #20]
 8001a3c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a3e:	4b6d      	ldr	r3, [pc, #436]	; (8001bf4 <HAL_UART_MspInit+0x22c>)
 8001a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a44:	4a6b      	ldr	r2, [pc, #428]	; (8001bf4 <HAL_UART_MspInit+0x22c>)
 8001a46:	f043 0302 	orr.w	r3, r3, #2
 8001a4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a4e:	4b69      	ldr	r3, [pc, #420]	; (8001bf4 <HAL_UART_MspInit+0x22c>)
 8001a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	613b      	str	r3, [r7, #16]
 8001a5a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a5c:	23c0      	movs	r3, #192	; 0xc0
 8001a5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a62:	2302      	movs	r3, #2
 8001a64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a74:	2307      	movs	r3, #7
 8001a76:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a7a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001a7e:	4619      	mov	r1, r3
 8001a80:	485d      	ldr	r0, [pc, #372]	; (8001bf8 <HAL_UART_MspInit+0x230>)
 8001a82:	f003 fd7f 	bl	8005584 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8001a86:	4b5d      	ldr	r3, [pc, #372]	; (8001bfc <HAL_UART_MspInit+0x234>)
 8001a88:	4a5d      	ldr	r2, [pc, #372]	; (8001c00 <HAL_UART_MspInit+0x238>)
 8001a8a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001a8c:	4b5b      	ldr	r3, [pc, #364]	; (8001bfc <HAL_UART_MspInit+0x234>)
 8001a8e:	2229      	movs	r2, #41	; 0x29
 8001a90:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a92:	4b5a      	ldr	r3, [pc, #360]	; (8001bfc <HAL_UART_MspInit+0x234>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a98:	4b58      	ldr	r3, [pc, #352]	; (8001bfc <HAL_UART_MspInit+0x234>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a9e:	4b57      	ldr	r3, [pc, #348]	; (8001bfc <HAL_UART_MspInit+0x234>)
 8001aa0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001aa4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001aa6:	4b55      	ldr	r3, [pc, #340]	; (8001bfc <HAL_UART_MspInit+0x234>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001aac:	4b53      	ldr	r3, [pc, #332]	; (8001bfc <HAL_UART_MspInit+0x234>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001ab2:	4b52      	ldr	r3, [pc, #328]	; (8001bfc <HAL_UART_MspInit+0x234>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ab8:	4b50      	ldr	r3, [pc, #320]	; (8001bfc <HAL_UART_MspInit+0x234>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001abe:	4b4f      	ldr	r3, [pc, #316]	; (8001bfc <HAL_UART_MspInit+0x234>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001ac4:	484d      	ldr	r0, [pc, #308]	; (8001bfc <HAL_UART_MspInit+0x234>)
 8001ac6:	f000 fafd 	bl	80020c4 <HAL_DMA_Init>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001ad0:	f7ff fcd2 	bl	8001478 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4a49      	ldr	r2, [pc, #292]	; (8001bfc <HAL_UART_MspInit+0x234>)
 8001ad8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001adc:	4a47      	ldr	r2, [pc, #284]	; (8001bfc <HAL_UART_MspInit+0x234>)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream1;
 8001ae2:	4b48      	ldr	r3, [pc, #288]	; (8001c04 <HAL_UART_MspInit+0x23c>)
 8001ae4:	4a48      	ldr	r2, [pc, #288]	; (8001c08 <HAL_UART_MspInit+0x240>)
 8001ae6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001ae8:	4b46      	ldr	r3, [pc, #280]	; (8001c04 <HAL_UART_MspInit+0x23c>)
 8001aea:	222a      	movs	r2, #42	; 0x2a
 8001aec:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001aee:	4b45      	ldr	r3, [pc, #276]	; (8001c04 <HAL_UART_MspInit+0x23c>)
 8001af0:	2240      	movs	r2, #64	; 0x40
 8001af2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001af4:	4b43      	ldr	r3, [pc, #268]	; (8001c04 <HAL_UART_MspInit+0x23c>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001afa:	4b42      	ldr	r3, [pc, #264]	; (8001c04 <HAL_UART_MspInit+0x23c>)
 8001afc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b00:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b02:	4b40      	ldr	r3, [pc, #256]	; (8001c04 <HAL_UART_MspInit+0x23c>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b08:	4b3e      	ldr	r3, [pc, #248]	; (8001c04 <HAL_UART_MspInit+0x23c>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001b0e:	4b3d      	ldr	r3, [pc, #244]	; (8001c04 <HAL_UART_MspInit+0x23c>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b14:	4b3b      	ldr	r3, [pc, #236]	; (8001c04 <HAL_UART_MspInit+0x23c>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b1a:	4b3a      	ldr	r3, [pc, #232]	; (8001c04 <HAL_UART_MspInit+0x23c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001b20:	4838      	ldr	r0, [pc, #224]	; (8001c04 <HAL_UART_MspInit+0x23c>)
 8001b22:	f000 facf 	bl	80020c4 <HAL_DMA_Init>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <HAL_UART_MspInit+0x168>
    {
      Error_Handler();
 8001b2c:	f7ff fca4 	bl	8001478 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4a34      	ldr	r2, [pc, #208]	; (8001c04 <HAL_UART_MspInit+0x23c>)
 8001b34:	67da      	str	r2, [r3, #124]	; 0x7c
 8001b36:	4a33      	ldr	r2, [pc, #204]	; (8001c04 <HAL_UART_MspInit+0x23c>)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	2105      	movs	r1, #5
 8001b40:	2025      	movs	r0, #37	; 0x25
 8001b42:	f000 fa97 	bl	8002074 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b46:	2025      	movs	r0, #37	; 0x25
 8001b48:	f000 faae 	bl	80020a8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001b4c:	e04b      	b.n	8001be6 <HAL_UART_MspInit+0x21e>
  else if(uartHandle->Instance==USART3)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a2e      	ldr	r2, [pc, #184]	; (8001c0c <HAL_UART_MspInit+0x244>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d146      	bne.n	8001be6 <HAL_UART_MspInit+0x21e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b58:	f04f 0202 	mov.w	r2, #2
 8001b5c:	f04f 0300 	mov.w	r3, #0
 8001b60:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001b64:	2300      	movs	r3, #0
 8001b66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b6a:	f107 0318 	add.w	r3, r7, #24
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f005 fe6c 	bl	800784c <HAL_RCCEx_PeriphCLKConfig>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <HAL_UART_MspInit+0x1b6>
      Error_Handler();
 8001b7a:	f7ff fc7d 	bl	8001478 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b7e:	4b1d      	ldr	r3, [pc, #116]	; (8001bf4 <HAL_UART_MspInit+0x22c>)
 8001b80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b84:	4a1b      	ldr	r2, [pc, #108]	; (8001bf4 <HAL_UART_MspInit+0x22c>)
 8001b86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b8a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b8e:	4b19      	ldr	r3, [pc, #100]	; (8001bf4 <HAL_UART_MspInit+0x22c>)
 8001b90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b9c:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <HAL_UART_MspInit+0x22c>)
 8001b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ba2:	4a14      	ldr	r2, [pc, #80]	; (8001bf4 <HAL_UART_MspInit+0x22c>)
 8001ba4:	f043 0308 	orr.w	r3, r3, #8
 8001ba8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bac:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <HAL_UART_MspInit+0x22c>)
 8001bae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bb2:	f003 0308 	and.w	r3, r3, #8
 8001bb6:	60bb      	str	r3, [r7, #8]
 8001bb8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bba:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001bd4:	2307      	movs	r3, #7
 8001bd6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bda:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001bde:	4619      	mov	r1, r3
 8001be0:	480b      	ldr	r0, [pc, #44]	; (8001c10 <HAL_UART_MspInit+0x248>)
 8001be2:	f003 fccf 	bl	8005584 <HAL_GPIO_Init>
}
 8001be6:	bf00      	nop
 8001be8:	37f0      	adds	r7, #240	; 0xf0
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40011000 	.word	0x40011000
 8001bf4:	58024400 	.word	0x58024400
 8001bf8:	58020400 	.word	0x58020400
 8001bfc:	24004694 	.word	0x24004694
 8001c00:	40020010 	.word	0x40020010
 8001c04:	2400470c 	.word	0x2400470c
 8001c08:	40020028 	.word	0x40020028
 8001c0c:	40004800 	.word	0x40004800
 8001c10:	58020c00 	.word	0x58020c00

08001c14 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001c18:	4b15      	ldr	r3, [pc, #84]	; (8001c70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c1a:	4a16      	ldr	r2, [pc, #88]	; (8001c74 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001c1c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001c1e:	4b14      	ldr	r3, [pc, #80]	; (8001c70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c20:	2209      	movs	r2, #9
 8001c22:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001c24:	4b12      	ldr	r3, [pc, #72]	; (8001c70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c26:	2202      	movs	r2, #2
 8001c28:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001c2a:	4b11      	ldr	r3, [pc, #68]	; (8001c70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001c30:	4b0f      	ldr	r3, [pc, #60]	; (8001c70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c32:	2202      	movs	r2, #2
 8001c34:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001c36:	4b0e      	ldr	r3, [pc, #56]	; (8001c70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c38:	2201      	movs	r2, #1
 8001c3a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	; (8001c70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001c42:	4b0b      	ldr	r3, [pc, #44]	; (8001c70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001c48:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001c4e:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c50:	2201      	movs	r2, #1
 8001c52:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001c54:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001c5a:	4805      	ldr	r0, [pc, #20]	; (8001c70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c5c:	f004 fc3c 	bl	80064d8 <HAL_PCD_Init>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001c66:	f7ff fc07 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	24004784 	.word	0x24004784
 8001c74:	40080000 	.word	0x40080000

08001c78 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b0ba      	sub	sp, #232	; 0xe8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c80:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
 8001c8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c90:	f107 0310 	add.w	r3, r7, #16
 8001c94:	22c0      	movs	r2, #192	; 0xc0
 8001c96:	2100      	movs	r1, #0
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f018 fdba 	bl	801a812 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a30      	ldr	r2, [pc, #192]	; (8001d64 <HAL_PCD_MspInit+0xec>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d159      	bne.n	8001d5c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001ca8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001cac:	f04f 0300 	mov.w	r3, #0
 8001cb0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001cb4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001cb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cbc:	f107 0310 	add.w	r3, r7, #16
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f005 fdc3 	bl	800784c <HAL_RCCEx_PeriphCLKConfig>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001ccc:	f7ff fbd4 	bl	8001478 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001cd0:	f004 fd84 	bl	80067dc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd4:	4b24      	ldr	r3, [pc, #144]	; (8001d68 <HAL_PCD_MspInit+0xf0>)
 8001cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cda:	4a23      	ldr	r2, [pc, #140]	; (8001d68 <HAL_PCD_MspInit+0xf0>)
 8001cdc:	f043 0301 	orr.w	r3, r3, #1
 8001ce0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ce4:	4b20      	ldr	r3, [pc, #128]	; (8001d68 <HAL_PCD_MspInit+0xf0>)
 8001ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001cf2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001cf6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d06:	2300      	movs	r3, #0
 8001d08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001d0c:	230a      	movs	r3, #10
 8001d0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d12:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d16:	4619      	mov	r1, r3
 8001d18:	4814      	ldr	r0, [pc, #80]	; (8001d6c <HAL_PCD_MspInit+0xf4>)
 8001d1a:	f003 fc33 	bl	8005584 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001d1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d26:	2300      	movs	r3, #0
 8001d28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001d32:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d36:	4619      	mov	r1, r3
 8001d38:	480c      	ldr	r0, [pc, #48]	; (8001d6c <HAL_PCD_MspInit+0xf4>)
 8001d3a:	f003 fc23 	bl	8005584 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001d3e:	4b0a      	ldr	r3, [pc, #40]	; (8001d68 <HAL_PCD_MspInit+0xf0>)
 8001d40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d44:	4a08      	ldr	r2, [pc, #32]	; (8001d68 <HAL_PCD_MspInit+0xf0>)
 8001d46:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001d4a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001d4e:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <HAL_PCD_MspInit+0xf0>)
 8001d50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d58:	60bb      	str	r3, [r7, #8]
 8001d5a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001d5c:	bf00      	nop
 8001d5e:	37e8      	adds	r7, #232	; 0xe8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40080000 	.word	0x40080000
 8001d68:	58024400 	.word	0x58024400
 8001d6c:	58020000 	.word	0x58020000

08001d70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001d70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001da8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d74:	f7ff fd08 	bl	8001788 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d78:	480c      	ldr	r0, [pc, #48]	; (8001dac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d7a:	490d      	ldr	r1, [pc, #52]	; (8001db0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d7c:	4a0d      	ldr	r2, [pc, #52]	; (8001db4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d80:	e002      	b.n	8001d88 <LoopCopyDataInit>

08001d82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d86:	3304      	adds	r3, #4

08001d88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d8c:	d3f9      	bcc.n	8001d82 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d8e:	4a0a      	ldr	r2, [pc, #40]	; (8001db8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d90:	4c0a      	ldr	r4, [pc, #40]	; (8001dbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d94:	e001      	b.n	8001d9a <LoopFillZerobss>

08001d96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d98:	3204      	adds	r2, #4

08001d9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d9c:	d3fb      	bcc.n	8001d96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d9e:	f018 fd91 	bl	801a8c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001da2:	f7ff fac1 	bl	8001328 <main>
  bx  lr
 8001da6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001da8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001dac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001db0:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 8001db4:	0801cf78 	.word	0x0801cf78
  ldr r2, =_sbss
 8001db8:	2400029c 	.word	0x2400029c
  ldr r4, =_ebss
 8001dbc:	2400a6e8 	.word	0x2400a6e8

08001dc0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dc0:	e7fe      	b.n	8001dc0 <ADC3_IRQHandler>
	...

08001dc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dca:	2003      	movs	r0, #3
 8001dcc:	f000 f947 	bl	800205e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001dd0:	f005 fb24 	bl	800741c <HAL_RCC_GetSysClockFreq>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	4b15      	ldr	r3, [pc, #84]	; (8001e2c <HAL_Init+0x68>)
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	0a1b      	lsrs	r3, r3, #8
 8001ddc:	f003 030f 	and.w	r3, r3, #15
 8001de0:	4913      	ldr	r1, [pc, #76]	; (8001e30 <HAL_Init+0x6c>)
 8001de2:	5ccb      	ldrb	r3, [r1, r3]
 8001de4:	f003 031f 	and.w	r3, r3, #31
 8001de8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dec:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001dee:	4b0f      	ldr	r3, [pc, #60]	; (8001e2c <HAL_Init+0x68>)
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	f003 030f 	and.w	r3, r3, #15
 8001df6:	4a0e      	ldr	r2, [pc, #56]	; (8001e30 <HAL_Init+0x6c>)
 8001df8:	5cd3      	ldrb	r3, [r2, r3]
 8001dfa:	f003 031f 	and.w	r3, r3, #31
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	fa22 f303 	lsr.w	r3, r2, r3
 8001e04:	4a0b      	ldr	r2, [pc, #44]	; (8001e34 <HAL_Init+0x70>)
 8001e06:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e08:	4a0b      	ldr	r2, [pc, #44]	; (8001e38 <HAL_Init+0x74>)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e0e:	200f      	movs	r0, #15
 8001e10:	f7ff fb56 	bl	80014c0 <HAL_InitTick>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e002      	b.n	8001e24 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001e1e:	f7ff fb31 	bl	8001484 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	58024400 	.word	0x58024400
 8001e30:	0801c9c0 	.word	0x0801c9c0
 8001e34:	24000004 	.word	0x24000004
 8001e38:	24000000 	.word	0x24000000

08001e3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e40:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <HAL_IncTick+0x20>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	461a      	mov	r2, r3
 8001e46:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <HAL_IncTick+0x24>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	4a04      	ldr	r2, [pc, #16]	; (8001e60 <HAL_IncTick+0x24>)
 8001e4e:	6013      	str	r3, [r2, #0]
}
 8001e50:	bf00      	nop
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	2400000c 	.word	0x2400000c
 8001e60:	24004c90 	.word	0x24004c90

08001e64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  return uwTick;
 8001e68:	4b03      	ldr	r3, [pc, #12]	; (8001e78 <HAL_GetTick+0x14>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	24004c90 	.word	0x24004c90

08001e7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e84:	f7ff ffee 	bl	8001e64 <HAL_GetTick>
 8001e88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e94:	d005      	beq.n	8001ea2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e96:	4b0a      	ldr	r3, [pc, #40]	; (8001ec0 <HAL_Delay+0x44>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ea2:	bf00      	nop
 8001ea4:	f7ff ffde 	bl	8001e64 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d8f7      	bhi.n	8001ea4 <HAL_Delay+0x28>
  {
  }
}
 8001eb4:	bf00      	nop
 8001eb6:	bf00      	nop
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	2400000c 	.word	0x2400000c

08001ec4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001ec8:	4b03      	ldr	r3, [pc, #12]	; (8001ed8 <HAL_GetREVID+0x14>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	0c1b      	lsrs	r3, r3, #16
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	5c001000 	.word	0x5c001000

08001edc <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001ee4:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001eec:	4904      	ldr	r1, [pc, #16]	; (8001f00 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	604b      	str	r3, [r1, #4]
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	58000400 	.word	0x58000400

08001f04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f14:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <__NVIC_SetPriorityGrouping+0x40>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f1a:	68ba      	ldr	r2, [r7, #8]
 8001f1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f20:	4013      	ands	r3, r2
 8001f22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f2c:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <__NVIC_SetPriorityGrouping+0x44>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f32:	4a04      	ldr	r2, [pc, #16]	; (8001f44 <__NVIC_SetPriorityGrouping+0x40>)
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	60d3      	str	r3, [r2, #12]
}
 8001f38:	bf00      	nop
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	e000ed00 	.word	0xe000ed00
 8001f48:	05fa0000 	.word	0x05fa0000

08001f4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f50:	4b04      	ldr	r3, [pc, #16]	; (8001f64 <__NVIC_GetPriorityGrouping+0x18>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	0a1b      	lsrs	r3, r3, #8
 8001f56:	f003 0307 	and.w	r3, r3, #7
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	db0b      	blt.n	8001f92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f7a:	88fb      	ldrh	r3, [r7, #6]
 8001f7c:	f003 021f 	and.w	r2, r3, #31
 8001f80:	4907      	ldr	r1, [pc, #28]	; (8001fa0 <__NVIC_EnableIRQ+0x38>)
 8001f82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f86:	095b      	lsrs	r3, r3, #5
 8001f88:	2001      	movs	r0, #1
 8001f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	e000e100 	.word	0xe000e100

08001fa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	6039      	str	r1, [r7, #0]
 8001fae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001fb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	db0a      	blt.n	8001fce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	490c      	ldr	r1, [pc, #48]	; (8001ff0 <__NVIC_SetPriority+0x4c>)
 8001fbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fc2:	0112      	lsls	r2, r2, #4
 8001fc4:	b2d2      	uxtb	r2, r2
 8001fc6:	440b      	add	r3, r1
 8001fc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fcc:	e00a      	b.n	8001fe4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	4908      	ldr	r1, [pc, #32]	; (8001ff4 <__NVIC_SetPriority+0x50>)
 8001fd4:	88fb      	ldrh	r3, [r7, #6]
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	3b04      	subs	r3, #4
 8001fdc:	0112      	lsls	r2, r2, #4
 8001fde:	b2d2      	uxtb	r2, r2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	761a      	strb	r2, [r3, #24]
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	e000e100 	.word	0xe000e100
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b089      	sub	sp, #36	; 0x24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	f1c3 0307 	rsb	r3, r3, #7
 8002012:	2b04      	cmp	r3, #4
 8002014:	bf28      	it	cs
 8002016:	2304      	movcs	r3, #4
 8002018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	3304      	adds	r3, #4
 800201e:	2b06      	cmp	r3, #6
 8002020:	d902      	bls.n	8002028 <NVIC_EncodePriority+0x30>
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	3b03      	subs	r3, #3
 8002026:	e000      	b.n	800202a <NVIC_EncodePriority+0x32>
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800202c:	f04f 32ff 	mov.w	r2, #4294967295
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43da      	mvns	r2, r3
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	401a      	ands	r2, r3
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002040:	f04f 31ff 	mov.w	r1, #4294967295
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	fa01 f303 	lsl.w	r3, r1, r3
 800204a:	43d9      	mvns	r1, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002050:	4313      	orrs	r3, r2
         );
}
 8002052:	4618      	mov	r0, r3
 8002054:	3724      	adds	r7, #36	; 0x24
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7ff ff4c 	bl	8001f04 <__NVIC_SetPriorityGrouping>
}
 800206c:	bf00      	nop
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
 8002080:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002082:	f7ff ff63 	bl	8001f4c <__NVIC_GetPriorityGrouping>
 8002086:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	68b9      	ldr	r1, [r7, #8]
 800208c:	6978      	ldr	r0, [r7, #20]
 800208e:	f7ff ffb3 	bl	8001ff8 <NVIC_EncodePriority>
 8002092:	4602      	mov	r2, r0
 8002094:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002098:	4611      	mov	r1, r2
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff ff82 	bl	8001fa4 <__NVIC_SetPriority>
}
 80020a0:	bf00      	nop
 80020a2:	3718      	adds	r7, #24
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff ff56 	bl	8001f68 <__NVIC_EnableIRQ>
}
 80020bc:	bf00      	nop
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80020cc:	f7ff feca 	bl	8001e64 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d101      	bne.n	80020dc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e316      	b.n	800270a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a66      	ldr	r2, [pc, #408]	; (800227c <HAL_DMA_Init+0x1b8>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d04a      	beq.n	800217c <HAL_DMA_Init+0xb8>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a65      	ldr	r2, [pc, #404]	; (8002280 <HAL_DMA_Init+0x1bc>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d045      	beq.n	800217c <HAL_DMA_Init+0xb8>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a63      	ldr	r2, [pc, #396]	; (8002284 <HAL_DMA_Init+0x1c0>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d040      	beq.n	800217c <HAL_DMA_Init+0xb8>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a62      	ldr	r2, [pc, #392]	; (8002288 <HAL_DMA_Init+0x1c4>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d03b      	beq.n	800217c <HAL_DMA_Init+0xb8>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a60      	ldr	r2, [pc, #384]	; (800228c <HAL_DMA_Init+0x1c8>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d036      	beq.n	800217c <HAL_DMA_Init+0xb8>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a5f      	ldr	r2, [pc, #380]	; (8002290 <HAL_DMA_Init+0x1cc>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d031      	beq.n	800217c <HAL_DMA_Init+0xb8>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a5d      	ldr	r2, [pc, #372]	; (8002294 <HAL_DMA_Init+0x1d0>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d02c      	beq.n	800217c <HAL_DMA_Init+0xb8>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a5c      	ldr	r2, [pc, #368]	; (8002298 <HAL_DMA_Init+0x1d4>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d027      	beq.n	800217c <HAL_DMA_Init+0xb8>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a5a      	ldr	r2, [pc, #360]	; (800229c <HAL_DMA_Init+0x1d8>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d022      	beq.n	800217c <HAL_DMA_Init+0xb8>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a59      	ldr	r2, [pc, #356]	; (80022a0 <HAL_DMA_Init+0x1dc>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d01d      	beq.n	800217c <HAL_DMA_Init+0xb8>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a57      	ldr	r2, [pc, #348]	; (80022a4 <HAL_DMA_Init+0x1e0>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d018      	beq.n	800217c <HAL_DMA_Init+0xb8>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a56      	ldr	r2, [pc, #344]	; (80022a8 <HAL_DMA_Init+0x1e4>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d013      	beq.n	800217c <HAL_DMA_Init+0xb8>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a54      	ldr	r2, [pc, #336]	; (80022ac <HAL_DMA_Init+0x1e8>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d00e      	beq.n	800217c <HAL_DMA_Init+0xb8>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a53      	ldr	r2, [pc, #332]	; (80022b0 <HAL_DMA_Init+0x1ec>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d009      	beq.n	800217c <HAL_DMA_Init+0xb8>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a51      	ldr	r2, [pc, #324]	; (80022b4 <HAL_DMA_Init+0x1f0>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d004      	beq.n	800217c <HAL_DMA_Init+0xb8>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a50      	ldr	r2, [pc, #320]	; (80022b8 <HAL_DMA_Init+0x1f4>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d101      	bne.n	8002180 <HAL_DMA_Init+0xbc>
 800217c:	2301      	movs	r3, #1
 800217e:	e000      	b.n	8002182 <HAL_DMA_Init+0xbe>
 8002180:	2300      	movs	r3, #0
 8002182:	2b00      	cmp	r3, #0
 8002184:	f000 813b 	beq.w	80023fe <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2202      	movs	r2, #2
 800218c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a37      	ldr	r2, [pc, #220]	; (800227c <HAL_DMA_Init+0x1b8>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d04a      	beq.n	8002238 <HAL_DMA_Init+0x174>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a36      	ldr	r2, [pc, #216]	; (8002280 <HAL_DMA_Init+0x1bc>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d045      	beq.n	8002238 <HAL_DMA_Init+0x174>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a34      	ldr	r2, [pc, #208]	; (8002284 <HAL_DMA_Init+0x1c0>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d040      	beq.n	8002238 <HAL_DMA_Init+0x174>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a33      	ldr	r2, [pc, #204]	; (8002288 <HAL_DMA_Init+0x1c4>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d03b      	beq.n	8002238 <HAL_DMA_Init+0x174>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a31      	ldr	r2, [pc, #196]	; (800228c <HAL_DMA_Init+0x1c8>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d036      	beq.n	8002238 <HAL_DMA_Init+0x174>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a30      	ldr	r2, [pc, #192]	; (8002290 <HAL_DMA_Init+0x1cc>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d031      	beq.n	8002238 <HAL_DMA_Init+0x174>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a2e      	ldr	r2, [pc, #184]	; (8002294 <HAL_DMA_Init+0x1d0>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d02c      	beq.n	8002238 <HAL_DMA_Init+0x174>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a2d      	ldr	r2, [pc, #180]	; (8002298 <HAL_DMA_Init+0x1d4>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d027      	beq.n	8002238 <HAL_DMA_Init+0x174>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a2b      	ldr	r2, [pc, #172]	; (800229c <HAL_DMA_Init+0x1d8>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d022      	beq.n	8002238 <HAL_DMA_Init+0x174>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a2a      	ldr	r2, [pc, #168]	; (80022a0 <HAL_DMA_Init+0x1dc>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d01d      	beq.n	8002238 <HAL_DMA_Init+0x174>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a28      	ldr	r2, [pc, #160]	; (80022a4 <HAL_DMA_Init+0x1e0>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d018      	beq.n	8002238 <HAL_DMA_Init+0x174>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a27      	ldr	r2, [pc, #156]	; (80022a8 <HAL_DMA_Init+0x1e4>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d013      	beq.n	8002238 <HAL_DMA_Init+0x174>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a25      	ldr	r2, [pc, #148]	; (80022ac <HAL_DMA_Init+0x1e8>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d00e      	beq.n	8002238 <HAL_DMA_Init+0x174>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a24      	ldr	r2, [pc, #144]	; (80022b0 <HAL_DMA_Init+0x1ec>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d009      	beq.n	8002238 <HAL_DMA_Init+0x174>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a22      	ldr	r2, [pc, #136]	; (80022b4 <HAL_DMA_Init+0x1f0>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d004      	beq.n	8002238 <HAL_DMA_Init+0x174>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a21      	ldr	r2, [pc, #132]	; (80022b8 <HAL_DMA_Init+0x1f4>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d108      	bne.n	800224a <HAL_DMA_Init+0x186>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f022 0201 	bic.w	r2, r2, #1
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	e007      	b.n	800225a <HAL_DMA_Init+0x196>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 0201 	bic.w	r2, r2, #1
 8002258:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800225a:	e02f      	b.n	80022bc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800225c:	f7ff fe02 	bl	8001e64 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b05      	cmp	r3, #5
 8002268:	d928      	bls.n	80022bc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2220      	movs	r2, #32
 800226e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2203      	movs	r2, #3
 8002274:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e246      	b.n	800270a <HAL_DMA_Init+0x646>
 800227c:	40020010 	.word	0x40020010
 8002280:	40020028 	.word	0x40020028
 8002284:	40020040 	.word	0x40020040
 8002288:	40020058 	.word	0x40020058
 800228c:	40020070 	.word	0x40020070
 8002290:	40020088 	.word	0x40020088
 8002294:	400200a0 	.word	0x400200a0
 8002298:	400200b8 	.word	0x400200b8
 800229c:	40020410 	.word	0x40020410
 80022a0:	40020428 	.word	0x40020428
 80022a4:	40020440 	.word	0x40020440
 80022a8:	40020458 	.word	0x40020458
 80022ac:	40020470 	.word	0x40020470
 80022b0:	40020488 	.word	0x40020488
 80022b4:	400204a0 	.word	0x400204a0
 80022b8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1c8      	bne.n	800225c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	4b83      	ldr	r3, [pc, #524]	; (80024e4 <HAL_DMA_Init+0x420>)
 80022d6:	4013      	ands	r3, r2
 80022d8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80022e2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ee:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022fa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002302:	697a      	ldr	r2, [r7, #20]
 8002304:	4313      	orrs	r3, r2
 8002306:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230c:	2b04      	cmp	r3, #4
 800230e:	d107      	bne.n	8002320 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002318:	4313      	orrs	r3, r2
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	4313      	orrs	r3, r2
 800231e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002320:	4b71      	ldr	r3, [pc, #452]	; (80024e8 <HAL_DMA_Init+0x424>)
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	4b71      	ldr	r3, [pc, #452]	; (80024ec <HAL_DMA_Init+0x428>)
 8002326:	4013      	ands	r3, r2
 8002328:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800232c:	d328      	bcc.n	8002380 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	2b28      	cmp	r3, #40	; 0x28
 8002334:	d903      	bls.n	800233e <HAL_DMA_Init+0x27a>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	2b2e      	cmp	r3, #46	; 0x2e
 800233c:	d917      	bls.n	800236e <HAL_DMA_Init+0x2aa>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2b3e      	cmp	r3, #62	; 0x3e
 8002344:	d903      	bls.n	800234e <HAL_DMA_Init+0x28a>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	2b42      	cmp	r3, #66	; 0x42
 800234c:	d90f      	bls.n	800236e <HAL_DMA_Init+0x2aa>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	2b46      	cmp	r3, #70	; 0x46
 8002354:	d903      	bls.n	800235e <HAL_DMA_Init+0x29a>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	2b48      	cmp	r3, #72	; 0x48
 800235c:	d907      	bls.n	800236e <HAL_DMA_Init+0x2aa>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2b4e      	cmp	r3, #78	; 0x4e
 8002364:	d905      	bls.n	8002372 <HAL_DMA_Init+0x2ae>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2b52      	cmp	r3, #82	; 0x52
 800236c:	d801      	bhi.n	8002372 <HAL_DMA_Init+0x2ae>
 800236e:	2301      	movs	r3, #1
 8002370:	e000      	b.n	8002374 <HAL_DMA_Init+0x2b0>
 8002372:	2300      	movs	r3, #0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d003      	beq.n	8002380 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800237e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	f023 0307 	bic.w	r3, r3, #7
 8002396:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	4313      	orrs	r3, r2
 80023a0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a6:	2b04      	cmp	r3, #4
 80023a8:	d117      	bne.n	80023da <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ae:	697a      	ldr	r2, [r7, #20]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00e      	beq.n	80023da <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f002 fb33 	bl	8004a28 <DMA_CheckFifoParam>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d008      	beq.n	80023da <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2240      	movs	r2, #64	; 0x40
 80023cc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e197      	b.n	800270a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	697a      	ldr	r2, [r7, #20]
 80023e0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f002 fa6e 	bl	80048c4 <DMA_CalcBaseAndBitshift>
 80023e8:	4603      	mov	r3, r0
 80023ea:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f0:	f003 031f 	and.w	r3, r3, #31
 80023f4:	223f      	movs	r2, #63	; 0x3f
 80023f6:	409a      	lsls	r2, r3
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	609a      	str	r2, [r3, #8]
 80023fc:	e0cd      	b.n	800259a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a3b      	ldr	r2, [pc, #236]	; (80024f0 <HAL_DMA_Init+0x42c>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d022      	beq.n	800244e <HAL_DMA_Init+0x38a>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a39      	ldr	r2, [pc, #228]	; (80024f4 <HAL_DMA_Init+0x430>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d01d      	beq.n	800244e <HAL_DMA_Init+0x38a>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a38      	ldr	r2, [pc, #224]	; (80024f8 <HAL_DMA_Init+0x434>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d018      	beq.n	800244e <HAL_DMA_Init+0x38a>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a36      	ldr	r2, [pc, #216]	; (80024fc <HAL_DMA_Init+0x438>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d013      	beq.n	800244e <HAL_DMA_Init+0x38a>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a35      	ldr	r2, [pc, #212]	; (8002500 <HAL_DMA_Init+0x43c>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d00e      	beq.n	800244e <HAL_DMA_Init+0x38a>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a33      	ldr	r2, [pc, #204]	; (8002504 <HAL_DMA_Init+0x440>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d009      	beq.n	800244e <HAL_DMA_Init+0x38a>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a32      	ldr	r2, [pc, #200]	; (8002508 <HAL_DMA_Init+0x444>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d004      	beq.n	800244e <HAL_DMA_Init+0x38a>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a30      	ldr	r2, [pc, #192]	; (800250c <HAL_DMA_Init+0x448>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d101      	bne.n	8002452 <HAL_DMA_Init+0x38e>
 800244e:	2301      	movs	r3, #1
 8002450:	e000      	b.n	8002454 <HAL_DMA_Init+0x390>
 8002452:	2300      	movs	r3, #0
 8002454:	2b00      	cmp	r3, #0
 8002456:	f000 8097 	beq.w	8002588 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a24      	ldr	r2, [pc, #144]	; (80024f0 <HAL_DMA_Init+0x42c>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d021      	beq.n	80024a8 <HAL_DMA_Init+0x3e4>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a22      	ldr	r2, [pc, #136]	; (80024f4 <HAL_DMA_Init+0x430>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d01c      	beq.n	80024a8 <HAL_DMA_Init+0x3e4>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a21      	ldr	r2, [pc, #132]	; (80024f8 <HAL_DMA_Init+0x434>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d017      	beq.n	80024a8 <HAL_DMA_Init+0x3e4>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a1f      	ldr	r2, [pc, #124]	; (80024fc <HAL_DMA_Init+0x438>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d012      	beq.n	80024a8 <HAL_DMA_Init+0x3e4>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a1e      	ldr	r2, [pc, #120]	; (8002500 <HAL_DMA_Init+0x43c>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d00d      	beq.n	80024a8 <HAL_DMA_Init+0x3e4>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a1c      	ldr	r2, [pc, #112]	; (8002504 <HAL_DMA_Init+0x440>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d008      	beq.n	80024a8 <HAL_DMA_Init+0x3e4>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a1b      	ldr	r2, [pc, #108]	; (8002508 <HAL_DMA_Init+0x444>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d003      	beq.n	80024a8 <HAL_DMA_Init+0x3e4>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a19      	ldr	r2, [pc, #100]	; (800250c <HAL_DMA_Init+0x448>)
 80024a6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2202      	movs	r2, #2
 80024ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80024c0:	697a      	ldr	r2, [r7, #20]
 80024c2:	4b13      	ldr	r3, [pc, #76]	; (8002510 <HAL_DMA_Init+0x44c>)
 80024c4:	4013      	ands	r3, r2
 80024c6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	2b40      	cmp	r3, #64	; 0x40
 80024ce:	d021      	beq.n	8002514 <HAL_DMA_Init+0x450>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	2b80      	cmp	r3, #128	; 0x80
 80024d6:	d102      	bne.n	80024de <HAL_DMA_Init+0x41a>
 80024d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80024dc:	e01b      	b.n	8002516 <HAL_DMA_Init+0x452>
 80024de:	2300      	movs	r3, #0
 80024e0:	e019      	b.n	8002516 <HAL_DMA_Init+0x452>
 80024e2:	bf00      	nop
 80024e4:	fe10803f 	.word	0xfe10803f
 80024e8:	5c001000 	.word	0x5c001000
 80024ec:	ffff0000 	.word	0xffff0000
 80024f0:	58025408 	.word	0x58025408
 80024f4:	5802541c 	.word	0x5802541c
 80024f8:	58025430 	.word	0x58025430
 80024fc:	58025444 	.word	0x58025444
 8002500:	58025458 	.word	0x58025458
 8002504:	5802546c 	.word	0x5802546c
 8002508:	58025480 	.word	0x58025480
 800250c:	58025494 	.word	0x58025494
 8002510:	fffe000f 	.word	0xfffe000f
 8002514:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	68d2      	ldr	r2, [r2, #12]
 800251a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800251c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002524:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800252c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002534:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800253c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a1b      	ldr	r3, [r3, #32]
 8002542:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002544:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	4313      	orrs	r3, r2
 800254a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	461a      	mov	r2, r3
 800255a:	4b6e      	ldr	r3, [pc, #440]	; (8002714 <HAL_DMA_Init+0x650>)
 800255c:	4413      	add	r3, r2
 800255e:	4a6e      	ldr	r2, [pc, #440]	; (8002718 <HAL_DMA_Init+0x654>)
 8002560:	fba2 2303 	umull	r2, r3, r2, r3
 8002564:	091b      	lsrs	r3, r3, #4
 8002566:	009a      	lsls	r2, r3, #2
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f002 f9a9 	bl	80048c4 <DMA_CalcBaseAndBitshift>
 8002572:	4603      	mov	r3, r0
 8002574:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800257a:	f003 031f 	and.w	r3, r3, #31
 800257e:	2201      	movs	r2, #1
 8002580:	409a      	lsls	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	605a      	str	r2, [r3, #4]
 8002586:	e008      	b.n	800259a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2240      	movs	r2, #64	; 0x40
 800258c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2203      	movs	r2, #3
 8002592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e0b7      	b.n	800270a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a5f      	ldr	r2, [pc, #380]	; (800271c <HAL_DMA_Init+0x658>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d072      	beq.n	800268a <HAL_DMA_Init+0x5c6>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a5d      	ldr	r2, [pc, #372]	; (8002720 <HAL_DMA_Init+0x65c>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d06d      	beq.n	800268a <HAL_DMA_Init+0x5c6>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a5c      	ldr	r2, [pc, #368]	; (8002724 <HAL_DMA_Init+0x660>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d068      	beq.n	800268a <HAL_DMA_Init+0x5c6>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a5a      	ldr	r2, [pc, #360]	; (8002728 <HAL_DMA_Init+0x664>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d063      	beq.n	800268a <HAL_DMA_Init+0x5c6>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a59      	ldr	r2, [pc, #356]	; (800272c <HAL_DMA_Init+0x668>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d05e      	beq.n	800268a <HAL_DMA_Init+0x5c6>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a57      	ldr	r2, [pc, #348]	; (8002730 <HAL_DMA_Init+0x66c>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d059      	beq.n	800268a <HAL_DMA_Init+0x5c6>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a56      	ldr	r2, [pc, #344]	; (8002734 <HAL_DMA_Init+0x670>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d054      	beq.n	800268a <HAL_DMA_Init+0x5c6>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a54      	ldr	r2, [pc, #336]	; (8002738 <HAL_DMA_Init+0x674>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d04f      	beq.n	800268a <HAL_DMA_Init+0x5c6>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a53      	ldr	r2, [pc, #332]	; (800273c <HAL_DMA_Init+0x678>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d04a      	beq.n	800268a <HAL_DMA_Init+0x5c6>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a51      	ldr	r2, [pc, #324]	; (8002740 <HAL_DMA_Init+0x67c>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d045      	beq.n	800268a <HAL_DMA_Init+0x5c6>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a50      	ldr	r2, [pc, #320]	; (8002744 <HAL_DMA_Init+0x680>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d040      	beq.n	800268a <HAL_DMA_Init+0x5c6>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a4e      	ldr	r2, [pc, #312]	; (8002748 <HAL_DMA_Init+0x684>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d03b      	beq.n	800268a <HAL_DMA_Init+0x5c6>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a4d      	ldr	r2, [pc, #308]	; (800274c <HAL_DMA_Init+0x688>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d036      	beq.n	800268a <HAL_DMA_Init+0x5c6>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a4b      	ldr	r2, [pc, #300]	; (8002750 <HAL_DMA_Init+0x68c>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d031      	beq.n	800268a <HAL_DMA_Init+0x5c6>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a4a      	ldr	r2, [pc, #296]	; (8002754 <HAL_DMA_Init+0x690>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d02c      	beq.n	800268a <HAL_DMA_Init+0x5c6>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a48      	ldr	r2, [pc, #288]	; (8002758 <HAL_DMA_Init+0x694>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d027      	beq.n	800268a <HAL_DMA_Init+0x5c6>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a47      	ldr	r2, [pc, #284]	; (800275c <HAL_DMA_Init+0x698>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d022      	beq.n	800268a <HAL_DMA_Init+0x5c6>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a45      	ldr	r2, [pc, #276]	; (8002760 <HAL_DMA_Init+0x69c>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d01d      	beq.n	800268a <HAL_DMA_Init+0x5c6>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a44      	ldr	r2, [pc, #272]	; (8002764 <HAL_DMA_Init+0x6a0>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d018      	beq.n	800268a <HAL_DMA_Init+0x5c6>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a42      	ldr	r2, [pc, #264]	; (8002768 <HAL_DMA_Init+0x6a4>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d013      	beq.n	800268a <HAL_DMA_Init+0x5c6>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a41      	ldr	r2, [pc, #260]	; (800276c <HAL_DMA_Init+0x6a8>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d00e      	beq.n	800268a <HAL_DMA_Init+0x5c6>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a3f      	ldr	r2, [pc, #252]	; (8002770 <HAL_DMA_Init+0x6ac>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d009      	beq.n	800268a <HAL_DMA_Init+0x5c6>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a3e      	ldr	r2, [pc, #248]	; (8002774 <HAL_DMA_Init+0x6b0>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d004      	beq.n	800268a <HAL_DMA_Init+0x5c6>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a3c      	ldr	r2, [pc, #240]	; (8002778 <HAL_DMA_Init+0x6b4>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d101      	bne.n	800268e <HAL_DMA_Init+0x5ca>
 800268a:	2301      	movs	r3, #1
 800268c:	e000      	b.n	8002690 <HAL_DMA_Init+0x5cc>
 800268e:	2300      	movs	r3, #0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d032      	beq.n	80026fa <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f002 fa43 	bl	8004b20 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	2b80      	cmp	r3, #128	; 0x80
 80026a0:	d102      	bne.n	80026a8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026b0:	b2d2      	uxtb	r2, r2
 80026b2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80026bc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d010      	beq.n	80026e8 <HAL_DMA_Init+0x624>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	2b08      	cmp	r3, #8
 80026cc:	d80c      	bhi.n	80026e8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f002 fac0 	bl	8004c54 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	e008      	b.n	80026fa <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3718      	adds	r7, #24
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	a7fdabf8 	.word	0xa7fdabf8
 8002718:	cccccccd 	.word	0xcccccccd
 800271c:	40020010 	.word	0x40020010
 8002720:	40020028 	.word	0x40020028
 8002724:	40020040 	.word	0x40020040
 8002728:	40020058 	.word	0x40020058
 800272c:	40020070 	.word	0x40020070
 8002730:	40020088 	.word	0x40020088
 8002734:	400200a0 	.word	0x400200a0
 8002738:	400200b8 	.word	0x400200b8
 800273c:	40020410 	.word	0x40020410
 8002740:	40020428 	.word	0x40020428
 8002744:	40020440 	.word	0x40020440
 8002748:	40020458 	.word	0x40020458
 800274c:	40020470 	.word	0x40020470
 8002750:	40020488 	.word	0x40020488
 8002754:	400204a0 	.word	0x400204a0
 8002758:	400204b8 	.word	0x400204b8
 800275c:	58025408 	.word	0x58025408
 8002760:	5802541c 	.word	0x5802541c
 8002764:	58025430 	.word	0x58025430
 8002768:	58025444 	.word	0x58025444
 800276c:	58025458 	.word	0x58025458
 8002770:	5802546c 	.word	0x5802546c
 8002774:	58025480 	.word	0x58025480
 8002778:	58025494 	.word	0x58025494

0800277c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
 8002788:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800278a:	2300      	movs	r3, #0
 800278c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d101      	bne.n	8002798 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e226      	b.n	8002be6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d101      	bne.n	80027a6 <HAL_DMA_Start_IT+0x2a>
 80027a2:	2302      	movs	r3, #2
 80027a4:	e21f      	b.n	8002be6 <HAL_DMA_Start_IT+0x46a>
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	f040 820a 	bne.w	8002bd0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2202      	movs	r2, #2
 80027c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a68      	ldr	r2, [pc, #416]	; (8002970 <HAL_DMA_Start_IT+0x1f4>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d04a      	beq.n	800286a <HAL_DMA_Start_IT+0xee>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a66      	ldr	r2, [pc, #408]	; (8002974 <HAL_DMA_Start_IT+0x1f8>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d045      	beq.n	800286a <HAL_DMA_Start_IT+0xee>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a65      	ldr	r2, [pc, #404]	; (8002978 <HAL_DMA_Start_IT+0x1fc>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d040      	beq.n	800286a <HAL_DMA_Start_IT+0xee>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a63      	ldr	r2, [pc, #396]	; (800297c <HAL_DMA_Start_IT+0x200>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d03b      	beq.n	800286a <HAL_DMA_Start_IT+0xee>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a62      	ldr	r2, [pc, #392]	; (8002980 <HAL_DMA_Start_IT+0x204>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d036      	beq.n	800286a <HAL_DMA_Start_IT+0xee>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a60      	ldr	r2, [pc, #384]	; (8002984 <HAL_DMA_Start_IT+0x208>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d031      	beq.n	800286a <HAL_DMA_Start_IT+0xee>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a5f      	ldr	r2, [pc, #380]	; (8002988 <HAL_DMA_Start_IT+0x20c>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d02c      	beq.n	800286a <HAL_DMA_Start_IT+0xee>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a5d      	ldr	r2, [pc, #372]	; (800298c <HAL_DMA_Start_IT+0x210>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d027      	beq.n	800286a <HAL_DMA_Start_IT+0xee>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a5c      	ldr	r2, [pc, #368]	; (8002990 <HAL_DMA_Start_IT+0x214>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d022      	beq.n	800286a <HAL_DMA_Start_IT+0xee>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a5a      	ldr	r2, [pc, #360]	; (8002994 <HAL_DMA_Start_IT+0x218>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d01d      	beq.n	800286a <HAL_DMA_Start_IT+0xee>
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a59      	ldr	r2, [pc, #356]	; (8002998 <HAL_DMA_Start_IT+0x21c>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d018      	beq.n	800286a <HAL_DMA_Start_IT+0xee>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a57      	ldr	r2, [pc, #348]	; (800299c <HAL_DMA_Start_IT+0x220>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d013      	beq.n	800286a <HAL_DMA_Start_IT+0xee>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a56      	ldr	r2, [pc, #344]	; (80029a0 <HAL_DMA_Start_IT+0x224>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d00e      	beq.n	800286a <HAL_DMA_Start_IT+0xee>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a54      	ldr	r2, [pc, #336]	; (80029a4 <HAL_DMA_Start_IT+0x228>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d009      	beq.n	800286a <HAL_DMA_Start_IT+0xee>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a53      	ldr	r2, [pc, #332]	; (80029a8 <HAL_DMA_Start_IT+0x22c>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d004      	beq.n	800286a <HAL_DMA_Start_IT+0xee>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a51      	ldr	r2, [pc, #324]	; (80029ac <HAL_DMA_Start_IT+0x230>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d108      	bne.n	800287c <HAL_DMA_Start_IT+0x100>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 0201 	bic.w	r2, r2, #1
 8002878:	601a      	str	r2, [r3, #0]
 800287a:	e007      	b.n	800288c <HAL_DMA_Start_IT+0x110>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 0201 	bic.w	r2, r2, #1
 800288a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	68b9      	ldr	r1, [r7, #8]
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f001 fe6a 	bl	800456c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a34      	ldr	r2, [pc, #208]	; (8002970 <HAL_DMA_Start_IT+0x1f4>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d04a      	beq.n	8002938 <HAL_DMA_Start_IT+0x1bc>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a33      	ldr	r2, [pc, #204]	; (8002974 <HAL_DMA_Start_IT+0x1f8>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d045      	beq.n	8002938 <HAL_DMA_Start_IT+0x1bc>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a31      	ldr	r2, [pc, #196]	; (8002978 <HAL_DMA_Start_IT+0x1fc>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d040      	beq.n	8002938 <HAL_DMA_Start_IT+0x1bc>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a30      	ldr	r2, [pc, #192]	; (800297c <HAL_DMA_Start_IT+0x200>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d03b      	beq.n	8002938 <HAL_DMA_Start_IT+0x1bc>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a2e      	ldr	r2, [pc, #184]	; (8002980 <HAL_DMA_Start_IT+0x204>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d036      	beq.n	8002938 <HAL_DMA_Start_IT+0x1bc>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a2d      	ldr	r2, [pc, #180]	; (8002984 <HAL_DMA_Start_IT+0x208>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d031      	beq.n	8002938 <HAL_DMA_Start_IT+0x1bc>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a2b      	ldr	r2, [pc, #172]	; (8002988 <HAL_DMA_Start_IT+0x20c>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d02c      	beq.n	8002938 <HAL_DMA_Start_IT+0x1bc>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a2a      	ldr	r2, [pc, #168]	; (800298c <HAL_DMA_Start_IT+0x210>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d027      	beq.n	8002938 <HAL_DMA_Start_IT+0x1bc>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a28      	ldr	r2, [pc, #160]	; (8002990 <HAL_DMA_Start_IT+0x214>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d022      	beq.n	8002938 <HAL_DMA_Start_IT+0x1bc>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a27      	ldr	r2, [pc, #156]	; (8002994 <HAL_DMA_Start_IT+0x218>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d01d      	beq.n	8002938 <HAL_DMA_Start_IT+0x1bc>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a25      	ldr	r2, [pc, #148]	; (8002998 <HAL_DMA_Start_IT+0x21c>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d018      	beq.n	8002938 <HAL_DMA_Start_IT+0x1bc>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a24      	ldr	r2, [pc, #144]	; (800299c <HAL_DMA_Start_IT+0x220>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d013      	beq.n	8002938 <HAL_DMA_Start_IT+0x1bc>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a22      	ldr	r2, [pc, #136]	; (80029a0 <HAL_DMA_Start_IT+0x224>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d00e      	beq.n	8002938 <HAL_DMA_Start_IT+0x1bc>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a21      	ldr	r2, [pc, #132]	; (80029a4 <HAL_DMA_Start_IT+0x228>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d009      	beq.n	8002938 <HAL_DMA_Start_IT+0x1bc>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a1f      	ldr	r2, [pc, #124]	; (80029a8 <HAL_DMA_Start_IT+0x22c>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d004      	beq.n	8002938 <HAL_DMA_Start_IT+0x1bc>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a1e      	ldr	r2, [pc, #120]	; (80029ac <HAL_DMA_Start_IT+0x230>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d101      	bne.n	800293c <HAL_DMA_Start_IT+0x1c0>
 8002938:	2301      	movs	r3, #1
 800293a:	e000      	b.n	800293e <HAL_DMA_Start_IT+0x1c2>
 800293c:	2300      	movs	r3, #0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d036      	beq.n	80029b0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f023 021e 	bic.w	r2, r3, #30
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f042 0216 	orr.w	r2, r2, #22
 8002954:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	2b00      	cmp	r3, #0
 800295c:	d03e      	beq.n	80029dc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f042 0208 	orr.w	r2, r2, #8
 800296c:	601a      	str	r2, [r3, #0]
 800296e:	e035      	b.n	80029dc <HAL_DMA_Start_IT+0x260>
 8002970:	40020010 	.word	0x40020010
 8002974:	40020028 	.word	0x40020028
 8002978:	40020040 	.word	0x40020040
 800297c:	40020058 	.word	0x40020058
 8002980:	40020070 	.word	0x40020070
 8002984:	40020088 	.word	0x40020088
 8002988:	400200a0 	.word	0x400200a0
 800298c:	400200b8 	.word	0x400200b8
 8002990:	40020410 	.word	0x40020410
 8002994:	40020428 	.word	0x40020428
 8002998:	40020440 	.word	0x40020440
 800299c:	40020458 	.word	0x40020458
 80029a0:	40020470 	.word	0x40020470
 80029a4:	40020488 	.word	0x40020488
 80029a8:	400204a0 	.word	0x400204a0
 80029ac:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f023 020e 	bic.w	r2, r3, #14
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f042 020a 	orr.w	r2, r2, #10
 80029c2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d007      	beq.n	80029dc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f042 0204 	orr.w	r2, r2, #4
 80029da:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a83      	ldr	r2, [pc, #524]	; (8002bf0 <HAL_DMA_Start_IT+0x474>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d072      	beq.n	8002acc <HAL_DMA_Start_IT+0x350>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a82      	ldr	r2, [pc, #520]	; (8002bf4 <HAL_DMA_Start_IT+0x478>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d06d      	beq.n	8002acc <HAL_DMA_Start_IT+0x350>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a80      	ldr	r2, [pc, #512]	; (8002bf8 <HAL_DMA_Start_IT+0x47c>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d068      	beq.n	8002acc <HAL_DMA_Start_IT+0x350>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a7f      	ldr	r2, [pc, #508]	; (8002bfc <HAL_DMA_Start_IT+0x480>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d063      	beq.n	8002acc <HAL_DMA_Start_IT+0x350>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a7d      	ldr	r2, [pc, #500]	; (8002c00 <HAL_DMA_Start_IT+0x484>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d05e      	beq.n	8002acc <HAL_DMA_Start_IT+0x350>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a7c      	ldr	r2, [pc, #496]	; (8002c04 <HAL_DMA_Start_IT+0x488>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d059      	beq.n	8002acc <HAL_DMA_Start_IT+0x350>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a7a      	ldr	r2, [pc, #488]	; (8002c08 <HAL_DMA_Start_IT+0x48c>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d054      	beq.n	8002acc <HAL_DMA_Start_IT+0x350>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a79      	ldr	r2, [pc, #484]	; (8002c0c <HAL_DMA_Start_IT+0x490>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d04f      	beq.n	8002acc <HAL_DMA_Start_IT+0x350>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a77      	ldr	r2, [pc, #476]	; (8002c10 <HAL_DMA_Start_IT+0x494>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d04a      	beq.n	8002acc <HAL_DMA_Start_IT+0x350>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a76      	ldr	r2, [pc, #472]	; (8002c14 <HAL_DMA_Start_IT+0x498>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d045      	beq.n	8002acc <HAL_DMA_Start_IT+0x350>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a74      	ldr	r2, [pc, #464]	; (8002c18 <HAL_DMA_Start_IT+0x49c>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d040      	beq.n	8002acc <HAL_DMA_Start_IT+0x350>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a73      	ldr	r2, [pc, #460]	; (8002c1c <HAL_DMA_Start_IT+0x4a0>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d03b      	beq.n	8002acc <HAL_DMA_Start_IT+0x350>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a71      	ldr	r2, [pc, #452]	; (8002c20 <HAL_DMA_Start_IT+0x4a4>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d036      	beq.n	8002acc <HAL_DMA_Start_IT+0x350>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a70      	ldr	r2, [pc, #448]	; (8002c24 <HAL_DMA_Start_IT+0x4a8>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d031      	beq.n	8002acc <HAL_DMA_Start_IT+0x350>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a6e      	ldr	r2, [pc, #440]	; (8002c28 <HAL_DMA_Start_IT+0x4ac>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d02c      	beq.n	8002acc <HAL_DMA_Start_IT+0x350>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a6d      	ldr	r2, [pc, #436]	; (8002c2c <HAL_DMA_Start_IT+0x4b0>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d027      	beq.n	8002acc <HAL_DMA_Start_IT+0x350>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a6b      	ldr	r2, [pc, #428]	; (8002c30 <HAL_DMA_Start_IT+0x4b4>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d022      	beq.n	8002acc <HAL_DMA_Start_IT+0x350>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a6a      	ldr	r2, [pc, #424]	; (8002c34 <HAL_DMA_Start_IT+0x4b8>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d01d      	beq.n	8002acc <HAL_DMA_Start_IT+0x350>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a68      	ldr	r2, [pc, #416]	; (8002c38 <HAL_DMA_Start_IT+0x4bc>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d018      	beq.n	8002acc <HAL_DMA_Start_IT+0x350>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a67      	ldr	r2, [pc, #412]	; (8002c3c <HAL_DMA_Start_IT+0x4c0>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d013      	beq.n	8002acc <HAL_DMA_Start_IT+0x350>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a65      	ldr	r2, [pc, #404]	; (8002c40 <HAL_DMA_Start_IT+0x4c4>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d00e      	beq.n	8002acc <HAL_DMA_Start_IT+0x350>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a64      	ldr	r2, [pc, #400]	; (8002c44 <HAL_DMA_Start_IT+0x4c8>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d009      	beq.n	8002acc <HAL_DMA_Start_IT+0x350>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a62      	ldr	r2, [pc, #392]	; (8002c48 <HAL_DMA_Start_IT+0x4cc>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d004      	beq.n	8002acc <HAL_DMA_Start_IT+0x350>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a61      	ldr	r2, [pc, #388]	; (8002c4c <HAL_DMA_Start_IT+0x4d0>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d101      	bne.n	8002ad0 <HAL_DMA_Start_IT+0x354>
 8002acc:	2301      	movs	r3, #1
 8002ace:	e000      	b.n	8002ad2 <HAL_DMA_Start_IT+0x356>
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d01a      	beq.n	8002b0c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d007      	beq.n	8002af4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002af2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d007      	beq.n	8002b0c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b0a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a37      	ldr	r2, [pc, #220]	; (8002bf0 <HAL_DMA_Start_IT+0x474>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d04a      	beq.n	8002bac <HAL_DMA_Start_IT+0x430>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a36      	ldr	r2, [pc, #216]	; (8002bf4 <HAL_DMA_Start_IT+0x478>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d045      	beq.n	8002bac <HAL_DMA_Start_IT+0x430>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a34      	ldr	r2, [pc, #208]	; (8002bf8 <HAL_DMA_Start_IT+0x47c>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d040      	beq.n	8002bac <HAL_DMA_Start_IT+0x430>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a33      	ldr	r2, [pc, #204]	; (8002bfc <HAL_DMA_Start_IT+0x480>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d03b      	beq.n	8002bac <HAL_DMA_Start_IT+0x430>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a31      	ldr	r2, [pc, #196]	; (8002c00 <HAL_DMA_Start_IT+0x484>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d036      	beq.n	8002bac <HAL_DMA_Start_IT+0x430>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a30      	ldr	r2, [pc, #192]	; (8002c04 <HAL_DMA_Start_IT+0x488>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d031      	beq.n	8002bac <HAL_DMA_Start_IT+0x430>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a2e      	ldr	r2, [pc, #184]	; (8002c08 <HAL_DMA_Start_IT+0x48c>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d02c      	beq.n	8002bac <HAL_DMA_Start_IT+0x430>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a2d      	ldr	r2, [pc, #180]	; (8002c0c <HAL_DMA_Start_IT+0x490>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d027      	beq.n	8002bac <HAL_DMA_Start_IT+0x430>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a2b      	ldr	r2, [pc, #172]	; (8002c10 <HAL_DMA_Start_IT+0x494>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d022      	beq.n	8002bac <HAL_DMA_Start_IT+0x430>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a2a      	ldr	r2, [pc, #168]	; (8002c14 <HAL_DMA_Start_IT+0x498>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d01d      	beq.n	8002bac <HAL_DMA_Start_IT+0x430>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a28      	ldr	r2, [pc, #160]	; (8002c18 <HAL_DMA_Start_IT+0x49c>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d018      	beq.n	8002bac <HAL_DMA_Start_IT+0x430>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a27      	ldr	r2, [pc, #156]	; (8002c1c <HAL_DMA_Start_IT+0x4a0>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d013      	beq.n	8002bac <HAL_DMA_Start_IT+0x430>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a25      	ldr	r2, [pc, #148]	; (8002c20 <HAL_DMA_Start_IT+0x4a4>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d00e      	beq.n	8002bac <HAL_DMA_Start_IT+0x430>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a24      	ldr	r2, [pc, #144]	; (8002c24 <HAL_DMA_Start_IT+0x4a8>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d009      	beq.n	8002bac <HAL_DMA_Start_IT+0x430>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a22      	ldr	r2, [pc, #136]	; (8002c28 <HAL_DMA_Start_IT+0x4ac>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d004      	beq.n	8002bac <HAL_DMA_Start_IT+0x430>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a21      	ldr	r2, [pc, #132]	; (8002c2c <HAL_DMA_Start_IT+0x4b0>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d108      	bne.n	8002bbe <HAL_DMA_Start_IT+0x442>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f042 0201 	orr.w	r2, r2, #1
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	e012      	b.n	8002be4 <HAL_DMA_Start_IT+0x468>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f042 0201 	orr.w	r2, r2, #1
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	e009      	b.n	8002be4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bd6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002be4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3718      	adds	r7, #24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40020010 	.word	0x40020010
 8002bf4:	40020028 	.word	0x40020028
 8002bf8:	40020040 	.word	0x40020040
 8002bfc:	40020058 	.word	0x40020058
 8002c00:	40020070 	.word	0x40020070
 8002c04:	40020088 	.word	0x40020088
 8002c08:	400200a0 	.word	0x400200a0
 8002c0c:	400200b8 	.word	0x400200b8
 8002c10:	40020410 	.word	0x40020410
 8002c14:	40020428 	.word	0x40020428
 8002c18:	40020440 	.word	0x40020440
 8002c1c:	40020458 	.word	0x40020458
 8002c20:	40020470 	.word	0x40020470
 8002c24:	40020488 	.word	0x40020488
 8002c28:	400204a0 	.word	0x400204a0
 8002c2c:	400204b8 	.word	0x400204b8
 8002c30:	58025408 	.word	0x58025408
 8002c34:	5802541c 	.word	0x5802541c
 8002c38:	58025430 	.word	0x58025430
 8002c3c:	58025444 	.word	0x58025444
 8002c40:	58025458 	.word	0x58025458
 8002c44:	5802546c 	.word	0x5802546c
 8002c48:	58025480 	.word	0x58025480
 8002c4c:	58025494 	.word	0x58025494

08002c50 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002c58:	f7ff f904 	bl	8001e64 <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e2dc      	b.n	8003222 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d008      	beq.n	8002c86 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2280      	movs	r2, #128	; 0x80
 8002c78:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e2cd      	b.n	8003222 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a76      	ldr	r2, [pc, #472]	; (8002e64 <HAL_DMA_Abort+0x214>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d04a      	beq.n	8002d26 <HAL_DMA_Abort+0xd6>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a74      	ldr	r2, [pc, #464]	; (8002e68 <HAL_DMA_Abort+0x218>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d045      	beq.n	8002d26 <HAL_DMA_Abort+0xd6>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a73      	ldr	r2, [pc, #460]	; (8002e6c <HAL_DMA_Abort+0x21c>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d040      	beq.n	8002d26 <HAL_DMA_Abort+0xd6>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a71      	ldr	r2, [pc, #452]	; (8002e70 <HAL_DMA_Abort+0x220>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d03b      	beq.n	8002d26 <HAL_DMA_Abort+0xd6>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a70      	ldr	r2, [pc, #448]	; (8002e74 <HAL_DMA_Abort+0x224>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d036      	beq.n	8002d26 <HAL_DMA_Abort+0xd6>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a6e      	ldr	r2, [pc, #440]	; (8002e78 <HAL_DMA_Abort+0x228>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d031      	beq.n	8002d26 <HAL_DMA_Abort+0xd6>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a6d      	ldr	r2, [pc, #436]	; (8002e7c <HAL_DMA_Abort+0x22c>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d02c      	beq.n	8002d26 <HAL_DMA_Abort+0xd6>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a6b      	ldr	r2, [pc, #428]	; (8002e80 <HAL_DMA_Abort+0x230>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d027      	beq.n	8002d26 <HAL_DMA_Abort+0xd6>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a6a      	ldr	r2, [pc, #424]	; (8002e84 <HAL_DMA_Abort+0x234>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d022      	beq.n	8002d26 <HAL_DMA_Abort+0xd6>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a68      	ldr	r2, [pc, #416]	; (8002e88 <HAL_DMA_Abort+0x238>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d01d      	beq.n	8002d26 <HAL_DMA_Abort+0xd6>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a67      	ldr	r2, [pc, #412]	; (8002e8c <HAL_DMA_Abort+0x23c>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d018      	beq.n	8002d26 <HAL_DMA_Abort+0xd6>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a65      	ldr	r2, [pc, #404]	; (8002e90 <HAL_DMA_Abort+0x240>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d013      	beq.n	8002d26 <HAL_DMA_Abort+0xd6>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a64      	ldr	r2, [pc, #400]	; (8002e94 <HAL_DMA_Abort+0x244>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d00e      	beq.n	8002d26 <HAL_DMA_Abort+0xd6>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a62      	ldr	r2, [pc, #392]	; (8002e98 <HAL_DMA_Abort+0x248>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d009      	beq.n	8002d26 <HAL_DMA_Abort+0xd6>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a61      	ldr	r2, [pc, #388]	; (8002e9c <HAL_DMA_Abort+0x24c>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d004      	beq.n	8002d26 <HAL_DMA_Abort+0xd6>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a5f      	ldr	r2, [pc, #380]	; (8002ea0 <HAL_DMA_Abort+0x250>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d101      	bne.n	8002d2a <HAL_DMA_Abort+0xda>
 8002d26:	2301      	movs	r3, #1
 8002d28:	e000      	b.n	8002d2c <HAL_DMA_Abort+0xdc>
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d013      	beq.n	8002d58 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 021e 	bic.w	r2, r2, #30
 8002d3e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	695a      	ldr	r2, [r3, #20]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d4e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	617b      	str	r3, [r7, #20]
 8002d56:	e00a      	b.n	8002d6e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 020e 	bic.w	r2, r2, #14
 8002d66:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a3c      	ldr	r2, [pc, #240]	; (8002e64 <HAL_DMA_Abort+0x214>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d072      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a3a      	ldr	r2, [pc, #232]	; (8002e68 <HAL_DMA_Abort+0x218>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d06d      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a39      	ldr	r2, [pc, #228]	; (8002e6c <HAL_DMA_Abort+0x21c>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d068      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a37      	ldr	r2, [pc, #220]	; (8002e70 <HAL_DMA_Abort+0x220>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d063      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a36      	ldr	r2, [pc, #216]	; (8002e74 <HAL_DMA_Abort+0x224>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d05e      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a34      	ldr	r2, [pc, #208]	; (8002e78 <HAL_DMA_Abort+0x228>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d059      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a33      	ldr	r2, [pc, #204]	; (8002e7c <HAL_DMA_Abort+0x22c>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d054      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a31      	ldr	r2, [pc, #196]	; (8002e80 <HAL_DMA_Abort+0x230>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d04f      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a30      	ldr	r2, [pc, #192]	; (8002e84 <HAL_DMA_Abort+0x234>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d04a      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a2e      	ldr	r2, [pc, #184]	; (8002e88 <HAL_DMA_Abort+0x238>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d045      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a2d      	ldr	r2, [pc, #180]	; (8002e8c <HAL_DMA_Abort+0x23c>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d040      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a2b      	ldr	r2, [pc, #172]	; (8002e90 <HAL_DMA_Abort+0x240>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d03b      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a2a      	ldr	r2, [pc, #168]	; (8002e94 <HAL_DMA_Abort+0x244>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d036      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a28      	ldr	r2, [pc, #160]	; (8002e98 <HAL_DMA_Abort+0x248>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d031      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a27      	ldr	r2, [pc, #156]	; (8002e9c <HAL_DMA_Abort+0x24c>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d02c      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a25      	ldr	r2, [pc, #148]	; (8002ea0 <HAL_DMA_Abort+0x250>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d027      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a24      	ldr	r2, [pc, #144]	; (8002ea4 <HAL_DMA_Abort+0x254>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d022      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a22      	ldr	r2, [pc, #136]	; (8002ea8 <HAL_DMA_Abort+0x258>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d01d      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a21      	ldr	r2, [pc, #132]	; (8002eac <HAL_DMA_Abort+0x25c>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d018      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a1f      	ldr	r2, [pc, #124]	; (8002eb0 <HAL_DMA_Abort+0x260>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d013      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a1e      	ldr	r2, [pc, #120]	; (8002eb4 <HAL_DMA_Abort+0x264>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d00e      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a1c      	ldr	r2, [pc, #112]	; (8002eb8 <HAL_DMA_Abort+0x268>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d009      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a1b      	ldr	r2, [pc, #108]	; (8002ebc <HAL_DMA_Abort+0x26c>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d004      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a19      	ldr	r2, [pc, #100]	; (8002ec0 <HAL_DMA_Abort+0x270>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d132      	bne.n	8002ec4 <HAL_DMA_Abort+0x274>
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e031      	b.n	8002ec6 <HAL_DMA_Abort+0x276>
 8002e62:	bf00      	nop
 8002e64:	40020010 	.word	0x40020010
 8002e68:	40020028 	.word	0x40020028
 8002e6c:	40020040 	.word	0x40020040
 8002e70:	40020058 	.word	0x40020058
 8002e74:	40020070 	.word	0x40020070
 8002e78:	40020088 	.word	0x40020088
 8002e7c:	400200a0 	.word	0x400200a0
 8002e80:	400200b8 	.word	0x400200b8
 8002e84:	40020410 	.word	0x40020410
 8002e88:	40020428 	.word	0x40020428
 8002e8c:	40020440 	.word	0x40020440
 8002e90:	40020458 	.word	0x40020458
 8002e94:	40020470 	.word	0x40020470
 8002e98:	40020488 	.word	0x40020488
 8002e9c:	400204a0 	.word	0x400204a0
 8002ea0:	400204b8 	.word	0x400204b8
 8002ea4:	58025408 	.word	0x58025408
 8002ea8:	5802541c 	.word	0x5802541c
 8002eac:	58025430 	.word	0x58025430
 8002eb0:	58025444 	.word	0x58025444
 8002eb4:	58025458 	.word	0x58025458
 8002eb8:	5802546c 	.word	0x5802546c
 8002ebc:	58025480 	.word	0x58025480
 8002ec0:	58025494 	.word	0x58025494
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d007      	beq.n	8002eda <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ed4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ed8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a6d      	ldr	r2, [pc, #436]	; (8003094 <HAL_DMA_Abort+0x444>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d04a      	beq.n	8002f7a <HAL_DMA_Abort+0x32a>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a6b      	ldr	r2, [pc, #428]	; (8003098 <HAL_DMA_Abort+0x448>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d045      	beq.n	8002f7a <HAL_DMA_Abort+0x32a>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a6a      	ldr	r2, [pc, #424]	; (800309c <HAL_DMA_Abort+0x44c>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d040      	beq.n	8002f7a <HAL_DMA_Abort+0x32a>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a68      	ldr	r2, [pc, #416]	; (80030a0 <HAL_DMA_Abort+0x450>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d03b      	beq.n	8002f7a <HAL_DMA_Abort+0x32a>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a67      	ldr	r2, [pc, #412]	; (80030a4 <HAL_DMA_Abort+0x454>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d036      	beq.n	8002f7a <HAL_DMA_Abort+0x32a>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a65      	ldr	r2, [pc, #404]	; (80030a8 <HAL_DMA_Abort+0x458>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d031      	beq.n	8002f7a <HAL_DMA_Abort+0x32a>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a64      	ldr	r2, [pc, #400]	; (80030ac <HAL_DMA_Abort+0x45c>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d02c      	beq.n	8002f7a <HAL_DMA_Abort+0x32a>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a62      	ldr	r2, [pc, #392]	; (80030b0 <HAL_DMA_Abort+0x460>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d027      	beq.n	8002f7a <HAL_DMA_Abort+0x32a>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a61      	ldr	r2, [pc, #388]	; (80030b4 <HAL_DMA_Abort+0x464>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d022      	beq.n	8002f7a <HAL_DMA_Abort+0x32a>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a5f      	ldr	r2, [pc, #380]	; (80030b8 <HAL_DMA_Abort+0x468>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d01d      	beq.n	8002f7a <HAL_DMA_Abort+0x32a>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a5e      	ldr	r2, [pc, #376]	; (80030bc <HAL_DMA_Abort+0x46c>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d018      	beq.n	8002f7a <HAL_DMA_Abort+0x32a>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a5c      	ldr	r2, [pc, #368]	; (80030c0 <HAL_DMA_Abort+0x470>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d013      	beq.n	8002f7a <HAL_DMA_Abort+0x32a>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a5b      	ldr	r2, [pc, #364]	; (80030c4 <HAL_DMA_Abort+0x474>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d00e      	beq.n	8002f7a <HAL_DMA_Abort+0x32a>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a59      	ldr	r2, [pc, #356]	; (80030c8 <HAL_DMA_Abort+0x478>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d009      	beq.n	8002f7a <HAL_DMA_Abort+0x32a>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a58      	ldr	r2, [pc, #352]	; (80030cc <HAL_DMA_Abort+0x47c>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d004      	beq.n	8002f7a <HAL_DMA_Abort+0x32a>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a56      	ldr	r2, [pc, #344]	; (80030d0 <HAL_DMA_Abort+0x480>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d108      	bne.n	8002f8c <HAL_DMA_Abort+0x33c>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f022 0201 	bic.w	r2, r2, #1
 8002f88:	601a      	str	r2, [r3, #0]
 8002f8a:	e007      	b.n	8002f9c <HAL_DMA_Abort+0x34c>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 0201 	bic.w	r2, r2, #1
 8002f9a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002f9c:	e013      	b.n	8002fc6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f9e:	f7fe ff61 	bl	8001e64 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b05      	cmp	r3, #5
 8002faa:	d90c      	bls.n	8002fc6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2203      	movs	r2, #3
 8002fb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e12d      	b.n	8003222 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1e5      	bne.n	8002f9e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a2f      	ldr	r2, [pc, #188]	; (8003094 <HAL_DMA_Abort+0x444>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d04a      	beq.n	8003072 <HAL_DMA_Abort+0x422>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a2d      	ldr	r2, [pc, #180]	; (8003098 <HAL_DMA_Abort+0x448>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d045      	beq.n	8003072 <HAL_DMA_Abort+0x422>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a2c      	ldr	r2, [pc, #176]	; (800309c <HAL_DMA_Abort+0x44c>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d040      	beq.n	8003072 <HAL_DMA_Abort+0x422>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a2a      	ldr	r2, [pc, #168]	; (80030a0 <HAL_DMA_Abort+0x450>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d03b      	beq.n	8003072 <HAL_DMA_Abort+0x422>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a29      	ldr	r2, [pc, #164]	; (80030a4 <HAL_DMA_Abort+0x454>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d036      	beq.n	8003072 <HAL_DMA_Abort+0x422>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a27      	ldr	r2, [pc, #156]	; (80030a8 <HAL_DMA_Abort+0x458>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d031      	beq.n	8003072 <HAL_DMA_Abort+0x422>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a26      	ldr	r2, [pc, #152]	; (80030ac <HAL_DMA_Abort+0x45c>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d02c      	beq.n	8003072 <HAL_DMA_Abort+0x422>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a24      	ldr	r2, [pc, #144]	; (80030b0 <HAL_DMA_Abort+0x460>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d027      	beq.n	8003072 <HAL_DMA_Abort+0x422>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a23      	ldr	r2, [pc, #140]	; (80030b4 <HAL_DMA_Abort+0x464>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d022      	beq.n	8003072 <HAL_DMA_Abort+0x422>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a21      	ldr	r2, [pc, #132]	; (80030b8 <HAL_DMA_Abort+0x468>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d01d      	beq.n	8003072 <HAL_DMA_Abort+0x422>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a20      	ldr	r2, [pc, #128]	; (80030bc <HAL_DMA_Abort+0x46c>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d018      	beq.n	8003072 <HAL_DMA_Abort+0x422>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a1e      	ldr	r2, [pc, #120]	; (80030c0 <HAL_DMA_Abort+0x470>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d013      	beq.n	8003072 <HAL_DMA_Abort+0x422>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a1d      	ldr	r2, [pc, #116]	; (80030c4 <HAL_DMA_Abort+0x474>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d00e      	beq.n	8003072 <HAL_DMA_Abort+0x422>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a1b      	ldr	r2, [pc, #108]	; (80030c8 <HAL_DMA_Abort+0x478>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d009      	beq.n	8003072 <HAL_DMA_Abort+0x422>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a1a      	ldr	r2, [pc, #104]	; (80030cc <HAL_DMA_Abort+0x47c>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d004      	beq.n	8003072 <HAL_DMA_Abort+0x422>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a18      	ldr	r2, [pc, #96]	; (80030d0 <HAL_DMA_Abort+0x480>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d101      	bne.n	8003076 <HAL_DMA_Abort+0x426>
 8003072:	2301      	movs	r3, #1
 8003074:	e000      	b.n	8003078 <HAL_DMA_Abort+0x428>
 8003076:	2300      	movs	r3, #0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d02b      	beq.n	80030d4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003080:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003086:	f003 031f 	and.w	r3, r3, #31
 800308a:	223f      	movs	r2, #63	; 0x3f
 800308c:	409a      	lsls	r2, r3
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	609a      	str	r2, [r3, #8]
 8003092:	e02a      	b.n	80030ea <HAL_DMA_Abort+0x49a>
 8003094:	40020010 	.word	0x40020010
 8003098:	40020028 	.word	0x40020028
 800309c:	40020040 	.word	0x40020040
 80030a0:	40020058 	.word	0x40020058
 80030a4:	40020070 	.word	0x40020070
 80030a8:	40020088 	.word	0x40020088
 80030ac:	400200a0 	.word	0x400200a0
 80030b0:	400200b8 	.word	0x400200b8
 80030b4:	40020410 	.word	0x40020410
 80030b8:	40020428 	.word	0x40020428
 80030bc:	40020440 	.word	0x40020440
 80030c0:	40020458 	.word	0x40020458
 80030c4:	40020470 	.word	0x40020470
 80030c8:	40020488 	.word	0x40020488
 80030cc:	400204a0 	.word	0x400204a0
 80030d0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030de:	f003 031f 	and.w	r3, r3, #31
 80030e2:	2201      	movs	r2, #1
 80030e4:	409a      	lsls	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a4f      	ldr	r2, [pc, #316]	; (800322c <HAL_DMA_Abort+0x5dc>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d072      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a4d      	ldr	r2, [pc, #308]	; (8003230 <HAL_DMA_Abort+0x5e0>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d06d      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a4c      	ldr	r2, [pc, #304]	; (8003234 <HAL_DMA_Abort+0x5e4>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d068      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a4a      	ldr	r2, [pc, #296]	; (8003238 <HAL_DMA_Abort+0x5e8>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d063      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a49      	ldr	r2, [pc, #292]	; (800323c <HAL_DMA_Abort+0x5ec>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d05e      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a47      	ldr	r2, [pc, #284]	; (8003240 <HAL_DMA_Abort+0x5f0>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d059      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a46      	ldr	r2, [pc, #280]	; (8003244 <HAL_DMA_Abort+0x5f4>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d054      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a44      	ldr	r2, [pc, #272]	; (8003248 <HAL_DMA_Abort+0x5f8>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d04f      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a43      	ldr	r2, [pc, #268]	; (800324c <HAL_DMA_Abort+0x5fc>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d04a      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a41      	ldr	r2, [pc, #260]	; (8003250 <HAL_DMA_Abort+0x600>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d045      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a40      	ldr	r2, [pc, #256]	; (8003254 <HAL_DMA_Abort+0x604>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d040      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a3e      	ldr	r2, [pc, #248]	; (8003258 <HAL_DMA_Abort+0x608>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d03b      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a3d      	ldr	r2, [pc, #244]	; (800325c <HAL_DMA_Abort+0x60c>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d036      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a3b      	ldr	r2, [pc, #236]	; (8003260 <HAL_DMA_Abort+0x610>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d031      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a3a      	ldr	r2, [pc, #232]	; (8003264 <HAL_DMA_Abort+0x614>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d02c      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a38      	ldr	r2, [pc, #224]	; (8003268 <HAL_DMA_Abort+0x618>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d027      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a37      	ldr	r2, [pc, #220]	; (800326c <HAL_DMA_Abort+0x61c>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d022      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a35      	ldr	r2, [pc, #212]	; (8003270 <HAL_DMA_Abort+0x620>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d01d      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a34      	ldr	r2, [pc, #208]	; (8003274 <HAL_DMA_Abort+0x624>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d018      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a32      	ldr	r2, [pc, #200]	; (8003278 <HAL_DMA_Abort+0x628>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d013      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a31      	ldr	r2, [pc, #196]	; (800327c <HAL_DMA_Abort+0x62c>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d00e      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a2f      	ldr	r2, [pc, #188]	; (8003280 <HAL_DMA_Abort+0x630>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d009      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a2e      	ldr	r2, [pc, #184]	; (8003284 <HAL_DMA_Abort+0x634>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d004      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a2c      	ldr	r2, [pc, #176]	; (8003288 <HAL_DMA_Abort+0x638>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d101      	bne.n	80031de <HAL_DMA_Abort+0x58e>
 80031da:	2301      	movs	r3, #1
 80031dc:	e000      	b.n	80031e0 <HAL_DMA_Abort+0x590>
 80031de:	2300      	movs	r3, #0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d015      	beq.n	8003210 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80031ec:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00c      	beq.n	8003210 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003200:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003204:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800320e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3718      	adds	r7, #24
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	40020010 	.word	0x40020010
 8003230:	40020028 	.word	0x40020028
 8003234:	40020040 	.word	0x40020040
 8003238:	40020058 	.word	0x40020058
 800323c:	40020070 	.word	0x40020070
 8003240:	40020088 	.word	0x40020088
 8003244:	400200a0 	.word	0x400200a0
 8003248:	400200b8 	.word	0x400200b8
 800324c:	40020410 	.word	0x40020410
 8003250:	40020428 	.word	0x40020428
 8003254:	40020440 	.word	0x40020440
 8003258:	40020458 	.word	0x40020458
 800325c:	40020470 	.word	0x40020470
 8003260:	40020488 	.word	0x40020488
 8003264:	400204a0 	.word	0x400204a0
 8003268:	400204b8 	.word	0x400204b8
 800326c:	58025408 	.word	0x58025408
 8003270:	5802541c 	.word	0x5802541c
 8003274:	58025430 	.word	0x58025430
 8003278:	58025444 	.word	0x58025444
 800327c:	58025458 	.word	0x58025458
 8003280:	5802546c 	.word	0x5802546c
 8003284:	58025480 	.word	0x58025480
 8003288:	58025494 	.word	0x58025494

0800328c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e237      	b.n	800370e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d004      	beq.n	80032b4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2280      	movs	r2, #128	; 0x80
 80032ae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e22c      	b.n	800370e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a5c      	ldr	r2, [pc, #368]	; (800342c <HAL_DMA_Abort_IT+0x1a0>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d04a      	beq.n	8003354 <HAL_DMA_Abort_IT+0xc8>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a5b      	ldr	r2, [pc, #364]	; (8003430 <HAL_DMA_Abort_IT+0x1a4>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d045      	beq.n	8003354 <HAL_DMA_Abort_IT+0xc8>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a59      	ldr	r2, [pc, #356]	; (8003434 <HAL_DMA_Abort_IT+0x1a8>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d040      	beq.n	8003354 <HAL_DMA_Abort_IT+0xc8>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a58      	ldr	r2, [pc, #352]	; (8003438 <HAL_DMA_Abort_IT+0x1ac>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d03b      	beq.n	8003354 <HAL_DMA_Abort_IT+0xc8>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a56      	ldr	r2, [pc, #344]	; (800343c <HAL_DMA_Abort_IT+0x1b0>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d036      	beq.n	8003354 <HAL_DMA_Abort_IT+0xc8>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a55      	ldr	r2, [pc, #340]	; (8003440 <HAL_DMA_Abort_IT+0x1b4>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d031      	beq.n	8003354 <HAL_DMA_Abort_IT+0xc8>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a53      	ldr	r2, [pc, #332]	; (8003444 <HAL_DMA_Abort_IT+0x1b8>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d02c      	beq.n	8003354 <HAL_DMA_Abort_IT+0xc8>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a52      	ldr	r2, [pc, #328]	; (8003448 <HAL_DMA_Abort_IT+0x1bc>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d027      	beq.n	8003354 <HAL_DMA_Abort_IT+0xc8>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a50      	ldr	r2, [pc, #320]	; (800344c <HAL_DMA_Abort_IT+0x1c0>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d022      	beq.n	8003354 <HAL_DMA_Abort_IT+0xc8>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a4f      	ldr	r2, [pc, #316]	; (8003450 <HAL_DMA_Abort_IT+0x1c4>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d01d      	beq.n	8003354 <HAL_DMA_Abort_IT+0xc8>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a4d      	ldr	r2, [pc, #308]	; (8003454 <HAL_DMA_Abort_IT+0x1c8>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d018      	beq.n	8003354 <HAL_DMA_Abort_IT+0xc8>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a4c      	ldr	r2, [pc, #304]	; (8003458 <HAL_DMA_Abort_IT+0x1cc>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d013      	beq.n	8003354 <HAL_DMA_Abort_IT+0xc8>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a4a      	ldr	r2, [pc, #296]	; (800345c <HAL_DMA_Abort_IT+0x1d0>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d00e      	beq.n	8003354 <HAL_DMA_Abort_IT+0xc8>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a49      	ldr	r2, [pc, #292]	; (8003460 <HAL_DMA_Abort_IT+0x1d4>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d009      	beq.n	8003354 <HAL_DMA_Abort_IT+0xc8>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a47      	ldr	r2, [pc, #284]	; (8003464 <HAL_DMA_Abort_IT+0x1d8>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d004      	beq.n	8003354 <HAL_DMA_Abort_IT+0xc8>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a46      	ldr	r2, [pc, #280]	; (8003468 <HAL_DMA_Abort_IT+0x1dc>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d101      	bne.n	8003358 <HAL_DMA_Abort_IT+0xcc>
 8003354:	2301      	movs	r3, #1
 8003356:	e000      	b.n	800335a <HAL_DMA_Abort_IT+0xce>
 8003358:	2300      	movs	r3, #0
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 8086 	beq.w	800346c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2204      	movs	r2, #4
 8003364:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a2f      	ldr	r2, [pc, #188]	; (800342c <HAL_DMA_Abort_IT+0x1a0>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d04a      	beq.n	8003408 <HAL_DMA_Abort_IT+0x17c>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a2e      	ldr	r2, [pc, #184]	; (8003430 <HAL_DMA_Abort_IT+0x1a4>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d045      	beq.n	8003408 <HAL_DMA_Abort_IT+0x17c>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a2c      	ldr	r2, [pc, #176]	; (8003434 <HAL_DMA_Abort_IT+0x1a8>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d040      	beq.n	8003408 <HAL_DMA_Abort_IT+0x17c>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a2b      	ldr	r2, [pc, #172]	; (8003438 <HAL_DMA_Abort_IT+0x1ac>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d03b      	beq.n	8003408 <HAL_DMA_Abort_IT+0x17c>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a29      	ldr	r2, [pc, #164]	; (800343c <HAL_DMA_Abort_IT+0x1b0>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d036      	beq.n	8003408 <HAL_DMA_Abort_IT+0x17c>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a28      	ldr	r2, [pc, #160]	; (8003440 <HAL_DMA_Abort_IT+0x1b4>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d031      	beq.n	8003408 <HAL_DMA_Abort_IT+0x17c>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a26      	ldr	r2, [pc, #152]	; (8003444 <HAL_DMA_Abort_IT+0x1b8>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d02c      	beq.n	8003408 <HAL_DMA_Abort_IT+0x17c>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a25      	ldr	r2, [pc, #148]	; (8003448 <HAL_DMA_Abort_IT+0x1bc>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d027      	beq.n	8003408 <HAL_DMA_Abort_IT+0x17c>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a23      	ldr	r2, [pc, #140]	; (800344c <HAL_DMA_Abort_IT+0x1c0>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d022      	beq.n	8003408 <HAL_DMA_Abort_IT+0x17c>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a22      	ldr	r2, [pc, #136]	; (8003450 <HAL_DMA_Abort_IT+0x1c4>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d01d      	beq.n	8003408 <HAL_DMA_Abort_IT+0x17c>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a20      	ldr	r2, [pc, #128]	; (8003454 <HAL_DMA_Abort_IT+0x1c8>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d018      	beq.n	8003408 <HAL_DMA_Abort_IT+0x17c>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a1f      	ldr	r2, [pc, #124]	; (8003458 <HAL_DMA_Abort_IT+0x1cc>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d013      	beq.n	8003408 <HAL_DMA_Abort_IT+0x17c>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a1d      	ldr	r2, [pc, #116]	; (800345c <HAL_DMA_Abort_IT+0x1d0>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d00e      	beq.n	8003408 <HAL_DMA_Abort_IT+0x17c>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a1c      	ldr	r2, [pc, #112]	; (8003460 <HAL_DMA_Abort_IT+0x1d4>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d009      	beq.n	8003408 <HAL_DMA_Abort_IT+0x17c>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a1a      	ldr	r2, [pc, #104]	; (8003464 <HAL_DMA_Abort_IT+0x1d8>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d004      	beq.n	8003408 <HAL_DMA_Abort_IT+0x17c>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a19      	ldr	r2, [pc, #100]	; (8003468 <HAL_DMA_Abort_IT+0x1dc>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d108      	bne.n	800341a <HAL_DMA_Abort_IT+0x18e>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 0201 	bic.w	r2, r2, #1
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	e178      	b.n	800370c <HAL_DMA_Abort_IT+0x480>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0201 	bic.w	r2, r2, #1
 8003428:	601a      	str	r2, [r3, #0]
 800342a:	e16f      	b.n	800370c <HAL_DMA_Abort_IT+0x480>
 800342c:	40020010 	.word	0x40020010
 8003430:	40020028 	.word	0x40020028
 8003434:	40020040 	.word	0x40020040
 8003438:	40020058 	.word	0x40020058
 800343c:	40020070 	.word	0x40020070
 8003440:	40020088 	.word	0x40020088
 8003444:	400200a0 	.word	0x400200a0
 8003448:	400200b8 	.word	0x400200b8
 800344c:	40020410 	.word	0x40020410
 8003450:	40020428 	.word	0x40020428
 8003454:	40020440 	.word	0x40020440
 8003458:	40020458 	.word	0x40020458
 800345c:	40020470 	.word	0x40020470
 8003460:	40020488 	.word	0x40020488
 8003464:	400204a0 	.word	0x400204a0
 8003468:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 020e 	bic.w	r2, r2, #14
 800347a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a6c      	ldr	r2, [pc, #432]	; (8003634 <HAL_DMA_Abort_IT+0x3a8>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d04a      	beq.n	800351c <HAL_DMA_Abort_IT+0x290>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a6b      	ldr	r2, [pc, #428]	; (8003638 <HAL_DMA_Abort_IT+0x3ac>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d045      	beq.n	800351c <HAL_DMA_Abort_IT+0x290>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a69      	ldr	r2, [pc, #420]	; (800363c <HAL_DMA_Abort_IT+0x3b0>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d040      	beq.n	800351c <HAL_DMA_Abort_IT+0x290>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a68      	ldr	r2, [pc, #416]	; (8003640 <HAL_DMA_Abort_IT+0x3b4>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d03b      	beq.n	800351c <HAL_DMA_Abort_IT+0x290>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a66      	ldr	r2, [pc, #408]	; (8003644 <HAL_DMA_Abort_IT+0x3b8>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d036      	beq.n	800351c <HAL_DMA_Abort_IT+0x290>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a65      	ldr	r2, [pc, #404]	; (8003648 <HAL_DMA_Abort_IT+0x3bc>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d031      	beq.n	800351c <HAL_DMA_Abort_IT+0x290>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a63      	ldr	r2, [pc, #396]	; (800364c <HAL_DMA_Abort_IT+0x3c0>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d02c      	beq.n	800351c <HAL_DMA_Abort_IT+0x290>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a62      	ldr	r2, [pc, #392]	; (8003650 <HAL_DMA_Abort_IT+0x3c4>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d027      	beq.n	800351c <HAL_DMA_Abort_IT+0x290>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a60      	ldr	r2, [pc, #384]	; (8003654 <HAL_DMA_Abort_IT+0x3c8>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d022      	beq.n	800351c <HAL_DMA_Abort_IT+0x290>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a5f      	ldr	r2, [pc, #380]	; (8003658 <HAL_DMA_Abort_IT+0x3cc>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d01d      	beq.n	800351c <HAL_DMA_Abort_IT+0x290>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a5d      	ldr	r2, [pc, #372]	; (800365c <HAL_DMA_Abort_IT+0x3d0>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d018      	beq.n	800351c <HAL_DMA_Abort_IT+0x290>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a5c      	ldr	r2, [pc, #368]	; (8003660 <HAL_DMA_Abort_IT+0x3d4>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d013      	beq.n	800351c <HAL_DMA_Abort_IT+0x290>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a5a      	ldr	r2, [pc, #360]	; (8003664 <HAL_DMA_Abort_IT+0x3d8>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d00e      	beq.n	800351c <HAL_DMA_Abort_IT+0x290>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a59      	ldr	r2, [pc, #356]	; (8003668 <HAL_DMA_Abort_IT+0x3dc>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d009      	beq.n	800351c <HAL_DMA_Abort_IT+0x290>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a57      	ldr	r2, [pc, #348]	; (800366c <HAL_DMA_Abort_IT+0x3e0>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d004      	beq.n	800351c <HAL_DMA_Abort_IT+0x290>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a56      	ldr	r2, [pc, #344]	; (8003670 <HAL_DMA_Abort_IT+0x3e4>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d108      	bne.n	800352e <HAL_DMA_Abort_IT+0x2a2>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 0201 	bic.w	r2, r2, #1
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	e007      	b.n	800353e <HAL_DMA_Abort_IT+0x2b2>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 0201 	bic.w	r2, r2, #1
 800353c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a3c      	ldr	r2, [pc, #240]	; (8003634 <HAL_DMA_Abort_IT+0x3a8>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d072      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a3a      	ldr	r2, [pc, #232]	; (8003638 <HAL_DMA_Abort_IT+0x3ac>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d06d      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a39      	ldr	r2, [pc, #228]	; (800363c <HAL_DMA_Abort_IT+0x3b0>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d068      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a37      	ldr	r2, [pc, #220]	; (8003640 <HAL_DMA_Abort_IT+0x3b4>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d063      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a36      	ldr	r2, [pc, #216]	; (8003644 <HAL_DMA_Abort_IT+0x3b8>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d05e      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a34      	ldr	r2, [pc, #208]	; (8003648 <HAL_DMA_Abort_IT+0x3bc>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d059      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a33      	ldr	r2, [pc, #204]	; (800364c <HAL_DMA_Abort_IT+0x3c0>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d054      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a31      	ldr	r2, [pc, #196]	; (8003650 <HAL_DMA_Abort_IT+0x3c4>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d04f      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a30      	ldr	r2, [pc, #192]	; (8003654 <HAL_DMA_Abort_IT+0x3c8>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d04a      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a2e      	ldr	r2, [pc, #184]	; (8003658 <HAL_DMA_Abort_IT+0x3cc>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d045      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a2d      	ldr	r2, [pc, #180]	; (800365c <HAL_DMA_Abort_IT+0x3d0>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d040      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a2b      	ldr	r2, [pc, #172]	; (8003660 <HAL_DMA_Abort_IT+0x3d4>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d03b      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a2a      	ldr	r2, [pc, #168]	; (8003664 <HAL_DMA_Abort_IT+0x3d8>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d036      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a28      	ldr	r2, [pc, #160]	; (8003668 <HAL_DMA_Abort_IT+0x3dc>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d031      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a27      	ldr	r2, [pc, #156]	; (800366c <HAL_DMA_Abort_IT+0x3e0>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d02c      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a25      	ldr	r2, [pc, #148]	; (8003670 <HAL_DMA_Abort_IT+0x3e4>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d027      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a24      	ldr	r2, [pc, #144]	; (8003674 <HAL_DMA_Abort_IT+0x3e8>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d022      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a22      	ldr	r2, [pc, #136]	; (8003678 <HAL_DMA_Abort_IT+0x3ec>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d01d      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a21      	ldr	r2, [pc, #132]	; (800367c <HAL_DMA_Abort_IT+0x3f0>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d018      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a1f      	ldr	r2, [pc, #124]	; (8003680 <HAL_DMA_Abort_IT+0x3f4>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d013      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a1e      	ldr	r2, [pc, #120]	; (8003684 <HAL_DMA_Abort_IT+0x3f8>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d00e      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a1c      	ldr	r2, [pc, #112]	; (8003688 <HAL_DMA_Abort_IT+0x3fc>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d009      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a1b      	ldr	r2, [pc, #108]	; (800368c <HAL_DMA_Abort_IT+0x400>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d004      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a19      	ldr	r2, [pc, #100]	; (8003690 <HAL_DMA_Abort_IT+0x404>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d132      	bne.n	8003694 <HAL_DMA_Abort_IT+0x408>
 800362e:	2301      	movs	r3, #1
 8003630:	e031      	b.n	8003696 <HAL_DMA_Abort_IT+0x40a>
 8003632:	bf00      	nop
 8003634:	40020010 	.word	0x40020010
 8003638:	40020028 	.word	0x40020028
 800363c:	40020040 	.word	0x40020040
 8003640:	40020058 	.word	0x40020058
 8003644:	40020070 	.word	0x40020070
 8003648:	40020088 	.word	0x40020088
 800364c:	400200a0 	.word	0x400200a0
 8003650:	400200b8 	.word	0x400200b8
 8003654:	40020410 	.word	0x40020410
 8003658:	40020428 	.word	0x40020428
 800365c:	40020440 	.word	0x40020440
 8003660:	40020458 	.word	0x40020458
 8003664:	40020470 	.word	0x40020470
 8003668:	40020488 	.word	0x40020488
 800366c:	400204a0 	.word	0x400204a0
 8003670:	400204b8 	.word	0x400204b8
 8003674:	58025408 	.word	0x58025408
 8003678:	5802541c 	.word	0x5802541c
 800367c:	58025430 	.word	0x58025430
 8003680:	58025444 	.word	0x58025444
 8003684:	58025458 	.word	0x58025458
 8003688:	5802546c 	.word	0x5802546c
 800368c:	58025480 	.word	0x58025480
 8003690:	58025494 	.word	0x58025494
 8003694:	2300      	movs	r3, #0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d028      	beq.n	80036ec <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036a8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ae:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b4:	f003 031f 	and.w	r3, r3, #31
 80036b8:	2201      	movs	r2, #1
 80036ba:	409a      	lsls	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80036c8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00c      	beq.n	80036ec <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036e0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80036ea:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003700:	2b00      	cmp	r3, #0
 8003702:	d003      	beq.n	800370c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop

08003718 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b08a      	sub	sp, #40	; 0x28
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003720:	2300      	movs	r3, #0
 8003722:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003724:	4b67      	ldr	r3, [pc, #412]	; (80038c4 <HAL_DMA_IRQHandler+0x1ac>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a67      	ldr	r2, [pc, #412]	; (80038c8 <HAL_DMA_IRQHandler+0x1b0>)
 800372a:	fba2 2303 	umull	r2, r3, r2, r3
 800372e:	0a9b      	lsrs	r3, r3, #10
 8003730:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003736:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800373c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800373e:	6a3b      	ldr	r3, [r7, #32]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a5f      	ldr	r2, [pc, #380]	; (80038cc <HAL_DMA_IRQHandler+0x1b4>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d04a      	beq.n	80037ea <HAL_DMA_IRQHandler+0xd2>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a5d      	ldr	r2, [pc, #372]	; (80038d0 <HAL_DMA_IRQHandler+0x1b8>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d045      	beq.n	80037ea <HAL_DMA_IRQHandler+0xd2>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a5c      	ldr	r2, [pc, #368]	; (80038d4 <HAL_DMA_IRQHandler+0x1bc>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d040      	beq.n	80037ea <HAL_DMA_IRQHandler+0xd2>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a5a      	ldr	r2, [pc, #360]	; (80038d8 <HAL_DMA_IRQHandler+0x1c0>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d03b      	beq.n	80037ea <HAL_DMA_IRQHandler+0xd2>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a59      	ldr	r2, [pc, #356]	; (80038dc <HAL_DMA_IRQHandler+0x1c4>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d036      	beq.n	80037ea <HAL_DMA_IRQHandler+0xd2>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a57      	ldr	r2, [pc, #348]	; (80038e0 <HAL_DMA_IRQHandler+0x1c8>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d031      	beq.n	80037ea <HAL_DMA_IRQHandler+0xd2>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a56      	ldr	r2, [pc, #344]	; (80038e4 <HAL_DMA_IRQHandler+0x1cc>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d02c      	beq.n	80037ea <HAL_DMA_IRQHandler+0xd2>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a54      	ldr	r2, [pc, #336]	; (80038e8 <HAL_DMA_IRQHandler+0x1d0>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d027      	beq.n	80037ea <HAL_DMA_IRQHandler+0xd2>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a53      	ldr	r2, [pc, #332]	; (80038ec <HAL_DMA_IRQHandler+0x1d4>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d022      	beq.n	80037ea <HAL_DMA_IRQHandler+0xd2>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a51      	ldr	r2, [pc, #324]	; (80038f0 <HAL_DMA_IRQHandler+0x1d8>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d01d      	beq.n	80037ea <HAL_DMA_IRQHandler+0xd2>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a50      	ldr	r2, [pc, #320]	; (80038f4 <HAL_DMA_IRQHandler+0x1dc>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d018      	beq.n	80037ea <HAL_DMA_IRQHandler+0xd2>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a4e      	ldr	r2, [pc, #312]	; (80038f8 <HAL_DMA_IRQHandler+0x1e0>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d013      	beq.n	80037ea <HAL_DMA_IRQHandler+0xd2>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a4d      	ldr	r2, [pc, #308]	; (80038fc <HAL_DMA_IRQHandler+0x1e4>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d00e      	beq.n	80037ea <HAL_DMA_IRQHandler+0xd2>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a4b      	ldr	r2, [pc, #300]	; (8003900 <HAL_DMA_IRQHandler+0x1e8>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d009      	beq.n	80037ea <HAL_DMA_IRQHandler+0xd2>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a4a      	ldr	r2, [pc, #296]	; (8003904 <HAL_DMA_IRQHandler+0x1ec>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d004      	beq.n	80037ea <HAL_DMA_IRQHandler+0xd2>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a48      	ldr	r2, [pc, #288]	; (8003908 <HAL_DMA_IRQHandler+0x1f0>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d101      	bne.n	80037ee <HAL_DMA_IRQHandler+0xd6>
 80037ea:	2301      	movs	r3, #1
 80037ec:	e000      	b.n	80037f0 <HAL_DMA_IRQHandler+0xd8>
 80037ee:	2300      	movs	r3, #0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f000 842b 	beq.w	800404c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037fa:	f003 031f 	and.w	r3, r3, #31
 80037fe:	2208      	movs	r2, #8
 8003800:	409a      	lsls	r2, r3
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	4013      	ands	r3, r2
 8003806:	2b00      	cmp	r3, #0
 8003808:	f000 80a2 	beq.w	8003950 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a2e      	ldr	r2, [pc, #184]	; (80038cc <HAL_DMA_IRQHandler+0x1b4>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d04a      	beq.n	80038ac <HAL_DMA_IRQHandler+0x194>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a2d      	ldr	r2, [pc, #180]	; (80038d0 <HAL_DMA_IRQHandler+0x1b8>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d045      	beq.n	80038ac <HAL_DMA_IRQHandler+0x194>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a2b      	ldr	r2, [pc, #172]	; (80038d4 <HAL_DMA_IRQHandler+0x1bc>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d040      	beq.n	80038ac <HAL_DMA_IRQHandler+0x194>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a2a      	ldr	r2, [pc, #168]	; (80038d8 <HAL_DMA_IRQHandler+0x1c0>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d03b      	beq.n	80038ac <HAL_DMA_IRQHandler+0x194>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a28      	ldr	r2, [pc, #160]	; (80038dc <HAL_DMA_IRQHandler+0x1c4>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d036      	beq.n	80038ac <HAL_DMA_IRQHandler+0x194>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a27      	ldr	r2, [pc, #156]	; (80038e0 <HAL_DMA_IRQHandler+0x1c8>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d031      	beq.n	80038ac <HAL_DMA_IRQHandler+0x194>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a25      	ldr	r2, [pc, #148]	; (80038e4 <HAL_DMA_IRQHandler+0x1cc>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d02c      	beq.n	80038ac <HAL_DMA_IRQHandler+0x194>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a24      	ldr	r2, [pc, #144]	; (80038e8 <HAL_DMA_IRQHandler+0x1d0>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d027      	beq.n	80038ac <HAL_DMA_IRQHandler+0x194>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a22      	ldr	r2, [pc, #136]	; (80038ec <HAL_DMA_IRQHandler+0x1d4>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d022      	beq.n	80038ac <HAL_DMA_IRQHandler+0x194>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a21      	ldr	r2, [pc, #132]	; (80038f0 <HAL_DMA_IRQHandler+0x1d8>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d01d      	beq.n	80038ac <HAL_DMA_IRQHandler+0x194>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a1f      	ldr	r2, [pc, #124]	; (80038f4 <HAL_DMA_IRQHandler+0x1dc>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d018      	beq.n	80038ac <HAL_DMA_IRQHandler+0x194>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a1e      	ldr	r2, [pc, #120]	; (80038f8 <HAL_DMA_IRQHandler+0x1e0>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d013      	beq.n	80038ac <HAL_DMA_IRQHandler+0x194>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a1c      	ldr	r2, [pc, #112]	; (80038fc <HAL_DMA_IRQHandler+0x1e4>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d00e      	beq.n	80038ac <HAL_DMA_IRQHandler+0x194>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a1b      	ldr	r2, [pc, #108]	; (8003900 <HAL_DMA_IRQHandler+0x1e8>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d009      	beq.n	80038ac <HAL_DMA_IRQHandler+0x194>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a19      	ldr	r2, [pc, #100]	; (8003904 <HAL_DMA_IRQHandler+0x1ec>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d004      	beq.n	80038ac <HAL_DMA_IRQHandler+0x194>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a18      	ldr	r2, [pc, #96]	; (8003908 <HAL_DMA_IRQHandler+0x1f0>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d12f      	bne.n	800390c <HAL_DMA_IRQHandler+0x1f4>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0304 	and.w	r3, r3, #4
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	bf14      	ite	ne
 80038ba:	2301      	movne	r3, #1
 80038bc:	2300      	moveq	r3, #0
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	e02e      	b.n	8003920 <HAL_DMA_IRQHandler+0x208>
 80038c2:	bf00      	nop
 80038c4:	24000000 	.word	0x24000000
 80038c8:	1b4e81b5 	.word	0x1b4e81b5
 80038cc:	40020010 	.word	0x40020010
 80038d0:	40020028 	.word	0x40020028
 80038d4:	40020040 	.word	0x40020040
 80038d8:	40020058 	.word	0x40020058
 80038dc:	40020070 	.word	0x40020070
 80038e0:	40020088 	.word	0x40020088
 80038e4:	400200a0 	.word	0x400200a0
 80038e8:	400200b8 	.word	0x400200b8
 80038ec:	40020410 	.word	0x40020410
 80038f0:	40020428 	.word	0x40020428
 80038f4:	40020440 	.word	0x40020440
 80038f8:	40020458 	.word	0x40020458
 80038fc:	40020470 	.word	0x40020470
 8003900:	40020488 	.word	0x40020488
 8003904:	400204a0 	.word	0x400204a0
 8003908:	400204b8 	.word	0x400204b8
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0308 	and.w	r3, r3, #8
 8003916:	2b00      	cmp	r3, #0
 8003918:	bf14      	ite	ne
 800391a:	2301      	movne	r3, #1
 800391c:	2300      	moveq	r3, #0
 800391e:	b2db      	uxtb	r3, r3
 8003920:	2b00      	cmp	r3, #0
 8003922:	d015      	beq.n	8003950 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 0204 	bic.w	r2, r2, #4
 8003932:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003938:	f003 031f 	and.w	r3, r3, #31
 800393c:	2208      	movs	r2, #8
 800393e:	409a      	lsls	r2, r3
 8003940:	6a3b      	ldr	r3, [r7, #32]
 8003942:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003948:	f043 0201 	orr.w	r2, r3, #1
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003954:	f003 031f 	and.w	r3, r3, #31
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	fa22 f303 	lsr.w	r3, r2, r3
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b00      	cmp	r3, #0
 8003964:	d06e      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a69      	ldr	r2, [pc, #420]	; (8003b10 <HAL_DMA_IRQHandler+0x3f8>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d04a      	beq.n	8003a06 <HAL_DMA_IRQHandler+0x2ee>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a67      	ldr	r2, [pc, #412]	; (8003b14 <HAL_DMA_IRQHandler+0x3fc>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d045      	beq.n	8003a06 <HAL_DMA_IRQHandler+0x2ee>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a66      	ldr	r2, [pc, #408]	; (8003b18 <HAL_DMA_IRQHandler+0x400>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d040      	beq.n	8003a06 <HAL_DMA_IRQHandler+0x2ee>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a64      	ldr	r2, [pc, #400]	; (8003b1c <HAL_DMA_IRQHandler+0x404>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d03b      	beq.n	8003a06 <HAL_DMA_IRQHandler+0x2ee>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a63      	ldr	r2, [pc, #396]	; (8003b20 <HAL_DMA_IRQHandler+0x408>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d036      	beq.n	8003a06 <HAL_DMA_IRQHandler+0x2ee>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a61      	ldr	r2, [pc, #388]	; (8003b24 <HAL_DMA_IRQHandler+0x40c>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d031      	beq.n	8003a06 <HAL_DMA_IRQHandler+0x2ee>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a60      	ldr	r2, [pc, #384]	; (8003b28 <HAL_DMA_IRQHandler+0x410>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d02c      	beq.n	8003a06 <HAL_DMA_IRQHandler+0x2ee>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a5e      	ldr	r2, [pc, #376]	; (8003b2c <HAL_DMA_IRQHandler+0x414>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d027      	beq.n	8003a06 <HAL_DMA_IRQHandler+0x2ee>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a5d      	ldr	r2, [pc, #372]	; (8003b30 <HAL_DMA_IRQHandler+0x418>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d022      	beq.n	8003a06 <HAL_DMA_IRQHandler+0x2ee>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a5b      	ldr	r2, [pc, #364]	; (8003b34 <HAL_DMA_IRQHandler+0x41c>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d01d      	beq.n	8003a06 <HAL_DMA_IRQHandler+0x2ee>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a5a      	ldr	r2, [pc, #360]	; (8003b38 <HAL_DMA_IRQHandler+0x420>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d018      	beq.n	8003a06 <HAL_DMA_IRQHandler+0x2ee>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a58      	ldr	r2, [pc, #352]	; (8003b3c <HAL_DMA_IRQHandler+0x424>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d013      	beq.n	8003a06 <HAL_DMA_IRQHandler+0x2ee>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a57      	ldr	r2, [pc, #348]	; (8003b40 <HAL_DMA_IRQHandler+0x428>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d00e      	beq.n	8003a06 <HAL_DMA_IRQHandler+0x2ee>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a55      	ldr	r2, [pc, #340]	; (8003b44 <HAL_DMA_IRQHandler+0x42c>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d009      	beq.n	8003a06 <HAL_DMA_IRQHandler+0x2ee>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a54      	ldr	r2, [pc, #336]	; (8003b48 <HAL_DMA_IRQHandler+0x430>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d004      	beq.n	8003a06 <HAL_DMA_IRQHandler+0x2ee>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a52      	ldr	r2, [pc, #328]	; (8003b4c <HAL_DMA_IRQHandler+0x434>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d10a      	bne.n	8003a1c <HAL_DMA_IRQHandler+0x304>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	bf14      	ite	ne
 8003a14:	2301      	movne	r3, #1
 8003a16:	2300      	moveq	r3, #0
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	e003      	b.n	8003a24 <HAL_DMA_IRQHandler+0x30c>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2300      	movs	r3, #0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00d      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a2c:	f003 031f 	and.w	r3, r3, #31
 8003a30:	2201      	movs	r2, #1
 8003a32:	409a      	lsls	r2, r3
 8003a34:	6a3b      	ldr	r3, [r7, #32]
 8003a36:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a3c:	f043 0202 	orr.w	r2, r3, #2
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a48:	f003 031f 	and.w	r3, r3, #31
 8003a4c:	2204      	movs	r2, #4
 8003a4e:	409a      	lsls	r2, r3
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	4013      	ands	r3, r2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f000 808f 	beq.w	8003b78 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a2c      	ldr	r2, [pc, #176]	; (8003b10 <HAL_DMA_IRQHandler+0x3f8>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d04a      	beq.n	8003afa <HAL_DMA_IRQHandler+0x3e2>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a2a      	ldr	r2, [pc, #168]	; (8003b14 <HAL_DMA_IRQHandler+0x3fc>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d045      	beq.n	8003afa <HAL_DMA_IRQHandler+0x3e2>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a29      	ldr	r2, [pc, #164]	; (8003b18 <HAL_DMA_IRQHandler+0x400>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d040      	beq.n	8003afa <HAL_DMA_IRQHandler+0x3e2>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a27      	ldr	r2, [pc, #156]	; (8003b1c <HAL_DMA_IRQHandler+0x404>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d03b      	beq.n	8003afa <HAL_DMA_IRQHandler+0x3e2>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a26      	ldr	r2, [pc, #152]	; (8003b20 <HAL_DMA_IRQHandler+0x408>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d036      	beq.n	8003afa <HAL_DMA_IRQHandler+0x3e2>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a24      	ldr	r2, [pc, #144]	; (8003b24 <HAL_DMA_IRQHandler+0x40c>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d031      	beq.n	8003afa <HAL_DMA_IRQHandler+0x3e2>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a23      	ldr	r2, [pc, #140]	; (8003b28 <HAL_DMA_IRQHandler+0x410>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d02c      	beq.n	8003afa <HAL_DMA_IRQHandler+0x3e2>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a21      	ldr	r2, [pc, #132]	; (8003b2c <HAL_DMA_IRQHandler+0x414>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d027      	beq.n	8003afa <HAL_DMA_IRQHandler+0x3e2>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a20      	ldr	r2, [pc, #128]	; (8003b30 <HAL_DMA_IRQHandler+0x418>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d022      	beq.n	8003afa <HAL_DMA_IRQHandler+0x3e2>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a1e      	ldr	r2, [pc, #120]	; (8003b34 <HAL_DMA_IRQHandler+0x41c>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d01d      	beq.n	8003afa <HAL_DMA_IRQHandler+0x3e2>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a1d      	ldr	r2, [pc, #116]	; (8003b38 <HAL_DMA_IRQHandler+0x420>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d018      	beq.n	8003afa <HAL_DMA_IRQHandler+0x3e2>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a1b      	ldr	r2, [pc, #108]	; (8003b3c <HAL_DMA_IRQHandler+0x424>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d013      	beq.n	8003afa <HAL_DMA_IRQHandler+0x3e2>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a1a      	ldr	r2, [pc, #104]	; (8003b40 <HAL_DMA_IRQHandler+0x428>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d00e      	beq.n	8003afa <HAL_DMA_IRQHandler+0x3e2>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a18      	ldr	r2, [pc, #96]	; (8003b44 <HAL_DMA_IRQHandler+0x42c>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d009      	beq.n	8003afa <HAL_DMA_IRQHandler+0x3e2>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a17      	ldr	r2, [pc, #92]	; (8003b48 <HAL_DMA_IRQHandler+0x430>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d004      	beq.n	8003afa <HAL_DMA_IRQHandler+0x3e2>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a15      	ldr	r2, [pc, #84]	; (8003b4c <HAL_DMA_IRQHandler+0x434>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d12a      	bne.n	8003b50 <HAL_DMA_IRQHandler+0x438>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	bf14      	ite	ne
 8003b08:	2301      	movne	r3, #1
 8003b0a:	2300      	moveq	r3, #0
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	e023      	b.n	8003b58 <HAL_DMA_IRQHandler+0x440>
 8003b10:	40020010 	.word	0x40020010
 8003b14:	40020028 	.word	0x40020028
 8003b18:	40020040 	.word	0x40020040
 8003b1c:	40020058 	.word	0x40020058
 8003b20:	40020070 	.word	0x40020070
 8003b24:	40020088 	.word	0x40020088
 8003b28:	400200a0 	.word	0x400200a0
 8003b2c:	400200b8 	.word	0x400200b8
 8003b30:	40020410 	.word	0x40020410
 8003b34:	40020428 	.word	0x40020428
 8003b38:	40020440 	.word	0x40020440
 8003b3c:	40020458 	.word	0x40020458
 8003b40:	40020470 	.word	0x40020470
 8003b44:	40020488 	.word	0x40020488
 8003b48:	400204a0 	.word	0x400204a0
 8003b4c:	400204b8 	.word	0x400204b8
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2300      	movs	r3, #0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00d      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b60:	f003 031f 	and.w	r3, r3, #31
 8003b64:	2204      	movs	r2, #4
 8003b66:	409a      	lsls	r2, r3
 8003b68:	6a3b      	ldr	r3, [r7, #32]
 8003b6a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b70:	f043 0204 	orr.w	r2, r3, #4
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b7c:	f003 031f 	and.w	r3, r3, #31
 8003b80:	2210      	movs	r2, #16
 8003b82:	409a      	lsls	r2, r3
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	4013      	ands	r3, r2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f000 80a6 	beq.w	8003cda <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a85      	ldr	r2, [pc, #532]	; (8003da8 <HAL_DMA_IRQHandler+0x690>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d04a      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x516>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a83      	ldr	r2, [pc, #524]	; (8003dac <HAL_DMA_IRQHandler+0x694>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d045      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x516>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a82      	ldr	r2, [pc, #520]	; (8003db0 <HAL_DMA_IRQHandler+0x698>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d040      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x516>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a80      	ldr	r2, [pc, #512]	; (8003db4 <HAL_DMA_IRQHandler+0x69c>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d03b      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x516>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a7f      	ldr	r2, [pc, #508]	; (8003db8 <HAL_DMA_IRQHandler+0x6a0>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d036      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x516>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a7d      	ldr	r2, [pc, #500]	; (8003dbc <HAL_DMA_IRQHandler+0x6a4>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d031      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x516>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a7c      	ldr	r2, [pc, #496]	; (8003dc0 <HAL_DMA_IRQHandler+0x6a8>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d02c      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x516>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a7a      	ldr	r2, [pc, #488]	; (8003dc4 <HAL_DMA_IRQHandler+0x6ac>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d027      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x516>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a79      	ldr	r2, [pc, #484]	; (8003dc8 <HAL_DMA_IRQHandler+0x6b0>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d022      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x516>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a77      	ldr	r2, [pc, #476]	; (8003dcc <HAL_DMA_IRQHandler+0x6b4>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d01d      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x516>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a76      	ldr	r2, [pc, #472]	; (8003dd0 <HAL_DMA_IRQHandler+0x6b8>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d018      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x516>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a74      	ldr	r2, [pc, #464]	; (8003dd4 <HAL_DMA_IRQHandler+0x6bc>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d013      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x516>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a73      	ldr	r2, [pc, #460]	; (8003dd8 <HAL_DMA_IRQHandler+0x6c0>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d00e      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x516>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a71      	ldr	r2, [pc, #452]	; (8003ddc <HAL_DMA_IRQHandler+0x6c4>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d009      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x516>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a70      	ldr	r2, [pc, #448]	; (8003de0 <HAL_DMA_IRQHandler+0x6c8>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d004      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x516>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a6e      	ldr	r2, [pc, #440]	; (8003de4 <HAL_DMA_IRQHandler+0x6cc>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d10a      	bne.n	8003c44 <HAL_DMA_IRQHandler+0x52c>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0308 	and.w	r3, r3, #8
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	bf14      	ite	ne
 8003c3c:	2301      	movne	r3, #1
 8003c3e:	2300      	moveq	r3, #0
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	e009      	b.n	8003c58 <HAL_DMA_IRQHandler+0x540>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0304 	and.w	r3, r3, #4
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	bf14      	ite	ne
 8003c52:	2301      	movne	r3, #1
 8003c54:	2300      	moveq	r3, #0
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d03e      	beq.n	8003cda <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c60:	f003 031f 	and.w	r3, r3, #31
 8003c64:	2210      	movs	r2, #16
 8003c66:	409a      	lsls	r2, r3
 8003c68:	6a3b      	ldr	r3, [r7, #32]
 8003c6a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d018      	beq.n	8003cac <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d108      	bne.n	8003c9a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d024      	beq.n	8003cda <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	4798      	blx	r3
 8003c98:	e01f      	b.n	8003cda <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d01b      	beq.n	8003cda <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	4798      	blx	r3
 8003caa:	e016      	b.n	8003cda <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d107      	bne.n	8003cca <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 0208 	bic.w	r2, r2, #8
 8003cc8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d003      	beq.n	8003cda <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cde:	f003 031f 	and.w	r3, r3, #31
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	409a      	lsls	r2, r3
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	4013      	ands	r3, r2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 8110 	beq.w	8003f10 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a2c      	ldr	r2, [pc, #176]	; (8003da8 <HAL_DMA_IRQHandler+0x690>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d04a      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x678>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a2b      	ldr	r2, [pc, #172]	; (8003dac <HAL_DMA_IRQHandler+0x694>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d045      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x678>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a29      	ldr	r2, [pc, #164]	; (8003db0 <HAL_DMA_IRQHandler+0x698>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d040      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x678>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a28      	ldr	r2, [pc, #160]	; (8003db4 <HAL_DMA_IRQHandler+0x69c>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d03b      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x678>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a26      	ldr	r2, [pc, #152]	; (8003db8 <HAL_DMA_IRQHandler+0x6a0>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d036      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x678>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a25      	ldr	r2, [pc, #148]	; (8003dbc <HAL_DMA_IRQHandler+0x6a4>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d031      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x678>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a23      	ldr	r2, [pc, #140]	; (8003dc0 <HAL_DMA_IRQHandler+0x6a8>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d02c      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x678>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a22      	ldr	r2, [pc, #136]	; (8003dc4 <HAL_DMA_IRQHandler+0x6ac>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d027      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x678>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a20      	ldr	r2, [pc, #128]	; (8003dc8 <HAL_DMA_IRQHandler+0x6b0>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d022      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x678>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a1f      	ldr	r2, [pc, #124]	; (8003dcc <HAL_DMA_IRQHandler+0x6b4>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d01d      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x678>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a1d      	ldr	r2, [pc, #116]	; (8003dd0 <HAL_DMA_IRQHandler+0x6b8>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d018      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x678>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a1c      	ldr	r2, [pc, #112]	; (8003dd4 <HAL_DMA_IRQHandler+0x6bc>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d013      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x678>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a1a      	ldr	r2, [pc, #104]	; (8003dd8 <HAL_DMA_IRQHandler+0x6c0>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d00e      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x678>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a19      	ldr	r2, [pc, #100]	; (8003ddc <HAL_DMA_IRQHandler+0x6c4>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d009      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x678>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a17      	ldr	r2, [pc, #92]	; (8003de0 <HAL_DMA_IRQHandler+0x6c8>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d004      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x678>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a16      	ldr	r2, [pc, #88]	; (8003de4 <HAL_DMA_IRQHandler+0x6cc>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d12b      	bne.n	8003de8 <HAL_DMA_IRQHandler+0x6d0>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0310 	and.w	r3, r3, #16
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	bf14      	ite	ne
 8003d9e:	2301      	movne	r3, #1
 8003da0:	2300      	moveq	r3, #0
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	e02a      	b.n	8003dfc <HAL_DMA_IRQHandler+0x6e4>
 8003da6:	bf00      	nop
 8003da8:	40020010 	.word	0x40020010
 8003dac:	40020028 	.word	0x40020028
 8003db0:	40020040 	.word	0x40020040
 8003db4:	40020058 	.word	0x40020058
 8003db8:	40020070 	.word	0x40020070
 8003dbc:	40020088 	.word	0x40020088
 8003dc0:	400200a0 	.word	0x400200a0
 8003dc4:	400200b8 	.word	0x400200b8
 8003dc8:	40020410 	.word	0x40020410
 8003dcc:	40020428 	.word	0x40020428
 8003dd0:	40020440 	.word	0x40020440
 8003dd4:	40020458 	.word	0x40020458
 8003dd8:	40020470 	.word	0x40020470
 8003ddc:	40020488 	.word	0x40020488
 8003de0:	400204a0 	.word	0x400204a0
 8003de4:	400204b8 	.word	0x400204b8
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	bf14      	ite	ne
 8003df6:	2301      	movne	r3, #1
 8003df8:	2300      	moveq	r3, #0
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f000 8087 	beq.w	8003f10 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e06:	f003 031f 	and.w	r3, r3, #31
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	409a      	lsls	r2, r3
 8003e0e:	6a3b      	ldr	r3, [r7, #32]
 8003e10:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b04      	cmp	r3, #4
 8003e1c:	d139      	bne.n	8003e92 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 0216 	bic.w	r2, r2, #22
 8003e2c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	695a      	ldr	r2, [r3, #20]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e3c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d103      	bne.n	8003e4e <HAL_DMA_IRQHandler+0x736>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d007      	beq.n	8003e5e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f022 0208 	bic.w	r2, r2, #8
 8003e5c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e62:	f003 031f 	and.w	r3, r3, #31
 8003e66:	223f      	movs	r2, #63	; 0x3f
 8003e68:	409a      	lsls	r2, r3
 8003e6a:	6a3b      	ldr	r3, [r7, #32]
 8003e6c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f000 834a 	beq.w	800451c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	4798      	blx	r3
          }
          return;
 8003e90:	e344      	b.n	800451c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d018      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d108      	bne.n	8003ec0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d02c      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	4798      	blx	r3
 8003ebe:	e027      	b.n	8003f10 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d023      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	4798      	blx	r3
 8003ed0:	e01e      	b.n	8003f10 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d10f      	bne.n	8003f00 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f022 0210 	bic.w	r2, r2, #16
 8003eee:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d003      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 8306 	beq.w	8004526 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f000 8088 	beq.w	8004038 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2204      	movs	r2, #4
 8003f2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a7a      	ldr	r2, [pc, #488]	; (8004120 <HAL_DMA_IRQHandler+0xa08>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d04a      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x8b8>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a79      	ldr	r2, [pc, #484]	; (8004124 <HAL_DMA_IRQHandler+0xa0c>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d045      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x8b8>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a77      	ldr	r2, [pc, #476]	; (8004128 <HAL_DMA_IRQHandler+0xa10>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d040      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x8b8>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a76      	ldr	r2, [pc, #472]	; (800412c <HAL_DMA_IRQHandler+0xa14>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d03b      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x8b8>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a74      	ldr	r2, [pc, #464]	; (8004130 <HAL_DMA_IRQHandler+0xa18>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d036      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x8b8>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a73      	ldr	r2, [pc, #460]	; (8004134 <HAL_DMA_IRQHandler+0xa1c>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d031      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x8b8>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a71      	ldr	r2, [pc, #452]	; (8004138 <HAL_DMA_IRQHandler+0xa20>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d02c      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x8b8>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a70      	ldr	r2, [pc, #448]	; (800413c <HAL_DMA_IRQHandler+0xa24>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d027      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x8b8>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a6e      	ldr	r2, [pc, #440]	; (8004140 <HAL_DMA_IRQHandler+0xa28>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d022      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x8b8>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a6d      	ldr	r2, [pc, #436]	; (8004144 <HAL_DMA_IRQHandler+0xa2c>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d01d      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x8b8>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a6b      	ldr	r2, [pc, #428]	; (8004148 <HAL_DMA_IRQHandler+0xa30>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d018      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x8b8>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a6a      	ldr	r2, [pc, #424]	; (800414c <HAL_DMA_IRQHandler+0xa34>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d013      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x8b8>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a68      	ldr	r2, [pc, #416]	; (8004150 <HAL_DMA_IRQHandler+0xa38>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d00e      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x8b8>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a67      	ldr	r2, [pc, #412]	; (8004154 <HAL_DMA_IRQHandler+0xa3c>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d009      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x8b8>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a65      	ldr	r2, [pc, #404]	; (8004158 <HAL_DMA_IRQHandler+0xa40>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d004      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x8b8>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a64      	ldr	r2, [pc, #400]	; (800415c <HAL_DMA_IRQHandler+0xa44>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d108      	bne.n	8003fe2 <HAL_DMA_IRQHandler+0x8ca>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f022 0201 	bic.w	r2, r2, #1
 8003fde:	601a      	str	r2, [r3, #0]
 8003fe0:	e007      	b.n	8003ff2 <HAL_DMA_IRQHandler+0x8da>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 0201 	bic.w	r2, r2, #1
 8003ff0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	60fb      	str	r3, [r7, #12]
 8003ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d307      	bcc.n	800400e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0301 	and.w	r3, r3, #1
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1f2      	bne.n	8003ff2 <HAL_DMA_IRQHandler+0x8da>
 800400c:	e000      	b.n	8004010 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800400e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d004      	beq.n	8004028 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2203      	movs	r2, #3
 8004022:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004026:	e003      	b.n	8004030 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800403c:	2b00      	cmp	r3, #0
 800403e:	f000 8272 	beq.w	8004526 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	4798      	blx	r3
 800404a:	e26c      	b.n	8004526 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a43      	ldr	r2, [pc, #268]	; (8004160 <HAL_DMA_IRQHandler+0xa48>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d022      	beq.n	800409c <HAL_DMA_IRQHandler+0x984>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a42      	ldr	r2, [pc, #264]	; (8004164 <HAL_DMA_IRQHandler+0xa4c>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d01d      	beq.n	800409c <HAL_DMA_IRQHandler+0x984>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a40      	ldr	r2, [pc, #256]	; (8004168 <HAL_DMA_IRQHandler+0xa50>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d018      	beq.n	800409c <HAL_DMA_IRQHandler+0x984>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a3f      	ldr	r2, [pc, #252]	; (800416c <HAL_DMA_IRQHandler+0xa54>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d013      	beq.n	800409c <HAL_DMA_IRQHandler+0x984>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a3d      	ldr	r2, [pc, #244]	; (8004170 <HAL_DMA_IRQHandler+0xa58>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d00e      	beq.n	800409c <HAL_DMA_IRQHandler+0x984>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a3c      	ldr	r2, [pc, #240]	; (8004174 <HAL_DMA_IRQHandler+0xa5c>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d009      	beq.n	800409c <HAL_DMA_IRQHandler+0x984>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a3a      	ldr	r2, [pc, #232]	; (8004178 <HAL_DMA_IRQHandler+0xa60>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d004      	beq.n	800409c <HAL_DMA_IRQHandler+0x984>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a39      	ldr	r2, [pc, #228]	; (800417c <HAL_DMA_IRQHandler+0xa64>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d101      	bne.n	80040a0 <HAL_DMA_IRQHandler+0x988>
 800409c:	2301      	movs	r3, #1
 800409e:	e000      	b.n	80040a2 <HAL_DMA_IRQHandler+0x98a>
 80040a0:	2300      	movs	r3, #0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f000 823f 	beq.w	8004526 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b4:	f003 031f 	and.w	r3, r3, #31
 80040b8:	2204      	movs	r2, #4
 80040ba:	409a      	lsls	r2, r3
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	4013      	ands	r3, r2
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f000 80cd 	beq.w	8004260 <HAL_DMA_IRQHandler+0xb48>
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	f003 0304 	and.w	r3, r3, #4
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f000 80c7 	beq.w	8004260 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040d6:	f003 031f 	and.w	r3, r3, #31
 80040da:	2204      	movs	r2, #4
 80040dc:	409a      	lsls	r2, r3
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d049      	beq.n	8004180 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d109      	bne.n	800410a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	f000 8210 	beq.w	8004520 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004108:	e20a      	b.n	8004520 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410e:	2b00      	cmp	r3, #0
 8004110:	f000 8206 	beq.w	8004520 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800411c:	e200      	b.n	8004520 <HAL_DMA_IRQHandler+0xe08>
 800411e:	bf00      	nop
 8004120:	40020010 	.word	0x40020010
 8004124:	40020028 	.word	0x40020028
 8004128:	40020040 	.word	0x40020040
 800412c:	40020058 	.word	0x40020058
 8004130:	40020070 	.word	0x40020070
 8004134:	40020088 	.word	0x40020088
 8004138:	400200a0 	.word	0x400200a0
 800413c:	400200b8 	.word	0x400200b8
 8004140:	40020410 	.word	0x40020410
 8004144:	40020428 	.word	0x40020428
 8004148:	40020440 	.word	0x40020440
 800414c:	40020458 	.word	0x40020458
 8004150:	40020470 	.word	0x40020470
 8004154:	40020488 	.word	0x40020488
 8004158:	400204a0 	.word	0x400204a0
 800415c:	400204b8 	.word	0x400204b8
 8004160:	58025408 	.word	0x58025408
 8004164:	5802541c 	.word	0x5802541c
 8004168:	58025430 	.word	0x58025430
 800416c:	58025444 	.word	0x58025444
 8004170:	58025458 	.word	0x58025458
 8004174:	5802546c 	.word	0x5802546c
 8004178:	58025480 	.word	0x58025480
 800417c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	f003 0320 	and.w	r3, r3, #32
 8004186:	2b00      	cmp	r3, #0
 8004188:	d160      	bne.n	800424c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a7f      	ldr	r2, [pc, #508]	; (800438c <HAL_DMA_IRQHandler+0xc74>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d04a      	beq.n	800422a <HAL_DMA_IRQHandler+0xb12>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a7d      	ldr	r2, [pc, #500]	; (8004390 <HAL_DMA_IRQHandler+0xc78>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d045      	beq.n	800422a <HAL_DMA_IRQHandler+0xb12>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a7c      	ldr	r2, [pc, #496]	; (8004394 <HAL_DMA_IRQHandler+0xc7c>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d040      	beq.n	800422a <HAL_DMA_IRQHandler+0xb12>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a7a      	ldr	r2, [pc, #488]	; (8004398 <HAL_DMA_IRQHandler+0xc80>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d03b      	beq.n	800422a <HAL_DMA_IRQHandler+0xb12>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a79      	ldr	r2, [pc, #484]	; (800439c <HAL_DMA_IRQHandler+0xc84>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d036      	beq.n	800422a <HAL_DMA_IRQHandler+0xb12>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a77      	ldr	r2, [pc, #476]	; (80043a0 <HAL_DMA_IRQHandler+0xc88>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d031      	beq.n	800422a <HAL_DMA_IRQHandler+0xb12>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a76      	ldr	r2, [pc, #472]	; (80043a4 <HAL_DMA_IRQHandler+0xc8c>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d02c      	beq.n	800422a <HAL_DMA_IRQHandler+0xb12>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a74      	ldr	r2, [pc, #464]	; (80043a8 <HAL_DMA_IRQHandler+0xc90>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d027      	beq.n	800422a <HAL_DMA_IRQHandler+0xb12>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a73      	ldr	r2, [pc, #460]	; (80043ac <HAL_DMA_IRQHandler+0xc94>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d022      	beq.n	800422a <HAL_DMA_IRQHandler+0xb12>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a71      	ldr	r2, [pc, #452]	; (80043b0 <HAL_DMA_IRQHandler+0xc98>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d01d      	beq.n	800422a <HAL_DMA_IRQHandler+0xb12>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a70      	ldr	r2, [pc, #448]	; (80043b4 <HAL_DMA_IRQHandler+0xc9c>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d018      	beq.n	800422a <HAL_DMA_IRQHandler+0xb12>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a6e      	ldr	r2, [pc, #440]	; (80043b8 <HAL_DMA_IRQHandler+0xca0>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d013      	beq.n	800422a <HAL_DMA_IRQHandler+0xb12>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a6d      	ldr	r2, [pc, #436]	; (80043bc <HAL_DMA_IRQHandler+0xca4>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d00e      	beq.n	800422a <HAL_DMA_IRQHandler+0xb12>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a6b      	ldr	r2, [pc, #428]	; (80043c0 <HAL_DMA_IRQHandler+0xca8>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d009      	beq.n	800422a <HAL_DMA_IRQHandler+0xb12>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a6a      	ldr	r2, [pc, #424]	; (80043c4 <HAL_DMA_IRQHandler+0xcac>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d004      	beq.n	800422a <HAL_DMA_IRQHandler+0xb12>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a68      	ldr	r2, [pc, #416]	; (80043c8 <HAL_DMA_IRQHandler+0xcb0>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d108      	bne.n	800423c <HAL_DMA_IRQHandler+0xb24>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f022 0208 	bic.w	r2, r2, #8
 8004238:	601a      	str	r2, [r3, #0]
 800423a:	e007      	b.n	800424c <HAL_DMA_IRQHandler+0xb34>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f022 0204 	bic.w	r2, r2, #4
 800424a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004250:	2b00      	cmp	r3, #0
 8004252:	f000 8165 	beq.w	8004520 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800425e:	e15f      	b.n	8004520 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004264:	f003 031f 	and.w	r3, r3, #31
 8004268:	2202      	movs	r2, #2
 800426a:	409a      	lsls	r2, r3
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	4013      	ands	r3, r2
 8004270:	2b00      	cmp	r3, #0
 8004272:	f000 80c5 	beq.w	8004400 <HAL_DMA_IRQHandler+0xce8>
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	2b00      	cmp	r3, #0
 800427e:	f000 80bf 	beq.w	8004400 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004286:	f003 031f 	and.w	r3, r3, #31
 800428a:	2202      	movs	r2, #2
 800428c:	409a      	lsls	r2, r3
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d018      	beq.n	80042ce <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d109      	bne.n	80042ba <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f000 813a 	beq.w	8004524 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042b8:	e134      	b.n	8004524 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f000 8130 	beq.w	8004524 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042cc:	e12a      	b.n	8004524 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	f003 0320 	and.w	r3, r3, #32
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f040 8089 	bne.w	80043ec <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a2b      	ldr	r2, [pc, #172]	; (800438c <HAL_DMA_IRQHandler+0xc74>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d04a      	beq.n	800437a <HAL_DMA_IRQHandler+0xc62>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a29      	ldr	r2, [pc, #164]	; (8004390 <HAL_DMA_IRQHandler+0xc78>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d045      	beq.n	800437a <HAL_DMA_IRQHandler+0xc62>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a28      	ldr	r2, [pc, #160]	; (8004394 <HAL_DMA_IRQHandler+0xc7c>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d040      	beq.n	800437a <HAL_DMA_IRQHandler+0xc62>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a26      	ldr	r2, [pc, #152]	; (8004398 <HAL_DMA_IRQHandler+0xc80>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d03b      	beq.n	800437a <HAL_DMA_IRQHandler+0xc62>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a25      	ldr	r2, [pc, #148]	; (800439c <HAL_DMA_IRQHandler+0xc84>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d036      	beq.n	800437a <HAL_DMA_IRQHandler+0xc62>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a23      	ldr	r2, [pc, #140]	; (80043a0 <HAL_DMA_IRQHandler+0xc88>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d031      	beq.n	800437a <HAL_DMA_IRQHandler+0xc62>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a22      	ldr	r2, [pc, #136]	; (80043a4 <HAL_DMA_IRQHandler+0xc8c>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d02c      	beq.n	800437a <HAL_DMA_IRQHandler+0xc62>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a20      	ldr	r2, [pc, #128]	; (80043a8 <HAL_DMA_IRQHandler+0xc90>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d027      	beq.n	800437a <HAL_DMA_IRQHandler+0xc62>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a1f      	ldr	r2, [pc, #124]	; (80043ac <HAL_DMA_IRQHandler+0xc94>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d022      	beq.n	800437a <HAL_DMA_IRQHandler+0xc62>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a1d      	ldr	r2, [pc, #116]	; (80043b0 <HAL_DMA_IRQHandler+0xc98>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d01d      	beq.n	800437a <HAL_DMA_IRQHandler+0xc62>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a1c      	ldr	r2, [pc, #112]	; (80043b4 <HAL_DMA_IRQHandler+0xc9c>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d018      	beq.n	800437a <HAL_DMA_IRQHandler+0xc62>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a1a      	ldr	r2, [pc, #104]	; (80043b8 <HAL_DMA_IRQHandler+0xca0>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d013      	beq.n	800437a <HAL_DMA_IRQHandler+0xc62>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a19      	ldr	r2, [pc, #100]	; (80043bc <HAL_DMA_IRQHandler+0xca4>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d00e      	beq.n	800437a <HAL_DMA_IRQHandler+0xc62>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a17      	ldr	r2, [pc, #92]	; (80043c0 <HAL_DMA_IRQHandler+0xca8>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d009      	beq.n	800437a <HAL_DMA_IRQHandler+0xc62>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a16      	ldr	r2, [pc, #88]	; (80043c4 <HAL_DMA_IRQHandler+0xcac>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d004      	beq.n	800437a <HAL_DMA_IRQHandler+0xc62>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a14      	ldr	r2, [pc, #80]	; (80043c8 <HAL_DMA_IRQHandler+0xcb0>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d128      	bne.n	80043cc <HAL_DMA_IRQHandler+0xcb4>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f022 0214 	bic.w	r2, r2, #20
 8004388:	601a      	str	r2, [r3, #0]
 800438a:	e027      	b.n	80043dc <HAL_DMA_IRQHandler+0xcc4>
 800438c:	40020010 	.word	0x40020010
 8004390:	40020028 	.word	0x40020028
 8004394:	40020040 	.word	0x40020040
 8004398:	40020058 	.word	0x40020058
 800439c:	40020070 	.word	0x40020070
 80043a0:	40020088 	.word	0x40020088
 80043a4:	400200a0 	.word	0x400200a0
 80043a8:	400200b8 	.word	0x400200b8
 80043ac:	40020410 	.word	0x40020410
 80043b0:	40020428 	.word	0x40020428
 80043b4:	40020440 	.word	0x40020440
 80043b8:	40020458 	.word	0x40020458
 80043bc:	40020470 	.word	0x40020470
 80043c0:	40020488 	.word	0x40020488
 80043c4:	400204a0 	.word	0x400204a0
 80043c8:	400204b8 	.word	0x400204b8
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f022 020a 	bic.w	r2, r2, #10
 80043da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f000 8097 	beq.w	8004524 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043fe:	e091      	b.n	8004524 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004404:	f003 031f 	and.w	r3, r3, #31
 8004408:	2208      	movs	r2, #8
 800440a:	409a      	lsls	r2, r3
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	4013      	ands	r3, r2
 8004410:	2b00      	cmp	r3, #0
 8004412:	f000 8088 	beq.w	8004526 <HAL_DMA_IRQHandler+0xe0e>
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	f003 0308 	and.w	r3, r3, #8
 800441c:	2b00      	cmp	r3, #0
 800441e:	f000 8082 	beq.w	8004526 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a41      	ldr	r2, [pc, #260]	; (800452c <HAL_DMA_IRQHandler+0xe14>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d04a      	beq.n	80044c2 <HAL_DMA_IRQHandler+0xdaa>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a3f      	ldr	r2, [pc, #252]	; (8004530 <HAL_DMA_IRQHandler+0xe18>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d045      	beq.n	80044c2 <HAL_DMA_IRQHandler+0xdaa>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a3e      	ldr	r2, [pc, #248]	; (8004534 <HAL_DMA_IRQHandler+0xe1c>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d040      	beq.n	80044c2 <HAL_DMA_IRQHandler+0xdaa>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a3c      	ldr	r2, [pc, #240]	; (8004538 <HAL_DMA_IRQHandler+0xe20>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d03b      	beq.n	80044c2 <HAL_DMA_IRQHandler+0xdaa>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a3b      	ldr	r2, [pc, #236]	; (800453c <HAL_DMA_IRQHandler+0xe24>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d036      	beq.n	80044c2 <HAL_DMA_IRQHandler+0xdaa>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a39      	ldr	r2, [pc, #228]	; (8004540 <HAL_DMA_IRQHandler+0xe28>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d031      	beq.n	80044c2 <HAL_DMA_IRQHandler+0xdaa>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a38      	ldr	r2, [pc, #224]	; (8004544 <HAL_DMA_IRQHandler+0xe2c>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d02c      	beq.n	80044c2 <HAL_DMA_IRQHandler+0xdaa>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a36      	ldr	r2, [pc, #216]	; (8004548 <HAL_DMA_IRQHandler+0xe30>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d027      	beq.n	80044c2 <HAL_DMA_IRQHandler+0xdaa>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a35      	ldr	r2, [pc, #212]	; (800454c <HAL_DMA_IRQHandler+0xe34>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d022      	beq.n	80044c2 <HAL_DMA_IRQHandler+0xdaa>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a33      	ldr	r2, [pc, #204]	; (8004550 <HAL_DMA_IRQHandler+0xe38>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d01d      	beq.n	80044c2 <HAL_DMA_IRQHandler+0xdaa>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a32      	ldr	r2, [pc, #200]	; (8004554 <HAL_DMA_IRQHandler+0xe3c>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d018      	beq.n	80044c2 <HAL_DMA_IRQHandler+0xdaa>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a30      	ldr	r2, [pc, #192]	; (8004558 <HAL_DMA_IRQHandler+0xe40>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d013      	beq.n	80044c2 <HAL_DMA_IRQHandler+0xdaa>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a2f      	ldr	r2, [pc, #188]	; (800455c <HAL_DMA_IRQHandler+0xe44>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d00e      	beq.n	80044c2 <HAL_DMA_IRQHandler+0xdaa>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a2d      	ldr	r2, [pc, #180]	; (8004560 <HAL_DMA_IRQHandler+0xe48>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d009      	beq.n	80044c2 <HAL_DMA_IRQHandler+0xdaa>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a2c      	ldr	r2, [pc, #176]	; (8004564 <HAL_DMA_IRQHandler+0xe4c>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d004      	beq.n	80044c2 <HAL_DMA_IRQHandler+0xdaa>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a2a      	ldr	r2, [pc, #168]	; (8004568 <HAL_DMA_IRQHandler+0xe50>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d108      	bne.n	80044d4 <HAL_DMA_IRQHandler+0xdbc>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f022 021c 	bic.w	r2, r2, #28
 80044d0:	601a      	str	r2, [r3, #0]
 80044d2:	e007      	b.n	80044e4 <HAL_DMA_IRQHandler+0xdcc>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f022 020e 	bic.w	r2, r2, #14
 80044e2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044e8:	f003 031f 	and.w	r3, r3, #31
 80044ec:	2201      	movs	r2, #1
 80044ee:	409a      	lsls	r2, r3
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2201      	movs	r2, #1
 80044fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800450e:	2b00      	cmp	r3, #0
 8004510:	d009      	beq.n	8004526 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	4798      	blx	r3
 800451a:	e004      	b.n	8004526 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800451c:	bf00      	nop
 800451e:	e002      	b.n	8004526 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004520:	bf00      	nop
 8004522:	e000      	b.n	8004526 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004524:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004526:	3728      	adds	r7, #40	; 0x28
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	40020010 	.word	0x40020010
 8004530:	40020028 	.word	0x40020028
 8004534:	40020040 	.word	0x40020040
 8004538:	40020058 	.word	0x40020058
 800453c:	40020070 	.word	0x40020070
 8004540:	40020088 	.word	0x40020088
 8004544:	400200a0 	.word	0x400200a0
 8004548:	400200b8 	.word	0x400200b8
 800454c:	40020410 	.word	0x40020410
 8004550:	40020428 	.word	0x40020428
 8004554:	40020440 	.word	0x40020440
 8004558:	40020458 	.word	0x40020458
 800455c:	40020470 	.word	0x40020470
 8004560:	40020488 	.word	0x40020488
 8004564:	400204a0 	.word	0x400204a0
 8004568:	400204b8 	.word	0x400204b8

0800456c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800456c:	b480      	push	{r7}
 800456e:	b087      	sub	sp, #28
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
 8004578:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800457e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004584:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a7f      	ldr	r2, [pc, #508]	; (8004788 <DMA_SetConfig+0x21c>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d072      	beq.n	8004676 <DMA_SetConfig+0x10a>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a7d      	ldr	r2, [pc, #500]	; (800478c <DMA_SetConfig+0x220>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d06d      	beq.n	8004676 <DMA_SetConfig+0x10a>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a7c      	ldr	r2, [pc, #496]	; (8004790 <DMA_SetConfig+0x224>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d068      	beq.n	8004676 <DMA_SetConfig+0x10a>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a7a      	ldr	r2, [pc, #488]	; (8004794 <DMA_SetConfig+0x228>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d063      	beq.n	8004676 <DMA_SetConfig+0x10a>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a79      	ldr	r2, [pc, #484]	; (8004798 <DMA_SetConfig+0x22c>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d05e      	beq.n	8004676 <DMA_SetConfig+0x10a>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a77      	ldr	r2, [pc, #476]	; (800479c <DMA_SetConfig+0x230>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d059      	beq.n	8004676 <DMA_SetConfig+0x10a>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a76      	ldr	r2, [pc, #472]	; (80047a0 <DMA_SetConfig+0x234>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d054      	beq.n	8004676 <DMA_SetConfig+0x10a>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a74      	ldr	r2, [pc, #464]	; (80047a4 <DMA_SetConfig+0x238>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d04f      	beq.n	8004676 <DMA_SetConfig+0x10a>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a73      	ldr	r2, [pc, #460]	; (80047a8 <DMA_SetConfig+0x23c>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d04a      	beq.n	8004676 <DMA_SetConfig+0x10a>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a71      	ldr	r2, [pc, #452]	; (80047ac <DMA_SetConfig+0x240>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d045      	beq.n	8004676 <DMA_SetConfig+0x10a>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a70      	ldr	r2, [pc, #448]	; (80047b0 <DMA_SetConfig+0x244>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d040      	beq.n	8004676 <DMA_SetConfig+0x10a>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a6e      	ldr	r2, [pc, #440]	; (80047b4 <DMA_SetConfig+0x248>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d03b      	beq.n	8004676 <DMA_SetConfig+0x10a>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a6d      	ldr	r2, [pc, #436]	; (80047b8 <DMA_SetConfig+0x24c>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d036      	beq.n	8004676 <DMA_SetConfig+0x10a>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a6b      	ldr	r2, [pc, #428]	; (80047bc <DMA_SetConfig+0x250>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d031      	beq.n	8004676 <DMA_SetConfig+0x10a>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a6a      	ldr	r2, [pc, #424]	; (80047c0 <DMA_SetConfig+0x254>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d02c      	beq.n	8004676 <DMA_SetConfig+0x10a>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a68      	ldr	r2, [pc, #416]	; (80047c4 <DMA_SetConfig+0x258>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d027      	beq.n	8004676 <DMA_SetConfig+0x10a>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a67      	ldr	r2, [pc, #412]	; (80047c8 <DMA_SetConfig+0x25c>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d022      	beq.n	8004676 <DMA_SetConfig+0x10a>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a65      	ldr	r2, [pc, #404]	; (80047cc <DMA_SetConfig+0x260>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d01d      	beq.n	8004676 <DMA_SetConfig+0x10a>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a64      	ldr	r2, [pc, #400]	; (80047d0 <DMA_SetConfig+0x264>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d018      	beq.n	8004676 <DMA_SetConfig+0x10a>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a62      	ldr	r2, [pc, #392]	; (80047d4 <DMA_SetConfig+0x268>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d013      	beq.n	8004676 <DMA_SetConfig+0x10a>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a61      	ldr	r2, [pc, #388]	; (80047d8 <DMA_SetConfig+0x26c>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d00e      	beq.n	8004676 <DMA_SetConfig+0x10a>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a5f      	ldr	r2, [pc, #380]	; (80047dc <DMA_SetConfig+0x270>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d009      	beq.n	8004676 <DMA_SetConfig+0x10a>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a5e      	ldr	r2, [pc, #376]	; (80047e0 <DMA_SetConfig+0x274>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d004      	beq.n	8004676 <DMA_SetConfig+0x10a>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a5c      	ldr	r2, [pc, #368]	; (80047e4 <DMA_SetConfig+0x278>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d101      	bne.n	800467a <DMA_SetConfig+0x10e>
 8004676:	2301      	movs	r3, #1
 8004678:	e000      	b.n	800467c <DMA_SetConfig+0x110>
 800467a:	2300      	movs	r3, #0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00d      	beq.n	800469c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004688:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800468e:	2b00      	cmp	r3, #0
 8004690:	d004      	beq.n	800469c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800469a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a39      	ldr	r2, [pc, #228]	; (8004788 <DMA_SetConfig+0x21c>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d04a      	beq.n	800473c <DMA_SetConfig+0x1d0>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a38      	ldr	r2, [pc, #224]	; (800478c <DMA_SetConfig+0x220>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d045      	beq.n	800473c <DMA_SetConfig+0x1d0>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a36      	ldr	r2, [pc, #216]	; (8004790 <DMA_SetConfig+0x224>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d040      	beq.n	800473c <DMA_SetConfig+0x1d0>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a35      	ldr	r2, [pc, #212]	; (8004794 <DMA_SetConfig+0x228>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d03b      	beq.n	800473c <DMA_SetConfig+0x1d0>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a33      	ldr	r2, [pc, #204]	; (8004798 <DMA_SetConfig+0x22c>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d036      	beq.n	800473c <DMA_SetConfig+0x1d0>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a32      	ldr	r2, [pc, #200]	; (800479c <DMA_SetConfig+0x230>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d031      	beq.n	800473c <DMA_SetConfig+0x1d0>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a30      	ldr	r2, [pc, #192]	; (80047a0 <DMA_SetConfig+0x234>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d02c      	beq.n	800473c <DMA_SetConfig+0x1d0>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a2f      	ldr	r2, [pc, #188]	; (80047a4 <DMA_SetConfig+0x238>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d027      	beq.n	800473c <DMA_SetConfig+0x1d0>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a2d      	ldr	r2, [pc, #180]	; (80047a8 <DMA_SetConfig+0x23c>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d022      	beq.n	800473c <DMA_SetConfig+0x1d0>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a2c      	ldr	r2, [pc, #176]	; (80047ac <DMA_SetConfig+0x240>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d01d      	beq.n	800473c <DMA_SetConfig+0x1d0>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a2a      	ldr	r2, [pc, #168]	; (80047b0 <DMA_SetConfig+0x244>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d018      	beq.n	800473c <DMA_SetConfig+0x1d0>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a29      	ldr	r2, [pc, #164]	; (80047b4 <DMA_SetConfig+0x248>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d013      	beq.n	800473c <DMA_SetConfig+0x1d0>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a27      	ldr	r2, [pc, #156]	; (80047b8 <DMA_SetConfig+0x24c>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d00e      	beq.n	800473c <DMA_SetConfig+0x1d0>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a26      	ldr	r2, [pc, #152]	; (80047bc <DMA_SetConfig+0x250>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d009      	beq.n	800473c <DMA_SetConfig+0x1d0>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a24      	ldr	r2, [pc, #144]	; (80047c0 <DMA_SetConfig+0x254>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d004      	beq.n	800473c <DMA_SetConfig+0x1d0>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a23      	ldr	r2, [pc, #140]	; (80047c4 <DMA_SetConfig+0x258>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d101      	bne.n	8004740 <DMA_SetConfig+0x1d4>
 800473c:	2301      	movs	r3, #1
 800473e:	e000      	b.n	8004742 <DMA_SetConfig+0x1d6>
 8004740:	2300      	movs	r3, #0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d059      	beq.n	80047fa <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800474a:	f003 031f 	and.w	r3, r3, #31
 800474e:	223f      	movs	r2, #63	; 0x3f
 8004750:	409a      	lsls	r2, r3
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004764:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	2b40      	cmp	r3, #64	; 0x40
 8004774:	d138      	bne.n	80047e8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68ba      	ldr	r2, [r7, #8]
 8004784:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004786:	e086      	b.n	8004896 <DMA_SetConfig+0x32a>
 8004788:	40020010 	.word	0x40020010
 800478c:	40020028 	.word	0x40020028
 8004790:	40020040 	.word	0x40020040
 8004794:	40020058 	.word	0x40020058
 8004798:	40020070 	.word	0x40020070
 800479c:	40020088 	.word	0x40020088
 80047a0:	400200a0 	.word	0x400200a0
 80047a4:	400200b8 	.word	0x400200b8
 80047a8:	40020410 	.word	0x40020410
 80047ac:	40020428 	.word	0x40020428
 80047b0:	40020440 	.word	0x40020440
 80047b4:	40020458 	.word	0x40020458
 80047b8:	40020470 	.word	0x40020470
 80047bc:	40020488 	.word	0x40020488
 80047c0:	400204a0 	.word	0x400204a0
 80047c4:	400204b8 	.word	0x400204b8
 80047c8:	58025408 	.word	0x58025408
 80047cc:	5802541c 	.word	0x5802541c
 80047d0:	58025430 	.word	0x58025430
 80047d4:	58025444 	.word	0x58025444
 80047d8:	58025458 	.word	0x58025458
 80047dc:	5802546c 	.word	0x5802546c
 80047e0:	58025480 	.word	0x58025480
 80047e4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68ba      	ldr	r2, [r7, #8]
 80047ee:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	60da      	str	r2, [r3, #12]
}
 80047f8:	e04d      	b.n	8004896 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a29      	ldr	r2, [pc, #164]	; (80048a4 <DMA_SetConfig+0x338>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d022      	beq.n	800484a <DMA_SetConfig+0x2de>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a27      	ldr	r2, [pc, #156]	; (80048a8 <DMA_SetConfig+0x33c>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d01d      	beq.n	800484a <DMA_SetConfig+0x2de>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a26      	ldr	r2, [pc, #152]	; (80048ac <DMA_SetConfig+0x340>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d018      	beq.n	800484a <DMA_SetConfig+0x2de>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a24      	ldr	r2, [pc, #144]	; (80048b0 <DMA_SetConfig+0x344>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d013      	beq.n	800484a <DMA_SetConfig+0x2de>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a23      	ldr	r2, [pc, #140]	; (80048b4 <DMA_SetConfig+0x348>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d00e      	beq.n	800484a <DMA_SetConfig+0x2de>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a21      	ldr	r2, [pc, #132]	; (80048b8 <DMA_SetConfig+0x34c>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d009      	beq.n	800484a <DMA_SetConfig+0x2de>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a20      	ldr	r2, [pc, #128]	; (80048bc <DMA_SetConfig+0x350>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d004      	beq.n	800484a <DMA_SetConfig+0x2de>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a1e      	ldr	r2, [pc, #120]	; (80048c0 <DMA_SetConfig+0x354>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d101      	bne.n	800484e <DMA_SetConfig+0x2e2>
 800484a:	2301      	movs	r3, #1
 800484c:	e000      	b.n	8004850 <DMA_SetConfig+0x2e4>
 800484e:	2300      	movs	r3, #0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d020      	beq.n	8004896 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004858:	f003 031f 	and.w	r3, r3, #31
 800485c:	2201      	movs	r2, #1
 800485e:	409a      	lsls	r2, r3
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	683a      	ldr	r2, [r7, #0]
 800486a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	2b40      	cmp	r3, #64	; 0x40
 8004872:	d108      	bne.n	8004886 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68ba      	ldr	r2, [r7, #8]
 8004882:	60da      	str	r2, [r3, #12]
}
 8004884:	e007      	b.n	8004896 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	60da      	str	r2, [r3, #12]
}
 8004896:	bf00      	nop
 8004898:	371c      	adds	r7, #28
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	58025408 	.word	0x58025408
 80048a8:	5802541c 	.word	0x5802541c
 80048ac:	58025430 	.word	0x58025430
 80048b0:	58025444 	.word	0x58025444
 80048b4:	58025458 	.word	0x58025458
 80048b8:	5802546c 	.word	0x5802546c
 80048bc:	58025480 	.word	0x58025480
 80048c0:	58025494 	.word	0x58025494

080048c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a42      	ldr	r2, [pc, #264]	; (80049dc <DMA_CalcBaseAndBitshift+0x118>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d04a      	beq.n	800496c <DMA_CalcBaseAndBitshift+0xa8>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a41      	ldr	r2, [pc, #260]	; (80049e0 <DMA_CalcBaseAndBitshift+0x11c>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d045      	beq.n	800496c <DMA_CalcBaseAndBitshift+0xa8>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a3f      	ldr	r2, [pc, #252]	; (80049e4 <DMA_CalcBaseAndBitshift+0x120>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d040      	beq.n	800496c <DMA_CalcBaseAndBitshift+0xa8>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a3e      	ldr	r2, [pc, #248]	; (80049e8 <DMA_CalcBaseAndBitshift+0x124>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d03b      	beq.n	800496c <DMA_CalcBaseAndBitshift+0xa8>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a3c      	ldr	r2, [pc, #240]	; (80049ec <DMA_CalcBaseAndBitshift+0x128>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d036      	beq.n	800496c <DMA_CalcBaseAndBitshift+0xa8>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a3b      	ldr	r2, [pc, #236]	; (80049f0 <DMA_CalcBaseAndBitshift+0x12c>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d031      	beq.n	800496c <DMA_CalcBaseAndBitshift+0xa8>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a39      	ldr	r2, [pc, #228]	; (80049f4 <DMA_CalcBaseAndBitshift+0x130>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d02c      	beq.n	800496c <DMA_CalcBaseAndBitshift+0xa8>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a38      	ldr	r2, [pc, #224]	; (80049f8 <DMA_CalcBaseAndBitshift+0x134>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d027      	beq.n	800496c <DMA_CalcBaseAndBitshift+0xa8>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a36      	ldr	r2, [pc, #216]	; (80049fc <DMA_CalcBaseAndBitshift+0x138>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d022      	beq.n	800496c <DMA_CalcBaseAndBitshift+0xa8>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a35      	ldr	r2, [pc, #212]	; (8004a00 <DMA_CalcBaseAndBitshift+0x13c>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d01d      	beq.n	800496c <DMA_CalcBaseAndBitshift+0xa8>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a33      	ldr	r2, [pc, #204]	; (8004a04 <DMA_CalcBaseAndBitshift+0x140>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d018      	beq.n	800496c <DMA_CalcBaseAndBitshift+0xa8>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a32      	ldr	r2, [pc, #200]	; (8004a08 <DMA_CalcBaseAndBitshift+0x144>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d013      	beq.n	800496c <DMA_CalcBaseAndBitshift+0xa8>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a30      	ldr	r2, [pc, #192]	; (8004a0c <DMA_CalcBaseAndBitshift+0x148>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d00e      	beq.n	800496c <DMA_CalcBaseAndBitshift+0xa8>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a2f      	ldr	r2, [pc, #188]	; (8004a10 <DMA_CalcBaseAndBitshift+0x14c>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d009      	beq.n	800496c <DMA_CalcBaseAndBitshift+0xa8>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a2d      	ldr	r2, [pc, #180]	; (8004a14 <DMA_CalcBaseAndBitshift+0x150>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d004      	beq.n	800496c <DMA_CalcBaseAndBitshift+0xa8>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a2c      	ldr	r2, [pc, #176]	; (8004a18 <DMA_CalcBaseAndBitshift+0x154>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d101      	bne.n	8004970 <DMA_CalcBaseAndBitshift+0xac>
 800496c:	2301      	movs	r3, #1
 800496e:	e000      	b.n	8004972 <DMA_CalcBaseAndBitshift+0xae>
 8004970:	2300      	movs	r3, #0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d024      	beq.n	80049c0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	b2db      	uxtb	r3, r3
 800497c:	3b10      	subs	r3, #16
 800497e:	4a27      	ldr	r2, [pc, #156]	; (8004a1c <DMA_CalcBaseAndBitshift+0x158>)
 8004980:	fba2 2303 	umull	r2, r3, r2, r3
 8004984:	091b      	lsrs	r3, r3, #4
 8004986:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f003 0307 	and.w	r3, r3, #7
 800498e:	4a24      	ldr	r2, [pc, #144]	; (8004a20 <DMA_CalcBaseAndBitshift+0x15c>)
 8004990:	5cd3      	ldrb	r3, [r2, r3]
 8004992:	461a      	mov	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2b03      	cmp	r3, #3
 800499c:	d908      	bls.n	80049b0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	461a      	mov	r2, r3
 80049a4:	4b1f      	ldr	r3, [pc, #124]	; (8004a24 <DMA_CalcBaseAndBitshift+0x160>)
 80049a6:	4013      	ands	r3, r2
 80049a8:	1d1a      	adds	r2, r3, #4
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	659a      	str	r2, [r3, #88]	; 0x58
 80049ae:	e00d      	b.n	80049cc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	461a      	mov	r2, r3
 80049b6:	4b1b      	ldr	r3, [pc, #108]	; (8004a24 <DMA_CalcBaseAndBitshift+0x160>)
 80049b8:	4013      	ands	r3, r2
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	6593      	str	r3, [r2, #88]	; 0x58
 80049be:	e005      	b.n	80049cc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3714      	adds	r7, #20
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr
 80049dc:	40020010 	.word	0x40020010
 80049e0:	40020028 	.word	0x40020028
 80049e4:	40020040 	.word	0x40020040
 80049e8:	40020058 	.word	0x40020058
 80049ec:	40020070 	.word	0x40020070
 80049f0:	40020088 	.word	0x40020088
 80049f4:	400200a0 	.word	0x400200a0
 80049f8:	400200b8 	.word	0x400200b8
 80049fc:	40020410 	.word	0x40020410
 8004a00:	40020428 	.word	0x40020428
 8004a04:	40020440 	.word	0x40020440
 8004a08:	40020458 	.word	0x40020458
 8004a0c:	40020470 	.word	0x40020470
 8004a10:	40020488 	.word	0x40020488
 8004a14:	400204a0 	.word	0x400204a0
 8004a18:	400204b8 	.word	0x400204b8
 8004a1c:	aaaaaaab 	.word	0xaaaaaaab
 8004a20:	0801c9d0 	.word	0x0801c9d0
 8004a24:	fffffc00 	.word	0xfffffc00

08004a28 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b085      	sub	sp, #20
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a30:	2300      	movs	r3, #0
 8004a32:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d120      	bne.n	8004a7e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a40:	2b03      	cmp	r3, #3
 8004a42:	d858      	bhi.n	8004af6 <DMA_CheckFifoParam+0xce>
 8004a44:	a201      	add	r2, pc, #4	; (adr r2, 8004a4c <DMA_CheckFifoParam+0x24>)
 8004a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a4a:	bf00      	nop
 8004a4c:	08004a5d 	.word	0x08004a5d
 8004a50:	08004a6f 	.word	0x08004a6f
 8004a54:	08004a5d 	.word	0x08004a5d
 8004a58:	08004af7 	.word	0x08004af7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d048      	beq.n	8004afa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a6c:	e045      	b.n	8004afa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a72:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a76:	d142      	bne.n	8004afe <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a7c:	e03f      	b.n	8004afe <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a86:	d123      	bne.n	8004ad0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8c:	2b03      	cmp	r3, #3
 8004a8e:	d838      	bhi.n	8004b02 <DMA_CheckFifoParam+0xda>
 8004a90:	a201      	add	r2, pc, #4	; (adr r2, 8004a98 <DMA_CheckFifoParam+0x70>)
 8004a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a96:	bf00      	nop
 8004a98:	08004aa9 	.word	0x08004aa9
 8004a9c:	08004aaf 	.word	0x08004aaf
 8004aa0:	08004aa9 	.word	0x08004aa9
 8004aa4:	08004ac1 	.word	0x08004ac1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	73fb      	strb	r3, [r7, #15]
        break;
 8004aac:	e030      	b.n	8004b10 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d025      	beq.n	8004b06 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004abe:	e022      	b.n	8004b06 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ac8:	d11f      	bne.n	8004b0a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ace:	e01c      	b.n	8004b0a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d902      	bls.n	8004ade <DMA_CheckFifoParam+0xb6>
 8004ad8:	2b03      	cmp	r3, #3
 8004ada:	d003      	beq.n	8004ae4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004adc:	e018      	b.n	8004b10 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	73fb      	strb	r3, [r7, #15]
        break;
 8004ae2:	e015      	b.n	8004b10 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00e      	beq.n	8004b0e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	73fb      	strb	r3, [r7, #15]
    break;
 8004af4:	e00b      	b.n	8004b0e <DMA_CheckFifoParam+0xe6>
        break;
 8004af6:	bf00      	nop
 8004af8:	e00a      	b.n	8004b10 <DMA_CheckFifoParam+0xe8>
        break;
 8004afa:	bf00      	nop
 8004afc:	e008      	b.n	8004b10 <DMA_CheckFifoParam+0xe8>
        break;
 8004afe:	bf00      	nop
 8004b00:	e006      	b.n	8004b10 <DMA_CheckFifoParam+0xe8>
        break;
 8004b02:	bf00      	nop
 8004b04:	e004      	b.n	8004b10 <DMA_CheckFifoParam+0xe8>
        break;
 8004b06:	bf00      	nop
 8004b08:	e002      	b.n	8004b10 <DMA_CheckFifoParam+0xe8>
        break;
 8004b0a:	bf00      	nop
 8004b0c:	e000      	b.n	8004b10 <DMA_CheckFifoParam+0xe8>
    break;
 8004b0e:	bf00      	nop
    }
  }

  return status;
 8004b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3714      	adds	r7, #20
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop

08004b20 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a38      	ldr	r2, [pc, #224]	; (8004c14 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d022      	beq.n	8004b7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a36      	ldr	r2, [pc, #216]	; (8004c18 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d01d      	beq.n	8004b7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a35      	ldr	r2, [pc, #212]	; (8004c1c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d018      	beq.n	8004b7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a33      	ldr	r2, [pc, #204]	; (8004c20 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d013      	beq.n	8004b7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a32      	ldr	r2, [pc, #200]	; (8004c24 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d00e      	beq.n	8004b7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a30      	ldr	r2, [pc, #192]	; (8004c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d009      	beq.n	8004b7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a2f      	ldr	r2, [pc, #188]	; (8004c2c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d004      	beq.n	8004b7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a2d      	ldr	r2, [pc, #180]	; (8004c30 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d101      	bne.n	8004b82 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e000      	b.n	8004b84 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004b82:	2300      	movs	r3, #0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d01a      	beq.n	8004bbe <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	3b08      	subs	r3, #8
 8004b90:	4a28      	ldr	r2, [pc, #160]	; (8004c34 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004b92:	fba2 2303 	umull	r2, r3, r2, r3
 8004b96:	091b      	lsrs	r3, r3, #4
 8004b98:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	4b26      	ldr	r3, [pc, #152]	; (8004c38 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004b9e:	4413      	add	r3, r2
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a24      	ldr	r2, [pc, #144]	; (8004c3c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004bac:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f003 031f 	and.w	r3, r3, #31
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	409a      	lsls	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004bbc:	e024      	b.n	8004c08 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	3b10      	subs	r3, #16
 8004bc6:	4a1e      	ldr	r2, [pc, #120]	; (8004c40 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bcc:	091b      	lsrs	r3, r3, #4
 8004bce:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	4a1c      	ldr	r2, [pc, #112]	; (8004c44 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d806      	bhi.n	8004be6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	4a1b      	ldr	r2, [pc, #108]	; (8004c48 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d902      	bls.n	8004be6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	3308      	adds	r3, #8
 8004be4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	4b18      	ldr	r3, [pc, #96]	; (8004c4c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004bea:	4413      	add	r3, r2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	461a      	mov	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a16      	ldr	r2, [pc, #88]	; (8004c50 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004bf8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f003 031f 	and.w	r3, r3, #31
 8004c00:	2201      	movs	r2, #1
 8004c02:	409a      	lsls	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004c08:	bf00      	nop
 8004c0a:	3714      	adds	r7, #20
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr
 8004c14:	58025408 	.word	0x58025408
 8004c18:	5802541c 	.word	0x5802541c
 8004c1c:	58025430 	.word	0x58025430
 8004c20:	58025444 	.word	0x58025444
 8004c24:	58025458 	.word	0x58025458
 8004c28:	5802546c 	.word	0x5802546c
 8004c2c:	58025480 	.word	0x58025480
 8004c30:	58025494 	.word	0x58025494
 8004c34:	cccccccd 	.word	0xcccccccd
 8004c38:	16009600 	.word	0x16009600
 8004c3c:	58025880 	.word	0x58025880
 8004c40:	aaaaaaab 	.word	0xaaaaaaab
 8004c44:	400204b8 	.word	0x400204b8
 8004c48:	4002040f 	.word	0x4002040f
 8004c4c:	10008200 	.word	0x10008200
 8004c50:	40020880 	.word	0x40020880

08004c54 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d04a      	beq.n	8004d00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2b08      	cmp	r3, #8
 8004c6e:	d847      	bhi.n	8004d00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a25      	ldr	r2, [pc, #148]	; (8004d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d022      	beq.n	8004cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a24      	ldr	r2, [pc, #144]	; (8004d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d01d      	beq.n	8004cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a22      	ldr	r2, [pc, #136]	; (8004d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d018      	beq.n	8004cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a21      	ldr	r2, [pc, #132]	; (8004d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d013      	beq.n	8004cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a1f      	ldr	r2, [pc, #124]	; (8004d1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d00e      	beq.n	8004cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a1e      	ldr	r2, [pc, #120]	; (8004d20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d009      	beq.n	8004cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a1c      	ldr	r2, [pc, #112]	; (8004d24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d004      	beq.n	8004cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a1b      	ldr	r2, [pc, #108]	; (8004d28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d101      	bne.n	8004cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e000      	b.n	8004cc6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00a      	beq.n	8004ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	4b17      	ldr	r3, [pc, #92]	; (8004d2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004cce:	4413      	add	r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a15      	ldr	r2, [pc, #84]	; (8004d30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004cdc:	671a      	str	r2, [r3, #112]	; 0x70
 8004cde:	e009      	b.n	8004cf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	4b14      	ldr	r3, [pc, #80]	; (8004d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004ce4:	4413      	add	r3, r2
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	461a      	mov	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a11      	ldr	r2, [pc, #68]	; (8004d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004cf2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	409a      	lsls	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004d00:	bf00      	nop
 8004d02:	3714      	adds	r7, #20
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr
 8004d0c:	58025408 	.word	0x58025408
 8004d10:	5802541c 	.word	0x5802541c
 8004d14:	58025430 	.word	0x58025430
 8004d18:	58025444 	.word	0x58025444
 8004d1c:	58025458 	.word	0x58025458
 8004d20:	5802546c 	.word	0x5802546c
 8004d24:	58025480 	.word	0x58025480
 8004d28:	58025494 	.word	0x58025494
 8004d2c:	1600963f 	.word	0x1600963f
 8004d30:	58025940 	.word	0x58025940
 8004d34:	1000823f 	.word	0x1000823f
 8004d38:	40020940 	.word	0x40020940

08004d3c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d101      	bne.n	8004d4e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e0cf      	b.n	8004eee <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d106      	bne.n	8004d66 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2223      	movs	r2, #35	; 0x23
 8004d5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f7fb fec3 	bl	8000aec <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d66:	4b64      	ldr	r3, [pc, #400]	; (8004ef8 <HAL_ETH_Init+0x1bc>)
 8004d68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d6c:	4a62      	ldr	r2, [pc, #392]	; (8004ef8 <HAL_ETH_Init+0x1bc>)
 8004d6e:	f043 0302 	orr.w	r3, r3, #2
 8004d72:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004d76:	4b60      	ldr	r3, [pc, #384]	; (8004ef8 <HAL_ETH_Init+0x1bc>)
 8004d78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	60bb      	str	r3, [r7, #8]
 8004d82:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	7a1b      	ldrb	r3, [r3, #8]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d103      	bne.n	8004d94 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004d8c:	2000      	movs	r0, #0
 8004d8e:	f7fd f8a5 	bl	8001edc <HAL_SYSCFG_ETHInterfaceSelect>
 8004d92:	e003      	b.n	8004d9c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004d94:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004d98:	f7fd f8a0 	bl	8001edc <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8004d9c:	4b57      	ldr	r3, [pc, #348]	; (8004efc <HAL_ETH_Init+0x1c0>)
 8004d9e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	6812      	ldr	r2, [r2, #0]
 8004dae:	f043 0301 	orr.w	r3, r3, #1
 8004db2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004db6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004db8:	f7fd f854 	bl	8001e64 <HAL_GetTick>
 8004dbc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004dbe:	e011      	b.n	8004de4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004dc0:	f7fd f850 	bl	8001e64 <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004dce:	d909      	bls.n	8004de4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2204      	movs	r2, #4
 8004dd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	22e0      	movs	r2, #224	; 0xe0
 8004ddc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e084      	b.n	8004eee <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0301 	and.w	r3, r3, #1
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1e4      	bne.n	8004dc0 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 f886 	bl	8004f08 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004dfc:	f002 fc88 	bl	8007710 <HAL_RCC_GetHCLKFreq>
 8004e00:	4603      	mov	r3, r0
 8004e02:	4a3f      	ldr	r2, [pc, #252]	; (8004f00 <HAL_ETH_Init+0x1c4>)
 8004e04:	fba2 2303 	umull	r2, r3, r2, r3
 8004e08:	0c9a      	lsrs	r2, r3, #18
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	3a01      	subs	r2, #1
 8004e10:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 fa71 	bl	80052fc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e22:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004e26:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	6812      	ldr	r2, [r2, #0]
 8004e2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e32:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004e36:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	f003 0303 	and.w	r3, r3, #3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d009      	beq.n	8004e5a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	22e0      	movs	r2, #224	; 0xe0
 8004e52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e049      	b.n	8004eee <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e62:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004e66:	4b27      	ldr	r3, [pc, #156]	; (8004f04 <HAL_ETH_Init+0x1c8>)
 8004e68:	4013      	ands	r3, r2
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	6952      	ldr	r2, [r2, #20]
 8004e6e:	0051      	lsls	r1, r2, #1
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	6812      	ldr	r2, [r2, #0]
 8004e74:	430b      	orrs	r3, r1
 8004e76:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004e7a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 fad9 	bl	8005436 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 fb1f 	bl	80054c8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	3305      	adds	r3, #5
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	021a      	lsls	r2, r3, #8
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	3304      	adds	r3, #4
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	430a      	orrs	r2, r1
 8004ea4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	3303      	adds	r3, #3
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	061a      	lsls	r2, r3, #24
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	3302      	adds	r3, #2
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	041b      	lsls	r3, r3, #16
 8004ebc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004ec8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004ed6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004ed8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2210      	movs	r2, #16
 8004ee8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3710      	adds	r7, #16
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	58024400 	.word	0x58024400
 8004efc:	58000400 	.word	0x58000400
 8004f00:	431bde83 	.word	0x431bde83
 8004f04:	ffff8001 	.word	0xffff8001

08004f08 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004f18:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004f20:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004f22:	f002 fbf5 	bl	8007710 <HAL_RCC_GetHCLKFreq>
 8004f26:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	4a1e      	ldr	r2, [pc, #120]	; (8004fa4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d908      	bls.n	8004f42 <HAL_ETH_SetMDIOClockRange+0x3a>
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	4a1d      	ldr	r2, [pc, #116]	; (8004fa8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d804      	bhi.n	8004f42 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f3e:	60fb      	str	r3, [r7, #12]
 8004f40:	e027      	b.n	8004f92 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	4a18      	ldr	r2, [pc, #96]	; (8004fa8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d908      	bls.n	8004f5c <HAL_ETH_SetMDIOClockRange+0x54>
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	4a17      	ldr	r2, [pc, #92]	; (8004fac <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d204      	bcs.n	8004f5c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004f58:	60fb      	str	r3, [r7, #12]
 8004f5a:	e01a      	b.n	8004f92 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	4a13      	ldr	r2, [pc, #76]	; (8004fac <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d303      	bcc.n	8004f6c <HAL_ETH_SetMDIOClockRange+0x64>
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	4a12      	ldr	r2, [pc, #72]	; (8004fb0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d911      	bls.n	8004f90 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	4a10      	ldr	r2, [pc, #64]	; (8004fb0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d908      	bls.n	8004f86 <HAL_ETH_SetMDIOClockRange+0x7e>
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	4a0f      	ldr	r2, [pc, #60]	; (8004fb4 <HAL_ETH_SetMDIOClockRange+0xac>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d804      	bhi.n	8004f86 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f82:	60fb      	str	r3, [r7, #12]
 8004f84:	e005      	b.n	8004f92 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f8c:	60fb      	str	r3, [r7, #12]
 8004f8e:	e000      	b.n	8004f92 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8004f90:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004f9c:	bf00      	nop
 8004f9e:	3710      	adds	r7, #16
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	01312cff 	.word	0x01312cff
 8004fa8:	02160ebf 	.word	0x02160ebf
 8004fac:	03938700 	.word	0x03938700
 8004fb0:	05f5e0ff 	.word	0x05f5e0ff
 8004fb4:	08f0d17f 	.word	0x08f0d17f

08004fb8 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8004fca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	791b      	ldrb	r3, [r3, #4]
 8004fd0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8004fd2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	7b1b      	ldrb	r3, [r3, #12]
 8004fd8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004fda:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	7b5b      	ldrb	r3, [r3, #13]
 8004fe0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004fe2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	7b9b      	ldrb	r3, [r3, #14]
 8004fe8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004fea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	7bdb      	ldrb	r3, [r3, #15]
 8004ff0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004ff2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004ff4:	683a      	ldr	r2, [r7, #0]
 8004ff6:	7c12      	ldrb	r2, [r2, #16]
 8004ff8:	2a00      	cmp	r2, #0
 8004ffa:	d102      	bne.n	8005002 <ETH_SetMACConfig+0x4a>
 8004ffc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005000:	e000      	b.n	8005004 <ETH_SetMACConfig+0x4c>
 8005002:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005004:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005006:	683a      	ldr	r2, [r7, #0]
 8005008:	7c52      	ldrb	r2, [r2, #17]
 800500a:	2a00      	cmp	r2, #0
 800500c:	d102      	bne.n	8005014 <ETH_SetMACConfig+0x5c>
 800500e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005012:	e000      	b.n	8005016 <ETH_SetMACConfig+0x5e>
 8005014:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005016:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	7c9b      	ldrb	r3, [r3, #18]
 800501c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800501e:	431a      	orrs	r2, r3
               macconf->Speed |
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8005024:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800502a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	7f1b      	ldrb	r3, [r3, #28]
 8005030:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8005032:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	7f5b      	ldrb	r3, [r3, #29]
 8005038:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800503a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800503c:	683a      	ldr	r2, [r7, #0]
 800503e:	7f92      	ldrb	r2, [r2, #30]
 8005040:	2a00      	cmp	r2, #0
 8005042:	d102      	bne.n	800504a <ETH_SetMACConfig+0x92>
 8005044:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005048:	e000      	b.n	800504c <ETH_SetMACConfig+0x94>
 800504a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800504c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	7fdb      	ldrb	r3, [r3, #31]
 8005052:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005054:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8005056:	683a      	ldr	r2, [r7, #0]
 8005058:	f892 2020 	ldrb.w	r2, [r2, #32]
 800505c:	2a00      	cmp	r2, #0
 800505e:	d102      	bne.n	8005066 <ETH_SetMACConfig+0xae>
 8005060:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005064:	e000      	b.n	8005068 <ETH_SetMACConfig+0xb0>
 8005066:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8005068:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800506e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005076:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8005078:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800507e:	4313      	orrs	r3, r2
 8005080:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	4b56      	ldr	r3, [pc, #344]	; (80051e4 <ETH_SetMACConfig+0x22c>)
 800508a:	4013      	ands	r3, r2
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	6812      	ldr	r2, [r2, #0]
 8005090:	68f9      	ldr	r1, [r7, #12]
 8005092:	430b      	orrs	r3, r1
 8005094:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800509a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80050a2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80050a4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80050ac:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80050ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80050b6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80050b8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80050ba:	683a      	ldr	r2, [r7, #0]
 80050bc:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80050c0:	2a00      	cmp	r2, #0
 80050c2:	d102      	bne.n	80050ca <ETH_SetMACConfig+0x112>
 80050c4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80050c8:	e000      	b.n	80050cc <ETH_SetMACConfig+0x114>
 80050ca:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80050cc:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80050d2:	4313      	orrs	r3, r2
 80050d4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	685a      	ldr	r2, [r3, #4]
 80050dc:	4b42      	ldr	r3, [pc, #264]	; (80051e8 <ETH_SetMACConfig+0x230>)
 80050de:	4013      	ands	r3, r2
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	6812      	ldr	r2, [r2, #0]
 80050e4:	68f9      	ldr	r1, [r7, #12]
 80050e6:	430b      	orrs	r3, r1
 80050e8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050f0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80050f6:	4313      	orrs	r3, r2
 80050f8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68da      	ldr	r2, [r3, #12]
 8005100:	4b3a      	ldr	r3, [pc, #232]	; (80051ec <ETH_SetMACConfig+0x234>)
 8005102:	4013      	ands	r3, r2
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	6812      	ldr	r2, [r2, #0]
 8005108:	68f9      	ldr	r1, [r7, #12]
 800510a:	430b      	orrs	r3, r1
 800510c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005114:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800511a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800511c:	683a      	ldr	r2, [r7, #0]
 800511e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8005122:	2a00      	cmp	r2, #0
 8005124:	d101      	bne.n	800512a <ETH_SetMACConfig+0x172>
 8005126:	2280      	movs	r2, #128	; 0x80
 8005128:	e000      	b.n	800512c <ETH_SetMACConfig+0x174>
 800512a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800512c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005132:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005134:	4313      	orrs	r3, r2
 8005136:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800513e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8005142:	4013      	ands	r3, r2
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	6812      	ldr	r2, [r2, #0]
 8005148:	68f9      	ldr	r1, [r7, #12]
 800514a:	430b      	orrs	r3, r1
 800514c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005154:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800515c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800515e:	4313      	orrs	r3, r2
 8005160:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800516a:	f023 0103 	bic.w	r1, r3, #3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	430a      	orrs	r2, r1
 8005176:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8005182:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	430a      	orrs	r2, r1
 8005190:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005198:	683a      	ldr	r2, [r7, #0]
 800519a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800519e:	2a00      	cmp	r2, #0
 80051a0:	d101      	bne.n	80051a6 <ETH_SetMACConfig+0x1ee>
 80051a2:	2240      	movs	r2, #64	; 0x40
 80051a4:	e000      	b.n	80051a8 <ETH_SetMACConfig+0x1f0>
 80051a6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80051a8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80051b0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80051b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80051ba:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80051bc:	4313      	orrs	r3, r2
 80051be:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80051c8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	430a      	orrs	r2, r1
 80051d4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80051d8:	bf00      	nop
 80051da:	3714      	adds	r7, #20
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr
 80051e4:	00048083 	.word	0x00048083
 80051e8:	c0f88000 	.word	0xc0f88000
 80051ec:	fffffef0 	.word	0xfffffef0

080051f0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	4b38      	ldr	r3, [pc, #224]	; (80052e8 <ETH_SetDMAConfig+0xf8>)
 8005206:	4013      	ands	r3, r2
 8005208:	683a      	ldr	r2, [r7, #0]
 800520a:	6811      	ldr	r1, [r2, #0]
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	6812      	ldr	r2, [r2, #0]
 8005210:	430b      	orrs	r3, r1
 8005212:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005216:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	791b      	ldrb	r3, [r3, #4]
 800521c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005222:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	7b1b      	ldrb	r3, [r3, #12]
 8005228:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800522a:	4313      	orrs	r3, r2
 800522c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005236:	685a      	ldr	r2, [r3, #4]
 8005238:	4b2c      	ldr	r3, [pc, #176]	; (80052ec <ETH_SetDMAConfig+0xfc>)
 800523a:	4013      	ands	r3, r2
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	6812      	ldr	r2, [r2, #0]
 8005240:	68f9      	ldr	r1, [r7, #12]
 8005242:	430b      	orrs	r3, r1
 8005244:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005248:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	7b5b      	ldrb	r3, [r3, #13]
 800524e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005254:	4313      	orrs	r3, r2
 8005256:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005260:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8005264:	4b22      	ldr	r3, [pc, #136]	; (80052f0 <ETH_SetDMAConfig+0x100>)
 8005266:	4013      	ands	r3, r2
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	6812      	ldr	r2, [r2, #0]
 800526c:	68f9      	ldr	r1, [r7, #12]
 800526e:	430b      	orrs	r3, r1
 8005270:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005274:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	7d1b      	ldrb	r3, [r3, #20]
 8005280:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005282:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	7f5b      	ldrb	r3, [r3, #29]
 8005288:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800528a:	4313      	orrs	r3, r2
 800528c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005296:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800529a:	4b16      	ldr	r3, [pc, #88]	; (80052f4 <ETH_SetDMAConfig+0x104>)
 800529c:	4013      	ands	r3, r2
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	6812      	ldr	r2, [r2, #0]
 80052a2:	68f9      	ldr	r1, [r7, #12]
 80052a4:	430b      	orrs	r3, r1
 80052a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80052aa:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	7f1b      	ldrb	r3, [r3, #28]
 80052b2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80052b8:	4313      	orrs	r3, r2
 80052ba:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052c4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80052c8:	4b0b      	ldr	r3, [pc, #44]	; (80052f8 <ETH_SetDMAConfig+0x108>)
 80052ca:	4013      	ands	r3, r2
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	6812      	ldr	r2, [r2, #0]
 80052d0:	68f9      	ldr	r1, [r7, #12]
 80052d2:	430b      	orrs	r3, r1
 80052d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80052d8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80052dc:	bf00      	nop
 80052de:	3714      	adds	r7, #20
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr
 80052e8:	ffff87fd 	.word	0xffff87fd
 80052ec:	ffff2ffe 	.word	0xffff2ffe
 80052f0:	fffec000 	.word	0xfffec000
 80052f4:	ffc0efef 	.word	0xffc0efef
 80052f8:	7fc0ffff 	.word	0x7fc0ffff

080052fc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b0a4      	sub	sp, #144	; 0x90
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005304:	2301      	movs	r3, #1
 8005306:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800530a:	2300      	movs	r3, #0
 800530c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800530e:	2300      	movs	r3, #0
 8005310:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005314:	2300      	movs	r3, #0
 8005316:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800531a:	2301      	movs	r3, #1
 800531c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005320:	2301      	movs	r3, #1
 8005322:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005326:	2301      	movs	r3, #1
 8005328:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800532c:	2300      	movs	r3, #0
 800532e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8005332:	2301      	movs	r3, #1
 8005334:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005338:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800533c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800533e:	2300      	movs	r3, #0
 8005340:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8005344:	2300      	movs	r3, #0
 8005346:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005348:	2300      	movs	r3, #0
 800534a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800534e:	2300      	movs	r3, #0
 8005350:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8005354:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8005358:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800535a:	2300      	movs	r3, #0
 800535c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005360:	2300      	movs	r3, #0
 8005362:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8005364:	2301      	movs	r3, #1
 8005366:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800536a:	2300      	movs	r3, #0
 800536c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005370:	2300      	movs	r3, #0
 8005372:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8005376:	2300      	movs	r3, #0
 8005378:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800537a:	2300      	movs	r3, #0
 800537c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800537e:	2300      	movs	r3, #0
 8005380:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8005382:	2300      	movs	r3, #0
 8005384:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005388:	2300      	movs	r3, #0
 800538a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800538e:	2301      	movs	r3, #1
 8005390:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005394:	2320      	movs	r3, #32
 8005396:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800539a:	2301      	movs	r3, #1
 800539c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80053a0:	2300      	movs	r3, #0
 80053a2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80053a6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80053aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80053ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80053b0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80053b2:	2300      	movs	r3, #0
 80053b4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80053b8:	2302      	movs	r3, #2
 80053ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80053be:	2300      	movs	r3, #0
 80053c0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80053c4:	2300      	movs	r3, #0
 80053c6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80053ca:	2300      	movs	r3, #0
 80053cc:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80053d0:	2301      	movs	r3, #1
 80053d2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80053d6:	2300      	movs	r3, #0
 80053d8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80053da:	2301      	movs	r3, #1
 80053dc:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80053e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80053e4:	4619      	mov	r1, r3
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f7ff fde6 	bl	8004fb8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80053ec:	2301      	movs	r3, #1
 80053ee:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80053f0:	2301      	movs	r3, #1
 80053f2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80053f4:	2300      	movs	r3, #0
 80053f6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80053f8:	2300      	movs	r3, #0
 80053fa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80053fe:	2300      	movs	r3, #0
 8005400:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005402:	2300      	movs	r3, #0
 8005404:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005406:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800540a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800540c:	2300      	movs	r3, #0
 800540e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005410:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005414:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005416:	2300      	movs	r3, #0
 8005418:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800541c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005420:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005422:	f107 0308 	add.w	r3, r7, #8
 8005426:	4619      	mov	r1, r3
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f7ff fee1 	bl	80051f0 <ETH_SetDMAConfig>
}
 800542e:	bf00      	nop
 8005430:	3790      	adds	r7, #144	; 0x90
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}

08005436 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005436:	b480      	push	{r7}
 8005438:	b085      	sub	sp, #20
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800543e:	2300      	movs	r3, #0
 8005440:	60fb      	str	r3, [r7, #12]
 8005442:	e01d      	b.n	8005480 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	68d9      	ldr	r1, [r3, #12]
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	4613      	mov	r3, r2
 800544c:	005b      	lsls	r3, r3, #1
 800544e:	4413      	add	r3, r2
 8005450:	00db      	lsls	r3, r3, #3
 8005452:	440b      	add	r3, r1
 8005454:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	2200      	movs	r2, #0
 800545a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	2200      	movs	r2, #0
 8005460:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	2200      	movs	r2, #0
 8005466:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	2200      	movs	r2, #0
 800546c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800546e:	68b9      	ldr	r1, [r7, #8]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	3206      	adds	r2, #6
 8005476:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	3301      	adds	r3, #1
 800547e:	60fb      	str	r3, [r7, #12]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2b03      	cmp	r3, #3
 8005484:	d9de      	bls.n	8005444 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005494:	461a      	mov	r2, r3
 8005496:	2303      	movs	r3, #3
 8005498:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	68da      	ldr	r2, [r3, #12]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054a8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	68da      	ldr	r2, [r3, #12]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054b8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80054bc:	bf00      	nop
 80054be:	3714      	adds	r7, #20
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80054d0:	2300      	movs	r3, #0
 80054d2:	60fb      	str	r3, [r7, #12]
 80054d4:	e023      	b.n	800551e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6919      	ldr	r1, [r3, #16]
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	4613      	mov	r3, r2
 80054de:	005b      	lsls	r3, r3, #1
 80054e0:	4413      	add	r3, r2
 80054e2:	00db      	lsls	r3, r3, #3
 80054e4:	440b      	add	r3, r1
 80054e6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	2200      	movs	r2, #0
 80054ec:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	2200      	movs	r2, #0
 80054f2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	2200      	movs	r2, #0
 80054f8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	2200      	movs	r2, #0
 80054fe:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	2200      	movs	r2, #0
 8005504:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	2200      	movs	r2, #0
 800550a:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800550c:	68b9      	ldr	r1, [r7, #8]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	3212      	adds	r2, #18
 8005514:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	3301      	adds	r3, #1
 800551c:	60fb      	str	r3, [r7, #12]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2b03      	cmp	r3, #3
 8005522:	d9d8      	bls.n	80054d6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800554a:	461a      	mov	r2, r3
 800554c:	2303      	movs	r3, #3
 800554e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	691a      	ldr	r2, [r3, #16]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800555e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005572:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8005576:	bf00      	nop
 8005578:	3714      	adds	r7, #20
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
	...

08005584 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005584:	b480      	push	{r7}
 8005586:	b089      	sub	sp, #36	; 0x24
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800558e:	2300      	movs	r3, #0
 8005590:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005592:	4b89      	ldr	r3, [pc, #548]	; (80057b8 <HAL_GPIO_Init+0x234>)
 8005594:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005596:	e194      	b.n	80058c2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	2101      	movs	r1, #1
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	fa01 f303 	lsl.w	r3, r1, r3
 80055a4:	4013      	ands	r3, r2
 80055a6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f000 8186 	beq.w	80058bc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	f003 0303 	and.w	r3, r3, #3
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d005      	beq.n	80055c8 <HAL_GPIO_Init+0x44>
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f003 0303 	and.w	r3, r3, #3
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d130      	bne.n	800562a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	005b      	lsls	r3, r3, #1
 80055d2:	2203      	movs	r2, #3
 80055d4:	fa02 f303 	lsl.w	r3, r2, r3
 80055d8:	43db      	mvns	r3, r3
 80055da:	69ba      	ldr	r2, [r7, #24]
 80055dc:	4013      	ands	r3, r2
 80055de:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	68da      	ldr	r2, [r3, #12]
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	005b      	lsls	r3, r3, #1
 80055e8:	fa02 f303 	lsl.w	r3, r2, r3
 80055ec:	69ba      	ldr	r2, [r7, #24]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	69ba      	ldr	r2, [r7, #24]
 80055f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80055fe:	2201      	movs	r2, #1
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	fa02 f303 	lsl.w	r3, r2, r3
 8005606:	43db      	mvns	r3, r3
 8005608:	69ba      	ldr	r2, [r7, #24]
 800560a:	4013      	ands	r3, r2
 800560c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	091b      	lsrs	r3, r3, #4
 8005614:	f003 0201 	and.w	r2, r3, #1
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	fa02 f303 	lsl.w	r3, r2, r3
 800561e:	69ba      	ldr	r2, [r7, #24]
 8005620:	4313      	orrs	r3, r2
 8005622:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	69ba      	ldr	r2, [r7, #24]
 8005628:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	f003 0303 	and.w	r3, r3, #3
 8005632:	2b03      	cmp	r3, #3
 8005634:	d017      	beq.n	8005666 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	005b      	lsls	r3, r3, #1
 8005640:	2203      	movs	r2, #3
 8005642:	fa02 f303 	lsl.w	r3, r2, r3
 8005646:	43db      	mvns	r3, r3
 8005648:	69ba      	ldr	r2, [r7, #24]
 800564a:	4013      	ands	r3, r2
 800564c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	689a      	ldr	r2, [r3, #8]
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	005b      	lsls	r3, r3, #1
 8005656:	fa02 f303 	lsl.w	r3, r2, r3
 800565a:	69ba      	ldr	r2, [r7, #24]
 800565c:	4313      	orrs	r3, r2
 800565e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	69ba      	ldr	r2, [r7, #24]
 8005664:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	f003 0303 	and.w	r3, r3, #3
 800566e:	2b02      	cmp	r3, #2
 8005670:	d123      	bne.n	80056ba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	08da      	lsrs	r2, r3, #3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	3208      	adds	r2, #8
 800567a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800567e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	f003 0307 	and.w	r3, r3, #7
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	220f      	movs	r2, #15
 800568a:	fa02 f303 	lsl.w	r3, r2, r3
 800568e:	43db      	mvns	r3, r3
 8005690:	69ba      	ldr	r2, [r7, #24]
 8005692:	4013      	ands	r3, r2
 8005694:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	691a      	ldr	r2, [r3, #16]
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	f003 0307 	and.w	r3, r3, #7
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	fa02 f303 	lsl.w	r3, r2, r3
 80056a6:	69ba      	ldr	r2, [r7, #24]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	08da      	lsrs	r2, r3, #3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	3208      	adds	r2, #8
 80056b4:	69b9      	ldr	r1, [r7, #24]
 80056b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	005b      	lsls	r3, r3, #1
 80056c4:	2203      	movs	r2, #3
 80056c6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ca:	43db      	mvns	r3, r3
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	4013      	ands	r3, r2
 80056d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f003 0203 	and.w	r2, r3, #3
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	005b      	lsls	r3, r3, #1
 80056de:	fa02 f303 	lsl.w	r3, r2, r3
 80056e2:	69ba      	ldr	r2, [r7, #24]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	69ba      	ldr	r2, [r7, #24]
 80056ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	f000 80e0 	beq.w	80058bc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056fc:	4b2f      	ldr	r3, [pc, #188]	; (80057bc <HAL_GPIO_Init+0x238>)
 80056fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005702:	4a2e      	ldr	r2, [pc, #184]	; (80057bc <HAL_GPIO_Init+0x238>)
 8005704:	f043 0302 	orr.w	r3, r3, #2
 8005708:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800570c:	4b2b      	ldr	r3, [pc, #172]	; (80057bc <HAL_GPIO_Init+0x238>)
 800570e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005712:	f003 0302 	and.w	r3, r3, #2
 8005716:	60fb      	str	r3, [r7, #12]
 8005718:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800571a:	4a29      	ldr	r2, [pc, #164]	; (80057c0 <HAL_GPIO_Init+0x23c>)
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	089b      	lsrs	r3, r3, #2
 8005720:	3302      	adds	r3, #2
 8005722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005726:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	f003 0303 	and.w	r3, r3, #3
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	220f      	movs	r2, #15
 8005732:	fa02 f303 	lsl.w	r3, r2, r3
 8005736:	43db      	mvns	r3, r3
 8005738:	69ba      	ldr	r2, [r7, #24]
 800573a:	4013      	ands	r3, r2
 800573c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a20      	ldr	r2, [pc, #128]	; (80057c4 <HAL_GPIO_Init+0x240>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d052      	beq.n	80057ec <HAL_GPIO_Init+0x268>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a1f      	ldr	r2, [pc, #124]	; (80057c8 <HAL_GPIO_Init+0x244>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d031      	beq.n	80057b2 <HAL_GPIO_Init+0x22e>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a1e      	ldr	r2, [pc, #120]	; (80057cc <HAL_GPIO_Init+0x248>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d02b      	beq.n	80057ae <HAL_GPIO_Init+0x22a>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a1d      	ldr	r2, [pc, #116]	; (80057d0 <HAL_GPIO_Init+0x24c>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d025      	beq.n	80057aa <HAL_GPIO_Init+0x226>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a1c      	ldr	r2, [pc, #112]	; (80057d4 <HAL_GPIO_Init+0x250>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d01f      	beq.n	80057a6 <HAL_GPIO_Init+0x222>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a1b      	ldr	r2, [pc, #108]	; (80057d8 <HAL_GPIO_Init+0x254>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d019      	beq.n	80057a2 <HAL_GPIO_Init+0x21e>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a1a      	ldr	r2, [pc, #104]	; (80057dc <HAL_GPIO_Init+0x258>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d013      	beq.n	800579e <HAL_GPIO_Init+0x21a>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a19      	ldr	r2, [pc, #100]	; (80057e0 <HAL_GPIO_Init+0x25c>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d00d      	beq.n	800579a <HAL_GPIO_Init+0x216>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a18      	ldr	r2, [pc, #96]	; (80057e4 <HAL_GPIO_Init+0x260>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d007      	beq.n	8005796 <HAL_GPIO_Init+0x212>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a17      	ldr	r2, [pc, #92]	; (80057e8 <HAL_GPIO_Init+0x264>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d101      	bne.n	8005792 <HAL_GPIO_Init+0x20e>
 800578e:	2309      	movs	r3, #9
 8005790:	e02d      	b.n	80057ee <HAL_GPIO_Init+0x26a>
 8005792:	230a      	movs	r3, #10
 8005794:	e02b      	b.n	80057ee <HAL_GPIO_Init+0x26a>
 8005796:	2308      	movs	r3, #8
 8005798:	e029      	b.n	80057ee <HAL_GPIO_Init+0x26a>
 800579a:	2307      	movs	r3, #7
 800579c:	e027      	b.n	80057ee <HAL_GPIO_Init+0x26a>
 800579e:	2306      	movs	r3, #6
 80057a0:	e025      	b.n	80057ee <HAL_GPIO_Init+0x26a>
 80057a2:	2305      	movs	r3, #5
 80057a4:	e023      	b.n	80057ee <HAL_GPIO_Init+0x26a>
 80057a6:	2304      	movs	r3, #4
 80057a8:	e021      	b.n	80057ee <HAL_GPIO_Init+0x26a>
 80057aa:	2303      	movs	r3, #3
 80057ac:	e01f      	b.n	80057ee <HAL_GPIO_Init+0x26a>
 80057ae:	2302      	movs	r3, #2
 80057b0:	e01d      	b.n	80057ee <HAL_GPIO_Init+0x26a>
 80057b2:	2301      	movs	r3, #1
 80057b4:	e01b      	b.n	80057ee <HAL_GPIO_Init+0x26a>
 80057b6:	bf00      	nop
 80057b8:	58000080 	.word	0x58000080
 80057bc:	58024400 	.word	0x58024400
 80057c0:	58000400 	.word	0x58000400
 80057c4:	58020000 	.word	0x58020000
 80057c8:	58020400 	.word	0x58020400
 80057cc:	58020800 	.word	0x58020800
 80057d0:	58020c00 	.word	0x58020c00
 80057d4:	58021000 	.word	0x58021000
 80057d8:	58021400 	.word	0x58021400
 80057dc:	58021800 	.word	0x58021800
 80057e0:	58021c00 	.word	0x58021c00
 80057e4:	58022000 	.word	0x58022000
 80057e8:	58022400 	.word	0x58022400
 80057ec:	2300      	movs	r3, #0
 80057ee:	69fa      	ldr	r2, [r7, #28]
 80057f0:	f002 0203 	and.w	r2, r2, #3
 80057f4:	0092      	lsls	r2, r2, #2
 80057f6:	4093      	lsls	r3, r2
 80057f8:	69ba      	ldr	r2, [r7, #24]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80057fe:	4938      	ldr	r1, [pc, #224]	; (80058e0 <HAL_GPIO_Init+0x35c>)
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	089b      	lsrs	r3, r3, #2
 8005804:	3302      	adds	r3, #2
 8005806:	69ba      	ldr	r2, [r7, #24]
 8005808:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800580c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	43db      	mvns	r3, r3
 8005818:	69ba      	ldr	r2, [r7, #24]
 800581a:	4013      	ands	r3, r2
 800581c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d003      	beq.n	8005832 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800582a:	69ba      	ldr	r2, [r7, #24]
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	4313      	orrs	r3, r2
 8005830:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005832:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800583a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	43db      	mvns	r3, r3
 8005846:	69ba      	ldr	r2, [r7, #24]
 8005848:	4013      	ands	r3, r2
 800584a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d003      	beq.n	8005860 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005858:	69ba      	ldr	r2, [r7, #24]
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	4313      	orrs	r3, r2
 800585e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005860:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	43db      	mvns	r3, r3
 8005872:	69ba      	ldr	r2, [r7, #24]
 8005874:	4013      	ands	r3, r2
 8005876:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d003      	beq.n	800588c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005884:	69ba      	ldr	r2, [r7, #24]
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	4313      	orrs	r3, r2
 800588a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	69ba      	ldr	r2, [r7, #24]
 8005890:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	43db      	mvns	r3, r3
 800589c:	69ba      	ldr	r2, [r7, #24]
 800589e:	4013      	ands	r3, r2
 80058a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d003      	beq.n	80058b6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80058ae:	69ba      	ldr	r2, [r7, #24]
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	69ba      	ldr	r2, [r7, #24]
 80058ba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	3301      	adds	r3, #1
 80058c0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	fa22 f303 	lsr.w	r3, r2, r3
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f47f ae63 	bne.w	8005598 <HAL_GPIO_Init+0x14>
  }
}
 80058d2:	bf00      	nop
 80058d4:	bf00      	nop
 80058d6:	3724      	adds	r7, #36	; 0x24
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr
 80058e0:	58000400 	.word	0x58000400

080058e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	460b      	mov	r3, r1
 80058ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	691a      	ldr	r2, [r3, #16]
 80058f4:	887b      	ldrh	r3, [r7, #2]
 80058f6:	4013      	ands	r3, r2
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d002      	beq.n	8005902 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80058fc:	2301      	movs	r3, #1
 80058fe:	73fb      	strb	r3, [r7, #15]
 8005900:	e001      	b.n	8005906 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005902:	2300      	movs	r3, #0
 8005904:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005906:	7bfb      	ldrb	r3, [r7, #15]
}
 8005908:	4618      	mov	r0, r3
 800590a:	3714      	adds	r7, #20
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	460b      	mov	r3, r1
 800591e:	807b      	strh	r3, [r7, #2]
 8005920:	4613      	mov	r3, r2
 8005922:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005924:	787b      	ldrb	r3, [r7, #1]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d003      	beq.n	8005932 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800592a:	887a      	ldrh	r2, [r7, #2]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005930:	e003      	b.n	800593a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005932:	887b      	ldrh	r3, [r7, #2]
 8005934:	041a      	lsls	r2, r3, #16
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	619a      	str	r2, [r3, #24]
}
 800593a:	bf00      	nop
 800593c:	370c      	adds	r7, #12
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
	...

08005948 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d101      	bne.n	800595a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e07f      	b.n	8005a5a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005960:	b2db      	uxtb	r3, r3
 8005962:	2b00      	cmp	r3, #0
 8005964:	d106      	bne.n	8005974 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f7fb fc60 	bl	8001234 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2224      	movs	r2, #36	; 0x24
 8005978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f022 0201 	bic.w	r2, r2, #1
 800598a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685a      	ldr	r2, [r3, #4]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005998:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	689a      	ldr	r2, [r3, #8]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80059a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d107      	bne.n	80059c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	689a      	ldr	r2, [r3, #8]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059be:	609a      	str	r2, [r3, #8]
 80059c0:	e006      	b.n	80059d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	689a      	ldr	r2, [r3, #8]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80059ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d104      	bne.n	80059e2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	6859      	ldr	r1, [r3, #4]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	4b1d      	ldr	r3, [pc, #116]	; (8005a64 <HAL_I2C_Init+0x11c>)
 80059ee:	430b      	orrs	r3, r1
 80059f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68da      	ldr	r2, [r3, #12]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	691a      	ldr	r2, [r3, #16]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	430a      	orrs	r2, r1
 8005a1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	69d9      	ldr	r1, [r3, #28]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a1a      	ldr	r2, [r3, #32]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	430a      	orrs	r2, r1
 8005a2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f042 0201 	orr.w	r2, r2, #1
 8005a3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2220      	movs	r2, #32
 8005a46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3708      	adds	r7, #8
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	02008000 	.word	0x02008000

08005a68 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b088      	sub	sp, #32
 8005a6c:	af02      	add	r7, sp, #8
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	607a      	str	r2, [r7, #4]
 8005a72:	461a      	mov	r2, r3
 8005a74:	460b      	mov	r3, r1
 8005a76:	817b      	strh	r3, [r7, #10]
 8005a78:	4613      	mov	r3, r2
 8005a7a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	2b20      	cmp	r3, #32
 8005a86:	f040 80da 	bne.w	8005c3e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d101      	bne.n	8005a98 <HAL_I2C_Master_Transmit+0x30>
 8005a94:	2302      	movs	r3, #2
 8005a96:	e0d3      	b.n	8005c40 <HAL_I2C_Master_Transmit+0x1d8>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005aa0:	f7fc f9e0 	bl	8001e64 <HAL_GetTick>
 8005aa4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	9300      	str	r3, [sp, #0]
 8005aaa:	2319      	movs	r3, #25
 8005aac:	2201      	movs	r2, #1
 8005aae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005ab2:	68f8      	ldr	r0, [r7, #12]
 8005ab4:	f000 f9e6 	bl	8005e84 <I2C_WaitOnFlagUntilTimeout>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d001      	beq.n	8005ac2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e0be      	b.n	8005c40 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2221      	movs	r2, #33	; 0x21
 8005ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2210      	movs	r2, #16
 8005ace:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	893a      	ldrh	r2, [r7, #8]
 8005ae2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	2bff      	cmp	r3, #255	; 0xff
 8005af2:	d90e      	bls.n	8005b12 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	22ff      	movs	r2, #255	; 0xff
 8005af8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005afe:	b2da      	uxtb	r2, r3
 8005b00:	8979      	ldrh	r1, [r7, #10]
 8005b02:	4b51      	ldr	r3, [pc, #324]	; (8005c48 <HAL_I2C_Master_Transmit+0x1e0>)
 8005b04:	9300      	str	r3, [sp, #0]
 8005b06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b0a:	68f8      	ldr	r0, [r7, #12]
 8005b0c:	f000 fbf6 	bl	80062fc <I2C_TransferConfig>
 8005b10:	e06c      	b.n	8005bec <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b16:	b29a      	uxth	r2, r3
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b20:	b2da      	uxtb	r2, r3
 8005b22:	8979      	ldrh	r1, [r7, #10]
 8005b24:	4b48      	ldr	r3, [pc, #288]	; (8005c48 <HAL_I2C_Master_Transmit+0x1e0>)
 8005b26:	9300      	str	r3, [sp, #0]
 8005b28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f000 fbe5 	bl	80062fc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005b32:	e05b      	b.n	8005bec <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b34:	697a      	ldr	r2, [r7, #20]
 8005b36:	6a39      	ldr	r1, [r7, #32]
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f000 f9f2 	bl	8005f22 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d001      	beq.n	8005b48 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e07b      	b.n	8005c40 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4c:	781a      	ldrb	r2, [r3, #0]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b58:	1c5a      	adds	r2, r3, #1
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	3b01      	subs	r3, #1
 8005b66:	b29a      	uxth	r2, r3
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b70:	3b01      	subs	r3, #1
 8005b72:	b29a      	uxth	r2, r3
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d034      	beq.n	8005bec <HAL_I2C_Master_Transmit+0x184>
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d130      	bne.n	8005bec <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	9300      	str	r3, [sp, #0]
 8005b8e:	6a3b      	ldr	r3, [r7, #32]
 8005b90:	2200      	movs	r2, #0
 8005b92:	2180      	movs	r1, #128	; 0x80
 8005b94:	68f8      	ldr	r0, [r7, #12]
 8005b96:	f000 f975 	bl	8005e84 <I2C_WaitOnFlagUntilTimeout>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d001      	beq.n	8005ba4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e04d      	b.n	8005c40 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	2bff      	cmp	r3, #255	; 0xff
 8005bac:	d90e      	bls.n	8005bcc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	22ff      	movs	r2, #255	; 0xff
 8005bb2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bb8:	b2da      	uxtb	r2, r3
 8005bba:	8979      	ldrh	r1, [r7, #10]
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	9300      	str	r3, [sp, #0]
 8005bc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	f000 fb99 	bl	80062fc <I2C_TransferConfig>
 8005bca:	e00f      	b.n	8005bec <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bda:	b2da      	uxtb	r2, r3
 8005bdc:	8979      	ldrh	r1, [r7, #10]
 8005bde:	2300      	movs	r3, #0
 8005be0:	9300      	str	r3, [sp, #0]
 8005be2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005be6:	68f8      	ldr	r0, [r7, #12]
 8005be8:	f000 fb88 	bl	80062fc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d19e      	bne.n	8005b34 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bf6:	697a      	ldr	r2, [r7, #20]
 8005bf8:	6a39      	ldr	r1, [r7, #32]
 8005bfa:	68f8      	ldr	r0, [r7, #12]
 8005bfc:	f000 f9d8 	bl	8005fb0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d001      	beq.n	8005c0a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e01a      	b.n	8005c40 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2220      	movs	r2, #32
 8005c10:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	6859      	ldr	r1, [r3, #4]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	4b0b      	ldr	r3, [pc, #44]	; (8005c4c <HAL_I2C_Master_Transmit+0x1e4>)
 8005c1e:	400b      	ands	r3, r1
 8005c20:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2220      	movs	r2, #32
 8005c26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	e000      	b.n	8005c40 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005c3e:	2302      	movs	r3, #2
  }
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3718      	adds	r7, #24
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	80002000 	.word	0x80002000
 8005c4c:	fe00e800 	.word	0xfe00e800

08005c50 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b088      	sub	sp, #32
 8005c54:	af02      	add	r7, sp, #8
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	607a      	str	r2, [r7, #4]
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	817b      	strh	r3, [r7, #10]
 8005c60:	4613      	mov	r3, r2
 8005c62:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	2b20      	cmp	r3, #32
 8005c6e:	f040 80db 	bne.w	8005e28 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d101      	bne.n	8005c80 <HAL_I2C_Master_Receive+0x30>
 8005c7c:	2302      	movs	r3, #2
 8005c7e:	e0d4      	b.n	8005e2a <HAL_I2C_Master_Receive+0x1da>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005c88:	f7fc f8ec 	bl	8001e64 <HAL_GetTick>
 8005c8c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	9300      	str	r3, [sp, #0]
 8005c92:	2319      	movs	r3, #25
 8005c94:	2201      	movs	r2, #1
 8005c96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005c9a:	68f8      	ldr	r0, [r7, #12]
 8005c9c:	f000 f8f2 	bl	8005e84 <I2C_WaitOnFlagUntilTimeout>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d001      	beq.n	8005caa <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e0bf      	b.n	8005e2a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2222      	movs	r2, #34	; 0x22
 8005cae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2210      	movs	r2, #16
 8005cb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	893a      	ldrh	r2, [r7, #8]
 8005cca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	2bff      	cmp	r3, #255	; 0xff
 8005cda:	d90e      	bls.n	8005cfa <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	22ff      	movs	r2, #255	; 0xff
 8005ce0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ce6:	b2da      	uxtb	r2, r3
 8005ce8:	8979      	ldrh	r1, [r7, #10]
 8005cea:	4b52      	ldr	r3, [pc, #328]	; (8005e34 <HAL_I2C_Master_Receive+0x1e4>)
 8005cec:	9300      	str	r3, [sp, #0]
 8005cee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005cf2:	68f8      	ldr	r0, [r7, #12]
 8005cf4:	f000 fb02 	bl	80062fc <I2C_TransferConfig>
 8005cf8:	e06d      	b.n	8005dd6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cfe:	b29a      	uxth	r2, r3
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d08:	b2da      	uxtb	r2, r3
 8005d0a:	8979      	ldrh	r1, [r7, #10]
 8005d0c:	4b49      	ldr	r3, [pc, #292]	; (8005e34 <HAL_I2C_Master_Receive+0x1e4>)
 8005d0e:	9300      	str	r3, [sp, #0]
 8005d10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d14:	68f8      	ldr	r0, [r7, #12]
 8005d16:	f000 faf1 	bl	80062fc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005d1a:	e05c      	b.n	8005dd6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d1c:	697a      	ldr	r2, [r7, #20]
 8005d1e:	6a39      	ldr	r1, [r7, #32]
 8005d20:	68f8      	ldr	r0, [r7, #12]
 8005d22:	f000 f989 	bl	8006038 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d001      	beq.n	8005d30 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e07c      	b.n	8005e2a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3a:	b2d2      	uxtb	r2, r2
 8005d3c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d42:	1c5a      	adds	r2, r3, #1
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d4c:	3b01      	subs	r3, #1
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	b29a      	uxth	r2, r3
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d034      	beq.n	8005dd6 <HAL_I2C_Master_Receive+0x186>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d130      	bne.n	8005dd6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	9300      	str	r3, [sp, #0]
 8005d78:	6a3b      	ldr	r3, [r7, #32]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	2180      	movs	r1, #128	; 0x80
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	f000 f880 	bl	8005e84 <I2C_WaitOnFlagUntilTimeout>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d001      	beq.n	8005d8e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e04d      	b.n	8005e2a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	2bff      	cmp	r3, #255	; 0xff
 8005d96:	d90e      	bls.n	8005db6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	22ff      	movs	r2, #255	; 0xff
 8005d9c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005da2:	b2da      	uxtb	r2, r3
 8005da4:	8979      	ldrh	r1, [r7, #10]
 8005da6:	2300      	movs	r3, #0
 8005da8:	9300      	str	r3, [sp, #0]
 8005daa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	f000 faa4 	bl	80062fc <I2C_TransferConfig>
 8005db4:	e00f      	b.n	8005dd6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dba:	b29a      	uxth	r2, r3
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dc4:	b2da      	uxtb	r2, r3
 8005dc6:	8979      	ldrh	r1, [r7, #10]
 8005dc8:	2300      	movs	r3, #0
 8005dca:	9300      	str	r3, [sp, #0]
 8005dcc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	f000 fa93 	bl	80062fc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d19d      	bne.n	8005d1c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005de0:	697a      	ldr	r2, [r7, #20]
 8005de2:	6a39      	ldr	r1, [r7, #32]
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f000 f8e3 	bl	8005fb0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d001      	beq.n	8005df4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e01a      	b.n	8005e2a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2220      	movs	r2, #32
 8005dfa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	6859      	ldr	r1, [r3, #4]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	4b0c      	ldr	r3, [pc, #48]	; (8005e38 <HAL_I2C_Master_Receive+0x1e8>)
 8005e08:	400b      	ands	r3, r1
 8005e0a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2220      	movs	r2, #32
 8005e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005e24:	2300      	movs	r3, #0
 8005e26:	e000      	b.n	8005e2a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005e28:	2302      	movs	r3, #2
  }
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3718      	adds	r7, #24
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	80002400 	.word	0x80002400
 8005e38:	fe00e800 	.word	0xfe00e800

08005e3c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	699b      	ldr	r3, [r3, #24]
 8005e4a:	f003 0302 	and.w	r3, r3, #2
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d103      	bne.n	8005e5a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2200      	movs	r2, #0
 8005e58:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	699b      	ldr	r3, [r3, #24]
 8005e60:	f003 0301 	and.w	r3, r3, #1
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d007      	beq.n	8005e78 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	699a      	ldr	r2, [r3, #24]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f042 0201 	orr.w	r2, r2, #1
 8005e76:	619a      	str	r2, [r3, #24]
  }
}
 8005e78:	bf00      	nop
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	603b      	str	r3, [r7, #0]
 8005e90:	4613      	mov	r3, r2
 8005e92:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e94:	e031      	b.n	8005efa <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e9c:	d02d      	beq.n	8005efa <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e9e:	f7fb ffe1 	bl	8001e64 <HAL_GetTick>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	683a      	ldr	r2, [r7, #0]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d302      	bcc.n	8005eb4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d122      	bne.n	8005efa <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	699a      	ldr	r2, [r3, #24]
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	68ba      	ldr	r2, [r7, #8]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	bf0c      	ite	eq
 8005ec4:	2301      	moveq	r3, #1
 8005ec6:	2300      	movne	r3, #0
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	461a      	mov	r2, r3
 8005ecc:	79fb      	ldrb	r3, [r7, #7]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d113      	bne.n	8005efa <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ed6:	f043 0220 	orr.w	r2, r3, #32
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2220      	movs	r2, #32
 8005ee2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e00f      	b.n	8005f1a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	699a      	ldr	r2, [r3, #24]
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	4013      	ands	r3, r2
 8005f04:	68ba      	ldr	r2, [r7, #8]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	bf0c      	ite	eq
 8005f0a:	2301      	moveq	r3, #1
 8005f0c:	2300      	movne	r3, #0
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	461a      	mov	r2, r3
 8005f12:	79fb      	ldrb	r3, [r7, #7]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d0be      	beq.n	8005e96 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3710      	adds	r7, #16
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b084      	sub	sp, #16
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	60f8      	str	r0, [r7, #12]
 8005f2a:	60b9      	str	r1, [r7, #8]
 8005f2c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005f2e:	e033      	b.n	8005f98 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	68b9      	ldr	r1, [r7, #8]
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	f000 f901 	bl	800613c <I2C_IsErrorOccurred>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d001      	beq.n	8005f44 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e031      	b.n	8005fa8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f4a:	d025      	beq.n	8005f98 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f4c:	f7fb ff8a 	bl	8001e64 <HAL_GetTick>
 8005f50:	4602      	mov	r2, r0
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	68ba      	ldr	r2, [r7, #8]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d302      	bcc.n	8005f62 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d11a      	bne.n	8005f98 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	699b      	ldr	r3, [r3, #24]
 8005f68:	f003 0302 	and.w	r3, r3, #2
 8005f6c:	2b02      	cmp	r3, #2
 8005f6e:	d013      	beq.n	8005f98 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f74:	f043 0220 	orr.w	r2, r3, #32
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2220      	movs	r2, #32
 8005f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e007      	b.n	8005fa8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	f003 0302 	and.w	r3, r3, #2
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d1c4      	bne.n	8005f30 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3710      	adds	r7, #16
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	60b9      	str	r1, [r7, #8]
 8005fba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005fbc:	e02f      	b.n	800601e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	68b9      	ldr	r1, [r7, #8]
 8005fc2:	68f8      	ldr	r0, [r7, #12]
 8005fc4:	f000 f8ba 	bl	800613c <I2C_IsErrorOccurred>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d001      	beq.n	8005fd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e02d      	b.n	800602e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fd2:	f7fb ff47 	bl	8001e64 <HAL_GetTick>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	68ba      	ldr	r2, [r7, #8]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d302      	bcc.n	8005fe8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d11a      	bne.n	800601e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	699b      	ldr	r3, [r3, #24]
 8005fee:	f003 0320 	and.w	r3, r3, #32
 8005ff2:	2b20      	cmp	r3, #32
 8005ff4:	d013      	beq.n	800601e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ffa:	f043 0220 	orr.w	r2, r3, #32
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2220      	movs	r2, #32
 8006006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e007      	b.n	800602e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	699b      	ldr	r3, [r3, #24]
 8006024:	f003 0320 	and.w	r3, r3, #32
 8006028:	2b20      	cmp	r3, #32
 800602a:	d1c8      	bne.n	8005fbe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3710      	adds	r7, #16
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
	...

08006038 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006044:	e06b      	b.n	800611e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	68b9      	ldr	r1, [r7, #8]
 800604a:	68f8      	ldr	r0, [r7, #12]
 800604c:	f000 f876 	bl	800613c <I2C_IsErrorOccurred>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d001      	beq.n	800605a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e069      	b.n	800612e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	699b      	ldr	r3, [r3, #24]
 8006060:	f003 0320 	and.w	r3, r3, #32
 8006064:	2b20      	cmp	r3, #32
 8006066:	d138      	bne.n	80060da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	699b      	ldr	r3, [r3, #24]
 800606e:	f003 0304 	and.w	r3, r3, #4
 8006072:	2b04      	cmp	r3, #4
 8006074:	d105      	bne.n	8006082 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800607a:	2b00      	cmp	r3, #0
 800607c:	d001      	beq.n	8006082 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800607e:	2300      	movs	r3, #0
 8006080:	e055      	b.n	800612e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	699b      	ldr	r3, [r3, #24]
 8006088:	f003 0310 	and.w	r3, r3, #16
 800608c:	2b10      	cmp	r3, #16
 800608e:	d107      	bne.n	80060a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2210      	movs	r2, #16
 8006096:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2204      	movs	r2, #4
 800609c:	645a      	str	r2, [r3, #68]	; 0x44
 800609e:	e002      	b.n	80060a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2200      	movs	r2, #0
 80060a4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2220      	movs	r2, #32
 80060ac:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	6859      	ldr	r1, [r3, #4]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	4b1f      	ldr	r3, [pc, #124]	; (8006138 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80060ba:	400b      	ands	r3, r1
 80060bc:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2220      	movs	r2, #32
 80060c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e029      	b.n	800612e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060da:	f7fb fec3 	bl	8001e64 <HAL_GetTick>
 80060de:	4602      	mov	r2, r0
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	68ba      	ldr	r2, [r7, #8]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d302      	bcc.n	80060f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d116      	bne.n	800611e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	699b      	ldr	r3, [r3, #24]
 80060f6:	f003 0304 	and.w	r3, r3, #4
 80060fa:	2b04      	cmp	r3, #4
 80060fc:	d00f      	beq.n	800611e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006102:	f043 0220 	orr.w	r2, r3, #32
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2220      	movs	r2, #32
 800610e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	e007      	b.n	800612e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	699b      	ldr	r3, [r3, #24]
 8006124:	f003 0304 	and.w	r3, r3, #4
 8006128:	2b04      	cmp	r3, #4
 800612a:	d18c      	bne.n	8006046 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	3710      	adds	r7, #16
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	fe00e800 	.word	0xfe00e800

0800613c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b08a      	sub	sp, #40	; 0x28
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006148:	2300      	movs	r3, #0
 800614a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	699b      	ldr	r3, [r3, #24]
 8006154:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006156:	2300      	movs	r3, #0
 8006158:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	f003 0310 	and.w	r3, r3, #16
 8006164:	2b00      	cmp	r3, #0
 8006166:	d068      	beq.n	800623a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2210      	movs	r2, #16
 800616e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006170:	e049      	b.n	8006206 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006178:	d045      	beq.n	8006206 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800617a:	f7fb fe73 	bl	8001e64 <HAL_GetTick>
 800617e:	4602      	mov	r2, r0
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	68ba      	ldr	r2, [r7, #8]
 8006186:	429a      	cmp	r2, r3
 8006188:	d302      	bcc.n	8006190 <I2C_IsErrorOccurred+0x54>
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d13a      	bne.n	8006206 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800619a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80061a2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061b2:	d121      	bne.n	80061f8 <I2C_IsErrorOccurred+0xbc>
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061ba:	d01d      	beq.n	80061f8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80061bc:	7cfb      	ldrb	r3, [r7, #19]
 80061be:	2b20      	cmp	r3, #32
 80061c0:	d01a      	beq.n	80061f8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	685a      	ldr	r2, [r3, #4]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061d0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80061d2:	f7fb fe47 	bl	8001e64 <HAL_GetTick>
 80061d6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80061d8:	e00e      	b.n	80061f8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80061da:	f7fb fe43 	bl	8001e64 <HAL_GetTick>
 80061de:	4602      	mov	r2, r0
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	2b19      	cmp	r3, #25
 80061e6:	d907      	bls.n	80061f8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80061e8:	6a3b      	ldr	r3, [r7, #32]
 80061ea:	f043 0320 	orr.w	r3, r3, #32
 80061ee:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80061f6:	e006      	b.n	8006206 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	699b      	ldr	r3, [r3, #24]
 80061fe:	f003 0320 	and.w	r3, r3, #32
 8006202:	2b20      	cmp	r3, #32
 8006204:	d1e9      	bne.n	80061da <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	699b      	ldr	r3, [r3, #24]
 800620c:	f003 0320 	and.w	r3, r3, #32
 8006210:	2b20      	cmp	r3, #32
 8006212:	d003      	beq.n	800621c <I2C_IsErrorOccurred+0xe0>
 8006214:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006218:	2b00      	cmp	r3, #0
 800621a:	d0aa      	beq.n	8006172 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800621c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006220:	2b00      	cmp	r3, #0
 8006222:	d103      	bne.n	800622c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2220      	movs	r2, #32
 800622a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800622c:	6a3b      	ldr	r3, [r7, #32]
 800622e:	f043 0304 	orr.w	r3, r3, #4
 8006232:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	699b      	ldr	r3, [r3, #24]
 8006240:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006242:	69bb      	ldr	r3, [r7, #24]
 8006244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006248:	2b00      	cmp	r3, #0
 800624a:	d00b      	beq.n	8006264 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800624c:	6a3b      	ldr	r3, [r7, #32]
 800624e:	f043 0301 	orr.w	r3, r3, #1
 8006252:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f44f 7280 	mov.w	r2, #256	; 0x100
 800625c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800626a:	2b00      	cmp	r3, #0
 800626c:	d00b      	beq.n	8006286 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800626e:	6a3b      	ldr	r3, [r7, #32]
 8006270:	f043 0308 	orr.w	r3, r3, #8
 8006274:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800627e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800628c:	2b00      	cmp	r3, #0
 800628e:	d00b      	beq.n	80062a8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006290:	6a3b      	ldr	r3, [r7, #32]
 8006292:	f043 0302 	orr.w	r3, r3, #2
 8006296:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80062a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d01c      	beq.n	80062ea <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80062b0:	68f8      	ldr	r0, [r7, #12]
 80062b2:	f7ff fdc3 	bl	8005e3c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	6859      	ldr	r1, [r3, #4]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	4b0d      	ldr	r3, [pc, #52]	; (80062f8 <I2C_IsErrorOccurred+0x1bc>)
 80062c2:	400b      	ands	r3, r1
 80062c4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062ca:	6a3b      	ldr	r3, [r7, #32]
 80062cc:	431a      	orrs	r2, r3
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2220      	movs	r2, #32
 80062d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80062ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3728      	adds	r7, #40	; 0x28
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	fe00e800 	.word	0xfe00e800

080062fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b087      	sub	sp, #28
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	607b      	str	r3, [r7, #4]
 8006306:	460b      	mov	r3, r1
 8006308:	817b      	strh	r3, [r7, #10]
 800630a:	4613      	mov	r3, r2
 800630c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800630e:	897b      	ldrh	r3, [r7, #10]
 8006310:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006314:	7a7b      	ldrb	r3, [r7, #9]
 8006316:	041b      	lsls	r3, r3, #16
 8006318:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800631c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006322:	6a3b      	ldr	r3, [r7, #32]
 8006324:	4313      	orrs	r3, r2
 8006326:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800632a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	685a      	ldr	r2, [r3, #4]
 8006332:	6a3b      	ldr	r3, [r7, #32]
 8006334:	0d5b      	lsrs	r3, r3, #21
 8006336:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800633a:	4b08      	ldr	r3, [pc, #32]	; (800635c <I2C_TransferConfig+0x60>)
 800633c:	430b      	orrs	r3, r1
 800633e:	43db      	mvns	r3, r3
 8006340:	ea02 0103 	and.w	r1, r2, r3
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	697a      	ldr	r2, [r7, #20]
 800634a:	430a      	orrs	r2, r1
 800634c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800634e:	bf00      	nop
 8006350:	371c      	adds	r7, #28
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr
 800635a:	bf00      	nop
 800635c:	03ff63ff 	.word	0x03ff63ff

08006360 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006370:	b2db      	uxtb	r3, r3
 8006372:	2b20      	cmp	r3, #32
 8006374:	d138      	bne.n	80063e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800637c:	2b01      	cmp	r3, #1
 800637e:	d101      	bne.n	8006384 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006380:	2302      	movs	r3, #2
 8006382:	e032      	b.n	80063ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2224      	movs	r2, #36	; 0x24
 8006390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f022 0201 	bic.w	r2, r2, #1
 80063a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80063b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	6819      	ldr	r1, [r3, #0]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	683a      	ldr	r2, [r7, #0]
 80063c0:	430a      	orrs	r2, r1
 80063c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f042 0201 	orr.w	r2, r2, #1
 80063d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2220      	movs	r2, #32
 80063d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80063e4:	2300      	movs	r3, #0
 80063e6:	e000      	b.n	80063ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80063e8:	2302      	movs	r3, #2
  }
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	370c      	adds	r7, #12
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr

080063f6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80063f6:	b480      	push	{r7}
 80063f8:	b085      	sub	sp, #20
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
 80063fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006406:	b2db      	uxtb	r3, r3
 8006408:	2b20      	cmp	r3, #32
 800640a:	d139      	bne.n	8006480 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006412:	2b01      	cmp	r3, #1
 8006414:	d101      	bne.n	800641a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006416:	2302      	movs	r3, #2
 8006418:	e033      	b.n	8006482 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2201      	movs	r2, #1
 800641e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2224      	movs	r2, #36	; 0x24
 8006426:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f022 0201 	bic.w	r2, r2, #1
 8006438:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006448:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	021b      	lsls	r3, r3, #8
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	4313      	orrs	r3, r2
 8006452:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f042 0201 	orr.w	r2, r2, #1
 800646a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2220      	movs	r2, #32
 8006470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800647c:	2300      	movs	r3, #0
 800647e:	e000      	b.n	8006482 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006480:	2302      	movs	r3, #2
  }
}
 8006482:	4618      	mov	r0, r3
 8006484:	3714      	adds	r7, #20
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr
	...

08006490 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8006490:	b480      	push	{r7}
 8006492:	b085      	sub	sp, #20
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006498:	4b0d      	ldr	r3, [pc, #52]	; (80064d0 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800649a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800649e:	4a0c      	ldr	r2, [pc, #48]	; (80064d0 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80064a0:	f043 0302 	orr.w	r3, r3, #2
 80064a4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80064a8:	4b09      	ldr	r3, [pc, #36]	; (80064d0 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80064aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80064ae:	f003 0302 	and.w	r3, r3, #2
 80064b2:	60fb      	str	r3, [r7, #12]
 80064b4:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 80064b6:	4b07      	ldr	r3, [pc, #28]	; (80064d4 <HAL_I2CEx_EnableFastModePlus+0x44>)
 80064b8:	685a      	ldr	r2, [r3, #4]
 80064ba:	4906      	ldr	r1, [pc, #24]	; (80064d4 <HAL_I2CEx_EnableFastModePlus+0x44>)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4313      	orrs	r3, r2
 80064c0:	604b      	str	r3, [r1, #4]
}
 80064c2:	bf00      	nop
 80064c4:	3714      	adds	r7, #20
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr
 80064ce:	bf00      	nop
 80064d0:	58024400 	.word	0x58024400
 80064d4:	58000400 	.word	0x58000400

080064d8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80064d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064da:	b08f      	sub	sp, #60	; 0x3c
 80064dc:	af0a      	add	r7, sp, #40	; 0x28
 80064de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d101      	bne.n	80064ea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e116      	b.n	8006718 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d106      	bne.n	800650a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f7fb fbb7 	bl	8001c78 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2203      	movs	r2, #3
 800650e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800651a:	2b00      	cmp	r3, #0
 800651c:	d102      	bne.n	8006524 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4618      	mov	r0, r3
 800652a:	f006 f94f 	bl	800c7cc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	603b      	str	r3, [r7, #0]
 8006534:	687e      	ldr	r6, [r7, #4]
 8006536:	466d      	mov	r5, sp
 8006538:	f106 0410 	add.w	r4, r6, #16
 800653c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800653e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006540:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006542:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006544:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006548:	e885 0003 	stmia.w	r5, {r0, r1}
 800654c:	1d33      	adds	r3, r6, #4
 800654e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006550:	6838      	ldr	r0, [r7, #0]
 8006552:	f006 f8cd 	bl	800c6f0 <USB_CoreInit>
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d005      	beq.n	8006568 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2202      	movs	r2, #2
 8006560:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	e0d7      	b.n	8006718 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2100      	movs	r1, #0
 800656e:	4618      	mov	r0, r3
 8006570:	f006 f93d 	bl	800c7ee <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006574:	2300      	movs	r3, #0
 8006576:	73fb      	strb	r3, [r7, #15]
 8006578:	e04a      	b.n	8006610 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800657a:	7bfa      	ldrb	r2, [r7, #15]
 800657c:	6879      	ldr	r1, [r7, #4]
 800657e:	4613      	mov	r3, r2
 8006580:	00db      	lsls	r3, r3, #3
 8006582:	4413      	add	r3, r2
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	440b      	add	r3, r1
 8006588:	333d      	adds	r3, #61	; 0x3d
 800658a:	2201      	movs	r2, #1
 800658c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800658e:	7bfa      	ldrb	r2, [r7, #15]
 8006590:	6879      	ldr	r1, [r7, #4]
 8006592:	4613      	mov	r3, r2
 8006594:	00db      	lsls	r3, r3, #3
 8006596:	4413      	add	r3, r2
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	440b      	add	r3, r1
 800659c:	333c      	adds	r3, #60	; 0x3c
 800659e:	7bfa      	ldrb	r2, [r7, #15]
 80065a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80065a2:	7bfa      	ldrb	r2, [r7, #15]
 80065a4:	7bfb      	ldrb	r3, [r7, #15]
 80065a6:	b298      	uxth	r0, r3
 80065a8:	6879      	ldr	r1, [r7, #4]
 80065aa:	4613      	mov	r3, r2
 80065ac:	00db      	lsls	r3, r3, #3
 80065ae:	4413      	add	r3, r2
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	440b      	add	r3, r1
 80065b4:	3356      	adds	r3, #86	; 0x56
 80065b6:	4602      	mov	r2, r0
 80065b8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80065ba:	7bfa      	ldrb	r2, [r7, #15]
 80065bc:	6879      	ldr	r1, [r7, #4]
 80065be:	4613      	mov	r3, r2
 80065c0:	00db      	lsls	r3, r3, #3
 80065c2:	4413      	add	r3, r2
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	440b      	add	r3, r1
 80065c8:	3340      	adds	r3, #64	; 0x40
 80065ca:	2200      	movs	r2, #0
 80065cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80065ce:	7bfa      	ldrb	r2, [r7, #15]
 80065d0:	6879      	ldr	r1, [r7, #4]
 80065d2:	4613      	mov	r3, r2
 80065d4:	00db      	lsls	r3, r3, #3
 80065d6:	4413      	add	r3, r2
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	440b      	add	r3, r1
 80065dc:	3344      	adds	r3, #68	; 0x44
 80065de:	2200      	movs	r2, #0
 80065e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80065e2:	7bfa      	ldrb	r2, [r7, #15]
 80065e4:	6879      	ldr	r1, [r7, #4]
 80065e6:	4613      	mov	r3, r2
 80065e8:	00db      	lsls	r3, r3, #3
 80065ea:	4413      	add	r3, r2
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	440b      	add	r3, r1
 80065f0:	3348      	adds	r3, #72	; 0x48
 80065f2:	2200      	movs	r2, #0
 80065f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80065f6:	7bfa      	ldrb	r2, [r7, #15]
 80065f8:	6879      	ldr	r1, [r7, #4]
 80065fa:	4613      	mov	r3, r2
 80065fc:	00db      	lsls	r3, r3, #3
 80065fe:	4413      	add	r3, r2
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	440b      	add	r3, r1
 8006604:	334c      	adds	r3, #76	; 0x4c
 8006606:	2200      	movs	r2, #0
 8006608:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800660a:	7bfb      	ldrb	r3, [r7, #15]
 800660c:	3301      	adds	r3, #1
 800660e:	73fb      	strb	r3, [r7, #15]
 8006610:	7bfa      	ldrb	r2, [r7, #15]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	429a      	cmp	r2, r3
 8006618:	d3af      	bcc.n	800657a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800661a:	2300      	movs	r3, #0
 800661c:	73fb      	strb	r3, [r7, #15]
 800661e:	e044      	b.n	80066aa <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006620:	7bfa      	ldrb	r2, [r7, #15]
 8006622:	6879      	ldr	r1, [r7, #4]
 8006624:	4613      	mov	r3, r2
 8006626:	00db      	lsls	r3, r3, #3
 8006628:	4413      	add	r3, r2
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	440b      	add	r3, r1
 800662e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8006632:	2200      	movs	r2, #0
 8006634:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006636:	7bfa      	ldrb	r2, [r7, #15]
 8006638:	6879      	ldr	r1, [r7, #4]
 800663a:	4613      	mov	r3, r2
 800663c:	00db      	lsls	r3, r3, #3
 800663e:	4413      	add	r3, r2
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	440b      	add	r3, r1
 8006644:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8006648:	7bfa      	ldrb	r2, [r7, #15]
 800664a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800664c:	7bfa      	ldrb	r2, [r7, #15]
 800664e:	6879      	ldr	r1, [r7, #4]
 8006650:	4613      	mov	r3, r2
 8006652:	00db      	lsls	r3, r3, #3
 8006654:	4413      	add	r3, r2
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	440b      	add	r3, r1
 800665a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800665e:	2200      	movs	r2, #0
 8006660:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006662:	7bfa      	ldrb	r2, [r7, #15]
 8006664:	6879      	ldr	r1, [r7, #4]
 8006666:	4613      	mov	r3, r2
 8006668:	00db      	lsls	r3, r3, #3
 800666a:	4413      	add	r3, r2
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	440b      	add	r3, r1
 8006670:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8006674:	2200      	movs	r2, #0
 8006676:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006678:	7bfa      	ldrb	r2, [r7, #15]
 800667a:	6879      	ldr	r1, [r7, #4]
 800667c:	4613      	mov	r3, r2
 800667e:	00db      	lsls	r3, r3, #3
 8006680:	4413      	add	r3, r2
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	440b      	add	r3, r1
 8006686:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800668a:	2200      	movs	r2, #0
 800668c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800668e:	7bfa      	ldrb	r2, [r7, #15]
 8006690:	6879      	ldr	r1, [r7, #4]
 8006692:	4613      	mov	r3, r2
 8006694:	00db      	lsls	r3, r3, #3
 8006696:	4413      	add	r3, r2
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	440b      	add	r3, r1
 800669c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80066a0:	2200      	movs	r2, #0
 80066a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80066a4:	7bfb      	ldrb	r3, [r7, #15]
 80066a6:	3301      	adds	r3, #1
 80066a8:	73fb      	strb	r3, [r7, #15]
 80066aa:	7bfa      	ldrb	r2, [r7, #15]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d3b5      	bcc.n	8006620 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	603b      	str	r3, [r7, #0]
 80066ba:	687e      	ldr	r6, [r7, #4]
 80066bc:	466d      	mov	r5, sp
 80066be:	f106 0410 	add.w	r4, r6, #16
 80066c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80066c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80066c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80066c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80066ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80066ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80066d2:	1d33      	adds	r3, r6, #4
 80066d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80066d6:	6838      	ldr	r0, [r7, #0]
 80066d8:	f006 f8d6 	bl	800c888 <USB_DevInit>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d005      	beq.n	80066ee <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2202      	movs	r2, #2
 80066e6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	e014      	b.n	8006718 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2201      	movs	r2, #1
 80066fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006702:	2b01      	cmp	r3, #1
 8006704:	d102      	bne.n	800670c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 f80a 	bl	8006720 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4618      	mov	r0, r3
 8006712:	f006 fa94 	bl	800cc3e <USB_DevDisconnect>

  return HAL_OK;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	3714      	adds	r7, #20
 800671c:	46bd      	mov	sp, r7
 800671e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006720 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006720:	b480      	push	{r7}
 8006722:	b085      	sub	sp, #20
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2201      	movs	r2, #1
 8006732:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800674e:	4b05      	ldr	r3, [pc, #20]	; (8006764 <HAL_PCDEx_ActivateLPM+0x44>)
 8006750:	4313      	orrs	r3, r2
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006756:	2300      	movs	r3, #0
}
 8006758:	4618      	mov	r0, r3
 800675a:	3714      	adds	r7, #20
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr
 8006764:	10000003 	.word	0x10000003

08006768 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006770:	4b19      	ldr	r3, [pc, #100]	; (80067d8 <HAL_PWREx_ConfigSupply+0x70>)
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	f003 0304 	and.w	r3, r3, #4
 8006778:	2b04      	cmp	r3, #4
 800677a:	d00a      	beq.n	8006792 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800677c:	4b16      	ldr	r3, [pc, #88]	; (80067d8 <HAL_PWREx_ConfigSupply+0x70>)
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	f003 0307 	and.w	r3, r3, #7
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	429a      	cmp	r2, r3
 8006788:	d001      	beq.n	800678e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	e01f      	b.n	80067ce <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800678e:	2300      	movs	r3, #0
 8006790:	e01d      	b.n	80067ce <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006792:	4b11      	ldr	r3, [pc, #68]	; (80067d8 <HAL_PWREx_ConfigSupply+0x70>)
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	f023 0207 	bic.w	r2, r3, #7
 800679a:	490f      	ldr	r1, [pc, #60]	; (80067d8 <HAL_PWREx_ConfigSupply+0x70>)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	4313      	orrs	r3, r2
 80067a0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80067a2:	f7fb fb5f 	bl	8001e64 <HAL_GetTick>
 80067a6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80067a8:	e009      	b.n	80067be <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80067aa:	f7fb fb5b 	bl	8001e64 <HAL_GetTick>
 80067ae:	4602      	mov	r2, r0
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067b8:	d901      	bls.n	80067be <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e007      	b.n	80067ce <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80067be:	4b06      	ldr	r3, [pc, #24]	; (80067d8 <HAL_PWREx_ConfigSupply+0x70>)
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067ca:	d1ee      	bne.n	80067aa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3710      	adds	r7, #16
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	58024800 	.word	0x58024800

080067dc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80067dc:	b480      	push	{r7}
 80067de:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80067e0:	4b05      	ldr	r3, [pc, #20]	; (80067f8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	4a04      	ldr	r2, [pc, #16]	; (80067f8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80067e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80067ea:	60d3      	str	r3, [r2, #12]
}
 80067ec:	bf00      	nop
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr
 80067f6:	bf00      	nop
 80067f8:	58024800 	.word	0x58024800

080067fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b08c      	sub	sp, #48	; 0x30
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d102      	bne.n	8006810 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	f000 bc48 	b.w	80070a0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 0301 	and.w	r3, r3, #1
 8006818:	2b00      	cmp	r3, #0
 800681a:	f000 8088 	beq.w	800692e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800681e:	4b99      	ldr	r3, [pc, #612]	; (8006a84 <HAL_RCC_OscConfig+0x288>)
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006826:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006828:	4b96      	ldr	r3, [pc, #600]	; (8006a84 <HAL_RCC_OscConfig+0x288>)
 800682a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800682c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800682e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006830:	2b10      	cmp	r3, #16
 8006832:	d007      	beq.n	8006844 <HAL_RCC_OscConfig+0x48>
 8006834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006836:	2b18      	cmp	r3, #24
 8006838:	d111      	bne.n	800685e <HAL_RCC_OscConfig+0x62>
 800683a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800683c:	f003 0303 	and.w	r3, r3, #3
 8006840:	2b02      	cmp	r3, #2
 8006842:	d10c      	bne.n	800685e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006844:	4b8f      	ldr	r3, [pc, #572]	; (8006a84 <HAL_RCC_OscConfig+0x288>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800684c:	2b00      	cmp	r3, #0
 800684e:	d06d      	beq.n	800692c <HAL_RCC_OscConfig+0x130>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d169      	bne.n	800692c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	f000 bc21 	b.w	80070a0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006866:	d106      	bne.n	8006876 <HAL_RCC_OscConfig+0x7a>
 8006868:	4b86      	ldr	r3, [pc, #536]	; (8006a84 <HAL_RCC_OscConfig+0x288>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a85      	ldr	r2, [pc, #532]	; (8006a84 <HAL_RCC_OscConfig+0x288>)
 800686e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006872:	6013      	str	r3, [r2, #0]
 8006874:	e02e      	b.n	80068d4 <HAL_RCC_OscConfig+0xd8>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d10c      	bne.n	8006898 <HAL_RCC_OscConfig+0x9c>
 800687e:	4b81      	ldr	r3, [pc, #516]	; (8006a84 <HAL_RCC_OscConfig+0x288>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a80      	ldr	r2, [pc, #512]	; (8006a84 <HAL_RCC_OscConfig+0x288>)
 8006884:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006888:	6013      	str	r3, [r2, #0]
 800688a:	4b7e      	ldr	r3, [pc, #504]	; (8006a84 <HAL_RCC_OscConfig+0x288>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a7d      	ldr	r2, [pc, #500]	; (8006a84 <HAL_RCC_OscConfig+0x288>)
 8006890:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006894:	6013      	str	r3, [r2, #0]
 8006896:	e01d      	b.n	80068d4 <HAL_RCC_OscConfig+0xd8>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80068a0:	d10c      	bne.n	80068bc <HAL_RCC_OscConfig+0xc0>
 80068a2:	4b78      	ldr	r3, [pc, #480]	; (8006a84 <HAL_RCC_OscConfig+0x288>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a77      	ldr	r2, [pc, #476]	; (8006a84 <HAL_RCC_OscConfig+0x288>)
 80068a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80068ac:	6013      	str	r3, [r2, #0]
 80068ae:	4b75      	ldr	r3, [pc, #468]	; (8006a84 <HAL_RCC_OscConfig+0x288>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a74      	ldr	r2, [pc, #464]	; (8006a84 <HAL_RCC_OscConfig+0x288>)
 80068b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068b8:	6013      	str	r3, [r2, #0]
 80068ba:	e00b      	b.n	80068d4 <HAL_RCC_OscConfig+0xd8>
 80068bc:	4b71      	ldr	r3, [pc, #452]	; (8006a84 <HAL_RCC_OscConfig+0x288>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a70      	ldr	r2, [pc, #448]	; (8006a84 <HAL_RCC_OscConfig+0x288>)
 80068c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068c6:	6013      	str	r3, [r2, #0]
 80068c8:	4b6e      	ldr	r3, [pc, #440]	; (8006a84 <HAL_RCC_OscConfig+0x288>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a6d      	ldr	r2, [pc, #436]	; (8006a84 <HAL_RCC_OscConfig+0x288>)
 80068ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d013      	beq.n	8006904 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068dc:	f7fb fac2 	bl	8001e64 <HAL_GetTick>
 80068e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80068e2:	e008      	b.n	80068f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068e4:	f7fb fabe 	bl	8001e64 <HAL_GetTick>
 80068e8:	4602      	mov	r2, r0
 80068ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	2b64      	cmp	r3, #100	; 0x64
 80068f0:	d901      	bls.n	80068f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80068f2:	2303      	movs	r3, #3
 80068f4:	e3d4      	b.n	80070a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80068f6:	4b63      	ldr	r3, [pc, #396]	; (8006a84 <HAL_RCC_OscConfig+0x288>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d0f0      	beq.n	80068e4 <HAL_RCC_OscConfig+0xe8>
 8006902:	e014      	b.n	800692e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006904:	f7fb faae 	bl	8001e64 <HAL_GetTick>
 8006908:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800690a:	e008      	b.n	800691e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800690c:	f7fb faaa 	bl	8001e64 <HAL_GetTick>
 8006910:	4602      	mov	r2, r0
 8006912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006914:	1ad3      	subs	r3, r2, r3
 8006916:	2b64      	cmp	r3, #100	; 0x64
 8006918:	d901      	bls.n	800691e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800691a:	2303      	movs	r3, #3
 800691c:	e3c0      	b.n	80070a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800691e:	4b59      	ldr	r3, [pc, #356]	; (8006a84 <HAL_RCC_OscConfig+0x288>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006926:	2b00      	cmp	r3, #0
 8006928:	d1f0      	bne.n	800690c <HAL_RCC_OscConfig+0x110>
 800692a:	e000      	b.n	800692e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800692c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f003 0302 	and.w	r3, r3, #2
 8006936:	2b00      	cmp	r3, #0
 8006938:	f000 80ca 	beq.w	8006ad0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800693c:	4b51      	ldr	r3, [pc, #324]	; (8006a84 <HAL_RCC_OscConfig+0x288>)
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006944:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006946:	4b4f      	ldr	r3, [pc, #316]	; (8006a84 <HAL_RCC_OscConfig+0x288>)
 8006948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800694a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800694c:	6a3b      	ldr	r3, [r7, #32]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d007      	beq.n	8006962 <HAL_RCC_OscConfig+0x166>
 8006952:	6a3b      	ldr	r3, [r7, #32]
 8006954:	2b18      	cmp	r3, #24
 8006956:	d156      	bne.n	8006a06 <HAL_RCC_OscConfig+0x20a>
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	f003 0303 	and.w	r3, r3, #3
 800695e:	2b00      	cmp	r3, #0
 8006960:	d151      	bne.n	8006a06 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006962:	4b48      	ldr	r3, [pc, #288]	; (8006a84 <HAL_RCC_OscConfig+0x288>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 0304 	and.w	r3, r3, #4
 800696a:	2b00      	cmp	r3, #0
 800696c:	d005      	beq.n	800697a <HAL_RCC_OscConfig+0x17e>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d101      	bne.n	800697a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e392      	b.n	80070a0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800697a:	4b42      	ldr	r3, [pc, #264]	; (8006a84 <HAL_RCC_OscConfig+0x288>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f023 0219 	bic.w	r2, r3, #25
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	493f      	ldr	r1, [pc, #252]	; (8006a84 <HAL_RCC_OscConfig+0x288>)
 8006988:	4313      	orrs	r3, r2
 800698a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800698c:	f7fb fa6a 	bl	8001e64 <HAL_GetTick>
 8006990:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006992:	e008      	b.n	80069a6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006994:	f7fb fa66 	bl	8001e64 <HAL_GetTick>
 8006998:	4602      	mov	r2, r0
 800699a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	2b02      	cmp	r3, #2
 80069a0:	d901      	bls.n	80069a6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	e37c      	b.n	80070a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80069a6:	4b37      	ldr	r3, [pc, #220]	; (8006a84 <HAL_RCC_OscConfig+0x288>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 0304 	and.w	r3, r3, #4
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d0f0      	beq.n	8006994 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069b2:	f7fb fa87 	bl	8001ec4 <HAL_GetREVID>
 80069b6:	4603      	mov	r3, r0
 80069b8:	f241 0203 	movw	r2, #4099	; 0x1003
 80069bc:	4293      	cmp	r3, r2
 80069be:	d817      	bhi.n	80069f0 <HAL_RCC_OscConfig+0x1f4>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	2b40      	cmp	r3, #64	; 0x40
 80069c6:	d108      	bne.n	80069da <HAL_RCC_OscConfig+0x1de>
 80069c8:	4b2e      	ldr	r3, [pc, #184]	; (8006a84 <HAL_RCC_OscConfig+0x288>)
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80069d0:	4a2c      	ldr	r2, [pc, #176]	; (8006a84 <HAL_RCC_OscConfig+0x288>)
 80069d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069d6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80069d8:	e07a      	b.n	8006ad0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069da:	4b2a      	ldr	r3, [pc, #168]	; (8006a84 <HAL_RCC_OscConfig+0x288>)
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	031b      	lsls	r3, r3, #12
 80069e8:	4926      	ldr	r1, [pc, #152]	; (8006a84 <HAL_RCC_OscConfig+0x288>)
 80069ea:	4313      	orrs	r3, r2
 80069ec:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80069ee:	e06f      	b.n	8006ad0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069f0:	4b24      	ldr	r3, [pc, #144]	; (8006a84 <HAL_RCC_OscConfig+0x288>)
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	061b      	lsls	r3, r3, #24
 80069fe:	4921      	ldr	r1, [pc, #132]	; (8006a84 <HAL_RCC_OscConfig+0x288>)
 8006a00:	4313      	orrs	r3, r2
 8006a02:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a04:	e064      	b.n	8006ad0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d047      	beq.n	8006a9e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006a0e:	4b1d      	ldr	r3, [pc, #116]	; (8006a84 <HAL_RCC_OscConfig+0x288>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f023 0219 	bic.w	r2, r3, #25
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	491a      	ldr	r1, [pc, #104]	; (8006a84 <HAL_RCC_OscConfig+0x288>)
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a20:	f7fb fa20 	bl	8001e64 <HAL_GetTick>
 8006a24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a26:	e008      	b.n	8006a3a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a28:	f7fb fa1c 	bl	8001e64 <HAL_GetTick>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a30:	1ad3      	subs	r3, r2, r3
 8006a32:	2b02      	cmp	r3, #2
 8006a34:	d901      	bls.n	8006a3a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006a36:	2303      	movs	r3, #3
 8006a38:	e332      	b.n	80070a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a3a:	4b12      	ldr	r3, [pc, #72]	; (8006a84 <HAL_RCC_OscConfig+0x288>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 0304 	and.w	r3, r3, #4
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d0f0      	beq.n	8006a28 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a46:	f7fb fa3d 	bl	8001ec4 <HAL_GetREVID>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d819      	bhi.n	8006a88 <HAL_RCC_OscConfig+0x28c>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	691b      	ldr	r3, [r3, #16]
 8006a58:	2b40      	cmp	r3, #64	; 0x40
 8006a5a:	d108      	bne.n	8006a6e <HAL_RCC_OscConfig+0x272>
 8006a5c:	4b09      	ldr	r3, [pc, #36]	; (8006a84 <HAL_RCC_OscConfig+0x288>)
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006a64:	4a07      	ldr	r2, [pc, #28]	; (8006a84 <HAL_RCC_OscConfig+0x288>)
 8006a66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a6a:	6053      	str	r3, [r2, #4]
 8006a6c:	e030      	b.n	8006ad0 <HAL_RCC_OscConfig+0x2d4>
 8006a6e:	4b05      	ldr	r3, [pc, #20]	; (8006a84 <HAL_RCC_OscConfig+0x288>)
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	691b      	ldr	r3, [r3, #16]
 8006a7a:	031b      	lsls	r3, r3, #12
 8006a7c:	4901      	ldr	r1, [pc, #4]	; (8006a84 <HAL_RCC_OscConfig+0x288>)
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	604b      	str	r3, [r1, #4]
 8006a82:	e025      	b.n	8006ad0 <HAL_RCC_OscConfig+0x2d4>
 8006a84:	58024400 	.word	0x58024400
 8006a88:	4b9a      	ldr	r3, [pc, #616]	; (8006cf4 <HAL_RCC_OscConfig+0x4f8>)
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	691b      	ldr	r3, [r3, #16]
 8006a94:	061b      	lsls	r3, r3, #24
 8006a96:	4997      	ldr	r1, [pc, #604]	; (8006cf4 <HAL_RCC_OscConfig+0x4f8>)
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	604b      	str	r3, [r1, #4]
 8006a9c:	e018      	b.n	8006ad0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a9e:	4b95      	ldr	r3, [pc, #596]	; (8006cf4 <HAL_RCC_OscConfig+0x4f8>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a94      	ldr	r2, [pc, #592]	; (8006cf4 <HAL_RCC_OscConfig+0x4f8>)
 8006aa4:	f023 0301 	bic.w	r3, r3, #1
 8006aa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aaa:	f7fb f9db 	bl	8001e64 <HAL_GetTick>
 8006aae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006ab0:	e008      	b.n	8006ac4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ab2:	f7fb f9d7 	bl	8001e64 <HAL_GetTick>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aba:	1ad3      	subs	r3, r2, r3
 8006abc:	2b02      	cmp	r3, #2
 8006abe:	d901      	bls.n	8006ac4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	e2ed      	b.n	80070a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006ac4:	4b8b      	ldr	r3, [pc, #556]	; (8006cf4 <HAL_RCC_OscConfig+0x4f8>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 0304 	and.w	r3, r3, #4
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d1f0      	bne.n	8006ab2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 0310 	and.w	r3, r3, #16
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f000 80a9 	beq.w	8006c30 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ade:	4b85      	ldr	r3, [pc, #532]	; (8006cf4 <HAL_RCC_OscConfig+0x4f8>)
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ae6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006ae8:	4b82      	ldr	r3, [pc, #520]	; (8006cf4 <HAL_RCC_OscConfig+0x4f8>)
 8006aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aec:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	2b08      	cmp	r3, #8
 8006af2:	d007      	beq.n	8006b04 <HAL_RCC_OscConfig+0x308>
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	2b18      	cmp	r3, #24
 8006af8:	d13a      	bne.n	8006b70 <HAL_RCC_OscConfig+0x374>
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	f003 0303 	and.w	r3, r3, #3
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d135      	bne.n	8006b70 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006b04:	4b7b      	ldr	r3, [pc, #492]	; (8006cf4 <HAL_RCC_OscConfig+0x4f8>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d005      	beq.n	8006b1c <HAL_RCC_OscConfig+0x320>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	69db      	ldr	r3, [r3, #28]
 8006b14:	2b80      	cmp	r3, #128	; 0x80
 8006b16:	d001      	beq.n	8006b1c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e2c1      	b.n	80070a0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006b1c:	f7fb f9d2 	bl	8001ec4 <HAL_GetREVID>
 8006b20:	4603      	mov	r3, r0
 8006b22:	f241 0203 	movw	r2, #4099	; 0x1003
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d817      	bhi.n	8006b5a <HAL_RCC_OscConfig+0x35e>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a1b      	ldr	r3, [r3, #32]
 8006b2e:	2b20      	cmp	r3, #32
 8006b30:	d108      	bne.n	8006b44 <HAL_RCC_OscConfig+0x348>
 8006b32:	4b70      	ldr	r3, [pc, #448]	; (8006cf4 <HAL_RCC_OscConfig+0x4f8>)
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006b3a:	4a6e      	ldr	r2, [pc, #440]	; (8006cf4 <HAL_RCC_OscConfig+0x4f8>)
 8006b3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b40:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006b42:	e075      	b.n	8006c30 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006b44:	4b6b      	ldr	r3, [pc, #428]	; (8006cf4 <HAL_RCC_OscConfig+0x4f8>)
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6a1b      	ldr	r3, [r3, #32]
 8006b50:	069b      	lsls	r3, r3, #26
 8006b52:	4968      	ldr	r1, [pc, #416]	; (8006cf4 <HAL_RCC_OscConfig+0x4f8>)
 8006b54:	4313      	orrs	r3, r2
 8006b56:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006b58:	e06a      	b.n	8006c30 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006b5a:	4b66      	ldr	r3, [pc, #408]	; (8006cf4 <HAL_RCC_OscConfig+0x4f8>)
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a1b      	ldr	r3, [r3, #32]
 8006b66:	061b      	lsls	r3, r3, #24
 8006b68:	4962      	ldr	r1, [pc, #392]	; (8006cf4 <HAL_RCC_OscConfig+0x4f8>)
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006b6e:	e05f      	b.n	8006c30 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	69db      	ldr	r3, [r3, #28]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d042      	beq.n	8006bfe <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006b78:	4b5e      	ldr	r3, [pc, #376]	; (8006cf4 <HAL_RCC_OscConfig+0x4f8>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a5d      	ldr	r2, [pc, #372]	; (8006cf4 <HAL_RCC_OscConfig+0x4f8>)
 8006b7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b84:	f7fb f96e 	bl	8001e64 <HAL_GetTick>
 8006b88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006b8a:	e008      	b.n	8006b9e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006b8c:	f7fb f96a 	bl	8001e64 <HAL_GetTick>
 8006b90:	4602      	mov	r2, r0
 8006b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	d901      	bls.n	8006b9e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	e280      	b.n	80070a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006b9e:	4b55      	ldr	r3, [pc, #340]	; (8006cf4 <HAL_RCC_OscConfig+0x4f8>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d0f0      	beq.n	8006b8c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006baa:	f7fb f98b 	bl	8001ec4 <HAL_GetREVID>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	f241 0203 	movw	r2, #4099	; 0x1003
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d817      	bhi.n	8006be8 <HAL_RCC_OscConfig+0x3ec>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6a1b      	ldr	r3, [r3, #32]
 8006bbc:	2b20      	cmp	r3, #32
 8006bbe:	d108      	bne.n	8006bd2 <HAL_RCC_OscConfig+0x3d6>
 8006bc0:	4b4c      	ldr	r3, [pc, #304]	; (8006cf4 <HAL_RCC_OscConfig+0x4f8>)
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006bc8:	4a4a      	ldr	r2, [pc, #296]	; (8006cf4 <HAL_RCC_OscConfig+0x4f8>)
 8006bca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006bce:	6053      	str	r3, [r2, #4]
 8006bd0:	e02e      	b.n	8006c30 <HAL_RCC_OscConfig+0x434>
 8006bd2:	4b48      	ldr	r3, [pc, #288]	; (8006cf4 <HAL_RCC_OscConfig+0x4f8>)
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a1b      	ldr	r3, [r3, #32]
 8006bde:	069b      	lsls	r3, r3, #26
 8006be0:	4944      	ldr	r1, [pc, #272]	; (8006cf4 <HAL_RCC_OscConfig+0x4f8>)
 8006be2:	4313      	orrs	r3, r2
 8006be4:	604b      	str	r3, [r1, #4]
 8006be6:	e023      	b.n	8006c30 <HAL_RCC_OscConfig+0x434>
 8006be8:	4b42      	ldr	r3, [pc, #264]	; (8006cf4 <HAL_RCC_OscConfig+0x4f8>)
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6a1b      	ldr	r3, [r3, #32]
 8006bf4:	061b      	lsls	r3, r3, #24
 8006bf6:	493f      	ldr	r1, [pc, #252]	; (8006cf4 <HAL_RCC_OscConfig+0x4f8>)
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	60cb      	str	r3, [r1, #12]
 8006bfc:	e018      	b.n	8006c30 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006bfe:	4b3d      	ldr	r3, [pc, #244]	; (8006cf4 <HAL_RCC_OscConfig+0x4f8>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a3c      	ldr	r2, [pc, #240]	; (8006cf4 <HAL_RCC_OscConfig+0x4f8>)
 8006c04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c0a:	f7fb f92b 	bl	8001e64 <HAL_GetTick>
 8006c0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006c10:	e008      	b.n	8006c24 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006c12:	f7fb f927 	bl	8001e64 <HAL_GetTick>
 8006c16:	4602      	mov	r2, r0
 8006c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1a:	1ad3      	subs	r3, r2, r3
 8006c1c:	2b02      	cmp	r3, #2
 8006c1e:	d901      	bls.n	8006c24 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006c20:	2303      	movs	r3, #3
 8006c22:	e23d      	b.n	80070a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006c24:	4b33      	ldr	r3, [pc, #204]	; (8006cf4 <HAL_RCC_OscConfig+0x4f8>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d1f0      	bne.n	8006c12 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 0308 	and.w	r3, r3, #8
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d036      	beq.n	8006caa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	695b      	ldr	r3, [r3, #20]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d019      	beq.n	8006c78 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c44:	4b2b      	ldr	r3, [pc, #172]	; (8006cf4 <HAL_RCC_OscConfig+0x4f8>)
 8006c46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c48:	4a2a      	ldr	r2, [pc, #168]	; (8006cf4 <HAL_RCC_OscConfig+0x4f8>)
 8006c4a:	f043 0301 	orr.w	r3, r3, #1
 8006c4e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c50:	f7fb f908 	bl	8001e64 <HAL_GetTick>
 8006c54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006c56:	e008      	b.n	8006c6a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c58:	f7fb f904 	bl	8001e64 <HAL_GetTick>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d901      	bls.n	8006c6a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006c66:	2303      	movs	r3, #3
 8006c68:	e21a      	b.n	80070a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006c6a:	4b22      	ldr	r3, [pc, #136]	; (8006cf4 <HAL_RCC_OscConfig+0x4f8>)
 8006c6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c6e:	f003 0302 	and.w	r3, r3, #2
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d0f0      	beq.n	8006c58 <HAL_RCC_OscConfig+0x45c>
 8006c76:	e018      	b.n	8006caa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c78:	4b1e      	ldr	r3, [pc, #120]	; (8006cf4 <HAL_RCC_OscConfig+0x4f8>)
 8006c7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c7c:	4a1d      	ldr	r2, [pc, #116]	; (8006cf4 <HAL_RCC_OscConfig+0x4f8>)
 8006c7e:	f023 0301 	bic.w	r3, r3, #1
 8006c82:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c84:	f7fb f8ee 	bl	8001e64 <HAL_GetTick>
 8006c88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006c8a:	e008      	b.n	8006c9e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c8c:	f7fb f8ea 	bl	8001e64 <HAL_GetTick>
 8006c90:	4602      	mov	r2, r0
 8006c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c94:	1ad3      	subs	r3, r2, r3
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d901      	bls.n	8006c9e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	e200      	b.n	80070a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006c9e:	4b15      	ldr	r3, [pc, #84]	; (8006cf4 <HAL_RCC_OscConfig+0x4f8>)
 8006ca0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ca2:	f003 0302 	and.w	r3, r3, #2
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d1f0      	bne.n	8006c8c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f003 0320 	and.w	r3, r3, #32
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d039      	beq.n	8006d2a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	699b      	ldr	r3, [r3, #24]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d01c      	beq.n	8006cf8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006cbe:	4b0d      	ldr	r3, [pc, #52]	; (8006cf4 <HAL_RCC_OscConfig+0x4f8>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a0c      	ldr	r2, [pc, #48]	; (8006cf4 <HAL_RCC_OscConfig+0x4f8>)
 8006cc4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006cc8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006cca:	f7fb f8cb 	bl	8001e64 <HAL_GetTick>
 8006cce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006cd0:	e008      	b.n	8006ce4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006cd2:	f7fb f8c7 	bl	8001e64 <HAL_GetTick>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cda:	1ad3      	subs	r3, r2, r3
 8006cdc:	2b02      	cmp	r3, #2
 8006cde:	d901      	bls.n	8006ce4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006ce0:	2303      	movs	r3, #3
 8006ce2:	e1dd      	b.n	80070a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006ce4:	4b03      	ldr	r3, [pc, #12]	; (8006cf4 <HAL_RCC_OscConfig+0x4f8>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d0f0      	beq.n	8006cd2 <HAL_RCC_OscConfig+0x4d6>
 8006cf0:	e01b      	b.n	8006d2a <HAL_RCC_OscConfig+0x52e>
 8006cf2:	bf00      	nop
 8006cf4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006cf8:	4b9b      	ldr	r3, [pc, #620]	; (8006f68 <HAL_RCC_OscConfig+0x76c>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a9a      	ldr	r2, [pc, #616]	; (8006f68 <HAL_RCC_OscConfig+0x76c>)
 8006cfe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d02:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006d04:	f7fb f8ae 	bl	8001e64 <HAL_GetTick>
 8006d08:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006d0a:	e008      	b.n	8006d1e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d0c:	f7fb f8aa 	bl	8001e64 <HAL_GetTick>
 8006d10:	4602      	mov	r2, r0
 8006d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d14:	1ad3      	subs	r3, r2, r3
 8006d16:	2b02      	cmp	r3, #2
 8006d18:	d901      	bls.n	8006d1e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	e1c0      	b.n	80070a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006d1e:	4b92      	ldr	r3, [pc, #584]	; (8006f68 <HAL_RCC_OscConfig+0x76c>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d1f0      	bne.n	8006d0c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 0304 	and.w	r3, r3, #4
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	f000 8081 	beq.w	8006e3a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006d38:	4b8c      	ldr	r3, [pc, #560]	; (8006f6c <HAL_RCC_OscConfig+0x770>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a8b      	ldr	r2, [pc, #556]	; (8006f6c <HAL_RCC_OscConfig+0x770>)
 8006d3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d42:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d44:	f7fb f88e 	bl	8001e64 <HAL_GetTick>
 8006d48:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d4a:	e008      	b.n	8006d5e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d4c:	f7fb f88a 	bl	8001e64 <HAL_GetTick>
 8006d50:	4602      	mov	r2, r0
 8006d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	2b64      	cmp	r3, #100	; 0x64
 8006d58:	d901      	bls.n	8006d5e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006d5a:	2303      	movs	r3, #3
 8006d5c:	e1a0      	b.n	80070a0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d5e:	4b83      	ldr	r3, [pc, #524]	; (8006f6c <HAL_RCC_OscConfig+0x770>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d0f0      	beq.n	8006d4c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d106      	bne.n	8006d80 <HAL_RCC_OscConfig+0x584>
 8006d72:	4b7d      	ldr	r3, [pc, #500]	; (8006f68 <HAL_RCC_OscConfig+0x76c>)
 8006d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d76:	4a7c      	ldr	r2, [pc, #496]	; (8006f68 <HAL_RCC_OscConfig+0x76c>)
 8006d78:	f043 0301 	orr.w	r3, r3, #1
 8006d7c:	6713      	str	r3, [r2, #112]	; 0x70
 8006d7e:	e02d      	b.n	8006ddc <HAL_RCC_OscConfig+0x5e0>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d10c      	bne.n	8006da2 <HAL_RCC_OscConfig+0x5a6>
 8006d88:	4b77      	ldr	r3, [pc, #476]	; (8006f68 <HAL_RCC_OscConfig+0x76c>)
 8006d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d8c:	4a76      	ldr	r2, [pc, #472]	; (8006f68 <HAL_RCC_OscConfig+0x76c>)
 8006d8e:	f023 0301 	bic.w	r3, r3, #1
 8006d92:	6713      	str	r3, [r2, #112]	; 0x70
 8006d94:	4b74      	ldr	r3, [pc, #464]	; (8006f68 <HAL_RCC_OscConfig+0x76c>)
 8006d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d98:	4a73      	ldr	r2, [pc, #460]	; (8006f68 <HAL_RCC_OscConfig+0x76c>)
 8006d9a:	f023 0304 	bic.w	r3, r3, #4
 8006d9e:	6713      	str	r3, [r2, #112]	; 0x70
 8006da0:	e01c      	b.n	8006ddc <HAL_RCC_OscConfig+0x5e0>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	2b05      	cmp	r3, #5
 8006da8:	d10c      	bne.n	8006dc4 <HAL_RCC_OscConfig+0x5c8>
 8006daa:	4b6f      	ldr	r3, [pc, #444]	; (8006f68 <HAL_RCC_OscConfig+0x76c>)
 8006dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dae:	4a6e      	ldr	r2, [pc, #440]	; (8006f68 <HAL_RCC_OscConfig+0x76c>)
 8006db0:	f043 0304 	orr.w	r3, r3, #4
 8006db4:	6713      	str	r3, [r2, #112]	; 0x70
 8006db6:	4b6c      	ldr	r3, [pc, #432]	; (8006f68 <HAL_RCC_OscConfig+0x76c>)
 8006db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dba:	4a6b      	ldr	r2, [pc, #428]	; (8006f68 <HAL_RCC_OscConfig+0x76c>)
 8006dbc:	f043 0301 	orr.w	r3, r3, #1
 8006dc0:	6713      	str	r3, [r2, #112]	; 0x70
 8006dc2:	e00b      	b.n	8006ddc <HAL_RCC_OscConfig+0x5e0>
 8006dc4:	4b68      	ldr	r3, [pc, #416]	; (8006f68 <HAL_RCC_OscConfig+0x76c>)
 8006dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dc8:	4a67      	ldr	r2, [pc, #412]	; (8006f68 <HAL_RCC_OscConfig+0x76c>)
 8006dca:	f023 0301 	bic.w	r3, r3, #1
 8006dce:	6713      	str	r3, [r2, #112]	; 0x70
 8006dd0:	4b65      	ldr	r3, [pc, #404]	; (8006f68 <HAL_RCC_OscConfig+0x76c>)
 8006dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dd4:	4a64      	ldr	r2, [pc, #400]	; (8006f68 <HAL_RCC_OscConfig+0x76c>)
 8006dd6:	f023 0304 	bic.w	r3, r3, #4
 8006dda:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d015      	beq.n	8006e10 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006de4:	f7fb f83e 	bl	8001e64 <HAL_GetTick>
 8006de8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006dea:	e00a      	b.n	8006e02 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dec:	f7fb f83a 	bl	8001e64 <HAL_GetTick>
 8006df0:	4602      	mov	r2, r0
 8006df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d901      	bls.n	8006e02 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006dfe:	2303      	movs	r3, #3
 8006e00:	e14e      	b.n	80070a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006e02:	4b59      	ldr	r3, [pc, #356]	; (8006f68 <HAL_RCC_OscConfig+0x76c>)
 8006e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e06:	f003 0302 	and.w	r3, r3, #2
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d0ee      	beq.n	8006dec <HAL_RCC_OscConfig+0x5f0>
 8006e0e:	e014      	b.n	8006e3a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e10:	f7fb f828 	bl	8001e64 <HAL_GetTick>
 8006e14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006e16:	e00a      	b.n	8006e2e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e18:	f7fb f824 	bl	8001e64 <HAL_GetTick>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e20:	1ad3      	subs	r3, r2, r3
 8006e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d901      	bls.n	8006e2e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	e138      	b.n	80070a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006e2e:	4b4e      	ldr	r3, [pc, #312]	; (8006f68 <HAL_RCC_OscConfig+0x76c>)
 8006e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e32:	f003 0302 	and.w	r3, r3, #2
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d1ee      	bne.n	8006e18 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	f000 812d 	beq.w	800709e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006e44:	4b48      	ldr	r3, [pc, #288]	; (8006f68 <HAL_RCC_OscConfig+0x76c>)
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e4c:	2b18      	cmp	r3, #24
 8006e4e:	f000 80bd 	beq.w	8006fcc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e56:	2b02      	cmp	r3, #2
 8006e58:	f040 809e 	bne.w	8006f98 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e5c:	4b42      	ldr	r3, [pc, #264]	; (8006f68 <HAL_RCC_OscConfig+0x76c>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a41      	ldr	r2, [pc, #260]	; (8006f68 <HAL_RCC_OscConfig+0x76c>)
 8006e62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e68:	f7fa fffc 	bl	8001e64 <HAL_GetTick>
 8006e6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e6e:	e008      	b.n	8006e82 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e70:	f7fa fff8 	bl	8001e64 <HAL_GetTick>
 8006e74:	4602      	mov	r2, r0
 8006e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e78:	1ad3      	subs	r3, r2, r3
 8006e7a:	2b02      	cmp	r3, #2
 8006e7c:	d901      	bls.n	8006e82 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	e10e      	b.n	80070a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e82:	4b39      	ldr	r3, [pc, #228]	; (8006f68 <HAL_RCC_OscConfig+0x76c>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1f0      	bne.n	8006e70 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e8e:	4b36      	ldr	r3, [pc, #216]	; (8006f68 <HAL_RCC_OscConfig+0x76c>)
 8006e90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e92:	4b37      	ldr	r3, [pc, #220]	; (8006f70 <HAL_RCC_OscConfig+0x774>)
 8006e94:	4013      	ands	r3, r2
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006e9e:	0112      	lsls	r2, r2, #4
 8006ea0:	430a      	orrs	r2, r1
 8006ea2:	4931      	ldr	r1, [pc, #196]	; (8006f68 <HAL_RCC_OscConfig+0x76c>)
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	628b      	str	r3, [r1, #40]	; 0x28
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eac:	3b01      	subs	r3, #1
 8006eae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	025b      	lsls	r3, r3, #9
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	431a      	orrs	r2, r3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec2:	3b01      	subs	r3, #1
 8006ec4:	041b      	lsls	r3, r3, #16
 8006ec6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006eca:	431a      	orrs	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ed0:	3b01      	subs	r3, #1
 8006ed2:	061b      	lsls	r3, r3, #24
 8006ed4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006ed8:	4923      	ldr	r1, [pc, #140]	; (8006f68 <HAL_RCC_OscConfig+0x76c>)
 8006eda:	4313      	orrs	r3, r2
 8006edc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006ede:	4b22      	ldr	r3, [pc, #136]	; (8006f68 <HAL_RCC_OscConfig+0x76c>)
 8006ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee2:	4a21      	ldr	r2, [pc, #132]	; (8006f68 <HAL_RCC_OscConfig+0x76c>)
 8006ee4:	f023 0301 	bic.w	r3, r3, #1
 8006ee8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006eea:	4b1f      	ldr	r3, [pc, #124]	; (8006f68 <HAL_RCC_OscConfig+0x76c>)
 8006eec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006eee:	4b21      	ldr	r3, [pc, #132]	; (8006f74 <HAL_RCC_OscConfig+0x778>)
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006ef6:	00d2      	lsls	r2, r2, #3
 8006ef8:	491b      	ldr	r1, [pc, #108]	; (8006f68 <HAL_RCC_OscConfig+0x76c>)
 8006efa:	4313      	orrs	r3, r2
 8006efc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006efe:	4b1a      	ldr	r3, [pc, #104]	; (8006f68 <HAL_RCC_OscConfig+0x76c>)
 8006f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f02:	f023 020c 	bic.w	r2, r3, #12
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f0a:	4917      	ldr	r1, [pc, #92]	; (8006f68 <HAL_RCC_OscConfig+0x76c>)
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006f10:	4b15      	ldr	r3, [pc, #84]	; (8006f68 <HAL_RCC_OscConfig+0x76c>)
 8006f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f14:	f023 0202 	bic.w	r2, r3, #2
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f1c:	4912      	ldr	r1, [pc, #72]	; (8006f68 <HAL_RCC_OscConfig+0x76c>)
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006f22:	4b11      	ldr	r3, [pc, #68]	; (8006f68 <HAL_RCC_OscConfig+0x76c>)
 8006f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f26:	4a10      	ldr	r2, [pc, #64]	; (8006f68 <HAL_RCC_OscConfig+0x76c>)
 8006f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f2c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f2e:	4b0e      	ldr	r3, [pc, #56]	; (8006f68 <HAL_RCC_OscConfig+0x76c>)
 8006f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f32:	4a0d      	ldr	r2, [pc, #52]	; (8006f68 <HAL_RCC_OscConfig+0x76c>)
 8006f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f38:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006f3a:	4b0b      	ldr	r3, [pc, #44]	; (8006f68 <HAL_RCC_OscConfig+0x76c>)
 8006f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f3e:	4a0a      	ldr	r2, [pc, #40]	; (8006f68 <HAL_RCC_OscConfig+0x76c>)
 8006f40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f44:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006f46:	4b08      	ldr	r3, [pc, #32]	; (8006f68 <HAL_RCC_OscConfig+0x76c>)
 8006f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f4a:	4a07      	ldr	r2, [pc, #28]	; (8006f68 <HAL_RCC_OscConfig+0x76c>)
 8006f4c:	f043 0301 	orr.w	r3, r3, #1
 8006f50:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f52:	4b05      	ldr	r3, [pc, #20]	; (8006f68 <HAL_RCC_OscConfig+0x76c>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a04      	ldr	r2, [pc, #16]	; (8006f68 <HAL_RCC_OscConfig+0x76c>)
 8006f58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f5e:	f7fa ff81 	bl	8001e64 <HAL_GetTick>
 8006f62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006f64:	e011      	b.n	8006f8a <HAL_RCC_OscConfig+0x78e>
 8006f66:	bf00      	nop
 8006f68:	58024400 	.word	0x58024400
 8006f6c:	58024800 	.word	0x58024800
 8006f70:	fffffc0c 	.word	0xfffffc0c
 8006f74:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f78:	f7fa ff74 	bl	8001e64 <HAL_GetTick>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f80:	1ad3      	subs	r3, r2, r3
 8006f82:	2b02      	cmp	r3, #2
 8006f84:	d901      	bls.n	8006f8a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006f86:	2303      	movs	r3, #3
 8006f88:	e08a      	b.n	80070a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006f8a:	4b47      	ldr	r3, [pc, #284]	; (80070a8 <HAL_RCC_OscConfig+0x8ac>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d0f0      	beq.n	8006f78 <HAL_RCC_OscConfig+0x77c>
 8006f96:	e082      	b.n	800709e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f98:	4b43      	ldr	r3, [pc, #268]	; (80070a8 <HAL_RCC_OscConfig+0x8ac>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a42      	ldr	r2, [pc, #264]	; (80070a8 <HAL_RCC_OscConfig+0x8ac>)
 8006f9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006fa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fa4:	f7fa ff5e 	bl	8001e64 <HAL_GetTick>
 8006fa8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006faa:	e008      	b.n	8006fbe <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fac:	f7fa ff5a 	bl	8001e64 <HAL_GetTick>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb4:	1ad3      	subs	r3, r2, r3
 8006fb6:	2b02      	cmp	r3, #2
 8006fb8:	d901      	bls.n	8006fbe <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006fba:	2303      	movs	r3, #3
 8006fbc:	e070      	b.n	80070a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006fbe:	4b3a      	ldr	r3, [pc, #232]	; (80070a8 <HAL_RCC_OscConfig+0x8ac>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d1f0      	bne.n	8006fac <HAL_RCC_OscConfig+0x7b0>
 8006fca:	e068      	b.n	800709e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006fcc:	4b36      	ldr	r3, [pc, #216]	; (80070a8 <HAL_RCC_OscConfig+0x8ac>)
 8006fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006fd2:	4b35      	ldr	r3, [pc, #212]	; (80070a8 <HAL_RCC_OscConfig+0x8ac>)
 8006fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d031      	beq.n	8007044 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	f003 0203 	and.w	r2, r3, #3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d12a      	bne.n	8007044 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	091b      	lsrs	r3, r3, #4
 8006ff2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d122      	bne.n	8007044 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007008:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800700a:	429a      	cmp	r2, r3
 800700c:	d11a      	bne.n	8007044 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	0a5b      	lsrs	r3, r3, #9
 8007012:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800701a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800701c:	429a      	cmp	r2, r3
 800701e:	d111      	bne.n	8007044 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	0c1b      	lsrs	r3, r3, #16
 8007024:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800702c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800702e:	429a      	cmp	r2, r3
 8007030:	d108      	bne.n	8007044 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	0e1b      	lsrs	r3, r3, #24
 8007036:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800703e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007040:	429a      	cmp	r2, r3
 8007042:	d001      	beq.n	8007048 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	e02b      	b.n	80070a0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007048:	4b17      	ldr	r3, [pc, #92]	; (80070a8 <HAL_RCC_OscConfig+0x8ac>)
 800704a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800704c:	08db      	lsrs	r3, r3, #3
 800704e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007052:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007058:	693a      	ldr	r2, [r7, #16]
 800705a:	429a      	cmp	r2, r3
 800705c:	d01f      	beq.n	800709e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800705e:	4b12      	ldr	r3, [pc, #72]	; (80070a8 <HAL_RCC_OscConfig+0x8ac>)
 8007060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007062:	4a11      	ldr	r2, [pc, #68]	; (80070a8 <HAL_RCC_OscConfig+0x8ac>)
 8007064:	f023 0301 	bic.w	r3, r3, #1
 8007068:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800706a:	f7fa fefb 	bl	8001e64 <HAL_GetTick>
 800706e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007070:	bf00      	nop
 8007072:	f7fa fef7 	bl	8001e64 <HAL_GetTick>
 8007076:	4602      	mov	r2, r0
 8007078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707a:	4293      	cmp	r3, r2
 800707c:	d0f9      	beq.n	8007072 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800707e:	4b0a      	ldr	r3, [pc, #40]	; (80070a8 <HAL_RCC_OscConfig+0x8ac>)
 8007080:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007082:	4b0a      	ldr	r3, [pc, #40]	; (80070ac <HAL_RCC_OscConfig+0x8b0>)
 8007084:	4013      	ands	r3, r2
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800708a:	00d2      	lsls	r2, r2, #3
 800708c:	4906      	ldr	r1, [pc, #24]	; (80070a8 <HAL_RCC_OscConfig+0x8ac>)
 800708e:	4313      	orrs	r3, r2
 8007090:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007092:	4b05      	ldr	r3, [pc, #20]	; (80070a8 <HAL_RCC_OscConfig+0x8ac>)
 8007094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007096:	4a04      	ldr	r2, [pc, #16]	; (80070a8 <HAL_RCC_OscConfig+0x8ac>)
 8007098:	f043 0301 	orr.w	r3, r3, #1
 800709c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800709e:	2300      	movs	r3, #0
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3730      	adds	r7, #48	; 0x30
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	58024400 	.word	0x58024400
 80070ac:	ffff0007 	.word	0xffff0007

080070b0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b086      	sub	sp, #24
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d101      	bne.n	80070c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80070c0:	2301      	movs	r3, #1
 80070c2:	e19c      	b.n	80073fe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80070c4:	4b8a      	ldr	r3, [pc, #552]	; (80072f0 <HAL_RCC_ClockConfig+0x240>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f003 030f 	and.w	r3, r3, #15
 80070cc:	683a      	ldr	r2, [r7, #0]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d910      	bls.n	80070f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070d2:	4b87      	ldr	r3, [pc, #540]	; (80072f0 <HAL_RCC_ClockConfig+0x240>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f023 020f 	bic.w	r2, r3, #15
 80070da:	4985      	ldr	r1, [pc, #532]	; (80072f0 <HAL_RCC_ClockConfig+0x240>)
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	4313      	orrs	r3, r2
 80070e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070e2:	4b83      	ldr	r3, [pc, #524]	; (80072f0 <HAL_RCC_ClockConfig+0x240>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 030f 	and.w	r3, r3, #15
 80070ea:	683a      	ldr	r2, [r7, #0]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d001      	beq.n	80070f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	e184      	b.n	80073fe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f003 0304 	and.w	r3, r3, #4
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d010      	beq.n	8007122 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	691a      	ldr	r2, [r3, #16]
 8007104:	4b7b      	ldr	r3, [pc, #492]	; (80072f4 <HAL_RCC_ClockConfig+0x244>)
 8007106:	699b      	ldr	r3, [r3, #24]
 8007108:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800710c:	429a      	cmp	r2, r3
 800710e:	d908      	bls.n	8007122 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007110:	4b78      	ldr	r3, [pc, #480]	; (80072f4 <HAL_RCC_ClockConfig+0x244>)
 8007112:	699b      	ldr	r3, [r3, #24]
 8007114:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	691b      	ldr	r3, [r3, #16]
 800711c:	4975      	ldr	r1, [pc, #468]	; (80072f4 <HAL_RCC_ClockConfig+0x244>)
 800711e:	4313      	orrs	r3, r2
 8007120:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f003 0308 	and.w	r3, r3, #8
 800712a:	2b00      	cmp	r3, #0
 800712c:	d010      	beq.n	8007150 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	695a      	ldr	r2, [r3, #20]
 8007132:	4b70      	ldr	r3, [pc, #448]	; (80072f4 <HAL_RCC_ClockConfig+0x244>)
 8007134:	69db      	ldr	r3, [r3, #28]
 8007136:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800713a:	429a      	cmp	r2, r3
 800713c:	d908      	bls.n	8007150 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800713e:	4b6d      	ldr	r3, [pc, #436]	; (80072f4 <HAL_RCC_ClockConfig+0x244>)
 8007140:	69db      	ldr	r3, [r3, #28]
 8007142:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	695b      	ldr	r3, [r3, #20]
 800714a:	496a      	ldr	r1, [pc, #424]	; (80072f4 <HAL_RCC_ClockConfig+0x244>)
 800714c:	4313      	orrs	r3, r2
 800714e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f003 0310 	and.w	r3, r3, #16
 8007158:	2b00      	cmp	r3, #0
 800715a:	d010      	beq.n	800717e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	699a      	ldr	r2, [r3, #24]
 8007160:	4b64      	ldr	r3, [pc, #400]	; (80072f4 <HAL_RCC_ClockConfig+0x244>)
 8007162:	69db      	ldr	r3, [r3, #28]
 8007164:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007168:	429a      	cmp	r2, r3
 800716a:	d908      	bls.n	800717e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800716c:	4b61      	ldr	r3, [pc, #388]	; (80072f4 <HAL_RCC_ClockConfig+0x244>)
 800716e:	69db      	ldr	r3, [r3, #28]
 8007170:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	699b      	ldr	r3, [r3, #24]
 8007178:	495e      	ldr	r1, [pc, #376]	; (80072f4 <HAL_RCC_ClockConfig+0x244>)
 800717a:	4313      	orrs	r3, r2
 800717c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 0320 	and.w	r3, r3, #32
 8007186:	2b00      	cmp	r3, #0
 8007188:	d010      	beq.n	80071ac <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	69da      	ldr	r2, [r3, #28]
 800718e:	4b59      	ldr	r3, [pc, #356]	; (80072f4 <HAL_RCC_ClockConfig+0x244>)
 8007190:	6a1b      	ldr	r3, [r3, #32]
 8007192:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007196:	429a      	cmp	r2, r3
 8007198:	d908      	bls.n	80071ac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800719a:	4b56      	ldr	r3, [pc, #344]	; (80072f4 <HAL_RCC_ClockConfig+0x244>)
 800719c:	6a1b      	ldr	r3, [r3, #32]
 800719e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	69db      	ldr	r3, [r3, #28]
 80071a6:	4953      	ldr	r1, [pc, #332]	; (80072f4 <HAL_RCC_ClockConfig+0x244>)
 80071a8:	4313      	orrs	r3, r2
 80071aa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f003 0302 	and.w	r3, r3, #2
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d010      	beq.n	80071da <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	68da      	ldr	r2, [r3, #12]
 80071bc:	4b4d      	ldr	r3, [pc, #308]	; (80072f4 <HAL_RCC_ClockConfig+0x244>)
 80071be:	699b      	ldr	r3, [r3, #24]
 80071c0:	f003 030f 	and.w	r3, r3, #15
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d908      	bls.n	80071da <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071c8:	4b4a      	ldr	r3, [pc, #296]	; (80072f4 <HAL_RCC_ClockConfig+0x244>)
 80071ca:	699b      	ldr	r3, [r3, #24]
 80071cc:	f023 020f 	bic.w	r2, r3, #15
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	4947      	ldr	r1, [pc, #284]	; (80072f4 <HAL_RCC_ClockConfig+0x244>)
 80071d6:	4313      	orrs	r3, r2
 80071d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f003 0301 	and.w	r3, r3, #1
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d055      	beq.n	8007292 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80071e6:	4b43      	ldr	r3, [pc, #268]	; (80072f4 <HAL_RCC_ClockConfig+0x244>)
 80071e8:	699b      	ldr	r3, [r3, #24]
 80071ea:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	4940      	ldr	r1, [pc, #256]	; (80072f4 <HAL_RCC_ClockConfig+0x244>)
 80071f4:	4313      	orrs	r3, r2
 80071f6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	2b02      	cmp	r3, #2
 80071fe:	d107      	bne.n	8007210 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007200:	4b3c      	ldr	r3, [pc, #240]	; (80072f4 <HAL_RCC_ClockConfig+0x244>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007208:	2b00      	cmp	r3, #0
 800720a:	d121      	bne.n	8007250 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800720c:	2301      	movs	r3, #1
 800720e:	e0f6      	b.n	80073fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	2b03      	cmp	r3, #3
 8007216:	d107      	bne.n	8007228 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007218:	4b36      	ldr	r3, [pc, #216]	; (80072f4 <HAL_RCC_ClockConfig+0x244>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007220:	2b00      	cmp	r3, #0
 8007222:	d115      	bne.n	8007250 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007224:	2301      	movs	r3, #1
 8007226:	e0ea      	b.n	80073fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	2b01      	cmp	r3, #1
 800722e:	d107      	bne.n	8007240 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007230:	4b30      	ldr	r3, [pc, #192]	; (80072f4 <HAL_RCC_ClockConfig+0x244>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007238:	2b00      	cmp	r3, #0
 800723a:	d109      	bne.n	8007250 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800723c:	2301      	movs	r3, #1
 800723e:	e0de      	b.n	80073fe <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007240:	4b2c      	ldr	r3, [pc, #176]	; (80072f4 <HAL_RCC_ClockConfig+0x244>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f003 0304 	and.w	r3, r3, #4
 8007248:	2b00      	cmp	r3, #0
 800724a:	d101      	bne.n	8007250 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800724c:	2301      	movs	r3, #1
 800724e:	e0d6      	b.n	80073fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007250:	4b28      	ldr	r3, [pc, #160]	; (80072f4 <HAL_RCC_ClockConfig+0x244>)
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	f023 0207 	bic.w	r2, r3, #7
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	4925      	ldr	r1, [pc, #148]	; (80072f4 <HAL_RCC_ClockConfig+0x244>)
 800725e:	4313      	orrs	r3, r2
 8007260:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007262:	f7fa fdff 	bl	8001e64 <HAL_GetTick>
 8007266:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007268:	e00a      	b.n	8007280 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800726a:	f7fa fdfb 	bl	8001e64 <HAL_GetTick>
 800726e:	4602      	mov	r2, r0
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	1ad3      	subs	r3, r2, r3
 8007274:	f241 3288 	movw	r2, #5000	; 0x1388
 8007278:	4293      	cmp	r3, r2
 800727a:	d901      	bls.n	8007280 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800727c:	2303      	movs	r3, #3
 800727e:	e0be      	b.n	80073fe <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007280:	4b1c      	ldr	r3, [pc, #112]	; (80072f4 <HAL_RCC_ClockConfig+0x244>)
 8007282:	691b      	ldr	r3, [r3, #16]
 8007284:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	00db      	lsls	r3, r3, #3
 800728e:	429a      	cmp	r2, r3
 8007290:	d1eb      	bne.n	800726a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f003 0302 	and.w	r3, r3, #2
 800729a:	2b00      	cmp	r3, #0
 800729c:	d010      	beq.n	80072c0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	68da      	ldr	r2, [r3, #12]
 80072a2:	4b14      	ldr	r3, [pc, #80]	; (80072f4 <HAL_RCC_ClockConfig+0x244>)
 80072a4:	699b      	ldr	r3, [r3, #24]
 80072a6:	f003 030f 	and.w	r3, r3, #15
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d208      	bcs.n	80072c0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072ae:	4b11      	ldr	r3, [pc, #68]	; (80072f4 <HAL_RCC_ClockConfig+0x244>)
 80072b0:	699b      	ldr	r3, [r3, #24]
 80072b2:	f023 020f 	bic.w	r2, r3, #15
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	68db      	ldr	r3, [r3, #12]
 80072ba:	490e      	ldr	r1, [pc, #56]	; (80072f4 <HAL_RCC_ClockConfig+0x244>)
 80072bc:	4313      	orrs	r3, r2
 80072be:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80072c0:	4b0b      	ldr	r3, [pc, #44]	; (80072f0 <HAL_RCC_ClockConfig+0x240>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f003 030f 	and.w	r3, r3, #15
 80072c8:	683a      	ldr	r2, [r7, #0]
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d214      	bcs.n	80072f8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072ce:	4b08      	ldr	r3, [pc, #32]	; (80072f0 <HAL_RCC_ClockConfig+0x240>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f023 020f 	bic.w	r2, r3, #15
 80072d6:	4906      	ldr	r1, [pc, #24]	; (80072f0 <HAL_RCC_ClockConfig+0x240>)
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	4313      	orrs	r3, r2
 80072dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072de:	4b04      	ldr	r3, [pc, #16]	; (80072f0 <HAL_RCC_ClockConfig+0x240>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f003 030f 	and.w	r3, r3, #15
 80072e6:	683a      	ldr	r2, [r7, #0]
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d005      	beq.n	80072f8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	e086      	b.n	80073fe <HAL_RCC_ClockConfig+0x34e>
 80072f0:	52002000 	.word	0x52002000
 80072f4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 0304 	and.w	r3, r3, #4
 8007300:	2b00      	cmp	r3, #0
 8007302:	d010      	beq.n	8007326 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	691a      	ldr	r2, [r3, #16]
 8007308:	4b3f      	ldr	r3, [pc, #252]	; (8007408 <HAL_RCC_ClockConfig+0x358>)
 800730a:	699b      	ldr	r3, [r3, #24]
 800730c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007310:	429a      	cmp	r2, r3
 8007312:	d208      	bcs.n	8007326 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007314:	4b3c      	ldr	r3, [pc, #240]	; (8007408 <HAL_RCC_ClockConfig+0x358>)
 8007316:	699b      	ldr	r3, [r3, #24]
 8007318:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	4939      	ldr	r1, [pc, #228]	; (8007408 <HAL_RCC_ClockConfig+0x358>)
 8007322:	4313      	orrs	r3, r2
 8007324:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 0308 	and.w	r3, r3, #8
 800732e:	2b00      	cmp	r3, #0
 8007330:	d010      	beq.n	8007354 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	695a      	ldr	r2, [r3, #20]
 8007336:	4b34      	ldr	r3, [pc, #208]	; (8007408 <HAL_RCC_ClockConfig+0x358>)
 8007338:	69db      	ldr	r3, [r3, #28]
 800733a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800733e:	429a      	cmp	r2, r3
 8007340:	d208      	bcs.n	8007354 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007342:	4b31      	ldr	r3, [pc, #196]	; (8007408 <HAL_RCC_ClockConfig+0x358>)
 8007344:	69db      	ldr	r3, [r3, #28]
 8007346:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	695b      	ldr	r3, [r3, #20]
 800734e:	492e      	ldr	r1, [pc, #184]	; (8007408 <HAL_RCC_ClockConfig+0x358>)
 8007350:	4313      	orrs	r3, r2
 8007352:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 0310 	and.w	r3, r3, #16
 800735c:	2b00      	cmp	r3, #0
 800735e:	d010      	beq.n	8007382 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	699a      	ldr	r2, [r3, #24]
 8007364:	4b28      	ldr	r3, [pc, #160]	; (8007408 <HAL_RCC_ClockConfig+0x358>)
 8007366:	69db      	ldr	r3, [r3, #28]
 8007368:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800736c:	429a      	cmp	r2, r3
 800736e:	d208      	bcs.n	8007382 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007370:	4b25      	ldr	r3, [pc, #148]	; (8007408 <HAL_RCC_ClockConfig+0x358>)
 8007372:	69db      	ldr	r3, [r3, #28]
 8007374:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	699b      	ldr	r3, [r3, #24]
 800737c:	4922      	ldr	r1, [pc, #136]	; (8007408 <HAL_RCC_ClockConfig+0x358>)
 800737e:	4313      	orrs	r3, r2
 8007380:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f003 0320 	and.w	r3, r3, #32
 800738a:	2b00      	cmp	r3, #0
 800738c:	d010      	beq.n	80073b0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	69da      	ldr	r2, [r3, #28]
 8007392:	4b1d      	ldr	r3, [pc, #116]	; (8007408 <HAL_RCC_ClockConfig+0x358>)
 8007394:	6a1b      	ldr	r3, [r3, #32]
 8007396:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800739a:	429a      	cmp	r2, r3
 800739c:	d208      	bcs.n	80073b0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800739e:	4b1a      	ldr	r3, [pc, #104]	; (8007408 <HAL_RCC_ClockConfig+0x358>)
 80073a0:	6a1b      	ldr	r3, [r3, #32]
 80073a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	69db      	ldr	r3, [r3, #28]
 80073aa:	4917      	ldr	r1, [pc, #92]	; (8007408 <HAL_RCC_ClockConfig+0x358>)
 80073ac:	4313      	orrs	r3, r2
 80073ae:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80073b0:	f000 f834 	bl	800741c <HAL_RCC_GetSysClockFreq>
 80073b4:	4602      	mov	r2, r0
 80073b6:	4b14      	ldr	r3, [pc, #80]	; (8007408 <HAL_RCC_ClockConfig+0x358>)
 80073b8:	699b      	ldr	r3, [r3, #24]
 80073ba:	0a1b      	lsrs	r3, r3, #8
 80073bc:	f003 030f 	and.w	r3, r3, #15
 80073c0:	4912      	ldr	r1, [pc, #72]	; (800740c <HAL_RCC_ClockConfig+0x35c>)
 80073c2:	5ccb      	ldrb	r3, [r1, r3]
 80073c4:	f003 031f 	and.w	r3, r3, #31
 80073c8:	fa22 f303 	lsr.w	r3, r2, r3
 80073cc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80073ce:	4b0e      	ldr	r3, [pc, #56]	; (8007408 <HAL_RCC_ClockConfig+0x358>)
 80073d0:	699b      	ldr	r3, [r3, #24]
 80073d2:	f003 030f 	and.w	r3, r3, #15
 80073d6:	4a0d      	ldr	r2, [pc, #52]	; (800740c <HAL_RCC_ClockConfig+0x35c>)
 80073d8:	5cd3      	ldrb	r3, [r2, r3]
 80073da:	f003 031f 	and.w	r3, r3, #31
 80073de:	693a      	ldr	r2, [r7, #16]
 80073e0:	fa22 f303 	lsr.w	r3, r2, r3
 80073e4:	4a0a      	ldr	r2, [pc, #40]	; (8007410 <HAL_RCC_ClockConfig+0x360>)
 80073e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80073e8:	4a0a      	ldr	r2, [pc, #40]	; (8007414 <HAL_RCC_ClockConfig+0x364>)
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80073ee:	4b0a      	ldr	r3, [pc, #40]	; (8007418 <HAL_RCC_ClockConfig+0x368>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4618      	mov	r0, r3
 80073f4:	f7fa f864 	bl	80014c0 <HAL_InitTick>
 80073f8:	4603      	mov	r3, r0
 80073fa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80073fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3718      	adds	r7, #24
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}
 8007406:	bf00      	nop
 8007408:	58024400 	.word	0x58024400
 800740c:	0801c9c0 	.word	0x0801c9c0
 8007410:	24000004 	.word	0x24000004
 8007414:	24000000 	.word	0x24000000
 8007418:	24000008 	.word	0x24000008

0800741c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800741c:	b480      	push	{r7}
 800741e:	b089      	sub	sp, #36	; 0x24
 8007420:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007422:	4bb3      	ldr	r3, [pc, #716]	; (80076f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800742a:	2b18      	cmp	r3, #24
 800742c:	f200 8155 	bhi.w	80076da <HAL_RCC_GetSysClockFreq+0x2be>
 8007430:	a201      	add	r2, pc, #4	; (adr r2, 8007438 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007436:	bf00      	nop
 8007438:	0800749d 	.word	0x0800749d
 800743c:	080076db 	.word	0x080076db
 8007440:	080076db 	.word	0x080076db
 8007444:	080076db 	.word	0x080076db
 8007448:	080076db 	.word	0x080076db
 800744c:	080076db 	.word	0x080076db
 8007450:	080076db 	.word	0x080076db
 8007454:	080076db 	.word	0x080076db
 8007458:	080074c3 	.word	0x080074c3
 800745c:	080076db 	.word	0x080076db
 8007460:	080076db 	.word	0x080076db
 8007464:	080076db 	.word	0x080076db
 8007468:	080076db 	.word	0x080076db
 800746c:	080076db 	.word	0x080076db
 8007470:	080076db 	.word	0x080076db
 8007474:	080076db 	.word	0x080076db
 8007478:	080074c9 	.word	0x080074c9
 800747c:	080076db 	.word	0x080076db
 8007480:	080076db 	.word	0x080076db
 8007484:	080076db 	.word	0x080076db
 8007488:	080076db 	.word	0x080076db
 800748c:	080076db 	.word	0x080076db
 8007490:	080076db 	.word	0x080076db
 8007494:	080076db 	.word	0x080076db
 8007498:	080074cf 	.word	0x080074cf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800749c:	4b94      	ldr	r3, [pc, #592]	; (80076f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f003 0320 	and.w	r3, r3, #32
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d009      	beq.n	80074bc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074a8:	4b91      	ldr	r3, [pc, #580]	; (80076f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	08db      	lsrs	r3, r3, #3
 80074ae:	f003 0303 	and.w	r3, r3, #3
 80074b2:	4a90      	ldr	r2, [pc, #576]	; (80076f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80074b4:	fa22 f303 	lsr.w	r3, r2, r3
 80074b8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80074ba:	e111      	b.n	80076e0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80074bc:	4b8d      	ldr	r3, [pc, #564]	; (80076f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80074be:	61bb      	str	r3, [r7, #24]
      break;
 80074c0:	e10e      	b.n	80076e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80074c2:	4b8d      	ldr	r3, [pc, #564]	; (80076f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80074c4:	61bb      	str	r3, [r7, #24]
      break;
 80074c6:	e10b      	b.n	80076e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80074c8:	4b8c      	ldr	r3, [pc, #560]	; (80076fc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80074ca:	61bb      	str	r3, [r7, #24]
      break;
 80074cc:	e108      	b.n	80076e0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80074ce:	4b88      	ldr	r3, [pc, #544]	; (80076f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074d2:	f003 0303 	and.w	r3, r3, #3
 80074d6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80074d8:	4b85      	ldr	r3, [pc, #532]	; (80076f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074dc:	091b      	lsrs	r3, r3, #4
 80074de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074e2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80074e4:	4b82      	ldr	r3, [pc, #520]	; (80076f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e8:	f003 0301 	and.w	r3, r3, #1
 80074ec:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80074ee:	4b80      	ldr	r3, [pc, #512]	; (80076f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074f2:	08db      	lsrs	r3, r3, #3
 80074f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80074f8:	68fa      	ldr	r2, [r7, #12]
 80074fa:	fb02 f303 	mul.w	r3, r2, r3
 80074fe:	ee07 3a90 	vmov	s15, r3
 8007502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007506:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	2b00      	cmp	r3, #0
 800750e:	f000 80e1 	beq.w	80076d4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	2b02      	cmp	r3, #2
 8007516:	f000 8083 	beq.w	8007620 <HAL_RCC_GetSysClockFreq+0x204>
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	2b02      	cmp	r3, #2
 800751e:	f200 80a1 	bhi.w	8007664 <HAL_RCC_GetSysClockFreq+0x248>
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d003      	beq.n	8007530 <HAL_RCC_GetSysClockFreq+0x114>
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	2b01      	cmp	r3, #1
 800752c:	d056      	beq.n	80075dc <HAL_RCC_GetSysClockFreq+0x1c0>
 800752e:	e099      	b.n	8007664 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007530:	4b6f      	ldr	r3, [pc, #444]	; (80076f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 0320 	and.w	r3, r3, #32
 8007538:	2b00      	cmp	r3, #0
 800753a:	d02d      	beq.n	8007598 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800753c:	4b6c      	ldr	r3, [pc, #432]	; (80076f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	08db      	lsrs	r3, r3, #3
 8007542:	f003 0303 	and.w	r3, r3, #3
 8007546:	4a6b      	ldr	r2, [pc, #428]	; (80076f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007548:	fa22 f303 	lsr.w	r3, r2, r3
 800754c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	ee07 3a90 	vmov	s15, r3
 8007554:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	ee07 3a90 	vmov	s15, r3
 800755e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007562:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007566:	4b62      	ldr	r3, [pc, #392]	; (80076f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800756a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800756e:	ee07 3a90 	vmov	s15, r3
 8007572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007576:	ed97 6a02 	vldr	s12, [r7, #8]
 800757a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007700 <HAL_RCC_GetSysClockFreq+0x2e4>
 800757e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007586:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800758a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800758e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007592:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007596:	e087      	b.n	80076a8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	ee07 3a90 	vmov	s15, r3
 800759e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075a2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007704 <HAL_RCC_GetSysClockFreq+0x2e8>
 80075a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075aa:	4b51      	ldr	r3, [pc, #324]	; (80076f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075b2:	ee07 3a90 	vmov	s15, r3
 80075b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80075be:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007700 <HAL_RCC_GetSysClockFreq+0x2e4>
 80075c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80075da:	e065      	b.n	80076a8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	ee07 3a90 	vmov	s15, r3
 80075e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075e6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007708 <HAL_RCC_GetSysClockFreq+0x2ec>
 80075ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075ee:	4b40      	ldr	r3, [pc, #256]	; (80076f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075f6:	ee07 3a90 	vmov	s15, r3
 80075fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8007602:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007700 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800760a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800760e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800761a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800761e:	e043      	b.n	80076a8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	ee07 3a90 	vmov	s15, r3
 8007626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800762a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800770c <HAL_RCC_GetSysClockFreq+0x2f0>
 800762e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007632:	4b2f      	ldr	r3, [pc, #188]	; (80076f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800763a:	ee07 3a90 	vmov	s15, r3
 800763e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007642:	ed97 6a02 	vldr	s12, [r7, #8]
 8007646:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007700 <HAL_RCC_GetSysClockFreq+0x2e4>
 800764a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800764e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007652:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007656:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800765a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800765e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007662:	e021      	b.n	80076a8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	ee07 3a90 	vmov	s15, r3
 800766a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800766e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007708 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007676:	4b1e      	ldr	r3, [pc, #120]	; (80076f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800767a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800767e:	ee07 3a90 	vmov	s15, r3
 8007682:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007686:	ed97 6a02 	vldr	s12, [r7, #8]
 800768a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007700 <HAL_RCC_GetSysClockFreq+0x2e4>
 800768e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007692:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007696:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800769a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800769e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80076a6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80076a8:	4b11      	ldr	r3, [pc, #68]	; (80076f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ac:	0a5b      	lsrs	r3, r3, #9
 80076ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076b2:	3301      	adds	r3, #1
 80076b4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	ee07 3a90 	vmov	s15, r3
 80076bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80076c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80076c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076cc:	ee17 3a90 	vmov	r3, s15
 80076d0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80076d2:	e005      	b.n	80076e0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80076d4:	2300      	movs	r3, #0
 80076d6:	61bb      	str	r3, [r7, #24]
      break;
 80076d8:	e002      	b.n	80076e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80076da:	4b07      	ldr	r3, [pc, #28]	; (80076f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80076dc:	61bb      	str	r3, [r7, #24]
      break;
 80076de:	bf00      	nop
  }

  return sysclockfreq;
 80076e0:	69bb      	ldr	r3, [r7, #24]
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3724      	adds	r7, #36	; 0x24
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr
 80076ee:	bf00      	nop
 80076f0:	58024400 	.word	0x58024400
 80076f4:	03d09000 	.word	0x03d09000
 80076f8:	003d0900 	.word	0x003d0900
 80076fc:	007a1200 	.word	0x007a1200
 8007700:	46000000 	.word	0x46000000
 8007704:	4c742400 	.word	0x4c742400
 8007708:	4a742400 	.word	0x4a742400
 800770c:	4af42400 	.word	0x4af42400

08007710 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007716:	f7ff fe81 	bl	800741c <HAL_RCC_GetSysClockFreq>
 800771a:	4602      	mov	r2, r0
 800771c:	4b10      	ldr	r3, [pc, #64]	; (8007760 <HAL_RCC_GetHCLKFreq+0x50>)
 800771e:	699b      	ldr	r3, [r3, #24]
 8007720:	0a1b      	lsrs	r3, r3, #8
 8007722:	f003 030f 	and.w	r3, r3, #15
 8007726:	490f      	ldr	r1, [pc, #60]	; (8007764 <HAL_RCC_GetHCLKFreq+0x54>)
 8007728:	5ccb      	ldrb	r3, [r1, r3]
 800772a:	f003 031f 	and.w	r3, r3, #31
 800772e:	fa22 f303 	lsr.w	r3, r2, r3
 8007732:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007734:	4b0a      	ldr	r3, [pc, #40]	; (8007760 <HAL_RCC_GetHCLKFreq+0x50>)
 8007736:	699b      	ldr	r3, [r3, #24]
 8007738:	f003 030f 	and.w	r3, r3, #15
 800773c:	4a09      	ldr	r2, [pc, #36]	; (8007764 <HAL_RCC_GetHCLKFreq+0x54>)
 800773e:	5cd3      	ldrb	r3, [r2, r3]
 8007740:	f003 031f 	and.w	r3, r3, #31
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	fa22 f303 	lsr.w	r3, r2, r3
 800774a:	4a07      	ldr	r2, [pc, #28]	; (8007768 <HAL_RCC_GetHCLKFreq+0x58>)
 800774c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800774e:	4a07      	ldr	r2, [pc, #28]	; (800776c <HAL_RCC_GetHCLKFreq+0x5c>)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007754:	4b04      	ldr	r3, [pc, #16]	; (8007768 <HAL_RCC_GetHCLKFreq+0x58>)
 8007756:	681b      	ldr	r3, [r3, #0]
}
 8007758:	4618      	mov	r0, r3
 800775a:	3708      	adds	r7, #8
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}
 8007760:	58024400 	.word	0x58024400
 8007764:	0801c9c0 	.word	0x0801c9c0
 8007768:	24000004 	.word	0x24000004
 800776c:	24000000 	.word	0x24000000

08007770 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007774:	f7ff ffcc 	bl	8007710 <HAL_RCC_GetHCLKFreq>
 8007778:	4602      	mov	r2, r0
 800777a:	4b06      	ldr	r3, [pc, #24]	; (8007794 <HAL_RCC_GetPCLK1Freq+0x24>)
 800777c:	69db      	ldr	r3, [r3, #28]
 800777e:	091b      	lsrs	r3, r3, #4
 8007780:	f003 0307 	and.w	r3, r3, #7
 8007784:	4904      	ldr	r1, [pc, #16]	; (8007798 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007786:	5ccb      	ldrb	r3, [r1, r3]
 8007788:	f003 031f 	and.w	r3, r3, #31
 800778c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007790:	4618      	mov	r0, r3
 8007792:	bd80      	pop	{r7, pc}
 8007794:	58024400 	.word	0x58024400
 8007798:	0801c9c0 	.word	0x0801c9c0

0800779c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80077a0:	f7ff ffb6 	bl	8007710 <HAL_RCC_GetHCLKFreq>
 80077a4:	4602      	mov	r2, r0
 80077a6:	4b06      	ldr	r3, [pc, #24]	; (80077c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80077a8:	69db      	ldr	r3, [r3, #28]
 80077aa:	0a1b      	lsrs	r3, r3, #8
 80077ac:	f003 0307 	and.w	r3, r3, #7
 80077b0:	4904      	ldr	r1, [pc, #16]	; (80077c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80077b2:	5ccb      	ldrb	r3, [r1, r3]
 80077b4:	f003 031f 	and.w	r3, r3, #31
 80077b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80077bc:	4618      	mov	r0, r3
 80077be:	bd80      	pop	{r7, pc}
 80077c0:	58024400 	.word	0x58024400
 80077c4:	0801c9c0 	.word	0x0801c9c0

080077c8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b083      	sub	sp, #12
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	223f      	movs	r2, #63	; 0x3f
 80077d6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80077d8:	4b1a      	ldr	r3, [pc, #104]	; (8007844 <HAL_RCC_GetClockConfig+0x7c>)
 80077da:	691b      	ldr	r3, [r3, #16]
 80077dc:	f003 0207 	and.w	r2, r3, #7
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80077e4:	4b17      	ldr	r3, [pc, #92]	; (8007844 <HAL_RCC_GetClockConfig+0x7c>)
 80077e6:	699b      	ldr	r3, [r3, #24]
 80077e8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80077f0:	4b14      	ldr	r3, [pc, #80]	; (8007844 <HAL_RCC_GetClockConfig+0x7c>)
 80077f2:	699b      	ldr	r3, [r3, #24]
 80077f4:	f003 020f 	and.w	r2, r3, #15
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80077fc:	4b11      	ldr	r3, [pc, #68]	; (8007844 <HAL_RCC_GetClockConfig+0x7c>)
 80077fe:	699b      	ldr	r3, [r3, #24]
 8007800:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007808:	4b0e      	ldr	r3, [pc, #56]	; (8007844 <HAL_RCC_GetClockConfig+0x7c>)
 800780a:	69db      	ldr	r3, [r3, #28]
 800780c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007814:	4b0b      	ldr	r3, [pc, #44]	; (8007844 <HAL_RCC_GetClockConfig+0x7c>)
 8007816:	69db      	ldr	r3, [r3, #28]
 8007818:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007820:	4b08      	ldr	r3, [pc, #32]	; (8007844 <HAL_RCC_GetClockConfig+0x7c>)
 8007822:	6a1b      	ldr	r3, [r3, #32]
 8007824:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800782c:	4b06      	ldr	r3, [pc, #24]	; (8007848 <HAL_RCC_GetClockConfig+0x80>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f003 020f 	and.w	r2, r3, #15
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	601a      	str	r2, [r3, #0]
}
 8007838:	bf00      	nop
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr
 8007844:	58024400 	.word	0x58024400
 8007848:	52002000 	.word	0x52002000

0800784c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800784c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007850:	b0ca      	sub	sp, #296	; 0x128
 8007852:	af00      	add	r7, sp, #0
 8007854:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007858:	2300      	movs	r3, #0
 800785a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800785e:	2300      	movs	r3, #0
 8007860:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007864:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800786c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8007870:	2500      	movs	r5, #0
 8007872:	ea54 0305 	orrs.w	r3, r4, r5
 8007876:	d049      	beq.n	800790c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007878:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800787c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800787e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007882:	d02f      	beq.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007884:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007888:	d828      	bhi.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800788a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800788e:	d01a      	beq.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007890:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007894:	d822      	bhi.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007896:	2b00      	cmp	r3, #0
 8007898:	d003      	beq.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800789a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800789e:	d007      	beq.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80078a0:	e01c      	b.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078a2:	4bb8      	ldr	r3, [pc, #736]	; (8007b84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80078a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a6:	4ab7      	ldr	r2, [pc, #732]	; (8007b84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80078a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80078ae:	e01a      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80078b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078b4:	3308      	adds	r3, #8
 80078b6:	2102      	movs	r1, #2
 80078b8:	4618      	mov	r0, r3
 80078ba:	f001 fc8f 	bl	80091dc <RCCEx_PLL2_Config>
 80078be:	4603      	mov	r3, r0
 80078c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80078c4:	e00f      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80078c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078ca:	3328      	adds	r3, #40	; 0x28
 80078cc:	2102      	movs	r1, #2
 80078ce:	4618      	mov	r0, r3
 80078d0:	f001 fd36 	bl	8009340 <RCCEx_PLL3_Config>
 80078d4:	4603      	mov	r3, r0
 80078d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80078da:	e004      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078dc:	2301      	movs	r3, #1
 80078de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80078e2:	e000      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80078e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d10a      	bne.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80078ee:	4ba5      	ldr	r3, [pc, #660]	; (8007b84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80078f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078f2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80078f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078fc:	4aa1      	ldr	r2, [pc, #644]	; (8007b84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80078fe:	430b      	orrs	r3, r1
 8007900:	6513      	str	r3, [r2, #80]	; 0x50
 8007902:	e003      	b.n	800790c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007904:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007908:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800790c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007914:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8007918:	f04f 0900 	mov.w	r9, #0
 800791c:	ea58 0309 	orrs.w	r3, r8, r9
 8007920:	d047      	beq.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007922:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007928:	2b04      	cmp	r3, #4
 800792a:	d82a      	bhi.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800792c:	a201      	add	r2, pc, #4	; (adr r2, 8007934 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800792e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007932:	bf00      	nop
 8007934:	08007949 	.word	0x08007949
 8007938:	08007957 	.word	0x08007957
 800793c:	0800796d 	.word	0x0800796d
 8007940:	0800798b 	.word	0x0800798b
 8007944:	0800798b 	.word	0x0800798b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007948:	4b8e      	ldr	r3, [pc, #568]	; (8007b84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800794a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800794c:	4a8d      	ldr	r2, [pc, #564]	; (8007b84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800794e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007952:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007954:	e01a      	b.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007956:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800795a:	3308      	adds	r3, #8
 800795c:	2100      	movs	r1, #0
 800795e:	4618      	mov	r0, r3
 8007960:	f001 fc3c 	bl	80091dc <RCCEx_PLL2_Config>
 8007964:	4603      	mov	r3, r0
 8007966:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800796a:	e00f      	b.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800796c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007970:	3328      	adds	r3, #40	; 0x28
 8007972:	2100      	movs	r1, #0
 8007974:	4618      	mov	r0, r3
 8007976:	f001 fce3 	bl	8009340 <RCCEx_PLL3_Config>
 800797a:	4603      	mov	r3, r0
 800797c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007980:	e004      	b.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007982:	2301      	movs	r3, #1
 8007984:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007988:	e000      	b.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800798a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800798c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007990:	2b00      	cmp	r3, #0
 8007992:	d10a      	bne.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007994:	4b7b      	ldr	r3, [pc, #492]	; (8007b84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007998:	f023 0107 	bic.w	r1, r3, #7
 800799c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079a2:	4a78      	ldr	r2, [pc, #480]	; (8007b84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079a4:	430b      	orrs	r3, r1
 80079a6:	6513      	str	r3, [r2, #80]	; 0x50
 80079a8:	e003      	b.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80079b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ba:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80079be:	f04f 0b00 	mov.w	fp, #0
 80079c2:	ea5a 030b 	orrs.w	r3, sl, fp
 80079c6:	d04c      	beq.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80079c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079d2:	d030      	beq.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80079d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079d8:	d829      	bhi.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80079da:	2bc0      	cmp	r3, #192	; 0xc0
 80079dc:	d02d      	beq.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80079de:	2bc0      	cmp	r3, #192	; 0xc0
 80079e0:	d825      	bhi.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80079e2:	2b80      	cmp	r3, #128	; 0x80
 80079e4:	d018      	beq.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80079e6:	2b80      	cmp	r3, #128	; 0x80
 80079e8:	d821      	bhi.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d002      	beq.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80079ee:	2b40      	cmp	r3, #64	; 0x40
 80079f0:	d007      	beq.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80079f2:	e01c      	b.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079f4:	4b63      	ldr	r3, [pc, #396]	; (8007b84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f8:	4a62      	ldr	r2, [pc, #392]	; (8007b84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007a00:	e01c      	b.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a06:	3308      	adds	r3, #8
 8007a08:	2100      	movs	r1, #0
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f001 fbe6 	bl	80091dc <RCCEx_PLL2_Config>
 8007a10:	4603      	mov	r3, r0
 8007a12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007a16:	e011      	b.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a1c:	3328      	adds	r3, #40	; 0x28
 8007a1e:	2100      	movs	r1, #0
 8007a20:	4618      	mov	r0, r3
 8007a22:	f001 fc8d 	bl	8009340 <RCCEx_PLL3_Config>
 8007a26:	4603      	mov	r3, r0
 8007a28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007a2c:	e006      	b.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007a34:	e002      	b.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007a36:	bf00      	nop
 8007a38:	e000      	b.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007a3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d10a      	bne.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007a44:	4b4f      	ldr	r3, [pc, #316]	; (8007b84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a48:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8007a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a52:	4a4c      	ldr	r2, [pc, #304]	; (8007b84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a54:	430b      	orrs	r3, r1
 8007a56:	6513      	str	r3, [r2, #80]	; 0x50
 8007a58:	e003      	b.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8007a6e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007a72:	2300      	movs	r3, #0
 8007a74:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007a78:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	d053      	beq.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a86:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007a8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007a8e:	d035      	beq.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007a90:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007a94:	d82e      	bhi.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007a96:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007a9a:	d031      	beq.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007a9c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007aa0:	d828      	bhi.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007aa2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007aa6:	d01a      	beq.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007aa8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007aac:	d822      	bhi.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d003      	beq.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007ab2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ab6:	d007      	beq.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007ab8:	e01c      	b.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007aba:	4b32      	ldr	r3, [pc, #200]	; (8007b84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007abe:	4a31      	ldr	r2, [pc, #196]	; (8007b84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ac4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007ac6:	e01c      	b.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007acc:	3308      	adds	r3, #8
 8007ace:	2100      	movs	r1, #0
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f001 fb83 	bl	80091dc <RCCEx_PLL2_Config>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007adc:	e011      	b.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ae2:	3328      	adds	r3, #40	; 0x28
 8007ae4:	2100      	movs	r1, #0
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f001 fc2a 	bl	8009340 <RCCEx_PLL3_Config>
 8007aec:	4603      	mov	r3, r0
 8007aee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007af2:	e006      	b.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007afa:	e002      	b.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007afc:	bf00      	nop
 8007afe:	e000      	b.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007b00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d10b      	bne.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007b0a:	4b1e      	ldr	r3, [pc, #120]	; (8007b84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b0e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8007b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b16:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007b1a:	4a1a      	ldr	r2, [pc, #104]	; (8007b84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b1c:	430b      	orrs	r3, r1
 8007b1e:	6593      	str	r3, [r2, #88]	; 0x58
 8007b20:	e003      	b.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b32:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8007b36:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007b40:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8007b44:	460b      	mov	r3, r1
 8007b46:	4313      	orrs	r3, r2
 8007b48:	d056      	beq.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b4e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007b52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b56:	d038      	beq.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007b58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b5c:	d831      	bhi.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007b5e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007b62:	d034      	beq.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007b64:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007b68:	d82b      	bhi.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007b6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b6e:	d01d      	beq.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007b70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b74:	d825      	bhi.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d006      	beq.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007b7a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007b7e:	d00a      	beq.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007b80:	e01f      	b.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007b82:	bf00      	nop
 8007b84:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b88:	4ba2      	ldr	r3, [pc, #648]	; (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b8c:	4aa1      	ldr	r2, [pc, #644]	; (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b94:	e01c      	b.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b9a:	3308      	adds	r3, #8
 8007b9c:	2100      	movs	r1, #0
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f001 fb1c 	bl	80091dc <RCCEx_PLL2_Config>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007baa:	e011      	b.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bb0:	3328      	adds	r3, #40	; 0x28
 8007bb2:	2100      	movs	r1, #0
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f001 fbc3 	bl	8009340 <RCCEx_PLL3_Config>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007bc0:	e006      	b.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007bc8:	e002      	b.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007bca:	bf00      	nop
 8007bcc:	e000      	b.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007bce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bd0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d10b      	bne.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007bd8:	4b8e      	ldr	r3, [pc, #568]	; (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bdc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8007be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007be4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007be8:	4a8a      	ldr	r2, [pc, #552]	; (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007bea:	430b      	orrs	r3, r1
 8007bec:	6593      	str	r3, [r2, #88]	; 0x58
 8007bee:	e003      	b.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bf0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007bf4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c00:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8007c04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007c08:	2300      	movs	r3, #0
 8007c0a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007c0e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8007c12:	460b      	mov	r3, r1
 8007c14:	4313      	orrs	r3, r2
 8007c16:	d03a      	beq.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c1e:	2b30      	cmp	r3, #48	; 0x30
 8007c20:	d01f      	beq.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007c22:	2b30      	cmp	r3, #48	; 0x30
 8007c24:	d819      	bhi.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007c26:	2b20      	cmp	r3, #32
 8007c28:	d00c      	beq.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007c2a:	2b20      	cmp	r3, #32
 8007c2c:	d815      	bhi.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d019      	beq.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007c32:	2b10      	cmp	r3, #16
 8007c34:	d111      	bne.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c36:	4b77      	ldr	r3, [pc, #476]	; (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c3a:	4a76      	ldr	r2, [pc, #472]	; (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c40:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007c42:	e011      	b.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c48:	3308      	adds	r3, #8
 8007c4a:	2102      	movs	r1, #2
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f001 fac5 	bl	80091dc <RCCEx_PLL2_Config>
 8007c52:	4603      	mov	r3, r0
 8007c54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007c58:	e006      	b.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007c60:	e002      	b.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007c62:	bf00      	nop
 8007c64:	e000      	b.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007c66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d10a      	bne.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007c70:	4b68      	ldr	r3, [pc, #416]	; (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c74:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8007c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c7e:	4a65      	ldr	r2, [pc, #404]	; (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c80:	430b      	orrs	r3, r1
 8007c82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007c84:	e003      	b.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c8a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c96:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8007c9a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007ca4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8007ca8:	460b      	mov	r3, r1
 8007caa:	4313      	orrs	r3, r2
 8007cac:	d051      	beq.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cb8:	d035      	beq.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007cba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cbe:	d82e      	bhi.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007cc0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007cc4:	d031      	beq.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007cc6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007cca:	d828      	bhi.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007ccc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cd0:	d01a      	beq.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007cd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cd6:	d822      	bhi.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d003      	beq.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007cdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ce0:	d007      	beq.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007ce2:	e01c      	b.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ce4:	4b4b      	ldr	r3, [pc, #300]	; (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce8:	4a4a      	ldr	r2, [pc, #296]	; (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007cea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007cf0:	e01c      	b.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cf6:	3308      	adds	r3, #8
 8007cf8:	2100      	movs	r1, #0
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f001 fa6e 	bl	80091dc <RCCEx_PLL2_Config>
 8007d00:	4603      	mov	r3, r0
 8007d02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007d06:	e011      	b.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d0c:	3328      	adds	r3, #40	; 0x28
 8007d0e:	2100      	movs	r1, #0
 8007d10:	4618      	mov	r0, r3
 8007d12:	f001 fb15 	bl	8009340 <RCCEx_PLL3_Config>
 8007d16:	4603      	mov	r3, r0
 8007d18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007d1c:	e006      	b.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007d24:	e002      	b.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007d26:	bf00      	nop
 8007d28:	e000      	b.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007d2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d10a      	bne.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007d34:	4b37      	ldr	r3, [pc, #220]	; (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d38:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8007d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d42:	4a34      	ldr	r2, [pc, #208]	; (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d44:	430b      	orrs	r3, r1
 8007d46:	6513      	str	r3, [r2, #80]	; 0x50
 8007d48:	e003      	b.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d4e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8007d5e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007d62:	2300      	movs	r3, #0
 8007d64:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007d68:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	d056      	beq.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d7c:	d033      	beq.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007d7e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d82:	d82c      	bhi.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007d84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007d88:	d02f      	beq.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007d8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007d8e:	d826      	bhi.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007d90:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007d94:	d02b      	beq.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007d96:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007d9a:	d820      	bhi.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007d9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007da0:	d012      	beq.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007da2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007da6:	d81a      	bhi.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d022      	beq.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007db0:	d115      	bne.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007db6:	3308      	adds	r3, #8
 8007db8:	2101      	movs	r1, #1
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f001 fa0e 	bl	80091dc <RCCEx_PLL2_Config>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007dc6:	e015      	b.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dcc:	3328      	adds	r3, #40	; 0x28
 8007dce:	2101      	movs	r1, #1
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f001 fab5 	bl	8009340 <RCCEx_PLL3_Config>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007ddc:	e00a      	b.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007dde:	2301      	movs	r3, #1
 8007de0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007de4:	e006      	b.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007de6:	bf00      	nop
 8007de8:	e004      	b.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007dea:	bf00      	nop
 8007dec:	e002      	b.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007dee:	bf00      	nop
 8007df0:	e000      	b.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007df2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007df4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d10d      	bne.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007dfc:	4b05      	ldr	r3, [pc, #20]	; (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e00:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8007e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e0a:	4a02      	ldr	r2, [pc, #8]	; (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e0c:	430b      	orrs	r3, r1
 8007e0e:	6513      	str	r3, [r2, #80]	; 0x50
 8007e10:	e006      	b.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007e12:	bf00      	nop
 8007e14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e1c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e28:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8007e2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007e30:	2300      	movs	r3, #0
 8007e32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007e36:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8007e3a:	460b      	mov	r3, r1
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	d055      	beq.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e44:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007e48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e4c:	d033      	beq.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007e4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e52:	d82c      	bhi.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e58:	d02f      	beq.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e5e:	d826      	bhi.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007e60:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007e64:	d02b      	beq.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007e66:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007e6a:	d820      	bhi.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007e6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e70:	d012      	beq.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007e72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e76:	d81a      	bhi.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d022      	beq.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007e7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e80:	d115      	bne.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e86:	3308      	adds	r3, #8
 8007e88:	2101      	movs	r1, #1
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f001 f9a6 	bl	80091dc <RCCEx_PLL2_Config>
 8007e90:	4603      	mov	r3, r0
 8007e92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007e96:	e015      	b.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e9c:	3328      	adds	r3, #40	; 0x28
 8007e9e:	2101      	movs	r1, #1
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f001 fa4d 	bl	8009340 <RCCEx_PLL3_Config>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007eac:	e00a      	b.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007eb4:	e006      	b.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007eb6:	bf00      	nop
 8007eb8:	e004      	b.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007eba:	bf00      	nop
 8007ebc:	e002      	b.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007ebe:	bf00      	nop
 8007ec0:	e000      	b.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007ec2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ec4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d10b      	bne.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007ecc:	4ba3      	ldr	r3, [pc, #652]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ed0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ed8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007edc:	4a9f      	ldr	r2, [pc, #636]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ede:	430b      	orrs	r3, r1
 8007ee0:	6593      	str	r3, [r2, #88]	; 0x58
 8007ee2:	e003      	b.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ee4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ee8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8007ef8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007efc:	2300      	movs	r3, #0
 8007efe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007f02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007f06:	460b      	mov	r3, r1
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	d037      	beq.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f16:	d00e      	beq.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007f18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f1c:	d816      	bhi.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d018      	beq.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007f22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f26:	d111      	bne.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f28:	4b8c      	ldr	r3, [pc, #560]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f2c:	4a8b      	ldr	r2, [pc, #556]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007f34:	e00f      	b.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f3a:	3308      	adds	r3, #8
 8007f3c:	2101      	movs	r1, #1
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f001 f94c 	bl	80091dc <RCCEx_PLL2_Config>
 8007f44:	4603      	mov	r3, r0
 8007f46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007f4a:	e004      	b.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007f52:	e000      	b.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007f54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d10a      	bne.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007f5e:	4b7f      	ldr	r3, [pc, #508]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f62:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f6c:	4a7b      	ldr	r2, [pc, #492]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f6e:	430b      	orrs	r3, r1
 8007f70:	6513      	str	r3, [r2, #80]	; 0x50
 8007f72:	e003      	b.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f78:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f84:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8007f88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007f92:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8007f96:	460b      	mov	r3, r1
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	d039      	beq.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fa2:	2b03      	cmp	r3, #3
 8007fa4:	d81c      	bhi.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007fa6:	a201      	add	r2, pc, #4	; (adr r2, 8007fac <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fac:	08007fe9 	.word	0x08007fe9
 8007fb0:	08007fbd 	.word	0x08007fbd
 8007fb4:	08007fcb 	.word	0x08007fcb
 8007fb8:	08007fe9 	.word	0x08007fe9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fbc:	4b67      	ldr	r3, [pc, #412]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc0:	4a66      	ldr	r2, [pc, #408]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fc6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007fc8:	e00f      	b.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fce:	3308      	adds	r3, #8
 8007fd0:	2102      	movs	r1, #2
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f001 f902 	bl	80091dc <RCCEx_PLL2_Config>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007fde:	e004      	b.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007fe6:	e000      	b.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007fe8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d10a      	bne.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007ff2:	4b5a      	ldr	r3, [pc, #360]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ff6:	f023 0103 	bic.w	r1, r3, #3
 8007ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ffe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008000:	4a56      	ldr	r2, [pc, #344]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008002:	430b      	orrs	r3, r1
 8008004:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008006:	e003      	b.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008008:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800800c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008010:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008018:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800801c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008020:	2300      	movs	r3, #0
 8008022:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008026:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800802a:	460b      	mov	r3, r1
 800802c:	4313      	orrs	r3, r2
 800802e:	f000 809f 	beq.w	8008170 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008032:	4b4b      	ldr	r3, [pc, #300]	; (8008160 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a4a      	ldr	r2, [pc, #296]	; (8008160 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800803c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800803e:	f7f9 ff11 	bl	8001e64 <HAL_GetTick>
 8008042:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008046:	e00b      	b.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008048:	f7f9 ff0c 	bl	8001e64 <HAL_GetTick>
 800804c:	4602      	mov	r2, r0
 800804e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008052:	1ad3      	subs	r3, r2, r3
 8008054:	2b64      	cmp	r3, #100	; 0x64
 8008056:	d903      	bls.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008058:	2303      	movs	r3, #3
 800805a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800805e:	e005      	b.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008060:	4b3f      	ldr	r3, [pc, #252]	; (8008160 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008068:	2b00      	cmp	r3, #0
 800806a:	d0ed      	beq.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800806c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008070:	2b00      	cmp	r3, #0
 8008072:	d179      	bne.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008074:	4b39      	ldr	r3, [pc, #228]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008076:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008078:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800807c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008080:	4053      	eors	r3, r2
 8008082:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008086:	2b00      	cmp	r3, #0
 8008088:	d015      	beq.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800808a:	4b34      	ldr	r3, [pc, #208]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800808c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800808e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008092:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008096:	4b31      	ldr	r3, [pc, #196]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800809a:	4a30      	ldr	r2, [pc, #192]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800809c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080a0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80080a2:	4b2e      	ldr	r3, [pc, #184]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080a6:	4a2d      	ldr	r2, [pc, #180]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080ac:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80080ae:	4a2b      	ldr	r2, [pc, #172]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80080b4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80080b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80080be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080c2:	d118      	bne.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080c4:	f7f9 fece 	bl	8001e64 <HAL_GetTick>
 80080c8:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80080cc:	e00d      	b.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080ce:	f7f9 fec9 	bl	8001e64 <HAL_GetTick>
 80080d2:	4602      	mov	r2, r0
 80080d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80080d8:	1ad2      	subs	r2, r2, r3
 80080da:	f241 3388 	movw	r3, #5000	; 0x1388
 80080de:	429a      	cmp	r2, r3
 80080e0:	d903      	bls.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80080e2:	2303      	movs	r3, #3
 80080e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80080e8:	e005      	b.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80080ea:	4b1c      	ldr	r3, [pc, #112]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ee:	f003 0302 	and.w	r3, r3, #2
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d0eb      	beq.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80080f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d129      	bne.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80080fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008102:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800810a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800810e:	d10e      	bne.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008110:	4b12      	ldr	r3, [pc, #72]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008112:	691b      	ldr	r3, [r3, #16]
 8008114:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8008118:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800811c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008120:	091a      	lsrs	r2, r3, #4
 8008122:	4b10      	ldr	r3, [pc, #64]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008124:	4013      	ands	r3, r2
 8008126:	4a0d      	ldr	r2, [pc, #52]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008128:	430b      	orrs	r3, r1
 800812a:	6113      	str	r3, [r2, #16]
 800812c:	e005      	b.n	800813a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800812e:	4b0b      	ldr	r3, [pc, #44]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008130:	691b      	ldr	r3, [r3, #16]
 8008132:	4a0a      	ldr	r2, [pc, #40]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008134:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008138:	6113      	str	r3, [r2, #16]
 800813a:	4b08      	ldr	r3, [pc, #32]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800813c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800813e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008142:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008146:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800814a:	4a04      	ldr	r2, [pc, #16]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800814c:	430b      	orrs	r3, r1
 800814e:	6713      	str	r3, [r2, #112]	; 0x70
 8008150:	e00e      	b.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008152:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008156:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800815a:	e009      	b.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800815c:	58024400 	.word	0x58024400
 8008160:	58024800 	.word	0x58024800
 8008164:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008168:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800816c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008170:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008178:	f002 0301 	and.w	r3, r2, #1
 800817c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008180:	2300      	movs	r3, #0
 8008182:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008186:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800818a:	460b      	mov	r3, r1
 800818c:	4313      	orrs	r3, r2
 800818e:	f000 8089 	beq.w	80082a4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008192:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008196:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008198:	2b28      	cmp	r3, #40	; 0x28
 800819a:	d86b      	bhi.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800819c:	a201      	add	r2, pc, #4	; (adr r2, 80081a4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800819e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081a2:	bf00      	nop
 80081a4:	0800827d 	.word	0x0800827d
 80081a8:	08008275 	.word	0x08008275
 80081ac:	08008275 	.word	0x08008275
 80081b0:	08008275 	.word	0x08008275
 80081b4:	08008275 	.word	0x08008275
 80081b8:	08008275 	.word	0x08008275
 80081bc:	08008275 	.word	0x08008275
 80081c0:	08008275 	.word	0x08008275
 80081c4:	08008249 	.word	0x08008249
 80081c8:	08008275 	.word	0x08008275
 80081cc:	08008275 	.word	0x08008275
 80081d0:	08008275 	.word	0x08008275
 80081d4:	08008275 	.word	0x08008275
 80081d8:	08008275 	.word	0x08008275
 80081dc:	08008275 	.word	0x08008275
 80081e0:	08008275 	.word	0x08008275
 80081e4:	0800825f 	.word	0x0800825f
 80081e8:	08008275 	.word	0x08008275
 80081ec:	08008275 	.word	0x08008275
 80081f0:	08008275 	.word	0x08008275
 80081f4:	08008275 	.word	0x08008275
 80081f8:	08008275 	.word	0x08008275
 80081fc:	08008275 	.word	0x08008275
 8008200:	08008275 	.word	0x08008275
 8008204:	0800827d 	.word	0x0800827d
 8008208:	08008275 	.word	0x08008275
 800820c:	08008275 	.word	0x08008275
 8008210:	08008275 	.word	0x08008275
 8008214:	08008275 	.word	0x08008275
 8008218:	08008275 	.word	0x08008275
 800821c:	08008275 	.word	0x08008275
 8008220:	08008275 	.word	0x08008275
 8008224:	0800827d 	.word	0x0800827d
 8008228:	08008275 	.word	0x08008275
 800822c:	08008275 	.word	0x08008275
 8008230:	08008275 	.word	0x08008275
 8008234:	08008275 	.word	0x08008275
 8008238:	08008275 	.word	0x08008275
 800823c:	08008275 	.word	0x08008275
 8008240:	08008275 	.word	0x08008275
 8008244:	0800827d 	.word	0x0800827d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008248:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800824c:	3308      	adds	r3, #8
 800824e:	2101      	movs	r1, #1
 8008250:	4618      	mov	r0, r3
 8008252:	f000 ffc3 	bl	80091dc <RCCEx_PLL2_Config>
 8008256:	4603      	mov	r3, r0
 8008258:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800825c:	e00f      	b.n	800827e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800825e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008262:	3328      	adds	r3, #40	; 0x28
 8008264:	2101      	movs	r1, #1
 8008266:	4618      	mov	r0, r3
 8008268:	f001 f86a 	bl	8009340 <RCCEx_PLL3_Config>
 800826c:	4603      	mov	r3, r0
 800826e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008272:	e004      	b.n	800827e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008274:	2301      	movs	r3, #1
 8008276:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800827a:	e000      	b.n	800827e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800827c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800827e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008282:	2b00      	cmp	r3, #0
 8008284:	d10a      	bne.n	800829c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008286:	4bbf      	ldr	r3, [pc, #764]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800828a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800828e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008292:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008294:	4abb      	ldr	r2, [pc, #748]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008296:	430b      	orrs	r3, r1
 8008298:	6553      	str	r3, [r2, #84]	; 0x54
 800829a:	e003      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800829c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80082a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80082a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ac:	f002 0302 	and.w	r3, r2, #2
 80082b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80082b4:	2300      	movs	r3, #0
 80082b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80082ba:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80082be:	460b      	mov	r3, r1
 80082c0:	4313      	orrs	r3, r2
 80082c2:	d041      	beq.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80082c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082ca:	2b05      	cmp	r3, #5
 80082cc:	d824      	bhi.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80082ce:	a201      	add	r2, pc, #4	; (adr r2, 80082d4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80082d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082d4:	08008321 	.word	0x08008321
 80082d8:	080082ed 	.word	0x080082ed
 80082dc:	08008303 	.word	0x08008303
 80082e0:	08008321 	.word	0x08008321
 80082e4:	08008321 	.word	0x08008321
 80082e8:	08008321 	.word	0x08008321
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80082ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082f0:	3308      	adds	r3, #8
 80082f2:	2101      	movs	r1, #1
 80082f4:	4618      	mov	r0, r3
 80082f6:	f000 ff71 	bl	80091dc <RCCEx_PLL2_Config>
 80082fa:	4603      	mov	r3, r0
 80082fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008300:	e00f      	b.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008302:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008306:	3328      	adds	r3, #40	; 0x28
 8008308:	2101      	movs	r1, #1
 800830a:	4618      	mov	r0, r3
 800830c:	f001 f818 	bl	8009340 <RCCEx_PLL3_Config>
 8008310:	4603      	mov	r3, r0
 8008312:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008316:	e004      	b.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008318:	2301      	movs	r3, #1
 800831a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800831e:	e000      	b.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008320:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008322:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008326:	2b00      	cmp	r3, #0
 8008328:	d10a      	bne.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800832a:	4b96      	ldr	r3, [pc, #600]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800832c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800832e:	f023 0107 	bic.w	r1, r3, #7
 8008332:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008336:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008338:	4a92      	ldr	r2, [pc, #584]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800833a:	430b      	orrs	r3, r1
 800833c:	6553      	str	r3, [r2, #84]	; 0x54
 800833e:	e003      	b.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008340:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008344:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008348:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800834c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008350:	f002 0304 	and.w	r3, r2, #4
 8008354:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008358:	2300      	movs	r3, #0
 800835a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800835e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8008362:	460b      	mov	r3, r1
 8008364:	4313      	orrs	r3, r2
 8008366:	d044      	beq.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008368:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800836c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008370:	2b05      	cmp	r3, #5
 8008372:	d825      	bhi.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008374:	a201      	add	r2, pc, #4	; (adr r2, 800837c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8008376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800837a:	bf00      	nop
 800837c:	080083c9 	.word	0x080083c9
 8008380:	08008395 	.word	0x08008395
 8008384:	080083ab 	.word	0x080083ab
 8008388:	080083c9 	.word	0x080083c9
 800838c:	080083c9 	.word	0x080083c9
 8008390:	080083c9 	.word	0x080083c9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008394:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008398:	3308      	adds	r3, #8
 800839a:	2101      	movs	r1, #1
 800839c:	4618      	mov	r0, r3
 800839e:	f000 ff1d 	bl	80091dc <RCCEx_PLL2_Config>
 80083a2:	4603      	mov	r3, r0
 80083a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80083a8:	e00f      	b.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80083aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083ae:	3328      	adds	r3, #40	; 0x28
 80083b0:	2101      	movs	r1, #1
 80083b2:	4618      	mov	r0, r3
 80083b4:	f000 ffc4 	bl	8009340 <RCCEx_PLL3_Config>
 80083b8:	4603      	mov	r3, r0
 80083ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80083be:	e004      	b.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083c0:	2301      	movs	r3, #1
 80083c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80083c6:	e000      	b.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80083c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d10b      	bne.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80083d2:	4b6c      	ldr	r3, [pc, #432]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80083d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083d6:	f023 0107 	bic.w	r1, r3, #7
 80083da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80083e2:	4a68      	ldr	r2, [pc, #416]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80083e4:	430b      	orrs	r3, r1
 80083e6:	6593      	str	r3, [r2, #88]	; 0x58
 80083e8:	e003      	b.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80083f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083fa:	f002 0320 	and.w	r3, r2, #32
 80083fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008402:	2300      	movs	r3, #0
 8008404:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008408:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800840c:	460b      	mov	r3, r1
 800840e:	4313      	orrs	r3, r2
 8008410:	d055      	beq.n	80084be <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008412:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800841a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800841e:	d033      	beq.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008420:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008424:	d82c      	bhi.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008426:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800842a:	d02f      	beq.n	800848c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800842c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008430:	d826      	bhi.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008432:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008436:	d02b      	beq.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008438:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800843c:	d820      	bhi.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800843e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008442:	d012      	beq.n	800846a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008444:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008448:	d81a      	bhi.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800844a:	2b00      	cmp	r3, #0
 800844c:	d022      	beq.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800844e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008452:	d115      	bne.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008454:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008458:	3308      	adds	r3, #8
 800845a:	2100      	movs	r1, #0
 800845c:	4618      	mov	r0, r3
 800845e:	f000 febd 	bl	80091dc <RCCEx_PLL2_Config>
 8008462:	4603      	mov	r3, r0
 8008464:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008468:	e015      	b.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800846a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800846e:	3328      	adds	r3, #40	; 0x28
 8008470:	2102      	movs	r1, #2
 8008472:	4618      	mov	r0, r3
 8008474:	f000 ff64 	bl	8009340 <RCCEx_PLL3_Config>
 8008478:	4603      	mov	r3, r0
 800847a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800847e:	e00a      	b.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008480:	2301      	movs	r3, #1
 8008482:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008486:	e006      	b.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008488:	bf00      	nop
 800848a:	e004      	b.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800848c:	bf00      	nop
 800848e:	e002      	b.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008490:	bf00      	nop
 8008492:	e000      	b.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008494:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008496:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800849a:	2b00      	cmp	r3, #0
 800849c:	d10b      	bne.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800849e:	4b39      	ldr	r3, [pc, #228]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80084a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084a2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80084a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084ae:	4a35      	ldr	r2, [pc, #212]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80084b0:	430b      	orrs	r3, r1
 80084b2:	6553      	str	r3, [r2, #84]	; 0x54
 80084b4:	e003      	b.n	80084be <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80084ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80084be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80084ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80084ce:	2300      	movs	r3, #0
 80084d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80084d4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80084d8:	460b      	mov	r3, r1
 80084da:	4313      	orrs	r3, r2
 80084dc:	d058      	beq.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80084de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80084e6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80084ea:	d033      	beq.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80084ec:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80084f0:	d82c      	bhi.n	800854c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80084f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084f6:	d02f      	beq.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80084f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084fc:	d826      	bhi.n	800854c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80084fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008502:	d02b      	beq.n	800855c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8008504:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008508:	d820      	bhi.n	800854c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800850a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800850e:	d012      	beq.n	8008536 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008510:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008514:	d81a      	bhi.n	800854c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008516:	2b00      	cmp	r3, #0
 8008518:	d022      	beq.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800851a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800851e:	d115      	bne.n	800854c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008520:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008524:	3308      	adds	r3, #8
 8008526:	2100      	movs	r1, #0
 8008528:	4618      	mov	r0, r3
 800852a:	f000 fe57 	bl	80091dc <RCCEx_PLL2_Config>
 800852e:	4603      	mov	r3, r0
 8008530:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008534:	e015      	b.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008536:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800853a:	3328      	adds	r3, #40	; 0x28
 800853c:	2102      	movs	r1, #2
 800853e:	4618      	mov	r0, r3
 8008540:	f000 fefe 	bl	8009340 <RCCEx_PLL3_Config>
 8008544:	4603      	mov	r3, r0
 8008546:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800854a:	e00a      	b.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800854c:	2301      	movs	r3, #1
 800854e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008552:	e006      	b.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008554:	bf00      	nop
 8008556:	e004      	b.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008558:	bf00      	nop
 800855a:	e002      	b.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800855c:	bf00      	nop
 800855e:	e000      	b.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008560:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008562:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008566:	2b00      	cmp	r3, #0
 8008568:	d10e      	bne.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800856a:	4b06      	ldr	r3, [pc, #24]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800856c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800856e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8008572:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008576:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800857a:	4a02      	ldr	r2, [pc, #8]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800857c:	430b      	orrs	r3, r1
 800857e:	6593      	str	r3, [r2, #88]	; 0x58
 8008580:	e006      	b.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008582:	bf00      	nop
 8008584:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008588:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800858c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008590:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008598:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800859c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80085a0:	2300      	movs	r3, #0
 80085a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80085a6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80085aa:	460b      	mov	r3, r1
 80085ac:	4313      	orrs	r3, r2
 80085ae:	d055      	beq.n	800865c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80085b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80085b8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80085bc:	d033      	beq.n	8008626 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80085be:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80085c2:	d82c      	bhi.n	800861e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80085c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085c8:	d02f      	beq.n	800862a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80085ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085ce:	d826      	bhi.n	800861e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80085d0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80085d4:	d02b      	beq.n	800862e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80085d6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80085da:	d820      	bhi.n	800861e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80085dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80085e0:	d012      	beq.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80085e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80085e6:	d81a      	bhi.n	800861e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d022      	beq.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80085ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085f0:	d115      	bne.n	800861e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80085f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085f6:	3308      	adds	r3, #8
 80085f8:	2100      	movs	r1, #0
 80085fa:	4618      	mov	r0, r3
 80085fc:	f000 fdee 	bl	80091dc <RCCEx_PLL2_Config>
 8008600:	4603      	mov	r3, r0
 8008602:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008606:	e015      	b.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008608:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800860c:	3328      	adds	r3, #40	; 0x28
 800860e:	2102      	movs	r1, #2
 8008610:	4618      	mov	r0, r3
 8008612:	f000 fe95 	bl	8009340 <RCCEx_PLL3_Config>
 8008616:	4603      	mov	r3, r0
 8008618:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800861c:	e00a      	b.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800861e:	2301      	movs	r3, #1
 8008620:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008624:	e006      	b.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008626:	bf00      	nop
 8008628:	e004      	b.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800862a:	bf00      	nop
 800862c:	e002      	b.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800862e:	bf00      	nop
 8008630:	e000      	b.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008632:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008634:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008638:	2b00      	cmp	r3, #0
 800863a:	d10b      	bne.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800863c:	4ba1      	ldr	r3, [pc, #644]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800863e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008640:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8008644:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008648:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800864c:	4a9d      	ldr	r2, [pc, #628]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800864e:	430b      	orrs	r3, r1
 8008650:	6593      	str	r3, [r2, #88]	; 0x58
 8008652:	e003      	b.n	800865c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008654:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008658:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800865c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008664:	f002 0308 	and.w	r3, r2, #8
 8008668:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800866c:	2300      	movs	r3, #0
 800866e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008672:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8008676:	460b      	mov	r3, r1
 8008678:	4313      	orrs	r3, r2
 800867a:	d01e      	beq.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800867c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008680:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008688:	d10c      	bne.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800868a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800868e:	3328      	adds	r3, #40	; 0x28
 8008690:	2102      	movs	r1, #2
 8008692:	4618      	mov	r0, r3
 8008694:	f000 fe54 	bl	8009340 <RCCEx_PLL3_Config>
 8008698:	4603      	mov	r3, r0
 800869a:	2b00      	cmp	r3, #0
 800869c:	d002      	beq.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800869e:	2301      	movs	r3, #1
 80086a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80086a4:	4b87      	ldr	r3, [pc, #540]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80086a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086a8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80086ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086b4:	4a83      	ldr	r2, [pc, #524]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80086b6:	430b      	orrs	r3, r1
 80086b8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80086ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c2:	f002 0310 	and.w	r3, r2, #16
 80086c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80086ca:	2300      	movs	r3, #0
 80086cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80086d0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80086d4:	460b      	mov	r3, r1
 80086d6:	4313      	orrs	r3, r2
 80086d8:	d01e      	beq.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80086da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80086e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086e6:	d10c      	bne.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80086e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086ec:	3328      	adds	r3, #40	; 0x28
 80086ee:	2102      	movs	r1, #2
 80086f0:	4618      	mov	r0, r3
 80086f2:	f000 fe25 	bl	8009340 <RCCEx_PLL3_Config>
 80086f6:	4603      	mov	r3, r0
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d002      	beq.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80086fc:	2301      	movs	r3, #1
 80086fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008702:	4b70      	ldr	r3, [pc, #448]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008706:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800870a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800870e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008712:	4a6c      	ldr	r2, [pc, #432]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008714:	430b      	orrs	r3, r1
 8008716:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008718:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800871c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008720:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8008724:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008728:	2300      	movs	r3, #0
 800872a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800872e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8008732:	460b      	mov	r3, r1
 8008734:	4313      	orrs	r3, r2
 8008736:	d03e      	beq.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008738:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800873c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008740:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008744:	d022      	beq.n	800878c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8008746:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800874a:	d81b      	bhi.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800874c:	2b00      	cmp	r3, #0
 800874e:	d003      	beq.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008754:	d00b      	beq.n	800876e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008756:	e015      	b.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008758:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800875c:	3308      	adds	r3, #8
 800875e:	2100      	movs	r1, #0
 8008760:	4618      	mov	r0, r3
 8008762:	f000 fd3b 	bl	80091dc <RCCEx_PLL2_Config>
 8008766:	4603      	mov	r3, r0
 8008768:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800876c:	e00f      	b.n	800878e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800876e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008772:	3328      	adds	r3, #40	; 0x28
 8008774:	2102      	movs	r1, #2
 8008776:	4618      	mov	r0, r3
 8008778:	f000 fde2 	bl	8009340 <RCCEx_PLL3_Config>
 800877c:	4603      	mov	r3, r0
 800877e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008782:	e004      	b.n	800878e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008784:	2301      	movs	r3, #1
 8008786:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800878a:	e000      	b.n	800878e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800878c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800878e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008792:	2b00      	cmp	r3, #0
 8008794:	d10b      	bne.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008796:	4b4b      	ldr	r3, [pc, #300]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800879a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800879e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80087a6:	4a47      	ldr	r2, [pc, #284]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80087a8:	430b      	orrs	r3, r1
 80087aa:	6593      	str	r3, [r2, #88]	; 0x58
 80087ac:	e003      	b.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80087b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087be:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80087c2:	67bb      	str	r3, [r7, #120]	; 0x78
 80087c4:	2300      	movs	r3, #0
 80087c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80087c8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80087cc:	460b      	mov	r3, r1
 80087ce:	4313      	orrs	r3, r2
 80087d0:	d03b      	beq.n	800884a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80087d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80087de:	d01f      	beq.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80087e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80087e4:	d818      	bhi.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80087e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087ea:	d003      	beq.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80087ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80087f0:	d007      	beq.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80087f2:	e011      	b.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087f4:	4b33      	ldr	r3, [pc, #204]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80087f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087f8:	4a32      	ldr	r2, [pc, #200]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80087fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008800:	e00f      	b.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008802:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008806:	3328      	adds	r3, #40	; 0x28
 8008808:	2101      	movs	r1, #1
 800880a:	4618      	mov	r0, r3
 800880c:	f000 fd98 	bl	8009340 <RCCEx_PLL3_Config>
 8008810:	4603      	mov	r3, r0
 8008812:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8008816:	e004      	b.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008818:	2301      	movs	r3, #1
 800881a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800881e:	e000      	b.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008820:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008822:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008826:	2b00      	cmp	r3, #0
 8008828:	d10b      	bne.n	8008842 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800882a:	4b26      	ldr	r3, [pc, #152]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800882c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800882e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008832:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800883a:	4a22      	ldr	r2, [pc, #136]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800883c:	430b      	orrs	r3, r1
 800883e:	6553      	str	r3, [r2, #84]	; 0x54
 8008840:	e003      	b.n	800884a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008842:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008846:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800884a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800884e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008852:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8008856:	673b      	str	r3, [r7, #112]	; 0x70
 8008858:	2300      	movs	r3, #0
 800885a:	677b      	str	r3, [r7, #116]	; 0x74
 800885c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8008860:	460b      	mov	r3, r1
 8008862:	4313      	orrs	r3, r2
 8008864:	d034      	beq.n	80088d0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008866:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800886a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800886c:	2b00      	cmp	r3, #0
 800886e:	d003      	beq.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008874:	d007      	beq.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008876:	e011      	b.n	800889c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008878:	4b12      	ldr	r3, [pc, #72]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800887a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800887c:	4a11      	ldr	r2, [pc, #68]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800887e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008882:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008884:	e00e      	b.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008886:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800888a:	3308      	adds	r3, #8
 800888c:	2102      	movs	r1, #2
 800888e:	4618      	mov	r0, r3
 8008890:	f000 fca4 	bl	80091dc <RCCEx_PLL2_Config>
 8008894:	4603      	mov	r3, r0
 8008896:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800889a:	e003      	b.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800889c:	2301      	movs	r3, #1
 800889e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80088a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d10d      	bne.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80088ac:	4b05      	ldr	r3, [pc, #20]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80088b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088ba:	4a02      	ldr	r2, [pc, #8]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088bc:	430b      	orrs	r3, r1
 80088be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80088c0:	e006      	b.n	80088d0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80088c2:	bf00      	nop
 80088c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80088cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80088d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80088dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80088de:	2300      	movs	r3, #0
 80088e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80088e2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80088e6:	460b      	mov	r3, r1
 80088e8:	4313      	orrs	r3, r2
 80088ea:	d00c      	beq.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80088ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088f0:	3328      	adds	r3, #40	; 0x28
 80088f2:	2102      	movs	r1, #2
 80088f4:	4618      	mov	r0, r3
 80088f6:	f000 fd23 	bl	8009340 <RCCEx_PLL3_Config>
 80088fa:	4603      	mov	r3, r0
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d002      	beq.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008900:	2301      	movs	r3, #1
 8008902:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008906:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800890a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800890e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8008912:	663b      	str	r3, [r7, #96]	; 0x60
 8008914:	2300      	movs	r3, #0
 8008916:	667b      	str	r3, [r7, #100]	; 0x64
 8008918:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800891c:	460b      	mov	r3, r1
 800891e:	4313      	orrs	r3, r2
 8008920:	d038      	beq.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008922:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008926:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800892a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800892e:	d018      	beq.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008930:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008934:	d811      	bhi.n	800895a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008936:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800893a:	d014      	beq.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800893c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008940:	d80b      	bhi.n	800895a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008942:	2b00      	cmp	r3, #0
 8008944:	d011      	beq.n	800896a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008946:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800894a:	d106      	bne.n	800895a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800894c:	4bc3      	ldr	r3, [pc, #780]	; (8008c5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800894e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008950:	4ac2      	ldr	r2, [pc, #776]	; (8008c5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008952:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008956:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008958:	e008      	b.n	800896c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008960:	e004      	b.n	800896c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008962:	bf00      	nop
 8008964:	e002      	b.n	800896c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008966:	bf00      	nop
 8008968:	e000      	b.n	800896c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800896a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800896c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008970:	2b00      	cmp	r3, #0
 8008972:	d10b      	bne.n	800898c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008974:	4bb9      	ldr	r3, [pc, #740]	; (8008c5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008978:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800897c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008980:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008984:	4ab5      	ldr	r2, [pc, #724]	; (8008c5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008986:	430b      	orrs	r3, r1
 8008988:	6553      	str	r3, [r2, #84]	; 0x54
 800898a:	e003      	b.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800898c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008990:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008994:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800899c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80089a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80089a2:	2300      	movs	r3, #0
 80089a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80089a6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80089aa:	460b      	mov	r3, r1
 80089ac:	4313      	orrs	r3, r2
 80089ae:	d009      	beq.n	80089c4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80089b0:	4baa      	ldr	r3, [pc, #680]	; (8008c5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089b4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80089b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089be:	4aa7      	ldr	r2, [pc, #668]	; (8008c5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089c0:	430b      	orrs	r3, r1
 80089c2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80089c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089cc:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80089d0:	653b      	str	r3, [r7, #80]	; 0x50
 80089d2:	2300      	movs	r3, #0
 80089d4:	657b      	str	r3, [r7, #84]	; 0x54
 80089d6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80089da:	460b      	mov	r3, r1
 80089dc:	4313      	orrs	r3, r2
 80089de:	d00a      	beq.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80089e0:	4b9e      	ldr	r3, [pc, #632]	; (8008c5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089e2:	691b      	ldr	r3, [r3, #16]
 80089e4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80089e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089ec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80089f0:	4a9a      	ldr	r2, [pc, #616]	; (8008c5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089f2:	430b      	orrs	r3, r1
 80089f4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80089f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089fe:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8008a02:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a04:	2300      	movs	r3, #0
 8008a06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a08:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	d009      	beq.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008a12:	4b92      	ldr	r3, [pc, #584]	; (8008c5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a16:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8008a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a20:	4a8e      	ldr	r2, [pc, #568]	; (8008c5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a22:	430b      	orrs	r3, r1
 8008a24:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a2e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8008a32:	643b      	str	r3, [r7, #64]	; 0x40
 8008a34:	2300      	movs	r3, #0
 8008a36:	647b      	str	r3, [r7, #68]	; 0x44
 8008a38:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8008a3c:	460b      	mov	r3, r1
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	d00e      	beq.n	8008a60 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008a42:	4b86      	ldr	r3, [pc, #536]	; (8008c5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a44:	691b      	ldr	r3, [r3, #16]
 8008a46:	4a85      	ldr	r2, [pc, #532]	; (8008c5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a48:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008a4c:	6113      	str	r3, [r2, #16]
 8008a4e:	4b83      	ldr	r3, [pc, #524]	; (8008c5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a50:	6919      	ldr	r1, [r3, #16]
 8008a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a56:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008a5a:	4a80      	ldr	r2, [pc, #512]	; (8008c5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a5c:	430b      	orrs	r3, r1
 8008a5e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a68:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8008a6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a6e:	2300      	movs	r3, #0
 8008a70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a72:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8008a76:	460b      	mov	r3, r1
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	d009      	beq.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008a7c:	4b77      	ldr	r3, [pc, #476]	; (8008c5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a80:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a8a:	4a74      	ldr	r2, [pc, #464]	; (8008c5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a8c:	430b      	orrs	r3, r1
 8008a8e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a98:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8008a9c:	633b      	str	r3, [r7, #48]	; 0x30
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	637b      	str	r3, [r7, #52]	; 0x34
 8008aa2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8008aa6:	460b      	mov	r3, r1
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	d00a      	beq.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008aac:	4b6b      	ldr	r3, [pc, #428]	; (8008c5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ab0:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8008ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ab8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008abc:	4a67      	ldr	r2, [pc, #412]	; (8008c5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008abe:	430b      	orrs	r3, r1
 8008ac0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aca:	2100      	movs	r1, #0
 8008acc:	62b9      	str	r1, [r7, #40]	; 0x28
 8008ace:	f003 0301 	and.w	r3, r3, #1
 8008ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ad4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8008ad8:	460b      	mov	r3, r1
 8008ada:	4313      	orrs	r3, r2
 8008adc:	d011      	beq.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ae2:	3308      	adds	r3, #8
 8008ae4:	2100      	movs	r1, #0
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f000 fb78 	bl	80091dc <RCCEx_PLL2_Config>
 8008aec:	4603      	mov	r3, r0
 8008aee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008af2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d003      	beq.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008afa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008afe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b0a:	2100      	movs	r1, #0
 8008b0c:	6239      	str	r1, [r7, #32]
 8008b0e:	f003 0302 	and.w	r3, r3, #2
 8008b12:	627b      	str	r3, [r7, #36]	; 0x24
 8008b14:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008b18:	460b      	mov	r3, r1
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	d011      	beq.n	8008b42 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b22:	3308      	adds	r3, #8
 8008b24:	2101      	movs	r1, #1
 8008b26:	4618      	mov	r0, r3
 8008b28:	f000 fb58 	bl	80091dc <RCCEx_PLL2_Config>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008b32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d003      	beq.n	8008b42 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b3e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b4a:	2100      	movs	r1, #0
 8008b4c:	61b9      	str	r1, [r7, #24]
 8008b4e:	f003 0304 	and.w	r3, r3, #4
 8008b52:	61fb      	str	r3, [r7, #28]
 8008b54:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008b58:	460b      	mov	r3, r1
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	d011      	beq.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b62:	3308      	adds	r3, #8
 8008b64:	2102      	movs	r1, #2
 8008b66:	4618      	mov	r0, r3
 8008b68:	f000 fb38 	bl	80091dc <RCCEx_PLL2_Config>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008b72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d003      	beq.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b7e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b8a:	2100      	movs	r1, #0
 8008b8c:	6139      	str	r1, [r7, #16]
 8008b8e:	f003 0308 	and.w	r3, r3, #8
 8008b92:	617b      	str	r3, [r7, #20]
 8008b94:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008b98:	460b      	mov	r3, r1
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	d011      	beq.n	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ba2:	3328      	adds	r3, #40	; 0x28
 8008ba4:	2100      	movs	r1, #0
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f000 fbca 	bl	8009340 <RCCEx_PLL3_Config>
 8008bac:	4603      	mov	r3, r0
 8008bae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8008bb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d003      	beq.n	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008bbe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bca:	2100      	movs	r1, #0
 8008bcc:	60b9      	str	r1, [r7, #8]
 8008bce:	f003 0310 	and.w	r3, r3, #16
 8008bd2:	60fb      	str	r3, [r7, #12]
 8008bd4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008bd8:	460b      	mov	r3, r1
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	d011      	beq.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008be2:	3328      	adds	r3, #40	; 0x28
 8008be4:	2101      	movs	r1, #1
 8008be6:	4618      	mov	r0, r3
 8008be8:	f000 fbaa 	bl	8009340 <RCCEx_PLL3_Config>
 8008bec:	4603      	mov	r3, r0
 8008bee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008bf2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d003      	beq.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bfa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008bfe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c0a:	2100      	movs	r1, #0
 8008c0c:	6039      	str	r1, [r7, #0]
 8008c0e:	f003 0320 	and.w	r3, r3, #32
 8008c12:	607b      	str	r3, [r7, #4]
 8008c14:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008c18:	460b      	mov	r3, r1
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	d011      	beq.n	8008c42 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c22:	3328      	adds	r3, #40	; 0x28
 8008c24:	2102      	movs	r1, #2
 8008c26:	4618      	mov	r0, r3
 8008c28:	f000 fb8a 	bl	8009340 <RCCEx_PLL3_Config>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008c32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d003      	beq.n	8008c42 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c3e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8008c42:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d101      	bne.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	e000      	b.n	8008c50 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008c4e:	2301      	movs	r3, #1
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8008c56:	46bd      	mov	sp, r7
 8008c58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c5c:	58024400 	.word	0x58024400

08008c60 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008c64:	f7fe fd54 	bl	8007710 <HAL_RCC_GetHCLKFreq>
 8008c68:	4602      	mov	r2, r0
 8008c6a:	4b06      	ldr	r3, [pc, #24]	; (8008c84 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008c6c:	6a1b      	ldr	r3, [r3, #32]
 8008c6e:	091b      	lsrs	r3, r3, #4
 8008c70:	f003 0307 	and.w	r3, r3, #7
 8008c74:	4904      	ldr	r1, [pc, #16]	; (8008c88 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008c76:	5ccb      	ldrb	r3, [r1, r3]
 8008c78:	f003 031f 	and.w	r3, r3, #31
 8008c7c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	bd80      	pop	{r7, pc}
 8008c84:	58024400 	.word	0x58024400
 8008c88:	0801c9c0 	.word	0x0801c9c0

08008c8c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b089      	sub	sp, #36	; 0x24
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c94:	4ba1      	ldr	r3, [pc, #644]	; (8008f1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c98:	f003 0303 	and.w	r3, r3, #3
 8008c9c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008c9e:	4b9f      	ldr	r3, [pc, #636]	; (8008f1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ca2:	0b1b      	lsrs	r3, r3, #12
 8008ca4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ca8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008caa:	4b9c      	ldr	r3, [pc, #624]	; (8008f1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cae:	091b      	lsrs	r3, r3, #4
 8008cb0:	f003 0301 	and.w	r3, r3, #1
 8008cb4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008cb6:	4b99      	ldr	r3, [pc, #612]	; (8008f1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cba:	08db      	lsrs	r3, r3, #3
 8008cbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008cc0:	693a      	ldr	r2, [r7, #16]
 8008cc2:	fb02 f303 	mul.w	r3, r2, r3
 8008cc6:	ee07 3a90 	vmov	s15, r3
 8008cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	f000 8111 	beq.w	8008efc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008cda:	69bb      	ldr	r3, [r7, #24]
 8008cdc:	2b02      	cmp	r3, #2
 8008cde:	f000 8083 	beq.w	8008de8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008ce2:	69bb      	ldr	r3, [r7, #24]
 8008ce4:	2b02      	cmp	r3, #2
 8008ce6:	f200 80a1 	bhi.w	8008e2c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d003      	beq.n	8008cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008cf0:	69bb      	ldr	r3, [r7, #24]
 8008cf2:	2b01      	cmp	r3, #1
 8008cf4:	d056      	beq.n	8008da4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008cf6:	e099      	b.n	8008e2c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008cf8:	4b88      	ldr	r3, [pc, #544]	; (8008f1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f003 0320 	and.w	r3, r3, #32
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d02d      	beq.n	8008d60 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d04:	4b85      	ldr	r3, [pc, #532]	; (8008f1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	08db      	lsrs	r3, r3, #3
 8008d0a:	f003 0303 	and.w	r3, r3, #3
 8008d0e:	4a84      	ldr	r2, [pc, #528]	; (8008f20 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008d10:	fa22 f303 	lsr.w	r3, r2, r3
 8008d14:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	ee07 3a90 	vmov	s15, r3
 8008d1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	ee07 3a90 	vmov	s15, r3
 8008d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d2e:	4b7b      	ldr	r3, [pc, #492]	; (8008f1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d36:	ee07 3a90 	vmov	s15, r3
 8008d3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d42:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008f24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d5a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008d5e:	e087      	b.n	8008e70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	ee07 3a90 	vmov	s15, r3
 8008d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d6a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008f28 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008d6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d72:	4b6a      	ldr	r3, [pc, #424]	; (8008f1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d7a:	ee07 3a90 	vmov	s15, r3
 8008d7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d82:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d86:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008f24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008da2:	e065      	b.n	8008e70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	ee07 3a90 	vmov	s15, r3
 8008daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008f2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008db2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008db6:	4b59      	ldr	r3, [pc, #356]	; (8008f1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dbe:	ee07 3a90 	vmov	s15, r3
 8008dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dca:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008f24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008dce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008de2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008de6:	e043      	b.n	8008e70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	ee07 3a90 	vmov	s15, r3
 8008dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008df2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008f30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dfa:	4b48      	ldr	r3, [pc, #288]	; (8008f1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e02:	ee07 3a90 	vmov	s15, r3
 8008e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e0e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008f24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e2a:	e021      	b.n	8008e70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	ee07 3a90 	vmov	s15, r3
 8008e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e36:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008f2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e3e:	4b37      	ldr	r3, [pc, #220]	; (8008f1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e46:	ee07 3a90 	vmov	s15, r3
 8008e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e52:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008f24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e6e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008e70:	4b2a      	ldr	r3, [pc, #168]	; (8008f1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e74:	0a5b      	lsrs	r3, r3, #9
 8008e76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e7a:	ee07 3a90 	vmov	s15, r3
 8008e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e96:	ee17 2a90 	vmov	r2, s15
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008e9e:	4b1f      	ldr	r3, [pc, #124]	; (8008f1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ea2:	0c1b      	lsrs	r3, r3, #16
 8008ea4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ea8:	ee07 3a90 	vmov	s15, r3
 8008eac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008eb4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008eb8:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ebc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ec0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ec4:	ee17 2a90 	vmov	r2, s15
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008ecc:	4b13      	ldr	r3, [pc, #76]	; (8008f1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ed0:	0e1b      	lsrs	r3, r3, #24
 8008ed2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ed6:	ee07 3a90 	vmov	s15, r3
 8008eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ede:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ee2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ee6:	edd7 6a07 	vldr	s13, [r7, #28]
 8008eea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008eee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ef2:	ee17 2a90 	vmov	r2, s15
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008efa:	e008      	b.n	8008f0e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2200      	movs	r2, #0
 8008f00:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	609a      	str	r2, [r3, #8]
}
 8008f0e:	bf00      	nop
 8008f10:	3724      	adds	r7, #36	; 0x24
 8008f12:	46bd      	mov	sp, r7
 8008f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f18:	4770      	bx	lr
 8008f1a:	bf00      	nop
 8008f1c:	58024400 	.word	0x58024400
 8008f20:	03d09000 	.word	0x03d09000
 8008f24:	46000000 	.word	0x46000000
 8008f28:	4c742400 	.word	0x4c742400
 8008f2c:	4a742400 	.word	0x4a742400
 8008f30:	4af42400 	.word	0x4af42400

08008f34 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b089      	sub	sp, #36	; 0x24
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008f3c:	4ba1      	ldr	r3, [pc, #644]	; (80091c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f40:	f003 0303 	and.w	r3, r3, #3
 8008f44:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008f46:	4b9f      	ldr	r3, [pc, #636]	; (80091c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f4a:	0d1b      	lsrs	r3, r3, #20
 8008f4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f50:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008f52:	4b9c      	ldr	r3, [pc, #624]	; (80091c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f56:	0a1b      	lsrs	r3, r3, #8
 8008f58:	f003 0301 	and.w	r3, r3, #1
 8008f5c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008f5e:	4b99      	ldr	r3, [pc, #612]	; (80091c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f62:	08db      	lsrs	r3, r3, #3
 8008f64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008f68:	693a      	ldr	r2, [r7, #16]
 8008f6a:	fb02 f303 	mul.w	r3, r2, r3
 8008f6e:	ee07 3a90 	vmov	s15, r3
 8008f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f76:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	f000 8111 	beq.w	80091a4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008f82:	69bb      	ldr	r3, [r7, #24]
 8008f84:	2b02      	cmp	r3, #2
 8008f86:	f000 8083 	beq.w	8009090 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008f8a:	69bb      	ldr	r3, [r7, #24]
 8008f8c:	2b02      	cmp	r3, #2
 8008f8e:	f200 80a1 	bhi.w	80090d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008f92:	69bb      	ldr	r3, [r7, #24]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d003      	beq.n	8008fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008f98:	69bb      	ldr	r3, [r7, #24]
 8008f9a:	2b01      	cmp	r3, #1
 8008f9c:	d056      	beq.n	800904c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008f9e:	e099      	b.n	80090d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008fa0:	4b88      	ldr	r3, [pc, #544]	; (80091c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f003 0320 	and.w	r3, r3, #32
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d02d      	beq.n	8009008 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008fac:	4b85      	ldr	r3, [pc, #532]	; (80091c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	08db      	lsrs	r3, r3, #3
 8008fb2:	f003 0303 	and.w	r3, r3, #3
 8008fb6:	4a84      	ldr	r2, [pc, #528]	; (80091c8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8008fbc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	ee07 3a90 	vmov	s15, r3
 8008fc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	ee07 3a90 	vmov	s15, r3
 8008fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fd6:	4b7b      	ldr	r3, [pc, #492]	; (80091c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fde:	ee07 3a90 	vmov	s15, r3
 8008fe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fe6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fea:	eddf 5a78 	vldr	s11, [pc, #480]	; 80091cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008fee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ff6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009002:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009006:	e087      	b.n	8009118 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	ee07 3a90 	vmov	s15, r3
 800900e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009012:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80091d0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800901a:	4b6a      	ldr	r3, [pc, #424]	; (80091c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800901c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800901e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009022:	ee07 3a90 	vmov	s15, r3
 8009026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800902a:	ed97 6a03 	vldr	s12, [r7, #12]
 800902e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80091cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800903a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800903e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009046:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800904a:	e065      	b.n	8009118 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	ee07 3a90 	vmov	s15, r3
 8009052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009056:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80091d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800905a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800905e:	4b59      	ldr	r3, [pc, #356]	; (80091c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009066:	ee07 3a90 	vmov	s15, r3
 800906a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800906e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009072:	eddf 5a56 	vldr	s11, [pc, #344]	; 80091cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800907a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800907e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800908a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800908e:	e043      	b.n	8009118 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	ee07 3a90 	vmov	s15, r3
 8009096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800909a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80091d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800909e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090a2:	4b48      	ldr	r3, [pc, #288]	; (80091c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090aa:	ee07 3a90 	vmov	s15, r3
 80090ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80090b6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80091cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80090ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090d2:	e021      	b.n	8009118 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	ee07 3a90 	vmov	s15, r3
 80090da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090de:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80091d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80090e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090e6:	4b37      	ldr	r3, [pc, #220]	; (80091c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090ee:	ee07 3a90 	vmov	s15, r3
 80090f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80090fa:	eddf 5a34 	vldr	s11, [pc, #208]	; 80091cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80090fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009106:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800910a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800910e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009112:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009116:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009118:	4b2a      	ldr	r3, [pc, #168]	; (80091c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800911a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800911c:	0a5b      	lsrs	r3, r3, #9
 800911e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009122:	ee07 3a90 	vmov	s15, r3
 8009126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800912a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800912e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009132:	edd7 6a07 	vldr	s13, [r7, #28]
 8009136:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800913a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800913e:	ee17 2a90 	vmov	r2, s15
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009146:	4b1f      	ldr	r3, [pc, #124]	; (80091c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800914a:	0c1b      	lsrs	r3, r3, #16
 800914c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009150:	ee07 3a90 	vmov	s15, r3
 8009154:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009158:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800915c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009160:	edd7 6a07 	vldr	s13, [r7, #28]
 8009164:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009168:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800916c:	ee17 2a90 	vmov	r2, s15
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009174:	4b13      	ldr	r3, [pc, #76]	; (80091c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009178:	0e1b      	lsrs	r3, r3, #24
 800917a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800917e:	ee07 3a90 	vmov	s15, r3
 8009182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009186:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800918a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800918e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009192:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009196:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800919a:	ee17 2a90 	vmov	r2, s15
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80091a2:	e008      	b.n	80091b6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2200      	movs	r2, #0
 80091a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2200      	movs	r2, #0
 80091ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2200      	movs	r2, #0
 80091b4:	609a      	str	r2, [r3, #8]
}
 80091b6:	bf00      	nop
 80091b8:	3724      	adds	r7, #36	; 0x24
 80091ba:	46bd      	mov	sp, r7
 80091bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c0:	4770      	bx	lr
 80091c2:	bf00      	nop
 80091c4:	58024400 	.word	0x58024400
 80091c8:	03d09000 	.word	0x03d09000
 80091cc:	46000000 	.word	0x46000000
 80091d0:	4c742400 	.word	0x4c742400
 80091d4:	4a742400 	.word	0x4a742400
 80091d8:	4af42400 	.word	0x4af42400

080091dc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80091e6:	2300      	movs	r3, #0
 80091e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80091ea:	4b53      	ldr	r3, [pc, #332]	; (8009338 <RCCEx_PLL2_Config+0x15c>)
 80091ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ee:	f003 0303 	and.w	r3, r3, #3
 80091f2:	2b03      	cmp	r3, #3
 80091f4:	d101      	bne.n	80091fa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80091f6:	2301      	movs	r3, #1
 80091f8:	e099      	b.n	800932e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80091fa:	4b4f      	ldr	r3, [pc, #316]	; (8009338 <RCCEx_PLL2_Config+0x15c>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4a4e      	ldr	r2, [pc, #312]	; (8009338 <RCCEx_PLL2_Config+0x15c>)
 8009200:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009204:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009206:	f7f8 fe2d 	bl	8001e64 <HAL_GetTick>
 800920a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800920c:	e008      	b.n	8009220 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800920e:	f7f8 fe29 	bl	8001e64 <HAL_GetTick>
 8009212:	4602      	mov	r2, r0
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	1ad3      	subs	r3, r2, r3
 8009218:	2b02      	cmp	r3, #2
 800921a:	d901      	bls.n	8009220 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800921c:	2303      	movs	r3, #3
 800921e:	e086      	b.n	800932e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009220:	4b45      	ldr	r3, [pc, #276]	; (8009338 <RCCEx_PLL2_Config+0x15c>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009228:	2b00      	cmp	r3, #0
 800922a:	d1f0      	bne.n	800920e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800922c:	4b42      	ldr	r3, [pc, #264]	; (8009338 <RCCEx_PLL2_Config+0x15c>)
 800922e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009230:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	031b      	lsls	r3, r3, #12
 800923a:	493f      	ldr	r1, [pc, #252]	; (8009338 <RCCEx_PLL2_Config+0x15c>)
 800923c:	4313      	orrs	r3, r2
 800923e:	628b      	str	r3, [r1, #40]	; 0x28
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	3b01      	subs	r3, #1
 8009246:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	689b      	ldr	r3, [r3, #8]
 800924e:	3b01      	subs	r3, #1
 8009250:	025b      	lsls	r3, r3, #9
 8009252:	b29b      	uxth	r3, r3
 8009254:	431a      	orrs	r2, r3
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	68db      	ldr	r3, [r3, #12]
 800925a:	3b01      	subs	r3, #1
 800925c:	041b      	lsls	r3, r3, #16
 800925e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009262:	431a      	orrs	r2, r3
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	691b      	ldr	r3, [r3, #16]
 8009268:	3b01      	subs	r3, #1
 800926a:	061b      	lsls	r3, r3, #24
 800926c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009270:	4931      	ldr	r1, [pc, #196]	; (8009338 <RCCEx_PLL2_Config+0x15c>)
 8009272:	4313      	orrs	r3, r2
 8009274:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009276:	4b30      	ldr	r3, [pc, #192]	; (8009338 <RCCEx_PLL2_Config+0x15c>)
 8009278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800927a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	695b      	ldr	r3, [r3, #20]
 8009282:	492d      	ldr	r1, [pc, #180]	; (8009338 <RCCEx_PLL2_Config+0x15c>)
 8009284:	4313      	orrs	r3, r2
 8009286:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009288:	4b2b      	ldr	r3, [pc, #172]	; (8009338 <RCCEx_PLL2_Config+0x15c>)
 800928a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800928c:	f023 0220 	bic.w	r2, r3, #32
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	699b      	ldr	r3, [r3, #24]
 8009294:	4928      	ldr	r1, [pc, #160]	; (8009338 <RCCEx_PLL2_Config+0x15c>)
 8009296:	4313      	orrs	r3, r2
 8009298:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800929a:	4b27      	ldr	r3, [pc, #156]	; (8009338 <RCCEx_PLL2_Config+0x15c>)
 800929c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800929e:	4a26      	ldr	r2, [pc, #152]	; (8009338 <RCCEx_PLL2_Config+0x15c>)
 80092a0:	f023 0310 	bic.w	r3, r3, #16
 80092a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80092a6:	4b24      	ldr	r3, [pc, #144]	; (8009338 <RCCEx_PLL2_Config+0x15c>)
 80092a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80092aa:	4b24      	ldr	r3, [pc, #144]	; (800933c <RCCEx_PLL2_Config+0x160>)
 80092ac:	4013      	ands	r3, r2
 80092ae:	687a      	ldr	r2, [r7, #4]
 80092b0:	69d2      	ldr	r2, [r2, #28]
 80092b2:	00d2      	lsls	r2, r2, #3
 80092b4:	4920      	ldr	r1, [pc, #128]	; (8009338 <RCCEx_PLL2_Config+0x15c>)
 80092b6:	4313      	orrs	r3, r2
 80092b8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80092ba:	4b1f      	ldr	r3, [pc, #124]	; (8009338 <RCCEx_PLL2_Config+0x15c>)
 80092bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092be:	4a1e      	ldr	r2, [pc, #120]	; (8009338 <RCCEx_PLL2_Config+0x15c>)
 80092c0:	f043 0310 	orr.w	r3, r3, #16
 80092c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d106      	bne.n	80092da <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80092cc:	4b1a      	ldr	r3, [pc, #104]	; (8009338 <RCCEx_PLL2_Config+0x15c>)
 80092ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092d0:	4a19      	ldr	r2, [pc, #100]	; (8009338 <RCCEx_PLL2_Config+0x15c>)
 80092d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80092d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80092d8:	e00f      	b.n	80092fa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d106      	bne.n	80092ee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80092e0:	4b15      	ldr	r3, [pc, #84]	; (8009338 <RCCEx_PLL2_Config+0x15c>)
 80092e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092e4:	4a14      	ldr	r2, [pc, #80]	; (8009338 <RCCEx_PLL2_Config+0x15c>)
 80092e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80092ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80092ec:	e005      	b.n	80092fa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80092ee:	4b12      	ldr	r3, [pc, #72]	; (8009338 <RCCEx_PLL2_Config+0x15c>)
 80092f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092f2:	4a11      	ldr	r2, [pc, #68]	; (8009338 <RCCEx_PLL2_Config+0x15c>)
 80092f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80092f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80092fa:	4b0f      	ldr	r3, [pc, #60]	; (8009338 <RCCEx_PLL2_Config+0x15c>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	4a0e      	ldr	r2, [pc, #56]	; (8009338 <RCCEx_PLL2_Config+0x15c>)
 8009300:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009304:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009306:	f7f8 fdad 	bl	8001e64 <HAL_GetTick>
 800930a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800930c:	e008      	b.n	8009320 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800930e:	f7f8 fda9 	bl	8001e64 <HAL_GetTick>
 8009312:	4602      	mov	r2, r0
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	1ad3      	subs	r3, r2, r3
 8009318:	2b02      	cmp	r3, #2
 800931a:	d901      	bls.n	8009320 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800931c:	2303      	movs	r3, #3
 800931e:	e006      	b.n	800932e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009320:	4b05      	ldr	r3, [pc, #20]	; (8009338 <RCCEx_PLL2_Config+0x15c>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009328:	2b00      	cmp	r3, #0
 800932a:	d0f0      	beq.n	800930e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800932c:	7bfb      	ldrb	r3, [r7, #15]
}
 800932e:	4618      	mov	r0, r3
 8009330:	3710      	adds	r7, #16
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	58024400 	.word	0x58024400
 800933c:	ffff0007 	.word	0xffff0007

08009340 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b084      	sub	sp, #16
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800934a:	2300      	movs	r3, #0
 800934c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800934e:	4b53      	ldr	r3, [pc, #332]	; (800949c <RCCEx_PLL3_Config+0x15c>)
 8009350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009352:	f003 0303 	and.w	r3, r3, #3
 8009356:	2b03      	cmp	r3, #3
 8009358:	d101      	bne.n	800935e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800935a:	2301      	movs	r3, #1
 800935c:	e099      	b.n	8009492 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800935e:	4b4f      	ldr	r3, [pc, #316]	; (800949c <RCCEx_PLL3_Config+0x15c>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	4a4e      	ldr	r2, [pc, #312]	; (800949c <RCCEx_PLL3_Config+0x15c>)
 8009364:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009368:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800936a:	f7f8 fd7b 	bl	8001e64 <HAL_GetTick>
 800936e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009370:	e008      	b.n	8009384 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009372:	f7f8 fd77 	bl	8001e64 <HAL_GetTick>
 8009376:	4602      	mov	r2, r0
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	1ad3      	subs	r3, r2, r3
 800937c:	2b02      	cmp	r3, #2
 800937e:	d901      	bls.n	8009384 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009380:	2303      	movs	r3, #3
 8009382:	e086      	b.n	8009492 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009384:	4b45      	ldr	r3, [pc, #276]	; (800949c <RCCEx_PLL3_Config+0x15c>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800938c:	2b00      	cmp	r3, #0
 800938e:	d1f0      	bne.n	8009372 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009390:	4b42      	ldr	r3, [pc, #264]	; (800949c <RCCEx_PLL3_Config+0x15c>)
 8009392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009394:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	051b      	lsls	r3, r3, #20
 800939e:	493f      	ldr	r1, [pc, #252]	; (800949c <RCCEx_PLL3_Config+0x15c>)
 80093a0:	4313      	orrs	r3, r2
 80093a2:	628b      	str	r3, [r1, #40]	; 0x28
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	3b01      	subs	r3, #1
 80093aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	689b      	ldr	r3, [r3, #8]
 80093b2:	3b01      	subs	r3, #1
 80093b4:	025b      	lsls	r3, r3, #9
 80093b6:	b29b      	uxth	r3, r3
 80093b8:	431a      	orrs	r2, r3
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	68db      	ldr	r3, [r3, #12]
 80093be:	3b01      	subs	r3, #1
 80093c0:	041b      	lsls	r3, r3, #16
 80093c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80093c6:	431a      	orrs	r2, r3
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	691b      	ldr	r3, [r3, #16]
 80093cc:	3b01      	subs	r3, #1
 80093ce:	061b      	lsls	r3, r3, #24
 80093d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80093d4:	4931      	ldr	r1, [pc, #196]	; (800949c <RCCEx_PLL3_Config+0x15c>)
 80093d6:	4313      	orrs	r3, r2
 80093d8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80093da:	4b30      	ldr	r3, [pc, #192]	; (800949c <RCCEx_PLL3_Config+0x15c>)
 80093dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	695b      	ldr	r3, [r3, #20]
 80093e6:	492d      	ldr	r1, [pc, #180]	; (800949c <RCCEx_PLL3_Config+0x15c>)
 80093e8:	4313      	orrs	r3, r2
 80093ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80093ec:	4b2b      	ldr	r3, [pc, #172]	; (800949c <RCCEx_PLL3_Config+0x15c>)
 80093ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093f0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	699b      	ldr	r3, [r3, #24]
 80093f8:	4928      	ldr	r1, [pc, #160]	; (800949c <RCCEx_PLL3_Config+0x15c>)
 80093fa:	4313      	orrs	r3, r2
 80093fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80093fe:	4b27      	ldr	r3, [pc, #156]	; (800949c <RCCEx_PLL3_Config+0x15c>)
 8009400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009402:	4a26      	ldr	r2, [pc, #152]	; (800949c <RCCEx_PLL3_Config+0x15c>)
 8009404:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009408:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800940a:	4b24      	ldr	r3, [pc, #144]	; (800949c <RCCEx_PLL3_Config+0x15c>)
 800940c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800940e:	4b24      	ldr	r3, [pc, #144]	; (80094a0 <RCCEx_PLL3_Config+0x160>)
 8009410:	4013      	ands	r3, r2
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	69d2      	ldr	r2, [r2, #28]
 8009416:	00d2      	lsls	r2, r2, #3
 8009418:	4920      	ldr	r1, [pc, #128]	; (800949c <RCCEx_PLL3_Config+0x15c>)
 800941a:	4313      	orrs	r3, r2
 800941c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800941e:	4b1f      	ldr	r3, [pc, #124]	; (800949c <RCCEx_PLL3_Config+0x15c>)
 8009420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009422:	4a1e      	ldr	r2, [pc, #120]	; (800949c <RCCEx_PLL3_Config+0x15c>)
 8009424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009428:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d106      	bne.n	800943e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009430:	4b1a      	ldr	r3, [pc, #104]	; (800949c <RCCEx_PLL3_Config+0x15c>)
 8009432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009434:	4a19      	ldr	r2, [pc, #100]	; (800949c <RCCEx_PLL3_Config+0x15c>)
 8009436:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800943a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800943c:	e00f      	b.n	800945e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	2b01      	cmp	r3, #1
 8009442:	d106      	bne.n	8009452 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009444:	4b15      	ldr	r3, [pc, #84]	; (800949c <RCCEx_PLL3_Config+0x15c>)
 8009446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009448:	4a14      	ldr	r2, [pc, #80]	; (800949c <RCCEx_PLL3_Config+0x15c>)
 800944a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800944e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009450:	e005      	b.n	800945e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009452:	4b12      	ldr	r3, [pc, #72]	; (800949c <RCCEx_PLL3_Config+0x15c>)
 8009454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009456:	4a11      	ldr	r2, [pc, #68]	; (800949c <RCCEx_PLL3_Config+0x15c>)
 8009458:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800945c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800945e:	4b0f      	ldr	r3, [pc, #60]	; (800949c <RCCEx_PLL3_Config+0x15c>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4a0e      	ldr	r2, [pc, #56]	; (800949c <RCCEx_PLL3_Config+0x15c>)
 8009464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009468:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800946a:	f7f8 fcfb 	bl	8001e64 <HAL_GetTick>
 800946e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009470:	e008      	b.n	8009484 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009472:	f7f8 fcf7 	bl	8001e64 <HAL_GetTick>
 8009476:	4602      	mov	r2, r0
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	1ad3      	subs	r3, r2, r3
 800947c:	2b02      	cmp	r3, #2
 800947e:	d901      	bls.n	8009484 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009480:	2303      	movs	r3, #3
 8009482:	e006      	b.n	8009492 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009484:	4b05      	ldr	r3, [pc, #20]	; (800949c <RCCEx_PLL3_Config+0x15c>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800948c:	2b00      	cmp	r3, #0
 800948e:	d0f0      	beq.n	8009472 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009490:	7bfb      	ldrb	r3, [r7, #15]
}
 8009492:	4618      	mov	r0, r3
 8009494:	3710      	adds	r7, #16
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
 800949a:	bf00      	nop
 800949c:	58024400 	.word	0x58024400
 80094a0:	ffff0007 	.word	0xffff0007

080094a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d101      	bne.n	80094b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80094b2:	2301      	movs	r3, #1
 80094b4:	e049      	b.n	800954a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094bc:	b2db      	uxtb	r3, r3
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d106      	bne.n	80094d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2200      	movs	r2, #0
 80094c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f000 f841 	bl	8009552 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2202      	movs	r2, #2
 80094d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681a      	ldr	r2, [r3, #0]
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	3304      	adds	r3, #4
 80094e0:	4619      	mov	r1, r3
 80094e2:	4610      	mov	r0, r2
 80094e4:	f000 fa00 	bl	80098e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2201      	movs	r2, #1
 80094ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2201      	movs	r2, #1
 80094f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2201      	movs	r2, #1
 80094fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2201      	movs	r2, #1
 8009504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2201      	movs	r2, #1
 800950c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2201      	movs	r2, #1
 8009514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2201      	movs	r2, #1
 800951c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2201      	movs	r2, #1
 8009524:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2201      	movs	r2, #1
 800952c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2201      	movs	r2, #1
 8009534:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2201      	movs	r2, #1
 800953c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2201      	movs	r2, #1
 8009544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009548:	2300      	movs	r3, #0
}
 800954a:	4618      	mov	r0, r3
 800954c:	3708      	adds	r7, #8
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}

08009552 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009552:	b480      	push	{r7}
 8009554:	b083      	sub	sp, #12
 8009556:	af00      	add	r7, sp, #0
 8009558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800955a:	bf00      	nop
 800955c:	370c      	adds	r7, #12
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr
	...

08009568 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009568:	b480      	push	{r7}
 800956a:	b085      	sub	sp, #20
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009576:	b2db      	uxtb	r3, r3
 8009578:	2b01      	cmp	r3, #1
 800957a:	d001      	beq.n	8009580 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800957c:	2301      	movs	r3, #1
 800957e:	e054      	b.n	800962a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2202      	movs	r2, #2
 8009584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	68da      	ldr	r2, [r3, #12]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f042 0201 	orr.w	r2, r2, #1
 8009596:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4a26      	ldr	r2, [pc, #152]	; (8009638 <HAL_TIM_Base_Start_IT+0xd0>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d022      	beq.n	80095e8 <HAL_TIM_Base_Start_IT+0x80>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095aa:	d01d      	beq.n	80095e8 <HAL_TIM_Base_Start_IT+0x80>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a22      	ldr	r2, [pc, #136]	; (800963c <HAL_TIM_Base_Start_IT+0xd4>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d018      	beq.n	80095e8 <HAL_TIM_Base_Start_IT+0x80>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4a21      	ldr	r2, [pc, #132]	; (8009640 <HAL_TIM_Base_Start_IT+0xd8>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d013      	beq.n	80095e8 <HAL_TIM_Base_Start_IT+0x80>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4a1f      	ldr	r2, [pc, #124]	; (8009644 <HAL_TIM_Base_Start_IT+0xdc>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d00e      	beq.n	80095e8 <HAL_TIM_Base_Start_IT+0x80>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	4a1e      	ldr	r2, [pc, #120]	; (8009648 <HAL_TIM_Base_Start_IT+0xe0>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d009      	beq.n	80095e8 <HAL_TIM_Base_Start_IT+0x80>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4a1c      	ldr	r2, [pc, #112]	; (800964c <HAL_TIM_Base_Start_IT+0xe4>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d004      	beq.n	80095e8 <HAL_TIM_Base_Start_IT+0x80>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	4a1b      	ldr	r2, [pc, #108]	; (8009650 <HAL_TIM_Base_Start_IT+0xe8>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d115      	bne.n	8009614 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	689a      	ldr	r2, [r3, #8]
 80095ee:	4b19      	ldr	r3, [pc, #100]	; (8009654 <HAL_TIM_Base_Start_IT+0xec>)
 80095f0:	4013      	ands	r3, r2
 80095f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2b06      	cmp	r3, #6
 80095f8:	d015      	beq.n	8009626 <HAL_TIM_Base_Start_IT+0xbe>
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009600:	d011      	beq.n	8009626 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	681a      	ldr	r2, [r3, #0]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f042 0201 	orr.w	r2, r2, #1
 8009610:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009612:	e008      	b.n	8009626 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	681a      	ldr	r2, [r3, #0]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f042 0201 	orr.w	r2, r2, #1
 8009622:	601a      	str	r2, [r3, #0]
 8009624:	e000      	b.n	8009628 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009626:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009628:	2300      	movs	r3, #0
}
 800962a:	4618      	mov	r0, r3
 800962c:	3714      	adds	r7, #20
 800962e:	46bd      	mov	sp, r7
 8009630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009634:	4770      	bx	lr
 8009636:	bf00      	nop
 8009638:	40010000 	.word	0x40010000
 800963c:	40000400 	.word	0x40000400
 8009640:	40000800 	.word	0x40000800
 8009644:	40000c00 	.word	0x40000c00
 8009648:	40010400 	.word	0x40010400
 800964c:	40001800 	.word	0x40001800
 8009650:	40014000 	.word	0x40014000
 8009654:	00010007 	.word	0x00010007

08009658 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b082      	sub	sp, #8
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	691b      	ldr	r3, [r3, #16]
 8009666:	f003 0302 	and.w	r3, r3, #2
 800966a:	2b02      	cmp	r3, #2
 800966c:	d122      	bne.n	80096b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	68db      	ldr	r3, [r3, #12]
 8009674:	f003 0302 	and.w	r3, r3, #2
 8009678:	2b02      	cmp	r3, #2
 800967a:	d11b      	bne.n	80096b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f06f 0202 	mvn.w	r2, #2
 8009684:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2201      	movs	r2, #1
 800968a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	699b      	ldr	r3, [r3, #24]
 8009692:	f003 0303 	and.w	r3, r3, #3
 8009696:	2b00      	cmp	r3, #0
 8009698:	d003      	beq.n	80096a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f000 f905 	bl	80098aa <HAL_TIM_IC_CaptureCallback>
 80096a0:	e005      	b.n	80096ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f000 f8f7 	bl	8009896 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f000 f908 	bl	80098be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2200      	movs	r2, #0
 80096b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	691b      	ldr	r3, [r3, #16]
 80096ba:	f003 0304 	and.w	r3, r3, #4
 80096be:	2b04      	cmp	r3, #4
 80096c0:	d122      	bne.n	8009708 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	68db      	ldr	r3, [r3, #12]
 80096c8:	f003 0304 	and.w	r3, r3, #4
 80096cc:	2b04      	cmp	r3, #4
 80096ce:	d11b      	bne.n	8009708 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f06f 0204 	mvn.w	r2, #4
 80096d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2202      	movs	r2, #2
 80096de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	699b      	ldr	r3, [r3, #24]
 80096e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d003      	beq.n	80096f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f000 f8db 	bl	80098aa <HAL_TIM_IC_CaptureCallback>
 80096f4:	e005      	b.n	8009702 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f000 f8cd 	bl	8009896 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f000 f8de 	bl	80098be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2200      	movs	r2, #0
 8009706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	691b      	ldr	r3, [r3, #16]
 800970e:	f003 0308 	and.w	r3, r3, #8
 8009712:	2b08      	cmp	r3, #8
 8009714:	d122      	bne.n	800975c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	68db      	ldr	r3, [r3, #12]
 800971c:	f003 0308 	and.w	r3, r3, #8
 8009720:	2b08      	cmp	r3, #8
 8009722:	d11b      	bne.n	800975c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f06f 0208 	mvn.w	r2, #8
 800972c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2204      	movs	r2, #4
 8009732:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	69db      	ldr	r3, [r3, #28]
 800973a:	f003 0303 	and.w	r3, r3, #3
 800973e:	2b00      	cmp	r3, #0
 8009740:	d003      	beq.n	800974a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 f8b1 	bl	80098aa <HAL_TIM_IC_CaptureCallback>
 8009748:	e005      	b.n	8009756 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 f8a3 	bl	8009896 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f000 f8b4 	bl	80098be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2200      	movs	r2, #0
 800975a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	691b      	ldr	r3, [r3, #16]
 8009762:	f003 0310 	and.w	r3, r3, #16
 8009766:	2b10      	cmp	r3, #16
 8009768:	d122      	bne.n	80097b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	68db      	ldr	r3, [r3, #12]
 8009770:	f003 0310 	and.w	r3, r3, #16
 8009774:	2b10      	cmp	r3, #16
 8009776:	d11b      	bne.n	80097b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f06f 0210 	mvn.w	r2, #16
 8009780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2208      	movs	r2, #8
 8009786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	69db      	ldr	r3, [r3, #28]
 800978e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009792:	2b00      	cmp	r3, #0
 8009794:	d003      	beq.n	800979e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 f887 	bl	80098aa <HAL_TIM_IC_CaptureCallback>
 800979c:	e005      	b.n	80097aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f000 f879 	bl	8009896 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f000 f88a 	bl	80098be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2200      	movs	r2, #0
 80097ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	691b      	ldr	r3, [r3, #16]
 80097b6:	f003 0301 	and.w	r3, r3, #1
 80097ba:	2b01      	cmp	r3, #1
 80097bc:	d10e      	bne.n	80097dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	68db      	ldr	r3, [r3, #12]
 80097c4:	f003 0301 	and.w	r3, r3, #1
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d107      	bne.n	80097dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f06f 0201 	mvn.w	r2, #1
 80097d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f7f7 fe3c 	bl	8001454 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	691b      	ldr	r3, [r3, #16]
 80097e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097e6:	2b80      	cmp	r3, #128	; 0x80
 80097e8:	d10e      	bne.n	8009808 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	68db      	ldr	r3, [r3, #12]
 80097f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097f4:	2b80      	cmp	r3, #128	; 0x80
 80097f6:	d107      	bne.n	8009808 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f000 f914 	bl	8009a30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	691b      	ldr	r3, [r3, #16]
 800980e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009816:	d10e      	bne.n	8009836 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	68db      	ldr	r3, [r3, #12]
 800981e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009822:	2b80      	cmp	r3, #128	; 0x80
 8009824:	d107      	bne.n	8009836 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800982e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f000 f907 	bl	8009a44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	691b      	ldr	r3, [r3, #16]
 800983c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009840:	2b40      	cmp	r3, #64	; 0x40
 8009842:	d10e      	bne.n	8009862 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	68db      	ldr	r3, [r3, #12]
 800984a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800984e:	2b40      	cmp	r3, #64	; 0x40
 8009850:	d107      	bne.n	8009862 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800985a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f000 f838 	bl	80098d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	691b      	ldr	r3, [r3, #16]
 8009868:	f003 0320 	and.w	r3, r3, #32
 800986c:	2b20      	cmp	r3, #32
 800986e:	d10e      	bne.n	800988e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	68db      	ldr	r3, [r3, #12]
 8009876:	f003 0320 	and.w	r3, r3, #32
 800987a:	2b20      	cmp	r3, #32
 800987c:	d107      	bne.n	800988e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f06f 0220 	mvn.w	r2, #32
 8009886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f000 f8c7 	bl	8009a1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800988e:	bf00      	nop
 8009890:	3708      	adds	r7, #8
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}

08009896 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009896:	b480      	push	{r7}
 8009898:	b083      	sub	sp, #12
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800989e:	bf00      	nop
 80098a0:	370c      	adds	r7, #12
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr

080098aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80098aa:	b480      	push	{r7}
 80098ac:	b083      	sub	sp, #12
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80098b2:	bf00      	nop
 80098b4:	370c      	adds	r7, #12
 80098b6:	46bd      	mov	sp, r7
 80098b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098bc:	4770      	bx	lr

080098be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80098be:	b480      	push	{r7}
 80098c0:	b083      	sub	sp, #12
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80098c6:	bf00      	nop
 80098c8:	370c      	adds	r7, #12
 80098ca:	46bd      	mov	sp, r7
 80098cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d0:	4770      	bx	lr

080098d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80098d2:	b480      	push	{r7}
 80098d4:	b083      	sub	sp, #12
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80098da:	bf00      	nop
 80098dc:	370c      	adds	r7, #12
 80098de:	46bd      	mov	sp, r7
 80098e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e4:	4770      	bx	lr
	...

080098e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b085      	sub	sp, #20
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	4a40      	ldr	r2, [pc, #256]	; (80099fc <TIM_Base_SetConfig+0x114>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d013      	beq.n	8009928 <TIM_Base_SetConfig+0x40>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009906:	d00f      	beq.n	8009928 <TIM_Base_SetConfig+0x40>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	4a3d      	ldr	r2, [pc, #244]	; (8009a00 <TIM_Base_SetConfig+0x118>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d00b      	beq.n	8009928 <TIM_Base_SetConfig+0x40>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	4a3c      	ldr	r2, [pc, #240]	; (8009a04 <TIM_Base_SetConfig+0x11c>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d007      	beq.n	8009928 <TIM_Base_SetConfig+0x40>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	4a3b      	ldr	r2, [pc, #236]	; (8009a08 <TIM_Base_SetConfig+0x120>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d003      	beq.n	8009928 <TIM_Base_SetConfig+0x40>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	4a3a      	ldr	r2, [pc, #232]	; (8009a0c <TIM_Base_SetConfig+0x124>)
 8009924:	4293      	cmp	r3, r2
 8009926:	d108      	bne.n	800993a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800992e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	685b      	ldr	r3, [r3, #4]
 8009934:	68fa      	ldr	r2, [r7, #12]
 8009936:	4313      	orrs	r3, r2
 8009938:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	4a2f      	ldr	r2, [pc, #188]	; (80099fc <TIM_Base_SetConfig+0x114>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d01f      	beq.n	8009982 <TIM_Base_SetConfig+0x9a>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009948:	d01b      	beq.n	8009982 <TIM_Base_SetConfig+0x9a>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	4a2c      	ldr	r2, [pc, #176]	; (8009a00 <TIM_Base_SetConfig+0x118>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d017      	beq.n	8009982 <TIM_Base_SetConfig+0x9a>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	4a2b      	ldr	r2, [pc, #172]	; (8009a04 <TIM_Base_SetConfig+0x11c>)
 8009956:	4293      	cmp	r3, r2
 8009958:	d013      	beq.n	8009982 <TIM_Base_SetConfig+0x9a>
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	4a2a      	ldr	r2, [pc, #168]	; (8009a08 <TIM_Base_SetConfig+0x120>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d00f      	beq.n	8009982 <TIM_Base_SetConfig+0x9a>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	4a29      	ldr	r2, [pc, #164]	; (8009a0c <TIM_Base_SetConfig+0x124>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d00b      	beq.n	8009982 <TIM_Base_SetConfig+0x9a>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	4a28      	ldr	r2, [pc, #160]	; (8009a10 <TIM_Base_SetConfig+0x128>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d007      	beq.n	8009982 <TIM_Base_SetConfig+0x9a>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	4a27      	ldr	r2, [pc, #156]	; (8009a14 <TIM_Base_SetConfig+0x12c>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d003      	beq.n	8009982 <TIM_Base_SetConfig+0x9a>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	4a26      	ldr	r2, [pc, #152]	; (8009a18 <TIM_Base_SetConfig+0x130>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d108      	bne.n	8009994 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009988:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	68db      	ldr	r3, [r3, #12]
 800998e:	68fa      	ldr	r2, [r7, #12]
 8009990:	4313      	orrs	r3, r2
 8009992:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	695b      	ldr	r3, [r3, #20]
 800999e:	4313      	orrs	r3, r2
 80099a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	68fa      	ldr	r2, [r7, #12]
 80099a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	689a      	ldr	r2, [r3, #8]
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	681a      	ldr	r2, [r3, #0]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	4a10      	ldr	r2, [pc, #64]	; (80099fc <TIM_Base_SetConfig+0x114>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d00f      	beq.n	80099e0 <TIM_Base_SetConfig+0xf8>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	4a12      	ldr	r2, [pc, #72]	; (8009a0c <TIM_Base_SetConfig+0x124>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d00b      	beq.n	80099e0 <TIM_Base_SetConfig+0xf8>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	4a11      	ldr	r2, [pc, #68]	; (8009a10 <TIM_Base_SetConfig+0x128>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d007      	beq.n	80099e0 <TIM_Base_SetConfig+0xf8>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	4a10      	ldr	r2, [pc, #64]	; (8009a14 <TIM_Base_SetConfig+0x12c>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d003      	beq.n	80099e0 <TIM_Base_SetConfig+0xf8>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	4a0f      	ldr	r2, [pc, #60]	; (8009a18 <TIM_Base_SetConfig+0x130>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d103      	bne.n	80099e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	691a      	ldr	r2, [r3, #16]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2201      	movs	r2, #1
 80099ec:	615a      	str	r2, [r3, #20]
}
 80099ee:	bf00      	nop
 80099f0:	3714      	adds	r7, #20
 80099f2:	46bd      	mov	sp, r7
 80099f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f8:	4770      	bx	lr
 80099fa:	bf00      	nop
 80099fc:	40010000 	.word	0x40010000
 8009a00:	40000400 	.word	0x40000400
 8009a04:	40000800 	.word	0x40000800
 8009a08:	40000c00 	.word	0x40000c00
 8009a0c:	40010400 	.word	0x40010400
 8009a10:	40014000 	.word	0x40014000
 8009a14:	40014400 	.word	0x40014400
 8009a18:	40014800 	.word	0x40014800

08009a1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b083      	sub	sp, #12
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009a24:	bf00      	nop
 8009a26:	370c      	adds	r7, #12
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr

08009a30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b083      	sub	sp, #12
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009a38:	bf00      	nop
 8009a3a:	370c      	adds	r7, #12
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr

08009a44 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b083      	sub	sp, #12
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009a4c:	bf00      	nop
 8009a4e:	370c      	adds	r7, #12
 8009a50:	46bd      	mov	sp, r7
 8009a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a56:	4770      	bx	lr

08009a58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b082      	sub	sp, #8
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d101      	bne.n	8009a6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009a66:	2301      	movs	r3, #1
 8009a68:	e042      	b.n	8009af0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d106      	bne.n	8009a82 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2200      	movs	r2, #0
 8009a78:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f7f7 ffa3 	bl	80019c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2224      	movs	r2, #36	; 0x24
 8009a86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	681a      	ldr	r2, [r3, #0]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f022 0201 	bic.w	r2, r2, #1
 8009a98:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f000 fd2a 	bl	800a4f4 <UART_SetConfig>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2b01      	cmp	r3, #1
 8009aa4:	d101      	bne.n	8009aaa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	e022      	b.n	8009af0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d002      	beq.n	8009ab8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f001 fa86 	bl	800afc4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	685a      	ldr	r2, [r3, #4]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009ac6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	689a      	ldr	r2, [r3, #8]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009ad6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	681a      	ldr	r2, [r3, #0]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f042 0201 	orr.w	r2, r2, #1
 8009ae6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f001 fb0d 	bl	800b108 <UART_CheckIdleState>
 8009aee:	4603      	mov	r3, r0
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3708      	adds	r7, #8
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}

08009af8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b08a      	sub	sp, #40	; 0x28
 8009afc:	af02      	add	r7, sp, #8
 8009afe:	60f8      	str	r0, [r7, #12]
 8009b00:	60b9      	str	r1, [r7, #8]
 8009b02:	603b      	str	r3, [r7, #0]
 8009b04:	4613      	mov	r3, r2
 8009b06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b0e:	2b20      	cmp	r3, #32
 8009b10:	d17b      	bne.n	8009c0a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d002      	beq.n	8009b1e <HAL_UART_Transmit+0x26>
 8009b18:	88fb      	ldrh	r3, [r7, #6]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d101      	bne.n	8009b22 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009b1e:	2301      	movs	r3, #1
 8009b20:	e074      	b.n	8009c0c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	2200      	movs	r2, #0
 8009b26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	2221      	movs	r2, #33	; 0x21
 8009b2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009b32:	f7f8 f997 	bl	8001e64 <HAL_GetTick>
 8009b36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	88fa      	ldrh	r2, [r7, #6]
 8009b3c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	88fa      	ldrh	r2, [r7, #6]
 8009b44:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	689b      	ldr	r3, [r3, #8]
 8009b4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b50:	d108      	bne.n	8009b64 <HAL_UART_Transmit+0x6c>
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	691b      	ldr	r3, [r3, #16]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d104      	bne.n	8009b64 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	61bb      	str	r3, [r7, #24]
 8009b62:	e003      	b.n	8009b6c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009b6c:	e030      	b.n	8009bd0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	9300      	str	r3, [sp, #0]
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	2200      	movs	r2, #0
 8009b76:	2180      	movs	r1, #128	; 0x80
 8009b78:	68f8      	ldr	r0, [r7, #12]
 8009b7a:	f001 fb6f 	bl	800b25c <UART_WaitOnFlagUntilTimeout>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d005      	beq.n	8009b90 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2220      	movs	r2, #32
 8009b88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8009b8c:	2303      	movs	r3, #3
 8009b8e:	e03d      	b.n	8009c0c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009b90:	69fb      	ldr	r3, [r7, #28]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d10b      	bne.n	8009bae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009b96:	69bb      	ldr	r3, [r7, #24]
 8009b98:	881b      	ldrh	r3, [r3, #0]
 8009b9a:	461a      	mov	r2, r3
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009ba4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009ba6:	69bb      	ldr	r3, [r7, #24]
 8009ba8:	3302      	adds	r3, #2
 8009baa:	61bb      	str	r3, [r7, #24]
 8009bac:	e007      	b.n	8009bbe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009bae:	69fb      	ldr	r3, [r7, #28]
 8009bb0:	781a      	ldrb	r2, [r3, #0]
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009bb8:	69fb      	ldr	r3, [r7, #28]
 8009bba:	3301      	adds	r3, #1
 8009bbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009bc4:	b29b      	uxth	r3, r3
 8009bc6:	3b01      	subs	r3, #1
 8009bc8:	b29a      	uxth	r2, r3
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009bd6:	b29b      	uxth	r3, r3
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d1c8      	bne.n	8009b6e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	9300      	str	r3, [sp, #0]
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	2200      	movs	r2, #0
 8009be4:	2140      	movs	r1, #64	; 0x40
 8009be6:	68f8      	ldr	r0, [r7, #12]
 8009be8:	f001 fb38 	bl	800b25c <UART_WaitOnFlagUntilTimeout>
 8009bec:	4603      	mov	r3, r0
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d005      	beq.n	8009bfe <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2220      	movs	r2, #32
 8009bf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8009bfa:	2303      	movs	r3, #3
 8009bfc:	e006      	b.n	8009c0c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2220      	movs	r2, #32
 8009c02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8009c06:	2300      	movs	r3, #0
 8009c08:	e000      	b.n	8009c0c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009c0a:	2302      	movs	r3, #2
  }
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3720      	adds	r7, #32
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}

08009c14 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b08a      	sub	sp, #40	; 0x28
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	60f8      	str	r0, [r7, #12]
 8009c1c:	60b9      	str	r1, [r7, #8]
 8009c1e:	4613      	mov	r3, r2
 8009c20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c28:	2b20      	cmp	r3, #32
 8009c2a:	d137      	bne.n	8009c9c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d002      	beq.n	8009c38 <HAL_UART_Receive_IT+0x24>
 8009c32:	88fb      	ldrh	r3, [r7, #6]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d101      	bne.n	8009c3c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009c38:	2301      	movs	r3, #1
 8009c3a:	e030      	b.n	8009c9e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	4a18      	ldr	r2, [pc, #96]	; (8009ca8 <HAL_UART_Receive_IT+0x94>)
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d01f      	beq.n	8009c8c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d018      	beq.n	8009c8c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	e853 3f00 	ldrex	r3, [r3]
 8009c66:	613b      	str	r3, [r7, #16]
   return(result);
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	461a      	mov	r2, r3
 8009c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c78:	623b      	str	r3, [r7, #32]
 8009c7a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c7c:	69f9      	ldr	r1, [r7, #28]
 8009c7e:	6a3a      	ldr	r2, [r7, #32]
 8009c80:	e841 2300 	strex	r3, r2, [r1]
 8009c84:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c86:	69bb      	ldr	r3, [r7, #24]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d1e6      	bne.n	8009c5a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009c8c:	88fb      	ldrh	r3, [r7, #6]
 8009c8e:	461a      	mov	r2, r3
 8009c90:	68b9      	ldr	r1, [r7, #8]
 8009c92:	68f8      	ldr	r0, [r7, #12]
 8009c94:	f001 fb4a 	bl	800b32c <UART_Start_Receive_IT>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	e000      	b.n	8009c9e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009c9c:	2302      	movs	r3, #2
  }
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3728      	adds	r7, #40	; 0x28
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}
 8009ca6:	bf00      	nop
 8009ca8:	58000c00 	.word	0x58000c00

08009cac <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b08a      	sub	sp, #40	; 0x28
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	60f8      	str	r0, [r7, #12]
 8009cb4:	60b9      	str	r1, [r7, #8]
 8009cb6:	4613      	mov	r3, r2
 8009cb8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009cc0:	2b20      	cmp	r3, #32
 8009cc2:	d137      	bne.n	8009d34 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d002      	beq.n	8009cd0 <HAL_UART_Receive_DMA+0x24>
 8009cca:	88fb      	ldrh	r3, [r7, #6]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d101      	bne.n	8009cd4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	e030      	b.n	8009d36 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	4a18      	ldr	r2, [pc, #96]	; (8009d40 <HAL_UART_Receive_DMA+0x94>)
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d01f      	beq.n	8009d24 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	685b      	ldr	r3, [r3, #4]
 8009cea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d018      	beq.n	8009d24 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	e853 3f00 	ldrex	r3, [r3]
 8009cfe:	613b      	str	r3, [r7, #16]
   return(result);
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009d06:	627b      	str	r3, [r7, #36]	; 0x24
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	461a      	mov	r2, r3
 8009d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d10:	623b      	str	r3, [r7, #32]
 8009d12:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d14:	69f9      	ldr	r1, [r7, #28]
 8009d16:	6a3a      	ldr	r2, [r7, #32]
 8009d18:	e841 2300 	strex	r3, r2, [r1]
 8009d1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8009d1e:	69bb      	ldr	r3, [r7, #24]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d1e6      	bne.n	8009cf2 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009d24:	88fb      	ldrh	r3, [r7, #6]
 8009d26:	461a      	mov	r2, r3
 8009d28:	68b9      	ldr	r1, [r7, #8]
 8009d2a:	68f8      	ldr	r0, [r7, #12]
 8009d2c:	f001 fc20 	bl	800b570 <UART_Start_Receive_DMA>
 8009d30:	4603      	mov	r3, r0
 8009d32:	e000      	b.n	8009d36 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009d34:	2302      	movs	r3, #2
  }
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3728      	adds	r7, #40	; 0x28
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
 8009d3e:	bf00      	nop
 8009d40:	58000c00 	.word	0x58000c00

08009d44 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b0ba      	sub	sp, #232	; 0xe8
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	69db      	ldr	r3, [r3, #28]
 8009d52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	689b      	ldr	r3, [r3, #8]
 8009d66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009d6a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009d6e:	f640 030f 	movw	r3, #2063	; 0x80f
 8009d72:	4013      	ands	r3, r2
 8009d74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009d78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d11b      	bne.n	8009db8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d84:	f003 0320 	and.w	r3, r3, #32
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d015      	beq.n	8009db8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d90:	f003 0320 	and.w	r3, r3, #32
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d105      	bne.n	8009da4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009d98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d009      	beq.n	8009db8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	f000 8377 	beq.w	800a49c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	4798      	blx	r3
      }
      return;
 8009db6:	e371      	b.n	800a49c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009db8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	f000 8123 	beq.w	800a008 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009dc2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009dc6:	4b8d      	ldr	r3, [pc, #564]	; (8009ffc <HAL_UART_IRQHandler+0x2b8>)
 8009dc8:	4013      	ands	r3, r2
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d106      	bne.n	8009ddc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009dce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009dd2:	4b8b      	ldr	r3, [pc, #556]	; (800a000 <HAL_UART_IRQHandler+0x2bc>)
 8009dd4:	4013      	ands	r3, r2
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	f000 8116 	beq.w	800a008 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009ddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009de0:	f003 0301 	and.w	r3, r3, #1
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d011      	beq.n	8009e0c <HAL_UART_IRQHandler+0xc8>
 8009de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d00b      	beq.n	8009e0c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	2201      	movs	r2, #1
 8009dfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e02:	f043 0201 	orr.w	r2, r3, #1
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e10:	f003 0302 	and.w	r3, r3, #2
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d011      	beq.n	8009e3c <HAL_UART_IRQHandler+0xf8>
 8009e18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e1c:	f003 0301 	and.w	r3, r3, #1
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d00b      	beq.n	8009e3c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	2202      	movs	r2, #2
 8009e2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e32:	f043 0204 	orr.w	r2, r3, #4
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e40:	f003 0304 	and.w	r3, r3, #4
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d011      	beq.n	8009e6c <HAL_UART_IRQHandler+0x128>
 8009e48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e4c:	f003 0301 	and.w	r3, r3, #1
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d00b      	beq.n	8009e6c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	2204      	movs	r2, #4
 8009e5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e62:	f043 0202 	orr.w	r2, r3, #2
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009e6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e70:	f003 0308 	and.w	r3, r3, #8
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d017      	beq.n	8009ea8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009e78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e7c:	f003 0320 	and.w	r3, r3, #32
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d105      	bne.n	8009e90 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009e84:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009e88:	4b5c      	ldr	r3, [pc, #368]	; (8009ffc <HAL_UART_IRQHandler+0x2b8>)
 8009e8a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d00b      	beq.n	8009ea8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	2208      	movs	r2, #8
 8009e96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e9e:	f043 0208 	orr.w	r2, r3, #8
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009ea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009eac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d012      	beq.n	8009eda <HAL_UART_IRQHandler+0x196>
 8009eb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009eb8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d00c      	beq.n	8009eda <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009ec8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ed0:	f043 0220 	orr.w	r2, r3, #32
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	f000 82dd 	beq.w	800a4a0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009eea:	f003 0320 	and.w	r3, r3, #32
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d013      	beq.n	8009f1a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009ef2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ef6:	f003 0320 	and.w	r3, r3, #32
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d105      	bne.n	8009f0a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009efe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d007      	beq.n	8009f1a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d003      	beq.n	8009f1a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f20:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	689b      	ldr	r3, [r3, #8]
 8009f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f2e:	2b40      	cmp	r3, #64	; 0x40
 8009f30:	d005      	beq.n	8009f3e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009f32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009f36:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d054      	beq.n	8009fe8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f001 fbfe 	bl	800b740 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	689b      	ldr	r3, [r3, #8]
 8009f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f4e:	2b40      	cmp	r3, #64	; 0x40
 8009f50:	d146      	bne.n	8009fe0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	3308      	adds	r3, #8
 8009f58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009f60:	e853 3f00 	ldrex	r3, [r3]
 8009f64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009f68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	3308      	adds	r3, #8
 8009f7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009f7e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009f82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009f8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009f8e:	e841 2300 	strex	r3, r2, [r1]
 8009f92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009f96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d1d9      	bne.n	8009f52 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d017      	beq.n	8009fd8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009fae:	4a15      	ldr	r2, [pc, #84]	; (800a004 <HAL_UART_IRQHandler+0x2c0>)
 8009fb0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f7f9 f967 	bl	800328c <HAL_DMA_Abort_IT>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d019      	beq.n	8009ff8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fcc:	687a      	ldr	r2, [r7, #4]
 8009fce:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8009fd2:	4610      	mov	r0, r2
 8009fd4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fd6:	e00f      	b.n	8009ff8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f000 fa81 	bl	800a4e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fde:	e00b      	b.n	8009ff8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f000 fa7d 	bl	800a4e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fe6:	e007      	b.n	8009ff8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f000 fa79 	bl	800a4e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8009ff6:	e253      	b.n	800a4a0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ff8:	bf00      	nop
    return;
 8009ffa:	e251      	b.n	800a4a0 <HAL_UART_IRQHandler+0x75c>
 8009ffc:	10000001 	.word	0x10000001
 800a000:	04000120 	.word	0x04000120
 800a004:	0800b9f3 	.word	0x0800b9f3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a00c:	2b01      	cmp	r3, #1
 800a00e:	f040 81e7 	bne.w	800a3e0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a016:	f003 0310 	and.w	r3, r3, #16
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	f000 81e0 	beq.w	800a3e0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a024:	f003 0310 	and.w	r3, r3, #16
 800a028:	2b00      	cmp	r3, #0
 800a02a:	f000 81d9 	beq.w	800a3e0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	2210      	movs	r2, #16
 800a034:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	689b      	ldr	r3, [r3, #8]
 800a03c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a040:	2b40      	cmp	r3, #64	; 0x40
 800a042:	f040 8151 	bne.w	800a2e8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	4a96      	ldr	r2, [pc, #600]	; (800a2a8 <HAL_UART_IRQHandler+0x564>)
 800a050:	4293      	cmp	r3, r2
 800a052:	d068      	beq.n	800a126 <HAL_UART_IRQHandler+0x3e2>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	4a93      	ldr	r2, [pc, #588]	; (800a2ac <HAL_UART_IRQHandler+0x568>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	d061      	beq.n	800a126 <HAL_UART_IRQHandler+0x3e2>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	4a91      	ldr	r2, [pc, #580]	; (800a2b0 <HAL_UART_IRQHandler+0x56c>)
 800a06c:	4293      	cmp	r3, r2
 800a06e:	d05a      	beq.n	800a126 <HAL_UART_IRQHandler+0x3e2>
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	4a8e      	ldr	r2, [pc, #568]	; (800a2b4 <HAL_UART_IRQHandler+0x570>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d053      	beq.n	800a126 <HAL_UART_IRQHandler+0x3e2>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	4a8c      	ldr	r2, [pc, #560]	; (800a2b8 <HAL_UART_IRQHandler+0x574>)
 800a088:	4293      	cmp	r3, r2
 800a08a:	d04c      	beq.n	800a126 <HAL_UART_IRQHandler+0x3e2>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	4a89      	ldr	r2, [pc, #548]	; (800a2bc <HAL_UART_IRQHandler+0x578>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d045      	beq.n	800a126 <HAL_UART_IRQHandler+0x3e2>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	4a87      	ldr	r2, [pc, #540]	; (800a2c0 <HAL_UART_IRQHandler+0x57c>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d03e      	beq.n	800a126 <HAL_UART_IRQHandler+0x3e2>
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4a84      	ldr	r2, [pc, #528]	; (800a2c4 <HAL_UART_IRQHandler+0x580>)
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d037      	beq.n	800a126 <HAL_UART_IRQHandler+0x3e2>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	4a82      	ldr	r2, [pc, #520]	; (800a2c8 <HAL_UART_IRQHandler+0x584>)
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d030      	beq.n	800a126 <HAL_UART_IRQHandler+0x3e2>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	4a7f      	ldr	r2, [pc, #508]	; (800a2cc <HAL_UART_IRQHandler+0x588>)
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	d029      	beq.n	800a126 <HAL_UART_IRQHandler+0x3e2>
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	4a7d      	ldr	r2, [pc, #500]	; (800a2d0 <HAL_UART_IRQHandler+0x58c>)
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	d022      	beq.n	800a126 <HAL_UART_IRQHandler+0x3e2>
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	4a7a      	ldr	r2, [pc, #488]	; (800a2d4 <HAL_UART_IRQHandler+0x590>)
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d01b      	beq.n	800a126 <HAL_UART_IRQHandler+0x3e2>
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	4a78      	ldr	r2, [pc, #480]	; (800a2d8 <HAL_UART_IRQHandler+0x594>)
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	d014      	beq.n	800a126 <HAL_UART_IRQHandler+0x3e2>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	4a75      	ldr	r2, [pc, #468]	; (800a2dc <HAL_UART_IRQHandler+0x598>)
 800a106:	4293      	cmp	r3, r2
 800a108:	d00d      	beq.n	800a126 <HAL_UART_IRQHandler+0x3e2>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	4a73      	ldr	r2, [pc, #460]	; (800a2e0 <HAL_UART_IRQHandler+0x59c>)
 800a114:	4293      	cmp	r3, r2
 800a116:	d006      	beq.n	800a126 <HAL_UART_IRQHandler+0x3e2>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4a70      	ldr	r2, [pc, #448]	; (800a2e4 <HAL_UART_IRQHandler+0x5a0>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d106      	bne.n	800a134 <HAL_UART_IRQHandler+0x3f0>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	685b      	ldr	r3, [r3, #4]
 800a130:	b29b      	uxth	r3, r3
 800a132:	e005      	b.n	800a140 <HAL_UART_IRQHandler+0x3fc>
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	b29b      	uxth	r3, r3
 800a140:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a144:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a148:	2b00      	cmp	r3, #0
 800a14a:	f000 81ab 	beq.w	800a4a4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a154:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a158:	429a      	cmp	r2, r3
 800a15a:	f080 81a3 	bcs.w	800a4a4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a164:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a16e:	69db      	ldr	r3, [r3, #28]
 800a170:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a174:	f000 8087 	beq.w	800a286 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a180:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a184:	e853 3f00 	ldrex	r3, [r3]
 800a188:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a18c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a190:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a194:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	461a      	mov	r2, r3
 800a19e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a1a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a1a6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a1ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a1b2:	e841 2300 	strex	r3, r2, [r1]
 800a1b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a1ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d1da      	bne.n	800a178 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	3308      	adds	r3, #8
 800a1c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a1cc:	e853 3f00 	ldrex	r3, [r3]
 800a1d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a1d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a1d4:	f023 0301 	bic.w	r3, r3, #1
 800a1d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	3308      	adds	r3, #8
 800a1e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a1e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a1ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a1ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a1f2:	e841 2300 	strex	r3, r2, [r1]
 800a1f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a1f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d1e1      	bne.n	800a1c2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	3308      	adds	r3, #8
 800a204:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a206:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a208:	e853 3f00 	ldrex	r3, [r3]
 800a20c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a20e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a210:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a214:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	3308      	adds	r3, #8
 800a21e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a222:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a224:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a226:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a228:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a22a:	e841 2300 	strex	r3, r2, [r1]
 800a22e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a230:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a232:	2b00      	cmp	r3, #0
 800a234:	d1e3      	bne.n	800a1fe <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2220      	movs	r2, #32
 800a23a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2200      	movs	r2, #0
 800a242:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a24a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a24c:	e853 3f00 	ldrex	r3, [r3]
 800a250:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a252:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a254:	f023 0310 	bic.w	r3, r3, #16
 800a258:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	461a      	mov	r2, r3
 800a262:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a266:	65bb      	str	r3, [r7, #88]	; 0x58
 800a268:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a26a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a26c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a26e:	e841 2300 	strex	r3, r2, [r1]
 800a272:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a274:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a276:	2b00      	cmp	r3, #0
 800a278:	d1e4      	bne.n	800a244 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a280:	4618      	mov	r0, r3
 800a282:	f7f8 fce5 	bl	8002c50 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2202      	movs	r2, #2
 800a28a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a298:	b29b      	uxth	r3, r3
 800a29a:	1ad3      	subs	r3, r2, r3
 800a29c:	b29b      	uxth	r3, r3
 800a29e:	4619      	mov	r1, r3
 800a2a0:	6878      	ldr	r0, [r7, #4]
 800a2a2:	f7f6 fd0f 	bl	8000cc4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a2a6:	e0fd      	b.n	800a4a4 <HAL_UART_IRQHandler+0x760>
 800a2a8:	40020010 	.word	0x40020010
 800a2ac:	40020028 	.word	0x40020028
 800a2b0:	40020040 	.word	0x40020040
 800a2b4:	40020058 	.word	0x40020058
 800a2b8:	40020070 	.word	0x40020070
 800a2bc:	40020088 	.word	0x40020088
 800a2c0:	400200a0 	.word	0x400200a0
 800a2c4:	400200b8 	.word	0x400200b8
 800a2c8:	40020410 	.word	0x40020410
 800a2cc:	40020428 	.word	0x40020428
 800a2d0:	40020440 	.word	0x40020440
 800a2d4:	40020458 	.word	0x40020458
 800a2d8:	40020470 	.word	0x40020470
 800a2dc:	40020488 	.word	0x40020488
 800a2e0:	400204a0 	.word	0x400204a0
 800a2e4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a2f4:	b29b      	uxth	r3, r3
 800a2f6:	1ad3      	subs	r3, r2, r3
 800a2f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a302:	b29b      	uxth	r3, r3
 800a304:	2b00      	cmp	r3, #0
 800a306:	f000 80cf 	beq.w	800a4a8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800a30a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a30e:	2b00      	cmp	r3, #0
 800a310:	f000 80ca 	beq.w	800a4a8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a31a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a31c:	e853 3f00 	ldrex	r3, [r3]
 800a320:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a324:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a328:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	461a      	mov	r2, r3
 800a332:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a336:	647b      	str	r3, [r7, #68]	; 0x44
 800a338:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a33a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a33c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a33e:	e841 2300 	strex	r3, r2, [r1]
 800a342:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a346:	2b00      	cmp	r3, #0
 800a348:	d1e4      	bne.n	800a314 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	3308      	adds	r3, #8
 800a350:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a354:	e853 3f00 	ldrex	r3, [r3]
 800a358:	623b      	str	r3, [r7, #32]
   return(result);
 800a35a:	6a3a      	ldr	r2, [r7, #32]
 800a35c:	4b55      	ldr	r3, [pc, #340]	; (800a4b4 <HAL_UART_IRQHandler+0x770>)
 800a35e:	4013      	ands	r3, r2
 800a360:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	3308      	adds	r3, #8
 800a36a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a36e:	633a      	str	r2, [r7, #48]	; 0x30
 800a370:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a372:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a376:	e841 2300 	strex	r3, r2, [r1]
 800a37a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d1e3      	bne.n	800a34a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2220      	movs	r2, #32
 800a386:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2200      	movs	r2, #0
 800a38e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2200      	movs	r2, #0
 800a394:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	e853 3f00 	ldrex	r3, [r3]
 800a3a2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	f023 0310 	bic.w	r3, r3, #16
 800a3aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	461a      	mov	r2, r3
 800a3b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a3b8:	61fb      	str	r3, [r7, #28]
 800a3ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3bc:	69b9      	ldr	r1, [r7, #24]
 800a3be:	69fa      	ldr	r2, [r7, #28]
 800a3c0:	e841 2300 	strex	r3, r2, [r1]
 800a3c4:	617b      	str	r3, [r7, #20]
   return(result);
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d1e4      	bne.n	800a396 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2202      	movs	r2, #2
 800a3d0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a3d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a3d6:	4619      	mov	r1, r3
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f7f6 fc73 	bl	8000cc4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a3de:	e063      	b.n	800a4a8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a3e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d00e      	beq.n	800a40a <HAL_UART_IRQHandler+0x6c6>
 800a3ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a3f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d008      	beq.n	800a40a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a400:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f002 f852 	bl	800c4ac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a408:	e051      	b.n	800a4ae <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a40a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a40e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a412:	2b00      	cmp	r3, #0
 800a414:	d014      	beq.n	800a440 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a416:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a41a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d105      	bne.n	800a42e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a422:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a426:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d008      	beq.n	800a440 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a432:	2b00      	cmp	r3, #0
 800a434:	d03a      	beq.n	800a4ac <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	4798      	blx	r3
    }
    return;
 800a43e:	e035      	b.n	800a4ac <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d009      	beq.n	800a460 <HAL_UART_IRQHandler+0x71c>
 800a44c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a454:	2b00      	cmp	r3, #0
 800a456:	d003      	beq.n	800a460 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f001 fae0 	bl	800ba1e <UART_EndTransmit_IT>
    return;
 800a45e:	e026      	b.n	800a4ae <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a464:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d009      	beq.n	800a480 <HAL_UART_IRQHandler+0x73c>
 800a46c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a470:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a474:	2b00      	cmp	r3, #0
 800a476:	d003      	beq.n	800a480 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f002 f82b 	bl	800c4d4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a47e:	e016      	b.n	800a4ae <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a480:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a484:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d010      	beq.n	800a4ae <HAL_UART_IRQHandler+0x76a>
 800a48c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a490:	2b00      	cmp	r3, #0
 800a492:	da0c      	bge.n	800a4ae <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f002 f813 	bl	800c4c0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a49a:	e008      	b.n	800a4ae <HAL_UART_IRQHandler+0x76a>
      return;
 800a49c:	bf00      	nop
 800a49e:	e006      	b.n	800a4ae <HAL_UART_IRQHandler+0x76a>
    return;
 800a4a0:	bf00      	nop
 800a4a2:	e004      	b.n	800a4ae <HAL_UART_IRQHandler+0x76a>
      return;
 800a4a4:	bf00      	nop
 800a4a6:	e002      	b.n	800a4ae <HAL_UART_IRQHandler+0x76a>
      return;
 800a4a8:	bf00      	nop
 800a4aa:	e000      	b.n	800a4ae <HAL_UART_IRQHandler+0x76a>
    return;
 800a4ac:	bf00      	nop
  }
}
 800a4ae:	37e8      	adds	r7, #232	; 0xe8
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}
 800a4b4:	effffffe 	.word	0xeffffffe

0800a4b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b083      	sub	sp, #12
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a4c0:	bf00      	nop
 800a4c2:	370c      	adds	r7, #12
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ca:	4770      	bx	lr

0800a4cc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b083      	sub	sp, #12
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a4d4:	bf00      	nop
 800a4d6:	370c      	adds	r7, #12
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr

0800a4e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b083      	sub	sp, #12
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a4e8:	bf00      	nop
 800a4ea:	370c      	adds	r7, #12
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f2:	4770      	bx	lr

0800a4f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a4f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a4f8:	b092      	sub	sp, #72	; 0x48
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a4fe:	2300      	movs	r3, #0
 800a500:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	689a      	ldr	r2, [r3, #8]
 800a508:	697b      	ldr	r3, [r7, #20]
 800a50a:	691b      	ldr	r3, [r3, #16]
 800a50c:	431a      	orrs	r2, r3
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	695b      	ldr	r3, [r3, #20]
 800a512:	431a      	orrs	r2, r3
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	69db      	ldr	r3, [r3, #28]
 800a518:	4313      	orrs	r3, r2
 800a51a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	681a      	ldr	r2, [r3, #0]
 800a522:	4bbe      	ldr	r3, [pc, #760]	; (800a81c <UART_SetConfig+0x328>)
 800a524:	4013      	ands	r3, r2
 800a526:	697a      	ldr	r2, [r7, #20]
 800a528:	6812      	ldr	r2, [r2, #0]
 800a52a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a52c:	430b      	orrs	r3, r1
 800a52e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	685b      	ldr	r3, [r3, #4]
 800a536:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	68da      	ldr	r2, [r3, #12]
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	430a      	orrs	r2, r1
 800a544:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	699b      	ldr	r3, [r3, #24]
 800a54a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	4ab3      	ldr	r2, [pc, #716]	; (800a820 <UART_SetConfig+0x32c>)
 800a552:	4293      	cmp	r3, r2
 800a554:	d004      	beq.n	800a560 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	6a1b      	ldr	r3, [r3, #32]
 800a55a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a55c:	4313      	orrs	r3, r2
 800a55e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	689a      	ldr	r2, [r3, #8]
 800a566:	4baf      	ldr	r3, [pc, #700]	; (800a824 <UART_SetConfig+0x330>)
 800a568:	4013      	ands	r3, r2
 800a56a:	697a      	ldr	r2, [r7, #20]
 800a56c:	6812      	ldr	r2, [r2, #0]
 800a56e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a570:	430b      	orrs	r3, r1
 800a572:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a57a:	f023 010f 	bic.w	r1, r3, #15
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	430a      	orrs	r2, r1
 800a588:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	4aa6      	ldr	r2, [pc, #664]	; (800a828 <UART_SetConfig+0x334>)
 800a590:	4293      	cmp	r3, r2
 800a592:	d177      	bne.n	800a684 <UART_SetConfig+0x190>
 800a594:	4ba5      	ldr	r3, [pc, #660]	; (800a82c <UART_SetConfig+0x338>)
 800a596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a598:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a59c:	2b28      	cmp	r3, #40	; 0x28
 800a59e:	d86d      	bhi.n	800a67c <UART_SetConfig+0x188>
 800a5a0:	a201      	add	r2, pc, #4	; (adr r2, 800a5a8 <UART_SetConfig+0xb4>)
 800a5a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5a6:	bf00      	nop
 800a5a8:	0800a64d 	.word	0x0800a64d
 800a5ac:	0800a67d 	.word	0x0800a67d
 800a5b0:	0800a67d 	.word	0x0800a67d
 800a5b4:	0800a67d 	.word	0x0800a67d
 800a5b8:	0800a67d 	.word	0x0800a67d
 800a5bc:	0800a67d 	.word	0x0800a67d
 800a5c0:	0800a67d 	.word	0x0800a67d
 800a5c4:	0800a67d 	.word	0x0800a67d
 800a5c8:	0800a655 	.word	0x0800a655
 800a5cc:	0800a67d 	.word	0x0800a67d
 800a5d0:	0800a67d 	.word	0x0800a67d
 800a5d4:	0800a67d 	.word	0x0800a67d
 800a5d8:	0800a67d 	.word	0x0800a67d
 800a5dc:	0800a67d 	.word	0x0800a67d
 800a5e0:	0800a67d 	.word	0x0800a67d
 800a5e4:	0800a67d 	.word	0x0800a67d
 800a5e8:	0800a65d 	.word	0x0800a65d
 800a5ec:	0800a67d 	.word	0x0800a67d
 800a5f0:	0800a67d 	.word	0x0800a67d
 800a5f4:	0800a67d 	.word	0x0800a67d
 800a5f8:	0800a67d 	.word	0x0800a67d
 800a5fc:	0800a67d 	.word	0x0800a67d
 800a600:	0800a67d 	.word	0x0800a67d
 800a604:	0800a67d 	.word	0x0800a67d
 800a608:	0800a665 	.word	0x0800a665
 800a60c:	0800a67d 	.word	0x0800a67d
 800a610:	0800a67d 	.word	0x0800a67d
 800a614:	0800a67d 	.word	0x0800a67d
 800a618:	0800a67d 	.word	0x0800a67d
 800a61c:	0800a67d 	.word	0x0800a67d
 800a620:	0800a67d 	.word	0x0800a67d
 800a624:	0800a67d 	.word	0x0800a67d
 800a628:	0800a66d 	.word	0x0800a66d
 800a62c:	0800a67d 	.word	0x0800a67d
 800a630:	0800a67d 	.word	0x0800a67d
 800a634:	0800a67d 	.word	0x0800a67d
 800a638:	0800a67d 	.word	0x0800a67d
 800a63c:	0800a67d 	.word	0x0800a67d
 800a640:	0800a67d 	.word	0x0800a67d
 800a644:	0800a67d 	.word	0x0800a67d
 800a648:	0800a675 	.word	0x0800a675
 800a64c:	2301      	movs	r3, #1
 800a64e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a652:	e222      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800a654:	2304      	movs	r3, #4
 800a656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a65a:	e21e      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800a65c:	2308      	movs	r3, #8
 800a65e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a662:	e21a      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800a664:	2310      	movs	r3, #16
 800a666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a66a:	e216      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800a66c:	2320      	movs	r3, #32
 800a66e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a672:	e212      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800a674:	2340      	movs	r3, #64	; 0x40
 800a676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a67a:	e20e      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800a67c:	2380      	movs	r3, #128	; 0x80
 800a67e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a682:	e20a      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800a684:	697b      	ldr	r3, [r7, #20]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	4a69      	ldr	r2, [pc, #420]	; (800a830 <UART_SetConfig+0x33c>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d130      	bne.n	800a6f0 <UART_SetConfig+0x1fc>
 800a68e:	4b67      	ldr	r3, [pc, #412]	; (800a82c <UART_SetConfig+0x338>)
 800a690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a692:	f003 0307 	and.w	r3, r3, #7
 800a696:	2b05      	cmp	r3, #5
 800a698:	d826      	bhi.n	800a6e8 <UART_SetConfig+0x1f4>
 800a69a:	a201      	add	r2, pc, #4	; (adr r2, 800a6a0 <UART_SetConfig+0x1ac>)
 800a69c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6a0:	0800a6b9 	.word	0x0800a6b9
 800a6a4:	0800a6c1 	.word	0x0800a6c1
 800a6a8:	0800a6c9 	.word	0x0800a6c9
 800a6ac:	0800a6d1 	.word	0x0800a6d1
 800a6b0:	0800a6d9 	.word	0x0800a6d9
 800a6b4:	0800a6e1 	.word	0x0800a6e1
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6be:	e1ec      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800a6c0:	2304      	movs	r3, #4
 800a6c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6c6:	e1e8      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800a6c8:	2308      	movs	r3, #8
 800a6ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6ce:	e1e4      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800a6d0:	2310      	movs	r3, #16
 800a6d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6d6:	e1e0      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800a6d8:	2320      	movs	r3, #32
 800a6da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6de:	e1dc      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800a6e0:	2340      	movs	r3, #64	; 0x40
 800a6e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6e6:	e1d8      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800a6e8:	2380      	movs	r3, #128	; 0x80
 800a6ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6ee:	e1d4      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800a6f0:	697b      	ldr	r3, [r7, #20]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	4a4f      	ldr	r2, [pc, #316]	; (800a834 <UART_SetConfig+0x340>)
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d130      	bne.n	800a75c <UART_SetConfig+0x268>
 800a6fa:	4b4c      	ldr	r3, [pc, #304]	; (800a82c <UART_SetConfig+0x338>)
 800a6fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6fe:	f003 0307 	and.w	r3, r3, #7
 800a702:	2b05      	cmp	r3, #5
 800a704:	d826      	bhi.n	800a754 <UART_SetConfig+0x260>
 800a706:	a201      	add	r2, pc, #4	; (adr r2, 800a70c <UART_SetConfig+0x218>)
 800a708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a70c:	0800a725 	.word	0x0800a725
 800a710:	0800a72d 	.word	0x0800a72d
 800a714:	0800a735 	.word	0x0800a735
 800a718:	0800a73d 	.word	0x0800a73d
 800a71c:	0800a745 	.word	0x0800a745
 800a720:	0800a74d 	.word	0x0800a74d
 800a724:	2300      	movs	r3, #0
 800a726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a72a:	e1b6      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800a72c:	2304      	movs	r3, #4
 800a72e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a732:	e1b2      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800a734:	2308      	movs	r3, #8
 800a736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a73a:	e1ae      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800a73c:	2310      	movs	r3, #16
 800a73e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a742:	e1aa      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800a744:	2320      	movs	r3, #32
 800a746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a74a:	e1a6      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800a74c:	2340      	movs	r3, #64	; 0x40
 800a74e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a752:	e1a2      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800a754:	2380      	movs	r3, #128	; 0x80
 800a756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a75a:	e19e      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	4a35      	ldr	r2, [pc, #212]	; (800a838 <UART_SetConfig+0x344>)
 800a762:	4293      	cmp	r3, r2
 800a764:	d130      	bne.n	800a7c8 <UART_SetConfig+0x2d4>
 800a766:	4b31      	ldr	r3, [pc, #196]	; (800a82c <UART_SetConfig+0x338>)
 800a768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a76a:	f003 0307 	and.w	r3, r3, #7
 800a76e:	2b05      	cmp	r3, #5
 800a770:	d826      	bhi.n	800a7c0 <UART_SetConfig+0x2cc>
 800a772:	a201      	add	r2, pc, #4	; (adr r2, 800a778 <UART_SetConfig+0x284>)
 800a774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a778:	0800a791 	.word	0x0800a791
 800a77c:	0800a799 	.word	0x0800a799
 800a780:	0800a7a1 	.word	0x0800a7a1
 800a784:	0800a7a9 	.word	0x0800a7a9
 800a788:	0800a7b1 	.word	0x0800a7b1
 800a78c:	0800a7b9 	.word	0x0800a7b9
 800a790:	2300      	movs	r3, #0
 800a792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a796:	e180      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800a798:	2304      	movs	r3, #4
 800a79a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a79e:	e17c      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800a7a0:	2308      	movs	r3, #8
 800a7a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7a6:	e178      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800a7a8:	2310      	movs	r3, #16
 800a7aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7ae:	e174      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800a7b0:	2320      	movs	r3, #32
 800a7b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7b6:	e170      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800a7b8:	2340      	movs	r3, #64	; 0x40
 800a7ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7be:	e16c      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800a7c0:	2380      	movs	r3, #128	; 0x80
 800a7c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7c6:	e168      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800a7c8:	697b      	ldr	r3, [r7, #20]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	4a1b      	ldr	r2, [pc, #108]	; (800a83c <UART_SetConfig+0x348>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d142      	bne.n	800a858 <UART_SetConfig+0x364>
 800a7d2:	4b16      	ldr	r3, [pc, #88]	; (800a82c <UART_SetConfig+0x338>)
 800a7d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7d6:	f003 0307 	and.w	r3, r3, #7
 800a7da:	2b05      	cmp	r3, #5
 800a7dc:	d838      	bhi.n	800a850 <UART_SetConfig+0x35c>
 800a7de:	a201      	add	r2, pc, #4	; (adr r2, 800a7e4 <UART_SetConfig+0x2f0>)
 800a7e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7e4:	0800a7fd 	.word	0x0800a7fd
 800a7e8:	0800a805 	.word	0x0800a805
 800a7ec:	0800a80d 	.word	0x0800a80d
 800a7f0:	0800a815 	.word	0x0800a815
 800a7f4:	0800a841 	.word	0x0800a841
 800a7f8:	0800a849 	.word	0x0800a849
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a802:	e14a      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800a804:	2304      	movs	r3, #4
 800a806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a80a:	e146      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800a80c:	2308      	movs	r3, #8
 800a80e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a812:	e142      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800a814:	2310      	movs	r3, #16
 800a816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a81a:	e13e      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800a81c:	cfff69f3 	.word	0xcfff69f3
 800a820:	58000c00 	.word	0x58000c00
 800a824:	11fff4ff 	.word	0x11fff4ff
 800a828:	40011000 	.word	0x40011000
 800a82c:	58024400 	.word	0x58024400
 800a830:	40004400 	.word	0x40004400
 800a834:	40004800 	.word	0x40004800
 800a838:	40004c00 	.word	0x40004c00
 800a83c:	40005000 	.word	0x40005000
 800a840:	2320      	movs	r3, #32
 800a842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a846:	e128      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800a848:	2340      	movs	r3, #64	; 0x40
 800a84a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a84e:	e124      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800a850:	2380      	movs	r3, #128	; 0x80
 800a852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a856:	e120      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	4acb      	ldr	r2, [pc, #812]	; (800ab8c <UART_SetConfig+0x698>)
 800a85e:	4293      	cmp	r3, r2
 800a860:	d176      	bne.n	800a950 <UART_SetConfig+0x45c>
 800a862:	4bcb      	ldr	r3, [pc, #812]	; (800ab90 <UART_SetConfig+0x69c>)
 800a864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a866:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a86a:	2b28      	cmp	r3, #40	; 0x28
 800a86c:	d86c      	bhi.n	800a948 <UART_SetConfig+0x454>
 800a86e:	a201      	add	r2, pc, #4	; (adr r2, 800a874 <UART_SetConfig+0x380>)
 800a870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a874:	0800a919 	.word	0x0800a919
 800a878:	0800a949 	.word	0x0800a949
 800a87c:	0800a949 	.word	0x0800a949
 800a880:	0800a949 	.word	0x0800a949
 800a884:	0800a949 	.word	0x0800a949
 800a888:	0800a949 	.word	0x0800a949
 800a88c:	0800a949 	.word	0x0800a949
 800a890:	0800a949 	.word	0x0800a949
 800a894:	0800a921 	.word	0x0800a921
 800a898:	0800a949 	.word	0x0800a949
 800a89c:	0800a949 	.word	0x0800a949
 800a8a0:	0800a949 	.word	0x0800a949
 800a8a4:	0800a949 	.word	0x0800a949
 800a8a8:	0800a949 	.word	0x0800a949
 800a8ac:	0800a949 	.word	0x0800a949
 800a8b0:	0800a949 	.word	0x0800a949
 800a8b4:	0800a929 	.word	0x0800a929
 800a8b8:	0800a949 	.word	0x0800a949
 800a8bc:	0800a949 	.word	0x0800a949
 800a8c0:	0800a949 	.word	0x0800a949
 800a8c4:	0800a949 	.word	0x0800a949
 800a8c8:	0800a949 	.word	0x0800a949
 800a8cc:	0800a949 	.word	0x0800a949
 800a8d0:	0800a949 	.word	0x0800a949
 800a8d4:	0800a931 	.word	0x0800a931
 800a8d8:	0800a949 	.word	0x0800a949
 800a8dc:	0800a949 	.word	0x0800a949
 800a8e0:	0800a949 	.word	0x0800a949
 800a8e4:	0800a949 	.word	0x0800a949
 800a8e8:	0800a949 	.word	0x0800a949
 800a8ec:	0800a949 	.word	0x0800a949
 800a8f0:	0800a949 	.word	0x0800a949
 800a8f4:	0800a939 	.word	0x0800a939
 800a8f8:	0800a949 	.word	0x0800a949
 800a8fc:	0800a949 	.word	0x0800a949
 800a900:	0800a949 	.word	0x0800a949
 800a904:	0800a949 	.word	0x0800a949
 800a908:	0800a949 	.word	0x0800a949
 800a90c:	0800a949 	.word	0x0800a949
 800a910:	0800a949 	.word	0x0800a949
 800a914:	0800a941 	.word	0x0800a941
 800a918:	2301      	movs	r3, #1
 800a91a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a91e:	e0bc      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800a920:	2304      	movs	r3, #4
 800a922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a926:	e0b8      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800a928:	2308      	movs	r3, #8
 800a92a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a92e:	e0b4      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800a930:	2310      	movs	r3, #16
 800a932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a936:	e0b0      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800a938:	2320      	movs	r3, #32
 800a93a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a93e:	e0ac      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800a940:	2340      	movs	r3, #64	; 0x40
 800a942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a946:	e0a8      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800a948:	2380      	movs	r3, #128	; 0x80
 800a94a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a94e:	e0a4      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800a950:	697b      	ldr	r3, [r7, #20]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	4a8f      	ldr	r2, [pc, #572]	; (800ab94 <UART_SetConfig+0x6a0>)
 800a956:	4293      	cmp	r3, r2
 800a958:	d130      	bne.n	800a9bc <UART_SetConfig+0x4c8>
 800a95a:	4b8d      	ldr	r3, [pc, #564]	; (800ab90 <UART_SetConfig+0x69c>)
 800a95c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a95e:	f003 0307 	and.w	r3, r3, #7
 800a962:	2b05      	cmp	r3, #5
 800a964:	d826      	bhi.n	800a9b4 <UART_SetConfig+0x4c0>
 800a966:	a201      	add	r2, pc, #4	; (adr r2, 800a96c <UART_SetConfig+0x478>)
 800a968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a96c:	0800a985 	.word	0x0800a985
 800a970:	0800a98d 	.word	0x0800a98d
 800a974:	0800a995 	.word	0x0800a995
 800a978:	0800a99d 	.word	0x0800a99d
 800a97c:	0800a9a5 	.word	0x0800a9a5
 800a980:	0800a9ad 	.word	0x0800a9ad
 800a984:	2300      	movs	r3, #0
 800a986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a98a:	e086      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800a98c:	2304      	movs	r3, #4
 800a98e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a992:	e082      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800a994:	2308      	movs	r3, #8
 800a996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a99a:	e07e      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800a99c:	2310      	movs	r3, #16
 800a99e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9a2:	e07a      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800a9a4:	2320      	movs	r3, #32
 800a9a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9aa:	e076      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800a9ac:	2340      	movs	r3, #64	; 0x40
 800a9ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9b2:	e072      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800a9b4:	2380      	movs	r3, #128	; 0x80
 800a9b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9ba:	e06e      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	4a75      	ldr	r2, [pc, #468]	; (800ab98 <UART_SetConfig+0x6a4>)
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	d130      	bne.n	800aa28 <UART_SetConfig+0x534>
 800a9c6:	4b72      	ldr	r3, [pc, #456]	; (800ab90 <UART_SetConfig+0x69c>)
 800a9c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9ca:	f003 0307 	and.w	r3, r3, #7
 800a9ce:	2b05      	cmp	r3, #5
 800a9d0:	d826      	bhi.n	800aa20 <UART_SetConfig+0x52c>
 800a9d2:	a201      	add	r2, pc, #4	; (adr r2, 800a9d8 <UART_SetConfig+0x4e4>)
 800a9d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9d8:	0800a9f1 	.word	0x0800a9f1
 800a9dc:	0800a9f9 	.word	0x0800a9f9
 800a9e0:	0800aa01 	.word	0x0800aa01
 800a9e4:	0800aa09 	.word	0x0800aa09
 800a9e8:	0800aa11 	.word	0x0800aa11
 800a9ec:	0800aa19 	.word	0x0800aa19
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9f6:	e050      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800a9f8:	2304      	movs	r3, #4
 800a9fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9fe:	e04c      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800aa00:	2308      	movs	r3, #8
 800aa02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa06:	e048      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800aa08:	2310      	movs	r3, #16
 800aa0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa0e:	e044      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800aa10:	2320      	movs	r3, #32
 800aa12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa16:	e040      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800aa18:	2340      	movs	r3, #64	; 0x40
 800aa1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa1e:	e03c      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800aa20:	2380      	movs	r3, #128	; 0x80
 800aa22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa26:	e038      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	4a5b      	ldr	r2, [pc, #364]	; (800ab9c <UART_SetConfig+0x6a8>)
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d130      	bne.n	800aa94 <UART_SetConfig+0x5a0>
 800aa32:	4b57      	ldr	r3, [pc, #348]	; (800ab90 <UART_SetConfig+0x69c>)
 800aa34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa36:	f003 0307 	and.w	r3, r3, #7
 800aa3a:	2b05      	cmp	r3, #5
 800aa3c:	d826      	bhi.n	800aa8c <UART_SetConfig+0x598>
 800aa3e:	a201      	add	r2, pc, #4	; (adr r2, 800aa44 <UART_SetConfig+0x550>)
 800aa40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa44:	0800aa5d 	.word	0x0800aa5d
 800aa48:	0800aa65 	.word	0x0800aa65
 800aa4c:	0800aa6d 	.word	0x0800aa6d
 800aa50:	0800aa75 	.word	0x0800aa75
 800aa54:	0800aa7d 	.word	0x0800aa7d
 800aa58:	0800aa85 	.word	0x0800aa85
 800aa5c:	2302      	movs	r3, #2
 800aa5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa62:	e01a      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800aa64:	2304      	movs	r3, #4
 800aa66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa6a:	e016      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800aa6c:	2308      	movs	r3, #8
 800aa6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa72:	e012      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800aa74:	2310      	movs	r3, #16
 800aa76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa7a:	e00e      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800aa7c:	2320      	movs	r3, #32
 800aa7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa82:	e00a      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800aa84:	2340      	movs	r3, #64	; 0x40
 800aa86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa8a:	e006      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800aa8c:	2380      	movs	r3, #128	; 0x80
 800aa8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa92:	e002      	b.n	800aa9a <UART_SetConfig+0x5a6>
 800aa94:	2380      	movs	r3, #128	; 0x80
 800aa96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	4a3f      	ldr	r2, [pc, #252]	; (800ab9c <UART_SetConfig+0x6a8>)
 800aaa0:	4293      	cmp	r3, r2
 800aaa2:	f040 80f8 	bne.w	800ac96 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800aaa6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800aaaa:	2b20      	cmp	r3, #32
 800aaac:	dc46      	bgt.n	800ab3c <UART_SetConfig+0x648>
 800aaae:	2b02      	cmp	r3, #2
 800aab0:	f2c0 8082 	blt.w	800abb8 <UART_SetConfig+0x6c4>
 800aab4:	3b02      	subs	r3, #2
 800aab6:	2b1e      	cmp	r3, #30
 800aab8:	d87e      	bhi.n	800abb8 <UART_SetConfig+0x6c4>
 800aaba:	a201      	add	r2, pc, #4	; (adr r2, 800aac0 <UART_SetConfig+0x5cc>)
 800aabc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aac0:	0800ab43 	.word	0x0800ab43
 800aac4:	0800abb9 	.word	0x0800abb9
 800aac8:	0800ab4b 	.word	0x0800ab4b
 800aacc:	0800abb9 	.word	0x0800abb9
 800aad0:	0800abb9 	.word	0x0800abb9
 800aad4:	0800abb9 	.word	0x0800abb9
 800aad8:	0800ab5b 	.word	0x0800ab5b
 800aadc:	0800abb9 	.word	0x0800abb9
 800aae0:	0800abb9 	.word	0x0800abb9
 800aae4:	0800abb9 	.word	0x0800abb9
 800aae8:	0800abb9 	.word	0x0800abb9
 800aaec:	0800abb9 	.word	0x0800abb9
 800aaf0:	0800abb9 	.word	0x0800abb9
 800aaf4:	0800abb9 	.word	0x0800abb9
 800aaf8:	0800ab6b 	.word	0x0800ab6b
 800aafc:	0800abb9 	.word	0x0800abb9
 800ab00:	0800abb9 	.word	0x0800abb9
 800ab04:	0800abb9 	.word	0x0800abb9
 800ab08:	0800abb9 	.word	0x0800abb9
 800ab0c:	0800abb9 	.word	0x0800abb9
 800ab10:	0800abb9 	.word	0x0800abb9
 800ab14:	0800abb9 	.word	0x0800abb9
 800ab18:	0800abb9 	.word	0x0800abb9
 800ab1c:	0800abb9 	.word	0x0800abb9
 800ab20:	0800abb9 	.word	0x0800abb9
 800ab24:	0800abb9 	.word	0x0800abb9
 800ab28:	0800abb9 	.word	0x0800abb9
 800ab2c:	0800abb9 	.word	0x0800abb9
 800ab30:	0800abb9 	.word	0x0800abb9
 800ab34:	0800abb9 	.word	0x0800abb9
 800ab38:	0800abab 	.word	0x0800abab
 800ab3c:	2b40      	cmp	r3, #64	; 0x40
 800ab3e:	d037      	beq.n	800abb0 <UART_SetConfig+0x6bc>
 800ab40:	e03a      	b.n	800abb8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ab42:	f7fe f88d 	bl	8008c60 <HAL_RCCEx_GetD3PCLK1Freq>
 800ab46:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ab48:	e03c      	b.n	800abc4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f7fe f89c 	bl	8008c8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ab54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab58:	e034      	b.n	800abc4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab5a:	f107 0318 	add.w	r3, r7, #24
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f7fe f9e8 	bl	8008f34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ab64:	69fb      	ldr	r3, [r7, #28]
 800ab66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab68:	e02c      	b.n	800abc4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab6a:	4b09      	ldr	r3, [pc, #36]	; (800ab90 <UART_SetConfig+0x69c>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f003 0320 	and.w	r3, r3, #32
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d016      	beq.n	800aba4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ab76:	4b06      	ldr	r3, [pc, #24]	; (800ab90 <UART_SetConfig+0x69c>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	08db      	lsrs	r3, r3, #3
 800ab7c:	f003 0303 	and.w	r3, r3, #3
 800ab80:	4a07      	ldr	r2, [pc, #28]	; (800aba0 <UART_SetConfig+0x6ac>)
 800ab82:	fa22 f303 	lsr.w	r3, r2, r3
 800ab86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ab88:	e01c      	b.n	800abc4 <UART_SetConfig+0x6d0>
 800ab8a:	bf00      	nop
 800ab8c:	40011400 	.word	0x40011400
 800ab90:	58024400 	.word	0x58024400
 800ab94:	40007800 	.word	0x40007800
 800ab98:	40007c00 	.word	0x40007c00
 800ab9c:	58000c00 	.word	0x58000c00
 800aba0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800aba4:	4b9d      	ldr	r3, [pc, #628]	; (800ae1c <UART_SetConfig+0x928>)
 800aba6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aba8:	e00c      	b.n	800abc4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800abaa:	4b9d      	ldr	r3, [pc, #628]	; (800ae20 <UART_SetConfig+0x92c>)
 800abac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abae:	e009      	b.n	800abc4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800abb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800abb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abb6:	e005      	b.n	800abc4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800abb8:	2300      	movs	r3, #0
 800abba:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800abbc:	2301      	movs	r3, #1
 800abbe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800abc2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800abc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	f000 81de 	beq.w	800af88 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800abcc:	697b      	ldr	r3, [r7, #20]
 800abce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abd0:	4a94      	ldr	r2, [pc, #592]	; (800ae24 <UART_SetConfig+0x930>)
 800abd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800abd6:	461a      	mov	r2, r3
 800abd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abda:	fbb3 f3f2 	udiv	r3, r3, r2
 800abde:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	685a      	ldr	r2, [r3, #4]
 800abe4:	4613      	mov	r3, r2
 800abe6:	005b      	lsls	r3, r3, #1
 800abe8:	4413      	add	r3, r2
 800abea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abec:	429a      	cmp	r2, r3
 800abee:	d305      	bcc.n	800abfc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800abf0:	697b      	ldr	r3, [r7, #20]
 800abf2:	685b      	ldr	r3, [r3, #4]
 800abf4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800abf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abf8:	429a      	cmp	r2, r3
 800abfa:	d903      	bls.n	800ac04 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800abfc:	2301      	movs	r3, #1
 800abfe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ac02:	e1c1      	b.n	800af88 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac06:	2200      	movs	r2, #0
 800ac08:	60bb      	str	r3, [r7, #8]
 800ac0a:	60fa      	str	r2, [r7, #12]
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac10:	4a84      	ldr	r2, [pc, #528]	; (800ae24 <UART_SetConfig+0x930>)
 800ac12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac16:	b29b      	uxth	r3, r3
 800ac18:	2200      	movs	r2, #0
 800ac1a:	603b      	str	r3, [r7, #0]
 800ac1c:	607a      	str	r2, [r7, #4]
 800ac1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac22:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ac26:	f7f5 fd6f 	bl	8000708 <__aeabi_uldivmod>
 800ac2a:	4602      	mov	r2, r0
 800ac2c:	460b      	mov	r3, r1
 800ac2e:	4610      	mov	r0, r2
 800ac30:	4619      	mov	r1, r3
 800ac32:	f04f 0200 	mov.w	r2, #0
 800ac36:	f04f 0300 	mov.w	r3, #0
 800ac3a:	020b      	lsls	r3, r1, #8
 800ac3c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ac40:	0202      	lsls	r2, r0, #8
 800ac42:	6979      	ldr	r1, [r7, #20]
 800ac44:	6849      	ldr	r1, [r1, #4]
 800ac46:	0849      	lsrs	r1, r1, #1
 800ac48:	2000      	movs	r0, #0
 800ac4a:	460c      	mov	r4, r1
 800ac4c:	4605      	mov	r5, r0
 800ac4e:	eb12 0804 	adds.w	r8, r2, r4
 800ac52:	eb43 0905 	adc.w	r9, r3, r5
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	685b      	ldr	r3, [r3, #4]
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	469a      	mov	sl, r3
 800ac5e:	4693      	mov	fp, r2
 800ac60:	4652      	mov	r2, sl
 800ac62:	465b      	mov	r3, fp
 800ac64:	4640      	mov	r0, r8
 800ac66:	4649      	mov	r1, r9
 800ac68:	f7f5 fd4e 	bl	8000708 <__aeabi_uldivmod>
 800ac6c:	4602      	mov	r2, r0
 800ac6e:	460b      	mov	r3, r1
 800ac70:	4613      	mov	r3, r2
 800ac72:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ac74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac7a:	d308      	bcc.n	800ac8e <UART_SetConfig+0x79a>
 800ac7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac82:	d204      	bcs.n	800ac8e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac8a:	60da      	str	r2, [r3, #12]
 800ac8c:	e17c      	b.n	800af88 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800ac8e:	2301      	movs	r3, #1
 800ac90:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ac94:	e178      	b.n	800af88 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	69db      	ldr	r3, [r3, #28]
 800ac9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac9e:	f040 80c5 	bne.w	800ae2c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800aca2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800aca6:	2b20      	cmp	r3, #32
 800aca8:	dc48      	bgt.n	800ad3c <UART_SetConfig+0x848>
 800acaa:	2b00      	cmp	r3, #0
 800acac:	db7b      	blt.n	800ada6 <UART_SetConfig+0x8b2>
 800acae:	2b20      	cmp	r3, #32
 800acb0:	d879      	bhi.n	800ada6 <UART_SetConfig+0x8b2>
 800acb2:	a201      	add	r2, pc, #4	; (adr r2, 800acb8 <UART_SetConfig+0x7c4>)
 800acb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acb8:	0800ad43 	.word	0x0800ad43
 800acbc:	0800ad4b 	.word	0x0800ad4b
 800acc0:	0800ada7 	.word	0x0800ada7
 800acc4:	0800ada7 	.word	0x0800ada7
 800acc8:	0800ad53 	.word	0x0800ad53
 800accc:	0800ada7 	.word	0x0800ada7
 800acd0:	0800ada7 	.word	0x0800ada7
 800acd4:	0800ada7 	.word	0x0800ada7
 800acd8:	0800ad63 	.word	0x0800ad63
 800acdc:	0800ada7 	.word	0x0800ada7
 800ace0:	0800ada7 	.word	0x0800ada7
 800ace4:	0800ada7 	.word	0x0800ada7
 800ace8:	0800ada7 	.word	0x0800ada7
 800acec:	0800ada7 	.word	0x0800ada7
 800acf0:	0800ada7 	.word	0x0800ada7
 800acf4:	0800ada7 	.word	0x0800ada7
 800acf8:	0800ad73 	.word	0x0800ad73
 800acfc:	0800ada7 	.word	0x0800ada7
 800ad00:	0800ada7 	.word	0x0800ada7
 800ad04:	0800ada7 	.word	0x0800ada7
 800ad08:	0800ada7 	.word	0x0800ada7
 800ad0c:	0800ada7 	.word	0x0800ada7
 800ad10:	0800ada7 	.word	0x0800ada7
 800ad14:	0800ada7 	.word	0x0800ada7
 800ad18:	0800ada7 	.word	0x0800ada7
 800ad1c:	0800ada7 	.word	0x0800ada7
 800ad20:	0800ada7 	.word	0x0800ada7
 800ad24:	0800ada7 	.word	0x0800ada7
 800ad28:	0800ada7 	.word	0x0800ada7
 800ad2c:	0800ada7 	.word	0x0800ada7
 800ad30:	0800ada7 	.word	0x0800ada7
 800ad34:	0800ada7 	.word	0x0800ada7
 800ad38:	0800ad99 	.word	0x0800ad99
 800ad3c:	2b40      	cmp	r3, #64	; 0x40
 800ad3e:	d02e      	beq.n	800ad9e <UART_SetConfig+0x8aa>
 800ad40:	e031      	b.n	800ada6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad42:	f7fc fd15 	bl	8007770 <HAL_RCC_GetPCLK1Freq>
 800ad46:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ad48:	e033      	b.n	800adb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ad4a:	f7fc fd27 	bl	800779c <HAL_RCC_GetPCLK2Freq>
 800ad4e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ad50:	e02f      	b.n	800adb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad56:	4618      	mov	r0, r3
 800ad58:	f7fd ff98 	bl	8008c8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ad5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad60:	e027      	b.n	800adb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad62:	f107 0318 	add.w	r3, r7, #24
 800ad66:	4618      	mov	r0, r3
 800ad68:	f7fe f8e4 	bl	8008f34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ad6c:	69fb      	ldr	r3, [r7, #28]
 800ad6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad70:	e01f      	b.n	800adb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad72:	4b2d      	ldr	r3, [pc, #180]	; (800ae28 <UART_SetConfig+0x934>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f003 0320 	and.w	r3, r3, #32
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d009      	beq.n	800ad92 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ad7e:	4b2a      	ldr	r3, [pc, #168]	; (800ae28 <UART_SetConfig+0x934>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	08db      	lsrs	r3, r3, #3
 800ad84:	f003 0303 	and.w	r3, r3, #3
 800ad88:	4a24      	ldr	r2, [pc, #144]	; (800ae1c <UART_SetConfig+0x928>)
 800ad8a:	fa22 f303 	lsr.w	r3, r2, r3
 800ad8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ad90:	e00f      	b.n	800adb2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ad92:	4b22      	ldr	r3, [pc, #136]	; (800ae1c <UART_SetConfig+0x928>)
 800ad94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad96:	e00c      	b.n	800adb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ad98:	4b21      	ldr	r3, [pc, #132]	; (800ae20 <UART_SetConfig+0x92c>)
 800ad9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad9c:	e009      	b.n	800adb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ada2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ada4:	e005      	b.n	800adb2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ada6:	2300      	movs	r3, #0
 800ada8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800adaa:	2301      	movs	r3, #1
 800adac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800adb0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800adb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	f000 80e7 	beq.w	800af88 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adbe:	4a19      	ldr	r2, [pc, #100]	; (800ae24 <UART_SetConfig+0x930>)
 800adc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800adc4:	461a      	mov	r2, r3
 800adc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adc8:	fbb3 f3f2 	udiv	r3, r3, r2
 800adcc:	005a      	lsls	r2, r3, #1
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	685b      	ldr	r3, [r3, #4]
 800add2:	085b      	lsrs	r3, r3, #1
 800add4:	441a      	add	r2, r3
 800add6:	697b      	ldr	r3, [r7, #20]
 800add8:	685b      	ldr	r3, [r3, #4]
 800adda:	fbb2 f3f3 	udiv	r3, r2, r3
 800adde:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ade0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ade2:	2b0f      	cmp	r3, #15
 800ade4:	d916      	bls.n	800ae14 <UART_SetConfig+0x920>
 800ade6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ade8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800adec:	d212      	bcs.n	800ae14 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800adee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adf0:	b29b      	uxth	r3, r3
 800adf2:	f023 030f 	bic.w	r3, r3, #15
 800adf6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800adf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adfa:	085b      	lsrs	r3, r3, #1
 800adfc:	b29b      	uxth	r3, r3
 800adfe:	f003 0307 	and.w	r3, r3, #7
 800ae02:	b29a      	uxth	r2, r3
 800ae04:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ae06:	4313      	orrs	r3, r2
 800ae08:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ae10:	60da      	str	r2, [r3, #12]
 800ae12:	e0b9      	b.n	800af88 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ae14:	2301      	movs	r3, #1
 800ae16:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ae1a:	e0b5      	b.n	800af88 <UART_SetConfig+0xa94>
 800ae1c:	03d09000 	.word	0x03d09000
 800ae20:	003d0900 	.word	0x003d0900
 800ae24:	0801c9d8 	.word	0x0801c9d8
 800ae28:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800ae2c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ae30:	2b20      	cmp	r3, #32
 800ae32:	dc49      	bgt.n	800aec8 <UART_SetConfig+0x9d4>
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	db7c      	blt.n	800af32 <UART_SetConfig+0xa3e>
 800ae38:	2b20      	cmp	r3, #32
 800ae3a:	d87a      	bhi.n	800af32 <UART_SetConfig+0xa3e>
 800ae3c:	a201      	add	r2, pc, #4	; (adr r2, 800ae44 <UART_SetConfig+0x950>)
 800ae3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae42:	bf00      	nop
 800ae44:	0800aecf 	.word	0x0800aecf
 800ae48:	0800aed7 	.word	0x0800aed7
 800ae4c:	0800af33 	.word	0x0800af33
 800ae50:	0800af33 	.word	0x0800af33
 800ae54:	0800aedf 	.word	0x0800aedf
 800ae58:	0800af33 	.word	0x0800af33
 800ae5c:	0800af33 	.word	0x0800af33
 800ae60:	0800af33 	.word	0x0800af33
 800ae64:	0800aeef 	.word	0x0800aeef
 800ae68:	0800af33 	.word	0x0800af33
 800ae6c:	0800af33 	.word	0x0800af33
 800ae70:	0800af33 	.word	0x0800af33
 800ae74:	0800af33 	.word	0x0800af33
 800ae78:	0800af33 	.word	0x0800af33
 800ae7c:	0800af33 	.word	0x0800af33
 800ae80:	0800af33 	.word	0x0800af33
 800ae84:	0800aeff 	.word	0x0800aeff
 800ae88:	0800af33 	.word	0x0800af33
 800ae8c:	0800af33 	.word	0x0800af33
 800ae90:	0800af33 	.word	0x0800af33
 800ae94:	0800af33 	.word	0x0800af33
 800ae98:	0800af33 	.word	0x0800af33
 800ae9c:	0800af33 	.word	0x0800af33
 800aea0:	0800af33 	.word	0x0800af33
 800aea4:	0800af33 	.word	0x0800af33
 800aea8:	0800af33 	.word	0x0800af33
 800aeac:	0800af33 	.word	0x0800af33
 800aeb0:	0800af33 	.word	0x0800af33
 800aeb4:	0800af33 	.word	0x0800af33
 800aeb8:	0800af33 	.word	0x0800af33
 800aebc:	0800af33 	.word	0x0800af33
 800aec0:	0800af33 	.word	0x0800af33
 800aec4:	0800af25 	.word	0x0800af25
 800aec8:	2b40      	cmp	r3, #64	; 0x40
 800aeca:	d02e      	beq.n	800af2a <UART_SetConfig+0xa36>
 800aecc:	e031      	b.n	800af32 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aece:	f7fc fc4f 	bl	8007770 <HAL_RCC_GetPCLK1Freq>
 800aed2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800aed4:	e033      	b.n	800af3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aed6:	f7fc fc61 	bl	800779c <HAL_RCC_GetPCLK2Freq>
 800aeda:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800aedc:	e02f      	b.n	800af3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aede:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aee2:	4618      	mov	r0, r3
 800aee4:	f7fd fed2 	bl	8008c8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aeec:	e027      	b.n	800af3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aeee:	f107 0318 	add.w	r3, r7, #24
 800aef2:	4618      	mov	r0, r3
 800aef4:	f7fe f81e 	bl	8008f34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aef8:	69fb      	ldr	r3, [r7, #28]
 800aefa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aefc:	e01f      	b.n	800af3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aefe:	4b2d      	ldr	r3, [pc, #180]	; (800afb4 <UART_SetConfig+0xac0>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f003 0320 	and.w	r3, r3, #32
 800af06:	2b00      	cmp	r3, #0
 800af08:	d009      	beq.n	800af1e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800af0a:	4b2a      	ldr	r3, [pc, #168]	; (800afb4 <UART_SetConfig+0xac0>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	08db      	lsrs	r3, r3, #3
 800af10:	f003 0303 	and.w	r3, r3, #3
 800af14:	4a28      	ldr	r2, [pc, #160]	; (800afb8 <UART_SetConfig+0xac4>)
 800af16:	fa22 f303 	lsr.w	r3, r2, r3
 800af1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800af1c:	e00f      	b.n	800af3e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800af1e:	4b26      	ldr	r3, [pc, #152]	; (800afb8 <UART_SetConfig+0xac4>)
 800af20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af22:	e00c      	b.n	800af3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800af24:	4b25      	ldr	r3, [pc, #148]	; (800afbc <UART_SetConfig+0xac8>)
 800af26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af28:	e009      	b.n	800af3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800af2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af30:	e005      	b.n	800af3e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800af32:	2300      	movs	r3, #0
 800af34:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800af36:	2301      	movs	r3, #1
 800af38:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800af3c:	bf00      	nop
    }

    if (pclk != 0U)
 800af3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af40:	2b00      	cmp	r3, #0
 800af42:	d021      	beq.n	800af88 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af48:	4a1d      	ldr	r2, [pc, #116]	; (800afc0 <UART_SetConfig+0xacc>)
 800af4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af4e:	461a      	mov	r2, r3
 800af50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af52:	fbb3 f2f2 	udiv	r2, r3, r2
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	685b      	ldr	r3, [r3, #4]
 800af5a:	085b      	lsrs	r3, r3, #1
 800af5c:	441a      	add	r2, r3
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	685b      	ldr	r3, [r3, #4]
 800af62:	fbb2 f3f3 	udiv	r3, r2, r3
 800af66:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af6a:	2b0f      	cmp	r3, #15
 800af6c:	d909      	bls.n	800af82 <UART_SetConfig+0xa8e>
 800af6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af74:	d205      	bcs.n	800af82 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800af76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af78:	b29a      	uxth	r2, r3
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	60da      	str	r2, [r3, #12]
 800af80:	e002      	b.n	800af88 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800af82:	2301      	movs	r3, #1
 800af84:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	2201      	movs	r2, #1
 800af8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	2201      	movs	r2, #1
 800af94:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	2200      	movs	r2, #0
 800af9c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800af9e:	697b      	ldr	r3, [r7, #20]
 800afa0:	2200      	movs	r2, #0
 800afa2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800afa4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800afa8:	4618      	mov	r0, r3
 800afaa:	3748      	adds	r7, #72	; 0x48
 800afac:	46bd      	mov	sp, r7
 800afae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800afb2:	bf00      	nop
 800afb4:	58024400 	.word	0x58024400
 800afb8:	03d09000 	.word	0x03d09000
 800afbc:	003d0900 	.word	0x003d0900
 800afc0:	0801c9d8 	.word	0x0801c9d8

0800afc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800afc4:	b480      	push	{r7}
 800afc6:	b083      	sub	sp, #12
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afd0:	f003 0301 	and.w	r3, r3, #1
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d00a      	beq.n	800afee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	685b      	ldr	r3, [r3, #4]
 800afde:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	430a      	orrs	r2, r1
 800afec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aff2:	f003 0302 	and.w	r3, r3, #2
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d00a      	beq.n	800b010 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	685b      	ldr	r3, [r3, #4]
 800b000:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	430a      	orrs	r2, r1
 800b00e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b014:	f003 0304 	and.w	r3, r3, #4
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d00a      	beq.n	800b032 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	685b      	ldr	r3, [r3, #4]
 800b022:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	430a      	orrs	r2, r1
 800b030:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b036:	f003 0308 	and.w	r3, r3, #8
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d00a      	beq.n	800b054 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	685b      	ldr	r3, [r3, #4]
 800b044:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	430a      	orrs	r2, r1
 800b052:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b058:	f003 0310 	and.w	r3, r3, #16
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d00a      	beq.n	800b076 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	689b      	ldr	r3, [r3, #8]
 800b066:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	430a      	orrs	r2, r1
 800b074:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b07a:	f003 0320 	and.w	r3, r3, #32
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d00a      	beq.n	800b098 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	689b      	ldr	r3, [r3, #8]
 800b088:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	430a      	orrs	r2, r1
 800b096:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b09c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d01a      	beq.n	800b0da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	685b      	ldr	r3, [r3, #4]
 800b0aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	430a      	orrs	r2, r1
 800b0b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b0c2:	d10a      	bne.n	800b0da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	685b      	ldr	r3, [r3, #4]
 800b0ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	430a      	orrs	r2, r1
 800b0d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d00a      	beq.n	800b0fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	685b      	ldr	r3, [r3, #4]
 800b0ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	430a      	orrs	r2, r1
 800b0fa:	605a      	str	r2, [r3, #4]
  }
}
 800b0fc:	bf00      	nop
 800b0fe:	370c      	adds	r7, #12
 800b100:	46bd      	mov	sp, r7
 800b102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b106:	4770      	bx	lr

0800b108 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b098      	sub	sp, #96	; 0x60
 800b10c:	af02      	add	r7, sp, #8
 800b10e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2200      	movs	r2, #0
 800b114:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b118:	f7f6 fea4 	bl	8001e64 <HAL_GetTick>
 800b11c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f003 0308 	and.w	r3, r3, #8
 800b128:	2b08      	cmp	r3, #8
 800b12a:	d12f      	bne.n	800b18c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b12c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b130:	9300      	str	r3, [sp, #0]
 800b132:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b134:	2200      	movs	r2, #0
 800b136:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f000 f88e 	bl	800b25c <UART_WaitOnFlagUntilTimeout>
 800b140:	4603      	mov	r3, r0
 800b142:	2b00      	cmp	r3, #0
 800b144:	d022      	beq.n	800b18c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b14c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b14e:	e853 3f00 	ldrex	r3, [r3]
 800b152:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b156:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b15a:	653b      	str	r3, [r7, #80]	; 0x50
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	461a      	mov	r2, r3
 800b162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b164:	647b      	str	r3, [r7, #68]	; 0x44
 800b166:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b168:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b16a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b16c:	e841 2300 	strex	r3, r2, [r1]
 800b170:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b174:	2b00      	cmp	r3, #0
 800b176:	d1e6      	bne.n	800b146 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2220      	movs	r2, #32
 800b17c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2200      	movs	r2, #0
 800b184:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b188:	2303      	movs	r3, #3
 800b18a:	e063      	b.n	800b254 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f003 0304 	and.w	r3, r3, #4
 800b196:	2b04      	cmp	r3, #4
 800b198:	d149      	bne.n	800b22e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b19a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b19e:	9300      	str	r3, [sp, #0]
 800b1a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f000 f857 	bl	800b25c <UART_WaitOnFlagUntilTimeout>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d03c      	beq.n	800b22e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1bc:	e853 3f00 	ldrex	r3, [r3]
 800b1c0:	623b      	str	r3, [r7, #32]
   return(result);
 800b1c2:	6a3b      	ldr	r3, [r7, #32]
 800b1c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b1c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	461a      	mov	r2, r3
 800b1d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1d2:	633b      	str	r3, [r7, #48]	; 0x30
 800b1d4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b1d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1da:	e841 2300 	strex	r3, r2, [r1]
 800b1de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d1e6      	bne.n	800b1b4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	3308      	adds	r3, #8
 800b1ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	e853 3f00 	ldrex	r3, [r3]
 800b1f4:	60fb      	str	r3, [r7, #12]
   return(result);
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	f023 0301 	bic.w	r3, r3, #1
 800b1fc:	64bb      	str	r3, [r7, #72]	; 0x48
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	3308      	adds	r3, #8
 800b204:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b206:	61fa      	str	r2, [r7, #28]
 800b208:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b20a:	69b9      	ldr	r1, [r7, #24]
 800b20c:	69fa      	ldr	r2, [r7, #28]
 800b20e:	e841 2300 	strex	r3, r2, [r1]
 800b212:	617b      	str	r3, [r7, #20]
   return(result);
 800b214:	697b      	ldr	r3, [r7, #20]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d1e5      	bne.n	800b1e6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2220      	movs	r2, #32
 800b21e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2200      	movs	r2, #0
 800b226:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b22a:	2303      	movs	r3, #3
 800b22c:	e012      	b.n	800b254 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2220      	movs	r2, #32
 800b232:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2220      	movs	r2, #32
 800b23a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2200      	movs	r2, #0
 800b242:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2200      	movs	r2, #0
 800b248:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2200      	movs	r2, #0
 800b24e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b252:	2300      	movs	r3, #0
}
 800b254:	4618      	mov	r0, r3
 800b256:	3758      	adds	r7, #88	; 0x58
 800b258:	46bd      	mov	sp, r7
 800b25a:	bd80      	pop	{r7, pc}

0800b25c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b084      	sub	sp, #16
 800b260:	af00      	add	r7, sp, #0
 800b262:	60f8      	str	r0, [r7, #12]
 800b264:	60b9      	str	r1, [r7, #8]
 800b266:	603b      	str	r3, [r7, #0]
 800b268:	4613      	mov	r3, r2
 800b26a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b26c:	e049      	b.n	800b302 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b26e:	69bb      	ldr	r3, [r7, #24]
 800b270:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b274:	d045      	beq.n	800b302 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b276:	f7f6 fdf5 	bl	8001e64 <HAL_GetTick>
 800b27a:	4602      	mov	r2, r0
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	1ad3      	subs	r3, r2, r3
 800b280:	69ba      	ldr	r2, [r7, #24]
 800b282:	429a      	cmp	r2, r3
 800b284:	d302      	bcc.n	800b28c <UART_WaitOnFlagUntilTimeout+0x30>
 800b286:	69bb      	ldr	r3, [r7, #24]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d101      	bne.n	800b290 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b28c:	2303      	movs	r3, #3
 800b28e:	e048      	b.n	800b322 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f003 0304 	and.w	r3, r3, #4
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d031      	beq.n	800b302 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	69db      	ldr	r3, [r3, #28]
 800b2a4:	f003 0308 	and.w	r3, r3, #8
 800b2a8:	2b08      	cmp	r3, #8
 800b2aa:	d110      	bne.n	800b2ce <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	2208      	movs	r2, #8
 800b2b2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800b2b4:	68f8      	ldr	r0, [r7, #12]
 800b2b6:	f000 fa43 	bl	800b740 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	2208      	movs	r2, #8
 800b2be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	e029      	b.n	800b322 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	69db      	ldr	r3, [r3, #28]
 800b2d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b2d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b2dc:	d111      	bne.n	800b302 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b2e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b2e8:	68f8      	ldr	r0, [r7, #12]
 800b2ea:	f000 fa29 	bl	800b740 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	2220      	movs	r2, #32
 800b2f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800b2fe:	2303      	movs	r3, #3
 800b300:	e00f      	b.n	800b322 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	69da      	ldr	r2, [r3, #28]
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	4013      	ands	r3, r2
 800b30c:	68ba      	ldr	r2, [r7, #8]
 800b30e:	429a      	cmp	r2, r3
 800b310:	bf0c      	ite	eq
 800b312:	2301      	moveq	r3, #1
 800b314:	2300      	movne	r3, #0
 800b316:	b2db      	uxtb	r3, r3
 800b318:	461a      	mov	r2, r3
 800b31a:	79fb      	ldrb	r3, [r7, #7]
 800b31c:	429a      	cmp	r2, r3
 800b31e:	d0a6      	beq.n	800b26e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b320:	2300      	movs	r3, #0
}
 800b322:	4618      	mov	r0, r3
 800b324:	3710      	adds	r7, #16
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}
	...

0800b32c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b32c:	b480      	push	{r7}
 800b32e:	b0a3      	sub	sp, #140	; 0x8c
 800b330:	af00      	add	r7, sp, #0
 800b332:	60f8      	str	r0, [r7, #12]
 800b334:	60b9      	str	r1, [r7, #8]
 800b336:	4613      	mov	r3, r2
 800b338:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	68ba      	ldr	r2, [r7, #8]
 800b33e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	88fa      	ldrh	r2, [r7, #6]
 800b344:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	88fa      	ldrh	r2, [r7, #6]
 800b34c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	2200      	movs	r2, #0
 800b354:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	689b      	ldr	r3, [r3, #8]
 800b35a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b35e:	d10e      	bne.n	800b37e <UART_Start_Receive_IT+0x52>
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	691b      	ldr	r3, [r3, #16]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d105      	bne.n	800b374 <UART_Start_Receive_IT+0x48>
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b36e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b372:	e02d      	b.n	800b3d0 <UART_Start_Receive_IT+0xa4>
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	22ff      	movs	r2, #255	; 0xff
 800b378:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b37c:	e028      	b.n	800b3d0 <UART_Start_Receive_IT+0xa4>
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	689b      	ldr	r3, [r3, #8]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d10d      	bne.n	800b3a2 <UART_Start_Receive_IT+0x76>
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	691b      	ldr	r3, [r3, #16]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d104      	bne.n	800b398 <UART_Start_Receive_IT+0x6c>
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	22ff      	movs	r2, #255	; 0xff
 800b392:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b396:	e01b      	b.n	800b3d0 <UART_Start_Receive_IT+0xa4>
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	227f      	movs	r2, #127	; 0x7f
 800b39c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b3a0:	e016      	b.n	800b3d0 <UART_Start_Receive_IT+0xa4>
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	689b      	ldr	r3, [r3, #8]
 800b3a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b3aa:	d10d      	bne.n	800b3c8 <UART_Start_Receive_IT+0x9c>
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	691b      	ldr	r3, [r3, #16]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d104      	bne.n	800b3be <UART_Start_Receive_IT+0x92>
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	227f      	movs	r2, #127	; 0x7f
 800b3b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b3bc:	e008      	b.n	800b3d0 <UART_Start_Receive_IT+0xa4>
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	223f      	movs	r2, #63	; 0x3f
 800b3c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b3c6:	e003      	b.n	800b3d0 <UART_Start_Receive_IT+0xa4>
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	2222      	movs	r2, #34	; 0x22
 800b3dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	3308      	adds	r3, #8
 800b3e6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b3ea:	e853 3f00 	ldrex	r3, [r3]
 800b3ee:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b3f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b3f2:	f043 0301 	orr.w	r3, r3, #1
 800b3f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	3308      	adds	r3, #8
 800b400:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b404:	673a      	str	r2, [r7, #112]	; 0x70
 800b406:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b408:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800b40a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b40c:	e841 2300 	strex	r3, r2, [r1]
 800b410:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800b412:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b414:	2b00      	cmp	r3, #0
 800b416:	d1e3      	bne.n	800b3e0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b41c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b420:	d14f      	bne.n	800b4c2 <UART_Start_Receive_IT+0x196>
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b428:	88fa      	ldrh	r2, [r7, #6]
 800b42a:	429a      	cmp	r2, r3
 800b42c:	d349      	bcc.n	800b4c2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	689b      	ldr	r3, [r3, #8]
 800b432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b436:	d107      	bne.n	800b448 <UART_Start_Receive_IT+0x11c>
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	691b      	ldr	r3, [r3, #16]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d103      	bne.n	800b448 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	4a47      	ldr	r2, [pc, #284]	; (800b560 <UART_Start_Receive_IT+0x234>)
 800b444:	675a      	str	r2, [r3, #116]	; 0x74
 800b446:	e002      	b.n	800b44e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	4a46      	ldr	r2, [pc, #280]	; (800b564 <UART_Start_Receive_IT+0x238>)
 800b44c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	691b      	ldr	r3, [r3, #16]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d01a      	beq.n	800b48c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b45c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b45e:	e853 3f00 	ldrex	r3, [r3]
 800b462:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b466:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b46a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	461a      	mov	r2, r3
 800b474:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b478:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b47a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b47c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b47e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b480:	e841 2300 	strex	r3, r2, [r1]
 800b484:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b486:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d1e4      	bne.n	800b456 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	3308      	adds	r3, #8
 800b492:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b496:	e853 3f00 	ldrex	r3, [r3]
 800b49a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b49c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b49e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b4a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	3308      	adds	r3, #8
 800b4aa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b4ac:	64ba      	str	r2, [r7, #72]	; 0x48
 800b4ae:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4b0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b4b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b4b4:	e841 2300 	strex	r3, r2, [r1]
 800b4b8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b4ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d1e5      	bne.n	800b48c <UART_Start_Receive_IT+0x160>
 800b4c0:	e046      	b.n	800b550 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	689b      	ldr	r3, [r3, #8]
 800b4c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4ca:	d107      	bne.n	800b4dc <UART_Start_Receive_IT+0x1b0>
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	691b      	ldr	r3, [r3, #16]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d103      	bne.n	800b4dc <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	4a24      	ldr	r2, [pc, #144]	; (800b568 <UART_Start_Receive_IT+0x23c>)
 800b4d8:	675a      	str	r2, [r3, #116]	; 0x74
 800b4da:	e002      	b.n	800b4e2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	4a23      	ldr	r2, [pc, #140]	; (800b56c <UART_Start_Receive_IT+0x240>)
 800b4e0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	691b      	ldr	r3, [r3, #16]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d019      	beq.n	800b51e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4f2:	e853 3f00 	ldrex	r3, [r3]
 800b4f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4fa:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800b4fe:	677b      	str	r3, [r7, #116]	; 0x74
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	461a      	mov	r2, r3
 800b506:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b508:	637b      	str	r3, [r7, #52]	; 0x34
 800b50a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b50c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b50e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b510:	e841 2300 	strex	r3, r2, [r1]
 800b514:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d1e6      	bne.n	800b4ea <UART_Start_Receive_IT+0x1be>
 800b51c:	e018      	b.n	800b550 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b524:	697b      	ldr	r3, [r7, #20]
 800b526:	e853 3f00 	ldrex	r3, [r3]
 800b52a:	613b      	str	r3, [r7, #16]
   return(result);
 800b52c:	693b      	ldr	r3, [r7, #16]
 800b52e:	f043 0320 	orr.w	r3, r3, #32
 800b532:	67bb      	str	r3, [r7, #120]	; 0x78
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	461a      	mov	r2, r3
 800b53a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b53c:	623b      	str	r3, [r7, #32]
 800b53e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b540:	69f9      	ldr	r1, [r7, #28]
 800b542:	6a3a      	ldr	r2, [r7, #32]
 800b544:	e841 2300 	strex	r3, r2, [r1]
 800b548:	61bb      	str	r3, [r7, #24]
   return(result);
 800b54a:	69bb      	ldr	r3, [r7, #24]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d1e6      	bne.n	800b51e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800b550:	2300      	movs	r3, #0
}
 800b552:	4618      	mov	r0, r3
 800b554:	378c      	adds	r7, #140	; 0x8c
 800b556:	46bd      	mov	sp, r7
 800b558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55c:	4770      	bx	lr
 800b55e:	bf00      	nop
 800b560:	0800c145 	.word	0x0800c145
 800b564:	0800bde5 	.word	0x0800bde5
 800b568:	0800bc2d 	.word	0x0800bc2d
 800b56c:	0800ba75 	.word	0x0800ba75

0800b570 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b096      	sub	sp, #88	; 0x58
 800b574:	af00      	add	r7, sp, #0
 800b576:	60f8      	str	r0, [r7, #12]
 800b578:	60b9      	str	r1, [r7, #8]
 800b57a:	4613      	mov	r3, r2
 800b57c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	68ba      	ldr	r2, [r7, #8]
 800b582:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	88fa      	ldrh	r2, [r7, #6]
 800b588:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	2200      	movs	r2, #0
 800b590:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	2222      	movs	r2, #34	; 0x22
 800b598:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d02d      	beq.n	800b602 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b5ac:	4a40      	ldr	r2, [pc, #256]	; (800b6b0 <UART_Start_Receive_DMA+0x140>)
 800b5ae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b5b6:	4a3f      	ldr	r2, [pc, #252]	; (800b6b4 <UART_Start_Receive_DMA+0x144>)
 800b5b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b5c0:	4a3d      	ldr	r2, [pc, #244]	; (800b6b8 <UART_Start_Receive_DMA+0x148>)
 800b5c2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	3324      	adds	r3, #36	; 0x24
 800b5da:	4619      	mov	r1, r3
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5e0:	461a      	mov	r2, r3
 800b5e2:	88fb      	ldrh	r3, [r7, #6]
 800b5e4:	f7f7 f8ca 	bl	800277c <HAL_DMA_Start_IT>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d009      	beq.n	800b602 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	2210      	movs	r2, #16
 800b5f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	2220      	movs	r2, #32
 800b5fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800b5fe:	2301      	movs	r3, #1
 800b600:	e051      	b.n	800b6a6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	691b      	ldr	r3, [r3, #16]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d018      	beq.n	800b63c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b612:	e853 3f00 	ldrex	r3, [r3]
 800b616:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b61a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b61e:	657b      	str	r3, [r7, #84]	; 0x54
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	461a      	mov	r2, r3
 800b626:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b628:	64bb      	str	r3, [r7, #72]	; 0x48
 800b62a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b62c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b62e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b630:	e841 2300 	strex	r3, r2, [r1]
 800b634:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b636:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d1e6      	bne.n	800b60a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	3308      	adds	r3, #8
 800b642:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b646:	e853 3f00 	ldrex	r3, [r3]
 800b64a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b64e:	f043 0301 	orr.w	r3, r3, #1
 800b652:	653b      	str	r3, [r7, #80]	; 0x50
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	3308      	adds	r3, #8
 800b65a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b65c:	637a      	str	r2, [r7, #52]	; 0x34
 800b65e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b660:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b662:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b664:	e841 2300 	strex	r3, r2, [r1]
 800b668:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d1e5      	bne.n	800b63c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	3308      	adds	r3, #8
 800b676:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b678:	697b      	ldr	r3, [r7, #20]
 800b67a:	e853 3f00 	ldrex	r3, [r3]
 800b67e:	613b      	str	r3, [r7, #16]
   return(result);
 800b680:	693b      	ldr	r3, [r7, #16]
 800b682:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b686:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	3308      	adds	r3, #8
 800b68e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b690:	623a      	str	r2, [r7, #32]
 800b692:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b694:	69f9      	ldr	r1, [r7, #28]
 800b696:	6a3a      	ldr	r2, [r7, #32]
 800b698:	e841 2300 	strex	r3, r2, [r1]
 800b69c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b69e:	69bb      	ldr	r3, [r7, #24]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d1e5      	bne.n	800b670 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b6a4:	2300      	movs	r3, #0
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3758      	adds	r7, #88	; 0x58
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}
 800b6ae:	bf00      	nop
 800b6b0:	0800b80d 	.word	0x0800b80d
 800b6b4:	0800b935 	.word	0x0800b935
 800b6b8:	0800b973 	.word	0x0800b973

0800b6bc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b6bc:	b480      	push	{r7}
 800b6be:	b08f      	sub	sp, #60	; 0x3c
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ca:	6a3b      	ldr	r3, [r7, #32]
 800b6cc:	e853 3f00 	ldrex	r3, [r3]
 800b6d0:	61fb      	str	r3, [r7, #28]
   return(result);
 800b6d2:	69fb      	ldr	r3, [r7, #28]
 800b6d4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b6d8:	637b      	str	r3, [r7, #52]	; 0x34
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	461a      	mov	r2, r3
 800b6e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b6e4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b6e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6ea:	e841 2300 	strex	r3, r2, [r1]
 800b6ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d1e6      	bne.n	800b6c4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	3308      	adds	r3, #8
 800b6fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	e853 3f00 	ldrex	r3, [r3]
 800b704:	60bb      	str	r3, [r7, #8]
   return(result);
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b70c:	633b      	str	r3, [r7, #48]	; 0x30
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	3308      	adds	r3, #8
 800b714:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b716:	61ba      	str	r2, [r7, #24]
 800b718:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b71a:	6979      	ldr	r1, [r7, #20]
 800b71c:	69ba      	ldr	r2, [r7, #24]
 800b71e:	e841 2300 	strex	r3, r2, [r1]
 800b722:	613b      	str	r3, [r7, #16]
   return(result);
 800b724:	693b      	ldr	r3, [r7, #16]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d1e5      	bne.n	800b6f6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2220      	movs	r2, #32
 800b72e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800b732:	bf00      	nop
 800b734:	373c      	adds	r7, #60	; 0x3c
 800b736:	46bd      	mov	sp, r7
 800b738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73c:	4770      	bx	lr
	...

0800b740 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b740:	b480      	push	{r7}
 800b742:	b095      	sub	sp, #84	; 0x54
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b74e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b750:	e853 3f00 	ldrex	r3, [r3]
 800b754:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b758:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b75c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	461a      	mov	r2, r3
 800b764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b766:	643b      	str	r3, [r7, #64]	; 0x40
 800b768:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b76a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b76c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b76e:	e841 2300 	strex	r3, r2, [r1]
 800b772:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b776:	2b00      	cmp	r3, #0
 800b778:	d1e6      	bne.n	800b748 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	3308      	adds	r3, #8
 800b780:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b782:	6a3b      	ldr	r3, [r7, #32]
 800b784:	e853 3f00 	ldrex	r3, [r3]
 800b788:	61fb      	str	r3, [r7, #28]
   return(result);
 800b78a:	69fa      	ldr	r2, [r7, #28]
 800b78c:	4b1e      	ldr	r3, [pc, #120]	; (800b808 <UART_EndRxTransfer+0xc8>)
 800b78e:	4013      	ands	r3, r2
 800b790:	64bb      	str	r3, [r7, #72]	; 0x48
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	3308      	adds	r3, #8
 800b798:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b79a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b79c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b79e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b7a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7a2:	e841 2300 	strex	r3, r2, [r1]
 800b7a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d1e5      	bne.n	800b77a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7b2:	2b01      	cmp	r3, #1
 800b7b4:	d118      	bne.n	800b7e8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	e853 3f00 	ldrex	r3, [r3]
 800b7c2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b7c4:	68bb      	ldr	r3, [r7, #8]
 800b7c6:	f023 0310 	bic.w	r3, r3, #16
 800b7ca:	647b      	str	r3, [r7, #68]	; 0x44
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	461a      	mov	r2, r3
 800b7d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7d4:	61bb      	str	r3, [r7, #24]
 800b7d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7d8:	6979      	ldr	r1, [r7, #20]
 800b7da:	69ba      	ldr	r2, [r7, #24]
 800b7dc:	e841 2300 	strex	r3, r2, [r1]
 800b7e0:	613b      	str	r3, [r7, #16]
   return(result);
 800b7e2:	693b      	ldr	r3, [r7, #16]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d1e6      	bne.n	800b7b6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2220      	movs	r2, #32
 800b7ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	675a      	str	r2, [r3, #116]	; 0x74
}
 800b7fc:	bf00      	nop
 800b7fe:	3754      	adds	r7, #84	; 0x54
 800b800:	46bd      	mov	sp, r7
 800b802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b806:	4770      	bx	lr
 800b808:	effffffe 	.word	0xeffffffe

0800b80c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b09c      	sub	sp, #112	; 0x70
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b818:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	69db      	ldr	r3, [r3, #28]
 800b81e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b822:	d071      	beq.n	800b908 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800b824:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b826:	2200      	movs	r2, #0
 800b828:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b82c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b834:	e853 3f00 	ldrex	r3, [r3]
 800b838:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b83a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b83c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b840:	66bb      	str	r3, [r7, #104]	; 0x68
 800b842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	461a      	mov	r2, r3
 800b848:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b84a:	65bb      	str	r3, [r7, #88]	; 0x58
 800b84c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b84e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b850:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b852:	e841 2300 	strex	r3, r2, [r1]
 800b856:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b858:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d1e6      	bne.n	800b82c <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b85e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	3308      	adds	r3, #8
 800b864:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b868:	e853 3f00 	ldrex	r3, [r3]
 800b86c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b86e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b870:	f023 0301 	bic.w	r3, r3, #1
 800b874:	667b      	str	r3, [r7, #100]	; 0x64
 800b876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	3308      	adds	r3, #8
 800b87c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b87e:	647a      	str	r2, [r7, #68]	; 0x44
 800b880:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b882:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b884:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b886:	e841 2300 	strex	r3, r2, [r1]
 800b88a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b88c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d1e5      	bne.n	800b85e <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	3308      	adds	r3, #8
 800b898:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b89c:	e853 3f00 	ldrex	r3, [r3]
 800b8a0:	623b      	str	r3, [r7, #32]
   return(result);
 800b8a2:	6a3b      	ldr	r3, [r7, #32]
 800b8a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8a8:	663b      	str	r3, [r7, #96]	; 0x60
 800b8aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	3308      	adds	r3, #8
 800b8b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b8b2:	633a      	str	r2, [r7, #48]	; 0x30
 800b8b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b8b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8ba:	e841 2300 	strex	r3, r2, [r1]
 800b8be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d1e5      	bne.n	800b892 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b8c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8c8:	2220      	movs	r2, #32
 800b8ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8d2:	2b01      	cmp	r3, #1
 800b8d4:	d118      	bne.n	800b908 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8dc:	693b      	ldr	r3, [r7, #16]
 800b8de:	e853 3f00 	ldrex	r3, [r3]
 800b8e2:	60fb      	str	r3, [r7, #12]
   return(result);
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	f023 0310 	bic.w	r3, r3, #16
 800b8ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b8ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	461a      	mov	r2, r3
 800b8f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b8f4:	61fb      	str	r3, [r7, #28]
 800b8f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8f8:	69b9      	ldr	r1, [r7, #24]
 800b8fa:	69fa      	ldr	r2, [r7, #28]
 800b8fc:	e841 2300 	strex	r3, r2, [r1]
 800b900:	617b      	str	r3, [r7, #20]
   return(result);
 800b902:	697b      	ldr	r3, [r7, #20]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d1e6      	bne.n	800b8d6 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b90a:	2200      	movs	r2, #0
 800b90c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b90e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b910:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b912:	2b01      	cmp	r3, #1
 800b914:	d107      	bne.n	800b926 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b918:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b91c:	4619      	mov	r1, r3
 800b91e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b920:	f7f5 f9d0 	bl	8000cc4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b924:	e002      	b.n	800b92c <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800b926:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b928:	f7f5 f9ae 	bl	8000c88 <HAL_UART_RxCpltCallback>
}
 800b92c:	bf00      	nop
 800b92e:	3770      	adds	r7, #112	; 0x70
 800b930:	46bd      	mov	sp, r7
 800b932:	bd80      	pop	{r7, pc}

0800b934 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b084      	sub	sp, #16
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b940:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	2201      	movs	r2, #1
 800b946:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b94c:	2b01      	cmp	r3, #1
 800b94e:	d109      	bne.n	800b964 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b956:	085b      	lsrs	r3, r3, #1
 800b958:	b29b      	uxth	r3, r3
 800b95a:	4619      	mov	r1, r3
 800b95c:	68f8      	ldr	r0, [r7, #12]
 800b95e:	f7f5 f9b1 	bl	8000cc4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b962:	e002      	b.n	800b96a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800b964:	68f8      	ldr	r0, [r7, #12]
 800b966:	f7fe fdb1 	bl	800a4cc <HAL_UART_RxHalfCpltCallback>
}
 800b96a:	bf00      	nop
 800b96c:	3710      	adds	r7, #16
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}

0800b972 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b972:	b580      	push	{r7, lr}
 800b974:	b086      	sub	sp, #24
 800b976:	af00      	add	r7, sp, #0
 800b978:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b97e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b986:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b988:	697b      	ldr	r3, [r7, #20]
 800b98a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b98e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b990:	697b      	ldr	r3, [r7, #20]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	689b      	ldr	r3, [r3, #8]
 800b996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b99a:	2b80      	cmp	r3, #128	; 0x80
 800b99c:	d109      	bne.n	800b9b2 <UART_DMAError+0x40>
 800b99e:	693b      	ldr	r3, [r7, #16]
 800b9a0:	2b21      	cmp	r3, #33	; 0x21
 800b9a2:	d106      	bne.n	800b9b2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b9a4:	697b      	ldr	r3, [r7, #20]
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800b9ac:	6978      	ldr	r0, [r7, #20]
 800b9ae:	f7ff fe85 	bl	800b6bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b9b2:	697b      	ldr	r3, [r7, #20]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	689b      	ldr	r3, [r3, #8]
 800b9b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9bc:	2b40      	cmp	r3, #64	; 0x40
 800b9be:	d109      	bne.n	800b9d4 <UART_DMAError+0x62>
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	2b22      	cmp	r3, #34	; 0x22
 800b9c4:	d106      	bne.n	800b9d4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b9c6:	697b      	ldr	r3, [r7, #20]
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800b9ce:	6978      	ldr	r0, [r7, #20]
 800b9d0:	f7ff feb6 	bl	800b740 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b9d4:	697b      	ldr	r3, [r7, #20]
 800b9d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9da:	f043 0210 	orr.w	r2, r3, #16
 800b9de:	697b      	ldr	r3, [r7, #20]
 800b9e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b9e4:	6978      	ldr	r0, [r7, #20]
 800b9e6:	f7fe fd7b 	bl	800a4e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b9ea:	bf00      	nop
 800b9ec:	3718      	adds	r7, #24
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}

0800b9f2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b9f2:	b580      	push	{r7, lr}
 800b9f4:	b084      	sub	sp, #16
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	2200      	movs	r2, #0
 800ba04:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ba10:	68f8      	ldr	r0, [r7, #12]
 800ba12:	f7fe fd65 	bl	800a4e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba16:	bf00      	nop
 800ba18:	3710      	adds	r7, #16
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}

0800ba1e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ba1e:	b580      	push	{r7, lr}
 800ba20:	b088      	sub	sp, #32
 800ba22:	af00      	add	r7, sp, #0
 800ba24:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	e853 3f00 	ldrex	r3, [r3]
 800ba32:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba34:	68bb      	ldr	r3, [r7, #8]
 800ba36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba3a:	61fb      	str	r3, [r7, #28]
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	461a      	mov	r2, r3
 800ba42:	69fb      	ldr	r3, [r7, #28]
 800ba44:	61bb      	str	r3, [r7, #24]
 800ba46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba48:	6979      	ldr	r1, [r7, #20]
 800ba4a:	69ba      	ldr	r2, [r7, #24]
 800ba4c:	e841 2300 	strex	r3, r2, [r1]
 800ba50:	613b      	str	r3, [r7, #16]
   return(result);
 800ba52:	693b      	ldr	r3, [r7, #16]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d1e6      	bne.n	800ba26 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2220      	movs	r2, #32
 800ba5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2200      	movs	r2, #0
 800ba64:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f7fe fd26 	bl	800a4b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba6c:	bf00      	nop
 800ba6e:	3720      	adds	r7, #32
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}

0800ba74 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b09c      	sub	sp, #112	; 0x70
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ba82:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba8c:	2b22      	cmp	r3, #34	; 0x22
 800ba8e:	f040 80be 	bne.w	800bc0e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba98:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ba9c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800baa0:	b2d9      	uxtb	r1, r3
 800baa2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800baa6:	b2da      	uxtb	r2, r3
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800baac:	400a      	ands	r2, r1
 800baae:	b2d2      	uxtb	r2, r2
 800bab0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bab6:	1c5a      	adds	r2, r3, #1
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bac2:	b29b      	uxth	r3, r3
 800bac4:	3b01      	subs	r3, #1
 800bac6:	b29a      	uxth	r2, r3
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bad4:	b29b      	uxth	r3, r3
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	f040 80a1 	bne.w	800bc1e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bae4:	e853 3f00 	ldrex	r3, [r3]
 800bae8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800baea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800baec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800baf0:	66bb      	str	r3, [r7, #104]	; 0x68
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	461a      	mov	r2, r3
 800baf8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bafa:	65bb      	str	r3, [r7, #88]	; 0x58
 800bafc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bafe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bb00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bb02:	e841 2300 	strex	r3, r2, [r1]
 800bb06:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bb08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d1e6      	bne.n	800badc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	3308      	adds	r3, #8
 800bb14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb18:	e853 3f00 	ldrex	r3, [r3]
 800bb1c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bb1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb20:	f023 0301 	bic.w	r3, r3, #1
 800bb24:	667b      	str	r3, [r7, #100]	; 0x64
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	3308      	adds	r3, #8
 800bb2c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bb2e:	647a      	str	r2, [r7, #68]	; 0x44
 800bb30:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bb34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bb36:	e841 2300 	strex	r3, r2, [r1]
 800bb3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bb3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d1e5      	bne.n	800bb0e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2220      	movs	r2, #32
 800bb46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2200      	movs	r2, #0
 800bb54:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	4a33      	ldr	r2, [pc, #204]	; (800bc28 <UART_RxISR_8BIT+0x1b4>)
 800bb5c:	4293      	cmp	r3, r2
 800bb5e:	d01f      	beq.n	800bba0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	685b      	ldr	r3, [r3, #4]
 800bb66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d018      	beq.n	800bba0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb76:	e853 3f00 	ldrex	r3, [r3]
 800bb7a:	623b      	str	r3, [r7, #32]
   return(result);
 800bb7c:	6a3b      	ldr	r3, [r7, #32]
 800bb7e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bb82:	663b      	str	r3, [r7, #96]	; 0x60
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	461a      	mov	r2, r3
 800bb8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb8c:	633b      	str	r3, [r7, #48]	; 0x30
 800bb8e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bb92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb94:	e841 2300 	strex	r3, r2, [r1]
 800bb98:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bb9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d1e6      	bne.n	800bb6e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bba4:	2b01      	cmp	r3, #1
 800bba6:	d12e      	bne.n	800bc06 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2200      	movs	r2, #0
 800bbac:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	e853 3f00 	ldrex	r3, [r3]
 800bbba:	60fb      	str	r3, [r7, #12]
   return(result);
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	f023 0310 	bic.w	r3, r3, #16
 800bbc2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	461a      	mov	r2, r3
 800bbca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bbcc:	61fb      	str	r3, [r7, #28]
 800bbce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbd0:	69b9      	ldr	r1, [r7, #24]
 800bbd2:	69fa      	ldr	r2, [r7, #28]
 800bbd4:	e841 2300 	strex	r3, r2, [r1]
 800bbd8:	617b      	str	r3, [r7, #20]
   return(result);
 800bbda:	697b      	ldr	r3, [r7, #20]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d1e6      	bne.n	800bbae <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	69db      	ldr	r3, [r3, #28]
 800bbe6:	f003 0310 	and.w	r3, r3, #16
 800bbea:	2b10      	cmp	r3, #16
 800bbec:	d103      	bne.n	800bbf6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	2210      	movs	r2, #16
 800bbf4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bbfc:	4619      	mov	r1, r3
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f7f5 f860 	bl	8000cc4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bc04:	e00b      	b.n	800bc1e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f7f5 f83e 	bl	8000c88 <HAL_UART_RxCpltCallback>
}
 800bc0c:	e007      	b.n	800bc1e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	699a      	ldr	r2, [r3, #24]
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	f042 0208 	orr.w	r2, r2, #8
 800bc1c:	619a      	str	r2, [r3, #24]
}
 800bc1e:	bf00      	nop
 800bc20:	3770      	adds	r7, #112	; 0x70
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd80      	pop	{r7, pc}
 800bc26:	bf00      	nop
 800bc28:	58000c00 	.word	0x58000c00

0800bc2c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b09c      	sub	sp, #112	; 0x70
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bc3a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc44:	2b22      	cmp	r3, #34	; 0x22
 800bc46:	f040 80be 	bne.w	800bdc6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc50:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc58:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800bc5a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800bc5e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800bc62:	4013      	ands	r3, r2
 800bc64:	b29a      	uxth	r2, r3
 800bc66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bc68:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc6e:	1c9a      	adds	r2, r3, #2
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bc7a:	b29b      	uxth	r3, r3
 800bc7c:	3b01      	subs	r3, #1
 800bc7e:	b29a      	uxth	r2, r3
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bc8c:	b29b      	uxth	r3, r3
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	f040 80a1 	bne.w	800bdd6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc9c:	e853 3f00 	ldrex	r3, [r3]
 800bca0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800bca2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bca4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bca8:	667b      	str	r3, [r7, #100]	; 0x64
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	461a      	mov	r2, r3
 800bcb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bcb2:	657b      	str	r3, [r7, #84]	; 0x54
 800bcb4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcb6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bcb8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bcba:	e841 2300 	strex	r3, r2, [r1]
 800bcbe:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bcc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d1e6      	bne.n	800bc94 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	3308      	adds	r3, #8
 800bccc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcd0:	e853 3f00 	ldrex	r3, [r3]
 800bcd4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bcd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcd8:	f023 0301 	bic.w	r3, r3, #1
 800bcdc:	663b      	str	r3, [r7, #96]	; 0x60
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	3308      	adds	r3, #8
 800bce4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bce6:	643a      	str	r2, [r7, #64]	; 0x40
 800bce8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bcec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bcee:	e841 2300 	strex	r3, r2, [r1]
 800bcf2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bcf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d1e5      	bne.n	800bcc6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	2220      	movs	r2, #32
 800bcfe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	2200      	movs	r2, #0
 800bd06:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	4a33      	ldr	r2, [pc, #204]	; (800bde0 <UART_RxISR_16BIT+0x1b4>)
 800bd14:	4293      	cmp	r3, r2
 800bd16:	d01f      	beq.n	800bd58 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	685b      	ldr	r3, [r3, #4]
 800bd1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d018      	beq.n	800bd58 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd2c:	6a3b      	ldr	r3, [r7, #32]
 800bd2e:	e853 3f00 	ldrex	r3, [r3]
 800bd32:	61fb      	str	r3, [r7, #28]
   return(result);
 800bd34:	69fb      	ldr	r3, [r7, #28]
 800bd36:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bd3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	461a      	mov	r2, r3
 800bd42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd44:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bd46:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bd4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd4c:	e841 2300 	strex	r3, r2, [r1]
 800bd50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bd52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d1e6      	bne.n	800bd26 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd5c:	2b01      	cmp	r3, #1
 800bd5e:	d12e      	bne.n	800bdbe <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2200      	movs	r2, #0
 800bd64:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	e853 3f00 	ldrex	r3, [r3]
 800bd72:	60bb      	str	r3, [r7, #8]
   return(result);
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	f023 0310 	bic.w	r3, r3, #16
 800bd7a:	65bb      	str	r3, [r7, #88]	; 0x58
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	461a      	mov	r2, r3
 800bd82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bd84:	61bb      	str	r3, [r7, #24]
 800bd86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd88:	6979      	ldr	r1, [r7, #20]
 800bd8a:	69ba      	ldr	r2, [r7, #24]
 800bd8c:	e841 2300 	strex	r3, r2, [r1]
 800bd90:	613b      	str	r3, [r7, #16]
   return(result);
 800bd92:	693b      	ldr	r3, [r7, #16]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d1e6      	bne.n	800bd66 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	69db      	ldr	r3, [r3, #28]
 800bd9e:	f003 0310 	and.w	r3, r3, #16
 800bda2:	2b10      	cmp	r3, #16
 800bda4:	d103      	bne.n	800bdae <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	2210      	movs	r2, #16
 800bdac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bdb4:	4619      	mov	r1, r3
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	f7f4 ff84 	bl	8000cc4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bdbc:	e00b      	b.n	800bdd6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800bdbe:	6878      	ldr	r0, [r7, #4]
 800bdc0:	f7f4 ff62 	bl	8000c88 <HAL_UART_RxCpltCallback>
}
 800bdc4:	e007      	b.n	800bdd6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	699a      	ldr	r2, [r3, #24]
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	f042 0208 	orr.w	r2, r2, #8
 800bdd4:	619a      	str	r2, [r3, #24]
}
 800bdd6:	bf00      	nop
 800bdd8:	3770      	adds	r7, #112	; 0x70
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}
 800bdde:	bf00      	nop
 800bde0:	58000c00 	.word	0x58000c00

0800bde4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b0ac      	sub	sp, #176	; 0xb0
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bdf2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	69db      	ldr	r3, [r3, #28]
 800bdfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	689b      	ldr	r3, [r3, #8]
 800be10:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be1a:	2b22      	cmp	r3, #34	; 0x22
 800be1c:	f040 8180 	bne.w	800c120 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800be26:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800be2a:	e123      	b.n	800c074 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be32:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800be36:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800be3a:	b2d9      	uxtb	r1, r3
 800be3c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800be40:	b2da      	uxtb	r2, r3
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be46:	400a      	ands	r2, r1
 800be48:	b2d2      	uxtb	r2, r2
 800be4a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be50:	1c5a      	adds	r2, r3, #1
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800be5c:	b29b      	uxth	r3, r3
 800be5e:	3b01      	subs	r3, #1
 800be60:	b29a      	uxth	r2, r3
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	69db      	ldr	r3, [r3, #28]
 800be6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800be72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800be76:	f003 0307 	and.w	r3, r3, #7
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d053      	beq.n	800bf26 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800be7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800be82:	f003 0301 	and.w	r3, r3, #1
 800be86:	2b00      	cmp	r3, #0
 800be88:	d011      	beq.n	800beae <UART_RxISR_8BIT_FIFOEN+0xca>
 800be8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800be8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be92:	2b00      	cmp	r3, #0
 800be94:	d00b      	beq.n	800beae <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	2201      	movs	r2, #1
 800be9c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bea4:	f043 0201 	orr.w	r2, r3, #1
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800beae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800beb2:	f003 0302 	and.w	r3, r3, #2
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d011      	beq.n	800bede <UART_RxISR_8BIT_FIFOEN+0xfa>
 800beba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bebe:	f003 0301 	and.w	r3, r3, #1
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d00b      	beq.n	800bede <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	2202      	movs	r2, #2
 800becc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bed4:	f043 0204 	orr.w	r2, r3, #4
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bede:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bee2:	f003 0304 	and.w	r3, r3, #4
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d011      	beq.n	800bf0e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800beea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800beee:	f003 0301 	and.w	r3, r3, #1
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d00b      	beq.n	800bf0e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	2204      	movs	r2, #4
 800befc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf04:	f043 0202 	orr.w	r2, r3, #2
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d006      	beq.n	800bf26 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	f7fe fae1 	bl	800a4e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2200      	movs	r2, #0
 800bf22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bf2c:	b29b      	uxth	r3, r3
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	f040 80a0 	bne.w	800c074 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bf3c:	e853 3f00 	ldrex	r3, [r3]
 800bf40:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800bf42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bf48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	461a      	mov	r2, r3
 800bf52:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bf56:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bf58:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf5a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800bf5c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800bf5e:	e841 2300 	strex	r3, r2, [r1]
 800bf62:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800bf64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d1e4      	bne.n	800bf34 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	3308      	adds	r3, #8
 800bf70:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf74:	e853 3f00 	ldrex	r3, [r3]
 800bf78:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800bf7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bf7c:	4b6e      	ldr	r3, [pc, #440]	; (800c138 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800bf7e:	4013      	ands	r3, r2
 800bf80:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	3308      	adds	r3, #8
 800bf8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bf8e:	66ba      	str	r2, [r7, #104]	; 0x68
 800bf90:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf92:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800bf94:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bf96:	e841 2300 	strex	r3, r2, [r1]
 800bf9a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800bf9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d1e3      	bne.n	800bf6a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2220      	movs	r2, #32
 800bfa6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2200      	movs	r2, #0
 800bfae:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	4a60      	ldr	r2, [pc, #384]	; (800c13c <UART_RxISR_8BIT_FIFOEN+0x358>)
 800bfbc:	4293      	cmp	r3, r2
 800bfbe:	d021      	beq.n	800c004 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	685b      	ldr	r3, [r3, #4]
 800bfc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d01a      	beq.n	800c004 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bfd6:	e853 3f00 	ldrex	r3, [r3]
 800bfda:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800bfdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bfde:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bfe2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	461a      	mov	r2, r3
 800bfec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bff0:	657b      	str	r3, [r7, #84]	; 0x54
 800bff2:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bff4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bff6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bff8:	e841 2300 	strex	r3, r2, [r1]
 800bffc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c000:	2b00      	cmp	r3, #0
 800c002:	d1e4      	bne.n	800bfce <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c008:	2b01      	cmp	r3, #1
 800c00a:	d130      	bne.n	800c06e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2200      	movs	r2, #0
 800c010:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c01a:	e853 3f00 	ldrex	r3, [r3]
 800c01e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c022:	f023 0310 	bic.w	r3, r3, #16
 800c026:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	461a      	mov	r2, r3
 800c030:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c034:	643b      	str	r3, [r7, #64]	; 0x40
 800c036:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c038:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c03a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c03c:	e841 2300 	strex	r3, r2, [r1]
 800c040:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c044:	2b00      	cmp	r3, #0
 800c046:	d1e4      	bne.n	800c012 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	69db      	ldr	r3, [r3, #28]
 800c04e:	f003 0310 	and.w	r3, r3, #16
 800c052:	2b10      	cmp	r3, #16
 800c054:	d103      	bne.n	800c05e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	2210      	movs	r2, #16
 800c05c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c064:	4619      	mov	r1, r3
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f7f4 fe2c 	bl	8000cc4 <HAL_UARTEx_RxEventCallback>
 800c06c:	e002      	b.n	800c074 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	f7f4 fe0a 	bl	8000c88 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c074:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d006      	beq.n	800c08a <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800c07c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c080:	f003 0320 	and.w	r3, r3, #32
 800c084:	2b00      	cmp	r3, #0
 800c086:	f47f aed1 	bne.w	800be2c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c090:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c094:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d049      	beq.n	800c130 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c0a2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800c0a6:	429a      	cmp	r2, r3
 800c0a8:	d242      	bcs.n	800c130 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	3308      	adds	r3, #8
 800c0b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0b2:	6a3b      	ldr	r3, [r7, #32]
 800c0b4:	e853 3f00 	ldrex	r3, [r3]
 800c0b8:	61fb      	str	r3, [r7, #28]
   return(result);
 800c0ba:	69fb      	ldr	r3, [r7, #28]
 800c0bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c0c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	3308      	adds	r3, #8
 800c0ca:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c0ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c0d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c0d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c0d6:	e841 2300 	strex	r3, r2, [r1]
 800c0da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d1e3      	bne.n	800c0aa <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	4a16      	ldr	r2, [pc, #88]	; (800c140 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800c0e6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	e853 3f00 	ldrex	r3, [r3]
 800c0f4:	60bb      	str	r3, [r7, #8]
   return(result);
 800c0f6:	68bb      	ldr	r3, [r7, #8]
 800c0f8:	f043 0320 	orr.w	r3, r3, #32
 800c0fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	461a      	mov	r2, r3
 800c106:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c10a:	61bb      	str	r3, [r7, #24]
 800c10c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c10e:	6979      	ldr	r1, [r7, #20]
 800c110:	69ba      	ldr	r2, [r7, #24]
 800c112:	e841 2300 	strex	r3, r2, [r1]
 800c116:	613b      	str	r3, [r7, #16]
   return(result);
 800c118:	693b      	ldr	r3, [r7, #16]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d1e4      	bne.n	800c0e8 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c11e:	e007      	b.n	800c130 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	699a      	ldr	r2, [r3, #24]
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f042 0208 	orr.w	r2, r2, #8
 800c12e:	619a      	str	r2, [r3, #24]
}
 800c130:	bf00      	nop
 800c132:	37b0      	adds	r7, #176	; 0xb0
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}
 800c138:	effffffe 	.word	0xeffffffe
 800c13c:	58000c00 	.word	0x58000c00
 800c140:	0800ba75 	.word	0x0800ba75

0800c144 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b0ae      	sub	sp, #184	; 0xb8
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c152:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	69db      	ldr	r3, [r3, #28]
 800c15c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	689b      	ldr	r3, [r3, #8]
 800c170:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c17a:	2b22      	cmp	r3, #34	; 0x22
 800c17c:	f040 8184 	bne.w	800c488 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c186:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c18a:	e127      	b.n	800c3dc <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c192:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c19a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800c19e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800c1a2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800c1a6:	4013      	ands	r3, r2
 800c1a8:	b29a      	uxth	r2, r3
 800c1aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c1ae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1b4:	1c9a      	adds	r2, r3, #2
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c1c0:	b29b      	uxth	r3, r3
 800c1c2:	3b01      	subs	r3, #1
 800c1c4:	b29a      	uxth	r2, r3
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	69db      	ldr	r3, [r3, #28]
 800c1d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c1d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c1da:	f003 0307 	and.w	r3, r3, #7
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d053      	beq.n	800c28a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c1e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c1e6:	f003 0301 	and.w	r3, r3, #1
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d011      	beq.n	800c212 <UART_RxISR_16BIT_FIFOEN+0xce>
 800c1ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c1f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d00b      	beq.n	800c212 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	2201      	movs	r2, #1
 800c200:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c208:	f043 0201 	orr.w	r2, r3, #1
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c212:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c216:	f003 0302 	and.w	r3, r3, #2
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d011      	beq.n	800c242 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800c21e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c222:	f003 0301 	and.w	r3, r3, #1
 800c226:	2b00      	cmp	r3, #0
 800c228:	d00b      	beq.n	800c242 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	2202      	movs	r2, #2
 800c230:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c238:	f043 0204 	orr.w	r2, r3, #4
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c242:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c246:	f003 0304 	and.w	r3, r3, #4
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d011      	beq.n	800c272 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800c24e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c252:	f003 0301 	and.w	r3, r3, #1
 800c256:	2b00      	cmp	r3, #0
 800c258:	d00b      	beq.n	800c272 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	2204      	movs	r2, #4
 800c260:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c268:	f043 0202 	orr.w	r2, r3, #2
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d006      	beq.n	800c28a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f7fe f92f 	bl	800a4e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	2200      	movs	r2, #0
 800c286:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c290:	b29b      	uxth	r3, r3
 800c292:	2b00      	cmp	r3, #0
 800c294:	f040 80a2 	bne.w	800c3dc <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c29e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c2a0:	e853 3f00 	ldrex	r3, [r3]
 800c2a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c2a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c2a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c2ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	461a      	mov	r2, r3
 800c2b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c2ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c2be:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c2c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c2c6:	e841 2300 	strex	r3, r2, [r1]
 800c2ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c2cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d1e2      	bne.n	800c298 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	3308      	adds	r3, #8
 800c2d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c2dc:	e853 3f00 	ldrex	r3, [r3]
 800c2e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c2e2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c2e4:	4b6e      	ldr	r3, [pc, #440]	; (800c4a0 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800c2e6:	4013      	ands	r3, r2
 800c2e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	3308      	adds	r3, #8
 800c2f2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800c2f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c2f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c2fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c2fe:	e841 2300 	strex	r3, r2, [r1]
 800c302:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c304:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c306:	2b00      	cmp	r3, #0
 800c308:	d1e3      	bne.n	800c2d2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	2220      	movs	r2, #32
 800c30e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	2200      	movs	r2, #0
 800c316:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2200      	movs	r2, #0
 800c31c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	4a60      	ldr	r2, [pc, #384]	; (800c4a4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800c324:	4293      	cmp	r3, r2
 800c326:	d021      	beq.n	800c36c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	685b      	ldr	r3, [r3, #4]
 800c32e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c332:	2b00      	cmp	r3, #0
 800c334:	d01a      	beq.n	800c36c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c33c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c33e:	e853 3f00 	ldrex	r3, [r3]
 800c342:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c344:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c346:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c34a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	461a      	mov	r2, r3
 800c354:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c358:	65bb      	str	r3, [r7, #88]	; 0x58
 800c35a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c35c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c35e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c360:	e841 2300 	strex	r3, r2, [r1]
 800c364:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d1e4      	bne.n	800c336 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c370:	2b01      	cmp	r3, #1
 800c372:	d130      	bne.n	800c3d6 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2200      	movs	r2, #0
 800c378:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c382:	e853 3f00 	ldrex	r3, [r3]
 800c386:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c38a:	f023 0310 	bic.w	r3, r3, #16
 800c38e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	461a      	mov	r2, r3
 800c398:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c39c:	647b      	str	r3, [r7, #68]	; 0x44
 800c39e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c3a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c3a4:	e841 2300 	strex	r3, r2, [r1]
 800c3a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c3aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d1e4      	bne.n	800c37a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	69db      	ldr	r3, [r3, #28]
 800c3b6:	f003 0310 	and.w	r3, r3, #16
 800c3ba:	2b10      	cmp	r3, #16
 800c3bc:	d103      	bne.n	800c3c6 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	2210      	movs	r2, #16
 800c3c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c3cc:	4619      	mov	r1, r3
 800c3ce:	6878      	ldr	r0, [r7, #4]
 800c3d0:	f7f4 fc78 	bl	8000cc4 <HAL_UARTEx_RxEventCallback>
 800c3d4:	e002      	b.n	800c3dc <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c3d6:	6878      	ldr	r0, [r7, #4]
 800c3d8:	f7f4 fc56 	bl	8000c88 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c3dc:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d006      	beq.n	800c3f2 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800c3e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c3e8:	f003 0320 	and.w	r3, r3, #32
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	f47f aecd 	bne.w	800c18c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c3f8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c3fc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800c400:	2b00      	cmp	r3, #0
 800c402:	d049      	beq.n	800c498 <UART_RxISR_16BIT_FIFOEN+0x354>
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c40a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800c40e:	429a      	cmp	r2, r3
 800c410:	d242      	bcs.n	800c498 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	3308      	adds	r3, #8
 800c418:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c41c:	e853 3f00 	ldrex	r3, [r3]
 800c420:	623b      	str	r3, [r7, #32]
   return(result);
 800c422:	6a3b      	ldr	r3, [r7, #32]
 800c424:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c428:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	3308      	adds	r3, #8
 800c432:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c436:	633a      	str	r2, [r7, #48]	; 0x30
 800c438:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c43a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c43c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c43e:	e841 2300 	strex	r3, r2, [r1]
 800c442:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c446:	2b00      	cmp	r3, #0
 800c448:	d1e3      	bne.n	800c412 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	4a16      	ldr	r2, [pc, #88]	; (800c4a8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800c44e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c456:	693b      	ldr	r3, [r7, #16]
 800c458:	e853 3f00 	ldrex	r3, [r3]
 800c45c:	60fb      	str	r3, [r7, #12]
   return(result);
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	f043 0320 	orr.w	r3, r3, #32
 800c464:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	461a      	mov	r2, r3
 800c46e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c472:	61fb      	str	r3, [r7, #28]
 800c474:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c476:	69b9      	ldr	r1, [r7, #24]
 800c478:	69fa      	ldr	r2, [r7, #28]
 800c47a:	e841 2300 	strex	r3, r2, [r1]
 800c47e:	617b      	str	r3, [r7, #20]
   return(result);
 800c480:	697b      	ldr	r3, [r7, #20]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d1e4      	bne.n	800c450 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c486:	e007      	b.n	800c498 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	699a      	ldr	r2, [r3, #24]
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	f042 0208 	orr.w	r2, r2, #8
 800c496:	619a      	str	r2, [r3, #24]
}
 800c498:	bf00      	nop
 800c49a:	37b8      	adds	r7, #184	; 0xb8
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}
 800c4a0:	effffffe 	.word	0xeffffffe
 800c4a4:	58000c00 	.word	0x58000c00
 800c4a8:	0800bc2d 	.word	0x0800bc2d

0800c4ac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c4ac:	b480      	push	{r7}
 800c4ae:	b083      	sub	sp, #12
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c4b4:	bf00      	nop
 800c4b6:	370c      	adds	r7, #12
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4be:	4770      	bx	lr

0800c4c0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c4c0:	b480      	push	{r7}
 800c4c2:	b083      	sub	sp, #12
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c4c8:	bf00      	nop
 800c4ca:	370c      	adds	r7, #12
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d2:	4770      	bx	lr

0800c4d4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c4d4:	b480      	push	{r7}
 800c4d6:	b083      	sub	sp, #12
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c4dc:	bf00      	nop
 800c4de:	370c      	adds	r7, #12
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e6:	4770      	bx	lr

0800c4e8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c4e8:	b480      	push	{r7}
 800c4ea:	b085      	sub	sp, #20
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c4f6:	2b01      	cmp	r3, #1
 800c4f8:	d101      	bne.n	800c4fe <HAL_UARTEx_DisableFifoMode+0x16>
 800c4fa:	2302      	movs	r3, #2
 800c4fc:	e027      	b.n	800c54e <HAL_UARTEx_DisableFifoMode+0x66>
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	2201      	movs	r2, #1
 800c502:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	2224      	movs	r2, #36	; 0x24
 800c50a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	681a      	ldr	r2, [r3, #0]
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	f022 0201 	bic.w	r2, r2, #1
 800c524:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c52c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	2200      	movs	r2, #0
 800c532:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	68fa      	ldr	r2, [r7, #12]
 800c53a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2220      	movs	r2, #32
 800c540:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2200      	movs	r2, #0
 800c548:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c54c:	2300      	movs	r3, #0
}
 800c54e:	4618      	mov	r0, r3
 800c550:	3714      	adds	r7, #20
 800c552:	46bd      	mov	sp, r7
 800c554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c558:	4770      	bx	lr

0800c55a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c55a:	b580      	push	{r7, lr}
 800c55c:	b084      	sub	sp, #16
 800c55e:	af00      	add	r7, sp, #0
 800c560:	6078      	str	r0, [r7, #4]
 800c562:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c56a:	2b01      	cmp	r3, #1
 800c56c:	d101      	bne.n	800c572 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c56e:	2302      	movs	r3, #2
 800c570:	e02d      	b.n	800c5ce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	2201      	movs	r2, #1
 800c576:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	2224      	movs	r2, #36	; 0x24
 800c57e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	681a      	ldr	r2, [r3, #0]
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	f022 0201 	bic.w	r2, r2, #1
 800c598:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	689b      	ldr	r3, [r3, #8]
 800c5a0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	683a      	ldr	r2, [r7, #0]
 800c5aa:	430a      	orrs	r2, r1
 800c5ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	f000 f850 	bl	800c654 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	68fa      	ldr	r2, [r7, #12]
 800c5ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2220      	movs	r2, #32
 800c5c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c5cc:	2300      	movs	r3, #0
}
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	3710      	adds	r7, #16
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd80      	pop	{r7, pc}

0800c5d6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c5d6:	b580      	push	{r7, lr}
 800c5d8:	b084      	sub	sp, #16
 800c5da:	af00      	add	r7, sp, #0
 800c5dc:	6078      	str	r0, [r7, #4]
 800c5de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c5e6:	2b01      	cmp	r3, #1
 800c5e8:	d101      	bne.n	800c5ee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c5ea:	2302      	movs	r3, #2
 800c5ec:	e02d      	b.n	800c64a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	2201      	movs	r2, #1
 800c5f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2224      	movs	r2, #36	; 0x24
 800c5fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	681a      	ldr	r2, [r3, #0]
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	f022 0201 	bic.w	r2, r2, #1
 800c614:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	689b      	ldr	r3, [r3, #8]
 800c61c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	683a      	ldr	r2, [r7, #0]
 800c626:	430a      	orrs	r2, r1
 800c628:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	f000 f812 	bl	800c654 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	68fa      	ldr	r2, [r7, #12]
 800c636:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2220      	movs	r2, #32
 800c63c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2200      	movs	r2, #0
 800c644:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c648:	2300      	movs	r3, #0
}
 800c64a:	4618      	mov	r0, r3
 800c64c:	3710      	adds	r7, #16
 800c64e:	46bd      	mov	sp, r7
 800c650:	bd80      	pop	{r7, pc}
	...

0800c654 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c654:	b480      	push	{r7}
 800c656:	b085      	sub	sp, #20
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c660:	2b00      	cmp	r3, #0
 800c662:	d108      	bne.n	800c676 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2201      	movs	r2, #1
 800c668:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2201      	movs	r2, #1
 800c670:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c674:	e031      	b.n	800c6da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c676:	2310      	movs	r3, #16
 800c678:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c67a:	2310      	movs	r3, #16
 800c67c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	689b      	ldr	r3, [r3, #8]
 800c684:	0e5b      	lsrs	r3, r3, #25
 800c686:	b2db      	uxtb	r3, r3
 800c688:	f003 0307 	and.w	r3, r3, #7
 800c68c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	689b      	ldr	r3, [r3, #8]
 800c694:	0f5b      	lsrs	r3, r3, #29
 800c696:	b2db      	uxtb	r3, r3
 800c698:	f003 0307 	and.w	r3, r3, #7
 800c69c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c69e:	7bbb      	ldrb	r3, [r7, #14]
 800c6a0:	7b3a      	ldrb	r2, [r7, #12]
 800c6a2:	4911      	ldr	r1, [pc, #68]	; (800c6e8 <UARTEx_SetNbDataToProcess+0x94>)
 800c6a4:	5c8a      	ldrb	r2, [r1, r2]
 800c6a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c6aa:	7b3a      	ldrb	r2, [r7, #12]
 800c6ac:	490f      	ldr	r1, [pc, #60]	; (800c6ec <UARTEx_SetNbDataToProcess+0x98>)
 800c6ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c6b0:	fb93 f3f2 	sdiv	r3, r3, r2
 800c6b4:	b29a      	uxth	r2, r3
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c6bc:	7bfb      	ldrb	r3, [r7, #15]
 800c6be:	7b7a      	ldrb	r2, [r7, #13]
 800c6c0:	4909      	ldr	r1, [pc, #36]	; (800c6e8 <UARTEx_SetNbDataToProcess+0x94>)
 800c6c2:	5c8a      	ldrb	r2, [r1, r2]
 800c6c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c6c8:	7b7a      	ldrb	r2, [r7, #13]
 800c6ca:	4908      	ldr	r1, [pc, #32]	; (800c6ec <UARTEx_SetNbDataToProcess+0x98>)
 800c6cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c6ce:	fb93 f3f2 	sdiv	r3, r3, r2
 800c6d2:	b29a      	uxth	r2, r3
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c6da:	bf00      	nop
 800c6dc:	3714      	adds	r7, #20
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e4:	4770      	bx	lr
 800c6e6:	bf00      	nop
 800c6e8:	0801c9f0 	.word	0x0801c9f0
 800c6ec:	0801c9f8 	.word	0x0801c9f8

0800c6f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c6f0:	b084      	sub	sp, #16
 800c6f2:	b580      	push	{r7, lr}
 800c6f4:	b084      	sub	sp, #16
 800c6f6:	af00      	add	r7, sp, #0
 800c6f8:	6078      	str	r0, [r7, #4]
 800c6fa:	f107 001c 	add.w	r0, r7, #28
 800c6fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c704:	2b01      	cmp	r3, #1
 800c706:	d120      	bne.n	800c74a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c70c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	68da      	ldr	r2, [r3, #12]
 800c718:	4b2a      	ldr	r3, [pc, #168]	; (800c7c4 <USB_CoreInit+0xd4>)
 800c71a:	4013      	ands	r3, r2
 800c71c:	687a      	ldr	r2, [r7, #4]
 800c71e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	68db      	ldr	r3, [r3, #12]
 800c724:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c72c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c72e:	2b01      	cmp	r3, #1
 800c730:	d105      	bne.n	800c73e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	68db      	ldr	r3, [r3, #12]
 800c736:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f000 faac 	bl	800cc9c <USB_CoreReset>
 800c744:	4603      	mov	r3, r0
 800c746:	73fb      	strb	r3, [r7, #15]
 800c748:	e01a      	b.n	800c780 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	68db      	ldr	r3, [r3, #12]
 800c74e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	f000 faa0 	bl	800cc9c <USB_CoreReset>
 800c75c:	4603      	mov	r3, r0
 800c75e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c760:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c762:	2b00      	cmp	r3, #0
 800c764:	d106      	bne.n	800c774 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c76a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	639a      	str	r2, [r3, #56]	; 0x38
 800c772:	e005      	b.n	800c780 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c778:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c782:	2b01      	cmp	r3, #1
 800c784:	d116      	bne.n	800c7b4 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c78a:	b29a      	uxth	r2, r3
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c794:	4b0c      	ldr	r3, [pc, #48]	; (800c7c8 <USB_CoreInit+0xd8>)
 800c796:	4313      	orrs	r3, r2
 800c798:	687a      	ldr	r2, [r7, #4]
 800c79a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	689b      	ldr	r3, [r3, #8]
 800c7a0:	f043 0206 	orr.w	r2, r3, #6
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	689b      	ldr	r3, [r3, #8]
 800c7ac:	f043 0220 	orr.w	r2, r3, #32
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c7b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	3710      	adds	r7, #16
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c7c0:	b004      	add	sp, #16
 800c7c2:	4770      	bx	lr
 800c7c4:	ffbdffbf 	.word	0xffbdffbf
 800c7c8:	03ee0000 	.word	0x03ee0000

0800c7cc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c7cc:	b480      	push	{r7}
 800c7ce:	b083      	sub	sp, #12
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	689b      	ldr	r3, [r3, #8]
 800c7d8:	f023 0201 	bic.w	r2, r3, #1
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c7e0:	2300      	movs	r3, #0
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	370c      	adds	r7, #12
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ec:	4770      	bx	lr

0800c7ee <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c7ee:	b580      	push	{r7, lr}
 800c7f0:	b084      	sub	sp, #16
 800c7f2:	af00      	add	r7, sp, #0
 800c7f4:	6078      	str	r0, [r7, #4]
 800c7f6:	460b      	mov	r3, r1
 800c7f8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	68db      	ldr	r3, [r3, #12]
 800c802:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c80a:	78fb      	ldrb	r3, [r7, #3]
 800c80c:	2b01      	cmp	r3, #1
 800c80e:	d115      	bne.n	800c83c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	68db      	ldr	r3, [r3, #12]
 800c814:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c81c:	2001      	movs	r0, #1
 800c81e:	f7f5 fb2d 	bl	8001e7c <HAL_Delay>
      ms++;
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	3301      	adds	r3, #1
 800c826:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800c828:	6878      	ldr	r0, [r7, #4]
 800c82a:	f000 fa29 	bl	800cc80 <USB_GetMode>
 800c82e:	4603      	mov	r3, r0
 800c830:	2b01      	cmp	r3, #1
 800c832:	d01e      	beq.n	800c872 <USB_SetCurrentMode+0x84>
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	2b31      	cmp	r3, #49	; 0x31
 800c838:	d9f0      	bls.n	800c81c <USB_SetCurrentMode+0x2e>
 800c83a:	e01a      	b.n	800c872 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c83c:	78fb      	ldrb	r3, [r7, #3]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d115      	bne.n	800c86e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	68db      	ldr	r3, [r3, #12]
 800c846:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c84e:	2001      	movs	r0, #1
 800c850:	f7f5 fb14 	bl	8001e7c <HAL_Delay>
      ms++;
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	3301      	adds	r3, #1
 800c858:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c85a:	6878      	ldr	r0, [r7, #4]
 800c85c:	f000 fa10 	bl	800cc80 <USB_GetMode>
 800c860:	4603      	mov	r3, r0
 800c862:	2b00      	cmp	r3, #0
 800c864:	d005      	beq.n	800c872 <USB_SetCurrentMode+0x84>
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	2b31      	cmp	r3, #49	; 0x31
 800c86a:	d9f0      	bls.n	800c84e <USB_SetCurrentMode+0x60>
 800c86c:	e001      	b.n	800c872 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c86e:	2301      	movs	r3, #1
 800c870:	e005      	b.n	800c87e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	2b32      	cmp	r3, #50	; 0x32
 800c876:	d101      	bne.n	800c87c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c878:	2301      	movs	r3, #1
 800c87a:	e000      	b.n	800c87e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c87c:	2300      	movs	r3, #0
}
 800c87e:	4618      	mov	r0, r3
 800c880:	3710      	adds	r7, #16
 800c882:	46bd      	mov	sp, r7
 800c884:	bd80      	pop	{r7, pc}
	...

0800c888 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c888:	b084      	sub	sp, #16
 800c88a:	b580      	push	{r7, lr}
 800c88c:	b086      	sub	sp, #24
 800c88e:	af00      	add	r7, sp, #0
 800c890:	6078      	str	r0, [r7, #4]
 800c892:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c896:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c89a:	2300      	movs	r3, #0
 800c89c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	613b      	str	r3, [r7, #16]
 800c8a6:	e009      	b.n	800c8bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c8a8:	687a      	ldr	r2, [r7, #4]
 800c8aa:	693b      	ldr	r3, [r7, #16]
 800c8ac:	3340      	adds	r3, #64	; 0x40
 800c8ae:	009b      	lsls	r3, r3, #2
 800c8b0:	4413      	add	r3, r2
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c8b6:	693b      	ldr	r3, [r7, #16]
 800c8b8:	3301      	adds	r3, #1
 800c8ba:	613b      	str	r3, [r7, #16]
 800c8bc:	693b      	ldr	r3, [r7, #16]
 800c8be:	2b0e      	cmp	r3, #14
 800c8c0:	d9f2      	bls.n	800c8a8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c8c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d11c      	bne.n	800c902 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8ce:	685b      	ldr	r3, [r3, #4]
 800c8d0:	68fa      	ldr	r2, [r7, #12]
 800c8d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c8d6:	f043 0302 	orr.w	r3, r3, #2
 800c8da:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8e0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	601a      	str	r2, [r3, #0]
 800c900:	e005      	b.n	800c90e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c906:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c914:	461a      	mov	r2, r3
 800c916:	2300      	movs	r3, #0
 800c918:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c920:	4619      	mov	r1, r3
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c928:	461a      	mov	r2, r3
 800c92a:	680b      	ldr	r3, [r1, #0]
 800c92c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c92e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c930:	2b01      	cmp	r3, #1
 800c932:	d10c      	bne.n	800c94e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c936:	2b00      	cmp	r3, #0
 800c938:	d104      	bne.n	800c944 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c93a:	2100      	movs	r1, #0
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f000 f965 	bl	800cc0c <USB_SetDevSpeed>
 800c942:	e008      	b.n	800c956 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c944:	2101      	movs	r1, #1
 800c946:	6878      	ldr	r0, [r7, #4]
 800c948:	f000 f960 	bl	800cc0c <USB_SetDevSpeed>
 800c94c:	e003      	b.n	800c956 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c94e:	2103      	movs	r1, #3
 800c950:	6878      	ldr	r0, [r7, #4]
 800c952:	f000 f95b 	bl	800cc0c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c956:	2110      	movs	r1, #16
 800c958:	6878      	ldr	r0, [r7, #4]
 800c95a:	f000 f8f3 	bl	800cb44 <USB_FlushTxFifo>
 800c95e:	4603      	mov	r3, r0
 800c960:	2b00      	cmp	r3, #0
 800c962:	d001      	beq.n	800c968 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800c964:	2301      	movs	r3, #1
 800c966:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f000 f91f 	bl	800cbac <USB_FlushRxFifo>
 800c96e:	4603      	mov	r3, r0
 800c970:	2b00      	cmp	r3, #0
 800c972:	d001      	beq.n	800c978 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800c974:	2301      	movs	r3, #1
 800c976:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c97e:	461a      	mov	r2, r3
 800c980:	2300      	movs	r3, #0
 800c982:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c98a:	461a      	mov	r2, r3
 800c98c:	2300      	movs	r3, #0
 800c98e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c996:	461a      	mov	r2, r3
 800c998:	2300      	movs	r3, #0
 800c99a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c99c:	2300      	movs	r3, #0
 800c99e:	613b      	str	r3, [r7, #16]
 800c9a0:	e043      	b.n	800ca2a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c9a2:	693b      	ldr	r3, [r7, #16]
 800c9a4:	015a      	lsls	r2, r3, #5
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	4413      	add	r3, r2
 800c9aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c9b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c9b8:	d118      	bne.n	800c9ec <USB_DevInit+0x164>
    {
      if (i == 0U)
 800c9ba:	693b      	ldr	r3, [r7, #16]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d10a      	bne.n	800c9d6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c9c0:	693b      	ldr	r3, [r7, #16]
 800c9c2:	015a      	lsls	r2, r3, #5
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	4413      	add	r3, r2
 800c9c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9cc:	461a      	mov	r2, r3
 800c9ce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c9d2:	6013      	str	r3, [r2, #0]
 800c9d4:	e013      	b.n	800c9fe <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c9d6:	693b      	ldr	r3, [r7, #16]
 800c9d8:	015a      	lsls	r2, r3, #5
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	4413      	add	r3, r2
 800c9de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9e2:	461a      	mov	r2, r3
 800c9e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c9e8:	6013      	str	r3, [r2, #0]
 800c9ea:	e008      	b.n	800c9fe <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c9ec:	693b      	ldr	r3, [r7, #16]
 800c9ee:	015a      	lsls	r2, r3, #5
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	4413      	add	r3, r2
 800c9f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9f8:	461a      	mov	r2, r3
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c9fe:	693b      	ldr	r3, [r7, #16]
 800ca00:	015a      	lsls	r2, r3, #5
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	4413      	add	r3, r2
 800ca06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca0a:	461a      	mov	r2, r3
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ca10:	693b      	ldr	r3, [r7, #16]
 800ca12:	015a      	lsls	r2, r3, #5
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	4413      	add	r3, r2
 800ca18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca1c:	461a      	mov	r2, r3
 800ca1e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ca22:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ca24:	693b      	ldr	r3, [r7, #16]
 800ca26:	3301      	adds	r3, #1
 800ca28:	613b      	str	r3, [r7, #16]
 800ca2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca2c:	693a      	ldr	r2, [r7, #16]
 800ca2e:	429a      	cmp	r2, r3
 800ca30:	d3b7      	bcc.n	800c9a2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ca32:	2300      	movs	r3, #0
 800ca34:	613b      	str	r3, [r7, #16]
 800ca36:	e043      	b.n	800cac0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ca38:	693b      	ldr	r3, [r7, #16]
 800ca3a:	015a      	lsls	r2, r3, #5
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	4413      	add	r3, r2
 800ca40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ca4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ca4e:	d118      	bne.n	800ca82 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800ca50:	693b      	ldr	r3, [r7, #16]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d10a      	bne.n	800ca6c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ca56:	693b      	ldr	r3, [r7, #16]
 800ca58:	015a      	lsls	r2, r3, #5
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	4413      	add	r3, r2
 800ca5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca62:	461a      	mov	r2, r3
 800ca64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ca68:	6013      	str	r3, [r2, #0]
 800ca6a:	e013      	b.n	800ca94 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ca6c:	693b      	ldr	r3, [r7, #16]
 800ca6e:	015a      	lsls	r2, r3, #5
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	4413      	add	r3, r2
 800ca74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca78:	461a      	mov	r2, r3
 800ca7a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ca7e:	6013      	str	r3, [r2, #0]
 800ca80:	e008      	b.n	800ca94 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ca82:	693b      	ldr	r3, [r7, #16]
 800ca84:	015a      	lsls	r2, r3, #5
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	4413      	add	r3, r2
 800ca8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca8e:	461a      	mov	r2, r3
 800ca90:	2300      	movs	r3, #0
 800ca92:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ca94:	693b      	ldr	r3, [r7, #16]
 800ca96:	015a      	lsls	r2, r3, #5
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	4413      	add	r3, r2
 800ca9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800caa0:	461a      	mov	r2, r3
 800caa2:	2300      	movs	r3, #0
 800caa4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800caa6:	693b      	ldr	r3, [r7, #16]
 800caa8:	015a      	lsls	r2, r3, #5
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	4413      	add	r3, r2
 800caae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cab2:	461a      	mov	r2, r3
 800cab4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cab8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800caba:	693b      	ldr	r3, [r7, #16]
 800cabc:	3301      	adds	r3, #1
 800cabe:	613b      	str	r3, [r7, #16]
 800cac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cac2:	693a      	ldr	r2, [r7, #16]
 800cac4:	429a      	cmp	r2, r3
 800cac6:	d3b7      	bcc.n	800ca38 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cace:	691b      	ldr	r3, [r3, #16]
 800cad0:	68fa      	ldr	r2, [r7, #12]
 800cad2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cad6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cada:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2200      	movs	r2, #0
 800cae0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800cae8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800caea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caec:	2b00      	cmp	r3, #0
 800caee:	d105      	bne.n	800cafc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	699b      	ldr	r3, [r3, #24]
 800caf4:	f043 0210 	orr.w	r2, r3, #16
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	699a      	ldr	r2, [r3, #24]
 800cb00:	4b0e      	ldr	r3, [pc, #56]	; (800cb3c <USB_DevInit+0x2b4>)
 800cb02:	4313      	orrs	r3, r2
 800cb04:	687a      	ldr	r2, [r7, #4]
 800cb06:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800cb08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d005      	beq.n	800cb1a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	699b      	ldr	r3, [r3, #24]
 800cb12:	f043 0208 	orr.w	r2, r3, #8
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800cb1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb1c:	2b01      	cmp	r3, #1
 800cb1e:	d105      	bne.n	800cb2c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	699a      	ldr	r2, [r3, #24]
 800cb24:	4b06      	ldr	r3, [pc, #24]	; (800cb40 <USB_DevInit+0x2b8>)
 800cb26:	4313      	orrs	r3, r2
 800cb28:	687a      	ldr	r2, [r7, #4]
 800cb2a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800cb2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb2e:	4618      	mov	r0, r3
 800cb30:	3718      	adds	r7, #24
 800cb32:	46bd      	mov	sp, r7
 800cb34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cb38:	b004      	add	sp, #16
 800cb3a:	4770      	bx	lr
 800cb3c:	803c3800 	.word	0x803c3800
 800cb40:	40000004 	.word	0x40000004

0800cb44 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cb44:	b480      	push	{r7}
 800cb46:	b085      	sub	sp, #20
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
 800cb4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800cb4e:	2300      	movs	r3, #0
 800cb50:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	3301      	adds	r3, #1
 800cb56:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	4a13      	ldr	r2, [pc, #76]	; (800cba8 <USB_FlushTxFifo+0x64>)
 800cb5c:	4293      	cmp	r3, r2
 800cb5e:	d901      	bls.n	800cb64 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800cb60:	2303      	movs	r3, #3
 800cb62:	e01b      	b.n	800cb9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	691b      	ldr	r3, [r3, #16]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	daf2      	bge.n	800cb52 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	019b      	lsls	r3, r3, #6
 800cb74:	f043 0220 	orr.w	r2, r3, #32
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	3301      	adds	r3, #1
 800cb80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	4a08      	ldr	r2, [pc, #32]	; (800cba8 <USB_FlushTxFifo+0x64>)
 800cb86:	4293      	cmp	r3, r2
 800cb88:	d901      	bls.n	800cb8e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800cb8a:	2303      	movs	r3, #3
 800cb8c:	e006      	b.n	800cb9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	691b      	ldr	r3, [r3, #16]
 800cb92:	f003 0320 	and.w	r3, r3, #32
 800cb96:	2b20      	cmp	r3, #32
 800cb98:	d0f0      	beq.n	800cb7c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800cb9a:	2300      	movs	r3, #0
}
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	3714      	adds	r7, #20
 800cba0:	46bd      	mov	sp, r7
 800cba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba6:	4770      	bx	lr
 800cba8:	00030d40 	.word	0x00030d40

0800cbac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800cbac:	b480      	push	{r7}
 800cbae:	b085      	sub	sp, #20
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	3301      	adds	r3, #1
 800cbbc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	4a11      	ldr	r2, [pc, #68]	; (800cc08 <USB_FlushRxFifo+0x5c>)
 800cbc2:	4293      	cmp	r3, r2
 800cbc4:	d901      	bls.n	800cbca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800cbc6:	2303      	movs	r3, #3
 800cbc8:	e018      	b.n	800cbfc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	691b      	ldr	r3, [r3, #16]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	daf2      	bge.n	800cbb8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	2210      	movs	r2, #16
 800cbda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	3301      	adds	r3, #1
 800cbe0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	4a08      	ldr	r2, [pc, #32]	; (800cc08 <USB_FlushRxFifo+0x5c>)
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	d901      	bls.n	800cbee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800cbea:	2303      	movs	r3, #3
 800cbec:	e006      	b.n	800cbfc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	691b      	ldr	r3, [r3, #16]
 800cbf2:	f003 0310 	and.w	r3, r3, #16
 800cbf6:	2b10      	cmp	r3, #16
 800cbf8:	d0f0      	beq.n	800cbdc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800cbfa:	2300      	movs	r3, #0
}
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	3714      	adds	r7, #20
 800cc00:	46bd      	mov	sp, r7
 800cc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc06:	4770      	bx	lr
 800cc08:	00030d40 	.word	0x00030d40

0800cc0c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800cc0c:	b480      	push	{r7}
 800cc0e:	b085      	sub	sp, #20
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
 800cc14:	460b      	mov	r3, r1
 800cc16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc22:	681a      	ldr	r2, [r3, #0]
 800cc24:	78fb      	ldrb	r3, [r7, #3]
 800cc26:	68f9      	ldr	r1, [r7, #12]
 800cc28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cc2c:	4313      	orrs	r3, r2
 800cc2e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800cc30:	2300      	movs	r3, #0
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	3714      	adds	r7, #20
 800cc36:	46bd      	mov	sp, r7
 800cc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3c:	4770      	bx	lr

0800cc3e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cc3e:	b480      	push	{r7}
 800cc40:	b085      	sub	sp, #20
 800cc42:	af00      	add	r7, sp, #0
 800cc44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	68fa      	ldr	r2, [r7, #12]
 800cc54:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cc58:	f023 0303 	bic.w	r3, r3, #3
 800cc5c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc64:	685b      	ldr	r3, [r3, #4]
 800cc66:	68fa      	ldr	r2, [r7, #12]
 800cc68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cc6c:	f043 0302 	orr.w	r3, r3, #2
 800cc70:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cc72:	2300      	movs	r3, #0
}
 800cc74:	4618      	mov	r0, r3
 800cc76:	3714      	adds	r7, #20
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7e:	4770      	bx	lr

0800cc80 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800cc80:	b480      	push	{r7}
 800cc82:	b083      	sub	sp, #12
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	695b      	ldr	r3, [r3, #20]
 800cc8c:	f003 0301 	and.w	r3, r3, #1
}
 800cc90:	4618      	mov	r0, r3
 800cc92:	370c      	adds	r7, #12
 800cc94:	46bd      	mov	sp, r7
 800cc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9a:	4770      	bx	lr

0800cc9c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cc9c:	b480      	push	{r7}
 800cc9e:	b085      	sub	sp, #20
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cca4:	2300      	movs	r3, #0
 800cca6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	3301      	adds	r3, #1
 800ccac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	4a13      	ldr	r2, [pc, #76]	; (800cd00 <USB_CoreReset+0x64>)
 800ccb2:	4293      	cmp	r3, r2
 800ccb4:	d901      	bls.n	800ccba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ccb6:	2303      	movs	r3, #3
 800ccb8:	e01b      	b.n	800ccf2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	691b      	ldr	r3, [r3, #16]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	daf2      	bge.n	800cca8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	691b      	ldr	r3, [r3, #16]
 800ccca:	f043 0201 	orr.w	r2, r3, #1
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	3301      	adds	r3, #1
 800ccd6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	4a09      	ldr	r2, [pc, #36]	; (800cd00 <USB_CoreReset+0x64>)
 800ccdc:	4293      	cmp	r3, r2
 800ccde:	d901      	bls.n	800cce4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cce0:	2303      	movs	r3, #3
 800cce2:	e006      	b.n	800ccf2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	691b      	ldr	r3, [r3, #16]
 800cce8:	f003 0301 	and.w	r3, r3, #1
 800ccec:	2b01      	cmp	r3, #1
 800ccee:	d0f0      	beq.n	800ccd2 <USB_CoreReset+0x36>

  return HAL_OK;
 800ccf0:	2300      	movs	r3, #0
}
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	3714      	adds	r7, #20
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfc:	4770      	bx	lr
 800ccfe:	bf00      	nop
 800cd00:	00030d40 	.word	0x00030d40

0800cd04 <_ZN10Algorithms10AHRSKalmanC1Ev>:
{

class AHRSKalman
{
public:
	AHRSKalman(){};
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b082      	sub	sp, #8
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	3310      	adds	r3, #16
 800cd10:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800cd14:	4618      	mov	r0, r3
 800cd16:	f000 faef 	bl	800d2f8 <_ZN3Mat3EyeILt4EEENS_6MatrixIXT_EXT_EEEf>
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	4a08      	ldr	r2, [pc, #32]	; (800cd40 <_ZN10Algorithms10AHRSKalmanC1Ev+0x3c>)
 800cd1e:	659a      	str	r2, [r3, #88]	; 0x58
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	4a08      	ldr	r2, [pc, #32]	; (800cd44 <_ZN10Algorithms10AHRSKalmanC1Ev+0x40>)
 800cd24:	65da      	str	r2, [r3, #92]	; 0x5c
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	4a05      	ldr	r2, [pc, #20]	; (800cd40 <_ZN10Algorithms10AHRSKalmanC1Ev+0x3c>)
 800cd2a:	661a      	str	r2, [r3, #96]	; 0x60
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	3364      	adds	r3, #100	; 0x64
 800cd30:	4618      	mov	r0, r3
 800cd32:	f000 fb05 	bl	800d340 <_ZN3Mat6MatrixILt4ELt4EEC1Ev>
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	4618      	mov	r0, r3
 800cd3a:	3708      	adds	r7, #8
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bd80      	pop	{r7, pc}
 800cd40:	3d4ccccd 	.word	0x3d4ccccd
 800cd44:	3e4ccccd 	.word	0x3e4ccccd

0800cd48 <_ZN10Algorithms11VelocityEKFCI1NS_20ExtendedKalmanFilterILt6ELt3ELt6EEEERKN3Mat8V_VectorILt6EEERKNS3_6MatrixILt6ELt6EEEf>:
	using VelEKFBase::ControlVec;
	using VelEKFBase::MeassurementVec;
	using VelEKFBase::StateCovarianceMatrix;
	using VelEKFBase::ControlCovarianceMatrix;
	using VelEKFBase::MeasurementCovarianceMatrix;
	using VelEKFBase::VelEKFBase;
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b084      	sub	sp, #16
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	60f8      	str	r0, [r7, #12]
 800cd50:	60b9      	str	r1, [r7, #8]
 800cd52:	607a      	str	r2, [r7, #4]
 800cd54:	ed87 0a00 	vstr	s0, [r7]
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	edd7 7a00 	vldr	s15, [r7]
 800cd5e:	eeb0 0a67 	vmov.f32	s0, s15
 800cd62:	687a      	ldr	r2, [r7, #4]
 800cd64:	68b9      	ldr	r1, [r7, #8]
 800cd66:	4618      	mov	r0, r3
 800cd68:	f000 fb0e 	bl	800d388 <_ZN10Algorithms20ExtendedKalmanFilterILt6ELt3ELt6EEC1ERKN3Mat8V_VectorILt6EEERKNS2_6MatrixILt6ELt6EEEf>
 800cd6c:	4a03      	ldr	r2, [pc, #12]	; (800cd7c <_ZN10Algorithms11VelocityEKFCI1NS_20ExtendedKalmanFilterILt6ELt3ELt6EEEERKN3Mat8V_VectorILt6EEERKNS3_6MatrixILt6ELt6EEEf+0x34>)
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	601a      	str	r2, [r3, #0]
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	4618      	mov	r0, r3
 800cd76:	3710      	adds	r7, #16
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	bd80      	pop	{r7, pc}
 800cd7c:	0801ca34 	.word	0x0801ca34

0800cd80 <_ZN10Algorithms15FusionAlgorithmC1Ev>:
public:
//	FusionAlgorithm(
//			const OrientationEKF::StateVec& oriState, const OrientationEKF::StateCovarianceMatrix& oriCov,
//			const VelocityEKF::StateVec& velState, const VelocityEKF::StateCovarianceMatrix& velCov,
//			float time);
	FusionAlgorithm(){
 800cd80:	b5b0      	push	{r4, r5, r7, lr}
 800cd82:	b0b6      	sub	sp, #216	; 0xd8
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	62f8      	str	r0, [r7, #44]	; 0x2c
 800cd88:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800cd8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cd8e:	4618      	mov	r0, r3
 800cd90:	f000 fae1 	bl	800d356 <_ZN3Mat8V_VectorILt6EEC1Ev>
 800cd94:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cd98:	4618      	mov	r0, r3
 800cd9a:	f000 fae9 	bl	800d370 <_ZN3Mat6MatrixILt6ELt6EEC1Ev>
 800cd9e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800cda2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cda6:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 800ce1c <_ZN10Algorithms15FusionAlgorithmC1Ev+0x9c>
 800cdaa:	4619      	mov	r1, r3
 800cdac:	4620      	mov	r0, r4
 800cdae:	f7ff ffcb 	bl	800cd48 <_ZN10Algorithms11VelocityEKFCI1NS_20ExtendedKalmanFilterILt6ELt3ELt6EEEERKN3Mat8V_VectorILt6EEERKNS3_6MatrixILt6ELt6EEEf>
 800cdb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdb4:	33b0      	adds	r3, #176	; 0xb0
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	f000 fb0e 	bl	800d3d8 <_ZN3Mat6MatrixILt3ELt3EEC1Ev>
 800cdbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdbe:	33d4      	adds	r3, #212	; 0xd4
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	f000 fb14 	bl	800d3ee <_ZN3Mat8V_VectorILt3EEC1Ev>
 800cdc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdc8:	33e0      	adds	r3, #224	; 0xe0
 800cdca:	4618      	mov	r0, r3
 800cdcc:	f000 fb04 	bl	800d3d8 <_ZN3Mat6MatrixILt3ELt3EEC1Ev>
 800cdd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdd2:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	f000 fabd 	bl	800d356 <_ZN3Mat8V_VectorILt6EEC1Ev>
 800cddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdde:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800cde2:	4618      	mov	r0, r3
 800cde4:	f000 fac4 	bl	800d370 <_ZN3Mat6MatrixILt6ELt6EEC1Ev>
 800cde8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdea:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800cdee:	4618      	mov	r0, r3
 800cdf0:	f7ff ff88 	bl	800cd04 <_ZN10Algorithms10AHRSKalmanC1Ev>
		_orientationControlCov = Eye<3>(_gyroNoiseVariance);
 800cdf4:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800cdf6:	463b      	mov	r3, r7
 800cdf8:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800ce20 <_ZN10Algorithms15FusionAlgorithmC1Ev+0xa0>
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	f000 fb03 	bl	800d408 <_ZN3Mat3EyeILt3EEENS_6MatrixIXT_EXT_EEEf>
 800ce02:	34b0      	adds	r4, #176	; 0xb0
 800ce04:	463d      	mov	r5, r7
 800ce06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ce08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ce0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ce0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ce0e:	682b      	ldr	r3, [r5, #0]
 800ce10:	6023      	str	r3, [r4, #0]
//		_orientationMeassurementCov(1,1) = _accNoiseVariance;
//		_orientationMeassurementCov(2,2) = _accNoiseVariance;
//		_orientationMeassurementCov(3,3) = _magNoiseVariance;
//		_orientationMeassurementCov(4,4) = _magNoiseVariance;
//		_orientationMeassurementCov(5,5) = _magNoiseVariance;
	};
 800ce12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce14:	4618      	mov	r0, r3
 800ce16:	37d8      	adds	r7, #216	; 0xd8
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	bdb0      	pop	{r4, r5, r7, pc}
 800ce1c:	00000000 	.word	0x00000000
 800ce20:	3d4ccccd 	.word	0x3d4ccccd

0800ce24 <InitAlgorithms>:
Mat::Matrix<3, 1> meanMag = 0.0f;

float al = 0.01f;

uint8_t InitAlgorithms(const AGMSensorData* sensorData)
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b082      	sub	sp, #8
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
	printf("InitAlgorithms\n\r");
 800ce2c:	483f      	ldr	r0, [pc, #252]	; (800cf2c <InitAlgorithms+0x108>)
 800ce2e:	f00d fc9b 	bl	801a768 <iprintf>
	AccRaw(0,0) = sensorData->Acc.x;
 800ce32:	2200      	movs	r2, #0
 800ce34:	2100      	movs	r1, #0
 800ce36:	483e      	ldr	r0, [pc, #248]	; (800cf30 <InitAlgorithms+0x10c>)
 800ce38:	f000 fb53 	bl	800d4e2 <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800ce3c:	4602      	mov	r2, r0
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	68db      	ldr	r3, [r3, #12]
 800ce42:	6013      	str	r3, [r2, #0]
	AccRaw(1,0) = sensorData->Acc.y;
 800ce44:	2200      	movs	r2, #0
 800ce46:	2101      	movs	r1, #1
 800ce48:	4839      	ldr	r0, [pc, #228]	; (800cf30 <InitAlgorithms+0x10c>)
 800ce4a:	f000 fb4a 	bl	800d4e2 <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800ce4e:	4602      	mov	r2, r0
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	691b      	ldr	r3, [r3, #16]
 800ce54:	6013      	str	r3, [r2, #0]
	AccRaw(2,0) = sensorData->Acc.z;
 800ce56:	2200      	movs	r2, #0
 800ce58:	2102      	movs	r1, #2
 800ce5a:	4835      	ldr	r0, [pc, #212]	; (800cf30 <InitAlgorithms+0x10c>)
 800ce5c:	f000 fb41 	bl	800d4e2 <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800ce60:	4602      	mov	r2, r0
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	695b      	ldr	r3, [r3, #20]
 800ce66:	6013      	str	r3, [r2, #0]
	MagRaw(0,0) = sensorData->Mag.x;
 800ce68:	2200      	movs	r2, #0
 800ce6a:	2100      	movs	r1, #0
 800ce6c:	4831      	ldr	r0, [pc, #196]	; (800cf34 <InitAlgorithms+0x110>)
 800ce6e:	f000 fb38 	bl	800d4e2 <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800ce72:	4602      	mov	r2, r0
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	6013      	str	r3, [r2, #0]
	MagRaw(1,0) = sensorData->Mag.y;
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	2101      	movs	r1, #1
 800ce7e:	482d      	ldr	r0, [pc, #180]	; (800cf34 <InitAlgorithms+0x110>)
 800ce80:	f000 fb2f 	bl	800d4e2 <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800ce84:	4602      	mov	r2, r0
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	685b      	ldr	r3, [r3, #4]
 800ce8a:	6013      	str	r3, [r2, #0]
	MagRaw(2,0) = sensorData->Mag.z;
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	2102      	movs	r1, #2
 800ce90:	4828      	ldr	r0, [pc, #160]	; (800cf34 <InitAlgorithms+0x110>)
 800ce92:	f000 fb26 	bl	800d4e2 <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800ce96:	4602      	mov	r2, r0
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	689b      	ldr	r3, [r3, #8]
 800ce9c:	6013      	str	r3, [r2, #0]
	AccCal = CalibrateAcc(AccRaw);
 800ce9e:	4824      	ldr	r0, [pc, #144]	; (800cf30 <InitAlgorithms+0x10c>)
 800cea0:	f001 fe90 	bl	800ebc4 <_Z12CalibrateAccRKN3Mat6MatrixILt3ELt1EEE>
 800cea4:	eef0 6a40 	vmov.f32	s13, s0
 800cea8:	eeb0 7a60 	vmov.f32	s14, s1
 800ceac:	eef0 7a41 	vmov.f32	s15, s2
 800ceb0:	4b21      	ldr	r3, [pc, #132]	; (800cf38 <InitAlgorithms+0x114>)
 800ceb2:	edc3 6a00 	vstr	s13, [r3]
 800ceb6:	ed83 7a01 	vstr	s14, [r3, #4]
 800ceba:	edc3 7a02 	vstr	s15, [r3, #8]
	MagCal = CalibrateMag(MagRaw);
 800cebe:	481d      	ldr	r0, [pc, #116]	; (800cf34 <InitAlgorithms+0x110>)
 800cec0:	f001 fe44 	bl	800eb4c <_Z12CalibrateMagRKN3Mat6MatrixILt3ELt1EEE>
 800cec4:	eef0 6a40 	vmov.f32	s13, s0
 800cec8:	eeb0 7a60 	vmov.f32	s14, s1
 800cecc:	eef0 7a41 	vmov.f32	s15, s2
 800ced0:	4b1a      	ldr	r3, [pc, #104]	; (800cf3c <InitAlgorithms+0x118>)
 800ced2:	edc3 6a00 	vstr	s13, [r3]
 800ced6:	ed83 7a01 	vstr	s14, [r3, #4]
 800ceda:	edc3 7a02 	vstr	s15, [r3, #8]
	Fusion.InitState(AccCal, MagCal, (float)(HAL_GetTick()) * ms2s);
 800cede:	f7f4 ffc1 	bl	8001e64 <HAL_GetTick>
 800cee2:	ee07 0a90 	vmov	s15, r0
 800cee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ceea:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800cf40 <InitAlgorithms+0x11c>
 800ceee:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cef2:	eeb0 0a67 	vmov.f32	s0, s15
 800cef6:	4a11      	ldr	r2, [pc, #68]	; (800cf3c <InitAlgorithms+0x118>)
 800cef8:	490f      	ldr	r1, [pc, #60]	; (800cf38 <InitAlgorithms+0x114>)
 800cefa:	4812      	ldr	r0, [pc, #72]	; (800cf44 <InitAlgorithms+0x120>)
 800cefc:	f007 fce2 	bl	80148c4 <_ZN10Algorithms15FusionAlgorithm9InitStateERKN3Mat6MatrixILt3ELt1EEES5_f>
	Kalman.InitialiseKalman(AccCal, MagCal, (float)(HAL_GetTick()) * ms2s);
 800cf00:	f7f4 ffb0 	bl	8001e64 <HAL_GetTick>
 800cf04:	ee07 0a90 	vmov	s15, r0
 800cf08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf0c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800cf40 <InitAlgorithms+0x11c>
 800cf10:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cf14:	eeb0 0a67 	vmov.f32	s0, s15
 800cf18:	4a08      	ldr	r2, [pc, #32]	; (800cf3c <InitAlgorithms+0x118>)
 800cf1a:	4907      	ldr	r1, [pc, #28]	; (800cf38 <InitAlgorithms+0x114>)
 800cf1c:	480a      	ldr	r0, [pc, #40]	; (800cf48 <InitAlgorithms+0x124>)
 800cf1e:	f002 fa54 	bl	800f3ca <_ZN10Algorithms10AHRSKalman16InitialiseKalmanERKN3Mat6MatrixILt3ELt1EEES5_f>
	return 1;
 800cf22:	2301      	movs	r3, #1
}
 800cf24:	4618      	mov	r0, r3
 800cf26:	3708      	adds	r7, #8
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	bd80      	pop	{r7, pc}
 800cf2c:	0801c7b8 	.word	0x0801c7b8
 800cf30:	24004fe4 	.word	0x24004fe4
 800cf34:	24004fb4 	.word	0x24004fb4
 800cf38:	24004fd8 	.word	0x24004fd8
 800cf3c:	24004fa8 	.word	0x24004fa8
 800cf40:	3a83126f 	.word	0x3a83126f
 800cf44:	24004c94 	.word	0x24004c94
 800cf48:	24004ef4 	.word	0x24004ef4

0800cf4c <MadgwickUpdate>:
	al = al * 0.5f;
	return 1;
}

uint8_t MadgwickUpdate(const AGMSensorData* sensorData)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	ed2d 8b10 	vpush	{d8-d15}
 800cf52:	b0a8      	sub	sp, #160	; 0xa0
 800cf54:	af18      	add	r7, sp, #96	; 0x60
 800cf56:	6278      	str	r0, [r7, #36]	; 0x24
	if(sensorData != nullptr)
 800cf58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	f000 8183 	beq.w	800d266 <MadgwickUpdate+0x31a>
	{
		//static float x{0.0f}, y{0.0f}, z{0.0f}, step{0.005};
		static float last_time{sensorData->SensorTime * 0.001f};
 800cf60:	4bc4      	ldr	r3, [pc, #784]	; (800d274 <MadgwickUpdate+0x328>)
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	f3bf 8f5b 	dmb	ish
 800cf68:	f003 0301 	and.w	r3, r3, #1
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	bf0c      	ite	eq
 800cf70:	2301      	moveq	r3, #1
 800cf72:	2300      	movne	r3, #0
 800cf74:	b2db      	uxtb	r3, r3
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d017      	beq.n	800cfaa <MadgwickUpdate+0x5e>
 800cf7a:	48be      	ldr	r0, [pc, #760]	; (800d274 <MadgwickUpdate+0x328>)
 800cf7c:	f00c fa84 	bl	8019488 <__cxa_guard_acquire>
 800cf80:	4603      	mov	r3, r0
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	bf14      	ite	ne
 800cf86:	2301      	movne	r3, #1
 800cf88:	2300      	moveq	r3, #0
 800cf8a:	b2db      	uxtb	r3, r3
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d00c      	beq.n	800cfaa <MadgwickUpdate+0x5e>
 800cf90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf92:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800cf96:	ed9f 7ab8 	vldr	s14, [pc, #736]	; 800d278 <MadgwickUpdate+0x32c>
 800cf9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cf9e:	4bb7      	ldr	r3, [pc, #732]	; (800d27c <MadgwickUpdate+0x330>)
 800cfa0:	edc3 7a00 	vstr	s15, [r3]
 800cfa4:	48b3      	ldr	r0, [pc, #716]	; (800d274 <MadgwickUpdate+0x328>)
 800cfa6:	f00c fa7b 	bl	80194a0 <__cxa_guard_release>
		float currTime = sensorData->SensorTime * 0.001f;
 800cfaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfac:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800cfb0:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 800d278 <MadgwickUpdate+0x32c>
 800cfb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cfb8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		float deltat = (currTime - last_time);
 800cfbc:	4baf      	ldr	r3, [pc, #700]	; (800d27c <MadgwickUpdate+0x330>)
 800cfbe:	edd3 7a00 	vldr	s15, [r3]
 800cfc2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800cfc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cfca:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		last_time = currTime;
 800cfce:	4aab      	ldr	r2, [pc, #684]	; (800d27c <MadgwickUpdate+0x330>)
 800cfd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfd2:	6013      	str	r3, [r2, #0]

		AccRaw(0,0) = sensorData->Acc.x;
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	2100      	movs	r1, #0
 800cfd8:	48a9      	ldr	r0, [pc, #676]	; (800d280 <MadgwickUpdate+0x334>)
 800cfda:	f000 fa82 	bl	800d4e2 <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800cfde:	4602      	mov	r2, r0
 800cfe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfe2:	68db      	ldr	r3, [r3, #12]
 800cfe4:	6013      	str	r3, [r2, #0]
		AccRaw(1,0) = sensorData->Acc.y;
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	2101      	movs	r1, #1
 800cfea:	48a5      	ldr	r0, [pc, #660]	; (800d280 <MadgwickUpdate+0x334>)
 800cfec:	f000 fa79 	bl	800d4e2 <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800cff0:	4602      	mov	r2, r0
 800cff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cff4:	691b      	ldr	r3, [r3, #16]
 800cff6:	6013      	str	r3, [r2, #0]
		AccRaw(2,0) = sensorData->Acc.z;
 800cff8:	2200      	movs	r2, #0
 800cffa:	2102      	movs	r1, #2
 800cffc:	48a0      	ldr	r0, [pc, #640]	; (800d280 <MadgwickUpdate+0x334>)
 800cffe:	f000 fa70 	bl	800d4e2 <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d002:	4602      	mov	r2, r0
 800d004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d006:	695b      	ldr	r3, [r3, #20]
 800d008:	6013      	str	r3, [r2, #0]
		MagRaw(0,0) = sensorData->Mag.x;
 800d00a:	2200      	movs	r2, #0
 800d00c:	2100      	movs	r1, #0
 800d00e:	489d      	ldr	r0, [pc, #628]	; (800d284 <MadgwickUpdate+0x338>)
 800d010:	f000 fa67 	bl	800d4e2 <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d014:	4602      	mov	r2, r0
 800d016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	6013      	str	r3, [r2, #0]
		MagRaw(1,0) = sensorData->Mag.y;
 800d01c:	2200      	movs	r2, #0
 800d01e:	2101      	movs	r1, #1
 800d020:	4898      	ldr	r0, [pc, #608]	; (800d284 <MadgwickUpdate+0x338>)
 800d022:	f000 fa5e 	bl	800d4e2 <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d026:	4602      	mov	r2, r0
 800d028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d02a:	685b      	ldr	r3, [r3, #4]
 800d02c:	6013      	str	r3, [r2, #0]
		MagRaw(2,0) = sensorData->Mag.z;
 800d02e:	2200      	movs	r2, #0
 800d030:	2102      	movs	r1, #2
 800d032:	4894      	ldr	r0, [pc, #592]	; (800d284 <MadgwickUpdate+0x338>)
 800d034:	f000 fa55 	bl	800d4e2 <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d038:	4602      	mov	r2, r0
 800d03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d03c:	689b      	ldr	r3, [r3, #8]
 800d03e:	6013      	str	r3, [r2, #0]
		GyroRaw(0,0) = sensorData->Gyro.x;
 800d040:	2200      	movs	r2, #0
 800d042:	2100      	movs	r1, #0
 800d044:	4890      	ldr	r0, [pc, #576]	; (800d288 <MadgwickUpdate+0x33c>)
 800d046:	f000 fa4c 	bl	800d4e2 <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d04a:	4602      	mov	r2, r0
 800d04c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d04e:	699b      	ldr	r3, [r3, #24]
 800d050:	6013      	str	r3, [r2, #0]
		GyroRaw(1,0) = sensorData->Gyro.y;
 800d052:	2200      	movs	r2, #0
 800d054:	2101      	movs	r1, #1
 800d056:	488c      	ldr	r0, [pc, #560]	; (800d288 <MadgwickUpdate+0x33c>)
 800d058:	f000 fa43 	bl	800d4e2 <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d05c:	4602      	mov	r2, r0
 800d05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d060:	69db      	ldr	r3, [r3, #28]
 800d062:	6013      	str	r3, [r2, #0]
		GyroRaw(2,0) = sensorData->Gyro.z;
 800d064:	2200      	movs	r2, #0
 800d066:	2102      	movs	r1, #2
 800d068:	4887      	ldr	r0, [pc, #540]	; (800d288 <MadgwickUpdate+0x33c>)
 800d06a:	f000 fa3a 	bl	800d4e2 <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d06e:	4602      	mov	r2, r0
 800d070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d072:	6a1b      	ldr	r3, [r3, #32]
 800d074:	6013      	str	r3, [r2, #0]
		AccCal = CalibrateAcc(AccRaw);
 800d076:	4882      	ldr	r0, [pc, #520]	; (800d280 <MadgwickUpdate+0x334>)
 800d078:	f001 fda4 	bl	800ebc4 <_Z12CalibrateAccRKN3Mat6MatrixILt3ELt1EEE>
 800d07c:	eef0 6a40 	vmov.f32	s13, s0
 800d080:	eeb0 7a60 	vmov.f32	s14, s1
 800d084:	eef0 7a41 	vmov.f32	s15, s2
 800d088:	4b80      	ldr	r3, [pc, #512]	; (800d28c <MadgwickUpdate+0x340>)
 800d08a:	edc3 6a00 	vstr	s13, [r3]
 800d08e:	ed83 7a01 	vstr	s14, [r3, #4]
 800d092:	edc3 7a02 	vstr	s15, [r3, #8]
		MagCal = CalibrateMag(MagRaw);
 800d096:	487b      	ldr	r0, [pc, #492]	; (800d284 <MadgwickUpdate+0x338>)
 800d098:	f001 fd58 	bl	800eb4c <_Z12CalibrateMagRKN3Mat6MatrixILt3ELt1EEE>
 800d09c:	eef0 6a40 	vmov.f32	s13, s0
 800d0a0:	eeb0 7a60 	vmov.f32	s14, s1
 800d0a4:	eef0 7a41 	vmov.f32	s15, s2
 800d0a8:	4b79      	ldr	r3, [pc, #484]	; (800d290 <MadgwickUpdate+0x344>)
 800d0aa:	edc3 6a00 	vstr	s13, [r3]
 800d0ae:	ed83 7a01 	vstr	s14, [r3, #4]
 800d0b2:	edc3 7a02 	vstr	s15, [r3, #8]
		GyroCal = CalibrateGyro(GyroRaw);
 800d0b6:	4874      	ldr	r0, [pc, #464]	; (800d288 <MadgwickUpdate+0x33c>)
 800d0b8:	f001 fdc0 	bl	800ec3c <_Z13CalibrateGyroRKN3Mat6MatrixILt3ELt1EEE>
 800d0bc:	eef0 6a40 	vmov.f32	s13, s0
 800d0c0:	eeb0 7a60 	vmov.f32	s14, s1
 800d0c4:	eef0 7a41 	vmov.f32	s15, s2
 800d0c8:	4b72      	ldr	r3, [pc, #456]	; (800d294 <MadgwickUpdate+0x348>)
 800d0ca:	edc3 6a00 	vstr	s13, [r3]
 800d0ce:	ed83 7a01 	vstr	s14, [r3, #4]
 800d0d2:	edc3 7a02 	vstr	s15, [r3, #8]
		//		sensorDataCal.Mag.y = MagCal(1,0);
		//		sensorDataCal.Mag.z = MagCal(2,0);
		//		sensorDataCal.Gyro.x = GyroCal(0,0);
		//		sensorDataCal.Gyro.y = GyroCal(1,0);
		//		sensorDataCal.Gyro.z = GyroCal(2,0);
		currTime = (float)(HAL_GetTick()) * ms2s;
 800d0d6:	f7f4 fec5 	bl	8001e64 <HAL_GetTick>
 800d0da:	ee07 0a90 	vmov	s15, r0
 800d0de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0e2:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800d278 <MadgwickUpdate+0x32c>
 800d0e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d0ea:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		//		sensorDataCal.SensorTime = currTime;
		//Fusion.OnIMUData(sensorDataCal);
//AHRS
		Fusion.OnIMUData(AccCal, GyroCal, MagCal, currTime);
 800d0ee:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 800d0f2:	4b67      	ldr	r3, [pc, #412]	; (800d290 <MadgwickUpdate+0x344>)
 800d0f4:	4a67      	ldr	r2, [pc, #412]	; (800d294 <MadgwickUpdate+0x348>)
 800d0f6:	4965      	ldr	r1, [pc, #404]	; (800d28c <MadgwickUpdate+0x340>)
 800d0f8:	4867      	ldr	r0, [pc, #412]	; (800d298 <MadgwickUpdate+0x34c>)
 800d0fa:	f007 fc0f 	bl	801491c <_ZN10Algorithms15FusionAlgorithm9OnIMUDataERKN3Mat6MatrixILt3ELt1EEES5_S5_f>
//AHRS
		const auto& rotMatrix = Fusion.GetRotationMatrix();
 800d0fe:	4866      	ldr	r0, [pc, #408]	; (800d298 <MadgwickUpdate+0x34c>)
 800d100:	f007 feb2 	bl	8014e68 <_ZNK10Algorithms15FusionAlgorithm17GetRotationMatrixEv>
 800d104:	6378      	str	r0, [r7, #52]	; 0x34
		auto acc = rotMatrix * AccCal;
 800d106:	4961      	ldr	r1, [pc, #388]	; (800d28c <MadgwickUpdate+0x340>)
 800d108:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d10a:	f000 fa00 	bl	800d50e <_ZNK3Mat6MatrixILt3ELt3EEmlILt1EEENS0_ILt3EXT_EEERKS3_>
 800d10e:	eef0 6a40 	vmov.f32	s13, s0
 800d112:	eeb0 7a60 	vmov.f32	s14, s1
 800d116:	eef0 7a41 	vmov.f32	s15, s2
 800d11a:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 800d11e:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 800d122:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	//		Kalman.UpdateState(GyroCal, currTime);
	//		Kalman.CorrectStateAcc(AccCal, currTime);
	//		Kalman.CorrectStateMag(MagCal, currTime);
	//		Q = Kalman.GetState();
		//LOG("AHRS: \t%f, \t%f, \t%f, \t\t\t%f, \t%f, \t%f", Kalman.GetRoll(), Kalman.GetPitch(), Kalman.GetYaw(), Fusion.GetRoll(), Fusion.GetPitch(), Fusion.GetYaw());
		printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n\r",currTime, Fusion.GetRoll(), Fusion.GetPitch(), Fusion.GetYaw(),
 800d126:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800d12a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d12e:	ed87 7b06 	vstr	d7, [r7, #24]
 800d132:	4859      	ldr	r0, [pc, #356]	; (800d298 <MadgwickUpdate+0x34c>)
 800d134:	f007 fcd4 	bl	8014ae0 <_ZNK10Algorithms15FusionAlgorithm7GetRollEv>
 800d138:	eef0 7a40 	vmov.f32	s15, s0
 800d13c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800d140:	4855      	ldr	r0, [pc, #340]	; (800d298 <MadgwickUpdate+0x34c>)
 800d142:	f007 fd7b 	bl	8014c3c <_ZNK10Algorithms15FusionAlgorithm8GetPitchEv>
 800d146:	eef0 7a40 	vmov.f32	s15, s0
 800d14a:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800d14e:	4852      	ldr	r0, [pc, #328]	; (800d298 <MadgwickUpdate+0x34c>)
 800d150:	f007 fdd6 	bl	8014d00 <_ZNK10Algorithms15FusionAlgorithm6GetYawEv>
 800d154:	eef0 7a40 	vmov.f32	s15, s0
 800d158:	eeb7 aae7 	vcvt.f64.f32	d10, s15
				GyroCal(0, 0), GyroCal(1, 0), GyroCal(2, 0),
 800d15c:	2200      	movs	r2, #0
 800d15e:	2100      	movs	r1, #0
 800d160:	484c      	ldr	r0, [pc, #304]	; (800d294 <MadgwickUpdate+0x348>)
 800d162:	f000 f9be 	bl	800d4e2 <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d166:	4603      	mov	r3, r0
 800d168:	edd3 7a00 	vldr	s15, [r3]
		printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n\r",currTime, Fusion.GetRoll(), Fusion.GetPitch(), Fusion.GetYaw(),
 800d16c:	eeb7 bae7 	vcvt.f64.f32	d11, s15
				GyroCal(0, 0), GyroCal(1, 0), GyroCal(2, 0),
 800d170:	2200      	movs	r2, #0
 800d172:	2101      	movs	r1, #1
 800d174:	4847      	ldr	r0, [pc, #284]	; (800d294 <MadgwickUpdate+0x348>)
 800d176:	f000 f9b4 	bl	800d4e2 <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d17a:	4603      	mov	r3, r0
 800d17c:	edd3 7a00 	vldr	s15, [r3]
		printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n\r",currTime, Fusion.GetRoll(), Fusion.GetPitch(), Fusion.GetYaw(),
 800d180:	eeb7 cae7 	vcvt.f64.f32	d12, s15
				GyroCal(0, 0), GyroCal(1, 0), GyroCal(2, 0),
 800d184:	2200      	movs	r2, #0
 800d186:	2102      	movs	r1, #2
 800d188:	4842      	ldr	r0, [pc, #264]	; (800d294 <MadgwickUpdate+0x348>)
 800d18a:	f000 f9aa 	bl	800d4e2 <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d18e:	4603      	mov	r3, r0
 800d190:	edd3 7a00 	vldr	s15, [r3]
		printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n\r",currTime, Fusion.GetRoll(), Fusion.GetPitch(), Fusion.GetYaw(),
 800d194:	eeb7 dae7 	vcvt.f64.f32	d13, s15
				AccCal(0, 0), AccCal(1, 0), AccCal(2, 0),
 800d198:	2200      	movs	r2, #0
 800d19a:	2100      	movs	r1, #0
 800d19c:	483b      	ldr	r0, [pc, #236]	; (800d28c <MadgwickUpdate+0x340>)
 800d19e:	f000 f9a0 	bl	800d4e2 <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	edd3 7a00 	vldr	s15, [r3]
		printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n\r",currTime, Fusion.GetRoll(), Fusion.GetPitch(), Fusion.GetYaw(),
 800d1a8:	eeb7 eae7 	vcvt.f64.f32	d14, s15
				AccCal(0, 0), AccCal(1, 0), AccCal(2, 0),
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	2101      	movs	r1, #1
 800d1b0:	4836      	ldr	r0, [pc, #216]	; (800d28c <MadgwickUpdate+0x340>)
 800d1b2:	f000 f996 	bl	800d4e2 <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	edd3 7a00 	vldr	s15, [r3]
		printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n\r",currTime, Fusion.GetRoll(), Fusion.GetPitch(), Fusion.GetYaw(),
 800d1bc:	eeb7 fae7 	vcvt.f64.f32	d15, s15
				AccCal(0, 0), AccCal(1, 0), AccCal(2, 0),
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	2102      	movs	r1, #2
 800d1c4:	4831      	ldr	r0, [pc, #196]	; (800d28c <MadgwickUpdate+0x340>)
 800d1c6:	f000 f98c 	bl	800d4e2 <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	edd3 7a00 	vldr	s15, [r3]
		printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n\r",currTime, Fusion.GetRoll(), Fusion.GetPitch(), Fusion.GetYaw(),
 800d1d0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800d1d4:	ed87 6b04 	vstr	d6, [r7, #16]
				MagCal(0, 0), MagCal(1, 0), MagCal(2, 0));
 800d1d8:	2200      	movs	r2, #0
 800d1da:	2100      	movs	r1, #0
 800d1dc:	482c      	ldr	r0, [pc, #176]	; (800d290 <MadgwickUpdate+0x344>)
 800d1de:	f000 f980 	bl	800d4e2 <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	edd3 7a00 	vldr	s15, [r3]
		printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n\r",currTime, Fusion.GetRoll(), Fusion.GetPitch(), Fusion.GetYaw(),
 800d1e8:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800d1ec:	ed87 5b02 	vstr	d5, [r7, #8]
				MagCal(0, 0), MagCal(1, 0), MagCal(2, 0));
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	2101      	movs	r1, #1
 800d1f4:	4826      	ldr	r0, [pc, #152]	; (800d290 <MadgwickUpdate+0x344>)
 800d1f6:	f000 f974 	bl	800d4e2 <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	edd3 7a00 	vldr	s15, [r3]
		printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n\r",currTime, Fusion.GetRoll(), Fusion.GetPitch(), Fusion.GetYaw(),
 800d200:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 800d204:	ed87 4b00 	vstr	d4, [r7]
				MagCal(0, 0), MagCal(1, 0), MagCal(2, 0));
 800d208:	2200      	movs	r2, #0
 800d20a:	2102      	movs	r1, #2
 800d20c:	4820      	ldr	r0, [pc, #128]	; (800d290 <MadgwickUpdate+0x344>)
 800d20e:	f000 f968 	bl	800d4e2 <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d212:	4603      	mov	r3, r0
 800d214:	edd3 7a00 	vldr	s15, [r3]
		printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n\r",currTime, Fusion.GetRoll(), Fusion.GetPitch(), Fusion.GetYaw(),
 800d218:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d21c:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 800d220:	ed97 4b00 	vldr	d4, [r7]
 800d224:	ed8d 4b14 	vstr	d4, [sp, #80]	; 0x50
 800d228:	ed97 5b02 	vldr	d5, [r7, #8]
 800d22c:	ed8d 5b12 	vstr	d5, [sp, #72]	; 0x48
 800d230:	ed97 6b04 	vldr	d6, [r7, #16]
 800d234:	ed8d 6b10 	vstr	d6, [sp, #64]	; 0x40
 800d238:	ed8d fb0e 	vstr	d15, [sp, #56]	; 0x38
 800d23c:	ed8d eb0c 	vstr	d14, [sp, #48]	; 0x30
 800d240:	ed8d db0a 	vstr	d13, [sp, #40]	; 0x28
 800d244:	ed8d cb08 	vstr	d12, [sp, #32]
 800d248:	ed8d bb06 	vstr	d11, [sp, #24]
 800d24c:	ed8d ab04 	vstr	d10, [sp, #16]
 800d250:	ed8d 9b02 	vstr	d9, [sp, #8]
 800d254:	ed8d 8b00 	vstr	d8, [sp]
 800d258:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d25c:	480f      	ldr	r0, [pc, #60]	; (800d29c <MadgwickUpdate+0x350>)
 800d25e:	f00d fa83 	bl	801a768 <iprintf>
		//auto acc = Fusion.GetAcceleration();
//		printf("Orig: %f, \t%f, \t%f, \tMy: %f, \t%f, \t%f\n\r",
//				_acceleration.x, _acceleration.y, _acceleration.z,
//				acc.x, acc.y, acc.z);

		return 1;
 800d262:	2301      	movs	r3, #1
 800d264:	e000      	b.n	800d268 <MadgwickUpdate+0x31c>
	}
	return 0;
 800d266:	2300      	movs	r3, #0
}
 800d268:	4618      	mov	r0, r3
 800d26a:	3740      	adds	r7, #64	; 0x40
 800d26c:	46bd      	mov	sp, r7
 800d26e:	ecbd 8b10 	vpop	{d8-d15}
 800d272:	bd80      	pop	{r7, pc}
 800d274:	24005030 	.word	0x24005030
 800d278:	3a83126f 	.word	0x3a83126f
 800d27c:	2400502c 	.word	0x2400502c
 800d280:	24004fe4 	.word	0x24004fe4
 800d284:	24004fb4 	.word	0x24004fb4
 800d288:	24004fcc 	.word	0x24004fcc
 800d28c:	24004fd8 	.word	0x24004fd8
 800d290:	24004fa8 	.word	0x24004fa8
 800d294:	24004fc0 	.word	0x24004fc0
 800d298:	24004c94 	.word	0x24004c94
 800d29c:	0801c7cc 	.word	0x0801c7cc

0800d2a0 <_ZZN3Mat6MatrixILt6ELt6EEC4EfENKUlRfE_clES2_>:

template <u_short heigth, u_short width>
Matrix<heigth, width>::Matrix(float val)
{
	static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 800d2a0:	b480      	push	{r7}
 800d2a2:	b083      	sub	sp, #12
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
 800d2a8:	6039      	str	r1, [r7, #0]
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681a      	ldr	r2, [r3, #0]
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	601a      	str	r2, [r3, #0]
 800d2b2:	bf00      	nop
 800d2b4:	370c      	adds	r7, #12
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2bc:	4770      	bx	lr

0800d2be <_ZN3Mat6MatrixILt6ELt6EEC1Ef>:
Matrix<heigth, width>::Matrix(float val)
 800d2be:	b590      	push	{r4, r7, lr}
 800d2c0:	b083      	sub	sp, #12
 800d2c2:	af00      	add	r7, sp, #0
 800d2c4:	6078      	str	r0, [r7, #4]
 800d2c6:	ed87 0a00 	vstr	s0, [r7]
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	f000 f95d 	bl	800d58c <_ZNSt5arrayIfLj36EE5beginEv>
 800d2d2:	4604      	mov	r4, r0
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	f000 f964 	bl	800d5a4 <_ZNSt5arrayIfLj36EE3endEv>
 800d2dc:	4603      	mov	r3, r0
 800d2de:	edd7 7a00 	vldr	s15, [r7]
 800d2e2:	eeb0 0a67 	vmov.f32	s0, s15
 800d2e6:	4619      	mov	r1, r3
 800d2e8:	4620      	mov	r0, r4
 800d2ea:	f000 f968 	bl	800d5be <_ZSt8for_eachIPfZN3Mat6MatrixILt6ELt6EEC4EfEUlRfE_ET0_T_S7_S6_>
}
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	370c      	adds	r7, #12
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	bd90      	pop	{r4, r7, pc}

0800d2f8 <_ZN3Mat3EyeILt4EEENS_6MatrixIXT_EXT_EEEf>:
Matrix<size, size> Eye(float val = 1.0f)
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b084      	sub	sp, #16
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
 800d300:	ed87 0a00 	vstr	s0, [r7]
	Matrix<size, size> result{0.0f};
 800d304:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800d33c <_ZN3Mat3EyeILt4EEENS_6MatrixIXT_EXT_EEEf+0x44>
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	f000 f983 	bl	800d614 <_ZN3Mat6MatrixILt4ELt4EEC1Ef>
	for(u_short i = 0; i < size; ++i)
 800d30e:	2300      	movs	r3, #0
 800d310:	81fb      	strh	r3, [r7, #14]
 800d312:	e00b      	b.n	800d32c <_ZN3Mat3EyeILt4EEENS_6MatrixIXT_EXT_EEEf+0x34>
		result(i, i) = val;
 800d314:	89fa      	ldrh	r2, [r7, #14]
 800d316:	89fb      	ldrh	r3, [r7, #14]
 800d318:	4619      	mov	r1, r3
 800d31a:	6878      	ldr	r0, [r7, #4]
 800d31c:	f000 f997 	bl	800d64e <_ZN3Mat6MatrixILt4ELt4EEclEtt>
 800d320:	4602      	mov	r2, r0
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	6013      	str	r3, [r2, #0]
	for(u_short i = 0; i < size; ++i)
 800d326:	89fb      	ldrh	r3, [r7, #14]
 800d328:	3301      	adds	r3, #1
 800d32a:	81fb      	strh	r3, [r7, #14]
 800d32c:	89fb      	ldrh	r3, [r7, #14]
 800d32e:	2b03      	cmp	r3, #3
 800d330:	d9f0      	bls.n	800d314 <_ZN3Mat3EyeILt4EEENS_6MatrixIXT_EXT_EEEf+0x1c>
	return result;
 800d332:	bf00      	nop
}
 800d334:	6878      	ldr	r0, [r7, #4]
 800d336:	3710      	adds	r7, #16
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}
 800d33c:	00000000 	.word	0x00000000

0800d340 <_ZN3Mat6MatrixILt4ELt4EEC1Ev>:
Matrix<heigth, width>::Matrix() {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 800d340:	b480      	push	{r7}
 800d342:	b083      	sub	sp, #12
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	4618      	mov	r0, r3
 800d34c:	370c      	adds	r7, #12
 800d34e:	46bd      	mov	sp, r7
 800d350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d354:	4770      	bx	lr

0800d356 <_ZN3Mat8V_VectorILt6EEC1Ev>:
	std::for_each(_values.begin(), _values.end(), [&result](float n){result += n * n;});
	return std::sqrt(result);
}

template <u_short length>
V_Vector<length>::V_Vector() : Matrix<length, 1>() {}
 800d356:	b580      	push	{r7, lr}
 800d358:	b082      	sub	sp, #8
 800d35a:	af00      	add	r7, sp, #0
 800d35c:	6078      	str	r0, [r7, #4]
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	4618      	mov	r0, r3
 800d362:	f000 f98b 	bl	800d67c <_ZN3Mat6MatrixILt6ELt1EEC1Ev>
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	4618      	mov	r0, r3
 800d36a:	3708      	adds	r7, #8
 800d36c:	46bd      	mov	sp, r7
 800d36e:	bd80      	pop	{r7, pc}

0800d370 <_ZN3Mat6MatrixILt6ELt6EEC1Ev>:
 800d370:	b480      	push	{r7}
 800d372:	b083      	sub	sp, #12
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	4618      	mov	r0, r3
 800d37c:	370c      	adds	r7, #12
 800d37e:	46bd      	mov	sp, r7
 800d380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d384:	4770      	bx	lr
	...

0800d388 <_ZN10Algorithms20ExtendedKalmanFilterILt6ELt3ELt6EEC1ERKN3Mat8V_VectorILt6EEERKNS2_6MatrixILt6ELt6EEEf>:
	using MeassurementVec = V_Vector<meassurementLen>;
	using StateCovarianceMatrix = Matrix<stateLen, stateLen>;
	using ControlCovarianceMatrix = Matrix<controlLen, controlLen>;
	using MeasurementCovarianceMatrix = Matrix<meassurementLen, meassurementLen>;

	ExtendedKalmanFilter(const StateVec& state, const StateCovarianceMatrix& stateCovMatrix, float time)
 800d388:	b5b0      	push	{r4, r5, r7, lr}
 800d38a:	b084      	sub	sp, #16
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	60f8      	str	r0, [r7, #12]
 800d390:	60b9      	str	r1, [r7, #8]
 800d392:	607a      	str	r2, [r7, #4]
 800d394:	ed87 0a00 	vstr	s0, [r7]
		: _state{state}, _stateCovMatrix{stateCovMatrix}, _time{time}{}
 800d398:	4a0e      	ldr	r2, [pc, #56]	; (800d3d4 <_ZN10Algorithms20ExtendedKalmanFilterILt6ELt3ELt6EEC1ERKN3Mat8V_VectorILt6EEERKNS2_6MatrixILt6ELt6EEEf+0x4c>)
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	601a      	str	r2, [r3, #0]
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	68ba      	ldr	r2, [r7, #8]
 800d3a2:	1d1c      	adds	r4, r3, #4
 800d3a4:	4615      	mov	r5, r2
 800d3a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d3a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d3aa:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d3ae:	e884 0003 	stmia.w	r4, {r0, r1}
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	687a      	ldr	r2, [r7, #4]
 800d3b6:	331c      	adds	r3, #28
 800d3b8:	4611      	mov	r1, r2
 800d3ba:	2290      	movs	r2, #144	; 0x90
 800d3bc:	4618      	mov	r0, r3
 800d3be:	f00d faa8 	bl	801a912 <memcpy>
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	683a      	ldr	r2, [r7, #0]
 800d3c6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	3710      	adds	r7, #16
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bdb0      	pop	{r4, r5, r7, pc}
 800d3d4:	0801ca08 	.word	0x0801ca08

0800d3d8 <_ZN3Mat6MatrixILt3ELt3EEC1Ev>:
 800d3d8:	b480      	push	{r7}
 800d3da:	b083      	sub	sp, #12
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	370c      	adds	r7, #12
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ec:	4770      	bx	lr

0800d3ee <_ZN3Mat8V_VectorILt3EEC1Ev>:
 800d3ee:	b580      	push	{r7, lr}
 800d3f0:	b082      	sub	sp, #8
 800d3f2:	af00      	add	r7, sp, #0
 800d3f4:	6078      	str	r0, [r7, #4]
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	f000 f94a 	bl	800d692 <_ZN3Mat6MatrixILt3ELt1EEC1Ev>
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	4618      	mov	r0, r3
 800d402:	3708      	adds	r7, #8
 800d404:	46bd      	mov	sp, r7
 800d406:	bd80      	pop	{r7, pc}

0800d408 <_ZN3Mat3EyeILt3EEENS_6MatrixIXT_EXT_EEEf>:
Matrix<size, size> Eye(float val = 1.0f)
 800d408:	b580      	push	{r7, lr}
 800d40a:	b084      	sub	sp, #16
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
 800d410:	ed87 0a00 	vstr	s0, [r7]
	Matrix<size, size> result{0.0f};
 800d414:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800d44c <_ZN3Mat3EyeILt3EEENS_6MatrixIXT_EXT_EEEf+0x44>
 800d418:	6878      	ldr	r0, [r7, #4]
 800d41a:	f000 f954 	bl	800d6c6 <_ZN3Mat6MatrixILt3ELt3EEC1Ef>
	for(u_short i = 0; i < size; ++i)
 800d41e:	2300      	movs	r3, #0
 800d420:	81fb      	strh	r3, [r7, #14]
 800d422:	e00b      	b.n	800d43c <_ZN3Mat3EyeILt3EEENS_6MatrixIXT_EXT_EEEf+0x34>
		result(i, i) = val;
 800d424:	89fa      	ldrh	r2, [r7, #14]
 800d426:	89fb      	ldrh	r3, [r7, #14]
 800d428:	4619      	mov	r1, r3
 800d42a:	6878      	ldr	r0, [r7, #4]
 800d42c:	f000 f968 	bl	800d700 <_ZN3Mat6MatrixILt3ELt3EEclEtt>
 800d430:	4602      	mov	r2, r0
 800d432:	683b      	ldr	r3, [r7, #0]
 800d434:	6013      	str	r3, [r2, #0]
	for(u_short i = 0; i < size; ++i)
 800d436:	89fb      	ldrh	r3, [r7, #14]
 800d438:	3301      	adds	r3, #1
 800d43a:	81fb      	strh	r3, [r7, #14]
 800d43c:	89fb      	ldrh	r3, [r7, #14]
 800d43e:	2b02      	cmp	r3, #2
 800d440:	d9f0      	bls.n	800d424 <_ZN3Mat3EyeILt3EEENS_6MatrixIXT_EXT_EEEf+0x1c>
	return result;
 800d442:	bf00      	nop
}
 800d444:	6878      	ldr	r0, [r7, #4]
 800d446:	3710      	adds	r7, #16
 800d448:	46bd      	mov	sp, r7
 800d44a:	bd80      	pop	{r7, pc}
 800d44c:	00000000 	.word	0x00000000

0800d450 <_ZNK10Algorithms20ExtendedKalmanFilterILt6ELt3ELt6EE8GetStateEv>:
		_time = time;}

	virtual void Predict(const ControlVec& controlVec, const ControlCovarianceMatrix& controlCov, float time);
	virtual void Update(const MeassurementVec& meassurementVec, const MeasurementCovarianceMatrix& meassurementCov, float time);

	const StateVec& GetState() const {return _state;}
 800d450:	b480      	push	{r7}
 800d452:	b083      	sub	sp, #12
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	3304      	adds	r3, #4
 800d45c:	4618      	mov	r0, r3
 800d45e:	370c      	adds	r7, #12
 800d460:	46bd      	mov	sp, r7
 800d462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d466:	4770      	bx	lr

0800d468 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>:

template <u_short heigth, u_short width>
Matrix<heigth, width>::Matrix(const std::array<float, heigth*width>& values): _values(values) {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 800d468:	b480      	push	{r7}
 800d46a:	b083      	sub	sp, #12
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
 800d470:	6039      	str	r1, [r7, #0]
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	683a      	ldr	r2, [r7, #0]
 800d476:	ca07      	ldmia	r2, {r0, r1, r2}
 800d478:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	4618      	mov	r0, r3
 800d480:	370c      	adds	r7, #12
 800d482:	46bd      	mov	sp, r7
 800d484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d488:	4770      	bx	lr

0800d48a <_ZZN3Mat6MatrixILt3ELt1EEC4EfENKUlRfE_clES2_>:
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 800d48a:	b480      	push	{r7}
 800d48c:	b083      	sub	sp, #12
 800d48e:	af00      	add	r7, sp, #0
 800d490:	6078      	str	r0, [r7, #4]
 800d492:	6039      	str	r1, [r7, #0]
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681a      	ldr	r2, [r3, #0]
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	601a      	str	r2, [r3, #0]
 800d49c:	bf00      	nop
 800d49e:	370c      	adds	r7, #12
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a6:	4770      	bx	lr

0800d4a8 <_ZN3Mat6MatrixILt3ELt1EEC1Ef>:
Matrix<heigth, width>::Matrix(float val)
 800d4a8:	b590      	push	{r4, r7, lr}
 800d4aa:	b083      	sub	sp, #12
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
 800d4b0:	ed87 0a00 	vstr	s0, [r7]
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	f000 f93b 	bl	800d732 <_ZNSt5arrayIfLj3EE5beginEv>
 800d4bc:	4604      	mov	r4, r0
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	f000 f942 	bl	800d74a <_ZNSt5arrayIfLj3EE3endEv>
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	edd7 7a00 	vldr	s15, [r7]
 800d4cc:	eeb0 0a67 	vmov.f32	s0, s15
 800d4d0:	4619      	mov	r1, r3
 800d4d2:	4620      	mov	r0, r4
 800d4d4:	f000 f946 	bl	800d764 <_ZSt8for_eachIPfZN3Mat6MatrixILt3ELt1EEC4EfEUlRfE_ET0_T_S7_S6_>
}
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	4618      	mov	r0, r3
 800d4dc:	370c      	adds	r7, #12
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	bd90      	pop	{r4, r7, pc}

0800d4e2 <_ZN3Mat6MatrixILt3ELt1EEclEtt>:

template <u_short heigth, u_short width>
float& Matrix<heigth, width>::operator()(u_short row, u_short col)
 800d4e2:	b580      	push	{r7, lr}
 800d4e4:	b084      	sub	sp, #16
 800d4e6:	af00      	add	r7, sp, #0
 800d4e8:	6078      	str	r0, [r7, #4]
 800d4ea:	460b      	mov	r3, r1
 800d4ec:	807b      	strh	r3, [r7, #2]
 800d4ee:	4613      	mov	r3, r2
 800d4f0:	803b      	strh	r3, [r7, #0]
{
	u_int index = width * row + col;
 800d4f2:	887a      	ldrh	r2, [r7, #2]
 800d4f4:	883b      	ldrh	r3, [r7, #0]
 800d4f6:	4413      	add	r3, r2
 800d4f8:	60fb      	str	r3, [r7, #12]
	return _values[index];
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	68f9      	ldr	r1, [r7, #12]
 800d4fe:	4618      	mov	r0, r3
 800d500:	f000 f94c 	bl	800d79c <_ZNSt5arrayIfLj3EEixEj>
 800d504:	4603      	mov	r3, r0
}
 800d506:	4618      	mov	r0, r3
 800d508:	3710      	adds	r7, #16
 800d50a:	46bd      	mov	sp, r7
 800d50c:	bd80      	pop	{r7, pc}

0800d50e <_ZNK3Mat6MatrixILt3ELt3EEmlILt1EEENS0_ILt3EXT_EEERKS3_>:
	result *= val;
	return result;
}

template <u_short heigth, u_short width> template <u_short other_width>
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 800d50e:	b580      	push	{r7, lr}
 800d510:	b08c      	sub	sp, #48	; 0x30
 800d512:	af00      	add	r7, sp, #0
 800d514:	6178      	str	r0, [r7, #20]
 800d516:	6139      	str	r1, [r7, #16]
{
	Matrix<heigth, other_width> result;
 800d518:	f107 0318 	add.w	r3, r7, #24
 800d51c:	4618      	mov	r0, r3
 800d51e:	f000 f8b8 	bl	800d692 <_ZN3Mat6MatrixILt3ELt1EEC1Ev>
	Multiply(other, result);
 800d522:	f107 0318 	add.w	r3, r7, #24
 800d526:	461a      	mov	r2, r3
 800d528:	6939      	ldr	r1, [r7, #16]
 800d52a:	6978      	ldr	r0, [r7, #20]
 800d52c:	f000 f945 	bl	800d7ba <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_>
	return result;
 800d530:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d534:	f107 0218 	add.w	r2, r7, #24
 800d538:	ca07      	ldmia	r2, {r0, r1, r2}
 800d53a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d53e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d540:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d544:	ee06 1a90 	vmov	s13, r1
 800d548:	ee07 2a10 	vmov	s14, r2
 800d54c:	ee07 3a90 	vmov	s15, r3
}
 800d550:	eeb0 0a66 	vmov.f32	s0, s13
 800d554:	eef0 0a47 	vmov.f32	s1, s14
 800d558:	eeb0 1a67 	vmov.f32	s2, s15
 800d55c:	3730      	adds	r7, #48	; 0x30
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}

0800d562 <_ZNK3Mat8V_VectorILt6EEclEt>:
	inline float operator()(u_short index) const {return _values[index];}
 800d562:	b580      	push	{r7, lr}
 800d564:	b082      	sub	sp, #8
 800d566:	af00      	add	r7, sp, #0
 800d568:	6078      	str	r0, [r7, #4]
 800d56a:	460b      	mov	r3, r1
 800d56c:	807b      	strh	r3, [r7, #2]
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	887a      	ldrh	r2, [r7, #2]
 800d572:	4611      	mov	r1, r2
 800d574:	4618      	mov	r0, r3
 800d576:	f000 f9d4 	bl	800d922 <_ZNKSt5arrayIfLj6EEixEj>
 800d57a:	4603      	mov	r3, r0
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	ee07 3a90 	vmov	s15, r3
 800d582:	eeb0 0a67 	vmov.f32	s0, s15
 800d586:	3708      	adds	r7, #8
 800d588:	46bd      	mov	sp, r7
 800d58a:	bd80      	pop	{r7, pc}

0800d58c <_ZNSt5arrayIfLj36EE5beginEv>:
      noexcept(_AT_Type::_Is_nothrow_swappable::value)
      { std::swap_ranges(begin(), end(), __other.begin()); }

      // Iterators.
      _GLIBCXX17_CONSTEXPR iterator
      begin() noexcept
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b082      	sub	sp, #8
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 800d594:	6878      	ldr	r0, [r7, #4]
 800d596:	f000 f9d3 	bl	800d940 <_ZNSt5arrayIfLj36EE4dataEv>
 800d59a:	4603      	mov	r3, r0
 800d59c:	4618      	mov	r0, r3
 800d59e:	3708      	adds	r7, #8
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	bd80      	pop	{r7, pc}

0800d5a4 <_ZNSt5arrayIfLj36EE3endEv>:
      _GLIBCXX17_CONSTEXPR const_iterator
      begin() const noexcept
      { return const_iterator(data()); }

      _GLIBCXX17_CONSTEXPR iterator
      end() noexcept
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b082      	sub	sp, #8
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 800d5ac:	6878      	ldr	r0, [r7, #4]
 800d5ae:	f000 f9c7 	bl	800d940 <_ZNSt5arrayIfLj36EE4dataEv>
 800d5b2:	4603      	mov	r3, r0
 800d5b4:	3390      	adds	r3, #144	; 0x90
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	3708      	adds	r7, #8
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	bd80      	pop	{r7, pc}

0800d5be <_ZSt8for_eachIPfZN3Mat6MatrixILt6ELt6EEC4EfEUlRfE_ET0_T_S7_S6_>:
   *  If @p __f has a return value it is ignored.
  */
  template<typename _InputIterator, typename _Function>
    _GLIBCXX20_CONSTEXPR
    _Function
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
 800d5be:	b580      	push	{r7, lr}
 800d5c0:	b084      	sub	sp, #16
 800d5c2:	af00      	add	r7, sp, #0
 800d5c4:	60f8      	str	r0, [r7, #12]
 800d5c6:	60b9      	str	r1, [r7, #8]
 800d5c8:	ed87 0a01 	vstr	s0, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
      __glibcxx_requires_valid_range(__first, __last);
      for (; __first != __last; ++__first)
 800d5cc:	e007      	b.n	800d5de <_ZSt8for_eachIPfZN3Mat6MatrixILt6ELt6EEC4EfEUlRfE_ET0_T_S7_S6_+0x20>
	__f(*__first);
 800d5ce:	1d3b      	adds	r3, r7, #4
 800d5d0:	68f9      	ldr	r1, [r7, #12]
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	f7ff fe64 	bl	800d2a0 <_ZZN3Mat6MatrixILt6ELt6EEC4EfENKUlRfE_clES2_>
      for (; __first != __last; ++__first)
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	3304      	adds	r3, #4
 800d5dc:	60fb      	str	r3, [r7, #12]
 800d5de:	68fa      	ldr	r2, [r7, #12]
 800d5e0:	68bb      	ldr	r3, [r7, #8]
 800d5e2:	429a      	cmp	r2, r3
 800d5e4:	d1f3      	bne.n	800d5ce <_ZSt8for_eachIPfZN3Mat6MatrixILt6ELt6EEC4EfEUlRfE_ET0_T_S7_S6_+0x10>
      return __f; // N.B. [alg.foreach] says std::move(f) but it's redundant.
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	ee07 3a90 	vmov	s15, r3
    }
 800d5ec:	eeb0 0a67 	vmov.f32	s0, s15
 800d5f0:	3710      	adds	r7, #16
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	bd80      	pop	{r7, pc}

0800d5f6 <_ZZN3Mat6MatrixILt4ELt4EEC4EfENKUlRfE_clES2_>:
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 800d5f6:	b480      	push	{r7}
 800d5f8:	b083      	sub	sp, #12
 800d5fa:	af00      	add	r7, sp, #0
 800d5fc:	6078      	str	r0, [r7, #4]
 800d5fe:	6039      	str	r1, [r7, #0]
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681a      	ldr	r2, [r3, #0]
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	601a      	str	r2, [r3, #0]
 800d608:	bf00      	nop
 800d60a:	370c      	adds	r7, #12
 800d60c:	46bd      	mov	sp, r7
 800d60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d612:	4770      	bx	lr

0800d614 <_ZN3Mat6MatrixILt4ELt4EEC1Ef>:
Matrix<heigth, width>::Matrix(float val)
 800d614:	b590      	push	{r4, r7, lr}
 800d616:	b083      	sub	sp, #12
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
 800d61c:	ed87 0a00 	vstr	s0, [r7]
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	4618      	mov	r0, r3
 800d624:	f000 f999 	bl	800d95a <_ZNSt5arrayIfLj16EE5beginEv>
 800d628:	4604      	mov	r4, r0
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	4618      	mov	r0, r3
 800d62e:	f000 f9a0 	bl	800d972 <_ZNSt5arrayIfLj16EE3endEv>
 800d632:	4603      	mov	r3, r0
 800d634:	edd7 7a00 	vldr	s15, [r7]
 800d638:	eeb0 0a67 	vmov.f32	s0, s15
 800d63c:	4619      	mov	r1, r3
 800d63e:	4620      	mov	r0, r4
 800d640:	f000 f9a4 	bl	800d98c <_ZSt8for_eachIPfZN3Mat6MatrixILt4ELt4EEC4EfEUlRfE_ET0_T_S7_S6_>
}
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	4618      	mov	r0, r3
 800d648:	370c      	adds	r7, #12
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd90      	pop	{r4, r7, pc}

0800d64e <_ZN3Mat6MatrixILt4ELt4EEclEtt>:
float& Matrix<heigth, width>::operator()(u_short row, u_short col)
 800d64e:	b580      	push	{r7, lr}
 800d650:	b084      	sub	sp, #16
 800d652:	af00      	add	r7, sp, #0
 800d654:	6078      	str	r0, [r7, #4]
 800d656:	460b      	mov	r3, r1
 800d658:	807b      	strh	r3, [r7, #2]
 800d65a:	4613      	mov	r3, r2
 800d65c:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 800d65e:	887b      	ldrh	r3, [r7, #2]
 800d660:	009a      	lsls	r2, r3, #2
 800d662:	883b      	ldrh	r3, [r7, #0]
 800d664:	4413      	add	r3, r2
 800d666:	60fb      	str	r3, [r7, #12]
	return _values[index];
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	68f9      	ldr	r1, [r7, #12]
 800d66c:	4618      	mov	r0, r3
 800d66e:	f000 f9a9 	bl	800d9c4 <_ZNSt5arrayIfLj16EEixEj>
 800d672:	4603      	mov	r3, r0
}
 800d674:	4618      	mov	r0, r3
 800d676:	3710      	adds	r7, #16
 800d678:	46bd      	mov	sp, r7
 800d67a:	bd80      	pop	{r7, pc}

0800d67c <_ZN3Mat6MatrixILt6ELt1EEC1Ev>:
Matrix<heigth, width>::Matrix() {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 800d67c:	b480      	push	{r7}
 800d67e:	b083      	sub	sp, #12
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	4618      	mov	r0, r3
 800d688:	370c      	adds	r7, #12
 800d68a:	46bd      	mov	sp, r7
 800d68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d690:	4770      	bx	lr

0800d692 <_ZN3Mat6MatrixILt3ELt1EEC1Ev>:
 800d692:	b480      	push	{r7}
 800d694:	b083      	sub	sp, #12
 800d696:	af00      	add	r7, sp, #0
 800d698:	6078      	str	r0, [r7, #4]
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	4618      	mov	r0, r3
 800d69e:	370c      	adds	r7, #12
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a6:	4770      	bx	lr

0800d6a8 <_ZZN3Mat6MatrixILt3ELt3EEC4EfENKUlRfE_clES2_>:
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 800d6a8:	b480      	push	{r7}
 800d6aa:	b083      	sub	sp, #12
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
 800d6b0:	6039      	str	r1, [r7, #0]
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681a      	ldr	r2, [r3, #0]
 800d6b6:	683b      	ldr	r3, [r7, #0]
 800d6b8:	601a      	str	r2, [r3, #0]
 800d6ba:	bf00      	nop
 800d6bc:	370c      	adds	r7, #12
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c4:	4770      	bx	lr

0800d6c6 <_ZN3Mat6MatrixILt3ELt3EEC1Ef>:
Matrix<heigth, width>::Matrix(float val)
 800d6c6:	b590      	push	{r4, r7, lr}
 800d6c8:	b083      	sub	sp, #12
 800d6ca:	af00      	add	r7, sp, #0
 800d6cc:	6078      	str	r0, [r7, #4]
 800d6ce:	ed87 0a00 	vstr	s0, [r7]
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	f000 f984 	bl	800d9e2 <_ZNSt5arrayIfLj9EE5beginEv>
 800d6da:	4604      	mov	r4, r0
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	4618      	mov	r0, r3
 800d6e0:	f000 f98b 	bl	800d9fa <_ZNSt5arrayIfLj9EE3endEv>
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	edd7 7a00 	vldr	s15, [r7]
 800d6ea:	eeb0 0a67 	vmov.f32	s0, s15
 800d6ee:	4619      	mov	r1, r3
 800d6f0:	4620      	mov	r0, r4
 800d6f2:	f000 f98f 	bl	800da14 <_ZSt8for_eachIPfZN3Mat6MatrixILt3ELt3EEC4EfEUlRfE_ET0_T_S7_S6_>
}
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	370c      	adds	r7, #12
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	bd90      	pop	{r4, r7, pc}

0800d700 <_ZN3Mat6MatrixILt3ELt3EEclEtt>:
float& Matrix<heigth, width>::operator()(u_short row, u_short col)
 800d700:	b580      	push	{r7, lr}
 800d702:	b084      	sub	sp, #16
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
 800d708:	460b      	mov	r3, r1
 800d70a:	807b      	strh	r3, [r7, #2]
 800d70c:	4613      	mov	r3, r2
 800d70e:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 800d710:	887a      	ldrh	r2, [r7, #2]
 800d712:	4613      	mov	r3, r2
 800d714:	005b      	lsls	r3, r3, #1
 800d716:	441a      	add	r2, r3
 800d718:	883b      	ldrh	r3, [r7, #0]
 800d71a:	4413      	add	r3, r2
 800d71c:	60fb      	str	r3, [r7, #12]
	return _values[index];
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	68f9      	ldr	r1, [r7, #12]
 800d722:	4618      	mov	r0, r3
 800d724:	f000 f992 	bl	800da4c <_ZNSt5arrayIfLj9EEixEj>
 800d728:	4603      	mov	r3, r0
}
 800d72a:	4618      	mov	r0, r3
 800d72c:	3710      	adds	r7, #16
 800d72e:	46bd      	mov	sp, r7
 800d730:	bd80      	pop	{r7, pc}

0800d732 <_ZNSt5arrayIfLj3EE5beginEv>:
      begin() noexcept
 800d732:	b580      	push	{r7, lr}
 800d734:	b082      	sub	sp, #8
 800d736:	af00      	add	r7, sp, #0
 800d738:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 800d73a:	6878      	ldr	r0, [r7, #4]
 800d73c:	f000 f995 	bl	800da6a <_ZNSt5arrayIfLj3EE4dataEv>
 800d740:	4603      	mov	r3, r0
 800d742:	4618      	mov	r0, r3
 800d744:	3708      	adds	r7, #8
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}

0800d74a <_ZNSt5arrayIfLj3EE3endEv>:
      end() noexcept
 800d74a:	b580      	push	{r7, lr}
 800d74c:	b082      	sub	sp, #8
 800d74e:	af00      	add	r7, sp, #0
 800d750:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 800d752:	6878      	ldr	r0, [r7, #4]
 800d754:	f000 f989 	bl	800da6a <_ZNSt5arrayIfLj3EE4dataEv>
 800d758:	4603      	mov	r3, r0
 800d75a:	330c      	adds	r3, #12
 800d75c:	4618      	mov	r0, r3
 800d75e:	3708      	adds	r7, #8
 800d760:	46bd      	mov	sp, r7
 800d762:	bd80      	pop	{r7, pc}

0800d764 <_ZSt8for_eachIPfZN3Mat6MatrixILt3ELt1EEC4EfEUlRfE_ET0_T_S7_S6_>:
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
 800d764:	b580      	push	{r7, lr}
 800d766:	b084      	sub	sp, #16
 800d768:	af00      	add	r7, sp, #0
 800d76a:	60f8      	str	r0, [r7, #12]
 800d76c:	60b9      	str	r1, [r7, #8]
 800d76e:	ed87 0a01 	vstr	s0, [r7, #4]
      for (; __first != __last; ++__first)
 800d772:	e007      	b.n	800d784 <_ZSt8for_eachIPfZN3Mat6MatrixILt3ELt1EEC4EfEUlRfE_ET0_T_S7_S6_+0x20>
	__f(*__first);
 800d774:	1d3b      	adds	r3, r7, #4
 800d776:	68f9      	ldr	r1, [r7, #12]
 800d778:	4618      	mov	r0, r3
 800d77a:	f7ff fe86 	bl	800d48a <_ZZN3Mat6MatrixILt3ELt1EEC4EfENKUlRfE_clES2_>
      for (; __first != __last; ++__first)
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	3304      	adds	r3, #4
 800d782:	60fb      	str	r3, [r7, #12]
 800d784:	68fa      	ldr	r2, [r7, #12]
 800d786:	68bb      	ldr	r3, [r7, #8]
 800d788:	429a      	cmp	r2, r3
 800d78a:	d1f3      	bne.n	800d774 <_ZSt8for_eachIPfZN3Mat6MatrixILt3ELt1EEC4EfEUlRfE_ET0_T_S7_S6_+0x10>
      return __f; // N.B. [alg.foreach] says std::move(f) but it's redundant.
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	ee07 3a90 	vmov	s15, r3
    }
 800d792:	eeb0 0a67 	vmov.f32	s0, s15
 800d796:	3710      	adds	r7, #16
 800d798:	46bd      	mov	sp, r7
 800d79a:	bd80      	pop	{r7, pc}

0800d79c <_ZNSt5arrayIfLj3EEixEj>:
      _GLIBCXX_NODISCARD constexpr bool
      empty() const noexcept { return size() == 0; }

      // Element access.
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b082      	sub	sp, #8
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
 800d7a4:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return _AT_Type::_S_ref(_M_elems, __n);
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	6839      	ldr	r1, [r7, #0]
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	f000 f96a 	bl	800da84 <_ZNSt14__array_traitsIfLj3EE6_S_refERA3_Kfj>
 800d7b0:	4603      	mov	r3, r0
      }
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	3708      	adds	r7, #8
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd80      	pop	{r7, pc}

0800d7ba <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_>:

template <u_short heigth, u_short width> template <u_short other_width>
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 800d7ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7bc:	b095      	sub	sp, #84	; 0x54
 800d7be:	af00      	add	r7, sp, #0
 800d7c0:	60f8      	str	r0, [r7, #12]
 800d7c2:	60b9      	str	r1, [r7, #8]
 800d7c4:	607a      	str	r2, [r7, #4]
{
	std::array<Row, other_width> other_columns;
	std::array<Row, heigth> this_rows;
	for(u_short row = 0; row < heigth; ++row)
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800d7cc:	e02d      	b.n	800d82a <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0x70>
		for(u_short col = 0; col < width; ++col)
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800d7d4:	e020      	b.n	800d818 <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 800d7d6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800d7da:	f107 0314 	add.w	r3, r7, #20
 800d7de:	4611      	mov	r1, r2
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	f000 f95e 	bl	800daa2 <_ZNSt5arrayIS_IfLj3EELj3EEixEj>
 800d7e6:	4602      	mov	r2, r0
 800d7e8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800d7ec:	4619      	mov	r1, r3
 800d7ee:	4610      	mov	r0, r2
 800d7f0:	f7ff ffd4 	bl	800d79c <_ZNSt5arrayIfLj3EEixEj>
 800d7f4:	4604      	mov	r4, r0
 800d7f6:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800d7fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d7fe:	4619      	mov	r1, r3
 800d800:	68f8      	ldr	r0, [r7, #12]
 800d802:	f000 f95d 	bl	800dac0 <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 800d806:	eef0 7a40 	vmov.f32	s15, s0
 800d80a:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 800d80e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800d812:	3301      	adds	r3, #1
 800d814:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800d818:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800d81c:	2b02      	cmp	r3, #2
 800d81e:	d9da      	bls.n	800d7d6 <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 800d820:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d824:	3301      	adds	r3, #1
 800d826:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800d82a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d82e:	2b02      	cmp	r3, #2
 800d830:	d9cd      	bls.n	800d7ce <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0x14>

	for(u_short col = 0; col < other_width; ++col)
 800d832:	2300      	movs	r3, #0
 800d834:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800d838:	e02d      	b.n	800d896 <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0xdc>
		for(u_short row = 0; row < width; ++row)
 800d83a:	2300      	movs	r3, #0
 800d83c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800d840:	e020      	b.n	800d884 <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0xca>
			other_columns[col][row] = other(row, col);
 800d842:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800d846:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d84a:	4611      	mov	r1, r2
 800d84c:	4618      	mov	r0, r3
 800d84e:	f000 f954 	bl	800dafa <_ZNSt5arrayIS_IfLj3EELj1EEixEj>
 800d852:	4602      	mov	r2, r0
 800d854:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800d858:	4619      	mov	r1, r3
 800d85a:	4610      	mov	r0, r2
 800d85c:	f7ff ff9e 	bl	800d79c <_ZNSt5arrayIfLj3EEixEj>
 800d860:	4604      	mov	r4, r0
 800d862:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800d866:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800d86a:	4619      	mov	r1, r3
 800d86c:	68b8      	ldr	r0, [r7, #8]
 800d86e:	f000 f953 	bl	800db18 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 800d872:	eef0 7a40 	vmov.f32	s15, s0
 800d876:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 800d87a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800d87e:	3301      	adds	r3, #1
 800d880:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800d884:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800d888:	2b02      	cmp	r3, #2
 800d88a:	d9da      	bls.n	800d842 <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0x88>
	for(u_short col = 0; col < other_width; ++col)
 800d88c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800d890:	3301      	adds	r3, #1
 800d892:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800d896:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d0cd      	beq.n	800d83a <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0x80>

	for(u_short row = 0; row < heigth; ++row)
 800d89e:	2300      	movs	r3, #0
 800d8a0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800d8a4:	e034      	b.n	800d910 <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0x156>
		for(u_short col = 0; col < other_width; ++col)
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800d8ac:	e027      	b.n	800d8fe <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 800d8ae:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800d8b2:	f107 0314 	add.w	r3, r7, #20
 800d8b6:	4611      	mov	r1, r2
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	f000 f8f2 	bl	800daa2 <_ZNSt5arrayIS_IfLj3EELj3EEixEj>
 800d8be:	4605      	mov	r5, r0
 800d8c0:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800d8c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d8c8:	4611      	mov	r1, r2
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f000 f915 	bl	800dafa <_ZNSt5arrayIS_IfLj3EELj1EEixEj>
 800d8d0:	4606      	mov	r6, r0
 800d8d2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800d8d6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d8da:	4619      	mov	r1, r3
 800d8dc:	6878      	ldr	r0, [r7, #4]
 800d8de:	f7ff fe00 	bl	800d4e2 <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d8e2:	4604      	mov	r4, r0
 800d8e4:	4631      	mov	r1, r6
 800d8e6:	4628      	mov	r0, r5
 800d8e8:	f000 f930 	bl	800db4c <_ZN3Mat13Multiply_rowsILj3EEEfRKSt5arrayIfXT_EES4_>
 800d8ec:	eef0 7a40 	vmov.f32	s15, s0
 800d8f0:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 800d8f4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800d8f8:	3301      	adds	r3, #1
 800d8fa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800d8fe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800d902:	2b00      	cmp	r3, #0
 800d904:	d0d3      	beq.n	800d8ae <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 800d906:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d90a:	3301      	adds	r3, #1
 800d90c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800d910:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d914:	2b02      	cmp	r3, #2
 800d916:	d9c6      	bls.n	800d8a6 <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0xec>
}
 800d918:	bf00      	nop
 800d91a:	bf00      	nop
 800d91c:	3754      	adds	r7, #84	; 0x54
 800d91e:	46bd      	mov	sp, r7
 800d920:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d922 <_ZNKSt5arrayIfLj6EEixEj>:

      constexpr const_reference
      operator[](size_type __n) const noexcept
 800d922:	b580      	push	{r7, lr}
 800d924:	b082      	sub	sp, #8
 800d926:	af00      	add	r7, sp, #0
 800d928:	6078      	str	r0, [r7, #4]
 800d92a:	6039      	str	r1, [r7, #0]
      {
#if __cplusplus >= 201402L
	__glibcxx_requires_subscript(__n);
#endif
	return _AT_Type::_S_ref(_M_elems, __n);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	6839      	ldr	r1, [r7, #0]
 800d930:	4618      	mov	r0, r3
 800d932:	f000 f93e 	bl	800dbb2 <_ZNSt14__array_traitsIfLj6EE6_S_refERA6_Kfj>
 800d936:	4603      	mov	r3, r0
      }
 800d938:	4618      	mov	r0, r3
 800d93a:	3708      	adds	r7, #8
 800d93c:	46bd      	mov	sp, r7
 800d93e:	bd80      	pop	{r7, pc}

0800d940 <_ZNSt5arrayIfLj36EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 800d940:	b580      	push	{r7, lr}
 800d942:	b082      	sub	sp, #8
 800d944:	af00      	add	r7, sp, #0
 800d946:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	4618      	mov	r0, r3
 800d94c:	f000 f940 	bl	800dbd0 <_ZNSt14__array_traitsIfLj36EE6_S_ptrERA36_Kf>
 800d950:	4603      	mov	r3, r0
 800d952:	4618      	mov	r0, r3
 800d954:	3708      	adds	r7, #8
 800d956:	46bd      	mov	sp, r7
 800d958:	bd80      	pop	{r7, pc}

0800d95a <_ZNSt5arrayIfLj16EE5beginEv>:
      begin() noexcept
 800d95a:	b580      	push	{r7, lr}
 800d95c:	b082      	sub	sp, #8
 800d95e:	af00      	add	r7, sp, #0
 800d960:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 800d962:	6878      	ldr	r0, [r7, #4]
 800d964:	f000 f93f 	bl	800dbe6 <_ZNSt5arrayIfLj16EE4dataEv>
 800d968:	4603      	mov	r3, r0
 800d96a:	4618      	mov	r0, r3
 800d96c:	3708      	adds	r7, #8
 800d96e:	46bd      	mov	sp, r7
 800d970:	bd80      	pop	{r7, pc}

0800d972 <_ZNSt5arrayIfLj16EE3endEv>:
      end() noexcept
 800d972:	b580      	push	{r7, lr}
 800d974:	b082      	sub	sp, #8
 800d976:	af00      	add	r7, sp, #0
 800d978:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 800d97a:	6878      	ldr	r0, [r7, #4]
 800d97c:	f000 f933 	bl	800dbe6 <_ZNSt5arrayIfLj16EE4dataEv>
 800d980:	4603      	mov	r3, r0
 800d982:	3340      	adds	r3, #64	; 0x40
 800d984:	4618      	mov	r0, r3
 800d986:	3708      	adds	r7, #8
 800d988:	46bd      	mov	sp, r7
 800d98a:	bd80      	pop	{r7, pc}

0800d98c <_ZSt8for_eachIPfZN3Mat6MatrixILt4ELt4EEC4EfEUlRfE_ET0_T_S7_S6_>:
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b084      	sub	sp, #16
 800d990:	af00      	add	r7, sp, #0
 800d992:	60f8      	str	r0, [r7, #12]
 800d994:	60b9      	str	r1, [r7, #8]
 800d996:	ed87 0a01 	vstr	s0, [r7, #4]
      for (; __first != __last; ++__first)
 800d99a:	e007      	b.n	800d9ac <_ZSt8for_eachIPfZN3Mat6MatrixILt4ELt4EEC4EfEUlRfE_ET0_T_S7_S6_+0x20>
	__f(*__first);
 800d99c:	1d3b      	adds	r3, r7, #4
 800d99e:	68f9      	ldr	r1, [r7, #12]
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	f7ff fe28 	bl	800d5f6 <_ZZN3Mat6MatrixILt4ELt4EEC4EfENKUlRfE_clES2_>
      for (; __first != __last; ++__first)
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	3304      	adds	r3, #4
 800d9aa:	60fb      	str	r3, [r7, #12]
 800d9ac:	68fa      	ldr	r2, [r7, #12]
 800d9ae:	68bb      	ldr	r3, [r7, #8]
 800d9b0:	429a      	cmp	r2, r3
 800d9b2:	d1f3      	bne.n	800d99c <_ZSt8for_eachIPfZN3Mat6MatrixILt4ELt4EEC4EfEUlRfE_ET0_T_S7_S6_+0x10>
      return __f; // N.B. [alg.foreach] says std::move(f) but it's redundant.
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	ee07 3a90 	vmov	s15, r3
    }
 800d9ba:	eeb0 0a67 	vmov.f32	s0, s15
 800d9be:	3710      	adds	r7, #16
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	bd80      	pop	{r7, pc}

0800d9c4 <_ZNSt5arrayIfLj16EEixEj>:
      operator[](size_type __n) noexcept
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b082      	sub	sp, #8
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
 800d9cc:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	6839      	ldr	r1, [r7, #0]
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f000 f914 	bl	800dc00 <_ZNSt14__array_traitsIfLj16EE6_S_refERA16_Kfj>
 800d9d8:	4603      	mov	r3, r0
      }
 800d9da:	4618      	mov	r0, r3
 800d9dc:	3708      	adds	r7, #8
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	bd80      	pop	{r7, pc}

0800d9e2 <_ZNSt5arrayIfLj9EE5beginEv>:
      begin() noexcept
 800d9e2:	b580      	push	{r7, lr}
 800d9e4:	b082      	sub	sp, #8
 800d9e6:	af00      	add	r7, sp, #0
 800d9e8:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 800d9ea:	6878      	ldr	r0, [r7, #4]
 800d9ec:	f000 f917 	bl	800dc1e <_ZNSt5arrayIfLj9EE4dataEv>
 800d9f0:	4603      	mov	r3, r0
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	3708      	adds	r7, #8
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	bd80      	pop	{r7, pc}

0800d9fa <_ZNSt5arrayIfLj9EE3endEv>:
      end() noexcept
 800d9fa:	b580      	push	{r7, lr}
 800d9fc:	b082      	sub	sp, #8
 800d9fe:	af00      	add	r7, sp, #0
 800da00:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 800da02:	6878      	ldr	r0, [r7, #4]
 800da04:	f000 f90b 	bl	800dc1e <_ZNSt5arrayIfLj9EE4dataEv>
 800da08:	4603      	mov	r3, r0
 800da0a:	3324      	adds	r3, #36	; 0x24
 800da0c:	4618      	mov	r0, r3
 800da0e:	3708      	adds	r7, #8
 800da10:	46bd      	mov	sp, r7
 800da12:	bd80      	pop	{r7, pc}

0800da14 <_ZSt8for_eachIPfZN3Mat6MatrixILt3ELt3EEC4EfEUlRfE_ET0_T_S7_S6_>:
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
 800da14:	b580      	push	{r7, lr}
 800da16:	b084      	sub	sp, #16
 800da18:	af00      	add	r7, sp, #0
 800da1a:	60f8      	str	r0, [r7, #12]
 800da1c:	60b9      	str	r1, [r7, #8]
 800da1e:	ed87 0a01 	vstr	s0, [r7, #4]
      for (; __first != __last; ++__first)
 800da22:	e007      	b.n	800da34 <_ZSt8for_eachIPfZN3Mat6MatrixILt3ELt3EEC4EfEUlRfE_ET0_T_S7_S6_+0x20>
	__f(*__first);
 800da24:	1d3b      	adds	r3, r7, #4
 800da26:	68f9      	ldr	r1, [r7, #12]
 800da28:	4618      	mov	r0, r3
 800da2a:	f7ff fe3d 	bl	800d6a8 <_ZZN3Mat6MatrixILt3ELt3EEC4EfENKUlRfE_clES2_>
      for (; __first != __last; ++__first)
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	3304      	adds	r3, #4
 800da32:	60fb      	str	r3, [r7, #12]
 800da34:	68fa      	ldr	r2, [r7, #12]
 800da36:	68bb      	ldr	r3, [r7, #8]
 800da38:	429a      	cmp	r2, r3
 800da3a:	d1f3      	bne.n	800da24 <_ZSt8for_eachIPfZN3Mat6MatrixILt3ELt3EEC4EfEUlRfE_ET0_T_S7_S6_+0x10>
      return __f; // N.B. [alg.foreach] says std::move(f) but it's redundant.
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	ee07 3a90 	vmov	s15, r3
    }
 800da42:	eeb0 0a67 	vmov.f32	s0, s15
 800da46:	3710      	adds	r7, #16
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}

0800da4c <_ZNSt5arrayIfLj9EEixEj>:
      operator[](size_type __n) noexcept
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b082      	sub	sp, #8
 800da50:	af00      	add	r7, sp, #0
 800da52:	6078      	str	r0, [r7, #4]
 800da54:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	6839      	ldr	r1, [r7, #0]
 800da5a:	4618      	mov	r0, r3
 800da5c:	f000 f8ec 	bl	800dc38 <_ZNSt14__array_traitsIfLj9EE6_S_refERA9_Kfj>
 800da60:	4603      	mov	r3, r0
      }
 800da62:	4618      	mov	r0, r3
 800da64:	3708      	adds	r7, #8
 800da66:	46bd      	mov	sp, r7
 800da68:	bd80      	pop	{r7, pc}

0800da6a <_ZNSt5arrayIfLj3EE4dataEv>:
      data() noexcept
 800da6a:	b580      	push	{r7, lr}
 800da6c:	b082      	sub	sp, #8
 800da6e:	af00      	add	r7, sp, #0
 800da70:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	4618      	mov	r0, r3
 800da76:	f000 f8ee 	bl	800dc56 <_ZNSt14__array_traitsIfLj3EE6_S_ptrERA3_Kf>
 800da7a:	4603      	mov	r3, r0
 800da7c:	4618      	mov	r0, r3
 800da7e:	3708      	adds	r7, #8
 800da80:	46bd      	mov	sp, r7
 800da82:	bd80      	pop	{r7, pc}

0800da84 <_ZNSt14__array_traitsIfLj3EE6_S_refERA3_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800da84:	b480      	push	{r7}
 800da86:	b083      	sub	sp, #12
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
 800da8c:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800da8e:	683b      	ldr	r3, [r7, #0]
 800da90:	009b      	lsls	r3, r3, #2
 800da92:	687a      	ldr	r2, [r7, #4]
 800da94:	4413      	add	r3, r2
 800da96:	4618      	mov	r0, r3
 800da98:	370c      	adds	r7, #12
 800da9a:	46bd      	mov	sp, r7
 800da9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa0:	4770      	bx	lr

0800daa2 <_ZNSt5arrayIS_IfLj3EELj3EEixEj>:
      operator[](size_type __n) noexcept
 800daa2:	b580      	push	{r7, lr}
 800daa4:	b082      	sub	sp, #8
 800daa6:	af00      	add	r7, sp, #0
 800daa8:	6078      	str	r0, [r7, #4]
 800daaa:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	6839      	ldr	r1, [r7, #0]
 800dab0:	4618      	mov	r0, r3
 800dab2:	f000 f8db 	bl	800dc6c <_ZNSt14__array_traitsISt5arrayIfLj3EELj3EE6_S_refERA3_KS1_j>
 800dab6:	4603      	mov	r3, r0
      }
 800dab8:	4618      	mov	r0, r3
 800daba:	3708      	adds	r7, #8
 800dabc:	46bd      	mov	sp, r7
 800dabe:	bd80      	pop	{r7, pc}

0800dac0 <_ZNK3Mat6MatrixILt3ELt3EEclEtt>:
float Matrix<heigth, width>::operator()(u_short row, u_short col) const
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b084      	sub	sp, #16
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
 800dac8:	460b      	mov	r3, r1
 800daca:	807b      	strh	r3, [r7, #2]
 800dacc:	4613      	mov	r3, r2
 800dace:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 800dad0:	887a      	ldrh	r2, [r7, #2]
 800dad2:	4613      	mov	r3, r2
 800dad4:	005b      	lsls	r3, r3, #1
 800dad6:	441a      	add	r2, r3
 800dad8:	883b      	ldrh	r3, [r7, #0]
 800dada:	4413      	add	r3, r2
 800dadc:	60fb      	str	r3, [r7, #12]
	return _values[index];
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	68f9      	ldr	r1, [r7, #12]
 800dae2:	4618      	mov	r0, r3
 800dae4:	f000 f8d4 	bl	800dc90 <_ZNKSt5arrayIfLj9EEixEj>
 800dae8:	4603      	mov	r3, r0
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	ee07 3a90 	vmov	s15, r3
}
 800daf0:	eeb0 0a67 	vmov.f32	s0, s15
 800daf4:	3710      	adds	r7, #16
 800daf6:	46bd      	mov	sp, r7
 800daf8:	bd80      	pop	{r7, pc}

0800dafa <_ZNSt5arrayIS_IfLj3EELj1EEixEj>:
      operator[](size_type __n) noexcept
 800dafa:	b580      	push	{r7, lr}
 800dafc:	b082      	sub	sp, #8
 800dafe:	af00      	add	r7, sp, #0
 800db00:	6078      	str	r0, [r7, #4]
 800db02:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	6839      	ldr	r1, [r7, #0]
 800db08:	4618      	mov	r0, r3
 800db0a:	f000 f8d0 	bl	800dcae <_ZNSt14__array_traitsISt5arrayIfLj3EELj1EE6_S_refERA1_KS1_j>
 800db0e:	4603      	mov	r3, r0
      }
 800db10:	4618      	mov	r0, r3
 800db12:	3708      	adds	r7, #8
 800db14:	46bd      	mov	sp, r7
 800db16:	bd80      	pop	{r7, pc}

0800db18 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>:
float Matrix<heigth, width>::operator()(u_short row, u_short col) const
 800db18:	b580      	push	{r7, lr}
 800db1a:	b084      	sub	sp, #16
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
 800db20:	460b      	mov	r3, r1
 800db22:	807b      	strh	r3, [r7, #2]
 800db24:	4613      	mov	r3, r2
 800db26:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 800db28:	887a      	ldrh	r2, [r7, #2]
 800db2a:	883b      	ldrh	r3, [r7, #0]
 800db2c:	4413      	add	r3, r2
 800db2e:	60fb      	str	r3, [r7, #12]
	return _values[index];
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	68f9      	ldr	r1, [r7, #12]
 800db34:	4618      	mov	r0, r3
 800db36:	f000 f8cc 	bl	800dcd2 <_ZNKSt5arrayIfLj3EEixEj>
 800db3a:	4603      	mov	r3, r0
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	ee07 3a90 	vmov	s15, r3
}
 800db42:	eeb0 0a67 	vmov.f32	s0, s15
 800db46:	3710      	adds	r7, #16
 800db48:	46bd      	mov	sp, r7
 800db4a:	bd80      	pop	{r7, pc}

0800db4c <_ZN3Mat13Multiply_rowsILj3EEEfRKSt5arrayIfXT_EES4_>:
float Multiply_rows(const std::array<float, length>& A, const std::array<float, length>& B)
 800db4c:	b580      	push	{r7, lr}
 800db4e:	ed2d 8b02 	vpush	{d8}
 800db52:	b084      	sub	sp, #16
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
 800db58:	6039      	str	r1, [r7, #0]
    float result = 0.0f;
 800db5a:	f04f 0300 	mov.w	r3, #0
 800db5e:	60fb      	str	r3, [r7, #12]
	for(u_int i = 0; i < length; ++i) result += A[i]*B[i];
 800db60:	2300      	movs	r3, #0
 800db62:	60bb      	str	r3, [r7, #8]
 800db64:	e018      	b.n	800db98 <_ZN3Mat13Multiply_rowsILj3EEEfRKSt5arrayIfXT_EES4_+0x4c>
 800db66:	68b9      	ldr	r1, [r7, #8]
 800db68:	6878      	ldr	r0, [r7, #4]
 800db6a:	f000 f8b2 	bl	800dcd2 <_ZNKSt5arrayIfLj3EEixEj>
 800db6e:	4603      	mov	r3, r0
 800db70:	ed93 8a00 	vldr	s16, [r3]
 800db74:	68b9      	ldr	r1, [r7, #8]
 800db76:	6838      	ldr	r0, [r7, #0]
 800db78:	f000 f8ab 	bl	800dcd2 <_ZNKSt5arrayIfLj3EEixEj>
 800db7c:	4603      	mov	r3, r0
 800db7e:	edd3 7a00 	vldr	s15, [r3]
 800db82:	ee68 7a27 	vmul.f32	s15, s16, s15
 800db86:	ed97 7a03 	vldr	s14, [r7, #12]
 800db8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800db8e:	edc7 7a03 	vstr	s15, [r7, #12]
 800db92:	68bb      	ldr	r3, [r7, #8]
 800db94:	3301      	adds	r3, #1
 800db96:	60bb      	str	r3, [r7, #8]
 800db98:	68bb      	ldr	r3, [r7, #8]
 800db9a:	2b02      	cmp	r3, #2
 800db9c:	d9e3      	bls.n	800db66 <_ZN3Mat13Multiply_rowsILj3EEEfRKSt5arrayIfXT_EES4_+0x1a>
	return result;
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	ee07 3a90 	vmov	s15, r3
}
 800dba4:	eeb0 0a67 	vmov.f32	s0, s15
 800dba8:	3710      	adds	r7, #16
 800dbaa:	46bd      	mov	sp, r7
 800dbac:	ecbd 8b02 	vpop	{d8}
 800dbb0:	bd80      	pop	{r7, pc}

0800dbb2 <_ZNSt14__array_traitsIfLj6EE6_S_refERA6_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800dbb2:	b480      	push	{r7}
 800dbb4:	b083      	sub	sp, #12
 800dbb6:	af00      	add	r7, sp, #0
 800dbb8:	6078      	str	r0, [r7, #4]
 800dbba:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	009b      	lsls	r3, r3, #2
 800dbc0:	687a      	ldr	r2, [r7, #4]
 800dbc2:	4413      	add	r3, r2
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	370c      	adds	r7, #12
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbce:	4770      	bx	lr

0800dbd0 <_ZNSt14__array_traitsIfLj36EE6_S_ptrERA36_Kf>:
      _S_ptr(const _Type& __t) noexcept
 800dbd0:	b480      	push	{r7}
 800dbd2:	b083      	sub	sp, #12
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	4618      	mov	r0, r3
 800dbdc:	370c      	adds	r7, #12
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe4:	4770      	bx	lr

0800dbe6 <_ZNSt5arrayIfLj16EE4dataEv>:
      data() noexcept
 800dbe6:	b580      	push	{r7, lr}
 800dbe8:	b082      	sub	sp, #8
 800dbea:	af00      	add	r7, sp, #0
 800dbec:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	f000 f87d 	bl	800dcf0 <_ZNSt14__array_traitsIfLj16EE6_S_ptrERA16_Kf>
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	3708      	adds	r7, #8
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	bd80      	pop	{r7, pc}

0800dc00 <_ZNSt14__array_traitsIfLj16EE6_S_refERA16_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800dc00:	b480      	push	{r7}
 800dc02:	b083      	sub	sp, #12
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
 800dc08:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800dc0a:	683b      	ldr	r3, [r7, #0]
 800dc0c:	009b      	lsls	r3, r3, #2
 800dc0e:	687a      	ldr	r2, [r7, #4]
 800dc10:	4413      	add	r3, r2
 800dc12:	4618      	mov	r0, r3
 800dc14:	370c      	adds	r7, #12
 800dc16:	46bd      	mov	sp, r7
 800dc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1c:	4770      	bx	lr

0800dc1e <_ZNSt5arrayIfLj9EE4dataEv>:
      data() noexcept
 800dc1e:	b580      	push	{r7, lr}
 800dc20:	b082      	sub	sp, #8
 800dc22:	af00      	add	r7, sp, #0
 800dc24:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	4618      	mov	r0, r3
 800dc2a:	f000 f86c 	bl	800dd06 <_ZNSt14__array_traitsIfLj9EE6_S_ptrERA9_Kf>
 800dc2e:	4603      	mov	r3, r0
 800dc30:	4618      	mov	r0, r3
 800dc32:	3708      	adds	r7, #8
 800dc34:	46bd      	mov	sp, r7
 800dc36:	bd80      	pop	{r7, pc}

0800dc38 <_ZNSt14__array_traitsIfLj9EE6_S_refERA9_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800dc38:	b480      	push	{r7}
 800dc3a:	b083      	sub	sp, #12
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
 800dc40:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800dc42:	683b      	ldr	r3, [r7, #0]
 800dc44:	009b      	lsls	r3, r3, #2
 800dc46:	687a      	ldr	r2, [r7, #4]
 800dc48:	4413      	add	r3, r2
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	370c      	adds	r7, #12
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc54:	4770      	bx	lr

0800dc56 <_ZNSt14__array_traitsIfLj3EE6_S_ptrERA3_Kf>:
      _S_ptr(const _Type& __t) noexcept
 800dc56:	b480      	push	{r7}
 800dc58:	b083      	sub	sp, #12
 800dc5a:	af00      	add	r7, sp, #0
 800dc5c:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	4618      	mov	r0, r3
 800dc62:	370c      	adds	r7, #12
 800dc64:	46bd      	mov	sp, r7
 800dc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6a:	4770      	bx	lr

0800dc6c <_ZNSt14__array_traitsISt5arrayIfLj3EELj3EE6_S_refERA3_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800dc6c:	b480      	push	{r7}
 800dc6e:	b083      	sub	sp, #12
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
 800dc74:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800dc76:	683a      	ldr	r2, [r7, #0]
 800dc78:	4613      	mov	r3, r2
 800dc7a:	005b      	lsls	r3, r3, #1
 800dc7c:	4413      	add	r3, r2
 800dc7e:	009b      	lsls	r3, r3, #2
 800dc80:	687a      	ldr	r2, [r7, #4]
 800dc82:	4413      	add	r3, r2
 800dc84:	4618      	mov	r0, r3
 800dc86:	370c      	adds	r7, #12
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8e:	4770      	bx	lr

0800dc90 <_ZNKSt5arrayIfLj9EEixEj>:
      operator[](size_type __n) const noexcept
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b082      	sub	sp, #8
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
 800dc98:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	6839      	ldr	r1, [r7, #0]
 800dc9e:	4618      	mov	r0, r3
 800dca0:	f7ff ffca 	bl	800dc38 <_ZNSt14__array_traitsIfLj9EE6_S_refERA9_Kfj>
 800dca4:	4603      	mov	r3, r0
      }
 800dca6:	4618      	mov	r0, r3
 800dca8:	3708      	adds	r7, #8
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	bd80      	pop	{r7, pc}

0800dcae <_ZNSt14__array_traitsISt5arrayIfLj3EELj1EE6_S_refERA1_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800dcae:	b480      	push	{r7}
 800dcb0:	b083      	sub	sp, #12
 800dcb2:	af00      	add	r7, sp, #0
 800dcb4:	6078      	str	r0, [r7, #4]
 800dcb6:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800dcb8:	683a      	ldr	r2, [r7, #0]
 800dcba:	4613      	mov	r3, r2
 800dcbc:	005b      	lsls	r3, r3, #1
 800dcbe:	4413      	add	r3, r2
 800dcc0:	009b      	lsls	r3, r3, #2
 800dcc2:	687a      	ldr	r2, [r7, #4]
 800dcc4:	4413      	add	r3, r2
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	370c      	adds	r7, #12
 800dcca:	46bd      	mov	sp, r7
 800dccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd0:	4770      	bx	lr

0800dcd2 <_ZNKSt5arrayIfLj3EEixEj>:
      operator[](size_type __n) const noexcept
 800dcd2:	b580      	push	{r7, lr}
 800dcd4:	b082      	sub	sp, #8
 800dcd6:	af00      	add	r7, sp, #0
 800dcd8:	6078      	str	r0, [r7, #4]
 800dcda:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	6839      	ldr	r1, [r7, #0]
 800dce0:	4618      	mov	r0, r3
 800dce2:	f7ff fecf 	bl	800da84 <_ZNSt14__array_traitsIfLj3EE6_S_refERA3_Kfj>
 800dce6:	4603      	mov	r3, r0
      }
 800dce8:	4618      	mov	r0, r3
 800dcea:	3708      	adds	r7, #8
 800dcec:	46bd      	mov	sp, r7
 800dcee:	bd80      	pop	{r7, pc}

0800dcf0 <_ZNSt14__array_traitsIfLj16EE6_S_ptrERA16_Kf>:
      _S_ptr(const _Type& __t) noexcept
 800dcf0:	b480      	push	{r7}
 800dcf2:	b083      	sub	sp, #12
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	370c      	adds	r7, #12
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd04:	4770      	bx	lr

0800dd06 <_ZNSt14__array_traitsIfLj9EE6_S_ptrERA9_Kf>:
      _S_ptr(const _Type& __t) noexcept
 800dd06:	b480      	push	{r7}
 800dd08:	b083      	sub	sp, #12
 800dd0a:	af00      	add	r7, sp, #0
 800dd0c:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	4618      	mov	r0, r3
 800dd12:	370c      	adds	r7, #12
 800dd14:	46bd      	mov	sp, r7
 800dd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1a:	4770      	bx	lr

0800dd1c <_Z41__static_initialization_and_destruction_0ii>:

Vec3 GetAcceleration()
{
	Vec3 result;
	return result;
}
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b09a      	sub	sp, #104	; 0x68
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
 800dd24:	6039      	str	r1, [r7, #0]
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	2b01      	cmp	r3, #1
 800dd2a:	f040 8093 	bne.w	800de54 <_Z41__static_initialization_and_destruction_0ii+0x138>
 800dd2e:	683b      	ldr	r3, [r7, #0]
 800dd30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dd34:	4293      	cmp	r3, r2
 800dd36:	f040 808d 	bne.w	800de54 <_Z41__static_initialization_and_destruction_0ii+0x138>
Algorithms::FusionAlgorithm Fusion{};
 800dd3a:	4848      	ldr	r0, [pc, #288]	; (800de5c <_Z41__static_initialization_and_destruction_0ii+0x140>)
 800dd3c:	f7ff f820 	bl	800cd80 <_ZN10Algorithms15FusionAlgorithmC1Ev>
Algorithms::AHRSKalman Kalman{};
 800dd40:	4847      	ldr	r0, [pc, #284]	; (800de60 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 800dd42:	f7fe ffdf 	bl	800cd04 <_ZN10Algorithms10AHRSKalmanC1Ev>
Mat::Matrix<3, 1> MagCal({0, 0, 0});
 800dd46:	f04f 0300 	mov.w	r3, #0
 800dd4a:	60bb      	str	r3, [r7, #8]
 800dd4c:	f04f 0300 	mov.w	r3, #0
 800dd50:	60fb      	str	r3, [r7, #12]
 800dd52:	f04f 0300 	mov.w	r3, #0
 800dd56:	613b      	str	r3, [r7, #16]
 800dd58:	f107 0308 	add.w	r3, r7, #8
 800dd5c:	4619      	mov	r1, r3
 800dd5e:	4841      	ldr	r0, [pc, #260]	; (800de64 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 800dd60:	f7ff fb82 	bl	800d468 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
Mat::Matrix<3, 1> MagRaw({0, 0, 0});
 800dd64:	f04f 0300 	mov.w	r3, #0
 800dd68:	617b      	str	r3, [r7, #20]
 800dd6a:	f04f 0300 	mov.w	r3, #0
 800dd6e:	61bb      	str	r3, [r7, #24]
 800dd70:	f04f 0300 	mov.w	r3, #0
 800dd74:	61fb      	str	r3, [r7, #28]
 800dd76:	f107 0314 	add.w	r3, r7, #20
 800dd7a:	4619      	mov	r1, r3
 800dd7c:	483a      	ldr	r0, [pc, #232]	; (800de68 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 800dd7e:	f7ff fb73 	bl	800d468 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
Mat::Matrix<3, 1> GyroCal({0, 0, 0});
 800dd82:	f04f 0300 	mov.w	r3, #0
 800dd86:	623b      	str	r3, [r7, #32]
 800dd88:	f04f 0300 	mov.w	r3, #0
 800dd8c:	627b      	str	r3, [r7, #36]	; 0x24
 800dd8e:	f04f 0300 	mov.w	r3, #0
 800dd92:	62bb      	str	r3, [r7, #40]	; 0x28
 800dd94:	f107 0320 	add.w	r3, r7, #32
 800dd98:	4619      	mov	r1, r3
 800dd9a:	4834      	ldr	r0, [pc, #208]	; (800de6c <_Z41__static_initialization_and_destruction_0ii+0x150>)
 800dd9c:	f7ff fb64 	bl	800d468 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
Mat::Matrix<3, 1> GyroRaw({0, 0, 0});
 800dda0:	f04f 0300 	mov.w	r3, #0
 800dda4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dda6:	f04f 0300 	mov.w	r3, #0
 800ddaa:	633b      	str	r3, [r7, #48]	; 0x30
 800ddac:	f04f 0300 	mov.w	r3, #0
 800ddb0:	637b      	str	r3, [r7, #52]	; 0x34
 800ddb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ddb6:	4619      	mov	r1, r3
 800ddb8:	482d      	ldr	r0, [pc, #180]	; (800de70 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 800ddba:	f7ff fb55 	bl	800d468 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
Mat::Matrix<3, 1> AccCal({0, 0, 0});
 800ddbe:	f04f 0300 	mov.w	r3, #0
 800ddc2:	63bb      	str	r3, [r7, #56]	; 0x38
 800ddc4:	f04f 0300 	mov.w	r3, #0
 800ddc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ddca:	f04f 0300 	mov.w	r3, #0
 800ddce:	643b      	str	r3, [r7, #64]	; 0x40
 800ddd0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ddd4:	4619      	mov	r1, r3
 800ddd6:	4827      	ldr	r0, [pc, #156]	; (800de74 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 800ddd8:	f7ff fb46 	bl	800d468 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
Mat::Matrix<3, 1> AccRaw({0, 0, 0});
 800dddc:	f04f 0300 	mov.w	r3, #0
 800dde0:	647b      	str	r3, [r7, #68]	; 0x44
 800dde2:	f04f 0300 	mov.w	r3, #0
 800dde6:	64bb      	str	r3, [r7, #72]	; 0x48
 800dde8:	f04f 0300 	mov.w	r3, #0
 800ddec:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ddee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ddf2:	4619      	mov	r1, r3
 800ddf4:	4820      	ldr	r0, [pc, #128]	; (800de78 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 800ddf6:	f7ff fb37 	bl	800d468 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
Mat::Matrix<3, 1> GyroRawMean({0, 0, 0});
 800ddfa:	f04f 0300 	mov.w	r3, #0
 800ddfe:	653b      	str	r3, [r7, #80]	; 0x50
 800de00:	f04f 0300 	mov.w	r3, #0
 800de04:	657b      	str	r3, [r7, #84]	; 0x54
 800de06:	f04f 0300 	mov.w	r3, #0
 800de0a:	65bb      	str	r3, [r7, #88]	; 0x58
 800de0c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800de10:	4619      	mov	r1, r3
 800de12:	481a      	ldr	r0, [pc, #104]	; (800de7c <_Z41__static_initialization_and_destruction_0ii+0x160>)
 800de14:	f7ff fb28 	bl	800d468 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
Mat::Matrix<3, 1> GyroCalMean({0, 0, 0});
 800de18:	f04f 0300 	mov.w	r3, #0
 800de1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800de1e:	f04f 0300 	mov.w	r3, #0
 800de22:	663b      	str	r3, [r7, #96]	; 0x60
 800de24:	f04f 0300 	mov.w	r3, #0
 800de28:	667b      	str	r3, [r7, #100]	; 0x64
 800de2a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800de2e:	4619      	mov	r1, r3
 800de30:	4813      	ldr	r0, [pc, #76]	; (800de80 <_Z41__static_initialization_and_destruction_0ii+0x164>)
 800de32:	f7ff fb19 	bl	800d468 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
Mat::Matrix<3, 1> angle = 0.0f;
 800de36:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800de84 <_Z41__static_initialization_and_destruction_0ii+0x168>
 800de3a:	4813      	ldr	r0, [pc, #76]	; (800de88 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 800de3c:	f7ff fb34 	bl	800d4a8 <_ZN3Mat6MatrixILt3ELt1EEC1Ef>
Mat::Matrix<3, 1> speed = 0.0f;
 800de40:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800de84 <_Z41__static_initialization_and_destruction_0ii+0x168>
 800de44:	4811      	ldr	r0, [pc, #68]	; (800de8c <_Z41__static_initialization_and_destruction_0ii+0x170>)
 800de46:	f7ff fb2f 	bl	800d4a8 <_ZN3Mat6MatrixILt3ELt1EEC1Ef>
Mat::Matrix<3, 1> meanMag = 0.0f;
 800de4a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800de84 <_Z41__static_initialization_and_destruction_0ii+0x168>
 800de4e:	4810      	ldr	r0, [pc, #64]	; (800de90 <_Z41__static_initialization_and_destruction_0ii+0x174>)
 800de50:	f7ff fb2a 	bl	800d4a8 <_ZN3Mat6MatrixILt3ELt1EEC1Ef>
}
 800de54:	bf00      	nop
 800de56:	3768      	adds	r7, #104	; 0x68
 800de58:	46bd      	mov	sp, r7
 800de5a:	bd80      	pop	{r7, pc}
 800de5c:	24004c94 	.word	0x24004c94
 800de60:	24004ef4 	.word	0x24004ef4
 800de64:	24004fa8 	.word	0x24004fa8
 800de68:	24004fb4 	.word	0x24004fb4
 800de6c:	24004fc0 	.word	0x24004fc0
 800de70:	24004fcc 	.word	0x24004fcc
 800de74:	24004fd8 	.word	0x24004fd8
 800de78:	24004fe4 	.word	0x24004fe4
 800de7c:	24004ff0 	.word	0x24004ff0
 800de80:	24004ffc 	.word	0x24004ffc
 800de84:	00000000 	.word	0x00000000
 800de88:	24005008 	.word	0x24005008
 800de8c:	24005014 	.word	0x24005014
 800de90:	24005020 	.word	0x24005020

0800de94 <_ZN10Algorithms20ExtendedKalmanFilterILt6ELt3ELt6EE4InitERKN3Mat8V_VectorILt6EEERKNS2_6MatrixILt6ELt6EEEf>:
	virtual void Init(const StateVec& state, const StateCovarianceMatrix& stateCovMatrix, float time)
 800de94:	b5b0      	push	{r4, r5, r7, lr}
 800de96:	b084      	sub	sp, #16
 800de98:	af00      	add	r7, sp, #0
 800de9a:	60f8      	str	r0, [r7, #12]
 800de9c:	60b9      	str	r1, [r7, #8]
 800de9e:	607a      	str	r2, [r7, #4]
 800dea0:	ed87 0a00 	vstr	s0, [r7]
		{_state = state;
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	68ba      	ldr	r2, [r7, #8]
 800dea8:	1d1c      	adds	r4, r3, #4
 800deaa:	4615      	mov	r5, r2
 800deac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800deae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800deb0:	e895 0003 	ldmia.w	r5, {r0, r1}
 800deb4:	e884 0003 	stmia.w	r4, {r0, r1}
		_stateCovMatrix = stateCovMatrix;
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	687a      	ldr	r2, [r7, #4]
 800debc:	331c      	adds	r3, #28
 800debe:	4611      	mov	r1, r2
 800dec0:	2290      	movs	r2, #144	; 0x90
 800dec2:	4618      	mov	r0, r3
 800dec4:	f00c fd25 	bl	801a912 <memcpy>
		_time = time;}
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	683a      	ldr	r2, [r7, #0]
 800decc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 800ded0:	bf00      	nop
 800ded2:	3710      	adds	r7, #16
 800ded4:	46bd      	mov	sp, r7
 800ded6:	bdb0      	pop	{r4, r5, r7, pc}

0800ded8 <_ZN10Algorithms20ExtendedKalmanFilterILt6ELt3ELt6EE7PredictERKN3Mat8V_VectorILt3EEERKNS2_6MatrixILt3ELt3EEEf>:
	StateCovarianceMatrix _stateCovMatrix;
	float _time;
};

template <u_short stateLen, u_short controlLen, u_short meassurementLen>
void ExtendedKalmanFilter<stateLen, controlLen, meassurementLen>::Predict(
 800ded8:	b5b0      	push	{r4, r5, r7, lr}
 800deda:	f5ad 7d5c 	sub.w	sp, sp, #880	; 0x370
 800dede:	af00      	add	r7, sp, #0
 800dee0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800dee4:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800dee8:	6018      	str	r0, [r3, #0]
 800deea:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800deee:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 800def2:	6019      	str	r1, [r3, #0]
 800def4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800def8:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 800defc:	601a      	str	r2, [r3, #0]
 800defe:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800df02:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800df06:	ed83 0a00 	vstr	s0, [r3]
		const ControlVec& controlVec,
		const ControlCovarianceMatrix& controlCov,
		float time)
{
	const StateCovarianceMatrix F = _F(controlVec, time);
 800df0a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800df0e:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	3310      	adds	r3, #16
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800df1e:	f5a2 7434 	sub.w	r4, r2, #720	; 0x2d0
 800df22:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800df26:	f5a2 7038 	sub.w	r0, r2, #736	; 0x2e0
 800df2a:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800df2e:	f5a2 7236 	sub.w	r2, r2, #728	; 0x2d8
 800df32:	f507 715c 	add.w	r1, r7, #880	; 0x370
 800df36:	f5a1 7135 	sub.w	r1, r1, #724	; 0x2d4
 800df3a:	ed90 0a00 	vldr	s0, [r0]
 800df3e:	6812      	ldr	r2, [r2, #0]
 800df40:	6809      	ldr	r1, [r1, #0]
 800df42:	4620      	mov	r0, r4
 800df44:	4798      	blx	r3
	_stateCovMatrix = F * _stateCovMatrix * F.Transposed() + _Q(controlVec, controlCov, time);
 800df46:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800df4a:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	f103 021c 	add.w	r2, r3, #28
 800df54:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800df58:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800df5c:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800df60:	4618      	mov	r0, r3
 800df62:	f000 f9a5 	bl	800e2b0 <_ZNK3Mat6MatrixILt6ELt6EEmlILt6EEENS0_ILt6EXT_EEERKS3_>
 800df66:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800df6a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800df6e:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800df72:	4611      	mov	r1, r2
 800df74:	4618      	mov	r0, r3
 800df76:	f000 f9ae 	bl	800e2d6 <_ZNK3Mat6MatrixILt6ELt6EE10TransposedEv>
 800df7a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800df7e:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800df82:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800df86:	f507 71e0 	add.w	r1, r7, #448	; 0x1c0
 800df8a:	4618      	mov	r0, r3
 800df8c:	f000 f990 	bl	800e2b0 <_ZNK3Mat6MatrixILt6ELt6EEmlILt6EEENS0_ILt6EXT_EEERKS3_>
 800df90:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800df94:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	3314      	adds	r3, #20
 800df9e:	681c      	ldr	r4, [r3, #0]
 800dfa0:	f507 7538 	add.w	r5, r7, #736	; 0x2e0
 800dfa4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800dfa8:	f5a3 7038 	sub.w	r0, r3, #736	; 0x2e0
 800dfac:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800dfb0:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 800dfb4:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800dfb8:	f5a2 7236 	sub.w	r2, r2, #728	; 0x2d8
 800dfbc:	f507 715c 	add.w	r1, r7, #880	; 0x370
 800dfc0:	f5a1 7135 	sub.w	r1, r1, #724	; 0x2d4
 800dfc4:	ed90 0a00 	vldr	s0, [r0]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	6812      	ldr	r2, [r2, #0]
 800dfcc:	6809      	ldr	r1, [r1, #0]
 800dfce:	4628      	mov	r0, r5
 800dfd0:	47a0      	blx	r4
 800dfd2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800dfd6:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800dfda:	681c      	ldr	r4, [r3, #0]
 800dfdc:	463b      	mov	r3, r7
 800dfde:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 800dfe2:	f507 7198 	add.w	r1, r7, #304	; 0x130
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	f000 f9a5 	bl	800e336 <_ZNK3Mat6MatrixILt6ELt6EEplERKS1_>
 800dfec:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800dff0:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 800dff4:	f104 031c 	add.w	r3, r4, #28
 800dff8:	4611      	mov	r1, r2
 800dffa:	2290      	movs	r2, #144	; 0x90
 800dffc:	4618      	mov	r0, r3
 800dffe:	f00c fc88 	bl	801a912 <memcpy>
	_state = _f(controlVec, time);
 800e002:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800e006:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	330c      	adds	r3, #12
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800e016:	f5a2 7235 	sub.w	r2, r2, #724	; 0x2d4
 800e01a:	6814      	ldr	r4, [r2, #0]
 800e01c:	463d      	mov	r5, r7
 800e01e:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800e022:	f5a2 7038 	sub.w	r0, r2, #736	; 0x2e0
 800e026:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800e02a:	f5a2 7236 	sub.w	r2, r2, #728	; 0x2d8
 800e02e:	f507 715c 	add.w	r1, r7, #880	; 0x370
 800e032:	f5a1 7135 	sub.w	r1, r1, #724	; 0x2d4
 800e036:	ed90 0a00 	vldr	s0, [r0]
 800e03a:	6812      	ldr	r2, [r2, #0]
 800e03c:	6809      	ldr	r1, [r1, #0]
 800e03e:	4628      	mov	r0, r5
 800e040:	4798      	blx	r3
 800e042:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800e046:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 800e04a:	3404      	adds	r4, #4
 800e04c:	461d      	mov	r5, r3
 800e04e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e050:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e052:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e056:	e884 0003 	stmia.w	r4, {r0, r1}
	_time = time;
 800e05a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800e05e:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800e068:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 800e06c:	6812      	ldr	r2, [r2, #0]
 800e06e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}
 800e072:	bf00      	nop
 800e074:	f507 775c 	add.w	r7, r7, #880	; 0x370
 800e078:	46bd      	mov	sp, r7
 800e07a:	bdb0      	pop	{r4, r5, r7, pc}

0800e07c <_ZN10Algorithms20ExtendedKalmanFilterILt6ELt3ELt6EE6UpdateERKN3Mat8V_VectorILt6EEERKNS2_6MatrixILt6ELt6EEEf>:

template <u_short stateLen, u_short controlLen, u_short meassurementLen>
void ExtendedKalmanFilter<stateLen, controlLen, meassurementLen>::Update(
 800e07c:	b5b0      	push	{r4, r5, r7, lr}
 800e07e:	f5ad 6df5 	sub.w	sp, sp, #1960	; 0x7a8
 800e082:	af00      	add	r7, sp, #0
 800e084:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800e088:	f2a3 730c 	subw	r3, r3, #1804	; 0x70c
 800e08c:	6018      	str	r0, [r3, #0]
 800e08e:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800e092:	f5a3 63e2 	sub.w	r3, r3, #1808	; 0x710
 800e096:	6019      	str	r1, [r3, #0]
 800e098:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800e09c:	f2a3 7314 	subw	r3, r3, #1812	; 0x714
 800e0a0:	601a      	str	r2, [r3, #0]
 800e0a2:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800e0a6:	f5a3 63e3 	sub.w	r3, r3, #1816	; 0x718
 800e0aa:	ed83 0a00 	vstr	s0, [r3]
		const MeassurementVec& meassurementVec,
		const MeasurementCovarianceMatrix& meassurementCov,
		float time)
{
	auto H = _H();
 800e0ae:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800e0b2:	f2a3 730c 	subw	r3, r3, #1804	; 0x70c
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	331c      	adds	r3, #28
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	f507 62f5 	add.w	r2, r7, #1960	; 0x7a8
 800e0c2:	f5a2 60bd 	sub.w	r0, r2, #1512	; 0x5e8
 800e0c6:	f507 62f5 	add.w	r2, r7, #1960	; 0x7a8
 800e0ca:	f2a2 720c 	subw	r2, r2, #1804	; 0x70c
 800e0ce:	6811      	ldr	r1, [r2, #0]
 800e0d0:	4798      	blx	r3
	auto S = H * _stateCovMatrix * H.Transposed() + meassurementCov;
 800e0d2:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800e0d6:	f2a3 730c 	subw	r3, r3, #1804	; 0x70c
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	f103 021c 	add.w	r2, r3, #28
 800e0e0:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800e0e4:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 800e0e8:	f507 71e0 	add.w	r1, r7, #448	; 0x1c0
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	f000 f8df 	bl	800e2b0 <_ZNK3Mat6MatrixILt6ELt6EEmlILt6EEENS0_ILt6EXT_EEERKS3_>
 800e0f2:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800e0f6:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 800e0fa:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 800e0fe:	4611      	mov	r1, r2
 800e100:	4618      	mov	r0, r3
 800e102:	f000 f8e8 	bl	800e2d6 <_ZNK3Mat6MatrixILt6ELt6EE10TransposedEv>
 800e106:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800e10a:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 800e10e:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800e112:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 800e116:	4618      	mov	r0, r3
 800e118:	f000 f8ca 	bl	800e2b0 <_ZNK3Mat6MatrixILt6ELt6EEmlILt6EEENS0_ILt6EXT_EEERKS3_>
 800e11c:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800e120:	f5a3 60cf 	sub.w	r0, r3, #1656	; 0x678
 800e124:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800e128:	f2a3 7314 	subw	r3, r3, #1812	; 0x714
 800e12c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800e130:	681a      	ldr	r2, [r3, #0]
 800e132:	f000 f900 	bl	800e336 <_ZNK3Mat6MatrixILt6ELt6EEplERKS1_>
	auto K = _stateCovMatrix * H.Transposed() *_InvertMatrix(S);
 800e136:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800e13a:	f2a3 730c 	subw	r3, r3, #1804	; 0x70c
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	f103 041c 	add.w	r4, r3, #28
 800e144:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800e148:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 800e14c:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 800e150:	4611      	mov	r1, r2
 800e152:	4618      	mov	r0, r3
 800e154:	f000 f8bf 	bl	800e2d6 <_ZNK3Mat6MatrixILt6ELt6EE10TransposedEv>
 800e158:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800e15c:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 800e160:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 800e164:	4621      	mov	r1, r4
 800e166:	4618      	mov	r0, r3
 800e168:	f000 f8a2 	bl	800e2b0 <_ZNK3Mat6MatrixILt6ELt6EEmlILt6EEENS0_ILt6EXT_EEERKS3_>
 800e16c:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800e170:	f2a3 730c 	subw	r3, r3, #1804	; 0x70c
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	3320      	adds	r3, #32
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	f507 62f5 	add.w	r2, r7, #1960	; 0x7a8
 800e180:	f5a2 7022 	sub.w	r0, r2, #648	; 0x288
 800e184:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e188:	f507 61f5 	add.w	r1, r7, #1960	; 0x7a8
 800e18c:	f2a1 710c 	subw	r1, r1, #1804	; 0x70c
 800e190:	6809      	ldr	r1, [r1, #0]
 800e192:	4798      	blx	r3
 800e194:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800e198:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 800e19c:	f507 62a4 	add.w	r2, r7, #1312	; 0x520
 800e1a0:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	f000 f883 	bl	800e2b0 <_ZNK3Mat6MatrixILt6ELt6EEmlILt6EEENS0_ILt6EXT_EEERKS3_>
	_state += K * (meassurementVec - _h());
 800e1aa:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800e1ae:	f2a3 730c 	subw	r3, r3, #1804	; 0x70c
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	1d1c      	adds	r4, r3, #4
 800e1b6:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800e1ba:	f5a3 63e2 	sub.w	r3, r3, #1808	; 0x710
 800e1be:	681d      	ldr	r5, [r3, #0]
 800e1c0:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800e1c4:	f2a3 730c 	subw	r3, r3, #1804	; 0x70c
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	3318      	adds	r3, #24
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	f507 62f5 	add.w	r2, r7, #1960	; 0x7a8
 800e1d4:	f5a2 70e4 	sub.w	r0, r2, #456	; 0x1c8
 800e1d8:	f507 62f5 	add.w	r2, r7, #1960	; 0x7a8
 800e1dc:	f2a2 720c 	subw	r2, r2, #1804	; 0x70c
 800e1e0:	6811      	ldr	r1, [r2, #0]
 800e1e2:	4798      	blx	r3
 800e1e4:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800e1e8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800e1ec:	f507 62bc 	add.w	r2, r7, #1504	; 0x5e0
 800e1f0:	4629      	mov	r1, r5
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	f000 f8b6 	bl	800e364 <_ZNK3Mat6MatrixILt6ELt1EEmiERKS1_>
 800e1f8:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800e1fc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800e200:	f507 62b9 	add.w	r2, r7, #1480	; 0x5c8
 800e204:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800e208:	4618      	mov	r0, r3
 800e20a:	f000 f8c4 	bl	800e396 <_ZNK3Mat6MatrixILt6ELt6EEmlILt1EEENS0_ILt6EXT_EEERKS3_>
 800e20e:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 800e212:	4619      	mov	r1, r3
 800e214:	4620      	mov	r0, r4
 800e216:	f000 f8d1 	bl	800e3bc <_ZN3Mat6MatrixILt6ELt1EEpLERKS1_>
	_stateCovMatrix = (Eye<stateLen>(1.0f) - K*H) * _stateCovMatrix;
 800e21a:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800e21e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800e222:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800e226:	4618      	mov	r0, r3
 800e228:	f000 f8fe 	bl	800e428 <_ZN3Mat3EyeILt6EEENS_6MatrixIXT_EXT_EEEf>
 800e22c:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 800e230:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 800e234:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800e238:	4618      	mov	r0, r3
 800e23a:	f000 f839 	bl	800e2b0 <_ZNK3Mat6MatrixILt6ELt6EEmlILt6EEENS0_ILt6EXT_EEERKS3_>
 800e23e:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800e242:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800e246:	f507 62e3 	add.w	r2, r7, #1816	; 0x718
 800e24a:	f507 61d1 	add.w	r1, r7, #1672	; 0x688
 800e24e:	4618      	mov	r0, r3
 800e250:	f000 f90e 	bl	800e470 <_ZNK3Mat6MatrixILt6ELt6EEmiERKS1_>
 800e254:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800e258:	f2a3 730c 	subw	r3, r3, #1804	; 0x70c
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	f103 021c 	add.w	r2, r3, #28
 800e262:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800e266:	f2a3 730c 	subw	r3, r3, #1804	; 0x70c
 800e26a:	681c      	ldr	r4, [r3, #0]
 800e26c:	463b      	mov	r3, r7
 800e26e:	f507 61bf 	add.w	r1, r7, #1528	; 0x5f8
 800e272:	4618      	mov	r0, r3
 800e274:	f000 f81c 	bl	800e2b0 <_ZNK3Mat6MatrixILt6ELt6EEmlILt6EEENS0_ILt6EXT_EEERKS3_>
 800e278:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800e27c:	f5a3 62f5 	sub.w	r2, r3, #1960	; 0x7a8
 800e280:	f104 031c 	add.w	r3, r4, #28
 800e284:	4611      	mov	r1, r2
 800e286:	2290      	movs	r2, #144	; 0x90
 800e288:	4618      	mov	r0, r3
 800e28a:	f00c fb42 	bl	801a912 <memcpy>
	_time = time;
 800e28e:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800e292:	f2a3 730c 	subw	r3, r3, #1804	; 0x70c
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	f507 62f5 	add.w	r2, r7, #1960	; 0x7a8
 800e29c:	f5a2 62e3 	sub.w	r2, r2, #1816	; 0x718
 800e2a0:	6812      	ldr	r2, [r2, #0]
 800e2a2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}
 800e2a6:	bf00      	nop
 800e2a8:	f507 67f5 	add.w	r7, r7, #1960	; 0x7a8
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	bdb0      	pop	{r4, r5, r7, pc}

0800e2b0 <_ZNK3Mat6MatrixILt6ELt6EEmlILt6EEENS0_ILt6EXT_EEERKS3_>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b084      	sub	sp, #16
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	60f8      	str	r0, [r7, #12]
 800e2b8:	60b9      	str	r1, [r7, #8]
 800e2ba:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 800e2bc:	68f8      	ldr	r0, [r7, #12]
 800e2be:	f7ff f857 	bl	800d370 <_ZN3Mat6MatrixILt6ELt6EEC1Ev>
	Multiply(other, result);
 800e2c2:	68fa      	ldr	r2, [r7, #12]
 800e2c4:	6879      	ldr	r1, [r7, #4]
 800e2c6:	68b8      	ldr	r0, [r7, #8]
 800e2c8:	f000 f8e9 	bl	800e49e <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERS3_>
	return result;
 800e2cc:	bf00      	nop
}
 800e2ce:	68f8      	ldr	r0, [r7, #12]
 800e2d0:	3710      	adds	r7, #16
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	bd80      	pop	{r7, pc}

0800e2d6 <_ZNK3Mat6MatrixILt6ELt6EE10TransposedEv>:
		result += (v * v);
	return sqrt(result);
}

template <u_short heigth, u_short width>
Matrix<width, heigth> Matrix<heigth, width>::Transposed() const
 800e2d6:	b590      	push	{r4, r7, lr}
 800e2d8:	b085      	sub	sp, #20
 800e2da:	af00      	add	r7, sp, #0
 800e2dc:	6078      	str	r0, [r7, #4]
 800e2de:	6039      	str	r1, [r7, #0]
{
	Matrix<width, heigth> result;
 800e2e0:	6878      	ldr	r0, [r7, #4]
 800e2e2:	f7ff f845 	bl	800d370 <_ZN3Mat6MatrixILt6ELt6EEC1Ev>
	for(u_short r = 0; r < width; ++r)
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	81fb      	strh	r3, [r7, #14]
 800e2ea:	e01c      	b.n	800e326 <_ZNK3Mat6MatrixILt6ELt6EE10TransposedEv+0x50>
		for(u_short c = 0; c < heigth; ++c)
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	81bb      	strh	r3, [r7, #12]
 800e2f0:	e013      	b.n	800e31a <_ZNK3Mat6MatrixILt6ELt6EE10TransposedEv+0x44>
			result(r, c) = operator()(c, r);
 800e2f2:	89ba      	ldrh	r2, [r7, #12]
 800e2f4:	89fb      	ldrh	r3, [r7, #14]
 800e2f6:	4619      	mov	r1, r3
 800e2f8:	6878      	ldr	r0, [r7, #4]
 800e2fa:	f000 f99a 	bl	800e632 <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 800e2fe:	4604      	mov	r4, r0
 800e300:	89fa      	ldrh	r2, [r7, #14]
 800e302:	89bb      	ldrh	r3, [r7, #12]
 800e304:	4619      	mov	r1, r3
 800e306:	6838      	ldr	r0, [r7, #0]
 800e308:	f000 f9ae 	bl	800e668 <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 800e30c:	eef0 7a40 	vmov.f32	s15, s0
 800e310:	edc4 7a00 	vstr	s15, [r4]
		for(u_short c = 0; c < heigth; ++c)
 800e314:	89bb      	ldrh	r3, [r7, #12]
 800e316:	3301      	adds	r3, #1
 800e318:	81bb      	strh	r3, [r7, #12]
 800e31a:	89bb      	ldrh	r3, [r7, #12]
 800e31c:	2b05      	cmp	r3, #5
 800e31e:	d9e8      	bls.n	800e2f2 <_ZNK3Mat6MatrixILt6ELt6EE10TransposedEv+0x1c>
	for(u_short r = 0; r < width; ++r)
 800e320:	89fb      	ldrh	r3, [r7, #14]
 800e322:	3301      	adds	r3, #1
 800e324:	81fb      	strh	r3, [r7, #14]
 800e326:	89fb      	ldrh	r3, [r7, #14]
 800e328:	2b05      	cmp	r3, #5
 800e32a:	d9df      	bls.n	800e2ec <_ZNK3Mat6MatrixILt6ELt6EE10TransposedEv+0x16>
	return result;
 800e32c:	bf00      	nop
}
 800e32e:	6878      	ldr	r0, [r7, #4]
 800e330:	3714      	adds	r7, #20
 800e332:	46bd      	mov	sp, r7
 800e334:	bd90      	pop	{r4, r7, pc}

0800e336 <_ZNK3Mat6MatrixILt6ELt6EEplERKS1_>:
inline Matrix<heigth, width> Matrix<heigth, width>::operator+(const Matrix<heigth, width> &other) const
 800e336:	b580      	push	{r7, lr}
 800e338:	b084      	sub	sp, #16
 800e33a:	af00      	add	r7, sp, #0
 800e33c:	60f8      	str	r0, [r7, #12]
 800e33e:	60b9      	str	r1, [r7, #8]
 800e340:	607a      	str	r2, [r7, #4]
    Matrix<heigth, width> result = *this;
 800e342:	68fa      	ldr	r2, [r7, #12]
 800e344:	68bb      	ldr	r3, [r7, #8]
 800e346:	4610      	mov	r0, r2
 800e348:	4619      	mov	r1, r3
 800e34a:	2390      	movs	r3, #144	; 0x90
 800e34c:	461a      	mov	r2, r3
 800e34e:	f00c fae0 	bl	801a912 <memcpy>
	result += other;
 800e352:	6879      	ldr	r1, [r7, #4]
 800e354:	68f8      	ldr	r0, [r7, #12]
 800e356:	f000 f9a6 	bl	800e6a6 <_ZN3Mat6MatrixILt6ELt6EEpLERKS1_>
	return result;
 800e35a:	bf00      	nop
}
 800e35c:	68f8      	ldr	r0, [r7, #12]
 800e35e:	3710      	adds	r7, #16
 800e360:	46bd      	mov	sp, r7
 800e362:	bd80      	pop	{r7, pc}

0800e364 <_ZNK3Mat6MatrixILt6ELt1EEmiERKS1_>:
inline Matrix<heigth, width> Matrix<heigth, width>::operator-(const Matrix<heigth, width> &other) const
 800e364:	b5b0      	push	{r4, r5, r7, lr}
 800e366:	b084      	sub	sp, #16
 800e368:	af00      	add	r7, sp, #0
 800e36a:	60f8      	str	r0, [r7, #12]
 800e36c:	60b9      	str	r1, [r7, #8]
 800e36e:	607a      	str	r2, [r7, #4]
    Matrix<heigth, width> result = *this;
 800e370:	68fa      	ldr	r2, [r7, #12]
 800e372:	68bb      	ldr	r3, [r7, #8]
 800e374:	4614      	mov	r4, r2
 800e376:	461d      	mov	r5, r3
 800e378:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e37a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e37c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e380:	e884 0003 	stmia.w	r4, {r0, r1}
	result -= other;
 800e384:	6879      	ldr	r1, [r7, #4]
 800e386:	68f8      	ldr	r0, [r7, #12]
 800e388:	f000 f9c2 	bl	800e710 <_ZN3Mat6MatrixILt6ELt1EEmIERKS1_>
	return result;
 800e38c:	bf00      	nop
}
 800e38e:	68f8      	ldr	r0, [r7, #12]
 800e390:	3710      	adds	r7, #16
 800e392:	46bd      	mov	sp, r7
 800e394:	bdb0      	pop	{r4, r5, r7, pc}

0800e396 <_ZNK3Mat6MatrixILt6ELt6EEmlILt1EEENS0_ILt6EXT_EEERKS3_>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 800e396:	b580      	push	{r7, lr}
 800e398:	b084      	sub	sp, #16
 800e39a:	af00      	add	r7, sp, #0
 800e39c:	60f8      	str	r0, [r7, #12]
 800e39e:	60b9      	str	r1, [r7, #8]
 800e3a0:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 800e3a2:	68f8      	ldr	r0, [r7, #12]
 800e3a4:	f7ff f96a 	bl	800d67c <_ZN3Mat6MatrixILt6ELt1EEC1Ev>
	Multiply(other, result);
 800e3a8:	68fa      	ldr	r2, [r7, #12]
 800e3aa:	6879      	ldr	r1, [r7, #4]
 800e3ac:	68b8      	ldr	r0, [r7, #8]
 800e3ae:	f000 f9e4 	bl	800e77a <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERS3_>
	return result;
 800e3b2:	bf00      	nop
}
 800e3b4:	68f8      	ldr	r0, [r7, #12]
 800e3b6:	3710      	adds	r7, #16
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	bd80      	pop	{r7, pc}

0800e3bc <_ZN3Mat6MatrixILt6ELt1EEpLERKS1_>:
inline Matrix<heigth, width> &Matrix<heigth, width>::operator+=(const Matrix<heigth, width> &other)
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	ed2d 8b02 	vpush	{d8}
 800e3c2:	b084      	sub	sp, #16
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
 800e3c8:	6039      	str	r1, [r7, #0]
    for(u_int i = 0; i < _values.size(); ++i) _values[i] += other._values[i];
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	60fb      	str	r3, [r7, #12]
 800e3ce:	e016      	b.n	800e3fe <_ZN3Mat6MatrixILt6ELt1EEpLERKS1_+0x42>
 800e3d0:	683b      	ldr	r3, [r7, #0]
 800e3d2:	68f9      	ldr	r1, [r7, #12]
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	f7ff faa4 	bl	800d922 <_ZNKSt5arrayIfLj6EEixEj>
 800e3da:	4603      	mov	r3, r0
 800e3dc:	ed93 8a00 	vldr	s16, [r3]
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	68f9      	ldr	r1, [r7, #12]
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	f000 fa87 	bl	800e8f8 <_ZNSt5arrayIfLj6EEixEj>
 800e3ea:	4603      	mov	r3, r0
 800e3ec:	edd3 7a00 	vldr	s15, [r3]
 800e3f0:	ee78 7a27 	vadd.f32	s15, s16, s15
 800e3f4:	edc3 7a00 	vstr	s15, [r3]
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	3301      	adds	r3, #1
 800e3fc:	60fb      	str	r3, [r7, #12]
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	4618      	mov	r0, r3
 800e402:	f000 fa6e 	bl	800e8e2 <_ZNKSt5arrayIfLj6EE4sizeEv>
 800e406:	4602      	mov	r2, r0
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	4293      	cmp	r3, r2
 800e40c:	bf34      	ite	cc
 800e40e:	2301      	movcc	r3, #1
 800e410:	2300      	movcs	r3, #0
 800e412:	b2db      	uxtb	r3, r3
 800e414:	2b00      	cmp	r3, #0
 800e416:	d1db      	bne.n	800e3d0 <_ZN3Mat6MatrixILt6ELt1EEpLERKS1_+0x14>
	return *this;
 800e418:	687b      	ldr	r3, [r7, #4]
}
 800e41a:	4618      	mov	r0, r3
 800e41c:	3710      	adds	r7, #16
 800e41e:	46bd      	mov	sp, r7
 800e420:	ecbd 8b02 	vpop	{d8}
 800e424:	bd80      	pop	{r7, pc}
	...

0800e428 <_ZN3Mat3EyeILt6EEENS_6MatrixIXT_EXT_EEEf>:
Matrix<size, size> Eye(float val = 1.0f)
 800e428:	b580      	push	{r7, lr}
 800e42a:	b084      	sub	sp, #16
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	6078      	str	r0, [r7, #4]
 800e430:	ed87 0a00 	vstr	s0, [r7]
	Matrix<size, size> result{0.0f};
 800e434:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800e46c <_ZN3Mat3EyeILt6EEENS_6MatrixIXT_EXT_EEEf+0x44>
 800e438:	6878      	ldr	r0, [r7, #4]
 800e43a:	f7fe ff40 	bl	800d2be <_ZN3Mat6MatrixILt6ELt6EEC1Ef>
	for(u_short i = 0; i < size; ++i)
 800e43e:	2300      	movs	r3, #0
 800e440:	81fb      	strh	r3, [r7, #14]
 800e442:	e00b      	b.n	800e45c <_ZN3Mat3EyeILt6EEENS_6MatrixIXT_EXT_EEEf+0x34>
		result(i, i) = val;
 800e444:	89fa      	ldrh	r2, [r7, #14]
 800e446:	89fb      	ldrh	r3, [r7, #14]
 800e448:	4619      	mov	r1, r3
 800e44a:	6878      	ldr	r0, [r7, #4]
 800e44c:	f000 f8f1 	bl	800e632 <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 800e450:	4602      	mov	r2, r0
 800e452:	683b      	ldr	r3, [r7, #0]
 800e454:	6013      	str	r3, [r2, #0]
	for(u_short i = 0; i < size; ++i)
 800e456:	89fb      	ldrh	r3, [r7, #14]
 800e458:	3301      	adds	r3, #1
 800e45a:	81fb      	strh	r3, [r7, #14]
 800e45c:	89fb      	ldrh	r3, [r7, #14]
 800e45e:	2b05      	cmp	r3, #5
 800e460:	d9f0      	bls.n	800e444 <_ZN3Mat3EyeILt6EEENS_6MatrixIXT_EXT_EEEf+0x1c>
	return result;
 800e462:	bf00      	nop
}
 800e464:	6878      	ldr	r0, [r7, #4]
 800e466:	3710      	adds	r7, #16
 800e468:	46bd      	mov	sp, r7
 800e46a:	bd80      	pop	{r7, pc}
 800e46c:	00000000 	.word	0x00000000

0800e470 <_ZNK3Mat6MatrixILt6ELt6EEmiERKS1_>:
inline Matrix<heigth, width> Matrix<heigth, width>::operator-(const Matrix<heigth, width> &other) const
 800e470:	b580      	push	{r7, lr}
 800e472:	b084      	sub	sp, #16
 800e474:	af00      	add	r7, sp, #0
 800e476:	60f8      	str	r0, [r7, #12]
 800e478:	60b9      	str	r1, [r7, #8]
 800e47a:	607a      	str	r2, [r7, #4]
    Matrix<heigth, width> result = *this;
 800e47c:	68fa      	ldr	r2, [r7, #12]
 800e47e:	68bb      	ldr	r3, [r7, #8]
 800e480:	4610      	mov	r0, r2
 800e482:	4619      	mov	r1, r3
 800e484:	2390      	movs	r3, #144	; 0x90
 800e486:	461a      	mov	r2, r3
 800e488:	f00c fa43 	bl	801a912 <memcpy>
	result -= other;
 800e48c:	6879      	ldr	r1, [r7, #4]
 800e48e:	68f8      	ldr	r0, [r7, #12]
 800e490:	f000 fa41 	bl	800e916 <_ZN3Mat6MatrixILt6ELt6EEmIERKS1_>
	return result;
 800e494:	bf00      	nop
}
 800e496:	68f8      	ldr	r0, [r7, #12]
 800e498:	3710      	adds	r7, #16
 800e49a:	46bd      	mov	sp, r7
 800e49c:	bd80      	pop	{r7, pc}

0800e49e <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERS3_>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 800e49e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4a0:	b0d1      	sub	sp, #324	; 0x144
 800e4a2:	af00      	add	r7, sp, #0
 800e4a4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e4a8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800e4ac:	6018      	str	r0, [r3, #0]
 800e4ae:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e4b2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800e4b6:	6019      	str	r1, [r3, #0]
 800e4b8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e4bc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800e4c0:	601a      	str	r2, [r3, #0]
	for(u_short row = 0; row < heigth; ++row)
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 800e4c8:	e030      	b.n	800e52c <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERS3_+0x8e>
		for(u_short col = 0; col < width; ++col)
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
 800e4d0:	e023      	b.n	800e51a <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERS3_+0x7c>
			this_rows[row][col] = this->operator()(row, col);
 800e4d2:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
 800e4d6:	f107 0314 	add.w	r3, r7, #20
 800e4da:	4611      	mov	r1, r2
 800e4dc:	4618      	mov	r0, r3
 800e4de:	f000 fa4f 	bl	800e980 <_ZNSt5arrayIS_IfLj6EELj6EEixEj>
 800e4e2:	4602      	mov	r2, r0
 800e4e4:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800e4e8:	4619      	mov	r1, r3
 800e4ea:	4610      	mov	r0, r2
 800e4ec:	f000 fa04 	bl	800e8f8 <_ZNSt5arrayIfLj6EEixEj>
 800e4f0:	4604      	mov	r4, r0
 800e4f2:	f8b7 213c 	ldrh.w	r2, [r7, #316]	; 0x13c
 800e4f6:	f8b7 113e 	ldrh.w	r1, [r7, #318]	; 0x13e
 800e4fa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e4fe:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800e502:	6818      	ldr	r0, [r3, #0]
 800e504:	f000 f8b0 	bl	800e668 <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 800e508:	eef0 7a40 	vmov.f32	s15, s0
 800e50c:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 800e510:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800e514:	3301      	adds	r3, #1
 800e516:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
 800e51a:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800e51e:	2b05      	cmp	r3, #5
 800e520:	d9d7      	bls.n	800e4d2 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERS3_+0x34>
	for(u_short row = 0; row < heigth; ++row)
 800e522:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 800e526:	3301      	adds	r3, #1
 800e528:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 800e52c:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 800e530:	2b05      	cmp	r3, #5
 800e532:	d9ca      	bls.n	800e4ca <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERS3_+0x2c>
	for(u_short col = 0; col < other_width; ++col)
 800e534:	2300      	movs	r3, #0
 800e536:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a
 800e53a:	e030      	b.n	800e59e <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERS3_+0x100>
		for(u_short row = 0; row < width; ++row)
 800e53c:	2300      	movs	r3, #0
 800e53e:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
 800e542:	e023      	b.n	800e58c <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERS3_+0xee>
			other_columns[col][row] = other(row, col);
 800e544:	f8b7 213a 	ldrh.w	r2, [r7, #314]	; 0x13a
 800e548:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e54c:	4611      	mov	r1, r2
 800e54e:	4618      	mov	r0, r3
 800e550:	f000 fa16 	bl	800e980 <_ZNSt5arrayIS_IfLj6EELj6EEixEj>
 800e554:	4602      	mov	r2, r0
 800e556:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 800e55a:	4619      	mov	r1, r3
 800e55c:	4610      	mov	r0, r2
 800e55e:	f000 f9cb 	bl	800e8f8 <_ZNSt5arrayIfLj6EEixEj>
 800e562:	4604      	mov	r4, r0
 800e564:	f8b7 213a 	ldrh.w	r2, [r7, #314]	; 0x13a
 800e568:	f8b7 1138 	ldrh.w	r1, [r7, #312]	; 0x138
 800e56c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e570:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800e574:	6818      	ldr	r0, [r3, #0]
 800e576:	f000 f877 	bl	800e668 <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 800e57a:	eef0 7a40 	vmov.f32	s15, s0
 800e57e:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 800e582:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 800e586:	3301      	adds	r3, #1
 800e588:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
 800e58c:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 800e590:	2b05      	cmp	r3, #5
 800e592:	d9d7      	bls.n	800e544 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERS3_+0xa6>
	for(u_short col = 0; col < other_width; ++col)
 800e594:	f8b7 313a 	ldrh.w	r3, [r7, #314]	; 0x13a
 800e598:	3301      	adds	r3, #1
 800e59a:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a
 800e59e:	f8b7 313a 	ldrh.w	r3, [r7, #314]	; 0x13a
 800e5a2:	2b05      	cmp	r3, #5
 800e5a4:	d9ca      	bls.n	800e53c <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERS3_+0x9e>
	for(u_short row = 0; row < heigth; ++row)
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 800e5ac:	e037      	b.n	800e61e <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERS3_+0x180>
		for(u_short col = 0; col < other_width; ++col)
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
 800e5b4:	e02a      	b.n	800e60c <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERS3_+0x16e>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 800e5b6:	f8b7 2136 	ldrh.w	r2, [r7, #310]	; 0x136
 800e5ba:	f107 0314 	add.w	r3, r7, #20
 800e5be:	4611      	mov	r1, r2
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	f000 f9dd 	bl	800e980 <_ZNSt5arrayIS_IfLj6EELj6EEixEj>
 800e5c6:	4605      	mov	r5, r0
 800e5c8:	f8b7 2134 	ldrh.w	r2, [r7, #308]	; 0x134
 800e5cc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e5d0:	4611      	mov	r1, r2
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	f000 f9d4 	bl	800e980 <_ZNSt5arrayIS_IfLj6EELj6EEixEj>
 800e5d8:	4606      	mov	r6, r0
 800e5da:	f8b7 2134 	ldrh.w	r2, [r7, #308]	; 0x134
 800e5de:	f8b7 1136 	ldrh.w	r1, [r7, #310]	; 0x136
 800e5e2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e5e6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800e5ea:	6818      	ldr	r0, [r3, #0]
 800e5ec:	f000 f821 	bl	800e632 <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 800e5f0:	4604      	mov	r4, r0
 800e5f2:	4631      	mov	r1, r6
 800e5f4:	4628      	mov	r0, r5
 800e5f6:	f000 f9d2 	bl	800e99e <_ZN3Mat13Multiply_rowsILj6EEEfRKSt5arrayIfXT_EES4_>
 800e5fa:	eef0 7a40 	vmov.f32	s15, s0
 800e5fe:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 800e602:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800e606:	3301      	adds	r3, #1
 800e608:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
 800e60c:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800e610:	2b05      	cmp	r3, #5
 800e612:	d9d0      	bls.n	800e5b6 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERS3_+0x118>
	for(u_short row = 0; row < heigth; ++row)
 800e614:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 800e618:	3301      	adds	r3, #1
 800e61a:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 800e61e:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 800e622:	2b05      	cmp	r3, #5
 800e624:	d9c3      	bls.n	800e5ae <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERS3_+0x110>
}
 800e626:	bf00      	nop
 800e628:	bf00      	nop
 800e62a:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800e62e:	46bd      	mov	sp, r7
 800e630:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e632 <_ZN3Mat6MatrixILt6ELt6EEclEtt>:
float& Matrix<heigth, width>::operator()(u_short row, u_short col)
 800e632:	b580      	push	{r7, lr}
 800e634:	b084      	sub	sp, #16
 800e636:	af00      	add	r7, sp, #0
 800e638:	6078      	str	r0, [r7, #4]
 800e63a:	460b      	mov	r3, r1
 800e63c:	807b      	strh	r3, [r7, #2]
 800e63e:	4613      	mov	r3, r2
 800e640:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 800e642:	887a      	ldrh	r2, [r7, #2]
 800e644:	4613      	mov	r3, r2
 800e646:	005b      	lsls	r3, r3, #1
 800e648:	4413      	add	r3, r2
 800e64a:	005b      	lsls	r3, r3, #1
 800e64c:	461a      	mov	r2, r3
 800e64e:	883b      	ldrh	r3, [r7, #0]
 800e650:	4413      	add	r3, r2
 800e652:	60fb      	str	r3, [r7, #12]
	return _values[index];
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	68f9      	ldr	r1, [r7, #12]
 800e658:	4618      	mov	r0, r3
 800e65a:	f000 f9d3 	bl	800ea04 <_ZNSt5arrayIfLj36EEixEj>
 800e65e:	4603      	mov	r3, r0
}
 800e660:	4618      	mov	r0, r3
 800e662:	3710      	adds	r7, #16
 800e664:	46bd      	mov	sp, r7
 800e666:	bd80      	pop	{r7, pc}

0800e668 <_ZNK3Mat6MatrixILt6ELt6EEclEtt>:
float Matrix<heigth, width>::operator()(u_short row, u_short col) const
 800e668:	b580      	push	{r7, lr}
 800e66a:	b084      	sub	sp, #16
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	6078      	str	r0, [r7, #4]
 800e670:	460b      	mov	r3, r1
 800e672:	807b      	strh	r3, [r7, #2]
 800e674:	4613      	mov	r3, r2
 800e676:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 800e678:	887a      	ldrh	r2, [r7, #2]
 800e67a:	4613      	mov	r3, r2
 800e67c:	005b      	lsls	r3, r3, #1
 800e67e:	4413      	add	r3, r2
 800e680:	005b      	lsls	r3, r3, #1
 800e682:	461a      	mov	r2, r3
 800e684:	883b      	ldrh	r3, [r7, #0]
 800e686:	4413      	add	r3, r2
 800e688:	60fb      	str	r3, [r7, #12]
	return _values[index];
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	68f9      	ldr	r1, [r7, #12]
 800e68e:	4618      	mov	r0, r3
 800e690:	f000 f9c7 	bl	800ea22 <_ZNKSt5arrayIfLj36EEixEj>
 800e694:	4603      	mov	r3, r0
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	ee07 3a90 	vmov	s15, r3
}
 800e69c:	eeb0 0a67 	vmov.f32	s0, s15
 800e6a0:	3710      	adds	r7, #16
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	bd80      	pop	{r7, pc}

0800e6a6 <_ZN3Mat6MatrixILt6ELt6EEpLERKS1_>:
inline Matrix<heigth, width> &Matrix<heigth, width>::operator+=(const Matrix<heigth, width> &other)
 800e6a6:	b580      	push	{r7, lr}
 800e6a8:	ed2d 8b02 	vpush	{d8}
 800e6ac:	b084      	sub	sp, #16
 800e6ae:	af00      	add	r7, sp, #0
 800e6b0:	6078      	str	r0, [r7, #4]
 800e6b2:	6039      	str	r1, [r7, #0]
    for(u_int i = 0; i < _values.size(); ++i) _values[i] += other._values[i];
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	60fb      	str	r3, [r7, #12]
 800e6b8:	e016      	b.n	800e6e8 <_ZN3Mat6MatrixILt6ELt6EEpLERKS1_+0x42>
 800e6ba:	683b      	ldr	r3, [r7, #0]
 800e6bc:	68f9      	ldr	r1, [r7, #12]
 800e6be:	4618      	mov	r0, r3
 800e6c0:	f000 f9af 	bl	800ea22 <_ZNKSt5arrayIfLj36EEixEj>
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	ed93 8a00 	vldr	s16, [r3]
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	68f9      	ldr	r1, [r7, #12]
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	f000 f998 	bl	800ea04 <_ZNSt5arrayIfLj36EEixEj>
 800e6d4:	4603      	mov	r3, r0
 800e6d6:	edd3 7a00 	vldr	s15, [r3]
 800e6da:	ee78 7a27 	vadd.f32	s15, s16, s15
 800e6de:	edc3 7a00 	vstr	s15, [r3]
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	3301      	adds	r3, #1
 800e6e6:	60fb      	str	r3, [r7, #12]
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	f000 f9a8 	bl	800ea40 <_ZNKSt5arrayIfLj36EE4sizeEv>
 800e6f0:	4602      	mov	r2, r0
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	4293      	cmp	r3, r2
 800e6f6:	bf34      	ite	cc
 800e6f8:	2301      	movcc	r3, #1
 800e6fa:	2300      	movcs	r3, #0
 800e6fc:	b2db      	uxtb	r3, r3
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d1db      	bne.n	800e6ba <_ZN3Mat6MatrixILt6ELt6EEpLERKS1_+0x14>
	return *this;
 800e702:	687b      	ldr	r3, [r7, #4]
}
 800e704:	4618      	mov	r0, r3
 800e706:	3710      	adds	r7, #16
 800e708:	46bd      	mov	sp, r7
 800e70a:	ecbd 8b02 	vpop	{d8}
 800e70e:	bd80      	pop	{r7, pc}

0800e710 <_ZN3Mat6MatrixILt6ELt1EEmIERKS1_>:
inline Matrix<heigth, width> &Matrix<heigth, width>::operator-=(const Matrix<heigth, width> &other)
 800e710:	b580      	push	{r7, lr}
 800e712:	ed2d 8b02 	vpush	{d8}
 800e716:	b084      	sub	sp, #16
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
 800e71c:	6039      	str	r1, [r7, #0]
    for(u_int i = 0; i < _values.size(); ++i) _values[i] -= other._values[i];
 800e71e:	2300      	movs	r3, #0
 800e720:	60fb      	str	r3, [r7, #12]
 800e722:	e016      	b.n	800e752 <_ZN3Mat6MatrixILt6ELt1EEmIERKS1_+0x42>
 800e724:	683b      	ldr	r3, [r7, #0]
 800e726:	68f9      	ldr	r1, [r7, #12]
 800e728:	4618      	mov	r0, r3
 800e72a:	f7ff f8fa 	bl	800d922 <_ZNKSt5arrayIfLj6EEixEj>
 800e72e:	4603      	mov	r3, r0
 800e730:	ed93 8a00 	vldr	s16, [r3]
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	68f9      	ldr	r1, [r7, #12]
 800e738:	4618      	mov	r0, r3
 800e73a:	f000 f8dd 	bl	800e8f8 <_ZNSt5arrayIfLj6EEixEj>
 800e73e:	4603      	mov	r3, r0
 800e740:	edd3 7a00 	vldr	s15, [r3]
 800e744:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800e748:	edc3 7a00 	vstr	s15, [r3]
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	3301      	adds	r3, #1
 800e750:	60fb      	str	r3, [r7, #12]
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	4618      	mov	r0, r3
 800e756:	f000 f8c4 	bl	800e8e2 <_ZNKSt5arrayIfLj6EE4sizeEv>
 800e75a:	4602      	mov	r2, r0
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	4293      	cmp	r3, r2
 800e760:	bf34      	ite	cc
 800e762:	2301      	movcc	r3, #1
 800e764:	2300      	movcs	r3, #0
 800e766:	b2db      	uxtb	r3, r3
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d1db      	bne.n	800e724 <_ZN3Mat6MatrixILt6ELt1EEmIERKS1_+0x14>
	return *this;
 800e76c:	687b      	ldr	r3, [r7, #4]
}
 800e76e:	4618      	mov	r0, r3
 800e770:	3710      	adds	r7, #16
 800e772:	46bd      	mov	sp, r7
 800e774:	ecbd 8b02 	vpop	{d8}
 800e778:	bd80      	pop	{r7, pc}

0800e77a <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERS3_>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 800e77a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e77c:	b0b3      	sub	sp, #204	; 0xcc
 800e77e:	af00      	add	r7, sp, #0
 800e780:	60f8      	str	r0, [r7, #12]
 800e782:	60b9      	str	r1, [r7, #8]
 800e784:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 800e786:	2300      	movs	r3, #0
 800e788:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 800e78c:	e02d      	b.n	800e7ea <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERS3_+0x70>
		for(u_short col = 0; col < width; ++col)
 800e78e:	2300      	movs	r3, #0
 800e790:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 800e794:	e020      	b.n	800e7d8 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERS3_+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 800e796:	f8b7 20c6 	ldrh.w	r2, [r7, #198]	; 0xc6
 800e79a:	f107 0314 	add.w	r3, r7, #20
 800e79e:	4611      	mov	r1, r2
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	f000 f8ed 	bl	800e980 <_ZNSt5arrayIS_IfLj6EELj6EEixEj>
 800e7a6:	4602      	mov	r2, r0
 800e7a8:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 800e7ac:	4619      	mov	r1, r3
 800e7ae:	4610      	mov	r0, r2
 800e7b0:	f000 f8a2 	bl	800e8f8 <_ZNSt5arrayIfLj6EEixEj>
 800e7b4:	4604      	mov	r4, r0
 800e7b6:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 800e7ba:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 800e7be:	4619      	mov	r1, r3
 800e7c0:	68f8      	ldr	r0, [r7, #12]
 800e7c2:	f7ff ff51 	bl	800e668 <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 800e7c6:	eef0 7a40 	vmov.f32	s15, s0
 800e7ca:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 800e7ce:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 800e7d2:	3301      	adds	r3, #1
 800e7d4:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 800e7d8:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 800e7dc:	2b05      	cmp	r3, #5
 800e7de:	d9da      	bls.n	800e796 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERS3_+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 800e7e0:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 800e7e4:	3301      	adds	r3, #1
 800e7e6:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 800e7ea:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 800e7ee:	2b05      	cmp	r3, #5
 800e7f0:	d9cd      	bls.n	800e78e <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERS3_+0x14>
	for(u_short col = 0; col < other_width; ++col)
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
 800e7f8:	e02d      	b.n	800e856 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERS3_+0xdc>
		for(u_short row = 0; row < width; ++row)
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
 800e800:	e020      	b.n	800e844 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERS3_+0xca>
			other_columns[col][row] = other(row, col);
 800e802:	f8b7 20c2 	ldrh.w	r2, [r7, #194]	; 0xc2
 800e806:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e80a:	4611      	mov	r1, r2
 800e80c:	4618      	mov	r0, r3
 800e80e:	f000 f922 	bl	800ea56 <_ZNSt5arrayIS_IfLj6EELj1EEixEj>
 800e812:	4602      	mov	r2, r0
 800e814:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 800e818:	4619      	mov	r1, r3
 800e81a:	4610      	mov	r0, r2
 800e81c:	f000 f86c 	bl	800e8f8 <_ZNSt5arrayIfLj6EEixEj>
 800e820:	4604      	mov	r4, r0
 800e822:	f8b7 20c2 	ldrh.w	r2, [r7, #194]	; 0xc2
 800e826:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 800e82a:	4619      	mov	r1, r3
 800e82c:	68b8      	ldr	r0, [r7, #8]
 800e82e:	f000 f921 	bl	800ea74 <_ZNK3Mat6MatrixILt6ELt1EEclEtt>
 800e832:	eef0 7a40 	vmov.f32	s15, s0
 800e836:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 800e83a:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 800e83e:	3301      	adds	r3, #1
 800e840:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
 800e844:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 800e848:	2b05      	cmp	r3, #5
 800e84a:	d9da      	bls.n	800e802 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERS3_+0x88>
	for(u_short col = 0; col < other_width; ++col)
 800e84c:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 800e850:	3301      	adds	r3, #1
 800e852:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
 800e856:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d0cd      	beq.n	800e7fa <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERS3_+0x80>
	for(u_short row = 0; row < heigth; ++row)
 800e85e:	2300      	movs	r3, #0
 800e860:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 800e864:	e034      	b.n	800e8d0 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERS3_+0x156>
		for(u_short col = 0; col < other_width; ++col)
 800e866:	2300      	movs	r3, #0
 800e868:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 800e86c:	e027      	b.n	800e8be <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERS3_+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 800e86e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e872:	f107 0314 	add.w	r3, r7, #20
 800e876:	4611      	mov	r1, r2
 800e878:	4618      	mov	r0, r3
 800e87a:	f000 f881 	bl	800e980 <_ZNSt5arrayIS_IfLj6EELj6EEixEj>
 800e87e:	4605      	mov	r5, r0
 800e880:	f8b7 20bc 	ldrh.w	r2, [r7, #188]	; 0xbc
 800e884:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e888:	4611      	mov	r1, r2
 800e88a:	4618      	mov	r0, r3
 800e88c:	f000 f8e3 	bl	800ea56 <_ZNSt5arrayIS_IfLj6EELj1EEixEj>
 800e890:	4606      	mov	r6, r0
 800e892:	f8b7 20bc 	ldrh.w	r2, [r7, #188]	; 0xbc
 800e896:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e89a:	4619      	mov	r1, r3
 800e89c:	6878      	ldr	r0, [r7, #4]
 800e89e:	f000 f903 	bl	800eaa8 <_ZN3Mat6MatrixILt6ELt1EEclEtt>
 800e8a2:	4604      	mov	r4, r0
 800e8a4:	4631      	mov	r1, r6
 800e8a6:	4628      	mov	r0, r5
 800e8a8:	f000 f879 	bl	800e99e <_ZN3Mat13Multiply_rowsILj6EEEfRKSt5arrayIfXT_EES4_>
 800e8ac:	eef0 7a40 	vmov.f32	s15, s0
 800e8b0:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 800e8b4:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800e8b8:	3301      	adds	r3, #1
 800e8ba:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 800e8be:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d0d3      	beq.n	800e86e <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERS3_+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 800e8c6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e8ca:	3301      	adds	r3, #1
 800e8cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 800e8d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e8d4:	2b05      	cmp	r3, #5
 800e8d6:	d9c6      	bls.n	800e866 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERS3_+0xec>
}
 800e8d8:	bf00      	nop
 800e8da:	bf00      	nop
 800e8dc:	37cc      	adds	r7, #204	; 0xcc
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e8e2 <_ZNKSt5arrayIfLj6EE4sizeEv>:
      size() const noexcept { return _Nm; }
 800e8e2:	b480      	push	{r7}
 800e8e4:	b083      	sub	sp, #12
 800e8e6:	af00      	add	r7, sp, #0
 800e8e8:	6078      	str	r0, [r7, #4]
 800e8ea:	2306      	movs	r3, #6
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	370c      	adds	r7, #12
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f6:	4770      	bx	lr

0800e8f8 <_ZNSt5arrayIfLj6EEixEj>:
      operator[](size_type __n) noexcept
 800e8f8:	b580      	push	{r7, lr}
 800e8fa:	b082      	sub	sp, #8
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
 800e900:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	6839      	ldr	r1, [r7, #0]
 800e906:	4618      	mov	r0, r3
 800e908:	f7ff f953 	bl	800dbb2 <_ZNSt14__array_traitsIfLj6EE6_S_refERA6_Kfj>
 800e90c:	4603      	mov	r3, r0
      }
 800e90e:	4618      	mov	r0, r3
 800e910:	3708      	adds	r7, #8
 800e912:	46bd      	mov	sp, r7
 800e914:	bd80      	pop	{r7, pc}

0800e916 <_ZN3Mat6MatrixILt6ELt6EEmIERKS1_>:
inline Matrix<heigth, width> &Matrix<heigth, width>::operator-=(const Matrix<heigth, width> &other)
 800e916:	b580      	push	{r7, lr}
 800e918:	ed2d 8b02 	vpush	{d8}
 800e91c:	b084      	sub	sp, #16
 800e91e:	af00      	add	r7, sp, #0
 800e920:	6078      	str	r0, [r7, #4]
 800e922:	6039      	str	r1, [r7, #0]
    for(u_int i = 0; i < _values.size(); ++i) _values[i] -= other._values[i];
 800e924:	2300      	movs	r3, #0
 800e926:	60fb      	str	r3, [r7, #12]
 800e928:	e016      	b.n	800e958 <_ZN3Mat6MatrixILt6ELt6EEmIERKS1_+0x42>
 800e92a:	683b      	ldr	r3, [r7, #0]
 800e92c:	68f9      	ldr	r1, [r7, #12]
 800e92e:	4618      	mov	r0, r3
 800e930:	f000 f877 	bl	800ea22 <_ZNKSt5arrayIfLj36EEixEj>
 800e934:	4603      	mov	r3, r0
 800e936:	ed93 8a00 	vldr	s16, [r3]
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	68f9      	ldr	r1, [r7, #12]
 800e93e:	4618      	mov	r0, r3
 800e940:	f000 f860 	bl	800ea04 <_ZNSt5arrayIfLj36EEixEj>
 800e944:	4603      	mov	r3, r0
 800e946:	edd3 7a00 	vldr	s15, [r3]
 800e94a:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800e94e:	edc3 7a00 	vstr	s15, [r3]
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	3301      	adds	r3, #1
 800e956:	60fb      	str	r3, [r7, #12]
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	4618      	mov	r0, r3
 800e95c:	f000 f870 	bl	800ea40 <_ZNKSt5arrayIfLj36EE4sizeEv>
 800e960:	4602      	mov	r2, r0
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	4293      	cmp	r3, r2
 800e966:	bf34      	ite	cc
 800e968:	2301      	movcc	r3, #1
 800e96a:	2300      	movcs	r3, #0
 800e96c:	b2db      	uxtb	r3, r3
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d1db      	bne.n	800e92a <_ZN3Mat6MatrixILt6ELt6EEmIERKS1_+0x14>
	return *this;
 800e972:	687b      	ldr	r3, [r7, #4]
}
 800e974:	4618      	mov	r0, r3
 800e976:	3710      	adds	r7, #16
 800e978:	46bd      	mov	sp, r7
 800e97a:	ecbd 8b02 	vpop	{d8}
 800e97e:	bd80      	pop	{r7, pc}

0800e980 <_ZNSt5arrayIS_IfLj6EELj6EEixEj>:
      operator[](size_type __n) noexcept
 800e980:	b580      	push	{r7, lr}
 800e982:	b082      	sub	sp, #8
 800e984:	af00      	add	r7, sp, #0
 800e986:	6078      	str	r0, [r7, #4]
 800e988:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	6839      	ldr	r1, [r7, #0]
 800e98e:	4618      	mov	r0, r3
 800e990:	f000 f8a0 	bl	800ead4 <_ZNSt14__array_traitsISt5arrayIfLj6EELj6EE6_S_refERA6_KS1_j>
 800e994:	4603      	mov	r3, r0
      }
 800e996:	4618      	mov	r0, r3
 800e998:	3708      	adds	r7, #8
 800e99a:	46bd      	mov	sp, r7
 800e99c:	bd80      	pop	{r7, pc}

0800e99e <_ZN3Mat13Multiply_rowsILj6EEEfRKSt5arrayIfXT_EES4_>:
float Multiply_rows(const std::array<float, length>& A, const std::array<float, length>& B)
 800e99e:	b580      	push	{r7, lr}
 800e9a0:	ed2d 8b02 	vpush	{d8}
 800e9a4:	b084      	sub	sp, #16
 800e9a6:	af00      	add	r7, sp, #0
 800e9a8:	6078      	str	r0, [r7, #4]
 800e9aa:	6039      	str	r1, [r7, #0]
    float result = 0.0f;
 800e9ac:	f04f 0300 	mov.w	r3, #0
 800e9b0:	60fb      	str	r3, [r7, #12]
	for(u_int i = 0; i < length; ++i) result += A[i]*B[i];
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	60bb      	str	r3, [r7, #8]
 800e9b6:	e018      	b.n	800e9ea <_ZN3Mat13Multiply_rowsILj6EEEfRKSt5arrayIfXT_EES4_+0x4c>
 800e9b8:	68b9      	ldr	r1, [r7, #8]
 800e9ba:	6878      	ldr	r0, [r7, #4]
 800e9bc:	f7fe ffb1 	bl	800d922 <_ZNKSt5arrayIfLj6EEixEj>
 800e9c0:	4603      	mov	r3, r0
 800e9c2:	ed93 8a00 	vldr	s16, [r3]
 800e9c6:	68b9      	ldr	r1, [r7, #8]
 800e9c8:	6838      	ldr	r0, [r7, #0]
 800e9ca:	f7fe ffaa 	bl	800d922 <_ZNKSt5arrayIfLj6EEixEj>
 800e9ce:	4603      	mov	r3, r0
 800e9d0:	edd3 7a00 	vldr	s15, [r3]
 800e9d4:	ee68 7a27 	vmul.f32	s15, s16, s15
 800e9d8:	ed97 7a03 	vldr	s14, [r7, #12]
 800e9dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e9e0:	edc7 7a03 	vstr	s15, [r7, #12]
 800e9e4:	68bb      	ldr	r3, [r7, #8]
 800e9e6:	3301      	adds	r3, #1
 800e9e8:	60bb      	str	r3, [r7, #8]
 800e9ea:	68bb      	ldr	r3, [r7, #8]
 800e9ec:	2b05      	cmp	r3, #5
 800e9ee:	d9e3      	bls.n	800e9b8 <_ZN3Mat13Multiply_rowsILj6EEEfRKSt5arrayIfXT_EES4_+0x1a>
	return result;
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	ee07 3a90 	vmov	s15, r3
}
 800e9f6:	eeb0 0a67 	vmov.f32	s0, s15
 800e9fa:	3710      	adds	r7, #16
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	ecbd 8b02 	vpop	{d8}
 800ea02:	bd80      	pop	{r7, pc}

0800ea04 <_ZNSt5arrayIfLj36EEixEj>:
      operator[](size_type __n) noexcept
 800ea04:	b580      	push	{r7, lr}
 800ea06:	b082      	sub	sp, #8
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	6078      	str	r0, [r7, #4]
 800ea0c:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	6839      	ldr	r1, [r7, #0]
 800ea12:	4618      	mov	r0, r3
 800ea14:	f000 f870 	bl	800eaf8 <_ZNSt14__array_traitsIfLj36EE6_S_refERA36_Kfj>
 800ea18:	4603      	mov	r3, r0
      }
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	3708      	adds	r7, #8
 800ea1e:	46bd      	mov	sp, r7
 800ea20:	bd80      	pop	{r7, pc}

0800ea22 <_ZNKSt5arrayIfLj36EEixEj>:
      operator[](size_type __n) const noexcept
 800ea22:	b580      	push	{r7, lr}
 800ea24:	b082      	sub	sp, #8
 800ea26:	af00      	add	r7, sp, #0
 800ea28:	6078      	str	r0, [r7, #4]
 800ea2a:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	6839      	ldr	r1, [r7, #0]
 800ea30:	4618      	mov	r0, r3
 800ea32:	f000 f861 	bl	800eaf8 <_ZNSt14__array_traitsIfLj36EE6_S_refERA36_Kfj>
 800ea36:	4603      	mov	r3, r0
      }
 800ea38:	4618      	mov	r0, r3
 800ea3a:	3708      	adds	r7, #8
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	bd80      	pop	{r7, pc}

0800ea40 <_ZNKSt5arrayIfLj36EE4sizeEv>:
      size() const noexcept { return _Nm; }
 800ea40:	b480      	push	{r7}
 800ea42:	b083      	sub	sp, #12
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
 800ea48:	2324      	movs	r3, #36	; 0x24
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	370c      	adds	r7, #12
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea54:	4770      	bx	lr

0800ea56 <_ZNSt5arrayIS_IfLj6EELj1EEixEj>:
      operator[](size_type __n) noexcept
 800ea56:	b580      	push	{r7, lr}
 800ea58:	b082      	sub	sp, #8
 800ea5a:	af00      	add	r7, sp, #0
 800ea5c:	6078      	str	r0, [r7, #4]
 800ea5e:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	6839      	ldr	r1, [r7, #0]
 800ea64:	4618      	mov	r0, r3
 800ea66:	f000 f856 	bl	800eb16 <_ZNSt14__array_traitsISt5arrayIfLj6EELj1EE6_S_refERA1_KS1_j>
 800ea6a:	4603      	mov	r3, r0
      }
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	3708      	adds	r7, #8
 800ea70:	46bd      	mov	sp, r7
 800ea72:	bd80      	pop	{r7, pc}

0800ea74 <_ZNK3Mat6MatrixILt6ELt1EEclEtt>:
float Matrix<heigth, width>::operator()(u_short row, u_short col) const
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b084      	sub	sp, #16
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
 800ea7c:	460b      	mov	r3, r1
 800ea7e:	807b      	strh	r3, [r7, #2]
 800ea80:	4613      	mov	r3, r2
 800ea82:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 800ea84:	887a      	ldrh	r2, [r7, #2]
 800ea86:	883b      	ldrh	r3, [r7, #0]
 800ea88:	4413      	add	r3, r2
 800ea8a:	60fb      	str	r3, [r7, #12]
	return _values[index];
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	68f9      	ldr	r1, [r7, #12]
 800ea90:	4618      	mov	r0, r3
 800ea92:	f7fe ff46 	bl	800d922 <_ZNKSt5arrayIfLj6EEixEj>
 800ea96:	4603      	mov	r3, r0
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	ee07 3a90 	vmov	s15, r3
}
 800ea9e:	eeb0 0a67 	vmov.f32	s0, s15
 800eaa2:	3710      	adds	r7, #16
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	bd80      	pop	{r7, pc}

0800eaa8 <_ZN3Mat6MatrixILt6ELt1EEclEtt>:
float& Matrix<heigth, width>::operator()(u_short row, u_short col)
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b084      	sub	sp, #16
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
 800eab0:	460b      	mov	r3, r1
 800eab2:	807b      	strh	r3, [r7, #2]
 800eab4:	4613      	mov	r3, r2
 800eab6:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 800eab8:	887a      	ldrh	r2, [r7, #2]
 800eaba:	883b      	ldrh	r3, [r7, #0]
 800eabc:	4413      	add	r3, r2
 800eabe:	60fb      	str	r3, [r7, #12]
	return _values[index];
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	68f9      	ldr	r1, [r7, #12]
 800eac4:	4618      	mov	r0, r3
 800eac6:	f7ff ff17 	bl	800e8f8 <_ZNSt5arrayIfLj6EEixEj>
 800eaca:	4603      	mov	r3, r0
}
 800eacc:	4618      	mov	r0, r3
 800eace:	3710      	adds	r7, #16
 800ead0:	46bd      	mov	sp, r7
 800ead2:	bd80      	pop	{r7, pc}

0800ead4 <_ZNSt14__array_traitsISt5arrayIfLj6EELj6EE6_S_refERA6_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800ead4:	b480      	push	{r7}
 800ead6:	b083      	sub	sp, #12
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
 800eadc:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800eade:	683a      	ldr	r2, [r7, #0]
 800eae0:	4613      	mov	r3, r2
 800eae2:	005b      	lsls	r3, r3, #1
 800eae4:	4413      	add	r3, r2
 800eae6:	00db      	lsls	r3, r3, #3
 800eae8:	687a      	ldr	r2, [r7, #4]
 800eaea:	4413      	add	r3, r2
 800eaec:	4618      	mov	r0, r3
 800eaee:	370c      	adds	r7, #12
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf6:	4770      	bx	lr

0800eaf8 <_ZNSt14__array_traitsIfLj36EE6_S_refERA36_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800eaf8:	b480      	push	{r7}
 800eafa:	b083      	sub	sp, #12
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
 800eb00:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800eb02:	683b      	ldr	r3, [r7, #0]
 800eb04:	009b      	lsls	r3, r3, #2
 800eb06:	687a      	ldr	r2, [r7, #4]
 800eb08:	4413      	add	r3, r2
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	370c      	adds	r7, #12
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb14:	4770      	bx	lr

0800eb16 <_ZNSt14__array_traitsISt5arrayIfLj6EELj1EE6_S_refERA1_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800eb16:	b480      	push	{r7}
 800eb18:	b083      	sub	sp, #12
 800eb1a:	af00      	add	r7, sp, #0
 800eb1c:	6078      	str	r0, [r7, #4]
 800eb1e:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800eb20:	683a      	ldr	r2, [r7, #0]
 800eb22:	4613      	mov	r3, r2
 800eb24:	005b      	lsls	r3, r3, #1
 800eb26:	4413      	add	r3, r2
 800eb28:	00db      	lsls	r3, r3, #3
 800eb2a:	687a      	ldr	r2, [r7, #4]
 800eb2c:	4413      	add	r3, r2
 800eb2e:	4618      	mov	r0, r3
 800eb30:	370c      	adds	r7, #12
 800eb32:	46bd      	mov	sp, r7
 800eb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb38:	4770      	bx	lr

0800eb3a <_GLOBAL__sub_I_Fusion>:
 800eb3a:	b580      	push	{r7, lr}
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800eb42:	2001      	movs	r0, #1
 800eb44:	f7ff f8ea 	bl	800dd1c <_Z41__static_initialization_and_destruction_0ii>
 800eb48:	bd80      	pop	{r7, pc}
	...

0800eb4c <_Z12CalibrateMagRKN3Mat6MatrixILt3ELt1EEE>:
const Matrix<3,3> GyroA({8.133f * DEG_2_RAD, 0.0, 0.0,
						0.0, 8.238f * DEG_2_RAD, 0.0,
						0.0, 0.0, 8.193f * DEG_2_RAD});
const Matrix<3, 1> GyroB({-0.045665, 0.047779, -0.005830});
Matrix<3, 1> CalibrateMag(const Matrix<3, 1>& MagVec)
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b08c      	sub	sp, #48	; 0x30
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6178      	str	r0, [r7, #20]
	return (MagA * (MagVec - MagB));
 800eb54:	4919      	ldr	r1, [pc, #100]	; (800ebbc <_Z12CalibrateMagRKN3Mat6MatrixILt3ELt1EEE+0x70>)
 800eb56:	6978      	ldr	r0, [r7, #20]
 800eb58:	f000 f8c1 	bl	800ecde <_ZNK3Mat6MatrixILt3ELt1EEmiERKS1_>
 800eb5c:	eef0 6a40 	vmov.f32	s13, s0
 800eb60:	eeb0 7a60 	vmov.f32	s14, s1
 800eb64:	eef0 7a41 	vmov.f32	s15, s2
 800eb68:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 800eb6c:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 800eb70:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 800eb74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eb78:	4619      	mov	r1, r3
 800eb7a:	4811      	ldr	r0, [pc, #68]	; (800ebc0 <_Z12CalibrateMagRKN3Mat6MatrixILt3ELt1EEE+0x74>)
 800eb7c:	f7fe fcc7 	bl	800d50e <_ZNK3Mat6MatrixILt3ELt3EEmlILt1EEENS0_ILt3EXT_EEERKS3_>
 800eb80:	eef0 6a40 	vmov.f32	s13, s0
 800eb84:	eeb0 7a60 	vmov.f32	s14, s1
 800eb88:	eef0 7a41 	vmov.f32	s15, s2
 800eb8c:	edc7 6a06 	vstr	s13, [r7, #24]
 800eb90:	ed87 7a07 	vstr	s14, [r7, #28]
 800eb94:	edc7 7a08 	vstr	s15, [r7, #32]
 800eb98:	69b9      	ldr	r1, [r7, #24]
 800eb9a:	69fa      	ldr	r2, [r7, #28]
 800eb9c:	6a3b      	ldr	r3, [r7, #32]
 800eb9e:	ee06 1a90 	vmov	s13, r1
 800eba2:	ee07 2a10 	vmov	s14, r2
 800eba6:	ee07 3a90 	vmov	s15, r3
}
 800ebaa:	eeb0 0a66 	vmov.f32	s0, s13
 800ebae:	eef0 0a47 	vmov.f32	s1, s14
 800ebb2:	eeb0 1a67 	vmov.f32	s2, s15
 800ebb6:	3730      	adds	r7, #48	; 0x30
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	bd80      	pop	{r7, pc}
 800ebbc:	24005058 	.word	0x24005058
 800ebc0:	24005034 	.word	0x24005034

0800ebc4 <_Z12CalibrateAccRKN3Mat6MatrixILt3ELt1EEE>:
Matrix<3, 1> CalibrateAcc(const Matrix<3, 1>& AccVec)
{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b08c      	sub	sp, #48	; 0x30
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6178      	str	r0, [r7, #20]
	return (AccA * (AccVec - AccB));
 800ebcc:	4919      	ldr	r1, [pc, #100]	; (800ec34 <_Z12CalibrateAccRKN3Mat6MatrixILt3ELt1EEE+0x70>)
 800ebce:	6978      	ldr	r0, [r7, #20]
 800ebd0:	f000 f885 	bl	800ecde <_ZNK3Mat6MatrixILt3ELt1EEmiERKS1_>
 800ebd4:	eef0 6a40 	vmov.f32	s13, s0
 800ebd8:	eeb0 7a60 	vmov.f32	s14, s1
 800ebdc:	eef0 7a41 	vmov.f32	s15, s2
 800ebe0:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 800ebe4:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 800ebe8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 800ebec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ebf0:	4619      	mov	r1, r3
 800ebf2:	4811      	ldr	r0, [pc, #68]	; (800ec38 <_Z12CalibrateAccRKN3Mat6MatrixILt3ELt1EEE+0x74>)
 800ebf4:	f7fe fc8b 	bl	800d50e <_ZNK3Mat6MatrixILt3ELt3EEmlILt1EEENS0_ILt3EXT_EEERKS3_>
 800ebf8:	eef0 6a40 	vmov.f32	s13, s0
 800ebfc:	eeb0 7a60 	vmov.f32	s14, s1
 800ec00:	eef0 7a41 	vmov.f32	s15, s2
 800ec04:	edc7 6a06 	vstr	s13, [r7, #24]
 800ec08:	ed87 7a07 	vstr	s14, [r7, #28]
 800ec0c:	edc7 7a08 	vstr	s15, [r7, #32]
 800ec10:	69b9      	ldr	r1, [r7, #24]
 800ec12:	69fa      	ldr	r2, [r7, #28]
 800ec14:	6a3b      	ldr	r3, [r7, #32]
 800ec16:	ee06 1a90 	vmov	s13, r1
 800ec1a:	ee07 2a10 	vmov	s14, r2
 800ec1e:	ee07 3a90 	vmov	s15, r3
}
 800ec22:	eeb0 0a66 	vmov.f32	s0, s13
 800ec26:	eef0 0a47 	vmov.f32	s1, s14
 800ec2a:	eeb0 1a67 	vmov.f32	s2, s15
 800ec2e:	3730      	adds	r7, #48	; 0x30
 800ec30:	46bd      	mov	sp, r7
 800ec32:	bd80      	pop	{r7, pc}
 800ec34:	24005088 	.word	0x24005088
 800ec38:	24005064 	.word	0x24005064

0800ec3c <_Z13CalibrateGyroRKN3Mat6MatrixILt3ELt1EEE>:

Matrix<3, 1> CalibrateGyro(const Matrix<3, 1>& GyroVec)
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b08c      	sub	sp, #48	; 0x30
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6178      	str	r0, [r7, #20]
	return (GyroA * (GyroVec - GyroB));
 800ec44:	4919      	ldr	r1, [pc, #100]	; (800ecac <_Z13CalibrateGyroRKN3Mat6MatrixILt3ELt1EEE+0x70>)
 800ec46:	6978      	ldr	r0, [r7, #20]
 800ec48:	f000 f849 	bl	800ecde <_ZNK3Mat6MatrixILt3ELt1EEmiERKS1_>
 800ec4c:	eef0 6a40 	vmov.f32	s13, s0
 800ec50:	eeb0 7a60 	vmov.f32	s14, s1
 800ec54:	eef0 7a41 	vmov.f32	s15, s2
 800ec58:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 800ec5c:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 800ec60:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 800ec64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ec68:	4619      	mov	r1, r3
 800ec6a:	4811      	ldr	r0, [pc, #68]	; (800ecb0 <_Z13CalibrateGyroRKN3Mat6MatrixILt3ELt1EEE+0x74>)
 800ec6c:	f7fe fc4f 	bl	800d50e <_ZNK3Mat6MatrixILt3ELt3EEmlILt1EEENS0_ILt3EXT_EEERKS3_>
 800ec70:	eef0 6a40 	vmov.f32	s13, s0
 800ec74:	eeb0 7a60 	vmov.f32	s14, s1
 800ec78:	eef0 7a41 	vmov.f32	s15, s2
 800ec7c:	edc7 6a06 	vstr	s13, [r7, #24]
 800ec80:	ed87 7a07 	vstr	s14, [r7, #28]
 800ec84:	edc7 7a08 	vstr	s15, [r7, #32]
 800ec88:	69b9      	ldr	r1, [r7, #24]
 800ec8a:	69fa      	ldr	r2, [r7, #28]
 800ec8c:	6a3b      	ldr	r3, [r7, #32]
 800ec8e:	ee06 1a90 	vmov	s13, r1
 800ec92:	ee07 2a10 	vmov	s14, r2
 800ec96:	ee07 3a90 	vmov	s15, r3
}
 800ec9a:	eeb0 0a66 	vmov.f32	s0, s13
 800ec9e:	eef0 0a47 	vmov.f32	s1, s14
 800eca2:	eeb0 1a67 	vmov.f32	s2, s15
 800eca6:	3730      	adds	r7, #48	; 0x30
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	bd80      	pop	{r7, pc}
 800ecac:	240050b8 	.word	0x240050b8
 800ecb0:	24005094 	.word	0x24005094

0800ecb4 <_ZN3Mat6MatrixILt3ELt3EEC1ERKSt5arrayIfLj9EE>:
Matrix<heigth, width>::Matrix(const std::array<float, heigth*width>& values): _values(values) {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 800ecb4:	b4b0      	push	{r4, r5, r7}
 800ecb6:	b083      	sub	sp, #12
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
 800ecbc:	6039      	str	r1, [r7, #0]
 800ecbe:	687a      	ldr	r2, [r7, #4]
 800ecc0:	683b      	ldr	r3, [r7, #0]
 800ecc2:	4614      	mov	r4, r2
 800ecc4:	461d      	mov	r5, r3
 800ecc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ecc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ecca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eccc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ecce:	682b      	ldr	r3, [r5, #0]
 800ecd0:	6023      	str	r3, [r4, #0]
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	370c      	adds	r7, #12
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	bcb0      	pop	{r4, r5, r7}
 800ecdc:	4770      	bx	lr

0800ecde <_ZNK3Mat6MatrixILt3ELt1EEmiERKS1_>:
inline Matrix<heigth, width> Matrix<heigth, width>::operator-(const Matrix<heigth, width> &other) const
 800ecde:	b580      	push	{r7, lr}
 800ece0:	b08c      	sub	sp, #48	; 0x30
 800ece2:	af00      	add	r7, sp, #0
 800ece4:	6178      	str	r0, [r7, #20]
 800ece6:	6139      	str	r1, [r7, #16]
    Matrix<heigth, width> result = *this;
 800ece8:	697a      	ldr	r2, [r7, #20]
 800ecea:	f107 0318 	add.w	r3, r7, #24
 800ecee:	ca07      	ldmia	r2, {r0, r1, r2}
 800ecf0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	result -= other;
 800ecf4:	f107 0318 	add.w	r3, r7, #24
 800ecf8:	6939      	ldr	r1, [r7, #16]
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	f000 f819 	bl	800ed32 <_ZN3Mat6MatrixILt3ELt1EEmIERKS1_>
	return result;
 800ed00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ed04:	f107 0218 	add.w	r2, r7, #24
 800ed08:	ca07      	ldmia	r2, {r0, r1, r2}
 800ed0a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ed0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ed10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed14:	ee06 1a90 	vmov	s13, r1
 800ed18:	ee07 2a10 	vmov	s14, r2
 800ed1c:	ee07 3a90 	vmov	s15, r3
}
 800ed20:	eeb0 0a66 	vmov.f32	s0, s13
 800ed24:	eef0 0a47 	vmov.f32	s1, s14
 800ed28:	eeb0 1a67 	vmov.f32	s2, s15
 800ed2c:	3730      	adds	r7, #48	; 0x30
 800ed2e:	46bd      	mov	sp, r7
 800ed30:	bd80      	pop	{r7, pc}

0800ed32 <_ZN3Mat6MatrixILt3ELt1EEmIERKS1_>:
inline Matrix<heigth, width> &Matrix<heigth, width>::operator-=(const Matrix<heigth, width> &other)
 800ed32:	b580      	push	{r7, lr}
 800ed34:	ed2d 8b02 	vpush	{d8}
 800ed38:	b084      	sub	sp, #16
 800ed3a:	af00      	add	r7, sp, #0
 800ed3c:	6078      	str	r0, [r7, #4]
 800ed3e:	6039      	str	r1, [r7, #0]
    for(u_int i = 0; i < _values.size(); ++i) _values[i] -= other._values[i];
 800ed40:	2300      	movs	r3, #0
 800ed42:	60fb      	str	r3, [r7, #12]
 800ed44:	e016      	b.n	800ed74 <_ZN3Mat6MatrixILt3ELt1EEmIERKS1_+0x42>
 800ed46:	683b      	ldr	r3, [r7, #0]
 800ed48:	68f9      	ldr	r1, [r7, #12]
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	f7fe ffc1 	bl	800dcd2 <_ZNKSt5arrayIfLj3EEixEj>
 800ed50:	4603      	mov	r3, r0
 800ed52:	ed93 8a00 	vldr	s16, [r3]
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	68f9      	ldr	r1, [r7, #12]
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	f7fe fd1e 	bl	800d79c <_ZNSt5arrayIfLj3EEixEj>
 800ed60:	4603      	mov	r3, r0
 800ed62:	edd3 7a00 	vldr	s15, [r3]
 800ed66:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800ed6a:	edc3 7a00 	vstr	s15, [r3]
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	3301      	adds	r3, #1
 800ed72:	60fb      	str	r3, [r7, #12]
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	4618      	mov	r0, r3
 800ed78:	f000 f810 	bl	800ed9c <_ZNKSt5arrayIfLj3EE4sizeEv>
 800ed7c:	4602      	mov	r2, r0
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	4293      	cmp	r3, r2
 800ed82:	bf34      	ite	cc
 800ed84:	2301      	movcc	r3, #1
 800ed86:	2300      	movcs	r3, #0
 800ed88:	b2db      	uxtb	r3, r3
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d1db      	bne.n	800ed46 <_ZN3Mat6MatrixILt3ELt1EEmIERKS1_+0x14>
	return *this;
 800ed8e:	687b      	ldr	r3, [r7, #4]
}
 800ed90:	4618      	mov	r0, r3
 800ed92:	3710      	adds	r7, #16
 800ed94:	46bd      	mov	sp, r7
 800ed96:	ecbd 8b02 	vpop	{d8}
 800ed9a:	bd80      	pop	{r7, pc}

0800ed9c <_ZNKSt5arrayIfLj3EE4sizeEv>:
      size() const noexcept { return _Nm; }
 800ed9c:	b480      	push	{r7}
 800ed9e:	b083      	sub	sp, #12
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
 800eda4:	2303      	movs	r3, #3
 800eda6:	4618      	mov	r0, r3
 800eda8:	370c      	adds	r7, #12
 800edaa:	46bd      	mov	sp, r7
 800edac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb0:	4770      	bx	lr
	...

0800edb4 <_Z41__static_initialization_and_destruction_0ii>:
 800edb4:	b5b0      	push	{r4, r5, r7, lr}
 800edb6:	b0a6      	sub	sp, #152	; 0x98
 800edb8:	af00      	add	r7, sp, #0
 800edba:	6078      	str	r0, [r7, #4]
 800edbc:	6039      	str	r1, [r7, #0]
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	2b01      	cmp	r3, #1
 800edc2:	d158      	bne.n	800ee76 <_Z41__static_initialization_and_destruction_0ii+0xc2>
 800edc4:	683b      	ldr	r3, [r7, #0]
 800edc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800edca:	4293      	cmp	r3, r2
 800edcc:	d153      	bne.n	800ee76 <_Z41__static_initialization_and_destruction_0ii+0xc2>
						0.0f, 0.0f, 0.13103f});
 800edce:	4b2c      	ldr	r3, [pc, #176]	; (800ee80 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 800edd0:	f107 0408 	add.w	r4, r7, #8
 800edd4:	461d      	mov	r5, r3
 800edd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800edd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800edda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eddc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800edde:	682b      	ldr	r3, [r5, #0]
 800ede0:	6023      	str	r3, [r4, #0]
 800ede2:	f107 0308 	add.w	r3, r7, #8
 800ede6:	4619      	mov	r1, r3
 800ede8:	4826      	ldr	r0, [pc, #152]	; (800ee84 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 800edea:	f7ff ff63 	bl	800ecb4 <_ZN3Mat6MatrixILt3ELt3EEC1ERKSt5arrayIfLj9EE>
const Matrix<3, 1> MagB({26.0f, 23.0f, -146.5f});
 800edee:	4a26      	ldr	r2, [pc, #152]	; (800ee88 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 800edf0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800edf4:	ca07      	ldmia	r2, {r0, r1, r2}
 800edf6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800edfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800edfe:	4619      	mov	r1, r3
 800ee00:	4822      	ldr	r0, [pc, #136]	; (800ee8c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 800ee02:	f7fe fb31 	bl	800d468 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
						-0.001166, 0.000580, 0.996647});
 800ee06:	4b22      	ldr	r3, [pc, #136]	; (800ee90 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 800ee08:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800ee0c:	461d      	mov	r5, r3
 800ee0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ee10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ee12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ee14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ee16:	682b      	ldr	r3, [r5, #0]
 800ee18:	6023      	str	r3, [r4, #0]
 800ee1a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ee1e:	4619      	mov	r1, r3
 800ee20:	481c      	ldr	r0, [pc, #112]	; (800ee94 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 800ee22:	f7ff ff47 	bl	800ecb4 <_ZN3Mat6MatrixILt3ELt3EEC1ERKSt5arrayIfLj9EE>
const Matrix<3, 1> AccB({0.349030, 0.113962, -0.205569});
 800ee26:	4a1c      	ldr	r2, [pc, #112]	; (800ee98 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 800ee28:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800ee2c:	ca07      	ldmia	r2, {r0, r1, r2}
 800ee2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ee32:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800ee36:	4619      	mov	r1, r3
 800ee38:	4818      	ldr	r0, [pc, #96]	; (800ee9c <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 800ee3a:	f7fe fb15 	bl	800d468 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
						0.0, 0.0, 8.193f * DEG_2_RAD});
 800ee3e:	4b18      	ldr	r3, [pc, #96]	; (800eea0 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 800ee40:	f107 0468 	add.w	r4, r7, #104	; 0x68
 800ee44:	461d      	mov	r5, r3
 800ee46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ee48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ee4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ee4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ee4e:	682b      	ldr	r3, [r5, #0]
 800ee50:	6023      	str	r3, [r4, #0]
 800ee52:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800ee56:	4619      	mov	r1, r3
 800ee58:	4812      	ldr	r0, [pc, #72]	; (800eea4 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 800ee5a:	f7ff ff2b 	bl	800ecb4 <_ZN3Mat6MatrixILt3ELt3EEC1ERKSt5arrayIfLj9EE>
const Matrix<3, 1> GyroB({-0.045665, 0.047779, -0.005830});
 800ee5e:	4a12      	ldr	r2, [pc, #72]	; (800eea8 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 800ee60:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800ee64:	ca07      	ldmia	r2, {r0, r1, r2}
 800ee66:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ee6a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800ee6e:	4619      	mov	r1, r3
 800ee70:	480e      	ldr	r0, [pc, #56]	; (800eeac <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 800ee72:	f7fe faf9 	bl	800d468 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
}
 800ee76:	bf00      	nop
 800ee78:	3798      	adds	r7, #152	; 0x98
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	bdb0      	pop	{r4, r5, r7, pc}
 800ee7e:	bf00      	nop
 800ee80:	0801c804 	.word	0x0801c804
 800ee84:	24005034 	.word	0x24005034
 800ee88:	0801c828 	.word	0x0801c828
 800ee8c:	24005058 	.word	0x24005058
 800ee90:	0801c834 	.word	0x0801c834
 800ee94:	24005064 	.word	0x24005064
 800ee98:	0801c858 	.word	0x0801c858
 800ee9c:	24005088 	.word	0x24005088
 800eea0:	0801c864 	.word	0x0801c864
 800eea4:	24005094 	.word	0x24005094
 800eea8:	0801c888 	.word	0x0801c888
 800eeac:	240050b8 	.word	0x240050b8

0800eeb0 <_GLOBAL__sub_I__Z12CalibrateMagRKN3Mat6MatrixILt3ELt1EEE>:
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	af00      	add	r7, sp, #0
 800eeb4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800eeb8:	2001      	movs	r0, #1
 800eeba:	f7ff ff7b 	bl	800edb4 <_Z41__static_initialization_and_destruction_0ii>
 800eebe:	bd80      	pop	{r7, pc}

0800eec0 <_ZSt4asinf>:
  using ::asin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  asin(float __x)
  { return __builtin_asinf(__x); }
 800eec0:	b580      	push	{r7, lr}
 800eec2:	b082      	sub	sp, #8
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	ed87 0a01 	vstr	s0, [r7, #4]
 800eeca:	ed97 0a01 	vldr	s0, [r7, #4]
 800eece:	f00a faeb 	bl	80194a8 <asinf>
 800eed2:	eef0 7a40 	vmov.f32	s15, s0
 800eed6:	eeb0 0a67 	vmov.f32	s0, s15
 800eeda:	3708      	adds	r7, #8
 800eedc:	46bd      	mov	sp, r7
 800eede:	bd80      	pop	{r7, pc}

0800eee0 <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 800eee0:	b580      	push	{r7, lr}
 800eee2:	b082      	sub	sp, #8
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	ed87 0a01 	vstr	s0, [r7, #4]
 800eeea:	edc7 0a00 	vstr	s1, [r7]
 800eeee:	edd7 0a00 	vldr	s1, [r7]
 800eef2:	ed97 0a01 	vldr	s0, [r7, #4]
 800eef6:	f00a fb03 	bl	8019500 <atan2f>
 800eefa:	eef0 7a40 	vmov.f32	s15, s0
 800eefe:	eeb0 0a67 	vmov.f32	s0, s15
 800ef02:	3708      	adds	r7, #8
 800ef04:	46bd      	mov	sp, r7
 800ef06:	bd80      	pop	{r7, pc}

0800ef08 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b082      	sub	sp, #8
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	ed87 0a01 	vstr	s0, [r7, #4]
 800ef12:	ed97 0a01 	vldr	s0, [r7, #4]
 800ef16:	f00a fc0f 	bl	8019738 <cosf>
 800ef1a:	eef0 7a40 	vmov.f32	s15, s0
 800ef1e:	eeb0 0a67 	vmov.f32	s0, s15
 800ef22:	3708      	adds	r7, #8
 800ef24:	46bd      	mov	sp, r7
 800ef26:	bd80      	pop	{r7, pc}

0800ef28 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b082      	sub	sp, #8
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	ed87 0a01 	vstr	s0, [r7, #4]
 800ef32:	ed97 0a01 	vldr	s0, [r7, #4]
 800ef36:	f00a fb3b 	bl	80195b0 <sinf>
 800ef3a:	eef0 7a40 	vmov.f32	s15, s0
 800ef3e:	eeb0 0a67 	vmov.f32	s0, s15
 800ef42:	3708      	adds	r7, #8
 800ef44:	46bd      	mov	sp, r7
 800ef46:	bd80      	pop	{r7, pc}

0800ef48 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 800ef48:	b580      	push	{r7, lr}
 800ef4a:	b082      	sub	sp, #8
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	ed87 0a01 	vstr	s0, [r7, #4]
 800ef52:	ed97 0a01 	vldr	s0, [r7, #4]
 800ef56:	f00a fad5 	bl	8019504 <sqrtf>
 800ef5a:	eef0 7a40 	vmov.f32	s15, s0
 800ef5e:	eeb0 0a67 	vmov.f32	s0, s15
 800ef62:	3708      	adds	r7, #8
 800ef64:	46bd      	mov	sp, r7
 800ef66:	bd80      	pop	{r7, pc}

0800ef68 <_ZN10Algorithms3sgnEf>:

namespace Algorithms
{

float sgn(float val)
{
 800ef68:	b480      	push	{r7}
 800ef6a:	b083      	sub	sp, #12
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	ed87 0a01 	vstr	s0, [r7, #4]
	return ((0.0f < val) - (0.0f > val));
 800ef72:	edd7 7a01 	vldr	s15, [r7, #4]
 800ef76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ef7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef7e:	bfcc      	ite	gt
 800ef80:	2301      	movgt	r3, #1
 800ef82:	2300      	movle	r3, #0
 800ef84:	b2db      	uxtb	r3, r3
 800ef86:	461a      	mov	r2, r3
 800ef88:	edd7 7a01 	vldr	s15, [r7, #4]
 800ef8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ef90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef94:	bf4c      	ite	mi
 800ef96:	2301      	movmi	r3, #1
 800ef98:	2300      	movpl	r3, #0
 800ef9a:	b2db      	uxtb	r3, r3
 800ef9c:	1ad3      	subs	r3, r2, r3
 800ef9e:	ee07 3a90 	vmov	s15, r3
 800efa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800efa6:	eeb0 0a67 	vmov.f32	s0, s15
 800efaa:	370c      	adds	r7, #12
 800efac:	46bd      	mov	sp, r7
 800efae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb2:	4770      	bx	lr

0800efb4 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE>:

const Matrix<3, 3>& Inverse3_3Matrix(const Matrix<3, 3>& mat)
{
 800efb4:	b5b0      	push	{r4, r5, r7, lr}
 800efb6:	b096      	sub	sp, #88	; 0x58
 800efb8:	af00      	add	r7, sp, #0
 800efba:	6078      	str	r0, [r7, #4]
	static Matrix<3, 3> result;
 800efbc:	4bd2      	ldr	r3, [pc, #840]	; (800f308 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x354>)
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	f3bf 8f5b 	dmb	ish
 800efc4:	f003 0301 	and.w	r3, r3, #1
 800efc8:	2b00      	cmp	r3, #0
 800efca:	bf0c      	ite	eq
 800efcc:	2301      	moveq	r3, #1
 800efce:	2300      	movne	r3, #0
 800efd0:	b2db      	uxtb	r3, r3
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d010      	beq.n	800eff8 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x44>
 800efd6:	48cc      	ldr	r0, [pc, #816]	; (800f308 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x354>)
 800efd8:	f00a fa56 	bl	8019488 <__cxa_guard_acquire>
 800efdc:	4603      	mov	r3, r0
 800efde:	2b00      	cmp	r3, #0
 800efe0:	bf14      	ite	ne
 800efe2:	2301      	movne	r3, #1
 800efe4:	2300      	moveq	r3, #0
 800efe6:	b2db      	uxtb	r3, r3
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d005      	beq.n	800eff8 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x44>
 800efec:	48c7      	ldr	r0, [pc, #796]	; (800f30c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x358>)
 800efee:	f7fe f9f3 	bl	800d3d8 <_ZN3Mat6MatrixILt3ELt3EEC1Ev>
 800eff2:	48c5      	ldr	r0, [pc, #788]	; (800f308 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x354>)
 800eff4:	f00a fa54 	bl	80194a0 <__cxa_guard_release>
	static float a_1_1, a_1_2, a_1_3, a_2_1, a_2_2, a_2_3, a_3_1, a_3_2, a_3_3;
	a_1_1 = mat(0,0); a_1_2 = mat(0,1); a_1_3 = mat(0,2);
 800eff8:	2200      	movs	r2, #0
 800effa:	2100      	movs	r1, #0
 800effc:	6878      	ldr	r0, [r7, #4]
 800effe:	f7fe fd5f 	bl	800dac0 <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 800f002:	eef0 7a40 	vmov.f32	s15, s0
 800f006:	4bc2      	ldr	r3, [pc, #776]	; (800f310 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x35c>)
 800f008:	edc3 7a00 	vstr	s15, [r3]
 800f00c:	2201      	movs	r2, #1
 800f00e:	2100      	movs	r1, #0
 800f010:	6878      	ldr	r0, [r7, #4]
 800f012:	f7fe fd55 	bl	800dac0 <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 800f016:	eef0 7a40 	vmov.f32	s15, s0
 800f01a:	4bbe      	ldr	r3, [pc, #760]	; (800f314 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x360>)
 800f01c:	edc3 7a00 	vstr	s15, [r3]
 800f020:	2202      	movs	r2, #2
 800f022:	2100      	movs	r1, #0
 800f024:	6878      	ldr	r0, [r7, #4]
 800f026:	f7fe fd4b 	bl	800dac0 <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 800f02a:	eef0 7a40 	vmov.f32	s15, s0
 800f02e:	4bba      	ldr	r3, [pc, #744]	; (800f318 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x364>)
 800f030:	edc3 7a00 	vstr	s15, [r3]
	a_2_1 = mat(1,0); a_2_2 = mat(1,1); a_2_3 = mat(1,2);
 800f034:	2200      	movs	r2, #0
 800f036:	2101      	movs	r1, #1
 800f038:	6878      	ldr	r0, [r7, #4]
 800f03a:	f7fe fd41 	bl	800dac0 <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 800f03e:	eef0 7a40 	vmov.f32	s15, s0
 800f042:	4bb6      	ldr	r3, [pc, #728]	; (800f31c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x368>)
 800f044:	edc3 7a00 	vstr	s15, [r3]
 800f048:	2201      	movs	r2, #1
 800f04a:	2101      	movs	r1, #1
 800f04c:	6878      	ldr	r0, [r7, #4]
 800f04e:	f7fe fd37 	bl	800dac0 <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 800f052:	eef0 7a40 	vmov.f32	s15, s0
 800f056:	4bb2      	ldr	r3, [pc, #712]	; (800f320 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 800f058:	edc3 7a00 	vstr	s15, [r3]
 800f05c:	2202      	movs	r2, #2
 800f05e:	2101      	movs	r1, #1
 800f060:	6878      	ldr	r0, [r7, #4]
 800f062:	f7fe fd2d 	bl	800dac0 <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 800f066:	eef0 7a40 	vmov.f32	s15, s0
 800f06a:	4bae      	ldr	r3, [pc, #696]	; (800f324 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 800f06c:	edc3 7a00 	vstr	s15, [r3]
	a_3_1 = mat(2,0); a_3_2 = mat(2,1); a_3_3 = mat(2,2);
 800f070:	2200      	movs	r2, #0
 800f072:	2102      	movs	r1, #2
 800f074:	6878      	ldr	r0, [r7, #4]
 800f076:	f7fe fd23 	bl	800dac0 <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 800f07a:	eef0 7a40 	vmov.f32	s15, s0
 800f07e:	4baa      	ldr	r3, [pc, #680]	; (800f328 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 800f080:	edc3 7a00 	vstr	s15, [r3]
 800f084:	2201      	movs	r2, #1
 800f086:	2102      	movs	r1, #2
 800f088:	6878      	ldr	r0, [r7, #4]
 800f08a:	f7fe fd19 	bl	800dac0 <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 800f08e:	eef0 7a40 	vmov.f32	s15, s0
 800f092:	4ba6      	ldr	r3, [pc, #664]	; (800f32c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 800f094:	edc3 7a00 	vstr	s15, [r3]
 800f098:	2202      	movs	r2, #2
 800f09a:	2102      	movs	r1, #2
 800f09c:	6878      	ldr	r0, [r7, #4]
 800f09e:	f7fe fd0f 	bl	800dac0 <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 800f0a2:	eef0 7a40 	vmov.f32	s15, s0
 800f0a6:	4ba2      	ldr	r3, [pc, #648]	; (800f330 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 800f0a8:	edc3 7a00 	vstr	s15, [r3]
	float det = (a_1_1*a_2_2*a_3_3 - a_1_1*a_2_3*a_3_2 - a_1_2*a_2_1*a_3_3 + a_1_2*a_2_3*a_3_1 + a_1_3*a_2_1*a_3_2 - a_1_3*a_2_2*a_3_1);
 800f0ac:	4b98      	ldr	r3, [pc, #608]	; (800f310 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x35c>)
 800f0ae:	ed93 7a00 	vldr	s14, [r3]
 800f0b2:	4b9b      	ldr	r3, [pc, #620]	; (800f320 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 800f0b4:	edd3 7a00 	vldr	s15, [r3]
 800f0b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f0bc:	4b9c      	ldr	r3, [pc, #624]	; (800f330 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 800f0be:	edd3 7a00 	vldr	s15, [r3]
 800f0c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f0c6:	4b92      	ldr	r3, [pc, #584]	; (800f310 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x35c>)
 800f0c8:	edd3 6a00 	vldr	s13, [r3]
 800f0cc:	4b95      	ldr	r3, [pc, #596]	; (800f324 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 800f0ce:	edd3 7a00 	vldr	s15, [r3]
 800f0d2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800f0d6:	4b95      	ldr	r3, [pc, #596]	; (800f32c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 800f0d8:	edd3 7a00 	vldr	s15, [r3]
 800f0dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f0e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f0e4:	4b8b      	ldr	r3, [pc, #556]	; (800f314 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x360>)
 800f0e6:	edd3 6a00 	vldr	s13, [r3]
 800f0ea:	4b8c      	ldr	r3, [pc, #560]	; (800f31c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x368>)
 800f0ec:	edd3 7a00 	vldr	s15, [r3]
 800f0f0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800f0f4:	4b8e      	ldr	r3, [pc, #568]	; (800f330 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 800f0f6:	edd3 7a00 	vldr	s15, [r3]
 800f0fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f0fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f102:	4b84      	ldr	r3, [pc, #528]	; (800f314 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x360>)
 800f104:	edd3 6a00 	vldr	s13, [r3]
 800f108:	4b86      	ldr	r3, [pc, #536]	; (800f324 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 800f10a:	edd3 7a00 	vldr	s15, [r3]
 800f10e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800f112:	4b85      	ldr	r3, [pc, #532]	; (800f328 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 800f114:	edd3 7a00 	vldr	s15, [r3]
 800f118:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f11c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f120:	4b7d      	ldr	r3, [pc, #500]	; (800f318 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x364>)
 800f122:	edd3 6a00 	vldr	s13, [r3]
 800f126:	4b7d      	ldr	r3, [pc, #500]	; (800f31c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x368>)
 800f128:	edd3 7a00 	vldr	s15, [r3]
 800f12c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800f130:	4b7e      	ldr	r3, [pc, #504]	; (800f32c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 800f132:	edd3 7a00 	vldr	s15, [r3]
 800f136:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f13a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f13e:	4b76      	ldr	r3, [pc, #472]	; (800f318 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x364>)
 800f140:	edd3 6a00 	vldr	s13, [r3]
 800f144:	4b76      	ldr	r3, [pc, #472]	; (800f320 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 800f146:	edd3 7a00 	vldr	s15, [r3]
 800f14a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800f14e:	4b76      	ldr	r3, [pc, #472]	; (800f328 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 800f150:	edd3 7a00 	vldr	s15, [r3]
 800f154:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f158:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f15c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	float det1 = 1.0f / det;
 800f160:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f164:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800f168:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f16c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	result =
	{{
		(a_2_2*a_3_3 - a_2_3*a_3_2)*det1, -(a_1_2*a_3_3 - a_1_3*a_3_2)*det1,  (a_1_2*a_2_3 - a_1_3*a_2_2)*det1,
 800f170:	4b6b      	ldr	r3, [pc, #428]	; (800f320 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 800f172:	ed93 7a00 	vldr	s14, [r3]
 800f176:	4b6e      	ldr	r3, [pc, #440]	; (800f330 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 800f178:	edd3 7a00 	vldr	s15, [r3]
 800f17c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f180:	4b68      	ldr	r3, [pc, #416]	; (800f324 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 800f182:	edd3 6a00 	vldr	s13, [r3]
 800f186:	4b69      	ldr	r3, [pc, #420]	; (800f32c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 800f188:	edd3 7a00 	vldr	s15, [r3]
 800f18c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f190:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f194:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800f198:	ee67 7a27 	vmul.f32	s15, s14, s15
	result =
 800f19c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		(a_2_2*a_3_3 - a_2_3*a_3_2)*det1, -(a_1_2*a_3_3 - a_1_3*a_3_2)*det1,  (a_1_2*a_2_3 - a_1_3*a_2_2)*det1,
 800f1a0:	4b5c      	ldr	r3, [pc, #368]	; (800f314 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x360>)
 800f1a2:	ed93 7a00 	vldr	s14, [r3]
 800f1a6:	4b62      	ldr	r3, [pc, #392]	; (800f330 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 800f1a8:	edd3 7a00 	vldr	s15, [r3]
 800f1ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f1b0:	4b59      	ldr	r3, [pc, #356]	; (800f318 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x364>)
 800f1b2:	edd3 6a00 	vldr	s13, [r3]
 800f1b6:	4b5d      	ldr	r3, [pc, #372]	; (800f32c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 800f1b8:	edd3 7a00 	vldr	s15, [r3]
 800f1bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f1c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f1c4:	eeb1 7a67 	vneg.f32	s14, s15
 800f1c8:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800f1cc:	ee67 7a27 	vmul.f32	s15, s14, s15
	result =
 800f1d0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		(a_2_2*a_3_3 - a_2_3*a_3_2)*det1, -(a_1_2*a_3_3 - a_1_3*a_3_2)*det1,  (a_1_2*a_2_3 - a_1_3*a_2_2)*det1,
 800f1d4:	4b4f      	ldr	r3, [pc, #316]	; (800f314 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x360>)
 800f1d6:	ed93 7a00 	vldr	s14, [r3]
 800f1da:	4b52      	ldr	r3, [pc, #328]	; (800f324 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 800f1dc:	edd3 7a00 	vldr	s15, [r3]
 800f1e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f1e4:	4b4c      	ldr	r3, [pc, #304]	; (800f318 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x364>)
 800f1e6:	edd3 6a00 	vldr	s13, [r3]
 800f1ea:	4b4d      	ldr	r3, [pc, #308]	; (800f320 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 800f1ec:	edd3 7a00 	vldr	s15, [r3]
 800f1f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f1f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f1f8:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800f1fc:	ee67 7a27 	vmul.f32	s15, s14, s15
	result =
 800f200:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		-(a_2_1*a_3_3 - a_2_3*a_3_1)*det1,  (a_1_1*a_3_3 - a_1_3*a_3_1)*det1, -(a_1_1*a_2_3 - a_1_3*a_2_1)*det1,
 800f204:	4b45      	ldr	r3, [pc, #276]	; (800f31c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x368>)
 800f206:	ed93 7a00 	vldr	s14, [r3]
 800f20a:	4b49      	ldr	r3, [pc, #292]	; (800f330 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 800f20c:	edd3 7a00 	vldr	s15, [r3]
 800f210:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f214:	4b43      	ldr	r3, [pc, #268]	; (800f324 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 800f216:	edd3 6a00 	vldr	s13, [r3]
 800f21a:	4b43      	ldr	r3, [pc, #268]	; (800f328 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 800f21c:	edd3 7a00 	vldr	s15, [r3]
 800f220:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f224:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f228:	eeb1 7a67 	vneg.f32	s14, s15
 800f22c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800f230:	ee67 7a27 	vmul.f32	s15, s14, s15
	result =
 800f234:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		-(a_2_1*a_3_3 - a_2_3*a_3_1)*det1,  (a_1_1*a_3_3 - a_1_3*a_3_1)*det1, -(a_1_1*a_2_3 - a_1_3*a_2_1)*det1,
 800f238:	4b35      	ldr	r3, [pc, #212]	; (800f310 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x35c>)
 800f23a:	ed93 7a00 	vldr	s14, [r3]
 800f23e:	4b3c      	ldr	r3, [pc, #240]	; (800f330 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 800f240:	edd3 7a00 	vldr	s15, [r3]
 800f244:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f248:	4b33      	ldr	r3, [pc, #204]	; (800f318 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x364>)
 800f24a:	edd3 6a00 	vldr	s13, [r3]
 800f24e:	4b36      	ldr	r3, [pc, #216]	; (800f328 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 800f250:	edd3 7a00 	vldr	s15, [r3]
 800f254:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f258:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f25c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800f260:	ee67 7a27 	vmul.f32	s15, s14, s15
	result =
 800f264:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		-(a_2_1*a_3_3 - a_2_3*a_3_1)*det1,  (a_1_1*a_3_3 - a_1_3*a_3_1)*det1, -(a_1_1*a_2_3 - a_1_3*a_2_1)*det1,
 800f268:	4b29      	ldr	r3, [pc, #164]	; (800f310 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x35c>)
 800f26a:	ed93 7a00 	vldr	s14, [r3]
 800f26e:	4b2d      	ldr	r3, [pc, #180]	; (800f324 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 800f270:	edd3 7a00 	vldr	s15, [r3]
 800f274:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f278:	4b27      	ldr	r3, [pc, #156]	; (800f318 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x364>)
 800f27a:	edd3 6a00 	vldr	s13, [r3]
 800f27e:	4b27      	ldr	r3, [pc, #156]	; (800f31c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x368>)
 800f280:	edd3 7a00 	vldr	s15, [r3]
 800f284:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f288:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f28c:	eeb1 7a67 	vneg.f32	s14, s15
 800f290:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800f294:	ee67 7a27 	vmul.f32	s15, s14, s15
	result =
 800f298:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		(a_2_1*a_3_2 - a_2_2*a_3_1)*det1, -(a_1_1*a_3_2 - a_1_2*a_3_1)*det1,  (a_1_1*a_2_2 - a_1_2*a_2_1)*det1,
 800f29c:	4b1f      	ldr	r3, [pc, #124]	; (800f31c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x368>)
 800f29e:	ed93 7a00 	vldr	s14, [r3]
 800f2a2:	4b22      	ldr	r3, [pc, #136]	; (800f32c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 800f2a4:	edd3 7a00 	vldr	s15, [r3]
 800f2a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f2ac:	4b1c      	ldr	r3, [pc, #112]	; (800f320 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 800f2ae:	edd3 6a00 	vldr	s13, [r3]
 800f2b2:	4b1d      	ldr	r3, [pc, #116]	; (800f328 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 800f2b4:	edd3 7a00 	vldr	s15, [r3]
 800f2b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f2bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f2c0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800f2c4:	ee67 7a27 	vmul.f32	s15, s14, s15
	result =
 800f2c8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		(a_2_1*a_3_2 - a_2_2*a_3_1)*det1, -(a_1_1*a_3_2 - a_1_2*a_3_1)*det1,  (a_1_1*a_2_2 - a_1_2*a_2_1)*det1,
 800f2cc:	4b10      	ldr	r3, [pc, #64]	; (800f310 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x35c>)
 800f2ce:	ed93 7a00 	vldr	s14, [r3]
 800f2d2:	4b16      	ldr	r3, [pc, #88]	; (800f32c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 800f2d4:	edd3 7a00 	vldr	s15, [r3]
 800f2d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f2dc:	4b0d      	ldr	r3, [pc, #52]	; (800f314 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x360>)
 800f2de:	edd3 6a00 	vldr	s13, [r3]
 800f2e2:	4b11      	ldr	r3, [pc, #68]	; (800f328 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 800f2e4:	edd3 7a00 	vldr	s15, [r3]
 800f2e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f2ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f2f0:	eeb1 7a67 	vneg.f32	s14, s15
 800f2f4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800f2f8:	ee67 7a27 	vmul.f32	s15, s14, s15
	result =
 800f2fc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		(a_2_1*a_3_2 - a_2_2*a_3_1)*det1, -(a_1_1*a_3_2 - a_1_2*a_3_1)*det1,  (a_1_1*a_2_2 - a_1_2*a_2_1)*det1,
 800f300:	4b03      	ldr	r3, [pc, #12]	; (800f310 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x35c>)
 800f302:	ed93 7a00 	vldr	s14, [r3]
 800f306:	e015      	b.n	800f334 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x380>
 800f308:	240050e8 	.word	0x240050e8
 800f30c:	240050c4 	.word	0x240050c4
 800f310:	240050ec 	.word	0x240050ec
 800f314:	240050f0 	.word	0x240050f0
 800f318:	240050f4 	.word	0x240050f4
 800f31c:	240050f8 	.word	0x240050f8
 800f320:	240050fc 	.word	0x240050fc
 800f324:	24005100 	.word	0x24005100
 800f328:	24005104 	.word	0x24005104
 800f32c:	24005108 	.word	0x24005108
 800f330:	2400510c 	.word	0x2400510c
 800f334:	4b15      	ldr	r3, [pc, #84]	; (800f38c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x3d8>)
 800f336:	edd3 7a00 	vldr	s15, [r3]
 800f33a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f33e:	4b14      	ldr	r3, [pc, #80]	; (800f390 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x3dc>)
 800f340:	edd3 6a00 	vldr	s13, [r3]
 800f344:	4b13      	ldr	r3, [pc, #76]	; (800f394 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x3e0>)
 800f346:	edd3 7a00 	vldr	s15, [r3]
 800f34a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f34e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f352:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800f356:	ee67 7a27 	vmul.f32	s15, s14, s15
	result =
 800f35a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
 800f35e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800f362:	f107 0308 	add.w	r3, r7, #8
 800f366:	4611      	mov	r1, r2
 800f368:	4618      	mov	r0, r3
 800f36a:	f7ff fca3 	bl	800ecb4 <_ZN3Mat6MatrixILt3ELt3EEC1ERKSt5arrayIfLj9EE>
 800f36e:	4b0a      	ldr	r3, [pc, #40]	; (800f398 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x3e4>)
 800f370:	461d      	mov	r5, r3
 800f372:	f107 0408 	add.w	r4, r7, #8
 800f376:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f378:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f37a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f37c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f37e:	6823      	ldr	r3, [r4, #0]
 800f380:	602b      	str	r3, [r5, #0]
	}};
	return result;
 800f382:	4b05      	ldr	r3, [pc, #20]	; (800f398 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x3e4>)
}
 800f384:	4618      	mov	r0, r3
 800f386:	3758      	adds	r7, #88	; 0x58
 800f388:	46bd      	mov	sp, r7
 800f38a:	bdb0      	pop	{r4, r5, r7, pc}
 800f38c:	240050fc 	.word	0x240050fc
 800f390:	240050f0 	.word	0x240050f0
 800f394:	240050f8 	.word	0x240050f8
 800f398:	240050c4 	.word	0x240050c4

0800f39c <_ZNK10Algorithms10AHRSKalman8GetStateEv>:

const Quaternion& AHRSKalman::GetState() const
{
 800f39c:	b480      	push	{r7}
 800f39e:	b083      	sub	sp, #12
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	6078      	str	r0, [r7, #4]
	return _X;
 800f3a4:	687b      	ldr	r3, [r7, #4]
}
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	370c      	adds	r7, #12
 800f3aa:	46bd      	mov	sp, r7
 800f3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b0:	4770      	bx	lr

0800f3b2 <_ZNK10Algorithms10AHRSKalman18GetNoiseCovarianceEv>:

const Matrix<4,4>& AHRSKalman::GetNoiseCovariance() const
{
 800f3b2:	b480      	push	{r7}
 800f3b4:	b083      	sub	sp, #12
 800f3b6:	af00      	add	r7, sp, #0
 800f3b8:	6078      	str	r0, [r7, #4]
	return _P;
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	3310      	adds	r3, #16
}
 800f3be:	4618      	mov	r0, r3
 800f3c0:	370c      	adds	r7, #12
 800f3c2:	46bd      	mov	sp, r7
 800f3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c8:	4770      	bx	lr

0800f3ca <_ZN10Algorithms10AHRSKalman16InitialiseKalmanERKN3Mat6MatrixILt3ELt1EEES5_f>:

void AHRSKalman::InitialiseKalman(const Matrix<3, 1>& acc, const Matrix<3, 1>& mag, float time)
{
 800f3ca:	b580      	push	{r7, lr}
 800f3cc:	ed2d 8b02 	vpush	{d8}
 800f3d0:	b094      	sub	sp, #80	; 0x50
 800f3d2:	af00      	add	r7, sp, #0
 800f3d4:	60f8      	str	r0, [r7, #12]
 800f3d6:	60b9      	str	r1, [r7, #8]
 800f3d8:	607a      	str	r2, [r7, #4]
 800f3da:	ed87 0a00 	vstr	s0, [r7]
	float ax{acc(0,0)}, ay{acc(1,0)}, az{acc(2,0)};
 800f3de:	2200      	movs	r2, #0
 800f3e0:	2100      	movs	r1, #0
 800f3e2:	68b8      	ldr	r0, [r7, #8]
 800f3e4:	f7fe fb98 	bl	800db18 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 800f3e8:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
 800f3ec:	2200      	movs	r2, #0
 800f3ee:	2101      	movs	r1, #1
 800f3f0:	68b8      	ldr	r0, [r7, #8]
 800f3f2:	f7fe fb91 	bl	800db18 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 800f3f6:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	2102      	movs	r1, #2
 800f3fe:	68b8      	ldr	r0, [r7, #8]
 800f400:	f7fe fb8a 	bl	800db18 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 800f404:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
	float mx{mag(0,0)}, my{mag(1,0)}, mz{mag(2,0)};
 800f408:	2200      	movs	r2, #0
 800f40a:	2100      	movs	r1, #0
 800f40c:	6878      	ldr	r0, [r7, #4]
 800f40e:	f7fe fb83 	bl	800db18 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 800f412:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
 800f416:	2200      	movs	r2, #0
 800f418:	2101      	movs	r1, #1
 800f41a:	6878      	ldr	r0, [r7, #4]
 800f41c:	f7fe fb7c 	bl	800db18 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 800f420:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
 800f424:	2200      	movs	r2, #0
 800f426:	2102      	movs	r1, #2
 800f428:	6878      	ldr	r0, [r7, #4]
 800f42a:	f7fe fb75 	bl	800db18 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 800f42e:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38

	float amx{ay*mz - az*my};
 800f432:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800f436:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800f43a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f43e:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800f442:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800f446:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f44a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f44e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float amy{az*mx - ax*mz};
 800f452:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800f456:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800f45a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f45e:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800f462:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800f466:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f46a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f46e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float amz{ax*my - ay*mx};
 800f472:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800f476:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800f47a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f47e:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800f482:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800f486:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f48a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f48e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	float amax{amy*az - amz*ay};
 800f492:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800f496:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800f49a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f49e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800f4a2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800f4a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f4aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f4ae:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float amay{amz*ax - amx*az};
 800f4b2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800f4b6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800f4ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f4be:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800f4c2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800f4c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f4ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f4ce:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float amaz{amx*ay - amy*ax};
 800f4d2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800f4d6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800f4da:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f4de:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800f4e2:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800f4e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f4ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f4ee:	edc7 7a08 	vstr	s15, [r7, #32]

	float ad = 1.0f / sqrt(ax*ax + ay*ay +az*az);
 800f4f2:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800f4f6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800f4fa:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800f4fe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f502:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f506:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800f50a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f50e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f512:	eeb0 0a67 	vmov.f32	s0, s15
 800f516:	f7ff fd17 	bl	800ef48 <_ZSt4sqrtf>
 800f51a:	eeb0 7a40 	vmov.f32	s14, s0
 800f51e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f522:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f526:	edc7 7a07 	vstr	s15, [r7, #28]
	ax *= ad; ay *= ad; az *= ad;
 800f52a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800f52e:	edd7 7a07 	vldr	s15, [r7, #28]
 800f532:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f536:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
 800f53a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800f53e:	edd7 7a07 	vldr	s15, [r7, #28]
 800f542:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f546:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
 800f54a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800f54e:	edd7 7a07 	vldr	s15, [r7, #28]
 800f552:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f556:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

	float amd = 1.0f / sqrt(amx*amx + amy*amy +amz*amz);
 800f55a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800f55e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800f562:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800f566:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f56a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f56e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800f572:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f576:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f57a:	eeb0 0a67 	vmov.f32	s0, s15
 800f57e:	f7ff fce3 	bl	800ef48 <_ZSt4sqrtf>
 800f582:	eeb0 7a40 	vmov.f32	s14, s0
 800f586:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f58a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f58e:	edc7 7a06 	vstr	s15, [r7, #24]
	amx *= amd; amy *= amd; amz *= amd;
 800f592:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800f596:	edd7 7a06 	vldr	s15, [r7, #24]
 800f59a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f59e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 800f5a2:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800f5a6:	edd7 7a06 	vldr	s15, [r7, #24]
 800f5aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f5ae:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 800f5b2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800f5b6:	edd7 7a06 	vldr	s15, [r7, #24]
 800f5ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f5be:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	float amad = 1.0f / sqrt(amax*amax + amay*amay +amaz*amaz);
 800f5c2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800f5c6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800f5ca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800f5ce:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f5d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f5d6:	edd7 7a08 	vldr	s15, [r7, #32]
 800f5da:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f5de:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f5e2:	eeb0 0a67 	vmov.f32	s0, s15
 800f5e6:	f7ff fcaf 	bl	800ef48 <_ZSt4sqrtf>
 800f5ea:	eeb0 7a40 	vmov.f32	s14, s0
 800f5ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f5f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f5f6:	edc7 7a05 	vstr	s15, [r7, #20]
	amax *= amad; amay *= amad; amaz *= amad;
 800f5fa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800f5fe:	edd7 7a05 	vldr	s15, [r7, #20]
 800f602:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f606:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800f60a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800f60e:	edd7 7a05 	vldr	s15, [r7, #20]
 800f612:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f616:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 800f61a:	ed97 7a08 	vldr	s14, [r7, #32]
 800f61e:	edd7 7a05 	vldr	s15, [r7, #20]
 800f622:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f626:	edc7 7a08 	vstr	s15, [r7, #32]

	_X.w = 0.5f * sqrt(amax + amy + az + 1.0f);
 800f62a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800f62e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800f632:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f636:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800f63a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f63e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f642:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f646:	eeb0 0a67 	vmov.f32	s0, s15
 800f64a:	f7ff fc7d 	bl	800ef48 <_ZSt4sqrtf>
 800f64e:	eef0 7a40 	vmov.f32	s15, s0
 800f652:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800f656:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	edc3 7a00 	vstr	s15, [r3]
	_X.x = 0.5f * sgn(amz - ay) * sqrt(amax - amy - az + 1.0f);
 800f660:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800f664:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800f668:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f66c:	eeb0 0a67 	vmov.f32	s0, s15
 800f670:	f7ff fc7a 	bl	800ef68 <_ZN10Algorithms3sgnEf>
 800f674:	eef0 7a40 	vmov.f32	s15, s0
 800f678:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800f67c:	ee27 8a87 	vmul.f32	s16, s15, s14
 800f680:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800f684:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800f688:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f68c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800f690:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f694:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f698:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f69c:	eeb0 0a67 	vmov.f32	s0, s15
 800f6a0:	f7ff fc52 	bl	800ef48 <_ZSt4sqrtf>
 800f6a4:	eef0 7a40 	vmov.f32	s15, s0
 800f6a8:	ee68 7a27 	vmul.f32	s15, s16, s15
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	edc3 7a01 	vstr	s15, [r3, #4]
	_X.y = 0.5f * sgn(ax - amaz) * sqrt(amy - amax - az + 1.0f);
 800f6b2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800f6b6:	edd7 7a08 	vldr	s15, [r7, #32]
 800f6ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f6be:	eeb0 0a67 	vmov.f32	s0, s15
 800f6c2:	f7ff fc51 	bl	800ef68 <_ZN10Algorithms3sgnEf>
 800f6c6:	eef0 7a40 	vmov.f32	s15, s0
 800f6ca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800f6ce:	ee27 8a87 	vmul.f32	s16, s15, s14
 800f6d2:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800f6d6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800f6da:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f6de:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800f6e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f6e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f6ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f6ee:	eeb0 0a67 	vmov.f32	s0, s15
 800f6f2:	f7ff fc29 	bl	800ef48 <_ZSt4sqrtf>
 800f6f6:	eef0 7a40 	vmov.f32	s15, s0
 800f6fa:	ee68 7a27 	vmul.f32	s15, s16, s15
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	edc3 7a02 	vstr	s15, [r3, #8]
	_X.z = 0.5f * sgn(amz - ay) * sqrt(az - amax - amy + 1.0f);
 800f704:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800f708:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800f70c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f710:	eeb0 0a67 	vmov.f32	s0, s15
 800f714:	f7ff fc28 	bl	800ef68 <_ZN10Algorithms3sgnEf>
 800f718:	eef0 7a40 	vmov.f32	s15, s0
 800f71c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800f720:	ee27 8a87 	vmul.f32	s16, s15, s14
 800f724:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800f728:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800f72c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f730:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800f734:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f738:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f73c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f740:	eeb0 0a67 	vmov.f32	s0, s15
 800f744:	f7ff fc00 	bl	800ef48 <_ZSt4sqrtf>
 800f748:	eef0 7a40 	vmov.f32	s15, s0
 800f74c:	ee68 7a27 	vmul.f32	s15, s16, s15
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	edc3 7a03 	vstr	s15, [r3, #12]
	_lastUpdateTime = time;
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	683a      	ldr	r2, [r7, #0]
 800f75a:	651a      	str	r2, [r3, #80]	; 0x50
	_lastCorrectionTime = time;
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	683a      	ldr	r2, [r7, #0]
 800f760:	655a      	str	r2, [r3, #84]	; 0x54
}
 800f762:	bf00      	nop
 800f764:	3750      	adds	r7, #80	; 0x50
 800f766:	46bd      	mov	sp, r7
 800f768:	ecbd 8b02 	vpop	{d8}
 800f76c:	bd80      	pop	{r7, pc}
	...

0800f770 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf>:

void AHRSKalman::UpdateState(const Matrix<3, 1>& U, float time)
{
 800f770:	b5b0      	push	{r4, r5, r7, lr}
 800f772:	f5ad 7d20 	sub.w	sp, sp, #640	; 0x280
 800f776:	af00      	add	r7, sp, #0
 800f778:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f77c:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800f780:	6018      	str	r0, [r3, #0]
 800f782:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f786:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 800f78a:	6019      	str	r1, [r3, #0]
 800f78c:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f790:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 800f794:	ed83 0a00 	vstr	s0, [r3]
//Update State
	float hdt = (time - _lastUpdateTime) * 0.5f; //Half-delta-time
 800f798:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f79c:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800f7a6:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f7aa:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 800f7ae:	ed93 7a00 	vldr	s14, [r3]
 800f7b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f7b6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800f7ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f7be:	edc7 7a9f 	vstr	s15, [r7, #636]	; 0x27c
	_lastUpdateTime = time;
 800f7c2:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f7c6:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	f507 7220 	add.w	r2, r7, #640	; 0x280
 800f7d0:	f5a2 720f 	sub.w	r2, r2, #572	; 0x23c
 800f7d4:	6812      	ldr	r2, [r2, #0]
 800f7d6:	651a      	str	r2, [r3, #80]	; 0x50
	static Matrix<4, 4> F;
 800f7d8:	4bdc      	ldr	r3, [pc, #880]	; (800fb4c <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x3dc>)
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	f3bf 8f5b 	dmb	ish
 800f7e0:	f003 0301 	and.w	r3, r3, #1
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	bf0c      	ite	eq
 800f7e8:	2301      	moveq	r3, #1
 800f7ea:	2300      	movne	r3, #0
 800f7ec:	b2db      	uxtb	r3, r3
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d010      	beq.n	800f814 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0xa4>
 800f7f2:	48d6      	ldr	r0, [pc, #856]	; (800fb4c <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x3dc>)
 800f7f4:	f009 fe48 	bl	8019488 <__cxa_guard_acquire>
 800f7f8:	4603      	mov	r3, r0
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	bf14      	ite	ne
 800f7fe:	2301      	movne	r3, #1
 800f800:	2300      	moveq	r3, #0
 800f802:	b2db      	uxtb	r3, r3
 800f804:	2b00      	cmp	r3, #0
 800f806:	d005      	beq.n	800f814 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0xa4>
 800f808:	48d1      	ldr	r0, [pc, #836]	; (800fb50 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x3e0>)
 800f80a:	f7fd fd99 	bl	800d340 <_ZN3Mat6MatrixILt4ELt4EEC1Ev>
 800f80e:	48cf      	ldr	r0, [pc, #828]	; (800fb4c <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x3dc>)
 800f810:	f009 fe46 	bl	80194a0 <__cxa_guard_release>
	static Matrix<4, 3> W;
 800f814:	4bcf      	ldr	r3, [pc, #828]	; (800fb54 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x3e4>)
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	f3bf 8f5b 	dmb	ish
 800f81c:	f003 0301 	and.w	r3, r3, #1
 800f820:	2b00      	cmp	r3, #0
 800f822:	bf0c      	ite	eq
 800f824:	2301      	moveq	r3, #1
 800f826:	2300      	movne	r3, #0
 800f828:	b2db      	uxtb	r3, r3
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d010      	beq.n	800f850 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0xe0>
 800f82e:	48c9      	ldr	r0, [pc, #804]	; (800fb54 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x3e4>)
 800f830:	f009 fe2a 	bl	8019488 <__cxa_guard_acquire>
 800f834:	4603      	mov	r3, r0
 800f836:	2b00      	cmp	r3, #0
 800f838:	bf14      	ite	ne
 800f83a:	2301      	movne	r3, #1
 800f83c:	2300      	moveq	r3, #0
 800f83e:	b2db      	uxtb	r3, r3
 800f840:	2b00      	cmp	r3, #0
 800f842:	d005      	beq.n	800f850 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0xe0>
 800f844:	48c4      	ldr	r0, [pc, #784]	; (800fb58 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x3e8>)
 800f846:	f001 fdf3 	bl	8011430 <_ZN3Mat6MatrixILt4ELt3EEC1Ev>
 800f84a:	48c2      	ldr	r0, [pc, #776]	; (800fb54 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x3e4>)
 800f84c:	f009 fe28 	bl	80194a0 <__cxa_guard_release>
	static Quaternion newX;
	float wx{U(0,0)}, wy{U(1,0)}, wz{U(2,0)};
 800f850:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f854:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 800f858:	2200      	movs	r2, #0
 800f85a:	2100      	movs	r1, #0
 800f85c:	6818      	ldr	r0, [r3, #0]
 800f85e:	f7fe f95b 	bl	800db18 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 800f862:	ed87 0a9e 	vstr	s0, [r7, #632]	; 0x278
 800f866:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f86a:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 800f86e:	2200      	movs	r2, #0
 800f870:	2101      	movs	r1, #1
 800f872:	6818      	ldr	r0, [r3, #0]
 800f874:	f7fe f950 	bl	800db18 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 800f878:	ed87 0a9d 	vstr	s0, [r7, #628]	; 0x274
 800f87c:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f880:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 800f884:	2200      	movs	r2, #0
 800f886:	2102      	movs	r1, #2
 800f888:	6818      	ldr	r0, [r3, #0]
 800f88a:	f7fe f945 	bl	800db18 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 800f88e:	ed87 0a9c 	vstr	s0, [r7, #624]	; 0x270
	newX.w = _X.w + hdt*(-wx*_X.x - wy*_X.y - wz*_X.z);
 800f892:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f896:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	ed93 7a00 	vldr	s14, [r3]
 800f8a0:	edd7 7a9e 	vldr	s15, [r7, #632]	; 0x278
 800f8a4:	eef1 6a67 	vneg.f32	s13, s15
 800f8a8:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f8ac:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	edd3 7a01 	vldr	s15, [r3, #4]
 800f8b6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800f8ba:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f8be:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	ed93 6a02 	vldr	s12, [r3, #8]
 800f8c8:	edd7 7a9d 	vldr	s15, [r7, #628]	; 0x274
 800f8cc:	ee66 7a27 	vmul.f32	s15, s12, s15
 800f8d0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800f8d4:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f8d8:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	ed93 6a03 	vldr	s12, [r3, #12]
 800f8e2:	edd7 7a9c 	vldr	s15, [r7, #624]	; 0x270
 800f8e6:	ee66 7a27 	vmul.f32	s15, s12, s15
 800f8ea:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800f8ee:	edd7 7a9f 	vldr	s15, [r7, #636]	; 0x27c
 800f8f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f8f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f8fa:	4b98      	ldr	r3, [pc, #608]	; (800fb5c <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x3ec>)
 800f8fc:	edc3 7a00 	vstr	s15, [r3]
	newX.x = _X.x + hdt*(wx*_X.w - wy*_X.z + wz*_X.y);
 800f900:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f904:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	ed93 7a01 	vldr	s14, [r3, #4]
 800f90e:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f912:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	edd3 6a00 	vldr	s13, [r3]
 800f91c:	edd7 7a9e 	vldr	s15, [r7, #632]	; 0x278
 800f920:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800f924:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f928:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	ed93 6a03 	vldr	s12, [r3, #12]
 800f932:	edd7 7a9d 	vldr	s15, [r7, #628]	; 0x274
 800f936:	ee66 7a27 	vmul.f32	s15, s12, s15
 800f93a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800f93e:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f942:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	ed93 6a02 	vldr	s12, [r3, #8]
 800f94c:	edd7 7a9c 	vldr	s15, [r7, #624]	; 0x270
 800f950:	ee66 7a27 	vmul.f32	s15, s12, s15
 800f954:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f958:	edd7 7a9f 	vldr	s15, [r7, #636]	; 0x27c
 800f95c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f960:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f964:	4b7d      	ldr	r3, [pc, #500]	; (800fb5c <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x3ec>)
 800f966:	edc3 7a01 	vstr	s15, [r3, #4]
	newX.y = _X.y + hdt*(wx*_X.z + wy*_X.w - wz*_X.x);
 800f96a:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f96e:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	ed93 7a02 	vldr	s14, [r3, #8]
 800f978:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f97c:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	edd3 6a03 	vldr	s13, [r3, #12]
 800f986:	edd7 7a9e 	vldr	s15, [r7, #632]	; 0x278
 800f98a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800f98e:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f992:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	ed93 6a00 	vldr	s12, [r3]
 800f99c:	edd7 7a9d 	vldr	s15, [r7, #628]	; 0x274
 800f9a0:	ee66 7a27 	vmul.f32	s15, s12, s15
 800f9a4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f9a8:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f9ac:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	ed93 6a01 	vldr	s12, [r3, #4]
 800f9b6:	edd7 7a9c 	vldr	s15, [r7, #624]	; 0x270
 800f9ba:	ee66 7a27 	vmul.f32	s15, s12, s15
 800f9be:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800f9c2:	edd7 7a9f 	vldr	s15, [r7, #636]	; 0x27c
 800f9c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f9ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f9ce:	4b63      	ldr	r3, [pc, #396]	; (800fb5c <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x3ec>)
 800f9d0:	edc3 7a02 	vstr	s15, [r3, #8]
	newX.z = _X.z + hdt*(-wx*_X.y + wy*_X.x + wz*_X.w);
 800f9d4:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f9d8:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	ed93 7a03 	vldr	s14, [r3, #12]
 800f9e2:	edd7 7a9e 	vldr	s15, [r7, #632]	; 0x278
 800f9e6:	eef1 6a67 	vneg.f32	s13, s15
 800f9ea:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800f9ee:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	edd3 7a02 	vldr	s15, [r3, #8]
 800f9f8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800f9fc:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fa00:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	ed93 6a01 	vldr	s12, [r3, #4]
 800fa0a:	edd7 7a9d 	vldr	s15, [r7, #628]	; 0x274
 800fa0e:	ee66 7a27 	vmul.f32	s15, s12, s15
 800fa12:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800fa16:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fa1a:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	ed93 6a00 	vldr	s12, [r3]
 800fa24:	edd7 7a9c 	vldr	s15, [r7, #624]	; 0x270
 800fa28:	ee66 7a27 	vmul.f32	s15, s12, s15
 800fa2c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800fa30:	edd7 7a9f 	vldr	s15, [r7, #636]	; 0x27c
 800fa34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fa38:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fa3c:	4b47      	ldr	r3, [pc, #284]	; (800fb5c <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x3ec>)
 800fa3e:	edc3 7a03 	vstr	s15, [r3, #12]

	auto qW = _X * hdt;
 800fa42:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fa46:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	ed97 0a9f 	vldr	s0, [r7, #636]	; 0x27c
 800fa50:	4618      	mov	r0, r3
 800fa52:	f006 fa4c 	bl	8015eee <_ZNK3Mat10QuaternionmlEf>
 800fa56:	eeb0 6a40 	vmov.f32	s12, s0
 800fa5a:	eef0 6a60 	vmov.f32	s13, s1
 800fa5e:	eeb0 7a41 	vmov.f32	s14, s2
 800fa62:	eef0 7a61 	vmov.f32	s15, s3
 800fa66:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fa6a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800fa6e:	ed83 6a00 	vstr	s12, [r3]
 800fa72:	edc3 6a01 	vstr	s13, [r3, #4]
 800fa76:	ed83 7a02 	vstr	s14, [r3, #8]
 800fa7a:	edc3 7a03 	vstr	s15, [r3, #12]

	W =
	{{
		-qW.x, -qW.y, -qW.z,
 800fa7e:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fa82:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800fa86:	edd3 7a01 	vldr	s15, [r3, #4]
 800fa8a:	eef1 7a67 	vneg.f32	s15, s15
	W =
 800fa8e:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fa92:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800fa96:	edc3 7a00 	vstr	s15, [r3]
		-qW.x, -qW.y, -qW.z,
 800fa9a:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fa9e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800faa2:	edd3 7a02 	vldr	s15, [r3, #8]
 800faa6:	eef1 7a67 	vneg.f32	s15, s15
	W =
 800faaa:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800faae:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800fab2:	edc3 7a01 	vstr	s15, [r3, #4]
		-qW.x, -qW.y, -qW.z,
 800fab6:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800faba:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800fabe:	edd3 7a03 	vldr	s15, [r3, #12]
 800fac2:	eef1 7a67 	vneg.f32	s15, s15
	W =
 800fac6:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800faca:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800face:	edc3 7a02 	vstr	s15, [r3, #8]
		qW.w, -qW.z, qW.y,
 800fad2:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fad6:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800fada:	681a      	ldr	r2, [r3, #0]
	W =
 800fadc:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fae0:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800fae4:	60da      	str	r2, [r3, #12]
		qW.w, -qW.z, qW.y,
 800fae6:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800faea:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800faee:	edd3 7a03 	vldr	s15, [r3, #12]
 800faf2:	eef1 7a67 	vneg.f32	s15, s15
	W =
 800faf6:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fafa:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800fafe:	edc3 7a04 	vstr	s15, [r3, #16]
		qW.w, -qW.z, qW.y,
 800fb02:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fb06:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800fb0a:	689a      	ldr	r2, [r3, #8]
	W =
 800fb0c:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fb10:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800fb14:	615a      	str	r2, [r3, #20]
		qW.z, qW.w, -qW.x,
 800fb16:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fb1a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800fb1e:	68da      	ldr	r2, [r3, #12]
	W =
 800fb20:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fb24:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800fb28:	619a      	str	r2, [r3, #24]
		qW.z, qW.w, -qW.x,
 800fb2a:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fb2e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800fb32:	681a      	ldr	r2, [r3, #0]
	W =
 800fb34:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fb38:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800fb3c:	61da      	str	r2, [r3, #28]
		qW.z, qW.w, -qW.x,
 800fb3e:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fb42:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800fb46:	edd3 7a01 	vldr	s15, [r3, #4]
 800fb4a:	e009      	b.n	800fb60 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x3f0>
 800fb4c:	24005150 	.word	0x24005150
 800fb50:	24005110 	.word	0x24005110
 800fb54:	24005184 	.word	0x24005184
 800fb58:	24005154 	.word	0x24005154
 800fb5c:	24005188 	.word	0x24005188
 800fb60:	eef1 7a67 	vneg.f32	s15, s15
	W =
 800fb64:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fb68:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800fb6c:	edc3 7a08 	vstr	s15, [r3, #32]
		-qW.y, qW.x, qW.w
 800fb70:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fb74:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800fb78:	edd3 7a02 	vldr	s15, [r3, #8]
 800fb7c:	eef1 7a67 	vneg.f32	s15, s15
	W =
 800fb80:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fb84:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800fb88:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		-qW.y, qW.x, qW.w
 800fb8c:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fb90:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800fb94:	685a      	ldr	r2, [r3, #4]
	W =
 800fb96:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fb9a:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800fb9e:	629a      	str	r2, [r3, #40]	; 0x28
		-qW.y, qW.x, qW.w
 800fba0:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fba4:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800fba8:	681a      	ldr	r2, [r3, #0]
	W =
 800fbaa:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fbae:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800fbb2:	62da      	str	r2, [r3, #44]	; 0x2c
 800fbb4:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800fbb8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800fbbc:	4611      	mov	r1, r2
 800fbbe:	4618      	mov	r0, r3
 800fbc0:	f001 fc41 	bl	8011446 <_ZN3Mat6MatrixILt4ELt3EEC1ERKSt5arrayIfLj12EE>
 800fbc4:	4ac0      	ldr	r2, [pc, #768]	; (800fec8 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x758>)
 800fbc6:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fbca:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800fbce:	4614      	mov	r4, r2
 800fbd0:	461d      	mov	r5, r3
 800fbd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fbd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fbd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fbd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fbda:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800fbde:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}};

	_Q = W*W.Transposed() * _gyroNoiseVariance;
 800fbe2:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fbe6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800fbea:	49b7      	ldr	r1, [pc, #732]	; (800fec8 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x758>)
 800fbec:	4618      	mov	r0, r3
 800fbee:	f001 fc41 	bl	8011474 <_ZNK3Mat6MatrixILt4ELt3EE10TransposedEv>
 800fbf2:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fbf6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800fbfa:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800fbfe:	49b2      	ldr	r1, [pc, #712]	; (800fec8 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x758>)
 800fc00:	4618      	mov	r0, r3
 800fc02:	f001 fc67 	bl	80114d4 <_ZNK3Mat6MatrixILt4ELt3EEmlILt4EEENS0_ILt4EXT_EEERKNS0_ILt3EXT_EEE>
 800fc06:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fc0a:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800fc14:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fc18:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800fc1c:	681c      	ldr	r4, [r3, #0]
 800fc1e:	463b      	mov	r3, r7
 800fc20:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800fc24:	eeb0 0a67 	vmov.f32	s0, s15
 800fc28:	4611      	mov	r1, r2
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	f001 fc65 	bl	80114fa <_ZNK3Mat6MatrixILt4ELt4EEmlEf>
 800fc30:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fc34:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 800fc38:	3464      	adds	r4, #100	; 0x64
 800fc3a:	461d      	mov	r5, r3
 800fc3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fc3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fc40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fc42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fc44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fc46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fc48:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800fc4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	F =
 800fc50:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fc54:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800fc58:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800fc5c:	601a      	str	r2, [r3, #0]
	{{
		1.0f, -hdt*wx, -hdt*wy, -hdt*wz,
 800fc5e:	edd7 7a9f 	vldr	s15, [r7, #636]	; 0x27c
 800fc62:	eeb1 7a67 	vneg.f32	s14, s15
 800fc66:	edd7 7a9e 	vldr	s15, [r7, #632]	; 0x278
 800fc6a:	ee67 7a27 	vmul.f32	s15, s14, s15
	F =
 800fc6e:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fc72:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800fc76:	edc3 7a01 	vstr	s15, [r3, #4]
		1.0f, -hdt*wx, -hdt*wy, -hdt*wz,
 800fc7a:	edd7 7a9f 	vldr	s15, [r7, #636]	; 0x27c
 800fc7e:	eeb1 7a67 	vneg.f32	s14, s15
 800fc82:	edd7 7a9d 	vldr	s15, [r7, #628]	; 0x274
 800fc86:	ee67 7a27 	vmul.f32	s15, s14, s15
	F =
 800fc8a:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fc8e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800fc92:	edc3 7a02 	vstr	s15, [r3, #8]
		1.0f, -hdt*wx, -hdt*wy, -hdt*wz,
 800fc96:	edd7 7a9f 	vldr	s15, [r7, #636]	; 0x27c
 800fc9a:	eeb1 7a67 	vneg.f32	s14, s15
 800fc9e:	edd7 7a9c 	vldr	s15, [r7, #624]	; 0x270
 800fca2:	ee67 7a27 	vmul.f32	s15, s14, s15
	F =
 800fca6:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fcaa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800fcae:	edc3 7a03 	vstr	s15, [r3, #12]
		hdt*wx, 1.0f, hdt*wz, -hdt*wy,
 800fcb2:	ed97 7a9f 	vldr	s14, [r7, #636]	; 0x27c
 800fcb6:	edd7 7a9e 	vldr	s15, [r7, #632]	; 0x278
 800fcba:	ee67 7a27 	vmul.f32	s15, s14, s15
	F =
 800fcbe:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fcc2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800fcc6:	edc3 7a04 	vstr	s15, [r3, #16]
 800fcca:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fcce:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800fcd2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800fcd6:	615a      	str	r2, [r3, #20]
		hdt*wx, 1.0f, hdt*wz, -hdt*wy,
 800fcd8:	ed97 7a9f 	vldr	s14, [r7, #636]	; 0x27c
 800fcdc:	edd7 7a9c 	vldr	s15, [r7, #624]	; 0x270
 800fce0:	ee67 7a27 	vmul.f32	s15, s14, s15
	F =
 800fce4:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fce8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800fcec:	edc3 7a06 	vstr	s15, [r3, #24]
		hdt*wx, 1.0f, hdt*wz, -hdt*wy,
 800fcf0:	edd7 7a9f 	vldr	s15, [r7, #636]	; 0x27c
 800fcf4:	eeb1 7a67 	vneg.f32	s14, s15
 800fcf8:	edd7 7a9d 	vldr	s15, [r7, #628]	; 0x274
 800fcfc:	ee67 7a27 	vmul.f32	s15, s14, s15
	F =
 800fd00:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fd04:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800fd08:	edc3 7a07 	vstr	s15, [r3, #28]
		hdt*wy, -hdt*wz, 1.0f, hdt*wx,
 800fd0c:	ed97 7a9f 	vldr	s14, [r7, #636]	; 0x27c
 800fd10:	edd7 7a9d 	vldr	s15, [r7, #628]	; 0x274
 800fd14:	ee67 7a27 	vmul.f32	s15, s14, s15
	F =
 800fd18:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fd1c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800fd20:	edc3 7a08 	vstr	s15, [r3, #32]
		hdt*wy, -hdt*wz, 1.0f, hdt*wx,
 800fd24:	edd7 7a9f 	vldr	s15, [r7, #636]	; 0x27c
 800fd28:	eeb1 7a67 	vneg.f32	s14, s15
 800fd2c:	edd7 7a9c 	vldr	s15, [r7, #624]	; 0x270
 800fd30:	ee67 7a27 	vmul.f32	s15, s14, s15
	F =
 800fd34:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fd38:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800fd3c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
 800fd40:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fd44:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800fd48:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800fd4c:	629a      	str	r2, [r3, #40]	; 0x28
		hdt*wy, -hdt*wz, 1.0f, hdt*wx,
 800fd4e:	ed97 7a9f 	vldr	s14, [r7, #636]	; 0x27c
 800fd52:	edd7 7a9e 	vldr	s15, [r7, #632]	; 0x278
 800fd56:	ee67 7a27 	vmul.f32	s15, s14, s15
	F =
 800fd5a:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fd5e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800fd62:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		hdt*wz, hdt*wy, -hdt*wx, 1.0f
 800fd66:	ed97 7a9f 	vldr	s14, [r7, #636]	; 0x27c
 800fd6a:	edd7 7a9c 	vldr	s15, [r7, #624]	; 0x270
 800fd6e:	ee67 7a27 	vmul.f32	s15, s14, s15
	F =
 800fd72:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fd76:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800fd7a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		hdt*wz, hdt*wy, -hdt*wx, 1.0f
 800fd7e:	ed97 7a9f 	vldr	s14, [r7, #636]	; 0x27c
 800fd82:	edd7 7a9d 	vldr	s15, [r7, #628]	; 0x274
 800fd86:	ee67 7a27 	vmul.f32	s15, s14, s15
	F =
 800fd8a:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fd8e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800fd92:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		hdt*wz, hdt*wy, -hdt*wx, 1.0f
 800fd96:	edd7 7a9f 	vldr	s15, [r7, #636]	; 0x27c
 800fd9a:	eeb1 7a67 	vneg.f32	s14, s15
 800fd9e:	edd7 7a9e 	vldr	s15, [r7, #632]	; 0x278
 800fda2:	ee67 7a27 	vmul.f32	s15, s14, s15
	F =
 800fda6:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fdaa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800fdae:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
 800fdb2:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fdb6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800fdba:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800fdbe:	63da      	str	r2, [r3, #60]	; 0x3c
 800fdc0:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 800fdc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fdc8:	4611      	mov	r1, r2
 800fdca:	4618      	mov	r0, r3
 800fdcc:	f001 fbb4 	bl	8011538 <_ZN3Mat6MatrixILt4ELt4EEC1ERKSt5arrayIfLj16EE>
 800fdd0:	4a3e      	ldr	r2, [pc, #248]	; (800fecc <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x75c>)
 800fdd2:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fdd6:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800fdda:	4614      	mov	r4, r2
 800fddc:	461d      	mov	r5, r3
 800fdde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fde0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fde2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fde4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fde6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fde8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fdea:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800fdee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}};

	_X = newX;
 800fdf2:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fdf6:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	4a34      	ldr	r2, [pc, #208]	; (800fed0 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x760>)
 800fdfe:	461c      	mov	r4, r3
 800fe00:	4613      	mov	r3, r2
 800fe02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fe04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	_P = F * _P * F.Transposed() + _Q;
 800fe08:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fe0c:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	f103 0210 	add.w	r2, r3, #16
 800fe16:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800fe1a:	492c      	ldr	r1, [pc, #176]	; (800fecc <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x75c>)
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	f001 fba4 	bl	801156a <_ZNK3Mat6MatrixILt4ELt4EEmlILt4EEENS0_ILt4EXT_EEERKS3_>
 800fe22:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800fe26:	4929      	ldr	r1, [pc, #164]	; (800fecc <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x75c>)
 800fe28:	4618      	mov	r0, r3
 800fe2a:	f001 fbb1 	bl	8011590 <_ZNK3Mat6MatrixILt4ELt4EE10TransposedEv>
 800fe2e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800fe32:	f507 720c 	add.w	r2, r7, #560	; 0x230
 800fe36:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 800fe3a:	4618      	mov	r0, r3
 800fe3c:	f001 fb95 	bl	801156a <_ZNK3Mat6MatrixILt4ELt4EEmlILt4EEENS0_ILt4EXT_EEERKS3_>
 800fe40:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fe44:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800fe4e:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fe52:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800fe56:	681c      	ldr	r4, [r3, #0]
 800fe58:	463b      	mov	r3, r7
 800fe5a:	f507 71d8 	add.w	r1, r7, #432	; 0x1b0
 800fe5e:	4618      	mov	r0, r3
 800fe60:	f001 fbc6 	bl	80115f0 <_ZNK3Mat6MatrixILt4ELt4EEplERKS1_>
 800fe64:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fe68:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 800fe6c:	3410      	adds	r4, #16
 800fe6e:	461d      	mov	r5, r3
 800fe70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fe72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fe74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fe76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fe78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fe7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fe7c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800fe80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	_X = _X.Normalised();
 800fe84:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fe88:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800fe8c:	681a      	ldr	r2, [r3, #0]
 800fe8e:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800fe92:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800fe96:	681c      	ldr	r4, [r3, #0]
 800fe98:	4610      	mov	r0, r2
 800fe9a:	f006 f894 	bl	8015fc6 <_ZNK3Mat10Quaternion10NormalisedEv>
 800fe9e:	eeb0 6a40 	vmov.f32	s12, s0
 800fea2:	eef0 6a60 	vmov.f32	s13, s1
 800fea6:	eeb0 7a41 	vmov.f32	s14, s2
 800feaa:	eef0 7a61 	vmov.f32	s15, s3
 800feae:	ed84 6a00 	vstr	s12, [r4]
 800feb2:	edc4 6a01 	vstr	s13, [r4, #4]
 800feb6:	ed84 7a02 	vstr	s14, [r4, #8]
 800feba:	edc4 7a03 	vstr	s15, [r4, #12]
}
 800febe:	bf00      	nop
 800fec0:	f507 7720 	add.w	r7, r7, #640	; 0x280
 800fec4:	46bd      	mov	sp, r7
 800fec6:	bdb0      	pop	{r4, r5, r7, pc}
 800fec8:	24005154 	.word	0x24005154
 800fecc:	24005110 	.word	0x24005110
 800fed0:	24005188 	.word	0x24005188

0800fed4 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf>:

void AHRSKalman::CorrectStateMag(const Matrix<3, 1>& mag, float time)
{
 800fed4:	b5b0      	push	{r4, r5, r7, lr}
 800fed6:	ed2d 8b02 	vpush	{d8}
 800feda:	f5ad 7d1c 	sub.w	sp, sp, #624	; 0x270
 800fede:	af00      	add	r7, sp, #0
 800fee0:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800fee4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800fee8:	6018      	str	r0, [r3, #0]
 800feea:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800feee:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800fef2:	6019      	str	r1, [r3, #0]
 800fef4:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800fef8:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800fefc:	ed83 0a00 	vstr	s0, [r3]
	float dip = 0.5f;
 800ff00:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800ff04:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
	static const float ry{cos(dip)}, rz{-sin(dip)};
 800ff08:	4ba3      	ldr	r3, [pc, #652]	; (8010198 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2c4>)
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	f3bf 8f5b 	dmb	ish
 800ff10:	f003 0301 	and.w	r3, r3, #1
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	bf0c      	ite	eq
 800ff18:	2301      	moveq	r3, #1
 800ff1a:	2300      	movne	r3, #0
 800ff1c:	b2db      	uxtb	r3, r3
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d016      	beq.n	800ff50 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7c>
 800ff22:	489d      	ldr	r0, [pc, #628]	; (8010198 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2c4>)
 800ff24:	f009 fab0 	bl	8019488 <__cxa_guard_acquire>
 800ff28:	4603      	mov	r3, r0
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	bf14      	ite	ne
 800ff2e:	2301      	movne	r3, #1
 800ff30:	2300      	moveq	r3, #0
 800ff32:	b2db      	uxtb	r3, r3
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d00b      	beq.n	800ff50 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7c>
 800ff38:	ed97 0a9b 	vldr	s0, [r7, #620]	; 0x26c
 800ff3c:	f7fe ffe4 	bl	800ef08 <_ZSt3cosf>
 800ff40:	eef0 7a40 	vmov.f32	s15, s0
 800ff44:	4b95      	ldr	r3, [pc, #596]	; (801019c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2c8>)
 800ff46:	edc3 7a00 	vstr	s15, [r3]
 800ff4a:	4893      	ldr	r0, [pc, #588]	; (8010198 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2c4>)
 800ff4c:	f009 faa8 	bl	80194a0 <__cxa_guard_release>
 800ff50:	4b93      	ldr	r3, [pc, #588]	; (80101a0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2cc>)
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	f3bf 8f5b 	dmb	ish
 800ff58:	f003 0301 	and.w	r3, r3, #1
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	bf0c      	ite	eq
 800ff60:	2301      	moveq	r3, #1
 800ff62:	2300      	movne	r3, #0
 800ff64:	b2db      	uxtb	r3, r3
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d018      	beq.n	800ff9c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xc8>
 800ff6a:	488d      	ldr	r0, [pc, #564]	; (80101a0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2cc>)
 800ff6c:	f009 fa8c 	bl	8019488 <__cxa_guard_acquire>
 800ff70:	4603      	mov	r3, r0
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	bf14      	ite	ne
 800ff76:	2301      	movne	r3, #1
 800ff78:	2300      	moveq	r3, #0
 800ff7a:	b2db      	uxtb	r3, r3
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d00d      	beq.n	800ff9c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xc8>
 800ff80:	ed97 0a9b 	vldr	s0, [r7, #620]	; 0x26c
 800ff84:	f7fe ffd0 	bl	800ef28 <_ZSt3sinf>
 800ff88:	eef0 7a40 	vmov.f32	s15, s0
 800ff8c:	eef1 7a67 	vneg.f32	s15, s15
 800ff90:	4b84      	ldr	r3, [pc, #528]	; (80101a4 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2d0>)
 800ff92:	edc3 7a00 	vstr	s15, [r3]
 800ff96:	4882      	ldr	r0, [pc, #520]	; (80101a0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2cc>)
 800ff98:	f009 fa82 	bl	80194a0 <__cxa_guard_release>
	static Matrix<3, 1> Z;
 800ff9c:	4b82      	ldr	r3, [pc, #520]	; (80101a8 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2d4>)
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	f3bf 8f5b 	dmb	ish
 800ffa4:	f003 0301 	and.w	r3, r3, #1
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	bf0c      	ite	eq
 800ffac:	2301      	moveq	r3, #1
 800ffae:	2300      	movne	r3, #0
 800ffb0:	b2db      	uxtb	r3, r3
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d010      	beq.n	800ffd8 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x104>
 800ffb6:	487c      	ldr	r0, [pc, #496]	; (80101a8 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2d4>)
 800ffb8:	f009 fa66 	bl	8019488 <__cxa_guard_acquire>
 800ffbc:	4603      	mov	r3, r0
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	bf14      	ite	ne
 800ffc2:	2301      	movne	r3, #1
 800ffc4:	2300      	moveq	r3, #0
 800ffc6:	b2db      	uxtb	r3, r3
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d005      	beq.n	800ffd8 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x104>
 800ffcc:	4877      	ldr	r0, [pc, #476]	; (80101ac <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2d8>)
 800ffce:	f7fd fb60 	bl	800d692 <_ZN3Mat6MatrixILt3ELt1EEC1Ev>
 800ffd2:	4875      	ldr	r0, [pc, #468]	; (80101a8 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2d4>)
 800ffd4:	f009 fa64 	bl	80194a0 <__cxa_guard_release>
	static Matrix<3, 1> h;
 800ffd8:	4b75      	ldr	r3, [pc, #468]	; (80101b0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2dc>)
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	f3bf 8f5b 	dmb	ish
 800ffe0:	f003 0301 	and.w	r3, r3, #1
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	bf0c      	ite	eq
 800ffe8:	2301      	moveq	r3, #1
 800ffea:	2300      	movne	r3, #0
 800ffec:	b2db      	uxtb	r3, r3
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d010      	beq.n	8010014 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x140>
 800fff2:	486f      	ldr	r0, [pc, #444]	; (80101b0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2dc>)
 800fff4:	f009 fa48 	bl	8019488 <__cxa_guard_acquire>
 800fff8:	4603      	mov	r3, r0
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	bf14      	ite	ne
 800fffe:	2301      	movne	r3, #1
 8010000:	2300      	moveq	r3, #0
 8010002:	b2db      	uxtb	r3, r3
 8010004:	2b00      	cmp	r3, #0
 8010006:	d005      	beq.n	8010014 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x140>
 8010008:	486a      	ldr	r0, [pc, #424]	; (80101b4 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2e0>)
 801000a:	f7fd fb42 	bl	800d692 <_ZN3Mat6MatrixILt3ELt1EEC1Ev>
 801000e:	4868      	ldr	r0, [pc, #416]	; (80101b0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2dc>)
 8010010:	f009 fa46 	bl	80194a0 <__cxa_guard_release>
	static Matrix<3, 4> H;
 8010014:	4b68      	ldr	r3, [pc, #416]	; (80101b8 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2e4>)
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	f3bf 8f5b 	dmb	ish
 801001c:	f003 0301 	and.w	r3, r3, #1
 8010020:	2b00      	cmp	r3, #0
 8010022:	bf0c      	ite	eq
 8010024:	2301      	moveq	r3, #1
 8010026:	2300      	movne	r3, #0
 8010028:	b2db      	uxtb	r3, r3
 801002a:	2b00      	cmp	r3, #0
 801002c:	d010      	beq.n	8010050 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x17c>
 801002e:	4862      	ldr	r0, [pc, #392]	; (80101b8 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2e4>)
 8010030:	f009 fa2a 	bl	8019488 <__cxa_guard_acquire>
 8010034:	4603      	mov	r3, r0
 8010036:	2b00      	cmp	r3, #0
 8010038:	bf14      	ite	ne
 801003a:	2301      	movne	r3, #1
 801003c:	2300      	moveq	r3, #0
 801003e:	b2db      	uxtb	r3, r3
 8010040:	2b00      	cmp	r3, #0
 8010042:	d005      	beq.n	8010050 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x17c>
 8010044:	485d      	ldr	r0, [pc, #372]	; (80101bc <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2e8>)
 8010046:	f001 faf0 	bl	801162a <_ZN3Mat6MatrixILt3ELt4EEC1Ev>
 801004a:	485b      	ldr	r0, [pc, #364]	; (80101b8 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2e4>)
 801004c:	f009 fa28 	bl	80194a0 <__cxa_guard_release>
	static Matrix<4, 3> K;
 8010050:	4b5b      	ldr	r3, [pc, #364]	; (80101c0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2ec>)
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	f3bf 8f5b 	dmb	ish
 8010058:	f003 0301 	and.w	r3, r3, #1
 801005c:	2b00      	cmp	r3, #0
 801005e:	bf0c      	ite	eq
 8010060:	2301      	moveq	r3, #1
 8010062:	2300      	movne	r3, #0
 8010064:	b2db      	uxtb	r3, r3
 8010066:	2b00      	cmp	r3, #0
 8010068:	d010      	beq.n	801008c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x1b8>
 801006a:	4855      	ldr	r0, [pc, #340]	; (80101c0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2ec>)
 801006c:	f009 fa0c 	bl	8019488 <__cxa_guard_acquire>
 8010070:	4603      	mov	r3, r0
 8010072:	2b00      	cmp	r3, #0
 8010074:	bf14      	ite	ne
 8010076:	2301      	movne	r3, #1
 8010078:	2300      	moveq	r3, #0
 801007a:	b2db      	uxtb	r3, r3
 801007c:	2b00      	cmp	r3, #0
 801007e:	d005      	beq.n	801008c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x1b8>
 8010080:	4850      	ldr	r0, [pc, #320]	; (80101c4 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2f0>)
 8010082:	f001 f9d5 	bl	8011430 <_ZN3Mat6MatrixILt4ELt3EEC1Ev>
 8010086:	484e      	ldr	r0, [pc, #312]	; (80101c0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2ec>)
 8010088:	f009 fa0a 	bl	80194a0 <__cxa_guard_release>
	static const Matrix<3, 3> R = Eye<3>(_magNoiseVariance);
 801008c:	4b4e      	ldr	r3, [pc, #312]	; (80101c8 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2f4>)
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	f3bf 8f5b 	dmb	ish
 8010094:	f003 0301 	and.w	r3, r3, #1
 8010098:	2b00      	cmp	r3, #0
 801009a:	bf0c      	ite	eq
 801009c:	2301      	moveq	r3, #1
 801009e:	2300      	movne	r3, #0
 80100a0:	b2db      	uxtb	r3, r3
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d01a      	beq.n	80100dc <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x208>
 80100a6:	4848      	ldr	r0, [pc, #288]	; (80101c8 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2f4>)
 80100a8:	f009 f9ee 	bl	8019488 <__cxa_guard_acquire>
 80100ac:	4603      	mov	r3, r0
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	bf14      	ite	ne
 80100b2:	2301      	movne	r3, #1
 80100b4:	2300      	moveq	r3, #0
 80100b6:	b2db      	uxtb	r3, r3
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d00f      	beq.n	80100dc <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x208>
 80100bc:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80100c0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80100ca:	4b40      	ldr	r3, [pc, #256]	; (80101cc <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2f8>)
 80100cc:	eeb0 0a67 	vmov.f32	s0, s15
 80100d0:	4618      	mov	r0, r3
 80100d2:	f7fd f999 	bl	800d408 <_ZN3Mat3EyeILt3EEENS_6MatrixIXT_EXT_EEEf>
 80100d6:	483c      	ldr	r0, [pc, #240]	; (80101c8 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2f4>)
 80100d8:	f009 f9e2 	bl	80194a0 <__cxa_guard_release>
	static Matrix<3, 3> S;
 80100dc:	4b3c      	ldr	r3, [pc, #240]	; (80101d0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2fc>)
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	f3bf 8f5b 	dmb	ish
 80100e4:	f003 0301 	and.w	r3, r3, #1
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	bf0c      	ite	eq
 80100ec:	2301      	moveq	r3, #1
 80100ee:	2300      	movne	r3, #0
 80100f0:	b2db      	uxtb	r3, r3
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d010      	beq.n	8010118 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x244>
 80100f6:	4836      	ldr	r0, [pc, #216]	; (80101d0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2fc>)
 80100f8:	f009 f9c6 	bl	8019488 <__cxa_guard_acquire>
 80100fc:	4603      	mov	r3, r0
 80100fe:	2b00      	cmp	r3, #0
 8010100:	bf14      	ite	ne
 8010102:	2301      	movne	r3, #1
 8010104:	2300      	moveq	r3, #0
 8010106:	b2db      	uxtb	r3, r3
 8010108:	2b00      	cmp	r3, #0
 801010a:	d005      	beq.n	8010118 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x244>
 801010c:	4831      	ldr	r0, [pc, #196]	; (80101d4 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x300>)
 801010e:	f7fd f963 	bl	800d3d8 <_ZN3Mat6MatrixILt3ELt3EEC1Ev>
 8010112:	482f      	ldr	r0, [pc, #188]	; (80101d0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2fc>)
 8010114:	f009 f9c4 	bl	80194a0 <__cxa_guard_release>
	static Matrix<4, 4> I = Eye<4>(1.0f);
 8010118:	4b2f      	ldr	r3, [pc, #188]	; (80101d8 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x304>)
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	f3bf 8f5b 	dmb	ish
 8010120:	f003 0301 	and.w	r3, r3, #1
 8010124:	2b00      	cmp	r3, #0
 8010126:	bf0c      	ite	eq
 8010128:	2301      	moveq	r3, #1
 801012a:	2300      	movne	r3, #0
 801012c:	b2db      	uxtb	r3, r3
 801012e:	2b00      	cmp	r3, #0
 8010130:	d013      	beq.n	801015a <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x286>
 8010132:	4829      	ldr	r0, [pc, #164]	; (80101d8 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x304>)
 8010134:	f009 f9a8 	bl	8019488 <__cxa_guard_acquire>
 8010138:	4603      	mov	r3, r0
 801013a:	2b00      	cmp	r3, #0
 801013c:	bf14      	ite	ne
 801013e:	2301      	movne	r3, #1
 8010140:	2300      	moveq	r3, #0
 8010142:	b2db      	uxtb	r3, r3
 8010144:	2b00      	cmp	r3, #0
 8010146:	d008      	beq.n	801015a <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x286>
 8010148:	4b24      	ldr	r3, [pc, #144]	; (80101dc <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x308>)
 801014a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801014e:	4618      	mov	r0, r3
 8010150:	f7fd f8d2 	bl	800d2f8 <_ZN3Mat3EyeILt4EEENS_6MatrixIXT_EXT_EEEf>
 8010154:	4820      	ldr	r0, [pc, #128]	; (80101d8 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x304>)
 8010156:	f009 f9a3 	bl	80194a0 <__cxa_guard_release>
	static Matrix<4, 1> res;
 801015a:	4b21      	ldr	r3, [pc, #132]	; (80101e0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x30c>)
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	f3bf 8f5b 	dmb	ish
 8010162:	f003 0301 	and.w	r3, r3, #1
 8010166:	2b00      	cmp	r3, #0
 8010168:	bf0c      	ite	eq
 801016a:	2301      	moveq	r3, #1
 801016c:	2300      	movne	r3, #0
 801016e:	b2db      	uxtb	r3, r3
 8010170:	2b00      	cmp	r3, #0
 8010172:	d039      	beq.n	80101e8 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x314>
 8010174:	481a      	ldr	r0, [pc, #104]	; (80101e0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x30c>)
 8010176:	f009 f987 	bl	8019488 <__cxa_guard_acquire>
 801017a:	4603      	mov	r3, r0
 801017c:	2b00      	cmp	r3, #0
 801017e:	bf14      	ite	ne
 8010180:	2301      	movne	r3, #1
 8010182:	2300      	moveq	r3, #0
 8010184:	b2db      	uxtb	r3, r3
 8010186:	2b00      	cmp	r3, #0
 8010188:	d02e      	beq.n	80101e8 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x314>
 801018a:	4816      	ldr	r0, [pc, #88]	; (80101e4 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x310>)
 801018c:	f001 fa58 	bl	8011640 <_ZN3Mat6MatrixILt4ELt1EEC1Ev>
 8010190:	4813      	ldr	r0, [pc, #76]	; (80101e0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x30c>)
 8010192:	f009 f985 	bl	80194a0 <__cxa_guard_release>
 8010196:	e027      	b.n	80101e8 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x314>
 8010198:	2400519c 	.word	0x2400519c
 801019c:	24005198 	.word	0x24005198
 80101a0:	240051a4 	.word	0x240051a4
 80101a4:	240051a0 	.word	0x240051a0
 80101a8:	240051b4 	.word	0x240051b4
 80101ac:	240051a8 	.word	0x240051a8
 80101b0:	240051c4 	.word	0x240051c4
 80101b4:	240051b8 	.word	0x240051b8
 80101b8:	240051f8 	.word	0x240051f8
 80101bc:	240051c8 	.word	0x240051c8
 80101c0:	2400522c 	.word	0x2400522c
 80101c4:	240051fc 	.word	0x240051fc
 80101c8:	24005254 	.word	0x24005254
 80101cc:	24005230 	.word	0x24005230
 80101d0:	2400527c 	.word	0x2400527c
 80101d4:	24005258 	.word	0x24005258
 80101d8:	240052c0 	.word	0x240052c0
 80101dc:	24005280 	.word	0x24005280
 80101e0:	240052d4 	.word	0x240052d4
 80101e4:	240052c4 	.word	0x240052c4
	static Quaternion add;
	float md = 1.0f / sqrt(mag(0,0)*mag(0,0) + mag(1,0)*mag(1,0) + mag(2,0)*mag(2,0));
 80101e8:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80101ec:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80101f0:	2200      	movs	r2, #0
 80101f2:	2100      	movs	r1, #0
 80101f4:	6818      	ldr	r0, [r3, #0]
 80101f6:	f7fd fc8f 	bl	800db18 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 80101fa:	eeb0 8a40 	vmov.f32	s16, s0
 80101fe:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010202:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8010206:	2200      	movs	r2, #0
 8010208:	2100      	movs	r1, #0
 801020a:	6818      	ldr	r0, [r3, #0]
 801020c:	f7fd fc84 	bl	800db18 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8010210:	eef0 7a40 	vmov.f32	s15, s0
 8010214:	ee28 8a27 	vmul.f32	s16, s16, s15
 8010218:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801021c:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8010220:	2200      	movs	r2, #0
 8010222:	2101      	movs	r1, #1
 8010224:	6818      	ldr	r0, [r3, #0]
 8010226:	f7fd fc77 	bl	800db18 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 801022a:	eef0 8a40 	vmov.f32	s17, s0
 801022e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010232:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8010236:	2200      	movs	r2, #0
 8010238:	2101      	movs	r1, #1
 801023a:	6818      	ldr	r0, [r3, #0]
 801023c:	f7fd fc6c 	bl	800db18 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8010240:	eef0 7a40 	vmov.f32	s15, s0
 8010244:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8010248:	ee38 8a27 	vadd.f32	s16, s16, s15
 801024c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010250:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8010254:	2200      	movs	r2, #0
 8010256:	2102      	movs	r1, #2
 8010258:	6818      	ldr	r0, [r3, #0]
 801025a:	f7fd fc5d 	bl	800db18 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 801025e:	eef0 8a40 	vmov.f32	s17, s0
 8010262:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010266:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 801026a:	2200      	movs	r2, #0
 801026c:	2102      	movs	r1, #2
 801026e:	6818      	ldr	r0, [r3, #0]
 8010270:	f7fd fc52 	bl	800db18 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8010274:	eef0 7a40 	vmov.f32	s15, s0
 8010278:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801027c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8010280:	eeb0 0a67 	vmov.f32	s0, s15
 8010284:	f7fe fe60 	bl	800ef48 <_ZSt4sqrtf>
 8010288:	eeb0 7a40 	vmov.f32	s14, s0
 801028c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010290:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010294:	edc7 7a9a 	vstr	s15, [r7, #616]	; 0x268

	Z =
	{{
		mag(0,0)*md,
 8010298:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801029c:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80102a0:	2200      	movs	r2, #0
 80102a2:	2100      	movs	r1, #0
 80102a4:	6818      	ldr	r0, [r3, #0]
 80102a6:	f7fd fc37 	bl	800db18 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 80102aa:	eeb0 7a40 	vmov.f32	s14, s0
 80102ae:	edd7 7a9a 	vldr	s15, [r7, #616]	; 0x268
 80102b2:	ee67 7a27 	vmul.f32	s15, s14, s15
	Z =
 80102b6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80102ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80102be:	edc3 7a00 	vstr	s15, [r3]
		mag(1,0)*md,
 80102c2:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80102c6:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80102ca:	2200      	movs	r2, #0
 80102cc:	2101      	movs	r1, #1
 80102ce:	6818      	ldr	r0, [r3, #0]
 80102d0:	f7fd fc22 	bl	800db18 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 80102d4:	eeb0 7a40 	vmov.f32	s14, s0
 80102d8:	edd7 7a9a 	vldr	s15, [r7, #616]	; 0x268
 80102dc:	ee67 7a27 	vmul.f32	s15, s14, s15
	Z =
 80102e0:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80102e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80102e8:	edc3 7a01 	vstr	s15, [r3, #4]
		mag(2,0)*md
 80102ec:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80102f0:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80102f4:	2200      	movs	r2, #0
 80102f6:	2102      	movs	r1, #2
 80102f8:	6818      	ldr	r0, [r3, #0]
 80102fa:	f7fd fc0d 	bl	800db18 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 80102fe:	eeb0 7a40 	vmov.f32	s14, s0
 8010302:	edd7 7a9a 	vldr	s15, [r7, #616]	; 0x268
 8010306:	ee67 7a27 	vmul.f32	s15, s14, s15
	Z =
 801030a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801030e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8010312:	edc3 7a02 	vstr	s15, [r3, #8]
 8010316:	f107 0274 	add.w	r2, r7, #116	; 0x74
 801031a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801031e:	4611      	mov	r1, r2
 8010320:	4618      	mov	r0, r3
 8010322:	f7fd f8a1 	bl	800d468 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
 8010326:	49e4      	ldr	r1, [pc, #912]	; (80106b8 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7e4>)
 8010328:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801032c:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 8010330:	460b      	mov	r3, r1
 8010332:	ca07      	ldmia	r2, {r0, r1, r2}
 8010334:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	}};

	h =
	{{
		2.0f*(ry*(_X.w*_X.z + _X.x*_X.y) + rz*(_X.x*_X.z - _X.w*_X.y)),
 8010338:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801033c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	ed93 7a00 	vldr	s14, [r3]
 8010346:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801034a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	edd3 7a03 	vldr	s15, [r3, #12]
 8010354:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010358:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801035c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	edd3 6a01 	vldr	s13, [r3, #4]
 8010366:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801036a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	edd3 7a02 	vldr	s15, [r3, #8]
 8010374:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010378:	ee37 7a27 	vadd.f32	s14, s14, s15
 801037c:	4bcf      	ldr	r3, [pc, #828]	; (80106bc <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7e8>)
 801037e:	edd3 7a00 	vldr	s15, [r3]
 8010382:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010386:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801038a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	edd3 6a01 	vldr	s13, [r3, #4]
 8010394:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010398:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	edd3 7a03 	vldr	s15, [r3, #12]
 80103a2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80103a6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80103aa:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	ed93 6a00 	vldr	s12, [r3]
 80103b4:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80103b8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	edd3 7a02 	vldr	s15, [r3, #8]
 80103c2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80103c6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80103ca:	4bbd      	ldr	r3, [pc, #756]	; (80106c0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7ec>)
 80103cc:	edd3 7a00 	vldr	s15, [r3]
 80103d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80103d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80103d8:	ee77 7aa7 	vadd.f32	s15, s15, s15
	h =
 80103dc:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80103e0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80103e4:	edc3 7a00 	vstr	s15, [r3]
		2.0f*(ry*(0.5f - _X.x*_X.x - _X.z*_X.z) + rz*(_X.w*_X.x + _X.y*_X.z)),
 80103e8:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80103ec:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	ed93 7a01 	vldr	s14, [r3, #4]
 80103f6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80103fa:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	edd3 7a01 	vldr	s15, [r3, #4]
 8010404:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010408:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801040c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010410:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010414:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	edd3 6a03 	vldr	s13, [r3, #12]
 801041e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010422:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	edd3 7a03 	vldr	s15, [r3, #12]
 801042c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010430:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010434:	4ba1      	ldr	r3, [pc, #644]	; (80106bc <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7e8>)
 8010436:	edd3 7a00 	vldr	s15, [r3]
 801043a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801043e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010442:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	edd3 6a00 	vldr	s13, [r3]
 801044c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010450:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	edd3 7a01 	vldr	s15, [r3, #4]
 801045a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801045e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010462:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	ed93 6a02 	vldr	s12, [r3, #8]
 801046c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010470:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	edd3 7a03 	vldr	s15, [r3, #12]
 801047a:	ee66 7a27 	vmul.f32	s15, s12, s15
 801047e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8010482:	4b8f      	ldr	r3, [pc, #572]	; (80106c0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7ec>)
 8010484:	edd3 7a00 	vldr	s15, [r3]
 8010488:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801048c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010490:	ee77 7aa7 	vadd.f32	s15, s15, s15
	h =
 8010494:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010498:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 801049c:	edc3 7a01 	vstr	s15, [r3, #4]
		2.0f*(ry*(_X.y*_X.z - _X.w*_X.x) + rz*(0.5f - _X.x*_X.x - _X.y*_X.y))
 80104a0:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80104a4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	ed93 7a02 	vldr	s14, [r3, #8]
 80104ae:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80104b2:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	edd3 7a03 	vldr	s15, [r3, #12]
 80104bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80104c0:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80104c4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	edd3 6a00 	vldr	s13, [r3]
 80104ce:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80104d2:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80104dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80104e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80104e4:	4b75      	ldr	r3, [pc, #468]	; (80106bc <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7e8>)
 80104e6:	edd3 7a00 	vldr	s15, [r3]
 80104ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80104ee:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80104f2:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	edd3 6a01 	vldr	s13, [r3, #4]
 80104fc:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010500:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	edd3 7a01 	vldr	s15, [r3, #4]
 801050a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801050e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8010512:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8010516:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801051a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	ed93 6a02 	vldr	s12, [r3, #8]
 8010524:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010528:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	edd3 7a02 	vldr	s15, [r3, #8]
 8010532:	ee66 7a27 	vmul.f32	s15, s12, s15
 8010536:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801053a:	4b61      	ldr	r3, [pc, #388]	; (80106c0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7ec>)
 801053c:	edd3 7a00 	vldr	s15, [r3]
 8010540:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010544:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010548:	ee77 7aa7 	vadd.f32	s15, s15, s15
	h =
 801054c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010550:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8010554:	edc3 7a02 	vstr	s15, [r3, #8]
 8010558:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 801055c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8010560:	4611      	mov	r1, r2
 8010562:	4618      	mov	r0, r3
 8010564:	f7fc ff80 	bl	800d468 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
 8010568:	4956      	ldr	r1, [pc, #344]	; (80106c4 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7f0>)
 801056a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801056e:	f5a3 72f8 	sub.w	r2, r3, #496	; 0x1f0
 8010572:	460b      	mov	r3, r1
 8010574:	ca07      	ldmia	r2, {r0, r1, r2}
 8010576:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	}};

	H =
	{{
		2.0f*ry*_X.z - 2.0f*rz*_X.y, 2.0f*ry*_X.z + 2.0f*rz*_X.z, 2.0f*ry*_X.x - 2.0f*rz*_X.w, 2.0f*ry*_X.w + 2.0f*rz*_X.x,
 801057a:	4b50      	ldr	r3, [pc, #320]	; (80106bc <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7e8>)
 801057c:	edd3 7a00 	vldr	s15, [r3]
 8010580:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8010584:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010588:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	edd3 7a03 	vldr	s15, [r3, #12]
 8010592:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010596:	4b4a      	ldr	r3, [pc, #296]	; (80106c0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7ec>)
 8010598:	edd3 7a00 	vldr	s15, [r3]
 801059c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80105a0:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80105a4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80105ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80105b2:	ee77 7a67 	vsub.f32	s15, s14, s15
	H =
 80105b6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80105ba:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80105be:	edc3 7a00 	vstr	s15, [r3]
		2.0f*ry*_X.z - 2.0f*rz*_X.y, 2.0f*ry*_X.z + 2.0f*rz*_X.z, 2.0f*ry*_X.x - 2.0f*rz*_X.w, 2.0f*ry*_X.w + 2.0f*rz*_X.x,
 80105c2:	4b3e      	ldr	r3, [pc, #248]	; (80106bc <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7e8>)
 80105c4:	edd3 7a00 	vldr	s15, [r3]
 80105c8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80105cc:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80105d0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	edd3 7a03 	vldr	s15, [r3, #12]
 80105da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80105de:	4b38      	ldr	r3, [pc, #224]	; (80106c0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7ec>)
 80105e0:	edd3 7a00 	vldr	s15, [r3]
 80105e4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80105e8:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80105ec:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	edd3 7a03 	vldr	s15, [r3, #12]
 80105f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80105fa:	ee77 7a27 	vadd.f32	s15, s14, s15
	H =
 80105fe:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010602:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8010606:	edc3 7a01 	vstr	s15, [r3, #4]
		2.0f*ry*_X.z - 2.0f*rz*_X.y, 2.0f*ry*_X.z + 2.0f*rz*_X.z, 2.0f*ry*_X.x - 2.0f*rz*_X.w, 2.0f*ry*_X.w + 2.0f*rz*_X.x,
 801060a:	4b2c      	ldr	r3, [pc, #176]	; (80106bc <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7e8>)
 801060c:	edd3 7a00 	vldr	s15, [r3]
 8010610:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8010614:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010618:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	edd3 7a01 	vldr	s15, [r3, #4]
 8010622:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010626:	4b26      	ldr	r3, [pc, #152]	; (80106c0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7ec>)
 8010628:	edd3 7a00 	vldr	s15, [r3]
 801062c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8010630:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010634:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	edd3 7a00 	vldr	s15, [r3]
 801063e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010642:	ee77 7a67 	vsub.f32	s15, s14, s15
	H =
 8010646:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801064a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 801064e:	edc3 7a02 	vstr	s15, [r3, #8]
		2.0f*ry*_X.z - 2.0f*rz*_X.y, 2.0f*ry*_X.z + 2.0f*rz*_X.z, 2.0f*ry*_X.x - 2.0f*rz*_X.w, 2.0f*ry*_X.w + 2.0f*rz*_X.x,
 8010652:	4b1a      	ldr	r3, [pc, #104]	; (80106bc <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7e8>)
 8010654:	edd3 7a00 	vldr	s15, [r3]
 8010658:	ee37 7aa7 	vadd.f32	s14, s15, s15
 801065c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010660:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	edd3 7a00 	vldr	s15, [r3]
 801066a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801066e:	4b14      	ldr	r3, [pc, #80]	; (80106c0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7ec>)
 8010670:	edd3 7a00 	vldr	s15, [r3]
 8010674:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8010678:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801067c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	edd3 7a01 	vldr	s15, [r3, #4]
 8010686:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801068a:	ee77 7a27 	vadd.f32	s15, s14, s15
	H =
 801068e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010692:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8010696:	edc3 7a03 	vstr	s15, [r3, #12]
		2.0f*ry*_X.w + 2.0f*rz*_X.x, -2.0f*ry*_X.x + 2.0f*rz*_X.w, 2.0f*ry*_X.y + 2.0f*rz*_X.z, -2.0f*ry*_X.z + 2.0f*rz*_X.y,
 801069a:	4b08      	ldr	r3, [pc, #32]	; (80106bc <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7e8>)
 801069c:	edd3 7a00 	vldr	s15, [r3]
 80106a0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80106a4:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80106a8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	edd3 7a00 	vldr	s15, [r3]
 80106b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80106b6:	e007      	b.n	80106c8 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7f4>
 80106b8:	240051a8 	.word	0x240051a8
 80106bc:	24005198 	.word	0x24005198
 80106c0:	240051a0 	.word	0x240051a0
 80106c4:	240051b8 	.word	0x240051b8
 80106c8:	4be0      	ldr	r3, [pc, #896]	; (8010a4c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb78>)
 80106ca:	edd3 7a00 	vldr	s15, [r3]
 80106ce:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80106d2:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80106d6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	edd3 7a01 	vldr	s15, [r3, #4]
 80106e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80106e4:	ee77 7a27 	vadd.f32	s15, s14, s15
	H =
 80106e8:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80106ec:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80106f0:	edc3 7a04 	vstr	s15, [r3, #16]
		2.0f*ry*_X.w + 2.0f*rz*_X.x, -2.0f*ry*_X.x + 2.0f*rz*_X.w, 2.0f*ry*_X.y + 2.0f*rz*_X.z, -2.0f*ry*_X.z + 2.0f*rz*_X.y,
 80106f4:	4bd6      	ldr	r3, [pc, #856]	; (8010a50 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb7c>)
 80106f6:	edd3 7a00 	vldr	s15, [r3]
 80106fa:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80106fe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010702:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010706:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	edd3 7a01 	vldr	s15, [r3, #4]
 8010710:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010714:	4bcd      	ldr	r3, [pc, #820]	; (8010a4c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb78>)
 8010716:	edd3 7a00 	vldr	s15, [r3]
 801071a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 801071e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010722:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	edd3 7a00 	vldr	s15, [r3]
 801072c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010730:	ee77 7a27 	vadd.f32	s15, s14, s15
	H =
 8010734:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010738:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 801073c:	edc3 7a05 	vstr	s15, [r3, #20]
		2.0f*ry*_X.w + 2.0f*rz*_X.x, -2.0f*ry*_X.x + 2.0f*rz*_X.w, 2.0f*ry*_X.y + 2.0f*rz*_X.z, -2.0f*ry*_X.z + 2.0f*rz*_X.y,
 8010740:	4bc3      	ldr	r3, [pc, #780]	; (8010a50 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb7c>)
 8010742:	edd3 7a00 	vldr	s15, [r3]
 8010746:	ee37 7aa7 	vadd.f32	s14, s15, s15
 801074a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801074e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	edd3 7a02 	vldr	s15, [r3, #8]
 8010758:	ee27 7a27 	vmul.f32	s14, s14, s15
 801075c:	4bbb      	ldr	r3, [pc, #748]	; (8010a4c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb78>)
 801075e:	edd3 7a00 	vldr	s15, [r3]
 8010762:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8010766:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801076a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	edd3 7a03 	vldr	s15, [r3, #12]
 8010774:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010778:	ee77 7a27 	vadd.f32	s15, s14, s15
	H =
 801077c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010780:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8010784:	edc3 7a06 	vstr	s15, [r3, #24]
		2.0f*ry*_X.w + 2.0f*rz*_X.x, -2.0f*ry*_X.x + 2.0f*rz*_X.w, 2.0f*ry*_X.y + 2.0f*rz*_X.z, -2.0f*ry*_X.z + 2.0f*rz*_X.y,
 8010788:	4bb1      	ldr	r3, [pc, #708]	; (8010a50 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb7c>)
 801078a:	edd3 7a00 	vldr	s15, [r3]
 801078e:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8010792:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010796:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801079a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	edd3 7a03 	vldr	s15, [r3, #12]
 80107a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80107a8:	4ba8      	ldr	r3, [pc, #672]	; (8010a4c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb78>)
 80107aa:	edd3 7a00 	vldr	s15, [r3]
 80107ae:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80107b2:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80107b6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	edd3 7a02 	vldr	s15, [r3, #8]
 80107c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80107c4:	ee77 7a27 	vadd.f32	s15, s14, s15
	H =
 80107c8:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80107cc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80107d0:	edc3 7a07 	vstr	s15, [r3, #28]
		-2.0f*ry*_X.x + 2.0f*rz*_X.w, -2.0f*ry*_X.w - 2.0f*rz*_X.x, 2.0f*ry*_X.z - 2.0f*rz*_X.y, 2.0f*ry*_X.y + 2.0f*rz*_X.z
 80107d4:	4b9e      	ldr	r3, [pc, #632]	; (8010a50 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb7c>)
 80107d6:	edd3 7a00 	vldr	s15, [r3]
 80107da:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80107de:	ee27 7a87 	vmul.f32	s14, s15, s14
 80107e2:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80107e6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80107f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80107f4:	4b95      	ldr	r3, [pc, #596]	; (8010a4c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb78>)
 80107f6:	edd3 7a00 	vldr	s15, [r3]
 80107fa:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80107fe:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010802:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	edd3 7a00 	vldr	s15, [r3]
 801080c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010810:	ee77 7a27 	vadd.f32	s15, s14, s15
	H =
 8010814:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010818:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 801081c:	edc3 7a08 	vstr	s15, [r3, #32]
		-2.0f*ry*_X.x + 2.0f*rz*_X.w, -2.0f*ry*_X.w - 2.0f*rz*_X.x, 2.0f*ry*_X.z - 2.0f*rz*_X.y, 2.0f*ry*_X.y + 2.0f*rz*_X.z
 8010820:	4b8b      	ldr	r3, [pc, #556]	; (8010a50 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb7c>)
 8010822:	edd3 7a00 	vldr	s15, [r3]
 8010826:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 801082a:	ee27 7a87 	vmul.f32	s14, s15, s14
 801082e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010832:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	edd3 7a00 	vldr	s15, [r3]
 801083c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010840:	4b82      	ldr	r3, [pc, #520]	; (8010a4c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb78>)
 8010842:	edd3 7a00 	vldr	s15, [r3]
 8010846:	ee77 6aa7 	vadd.f32	s13, s15, s15
 801084a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801084e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	edd3 7a01 	vldr	s15, [r3, #4]
 8010858:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801085c:	ee77 7a67 	vsub.f32	s15, s14, s15
	H =
 8010860:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010864:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8010868:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		-2.0f*ry*_X.x + 2.0f*rz*_X.w, -2.0f*ry*_X.w - 2.0f*rz*_X.x, 2.0f*ry*_X.z - 2.0f*rz*_X.y, 2.0f*ry*_X.y + 2.0f*rz*_X.z
 801086c:	4b78      	ldr	r3, [pc, #480]	; (8010a50 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb7c>)
 801086e:	edd3 7a00 	vldr	s15, [r3]
 8010872:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8010876:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801087a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	edd3 7a03 	vldr	s15, [r3, #12]
 8010884:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010888:	4b70      	ldr	r3, [pc, #448]	; (8010a4c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb78>)
 801088a:	edd3 7a00 	vldr	s15, [r3]
 801088e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8010892:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010896:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	edd3 7a02 	vldr	s15, [r3, #8]
 80108a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80108a4:	ee77 7a67 	vsub.f32	s15, s14, s15
	H =
 80108a8:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80108ac:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80108b0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		-2.0f*ry*_X.x + 2.0f*rz*_X.w, -2.0f*ry*_X.w - 2.0f*rz*_X.x, 2.0f*ry*_X.z - 2.0f*rz*_X.y, 2.0f*ry*_X.y + 2.0f*rz*_X.z
 80108b4:	4b66      	ldr	r3, [pc, #408]	; (8010a50 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb7c>)
 80108b6:	edd3 7a00 	vldr	s15, [r3]
 80108ba:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80108be:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80108c2:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80108cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80108d0:	4b5e      	ldr	r3, [pc, #376]	; (8010a4c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb78>)
 80108d2:	edd3 7a00 	vldr	s15, [r3]
 80108d6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80108da:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80108de:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	edd3 7a03 	vldr	s15, [r3, #12]
 80108e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80108ec:	ee77 7a27 	vadd.f32	s15, s14, s15
	H =
 80108f0:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80108f4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80108f8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
 80108fc:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8010900:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8010904:	4611      	mov	r1, r2
 8010906:	4618      	mov	r0, r3
 8010908:	f000 fea5 	bl	8011656 <_ZN3Mat6MatrixILt3ELt4EEC1ERKSt5arrayIfLj12EE>
 801090c:	4a51      	ldr	r2, [pc, #324]	; (8010a54 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb80>)
 801090e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010912:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8010916:	4614      	mov	r4, r2
 8010918:	461d      	mov	r5, r3
 801091a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801091c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801091e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010920:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010922:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8010926:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}};

	S = H*_P*H.Transposed() + R;
 801092a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801092e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	f103 0210 	add.w	r2, r3, #16
 8010938:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801093c:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8010940:	4944      	ldr	r1, [pc, #272]	; (8010a54 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb80>)
 8010942:	4618      	mov	r0, r3
 8010944:	f000 fe9e 	bl	8011684 <_ZNK3Mat6MatrixILt3ELt4EEmlILt4EEENS0_ILt3EXT_EEERKNS0_ILt4EXT_EEE>
 8010948:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801094c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8010950:	4940      	ldr	r1, [pc, #256]	; (8010a54 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb80>)
 8010952:	4618      	mov	r0, r3
 8010954:	f000 fea9 	bl	80116aa <_ZNK3Mat6MatrixILt3ELt4EE10TransposedEv>
 8010958:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801095c:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8010960:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
 8010964:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8010968:	4618      	mov	r0, r3
 801096a:	f000 fece 	bl	801170a <_ZNK3Mat6MatrixILt3ELt4EEmlILt3EEENS0_ILt3EXT_EEERKNS0_ILt4EXT_EEE>
 801096e:	4c3a      	ldr	r4, [pc, #232]	; (8010a58 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb84>)
 8010970:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010974:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8010978:	4a38      	ldr	r2, [pc, #224]	; (8010a5c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb88>)
 801097a:	4618      	mov	r0, r3
 801097c:	f000 fed8 	bl	8011730 <_ZNK3Mat6MatrixILt3ELt3EEplERKS1_>
 8010980:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010984:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8010988:	461d      	mov	r5, r3
 801098a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801098c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801098e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010990:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010992:	682b      	ldr	r3, [r5, #0]
 8010994:	6023      	str	r3, [r4, #0]
	K = _P*H.Transposed()*Inverse3_3Matrix(S);
 8010996:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801099a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	f103 0410 	add.w	r4, r3, #16
 80109a4:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 80109a8:	492a      	ldr	r1, [pc, #168]	; (8010a54 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb80>)
 80109aa:	4618      	mov	r0, r3
 80109ac:	f000 fe7d 	bl	80116aa <_ZNK3Mat6MatrixILt3ELt4EE10TransposedEv>
 80109b0:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80109b4:	f507 72d6 	add.w	r2, r7, #428	; 0x1ac
 80109b8:	4621      	mov	r1, r4
 80109ba:	4618      	mov	r0, r3
 80109bc:	f000 fed1 	bl	8011762 <_ZNK3Mat6MatrixILt4ELt4EEmlILt3EEENS0_ILt4EXT_EEERKS3_>
 80109c0:	4825      	ldr	r0, [pc, #148]	; (8010a58 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb84>)
 80109c2:	f7fe faf7 	bl	800efb4 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE>
 80109c6:	4602      	mov	r2, r0
 80109c8:	4c25      	ldr	r4, [pc, #148]	; (8010a60 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb8c>)
 80109ca:	463b      	mov	r3, r7
 80109cc:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 80109d0:	4618      	mov	r0, r3
 80109d2:	f000 fed9 	bl	8011788 <_ZNK3Mat6MatrixILt4ELt3EEmlILt3EEENS0_ILt4EXT_EEERKNS0_ILt3EXT_EEE>
 80109d6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80109da:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 80109de:	461d      	mov	r5, r3
 80109e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80109e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80109e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80109e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80109e8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80109ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	res = K*(Z - h);
 80109f0:	491c      	ldr	r1, [pc, #112]	; (8010a64 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb90>)
 80109f2:	481d      	ldr	r0, [pc, #116]	; (8010a68 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb94>)
 80109f4:	f7fe f973 	bl	800ecde <_ZNK3Mat6MatrixILt3ELt1EEmiERKS1_>
 80109f8:	eef0 6a40 	vmov.f32	s13, s0
 80109fc:	eeb0 7a60 	vmov.f32	s14, s1
 8010a00:	eef0 7a41 	vmov.f32	s15, s2
 8010a04:	edc7 6a77 	vstr	s13, [r7, #476]	; 0x1dc
 8010a08:	ed87 7a78 	vstr	s14, [r7, #480]	; 0x1e0
 8010a0c:	edc7 7a79 	vstr	s15, [r7, #484]	; 0x1e4
 8010a10:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8010a14:	4619      	mov	r1, r3
 8010a16:	4812      	ldr	r0, [pc, #72]	; (8010a60 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb8c>)
 8010a18:	f000 fec9 	bl	80117ae <_ZNK3Mat6MatrixILt4ELt3EEmlILt1EEENS0_ILt4EXT_EEERKNS0_ILt3EXT_EEE>
 8010a1c:	eeb0 6a40 	vmov.f32	s12, s0
 8010a20:	eef0 6a60 	vmov.f32	s13, s1
 8010a24:	eeb0 7a41 	vmov.f32	s14, s2
 8010a28:	eef0 7a61 	vmov.f32	s15, s3
 8010a2c:	4b0f      	ldr	r3, [pc, #60]	; (8010a6c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb98>)
 8010a2e:	ed83 6a00 	vstr	s12, [r3]
 8010a32:	edc3 6a01 	vstr	s13, [r3, #4]
 8010a36:	ed83 7a02 	vstr	s14, [r3, #8]
 8010a3a:	edc3 7a03 	vstr	s15, [r3, #12]
	add.w = res(0,0); add.x = res(1,0); add.y = res(2,0); add.z = res(3,0);
 8010a3e:	2200      	movs	r2, #0
 8010a40:	2100      	movs	r1, #0
 8010a42:	480a      	ldr	r0, [pc, #40]	; (8010a6c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb98>)
 8010a44:	f000 fee2 	bl	801180c <_ZN3Mat6MatrixILt4ELt1EEclEtt>
 8010a48:	4603      	mov	r3, r0
 8010a4a:	e011      	b.n	8010a70 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb9c>
 8010a4c:	240051a0 	.word	0x240051a0
 8010a50:	24005198 	.word	0x24005198
 8010a54:	240051c8 	.word	0x240051c8
 8010a58:	24005258 	.word	0x24005258
 8010a5c:	24005230 	.word	0x24005230
 8010a60:	240051fc 	.word	0x240051fc
 8010a64:	240051b8 	.word	0x240051b8
 8010a68:	240051a8 	.word	0x240051a8
 8010a6c:	240052c4 	.word	0x240052c4
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	4a39      	ldr	r2, [pc, #228]	; (8010b58 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xc84>)
 8010a74:	6013      	str	r3, [r2, #0]
 8010a76:	2200      	movs	r2, #0
 8010a78:	2101      	movs	r1, #1
 8010a7a:	4838      	ldr	r0, [pc, #224]	; (8010b5c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xc88>)
 8010a7c:	f000 fec6 	bl	801180c <_ZN3Mat6MatrixILt4ELt1EEclEtt>
 8010a80:	4603      	mov	r3, r0
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	4a34      	ldr	r2, [pc, #208]	; (8010b58 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xc84>)
 8010a86:	6053      	str	r3, [r2, #4]
 8010a88:	2200      	movs	r2, #0
 8010a8a:	2102      	movs	r1, #2
 8010a8c:	4833      	ldr	r0, [pc, #204]	; (8010b5c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xc88>)
 8010a8e:	f000 febd 	bl	801180c <_ZN3Mat6MatrixILt4ELt1EEclEtt>
 8010a92:	4603      	mov	r3, r0
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	4a30      	ldr	r2, [pc, #192]	; (8010b58 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xc84>)
 8010a98:	6093      	str	r3, [r2, #8]
 8010a9a:	2200      	movs	r2, #0
 8010a9c:	2103      	movs	r1, #3
 8010a9e:	482f      	ldr	r0, [pc, #188]	; (8010b5c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xc88>)
 8010aa0:	f000 feb4 	bl	801180c <_ZN3Mat6MatrixILt4ELt1EEclEtt>
 8010aa4:	4603      	mov	r3, r0
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	4a2b      	ldr	r2, [pc, #172]	; (8010b58 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xc84>)
 8010aaa:	60d3      	str	r3, [r2, #12]
	_X = _X + add;
 8010aac:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010ab0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010ab4:	681a      	ldr	r2, [r3, #0]
 8010ab6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010aba:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010abe:	681c      	ldr	r4, [r3, #0]
 8010ac0:	4925      	ldr	r1, [pc, #148]	; (8010b58 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xc84>)
 8010ac2:	4610      	mov	r0, r2
 8010ac4:	f005 f919 	bl	8015cfa <_ZNK3Mat10QuaternionplERKS0_>
 8010ac8:	eeb0 6a40 	vmov.f32	s12, s0
 8010acc:	eef0 6a60 	vmov.f32	s13, s1
 8010ad0:	eeb0 7a41 	vmov.f32	s14, s2
 8010ad4:	eef0 7a61 	vmov.f32	s15, s3
 8010ad8:	ed84 6a00 	vstr	s12, [r4]
 8010adc:	edc4 6a01 	vstr	s13, [r4, #4]
 8010ae0:	ed84 7a02 	vstr	s14, [r4, #8]
 8010ae4:	edc4 7a03 	vstr	s15, [r4, #12]
	_P = (I - K*H)*_P;
 8010ae8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8010aec:	4a1c      	ldr	r2, [pc, #112]	; (8010b60 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xc8c>)
 8010aee:	491d      	ldr	r1, [pc, #116]	; (8010b64 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xc90>)
 8010af0:	4618      	mov	r0, r3
 8010af2:	f000 fcef 	bl	80114d4 <_ZNK3Mat6MatrixILt4ELt3EEmlILt4EEENS0_ILt4EXT_EEERKNS0_ILt3EXT_EEE>
 8010af6:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8010afa:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8010afe:	491a      	ldr	r1, [pc, #104]	; (8010b68 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xc94>)
 8010b00:	4618      	mov	r0, r3
 8010b02:	f000 fe99 	bl	8011838 <_ZNK3Mat6MatrixILt4ELt4EEmiERKS1_>
 8010b06:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010b0a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	f103 0210 	add.w	r2, r3, #16
 8010b14:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010b18:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010b1c:	681c      	ldr	r4, [r3, #0]
 8010b1e:	463b      	mov	r3, r7
 8010b20:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8010b24:	4618      	mov	r0, r3
 8010b26:	f000 fd20 	bl	801156a <_ZNK3Mat6MatrixILt4ELt4EEmlILt4EEENS0_ILt4EXT_EEERKS3_>
 8010b2a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010b2e:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8010b32:	3410      	adds	r4, #16
 8010b34:	461d      	mov	r5, r3
 8010b36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010b38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010b3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010b3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010b3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010b40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010b42:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8010b46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8010b4a:	bf00      	nop
 8010b4c:	f507 771c 	add.w	r7, r7, #624	; 0x270
 8010b50:	46bd      	mov	sp, r7
 8010b52:	ecbd 8b02 	vpop	{d8}
 8010b56:	bdb0      	pop	{r4, r5, r7, pc}
 8010b58:	240052d8 	.word	0x240052d8
 8010b5c:	240052c4 	.word	0x240052c4
 8010b60:	240051c8 	.word	0x240051c8
 8010b64:	240051fc 	.word	0x240051fc
 8010b68:	24005280 	.word	0x24005280

08010b6c <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf>:

void AHRSKalman::CorrectStateAcc(const Matrix<3, 1>& acc, float time)
{
 8010b6c:	b5b0      	push	{r4, r5, r7, lr}
 8010b6e:	ed2d 8b02 	vpush	{d8}
 8010b72:	f5ad 7d1c 	sub.w	sp, sp, #624	; 0x270
 8010b76:	af00      	add	r7, sp, #0
 8010b78:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010b7c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010b80:	6018      	str	r0, [r3, #0]
 8010b82:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010b86:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8010b8a:	6019      	str	r1, [r3, #0]
 8010b8c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010b90:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8010b94:	ed83 0a00 	vstr	s0, [r3]
	static const float gz{1.0f};
	static const float gz2 = 2.0f*gz;
	static Matrix<3, 1> Z;
 8010b98:	4b7e      	ldr	r3, [pc, #504]	; (8010d94 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x228>)
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	f3bf 8f5b 	dmb	ish
 8010ba0:	f003 0301 	and.w	r3, r3, #1
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	bf0c      	ite	eq
 8010ba8:	2301      	moveq	r3, #1
 8010baa:	2300      	movne	r3, #0
 8010bac:	b2db      	uxtb	r3, r3
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d010      	beq.n	8010bd4 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x68>
 8010bb2:	4878      	ldr	r0, [pc, #480]	; (8010d94 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x228>)
 8010bb4:	f008 fc68 	bl	8019488 <__cxa_guard_acquire>
 8010bb8:	4603      	mov	r3, r0
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	bf14      	ite	ne
 8010bbe:	2301      	movne	r3, #1
 8010bc0:	2300      	moveq	r3, #0
 8010bc2:	b2db      	uxtb	r3, r3
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d005      	beq.n	8010bd4 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x68>
 8010bc8:	4873      	ldr	r0, [pc, #460]	; (8010d98 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x22c>)
 8010bca:	f7fc fd62 	bl	800d692 <_ZN3Mat6MatrixILt3ELt1EEC1Ev>
 8010bce:	4871      	ldr	r0, [pc, #452]	; (8010d94 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x228>)
 8010bd0:	f008 fc66 	bl	80194a0 <__cxa_guard_release>
	static Matrix<3, 1> h;
 8010bd4:	4b71      	ldr	r3, [pc, #452]	; (8010d9c <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x230>)
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	f3bf 8f5b 	dmb	ish
 8010bdc:	f003 0301 	and.w	r3, r3, #1
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	bf0c      	ite	eq
 8010be4:	2301      	moveq	r3, #1
 8010be6:	2300      	movne	r3, #0
 8010be8:	b2db      	uxtb	r3, r3
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d010      	beq.n	8010c10 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0xa4>
 8010bee:	486b      	ldr	r0, [pc, #428]	; (8010d9c <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x230>)
 8010bf0:	f008 fc4a 	bl	8019488 <__cxa_guard_acquire>
 8010bf4:	4603      	mov	r3, r0
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	bf14      	ite	ne
 8010bfa:	2301      	movne	r3, #1
 8010bfc:	2300      	moveq	r3, #0
 8010bfe:	b2db      	uxtb	r3, r3
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d005      	beq.n	8010c10 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0xa4>
 8010c04:	4866      	ldr	r0, [pc, #408]	; (8010da0 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x234>)
 8010c06:	f7fc fd44 	bl	800d692 <_ZN3Mat6MatrixILt3ELt1EEC1Ev>
 8010c0a:	4864      	ldr	r0, [pc, #400]	; (8010d9c <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x230>)
 8010c0c:	f008 fc48 	bl	80194a0 <__cxa_guard_release>
	static Matrix<3, 4> H;
 8010c10:	4b64      	ldr	r3, [pc, #400]	; (8010da4 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x238>)
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	f3bf 8f5b 	dmb	ish
 8010c18:	f003 0301 	and.w	r3, r3, #1
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	bf0c      	ite	eq
 8010c20:	2301      	moveq	r3, #1
 8010c22:	2300      	movne	r3, #0
 8010c24:	b2db      	uxtb	r3, r3
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d010      	beq.n	8010c4c <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0xe0>
 8010c2a:	485e      	ldr	r0, [pc, #376]	; (8010da4 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x238>)
 8010c2c:	f008 fc2c 	bl	8019488 <__cxa_guard_acquire>
 8010c30:	4603      	mov	r3, r0
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	bf14      	ite	ne
 8010c36:	2301      	movne	r3, #1
 8010c38:	2300      	moveq	r3, #0
 8010c3a:	b2db      	uxtb	r3, r3
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d005      	beq.n	8010c4c <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0xe0>
 8010c40:	4859      	ldr	r0, [pc, #356]	; (8010da8 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x23c>)
 8010c42:	f000 fcf2 	bl	801162a <_ZN3Mat6MatrixILt3ELt4EEC1Ev>
 8010c46:	4857      	ldr	r0, [pc, #348]	; (8010da4 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x238>)
 8010c48:	f008 fc2a 	bl	80194a0 <__cxa_guard_release>
	static Matrix<4, 3> K;
 8010c4c:	4b57      	ldr	r3, [pc, #348]	; (8010dac <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x240>)
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	f3bf 8f5b 	dmb	ish
 8010c54:	f003 0301 	and.w	r3, r3, #1
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	bf0c      	ite	eq
 8010c5c:	2301      	moveq	r3, #1
 8010c5e:	2300      	movne	r3, #0
 8010c60:	b2db      	uxtb	r3, r3
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d010      	beq.n	8010c88 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x11c>
 8010c66:	4851      	ldr	r0, [pc, #324]	; (8010dac <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x240>)
 8010c68:	f008 fc0e 	bl	8019488 <__cxa_guard_acquire>
 8010c6c:	4603      	mov	r3, r0
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	bf14      	ite	ne
 8010c72:	2301      	movne	r3, #1
 8010c74:	2300      	moveq	r3, #0
 8010c76:	b2db      	uxtb	r3, r3
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d005      	beq.n	8010c88 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x11c>
 8010c7c:	484c      	ldr	r0, [pc, #304]	; (8010db0 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x244>)
 8010c7e:	f000 fbd7 	bl	8011430 <_ZN3Mat6MatrixILt4ELt3EEC1Ev>
 8010c82:	484a      	ldr	r0, [pc, #296]	; (8010dac <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x240>)
 8010c84:	f008 fc0c 	bl	80194a0 <__cxa_guard_release>
	static const Matrix<3, 3> R = Eye<3>(_accNoiseVariance);
 8010c88:	4b4a      	ldr	r3, [pc, #296]	; (8010db4 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x248>)
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	f3bf 8f5b 	dmb	ish
 8010c90:	f003 0301 	and.w	r3, r3, #1
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	bf0c      	ite	eq
 8010c98:	2301      	moveq	r3, #1
 8010c9a:	2300      	movne	r3, #0
 8010c9c:	b2db      	uxtb	r3, r3
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d01a      	beq.n	8010cd8 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x16c>
 8010ca2:	4844      	ldr	r0, [pc, #272]	; (8010db4 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x248>)
 8010ca4:	f008 fbf0 	bl	8019488 <__cxa_guard_acquire>
 8010ca8:	4603      	mov	r3, r0
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	bf14      	ite	ne
 8010cae:	2301      	movne	r3, #1
 8010cb0:	2300      	moveq	r3, #0
 8010cb2:	b2db      	uxtb	r3, r3
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d00f      	beq.n	8010cd8 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x16c>
 8010cb8:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010cbc:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8010cc6:	4b3c      	ldr	r3, [pc, #240]	; (8010db8 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x24c>)
 8010cc8:	eeb0 0a67 	vmov.f32	s0, s15
 8010ccc:	4618      	mov	r0, r3
 8010cce:	f7fc fb9b 	bl	800d408 <_ZN3Mat3EyeILt3EEENS_6MatrixIXT_EXT_EEEf>
 8010cd2:	4838      	ldr	r0, [pc, #224]	; (8010db4 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x248>)
 8010cd4:	f008 fbe4 	bl	80194a0 <__cxa_guard_release>
	static Matrix<3, 3> S;
 8010cd8:	4b38      	ldr	r3, [pc, #224]	; (8010dbc <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x250>)
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	f3bf 8f5b 	dmb	ish
 8010ce0:	f003 0301 	and.w	r3, r3, #1
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	bf0c      	ite	eq
 8010ce8:	2301      	moveq	r3, #1
 8010cea:	2300      	movne	r3, #0
 8010cec:	b2db      	uxtb	r3, r3
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d010      	beq.n	8010d14 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x1a8>
 8010cf2:	4832      	ldr	r0, [pc, #200]	; (8010dbc <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x250>)
 8010cf4:	f008 fbc8 	bl	8019488 <__cxa_guard_acquire>
 8010cf8:	4603      	mov	r3, r0
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	bf14      	ite	ne
 8010cfe:	2301      	movne	r3, #1
 8010d00:	2300      	moveq	r3, #0
 8010d02:	b2db      	uxtb	r3, r3
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d005      	beq.n	8010d14 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x1a8>
 8010d08:	482d      	ldr	r0, [pc, #180]	; (8010dc0 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x254>)
 8010d0a:	f7fc fb65 	bl	800d3d8 <_ZN3Mat6MatrixILt3ELt3EEC1Ev>
 8010d0e:	482b      	ldr	r0, [pc, #172]	; (8010dbc <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x250>)
 8010d10:	f008 fbc6 	bl	80194a0 <__cxa_guard_release>
	static Matrix<4, 4> I = Eye<4>();
 8010d14:	4b2b      	ldr	r3, [pc, #172]	; (8010dc4 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x258>)
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	f3bf 8f5b 	dmb	ish
 8010d1c:	f003 0301 	and.w	r3, r3, #1
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	bf0c      	ite	eq
 8010d24:	2301      	moveq	r3, #1
 8010d26:	2300      	movne	r3, #0
 8010d28:	b2db      	uxtb	r3, r3
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d013      	beq.n	8010d56 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x1ea>
 8010d2e:	4825      	ldr	r0, [pc, #148]	; (8010dc4 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x258>)
 8010d30:	f008 fbaa 	bl	8019488 <__cxa_guard_acquire>
 8010d34:	4603      	mov	r3, r0
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	bf14      	ite	ne
 8010d3a:	2301      	movne	r3, #1
 8010d3c:	2300      	moveq	r3, #0
 8010d3e:	b2db      	uxtb	r3, r3
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d008      	beq.n	8010d56 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x1ea>
 8010d44:	4b20      	ldr	r3, [pc, #128]	; (8010dc8 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x25c>)
 8010d46:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	f7fc fad4 	bl	800d2f8 <_ZN3Mat3EyeILt4EEENS_6MatrixIXT_EXT_EEEf>
 8010d50:	481c      	ldr	r0, [pc, #112]	; (8010dc4 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x258>)
 8010d52:	f008 fba5 	bl	80194a0 <__cxa_guard_release>
	static Matrix<4, 1> res;
 8010d56:	4b1d      	ldr	r3, [pc, #116]	; (8010dcc <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x260>)
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	f3bf 8f5b 	dmb	ish
 8010d5e:	f003 0301 	and.w	r3, r3, #1
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	bf0c      	ite	eq
 8010d66:	2301      	moveq	r3, #1
 8010d68:	2300      	movne	r3, #0
 8010d6a:	b2db      	uxtb	r3, r3
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d031      	beq.n	8010dd4 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x268>
 8010d70:	4816      	ldr	r0, [pc, #88]	; (8010dcc <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x260>)
 8010d72:	f008 fb89 	bl	8019488 <__cxa_guard_acquire>
 8010d76:	4603      	mov	r3, r0
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	bf14      	ite	ne
 8010d7c:	2301      	movne	r3, #1
 8010d7e:	2300      	moveq	r3, #0
 8010d80:	b2db      	uxtb	r3, r3
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d026      	beq.n	8010dd4 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x268>
 8010d86:	4812      	ldr	r0, [pc, #72]	; (8010dd0 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x264>)
 8010d88:	f000 fc5a 	bl	8011640 <_ZN3Mat6MatrixILt4ELt1EEC1Ev>
 8010d8c:	480f      	ldr	r0, [pc, #60]	; (8010dcc <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x260>)
 8010d8e:	f008 fb87 	bl	80194a0 <__cxa_guard_release>
 8010d92:	e01f      	b.n	8010dd4 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x268>
 8010d94:	240052f4 	.word	0x240052f4
 8010d98:	240052e8 	.word	0x240052e8
 8010d9c:	24005304 	.word	0x24005304
 8010da0:	240052f8 	.word	0x240052f8
 8010da4:	24005338 	.word	0x24005338
 8010da8:	24005308 	.word	0x24005308
 8010dac:	2400536c 	.word	0x2400536c
 8010db0:	2400533c 	.word	0x2400533c
 8010db4:	24005394 	.word	0x24005394
 8010db8:	24005370 	.word	0x24005370
 8010dbc:	240053bc 	.word	0x240053bc
 8010dc0:	24005398 	.word	0x24005398
 8010dc4:	24005400 	.word	0x24005400
 8010dc8:	240053c0 	.word	0x240053c0
 8010dcc:	24005414 	.word	0x24005414
 8010dd0:	24005404 	.word	0x24005404
	static Quaternion add;

	float gd = 1.0f / sqrt(acc(0,0)*acc(0,0) + acc(1,0)*acc(1,0) + acc(2,0)*acc(2,0));
 8010dd4:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010dd8:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8010ddc:	2200      	movs	r2, #0
 8010dde:	2100      	movs	r1, #0
 8010de0:	6818      	ldr	r0, [r3, #0]
 8010de2:	f7fc fe99 	bl	800db18 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8010de6:	eeb0 8a40 	vmov.f32	s16, s0
 8010dea:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010dee:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8010df2:	2200      	movs	r2, #0
 8010df4:	2100      	movs	r1, #0
 8010df6:	6818      	ldr	r0, [r3, #0]
 8010df8:	f7fc fe8e 	bl	800db18 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8010dfc:	eef0 7a40 	vmov.f32	s15, s0
 8010e00:	ee28 8a27 	vmul.f32	s16, s16, s15
 8010e04:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010e08:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8010e0c:	2200      	movs	r2, #0
 8010e0e:	2101      	movs	r1, #1
 8010e10:	6818      	ldr	r0, [r3, #0]
 8010e12:	f7fc fe81 	bl	800db18 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8010e16:	eef0 8a40 	vmov.f32	s17, s0
 8010e1a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010e1e:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8010e22:	2200      	movs	r2, #0
 8010e24:	2101      	movs	r1, #1
 8010e26:	6818      	ldr	r0, [r3, #0]
 8010e28:	f7fc fe76 	bl	800db18 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8010e2c:	eef0 7a40 	vmov.f32	s15, s0
 8010e30:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8010e34:	ee38 8a27 	vadd.f32	s16, s16, s15
 8010e38:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010e3c:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8010e40:	2200      	movs	r2, #0
 8010e42:	2102      	movs	r1, #2
 8010e44:	6818      	ldr	r0, [r3, #0]
 8010e46:	f7fc fe67 	bl	800db18 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8010e4a:	eef0 8a40 	vmov.f32	s17, s0
 8010e4e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010e52:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8010e56:	2200      	movs	r2, #0
 8010e58:	2102      	movs	r1, #2
 8010e5a:	6818      	ldr	r0, [r3, #0]
 8010e5c:	f7fc fe5c 	bl	800db18 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8010e60:	eef0 7a40 	vmov.f32	s15, s0
 8010e64:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8010e68:	ee78 7a27 	vadd.f32	s15, s16, s15
 8010e6c:	eeb0 0a67 	vmov.f32	s0, s15
 8010e70:	f7fe f86a 	bl	800ef48 <_ZSt4sqrtf>
 8010e74:	eeb0 7a40 	vmov.f32	s14, s0
 8010e78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010e7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010e80:	edc7 7a9b 	vstr	s15, [r7, #620]	; 0x26c
	Z =
	{{
		acc(0,0)*gd,
 8010e84:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010e88:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8010e8c:	2200      	movs	r2, #0
 8010e8e:	2100      	movs	r1, #0
 8010e90:	6818      	ldr	r0, [r3, #0]
 8010e92:	f7fc fe41 	bl	800db18 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8010e96:	eeb0 7a40 	vmov.f32	s14, s0
 8010e9a:	edd7 7a9b 	vldr	s15, [r7, #620]	; 0x26c
 8010e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
	Z =
 8010ea2:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010ea6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8010eaa:	edc3 7a00 	vstr	s15, [r3]
		acc(1,0)*gd,
 8010eae:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010eb2:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8010eb6:	2200      	movs	r2, #0
 8010eb8:	2101      	movs	r1, #1
 8010eba:	6818      	ldr	r0, [r3, #0]
 8010ebc:	f7fc fe2c 	bl	800db18 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8010ec0:	eeb0 7a40 	vmov.f32	s14, s0
 8010ec4:	edd7 7a9b 	vldr	s15, [r7, #620]	; 0x26c
 8010ec8:	ee67 7a27 	vmul.f32	s15, s14, s15
	Z =
 8010ecc:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010ed0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8010ed4:	edc3 7a01 	vstr	s15, [r3, #4]
		acc(2,0)*gd
 8010ed8:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010edc:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8010ee0:	2200      	movs	r2, #0
 8010ee2:	2102      	movs	r1, #2
 8010ee4:	6818      	ldr	r0, [r3, #0]
 8010ee6:	f7fc fe17 	bl	800db18 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8010eea:	eeb0 7a40 	vmov.f32	s14, s0
 8010eee:	edd7 7a9b 	vldr	s15, [r7, #620]	; 0x26c
 8010ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
	Z =
 8010ef6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010efa:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8010efe:	edc3 7a02 	vstr	s15, [r3, #8]
 8010f02:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8010f06:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010f0a:	4611      	mov	r1, r2
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	f7fc faab 	bl	800d468 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
 8010f12:	49e6      	ldr	r1, [pc, #920]	; (80112ac <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x740>)
 8010f14:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010f18:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 8010f1c:	460b      	mov	r3, r1
 8010f1e:	ca07      	ldmia	r2, {r0, r1, r2}
 8010f20:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	}};

	h =
	{{
		gz2*(_X.x*_X.z - _X.w*_X.y),
 8010f24:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010f28:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	ed93 7a01 	vldr	s14, [r3, #4]
 8010f32:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010f36:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	edd3 7a03 	vldr	s15, [r3, #12]
 8010f40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010f44:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010f48:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	edd3 6a00 	vldr	s13, [r3]
 8010f52:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010f56:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	edd3 7a02 	vldr	s15, [r3, #8]
 8010f60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010f64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010f68:	ee77 7aa7 	vadd.f32	s15, s15, s15
	h =
 8010f6c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010f70:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8010f74:	edc3 7a00 	vstr	s15, [r3]
		gz2*(_X.w*_X.x + _X.y*_X.z),
 8010f78:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010f7c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	ed93 7a00 	vldr	s14, [r3]
 8010f86:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010f8a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	edd3 7a01 	vldr	s15, [r3, #4]
 8010f94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010f98:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010f9c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	edd3 6a02 	vldr	s13, [r3, #8]
 8010fa6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010faa:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	edd3 7a03 	vldr	s15, [r3, #12]
 8010fb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010fb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010fbc:	ee77 7aa7 	vadd.f32	s15, s15, s15
	h =
 8010fc0:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010fc4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8010fc8:	edc3 7a01 	vstr	s15, [r3, #4]
		gz2*(0.5f - _X.x*_X.x - _X.y*_X.y)
 8010fcc:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010fd0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	ed93 7a01 	vldr	s14, [r3, #4]
 8010fda:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010fde:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	edd3 7a01 	vldr	s15, [r3, #4]
 8010fe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010fec:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8010ff0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010ff4:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010ff8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	edd3 6a02 	vldr	s13, [r3, #8]
 8011002:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8011006:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	edd3 7a02 	vldr	s15, [r3, #8]
 8011010:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011014:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011018:	ee77 7aa7 	vadd.f32	s15, s15, s15
	h =
 801101c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8011020:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8011024:	edc3 7a02 	vstr	s15, [r3, #8]
 8011028:	f107 0290 	add.w	r2, r7, #144	; 0x90
 801102c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8011030:	4611      	mov	r1, r2
 8011032:	4618      	mov	r0, r3
 8011034:	f7fc fa18 	bl	800d468 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
 8011038:	499d      	ldr	r1, [pc, #628]	; (80112b0 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x744>)
 801103a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801103e:	f5a3 72f6 	sub.w	r2, r3, #492	; 0x1ec
 8011042:	460b      	mov	r3, r1
 8011044:	ca07      	ldmia	r2, {r0, r1, r2}
 8011046:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	}};

	H =
	{{
		-gz2*_X.y, gz2*_X.z, -gz2*_X.w, gz2*_X.x,
 801104a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801104e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	edd3 7a02 	vldr	s15, [r3, #8]
 8011058:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 801105c:	ee67 7a87 	vmul.f32	s15, s15, s14
	H =
 8011060:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8011064:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8011068:	edc3 7a00 	vstr	s15, [r3]
		-gz2*_X.y, gz2*_X.z, -gz2*_X.w, gz2*_X.x,
 801106c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8011070:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	edd3 7a03 	vldr	s15, [r3, #12]
 801107a:	ee77 7aa7 	vadd.f32	s15, s15, s15
	H =
 801107e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8011082:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8011086:	edc3 7a01 	vstr	s15, [r3, #4]
		-gz2*_X.y, gz2*_X.z, -gz2*_X.w, gz2*_X.x,
 801108a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801108e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	edd3 7a00 	vldr	s15, [r3]
 8011098:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 801109c:	ee67 7a87 	vmul.f32	s15, s15, s14
	H =
 80110a0:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80110a4:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80110a8:	edc3 7a02 	vstr	s15, [r3, #8]
		-gz2*_X.y, gz2*_X.z, -gz2*_X.w, gz2*_X.x,
 80110ac:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80110b0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80110ba:	ee77 7aa7 	vadd.f32	s15, s15, s15
	H =
 80110be:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80110c2:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80110c6:	edc3 7a03 	vstr	s15, [r3, #12]
		gz2*_X.x, gz2*_X.w, gz2*_X.z, gz2*_X.y,
 80110ca:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80110ce:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	edd3 7a01 	vldr	s15, [r3, #4]
 80110d8:	ee77 7aa7 	vadd.f32	s15, s15, s15
	H =
 80110dc:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80110e0:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80110e4:	edc3 7a04 	vstr	s15, [r3, #16]
		gz2*_X.x, gz2*_X.w, gz2*_X.z, gz2*_X.y,
 80110e8:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80110ec:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	edd3 7a00 	vldr	s15, [r3]
 80110f6:	ee77 7aa7 	vadd.f32	s15, s15, s15
	H =
 80110fa:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80110fe:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8011102:	edc3 7a05 	vstr	s15, [r3, #20]
		gz2*_X.x, gz2*_X.w, gz2*_X.z, gz2*_X.y,
 8011106:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801110a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	edd3 7a03 	vldr	s15, [r3, #12]
 8011114:	ee77 7aa7 	vadd.f32	s15, s15, s15
	H =
 8011118:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801111c:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8011120:	edc3 7a06 	vstr	s15, [r3, #24]
		gz2*_X.x, gz2*_X.w, gz2*_X.z, gz2*_X.y,
 8011124:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8011128:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	edd3 7a02 	vldr	s15, [r3, #8]
 8011132:	ee77 7aa7 	vadd.f32	s15, s15, s15
	H =
 8011136:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801113a:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 801113e:	edc3 7a07 	vstr	s15, [r3, #28]
		gz2*_X.w, -gz2*_X.x, -gz2*_X.y, gz2*_X.z
 8011142:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8011146:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	edd3 7a00 	vldr	s15, [r3]
 8011150:	ee77 7aa7 	vadd.f32	s15, s15, s15
	H =
 8011154:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8011158:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 801115c:	edc3 7a08 	vstr	s15, [r3, #32]
		gz2*_X.w, -gz2*_X.x, -gz2*_X.y, gz2*_X.z
 8011160:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8011164:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	edd3 7a01 	vldr	s15, [r3, #4]
 801116e:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8011172:	ee67 7a87 	vmul.f32	s15, s15, s14
	H =
 8011176:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801117a:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 801117e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		gz2*_X.w, -gz2*_X.x, -gz2*_X.y, gz2*_X.z
 8011182:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8011186:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	edd3 7a02 	vldr	s15, [r3, #8]
 8011190:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8011194:	ee67 7a87 	vmul.f32	s15, s15, s14
	H =
 8011198:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801119c:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80111a0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		gz2*_X.w, -gz2*_X.x, -gz2*_X.y, gz2*_X.z
 80111a4:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80111a8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	edd3 7a03 	vldr	s15, [r3, #12]
 80111b2:	ee77 7aa7 	vadd.f32	s15, s15, s15
	H =
 80111b6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80111ba:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80111be:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
 80111c2:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 80111c6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80111ca:	4611      	mov	r1, r2
 80111cc:	4618      	mov	r0, r3
 80111ce:	f000 fa42 	bl	8011656 <_ZN3Mat6MatrixILt3ELt4EEC1ERKSt5arrayIfLj12EE>
 80111d2:	4a38      	ldr	r2, [pc, #224]	; (80112b4 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x748>)
 80111d4:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80111d8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80111dc:	4614      	mov	r4, r2
 80111de:	461d      	mov	r5, r3
 80111e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80111e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80111e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80111e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80111e8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80111ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}};

	S = H*_P*H.Transposed() + R;
 80111f0:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80111f4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	f103 0210 	add.w	r2, r3, #16
 80111fe:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8011202:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8011206:	492b      	ldr	r1, [pc, #172]	; (80112b4 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x748>)
 8011208:	4618      	mov	r0, r3
 801120a:	f000 fa3b 	bl	8011684 <_ZNK3Mat6MatrixILt3ELt4EEmlILt4EEENS0_ILt3EXT_EEERKNS0_ILt4EXT_EEE>
 801120e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8011212:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8011216:	4927      	ldr	r1, [pc, #156]	; (80112b4 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x748>)
 8011218:	4618      	mov	r0, r3
 801121a:	f000 fa46 	bl	80116aa <_ZNK3Mat6MatrixILt3ELt4EE10TransposedEv>
 801121e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8011222:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8011226:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 801122a:	f507 7190 	add.w	r1, r7, #288	; 0x120
 801122e:	4618      	mov	r0, r3
 8011230:	f000 fa6b 	bl	801170a <_ZNK3Mat6MatrixILt3ELt4EEmlILt3EEENS0_ILt3EXT_EEERKNS0_ILt4EXT_EEE>
 8011234:	4c20      	ldr	r4, [pc, #128]	; (80112b8 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x74c>)
 8011236:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801123a:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 801123e:	4a1f      	ldr	r2, [pc, #124]	; (80112bc <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x750>)
 8011240:	4618      	mov	r0, r3
 8011242:	f000 fa75 	bl	8011730 <_ZNK3Mat6MatrixILt3ELt3EEplERKS1_>
 8011246:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801124a:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 801124e:	461d      	mov	r5, r3
 8011250:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011252:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011254:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011256:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011258:	682b      	ldr	r3, [r5, #0]
 801125a:	6023      	str	r3, [r4, #0]
	K = _P*H.Transposed()*Inverse3_3Matrix(S);
 801125c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8011260:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	f103 0410 	add.w	r4, r3, #16
 801126a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 801126e:	4911      	ldr	r1, [pc, #68]	; (80112b4 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x748>)
 8011270:	4618      	mov	r0, r3
 8011272:	f000 fa1a 	bl	80116aa <_ZNK3Mat6MatrixILt3ELt4EE10TransposedEv>
 8011276:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 801127a:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 801127e:	4621      	mov	r1, r4
 8011280:	4618      	mov	r0, r3
 8011282:	f000 fa6e 	bl	8011762 <_ZNK3Mat6MatrixILt4ELt4EEmlILt3EEENS0_ILt4EXT_EEERKS3_>
 8011286:	480c      	ldr	r0, [pc, #48]	; (80112b8 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x74c>)
 8011288:	f7fd fe94 	bl	800efb4 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE>
 801128c:	4602      	mov	r2, r0
 801128e:	4c0c      	ldr	r4, [pc, #48]	; (80112c0 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x754>)
 8011290:	463b      	mov	r3, r7
 8011292:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 8011296:	4618      	mov	r0, r3
 8011298:	f000 fa76 	bl	8011788 <_ZNK3Mat6MatrixILt4ELt3EEmlILt3EEENS0_ILt4EXT_EEERKNS0_ILt3EXT_EEE>
 801129c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80112a0:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 80112a4:	461d      	mov	r5, r3
 80112a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80112a8:	e00c      	b.n	80112c4 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x758>
 80112aa:	bf00      	nop
 80112ac:	240052e8 	.word	0x240052e8
 80112b0:	240052f8 	.word	0x240052f8
 80112b4:	24005308 	.word	0x24005308
 80112b8:	24005398 	.word	0x24005398
 80112bc:	24005370 	.word	0x24005370
 80112c0:	2400533c 	.word	0x2400533c
 80112c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80112c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80112c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80112ca:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80112ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	res = K*(Z - h);
 80112d2:	4950      	ldr	r1, [pc, #320]	; (8011414 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8a8>)
 80112d4:	4850      	ldr	r0, [pc, #320]	; (8011418 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8ac>)
 80112d6:	f7fd fd02 	bl	800ecde <_ZNK3Mat6MatrixILt3ELt1EEmiERKS1_>
 80112da:	eef0 6a40 	vmov.f32	s13, s0
 80112de:	eeb0 7a60 	vmov.f32	s14, s1
 80112e2:	eef0 7a41 	vmov.f32	s15, s2
 80112e6:	edc7 6a78 	vstr	s13, [r7, #480]	; 0x1e0
 80112ea:	ed87 7a79 	vstr	s14, [r7, #484]	; 0x1e4
 80112ee:	edc7 7a7a 	vstr	s15, [r7, #488]	; 0x1e8
 80112f2:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80112f6:	4619      	mov	r1, r3
 80112f8:	4848      	ldr	r0, [pc, #288]	; (801141c <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8b0>)
 80112fa:	f000 fa58 	bl	80117ae <_ZNK3Mat6MatrixILt4ELt3EEmlILt1EEENS0_ILt4EXT_EEERKNS0_ILt3EXT_EEE>
 80112fe:	eeb0 6a40 	vmov.f32	s12, s0
 8011302:	eef0 6a60 	vmov.f32	s13, s1
 8011306:	eeb0 7a41 	vmov.f32	s14, s2
 801130a:	eef0 7a61 	vmov.f32	s15, s3
 801130e:	4b44      	ldr	r3, [pc, #272]	; (8011420 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8b4>)
 8011310:	ed83 6a00 	vstr	s12, [r3]
 8011314:	edc3 6a01 	vstr	s13, [r3, #4]
 8011318:	ed83 7a02 	vstr	s14, [r3, #8]
 801131c:	edc3 7a03 	vstr	s15, [r3, #12]
	add.w = res(0,0); add.x = res(1,0); add.y = res(2,0); add.z = res(3,0);
 8011320:	2200      	movs	r2, #0
 8011322:	2100      	movs	r1, #0
 8011324:	483e      	ldr	r0, [pc, #248]	; (8011420 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8b4>)
 8011326:	f000 fa71 	bl	801180c <_ZN3Mat6MatrixILt4ELt1EEclEtt>
 801132a:	4603      	mov	r3, r0
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	4a3d      	ldr	r2, [pc, #244]	; (8011424 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8b8>)
 8011330:	6013      	str	r3, [r2, #0]
 8011332:	2200      	movs	r2, #0
 8011334:	2101      	movs	r1, #1
 8011336:	483a      	ldr	r0, [pc, #232]	; (8011420 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8b4>)
 8011338:	f000 fa68 	bl	801180c <_ZN3Mat6MatrixILt4ELt1EEclEtt>
 801133c:	4603      	mov	r3, r0
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	4a38      	ldr	r2, [pc, #224]	; (8011424 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8b8>)
 8011342:	6053      	str	r3, [r2, #4]
 8011344:	2200      	movs	r2, #0
 8011346:	2102      	movs	r1, #2
 8011348:	4835      	ldr	r0, [pc, #212]	; (8011420 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8b4>)
 801134a:	f000 fa5f 	bl	801180c <_ZN3Mat6MatrixILt4ELt1EEclEtt>
 801134e:	4603      	mov	r3, r0
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	4a34      	ldr	r2, [pc, #208]	; (8011424 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8b8>)
 8011354:	6093      	str	r3, [r2, #8]
 8011356:	2200      	movs	r2, #0
 8011358:	2103      	movs	r1, #3
 801135a:	4831      	ldr	r0, [pc, #196]	; (8011420 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8b4>)
 801135c:	f000 fa56 	bl	801180c <_ZN3Mat6MatrixILt4ELt1EEclEtt>
 8011360:	4603      	mov	r3, r0
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	4a2f      	ldr	r2, [pc, #188]	; (8011424 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8b8>)
 8011366:	60d3      	str	r3, [r2, #12]
	_X = _X + add;
 8011368:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801136c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8011370:	681a      	ldr	r2, [r3, #0]
 8011372:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8011376:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801137a:	681c      	ldr	r4, [r3, #0]
 801137c:	4929      	ldr	r1, [pc, #164]	; (8011424 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8b8>)
 801137e:	4610      	mov	r0, r2
 8011380:	f004 fcbb 	bl	8015cfa <_ZNK3Mat10QuaternionplERKS0_>
 8011384:	eeb0 6a40 	vmov.f32	s12, s0
 8011388:	eef0 6a60 	vmov.f32	s13, s1
 801138c:	eeb0 7a41 	vmov.f32	s14, s2
 8011390:	eef0 7a61 	vmov.f32	s15, s3
 8011394:	ed84 6a00 	vstr	s12, [r4]
 8011398:	edc4 6a01 	vstr	s13, [r4, #4]
 801139c:	ed84 7a02 	vstr	s14, [r4, #8]
 80113a0:	edc4 7a03 	vstr	s15, [r4, #12]
	_P = (I - K*H)*_P;
 80113a4:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 80113a8:	4a1f      	ldr	r2, [pc, #124]	; (8011428 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8bc>)
 80113aa:	491c      	ldr	r1, [pc, #112]	; (801141c <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8b0>)
 80113ac:	4618      	mov	r0, r3
 80113ae:	f000 f891 	bl	80114d4 <_ZNK3Mat6MatrixILt4ELt3EEmlILt4EEENS0_ILt4EXT_EEERKNS0_ILt3EXT_EEE>
 80113b2:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 80113b6:	f507 720b 	add.w	r2, r7, #556	; 0x22c
 80113ba:	491c      	ldr	r1, [pc, #112]	; (801142c <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8c0>)
 80113bc:	4618      	mov	r0, r3
 80113be:	f000 fa3b 	bl	8011838 <_ZNK3Mat6MatrixILt4ELt4EEmiERKS1_>
 80113c2:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80113c6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	f103 0210 	add.w	r2, r3, #16
 80113d0:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80113d4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80113d8:	681c      	ldr	r4, [r3, #0]
 80113da:	463b      	mov	r3, r7
 80113dc:	f507 71f6 	add.w	r1, r7, #492	; 0x1ec
 80113e0:	4618      	mov	r0, r3
 80113e2:	f000 f8c2 	bl	801156a <_ZNK3Mat6MatrixILt4ELt4EEmlILt4EEENS0_ILt4EXT_EEERKS3_>
 80113e6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80113ea:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 80113ee:	3410      	adds	r4, #16
 80113f0:	461d      	mov	r5, r3
 80113f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80113f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80113f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80113f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80113fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80113fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80113fe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8011402:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8011406:	bf00      	nop
 8011408:	f507 771c 	add.w	r7, r7, #624	; 0x270
 801140c:	46bd      	mov	sp, r7
 801140e:	ecbd 8b02 	vpop	{d8}
 8011412:	bdb0      	pop	{r4, r5, r7, pc}
 8011414:	240052f8 	.word	0x240052f8
 8011418:	240052e8 	.word	0x240052e8
 801141c:	2400533c 	.word	0x2400533c
 8011420:	24005404 	.word	0x24005404
 8011424:	24005418 	.word	0x24005418
 8011428:	24005308 	.word	0x24005308
 801142c:	240053c0 	.word	0x240053c0

08011430 <_ZN3Mat6MatrixILt4ELt3EEC1Ev>:
Matrix<heigth, width>::Matrix() {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 8011430:	b480      	push	{r7}
 8011432:	b083      	sub	sp, #12
 8011434:	af00      	add	r7, sp, #0
 8011436:	6078      	str	r0, [r7, #4]
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	4618      	mov	r0, r3
 801143c:	370c      	adds	r7, #12
 801143e:	46bd      	mov	sp, r7
 8011440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011444:	4770      	bx	lr

08011446 <_ZN3Mat6MatrixILt4ELt3EEC1ERKSt5arrayIfLj12EE>:
Matrix<heigth, width>::Matrix(const std::array<float, heigth*width>& values): _values(values) {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 8011446:	b4b0      	push	{r4, r5, r7}
 8011448:	b083      	sub	sp, #12
 801144a:	af00      	add	r7, sp, #0
 801144c:	6078      	str	r0, [r7, #4]
 801144e:	6039      	str	r1, [r7, #0]
 8011450:	687a      	ldr	r2, [r7, #4]
 8011452:	683b      	ldr	r3, [r7, #0]
 8011454:	4614      	mov	r4, r2
 8011456:	461d      	mov	r5, r3
 8011458:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801145a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801145c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801145e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011460:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8011464:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	4618      	mov	r0, r3
 801146c:	370c      	adds	r7, #12
 801146e:	46bd      	mov	sp, r7
 8011470:	bcb0      	pop	{r4, r5, r7}
 8011472:	4770      	bx	lr

08011474 <_ZNK3Mat6MatrixILt4ELt3EE10TransposedEv>:
Matrix<width, heigth> Matrix<heigth, width>::Transposed() const
 8011474:	b590      	push	{r4, r7, lr}
 8011476:	b085      	sub	sp, #20
 8011478:	af00      	add	r7, sp, #0
 801147a:	6078      	str	r0, [r7, #4]
 801147c:	6039      	str	r1, [r7, #0]
	Matrix<width, heigth> result;
 801147e:	6878      	ldr	r0, [r7, #4]
 8011480:	f000 f8d3 	bl	801162a <_ZN3Mat6MatrixILt3ELt4EEC1Ev>
	for(u_short r = 0; r < width; ++r)
 8011484:	2300      	movs	r3, #0
 8011486:	81fb      	strh	r3, [r7, #14]
 8011488:	e01c      	b.n	80114c4 <_ZNK3Mat6MatrixILt4ELt3EE10TransposedEv+0x50>
		for(u_short c = 0; c < heigth; ++c)
 801148a:	2300      	movs	r3, #0
 801148c:	81bb      	strh	r3, [r7, #12]
 801148e:	e013      	b.n	80114b8 <_ZNK3Mat6MatrixILt4ELt3EE10TransposedEv+0x44>
			result(r, c) = operator()(c, r);
 8011490:	89ba      	ldrh	r2, [r7, #12]
 8011492:	89fb      	ldrh	r3, [r7, #14]
 8011494:	4619      	mov	r1, r3
 8011496:	6878      	ldr	r0, [r7, #4]
 8011498:	f000 f9eb 	bl	8011872 <_ZN3Mat6MatrixILt3ELt4EEclEtt>
 801149c:	4604      	mov	r4, r0
 801149e:	89fa      	ldrh	r2, [r7, #14]
 80114a0:	89bb      	ldrh	r3, [r7, #12]
 80114a2:	4619      	mov	r1, r3
 80114a4:	6838      	ldr	r0, [r7, #0]
 80114a6:	f000 f9fb 	bl	80118a0 <_ZNK3Mat6MatrixILt4ELt3EEclEtt>
 80114aa:	eef0 7a40 	vmov.f32	s15, s0
 80114ae:	edc4 7a00 	vstr	s15, [r4]
		for(u_short c = 0; c < heigth; ++c)
 80114b2:	89bb      	ldrh	r3, [r7, #12]
 80114b4:	3301      	adds	r3, #1
 80114b6:	81bb      	strh	r3, [r7, #12]
 80114b8:	89bb      	ldrh	r3, [r7, #12]
 80114ba:	2b03      	cmp	r3, #3
 80114bc:	d9e8      	bls.n	8011490 <_ZNK3Mat6MatrixILt4ELt3EE10TransposedEv+0x1c>
	for(u_short r = 0; r < width; ++r)
 80114be:	89fb      	ldrh	r3, [r7, #14]
 80114c0:	3301      	adds	r3, #1
 80114c2:	81fb      	strh	r3, [r7, #14]
 80114c4:	89fb      	ldrh	r3, [r7, #14]
 80114c6:	2b02      	cmp	r3, #2
 80114c8:	d9df      	bls.n	801148a <_ZNK3Mat6MatrixILt4ELt3EE10TransposedEv+0x16>
	return result;
 80114ca:	bf00      	nop
}
 80114cc:	6878      	ldr	r0, [r7, #4]
 80114ce:	3714      	adds	r7, #20
 80114d0:	46bd      	mov	sp, r7
 80114d2:	bd90      	pop	{r4, r7, pc}

080114d4 <_ZNK3Mat6MatrixILt4ELt3EEmlILt4EEENS0_ILt4EXT_EEERKNS0_ILt3EXT_EEE>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 80114d4:	b580      	push	{r7, lr}
 80114d6:	b084      	sub	sp, #16
 80114d8:	af00      	add	r7, sp, #0
 80114da:	60f8      	str	r0, [r7, #12]
 80114dc:	60b9      	str	r1, [r7, #8]
 80114de:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 80114e0:	68f8      	ldr	r0, [r7, #12]
 80114e2:	f7fb ff2d 	bl	800d340 <_ZN3Mat6MatrixILt4ELt4EEC1Ev>
	Multiply(other, result);
 80114e6:	68fa      	ldr	r2, [r7, #12]
 80114e8:	6879      	ldr	r1, [r7, #4]
 80114ea:	68b8      	ldr	r0, [r7, #8]
 80114ec:	f000 f9f5 	bl	80118da <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt4EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE>
	return result;
 80114f0:	bf00      	nop
}
 80114f2:	68f8      	ldr	r0, [r7, #12]
 80114f4:	3710      	adds	r7, #16
 80114f6:	46bd      	mov	sp, r7
 80114f8:	bd80      	pop	{r7, pc}

080114fa <_ZNK3Mat6MatrixILt4ELt4EEmlEf>:
inline Matrix<heigth, width> Matrix<heigth, width>::operator*(float val) const
 80114fa:	b5b0      	push	{r4, r5, r7, lr}
 80114fc:	b084      	sub	sp, #16
 80114fe:	af00      	add	r7, sp, #0
 8011500:	60f8      	str	r0, [r7, #12]
 8011502:	60b9      	str	r1, [r7, #8]
 8011504:	ed87 0a01 	vstr	s0, [r7, #4]
    Matrix<heigth, width> result = *this;
 8011508:	68fa      	ldr	r2, [r7, #12]
 801150a:	68bb      	ldr	r3, [r7, #8]
 801150c:	4614      	mov	r4, r2
 801150e:	461d      	mov	r5, r3
 8011510:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011512:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011514:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011516:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011518:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801151a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801151c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8011520:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	result *= val;
 8011524:	ed97 0a01 	vldr	s0, [r7, #4]
 8011528:	68f8      	ldr	r0, [r7, #12]
 801152a:	f000 fa8a 	bl	8011a42 <_ZN3Mat6MatrixILt4ELt4EEmLEf>
	return result;
 801152e:	bf00      	nop
}
 8011530:	68f8      	ldr	r0, [r7, #12]
 8011532:	3710      	adds	r7, #16
 8011534:	46bd      	mov	sp, r7
 8011536:	bdb0      	pop	{r4, r5, r7, pc}

08011538 <_ZN3Mat6MatrixILt4ELt4EEC1ERKSt5arrayIfLj16EE>:
Matrix<heigth, width>::Matrix(const std::array<float, heigth*width>& values): _values(values) {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 8011538:	b4b0      	push	{r4, r5, r7}
 801153a:	b083      	sub	sp, #12
 801153c:	af00      	add	r7, sp, #0
 801153e:	6078      	str	r0, [r7, #4]
 8011540:	6039      	str	r1, [r7, #0]
 8011542:	687a      	ldr	r2, [r7, #4]
 8011544:	683b      	ldr	r3, [r7, #0]
 8011546:	4614      	mov	r4, r2
 8011548:	461d      	mov	r5, r3
 801154a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801154c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801154e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011550:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011552:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011554:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011556:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801155a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	4618      	mov	r0, r3
 8011562:	370c      	adds	r7, #12
 8011564:	46bd      	mov	sp, r7
 8011566:	bcb0      	pop	{r4, r5, r7}
 8011568:	4770      	bx	lr

0801156a <_ZNK3Mat6MatrixILt4ELt4EEmlILt4EEENS0_ILt4EXT_EEERKS3_>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 801156a:	b580      	push	{r7, lr}
 801156c:	b084      	sub	sp, #16
 801156e:	af00      	add	r7, sp, #0
 8011570:	60f8      	str	r0, [r7, #12]
 8011572:	60b9      	str	r1, [r7, #8]
 8011574:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 8011576:	68f8      	ldr	r0, [r7, #12]
 8011578:	f7fb fee2 	bl	800d340 <_ZN3Mat6MatrixILt4ELt4EEC1Ev>
	Multiply(other, result);
 801157c:	68fa      	ldr	r2, [r7, #12]
 801157e:	6879      	ldr	r1, [r7, #4]
 8011580:	68b8      	ldr	r0, [r7, #8]
 8011582:	f000 fa8a 	bl	8011a9a <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERS3_>
	return result;
 8011586:	bf00      	nop
}
 8011588:	68f8      	ldr	r0, [r7, #12]
 801158a:	3710      	adds	r7, #16
 801158c:	46bd      	mov	sp, r7
 801158e:	bd80      	pop	{r7, pc}

08011590 <_ZNK3Mat6MatrixILt4ELt4EE10TransposedEv>:
Matrix<width, heigth> Matrix<heigth, width>::Transposed() const
 8011590:	b590      	push	{r4, r7, lr}
 8011592:	b085      	sub	sp, #20
 8011594:	af00      	add	r7, sp, #0
 8011596:	6078      	str	r0, [r7, #4]
 8011598:	6039      	str	r1, [r7, #0]
	Matrix<width, heigth> result;
 801159a:	6878      	ldr	r0, [r7, #4]
 801159c:	f7fb fed0 	bl	800d340 <_ZN3Mat6MatrixILt4ELt4EEC1Ev>
	for(u_short r = 0; r < width; ++r)
 80115a0:	2300      	movs	r3, #0
 80115a2:	81fb      	strh	r3, [r7, #14]
 80115a4:	e01c      	b.n	80115e0 <_ZNK3Mat6MatrixILt4ELt4EE10TransposedEv+0x50>
		for(u_short c = 0; c < heigth; ++c)
 80115a6:	2300      	movs	r3, #0
 80115a8:	81bb      	strh	r3, [r7, #12]
 80115aa:	e013      	b.n	80115d4 <_ZNK3Mat6MatrixILt4ELt4EE10TransposedEv+0x44>
			result(r, c) = operator()(c, r);
 80115ac:	89ba      	ldrh	r2, [r7, #12]
 80115ae:	89fb      	ldrh	r3, [r7, #14]
 80115b0:	4619      	mov	r1, r3
 80115b2:	6878      	ldr	r0, [r7, #4]
 80115b4:	f7fc f84b 	bl	800d64e <_ZN3Mat6MatrixILt4ELt4EEclEtt>
 80115b8:	4604      	mov	r4, r0
 80115ba:	89fa      	ldrh	r2, [r7, #14]
 80115bc:	89bb      	ldrh	r3, [r7, #12]
 80115be:	4619      	mov	r1, r3
 80115c0:	6838      	ldr	r0, [r7, #0]
 80115c2:	f000 fb1e 	bl	8011c02 <_ZNK3Mat6MatrixILt4ELt4EEclEtt>
 80115c6:	eef0 7a40 	vmov.f32	s15, s0
 80115ca:	edc4 7a00 	vstr	s15, [r4]
		for(u_short c = 0; c < heigth; ++c)
 80115ce:	89bb      	ldrh	r3, [r7, #12]
 80115d0:	3301      	adds	r3, #1
 80115d2:	81bb      	strh	r3, [r7, #12]
 80115d4:	89bb      	ldrh	r3, [r7, #12]
 80115d6:	2b03      	cmp	r3, #3
 80115d8:	d9e8      	bls.n	80115ac <_ZNK3Mat6MatrixILt4ELt4EE10TransposedEv+0x1c>
	for(u_short r = 0; r < width; ++r)
 80115da:	89fb      	ldrh	r3, [r7, #14]
 80115dc:	3301      	adds	r3, #1
 80115de:	81fb      	strh	r3, [r7, #14]
 80115e0:	89fb      	ldrh	r3, [r7, #14]
 80115e2:	2b03      	cmp	r3, #3
 80115e4:	d9df      	bls.n	80115a6 <_ZNK3Mat6MatrixILt4ELt4EE10TransposedEv+0x16>
	return result;
 80115e6:	bf00      	nop
}
 80115e8:	6878      	ldr	r0, [r7, #4]
 80115ea:	3714      	adds	r7, #20
 80115ec:	46bd      	mov	sp, r7
 80115ee:	bd90      	pop	{r4, r7, pc}

080115f0 <_ZNK3Mat6MatrixILt4ELt4EEplERKS1_>:
inline Matrix<heigth, width> Matrix<heigth, width>::operator+(const Matrix<heigth, width> &other) const
 80115f0:	b5b0      	push	{r4, r5, r7, lr}
 80115f2:	b084      	sub	sp, #16
 80115f4:	af00      	add	r7, sp, #0
 80115f6:	60f8      	str	r0, [r7, #12]
 80115f8:	60b9      	str	r1, [r7, #8]
 80115fa:	607a      	str	r2, [r7, #4]
    Matrix<heigth, width> result = *this;
 80115fc:	68fa      	ldr	r2, [r7, #12]
 80115fe:	68bb      	ldr	r3, [r7, #8]
 8011600:	4614      	mov	r4, r2
 8011602:	461d      	mov	r5, r3
 8011604:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011606:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011608:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801160a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801160c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801160e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011610:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8011614:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	result += other;
 8011618:	6879      	ldr	r1, [r7, #4]
 801161a:	68f8      	ldr	r0, [r7, #12]
 801161c:	f000 fb0c 	bl	8011c38 <_ZN3Mat6MatrixILt4ELt4EEpLERKS1_>
	return result;
 8011620:	bf00      	nop
}
 8011622:	68f8      	ldr	r0, [r7, #12]
 8011624:	3710      	adds	r7, #16
 8011626:	46bd      	mov	sp, r7
 8011628:	bdb0      	pop	{r4, r5, r7, pc}

0801162a <_ZN3Mat6MatrixILt3ELt4EEC1Ev>:
Matrix<heigth, width>::Matrix() {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 801162a:	b480      	push	{r7}
 801162c:	b083      	sub	sp, #12
 801162e:	af00      	add	r7, sp, #0
 8011630:	6078      	str	r0, [r7, #4]
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	4618      	mov	r0, r3
 8011636:	370c      	adds	r7, #12
 8011638:	46bd      	mov	sp, r7
 801163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801163e:	4770      	bx	lr

08011640 <_ZN3Mat6MatrixILt4ELt1EEC1Ev>:
 8011640:	b480      	push	{r7}
 8011642:	b083      	sub	sp, #12
 8011644:	af00      	add	r7, sp, #0
 8011646:	6078      	str	r0, [r7, #4]
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	4618      	mov	r0, r3
 801164c:	370c      	adds	r7, #12
 801164e:	46bd      	mov	sp, r7
 8011650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011654:	4770      	bx	lr

08011656 <_ZN3Mat6MatrixILt3ELt4EEC1ERKSt5arrayIfLj12EE>:
Matrix<heigth, width>::Matrix(const std::array<float, heigth*width>& values): _values(values) {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 8011656:	b4b0      	push	{r4, r5, r7}
 8011658:	b083      	sub	sp, #12
 801165a:	af00      	add	r7, sp, #0
 801165c:	6078      	str	r0, [r7, #4]
 801165e:	6039      	str	r1, [r7, #0]
 8011660:	687a      	ldr	r2, [r7, #4]
 8011662:	683b      	ldr	r3, [r7, #0]
 8011664:	4614      	mov	r4, r2
 8011666:	461d      	mov	r5, r3
 8011668:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801166a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801166c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801166e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011670:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8011674:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	4618      	mov	r0, r3
 801167c:	370c      	adds	r7, #12
 801167e:	46bd      	mov	sp, r7
 8011680:	bcb0      	pop	{r4, r5, r7}
 8011682:	4770      	bx	lr

08011684 <_ZNK3Mat6MatrixILt3ELt4EEmlILt4EEENS0_ILt3EXT_EEERKNS0_ILt4EXT_EEE>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 8011684:	b580      	push	{r7, lr}
 8011686:	b084      	sub	sp, #16
 8011688:	af00      	add	r7, sp, #0
 801168a:	60f8      	str	r0, [r7, #12]
 801168c:	60b9      	str	r1, [r7, #8]
 801168e:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 8011690:	68f8      	ldr	r0, [r7, #12]
 8011692:	f7ff ffca 	bl	801162a <_ZN3Mat6MatrixILt3ELt4EEC1Ev>
	Multiply(other, result);
 8011696:	68fa      	ldr	r2, [r7, #12]
 8011698:	6879      	ldr	r1, [r7, #4]
 801169a:	68b8      	ldr	r0, [r7, #8]
 801169c:	f000 fb01 	bl	8011ca2 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE>
	return result;
 80116a0:	bf00      	nop
}
 80116a2:	68f8      	ldr	r0, [r7, #12]
 80116a4:	3710      	adds	r7, #16
 80116a6:	46bd      	mov	sp, r7
 80116a8:	bd80      	pop	{r7, pc}

080116aa <_ZNK3Mat6MatrixILt3ELt4EE10TransposedEv>:
Matrix<width, heigth> Matrix<heigth, width>::Transposed() const
 80116aa:	b590      	push	{r4, r7, lr}
 80116ac:	b085      	sub	sp, #20
 80116ae:	af00      	add	r7, sp, #0
 80116b0:	6078      	str	r0, [r7, #4]
 80116b2:	6039      	str	r1, [r7, #0]
	Matrix<width, heigth> result;
 80116b4:	6878      	ldr	r0, [r7, #4]
 80116b6:	f7ff febb 	bl	8011430 <_ZN3Mat6MatrixILt4ELt3EEC1Ev>
	for(u_short r = 0; r < width; ++r)
 80116ba:	2300      	movs	r3, #0
 80116bc:	81fb      	strh	r3, [r7, #14]
 80116be:	e01c      	b.n	80116fa <_ZNK3Mat6MatrixILt3ELt4EE10TransposedEv+0x50>
		for(u_short c = 0; c < heigth; ++c)
 80116c0:	2300      	movs	r3, #0
 80116c2:	81bb      	strh	r3, [r7, #12]
 80116c4:	e013      	b.n	80116ee <_ZNK3Mat6MatrixILt3ELt4EE10TransposedEv+0x44>
			result(r, c) = operator()(c, r);
 80116c6:	89ba      	ldrh	r2, [r7, #12]
 80116c8:	89fb      	ldrh	r3, [r7, #14]
 80116ca:	4619      	mov	r1, r3
 80116cc:	6878      	ldr	r0, [r7, #4]
 80116ce:	f000 fb9c 	bl	8011e0a <_ZN3Mat6MatrixILt4ELt3EEclEtt>
 80116d2:	4604      	mov	r4, r0
 80116d4:	89fa      	ldrh	r2, [r7, #14]
 80116d6:	89bb      	ldrh	r3, [r7, #12]
 80116d8:	4619      	mov	r1, r3
 80116da:	6838      	ldr	r0, [r7, #0]
 80116dc:	f000 fbae 	bl	8011e3c <_ZNK3Mat6MatrixILt3ELt4EEclEtt>
 80116e0:	eef0 7a40 	vmov.f32	s15, s0
 80116e4:	edc4 7a00 	vstr	s15, [r4]
		for(u_short c = 0; c < heigth; ++c)
 80116e8:	89bb      	ldrh	r3, [r7, #12]
 80116ea:	3301      	adds	r3, #1
 80116ec:	81bb      	strh	r3, [r7, #12]
 80116ee:	89bb      	ldrh	r3, [r7, #12]
 80116f0:	2b02      	cmp	r3, #2
 80116f2:	d9e8      	bls.n	80116c6 <_ZNK3Mat6MatrixILt3ELt4EE10TransposedEv+0x1c>
	for(u_short r = 0; r < width; ++r)
 80116f4:	89fb      	ldrh	r3, [r7, #14]
 80116f6:	3301      	adds	r3, #1
 80116f8:	81fb      	strh	r3, [r7, #14]
 80116fa:	89fb      	ldrh	r3, [r7, #14]
 80116fc:	2b03      	cmp	r3, #3
 80116fe:	d9df      	bls.n	80116c0 <_ZNK3Mat6MatrixILt3ELt4EE10TransposedEv+0x16>
	return result;
 8011700:	bf00      	nop
}
 8011702:	6878      	ldr	r0, [r7, #4]
 8011704:	3714      	adds	r7, #20
 8011706:	46bd      	mov	sp, r7
 8011708:	bd90      	pop	{r4, r7, pc}

0801170a <_ZNK3Mat6MatrixILt3ELt4EEmlILt3EEENS0_ILt3EXT_EEERKNS0_ILt4EXT_EEE>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 801170a:	b580      	push	{r7, lr}
 801170c:	b084      	sub	sp, #16
 801170e:	af00      	add	r7, sp, #0
 8011710:	60f8      	str	r0, [r7, #12]
 8011712:	60b9      	str	r1, [r7, #8]
 8011714:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 8011716:	68f8      	ldr	r0, [r7, #12]
 8011718:	f7fb fe5e 	bl	800d3d8 <_ZN3Mat6MatrixILt3ELt3EEC1Ev>
	Multiply(other, result);
 801171c:	68fa      	ldr	r2, [r7, #12]
 801171e:	6879      	ldr	r1, [r7, #4]
 8011720:	68b8      	ldr	r0, [r7, #8]
 8011722:	f000 fba6 	bl	8011e72 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE>
	return result;
 8011726:	bf00      	nop
}
 8011728:	68f8      	ldr	r0, [r7, #12]
 801172a:	3710      	adds	r7, #16
 801172c:	46bd      	mov	sp, r7
 801172e:	bd80      	pop	{r7, pc}

08011730 <_ZNK3Mat6MatrixILt3ELt3EEplERKS1_>:
inline Matrix<heigth, width> Matrix<heigth, width>::operator+(const Matrix<heigth, width> &other) const
 8011730:	b5b0      	push	{r4, r5, r7, lr}
 8011732:	b084      	sub	sp, #16
 8011734:	af00      	add	r7, sp, #0
 8011736:	60f8      	str	r0, [r7, #12]
 8011738:	60b9      	str	r1, [r7, #8]
 801173a:	607a      	str	r2, [r7, #4]
    Matrix<heigth, width> result = *this;
 801173c:	68fa      	ldr	r2, [r7, #12]
 801173e:	68bb      	ldr	r3, [r7, #8]
 8011740:	4614      	mov	r4, r2
 8011742:	461d      	mov	r5, r3
 8011744:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011746:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011748:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801174a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801174c:	682b      	ldr	r3, [r5, #0]
 801174e:	6023      	str	r3, [r4, #0]
	result += other;
 8011750:	6879      	ldr	r1, [r7, #4]
 8011752:	68f8      	ldr	r0, [r7, #12]
 8011754:	f000 fc41 	bl	8011fda <_ZN3Mat6MatrixILt3ELt3EEpLERKS1_>
	return result;
 8011758:	bf00      	nop
}
 801175a:	68f8      	ldr	r0, [r7, #12]
 801175c:	3710      	adds	r7, #16
 801175e:	46bd      	mov	sp, r7
 8011760:	bdb0      	pop	{r4, r5, r7, pc}

08011762 <_ZNK3Mat6MatrixILt4ELt4EEmlILt3EEENS0_ILt4EXT_EEERKS3_>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 8011762:	b580      	push	{r7, lr}
 8011764:	b084      	sub	sp, #16
 8011766:	af00      	add	r7, sp, #0
 8011768:	60f8      	str	r0, [r7, #12]
 801176a:	60b9      	str	r1, [r7, #8]
 801176c:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 801176e:	68f8      	ldr	r0, [r7, #12]
 8011770:	f7ff fe5e 	bl	8011430 <_ZN3Mat6MatrixILt4ELt3EEC1Ev>
	Multiply(other, result);
 8011774:	68fa      	ldr	r2, [r7, #12]
 8011776:	6879      	ldr	r1, [r7, #4]
 8011778:	68b8      	ldr	r0, [r7, #8]
 801177a:	f000 fc63 	bl	8012044 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERS3_>
	return result;
 801177e:	bf00      	nop
}
 8011780:	68f8      	ldr	r0, [r7, #12]
 8011782:	3710      	adds	r7, #16
 8011784:	46bd      	mov	sp, r7
 8011786:	bd80      	pop	{r7, pc}

08011788 <_ZNK3Mat6MatrixILt4ELt3EEmlILt3EEENS0_ILt4EXT_EEERKNS0_ILt3EXT_EEE>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 8011788:	b580      	push	{r7, lr}
 801178a:	b084      	sub	sp, #16
 801178c:	af00      	add	r7, sp, #0
 801178e:	60f8      	str	r0, [r7, #12]
 8011790:	60b9      	str	r1, [r7, #8]
 8011792:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 8011794:	68f8      	ldr	r0, [r7, #12]
 8011796:	f7ff fe4b 	bl	8011430 <_ZN3Mat6MatrixILt4ELt3EEC1Ev>
	Multiply(other, result);
 801179a:	68fa      	ldr	r2, [r7, #12]
 801179c:	6879      	ldr	r1, [r7, #4]
 801179e:	68b8      	ldr	r0, [r7, #8]
 80117a0:	f000 fd04 	bl	80121ac <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE>
	return result;
 80117a4:	bf00      	nop
}
 80117a6:	68f8      	ldr	r0, [r7, #12]
 80117a8:	3710      	adds	r7, #16
 80117aa:	46bd      	mov	sp, r7
 80117ac:	bd80      	pop	{r7, pc}

080117ae <_ZNK3Mat6MatrixILt4ELt3EEmlILt1EEENS0_ILt4EXT_EEERKNS0_ILt3EXT_EEE>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 80117ae:	b590      	push	{r4, r7, lr}
 80117b0:	b08f      	sub	sp, #60	; 0x3c
 80117b2:	af00      	add	r7, sp, #0
 80117b4:	6178      	str	r0, [r7, #20]
 80117b6:	6139      	str	r1, [r7, #16]
	Matrix<heigth, other_width> result;
 80117b8:	f107 0318 	add.w	r3, r7, #24
 80117bc:	4618      	mov	r0, r3
 80117be:	f7ff ff3f 	bl	8011640 <_ZN3Mat6MatrixILt4ELt1EEC1Ev>
	Multiply(other, result);
 80117c2:	f107 0318 	add.w	r3, r7, #24
 80117c6:	461a      	mov	r2, r3
 80117c8:	6939      	ldr	r1, [r7, #16]
 80117ca:	6978      	ldr	r0, [r7, #20]
 80117cc:	f000 fda2 	bl	8012314 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE>
	return result;
 80117d0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80117d4:	f107 0318 	add.w	r3, r7, #24
 80117d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80117da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80117de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80117e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80117e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80117e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117e6:	ee06 0a10 	vmov	s12, r0
 80117ea:	ee06 1a90 	vmov	s13, r1
 80117ee:	ee07 2a10 	vmov	s14, r2
 80117f2:	ee07 3a90 	vmov	s15, r3
}
 80117f6:	eeb0 0a46 	vmov.f32	s0, s12
 80117fa:	eef0 0a66 	vmov.f32	s1, s13
 80117fe:	eeb0 1a47 	vmov.f32	s2, s14
 8011802:	eef0 1a67 	vmov.f32	s3, s15
 8011806:	373c      	adds	r7, #60	; 0x3c
 8011808:	46bd      	mov	sp, r7
 801180a:	bd90      	pop	{r4, r7, pc}

0801180c <_ZN3Mat6MatrixILt4ELt1EEclEtt>:
float& Matrix<heigth, width>::operator()(u_short row, u_short col)
 801180c:	b580      	push	{r7, lr}
 801180e:	b084      	sub	sp, #16
 8011810:	af00      	add	r7, sp, #0
 8011812:	6078      	str	r0, [r7, #4]
 8011814:	460b      	mov	r3, r1
 8011816:	807b      	strh	r3, [r7, #2]
 8011818:	4613      	mov	r3, r2
 801181a:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 801181c:	887a      	ldrh	r2, [r7, #2]
 801181e:	883b      	ldrh	r3, [r7, #0]
 8011820:	4413      	add	r3, r2
 8011822:	60fb      	str	r3, [r7, #12]
	return _values[index];
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	68f9      	ldr	r1, [r7, #12]
 8011828:	4618      	mov	r0, r3
 801182a:	f000 fe27 	bl	801247c <_ZNSt5arrayIfLj4EEixEj>
 801182e:	4603      	mov	r3, r0
}
 8011830:	4618      	mov	r0, r3
 8011832:	3710      	adds	r7, #16
 8011834:	46bd      	mov	sp, r7
 8011836:	bd80      	pop	{r7, pc}

08011838 <_ZNK3Mat6MatrixILt4ELt4EEmiERKS1_>:
inline Matrix<heigth, width> Matrix<heigth, width>::operator-(const Matrix<heigth, width> &other) const
 8011838:	b5b0      	push	{r4, r5, r7, lr}
 801183a:	b084      	sub	sp, #16
 801183c:	af00      	add	r7, sp, #0
 801183e:	60f8      	str	r0, [r7, #12]
 8011840:	60b9      	str	r1, [r7, #8]
 8011842:	607a      	str	r2, [r7, #4]
    Matrix<heigth, width> result = *this;
 8011844:	68fa      	ldr	r2, [r7, #12]
 8011846:	68bb      	ldr	r3, [r7, #8]
 8011848:	4614      	mov	r4, r2
 801184a:	461d      	mov	r5, r3
 801184c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801184e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011850:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011852:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011854:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011856:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011858:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801185c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	result -= other;
 8011860:	6879      	ldr	r1, [r7, #4]
 8011862:	68f8      	ldr	r0, [r7, #12]
 8011864:	f000 fe19 	bl	801249a <_ZN3Mat6MatrixILt4ELt4EEmIERKS1_>
	return result;
 8011868:	bf00      	nop
}
 801186a:	68f8      	ldr	r0, [r7, #12]
 801186c:	3710      	adds	r7, #16
 801186e:	46bd      	mov	sp, r7
 8011870:	bdb0      	pop	{r4, r5, r7, pc}

08011872 <_ZN3Mat6MatrixILt3ELt4EEclEtt>:
float& Matrix<heigth, width>::operator()(u_short row, u_short col)
 8011872:	b580      	push	{r7, lr}
 8011874:	b084      	sub	sp, #16
 8011876:	af00      	add	r7, sp, #0
 8011878:	6078      	str	r0, [r7, #4]
 801187a:	460b      	mov	r3, r1
 801187c:	807b      	strh	r3, [r7, #2]
 801187e:	4613      	mov	r3, r2
 8011880:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 8011882:	887b      	ldrh	r3, [r7, #2]
 8011884:	009a      	lsls	r2, r3, #2
 8011886:	883b      	ldrh	r3, [r7, #0]
 8011888:	4413      	add	r3, r2
 801188a:	60fb      	str	r3, [r7, #12]
	return _values[index];
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	68f9      	ldr	r1, [r7, #12]
 8011890:	4618      	mov	r0, r3
 8011892:	f000 fe37 	bl	8012504 <_ZNSt5arrayIfLj12EEixEj>
 8011896:	4603      	mov	r3, r0
}
 8011898:	4618      	mov	r0, r3
 801189a:	3710      	adds	r7, #16
 801189c:	46bd      	mov	sp, r7
 801189e:	bd80      	pop	{r7, pc}

080118a0 <_ZNK3Mat6MatrixILt4ELt3EEclEtt>:
float Matrix<heigth, width>::operator()(u_short row, u_short col) const
 80118a0:	b580      	push	{r7, lr}
 80118a2:	b084      	sub	sp, #16
 80118a4:	af00      	add	r7, sp, #0
 80118a6:	6078      	str	r0, [r7, #4]
 80118a8:	460b      	mov	r3, r1
 80118aa:	807b      	strh	r3, [r7, #2]
 80118ac:	4613      	mov	r3, r2
 80118ae:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 80118b0:	887a      	ldrh	r2, [r7, #2]
 80118b2:	4613      	mov	r3, r2
 80118b4:	005b      	lsls	r3, r3, #1
 80118b6:	441a      	add	r2, r3
 80118b8:	883b      	ldrh	r3, [r7, #0]
 80118ba:	4413      	add	r3, r2
 80118bc:	60fb      	str	r3, [r7, #12]
	return _values[index];
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	68f9      	ldr	r1, [r7, #12]
 80118c2:	4618      	mov	r0, r3
 80118c4:	f000 fe2d 	bl	8012522 <_ZNKSt5arrayIfLj12EEixEj>
 80118c8:	4603      	mov	r3, r0
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	ee07 3a90 	vmov	s15, r3
}
 80118d0:	eeb0 0a67 	vmov.f32	s0, s15
 80118d4:	3710      	adds	r7, #16
 80118d6:	46bd      	mov	sp, r7
 80118d8:	bd80      	pop	{r7, pc}

080118da <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt4EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 80118da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80118dc:	b0a1      	sub	sp, #132	; 0x84
 80118de:	af00      	add	r7, sp, #0
 80118e0:	60f8      	str	r0, [r7, #12]
 80118e2:	60b9      	str	r1, [r7, #8]
 80118e4:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 80118e6:	2300      	movs	r3, #0
 80118e8:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80118ec:	e02d      	b.n	801194a <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt4EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x70>
		for(u_short col = 0; col < width; ++col)
 80118ee:	2300      	movs	r3, #0
 80118f0:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80118f4:	e020      	b.n	8011938 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt4EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 80118f6:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 80118fa:	f107 0314 	add.w	r3, r7, #20
 80118fe:	4611      	mov	r1, r2
 8011900:	4618      	mov	r0, r3
 8011902:	f000 fe1d 	bl	8012540 <_ZNSt5arrayIS_IfLj3EELj4EEixEj>
 8011906:	4602      	mov	r2, r0
 8011908:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 801190c:	4619      	mov	r1, r3
 801190e:	4610      	mov	r0, r2
 8011910:	f7fb ff44 	bl	800d79c <_ZNSt5arrayIfLj3EEixEj>
 8011914:	4604      	mov	r4, r0
 8011916:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 801191a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 801191e:	4619      	mov	r1, r3
 8011920:	68f8      	ldr	r0, [r7, #12]
 8011922:	f7ff ffbd 	bl	80118a0 <_ZNK3Mat6MatrixILt4ELt3EEclEtt>
 8011926:	eef0 7a40 	vmov.f32	s15, s0
 801192a:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 801192e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8011932:	3301      	adds	r3, #1
 8011934:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8011938:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 801193c:	2b02      	cmp	r3, #2
 801193e:	d9da      	bls.n	80118f6 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt4EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 8011940:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8011944:	3301      	adds	r3, #1
 8011946:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 801194a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 801194e:	2b03      	cmp	r3, #3
 8011950:	d9cd      	bls.n	80118ee <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt4EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x14>
	for(u_short col = 0; col < other_width; ++col)
 8011952:	2300      	movs	r3, #0
 8011954:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8011958:	e02d      	b.n	80119b6 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt4EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0xdc>
		for(u_short row = 0; row < width; ++row)
 801195a:	2300      	movs	r3, #0
 801195c:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8011960:	e020      	b.n	80119a4 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt4EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0xca>
			other_columns[col][row] = other(row, col);
 8011962:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8011966:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801196a:	4611      	mov	r1, r2
 801196c:	4618      	mov	r0, r3
 801196e:	f000 fde7 	bl	8012540 <_ZNSt5arrayIS_IfLj3EELj4EEixEj>
 8011972:	4602      	mov	r2, r0
 8011974:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8011978:	4619      	mov	r1, r3
 801197a:	4610      	mov	r0, r2
 801197c:	f7fb ff0e 	bl	800d79c <_ZNSt5arrayIfLj3EEixEj>
 8011980:	4604      	mov	r4, r0
 8011982:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8011986:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 801198a:	4619      	mov	r1, r3
 801198c:	68b8      	ldr	r0, [r7, #8]
 801198e:	f000 fa55 	bl	8011e3c <_ZNK3Mat6MatrixILt3ELt4EEclEtt>
 8011992:	eef0 7a40 	vmov.f32	s15, s0
 8011996:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 801199a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 801199e:	3301      	adds	r3, #1
 80119a0:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80119a4:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80119a8:	2b02      	cmp	r3, #2
 80119aa:	d9da      	bls.n	8011962 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt4EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x88>
	for(u_short col = 0; col < other_width; ++col)
 80119ac:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80119b0:	3301      	adds	r3, #1
 80119b2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80119b6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80119ba:	2b03      	cmp	r3, #3
 80119bc:	d9cd      	bls.n	801195a <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt4EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x80>
	for(u_short row = 0; row < heigth; ++row)
 80119be:	2300      	movs	r3, #0
 80119c0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 80119c4:	e034      	b.n	8011a30 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt4EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x156>
		for(u_short col = 0; col < other_width; ++col)
 80119c6:	2300      	movs	r3, #0
 80119c8:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 80119cc:	e027      	b.n	8011a1e <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt4EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 80119ce:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80119d2:	f107 0314 	add.w	r3, r7, #20
 80119d6:	4611      	mov	r1, r2
 80119d8:	4618      	mov	r0, r3
 80119da:	f000 fdb1 	bl	8012540 <_ZNSt5arrayIS_IfLj3EELj4EEixEj>
 80119de:	4605      	mov	r5, r0
 80119e0:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 80119e4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80119e8:	4611      	mov	r1, r2
 80119ea:	4618      	mov	r0, r3
 80119ec:	f000 fda8 	bl	8012540 <_ZNSt5arrayIS_IfLj3EELj4EEixEj>
 80119f0:	4606      	mov	r6, r0
 80119f2:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 80119f6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80119fa:	4619      	mov	r1, r3
 80119fc:	6878      	ldr	r0, [r7, #4]
 80119fe:	f7fb fe26 	bl	800d64e <_ZN3Mat6MatrixILt4ELt4EEclEtt>
 8011a02:	4604      	mov	r4, r0
 8011a04:	4631      	mov	r1, r6
 8011a06:	4628      	mov	r0, r5
 8011a08:	f7fc f8a0 	bl	800db4c <_ZN3Mat13Multiply_rowsILj3EEEfRKSt5arrayIfXT_EES4_>
 8011a0c:	eef0 7a40 	vmov.f32	s15, s0
 8011a10:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 8011a14:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8011a18:	3301      	adds	r3, #1
 8011a1a:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8011a1e:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8011a22:	2b03      	cmp	r3, #3
 8011a24:	d9d3      	bls.n	80119ce <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt4EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 8011a26:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8011a2a:	3301      	adds	r3, #1
 8011a2c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8011a30:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8011a34:	2b03      	cmp	r3, #3
 8011a36:	d9c6      	bls.n	80119c6 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt4EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0xec>
}
 8011a38:	bf00      	nop
 8011a3a:	bf00      	nop
 8011a3c:	3784      	adds	r7, #132	; 0x84
 8011a3e:	46bd      	mov	sp, r7
 8011a40:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011a42 <_ZN3Mat6MatrixILt4ELt4EEmLEf>:
inline Matrix<heigth, width> &Matrix<heigth, width>::operator*=(float val)
 8011a42:	b580      	push	{r7, lr}
 8011a44:	b084      	sub	sp, #16
 8011a46:	af00      	add	r7, sp, #0
 8011a48:	6078      	str	r0, [r7, #4]
 8011a4a:	ed87 0a00 	vstr	s0, [r7]
    for(u_int i = 0; i < _values.size(); ++i) _values[i] *= val;
 8011a4e:	2300      	movs	r3, #0
 8011a50:	60fb      	str	r3, [r7, #12]
 8011a52:	e010      	b.n	8011a76 <_ZN3Mat6MatrixILt4ELt4EEmLEf+0x34>
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	68f9      	ldr	r1, [r7, #12]
 8011a58:	4618      	mov	r0, r3
 8011a5a:	f7fb ffb3 	bl	800d9c4 <_ZNSt5arrayIfLj16EEixEj>
 8011a5e:	4603      	mov	r3, r0
 8011a60:	ed93 7a00 	vldr	s14, [r3]
 8011a64:	edd7 7a00 	vldr	s15, [r7]
 8011a68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011a6c:	edc3 7a00 	vstr	s15, [r3]
 8011a70:	68fb      	ldr	r3, [r7, #12]
 8011a72:	3301      	adds	r3, #1
 8011a74:	60fb      	str	r3, [r7, #12]
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	4618      	mov	r0, r3
 8011a7a:	f000 fd70 	bl	801255e <_ZNKSt5arrayIfLj16EE4sizeEv>
 8011a7e:	4602      	mov	r2, r0
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	4293      	cmp	r3, r2
 8011a84:	bf34      	ite	cc
 8011a86:	2301      	movcc	r3, #1
 8011a88:	2300      	movcs	r3, #0
 8011a8a:	b2db      	uxtb	r3, r3
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d1e1      	bne.n	8011a54 <_ZN3Mat6MatrixILt4ELt4EEmLEf+0x12>
	return *this;
 8011a90:	687b      	ldr	r3, [r7, #4]
}
 8011a92:	4618      	mov	r0, r3
 8011a94:	3710      	adds	r7, #16
 8011a96:	46bd      	mov	sp, r7
 8011a98:	bd80      	pop	{r7, pc}

08011a9a <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERS3_>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 8011a9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a9c:	b0a9      	sub	sp, #164	; 0xa4
 8011a9e:	af00      	add	r7, sp, #0
 8011aa0:	60f8      	str	r0, [r7, #12]
 8011aa2:	60b9      	str	r1, [r7, #8]
 8011aa4:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 8011aa6:	2300      	movs	r3, #0
 8011aa8:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8011aac:	e02d      	b.n	8011b0a <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERS3_+0x70>
		for(u_short col = 0; col < width; ++col)
 8011aae:	2300      	movs	r3, #0
 8011ab0:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8011ab4:	e020      	b.n	8011af8 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERS3_+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 8011ab6:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8011aba:	f107 0314 	add.w	r3, r7, #20
 8011abe:	4611      	mov	r1, r2
 8011ac0:	4618      	mov	r0, r3
 8011ac2:	f000 fd57 	bl	8012574 <_ZNSt5arrayIS_IfLj4EELj4EEixEj>
 8011ac6:	4602      	mov	r2, r0
 8011ac8:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8011acc:	4619      	mov	r1, r3
 8011ace:	4610      	mov	r0, r2
 8011ad0:	f000 fcd4 	bl	801247c <_ZNSt5arrayIfLj4EEixEj>
 8011ad4:	4604      	mov	r4, r0
 8011ad6:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8011ada:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8011ade:	4619      	mov	r1, r3
 8011ae0:	68f8      	ldr	r0, [r7, #12]
 8011ae2:	f000 f88e 	bl	8011c02 <_ZNK3Mat6MatrixILt4ELt4EEclEtt>
 8011ae6:	eef0 7a40 	vmov.f32	s15, s0
 8011aea:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 8011aee:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8011af2:	3301      	adds	r3, #1
 8011af4:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8011af8:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8011afc:	2b03      	cmp	r3, #3
 8011afe:	d9da      	bls.n	8011ab6 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERS3_+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 8011b00:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8011b04:	3301      	adds	r3, #1
 8011b06:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8011b0a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8011b0e:	2b03      	cmp	r3, #3
 8011b10:	d9cd      	bls.n	8011aae <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERS3_+0x14>
	for(u_short col = 0; col < other_width; ++col)
 8011b12:	2300      	movs	r3, #0
 8011b14:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8011b18:	e02d      	b.n	8011b76 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERS3_+0xdc>
		for(u_short row = 0; row < width; ++row)
 8011b1a:	2300      	movs	r3, #0
 8011b1c:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8011b20:	e020      	b.n	8011b64 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERS3_+0xca>
			other_columns[col][row] = other(row, col);
 8011b22:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 8011b26:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011b2a:	4611      	mov	r1, r2
 8011b2c:	4618      	mov	r0, r3
 8011b2e:	f000 fd21 	bl	8012574 <_ZNSt5arrayIS_IfLj4EELj4EEixEj>
 8011b32:	4602      	mov	r2, r0
 8011b34:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8011b38:	4619      	mov	r1, r3
 8011b3a:	4610      	mov	r0, r2
 8011b3c:	f000 fc9e 	bl	801247c <_ZNSt5arrayIfLj4EEixEj>
 8011b40:	4604      	mov	r4, r0
 8011b42:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 8011b46:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8011b4a:	4619      	mov	r1, r3
 8011b4c:	68b8      	ldr	r0, [r7, #8]
 8011b4e:	f000 f858 	bl	8011c02 <_ZNK3Mat6MatrixILt4ELt4EEclEtt>
 8011b52:	eef0 7a40 	vmov.f32	s15, s0
 8011b56:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 8011b5a:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8011b5e:	3301      	adds	r3, #1
 8011b60:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8011b64:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8011b68:	2b03      	cmp	r3, #3
 8011b6a:	d9da      	bls.n	8011b22 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERS3_+0x88>
	for(u_short col = 0; col < other_width; ++col)
 8011b6c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8011b70:	3301      	adds	r3, #1
 8011b72:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8011b76:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8011b7a:	2b03      	cmp	r3, #3
 8011b7c:	d9cd      	bls.n	8011b1a <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERS3_+0x80>
	for(u_short row = 0; row < heigth; ++row)
 8011b7e:	2300      	movs	r3, #0
 8011b80:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8011b84:	e034      	b.n	8011bf0 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERS3_+0x156>
		for(u_short col = 0; col < other_width; ++col)
 8011b86:	2300      	movs	r3, #0
 8011b88:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8011b8c:	e027      	b.n	8011bde <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERS3_+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 8011b8e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8011b92:	f107 0314 	add.w	r3, r7, #20
 8011b96:	4611      	mov	r1, r2
 8011b98:	4618      	mov	r0, r3
 8011b9a:	f000 fceb 	bl	8012574 <_ZNSt5arrayIS_IfLj4EELj4EEixEj>
 8011b9e:	4605      	mov	r5, r0
 8011ba0:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 8011ba4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011ba8:	4611      	mov	r1, r2
 8011baa:	4618      	mov	r0, r3
 8011bac:	f000 fce2 	bl	8012574 <_ZNSt5arrayIS_IfLj4EELj4EEixEj>
 8011bb0:	4606      	mov	r6, r0
 8011bb2:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 8011bb6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8011bba:	4619      	mov	r1, r3
 8011bbc:	6878      	ldr	r0, [r7, #4]
 8011bbe:	f7fb fd46 	bl	800d64e <_ZN3Mat6MatrixILt4ELt4EEclEtt>
 8011bc2:	4604      	mov	r4, r0
 8011bc4:	4631      	mov	r1, r6
 8011bc6:	4628      	mov	r0, r5
 8011bc8:	f000 fce3 	bl	8012592 <_ZN3Mat13Multiply_rowsILj4EEEfRKSt5arrayIfXT_EES4_>
 8011bcc:	eef0 7a40 	vmov.f32	s15, s0
 8011bd0:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 8011bd4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8011bd8:	3301      	adds	r3, #1
 8011bda:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8011bde:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8011be2:	2b03      	cmp	r3, #3
 8011be4:	d9d3      	bls.n	8011b8e <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERS3_+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 8011be6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8011bea:	3301      	adds	r3, #1
 8011bec:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8011bf0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8011bf4:	2b03      	cmp	r3, #3
 8011bf6:	d9c6      	bls.n	8011b86 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERS3_+0xec>
}
 8011bf8:	bf00      	nop
 8011bfa:	bf00      	nop
 8011bfc:	37a4      	adds	r7, #164	; 0xa4
 8011bfe:	46bd      	mov	sp, r7
 8011c00:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011c02 <_ZNK3Mat6MatrixILt4ELt4EEclEtt>:
float Matrix<heigth, width>::operator()(u_short row, u_short col) const
 8011c02:	b580      	push	{r7, lr}
 8011c04:	b084      	sub	sp, #16
 8011c06:	af00      	add	r7, sp, #0
 8011c08:	6078      	str	r0, [r7, #4]
 8011c0a:	460b      	mov	r3, r1
 8011c0c:	807b      	strh	r3, [r7, #2]
 8011c0e:	4613      	mov	r3, r2
 8011c10:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 8011c12:	887b      	ldrh	r3, [r7, #2]
 8011c14:	009a      	lsls	r2, r3, #2
 8011c16:	883b      	ldrh	r3, [r7, #0]
 8011c18:	4413      	add	r3, r2
 8011c1a:	60fb      	str	r3, [r7, #12]
	return _values[index];
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	68f9      	ldr	r1, [r7, #12]
 8011c20:	4618      	mov	r0, r3
 8011c22:	f000 fce9 	bl	80125f8 <_ZNKSt5arrayIfLj16EEixEj>
 8011c26:	4603      	mov	r3, r0
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	ee07 3a90 	vmov	s15, r3
}
 8011c2e:	eeb0 0a67 	vmov.f32	s0, s15
 8011c32:	3710      	adds	r7, #16
 8011c34:	46bd      	mov	sp, r7
 8011c36:	bd80      	pop	{r7, pc}

08011c38 <_ZN3Mat6MatrixILt4ELt4EEpLERKS1_>:
inline Matrix<heigth, width> &Matrix<heigth, width>::operator+=(const Matrix<heigth, width> &other)
 8011c38:	b580      	push	{r7, lr}
 8011c3a:	ed2d 8b02 	vpush	{d8}
 8011c3e:	b084      	sub	sp, #16
 8011c40:	af00      	add	r7, sp, #0
 8011c42:	6078      	str	r0, [r7, #4]
 8011c44:	6039      	str	r1, [r7, #0]
    for(u_int i = 0; i < _values.size(); ++i) _values[i] += other._values[i];
 8011c46:	2300      	movs	r3, #0
 8011c48:	60fb      	str	r3, [r7, #12]
 8011c4a:	e016      	b.n	8011c7a <_ZN3Mat6MatrixILt4ELt4EEpLERKS1_+0x42>
 8011c4c:	683b      	ldr	r3, [r7, #0]
 8011c4e:	68f9      	ldr	r1, [r7, #12]
 8011c50:	4618      	mov	r0, r3
 8011c52:	f000 fcd1 	bl	80125f8 <_ZNKSt5arrayIfLj16EEixEj>
 8011c56:	4603      	mov	r3, r0
 8011c58:	ed93 8a00 	vldr	s16, [r3]
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	68f9      	ldr	r1, [r7, #12]
 8011c60:	4618      	mov	r0, r3
 8011c62:	f7fb feaf 	bl	800d9c4 <_ZNSt5arrayIfLj16EEixEj>
 8011c66:	4603      	mov	r3, r0
 8011c68:	edd3 7a00 	vldr	s15, [r3]
 8011c6c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8011c70:	edc3 7a00 	vstr	s15, [r3]
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	3301      	adds	r3, #1
 8011c78:	60fb      	str	r3, [r7, #12]
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	4618      	mov	r0, r3
 8011c7e:	f000 fc6e 	bl	801255e <_ZNKSt5arrayIfLj16EE4sizeEv>
 8011c82:	4602      	mov	r2, r0
 8011c84:	68fb      	ldr	r3, [r7, #12]
 8011c86:	4293      	cmp	r3, r2
 8011c88:	bf34      	ite	cc
 8011c8a:	2301      	movcc	r3, #1
 8011c8c:	2300      	movcs	r3, #0
 8011c8e:	b2db      	uxtb	r3, r3
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d1db      	bne.n	8011c4c <_ZN3Mat6MatrixILt4ELt4EEpLERKS1_+0x14>
	return *this;
 8011c94:	687b      	ldr	r3, [r7, #4]
}
 8011c96:	4618      	mov	r0, r3
 8011c98:	3710      	adds	r7, #16
 8011c9a:	46bd      	mov	sp, r7
 8011c9c:	ecbd 8b02 	vpop	{d8}
 8011ca0:	bd80      	pop	{r7, pc}

08011ca2 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 8011ca2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ca4:	b0a5      	sub	sp, #148	; 0x94
 8011ca6:	af00      	add	r7, sp, #0
 8011ca8:	60f8      	str	r0, [r7, #12]
 8011caa:	60b9      	str	r1, [r7, #8]
 8011cac:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 8011cae:	2300      	movs	r3, #0
 8011cb0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8011cb4:	e02d      	b.n	8011d12 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x70>
		for(u_short col = 0; col < width; ++col)
 8011cb6:	2300      	movs	r3, #0
 8011cb8:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8011cbc:	e020      	b.n	8011d00 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 8011cbe:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8011cc2:	f107 0314 	add.w	r3, r7, #20
 8011cc6:	4611      	mov	r1, r2
 8011cc8:	4618      	mov	r0, r3
 8011cca:	f000 fca4 	bl	8012616 <_ZNSt5arrayIS_IfLj4EELj3EEixEj>
 8011cce:	4602      	mov	r2, r0
 8011cd0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8011cd4:	4619      	mov	r1, r3
 8011cd6:	4610      	mov	r0, r2
 8011cd8:	f000 fbd0 	bl	801247c <_ZNSt5arrayIfLj4EEixEj>
 8011cdc:	4604      	mov	r4, r0
 8011cde:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8011ce2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8011ce6:	4619      	mov	r1, r3
 8011ce8:	68f8      	ldr	r0, [r7, #12]
 8011cea:	f000 f8a7 	bl	8011e3c <_ZNK3Mat6MatrixILt3ELt4EEclEtt>
 8011cee:	eef0 7a40 	vmov.f32	s15, s0
 8011cf2:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 8011cf6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8011cfa:	3301      	adds	r3, #1
 8011cfc:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8011d00:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8011d04:	2b03      	cmp	r3, #3
 8011d06:	d9da      	bls.n	8011cbe <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 8011d08:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8011d0c:	3301      	adds	r3, #1
 8011d0e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8011d12:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8011d16:	2b02      	cmp	r3, #2
 8011d18:	d9cd      	bls.n	8011cb6 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x14>
	for(u_short col = 0; col < other_width; ++col)
 8011d1a:	2300      	movs	r3, #0
 8011d1c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8011d20:	e02d      	b.n	8011d7e <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0xdc>
		for(u_short row = 0; row < width; ++row)
 8011d22:	2300      	movs	r3, #0
 8011d24:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8011d28:	e020      	b.n	8011d6c <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0xca>
			other_columns[col][row] = other(row, col);
 8011d2a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8011d2e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011d32:	4611      	mov	r1, r2
 8011d34:	4618      	mov	r0, r3
 8011d36:	f000 fc1d 	bl	8012574 <_ZNSt5arrayIS_IfLj4EELj4EEixEj>
 8011d3a:	4602      	mov	r2, r0
 8011d3c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8011d40:	4619      	mov	r1, r3
 8011d42:	4610      	mov	r0, r2
 8011d44:	f000 fb9a 	bl	801247c <_ZNSt5arrayIfLj4EEixEj>
 8011d48:	4604      	mov	r4, r0
 8011d4a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8011d4e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8011d52:	4619      	mov	r1, r3
 8011d54:	68b8      	ldr	r0, [r7, #8]
 8011d56:	f7ff ff54 	bl	8011c02 <_ZNK3Mat6MatrixILt4ELt4EEclEtt>
 8011d5a:	eef0 7a40 	vmov.f32	s15, s0
 8011d5e:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 8011d62:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8011d66:	3301      	adds	r3, #1
 8011d68:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8011d6c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8011d70:	2b03      	cmp	r3, #3
 8011d72:	d9da      	bls.n	8011d2a <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x88>
	for(u_short col = 0; col < other_width; ++col)
 8011d74:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011d78:	3301      	adds	r3, #1
 8011d7a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8011d7e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011d82:	2b03      	cmp	r3, #3
 8011d84:	d9cd      	bls.n	8011d22 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x80>
	for(u_short row = 0; row < heigth; ++row)
 8011d86:	2300      	movs	r3, #0
 8011d88:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8011d8c:	e034      	b.n	8011df8 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x156>
		for(u_short col = 0; col < other_width; ++col)
 8011d8e:	2300      	movs	r3, #0
 8011d90:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8011d94:	e027      	b.n	8011de6 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 8011d96:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 8011d9a:	f107 0314 	add.w	r3, r7, #20
 8011d9e:	4611      	mov	r1, r2
 8011da0:	4618      	mov	r0, r3
 8011da2:	f000 fc38 	bl	8012616 <_ZNSt5arrayIS_IfLj4EELj3EEixEj>
 8011da6:	4605      	mov	r5, r0
 8011da8:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 8011dac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011db0:	4611      	mov	r1, r2
 8011db2:	4618      	mov	r0, r3
 8011db4:	f000 fbde 	bl	8012574 <_ZNSt5arrayIS_IfLj4EELj4EEixEj>
 8011db8:	4606      	mov	r6, r0
 8011dba:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 8011dbe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8011dc2:	4619      	mov	r1, r3
 8011dc4:	6878      	ldr	r0, [r7, #4]
 8011dc6:	f7ff fd54 	bl	8011872 <_ZN3Mat6MatrixILt3ELt4EEclEtt>
 8011dca:	4604      	mov	r4, r0
 8011dcc:	4631      	mov	r1, r6
 8011dce:	4628      	mov	r0, r5
 8011dd0:	f000 fbdf 	bl	8012592 <_ZN3Mat13Multiply_rowsILj4EEEfRKSt5arrayIfXT_EES4_>
 8011dd4:	eef0 7a40 	vmov.f32	s15, s0
 8011dd8:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 8011ddc:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8011de0:	3301      	adds	r3, #1
 8011de2:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8011de6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8011dea:	2b03      	cmp	r3, #3
 8011dec:	d9d3      	bls.n	8011d96 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 8011dee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8011df2:	3301      	adds	r3, #1
 8011df4:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8011df8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8011dfc:	2b02      	cmp	r3, #2
 8011dfe:	d9c6      	bls.n	8011d8e <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0xec>
}
 8011e00:	bf00      	nop
 8011e02:	bf00      	nop
 8011e04:	3794      	adds	r7, #148	; 0x94
 8011e06:	46bd      	mov	sp, r7
 8011e08:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011e0a <_ZN3Mat6MatrixILt4ELt3EEclEtt>:
float& Matrix<heigth, width>::operator()(u_short row, u_short col)
 8011e0a:	b580      	push	{r7, lr}
 8011e0c:	b084      	sub	sp, #16
 8011e0e:	af00      	add	r7, sp, #0
 8011e10:	6078      	str	r0, [r7, #4]
 8011e12:	460b      	mov	r3, r1
 8011e14:	807b      	strh	r3, [r7, #2]
 8011e16:	4613      	mov	r3, r2
 8011e18:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 8011e1a:	887a      	ldrh	r2, [r7, #2]
 8011e1c:	4613      	mov	r3, r2
 8011e1e:	005b      	lsls	r3, r3, #1
 8011e20:	441a      	add	r2, r3
 8011e22:	883b      	ldrh	r3, [r7, #0]
 8011e24:	4413      	add	r3, r2
 8011e26:	60fb      	str	r3, [r7, #12]
	return _values[index];
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	68f9      	ldr	r1, [r7, #12]
 8011e2c:	4618      	mov	r0, r3
 8011e2e:	f000 fb69 	bl	8012504 <_ZNSt5arrayIfLj12EEixEj>
 8011e32:	4603      	mov	r3, r0
}
 8011e34:	4618      	mov	r0, r3
 8011e36:	3710      	adds	r7, #16
 8011e38:	46bd      	mov	sp, r7
 8011e3a:	bd80      	pop	{r7, pc}

08011e3c <_ZNK3Mat6MatrixILt3ELt4EEclEtt>:
float Matrix<heigth, width>::operator()(u_short row, u_short col) const
 8011e3c:	b580      	push	{r7, lr}
 8011e3e:	b084      	sub	sp, #16
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	6078      	str	r0, [r7, #4]
 8011e44:	460b      	mov	r3, r1
 8011e46:	807b      	strh	r3, [r7, #2]
 8011e48:	4613      	mov	r3, r2
 8011e4a:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 8011e4c:	887b      	ldrh	r3, [r7, #2]
 8011e4e:	009a      	lsls	r2, r3, #2
 8011e50:	883b      	ldrh	r3, [r7, #0]
 8011e52:	4413      	add	r3, r2
 8011e54:	60fb      	str	r3, [r7, #12]
	return _values[index];
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	68f9      	ldr	r1, [r7, #12]
 8011e5a:	4618      	mov	r0, r3
 8011e5c:	f000 fb61 	bl	8012522 <_ZNKSt5arrayIfLj12EEixEj>
 8011e60:	4603      	mov	r3, r0
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	ee07 3a90 	vmov	s15, r3
}
 8011e68:	eeb0 0a67 	vmov.f32	s0, s15
 8011e6c:	3710      	adds	r7, #16
 8011e6e:	46bd      	mov	sp, r7
 8011e70:	bd80      	pop	{r7, pc}

08011e72 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 8011e72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e74:	b0a1      	sub	sp, #132	; 0x84
 8011e76:	af00      	add	r7, sp, #0
 8011e78:	60f8      	str	r0, [r7, #12]
 8011e7a:	60b9      	str	r1, [r7, #8]
 8011e7c:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 8011e7e:	2300      	movs	r3, #0
 8011e80:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8011e84:	e02d      	b.n	8011ee2 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x70>
		for(u_short col = 0; col < width; ++col)
 8011e86:	2300      	movs	r3, #0
 8011e88:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8011e8c:	e020      	b.n	8011ed0 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 8011e8e:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8011e92:	f107 0314 	add.w	r3, r7, #20
 8011e96:	4611      	mov	r1, r2
 8011e98:	4618      	mov	r0, r3
 8011e9a:	f000 fbbc 	bl	8012616 <_ZNSt5arrayIS_IfLj4EELj3EEixEj>
 8011e9e:	4602      	mov	r2, r0
 8011ea0:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8011ea4:	4619      	mov	r1, r3
 8011ea6:	4610      	mov	r0, r2
 8011ea8:	f000 fae8 	bl	801247c <_ZNSt5arrayIfLj4EEixEj>
 8011eac:	4604      	mov	r4, r0
 8011eae:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8011eb2:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8011eb6:	4619      	mov	r1, r3
 8011eb8:	68f8      	ldr	r0, [r7, #12]
 8011eba:	f7ff ffbf 	bl	8011e3c <_ZNK3Mat6MatrixILt3ELt4EEclEtt>
 8011ebe:	eef0 7a40 	vmov.f32	s15, s0
 8011ec2:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 8011ec6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8011eca:	3301      	adds	r3, #1
 8011ecc:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8011ed0:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8011ed4:	2b03      	cmp	r3, #3
 8011ed6:	d9da      	bls.n	8011e8e <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 8011ed8:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8011edc:	3301      	adds	r3, #1
 8011ede:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8011ee2:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8011ee6:	2b02      	cmp	r3, #2
 8011ee8:	d9cd      	bls.n	8011e86 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x14>
	for(u_short col = 0; col < other_width; ++col)
 8011eea:	2300      	movs	r3, #0
 8011eec:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8011ef0:	e02d      	b.n	8011f4e <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0xdc>
		for(u_short row = 0; row < width; ++row)
 8011ef2:	2300      	movs	r3, #0
 8011ef4:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8011ef8:	e020      	b.n	8011f3c <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0xca>
			other_columns[col][row] = other(row, col);
 8011efa:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8011efe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011f02:	4611      	mov	r1, r2
 8011f04:	4618      	mov	r0, r3
 8011f06:	f000 fb86 	bl	8012616 <_ZNSt5arrayIS_IfLj4EELj3EEixEj>
 8011f0a:	4602      	mov	r2, r0
 8011f0c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8011f10:	4619      	mov	r1, r3
 8011f12:	4610      	mov	r0, r2
 8011f14:	f000 fab2 	bl	801247c <_ZNSt5arrayIfLj4EEixEj>
 8011f18:	4604      	mov	r4, r0
 8011f1a:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8011f1e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8011f22:	4619      	mov	r1, r3
 8011f24:	68b8      	ldr	r0, [r7, #8]
 8011f26:	f7ff fcbb 	bl	80118a0 <_ZNK3Mat6MatrixILt4ELt3EEclEtt>
 8011f2a:	eef0 7a40 	vmov.f32	s15, s0
 8011f2e:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 8011f32:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8011f36:	3301      	adds	r3, #1
 8011f38:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8011f3c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8011f40:	2b03      	cmp	r3, #3
 8011f42:	d9da      	bls.n	8011efa <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x88>
	for(u_short col = 0; col < other_width; ++col)
 8011f44:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8011f48:	3301      	adds	r3, #1
 8011f4a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8011f4e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8011f52:	2b02      	cmp	r3, #2
 8011f54:	d9cd      	bls.n	8011ef2 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x80>
	for(u_short row = 0; row < heigth; ++row)
 8011f56:	2300      	movs	r3, #0
 8011f58:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8011f5c:	e034      	b.n	8011fc8 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x156>
		for(u_short col = 0; col < other_width; ++col)
 8011f5e:	2300      	movs	r3, #0
 8011f60:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8011f64:	e027      	b.n	8011fb6 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 8011f66:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011f6a:	f107 0314 	add.w	r3, r7, #20
 8011f6e:	4611      	mov	r1, r2
 8011f70:	4618      	mov	r0, r3
 8011f72:	f000 fb50 	bl	8012616 <_ZNSt5arrayIS_IfLj4EELj3EEixEj>
 8011f76:	4605      	mov	r5, r0
 8011f78:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8011f7c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011f80:	4611      	mov	r1, r2
 8011f82:	4618      	mov	r0, r3
 8011f84:	f000 fb47 	bl	8012616 <_ZNSt5arrayIS_IfLj4EELj3EEixEj>
 8011f88:	4606      	mov	r6, r0
 8011f8a:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8011f8e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8011f92:	4619      	mov	r1, r3
 8011f94:	6878      	ldr	r0, [r7, #4]
 8011f96:	f7fb fbb3 	bl	800d700 <_ZN3Mat6MatrixILt3ELt3EEclEtt>
 8011f9a:	4604      	mov	r4, r0
 8011f9c:	4631      	mov	r1, r6
 8011f9e:	4628      	mov	r0, r5
 8011fa0:	f000 faf7 	bl	8012592 <_ZN3Mat13Multiply_rowsILj4EEEfRKSt5arrayIfXT_EES4_>
 8011fa4:	eef0 7a40 	vmov.f32	s15, s0
 8011fa8:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 8011fac:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8011fb0:	3301      	adds	r3, #1
 8011fb2:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8011fb6:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8011fba:	2b02      	cmp	r3, #2
 8011fbc:	d9d3      	bls.n	8011f66 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 8011fbe:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8011fc2:	3301      	adds	r3, #1
 8011fc4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8011fc8:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8011fcc:	2b02      	cmp	r3, #2
 8011fce:	d9c6      	bls.n	8011f5e <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0xec>
}
 8011fd0:	bf00      	nop
 8011fd2:	bf00      	nop
 8011fd4:	3784      	adds	r7, #132	; 0x84
 8011fd6:	46bd      	mov	sp, r7
 8011fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011fda <_ZN3Mat6MatrixILt3ELt3EEpLERKS1_>:
inline Matrix<heigth, width> &Matrix<heigth, width>::operator+=(const Matrix<heigth, width> &other)
 8011fda:	b580      	push	{r7, lr}
 8011fdc:	ed2d 8b02 	vpush	{d8}
 8011fe0:	b084      	sub	sp, #16
 8011fe2:	af00      	add	r7, sp, #0
 8011fe4:	6078      	str	r0, [r7, #4]
 8011fe6:	6039      	str	r1, [r7, #0]
    for(u_int i = 0; i < _values.size(); ++i) _values[i] += other._values[i];
 8011fe8:	2300      	movs	r3, #0
 8011fea:	60fb      	str	r3, [r7, #12]
 8011fec:	e016      	b.n	801201c <_ZN3Mat6MatrixILt3ELt3EEpLERKS1_+0x42>
 8011fee:	683b      	ldr	r3, [r7, #0]
 8011ff0:	68f9      	ldr	r1, [r7, #12]
 8011ff2:	4618      	mov	r0, r3
 8011ff4:	f7fb fe4c 	bl	800dc90 <_ZNKSt5arrayIfLj9EEixEj>
 8011ff8:	4603      	mov	r3, r0
 8011ffa:	ed93 8a00 	vldr	s16, [r3]
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	68f9      	ldr	r1, [r7, #12]
 8012002:	4618      	mov	r0, r3
 8012004:	f7fb fd22 	bl	800da4c <_ZNSt5arrayIfLj9EEixEj>
 8012008:	4603      	mov	r3, r0
 801200a:	edd3 7a00 	vldr	s15, [r3]
 801200e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8012012:	edc3 7a00 	vstr	s15, [r3]
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	3301      	adds	r3, #1
 801201a:	60fb      	str	r3, [r7, #12]
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	4618      	mov	r0, r3
 8012020:	f000 fb08 	bl	8012634 <_ZNKSt5arrayIfLj9EE4sizeEv>
 8012024:	4602      	mov	r2, r0
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	4293      	cmp	r3, r2
 801202a:	bf34      	ite	cc
 801202c:	2301      	movcc	r3, #1
 801202e:	2300      	movcs	r3, #0
 8012030:	b2db      	uxtb	r3, r3
 8012032:	2b00      	cmp	r3, #0
 8012034:	d1db      	bne.n	8011fee <_ZN3Mat6MatrixILt3ELt3EEpLERKS1_+0x14>
	return *this;
 8012036:	687b      	ldr	r3, [r7, #4]
}
 8012038:	4618      	mov	r0, r3
 801203a:	3710      	adds	r7, #16
 801203c:	46bd      	mov	sp, r7
 801203e:	ecbd 8b02 	vpop	{d8}
 8012042:	bd80      	pop	{r7, pc}

08012044 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERS3_>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 8012044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012046:	b0a5      	sub	sp, #148	; 0x94
 8012048:	af00      	add	r7, sp, #0
 801204a:	60f8      	str	r0, [r7, #12]
 801204c:	60b9      	str	r1, [r7, #8]
 801204e:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 8012050:	2300      	movs	r3, #0
 8012052:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8012056:	e02d      	b.n	80120b4 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERS3_+0x70>
		for(u_short col = 0; col < width; ++col)
 8012058:	2300      	movs	r3, #0
 801205a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 801205e:	e020      	b.n	80120a2 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERS3_+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 8012060:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8012064:	f107 0314 	add.w	r3, r7, #20
 8012068:	4611      	mov	r1, r2
 801206a:	4618      	mov	r0, r3
 801206c:	f000 fa82 	bl	8012574 <_ZNSt5arrayIS_IfLj4EELj4EEixEj>
 8012070:	4602      	mov	r2, r0
 8012072:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8012076:	4619      	mov	r1, r3
 8012078:	4610      	mov	r0, r2
 801207a:	f000 f9ff 	bl	801247c <_ZNSt5arrayIfLj4EEixEj>
 801207e:	4604      	mov	r4, r0
 8012080:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8012084:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8012088:	4619      	mov	r1, r3
 801208a:	68f8      	ldr	r0, [r7, #12]
 801208c:	f7ff fdb9 	bl	8011c02 <_ZNK3Mat6MatrixILt4ELt4EEclEtt>
 8012090:	eef0 7a40 	vmov.f32	s15, s0
 8012094:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 8012098:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 801209c:	3301      	adds	r3, #1
 801209e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80120a2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80120a6:	2b03      	cmp	r3, #3
 80120a8:	d9da      	bls.n	8012060 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERS3_+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 80120aa:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80120ae:	3301      	adds	r3, #1
 80120b0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80120b4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80120b8:	2b03      	cmp	r3, #3
 80120ba:	d9cd      	bls.n	8012058 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERS3_+0x14>
	for(u_short col = 0; col < other_width; ++col)
 80120bc:	2300      	movs	r3, #0
 80120be:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80120c2:	e02d      	b.n	8012120 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERS3_+0xdc>
		for(u_short row = 0; row < width; ++row)
 80120c4:	2300      	movs	r3, #0
 80120c6:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80120ca:	e020      	b.n	801210e <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERS3_+0xca>
			other_columns[col][row] = other(row, col);
 80120cc:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80120d0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80120d4:	4611      	mov	r1, r2
 80120d6:	4618      	mov	r0, r3
 80120d8:	f000 fa9d 	bl	8012616 <_ZNSt5arrayIS_IfLj4EELj3EEixEj>
 80120dc:	4602      	mov	r2, r0
 80120de:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80120e2:	4619      	mov	r1, r3
 80120e4:	4610      	mov	r0, r2
 80120e6:	f000 f9c9 	bl	801247c <_ZNSt5arrayIfLj4EEixEj>
 80120ea:	4604      	mov	r4, r0
 80120ec:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80120f0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80120f4:	4619      	mov	r1, r3
 80120f6:	68b8      	ldr	r0, [r7, #8]
 80120f8:	f7ff fbd2 	bl	80118a0 <_ZNK3Mat6MatrixILt4ELt3EEclEtt>
 80120fc:	eef0 7a40 	vmov.f32	s15, s0
 8012100:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 8012104:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8012108:	3301      	adds	r3, #1
 801210a:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 801210e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8012112:	2b03      	cmp	r3, #3
 8012114:	d9da      	bls.n	80120cc <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERS3_+0x88>
	for(u_short col = 0; col < other_width; ++col)
 8012116:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801211a:	3301      	adds	r3, #1
 801211c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8012120:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8012124:	2b02      	cmp	r3, #2
 8012126:	d9cd      	bls.n	80120c4 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERS3_+0x80>
	for(u_short row = 0; row < heigth; ++row)
 8012128:	2300      	movs	r3, #0
 801212a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 801212e:	e034      	b.n	801219a <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERS3_+0x156>
		for(u_short col = 0; col < other_width; ++col)
 8012130:	2300      	movs	r3, #0
 8012132:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8012136:	e027      	b.n	8012188 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERS3_+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 8012138:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 801213c:	f107 0314 	add.w	r3, r7, #20
 8012140:	4611      	mov	r1, r2
 8012142:	4618      	mov	r0, r3
 8012144:	f000 fa16 	bl	8012574 <_ZNSt5arrayIS_IfLj4EELj4EEixEj>
 8012148:	4605      	mov	r5, r0
 801214a:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 801214e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012152:	4611      	mov	r1, r2
 8012154:	4618      	mov	r0, r3
 8012156:	f000 fa5e 	bl	8012616 <_ZNSt5arrayIS_IfLj4EELj3EEixEj>
 801215a:	4606      	mov	r6, r0
 801215c:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 8012160:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8012164:	4619      	mov	r1, r3
 8012166:	6878      	ldr	r0, [r7, #4]
 8012168:	f7ff fe4f 	bl	8011e0a <_ZN3Mat6MatrixILt4ELt3EEclEtt>
 801216c:	4604      	mov	r4, r0
 801216e:	4631      	mov	r1, r6
 8012170:	4628      	mov	r0, r5
 8012172:	f000 fa0e 	bl	8012592 <_ZN3Mat13Multiply_rowsILj4EEEfRKSt5arrayIfXT_EES4_>
 8012176:	eef0 7a40 	vmov.f32	s15, s0
 801217a:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 801217e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8012182:	3301      	adds	r3, #1
 8012184:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8012188:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 801218c:	2b02      	cmp	r3, #2
 801218e:	d9d3      	bls.n	8012138 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERS3_+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 8012190:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8012194:	3301      	adds	r3, #1
 8012196:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 801219a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 801219e:	2b03      	cmp	r3, #3
 80121a0:	d9c6      	bls.n	8012130 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERS3_+0xec>
}
 80121a2:	bf00      	nop
 80121a4:	bf00      	nop
 80121a6:	3794      	adds	r7, #148	; 0x94
 80121a8:	46bd      	mov	sp, r7
 80121aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080121ac <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 80121ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80121ae:	b09d      	sub	sp, #116	; 0x74
 80121b0:	af00      	add	r7, sp, #0
 80121b2:	60f8      	str	r0, [r7, #12]
 80121b4:	60b9      	str	r1, [r7, #8]
 80121b6:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 80121b8:	2300      	movs	r3, #0
 80121ba:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 80121be:	e02d      	b.n	801221c <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x70>
		for(u_short col = 0; col < width; ++col)
 80121c0:	2300      	movs	r3, #0
 80121c2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 80121c6:	e020      	b.n	801220a <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 80121c8:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 80121cc:	f107 0310 	add.w	r3, r7, #16
 80121d0:	4611      	mov	r1, r2
 80121d2:	4618      	mov	r0, r3
 80121d4:	f000 f9b4 	bl	8012540 <_ZNSt5arrayIS_IfLj3EELj4EEixEj>
 80121d8:	4602      	mov	r2, r0
 80121da:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80121de:	4619      	mov	r1, r3
 80121e0:	4610      	mov	r0, r2
 80121e2:	f7fb fadb 	bl	800d79c <_ZNSt5arrayIfLj3EEixEj>
 80121e6:	4604      	mov	r4, r0
 80121e8:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80121ec:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80121f0:	4619      	mov	r1, r3
 80121f2:	68f8      	ldr	r0, [r7, #12]
 80121f4:	f7ff fb54 	bl	80118a0 <_ZNK3Mat6MatrixILt4ELt3EEclEtt>
 80121f8:	eef0 7a40 	vmov.f32	s15, s0
 80121fc:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 8012200:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8012204:	3301      	adds	r3, #1
 8012206:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 801220a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 801220e:	2b02      	cmp	r3, #2
 8012210:	d9da      	bls.n	80121c8 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 8012212:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8012216:	3301      	adds	r3, #1
 8012218:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 801221c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8012220:	2b03      	cmp	r3, #3
 8012222:	d9cd      	bls.n	80121c0 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x14>
	for(u_short col = 0; col < other_width; ++col)
 8012224:	2300      	movs	r3, #0
 8012226:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 801222a:	e02d      	b.n	8012288 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0xdc>
		for(u_short row = 0; row < width; ++row)
 801222c:	2300      	movs	r3, #0
 801222e:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8012232:	e020      	b.n	8012276 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0xca>
			other_columns[col][row] = other(row, col);
 8012234:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 8012238:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801223c:	4611      	mov	r1, r2
 801223e:	4618      	mov	r0, r3
 8012240:	f7fb fc2f 	bl	800daa2 <_ZNSt5arrayIS_IfLj3EELj3EEixEj>
 8012244:	4602      	mov	r2, r0
 8012246:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 801224a:	4619      	mov	r1, r3
 801224c:	4610      	mov	r0, r2
 801224e:	f7fb faa5 	bl	800d79c <_ZNSt5arrayIfLj3EEixEj>
 8012252:	4604      	mov	r4, r0
 8012254:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 8012258:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 801225c:	4619      	mov	r1, r3
 801225e:	68b8      	ldr	r0, [r7, #8]
 8012260:	f7fb fc2e 	bl	800dac0 <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 8012264:	eef0 7a40 	vmov.f32	s15, s0
 8012268:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 801226c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8012270:	3301      	adds	r3, #1
 8012272:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8012276:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 801227a:	2b02      	cmp	r3, #2
 801227c:	d9da      	bls.n	8012234 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x88>
	for(u_short col = 0; col < other_width; ++col)
 801227e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8012282:	3301      	adds	r3, #1
 8012284:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8012288:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 801228c:	2b02      	cmp	r3, #2
 801228e:	d9cd      	bls.n	801222c <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x80>
	for(u_short row = 0; row < heigth; ++row)
 8012290:	2300      	movs	r3, #0
 8012292:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8012296:	e034      	b.n	8012302 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x156>
		for(u_short col = 0; col < other_width; ++col)
 8012298:	2300      	movs	r3, #0
 801229a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 801229e:	e027      	b.n	80122f0 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 80122a0:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80122a4:	f107 0310 	add.w	r3, r7, #16
 80122a8:	4611      	mov	r1, r2
 80122aa:	4618      	mov	r0, r3
 80122ac:	f000 f948 	bl	8012540 <_ZNSt5arrayIS_IfLj3EELj4EEixEj>
 80122b0:	4605      	mov	r5, r0
 80122b2:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 80122b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80122ba:	4611      	mov	r1, r2
 80122bc:	4618      	mov	r0, r3
 80122be:	f7fb fbf0 	bl	800daa2 <_ZNSt5arrayIS_IfLj3EELj3EEixEj>
 80122c2:	4606      	mov	r6, r0
 80122c4:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 80122c8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80122cc:	4619      	mov	r1, r3
 80122ce:	6878      	ldr	r0, [r7, #4]
 80122d0:	f7ff fd9b 	bl	8011e0a <_ZN3Mat6MatrixILt4ELt3EEclEtt>
 80122d4:	4604      	mov	r4, r0
 80122d6:	4631      	mov	r1, r6
 80122d8:	4628      	mov	r0, r5
 80122da:	f7fb fc37 	bl	800db4c <_ZN3Mat13Multiply_rowsILj3EEEfRKSt5arrayIfXT_EES4_>
 80122de:	eef0 7a40 	vmov.f32	s15, s0
 80122e2:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 80122e6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80122ea:	3301      	adds	r3, #1
 80122ec:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80122f0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80122f4:	2b02      	cmp	r3, #2
 80122f6:	d9d3      	bls.n	80122a0 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 80122f8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80122fc:	3301      	adds	r3, #1
 80122fe:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8012302:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8012306:	2b03      	cmp	r3, #3
 8012308:	d9c6      	bls.n	8012298 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0xec>
}
 801230a:	bf00      	nop
 801230c:	bf00      	nop
 801230e:	3774      	adds	r7, #116	; 0x74
 8012310:	46bd      	mov	sp, r7
 8012312:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012314 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 8012314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012316:	b097      	sub	sp, #92	; 0x5c
 8012318:	af00      	add	r7, sp, #0
 801231a:	60f8      	str	r0, [r7, #12]
 801231c:	60b9      	str	r1, [r7, #8]
 801231e:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 8012320:	2300      	movs	r3, #0
 8012322:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8012326:	e02d      	b.n	8012384 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x70>
		for(u_short col = 0; col < width; ++col)
 8012328:	2300      	movs	r3, #0
 801232a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 801232e:	e020      	b.n	8012372 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 8012330:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8012334:	f107 0310 	add.w	r3, r7, #16
 8012338:	4611      	mov	r1, r2
 801233a:	4618      	mov	r0, r3
 801233c:	f000 f900 	bl	8012540 <_ZNSt5arrayIS_IfLj3EELj4EEixEj>
 8012340:	4602      	mov	r2, r0
 8012342:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8012346:	4619      	mov	r1, r3
 8012348:	4610      	mov	r0, r2
 801234a:	f7fb fa27 	bl	800d79c <_ZNSt5arrayIfLj3EEixEj>
 801234e:	4604      	mov	r4, r0
 8012350:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8012354:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8012358:	4619      	mov	r1, r3
 801235a:	68f8      	ldr	r0, [r7, #12]
 801235c:	f7ff faa0 	bl	80118a0 <_ZNK3Mat6MatrixILt4ELt3EEclEtt>
 8012360:	eef0 7a40 	vmov.f32	s15, s0
 8012364:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 8012368:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 801236c:	3301      	adds	r3, #1
 801236e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8012372:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8012376:	2b02      	cmp	r3, #2
 8012378:	d9da      	bls.n	8012330 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 801237a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801237e:	3301      	adds	r3, #1
 8012380:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8012384:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8012388:	2b03      	cmp	r3, #3
 801238a:	d9cd      	bls.n	8012328 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x14>
	for(u_short col = 0; col < other_width; ++col)
 801238c:	2300      	movs	r3, #0
 801238e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8012392:	e02d      	b.n	80123f0 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0xdc>
		for(u_short row = 0; row < width; ++row)
 8012394:	2300      	movs	r3, #0
 8012396:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 801239a:	e020      	b.n	80123de <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0xca>
			other_columns[col][row] = other(row, col);
 801239c:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 80123a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80123a4:	4611      	mov	r1, r2
 80123a6:	4618      	mov	r0, r3
 80123a8:	f7fb fba7 	bl	800dafa <_ZNSt5arrayIS_IfLj3EELj1EEixEj>
 80123ac:	4602      	mov	r2, r0
 80123ae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80123b2:	4619      	mov	r1, r3
 80123b4:	4610      	mov	r0, r2
 80123b6:	f7fb f9f1 	bl	800d79c <_ZNSt5arrayIfLj3EEixEj>
 80123ba:	4604      	mov	r4, r0
 80123bc:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 80123c0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80123c4:	4619      	mov	r1, r3
 80123c6:	68b8      	ldr	r0, [r7, #8]
 80123c8:	f7fb fba6 	bl	800db18 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 80123cc:	eef0 7a40 	vmov.f32	s15, s0
 80123d0:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 80123d4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80123d8:	3301      	adds	r3, #1
 80123da:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80123de:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80123e2:	2b02      	cmp	r3, #2
 80123e4:	d9da      	bls.n	801239c <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x88>
	for(u_short col = 0; col < other_width; ++col)
 80123e6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80123ea:	3301      	adds	r3, #1
 80123ec:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80123f0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d0cd      	beq.n	8012394 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x80>
	for(u_short row = 0; row < heigth; ++row)
 80123f8:	2300      	movs	r3, #0
 80123fa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80123fe:	e034      	b.n	801246a <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x156>
		for(u_short col = 0; col < other_width; ++col)
 8012400:	2300      	movs	r3, #0
 8012402:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8012406:	e027      	b.n	8012458 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 8012408:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801240c:	f107 0310 	add.w	r3, r7, #16
 8012410:	4611      	mov	r1, r2
 8012412:	4618      	mov	r0, r3
 8012414:	f000 f894 	bl	8012540 <_ZNSt5arrayIS_IfLj3EELj4EEixEj>
 8012418:	4605      	mov	r5, r0
 801241a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 801241e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012422:	4611      	mov	r1, r2
 8012424:	4618      	mov	r0, r3
 8012426:	f7fb fb68 	bl	800dafa <_ZNSt5arrayIS_IfLj3EELj1EEixEj>
 801242a:	4606      	mov	r6, r0
 801242c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8012430:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012434:	4619      	mov	r1, r3
 8012436:	6878      	ldr	r0, [r7, #4]
 8012438:	f7ff f9e8 	bl	801180c <_ZN3Mat6MatrixILt4ELt1EEclEtt>
 801243c:	4604      	mov	r4, r0
 801243e:	4631      	mov	r1, r6
 8012440:	4628      	mov	r0, r5
 8012442:	f7fb fb83 	bl	800db4c <_ZN3Mat13Multiply_rowsILj3EEEfRKSt5arrayIfXT_EES4_>
 8012446:	eef0 7a40 	vmov.f32	s15, s0
 801244a:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 801244e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8012452:	3301      	adds	r3, #1
 8012454:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8012458:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 801245c:	2b00      	cmp	r3, #0
 801245e:	d0d3      	beq.n	8012408 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 8012460:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012464:	3301      	adds	r3, #1
 8012466:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 801246a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801246e:	2b03      	cmp	r3, #3
 8012470:	d9c6      	bls.n	8012400 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0xec>
}
 8012472:	bf00      	nop
 8012474:	bf00      	nop
 8012476:	375c      	adds	r7, #92	; 0x5c
 8012478:	46bd      	mov	sp, r7
 801247a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801247c <_ZNSt5arrayIfLj4EEixEj>:
      operator[](size_type __n) noexcept
 801247c:	b580      	push	{r7, lr}
 801247e:	b082      	sub	sp, #8
 8012480:	af00      	add	r7, sp, #0
 8012482:	6078      	str	r0, [r7, #4]
 8012484:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	6839      	ldr	r1, [r7, #0]
 801248a:	4618      	mov	r0, r3
 801248c:	f000 f8dd 	bl	801264a <_ZNSt14__array_traitsIfLj4EE6_S_refERA4_Kfj>
 8012490:	4603      	mov	r3, r0
      }
 8012492:	4618      	mov	r0, r3
 8012494:	3708      	adds	r7, #8
 8012496:	46bd      	mov	sp, r7
 8012498:	bd80      	pop	{r7, pc}

0801249a <_ZN3Mat6MatrixILt4ELt4EEmIERKS1_>:
inline Matrix<heigth, width> &Matrix<heigth, width>::operator-=(const Matrix<heigth, width> &other)
 801249a:	b580      	push	{r7, lr}
 801249c:	ed2d 8b02 	vpush	{d8}
 80124a0:	b084      	sub	sp, #16
 80124a2:	af00      	add	r7, sp, #0
 80124a4:	6078      	str	r0, [r7, #4]
 80124a6:	6039      	str	r1, [r7, #0]
    for(u_int i = 0; i < _values.size(); ++i) _values[i] -= other._values[i];
 80124a8:	2300      	movs	r3, #0
 80124aa:	60fb      	str	r3, [r7, #12]
 80124ac:	e016      	b.n	80124dc <_ZN3Mat6MatrixILt4ELt4EEmIERKS1_+0x42>
 80124ae:	683b      	ldr	r3, [r7, #0]
 80124b0:	68f9      	ldr	r1, [r7, #12]
 80124b2:	4618      	mov	r0, r3
 80124b4:	f000 f8a0 	bl	80125f8 <_ZNKSt5arrayIfLj16EEixEj>
 80124b8:	4603      	mov	r3, r0
 80124ba:	ed93 8a00 	vldr	s16, [r3]
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	68f9      	ldr	r1, [r7, #12]
 80124c2:	4618      	mov	r0, r3
 80124c4:	f7fb fa7e 	bl	800d9c4 <_ZNSt5arrayIfLj16EEixEj>
 80124c8:	4603      	mov	r3, r0
 80124ca:	edd3 7a00 	vldr	s15, [r3]
 80124ce:	ee77 7ac8 	vsub.f32	s15, s15, s16
 80124d2:	edc3 7a00 	vstr	s15, [r3]
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	3301      	adds	r3, #1
 80124da:	60fb      	str	r3, [r7, #12]
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	4618      	mov	r0, r3
 80124e0:	f000 f83d 	bl	801255e <_ZNKSt5arrayIfLj16EE4sizeEv>
 80124e4:	4602      	mov	r2, r0
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	4293      	cmp	r3, r2
 80124ea:	bf34      	ite	cc
 80124ec:	2301      	movcc	r3, #1
 80124ee:	2300      	movcs	r3, #0
 80124f0:	b2db      	uxtb	r3, r3
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d1db      	bne.n	80124ae <_ZN3Mat6MatrixILt4ELt4EEmIERKS1_+0x14>
	return *this;
 80124f6:	687b      	ldr	r3, [r7, #4]
}
 80124f8:	4618      	mov	r0, r3
 80124fa:	3710      	adds	r7, #16
 80124fc:	46bd      	mov	sp, r7
 80124fe:	ecbd 8b02 	vpop	{d8}
 8012502:	bd80      	pop	{r7, pc}

08012504 <_ZNSt5arrayIfLj12EEixEj>:
      operator[](size_type __n) noexcept
 8012504:	b580      	push	{r7, lr}
 8012506:	b082      	sub	sp, #8
 8012508:	af00      	add	r7, sp, #0
 801250a:	6078      	str	r0, [r7, #4]
 801250c:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	6839      	ldr	r1, [r7, #0]
 8012512:	4618      	mov	r0, r3
 8012514:	f000 f8a8 	bl	8012668 <_ZNSt14__array_traitsIfLj12EE6_S_refERA12_Kfj>
 8012518:	4603      	mov	r3, r0
      }
 801251a:	4618      	mov	r0, r3
 801251c:	3708      	adds	r7, #8
 801251e:	46bd      	mov	sp, r7
 8012520:	bd80      	pop	{r7, pc}

08012522 <_ZNKSt5arrayIfLj12EEixEj>:
      operator[](size_type __n) const noexcept
 8012522:	b580      	push	{r7, lr}
 8012524:	b082      	sub	sp, #8
 8012526:	af00      	add	r7, sp, #0
 8012528:	6078      	str	r0, [r7, #4]
 801252a:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	6839      	ldr	r1, [r7, #0]
 8012530:	4618      	mov	r0, r3
 8012532:	f000 f899 	bl	8012668 <_ZNSt14__array_traitsIfLj12EE6_S_refERA12_Kfj>
 8012536:	4603      	mov	r3, r0
      }
 8012538:	4618      	mov	r0, r3
 801253a:	3708      	adds	r7, #8
 801253c:	46bd      	mov	sp, r7
 801253e:	bd80      	pop	{r7, pc}

08012540 <_ZNSt5arrayIS_IfLj3EELj4EEixEj>:
      operator[](size_type __n) noexcept
 8012540:	b580      	push	{r7, lr}
 8012542:	b082      	sub	sp, #8
 8012544:	af00      	add	r7, sp, #0
 8012546:	6078      	str	r0, [r7, #4]
 8012548:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	6839      	ldr	r1, [r7, #0]
 801254e:	4618      	mov	r0, r3
 8012550:	f000 f899 	bl	8012686 <_ZNSt14__array_traitsISt5arrayIfLj3EELj4EE6_S_refERA4_KS1_j>
 8012554:	4603      	mov	r3, r0
      }
 8012556:	4618      	mov	r0, r3
 8012558:	3708      	adds	r7, #8
 801255a:	46bd      	mov	sp, r7
 801255c:	bd80      	pop	{r7, pc}

0801255e <_ZNKSt5arrayIfLj16EE4sizeEv>:
      size() const noexcept { return _Nm; }
 801255e:	b480      	push	{r7}
 8012560:	b083      	sub	sp, #12
 8012562:	af00      	add	r7, sp, #0
 8012564:	6078      	str	r0, [r7, #4]
 8012566:	2310      	movs	r3, #16
 8012568:	4618      	mov	r0, r3
 801256a:	370c      	adds	r7, #12
 801256c:	46bd      	mov	sp, r7
 801256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012572:	4770      	bx	lr

08012574 <_ZNSt5arrayIS_IfLj4EELj4EEixEj>:
      operator[](size_type __n) noexcept
 8012574:	b580      	push	{r7, lr}
 8012576:	b082      	sub	sp, #8
 8012578:	af00      	add	r7, sp, #0
 801257a:	6078      	str	r0, [r7, #4]
 801257c:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	6839      	ldr	r1, [r7, #0]
 8012582:	4618      	mov	r0, r3
 8012584:	f000 f891 	bl	80126aa <_ZNSt14__array_traitsISt5arrayIfLj4EELj4EE6_S_refERA4_KS1_j>
 8012588:	4603      	mov	r3, r0
      }
 801258a:	4618      	mov	r0, r3
 801258c:	3708      	adds	r7, #8
 801258e:	46bd      	mov	sp, r7
 8012590:	bd80      	pop	{r7, pc}

08012592 <_ZN3Mat13Multiply_rowsILj4EEEfRKSt5arrayIfXT_EES4_>:
float Multiply_rows(const std::array<float, length>& A, const std::array<float, length>& B)
 8012592:	b580      	push	{r7, lr}
 8012594:	ed2d 8b02 	vpush	{d8}
 8012598:	b084      	sub	sp, #16
 801259a:	af00      	add	r7, sp, #0
 801259c:	6078      	str	r0, [r7, #4]
 801259e:	6039      	str	r1, [r7, #0]
    float result = 0.0f;
 80125a0:	f04f 0300 	mov.w	r3, #0
 80125a4:	60fb      	str	r3, [r7, #12]
	for(u_int i = 0; i < length; ++i) result += A[i]*B[i];
 80125a6:	2300      	movs	r3, #0
 80125a8:	60bb      	str	r3, [r7, #8]
 80125aa:	e018      	b.n	80125de <_ZN3Mat13Multiply_rowsILj4EEEfRKSt5arrayIfXT_EES4_+0x4c>
 80125ac:	68b9      	ldr	r1, [r7, #8]
 80125ae:	6878      	ldr	r0, [r7, #4]
 80125b0:	f000 f88a 	bl	80126c8 <_ZNKSt5arrayIfLj4EEixEj>
 80125b4:	4603      	mov	r3, r0
 80125b6:	ed93 8a00 	vldr	s16, [r3]
 80125ba:	68b9      	ldr	r1, [r7, #8]
 80125bc:	6838      	ldr	r0, [r7, #0]
 80125be:	f000 f883 	bl	80126c8 <_ZNKSt5arrayIfLj4EEixEj>
 80125c2:	4603      	mov	r3, r0
 80125c4:	edd3 7a00 	vldr	s15, [r3]
 80125c8:	ee68 7a27 	vmul.f32	s15, s16, s15
 80125cc:	ed97 7a03 	vldr	s14, [r7, #12]
 80125d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80125d4:	edc7 7a03 	vstr	s15, [r7, #12]
 80125d8:	68bb      	ldr	r3, [r7, #8]
 80125da:	3301      	adds	r3, #1
 80125dc:	60bb      	str	r3, [r7, #8]
 80125de:	68bb      	ldr	r3, [r7, #8]
 80125e0:	2b03      	cmp	r3, #3
 80125e2:	d9e3      	bls.n	80125ac <_ZN3Mat13Multiply_rowsILj4EEEfRKSt5arrayIfXT_EES4_+0x1a>
	return result;
 80125e4:	68fb      	ldr	r3, [r7, #12]
 80125e6:	ee07 3a90 	vmov	s15, r3
}
 80125ea:	eeb0 0a67 	vmov.f32	s0, s15
 80125ee:	3710      	adds	r7, #16
 80125f0:	46bd      	mov	sp, r7
 80125f2:	ecbd 8b02 	vpop	{d8}
 80125f6:	bd80      	pop	{r7, pc}

080125f8 <_ZNKSt5arrayIfLj16EEixEj>:
      operator[](size_type __n) const noexcept
 80125f8:	b580      	push	{r7, lr}
 80125fa:	b082      	sub	sp, #8
 80125fc:	af00      	add	r7, sp, #0
 80125fe:	6078      	str	r0, [r7, #4]
 8012600:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	6839      	ldr	r1, [r7, #0]
 8012606:	4618      	mov	r0, r3
 8012608:	f7fb fafa 	bl	800dc00 <_ZNSt14__array_traitsIfLj16EE6_S_refERA16_Kfj>
 801260c:	4603      	mov	r3, r0
      }
 801260e:	4618      	mov	r0, r3
 8012610:	3708      	adds	r7, #8
 8012612:	46bd      	mov	sp, r7
 8012614:	bd80      	pop	{r7, pc}

08012616 <_ZNSt5arrayIS_IfLj4EELj3EEixEj>:
      operator[](size_type __n) noexcept
 8012616:	b580      	push	{r7, lr}
 8012618:	b082      	sub	sp, #8
 801261a:	af00      	add	r7, sp, #0
 801261c:	6078      	str	r0, [r7, #4]
 801261e:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	6839      	ldr	r1, [r7, #0]
 8012624:	4618      	mov	r0, r3
 8012626:	f000 f85e 	bl	80126e6 <_ZNSt14__array_traitsISt5arrayIfLj4EELj3EE6_S_refERA3_KS1_j>
 801262a:	4603      	mov	r3, r0
      }
 801262c:	4618      	mov	r0, r3
 801262e:	3708      	adds	r7, #8
 8012630:	46bd      	mov	sp, r7
 8012632:	bd80      	pop	{r7, pc}

08012634 <_ZNKSt5arrayIfLj9EE4sizeEv>:
      size() const noexcept { return _Nm; }
 8012634:	b480      	push	{r7}
 8012636:	b083      	sub	sp, #12
 8012638:	af00      	add	r7, sp, #0
 801263a:	6078      	str	r0, [r7, #4]
 801263c:	2309      	movs	r3, #9
 801263e:	4618      	mov	r0, r3
 8012640:	370c      	adds	r7, #12
 8012642:	46bd      	mov	sp, r7
 8012644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012648:	4770      	bx	lr

0801264a <_ZNSt14__array_traitsIfLj4EE6_S_refERA4_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 801264a:	b480      	push	{r7}
 801264c:	b083      	sub	sp, #12
 801264e:	af00      	add	r7, sp, #0
 8012650:	6078      	str	r0, [r7, #4]
 8012652:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8012654:	683b      	ldr	r3, [r7, #0]
 8012656:	009b      	lsls	r3, r3, #2
 8012658:	687a      	ldr	r2, [r7, #4]
 801265a:	4413      	add	r3, r2
 801265c:	4618      	mov	r0, r3
 801265e:	370c      	adds	r7, #12
 8012660:	46bd      	mov	sp, r7
 8012662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012666:	4770      	bx	lr

08012668 <_ZNSt14__array_traitsIfLj12EE6_S_refERA12_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8012668:	b480      	push	{r7}
 801266a:	b083      	sub	sp, #12
 801266c:	af00      	add	r7, sp, #0
 801266e:	6078      	str	r0, [r7, #4]
 8012670:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8012672:	683b      	ldr	r3, [r7, #0]
 8012674:	009b      	lsls	r3, r3, #2
 8012676:	687a      	ldr	r2, [r7, #4]
 8012678:	4413      	add	r3, r2
 801267a:	4618      	mov	r0, r3
 801267c:	370c      	adds	r7, #12
 801267e:	46bd      	mov	sp, r7
 8012680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012684:	4770      	bx	lr

08012686 <_ZNSt14__array_traitsISt5arrayIfLj3EELj4EE6_S_refERA4_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8012686:	b480      	push	{r7}
 8012688:	b083      	sub	sp, #12
 801268a:	af00      	add	r7, sp, #0
 801268c:	6078      	str	r0, [r7, #4]
 801268e:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8012690:	683a      	ldr	r2, [r7, #0]
 8012692:	4613      	mov	r3, r2
 8012694:	005b      	lsls	r3, r3, #1
 8012696:	4413      	add	r3, r2
 8012698:	009b      	lsls	r3, r3, #2
 801269a:	687a      	ldr	r2, [r7, #4]
 801269c:	4413      	add	r3, r2
 801269e:	4618      	mov	r0, r3
 80126a0:	370c      	adds	r7, #12
 80126a2:	46bd      	mov	sp, r7
 80126a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126a8:	4770      	bx	lr

080126aa <_ZNSt14__array_traitsISt5arrayIfLj4EELj4EE6_S_refERA4_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 80126aa:	b480      	push	{r7}
 80126ac:	b083      	sub	sp, #12
 80126ae:	af00      	add	r7, sp, #0
 80126b0:	6078      	str	r0, [r7, #4]
 80126b2:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 80126b4:	683b      	ldr	r3, [r7, #0]
 80126b6:	011b      	lsls	r3, r3, #4
 80126b8:	687a      	ldr	r2, [r7, #4]
 80126ba:	4413      	add	r3, r2
 80126bc:	4618      	mov	r0, r3
 80126be:	370c      	adds	r7, #12
 80126c0:	46bd      	mov	sp, r7
 80126c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126c6:	4770      	bx	lr

080126c8 <_ZNKSt5arrayIfLj4EEixEj>:
      operator[](size_type __n) const noexcept
 80126c8:	b580      	push	{r7, lr}
 80126ca:	b082      	sub	sp, #8
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	6078      	str	r0, [r7, #4]
 80126d0:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	6839      	ldr	r1, [r7, #0]
 80126d6:	4618      	mov	r0, r3
 80126d8:	f7ff ffb7 	bl	801264a <_ZNSt14__array_traitsIfLj4EE6_S_refERA4_Kfj>
 80126dc:	4603      	mov	r3, r0
      }
 80126de:	4618      	mov	r0, r3
 80126e0:	3708      	adds	r7, #8
 80126e2:	46bd      	mov	sp, r7
 80126e4:	bd80      	pop	{r7, pc}

080126e6 <_ZNSt14__array_traitsISt5arrayIfLj4EELj3EE6_S_refERA3_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 80126e6:	b480      	push	{r7}
 80126e8:	b083      	sub	sp, #12
 80126ea:	af00      	add	r7, sp, #0
 80126ec:	6078      	str	r0, [r7, #4]
 80126ee:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 80126f0:	683b      	ldr	r3, [r7, #0]
 80126f2:	011b      	lsls	r3, r3, #4
 80126f4:	687a      	ldr	r2, [r7, #4]
 80126f6:	4413      	add	r3, r2
 80126f8:	4618      	mov	r0, r3
 80126fa:	370c      	adds	r7, #12
 80126fc:	46bd      	mov	sp, r7
 80126fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012702:	4770      	bx	lr

08012704 <_ZN3Mat8V_VectorILt3EEC1ERKSt5arrayIfLj3EE>:

template <u_short length>
V_Vector<length>::V_Vector(float val) : Matrix<length, 1>(val) {}

template <u_short length>
V_Vector<length>::V_Vector(const std::array<float, length>& values) : Matrix<length, 1>(values) {}
 8012704:	b580      	push	{r7, lr}
 8012706:	b082      	sub	sp, #8
 8012708:	af00      	add	r7, sp, #0
 801270a:	6078      	str	r0, [r7, #4]
 801270c:	6039      	str	r1, [r7, #0]
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	6839      	ldr	r1, [r7, #0]
 8012712:	4618      	mov	r0, r3
 8012714:	f7fa fea8 	bl	800d468 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	4618      	mov	r0, r3
 801271c:	3708      	adds	r7, #8
 801271e:	46bd      	mov	sp, r7
 8012720:	bd80      	pop	{r7, pc}

08012722 <_ZNK3Mat8V_VectorILt3EEclEt>:
	inline float operator()(u_short index) const {return _values[index];}
 8012722:	b580      	push	{r7, lr}
 8012724:	b082      	sub	sp, #8
 8012726:	af00      	add	r7, sp, #0
 8012728:	6078      	str	r0, [r7, #4]
 801272a:	460b      	mov	r3, r1
 801272c:	807b      	strh	r3, [r7, #2]
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	887a      	ldrh	r2, [r7, #2]
 8012732:	4611      	mov	r1, r2
 8012734:	4618      	mov	r0, r3
 8012736:	f7fb facc 	bl	800dcd2 <_ZNKSt5arrayIfLj3EEixEj>
 801273a:	4603      	mov	r3, r0
 801273c:	681b      	ldr	r3, [r3, #0]
 801273e:	ee07 3a90 	vmov	s15, r3
 8012742:	eeb0 0a67 	vmov.f32	s0, s15
 8012746:	3708      	adds	r7, #8
 8012748:	46bd      	mov	sp, r7
 801274a:	bd80      	pop	{r7, pc}

0801274c <_ZZNK3Mat8V_VectorILt3EE4NormEvENKUlfE_clEf>:

template <u_short length>
float V_Vector<length>::Norm() const
{
	float result = 0.0f;
	std::for_each(_values.begin(), _values.end(), [&result](float n){result += n * n;});
 801274c:	b480      	push	{r7}
 801274e:	b083      	sub	sp, #12
 8012750:	af00      	add	r7, sp, #0
 8012752:	6078      	str	r0, [r7, #4]
 8012754:	ed87 0a00 	vstr	s0, [r7]
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	681b      	ldr	r3, [r3, #0]
 801275c:	ed93 7a00 	vldr	s14, [r3]
 8012760:	edd7 7a00 	vldr	s15, [r7]
 8012764:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012770:	edc3 7a00 	vstr	s15, [r3]
 8012774:	bf00      	nop
 8012776:	370c      	adds	r7, #12
 8012778:	46bd      	mov	sp, r7
 801277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801277e:	4770      	bx	lr

08012780 <_ZNK3Mat8V_VectorILt3EE4NormEv>:
float V_Vector<length>::Norm() const
 8012780:	b590      	push	{r4, r7, lr}
 8012782:	b085      	sub	sp, #20
 8012784:	af00      	add	r7, sp, #0
 8012786:	6078      	str	r0, [r7, #4]
	float result = 0.0f;
 8012788:	f04f 0300 	mov.w	r3, #0
 801278c:	60fb      	str	r3, [r7, #12]
	std::for_each(_values.begin(), _values.end(), [&result](float n){result += n * n;});
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	4618      	mov	r0, r3
 8012792:	f000 f83d 	bl	8012810 <_ZNKSt5arrayIfLj3EE5beginEv>
 8012796:	4604      	mov	r4, r0
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	4618      	mov	r0, r3
 801279c:	f000 f844 	bl	8012828 <_ZNKSt5arrayIfLj3EE3endEv>
 80127a0:	4603      	mov	r3, r0
 80127a2:	f107 020c 	add.w	r2, r7, #12
 80127a6:	4619      	mov	r1, r3
 80127a8:	4620      	mov	r0, r4
 80127aa:	f000 f84a 	bl	8012842 <_ZSt8for_eachIPKfZNK3Mat8V_VectorILt3EE4NormEvEUlfE_ET0_T_S7_S6_>
	return std::sqrt(result);
 80127ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80127b2:	eeb0 0a67 	vmov.f32	s0, s15
 80127b6:	f7fc fbc7 	bl	800ef48 <_ZSt4sqrtf>
 80127ba:	eef0 7a40 	vmov.f32	s15, s0
}
 80127be:	eeb0 0a67 	vmov.f32	s0, s15
 80127c2:	3714      	adds	r7, #20
 80127c4:	46bd      	mov	sp, r7
 80127c6:	bd90      	pop	{r4, r7, pc}

080127c8 <_ZNK3Mat8V_VectorILt4EEclEt>:
	inline float operator()(u_short index) const {return _values[index];}
 80127c8:	b580      	push	{r7, lr}
 80127ca:	b082      	sub	sp, #8
 80127cc:	af00      	add	r7, sp, #0
 80127ce:	6078      	str	r0, [r7, #4]
 80127d0:	460b      	mov	r3, r1
 80127d2:	807b      	strh	r3, [r7, #2]
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	887a      	ldrh	r2, [r7, #2]
 80127d8:	4611      	mov	r1, r2
 80127da:	4618      	mov	r0, r3
 80127dc:	f7ff ff74 	bl	80126c8 <_ZNKSt5arrayIfLj4EEixEj>
 80127e0:	4603      	mov	r3, r0
 80127e2:	681b      	ldr	r3, [r3, #0]
 80127e4:	ee07 3a90 	vmov	s15, r3
 80127e8:	eeb0 0a67 	vmov.f32	s0, s15
 80127ec:	3708      	adds	r7, #8
 80127ee:	46bd      	mov	sp, r7
 80127f0:	bd80      	pop	{r7, pc}

080127f2 <_ZN3Mat8V_VectorILt4EEC1ERKSt5arrayIfLj4EE>:
V_Vector<length>::V_Vector(const std::array<float, length>& values) : Matrix<length, 1>(values) {}
 80127f2:	b580      	push	{r7, lr}
 80127f4:	b082      	sub	sp, #8
 80127f6:	af00      	add	r7, sp, #0
 80127f8:	6078      	str	r0, [r7, #4]
 80127fa:	6039      	str	r1, [r7, #0]
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	6839      	ldr	r1, [r7, #0]
 8012800:	4618      	mov	r0, r3
 8012802:	f000 f83a 	bl	801287a <_ZN3Mat6MatrixILt4ELt1EEC1ERKSt5arrayIfLj4EE>
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	4618      	mov	r0, r3
 801280a:	3708      	adds	r7, #8
 801280c:	46bd      	mov	sp, r7
 801280e:	bd80      	pop	{r7, pc}

08012810 <_ZNKSt5arrayIfLj3EE5beginEv>:
      begin() const noexcept
 8012810:	b580      	push	{r7, lr}
 8012812:	b082      	sub	sp, #8
 8012814:	af00      	add	r7, sp, #0
 8012816:	6078      	str	r0, [r7, #4]
      { return const_iterator(data()); }
 8012818:	6878      	ldr	r0, [r7, #4]
 801281a:	f000 f83f 	bl	801289c <_ZNKSt5arrayIfLj3EE4dataEv>
 801281e:	4603      	mov	r3, r0
 8012820:	4618      	mov	r0, r3
 8012822:	3708      	adds	r7, #8
 8012824:	46bd      	mov	sp, r7
 8012826:	bd80      	pop	{r7, pc}

08012828 <_ZNKSt5arrayIfLj3EE3endEv>:
      end() const noexcept
 8012828:	b580      	push	{r7, lr}
 801282a:	b082      	sub	sp, #8
 801282c:	af00      	add	r7, sp, #0
 801282e:	6078      	str	r0, [r7, #4]
      { return const_iterator(data() + _Nm); }
 8012830:	6878      	ldr	r0, [r7, #4]
 8012832:	f000 f833 	bl	801289c <_ZNKSt5arrayIfLj3EE4dataEv>
 8012836:	4603      	mov	r3, r0
 8012838:	330c      	adds	r3, #12
 801283a:	4618      	mov	r0, r3
 801283c:	3708      	adds	r7, #8
 801283e:	46bd      	mov	sp, r7
 8012840:	bd80      	pop	{r7, pc}

08012842 <_ZSt8for_eachIPKfZNK3Mat8V_VectorILt3EE4NormEvEUlfE_ET0_T_S7_S6_>:
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
 8012842:	b580      	push	{r7, lr}
 8012844:	b084      	sub	sp, #16
 8012846:	af00      	add	r7, sp, #0
 8012848:	60f8      	str	r0, [r7, #12]
 801284a:	60b9      	str	r1, [r7, #8]
 801284c:	607a      	str	r2, [r7, #4]
      for (; __first != __last; ++__first)
 801284e:	e00b      	b.n	8012868 <_ZSt8for_eachIPKfZNK3Mat8V_VectorILt3EE4NormEvEUlfE_ET0_T_S7_S6_+0x26>
	__f(*__first);
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	edd3 7a00 	vldr	s15, [r3]
 8012856:	1d3b      	adds	r3, r7, #4
 8012858:	eeb0 0a67 	vmov.f32	s0, s15
 801285c:	4618      	mov	r0, r3
 801285e:	f7ff ff75 	bl	801274c <_ZZNK3Mat8V_VectorILt3EE4NormEvENKUlfE_clEf>
      for (; __first != __last; ++__first)
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	3304      	adds	r3, #4
 8012866:	60fb      	str	r3, [r7, #12]
 8012868:	68fa      	ldr	r2, [r7, #12]
 801286a:	68bb      	ldr	r3, [r7, #8]
 801286c:	429a      	cmp	r2, r3
 801286e:	d1ef      	bne.n	8012850 <_ZSt8for_eachIPKfZNK3Mat8V_VectorILt3EE4NormEvEUlfE_ET0_T_S7_S6_+0xe>
      return __f; // N.B. [alg.foreach] says std::move(f) but it's redundant.
 8012870:	687b      	ldr	r3, [r7, #4]
    }
 8012872:	4618      	mov	r0, r3
 8012874:	3710      	adds	r7, #16
 8012876:	46bd      	mov	sp, r7
 8012878:	bd80      	pop	{r7, pc}

0801287a <_ZN3Mat6MatrixILt4ELt1EEC1ERKSt5arrayIfLj4EE>:
Matrix<heigth, width>::Matrix(const std::array<float, heigth*width>& values): _values(values) {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 801287a:	b490      	push	{r4, r7}
 801287c:	b082      	sub	sp, #8
 801287e:	af00      	add	r7, sp, #0
 8012880:	6078      	str	r0, [r7, #4]
 8012882:	6039      	str	r1, [r7, #0]
 8012884:	687a      	ldr	r2, [r7, #4]
 8012886:	683b      	ldr	r3, [r7, #0]
 8012888:	4614      	mov	r4, r2
 801288a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801288c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	4618      	mov	r0, r3
 8012894:	3708      	adds	r7, #8
 8012896:	46bd      	mov	sp, r7
 8012898:	bc90      	pop	{r4, r7}
 801289a:	4770      	bx	lr

0801289c <_ZNKSt5arrayIfLj3EE4dataEv>:

      _GLIBCXX17_CONSTEXPR const_pointer
      data() const noexcept
 801289c:	b580      	push	{r7, lr}
 801289e:	b082      	sub	sp, #8
 80128a0:	af00      	add	r7, sp, #0
 80128a2:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	4618      	mov	r0, r3
 80128a8:	f7fb f9d5 	bl	800dc56 <_ZNSt14__array_traitsIfLj3EE6_S_ptrERA3_Kf>
 80128ac:	4603      	mov	r3, r0
 80128ae:	4618      	mov	r0, r3
 80128b0:	3708      	adds	r7, #8
 80128b2:	46bd      	mov	sp, r7
 80128b4:	bd80      	pop	{r7, pc}
	...

080128b8 <_Z41__static_initialization_and_destruction_0ii>:
		(a_2_1*a_3_2 - a_2_2*a_3_1)*det1, -(a_1_1*a_3_2 - a_1_2*a_3_1)*det1,  (a_1_1*a_2_2 - a_1_2*a_2_1)*det1,
	}};
	return result;
}

} //namespace Algorithms
 80128b8:	b580      	push	{r7, lr}
 80128ba:	ed2d 8b02 	vpush	{d8}
 80128be:	b08c      	sub	sp, #48	; 0x30
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	6078      	str	r0, [r7, #4]
 80128c4:	6039      	str	r1, [r7, #0]
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	2b01      	cmp	r3, #1
 80128ca:	d15c      	bne.n	8012986 <_Z41__static_initialization_and_destruction_0ii+0xce>
 80128cc:	683b      	ldr	r3, [r7, #0]
 80128ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80128d2:	4293      	cmp	r3, r2
 80128d4:	d157      	bne.n	8012986 <_Z41__static_initialization_and_destruction_0ii+0xce>
const V_Vector<3> _r{{0.0f, cos(magDip), -sin(magDip)}};
 80128d6:	4a2f      	ldr	r2, [pc, #188]	; (8012994 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 80128d8:	f107 030c 	add.w	r3, r7, #12
 80128dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80128de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80128e2:	f107 030c 	add.w	r3, r7, #12
 80128e6:	4619      	mov	r1, r3
 80128e8:	482b      	ldr	r0, [pc, #172]	; (8012998 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 80128ea:	f7ff ff0b 	bl	8012704 <_ZN3Mat8V_VectorILt3EEC1ERKSt5arrayIfLj3EE>
const V_Vector<3> r{{0.0f, _r(1) * (1 / _r.Norm()), _r(2) * (1 / _r.Norm())}};
 80128ee:	f04f 0300 	mov.w	r3, #0
 80128f2:	61bb      	str	r3, [r7, #24]
 80128f4:	2101      	movs	r1, #1
 80128f6:	4828      	ldr	r0, [pc, #160]	; (8012998 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 80128f8:	f7ff ff13 	bl	8012722 <_ZNK3Mat8V_VectorILt3EEclEt>
 80128fc:	eeb0 8a40 	vmov.f32	s16, s0
 8012900:	4825      	ldr	r0, [pc, #148]	; (8012998 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8012902:	f7ff ff3d 	bl	8012780 <_ZNK3Mat8V_VectorILt3EE4NormEv>
 8012906:	eeb0 7a40 	vmov.f32	s14, s0
 801290a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801290e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012912:	ee68 7a27 	vmul.f32	s15, s16, s15
 8012916:	edc7 7a07 	vstr	s15, [r7, #28]
 801291a:	2102      	movs	r1, #2
 801291c:	481e      	ldr	r0, [pc, #120]	; (8012998 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 801291e:	f7ff ff00 	bl	8012722 <_ZNK3Mat8V_VectorILt3EEclEt>
 8012922:	eeb0 8a40 	vmov.f32	s16, s0
 8012926:	481c      	ldr	r0, [pc, #112]	; (8012998 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8012928:	f7ff ff2a 	bl	8012780 <_ZNK3Mat8V_VectorILt3EE4NormEv>
 801292c:	eeb0 7a40 	vmov.f32	s14, s0
 8012930:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012934:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012938:	ee68 7a27 	vmul.f32	s15, s16, s15
 801293c:	edc7 7a08 	vstr	s15, [r7, #32]
 8012940:	f107 0318 	add.w	r3, r7, #24
 8012944:	4619      	mov	r1, r3
 8012946:	4815      	ldr	r0, [pc, #84]	; (801299c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8012948:	f7ff fedc 	bl	8012704 <_ZN3Mat8V_VectorILt3EEC1ERKSt5arrayIfLj3EE>
const V_Vector<3> r2{{0.0f, r(1)*2.0f, r(2)*2.0f}};
 801294c:	f04f 0300 	mov.w	r3, #0
 8012950:	627b      	str	r3, [r7, #36]	; 0x24
 8012952:	2101      	movs	r1, #1
 8012954:	4811      	ldr	r0, [pc, #68]	; (801299c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8012956:	f7ff fee4 	bl	8012722 <_ZNK3Mat8V_VectorILt3EEclEt>
 801295a:	eef0 7a40 	vmov.f32	s15, s0
 801295e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8012962:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8012966:	2102      	movs	r1, #2
 8012968:	480c      	ldr	r0, [pc, #48]	; (801299c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 801296a:	f7ff feda 	bl	8012722 <_ZNK3Mat8V_VectorILt3EEclEt>
 801296e:	eef0 7a40 	vmov.f32	s15, s0
 8012972:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8012976:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 801297a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801297e:	4619      	mov	r1, r3
 8012980:	4807      	ldr	r0, [pc, #28]	; (80129a0 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8012982:	f7ff febf 	bl	8012704 <_ZN3Mat8V_VectorILt3EEC1ERKSt5arrayIfLj3EE>
} //namespace Algorithms
 8012986:	bf00      	nop
 8012988:	3730      	adds	r7, #48	; 0x30
 801298a:	46bd      	mov	sp, r7
 801298c:	ecbd 8b02 	vpop	{d8}
 8012990:	bd80      	pop	{r7, pc}
 8012992:	bf00      	nop
 8012994:	0801c894 	.word	0x0801c894
 8012998:	24005428 	.word	0x24005428
 801299c:	24005434 	.word	0x24005434
 80129a0:	24005440 	.word	0x24005440

080129a4 <_GLOBAL__sub_I__ZN10Algorithms14OrientationEKF6UpdateERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEEf>:
 80129a4:	b580      	push	{r7, lr}
 80129a6:	af00      	add	r7, sp, #0
 80129a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80129ac:	2001      	movs	r0, #1
 80129ae:	f7ff ff83 	bl	80128b8 <_Z41__static_initialization_and_destruction_0ii>
 80129b2:	bd80      	pop	{r7, pc}

080129b4 <_ZN10Algorithms11VelocityEKF6UpdateERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEEf>:

namespace Algorithms
{

void VelocityEKF::Update(const MeassurementVec& meassurementVec, const MeasurementCovarianceMatrix& meassurementCov, float time)
{
 80129b4:	b580      	push	{r7, lr}
 80129b6:	b084      	sub	sp, #16
 80129b8:	af00      	add	r7, sp, #0
 80129ba:	60f8      	str	r0, [r7, #12]
 80129bc:	60b9      	str	r1, [r7, #8]
 80129be:	607a      	str	r2, [r7, #4]
 80129c0:	ed87 0a00 	vstr	s0, [r7]
	_UpdateVelocity(meassurementVec, meassurementCov);
 80129c4:	687a      	ldr	r2, [r7, #4]
 80129c6:	68b9      	ldr	r1, [r7, #8]
 80129c8:	68f8      	ldr	r0, [r7, #12]
 80129ca:	f000 f80d 	bl	80129e8 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE>
	_UpdatePosition(meassurementVec, meassurementCov);
 80129ce:	687a      	ldr	r2, [r7, #4]
 80129d0:	68b9      	ldr	r1, [r7, #8]
 80129d2:	68f8      	ldr	r0, [r7, #12]
 80129d4:	f000 f9f6 	bl	8012dc4 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE>
	_time = time;
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	683a      	ldr	r2, [r7, #0]
 80129dc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}
 80129e0:	bf00      	nop
 80129e2:	3710      	adds	r7, #16
 80129e4:	46bd      	mov	sp, r7
 80129e6:	bd80      	pop	{r7, pc}

080129e8 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE>:

void VelocityEKF::_UpdateVelocity(const MeassurementVec& meassurementVec, const MeasurementCovarianceMatrix& meassurementCov)
{
 80129e8:	b590      	push	{r4, r7, lr}
 80129ea:	f2ad 4d7c 	subw	sp, sp, #1148	; 0x47c
 80129ee:	af00      	add	r7, sp, #0
 80129f0:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80129f4:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 80129f8:	6018      	str	r0, [r3, #0]
 80129fa:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80129fe:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8012a02:	6019      	str	r1, [r3, #0]
 8012a04:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8012a08:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8012a0c:	601a      	str	r2, [r3, #0]
	V_Vector<3> z{{meassurementVec(0), meassurementVec(1), meassurementVec(2)}};
 8012a0e:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8012a12:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8012a16:	2100      	movs	r1, #0
 8012a18:	6818      	ldr	r0, [r3, #0]
 8012a1a:	f7fa fda2 	bl	800d562 <_ZNK3Mat8V_VectorILt6EEclEt>
 8012a1e:	eef0 7a40 	vmov.f32	s15, s0
 8012a22:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8012a26:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8012a2a:	edc3 7a00 	vstr	s15, [r3]
 8012a2e:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8012a32:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8012a36:	2101      	movs	r1, #1
 8012a38:	6818      	ldr	r0, [r3, #0]
 8012a3a:	f7fa fd92 	bl	800d562 <_ZNK3Mat8V_VectorILt6EEclEt>
 8012a3e:	eef0 7a40 	vmov.f32	s15, s0
 8012a42:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8012a46:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8012a4a:	edc3 7a01 	vstr	s15, [r3, #4]
 8012a4e:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8012a52:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8012a56:	2102      	movs	r1, #2
 8012a58:	6818      	ldr	r0, [r3, #0]
 8012a5a:	f7fa fd82 	bl	800d562 <_ZNK3Mat8V_VectorILt6EEclEt>
 8012a5e:	eef0 7a40 	vmov.f32	s15, s0
 8012a62:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8012a66:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8012a6a:	edc3 7a02 	vstr	s15, [r3, #8]
 8012a6e:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8012a72:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012a76:	4611      	mov	r1, r2
 8012a78:	4618      	mov	r0, r3
 8012a7a:	f7ff fe43 	bl	8012704 <_ZN3Mat8V_VectorILt3EEC1ERKSt5arrayIfLj3EE>
	V_Vector<3> h{{_state(0), _state(1), _state(2)}};
 8012a7e:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8012a82:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	3304      	adds	r3, #4
 8012a8a:	2100      	movs	r1, #0
 8012a8c:	4618      	mov	r0, r3
 8012a8e:	f001 f847 	bl	8013b20 <_ZN3Mat8V_VectorILt6EEclEt>
 8012a92:	4603      	mov	r3, r0
 8012a94:	681a      	ldr	r2, [r3, #0]
 8012a96:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8012a9a:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8012a9e:	601a      	str	r2, [r3, #0]
 8012aa0:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8012aa4:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8012aa8:	681b      	ldr	r3, [r3, #0]
 8012aaa:	3304      	adds	r3, #4
 8012aac:	2101      	movs	r1, #1
 8012aae:	4618      	mov	r0, r3
 8012ab0:	f001 f836 	bl	8013b20 <_ZN3Mat8V_VectorILt6EEclEt>
 8012ab4:	4603      	mov	r3, r0
 8012ab6:	681a      	ldr	r2, [r3, #0]
 8012ab8:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8012abc:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8012ac0:	605a      	str	r2, [r3, #4]
 8012ac2:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8012ac6:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	3304      	adds	r3, #4
 8012ace:	2102      	movs	r1, #2
 8012ad0:	4618      	mov	r0, r3
 8012ad2:	f001 f825 	bl	8013b20 <_ZN3Mat8V_VectorILt6EEclEt>
 8012ad6:	4603      	mov	r3, r0
 8012ad8:	681a      	ldr	r2, [r3, #0]
 8012ada:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8012ade:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8012ae2:	609a      	str	r2, [r3, #8]
 8012ae4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8012ae8:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8012aec:	4611      	mov	r1, r2
 8012aee:	4618      	mov	r0, r3
 8012af0:	f7ff fe08 	bl	8012704 <_ZN3Mat8V_VectorILt3EEC1ERKSt5arrayIfLj3EE>
	static Matrix<3, VelocityEKF_stateLen> H{0.0f};
 8012af4:	4bae      	ldr	r3, [pc, #696]	; (8012db0 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3c8>)
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	f3bf 8f5b 	dmb	ish
 8012afc:	f003 0301 	and.w	r3, r3, #1
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	bf0c      	ite	eq
 8012b04:	2301      	moveq	r3, #1
 8012b06:	2300      	movne	r3, #0
 8012b08:	b2db      	uxtb	r3, r3
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d012      	beq.n	8012b34 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x14c>
 8012b0e:	48a8      	ldr	r0, [pc, #672]	; (8012db0 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3c8>)
 8012b10:	f006 fcba 	bl	8019488 <__cxa_guard_acquire>
 8012b14:	4603      	mov	r3, r0
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	bf14      	ite	ne
 8012b1a:	2301      	movne	r3, #1
 8012b1c:	2300      	moveq	r3, #0
 8012b1e:	b2db      	uxtb	r3, r3
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d007      	beq.n	8012b34 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x14c>
 8012b24:	ed9f 0aa3 	vldr	s0, [pc, #652]	; 8012db4 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3cc>
 8012b28:	48a3      	ldr	r0, [pc, #652]	; (8012db8 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3d0>)
 8012b2a:	f001 f819 	bl	8013b60 <_ZN3Mat6MatrixILt3ELt6EEC1Ef>
 8012b2e:	48a0      	ldr	r0, [pc, #640]	; (8012db0 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3c8>)
 8012b30:	f006 fcb6 	bl	80194a0 <__cxa_guard_release>
	H(0,0) = 1.0f; H(1,1) = 1.0f; H(2,2) = 1.0f;
 8012b34:	2200      	movs	r2, #0
 8012b36:	2100      	movs	r1, #0
 8012b38:	489f      	ldr	r0, [pc, #636]	; (8012db8 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3d0>)
 8012b3a:	f001 f82e 	bl	8013b9a <_ZN3Mat6MatrixILt3ELt6EEclEtt>
 8012b3e:	4603      	mov	r3, r0
 8012b40:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8012b44:	601a      	str	r2, [r3, #0]
 8012b46:	2201      	movs	r2, #1
 8012b48:	2101      	movs	r1, #1
 8012b4a:	489b      	ldr	r0, [pc, #620]	; (8012db8 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3d0>)
 8012b4c:	f001 f825 	bl	8013b9a <_ZN3Mat6MatrixILt3ELt6EEclEtt>
 8012b50:	4603      	mov	r3, r0
 8012b52:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8012b56:	601a      	str	r2, [r3, #0]
 8012b58:	2202      	movs	r2, #2
 8012b5a:	2102      	movs	r1, #2
 8012b5c:	4896      	ldr	r0, [pc, #600]	; (8012db8 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3d0>)
 8012b5e:	f001 f81c 	bl	8013b9a <_ZN3Mat6MatrixILt3ELt6EEclEtt>
 8012b62:	4603      	mov	r3, r0
 8012b64:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8012b68:	601a      	str	r2, [r3, #0]
	static Matrix<3, 3> R{0.0f};
 8012b6a:	4b94      	ldr	r3, [pc, #592]	; (8012dbc <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3d4>)
 8012b6c:	681b      	ldr	r3, [r3, #0]
 8012b6e:	f3bf 8f5b 	dmb	ish
 8012b72:	f003 0301 	and.w	r3, r3, #1
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	bf0c      	ite	eq
 8012b7a:	2301      	moveq	r3, #1
 8012b7c:	2300      	movne	r3, #0
 8012b7e:	b2db      	uxtb	r3, r3
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d012      	beq.n	8012baa <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x1c2>
 8012b84:	488d      	ldr	r0, [pc, #564]	; (8012dbc <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3d4>)
 8012b86:	f006 fc7f 	bl	8019488 <__cxa_guard_acquire>
 8012b8a:	4603      	mov	r3, r0
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	bf14      	ite	ne
 8012b90:	2301      	movne	r3, #1
 8012b92:	2300      	moveq	r3, #0
 8012b94:	b2db      	uxtb	r3, r3
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d007      	beq.n	8012baa <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x1c2>
 8012b9a:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8012db4 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3cc>
 8012b9e:	4888      	ldr	r0, [pc, #544]	; (8012dc0 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3d8>)
 8012ba0:	f7fa fd91 	bl	800d6c6 <_ZN3Mat6MatrixILt3ELt3EEC1Ef>
 8012ba4:	4885      	ldr	r0, [pc, #532]	; (8012dbc <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3d4>)
 8012ba6:	f006 fc7b 	bl	80194a0 <__cxa_guard_release>
	R(0,0) = meassurementCov(0,0); R(1,1) = meassurementCov(1,1); R(2,2) = meassurementCov(2,2);
 8012baa:	2200      	movs	r2, #0
 8012bac:	2100      	movs	r1, #0
 8012bae:	4884      	ldr	r0, [pc, #528]	; (8012dc0 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3d8>)
 8012bb0:	f7fa fda6 	bl	800d700 <_ZN3Mat6MatrixILt3ELt3EEclEtt>
 8012bb4:	4604      	mov	r4, r0
 8012bb6:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8012bba:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8012bbe:	2200      	movs	r2, #0
 8012bc0:	2100      	movs	r1, #0
 8012bc2:	6818      	ldr	r0, [r3, #0]
 8012bc4:	f7fb fd50 	bl	800e668 <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 8012bc8:	eef0 7a40 	vmov.f32	s15, s0
 8012bcc:	edc4 7a00 	vstr	s15, [r4]
 8012bd0:	2201      	movs	r2, #1
 8012bd2:	2101      	movs	r1, #1
 8012bd4:	487a      	ldr	r0, [pc, #488]	; (8012dc0 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3d8>)
 8012bd6:	f7fa fd93 	bl	800d700 <_ZN3Mat6MatrixILt3ELt3EEclEtt>
 8012bda:	4604      	mov	r4, r0
 8012bdc:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8012be0:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8012be4:	2201      	movs	r2, #1
 8012be6:	2101      	movs	r1, #1
 8012be8:	6818      	ldr	r0, [r3, #0]
 8012bea:	f7fb fd3d 	bl	800e668 <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 8012bee:	eef0 7a40 	vmov.f32	s15, s0
 8012bf2:	edc4 7a00 	vstr	s15, [r4]
 8012bf6:	2202      	movs	r2, #2
 8012bf8:	2102      	movs	r1, #2
 8012bfa:	4871      	ldr	r0, [pc, #452]	; (8012dc0 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3d8>)
 8012bfc:	f7fa fd80 	bl	800d700 <_ZN3Mat6MatrixILt3ELt3EEclEtt>
 8012c00:	4604      	mov	r4, r0
 8012c02:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8012c06:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8012c0a:	2202      	movs	r2, #2
 8012c0c:	2102      	movs	r1, #2
 8012c0e:	6818      	ldr	r0, [r3, #0]
 8012c10:	f7fb fd2a 	bl	800e668 <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 8012c14:	eef0 7a40 	vmov.f32	s15, s0
 8012c18:	edc4 7a00 	vstr	s15, [r4]

	auto S = H * _stateCovMatrix * H.Transposed() + R;
 8012c1c:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8012c20:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8012c24:	681b      	ldr	r3, [r3, #0]
 8012c26:	f103 021c 	add.w	r2, r3, #28
 8012c2a:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8012c2e:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 8012c32:	4961      	ldr	r1, [pc, #388]	; (8012db8 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3d0>)
 8012c34:	4618      	mov	r0, r3
 8012c36:	f000 ffcb 	bl	8013bd0 <_ZNK3Mat6MatrixILt3ELt6EEmlILt6EEENS0_ILt3EXT_EEERKNS0_ILt6EXT_EEE>
 8012c3a:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8012c3e:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8012c42:	495d      	ldr	r1, [pc, #372]	; (8012db8 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3d0>)
 8012c44:	4618      	mov	r0, r3
 8012c46:	f000 ffd6 	bl	8013bf6 <_ZNK3Mat6MatrixILt3ELt6EE10TransposedEv>
 8012c4a:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8012c4e:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8012c52:	f507 72d4 	add.w	r2, r7, #424	; 0x1a8
 8012c56:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8012c5a:	4618      	mov	r0, r3
 8012c5c:	f000 fffb 	bl	8013c56 <_ZNK3Mat6MatrixILt3ELt6EEmlILt3EEENS0_ILt3EXT_EEERKNS0_ILt6EXT_EEE>
 8012c60:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8012c64:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8012c68:	f507 719e 	add.w	r1, r7, #316	; 0x13c
 8012c6c:	4a54      	ldr	r2, [pc, #336]	; (8012dc0 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3d8>)
 8012c6e:	4618      	mov	r0, r3
 8012c70:	f7fe fd5e 	bl	8011730 <_ZNK3Mat6MatrixILt3ELt3EEplERKS1_>
	auto K = _stateCovMatrix * H.Transposed() * _Invert3x3Matrix(S);
 8012c74:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8012c78:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	f103 041c 	add.w	r4, r3, #28
 8012c82:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8012c86:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8012c8a:	494b      	ldr	r1, [pc, #300]	; (8012db8 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3d0>)
 8012c8c:	4618      	mov	r0, r3
 8012c8e:	f000 ffb2 	bl	8013bf6 <_ZNK3Mat6MatrixILt3ELt6EE10TransposedEv>
 8012c92:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8012c96:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8012c9a:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8012c9e:	4621      	mov	r1, r4
 8012ca0:	4618      	mov	r0, r3
 8012ca2:	f000 ffeb 	bl	8013c7c <_ZNK3Mat6MatrixILt6ELt6EEmlILt3EEENS0_ILt6EXT_EEERKS3_>
 8012ca6:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8012caa:	f5a3 70fc 	sub.w	r0, r3, #504	; 0x1f8
 8012cae:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8012cb2:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8012cb6:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8012cba:	6819      	ldr	r1, [r3, #0]
 8012cbc:	f000 fd42 	bl	8013744 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE>
 8012cc0:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8012cc4:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8012cc8:	f507 7220 	add.w	r2, r7, #640	; 0x280
 8012ccc:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 8012cd0:	4618      	mov	r0, r3
 8012cd2:	f000 ffe6 	bl	8013ca2 <_ZNK3Mat6MatrixILt6ELt3EEmlILt3EEENS0_ILt6EXT_EEERKNS0_ILt3EXT_EEE>
	_state += K * (z - h);
 8012cd6:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8012cda:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	1d1c      	adds	r4, r3, #4
 8012ce2:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8012ce6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012cea:	4611      	mov	r1, r2
 8012cec:	4618      	mov	r0, r3
 8012cee:	f7fb fff6 	bl	800ecde <_ZNK3Mat6MatrixILt3ELt1EEmiERKS1_>
 8012cf2:	eef0 6a40 	vmov.f32	s13, s0
 8012cf6:	eeb0 7a60 	vmov.f32	s14, s1
 8012cfa:	eef0 7a41 	vmov.f32	s15, s2
 8012cfe:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8012d02:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8012d06:	edc3 6a00 	vstr	s13, [r3]
 8012d0a:	ed83 7a01 	vstr	s14, [r3, #4]
 8012d0e:	edc3 7a02 	vstr	s15, [r3, #8]
 8012d12:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8012d16:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8012d1a:	f507 722f 	add.w	r2, r7, #700	; 0x2bc
 8012d1e:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8012d22:	4618      	mov	r0, r3
 8012d24:	f000 ffd0 	bl	8013cc8 <_ZNK3Mat6MatrixILt6ELt3EEmlILt1EEENS0_ILt6EXT_EEERKNS0_ILt3EXT_EEE>
 8012d28:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 8012d2c:	4619      	mov	r1, r3
 8012d2e:	4620      	mov	r0, r4
 8012d30:	f7fb fb44 	bl	800e3bc <_ZN3Mat6MatrixILt6ELt1EEpLERKS1_>
	_stateCovMatrix = (Eye<VelocityEKF_stateLen>(1.0f) - K*H) * _stateCovMatrix;
 8012d34:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8012d38:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8012d3c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012d40:	4618      	mov	r0, r3
 8012d42:	f7fb fb71 	bl	800e428 <_ZN3Mat3EyeILt6EEENS_6MatrixIXT_EXT_EEEf>
 8012d46:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8012d4a:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8012d4e:	4a1a      	ldr	r2, [pc, #104]	; (8012db8 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3d0>)
 8012d50:	4618      	mov	r0, r3
 8012d52:	f000 ffcc 	bl	8013cee <_ZNK3Mat6MatrixILt6ELt3EEmlILt6EEENS0_ILt6EXT_EEERKNS0_ILt3EXT_EEE>
 8012d56:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8012d5a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8012d5e:	f507 727a 	add.w	r2, r7, #1000	; 0x3e8
 8012d62:	f507 7156 	add.w	r1, r7, #856	; 0x358
 8012d66:	4618      	mov	r0, r3
 8012d68:	f7fb fb82 	bl	800e470 <_ZNK3Mat6MatrixILt6ELt6EEmiERKS1_>
 8012d6c:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8012d70:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	f103 021c 	add.w	r2, r3, #28
 8012d7a:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8012d7e:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8012d82:	681c      	ldr	r4, [r3, #0]
 8012d84:	463b      	mov	r3, r7
 8012d86:	f507 7132 	add.w	r1, r7, #712	; 0x2c8
 8012d8a:	4618      	mov	r0, r3
 8012d8c:	f7fb fa90 	bl	800e2b0 <_ZNK3Mat6MatrixILt6ELt6EEmlILt6EEENS0_ILt6EXT_EEERKS3_>
 8012d90:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8012d94:	f5a3 628f 	sub.w	r2, r3, #1144	; 0x478
 8012d98:	f104 031c 	add.w	r3, r4, #28
 8012d9c:	4611      	mov	r1, r2
 8012d9e:	2290      	movs	r2, #144	; 0x90
 8012da0:	4618      	mov	r0, r3
 8012da2:	f007 fdb6 	bl	801a912 <memcpy>
}
 8012da6:	bf00      	nop
 8012da8:	f207 477c 	addw	r7, r7, #1148	; 0x47c
 8012dac:	46bd      	mov	sp, r7
 8012dae:	bd90      	pop	{r4, r7, pc}
 8012db0:	24005494 	.word	0x24005494
 8012db4:	00000000 	.word	0x00000000
 8012db8:	2400544c 	.word	0x2400544c
 8012dbc:	240054bc 	.word	0x240054bc
 8012dc0:	24005498 	.word	0x24005498

08012dc4 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE>:

void VelocityEKF::_UpdatePosition(const MeassurementVec& meassurementVec, const MeasurementCovarianceMatrix& meassurementCov)
{
 8012dc4:	b590      	push	{r4, r7, lr}
 8012dc6:	ed2d 8b02 	vpush	{d8}
 8012dca:	f2ad 4d7c 	subw	sp, sp, #1148	; 0x47c
 8012dce:	af00      	add	r7, sp, #0
 8012dd0:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8012dd4:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8012dd8:	6018      	str	r0, [r3, #0]
 8012dda:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8012dde:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8012de2:	6019      	str	r1, [r3, #0]
 8012de4:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8012de8:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8012dec:	601a      	str	r2, [r3, #0]
	V_Vector<3> z{{meassurementVec(3), meassurementVec(4), meassurementVec(5)}};
 8012dee:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8012df2:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8012df6:	2103      	movs	r1, #3
 8012df8:	6818      	ldr	r0, [r3, #0]
 8012dfa:	f7fa fbb2 	bl	800d562 <_ZNK3Mat8V_VectorILt6EEclEt>
 8012dfe:	eef0 7a40 	vmov.f32	s15, s0
 8012e02:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8012e06:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8012e0a:	edc3 7a00 	vstr	s15, [r3]
 8012e0e:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8012e12:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8012e16:	2104      	movs	r1, #4
 8012e18:	6818      	ldr	r0, [r3, #0]
 8012e1a:	f7fa fba2 	bl	800d562 <_ZNK3Mat8V_VectorILt6EEclEt>
 8012e1e:	eef0 7a40 	vmov.f32	s15, s0
 8012e22:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8012e26:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8012e2a:	edc3 7a01 	vstr	s15, [r3, #4]
 8012e2e:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8012e32:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8012e36:	2105      	movs	r1, #5
 8012e38:	6818      	ldr	r0, [r3, #0]
 8012e3a:	f7fa fb92 	bl	800d562 <_ZNK3Mat8V_VectorILt6EEclEt>
 8012e3e:	eef0 7a40 	vmov.f32	s15, s0
 8012e42:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8012e46:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8012e4a:	edc3 7a02 	vstr	s15, [r3, #8]
 8012e4e:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8012e52:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012e56:	4611      	mov	r1, r2
 8012e58:	4618      	mov	r0, r3
 8012e5a:	f7ff fc53 	bl	8012704 <_ZN3Mat8V_VectorILt3EEC1ERKSt5arrayIfLj3EE>
	V_Vector<3> h{{_state(3), _state(4), _state(5)}};
 8012e5e:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8012e62:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	3304      	adds	r3, #4
 8012e6a:	2103      	movs	r1, #3
 8012e6c:	4618      	mov	r0, r3
 8012e6e:	f000 fe57 	bl	8013b20 <_ZN3Mat8V_VectorILt6EEclEt>
 8012e72:	4603      	mov	r3, r0
 8012e74:	681a      	ldr	r2, [r3, #0]
 8012e76:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8012e7a:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8012e7e:	601a      	str	r2, [r3, #0]
 8012e80:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8012e84:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	3304      	adds	r3, #4
 8012e8c:	2104      	movs	r1, #4
 8012e8e:	4618      	mov	r0, r3
 8012e90:	f000 fe46 	bl	8013b20 <_ZN3Mat8V_VectorILt6EEclEt>
 8012e94:	4603      	mov	r3, r0
 8012e96:	681a      	ldr	r2, [r3, #0]
 8012e98:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8012e9c:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8012ea0:	605a      	str	r2, [r3, #4]
 8012ea2:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8012ea6:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	3304      	adds	r3, #4
 8012eae:	2105      	movs	r1, #5
 8012eb0:	4618      	mov	r0, r3
 8012eb2:	f000 fe35 	bl	8013b20 <_ZN3Mat8V_VectorILt6EEclEt>
 8012eb6:	4603      	mov	r3, r0
 8012eb8:	681a      	ldr	r2, [r3, #0]
 8012eba:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8012ebe:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8012ec2:	609a      	str	r2, [r3, #8]
 8012ec4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8012ec8:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8012ecc:	4611      	mov	r1, r2
 8012ece:	4618      	mov	r0, r3
 8012ed0:	f7ff fc18 	bl	8012704 <_ZN3Mat8V_VectorILt3EEC1ERKSt5arrayIfLj3EE>
	static Matrix<3, VelocityEKF_stateLen> H{0.0f};
 8012ed4:	4bbe      	ldr	r3, [pc, #760]	; (80131d0 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x40c>)
 8012ed6:	681b      	ldr	r3, [r3, #0]
 8012ed8:	f3bf 8f5b 	dmb	ish
 8012edc:	f003 0301 	and.w	r3, r3, #1
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	bf0c      	ite	eq
 8012ee4:	2301      	moveq	r3, #1
 8012ee6:	2300      	movne	r3, #0
 8012ee8:	b2db      	uxtb	r3, r3
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d012      	beq.n	8012f14 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x150>
 8012eee:	48b8      	ldr	r0, [pc, #736]	; (80131d0 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x40c>)
 8012ef0:	f006 faca 	bl	8019488 <__cxa_guard_acquire>
 8012ef4:	4603      	mov	r3, r0
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	bf14      	ite	ne
 8012efa:	2301      	movne	r3, #1
 8012efc:	2300      	moveq	r3, #0
 8012efe:	b2db      	uxtb	r3, r3
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d007      	beq.n	8012f14 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x150>
 8012f04:	ed9f 0ab3 	vldr	s0, [pc, #716]	; 80131d4 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x410>
 8012f08:	48b3      	ldr	r0, [pc, #716]	; (80131d8 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x414>)
 8012f0a:	f000 fe29 	bl	8013b60 <_ZN3Mat6MatrixILt3ELt6EEC1Ef>
 8012f0e:	48b0      	ldr	r0, [pc, #704]	; (80131d0 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x40c>)
 8012f10:	f006 fac6 	bl	80194a0 <__cxa_guard_release>
	H(0,3) = 1.0f; H(1,4) = 1.0f; H(2,5) = 1.0f;
 8012f14:	2203      	movs	r2, #3
 8012f16:	2100      	movs	r1, #0
 8012f18:	48af      	ldr	r0, [pc, #700]	; (80131d8 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x414>)
 8012f1a:	f000 fe3e 	bl	8013b9a <_ZN3Mat6MatrixILt3ELt6EEclEtt>
 8012f1e:	4603      	mov	r3, r0
 8012f20:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8012f24:	601a      	str	r2, [r3, #0]
 8012f26:	2204      	movs	r2, #4
 8012f28:	2101      	movs	r1, #1
 8012f2a:	48ab      	ldr	r0, [pc, #684]	; (80131d8 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x414>)
 8012f2c:	f000 fe35 	bl	8013b9a <_ZN3Mat6MatrixILt3ELt6EEclEtt>
 8012f30:	4603      	mov	r3, r0
 8012f32:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8012f36:	601a      	str	r2, [r3, #0]
 8012f38:	2205      	movs	r2, #5
 8012f3a:	2102      	movs	r1, #2
 8012f3c:	48a6      	ldr	r0, [pc, #664]	; (80131d8 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x414>)
 8012f3e:	f000 fe2c 	bl	8013b9a <_ZN3Mat6MatrixILt3ELt6EEclEtt>
 8012f42:	4603      	mov	r3, r0
 8012f44:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8012f48:	601a      	str	r2, [r3, #0]
	static Matrix<3, 3> R{0.0f};
 8012f4a:	4ba4      	ldr	r3, [pc, #656]	; (80131dc <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x418>)
 8012f4c:	681b      	ldr	r3, [r3, #0]
 8012f4e:	f3bf 8f5b 	dmb	ish
 8012f52:	f003 0301 	and.w	r3, r3, #1
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	bf0c      	ite	eq
 8012f5a:	2301      	moveq	r3, #1
 8012f5c:	2300      	movne	r3, #0
 8012f5e:	b2db      	uxtb	r3, r3
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d012      	beq.n	8012f8a <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x1c6>
 8012f64:	489d      	ldr	r0, [pc, #628]	; (80131dc <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x418>)
 8012f66:	f006 fa8f 	bl	8019488 <__cxa_guard_acquire>
 8012f6a:	4603      	mov	r3, r0
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	bf14      	ite	ne
 8012f70:	2301      	movne	r3, #1
 8012f72:	2300      	moveq	r3, #0
 8012f74:	b2db      	uxtb	r3, r3
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d007      	beq.n	8012f8a <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x1c6>
 8012f7a:	ed9f 0a96 	vldr	s0, [pc, #600]	; 80131d4 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x410>
 8012f7e:	4898      	ldr	r0, [pc, #608]	; (80131e0 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x41c>)
 8012f80:	f7fa fba1 	bl	800d6c6 <_ZN3Mat6MatrixILt3ELt3EEC1Ef>
 8012f84:	4895      	ldr	r0, [pc, #596]	; (80131dc <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x418>)
 8012f86:	f006 fa8b 	bl	80194a0 <__cxa_guard_release>
	R(0,0) = meassurementCov(3,3)*_ER; R(1,1) = meassurementCov(4,4)*_ER / cos(_state(3)); R(2,2) = meassurementCov(5,5);
 8012f8a:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8012f8e:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8012f92:	2203      	movs	r2, #3
 8012f94:	2103      	movs	r1, #3
 8012f96:	6818      	ldr	r0, [r3, #0]
 8012f98:	f7fb fb66 	bl	800e668 <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 8012f9c:	eeb0 8a40 	vmov.f32	s16, s0
 8012fa0:	2200      	movs	r2, #0
 8012fa2:	2100      	movs	r1, #0
 8012fa4:	488e      	ldr	r0, [pc, #568]	; (80131e0 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x41c>)
 8012fa6:	f7fa fbab 	bl	800d700 <_ZN3Mat6MatrixILt3ELt3EEclEtt>
 8012faa:	4603      	mov	r3, r0
 8012fac:	eddf 7a8d 	vldr	s15, [pc, #564]	; 80131e4 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x420>
 8012fb0:	ee68 7a27 	vmul.f32	s15, s16, s15
 8012fb4:	edc3 7a00 	vstr	s15, [r3]
 8012fb8:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8012fbc:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8012fc0:	2204      	movs	r2, #4
 8012fc2:	2104      	movs	r1, #4
 8012fc4:	6818      	ldr	r0, [r3, #0]
 8012fc6:	f7fb fb4f 	bl	800e668 <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 8012fca:	eef0 7a40 	vmov.f32	s15, s0
 8012fce:	ed9f 7a85 	vldr	s14, [pc, #532]	; 80131e4 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x420>
 8012fd2:	ee27 8a87 	vmul.f32	s16, s15, s14
 8012fd6:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8012fda:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8012fde:	681b      	ldr	r3, [r3, #0]
 8012fe0:	3304      	adds	r3, #4
 8012fe2:	2103      	movs	r1, #3
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	f000 fd9b 	bl	8013b20 <_ZN3Mat8V_VectorILt6EEclEt>
 8012fea:	4603      	mov	r3, r0
 8012fec:	edd3 7a00 	vldr	s15, [r3]
 8012ff0:	eeb0 0a67 	vmov.f32	s0, s15
 8012ff4:	f7fb ff88 	bl	800ef08 <_ZSt3cosf>
 8012ff8:	eef0 8a40 	vmov.f32	s17, s0
 8012ffc:	2201      	movs	r2, #1
 8012ffe:	2101      	movs	r1, #1
 8013000:	4877      	ldr	r0, [pc, #476]	; (80131e0 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x41c>)
 8013002:	f7fa fb7d 	bl	800d700 <_ZN3Mat6MatrixILt3ELt3EEclEtt>
 8013006:	4603      	mov	r3, r0
 8013008:	eec8 7a28 	vdiv.f32	s15, s16, s17
 801300c:	edc3 7a00 	vstr	s15, [r3]
 8013010:	2202      	movs	r2, #2
 8013012:	2102      	movs	r1, #2
 8013014:	4872      	ldr	r0, [pc, #456]	; (80131e0 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x41c>)
 8013016:	f7fa fb73 	bl	800d700 <_ZN3Mat6MatrixILt3ELt3EEclEtt>
 801301a:	4604      	mov	r4, r0
 801301c:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8013020:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8013024:	2205      	movs	r2, #5
 8013026:	2105      	movs	r1, #5
 8013028:	6818      	ldr	r0, [r3, #0]
 801302a:	f7fb fb1d 	bl	800e668 <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 801302e:	eef0 7a40 	vmov.f32	s15, s0
 8013032:	edc4 7a00 	vstr	s15, [r4]

	auto S = H * _stateCovMatrix * H.Transposed() + R;
 8013036:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 801303a:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 801303e:	681b      	ldr	r3, [r3, #0]
 8013040:	f103 021c 	add.w	r2, r3, #28
 8013044:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8013048:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 801304c:	4962      	ldr	r1, [pc, #392]	; (80131d8 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x414>)
 801304e:	4618      	mov	r0, r3
 8013050:	f000 fdbe 	bl	8013bd0 <_ZNK3Mat6MatrixILt3ELt6EEmlILt6EEENS0_ILt3EXT_EEERKNS0_ILt6EXT_EEE>
 8013054:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8013058:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 801305c:	495e      	ldr	r1, [pc, #376]	; (80131d8 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x414>)
 801305e:	4618      	mov	r0, r3
 8013060:	f000 fdc9 	bl	8013bf6 <_ZNK3Mat6MatrixILt3ELt6EE10TransposedEv>
 8013064:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8013068:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 801306c:	f507 72d4 	add.w	r2, r7, #424	; 0x1a8
 8013070:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8013074:	4618      	mov	r0, r3
 8013076:	f000 fdee 	bl	8013c56 <_ZNK3Mat6MatrixILt3ELt6EEmlILt3EEENS0_ILt3EXT_EEERKNS0_ILt6EXT_EEE>
 801307a:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 801307e:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8013082:	f507 719e 	add.w	r1, r7, #316	; 0x13c
 8013086:	4a56      	ldr	r2, [pc, #344]	; (80131e0 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x41c>)
 8013088:	4618      	mov	r0, r3
 801308a:	f7fe fb51 	bl	8011730 <_ZNK3Mat6MatrixILt3ELt3EEplERKS1_>
	auto K = _stateCovMatrix * H.Transposed() * _Invert3x3Matrix(S);
 801308e:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8013092:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8013096:	681b      	ldr	r3, [r3, #0]
 8013098:	f103 041c 	add.w	r4, r3, #28
 801309c:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80130a0:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80130a4:	494c      	ldr	r1, [pc, #304]	; (80131d8 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x414>)
 80130a6:	4618      	mov	r0, r3
 80130a8:	f000 fda5 	bl	8013bf6 <_ZNK3Mat6MatrixILt3ELt6EE10TransposedEv>
 80130ac:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80130b0:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 80130b4:	f507 720e 	add.w	r2, r7, #568	; 0x238
 80130b8:	4621      	mov	r1, r4
 80130ba:	4618      	mov	r0, r3
 80130bc:	f000 fdde 	bl	8013c7c <_ZNK3Mat6MatrixILt6ELt6EEmlILt3EEENS0_ILt6EXT_EEERKS3_>
 80130c0:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80130c4:	f5a3 70fc 	sub.w	r0, r3, #504	; 0x1f8
 80130c8:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 80130cc:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80130d0:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 80130d4:	6819      	ldr	r1, [r3, #0]
 80130d6:	f000 fb35 	bl	8013744 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE>
 80130da:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80130de:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 80130e2:	f507 7220 	add.w	r2, r7, #640	; 0x280
 80130e6:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 80130ea:	4618      	mov	r0, r3
 80130ec:	f000 fdd9 	bl	8013ca2 <_ZNK3Mat6MatrixILt6ELt3EEmlILt3EEENS0_ILt6EXT_EEERKNS0_ILt3EXT_EEE>
	_state += K * (z - h);
 80130f0:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80130f4:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	1d1c      	adds	r4, r3, #4
 80130fc:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8013100:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013104:	4611      	mov	r1, r2
 8013106:	4618      	mov	r0, r3
 8013108:	f7fb fde9 	bl	800ecde <_ZNK3Mat6MatrixILt3ELt1EEmiERKS1_>
 801310c:	eef0 6a40 	vmov.f32	s13, s0
 8013110:	eeb0 7a60 	vmov.f32	s14, s1
 8013114:	eef0 7a41 	vmov.f32	s15, s2
 8013118:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 801311c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8013120:	edc3 6a00 	vstr	s13, [r3]
 8013124:	ed83 7a01 	vstr	s14, [r3, #4]
 8013128:	edc3 7a02 	vstr	s15, [r3, #8]
 801312c:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8013130:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8013134:	f507 722f 	add.w	r2, r7, #700	; 0x2bc
 8013138:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 801313c:	4618      	mov	r0, r3
 801313e:	f000 fdc3 	bl	8013cc8 <_ZNK3Mat6MatrixILt6ELt3EEmlILt1EEENS0_ILt6EXT_EEERKNS0_ILt3EXT_EEE>
 8013142:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 8013146:	4619      	mov	r1, r3
 8013148:	4620      	mov	r0, r4
 801314a:	f7fb f937 	bl	800e3bc <_ZN3Mat6MatrixILt6ELt1EEpLERKS1_>
	_stateCovMatrix = (Eye<VelocityEKF_stateLen>(1.0f) - K*H) * _stateCovMatrix;
 801314e:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8013152:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8013156:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801315a:	4618      	mov	r0, r3
 801315c:	f7fb f964 	bl	800e428 <_ZN3Mat3EyeILt6EEENS_6MatrixIXT_EXT_EEEf>
 8013160:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8013164:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8013168:	4a1b      	ldr	r2, [pc, #108]	; (80131d8 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x414>)
 801316a:	4618      	mov	r0, r3
 801316c:	f000 fdbf 	bl	8013cee <_ZNK3Mat6MatrixILt6ELt3EEmlILt6EEENS0_ILt6EXT_EEERKNS0_ILt3EXT_EEE>
 8013170:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8013174:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8013178:	f507 727a 	add.w	r2, r7, #1000	; 0x3e8
 801317c:	f507 7156 	add.w	r1, r7, #856	; 0x358
 8013180:	4618      	mov	r0, r3
 8013182:	f7fb f975 	bl	800e470 <_ZNK3Mat6MatrixILt6ELt6EEmiERKS1_>
 8013186:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 801318a:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 801318e:	681b      	ldr	r3, [r3, #0]
 8013190:	f103 021c 	add.w	r2, r3, #28
 8013194:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8013198:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 801319c:	681c      	ldr	r4, [r3, #0]
 801319e:	463b      	mov	r3, r7
 80131a0:	f507 7132 	add.w	r1, r7, #712	; 0x2c8
 80131a4:	4618      	mov	r0, r3
 80131a6:	f7fb f883 	bl	800e2b0 <_ZNK3Mat6MatrixILt6ELt6EEmlILt6EEENS0_ILt6EXT_EEERKS3_>
 80131aa:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80131ae:	f5a3 628f 	sub.w	r2, r3, #1144	; 0x478
 80131b2:	f104 031c 	add.w	r3, r4, #28
 80131b6:	4611      	mov	r1, r2
 80131b8:	2290      	movs	r2, #144	; 0x90
 80131ba:	4618      	mov	r0, r3
 80131bc:	f007 fba9 	bl	801a912 <memcpy>
}
 80131c0:	bf00      	nop
 80131c2:	f207 477c 	addw	r7, r7, #1148	; 0x47c
 80131c6:	46bd      	mov	sp, r7
 80131c8:	ecbd 8b02 	vpop	{d8}
 80131cc:	bd90      	pop	{r4, r7, pc}
 80131ce:	bf00      	nop
 80131d0:	24005508 	.word	0x24005508
 80131d4:	00000000 	.word	0x00000000
 80131d8:	240054c0 	.word	0x240054c0
 80131dc:	24005530 	.word	0x24005530
 80131e0:	2400550c 	.word	0x2400550c
 80131e4:	3428892d 	.word	0x3428892d

080131e8 <_ZNK10Algorithms11VelocityEKF2_fERKN3Mat8V_VectorILt3EEEf>:

VelocityEKF::StateVec VelocityEKF::_f(const ControlVec& controlVec, float time) const
{
 80131e8:	b580      	push	{r7, lr}
 80131ea:	ed2d 8b04 	vpush	{d8-d9}
 80131ee:	b088      	sub	sp, #32
 80131f0:	af00      	add	r7, sp, #0
 80131f2:	60f8      	str	r0, [r7, #12]
 80131f4:	60b9      	str	r1, [r7, #8]
 80131f6:	607a      	str	r2, [r7, #4]
 80131f8:	ed87 0a00 	vstr	s0, [r7]
	const float dt = time - _time;
 80131fc:	68bb      	ldr	r3, [r7, #8]
 80131fe:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 8013202:	ed97 7a00 	vldr	s14, [r7]
 8013206:	ee77 7a67 	vsub.f32	s15, s14, s15
 801320a:	edc7 7a07 	vstr	s15, [r7, #28]
	const float dt2 = dt*dt;
 801320e:	edd7 7a07 	vldr	s15, [r7, #28]
 8013212:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013216:	edc7 7a06 	vstr	s15, [r7, #24]
	const float dt2_2 = dt2 * 0.5f;
 801321a:	edd7 7a06 	vldr	s15, [r7, #24]
 801321e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8013222:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013226:	edc7 7a05 	vstr	s15, [r7, #20]
	StateVec result;
 801322a:	68f8      	ldr	r0, [r7, #12]
 801322c:	f7fa f893 	bl	800d356 <_ZN3Mat8V_VectorILt6EEC1Ev>
	result(0) = _state(0) + controlVec(0)*dt;
 8013230:	68bb      	ldr	r3, [r7, #8]
 8013232:	3304      	adds	r3, #4
 8013234:	2100      	movs	r1, #0
 8013236:	4618      	mov	r0, r3
 8013238:	f7fa f993 	bl	800d562 <_ZNK3Mat8V_VectorILt6EEclEt>
 801323c:	eef0 8a40 	vmov.f32	s17, s0
 8013240:	2100      	movs	r1, #0
 8013242:	6878      	ldr	r0, [r7, #4]
 8013244:	f7ff fa6d 	bl	8012722 <_ZNK3Mat8V_VectorILt3EEclEt>
 8013248:	eeb0 7a40 	vmov.f32	s14, s0
 801324c:	edd7 7a07 	vldr	s15, [r7, #28]
 8013250:	ee27 8a27 	vmul.f32	s16, s14, s15
 8013254:	2100      	movs	r1, #0
 8013256:	68f8      	ldr	r0, [r7, #12]
 8013258:	f000 fc62 	bl	8013b20 <_ZN3Mat8V_VectorILt6EEclEt>
 801325c:	4603      	mov	r3, r0
 801325e:	ee78 7a88 	vadd.f32	s15, s17, s16
 8013262:	edc3 7a00 	vstr	s15, [r3]
	result(1) = _state(1) + controlVec(1)*dt;
 8013266:	68bb      	ldr	r3, [r7, #8]
 8013268:	3304      	adds	r3, #4
 801326a:	2101      	movs	r1, #1
 801326c:	4618      	mov	r0, r3
 801326e:	f7fa f978 	bl	800d562 <_ZNK3Mat8V_VectorILt6EEclEt>
 8013272:	eef0 8a40 	vmov.f32	s17, s0
 8013276:	2101      	movs	r1, #1
 8013278:	6878      	ldr	r0, [r7, #4]
 801327a:	f7ff fa52 	bl	8012722 <_ZNK3Mat8V_VectorILt3EEclEt>
 801327e:	eeb0 7a40 	vmov.f32	s14, s0
 8013282:	edd7 7a07 	vldr	s15, [r7, #28]
 8013286:	ee27 8a27 	vmul.f32	s16, s14, s15
 801328a:	2101      	movs	r1, #1
 801328c:	68f8      	ldr	r0, [r7, #12]
 801328e:	f000 fc47 	bl	8013b20 <_ZN3Mat8V_VectorILt6EEclEt>
 8013292:	4603      	mov	r3, r0
 8013294:	ee78 7a88 	vadd.f32	s15, s17, s16
 8013298:	edc3 7a00 	vstr	s15, [r3]
	result(2) = _state(2) + controlVec(2)*dt;
 801329c:	68bb      	ldr	r3, [r7, #8]
 801329e:	3304      	adds	r3, #4
 80132a0:	2102      	movs	r1, #2
 80132a2:	4618      	mov	r0, r3
 80132a4:	f7fa f95d 	bl	800d562 <_ZNK3Mat8V_VectorILt6EEclEt>
 80132a8:	eef0 8a40 	vmov.f32	s17, s0
 80132ac:	2102      	movs	r1, #2
 80132ae:	6878      	ldr	r0, [r7, #4]
 80132b0:	f7ff fa37 	bl	8012722 <_ZNK3Mat8V_VectorILt3EEclEt>
 80132b4:	eeb0 7a40 	vmov.f32	s14, s0
 80132b8:	edd7 7a07 	vldr	s15, [r7, #28]
 80132bc:	ee27 8a27 	vmul.f32	s16, s14, s15
 80132c0:	2102      	movs	r1, #2
 80132c2:	68f8      	ldr	r0, [r7, #12]
 80132c4:	f000 fc2c 	bl	8013b20 <_ZN3Mat8V_VectorILt6EEclEt>
 80132c8:	4603      	mov	r3, r0
 80132ca:	ee78 7a88 	vadd.f32	s15, s17, s16
 80132ce:	edc3 7a00 	vstr	s15, [r3]
	result(3) = _state(3) + (_state(1)*dt + controlVec(1)*dt2_2)*_ER;
 80132d2:	68bb      	ldr	r3, [r7, #8]
 80132d4:	3304      	adds	r3, #4
 80132d6:	2103      	movs	r1, #3
 80132d8:	4618      	mov	r0, r3
 80132da:	f7fa f942 	bl	800d562 <_ZNK3Mat8V_VectorILt6EEclEt>
 80132de:	eef0 8a40 	vmov.f32	s17, s0
 80132e2:	68bb      	ldr	r3, [r7, #8]
 80132e4:	3304      	adds	r3, #4
 80132e6:	2101      	movs	r1, #1
 80132e8:	4618      	mov	r0, r3
 80132ea:	f7fa f93a 	bl	800d562 <_ZNK3Mat8V_VectorILt6EEclEt>
 80132ee:	eeb0 7a40 	vmov.f32	s14, s0
 80132f2:	edd7 7a07 	vldr	s15, [r7, #28]
 80132f6:	ee27 8a27 	vmul.f32	s16, s14, s15
 80132fa:	2101      	movs	r1, #1
 80132fc:	6878      	ldr	r0, [r7, #4]
 80132fe:	f7ff fa10 	bl	8012722 <_ZNK3Mat8V_VectorILt3EEclEt>
 8013302:	eeb0 7a40 	vmov.f32	s14, s0
 8013306:	edd7 7a05 	vldr	s15, [r7, #20]
 801330a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801330e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8013312:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8013408 <_ZNK10Algorithms11VelocityEKF2_fERKN3Mat8V_VectorILt3EEEf+0x220>
 8013316:	ee27 8a87 	vmul.f32	s16, s15, s14
 801331a:	2103      	movs	r1, #3
 801331c:	68f8      	ldr	r0, [r7, #12]
 801331e:	f000 fbff 	bl	8013b20 <_ZN3Mat8V_VectorILt6EEclEt>
 8013322:	4603      	mov	r3, r0
 8013324:	ee78 7a88 	vadd.f32	s15, s17, s16
 8013328:	edc3 7a00 	vstr	s15, [r3]
	result(4) = _state(4) + (_state(0)*dt + controlVec(0)*dt2_2)*_ER / cos(_state(3));
 801332c:	68bb      	ldr	r3, [r7, #8]
 801332e:	3304      	adds	r3, #4
 8013330:	2104      	movs	r1, #4
 8013332:	4618      	mov	r0, r3
 8013334:	f7fa f915 	bl	800d562 <_ZNK3Mat8V_VectorILt6EEclEt>
 8013338:	eeb0 9a40 	vmov.f32	s18, s0
 801333c:	68bb      	ldr	r3, [r7, #8]
 801333e:	3304      	adds	r3, #4
 8013340:	2100      	movs	r1, #0
 8013342:	4618      	mov	r0, r3
 8013344:	f7fa f90d 	bl	800d562 <_ZNK3Mat8V_VectorILt6EEclEt>
 8013348:	eeb0 7a40 	vmov.f32	s14, s0
 801334c:	edd7 7a07 	vldr	s15, [r7, #28]
 8013350:	ee27 8a27 	vmul.f32	s16, s14, s15
 8013354:	2100      	movs	r1, #0
 8013356:	6878      	ldr	r0, [r7, #4]
 8013358:	f7ff f9e3 	bl	8012722 <_ZNK3Mat8V_VectorILt3EEclEt>
 801335c:	eeb0 7a40 	vmov.f32	s14, s0
 8013360:	edd7 7a05 	vldr	s15, [r7, #20]
 8013364:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013368:	ee78 7a27 	vadd.f32	s15, s16, s15
 801336c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8013408 <_ZNK10Algorithms11VelocityEKF2_fERKN3Mat8V_VectorILt3EEEf+0x220>
 8013370:	ee67 8a87 	vmul.f32	s17, s15, s14
 8013374:	68bb      	ldr	r3, [r7, #8]
 8013376:	3304      	adds	r3, #4
 8013378:	2103      	movs	r1, #3
 801337a:	4618      	mov	r0, r3
 801337c:	f7fa f8f1 	bl	800d562 <_ZNK3Mat8V_VectorILt6EEclEt>
 8013380:	eef0 7a40 	vmov.f32	s15, s0
 8013384:	eeb0 0a67 	vmov.f32	s0, s15
 8013388:	f7fb fdbe 	bl	800ef08 <_ZSt3cosf>
 801338c:	eef0 7a40 	vmov.f32	s15, s0
 8013390:	ee88 8aa7 	vdiv.f32	s16, s17, s15
 8013394:	2104      	movs	r1, #4
 8013396:	68f8      	ldr	r0, [r7, #12]
 8013398:	f000 fbc2 	bl	8013b20 <_ZN3Mat8V_VectorILt6EEclEt>
 801339c:	4603      	mov	r3, r0
 801339e:	ee79 7a08 	vadd.f32	s15, s18, s16
 80133a2:	edc3 7a00 	vstr	s15, [r3]
	result(5) = _state(5) + _state(2)*dt + controlVec(2)*dt2_2;
 80133a6:	68bb      	ldr	r3, [r7, #8]
 80133a8:	3304      	adds	r3, #4
 80133aa:	2105      	movs	r1, #5
 80133ac:	4618      	mov	r0, r3
 80133ae:	f7fa f8d8 	bl	800d562 <_ZNK3Mat8V_VectorILt6EEclEt>
 80133b2:	eeb0 8a40 	vmov.f32	s16, s0
 80133b6:	68bb      	ldr	r3, [r7, #8]
 80133b8:	3304      	adds	r3, #4
 80133ba:	2102      	movs	r1, #2
 80133bc:	4618      	mov	r0, r3
 80133be:	f7fa f8d0 	bl	800d562 <_ZNK3Mat8V_VectorILt6EEclEt>
 80133c2:	eeb0 7a40 	vmov.f32	s14, s0
 80133c6:	edd7 7a07 	vldr	s15, [r7, #28]
 80133ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80133ce:	ee78 8a27 	vadd.f32	s17, s16, s15
 80133d2:	2102      	movs	r1, #2
 80133d4:	6878      	ldr	r0, [r7, #4]
 80133d6:	f7ff f9a4 	bl	8012722 <_ZNK3Mat8V_VectorILt3EEclEt>
 80133da:	eeb0 7a40 	vmov.f32	s14, s0
 80133de:	edd7 7a05 	vldr	s15, [r7, #20]
 80133e2:	ee27 8a27 	vmul.f32	s16, s14, s15
 80133e6:	2105      	movs	r1, #5
 80133e8:	68f8      	ldr	r0, [r7, #12]
 80133ea:	f000 fb99 	bl	8013b20 <_ZN3Mat8V_VectorILt6EEclEt>
 80133ee:	4603      	mov	r3, r0
 80133f0:	ee78 7a88 	vadd.f32	s15, s17, s16
 80133f4:	edc3 7a00 	vstr	s15, [r3]
	return result;
 80133f8:	bf00      	nop
}
 80133fa:	68f8      	ldr	r0, [r7, #12]
 80133fc:	3720      	adds	r7, #32
 80133fe:	46bd      	mov	sp, r7
 8013400:	ecbd 8b04 	vpop	{d8-d9}
 8013404:	bd80      	pop	{r7, pc}
 8013406:	bf00      	nop
 8013408:	3428892d 	.word	0x3428892d

0801340c <_ZNK10Algorithms11VelocityEKF2_FERKN3Mat8V_VectorILt3EEEf>:

VelocityEKF::StateCovarianceMatrix VelocityEKF::_F(const ControlVec& controlVec, float time) const
{
 801340c:	b580      	push	{r7, lr}
 801340e:	ed2d 8b02 	vpush	{d8}
 8013412:	b088      	sub	sp, #32
 8013414:	af00      	add	r7, sp, #0
 8013416:	60f8      	str	r0, [r7, #12]
 8013418:	60b9      	str	r1, [r7, #8]
 801341a:	607a      	str	r2, [r7, #4]
 801341c:	ed87 0a00 	vstr	s0, [r7]
	const float dt = time - _time;
 8013420:	68bb      	ldr	r3, [r7, #8]
 8013422:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 8013426:	ed97 7a00 	vldr	s14, [r7]
 801342a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801342e:	edc7 7a07 	vstr	s15, [r7, #28]
	const float dt2 = dt*dt;
 8013432:	edd7 7a07 	vldr	s15, [r7, #28]
 8013436:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801343a:	edc7 7a06 	vstr	s15, [r7, #24]
	const float dt2_2 = dt2 * 0.5f;
 801343e:	edd7 7a06 	vldr	s15, [r7, #24]
 8013442:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8013446:	ee67 7a87 	vmul.f32	s15, s15, s14
 801344a:	edc7 7a05 	vstr	s15, [r7, #20]
	StateCovarianceMatrix result = Eye<VelocityEKF_stateLen>(1.0f);
 801344e:	68fb      	ldr	r3, [r7, #12]
 8013450:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013454:	4618      	mov	r0, r3
 8013456:	f7fa ffe7 	bl	800e428 <_ZN3Mat3EyeILt6EEENS_6MatrixIXT_EXT_EEEf>
	result(3, 1) = dt*_ER;
 801345a:	2201      	movs	r2, #1
 801345c:	2103      	movs	r1, #3
 801345e:	68f8      	ldr	r0, [r7, #12]
 8013460:	f7fb f8e7 	bl	800e632 <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 8013464:	4603      	mov	r3, r0
 8013466:	edd7 7a07 	vldr	s15, [r7, #28]
 801346a:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8013578 <_ZNK10Algorithms11VelocityEKF2_FERKN3Mat8V_VectorILt3EEEf+0x16c>
 801346e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013472:	edc3 7a00 	vstr	s15, [r3]
	result(4, 0) = dt*_ER / cos(_state(3)); result(4, 3) = (_state(0)*dt + dt2_2*controlVec(0)) * sin(_state(3)) * _ER / (cos(_state(3)) * cos(_state(3)));
 8013476:	edd7 7a07 	vldr	s15, [r7, #28]
 801347a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8013578 <_ZNK10Algorithms11VelocityEKF2_FERKN3Mat8V_VectorILt3EEEf+0x16c>
 801347e:	ee27 8a87 	vmul.f32	s16, s15, s14
 8013482:	68bb      	ldr	r3, [r7, #8]
 8013484:	3304      	adds	r3, #4
 8013486:	2103      	movs	r1, #3
 8013488:	4618      	mov	r0, r3
 801348a:	f7fa f86a 	bl	800d562 <_ZNK3Mat8V_VectorILt6EEclEt>
 801348e:	eef0 7a40 	vmov.f32	s15, s0
 8013492:	eeb0 0a67 	vmov.f32	s0, s15
 8013496:	f7fb fd37 	bl	800ef08 <_ZSt3cosf>
 801349a:	eef0 8a40 	vmov.f32	s17, s0
 801349e:	2200      	movs	r2, #0
 80134a0:	2104      	movs	r1, #4
 80134a2:	68f8      	ldr	r0, [r7, #12]
 80134a4:	f7fb f8c5 	bl	800e632 <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 80134a8:	4603      	mov	r3, r0
 80134aa:	eec8 7a28 	vdiv.f32	s15, s16, s17
 80134ae:	edc3 7a00 	vstr	s15, [r3]
 80134b2:	68bb      	ldr	r3, [r7, #8]
 80134b4:	3304      	adds	r3, #4
 80134b6:	2100      	movs	r1, #0
 80134b8:	4618      	mov	r0, r3
 80134ba:	f7fa f852 	bl	800d562 <_ZNK3Mat8V_VectorILt6EEclEt>
 80134be:	eeb0 7a40 	vmov.f32	s14, s0
 80134c2:	edd7 7a07 	vldr	s15, [r7, #28]
 80134c6:	ee27 8a27 	vmul.f32	s16, s14, s15
 80134ca:	2100      	movs	r1, #0
 80134cc:	6878      	ldr	r0, [r7, #4]
 80134ce:	f7ff f928 	bl	8012722 <_ZNK3Mat8V_VectorILt3EEclEt>
 80134d2:	eeb0 7a40 	vmov.f32	s14, s0
 80134d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80134da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80134de:	ee38 8a27 	vadd.f32	s16, s16, s15
 80134e2:	68bb      	ldr	r3, [r7, #8]
 80134e4:	3304      	adds	r3, #4
 80134e6:	2103      	movs	r1, #3
 80134e8:	4618      	mov	r0, r3
 80134ea:	f7fa f83a 	bl	800d562 <_ZNK3Mat8V_VectorILt6EEclEt>
 80134ee:	eef0 7a40 	vmov.f32	s15, s0
 80134f2:	eeb0 0a67 	vmov.f32	s0, s15
 80134f6:	f7fb fd17 	bl	800ef28 <_ZSt3sinf>
 80134fa:	eef0 7a40 	vmov.f32	s15, s0
 80134fe:	ee68 7a27 	vmul.f32	s15, s16, s15
 8013502:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8013578 <_ZNK10Algorithms11VelocityEKF2_FERKN3Mat8V_VectorILt3EEEf+0x16c>
 8013506:	ee67 8a87 	vmul.f32	s17, s15, s14
 801350a:	68bb      	ldr	r3, [r7, #8]
 801350c:	3304      	adds	r3, #4
 801350e:	2103      	movs	r1, #3
 8013510:	4618      	mov	r0, r3
 8013512:	f7fa f826 	bl	800d562 <_ZNK3Mat8V_VectorILt6EEclEt>
 8013516:	eef0 7a40 	vmov.f32	s15, s0
 801351a:	eeb0 0a67 	vmov.f32	s0, s15
 801351e:	f7fb fcf3 	bl	800ef08 <_ZSt3cosf>
 8013522:	eeb0 8a40 	vmov.f32	s16, s0
 8013526:	68bb      	ldr	r3, [r7, #8]
 8013528:	3304      	adds	r3, #4
 801352a:	2103      	movs	r1, #3
 801352c:	4618      	mov	r0, r3
 801352e:	f7fa f818 	bl	800d562 <_ZNK3Mat8V_VectorILt6EEclEt>
 8013532:	eef0 7a40 	vmov.f32	s15, s0
 8013536:	eeb0 0a67 	vmov.f32	s0, s15
 801353a:	f7fb fce5 	bl	800ef08 <_ZSt3cosf>
 801353e:	eef0 7a40 	vmov.f32	s15, s0
 8013542:	ee28 8a27 	vmul.f32	s16, s16, s15
 8013546:	2203      	movs	r2, #3
 8013548:	2104      	movs	r1, #4
 801354a:	68f8      	ldr	r0, [r7, #12]
 801354c:	f7fb f871 	bl	800e632 <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 8013550:	4603      	mov	r3, r0
 8013552:	eec8 7a88 	vdiv.f32	s15, s17, s16
 8013556:	edc3 7a00 	vstr	s15, [r3]
	result(5, 2) = dt;
 801355a:	2202      	movs	r2, #2
 801355c:	2105      	movs	r1, #5
 801355e:	68f8      	ldr	r0, [r7, #12]
 8013560:	f7fb f867 	bl	800e632 <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 8013564:	4602      	mov	r2, r0
 8013566:	69fb      	ldr	r3, [r7, #28]
 8013568:	6013      	str	r3, [r2, #0]
	return result;
 801356a:	bf00      	nop
}
 801356c:	68f8      	ldr	r0, [r7, #12]
 801356e:	3720      	adds	r7, #32
 8013570:	46bd      	mov	sp, r7
 8013572:	ecbd 8b02 	vpop	{d8}
 8013576:	bd80      	pop	{r7, pc}
 8013578:	3428892d 	.word	0x3428892d

0801357c <_ZNK10Algorithms11VelocityEKF2_QERKN3Mat8V_VectorILt3EEERKNS1_6MatrixILt3ELt3EEEf>:

VelocityEKF::StateCovarianceMatrix VelocityEKF::_Q(const ControlVec& controlVec, const ControlCovarianceMatrix& controlCov, float time) const
{
 801357c:	b580      	push	{r7, lr}
 801357e:	ed2d 8b02 	vpush	{d8}
 8013582:	b0c0      	sub	sp, #256	; 0x100
 8013584:	af00      	add	r7, sp, #0
 8013586:	6178      	str	r0, [r7, #20]
 8013588:	6139      	str	r1, [r7, #16]
 801358a:	60fa      	str	r2, [r7, #12]
 801358c:	60bb      	str	r3, [r7, #8]
 801358e:	ed87 0a01 	vstr	s0, [r7, #4]
	const float dt = time - _time;
 8013592:	693b      	ldr	r3, [r7, #16]
 8013594:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 8013598:	ed97 7a01 	vldr	s14, [r7, #4]
 801359c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80135a0:	edc7 7a3f 	vstr	s15, [r7, #252]	; 0xfc
	const float dt2 = dt*dt;
 80135a4:	edd7 7a3f 	vldr	s15, [r7, #252]	; 0xfc
 80135a8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80135ac:	edc7 7a3e 	vstr	s15, [r7, #248]	; 0xf8
	const float dt2_2 = dt2 * 0.5f;
 80135b0:	edd7 7a3e 	vldr	s15, [r7, #248]	; 0xf8
 80135b4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80135b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80135bc:	edc7 7a3d 	vstr	s15, [r7, #244]	; 0xf4
	Matrix<VelocityEKF_stateLen, VelocityEKF_controlLen> W{0.0f};
 80135c0:	f107 031c 	add.w	r3, r7, #28
 80135c4:	ed9f 0a41 	vldr	s0, [pc, #260]	; 80136cc <_ZNK10Algorithms11VelocityEKF2_QERKN3Mat8V_VectorILt3EEERKNS1_6MatrixILt3ELt3EEEf+0x150>
 80135c8:	4618      	mov	r0, r3
 80135ca:	f000 fbb2 	bl	8013d32 <_ZN3Mat6MatrixILt6ELt3EEC1Ef>
	W(0,0) = dt; W(1,1) = dt; W(2,2) = dt;
 80135ce:	f107 031c 	add.w	r3, r7, #28
 80135d2:	2200      	movs	r2, #0
 80135d4:	2100      	movs	r1, #0
 80135d6:	4618      	mov	r0, r3
 80135d8:	f000 fbc8 	bl	8013d6c <_ZN3Mat6MatrixILt6ELt3EEclEtt>
 80135dc:	4602      	mov	r2, r0
 80135de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80135e2:	6013      	str	r3, [r2, #0]
 80135e4:	f107 031c 	add.w	r3, r7, #28
 80135e8:	2201      	movs	r2, #1
 80135ea:	2101      	movs	r1, #1
 80135ec:	4618      	mov	r0, r3
 80135ee:	f000 fbbd 	bl	8013d6c <_ZN3Mat6MatrixILt6ELt3EEclEtt>
 80135f2:	4602      	mov	r2, r0
 80135f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80135f8:	6013      	str	r3, [r2, #0]
 80135fa:	f107 031c 	add.w	r3, r7, #28
 80135fe:	2202      	movs	r2, #2
 8013600:	2102      	movs	r1, #2
 8013602:	4618      	mov	r0, r3
 8013604:	f000 fbb2 	bl	8013d6c <_ZN3Mat6MatrixILt6ELt3EEclEtt>
 8013608:	4602      	mov	r2, r0
 801360a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801360e:	6013      	str	r3, [r2, #0]
	W(3,1) = dt2_2*_ER;
 8013610:	f107 031c 	add.w	r3, r7, #28
 8013614:	2201      	movs	r2, #1
 8013616:	2103      	movs	r1, #3
 8013618:	4618      	mov	r0, r3
 801361a:	f000 fba7 	bl	8013d6c <_ZN3Mat6MatrixILt6ELt3EEclEtt>
 801361e:	4603      	mov	r3, r0
 8013620:	edd7 7a3d 	vldr	s15, [r7, #244]	; 0xf4
 8013624:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80136d0 <_ZNK10Algorithms11VelocityEKF2_QERKN3Mat8V_VectorILt3EEERKNS1_6MatrixILt3ELt3EEEf+0x154>
 8013628:	ee67 7a87 	vmul.f32	s15, s15, s14
 801362c:	edc3 7a00 	vstr	s15, [r3]
	W(4,0) = W(3,1) / cos(_state(3));
 8013630:	f107 031c 	add.w	r3, r7, #28
 8013634:	2201      	movs	r2, #1
 8013636:	2103      	movs	r1, #3
 8013638:	4618      	mov	r0, r3
 801363a:	f000 fb97 	bl	8013d6c <_ZN3Mat6MatrixILt6ELt3EEclEtt>
 801363e:	4603      	mov	r3, r0
 8013640:	ed93 8a00 	vldr	s16, [r3]
 8013644:	693b      	ldr	r3, [r7, #16]
 8013646:	3304      	adds	r3, #4
 8013648:	2103      	movs	r1, #3
 801364a:	4618      	mov	r0, r3
 801364c:	f7f9 ff89 	bl	800d562 <_ZNK3Mat8V_VectorILt6EEclEt>
 8013650:	eef0 7a40 	vmov.f32	s15, s0
 8013654:	eeb0 0a67 	vmov.f32	s0, s15
 8013658:	f7fb fc56 	bl	800ef08 <_ZSt3cosf>
 801365c:	eef0 8a40 	vmov.f32	s17, s0
 8013660:	f107 031c 	add.w	r3, r7, #28
 8013664:	2200      	movs	r2, #0
 8013666:	2104      	movs	r1, #4
 8013668:	4618      	mov	r0, r3
 801366a:	f000 fb7f 	bl	8013d6c <_ZN3Mat6MatrixILt6ELt3EEclEtt>
 801366e:	4603      	mov	r3, r0
 8013670:	eec8 7a28 	vdiv.f32	s15, s16, s17
 8013674:	edc3 7a00 	vstr	s15, [r3]
	W(5,2) = dt2_2;
 8013678:	f107 031c 	add.w	r3, r7, #28
 801367c:	2202      	movs	r2, #2
 801367e:	2105      	movs	r1, #5
 8013680:	4618      	mov	r0, r3
 8013682:	f000 fb73 	bl	8013d6c <_ZN3Mat6MatrixILt6ELt3EEclEtt>
 8013686:	4602      	mov	r2, r0
 8013688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801368c:	6013      	str	r3, [r2, #0]
	return W*controlCov*W.Transposed();
 801368e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013692:	f107 011c 	add.w	r1, r7, #28
 8013696:	68ba      	ldr	r2, [r7, #8]
 8013698:	4618      	mov	r0, r3
 801369a:	f000 fb02 	bl	8013ca2 <_ZNK3Mat6MatrixILt6ELt3EEmlILt3EEENS0_ILt6EXT_EEERKNS0_ILt3EXT_EEE>
 801369e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80136a2:	f107 021c 	add.w	r2, r7, #28
 80136a6:	4611      	mov	r1, r2
 80136a8:	4618      	mov	r0, r3
 80136aa:	f000 fb78 	bl	8013d9e <_ZNK3Mat6MatrixILt6ELt3EE10TransposedEv>
 80136ae:	697b      	ldr	r3, [r7, #20]
 80136b0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80136b4:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80136b8:	4618      	mov	r0, r3
 80136ba:	f000 fb18 	bl	8013cee <_ZNK3Mat6MatrixILt6ELt3EEmlILt6EEENS0_ILt6EXT_EEERKNS0_ILt3EXT_EEE>
}
 80136be:	6978      	ldr	r0, [r7, #20]
 80136c0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80136c4:	46bd      	mov	sp, r7
 80136c6:	ecbd 8b02 	vpop	{d8}
 80136ca:	bd80      	pop	{r7, pc}
 80136cc:	00000000 	.word	0x00000000
 80136d0:	3428892d 	.word	0x3428892d

080136d4 <_ZNK10Algorithms11VelocityEKF2_hEv>:

VelocityEKF::MeassurementVec VelocityEKF::_h() const
{
 80136d4:	b4b0      	push	{r4, r5, r7}
 80136d6:	b083      	sub	sp, #12
 80136d8:	af00      	add	r7, sp, #0
 80136da:	6078      	str	r0, [r7, #4]
 80136dc:	6039      	str	r1, [r7, #0]
	return _state;
 80136de:	687a      	ldr	r2, [r7, #4]
 80136e0:	683b      	ldr	r3, [r7, #0]
 80136e2:	4615      	mov	r5, r2
 80136e4:	1d1c      	adds	r4, r3, #4
 80136e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80136e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80136ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80136ee:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80136f2:	6878      	ldr	r0, [r7, #4]
 80136f4:	370c      	adds	r7, #12
 80136f6:	46bd      	mov	sp, r7
 80136f8:	bcb0      	pop	{r4, r5, r7}
 80136fa:	4770      	bx	lr

080136fc <_ZNK10Algorithms11VelocityEKF2_HEv>:

Matrix<VelocityEKF_meassurementLen, VelocityEKF_stateLen> VelocityEKF::_H() const
{
 80136fc:	b580      	push	{r7, lr}
 80136fe:	b082      	sub	sp, #8
 8013700:	af00      	add	r7, sp, #0
 8013702:	6078      	str	r0, [r7, #4]
 8013704:	6039      	str	r1, [r7, #0]
	return Eye<VelocityEKF_meassurementLen>(1.0f);
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801370c:	4618      	mov	r0, r3
 801370e:	f7fa fe8b 	bl	800e428 <_ZN3Mat3EyeILt6EEENS_6MatrixIXT_EXT_EEEf>
 8013712:	bf00      	nop
}
 8013714:	6878      	ldr	r0, [r7, #4]
 8013716:	3708      	adds	r7, #8
 8013718:	46bd      	mov	sp, r7
 801371a:	bd80      	pop	{r7, pc}

0801371c <_ZNK10Algorithms11VelocityEKF13_InvertMatrixERKN3Mat6MatrixILt6ELt6EEE>:

VelocityEKF::MeasurementCovarianceMatrix VelocityEKF::_InvertMatrix(const MeasurementCovarianceMatrix& matrix) const
{
 801371c:	b580      	push	{r7, lr}
 801371e:	b084      	sub	sp, #16
 8013720:	af00      	add	r7, sp, #0
 8013722:	60f8      	str	r0, [r7, #12]
 8013724:	60b9      	str	r1, [r7, #8]
 8013726:	607a      	str	r2, [r7, #4]
	auto result = matrix;
 8013728:	68fa      	ldr	r2, [r7, #12]
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	4610      	mov	r0, r2
 801372e:	4619      	mov	r1, r3
 8013730:	2390      	movs	r3, #144	; 0x90
 8013732:	461a      	mov	r2, r3
 8013734:	f007 f8ed 	bl	801a912 <memcpy>
	return result;
 8013738:	bf00      	nop
}
 801373a:	68f8      	ldr	r0, [r7, #12]
 801373c:	3710      	adds	r7, #16
 801373e:	46bd      	mov	sp, r7
 8013740:	bd80      	pop	{r7, pc}
	...

08013744 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE>:

Matrix<3,3> VelocityEKF::_Invert3x3Matrix(const Matrix<3,3>& matrix) const
{
 8013744:	b5b0      	push	{r4, r5, r7, lr}
 8013746:	b090      	sub	sp, #64	; 0x40
 8013748:	af00      	add	r7, sp, #0
 801374a:	60f8      	str	r0, [r7, #12]
 801374c:	60b9      	str	r1, [r7, #8]
 801374e:	607a      	str	r2, [r7, #4]
	static float a_1_1, a_1_2, a_1_3, a_2_1, a_2_2, a_2_3, a_3_1, a_3_2, a_3_3;
	a_1_1 = matrix(0,0); a_1_2 = matrix(0,1); a_1_3 = matrix(0,2);
 8013750:	2200      	movs	r2, #0
 8013752:	2100      	movs	r1, #0
 8013754:	6878      	ldr	r0, [r7, #4]
 8013756:	f7fa f9b3 	bl	800dac0 <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 801375a:	eef0 7a40 	vmov.f32	s15, s0
 801375e:	4bd4      	ldr	r3, [pc, #848]	; (8013ab0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 8013760:	edc3 7a00 	vstr	s15, [r3]
 8013764:	2201      	movs	r2, #1
 8013766:	2100      	movs	r1, #0
 8013768:	6878      	ldr	r0, [r7, #4]
 801376a:	f7fa f9a9 	bl	800dac0 <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 801376e:	eef0 7a40 	vmov.f32	s15, s0
 8013772:	4bd0      	ldr	r3, [pc, #832]	; (8013ab4 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 8013774:	edc3 7a00 	vstr	s15, [r3]
 8013778:	2202      	movs	r2, #2
 801377a:	2100      	movs	r1, #0
 801377c:	6878      	ldr	r0, [r7, #4]
 801377e:	f7fa f99f 	bl	800dac0 <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 8013782:	eef0 7a40 	vmov.f32	s15, s0
 8013786:	4bcc      	ldr	r3, [pc, #816]	; (8013ab8 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 8013788:	edc3 7a00 	vstr	s15, [r3]
	a_2_1 = matrix(1,0); a_2_2 = matrix(1,1); a_2_3 = matrix(1,2);
 801378c:	2200      	movs	r2, #0
 801378e:	2101      	movs	r1, #1
 8013790:	6878      	ldr	r0, [r7, #4]
 8013792:	f7fa f995 	bl	800dac0 <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 8013796:	eef0 7a40 	vmov.f32	s15, s0
 801379a:	4bc8      	ldr	r3, [pc, #800]	; (8013abc <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 801379c:	edc3 7a00 	vstr	s15, [r3]
 80137a0:	2201      	movs	r2, #1
 80137a2:	2101      	movs	r1, #1
 80137a4:	6878      	ldr	r0, [r7, #4]
 80137a6:	f7fa f98b 	bl	800dac0 <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 80137aa:	eef0 7a40 	vmov.f32	s15, s0
 80137ae:	4bc4      	ldr	r3, [pc, #784]	; (8013ac0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 80137b0:	edc3 7a00 	vstr	s15, [r3]
 80137b4:	2202      	movs	r2, #2
 80137b6:	2101      	movs	r1, #1
 80137b8:	6878      	ldr	r0, [r7, #4]
 80137ba:	f7fa f981 	bl	800dac0 <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 80137be:	eef0 7a40 	vmov.f32	s15, s0
 80137c2:	4bc0      	ldr	r3, [pc, #768]	; (8013ac4 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x380>)
 80137c4:	edc3 7a00 	vstr	s15, [r3]
	a_3_1 = matrix(2,0); a_3_2 = matrix(2,1); a_3_3 = matrix(2,2);
 80137c8:	2200      	movs	r2, #0
 80137ca:	2102      	movs	r1, #2
 80137cc:	6878      	ldr	r0, [r7, #4]
 80137ce:	f7fa f977 	bl	800dac0 <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 80137d2:	eef0 7a40 	vmov.f32	s15, s0
 80137d6:	4bbc      	ldr	r3, [pc, #752]	; (8013ac8 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x384>)
 80137d8:	edc3 7a00 	vstr	s15, [r3]
 80137dc:	2201      	movs	r2, #1
 80137de:	2102      	movs	r1, #2
 80137e0:	6878      	ldr	r0, [r7, #4]
 80137e2:	f7fa f96d 	bl	800dac0 <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 80137e6:	eef0 7a40 	vmov.f32	s15, s0
 80137ea:	4bb8      	ldr	r3, [pc, #736]	; (8013acc <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x388>)
 80137ec:	edc3 7a00 	vstr	s15, [r3]
 80137f0:	2202      	movs	r2, #2
 80137f2:	2102      	movs	r1, #2
 80137f4:	6878      	ldr	r0, [r7, #4]
 80137f6:	f7fa f963 	bl	800dac0 <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 80137fa:	eef0 7a40 	vmov.f32	s15, s0
 80137fe:	4bb4      	ldr	r3, [pc, #720]	; (8013ad0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x38c>)
 8013800:	edc3 7a00 	vstr	s15, [r3]
	float det = (a_1_1*a_2_2*a_3_3 - a_1_1*a_2_3*a_3_2 - a_1_2*a_2_1*a_3_3 + a_1_2*a_2_3*a_3_1 + a_1_3*a_2_1*a_3_2 - a_1_3*a_2_2*a_3_1);
 8013804:	4baa      	ldr	r3, [pc, #680]	; (8013ab0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 8013806:	ed93 7a00 	vldr	s14, [r3]
 801380a:	4bad      	ldr	r3, [pc, #692]	; (8013ac0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 801380c:	edd3 7a00 	vldr	s15, [r3]
 8013810:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013814:	4bae      	ldr	r3, [pc, #696]	; (8013ad0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x38c>)
 8013816:	edd3 7a00 	vldr	s15, [r3]
 801381a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801381e:	4ba4      	ldr	r3, [pc, #656]	; (8013ab0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 8013820:	edd3 6a00 	vldr	s13, [r3]
 8013824:	4ba7      	ldr	r3, [pc, #668]	; (8013ac4 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x380>)
 8013826:	edd3 7a00 	vldr	s15, [r3]
 801382a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801382e:	4ba7      	ldr	r3, [pc, #668]	; (8013acc <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x388>)
 8013830:	edd3 7a00 	vldr	s15, [r3]
 8013834:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013838:	ee37 7a67 	vsub.f32	s14, s14, s15
 801383c:	4b9d      	ldr	r3, [pc, #628]	; (8013ab4 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 801383e:	edd3 6a00 	vldr	s13, [r3]
 8013842:	4b9e      	ldr	r3, [pc, #632]	; (8013abc <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 8013844:	edd3 7a00 	vldr	s15, [r3]
 8013848:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801384c:	4ba0      	ldr	r3, [pc, #640]	; (8013ad0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x38c>)
 801384e:	edd3 7a00 	vldr	s15, [r3]
 8013852:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013856:	ee37 7a67 	vsub.f32	s14, s14, s15
 801385a:	4b96      	ldr	r3, [pc, #600]	; (8013ab4 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 801385c:	edd3 6a00 	vldr	s13, [r3]
 8013860:	4b98      	ldr	r3, [pc, #608]	; (8013ac4 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x380>)
 8013862:	edd3 7a00 	vldr	s15, [r3]
 8013866:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801386a:	4b97      	ldr	r3, [pc, #604]	; (8013ac8 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x384>)
 801386c:	edd3 7a00 	vldr	s15, [r3]
 8013870:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013874:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013878:	4b8f      	ldr	r3, [pc, #572]	; (8013ab8 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 801387a:	edd3 6a00 	vldr	s13, [r3]
 801387e:	4b8f      	ldr	r3, [pc, #572]	; (8013abc <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 8013880:	edd3 7a00 	vldr	s15, [r3]
 8013884:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8013888:	4b90      	ldr	r3, [pc, #576]	; (8013acc <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x388>)
 801388a:	edd3 7a00 	vldr	s15, [r3]
 801388e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013892:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013896:	4b88      	ldr	r3, [pc, #544]	; (8013ab8 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 8013898:	edd3 6a00 	vldr	s13, [r3]
 801389c:	4b88      	ldr	r3, [pc, #544]	; (8013ac0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 801389e:	edd3 7a00 	vldr	s15, [r3]
 80138a2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80138a6:	4b88      	ldr	r3, [pc, #544]	; (8013ac8 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x384>)
 80138a8:	edd3 7a00 	vldr	s15, [r3]
 80138ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80138b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80138b4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float det1 = 1.0f / det;
 80138b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80138bc:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80138c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80138c4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	static Matrix<3, 3> result =
	{{
		(a_2_2*a_3_3 - a_2_3*a_3_2)*det1, -(a_1_2*a_3_3 - a_1_3*a_3_2)*det1,  (a_1_2*a_2_3 - a_1_3*a_2_2)*det1,
		-(a_2_1*a_3_3 - a_2_3*a_3_1)*det1,  (a_1_1*a_3_3 - a_1_3*a_3_1)*det1, -(a_1_1*a_2_3 - a_1_3*a_2_1)*det1,
		(a_2_1*a_3_2 - a_2_2*a_3_1)*det1, -(a_1_1*a_3_2 - a_1_2*a_3_1)*det1,  (a_1_1*a_2_2 - a_1_2*a_2_1)*det1,
	}};
 80138c8:	4b82      	ldr	r3, [pc, #520]	; (8013ad4 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x390>)
 80138ca:	681b      	ldr	r3, [r3, #0]
 80138cc:	f3bf 8f5b 	dmb	ish
 80138d0:	f003 0301 	and.w	r3, r3, #1
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	bf0c      	ite	eq
 80138d8:	2301      	moveq	r3, #1
 80138da:	2300      	movne	r3, #0
 80138dc:	b2db      	uxtb	r3, r3
 80138de:	2b00      	cmp	r3, #0
 80138e0:	f000 810b 	beq.w	8013afa <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x3b6>
 80138e4:	487b      	ldr	r0, [pc, #492]	; (8013ad4 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x390>)
 80138e6:	f005 fdcf 	bl	8019488 <__cxa_guard_acquire>
 80138ea:	4603      	mov	r3, r0
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	bf14      	ite	ne
 80138f0:	2301      	movne	r3, #1
 80138f2:	2300      	moveq	r3, #0
 80138f4:	b2db      	uxtb	r3, r3
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	f000 80ff 	beq.w	8013afa <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x3b6>
		(a_2_2*a_3_3 - a_2_3*a_3_2)*det1, -(a_1_2*a_3_3 - a_1_3*a_3_2)*det1,  (a_1_2*a_2_3 - a_1_3*a_2_2)*det1,
 80138fc:	4b70      	ldr	r3, [pc, #448]	; (8013ac0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 80138fe:	ed93 7a00 	vldr	s14, [r3]
 8013902:	4b73      	ldr	r3, [pc, #460]	; (8013ad0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x38c>)
 8013904:	edd3 7a00 	vldr	s15, [r3]
 8013908:	ee27 7a27 	vmul.f32	s14, s14, s15
 801390c:	4b6d      	ldr	r3, [pc, #436]	; (8013ac4 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x380>)
 801390e:	edd3 6a00 	vldr	s13, [r3]
 8013912:	4b6e      	ldr	r3, [pc, #440]	; (8013acc <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x388>)
 8013914:	edd3 7a00 	vldr	s15, [r3]
 8013918:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801391c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013920:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8013924:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 8013928:	edc7 7a05 	vstr	s15, [r7, #20]
		(a_2_2*a_3_3 - a_2_3*a_3_2)*det1, -(a_1_2*a_3_3 - a_1_3*a_3_2)*det1,  (a_1_2*a_2_3 - a_1_3*a_2_2)*det1,
 801392c:	4b61      	ldr	r3, [pc, #388]	; (8013ab4 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 801392e:	ed93 7a00 	vldr	s14, [r3]
 8013932:	4b67      	ldr	r3, [pc, #412]	; (8013ad0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x38c>)
 8013934:	edd3 7a00 	vldr	s15, [r3]
 8013938:	ee27 7a27 	vmul.f32	s14, s14, s15
 801393c:	4b5e      	ldr	r3, [pc, #376]	; (8013ab8 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 801393e:	edd3 6a00 	vldr	s13, [r3]
 8013942:	4b62      	ldr	r3, [pc, #392]	; (8013acc <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x388>)
 8013944:	edd3 7a00 	vldr	s15, [r3]
 8013948:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801394c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013950:	eeb1 7a67 	vneg.f32	s14, s15
 8013954:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8013958:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 801395c:	edc7 7a06 	vstr	s15, [r7, #24]
		(a_2_2*a_3_3 - a_2_3*a_3_2)*det1, -(a_1_2*a_3_3 - a_1_3*a_3_2)*det1,  (a_1_2*a_2_3 - a_1_3*a_2_2)*det1,
 8013960:	4b54      	ldr	r3, [pc, #336]	; (8013ab4 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 8013962:	ed93 7a00 	vldr	s14, [r3]
 8013966:	4b57      	ldr	r3, [pc, #348]	; (8013ac4 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x380>)
 8013968:	edd3 7a00 	vldr	s15, [r3]
 801396c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013970:	4b51      	ldr	r3, [pc, #324]	; (8013ab8 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 8013972:	edd3 6a00 	vldr	s13, [r3]
 8013976:	4b52      	ldr	r3, [pc, #328]	; (8013ac0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 8013978:	edd3 7a00 	vldr	s15, [r3]
 801397c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013980:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013984:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8013988:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 801398c:	edc7 7a07 	vstr	s15, [r7, #28]
		-(a_2_1*a_3_3 - a_2_3*a_3_1)*det1,  (a_1_1*a_3_3 - a_1_3*a_3_1)*det1, -(a_1_1*a_2_3 - a_1_3*a_2_1)*det1,
 8013990:	4b4a      	ldr	r3, [pc, #296]	; (8013abc <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 8013992:	ed93 7a00 	vldr	s14, [r3]
 8013996:	4b4e      	ldr	r3, [pc, #312]	; (8013ad0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x38c>)
 8013998:	edd3 7a00 	vldr	s15, [r3]
 801399c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80139a0:	4b48      	ldr	r3, [pc, #288]	; (8013ac4 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x380>)
 80139a2:	edd3 6a00 	vldr	s13, [r3]
 80139a6:	4b48      	ldr	r3, [pc, #288]	; (8013ac8 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x384>)
 80139a8:	edd3 7a00 	vldr	s15, [r3]
 80139ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80139b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80139b4:	eeb1 7a67 	vneg.f32	s14, s15
 80139b8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80139bc:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 80139c0:	edc7 7a08 	vstr	s15, [r7, #32]
		-(a_2_1*a_3_3 - a_2_3*a_3_1)*det1,  (a_1_1*a_3_3 - a_1_3*a_3_1)*det1, -(a_1_1*a_2_3 - a_1_3*a_2_1)*det1,
 80139c4:	4b3a      	ldr	r3, [pc, #232]	; (8013ab0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 80139c6:	ed93 7a00 	vldr	s14, [r3]
 80139ca:	4b41      	ldr	r3, [pc, #260]	; (8013ad0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x38c>)
 80139cc:	edd3 7a00 	vldr	s15, [r3]
 80139d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80139d4:	4b38      	ldr	r3, [pc, #224]	; (8013ab8 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 80139d6:	edd3 6a00 	vldr	s13, [r3]
 80139da:	4b3b      	ldr	r3, [pc, #236]	; (8013ac8 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x384>)
 80139dc:	edd3 7a00 	vldr	s15, [r3]
 80139e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80139e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80139e8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80139ec:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 80139f0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		-(a_2_1*a_3_3 - a_2_3*a_3_1)*det1,  (a_1_1*a_3_3 - a_1_3*a_3_1)*det1, -(a_1_1*a_2_3 - a_1_3*a_2_1)*det1,
 80139f4:	4b2e      	ldr	r3, [pc, #184]	; (8013ab0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 80139f6:	ed93 7a00 	vldr	s14, [r3]
 80139fa:	4b32      	ldr	r3, [pc, #200]	; (8013ac4 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x380>)
 80139fc:	edd3 7a00 	vldr	s15, [r3]
 8013a00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013a04:	4b2c      	ldr	r3, [pc, #176]	; (8013ab8 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 8013a06:	edd3 6a00 	vldr	s13, [r3]
 8013a0a:	4b2c      	ldr	r3, [pc, #176]	; (8013abc <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 8013a0c:	edd3 7a00 	vldr	s15, [r3]
 8013a10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013a14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013a18:	eeb1 7a67 	vneg.f32	s14, s15
 8013a1c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8013a20:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 8013a24:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		(a_2_1*a_3_2 - a_2_2*a_3_1)*det1, -(a_1_1*a_3_2 - a_1_2*a_3_1)*det1,  (a_1_1*a_2_2 - a_1_2*a_2_1)*det1,
 8013a28:	4b24      	ldr	r3, [pc, #144]	; (8013abc <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 8013a2a:	ed93 7a00 	vldr	s14, [r3]
 8013a2e:	4b27      	ldr	r3, [pc, #156]	; (8013acc <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x388>)
 8013a30:	edd3 7a00 	vldr	s15, [r3]
 8013a34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013a38:	4b21      	ldr	r3, [pc, #132]	; (8013ac0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 8013a3a:	edd3 6a00 	vldr	s13, [r3]
 8013a3e:	4b22      	ldr	r3, [pc, #136]	; (8013ac8 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x384>)
 8013a40:	edd3 7a00 	vldr	s15, [r3]
 8013a44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013a48:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013a4c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8013a50:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 8013a54:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		(a_2_1*a_3_2 - a_2_2*a_3_1)*det1, -(a_1_1*a_3_2 - a_1_2*a_3_1)*det1,  (a_1_1*a_2_2 - a_1_2*a_2_1)*det1,
 8013a58:	4b15      	ldr	r3, [pc, #84]	; (8013ab0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 8013a5a:	ed93 7a00 	vldr	s14, [r3]
 8013a5e:	4b1b      	ldr	r3, [pc, #108]	; (8013acc <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x388>)
 8013a60:	edd3 7a00 	vldr	s15, [r3]
 8013a64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013a68:	4b12      	ldr	r3, [pc, #72]	; (8013ab4 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 8013a6a:	edd3 6a00 	vldr	s13, [r3]
 8013a6e:	4b16      	ldr	r3, [pc, #88]	; (8013ac8 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x384>)
 8013a70:	edd3 7a00 	vldr	s15, [r3]
 8013a74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013a78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013a7c:	eeb1 7a67 	vneg.f32	s14, s15
 8013a80:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8013a84:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 8013a88:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		(a_2_1*a_3_2 - a_2_2*a_3_1)*det1, -(a_1_1*a_3_2 - a_1_2*a_3_1)*det1,  (a_1_1*a_2_2 - a_1_2*a_2_1)*det1,
 8013a8c:	4b08      	ldr	r3, [pc, #32]	; (8013ab0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 8013a8e:	ed93 7a00 	vldr	s14, [r3]
 8013a92:	4b0b      	ldr	r3, [pc, #44]	; (8013ac0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 8013a94:	edd3 7a00 	vldr	s15, [r3]
 8013a98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013a9c:	4b05      	ldr	r3, [pc, #20]	; (8013ab4 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 8013a9e:	edd3 6a00 	vldr	s13, [r3]
 8013aa2:	4b06      	ldr	r3, [pc, #24]	; (8013abc <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 8013aa4:	edd3 7a00 	vldr	s15, [r3]
 8013aa8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013aac:	e014      	b.n	8013ad8 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x394>
 8013aae:	bf00      	nop
 8013ab0:	24005534 	.word	0x24005534
 8013ab4:	24005538 	.word	0x24005538
 8013ab8:	2400553c 	.word	0x2400553c
 8013abc:	24005540 	.word	0x24005540
 8013ac0:	24005544 	.word	0x24005544
 8013ac4:	24005548 	.word	0x24005548
 8013ac8:	2400554c 	.word	0x2400554c
 8013acc:	24005550 	.word	0x24005550
 8013ad0:	24005554 	.word	0x24005554
 8013ad4:	2400557c 	.word	0x2400557c
 8013ad8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013adc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8013ae0:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 8013ae4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 8013ae8:	f107 0314 	add.w	r3, r7, #20
 8013aec:	4619      	mov	r1, r3
 8013aee:	480a      	ldr	r0, [pc, #40]	; (8013b18 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x3d4>)
 8013af0:	f7fb f8e0 	bl	800ecb4 <_ZN3Mat6MatrixILt3ELt3EEC1ERKSt5arrayIfLj9EE>
 8013af4:	4809      	ldr	r0, [pc, #36]	; (8013b1c <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x3d8>)
 8013af6:	f005 fcd3 	bl	80194a0 <__cxa_guard_release>
	return result;
 8013afa:	68fb      	ldr	r3, [r7, #12]
 8013afc:	4a06      	ldr	r2, [pc, #24]	; (8013b18 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x3d4>)
 8013afe:	461c      	mov	r4, r3
 8013b00:	4615      	mov	r5, r2
 8013b02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013b04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013b06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013b08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013b0a:	682b      	ldr	r3, [r5, #0]
 8013b0c:	6023      	str	r3, [r4, #0]
}
 8013b0e:	68f8      	ldr	r0, [r7, #12]
 8013b10:	3740      	adds	r7, #64	; 0x40
 8013b12:	46bd      	mov	sp, r7
 8013b14:	bdb0      	pop	{r4, r5, r7, pc}
 8013b16:	bf00      	nop
 8013b18:	24005558 	.word	0x24005558
 8013b1c:	2400557c 	.word	0x2400557c

08013b20 <_ZN3Mat8V_VectorILt6EEclEt>:
	inline float& operator()(u_short index) {return _values[index];}
 8013b20:	b580      	push	{r7, lr}
 8013b22:	b082      	sub	sp, #8
 8013b24:	af00      	add	r7, sp, #0
 8013b26:	6078      	str	r0, [r7, #4]
 8013b28:	460b      	mov	r3, r1
 8013b2a:	807b      	strh	r3, [r7, #2]
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	887a      	ldrh	r2, [r7, #2]
 8013b30:	4611      	mov	r1, r2
 8013b32:	4618      	mov	r0, r3
 8013b34:	f7fa fee0 	bl	800e8f8 <_ZNSt5arrayIfLj6EEixEj>
 8013b38:	4603      	mov	r3, r0
 8013b3a:	4618      	mov	r0, r3
 8013b3c:	3708      	adds	r7, #8
 8013b3e:	46bd      	mov	sp, r7
 8013b40:	bd80      	pop	{r7, pc}

08013b42 <_ZZN3Mat6MatrixILt3ELt6EEC4EfENKUlRfE_clES2_>:
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 8013b42:	b480      	push	{r7}
 8013b44:	b083      	sub	sp, #12
 8013b46:	af00      	add	r7, sp, #0
 8013b48:	6078      	str	r0, [r7, #4]
 8013b4a:	6039      	str	r1, [r7, #0]
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	681a      	ldr	r2, [r3, #0]
 8013b50:	683b      	ldr	r3, [r7, #0]
 8013b52:	601a      	str	r2, [r3, #0]
 8013b54:	bf00      	nop
 8013b56:	370c      	adds	r7, #12
 8013b58:	46bd      	mov	sp, r7
 8013b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b5e:	4770      	bx	lr

08013b60 <_ZN3Mat6MatrixILt3ELt6EEC1Ef>:
Matrix<heigth, width>::Matrix(float val)
 8013b60:	b590      	push	{r4, r7, lr}
 8013b62:	b083      	sub	sp, #12
 8013b64:	af00      	add	r7, sp, #0
 8013b66:	6078      	str	r0, [r7, #4]
 8013b68:	ed87 0a00 	vstr	s0, [r7]
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	4618      	mov	r0, r3
 8013b70:	f000 f945 	bl	8013dfe <_ZNSt5arrayIfLj18EE5beginEv>
 8013b74:	4604      	mov	r4, r0
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	4618      	mov	r0, r3
 8013b7a:	f000 f94c 	bl	8013e16 <_ZNSt5arrayIfLj18EE3endEv>
 8013b7e:	4603      	mov	r3, r0
 8013b80:	edd7 7a00 	vldr	s15, [r7]
 8013b84:	eeb0 0a67 	vmov.f32	s0, s15
 8013b88:	4619      	mov	r1, r3
 8013b8a:	4620      	mov	r0, r4
 8013b8c:	f000 f950 	bl	8013e30 <_ZSt8for_eachIPfZN3Mat6MatrixILt3ELt6EEC4EfEUlRfE_ET0_T_S7_S6_>
}
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	4618      	mov	r0, r3
 8013b94:	370c      	adds	r7, #12
 8013b96:	46bd      	mov	sp, r7
 8013b98:	bd90      	pop	{r4, r7, pc}

08013b9a <_ZN3Mat6MatrixILt3ELt6EEclEtt>:
float& Matrix<heigth, width>::operator()(u_short row, u_short col)
 8013b9a:	b580      	push	{r7, lr}
 8013b9c:	b084      	sub	sp, #16
 8013b9e:	af00      	add	r7, sp, #0
 8013ba0:	6078      	str	r0, [r7, #4]
 8013ba2:	460b      	mov	r3, r1
 8013ba4:	807b      	strh	r3, [r7, #2]
 8013ba6:	4613      	mov	r3, r2
 8013ba8:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 8013baa:	887a      	ldrh	r2, [r7, #2]
 8013bac:	4613      	mov	r3, r2
 8013bae:	005b      	lsls	r3, r3, #1
 8013bb0:	4413      	add	r3, r2
 8013bb2:	005b      	lsls	r3, r3, #1
 8013bb4:	461a      	mov	r2, r3
 8013bb6:	883b      	ldrh	r3, [r7, #0]
 8013bb8:	4413      	add	r3, r2
 8013bba:	60fb      	str	r3, [r7, #12]
	return _values[index];
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	68f9      	ldr	r1, [r7, #12]
 8013bc0:	4618      	mov	r0, r3
 8013bc2:	f000 f951 	bl	8013e68 <_ZNSt5arrayIfLj18EEixEj>
 8013bc6:	4603      	mov	r3, r0
}
 8013bc8:	4618      	mov	r0, r3
 8013bca:	3710      	adds	r7, #16
 8013bcc:	46bd      	mov	sp, r7
 8013bce:	bd80      	pop	{r7, pc}

08013bd0 <_ZNK3Mat6MatrixILt3ELt6EEmlILt6EEENS0_ILt3EXT_EEERKNS0_ILt6EXT_EEE>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 8013bd0:	b580      	push	{r7, lr}
 8013bd2:	b084      	sub	sp, #16
 8013bd4:	af00      	add	r7, sp, #0
 8013bd6:	60f8      	str	r0, [r7, #12]
 8013bd8:	60b9      	str	r1, [r7, #8]
 8013bda:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 8013bdc:	68f8      	ldr	r0, [r7, #12]
 8013bde:	f000 f952 	bl	8013e86 <_ZN3Mat6MatrixILt3ELt6EEC1Ev>
	Multiply(other, result);
 8013be2:	68fa      	ldr	r2, [r7, #12]
 8013be4:	6879      	ldr	r1, [r7, #4]
 8013be6:	68b8      	ldr	r0, [r7, #8]
 8013be8:	f000 f958 	bl	8013e9c <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE>
	return result;
 8013bec:	bf00      	nop
}
 8013bee:	68f8      	ldr	r0, [r7, #12]
 8013bf0:	3710      	adds	r7, #16
 8013bf2:	46bd      	mov	sp, r7
 8013bf4:	bd80      	pop	{r7, pc}

08013bf6 <_ZNK3Mat6MatrixILt3ELt6EE10TransposedEv>:
Matrix<width, heigth> Matrix<heigth, width>::Transposed() const
 8013bf6:	b590      	push	{r4, r7, lr}
 8013bf8:	b085      	sub	sp, #20
 8013bfa:	af00      	add	r7, sp, #0
 8013bfc:	6078      	str	r0, [r7, #4]
 8013bfe:	6039      	str	r1, [r7, #0]
	Matrix<width, heigth> result;
 8013c00:	6878      	ldr	r0, [r7, #4]
 8013c02:	f000 f9ff 	bl	8014004 <_ZN3Mat6MatrixILt6ELt3EEC1Ev>
	for(u_short r = 0; r < width; ++r)
 8013c06:	2300      	movs	r3, #0
 8013c08:	81fb      	strh	r3, [r7, #14]
 8013c0a:	e01c      	b.n	8013c46 <_ZNK3Mat6MatrixILt3ELt6EE10TransposedEv+0x50>
		for(u_short c = 0; c < heigth; ++c)
 8013c0c:	2300      	movs	r3, #0
 8013c0e:	81bb      	strh	r3, [r7, #12]
 8013c10:	e013      	b.n	8013c3a <_ZNK3Mat6MatrixILt3ELt6EE10TransposedEv+0x44>
			result(r, c) = operator()(c, r);
 8013c12:	89ba      	ldrh	r2, [r7, #12]
 8013c14:	89fb      	ldrh	r3, [r7, #14]
 8013c16:	4619      	mov	r1, r3
 8013c18:	6878      	ldr	r0, [r7, #4]
 8013c1a:	f000 f8a7 	bl	8013d6c <_ZN3Mat6MatrixILt6ELt3EEclEtt>
 8013c1e:	4604      	mov	r4, r0
 8013c20:	89fa      	ldrh	r2, [r7, #14]
 8013c22:	89bb      	ldrh	r3, [r7, #12]
 8013c24:	4619      	mov	r1, r3
 8013c26:	6838      	ldr	r0, [r7, #0]
 8013c28:	f000 f9f7 	bl	801401a <_ZNK3Mat6MatrixILt3ELt6EEclEtt>
 8013c2c:	eef0 7a40 	vmov.f32	s15, s0
 8013c30:	edc4 7a00 	vstr	s15, [r4]
		for(u_short c = 0; c < heigth; ++c)
 8013c34:	89bb      	ldrh	r3, [r7, #12]
 8013c36:	3301      	adds	r3, #1
 8013c38:	81bb      	strh	r3, [r7, #12]
 8013c3a:	89bb      	ldrh	r3, [r7, #12]
 8013c3c:	2b02      	cmp	r3, #2
 8013c3e:	d9e8      	bls.n	8013c12 <_ZNK3Mat6MatrixILt3ELt6EE10TransposedEv+0x1c>
	for(u_short r = 0; r < width; ++r)
 8013c40:	89fb      	ldrh	r3, [r7, #14]
 8013c42:	3301      	adds	r3, #1
 8013c44:	81fb      	strh	r3, [r7, #14]
 8013c46:	89fb      	ldrh	r3, [r7, #14]
 8013c48:	2b05      	cmp	r3, #5
 8013c4a:	d9df      	bls.n	8013c0c <_ZNK3Mat6MatrixILt3ELt6EE10TransposedEv+0x16>
	return result;
 8013c4c:	bf00      	nop
}
 8013c4e:	6878      	ldr	r0, [r7, #4]
 8013c50:	3714      	adds	r7, #20
 8013c52:	46bd      	mov	sp, r7
 8013c54:	bd90      	pop	{r4, r7, pc}

08013c56 <_ZNK3Mat6MatrixILt3ELt6EEmlILt3EEENS0_ILt3EXT_EEERKNS0_ILt6EXT_EEE>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 8013c56:	b580      	push	{r7, lr}
 8013c58:	b084      	sub	sp, #16
 8013c5a:	af00      	add	r7, sp, #0
 8013c5c:	60f8      	str	r0, [r7, #12]
 8013c5e:	60b9      	str	r1, [r7, #8]
 8013c60:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 8013c62:	68f8      	ldr	r0, [r7, #12]
 8013c64:	f7f9 fbb8 	bl	800d3d8 <_ZN3Mat6MatrixILt3ELt3EEC1Ev>
	Multiply(other, result);
 8013c68:	68fa      	ldr	r2, [r7, #12]
 8013c6a:	6879      	ldr	r1, [r7, #4]
 8013c6c:	68b8      	ldr	r0, [r7, #8]
 8013c6e:	f000 f9f3 	bl	8014058 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE>
	return result;
 8013c72:	bf00      	nop
}
 8013c74:	68f8      	ldr	r0, [r7, #12]
 8013c76:	3710      	adds	r7, #16
 8013c78:	46bd      	mov	sp, r7
 8013c7a:	bd80      	pop	{r7, pc}

08013c7c <_ZNK3Mat6MatrixILt6ELt6EEmlILt3EEENS0_ILt6EXT_EEERKS3_>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 8013c7c:	b580      	push	{r7, lr}
 8013c7e:	b084      	sub	sp, #16
 8013c80:	af00      	add	r7, sp, #0
 8013c82:	60f8      	str	r0, [r7, #12]
 8013c84:	60b9      	str	r1, [r7, #8]
 8013c86:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 8013c88:	68f8      	ldr	r0, [r7, #12]
 8013c8a:	f000 f9bb 	bl	8014004 <_ZN3Mat6MatrixILt6ELt3EEC1Ev>
	Multiply(other, result);
 8013c8e:	68fa      	ldr	r2, [r7, #12]
 8013c90:	6879      	ldr	r1, [r7, #4]
 8013c92:	68b8      	ldr	r0, [r7, #8]
 8013c94:	f000 fa94 	bl	80141c0 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERS3_>
	return result;
 8013c98:	bf00      	nop
}
 8013c9a:	68f8      	ldr	r0, [r7, #12]
 8013c9c:	3710      	adds	r7, #16
 8013c9e:	46bd      	mov	sp, r7
 8013ca0:	bd80      	pop	{r7, pc}

08013ca2 <_ZNK3Mat6MatrixILt6ELt3EEmlILt3EEENS0_ILt6EXT_EEERKNS0_ILt3EXT_EEE>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 8013ca2:	b580      	push	{r7, lr}
 8013ca4:	b084      	sub	sp, #16
 8013ca6:	af00      	add	r7, sp, #0
 8013ca8:	60f8      	str	r0, [r7, #12]
 8013caa:	60b9      	str	r1, [r7, #8]
 8013cac:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 8013cae:	68f8      	ldr	r0, [r7, #12]
 8013cb0:	f000 f9a8 	bl	8014004 <_ZN3Mat6MatrixILt6ELt3EEC1Ev>
	Multiply(other, result);
 8013cb4:	68fa      	ldr	r2, [r7, #12]
 8013cb6:	6879      	ldr	r1, [r7, #4]
 8013cb8:	68b8      	ldr	r0, [r7, #8]
 8013cba:	f000 fb35 	bl	8014328 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE>
	return result;
 8013cbe:	bf00      	nop
}
 8013cc0:	68f8      	ldr	r0, [r7, #12]
 8013cc2:	3710      	adds	r7, #16
 8013cc4:	46bd      	mov	sp, r7
 8013cc6:	bd80      	pop	{r7, pc}

08013cc8 <_ZNK3Mat6MatrixILt6ELt3EEmlILt1EEENS0_ILt6EXT_EEERKNS0_ILt3EXT_EEE>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 8013cc8:	b580      	push	{r7, lr}
 8013cca:	b084      	sub	sp, #16
 8013ccc:	af00      	add	r7, sp, #0
 8013cce:	60f8      	str	r0, [r7, #12]
 8013cd0:	60b9      	str	r1, [r7, #8]
 8013cd2:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 8013cd4:	68f8      	ldr	r0, [r7, #12]
 8013cd6:	f7f9 fcd1 	bl	800d67c <_ZN3Mat6MatrixILt6ELt1EEC1Ev>
	Multiply(other, result);
 8013cda:	68fa      	ldr	r2, [r7, #12]
 8013cdc:	6879      	ldr	r1, [r7, #4]
 8013cde:	68b8      	ldr	r0, [r7, #8]
 8013ce0:	f000 fbd6 	bl	8014490 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE>
	return result;
 8013ce4:	bf00      	nop
}
 8013ce6:	68f8      	ldr	r0, [r7, #12]
 8013ce8:	3710      	adds	r7, #16
 8013cea:	46bd      	mov	sp, r7
 8013cec:	bd80      	pop	{r7, pc}

08013cee <_ZNK3Mat6MatrixILt6ELt3EEmlILt6EEENS0_ILt6EXT_EEERKNS0_ILt3EXT_EEE>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 8013cee:	b580      	push	{r7, lr}
 8013cf0:	b084      	sub	sp, #16
 8013cf2:	af00      	add	r7, sp, #0
 8013cf4:	60f8      	str	r0, [r7, #12]
 8013cf6:	60b9      	str	r1, [r7, #8]
 8013cf8:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 8013cfa:	68f8      	ldr	r0, [r7, #12]
 8013cfc:	f7f9 fb38 	bl	800d370 <_ZN3Mat6MatrixILt6ELt6EEC1Ev>
	Multiply(other, result);
 8013d00:	68fa      	ldr	r2, [r7, #12]
 8013d02:	6879      	ldr	r1, [r7, #4]
 8013d04:	68b8      	ldr	r0, [r7, #8]
 8013d06:	f000 fc77 	bl	80145f8 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt6EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE>
	return result;
 8013d0a:	bf00      	nop
}
 8013d0c:	68f8      	ldr	r0, [r7, #12]
 8013d0e:	3710      	adds	r7, #16
 8013d10:	46bd      	mov	sp, r7
 8013d12:	bd80      	pop	{r7, pc}

08013d14 <_ZZN3Mat6MatrixILt6ELt3EEC4EfENKUlRfE_clES2_>:
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 8013d14:	b480      	push	{r7}
 8013d16:	b083      	sub	sp, #12
 8013d18:	af00      	add	r7, sp, #0
 8013d1a:	6078      	str	r0, [r7, #4]
 8013d1c:	6039      	str	r1, [r7, #0]
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	681a      	ldr	r2, [r3, #0]
 8013d22:	683b      	ldr	r3, [r7, #0]
 8013d24:	601a      	str	r2, [r3, #0]
 8013d26:	bf00      	nop
 8013d28:	370c      	adds	r7, #12
 8013d2a:	46bd      	mov	sp, r7
 8013d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d30:	4770      	bx	lr

08013d32 <_ZN3Mat6MatrixILt6ELt3EEC1Ef>:
Matrix<heigth, width>::Matrix(float val)
 8013d32:	b590      	push	{r4, r7, lr}
 8013d34:	b083      	sub	sp, #12
 8013d36:	af00      	add	r7, sp, #0
 8013d38:	6078      	str	r0, [r7, #4]
 8013d3a:	ed87 0a00 	vstr	s0, [r7]
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	4618      	mov	r0, r3
 8013d42:	f000 f85c 	bl	8013dfe <_ZNSt5arrayIfLj18EE5beginEv>
 8013d46:	4604      	mov	r4, r0
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	4618      	mov	r0, r3
 8013d4c:	f000 f863 	bl	8013e16 <_ZNSt5arrayIfLj18EE3endEv>
 8013d50:	4603      	mov	r3, r0
 8013d52:	edd7 7a00 	vldr	s15, [r7]
 8013d56:	eeb0 0a67 	vmov.f32	s0, s15
 8013d5a:	4619      	mov	r1, r3
 8013d5c:	4620      	mov	r0, r4
 8013d5e:	f000 fcff 	bl	8014760 <_ZSt8for_eachIPfZN3Mat6MatrixILt6ELt3EEC4EfEUlRfE_ET0_T_S7_S6_>
}
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	4618      	mov	r0, r3
 8013d66:	370c      	adds	r7, #12
 8013d68:	46bd      	mov	sp, r7
 8013d6a:	bd90      	pop	{r4, r7, pc}

08013d6c <_ZN3Mat6MatrixILt6ELt3EEclEtt>:
float& Matrix<heigth, width>::operator()(u_short row, u_short col)
 8013d6c:	b580      	push	{r7, lr}
 8013d6e:	b084      	sub	sp, #16
 8013d70:	af00      	add	r7, sp, #0
 8013d72:	6078      	str	r0, [r7, #4]
 8013d74:	460b      	mov	r3, r1
 8013d76:	807b      	strh	r3, [r7, #2]
 8013d78:	4613      	mov	r3, r2
 8013d7a:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 8013d7c:	887a      	ldrh	r2, [r7, #2]
 8013d7e:	4613      	mov	r3, r2
 8013d80:	005b      	lsls	r3, r3, #1
 8013d82:	441a      	add	r2, r3
 8013d84:	883b      	ldrh	r3, [r7, #0]
 8013d86:	4413      	add	r3, r2
 8013d88:	60fb      	str	r3, [r7, #12]
	return _values[index];
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	68f9      	ldr	r1, [r7, #12]
 8013d8e:	4618      	mov	r0, r3
 8013d90:	f000 f86a 	bl	8013e68 <_ZNSt5arrayIfLj18EEixEj>
 8013d94:	4603      	mov	r3, r0
}
 8013d96:	4618      	mov	r0, r3
 8013d98:	3710      	adds	r7, #16
 8013d9a:	46bd      	mov	sp, r7
 8013d9c:	bd80      	pop	{r7, pc}

08013d9e <_ZNK3Mat6MatrixILt6ELt3EE10TransposedEv>:
Matrix<width, heigth> Matrix<heigth, width>::Transposed() const
 8013d9e:	b590      	push	{r4, r7, lr}
 8013da0:	b085      	sub	sp, #20
 8013da2:	af00      	add	r7, sp, #0
 8013da4:	6078      	str	r0, [r7, #4]
 8013da6:	6039      	str	r1, [r7, #0]
	Matrix<width, heigth> result;
 8013da8:	6878      	ldr	r0, [r7, #4]
 8013daa:	f000 f86c 	bl	8013e86 <_ZN3Mat6MatrixILt3ELt6EEC1Ev>
	for(u_short r = 0; r < width; ++r)
 8013dae:	2300      	movs	r3, #0
 8013db0:	81fb      	strh	r3, [r7, #14]
 8013db2:	e01c      	b.n	8013dee <_ZNK3Mat6MatrixILt6ELt3EE10TransposedEv+0x50>
		for(u_short c = 0; c < heigth; ++c)
 8013db4:	2300      	movs	r3, #0
 8013db6:	81bb      	strh	r3, [r7, #12]
 8013db8:	e013      	b.n	8013de2 <_ZNK3Mat6MatrixILt6ELt3EE10TransposedEv+0x44>
			result(r, c) = operator()(c, r);
 8013dba:	89ba      	ldrh	r2, [r7, #12]
 8013dbc:	89fb      	ldrh	r3, [r7, #14]
 8013dbe:	4619      	mov	r1, r3
 8013dc0:	6878      	ldr	r0, [r7, #4]
 8013dc2:	f7ff feea 	bl	8013b9a <_ZN3Mat6MatrixILt3ELt6EEclEtt>
 8013dc6:	4604      	mov	r4, r0
 8013dc8:	89fa      	ldrh	r2, [r7, #14]
 8013dca:	89bb      	ldrh	r3, [r7, #12]
 8013dcc:	4619      	mov	r1, r3
 8013dce:	6838      	ldr	r0, [r7, #0]
 8013dd0:	f000 fce2 	bl	8014798 <_ZNK3Mat6MatrixILt6ELt3EEclEtt>
 8013dd4:	eef0 7a40 	vmov.f32	s15, s0
 8013dd8:	edc4 7a00 	vstr	s15, [r4]
		for(u_short c = 0; c < heigth; ++c)
 8013ddc:	89bb      	ldrh	r3, [r7, #12]
 8013dde:	3301      	adds	r3, #1
 8013de0:	81bb      	strh	r3, [r7, #12]
 8013de2:	89bb      	ldrh	r3, [r7, #12]
 8013de4:	2b05      	cmp	r3, #5
 8013de6:	d9e8      	bls.n	8013dba <_ZNK3Mat6MatrixILt6ELt3EE10TransposedEv+0x1c>
	for(u_short r = 0; r < width; ++r)
 8013de8:	89fb      	ldrh	r3, [r7, #14]
 8013dea:	3301      	adds	r3, #1
 8013dec:	81fb      	strh	r3, [r7, #14]
 8013dee:	89fb      	ldrh	r3, [r7, #14]
 8013df0:	2b02      	cmp	r3, #2
 8013df2:	d9df      	bls.n	8013db4 <_ZNK3Mat6MatrixILt6ELt3EE10TransposedEv+0x16>
	return result;
 8013df4:	bf00      	nop
}
 8013df6:	6878      	ldr	r0, [r7, #4]
 8013df8:	3714      	adds	r7, #20
 8013dfa:	46bd      	mov	sp, r7
 8013dfc:	bd90      	pop	{r4, r7, pc}

08013dfe <_ZNSt5arrayIfLj18EE5beginEv>:
      begin() noexcept
 8013dfe:	b580      	push	{r7, lr}
 8013e00:	b082      	sub	sp, #8
 8013e02:	af00      	add	r7, sp, #0
 8013e04:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8013e06:	6878      	ldr	r0, [r7, #4]
 8013e08:	f000 fce3 	bl	80147d2 <_ZNSt5arrayIfLj18EE4dataEv>
 8013e0c:	4603      	mov	r3, r0
 8013e0e:	4618      	mov	r0, r3
 8013e10:	3708      	adds	r7, #8
 8013e12:	46bd      	mov	sp, r7
 8013e14:	bd80      	pop	{r7, pc}

08013e16 <_ZNSt5arrayIfLj18EE3endEv>:
      end() noexcept
 8013e16:	b580      	push	{r7, lr}
 8013e18:	b082      	sub	sp, #8
 8013e1a:	af00      	add	r7, sp, #0
 8013e1c:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 8013e1e:	6878      	ldr	r0, [r7, #4]
 8013e20:	f000 fcd7 	bl	80147d2 <_ZNSt5arrayIfLj18EE4dataEv>
 8013e24:	4603      	mov	r3, r0
 8013e26:	3348      	adds	r3, #72	; 0x48
 8013e28:	4618      	mov	r0, r3
 8013e2a:	3708      	adds	r7, #8
 8013e2c:	46bd      	mov	sp, r7
 8013e2e:	bd80      	pop	{r7, pc}

08013e30 <_ZSt8for_eachIPfZN3Mat6MatrixILt3ELt6EEC4EfEUlRfE_ET0_T_S7_S6_>:
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
 8013e30:	b580      	push	{r7, lr}
 8013e32:	b084      	sub	sp, #16
 8013e34:	af00      	add	r7, sp, #0
 8013e36:	60f8      	str	r0, [r7, #12]
 8013e38:	60b9      	str	r1, [r7, #8]
 8013e3a:	ed87 0a01 	vstr	s0, [r7, #4]
      for (; __first != __last; ++__first)
 8013e3e:	e007      	b.n	8013e50 <_ZSt8for_eachIPfZN3Mat6MatrixILt3ELt6EEC4EfEUlRfE_ET0_T_S7_S6_+0x20>
	__f(*__first);
 8013e40:	1d3b      	adds	r3, r7, #4
 8013e42:	68f9      	ldr	r1, [r7, #12]
 8013e44:	4618      	mov	r0, r3
 8013e46:	f7ff fe7c 	bl	8013b42 <_ZZN3Mat6MatrixILt3ELt6EEC4EfENKUlRfE_clES2_>
      for (; __first != __last; ++__first)
 8013e4a:	68fb      	ldr	r3, [r7, #12]
 8013e4c:	3304      	adds	r3, #4
 8013e4e:	60fb      	str	r3, [r7, #12]
 8013e50:	68fa      	ldr	r2, [r7, #12]
 8013e52:	68bb      	ldr	r3, [r7, #8]
 8013e54:	429a      	cmp	r2, r3
 8013e56:	d1f3      	bne.n	8013e40 <_ZSt8for_eachIPfZN3Mat6MatrixILt3ELt6EEC4EfEUlRfE_ET0_T_S7_S6_+0x10>
      return __f; // N.B. [alg.foreach] says std::move(f) but it's redundant.
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	ee07 3a90 	vmov	s15, r3
    }
 8013e5e:	eeb0 0a67 	vmov.f32	s0, s15
 8013e62:	3710      	adds	r7, #16
 8013e64:	46bd      	mov	sp, r7
 8013e66:	bd80      	pop	{r7, pc}

08013e68 <_ZNSt5arrayIfLj18EEixEj>:
      operator[](size_type __n) noexcept
 8013e68:	b580      	push	{r7, lr}
 8013e6a:	b082      	sub	sp, #8
 8013e6c:	af00      	add	r7, sp, #0
 8013e6e:	6078      	str	r0, [r7, #4]
 8013e70:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	6839      	ldr	r1, [r7, #0]
 8013e76:	4618      	mov	r0, r3
 8013e78:	f000 fcb8 	bl	80147ec <_ZNSt14__array_traitsIfLj18EE6_S_refERA18_Kfj>
 8013e7c:	4603      	mov	r3, r0
      }
 8013e7e:	4618      	mov	r0, r3
 8013e80:	3708      	adds	r7, #8
 8013e82:	46bd      	mov	sp, r7
 8013e84:	bd80      	pop	{r7, pc}

08013e86 <_ZN3Mat6MatrixILt3ELt6EEC1Ev>:
Matrix<heigth, width>::Matrix() {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 8013e86:	b480      	push	{r7}
 8013e88:	b083      	sub	sp, #12
 8013e8a:	af00      	add	r7, sp, #0
 8013e8c:	6078      	str	r0, [r7, #4]
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	4618      	mov	r0, r3
 8013e92:	370c      	adds	r7, #12
 8013e94:	46bd      	mov	sp, r7
 8013e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e9a:	4770      	bx	lr

08013e9c <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 8013e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e9e:	b0bf      	sub	sp, #252	; 0xfc
 8013ea0:	af00      	add	r7, sp, #0
 8013ea2:	60f8      	str	r0, [r7, #12]
 8013ea4:	60b9      	str	r1, [r7, #8]
 8013ea6:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 8013ea8:	2300      	movs	r3, #0
 8013eaa:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
 8013eae:	e02d      	b.n	8013f0c <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x70>
		for(u_short col = 0; col < width; ++col)
 8013eb0:	2300      	movs	r3, #0
 8013eb2:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
 8013eb6:	e020      	b.n	8013efa <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 8013eb8:	f8b7 20f6 	ldrh.w	r2, [r7, #246]	; 0xf6
 8013ebc:	f107 0314 	add.w	r3, r7, #20
 8013ec0:	4611      	mov	r1, r2
 8013ec2:	4618      	mov	r0, r3
 8013ec4:	f000 fca1 	bl	801480a <_ZNSt5arrayIS_IfLj6EELj3EEixEj>
 8013ec8:	4602      	mov	r2, r0
 8013eca:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 8013ece:	4619      	mov	r1, r3
 8013ed0:	4610      	mov	r0, r2
 8013ed2:	f7fa fd11 	bl	800e8f8 <_ZNSt5arrayIfLj6EEixEj>
 8013ed6:	4604      	mov	r4, r0
 8013ed8:	f8b7 20f4 	ldrh.w	r2, [r7, #244]	; 0xf4
 8013edc:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8013ee0:	4619      	mov	r1, r3
 8013ee2:	68f8      	ldr	r0, [r7, #12]
 8013ee4:	f000 f899 	bl	801401a <_ZNK3Mat6MatrixILt3ELt6EEclEtt>
 8013ee8:	eef0 7a40 	vmov.f32	s15, s0
 8013eec:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 8013ef0:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 8013ef4:	3301      	adds	r3, #1
 8013ef6:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
 8013efa:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 8013efe:	2b05      	cmp	r3, #5
 8013f00:	d9da      	bls.n	8013eb8 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 8013f02:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8013f06:	3301      	adds	r3, #1
 8013f08:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
 8013f0c:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8013f10:	2b02      	cmp	r3, #2
 8013f12:	d9cd      	bls.n	8013eb0 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x14>
	for(u_short col = 0; col < other_width; ++col)
 8013f14:	2300      	movs	r3, #0
 8013f16:	f8a7 30f2 	strh.w	r3, [r7, #242]	; 0xf2
 8013f1a:	e02d      	b.n	8013f78 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0xdc>
		for(u_short row = 0; row < width; ++row)
 8013f1c:	2300      	movs	r3, #0
 8013f1e:	f8a7 30f0 	strh.w	r3, [r7, #240]	; 0xf0
 8013f22:	e020      	b.n	8013f66 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0xca>
			other_columns[col][row] = other(row, col);
 8013f24:	f8b7 20f2 	ldrh.w	r2, [r7, #242]	; 0xf2
 8013f28:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013f2c:	4611      	mov	r1, r2
 8013f2e:	4618      	mov	r0, r3
 8013f30:	f7fa fd26 	bl	800e980 <_ZNSt5arrayIS_IfLj6EELj6EEixEj>
 8013f34:	4602      	mov	r2, r0
 8013f36:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 8013f3a:	4619      	mov	r1, r3
 8013f3c:	4610      	mov	r0, r2
 8013f3e:	f7fa fcdb 	bl	800e8f8 <_ZNSt5arrayIfLj6EEixEj>
 8013f42:	4604      	mov	r4, r0
 8013f44:	f8b7 20f2 	ldrh.w	r2, [r7, #242]	; 0xf2
 8013f48:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 8013f4c:	4619      	mov	r1, r3
 8013f4e:	68b8      	ldr	r0, [r7, #8]
 8013f50:	f7fa fb8a 	bl	800e668 <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 8013f54:	eef0 7a40 	vmov.f32	s15, s0
 8013f58:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 8013f5c:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 8013f60:	3301      	adds	r3, #1
 8013f62:	f8a7 30f0 	strh.w	r3, [r7, #240]	; 0xf0
 8013f66:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 8013f6a:	2b05      	cmp	r3, #5
 8013f6c:	d9da      	bls.n	8013f24 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x88>
	for(u_short col = 0; col < other_width; ++col)
 8013f6e:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	; 0xf2
 8013f72:	3301      	adds	r3, #1
 8013f74:	f8a7 30f2 	strh.w	r3, [r7, #242]	; 0xf2
 8013f78:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	; 0xf2
 8013f7c:	2b05      	cmp	r3, #5
 8013f7e:	d9cd      	bls.n	8013f1c <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x80>
	for(u_short row = 0; row < heigth; ++row)
 8013f80:	2300      	movs	r3, #0
 8013f82:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
 8013f86:	e034      	b.n	8013ff2 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x156>
		for(u_short col = 0; col < other_width; ++col)
 8013f88:	2300      	movs	r3, #0
 8013f8a:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec
 8013f8e:	e027      	b.n	8013fe0 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 8013f90:	f8b7 20ee 	ldrh.w	r2, [r7, #238]	; 0xee
 8013f94:	f107 0314 	add.w	r3, r7, #20
 8013f98:	4611      	mov	r1, r2
 8013f9a:	4618      	mov	r0, r3
 8013f9c:	f000 fc35 	bl	801480a <_ZNSt5arrayIS_IfLj6EELj3EEixEj>
 8013fa0:	4605      	mov	r5, r0
 8013fa2:	f8b7 20ec 	ldrh.w	r2, [r7, #236]	; 0xec
 8013fa6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013faa:	4611      	mov	r1, r2
 8013fac:	4618      	mov	r0, r3
 8013fae:	f7fa fce7 	bl	800e980 <_ZNSt5arrayIS_IfLj6EELj6EEixEj>
 8013fb2:	4606      	mov	r6, r0
 8013fb4:	f8b7 20ec 	ldrh.w	r2, [r7, #236]	; 0xec
 8013fb8:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8013fbc:	4619      	mov	r1, r3
 8013fbe:	6878      	ldr	r0, [r7, #4]
 8013fc0:	f7ff fdeb 	bl	8013b9a <_ZN3Mat6MatrixILt3ELt6EEclEtt>
 8013fc4:	4604      	mov	r4, r0
 8013fc6:	4631      	mov	r1, r6
 8013fc8:	4628      	mov	r0, r5
 8013fca:	f7fa fce8 	bl	800e99e <_ZN3Mat13Multiply_rowsILj6EEEfRKSt5arrayIfXT_EES4_>
 8013fce:	eef0 7a40 	vmov.f32	s15, s0
 8013fd2:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 8013fd6:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 8013fda:	3301      	adds	r3, #1
 8013fdc:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec
 8013fe0:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 8013fe4:	2b05      	cmp	r3, #5
 8013fe6:	d9d3      	bls.n	8013f90 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 8013fe8:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8013fec:	3301      	adds	r3, #1
 8013fee:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
 8013ff2:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8013ff6:	2b02      	cmp	r3, #2
 8013ff8:	d9c6      	bls.n	8013f88 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0xec>
}
 8013ffa:	bf00      	nop
 8013ffc:	bf00      	nop
 8013ffe:	37fc      	adds	r7, #252	; 0xfc
 8014000:	46bd      	mov	sp, r7
 8014002:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014004 <_ZN3Mat6MatrixILt6ELt3EEC1Ev>:
Matrix<heigth, width>::Matrix() {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 8014004:	b480      	push	{r7}
 8014006:	b083      	sub	sp, #12
 8014008:	af00      	add	r7, sp, #0
 801400a:	6078      	str	r0, [r7, #4]
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	4618      	mov	r0, r3
 8014010:	370c      	adds	r7, #12
 8014012:	46bd      	mov	sp, r7
 8014014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014018:	4770      	bx	lr

0801401a <_ZNK3Mat6MatrixILt3ELt6EEclEtt>:
float Matrix<heigth, width>::operator()(u_short row, u_short col) const
 801401a:	b580      	push	{r7, lr}
 801401c:	b084      	sub	sp, #16
 801401e:	af00      	add	r7, sp, #0
 8014020:	6078      	str	r0, [r7, #4]
 8014022:	460b      	mov	r3, r1
 8014024:	807b      	strh	r3, [r7, #2]
 8014026:	4613      	mov	r3, r2
 8014028:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 801402a:	887a      	ldrh	r2, [r7, #2]
 801402c:	4613      	mov	r3, r2
 801402e:	005b      	lsls	r3, r3, #1
 8014030:	4413      	add	r3, r2
 8014032:	005b      	lsls	r3, r3, #1
 8014034:	461a      	mov	r2, r3
 8014036:	883b      	ldrh	r3, [r7, #0]
 8014038:	4413      	add	r3, r2
 801403a:	60fb      	str	r3, [r7, #12]
	return _values[index];
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	68f9      	ldr	r1, [r7, #12]
 8014040:	4618      	mov	r0, r3
 8014042:	f000 fbf1 	bl	8014828 <_ZNKSt5arrayIfLj18EEixEj>
 8014046:	4603      	mov	r3, r0
 8014048:	681b      	ldr	r3, [r3, #0]
 801404a:	ee07 3a90 	vmov	s15, r3
}
 801404e:	eeb0 0a67 	vmov.f32	s0, s15
 8014052:	3710      	adds	r7, #16
 8014054:	46bd      	mov	sp, r7
 8014056:	bd80      	pop	{r7, pc}

08014058 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 8014058:	b5f0      	push	{r4, r5, r6, r7, lr}
 801405a:	b0ad      	sub	sp, #180	; 0xb4
 801405c:	af00      	add	r7, sp, #0
 801405e:	60f8      	str	r0, [r7, #12]
 8014060:	60b9      	str	r1, [r7, #8]
 8014062:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 8014064:	2300      	movs	r3, #0
 8014066:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 801406a:	e02d      	b.n	80140c8 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x70>
		for(u_short col = 0; col < width; ++col)
 801406c:	2300      	movs	r3, #0
 801406e:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 8014072:	e020      	b.n	80140b6 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 8014074:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 8014078:	f107 0314 	add.w	r3, r7, #20
 801407c:	4611      	mov	r1, r2
 801407e:	4618      	mov	r0, r3
 8014080:	f000 fbc3 	bl	801480a <_ZNSt5arrayIS_IfLj6EELj3EEixEj>
 8014084:	4602      	mov	r2, r0
 8014086:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 801408a:	4619      	mov	r1, r3
 801408c:	4610      	mov	r0, r2
 801408e:	f7fa fc33 	bl	800e8f8 <_ZNSt5arrayIfLj6EEixEj>
 8014092:	4604      	mov	r4, r0
 8014094:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8014098:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 801409c:	4619      	mov	r1, r3
 801409e:	68f8      	ldr	r0, [r7, #12]
 80140a0:	f7ff ffbb 	bl	801401a <_ZNK3Mat6MatrixILt3ELt6EEclEtt>
 80140a4:	eef0 7a40 	vmov.f32	s15, s0
 80140a8:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 80140ac:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 80140b0:	3301      	adds	r3, #1
 80140b2:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 80140b6:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 80140ba:	2b05      	cmp	r3, #5
 80140bc:	d9da      	bls.n	8014074 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 80140be:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80140c2:	3301      	adds	r3, #1
 80140c4:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 80140c8:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80140cc:	2b02      	cmp	r3, #2
 80140ce:	d9cd      	bls.n	801406c <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x14>
	for(u_short col = 0; col < other_width; ++col)
 80140d0:	2300      	movs	r3, #0
 80140d2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80140d6:	e02d      	b.n	8014134 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0xdc>
		for(u_short row = 0; row < width; ++row)
 80140d8:	2300      	movs	r3, #0
 80140da:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80140de:	e020      	b.n	8014122 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0xca>
			other_columns[col][row] = other(row, col);
 80140e0:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 80140e4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80140e8:	4611      	mov	r1, r2
 80140ea:	4618      	mov	r0, r3
 80140ec:	f000 fb8d 	bl	801480a <_ZNSt5arrayIS_IfLj6EELj3EEixEj>
 80140f0:	4602      	mov	r2, r0
 80140f2:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80140f6:	4619      	mov	r1, r3
 80140f8:	4610      	mov	r0, r2
 80140fa:	f7fa fbfd 	bl	800e8f8 <_ZNSt5arrayIfLj6EEixEj>
 80140fe:	4604      	mov	r4, r0
 8014100:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 8014104:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8014108:	4619      	mov	r1, r3
 801410a:	68b8      	ldr	r0, [r7, #8]
 801410c:	f000 fb44 	bl	8014798 <_ZNK3Mat6MatrixILt6ELt3EEclEtt>
 8014110:	eef0 7a40 	vmov.f32	s15, s0
 8014114:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 8014118:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 801411c:	3301      	adds	r3, #1
 801411e:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8014122:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8014126:	2b05      	cmp	r3, #5
 8014128:	d9da      	bls.n	80140e0 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x88>
	for(u_short col = 0; col < other_width; ++col)
 801412a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 801412e:	3301      	adds	r3, #1
 8014130:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8014134:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8014138:	2b02      	cmp	r3, #2
 801413a:	d9cd      	bls.n	80140d8 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x80>
	for(u_short row = 0; row < heigth; ++row)
 801413c:	2300      	movs	r3, #0
 801413e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8014142:	e034      	b.n	80141ae <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x156>
		for(u_short col = 0; col < other_width; ++col)
 8014144:	2300      	movs	r3, #0
 8014146:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 801414a:	e027      	b.n	801419c <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 801414c:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8014150:	f107 0314 	add.w	r3, r7, #20
 8014154:	4611      	mov	r1, r2
 8014156:	4618      	mov	r0, r3
 8014158:	f000 fb57 	bl	801480a <_ZNSt5arrayIS_IfLj6EELj3EEixEj>
 801415c:	4605      	mov	r5, r0
 801415e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8014162:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8014166:	4611      	mov	r1, r2
 8014168:	4618      	mov	r0, r3
 801416a:	f000 fb4e 	bl	801480a <_ZNSt5arrayIS_IfLj6EELj3EEixEj>
 801416e:	4606      	mov	r6, r0
 8014170:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8014174:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8014178:	4619      	mov	r1, r3
 801417a:	6878      	ldr	r0, [r7, #4]
 801417c:	f7f9 fac0 	bl	800d700 <_ZN3Mat6MatrixILt3ELt3EEclEtt>
 8014180:	4604      	mov	r4, r0
 8014182:	4631      	mov	r1, r6
 8014184:	4628      	mov	r0, r5
 8014186:	f7fa fc0a 	bl	800e99e <_ZN3Mat13Multiply_rowsILj6EEEfRKSt5arrayIfXT_EES4_>
 801418a:	eef0 7a40 	vmov.f32	s15, s0
 801418e:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 8014192:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8014196:	3301      	adds	r3, #1
 8014198:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 801419c:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80141a0:	2b02      	cmp	r3, #2
 80141a2:	d9d3      	bls.n	801414c <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 80141a4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80141a8:	3301      	adds	r3, #1
 80141aa:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 80141ae:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80141b2:	2b02      	cmp	r3, #2
 80141b4:	d9c6      	bls.n	8014144 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0xec>
}
 80141b6:	bf00      	nop
 80141b8:	bf00      	nop
 80141ba:	37b4      	adds	r7, #180	; 0xb4
 80141bc:	46bd      	mov	sp, r7
 80141be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080141c0 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERS3_>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 80141c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80141c2:	b0bf      	sub	sp, #252	; 0xfc
 80141c4:	af00      	add	r7, sp, #0
 80141c6:	60f8      	str	r0, [r7, #12]
 80141c8:	60b9      	str	r1, [r7, #8]
 80141ca:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 80141cc:	2300      	movs	r3, #0
 80141ce:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
 80141d2:	e02d      	b.n	8014230 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERS3_+0x70>
		for(u_short col = 0; col < width; ++col)
 80141d4:	2300      	movs	r3, #0
 80141d6:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
 80141da:	e020      	b.n	801421e <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERS3_+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 80141dc:	f8b7 20f6 	ldrh.w	r2, [r7, #246]	; 0xf6
 80141e0:	f107 0314 	add.w	r3, r7, #20
 80141e4:	4611      	mov	r1, r2
 80141e6:	4618      	mov	r0, r3
 80141e8:	f7fa fbca 	bl	800e980 <_ZNSt5arrayIS_IfLj6EELj6EEixEj>
 80141ec:	4602      	mov	r2, r0
 80141ee:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 80141f2:	4619      	mov	r1, r3
 80141f4:	4610      	mov	r0, r2
 80141f6:	f7fa fb7f 	bl	800e8f8 <_ZNSt5arrayIfLj6EEixEj>
 80141fa:	4604      	mov	r4, r0
 80141fc:	f8b7 20f4 	ldrh.w	r2, [r7, #244]	; 0xf4
 8014200:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8014204:	4619      	mov	r1, r3
 8014206:	68f8      	ldr	r0, [r7, #12]
 8014208:	f7fa fa2e 	bl	800e668 <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 801420c:	eef0 7a40 	vmov.f32	s15, s0
 8014210:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 8014214:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 8014218:	3301      	adds	r3, #1
 801421a:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
 801421e:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 8014222:	2b05      	cmp	r3, #5
 8014224:	d9da      	bls.n	80141dc <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERS3_+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 8014226:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 801422a:	3301      	adds	r3, #1
 801422c:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
 8014230:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8014234:	2b05      	cmp	r3, #5
 8014236:	d9cd      	bls.n	80141d4 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERS3_+0x14>
	for(u_short col = 0; col < other_width; ++col)
 8014238:	2300      	movs	r3, #0
 801423a:	f8a7 30f2 	strh.w	r3, [r7, #242]	; 0xf2
 801423e:	e02d      	b.n	801429c <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERS3_+0xdc>
		for(u_short row = 0; row < width; ++row)
 8014240:	2300      	movs	r3, #0
 8014242:	f8a7 30f0 	strh.w	r3, [r7, #240]	; 0xf0
 8014246:	e020      	b.n	801428a <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERS3_+0xca>
			other_columns[col][row] = other(row, col);
 8014248:	f8b7 20f2 	ldrh.w	r2, [r7, #242]	; 0xf2
 801424c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8014250:	4611      	mov	r1, r2
 8014252:	4618      	mov	r0, r3
 8014254:	f000 fad9 	bl	801480a <_ZNSt5arrayIS_IfLj6EELj3EEixEj>
 8014258:	4602      	mov	r2, r0
 801425a:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 801425e:	4619      	mov	r1, r3
 8014260:	4610      	mov	r0, r2
 8014262:	f7fa fb49 	bl	800e8f8 <_ZNSt5arrayIfLj6EEixEj>
 8014266:	4604      	mov	r4, r0
 8014268:	f8b7 20f2 	ldrh.w	r2, [r7, #242]	; 0xf2
 801426c:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 8014270:	4619      	mov	r1, r3
 8014272:	68b8      	ldr	r0, [r7, #8]
 8014274:	f000 fa90 	bl	8014798 <_ZNK3Mat6MatrixILt6ELt3EEclEtt>
 8014278:	eef0 7a40 	vmov.f32	s15, s0
 801427c:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 8014280:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 8014284:	3301      	adds	r3, #1
 8014286:	f8a7 30f0 	strh.w	r3, [r7, #240]	; 0xf0
 801428a:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 801428e:	2b05      	cmp	r3, #5
 8014290:	d9da      	bls.n	8014248 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERS3_+0x88>
	for(u_short col = 0; col < other_width; ++col)
 8014292:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	; 0xf2
 8014296:	3301      	adds	r3, #1
 8014298:	f8a7 30f2 	strh.w	r3, [r7, #242]	; 0xf2
 801429c:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	; 0xf2
 80142a0:	2b02      	cmp	r3, #2
 80142a2:	d9cd      	bls.n	8014240 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERS3_+0x80>
	for(u_short row = 0; row < heigth; ++row)
 80142a4:	2300      	movs	r3, #0
 80142a6:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
 80142aa:	e034      	b.n	8014316 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERS3_+0x156>
		for(u_short col = 0; col < other_width; ++col)
 80142ac:	2300      	movs	r3, #0
 80142ae:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec
 80142b2:	e027      	b.n	8014304 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERS3_+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 80142b4:	f8b7 20ee 	ldrh.w	r2, [r7, #238]	; 0xee
 80142b8:	f107 0314 	add.w	r3, r7, #20
 80142bc:	4611      	mov	r1, r2
 80142be:	4618      	mov	r0, r3
 80142c0:	f7fa fb5e 	bl	800e980 <_ZNSt5arrayIS_IfLj6EELj6EEixEj>
 80142c4:	4605      	mov	r5, r0
 80142c6:	f8b7 20ec 	ldrh.w	r2, [r7, #236]	; 0xec
 80142ca:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80142ce:	4611      	mov	r1, r2
 80142d0:	4618      	mov	r0, r3
 80142d2:	f000 fa9a 	bl	801480a <_ZNSt5arrayIS_IfLj6EELj3EEixEj>
 80142d6:	4606      	mov	r6, r0
 80142d8:	f8b7 20ec 	ldrh.w	r2, [r7, #236]	; 0xec
 80142dc:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 80142e0:	4619      	mov	r1, r3
 80142e2:	6878      	ldr	r0, [r7, #4]
 80142e4:	f7ff fd42 	bl	8013d6c <_ZN3Mat6MatrixILt6ELt3EEclEtt>
 80142e8:	4604      	mov	r4, r0
 80142ea:	4631      	mov	r1, r6
 80142ec:	4628      	mov	r0, r5
 80142ee:	f7fa fb56 	bl	800e99e <_ZN3Mat13Multiply_rowsILj6EEEfRKSt5arrayIfXT_EES4_>
 80142f2:	eef0 7a40 	vmov.f32	s15, s0
 80142f6:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 80142fa:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 80142fe:	3301      	adds	r3, #1
 8014300:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec
 8014304:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 8014308:	2b02      	cmp	r3, #2
 801430a:	d9d3      	bls.n	80142b4 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERS3_+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 801430c:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8014310:	3301      	adds	r3, #1
 8014312:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
 8014316:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 801431a:	2b05      	cmp	r3, #5
 801431c:	d9c6      	bls.n	80142ac <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERS3_+0xec>
}
 801431e:	bf00      	nop
 8014320:	bf00      	nop
 8014322:	37fc      	adds	r7, #252	; 0xfc
 8014324:	46bd      	mov	sp, r7
 8014326:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014328 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 8014328:	b5f0      	push	{r4, r5, r6, r7, lr}
 801432a:	b0a3      	sub	sp, #140	; 0x8c
 801432c:	af00      	add	r7, sp, #0
 801432e:	60f8      	str	r0, [r7, #12]
 8014330:	60b9      	str	r1, [r7, #8]
 8014332:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 8014334:	2300      	movs	r3, #0
 8014336:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 801433a:	e02d      	b.n	8014398 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x70>
		for(u_short col = 0; col < width; ++col)
 801433c:	2300      	movs	r3, #0
 801433e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8014342:	e020      	b.n	8014386 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 8014344:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 8014348:	f107 0310 	add.w	r3, r7, #16
 801434c:	4611      	mov	r1, r2
 801434e:	4618      	mov	r0, r3
 8014350:	f000 fa79 	bl	8014846 <_ZNSt5arrayIS_IfLj3EELj6EEixEj>
 8014354:	4602      	mov	r2, r0
 8014356:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 801435a:	4619      	mov	r1, r3
 801435c:	4610      	mov	r0, r2
 801435e:	f7f9 fa1d 	bl	800d79c <_ZNSt5arrayIfLj3EEixEj>
 8014362:	4604      	mov	r4, r0
 8014364:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 8014368:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 801436c:	4619      	mov	r1, r3
 801436e:	68f8      	ldr	r0, [r7, #12]
 8014370:	f000 fa12 	bl	8014798 <_ZNK3Mat6MatrixILt6ELt3EEclEtt>
 8014374:	eef0 7a40 	vmov.f32	s15, s0
 8014378:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 801437c:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8014380:	3301      	adds	r3, #1
 8014382:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8014386:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 801438a:	2b02      	cmp	r3, #2
 801438c:	d9da      	bls.n	8014344 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 801438e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8014392:	3301      	adds	r3, #1
 8014394:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8014398:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 801439c:	2b05      	cmp	r3, #5
 801439e:	d9cd      	bls.n	801433c <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x14>
	for(u_short col = 0; col < other_width; ++col)
 80143a0:	2300      	movs	r3, #0
 80143a2:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 80143a6:	e02d      	b.n	8014404 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0xdc>
		for(u_short row = 0; row < width; ++row)
 80143a8:	2300      	movs	r3, #0
 80143aa:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
 80143ae:	e020      	b.n	80143f2 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0xca>
			other_columns[col][row] = other(row, col);
 80143b0:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 80143b4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80143b8:	4611      	mov	r1, r2
 80143ba:	4618      	mov	r0, r3
 80143bc:	f7f9 fb71 	bl	800daa2 <_ZNSt5arrayIS_IfLj3EELj3EEixEj>
 80143c0:	4602      	mov	r2, r0
 80143c2:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 80143c6:	4619      	mov	r1, r3
 80143c8:	4610      	mov	r0, r2
 80143ca:	f7f9 f9e7 	bl	800d79c <_ZNSt5arrayIfLj3EEixEj>
 80143ce:	4604      	mov	r4, r0
 80143d0:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 80143d4:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 80143d8:	4619      	mov	r1, r3
 80143da:	68b8      	ldr	r0, [r7, #8]
 80143dc:	f7f9 fb70 	bl	800dac0 <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 80143e0:	eef0 7a40 	vmov.f32	s15, s0
 80143e4:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 80143e8:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 80143ec:	3301      	adds	r3, #1
 80143ee:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
 80143f2:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 80143f6:	2b02      	cmp	r3, #2
 80143f8:	d9da      	bls.n	80143b0 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x88>
	for(u_short col = 0; col < other_width; ++col)
 80143fa:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80143fe:	3301      	adds	r3, #1
 8014400:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 8014404:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8014408:	2b02      	cmp	r3, #2
 801440a:	d9cd      	bls.n	80143a8 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x80>
	for(u_short row = 0; row < heigth; ++row)
 801440c:	2300      	movs	r3, #0
 801440e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8014412:	e034      	b.n	801447e <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x156>
		for(u_short col = 0; col < other_width; ++col)
 8014414:	2300      	movs	r3, #0
 8014416:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 801441a:	e027      	b.n	801446c <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 801441c:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8014420:	f107 0310 	add.w	r3, r7, #16
 8014424:	4611      	mov	r1, r2
 8014426:	4618      	mov	r0, r3
 8014428:	f000 fa0d 	bl	8014846 <_ZNSt5arrayIS_IfLj3EELj6EEixEj>
 801442c:	4605      	mov	r5, r0
 801442e:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8014432:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014436:	4611      	mov	r1, r2
 8014438:	4618      	mov	r0, r3
 801443a:	f7f9 fb32 	bl	800daa2 <_ZNSt5arrayIS_IfLj3EELj3EEixEj>
 801443e:	4606      	mov	r6, r0
 8014440:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8014444:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8014448:	4619      	mov	r1, r3
 801444a:	6878      	ldr	r0, [r7, #4]
 801444c:	f7ff fc8e 	bl	8013d6c <_ZN3Mat6MatrixILt6ELt3EEclEtt>
 8014450:	4604      	mov	r4, r0
 8014452:	4631      	mov	r1, r6
 8014454:	4628      	mov	r0, r5
 8014456:	f7f9 fb79 	bl	800db4c <_ZN3Mat13Multiply_rowsILj3EEEfRKSt5arrayIfXT_EES4_>
 801445a:	eef0 7a40 	vmov.f32	s15, s0
 801445e:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 8014462:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8014466:	3301      	adds	r3, #1
 8014468:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 801446c:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8014470:	2b02      	cmp	r3, #2
 8014472:	d9d3      	bls.n	801441c <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 8014474:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8014478:	3301      	adds	r3, #1
 801447a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 801447e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8014482:	2b05      	cmp	r3, #5
 8014484:	d9c6      	bls.n	8014414 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0xec>
}
 8014486:	bf00      	nop
 8014488:	bf00      	nop
 801448a:	378c      	adds	r7, #140	; 0x8c
 801448c:	46bd      	mov	sp, r7
 801448e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014490 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 8014490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014492:	b09d      	sub	sp, #116	; 0x74
 8014494:	af00      	add	r7, sp, #0
 8014496:	60f8      	str	r0, [r7, #12]
 8014498:	60b9      	str	r1, [r7, #8]
 801449a:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 801449c:	2300      	movs	r3, #0
 801449e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 80144a2:	e02d      	b.n	8014500 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x70>
		for(u_short col = 0; col < width; ++col)
 80144a4:	2300      	movs	r3, #0
 80144a6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 80144aa:	e020      	b.n	80144ee <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 80144ac:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 80144b0:	f107 0310 	add.w	r3, r7, #16
 80144b4:	4611      	mov	r1, r2
 80144b6:	4618      	mov	r0, r3
 80144b8:	f000 f9c5 	bl	8014846 <_ZNSt5arrayIS_IfLj3EELj6EEixEj>
 80144bc:	4602      	mov	r2, r0
 80144be:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80144c2:	4619      	mov	r1, r3
 80144c4:	4610      	mov	r0, r2
 80144c6:	f7f9 f969 	bl	800d79c <_ZNSt5arrayIfLj3EEixEj>
 80144ca:	4604      	mov	r4, r0
 80144cc:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80144d0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80144d4:	4619      	mov	r1, r3
 80144d6:	68f8      	ldr	r0, [r7, #12]
 80144d8:	f000 f95e 	bl	8014798 <_ZNK3Mat6MatrixILt6ELt3EEclEtt>
 80144dc:	eef0 7a40 	vmov.f32	s15, s0
 80144e0:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 80144e4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80144e8:	3301      	adds	r3, #1
 80144ea:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 80144ee:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80144f2:	2b02      	cmp	r3, #2
 80144f4:	d9da      	bls.n	80144ac <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 80144f6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80144fa:	3301      	adds	r3, #1
 80144fc:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8014500:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8014504:	2b05      	cmp	r3, #5
 8014506:	d9cd      	bls.n	80144a4 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x14>
	for(u_short col = 0; col < other_width; ++col)
 8014508:	2300      	movs	r3, #0
 801450a:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 801450e:	e02d      	b.n	801456c <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0xdc>
		for(u_short row = 0; row < width; ++row)
 8014510:	2300      	movs	r3, #0
 8014512:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8014516:	e020      	b.n	801455a <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0xca>
			other_columns[col][row] = other(row, col);
 8014518:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 801451c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014520:	4611      	mov	r1, r2
 8014522:	4618      	mov	r0, r3
 8014524:	f7f9 fae9 	bl	800dafa <_ZNSt5arrayIS_IfLj3EELj1EEixEj>
 8014528:	4602      	mov	r2, r0
 801452a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 801452e:	4619      	mov	r1, r3
 8014530:	4610      	mov	r0, r2
 8014532:	f7f9 f933 	bl	800d79c <_ZNSt5arrayIfLj3EEixEj>
 8014536:	4604      	mov	r4, r0
 8014538:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 801453c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8014540:	4619      	mov	r1, r3
 8014542:	68b8      	ldr	r0, [r7, #8]
 8014544:	f7f9 fae8 	bl	800db18 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8014548:	eef0 7a40 	vmov.f32	s15, s0
 801454c:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 8014550:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8014554:	3301      	adds	r3, #1
 8014556:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 801455a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 801455e:	2b02      	cmp	r3, #2
 8014560:	d9da      	bls.n	8014518 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x88>
	for(u_short col = 0; col < other_width; ++col)
 8014562:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8014566:	3301      	adds	r3, #1
 8014568:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 801456c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8014570:	2b00      	cmp	r3, #0
 8014572:	d0cd      	beq.n	8014510 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x80>
	for(u_short row = 0; row < heigth; ++row)
 8014574:	2300      	movs	r3, #0
 8014576:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 801457a:	e034      	b.n	80145e6 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x156>
		for(u_short col = 0; col < other_width; ++col)
 801457c:	2300      	movs	r3, #0
 801457e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8014582:	e027      	b.n	80145d4 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 8014584:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8014588:	f107 0310 	add.w	r3, r7, #16
 801458c:	4611      	mov	r1, r2
 801458e:	4618      	mov	r0, r3
 8014590:	f000 f959 	bl	8014846 <_ZNSt5arrayIS_IfLj3EELj6EEixEj>
 8014594:	4605      	mov	r5, r0
 8014596:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 801459a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801459e:	4611      	mov	r1, r2
 80145a0:	4618      	mov	r0, r3
 80145a2:	f7f9 faaa 	bl	800dafa <_ZNSt5arrayIS_IfLj3EELj1EEixEj>
 80145a6:	4606      	mov	r6, r0
 80145a8:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 80145ac:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80145b0:	4619      	mov	r1, r3
 80145b2:	6878      	ldr	r0, [r7, #4]
 80145b4:	f7fa fa78 	bl	800eaa8 <_ZN3Mat6MatrixILt6ELt1EEclEtt>
 80145b8:	4604      	mov	r4, r0
 80145ba:	4631      	mov	r1, r6
 80145bc:	4628      	mov	r0, r5
 80145be:	f7f9 fac5 	bl	800db4c <_ZN3Mat13Multiply_rowsILj3EEEfRKSt5arrayIfXT_EES4_>
 80145c2:	eef0 7a40 	vmov.f32	s15, s0
 80145c6:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 80145ca:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80145ce:	3301      	adds	r3, #1
 80145d0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80145d4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d0d3      	beq.n	8014584 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 80145dc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80145e0:	3301      	adds	r3, #1
 80145e2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80145e6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80145ea:	2b05      	cmp	r3, #5
 80145ec:	d9c6      	bls.n	801457c <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0xec>
}
 80145ee:	bf00      	nop
 80145f0:	bf00      	nop
 80145f2:	3774      	adds	r7, #116	; 0x74
 80145f4:	46bd      	mov	sp, r7
 80145f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080145f8 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt6EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 80145f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80145fa:	b0ad      	sub	sp, #180	; 0xb4
 80145fc:	af00      	add	r7, sp, #0
 80145fe:	60f8      	str	r0, [r7, #12]
 8014600:	60b9      	str	r1, [r7, #8]
 8014602:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 8014604:	2300      	movs	r3, #0
 8014606:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 801460a:	e02d      	b.n	8014668 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt6EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x70>
		for(u_short col = 0; col < width; ++col)
 801460c:	2300      	movs	r3, #0
 801460e:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 8014612:	e020      	b.n	8014656 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt6EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 8014614:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 8014618:	f107 0314 	add.w	r3, r7, #20
 801461c:	4611      	mov	r1, r2
 801461e:	4618      	mov	r0, r3
 8014620:	f000 f911 	bl	8014846 <_ZNSt5arrayIS_IfLj3EELj6EEixEj>
 8014624:	4602      	mov	r2, r0
 8014626:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 801462a:	4619      	mov	r1, r3
 801462c:	4610      	mov	r0, r2
 801462e:	f7f9 f8b5 	bl	800d79c <_ZNSt5arrayIfLj3EEixEj>
 8014632:	4604      	mov	r4, r0
 8014634:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8014638:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 801463c:	4619      	mov	r1, r3
 801463e:	68f8      	ldr	r0, [r7, #12]
 8014640:	f000 f8aa 	bl	8014798 <_ZNK3Mat6MatrixILt6ELt3EEclEtt>
 8014644:	eef0 7a40 	vmov.f32	s15, s0
 8014648:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 801464c:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8014650:	3301      	adds	r3, #1
 8014652:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 8014656:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 801465a:	2b02      	cmp	r3, #2
 801465c:	d9da      	bls.n	8014614 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt6EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 801465e:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8014662:	3301      	adds	r3, #1
 8014664:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8014668:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 801466c:	2b05      	cmp	r3, #5
 801466e:	d9cd      	bls.n	801460c <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt6EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x14>
	for(u_short col = 0; col < other_width; ++col)
 8014670:	2300      	movs	r3, #0
 8014672:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8014676:	e02d      	b.n	80146d4 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt6EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0xdc>
		for(u_short row = 0; row < width; ++row)
 8014678:	2300      	movs	r3, #0
 801467a:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 801467e:	e020      	b.n	80146c2 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt6EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0xca>
			other_columns[col][row] = other(row, col);
 8014680:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 8014684:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8014688:	4611      	mov	r1, r2
 801468a:	4618      	mov	r0, r3
 801468c:	f000 f8db 	bl	8014846 <_ZNSt5arrayIS_IfLj3EELj6EEixEj>
 8014690:	4602      	mov	r2, r0
 8014692:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8014696:	4619      	mov	r1, r3
 8014698:	4610      	mov	r0, r2
 801469a:	f7f9 f87f 	bl	800d79c <_ZNSt5arrayIfLj3EEixEj>
 801469e:	4604      	mov	r4, r0
 80146a0:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 80146a4:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80146a8:	4619      	mov	r1, r3
 80146aa:	68b8      	ldr	r0, [r7, #8]
 80146ac:	f7ff fcb5 	bl	801401a <_ZNK3Mat6MatrixILt3ELt6EEclEtt>
 80146b0:	eef0 7a40 	vmov.f32	s15, s0
 80146b4:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 80146b8:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80146bc:	3301      	adds	r3, #1
 80146be:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80146c2:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80146c6:	2b02      	cmp	r3, #2
 80146c8:	d9da      	bls.n	8014680 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt6EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x88>
	for(u_short col = 0; col < other_width; ++col)
 80146ca:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80146ce:	3301      	adds	r3, #1
 80146d0:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80146d4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80146d8:	2b05      	cmp	r3, #5
 80146da:	d9cd      	bls.n	8014678 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt6EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x80>
	for(u_short row = 0; row < heigth; ++row)
 80146dc:	2300      	movs	r3, #0
 80146de:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 80146e2:	e034      	b.n	801474e <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt6EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x156>
		for(u_short col = 0; col < other_width; ++col)
 80146e4:	2300      	movs	r3, #0
 80146e6:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 80146ea:	e027      	b.n	801473c <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt6EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 80146ec:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 80146f0:	f107 0314 	add.w	r3, r7, #20
 80146f4:	4611      	mov	r1, r2
 80146f6:	4618      	mov	r0, r3
 80146f8:	f000 f8a5 	bl	8014846 <_ZNSt5arrayIS_IfLj3EELj6EEixEj>
 80146fc:	4605      	mov	r5, r0
 80146fe:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8014702:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8014706:	4611      	mov	r1, r2
 8014708:	4618      	mov	r0, r3
 801470a:	f000 f89c 	bl	8014846 <_ZNSt5arrayIS_IfLj3EELj6EEixEj>
 801470e:	4606      	mov	r6, r0
 8014710:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8014714:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8014718:	4619      	mov	r1, r3
 801471a:	6878      	ldr	r0, [r7, #4]
 801471c:	f7f9 ff89 	bl	800e632 <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 8014720:	4604      	mov	r4, r0
 8014722:	4631      	mov	r1, r6
 8014724:	4628      	mov	r0, r5
 8014726:	f7f9 fa11 	bl	800db4c <_ZN3Mat13Multiply_rowsILj3EEEfRKSt5arrayIfXT_EES4_>
 801472a:	eef0 7a40 	vmov.f32	s15, s0
 801472e:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 8014732:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8014736:	3301      	adds	r3, #1
 8014738:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 801473c:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8014740:	2b05      	cmp	r3, #5
 8014742:	d9d3      	bls.n	80146ec <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt6EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 8014744:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8014748:	3301      	adds	r3, #1
 801474a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 801474e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8014752:	2b05      	cmp	r3, #5
 8014754:	d9c6      	bls.n	80146e4 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt6EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0xec>
}
 8014756:	bf00      	nop
 8014758:	bf00      	nop
 801475a:	37b4      	adds	r7, #180	; 0xb4
 801475c:	46bd      	mov	sp, r7
 801475e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014760 <_ZSt8for_eachIPfZN3Mat6MatrixILt6ELt3EEC4EfEUlRfE_ET0_T_S7_S6_>:
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
 8014760:	b580      	push	{r7, lr}
 8014762:	b084      	sub	sp, #16
 8014764:	af00      	add	r7, sp, #0
 8014766:	60f8      	str	r0, [r7, #12]
 8014768:	60b9      	str	r1, [r7, #8]
 801476a:	ed87 0a01 	vstr	s0, [r7, #4]
      for (; __first != __last; ++__first)
 801476e:	e007      	b.n	8014780 <_ZSt8for_eachIPfZN3Mat6MatrixILt6ELt3EEC4EfEUlRfE_ET0_T_S7_S6_+0x20>
	__f(*__first);
 8014770:	1d3b      	adds	r3, r7, #4
 8014772:	68f9      	ldr	r1, [r7, #12]
 8014774:	4618      	mov	r0, r3
 8014776:	f7ff facd 	bl	8013d14 <_ZZN3Mat6MatrixILt6ELt3EEC4EfENKUlRfE_clES2_>
      for (; __first != __last; ++__first)
 801477a:	68fb      	ldr	r3, [r7, #12]
 801477c:	3304      	adds	r3, #4
 801477e:	60fb      	str	r3, [r7, #12]
 8014780:	68fa      	ldr	r2, [r7, #12]
 8014782:	68bb      	ldr	r3, [r7, #8]
 8014784:	429a      	cmp	r2, r3
 8014786:	d1f3      	bne.n	8014770 <_ZSt8for_eachIPfZN3Mat6MatrixILt6ELt3EEC4EfEUlRfE_ET0_T_S7_S6_+0x10>
      return __f; // N.B. [alg.foreach] says std::move(f) but it's redundant.
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	ee07 3a90 	vmov	s15, r3
    }
 801478e:	eeb0 0a67 	vmov.f32	s0, s15
 8014792:	3710      	adds	r7, #16
 8014794:	46bd      	mov	sp, r7
 8014796:	bd80      	pop	{r7, pc}

08014798 <_ZNK3Mat6MatrixILt6ELt3EEclEtt>:
float Matrix<heigth, width>::operator()(u_short row, u_short col) const
 8014798:	b580      	push	{r7, lr}
 801479a:	b084      	sub	sp, #16
 801479c:	af00      	add	r7, sp, #0
 801479e:	6078      	str	r0, [r7, #4]
 80147a0:	460b      	mov	r3, r1
 80147a2:	807b      	strh	r3, [r7, #2]
 80147a4:	4613      	mov	r3, r2
 80147a6:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 80147a8:	887a      	ldrh	r2, [r7, #2]
 80147aa:	4613      	mov	r3, r2
 80147ac:	005b      	lsls	r3, r3, #1
 80147ae:	441a      	add	r2, r3
 80147b0:	883b      	ldrh	r3, [r7, #0]
 80147b2:	4413      	add	r3, r2
 80147b4:	60fb      	str	r3, [r7, #12]
	return _values[index];
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	68f9      	ldr	r1, [r7, #12]
 80147ba:	4618      	mov	r0, r3
 80147bc:	f000 f834 	bl	8014828 <_ZNKSt5arrayIfLj18EEixEj>
 80147c0:	4603      	mov	r3, r0
 80147c2:	681b      	ldr	r3, [r3, #0]
 80147c4:	ee07 3a90 	vmov	s15, r3
}
 80147c8:	eeb0 0a67 	vmov.f32	s0, s15
 80147cc:	3710      	adds	r7, #16
 80147ce:	46bd      	mov	sp, r7
 80147d0:	bd80      	pop	{r7, pc}

080147d2 <_ZNSt5arrayIfLj18EE4dataEv>:
      data() noexcept
 80147d2:	b580      	push	{r7, lr}
 80147d4:	b082      	sub	sp, #8
 80147d6:	af00      	add	r7, sp, #0
 80147d8:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	4618      	mov	r0, r3
 80147de:	f000 f841 	bl	8014864 <_ZNSt14__array_traitsIfLj18EE6_S_ptrERA18_Kf>
 80147e2:	4603      	mov	r3, r0
 80147e4:	4618      	mov	r0, r3
 80147e6:	3708      	adds	r7, #8
 80147e8:	46bd      	mov	sp, r7
 80147ea:	bd80      	pop	{r7, pc}

080147ec <_ZNSt14__array_traitsIfLj18EE6_S_refERA18_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 80147ec:	b480      	push	{r7}
 80147ee:	b083      	sub	sp, #12
 80147f0:	af00      	add	r7, sp, #0
 80147f2:	6078      	str	r0, [r7, #4]
 80147f4:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 80147f6:	683b      	ldr	r3, [r7, #0]
 80147f8:	009b      	lsls	r3, r3, #2
 80147fa:	687a      	ldr	r2, [r7, #4]
 80147fc:	4413      	add	r3, r2
 80147fe:	4618      	mov	r0, r3
 8014800:	370c      	adds	r7, #12
 8014802:	46bd      	mov	sp, r7
 8014804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014808:	4770      	bx	lr

0801480a <_ZNSt5arrayIS_IfLj6EELj3EEixEj>:
      operator[](size_type __n) noexcept
 801480a:	b580      	push	{r7, lr}
 801480c:	b082      	sub	sp, #8
 801480e:	af00      	add	r7, sp, #0
 8014810:	6078      	str	r0, [r7, #4]
 8014812:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	6839      	ldr	r1, [r7, #0]
 8014818:	4618      	mov	r0, r3
 801481a:	f000 f82e 	bl	801487a <_ZNSt14__array_traitsISt5arrayIfLj6EELj3EE6_S_refERA3_KS1_j>
 801481e:	4603      	mov	r3, r0
      }
 8014820:	4618      	mov	r0, r3
 8014822:	3708      	adds	r7, #8
 8014824:	46bd      	mov	sp, r7
 8014826:	bd80      	pop	{r7, pc}

08014828 <_ZNKSt5arrayIfLj18EEixEj>:
      operator[](size_type __n) const noexcept
 8014828:	b580      	push	{r7, lr}
 801482a:	b082      	sub	sp, #8
 801482c:	af00      	add	r7, sp, #0
 801482e:	6078      	str	r0, [r7, #4]
 8014830:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	6839      	ldr	r1, [r7, #0]
 8014836:	4618      	mov	r0, r3
 8014838:	f7ff ffd8 	bl	80147ec <_ZNSt14__array_traitsIfLj18EE6_S_refERA18_Kfj>
 801483c:	4603      	mov	r3, r0
      }
 801483e:	4618      	mov	r0, r3
 8014840:	3708      	adds	r7, #8
 8014842:	46bd      	mov	sp, r7
 8014844:	bd80      	pop	{r7, pc}

08014846 <_ZNSt5arrayIS_IfLj3EELj6EEixEj>:
      operator[](size_type __n) noexcept
 8014846:	b580      	push	{r7, lr}
 8014848:	b082      	sub	sp, #8
 801484a:	af00      	add	r7, sp, #0
 801484c:	6078      	str	r0, [r7, #4]
 801484e:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	6839      	ldr	r1, [r7, #0]
 8014854:	4618      	mov	r0, r3
 8014856:	f000 f822 	bl	801489e <_ZNSt14__array_traitsISt5arrayIfLj3EELj6EE6_S_refERA6_KS1_j>
 801485a:	4603      	mov	r3, r0
      }
 801485c:	4618      	mov	r0, r3
 801485e:	3708      	adds	r7, #8
 8014860:	46bd      	mov	sp, r7
 8014862:	bd80      	pop	{r7, pc}

08014864 <_ZNSt14__array_traitsIfLj18EE6_S_ptrERA18_Kf>:
      _S_ptr(const _Type& __t) noexcept
 8014864:	b480      	push	{r7}
 8014866:	b083      	sub	sp, #12
 8014868:	af00      	add	r7, sp, #0
 801486a:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	4618      	mov	r0, r3
 8014870:	370c      	adds	r7, #12
 8014872:	46bd      	mov	sp, r7
 8014874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014878:	4770      	bx	lr

0801487a <_ZNSt14__array_traitsISt5arrayIfLj6EELj3EE6_S_refERA3_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 801487a:	b480      	push	{r7}
 801487c:	b083      	sub	sp, #12
 801487e:	af00      	add	r7, sp, #0
 8014880:	6078      	str	r0, [r7, #4]
 8014882:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8014884:	683a      	ldr	r2, [r7, #0]
 8014886:	4613      	mov	r3, r2
 8014888:	005b      	lsls	r3, r3, #1
 801488a:	4413      	add	r3, r2
 801488c:	00db      	lsls	r3, r3, #3
 801488e:	687a      	ldr	r2, [r7, #4]
 8014890:	4413      	add	r3, r2
 8014892:	4618      	mov	r0, r3
 8014894:	370c      	adds	r7, #12
 8014896:	46bd      	mov	sp, r7
 8014898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801489c:	4770      	bx	lr

0801489e <_ZNSt14__array_traitsISt5arrayIfLj3EELj6EE6_S_refERA6_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 801489e:	b480      	push	{r7}
 80148a0:	b083      	sub	sp, #12
 80148a2:	af00      	add	r7, sp, #0
 80148a4:	6078      	str	r0, [r7, #4]
 80148a6:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 80148a8:	683a      	ldr	r2, [r7, #0]
 80148aa:	4613      	mov	r3, r2
 80148ac:	005b      	lsls	r3, r3, #1
 80148ae:	4413      	add	r3, r2
 80148b0:	009b      	lsls	r3, r3, #2
 80148b2:	687a      	ldr	r2, [r7, #4]
 80148b4:	4413      	add	r3, r2
 80148b6:	4618      	mov	r0, r3
 80148b8:	370c      	adds	r7, #12
 80148ba:	46bd      	mov	sp, r7
 80148bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148c0:	4770      	bx	lr
	...

080148c4 <_ZN10Algorithms15FusionAlgorithm9InitStateERKN3Mat6MatrixILt3ELt1EEES5_f>:
//		const OrientationEKF::StateVec& oriState, const OrientationEKF::StateCovarianceMatrix& oriCov,
//		const VelocityEKF::StateVec& velState, const VelocityEKF::StateCovarianceMatrix& velCov,
//		float time) : _orientationEKF{oriState, oriCov, time}, _velocityEKF{velState, velCov, time}{}

void FusionAlgorithm::InitState(const Matrix<3, 1>& acc, const Matrix<3, 1>& mag, float time)
{
 80148c4:	b580      	push	{r7, lr}
 80148c6:	b084      	sub	sp, #16
 80148c8:	af00      	add	r7, sp, #0
 80148ca:	60f8      	str	r0, [r7, #12]
 80148cc:	60b9      	str	r1, [r7, #8]
 80148ce:	607a      	str	r2, [r7, #4]
 80148d0:	ed87 0a00 	vstr	s0, [r7]
	LOG("INIT");
 80148d4:	f7ed fac6 	bl	8001e64 <HAL_GetTick>
 80148d8:	4601      	mov	r1, r0
 80148da:	2317      	movs	r3, #23
 80148dc:	4a0b      	ldr	r2, [pc, #44]	; (801490c <_ZN10Algorithms15FusionAlgorithm9InitStateERKN3Mat6MatrixILt3ELt1EEES5_f+0x48>)
 80148de:	480c      	ldr	r0, [pc, #48]	; (8014910 <_ZN10Algorithms15FusionAlgorithm9InitStateERKN3Mat6MatrixILt3ELt1EEES5_f+0x4c>)
 80148e0:	f005 ff42 	bl	801a768 <iprintf>
 80148e4:	480b      	ldr	r0, [pc, #44]	; (8014914 <_ZN10Algorithms15FusionAlgorithm9InitStateERKN3Mat6MatrixILt3ELt1EEES5_f+0x50>)
 80148e6:	f005 ff3f 	bl	801a768 <iprintf>
 80148ea:	480b      	ldr	r0, [pc, #44]	; (8014918 <_ZN10Algorithms15FusionAlgorithm9InitStateERKN3Mat6MatrixILt3ELt1EEES5_f+0x54>)
 80148ec:	f005 ff3c 	bl	801a768 <iprintf>
//	_orientationEKF.Initialise(acc, mag, time);
//	const auto& _state = _orientationEKF.GetState();
//	LOG("State: %f, %f, %f, %f", _state(0), _state(1), _state(2), _state(3));
	_AHRSKalman.InitialiseKalman(acc, mag, time);
 80148f0:	68fb      	ldr	r3, [r7, #12]
 80148f2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80148f6:	ed97 0a00 	vldr	s0, [r7]
 80148fa:	687a      	ldr	r2, [r7, #4]
 80148fc:	68b9      	ldr	r1, [r7, #8]
 80148fe:	4618      	mov	r0, r3
 8014900:	f7fa fd63 	bl	800f3ca <_ZN10Algorithms10AHRSKalman16InitialiseKalmanERKN3Mat6MatrixILt3ELt1EEES5_f>
}
 8014904:	bf00      	nop
 8014906:	3710      	adds	r7, #16
 8014908:	46bd      	mov	sp, r7
 801490a:	bd80      	pop	{r7, pc}
 801490c:	0801c8a0 	.word	0x0801c8a0
 8014910:	0801c8ac 	.word	0x0801c8ac
 8014914:	0801c8bc 	.word	0x0801c8bc
 8014918:	0801c8c4 	.word	0x0801c8c4

0801491c <_ZN10Algorithms15FusionAlgorithm9OnIMUDataERKN3Mat6MatrixILt3ELt1EEES5_S5_f>:

//void FusionAlgorithm::OnIMUData(const AGMSensorData& imuData)
void FusionAlgorithm::OnIMUData(const Matrix<3, 1>& acc, const Matrix<3, 1>& gyro, const Matrix<3, 1>& mag, float time)
{
 801491c:	b590      	push	{r4, r7, lr}
 801491e:	ed2d 8b02 	vpush	{d8}
 8014922:	b09b      	sub	sp, #108	; 0x6c
 8014924:	af00      	add	r7, sp, #0
 8014926:	6178      	str	r0, [r7, #20]
 8014928:	6139      	str	r1, [r7, #16]
 801492a:	60fa      	str	r2, [r7, #12]
 801492c:	60bb      	str	r3, [r7, #8]
 801492e:	ed87 0a01 	vstr	s0, [r7, #4]
//	_orientationEKF.Update(_orientationMeassurementVec, _orientationMeassurementCov, imuData.SensorTime);
	//const OrientationEKF::StateVec& q = _orientationEKF.GetState();
	//LOG("EKF: \t%f, \t%f, \t%f", GetRoll(), GetPitch(), GetYaw());
	//LOG("ORIENTATION: \t%f, \t%f, \t%f, \t%f", q(0), q(1), q(2), q(3));
//AHRS
	_AHRSKalman.UpdateState(gyro, time);
 8014932:	697b      	ldr	r3, [r7, #20]
 8014934:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8014938:	ed97 0a01 	vldr	s0, [r7, #4]
 801493c:	68f9      	ldr	r1, [r7, #12]
 801493e:	4618      	mov	r0, r3
 8014940:	f7fa ff16 	bl	800f770 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf>
	_AHRSKalman.CorrectStateAcc(acc, time);
 8014944:	697b      	ldr	r3, [r7, #20]
 8014946:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801494a:	ed97 0a01 	vldr	s0, [r7, #4]
 801494e:	6939      	ldr	r1, [r7, #16]
 8014950:	4618      	mov	r0, r3
 8014952:	f7fc f90b 	bl	8010b6c <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf>
	_AHRSKalman.CorrectStateMag(mag, time);
 8014956:	697b      	ldr	r3, [r7, #20]
 8014958:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801495c:	ed97 0a01 	vldr	s0, [r7, #4]
 8014960:	68b9      	ldr	r1, [r7, #8]
 8014962:	4618      	mov	r0, r3
 8014964:	f7fb fab6 	bl	800fed4 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf>
	const auto& Q = _AHRSKalman.GetState();
 8014968:	697b      	ldr	r3, [r7, #20]
 801496a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801496e:	4618      	mov	r0, r3
 8014970:	f7fa fd14 	bl	800f39c <_ZNK10Algorithms10AHRSKalman8GetStateEv>
 8014974:	6678      	str	r0, [r7, #100]	; 0x64
	Mat::Quaternion newAcceleration = {0, acc(0,0), acc(1,0), acc(2,0)};
 8014976:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801497a:	2200      	movs	r2, #0
 801497c:	601a      	str	r2, [r3, #0]
 801497e:	605a      	str	r2, [r3, #4]
 8014980:	609a      	str	r2, [r3, #8]
 8014982:	60da      	str	r2, [r3, #12]
 8014984:	2200      	movs	r2, #0
 8014986:	2100      	movs	r1, #0
 8014988:	6938      	ldr	r0, [r7, #16]
 801498a:	f7f9 f8c5 	bl	800db18 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 801498e:	eef0 7a40 	vmov.f32	s15, s0
 8014992:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8014996:	2200      	movs	r2, #0
 8014998:	2101      	movs	r1, #1
 801499a:	6938      	ldr	r0, [r7, #16]
 801499c:	f7f9 f8bc 	bl	800db18 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 80149a0:	eef0 7a40 	vmov.f32	s15, s0
 80149a4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 80149a8:	2200      	movs	r2, #0
 80149aa:	2102      	movs	r1, #2
 80149ac:	6938      	ldr	r0, [r7, #16]
 80149ae:	f7f9 f8b3 	bl	800db18 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 80149b2:	eef0 7a40 	vmov.f32	s15, s0
 80149b6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	newAcceleration = (Q * newAcceleration * Q.Conjugate());
 80149ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80149be:	4619      	mov	r1, r3
 80149c0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80149c2:	f001 f9c9 	bl	8015d58 <_ZNK3Mat10QuaternionmlERKS0_>
 80149c6:	eeb0 6a40 	vmov.f32	s12, s0
 80149ca:	eef0 6a60 	vmov.f32	s13, s1
 80149ce:	eeb0 7a41 	vmov.f32	s14, s2
 80149d2:	eef0 7a61 	vmov.f32	s15, s3
 80149d6:	ed87 6a0d 	vstr	s12, [r7, #52]	; 0x34
 80149da:	edc7 6a0e 	vstr	s13, [r7, #56]	; 0x38
 80149de:	ed87 7a0f 	vstr	s14, [r7, #60]	; 0x3c
 80149e2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 80149e6:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80149e8:	f001 fab2 	bl	8015f50 <_ZNK3Mat10Quaternion9ConjugateEv>
 80149ec:	eeb0 6a40 	vmov.f32	s12, s0
 80149f0:	eef0 6a60 	vmov.f32	s13, s1
 80149f4:	eeb0 7a41 	vmov.f32	s14, s2
 80149f8:	eef0 7a61 	vmov.f32	s15, s3
 80149fc:	ed87 6a11 	vstr	s12, [r7, #68]	; 0x44
 8014a00:	edc7 6a12 	vstr	s13, [r7, #72]	; 0x48
 8014a04:	ed87 7a13 	vstr	s14, [r7, #76]	; 0x4c
 8014a08:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 8014a0c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8014a10:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8014a14:	4611      	mov	r1, r2
 8014a16:	4618      	mov	r0, r3
 8014a18:	f001 f99e 	bl	8015d58 <_ZNK3Mat10QuaternionmlERKS0_>
 8014a1c:	eeb0 6a40 	vmov.f32	s12, s0
 8014a20:	eef0 6a60 	vmov.f32	s13, s1
 8014a24:	eeb0 7a41 	vmov.f32	s14, s2
 8014a28:	eef0 7a61 	vmov.f32	s15, s3
 8014a2c:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8014a30:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 8014a34:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 8014a38:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	V_Vector<3> accENU{{newAcceleration.x, newAcceleration.y, newAcceleration.z}};
 8014a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a3e:	657b      	str	r3, [r7, #84]	; 0x54
 8014a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a42:	65bb      	str	r3, [r7, #88]	; 0x58
 8014a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014a48:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8014a4c:	f107 0318 	add.w	r3, r7, #24
 8014a50:	4611      	mov	r1, r2
 8014a52:	4618      	mov	r0, r3
 8014a54:	f7fd fe56 	bl	8012704 <_ZN3Mat8V_VectorILt3EEC1ERKSt5arrayIfLj3EE>
	accENU(2) -= Gravity;
 8014a58:	f107 0318 	add.w	r3, r7, #24
 8014a5c:	2102      	movs	r1, #2
 8014a5e:	4618      	mov	r0, r3
 8014a60:	f000 ffb6 	bl	80159d0 <_ZN3Mat8V_VectorILt3EEclEt>
 8014a64:	4603      	mov	r3, r0
 8014a66:	edd3 7a00 	vldr	s15, [r3]
 8014a6a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8014adc <_ZN10Algorithms15FusionAlgorithm9OnIMUDataERKN3Mat6MatrixILt3ELt1EEES5_S5_f+0x1c0>
 8014a6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014a72:	edc3 7a00 	vstr	s15, [r3]
	_velocityEKF.Predict(static_cast<const V_Vector<3>&>(accENU), _GetGlobalAccCov(acc(0,0), acc(1,0), acc(2,0)), time);
 8014a76:	697c      	ldr	r4, [r7, #20]
 8014a78:	2200      	movs	r2, #0
 8014a7a:	2100      	movs	r1, #0
 8014a7c:	6938      	ldr	r0, [r7, #16]
 8014a7e:	f7f9 f84b 	bl	800db18 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8014a82:	eeb0 8a40 	vmov.f32	s16, s0
 8014a86:	2200      	movs	r2, #0
 8014a88:	2101      	movs	r1, #1
 8014a8a:	6938      	ldr	r0, [r7, #16]
 8014a8c:	f7f9 f844 	bl	800db18 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8014a90:	eef0 8a40 	vmov.f32	s17, s0
 8014a94:	2200      	movs	r2, #0
 8014a96:	2102      	movs	r1, #2
 8014a98:	6938      	ldr	r0, [r7, #16]
 8014a9a:	f7f9 f83d 	bl	800db18 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8014a9e:	eef0 7a40 	vmov.f32	s15, s0
 8014aa2:	eeb0 1a67 	vmov.f32	s2, s15
 8014aa6:	eef0 0a68 	vmov.f32	s1, s17
 8014aaa:	eeb0 0a48 	vmov.f32	s0, s16
 8014aae:	6978      	ldr	r0, [r7, #20]
 8014ab0:	f000 fc26 	bl	8015300 <_ZNK10Algorithms15FusionAlgorithm16_GetGlobalAccCovEfff>
 8014ab4:	4602      	mov	r2, r0
 8014ab6:	f107 0318 	add.w	r3, r7, #24
 8014aba:	ed97 0a01 	vldr	s0, [r7, #4]
 8014abe:	4619      	mov	r1, r3
 8014ac0:	4620      	mov	r0, r4
 8014ac2:	f7f9 fa09 	bl	800ded8 <_ZN10Algorithms20ExtendedKalmanFilterILt6ELt3ELt6EE7PredictERKN3Mat8V_VectorILt3EEERKNS2_6MatrixILt3ELt3EEEf>
	const auto& vel = _velocityEKF.GetState();
 8014ac6:	697b      	ldr	r3, [r7, #20]
 8014ac8:	4618      	mov	r0, r3
 8014aca:	f7f8 fcc1 	bl	800d450 <_ZNK10Algorithms20ExtendedKalmanFilterILt6ELt3ELt6EE8GetStateEv>
 8014ace:	6638      	str	r0, [r7, #96]	; 0x60
//AHRS
	//V_Vector<3> accL{{imuData.Acc.x, imuData.Acc.y, imuData.Acc.z}};
	//auto accENU = GetRotationMatrix()*accL;
	//accENU(2,0) -= Gravity;
	//_velocityEKF.Predict(static_cast<const V_Vector<3>&>(accENU), _GetGlobalAccCov(accL(0), accL(1), accL(2)), imuData.SensorTime);
}
 8014ad0:	bf00      	nop
 8014ad2:	376c      	adds	r7, #108	; 0x6c
 8014ad4:	46bd      	mov	sp, r7
 8014ad6:	ecbd 8b02 	vpop	{d8}
 8014ada:	bd90      	pop	{r4, r7, pc}
 8014adc:	411ce7a1 	.word	0x411ce7a1

08014ae0 <_ZNK10Algorithms15FusionAlgorithm7GetRollEv>:
	_velocityEKF.Update(measurementVec, measurementCov, _velocityEKF.GetTime());
}


float FusionAlgorithm::GetRoll() const
{
 8014ae0:	b580      	push	{r7, lr}
 8014ae2:	ed2d 8b04 	vpush	{d8-d9}
 8014ae6:	b08c      	sub	sp, #48	; 0x30
 8014ae8:	af00      	add	r7, sp, #0
 8014aea:	6078      	str	r0, [r7, #4]
	//const OrientationEKF::StateVec& q = _orientationEKF.GetState();
//AHRS
	const auto& Q = _AHRSKalman.GetState();
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8014af2:	4618      	mov	r0, r3
 8014af4:	f7fa fc52 	bl	800f39c <_ZNK10Algorithms10AHRSKalman8GetStateEv>
 8014af8:	62f8      	str	r0, [r7, #44]	; 0x2c
	const OrientationEKF::StateVec q{{Q.w, Q.x, Q.y, Q.z}};
 8014afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014afc:	681b      	ldr	r3, [r3, #0]
 8014afe:	61bb      	str	r3, [r7, #24]
 8014b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b02:	685b      	ldr	r3, [r3, #4]
 8014b04:	61fb      	str	r3, [r7, #28]
 8014b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b08:	689b      	ldr	r3, [r3, #8]
 8014b0a:	623b      	str	r3, [r7, #32]
 8014b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b0e:	68db      	ldr	r3, [r3, #12]
 8014b10:	627b      	str	r3, [r7, #36]	; 0x24
 8014b12:	f107 0218 	add.w	r2, r7, #24
 8014b16:	f107 0308 	add.w	r3, r7, #8
 8014b1a:	4611      	mov	r1, r2
 8014b1c:	4618      	mov	r0, r3
 8014b1e:	f7fd fe68 	bl	80127f2 <_ZN3Mat8V_VectorILt4EEC1ERKSt5arrayIfLj4EE>
//AHRS
	float roll = atan2(2.0f * (q(0) * q(1) + q(2) * q(3)), q(0) * q(0) - q(1) * q(1) - q(2) * q(2) + q(3) * q(3));
 8014b22:	f107 0308 	add.w	r3, r7, #8
 8014b26:	2100      	movs	r1, #0
 8014b28:	4618      	mov	r0, r3
 8014b2a:	f7fd fe4d 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014b2e:	eeb0 8a40 	vmov.f32	s16, s0
 8014b32:	f107 0308 	add.w	r3, r7, #8
 8014b36:	2101      	movs	r1, #1
 8014b38:	4618      	mov	r0, r3
 8014b3a:	f7fd fe45 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014b3e:	eef0 7a40 	vmov.f32	s15, s0
 8014b42:	ee28 8a27 	vmul.f32	s16, s16, s15
 8014b46:	f107 0308 	add.w	r3, r7, #8
 8014b4a:	2102      	movs	r1, #2
 8014b4c:	4618      	mov	r0, r3
 8014b4e:	f7fd fe3b 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014b52:	eef0 8a40 	vmov.f32	s17, s0
 8014b56:	f107 0308 	add.w	r3, r7, #8
 8014b5a:	2103      	movs	r1, #3
 8014b5c:	4618      	mov	r0, r3
 8014b5e:	f7fd fe33 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014b62:	eef0 7a40 	vmov.f32	s15, s0
 8014b66:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8014b6a:	ee78 7a27 	vadd.f32	s15, s16, s15
 8014b6e:	ee77 8aa7 	vadd.f32	s17, s15, s15
 8014b72:	f107 0308 	add.w	r3, r7, #8
 8014b76:	2100      	movs	r1, #0
 8014b78:	4618      	mov	r0, r3
 8014b7a:	f7fd fe25 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014b7e:	eeb0 8a40 	vmov.f32	s16, s0
 8014b82:	f107 0308 	add.w	r3, r7, #8
 8014b86:	2100      	movs	r1, #0
 8014b88:	4618      	mov	r0, r3
 8014b8a:	f7fd fe1d 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014b8e:	eef0 7a40 	vmov.f32	s15, s0
 8014b92:	ee28 8a27 	vmul.f32	s16, s16, s15
 8014b96:	f107 0308 	add.w	r3, r7, #8
 8014b9a:	2101      	movs	r1, #1
 8014b9c:	4618      	mov	r0, r3
 8014b9e:	f7fd fe13 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014ba2:	eeb0 9a40 	vmov.f32	s18, s0
 8014ba6:	f107 0308 	add.w	r3, r7, #8
 8014baa:	2101      	movs	r1, #1
 8014bac:	4618      	mov	r0, r3
 8014bae:	f7fd fe0b 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014bb2:	eef0 7a40 	vmov.f32	s15, s0
 8014bb6:	ee69 7a27 	vmul.f32	s15, s18, s15
 8014bba:	ee38 8a67 	vsub.f32	s16, s16, s15
 8014bbe:	f107 0308 	add.w	r3, r7, #8
 8014bc2:	2102      	movs	r1, #2
 8014bc4:	4618      	mov	r0, r3
 8014bc6:	f7fd fdff 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014bca:	eeb0 9a40 	vmov.f32	s18, s0
 8014bce:	f107 0308 	add.w	r3, r7, #8
 8014bd2:	2102      	movs	r1, #2
 8014bd4:	4618      	mov	r0, r3
 8014bd6:	f7fd fdf7 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014bda:	eef0 7a40 	vmov.f32	s15, s0
 8014bde:	ee69 7a27 	vmul.f32	s15, s18, s15
 8014be2:	ee38 8a67 	vsub.f32	s16, s16, s15
 8014be6:	f107 0308 	add.w	r3, r7, #8
 8014bea:	2103      	movs	r1, #3
 8014bec:	4618      	mov	r0, r3
 8014bee:	f7fd fdeb 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014bf2:	eeb0 9a40 	vmov.f32	s18, s0
 8014bf6:	f107 0308 	add.w	r3, r7, #8
 8014bfa:	2103      	movs	r1, #3
 8014bfc:	4618      	mov	r0, r3
 8014bfe:	f7fd fde3 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014c02:	eef0 7a40 	vmov.f32	s15, s0
 8014c06:	ee69 7a27 	vmul.f32	s15, s18, s15
 8014c0a:	ee78 7a27 	vadd.f32	s15, s16, s15
 8014c0e:	eef0 0a67 	vmov.f32	s1, s15
 8014c12:	eeb0 0a68 	vmov.f32	s0, s17
 8014c16:	f7fa f963 	bl	800eee0 <_ZSt5atan2ff>
 8014c1a:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
	return roll * 57.29578f;
 8014c1e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8014c22:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8014c38 <_ZNK10Algorithms15FusionAlgorithm7GetRollEv+0x158>
 8014c26:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8014c2a:	eeb0 0a67 	vmov.f32	s0, s15
 8014c2e:	3730      	adds	r7, #48	; 0x30
 8014c30:	46bd      	mov	sp, r7
 8014c32:	ecbd 8b04 	vpop	{d8-d9}
 8014c36:	bd80      	pop	{r7, pc}
 8014c38:	42652ee1 	.word	0x42652ee1

08014c3c <_ZNK10Algorithms15FusionAlgorithm8GetPitchEv>:

float FusionAlgorithm::GetPitch() const
{
 8014c3c:	b580      	push	{r7, lr}
 8014c3e:	ed2d 8b02 	vpush	{d8}
 8014c42:	b08c      	sub	sp, #48	; 0x30
 8014c44:	af00      	add	r7, sp, #0
 8014c46:	6078      	str	r0, [r7, #4]
	//const OrientationEKF::StateVec& q = _orientationEKF.GetState();
//AHRS
	const auto& Q = _AHRSKalman.GetState();
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8014c4e:	4618      	mov	r0, r3
 8014c50:	f7fa fba4 	bl	800f39c <_ZNK10Algorithms10AHRSKalman8GetStateEv>
 8014c54:	62f8      	str	r0, [r7, #44]	; 0x2c
	const OrientationEKF::StateVec q{{Q.w, Q.x, Q.y, Q.z}};
 8014c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c58:	681b      	ldr	r3, [r3, #0]
 8014c5a:	61bb      	str	r3, [r7, #24]
 8014c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c5e:	685b      	ldr	r3, [r3, #4]
 8014c60:	61fb      	str	r3, [r7, #28]
 8014c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c64:	689b      	ldr	r3, [r3, #8]
 8014c66:	623b      	str	r3, [r7, #32]
 8014c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c6a:	68db      	ldr	r3, [r3, #12]
 8014c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8014c6e:	f107 0218 	add.w	r2, r7, #24
 8014c72:	f107 0308 	add.w	r3, r7, #8
 8014c76:	4611      	mov	r1, r2
 8014c78:	4618      	mov	r0, r3
 8014c7a:	f7fd fdba 	bl	80127f2 <_ZN3Mat8V_VectorILt4EEC1ERKSt5arrayIfLj4EE>
//AHRS
	float pitch = -asin(2.0f * (q(1) * q(3) - q(0) * q(2)));
 8014c7e:	f107 0308 	add.w	r3, r7, #8
 8014c82:	2101      	movs	r1, #1
 8014c84:	4618      	mov	r0, r3
 8014c86:	f7fd fd9f 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014c8a:	eeb0 8a40 	vmov.f32	s16, s0
 8014c8e:	f107 0308 	add.w	r3, r7, #8
 8014c92:	2103      	movs	r1, #3
 8014c94:	4618      	mov	r0, r3
 8014c96:	f7fd fd97 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014c9a:	eef0 7a40 	vmov.f32	s15, s0
 8014c9e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8014ca2:	f107 0308 	add.w	r3, r7, #8
 8014ca6:	2100      	movs	r1, #0
 8014ca8:	4618      	mov	r0, r3
 8014caa:	f7fd fd8d 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014cae:	eef0 8a40 	vmov.f32	s17, s0
 8014cb2:	f107 0308 	add.w	r3, r7, #8
 8014cb6:	2102      	movs	r1, #2
 8014cb8:	4618      	mov	r0, r3
 8014cba:	f7fd fd85 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014cbe:	eef0 7a40 	vmov.f32	s15, s0
 8014cc2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8014cc6:	ee78 7a67 	vsub.f32	s15, s16, s15
 8014cca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8014cce:	eeb0 0a67 	vmov.f32	s0, s15
 8014cd2:	f7fa f8f5 	bl	800eec0 <_ZSt4asinf>
 8014cd6:	eef0 7a40 	vmov.f32	s15, s0
 8014cda:	eef1 7a67 	vneg.f32	s15, s15
 8014cde:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	return pitch * 57.29578f;
 8014ce2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8014ce6:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8014cfc <_ZNK10Algorithms15FusionAlgorithm8GetPitchEv+0xc0>
 8014cea:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8014cee:	eeb0 0a67 	vmov.f32	s0, s15
 8014cf2:	3730      	adds	r7, #48	; 0x30
 8014cf4:	46bd      	mov	sp, r7
 8014cf6:	ecbd 8b02 	vpop	{d8}
 8014cfa:	bd80      	pop	{r7, pc}
 8014cfc:	42652ee1 	.word	0x42652ee1

08014d00 <_ZNK10Algorithms15FusionAlgorithm6GetYawEv>:

float FusionAlgorithm::GetYaw() const
{
 8014d00:	b580      	push	{r7, lr}
 8014d02:	ed2d 8b04 	vpush	{d8-d9}
 8014d06:	b08c      	sub	sp, #48	; 0x30
 8014d08:	af00      	add	r7, sp, #0
 8014d0a:	6078      	str	r0, [r7, #4]
	//const OrientationEKF::StateVec& q = _orientationEKF.GetState();
//AHRS
	const auto& Q = _AHRSKalman.GetState();
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8014d12:	4618      	mov	r0, r3
 8014d14:	f7fa fb42 	bl	800f39c <_ZNK10Algorithms10AHRSKalman8GetStateEv>
 8014d18:	62f8      	str	r0, [r7, #44]	; 0x2c
	const OrientationEKF::StateVec q{{Q.w, Q.x, Q.y, Q.z}};
 8014d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d1c:	681b      	ldr	r3, [r3, #0]
 8014d1e:	61bb      	str	r3, [r7, #24]
 8014d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d22:	685b      	ldr	r3, [r3, #4]
 8014d24:	61fb      	str	r3, [r7, #28]
 8014d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d28:	689b      	ldr	r3, [r3, #8]
 8014d2a:	623b      	str	r3, [r7, #32]
 8014d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d2e:	68db      	ldr	r3, [r3, #12]
 8014d30:	627b      	str	r3, [r7, #36]	; 0x24
 8014d32:	f107 0218 	add.w	r2, r7, #24
 8014d36:	f107 0308 	add.w	r3, r7, #8
 8014d3a:	4611      	mov	r1, r2
 8014d3c:	4618      	mov	r0, r3
 8014d3e:	f7fd fd58 	bl	80127f2 <_ZN3Mat8V_VectorILt4EEC1ERKSt5arrayIfLj4EE>
//AHRS
	float yaw = atan2(2.0f * (q(1) * q(2) + q(0) * q(3)), q(0) * q(0) + q(1) * q(1) - q(2) * q(2) - q(3) * q(3));
 8014d42:	f107 0308 	add.w	r3, r7, #8
 8014d46:	2101      	movs	r1, #1
 8014d48:	4618      	mov	r0, r3
 8014d4a:	f7fd fd3d 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014d4e:	eeb0 8a40 	vmov.f32	s16, s0
 8014d52:	f107 0308 	add.w	r3, r7, #8
 8014d56:	2102      	movs	r1, #2
 8014d58:	4618      	mov	r0, r3
 8014d5a:	f7fd fd35 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014d5e:	eef0 7a40 	vmov.f32	s15, s0
 8014d62:	ee28 8a27 	vmul.f32	s16, s16, s15
 8014d66:	f107 0308 	add.w	r3, r7, #8
 8014d6a:	2100      	movs	r1, #0
 8014d6c:	4618      	mov	r0, r3
 8014d6e:	f7fd fd2b 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014d72:	eef0 8a40 	vmov.f32	s17, s0
 8014d76:	f107 0308 	add.w	r3, r7, #8
 8014d7a:	2103      	movs	r1, #3
 8014d7c:	4618      	mov	r0, r3
 8014d7e:	f7fd fd23 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014d82:	eef0 7a40 	vmov.f32	s15, s0
 8014d86:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8014d8a:	ee78 7a27 	vadd.f32	s15, s16, s15
 8014d8e:	ee77 8aa7 	vadd.f32	s17, s15, s15
 8014d92:	f107 0308 	add.w	r3, r7, #8
 8014d96:	2100      	movs	r1, #0
 8014d98:	4618      	mov	r0, r3
 8014d9a:	f7fd fd15 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014d9e:	eeb0 8a40 	vmov.f32	s16, s0
 8014da2:	f107 0308 	add.w	r3, r7, #8
 8014da6:	2100      	movs	r1, #0
 8014da8:	4618      	mov	r0, r3
 8014daa:	f7fd fd0d 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014dae:	eef0 7a40 	vmov.f32	s15, s0
 8014db2:	ee28 8a27 	vmul.f32	s16, s16, s15
 8014db6:	f107 0308 	add.w	r3, r7, #8
 8014dba:	2101      	movs	r1, #1
 8014dbc:	4618      	mov	r0, r3
 8014dbe:	f7fd fd03 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014dc2:	eeb0 9a40 	vmov.f32	s18, s0
 8014dc6:	f107 0308 	add.w	r3, r7, #8
 8014dca:	2101      	movs	r1, #1
 8014dcc:	4618      	mov	r0, r3
 8014dce:	f7fd fcfb 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014dd2:	eef0 7a40 	vmov.f32	s15, s0
 8014dd6:	ee69 7a27 	vmul.f32	s15, s18, s15
 8014dda:	ee38 8a27 	vadd.f32	s16, s16, s15
 8014dde:	f107 0308 	add.w	r3, r7, #8
 8014de2:	2102      	movs	r1, #2
 8014de4:	4618      	mov	r0, r3
 8014de6:	f7fd fcef 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014dea:	eeb0 9a40 	vmov.f32	s18, s0
 8014dee:	f107 0308 	add.w	r3, r7, #8
 8014df2:	2102      	movs	r1, #2
 8014df4:	4618      	mov	r0, r3
 8014df6:	f7fd fce7 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014dfa:	eef0 7a40 	vmov.f32	s15, s0
 8014dfe:	ee69 7a27 	vmul.f32	s15, s18, s15
 8014e02:	ee38 8a67 	vsub.f32	s16, s16, s15
 8014e06:	f107 0308 	add.w	r3, r7, #8
 8014e0a:	2103      	movs	r1, #3
 8014e0c:	4618      	mov	r0, r3
 8014e0e:	f7fd fcdb 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014e12:	eeb0 9a40 	vmov.f32	s18, s0
 8014e16:	f107 0308 	add.w	r3, r7, #8
 8014e1a:	2103      	movs	r1, #3
 8014e1c:	4618      	mov	r0, r3
 8014e1e:	f7fd fcd3 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014e22:	eef0 7a40 	vmov.f32	s15, s0
 8014e26:	ee69 7a27 	vmul.f32	s15, s18, s15
 8014e2a:	ee78 7a67 	vsub.f32	s15, s16, s15
 8014e2e:	eef0 0a67 	vmov.f32	s1, s15
 8014e32:	eeb0 0a68 	vmov.f32	s0, s17
 8014e36:	f7fa f853 	bl	800eee0 <_ZSt5atan2ff>
 8014e3a:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
	return yaw * 57.29578f + 180.0f;
 8014e3e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8014e42:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8014e60 <_ZNK10Algorithms15FusionAlgorithm6GetYawEv+0x160>
 8014e46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014e4a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8014e64 <_ZNK10Algorithms15FusionAlgorithm6GetYawEv+0x164>
 8014e4e:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8014e52:	eeb0 0a67 	vmov.f32	s0, s15
 8014e56:	3730      	adds	r7, #48	; 0x30
 8014e58:	46bd      	mov	sp, r7
 8014e5a:	ecbd 8b04 	vpop	{d8-d9}
 8014e5e:	bd80      	pop	{r7, pc}
 8014e60:	42652ee1 	.word	0x42652ee1
 8014e64:	43340000 	.word	0x43340000

08014e68 <_ZNK10Algorithms15FusionAlgorithm17GetRotationMatrixEv>:

const Matrix<3,3>& FusionAlgorithm::GetRotationMatrix() const
{
 8014e68:	b5b0      	push	{r4, r5, r7, lr}
 8014e6a:	ed2d 8b02 	vpush	{d8}
 8014e6e:	b09e      	sub	sp, #120	; 0x78
 8014e70:	af00      	add	r7, sp, #0
 8014e72:	6078      	str	r0, [r7, #4]
	static Matrix<3,3> rotationMatrix;
 8014e74:	4b0f      	ldr	r3, [pc, #60]	; (8014eb4 <_ZNK10Algorithms15FusionAlgorithm17GetRotationMatrixEv+0x4c>)
 8014e76:	681b      	ldr	r3, [r3, #0]
 8014e78:	f3bf 8f5b 	dmb	ish
 8014e7c:	f003 0301 	and.w	r3, r3, #1
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	bf0c      	ite	eq
 8014e84:	2301      	moveq	r3, #1
 8014e86:	2300      	movne	r3, #0
 8014e88:	b2db      	uxtb	r3, r3
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	d016      	beq.n	8014ebc <_ZNK10Algorithms15FusionAlgorithm17GetRotationMatrixEv+0x54>
 8014e8e:	4809      	ldr	r0, [pc, #36]	; (8014eb4 <_ZNK10Algorithms15FusionAlgorithm17GetRotationMatrixEv+0x4c>)
 8014e90:	f004 fafa 	bl	8019488 <__cxa_guard_acquire>
 8014e94:	4603      	mov	r3, r0
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	bf14      	ite	ne
 8014e9a:	2301      	movne	r3, #1
 8014e9c:	2300      	moveq	r3, #0
 8014e9e:	b2db      	uxtb	r3, r3
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	d00b      	beq.n	8014ebc <_ZNK10Algorithms15FusionAlgorithm17GetRotationMatrixEv+0x54>
 8014ea4:	4804      	ldr	r0, [pc, #16]	; (8014eb8 <_ZNK10Algorithms15FusionAlgorithm17GetRotationMatrixEv+0x50>)
 8014ea6:	f7f8 fa97 	bl	800d3d8 <_ZN3Mat6MatrixILt3ELt3EEC1Ev>
 8014eaa:	4802      	ldr	r0, [pc, #8]	; (8014eb4 <_ZNK10Algorithms15FusionAlgorithm17GetRotationMatrixEv+0x4c>)
 8014eac:	f004 faf8 	bl	80194a0 <__cxa_guard_release>
 8014eb0:	e004      	b.n	8014ebc <_ZNK10Algorithms15FusionAlgorithm17GetRotationMatrixEv+0x54>
 8014eb2:	bf00      	nop
 8014eb4:	240055a4 	.word	0x240055a4
 8014eb8:	24005580 	.word	0x24005580
	//const OrientationEKF::StateVec& q = _orientationEKF.GetState();
//AHRS
	const auto& Q = _AHRSKalman.GetState();
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8014ec2:	4618      	mov	r0, r3
 8014ec4:	f7fa fa6a 	bl	800f39c <_ZNK10Algorithms10AHRSKalman8GetStateEv>
 8014ec8:	6778      	str	r0, [r7, #116]	; 0x74
	const OrientationEKF::StateVec q{{Q.w, Q.x, Q.y, Q.z}};
 8014eca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014ecc:	681b      	ldr	r3, [r3, #0]
 8014ece:	61fb      	str	r3, [r7, #28]
 8014ed0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014ed2:	685b      	ldr	r3, [r3, #4]
 8014ed4:	623b      	str	r3, [r7, #32]
 8014ed6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014ed8:	689b      	ldr	r3, [r3, #8]
 8014eda:	627b      	str	r3, [r7, #36]	; 0x24
 8014edc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014ede:	68db      	ldr	r3, [r3, #12]
 8014ee0:	62bb      	str	r3, [r7, #40]	; 0x28
 8014ee2:	f107 021c 	add.w	r2, r7, #28
 8014ee6:	f107 030c 	add.w	r3, r7, #12
 8014eea:	4611      	mov	r1, r2
 8014eec:	4618      	mov	r0, r3
 8014eee:	f7fd fc80 	bl	80127f2 <_ZN3Mat8V_VectorILt4EEC1ERKSt5arrayIfLj4EE>
//AHRS
	rotationMatrix = {{
			q(0)*q(0)+q(1)*q(1)-q(2)*q(2)-q(3)*q(3), 	2.0f*(q(1)*q(2)-q(0)*q(3)), 	2.0f*(q(1)*q(3)+q(0)*q(2)),
 8014ef2:	f107 030c 	add.w	r3, r7, #12
 8014ef6:	2100      	movs	r1, #0
 8014ef8:	4618      	mov	r0, r3
 8014efa:	f7fd fc65 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014efe:	eeb0 8a40 	vmov.f32	s16, s0
 8014f02:	f107 030c 	add.w	r3, r7, #12
 8014f06:	2100      	movs	r1, #0
 8014f08:	4618      	mov	r0, r3
 8014f0a:	f7fd fc5d 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014f0e:	eef0 7a40 	vmov.f32	s15, s0
 8014f12:	ee28 8a27 	vmul.f32	s16, s16, s15
 8014f16:	f107 030c 	add.w	r3, r7, #12
 8014f1a:	2101      	movs	r1, #1
 8014f1c:	4618      	mov	r0, r3
 8014f1e:	f7fd fc53 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014f22:	eef0 8a40 	vmov.f32	s17, s0
 8014f26:	f107 030c 	add.w	r3, r7, #12
 8014f2a:	2101      	movs	r1, #1
 8014f2c:	4618      	mov	r0, r3
 8014f2e:	f7fd fc4b 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014f32:	eef0 7a40 	vmov.f32	s15, s0
 8014f36:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8014f3a:	ee38 8a27 	vadd.f32	s16, s16, s15
 8014f3e:	f107 030c 	add.w	r3, r7, #12
 8014f42:	2102      	movs	r1, #2
 8014f44:	4618      	mov	r0, r3
 8014f46:	f7fd fc3f 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014f4a:	eef0 8a40 	vmov.f32	s17, s0
 8014f4e:	f107 030c 	add.w	r3, r7, #12
 8014f52:	2102      	movs	r1, #2
 8014f54:	4618      	mov	r0, r3
 8014f56:	f7fd fc37 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014f5a:	eef0 7a40 	vmov.f32	s15, s0
 8014f5e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8014f62:	ee38 8a67 	vsub.f32	s16, s16, s15
 8014f66:	f107 030c 	add.w	r3, r7, #12
 8014f6a:	2103      	movs	r1, #3
 8014f6c:	4618      	mov	r0, r3
 8014f6e:	f7fd fc2b 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014f72:	eef0 8a40 	vmov.f32	s17, s0
 8014f76:	f107 030c 	add.w	r3, r7, #12
 8014f7a:	2103      	movs	r1, #3
 8014f7c:	4618      	mov	r0, r3
 8014f7e:	f7fd fc23 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014f82:	eef0 7a40 	vmov.f32	s15, s0
 8014f86:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8014f8a:	ee78 7a67 	vsub.f32	s15, s16, s15
	rotationMatrix = {{
 8014f8e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
			q(0)*q(0)+q(1)*q(1)-q(2)*q(2)-q(3)*q(3), 	2.0f*(q(1)*q(2)-q(0)*q(3)), 	2.0f*(q(1)*q(3)+q(0)*q(2)),
 8014f92:	f107 030c 	add.w	r3, r7, #12
 8014f96:	2101      	movs	r1, #1
 8014f98:	4618      	mov	r0, r3
 8014f9a:	f7fd fc15 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014f9e:	eeb0 8a40 	vmov.f32	s16, s0
 8014fa2:	f107 030c 	add.w	r3, r7, #12
 8014fa6:	2102      	movs	r1, #2
 8014fa8:	4618      	mov	r0, r3
 8014faa:	f7fd fc0d 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014fae:	eef0 7a40 	vmov.f32	s15, s0
 8014fb2:	ee28 8a27 	vmul.f32	s16, s16, s15
 8014fb6:	f107 030c 	add.w	r3, r7, #12
 8014fba:	2100      	movs	r1, #0
 8014fbc:	4618      	mov	r0, r3
 8014fbe:	f7fd fc03 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014fc2:	eef0 8a40 	vmov.f32	s17, s0
 8014fc6:	f107 030c 	add.w	r3, r7, #12
 8014fca:	2103      	movs	r1, #3
 8014fcc:	4618      	mov	r0, r3
 8014fce:	f7fd fbfb 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014fd2:	eef0 7a40 	vmov.f32	s15, s0
 8014fd6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8014fda:	ee78 7a67 	vsub.f32	s15, s16, s15
 8014fde:	ee77 7aa7 	vadd.f32	s15, s15, s15
	rotationMatrix = {{
 8014fe2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
			q(0)*q(0)+q(1)*q(1)-q(2)*q(2)-q(3)*q(3), 	2.0f*(q(1)*q(2)-q(0)*q(3)), 	2.0f*(q(1)*q(3)+q(0)*q(2)),
 8014fe6:	f107 030c 	add.w	r3, r7, #12
 8014fea:	2101      	movs	r1, #1
 8014fec:	4618      	mov	r0, r3
 8014fee:	f7fd fbeb 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8014ff2:	eeb0 8a40 	vmov.f32	s16, s0
 8014ff6:	f107 030c 	add.w	r3, r7, #12
 8014ffa:	2103      	movs	r1, #3
 8014ffc:	4618      	mov	r0, r3
 8014ffe:	f7fd fbe3 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8015002:	eef0 7a40 	vmov.f32	s15, s0
 8015006:	ee28 8a27 	vmul.f32	s16, s16, s15
 801500a:	f107 030c 	add.w	r3, r7, #12
 801500e:	2100      	movs	r1, #0
 8015010:	4618      	mov	r0, r3
 8015012:	f7fd fbd9 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8015016:	eef0 8a40 	vmov.f32	s17, s0
 801501a:	f107 030c 	add.w	r3, r7, #12
 801501e:	2102      	movs	r1, #2
 8015020:	4618      	mov	r0, r3
 8015022:	f7fd fbd1 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8015026:	eef0 7a40 	vmov.f32	s15, s0
 801502a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801502e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8015032:	ee77 7aa7 	vadd.f32	s15, s15, s15
	rotationMatrix = {{
 8015036:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
			2.0f*(q(1)*q(2)+q(0)*q(3)), 	q(0)*q(0)-q(1)*q(1)+q(2)*q(2)-q(3)*q(3),	2.0f*(q(2)*q(3)-q(0)*q(1)),
 801503a:	f107 030c 	add.w	r3, r7, #12
 801503e:	2101      	movs	r1, #1
 8015040:	4618      	mov	r0, r3
 8015042:	f7fd fbc1 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8015046:	eeb0 8a40 	vmov.f32	s16, s0
 801504a:	f107 030c 	add.w	r3, r7, #12
 801504e:	2102      	movs	r1, #2
 8015050:	4618      	mov	r0, r3
 8015052:	f7fd fbb9 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8015056:	eef0 7a40 	vmov.f32	s15, s0
 801505a:	ee28 8a27 	vmul.f32	s16, s16, s15
 801505e:	f107 030c 	add.w	r3, r7, #12
 8015062:	2100      	movs	r1, #0
 8015064:	4618      	mov	r0, r3
 8015066:	f7fd fbaf 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 801506a:	eef0 8a40 	vmov.f32	s17, s0
 801506e:	f107 030c 	add.w	r3, r7, #12
 8015072:	2103      	movs	r1, #3
 8015074:	4618      	mov	r0, r3
 8015076:	f7fd fba7 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 801507a:	eef0 7a40 	vmov.f32	s15, s0
 801507e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8015082:	ee78 7a27 	vadd.f32	s15, s16, s15
 8015086:	ee77 7aa7 	vadd.f32	s15, s15, s15
	rotationMatrix = {{
 801508a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
			2.0f*(q(1)*q(2)+q(0)*q(3)), 	q(0)*q(0)-q(1)*q(1)+q(2)*q(2)-q(3)*q(3),	2.0f*(q(2)*q(3)-q(0)*q(1)),
 801508e:	f107 030c 	add.w	r3, r7, #12
 8015092:	2100      	movs	r1, #0
 8015094:	4618      	mov	r0, r3
 8015096:	f7fd fb97 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 801509a:	eeb0 8a40 	vmov.f32	s16, s0
 801509e:	f107 030c 	add.w	r3, r7, #12
 80150a2:	2100      	movs	r1, #0
 80150a4:	4618      	mov	r0, r3
 80150a6:	f7fd fb8f 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 80150aa:	eef0 7a40 	vmov.f32	s15, s0
 80150ae:	ee28 8a27 	vmul.f32	s16, s16, s15
 80150b2:	f107 030c 	add.w	r3, r7, #12
 80150b6:	2101      	movs	r1, #1
 80150b8:	4618      	mov	r0, r3
 80150ba:	f7fd fb85 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 80150be:	eef0 8a40 	vmov.f32	s17, s0
 80150c2:	f107 030c 	add.w	r3, r7, #12
 80150c6:	2101      	movs	r1, #1
 80150c8:	4618      	mov	r0, r3
 80150ca:	f7fd fb7d 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 80150ce:	eef0 7a40 	vmov.f32	s15, s0
 80150d2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80150d6:	ee38 8a67 	vsub.f32	s16, s16, s15
 80150da:	f107 030c 	add.w	r3, r7, #12
 80150de:	2102      	movs	r1, #2
 80150e0:	4618      	mov	r0, r3
 80150e2:	f7fd fb71 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 80150e6:	eef0 8a40 	vmov.f32	s17, s0
 80150ea:	f107 030c 	add.w	r3, r7, #12
 80150ee:	2102      	movs	r1, #2
 80150f0:	4618      	mov	r0, r3
 80150f2:	f7fd fb69 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 80150f6:	eef0 7a40 	vmov.f32	s15, s0
 80150fa:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80150fe:	ee38 8a27 	vadd.f32	s16, s16, s15
 8015102:	f107 030c 	add.w	r3, r7, #12
 8015106:	2103      	movs	r1, #3
 8015108:	4618      	mov	r0, r3
 801510a:	f7fd fb5d 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 801510e:	eef0 8a40 	vmov.f32	s17, s0
 8015112:	f107 030c 	add.w	r3, r7, #12
 8015116:	2103      	movs	r1, #3
 8015118:	4618      	mov	r0, r3
 801511a:	f7fd fb55 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 801511e:	eef0 7a40 	vmov.f32	s15, s0
 8015122:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8015126:	ee78 7a67 	vsub.f32	s15, s16, s15
	rotationMatrix = {{
 801512a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
			2.0f*(q(1)*q(2)+q(0)*q(3)), 	q(0)*q(0)-q(1)*q(1)+q(2)*q(2)-q(3)*q(3),	2.0f*(q(2)*q(3)-q(0)*q(1)),
 801512e:	f107 030c 	add.w	r3, r7, #12
 8015132:	2102      	movs	r1, #2
 8015134:	4618      	mov	r0, r3
 8015136:	f7fd fb47 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 801513a:	eeb0 8a40 	vmov.f32	s16, s0
 801513e:	f107 030c 	add.w	r3, r7, #12
 8015142:	2103      	movs	r1, #3
 8015144:	4618      	mov	r0, r3
 8015146:	f7fd fb3f 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 801514a:	eef0 7a40 	vmov.f32	s15, s0
 801514e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8015152:	f107 030c 	add.w	r3, r7, #12
 8015156:	2100      	movs	r1, #0
 8015158:	4618      	mov	r0, r3
 801515a:	f7fd fb35 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 801515e:	eef0 8a40 	vmov.f32	s17, s0
 8015162:	f107 030c 	add.w	r3, r7, #12
 8015166:	2101      	movs	r1, #1
 8015168:	4618      	mov	r0, r3
 801516a:	f7fd fb2d 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 801516e:	eef0 7a40 	vmov.f32	s15, s0
 8015172:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8015176:	ee78 7a67 	vsub.f32	s15, s16, s15
 801517a:	ee77 7aa7 	vadd.f32	s15, s15, s15
	rotationMatrix = {{
 801517e:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
			2.0f*(q(1)*q(3)-q(0)*q(2)),		2.0f*(q(0)*q(1)+q(2)*q(3)), 	q(0)*q(0)-q(1)*q(1)-q(2)*q(2)+q(3)*q(3)
 8015182:	f107 030c 	add.w	r3, r7, #12
 8015186:	2101      	movs	r1, #1
 8015188:	4618      	mov	r0, r3
 801518a:	f7fd fb1d 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 801518e:	eeb0 8a40 	vmov.f32	s16, s0
 8015192:	f107 030c 	add.w	r3, r7, #12
 8015196:	2103      	movs	r1, #3
 8015198:	4618      	mov	r0, r3
 801519a:	f7fd fb15 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 801519e:	eef0 7a40 	vmov.f32	s15, s0
 80151a2:	ee28 8a27 	vmul.f32	s16, s16, s15
 80151a6:	f107 030c 	add.w	r3, r7, #12
 80151aa:	2100      	movs	r1, #0
 80151ac:	4618      	mov	r0, r3
 80151ae:	f7fd fb0b 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 80151b2:	eef0 8a40 	vmov.f32	s17, s0
 80151b6:	f107 030c 	add.w	r3, r7, #12
 80151ba:	2102      	movs	r1, #2
 80151bc:	4618      	mov	r0, r3
 80151be:	f7fd fb03 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 80151c2:	eef0 7a40 	vmov.f32	s15, s0
 80151c6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80151ca:	ee78 7a67 	vsub.f32	s15, s16, s15
 80151ce:	ee77 7aa7 	vadd.f32	s15, s15, s15
	rotationMatrix = {{
 80151d2:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
			2.0f*(q(1)*q(3)-q(0)*q(2)),		2.0f*(q(0)*q(1)+q(2)*q(3)), 	q(0)*q(0)-q(1)*q(1)-q(2)*q(2)+q(3)*q(3)
 80151d6:	f107 030c 	add.w	r3, r7, #12
 80151da:	2100      	movs	r1, #0
 80151dc:	4618      	mov	r0, r3
 80151de:	f7fd faf3 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 80151e2:	eeb0 8a40 	vmov.f32	s16, s0
 80151e6:	f107 030c 	add.w	r3, r7, #12
 80151ea:	2101      	movs	r1, #1
 80151ec:	4618      	mov	r0, r3
 80151ee:	f7fd faeb 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 80151f2:	eef0 7a40 	vmov.f32	s15, s0
 80151f6:	ee28 8a27 	vmul.f32	s16, s16, s15
 80151fa:	f107 030c 	add.w	r3, r7, #12
 80151fe:	2102      	movs	r1, #2
 8015200:	4618      	mov	r0, r3
 8015202:	f7fd fae1 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8015206:	eef0 8a40 	vmov.f32	s17, s0
 801520a:	f107 030c 	add.w	r3, r7, #12
 801520e:	2103      	movs	r1, #3
 8015210:	4618      	mov	r0, r3
 8015212:	f7fd fad9 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8015216:	eef0 7a40 	vmov.f32	s15, s0
 801521a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801521e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8015222:	ee77 7aa7 	vadd.f32	s15, s15, s15
	rotationMatrix = {{
 8015226:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
			2.0f*(q(1)*q(3)-q(0)*q(2)),		2.0f*(q(0)*q(1)+q(2)*q(3)), 	q(0)*q(0)-q(1)*q(1)-q(2)*q(2)+q(3)*q(3)
 801522a:	f107 030c 	add.w	r3, r7, #12
 801522e:	2100      	movs	r1, #0
 8015230:	4618      	mov	r0, r3
 8015232:	f7fd fac9 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8015236:	eeb0 8a40 	vmov.f32	s16, s0
 801523a:	f107 030c 	add.w	r3, r7, #12
 801523e:	2100      	movs	r1, #0
 8015240:	4618      	mov	r0, r3
 8015242:	f7fd fac1 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8015246:	eef0 7a40 	vmov.f32	s15, s0
 801524a:	ee28 8a27 	vmul.f32	s16, s16, s15
 801524e:	f107 030c 	add.w	r3, r7, #12
 8015252:	2101      	movs	r1, #1
 8015254:	4618      	mov	r0, r3
 8015256:	f7fd fab7 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 801525a:	eef0 8a40 	vmov.f32	s17, s0
 801525e:	f107 030c 	add.w	r3, r7, #12
 8015262:	2101      	movs	r1, #1
 8015264:	4618      	mov	r0, r3
 8015266:	f7fd faaf 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 801526a:	eef0 7a40 	vmov.f32	s15, s0
 801526e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8015272:	ee38 8a67 	vsub.f32	s16, s16, s15
 8015276:	f107 030c 	add.w	r3, r7, #12
 801527a:	2102      	movs	r1, #2
 801527c:	4618      	mov	r0, r3
 801527e:	f7fd faa3 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8015282:	eef0 8a40 	vmov.f32	s17, s0
 8015286:	f107 030c 	add.w	r3, r7, #12
 801528a:	2102      	movs	r1, #2
 801528c:	4618      	mov	r0, r3
 801528e:	f7fd fa9b 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8015292:	eef0 7a40 	vmov.f32	s15, s0
 8015296:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801529a:	ee38 8a67 	vsub.f32	s16, s16, s15
 801529e:	f107 030c 	add.w	r3, r7, #12
 80152a2:	2103      	movs	r1, #3
 80152a4:	4618      	mov	r0, r3
 80152a6:	f7fd fa8f 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 80152aa:	eef0 8a40 	vmov.f32	s17, s0
 80152ae:	f107 030c 	add.w	r3, r7, #12
 80152b2:	2103      	movs	r1, #3
 80152b4:	4618      	mov	r0, r3
 80152b6:	f7fd fa87 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 80152ba:	eef0 7a40 	vmov.f32	s15, s0
 80152be:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80152c2:	ee78 7a27 	vadd.f32	s15, s16, s15
	rotationMatrix = {{
 80152c6:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
 80152ca:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80152ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80152d2:	4611      	mov	r1, r2
 80152d4:	4618      	mov	r0, r3
 80152d6:	f7f9 fced 	bl	800ecb4 <_ZN3Mat6MatrixILt3ELt3EEC1ERKSt5arrayIfLj9EE>
 80152da:	4b08      	ldr	r3, [pc, #32]	; (80152fc <_ZNK10Algorithms15FusionAlgorithm17GetRotationMatrixEv+0x494>)
 80152dc:	461d      	mov	r5, r3
 80152de:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80152e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80152e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80152e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80152e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80152ea:	6823      	ldr	r3, [r4, #0]
 80152ec:	602b      	str	r3, [r5, #0]
	}};
	return rotationMatrix;
 80152ee:	4b03      	ldr	r3, [pc, #12]	; (80152fc <_ZNK10Algorithms15FusionAlgorithm17GetRotationMatrixEv+0x494>)
}
 80152f0:	4618      	mov	r0, r3
 80152f2:	3778      	adds	r7, #120	; 0x78
 80152f4:	46bd      	mov	sp, r7
 80152f6:	ecbd 8b02 	vpop	{d8}
 80152fa:	bdb0      	pop	{r4, r5, r7, pc}
 80152fc:	24005580 	.word	0x24005580

08015300 <_ZNK10Algorithms15FusionAlgorithm16_GetGlobalAccCovEfff>:

const Matrix<3,3>& FusionAlgorithm::_GetGlobalAccCov(float x, float y, float z) const
{
 8015300:	b5b0      	push	{r4, r5, r7, lr}
 8015302:	ed2d 8b02 	vpush	{d8}
 8015306:	b0ec      	sub	sp, #432	; 0x1b0
 8015308:	af00      	add	r7, sp, #0
 801530a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 801530e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8015312:	6018      	str	r0, [r3, #0]
 8015314:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8015318:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 801531c:	ed83 0a00 	vstr	s0, [r3]
 8015320:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8015324:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8015328:	edc3 0a00 	vstr	s1, [r3]
 801532c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8015330:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8015334:	ed83 1a00 	vstr	s2, [r3]
	static Matrix<3,3> result;
 8015338:	4b21      	ldr	r3, [pc, #132]	; (80153c0 <_ZNK10Algorithms15FusionAlgorithm16_GetGlobalAccCovEfff+0xc0>)
 801533a:	681b      	ldr	r3, [r3, #0]
 801533c:	f3bf 8f5b 	dmb	ish
 8015340:	f003 0301 	and.w	r3, r3, #1
 8015344:	2b00      	cmp	r3, #0
 8015346:	bf0c      	ite	eq
 8015348:	2301      	moveq	r3, #1
 801534a:	2300      	movne	r3, #0
 801534c:	b2db      	uxtb	r3, r3
 801534e:	2b00      	cmp	r3, #0
 8015350:	d010      	beq.n	8015374 <_ZNK10Algorithms15FusionAlgorithm16_GetGlobalAccCovEfff+0x74>
 8015352:	481b      	ldr	r0, [pc, #108]	; (80153c0 <_ZNK10Algorithms15FusionAlgorithm16_GetGlobalAccCovEfff+0xc0>)
 8015354:	f004 f898 	bl	8019488 <__cxa_guard_acquire>
 8015358:	4603      	mov	r3, r0
 801535a:	2b00      	cmp	r3, #0
 801535c:	bf14      	ite	ne
 801535e:	2301      	movne	r3, #1
 8015360:	2300      	moveq	r3, #0
 8015362:	b2db      	uxtb	r3, r3
 8015364:	2b00      	cmp	r3, #0
 8015366:	d005      	beq.n	8015374 <_ZNK10Algorithms15FusionAlgorithm16_GetGlobalAccCovEfff+0x74>
 8015368:	4816      	ldr	r0, [pc, #88]	; (80153c4 <_ZNK10Algorithms15FusionAlgorithm16_GetGlobalAccCovEfff+0xc4>)
 801536a:	f7f8 f835 	bl	800d3d8 <_ZN3Mat6MatrixILt3ELt3EEC1Ev>
 801536e:	4814      	ldr	r0, [pc, #80]	; (80153c0 <_ZNK10Algorithms15FusionAlgorithm16_GetGlobalAccCovEfff+0xc0>)
 8015370:	f004 f896 	bl	80194a0 <__cxa_guard_release>
	static const Matrix<3,3>& a_a = GetRotationMatrix();
 8015374:	4b14      	ldr	r3, [pc, #80]	; (80153c8 <_ZNK10Algorithms15FusionAlgorithm16_GetGlobalAccCovEfff+0xc8>)
 8015376:	681b      	ldr	r3, [r3, #0]
 8015378:	f3bf 8f5b 	dmb	ish
 801537c:	f003 0301 	and.w	r3, r3, #1
 8015380:	2b00      	cmp	r3, #0
 8015382:	bf0c      	ite	eq
 8015384:	2301      	moveq	r3, #1
 8015386:	2300      	movne	r3, #0
 8015388:	b2db      	uxtb	r3, r3
 801538a:	2b00      	cmp	r3, #0
 801538c:	d020      	beq.n	80153d0 <_ZNK10Algorithms15FusionAlgorithm16_GetGlobalAccCovEfff+0xd0>
 801538e:	480e      	ldr	r0, [pc, #56]	; (80153c8 <_ZNK10Algorithms15FusionAlgorithm16_GetGlobalAccCovEfff+0xc8>)
 8015390:	f004 f87a 	bl	8019488 <__cxa_guard_acquire>
 8015394:	4603      	mov	r3, r0
 8015396:	2b00      	cmp	r3, #0
 8015398:	bf14      	ite	ne
 801539a:	2301      	movne	r3, #1
 801539c:	2300      	moveq	r3, #0
 801539e:	b2db      	uxtb	r3, r3
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	d015      	beq.n	80153d0 <_ZNK10Algorithms15FusionAlgorithm16_GetGlobalAccCovEfff+0xd0>
 80153a4:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80153a8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80153ac:	6818      	ldr	r0, [r3, #0]
 80153ae:	f7ff fd5b 	bl	8014e68 <_ZNK10Algorithms15FusionAlgorithm17GetRotationMatrixEv>
 80153b2:	4603      	mov	r3, r0
 80153b4:	4a05      	ldr	r2, [pc, #20]	; (80153cc <_ZNK10Algorithms15FusionAlgorithm16_GetGlobalAccCovEfff+0xcc>)
 80153b6:	6013      	str	r3, [r2, #0]
 80153b8:	4803      	ldr	r0, [pc, #12]	; (80153c8 <_ZNK10Algorithms15FusionAlgorithm16_GetGlobalAccCovEfff+0xc8>)
 80153ba:	f004 f871 	bl	80194a0 <__cxa_guard_release>
 80153be:	e007      	b.n	80153d0 <_ZNK10Algorithms15FusionAlgorithm16_GetGlobalAccCovEfff+0xd0>
 80153c0:	240055cc 	.word	0x240055cc
 80153c4:	240055a8 	.word	0x240055a8
 80153c8:	240055d4 	.word	0x240055d4
 80153cc:	240055d0 	.word	0x240055d0
	//const OrientationEKF::StateVec& q = _orientationEKF.GetState();
//AHRS
	const auto& Q = _AHRSKalman.GetState();
 80153d0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80153d4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80153d8:	681b      	ldr	r3, [r3, #0]
 80153da:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80153de:	4618      	mov	r0, r3
 80153e0:	f7f9 ffdc 	bl	800f39c <_ZNK10Algorithms10AHRSKalman8GetStateEv>
 80153e4:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
	const OrientationEKF::StateVec q{{Q.w, Q.x, Q.y, Q.z}};
 80153e8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80153ec:	681a      	ldr	r2, [r3, #0]
 80153ee:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80153f2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80153f6:	601a      	str	r2, [r3, #0]
 80153f8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80153fc:	685a      	ldr	r2, [r3, #4]
 80153fe:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8015402:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8015406:	605a      	str	r2, [r3, #4]
 8015408:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801540c:	689a      	ldr	r2, [r3, #8]
 801540e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8015412:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8015416:	609a      	str	r2, [r3, #8]
 8015418:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801541c:	68da      	ldr	r2, [r3, #12]
 801541e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8015422:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8015426:	60da      	str	r2, [r3, #12]
 8015428:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 801542c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8015430:	4611      	mov	r1, r2
 8015432:	4618      	mov	r0, r3
 8015434:	f7fd f9dd 	bl	80127f2 <_ZN3Mat8V_VectorILt4EEC1ERKSt5arrayIfLj4EE>
//AHRS
	Matrix<3, 4> a_q{{
        -y*q(3) + z*q(2) , y*q(2) + z*q(3) , -2.0f*x*q(2) + y*q(1) + z*q(0) , -2.0f*x*q(3) - y*q(0) + z*q(1),
 8015438:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 801543c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8015440:	edd3 7a00 	vldr	s15, [r3]
 8015444:	eeb1 8a67 	vneg.f32	s16, s15
 8015448:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801544c:	2103      	movs	r1, #3
 801544e:	4618      	mov	r0, r3
 8015450:	f7fd f9ba 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8015454:	eef0 7a40 	vmov.f32	s15, s0
 8015458:	ee28 8a27 	vmul.f32	s16, s16, s15
 801545c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8015460:	2102      	movs	r1, #2
 8015462:	4618      	mov	r0, r3
 8015464:	f7fd f9b0 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8015468:	eeb0 7a40 	vmov.f32	s14, s0
 801546c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8015470:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8015474:	edd3 7a00 	vldr	s15, [r3]
 8015478:	ee67 7a27 	vmul.f32	s15, s14, s15
 801547c:	ee78 7a27 	vadd.f32	s15, s16, s15
        x*q(3) - z*q(1) , x*q(2) -2.0f*y*q(1) - z*q(0) , x*q(1) + z*q(3) , x*q(0) - 2.0f*y*q(3) + z*q(2),
        -x*q(2) + y*q(1) , x*q(3) + y*q(0) -2.0f*z*q(1) , -x*q(0) + y*q(3) - 2.0f*z*q(2) , x*q(1) + y*q(2)
	}};
 8015480:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8015484:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8015488:	edc3 7a00 	vstr	s15, [r3]
        -y*q(3) + z*q(2) , y*q(2) + z*q(3) , -2.0f*x*q(2) + y*q(1) + z*q(0) , -2.0f*x*q(3) - y*q(0) + z*q(1),
 801548c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8015490:	2102      	movs	r1, #2
 8015492:	4618      	mov	r0, r3
 8015494:	f7fd f998 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8015498:	eeb0 7a40 	vmov.f32	s14, s0
 801549c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80154a0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80154a4:	edd3 7a00 	vldr	s15, [r3]
 80154a8:	ee27 8a27 	vmul.f32	s16, s14, s15
 80154ac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80154b0:	2103      	movs	r1, #3
 80154b2:	4618      	mov	r0, r3
 80154b4:	f7fd f988 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 80154b8:	eeb0 7a40 	vmov.f32	s14, s0
 80154bc:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80154c0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80154c4:	edd3 7a00 	vldr	s15, [r3]
 80154c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80154cc:	ee78 7a27 	vadd.f32	s15, s16, s15
	}};
 80154d0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80154d4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80154d8:	edc3 7a01 	vstr	s15, [r3, #4]
        -y*q(3) + z*q(2) , y*q(2) + z*q(3) , -2.0f*x*q(2) + y*q(1) + z*q(0) , -2.0f*x*q(3) - y*q(0) + z*q(1),
 80154dc:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80154e0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80154e4:	edd3 7a00 	vldr	s15, [r3]
 80154e8:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80154ec:	ee27 8a87 	vmul.f32	s16, s15, s14
 80154f0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80154f4:	2102      	movs	r1, #2
 80154f6:	4618      	mov	r0, r3
 80154f8:	f7fd f966 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 80154fc:	eef0 7a40 	vmov.f32	s15, s0
 8015500:	ee28 8a27 	vmul.f32	s16, s16, s15
 8015504:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8015508:	2101      	movs	r1, #1
 801550a:	4618      	mov	r0, r3
 801550c:	f7fd f95c 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8015510:	eeb0 7a40 	vmov.f32	s14, s0
 8015514:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8015518:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 801551c:	edd3 7a00 	vldr	s15, [r3]
 8015520:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015524:	ee38 8a27 	vadd.f32	s16, s16, s15
 8015528:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801552c:	2100      	movs	r1, #0
 801552e:	4618      	mov	r0, r3
 8015530:	f7fd f94a 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8015534:	eeb0 7a40 	vmov.f32	s14, s0
 8015538:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 801553c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8015540:	edd3 7a00 	vldr	s15, [r3]
 8015544:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015548:	ee78 7a27 	vadd.f32	s15, s16, s15
	}};
 801554c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8015550:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8015554:	edc3 7a02 	vstr	s15, [r3, #8]
        -y*q(3) + z*q(2) , y*q(2) + z*q(3) , -2.0f*x*q(2) + y*q(1) + z*q(0) , -2.0f*x*q(3) - y*q(0) + z*q(1),
 8015558:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 801555c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8015560:	edd3 7a00 	vldr	s15, [r3]
 8015564:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8015568:	ee27 8a87 	vmul.f32	s16, s15, s14
 801556c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8015570:	2103      	movs	r1, #3
 8015572:	4618      	mov	r0, r3
 8015574:	f7fd f928 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8015578:	eef0 7a40 	vmov.f32	s15, s0
 801557c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8015580:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8015584:	2100      	movs	r1, #0
 8015586:	4618      	mov	r0, r3
 8015588:	f7fd f91e 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 801558c:	eeb0 7a40 	vmov.f32	s14, s0
 8015590:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8015594:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8015598:	edd3 7a00 	vldr	s15, [r3]
 801559c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80155a0:	ee38 8a67 	vsub.f32	s16, s16, s15
 80155a4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80155a8:	2101      	movs	r1, #1
 80155aa:	4618      	mov	r0, r3
 80155ac:	f7fd f90c 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 80155b0:	eeb0 7a40 	vmov.f32	s14, s0
 80155b4:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80155b8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80155bc:	edd3 7a00 	vldr	s15, [r3]
 80155c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80155c4:	ee78 7a27 	vadd.f32	s15, s16, s15
	}};
 80155c8:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80155cc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80155d0:	edc3 7a03 	vstr	s15, [r3, #12]
        x*q(3) - z*q(1) , x*q(2) -2.0f*y*q(1) - z*q(0) , x*q(1) + z*q(3) , x*q(0) - 2.0f*y*q(3) + z*q(2),
 80155d4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80155d8:	2103      	movs	r1, #3
 80155da:	4618      	mov	r0, r3
 80155dc:	f7fd f8f4 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 80155e0:	eeb0 7a40 	vmov.f32	s14, s0
 80155e4:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80155e8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80155ec:	edd3 7a00 	vldr	s15, [r3]
 80155f0:	ee27 8a27 	vmul.f32	s16, s14, s15
 80155f4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80155f8:	2101      	movs	r1, #1
 80155fa:	4618      	mov	r0, r3
 80155fc:	f7fd f8e4 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8015600:	eeb0 7a40 	vmov.f32	s14, s0
 8015604:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8015608:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 801560c:	edd3 7a00 	vldr	s15, [r3]
 8015610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015614:	ee78 7a67 	vsub.f32	s15, s16, s15
	}};
 8015618:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 801561c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8015620:	edc3 7a04 	vstr	s15, [r3, #16]
        x*q(3) - z*q(1) , x*q(2) -2.0f*y*q(1) - z*q(0) , x*q(1) + z*q(3) , x*q(0) - 2.0f*y*q(3) + z*q(2),
 8015624:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8015628:	2102      	movs	r1, #2
 801562a:	4618      	mov	r0, r3
 801562c:	f7fd f8cc 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8015630:	eeb0 7a40 	vmov.f32	s14, s0
 8015634:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8015638:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 801563c:	edd3 7a00 	vldr	s15, [r3]
 8015640:	ee27 8a27 	vmul.f32	s16, s14, s15
 8015644:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8015648:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 801564c:	edd3 7a00 	vldr	s15, [r3]
 8015650:	ee77 8aa7 	vadd.f32	s17, s15, s15
 8015654:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8015658:	2101      	movs	r1, #1
 801565a:	4618      	mov	r0, r3
 801565c:	f7fd f8b4 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8015660:	eef0 7a40 	vmov.f32	s15, s0
 8015664:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8015668:	ee38 8a67 	vsub.f32	s16, s16, s15
 801566c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8015670:	2100      	movs	r1, #0
 8015672:	4618      	mov	r0, r3
 8015674:	f7fd f8a8 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8015678:	eeb0 7a40 	vmov.f32	s14, s0
 801567c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8015680:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8015684:	edd3 7a00 	vldr	s15, [r3]
 8015688:	ee67 7a27 	vmul.f32	s15, s14, s15
 801568c:	ee78 7a67 	vsub.f32	s15, s16, s15
	}};
 8015690:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8015694:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8015698:	edc3 7a05 	vstr	s15, [r3, #20]
        x*q(3) - z*q(1) , x*q(2) -2.0f*y*q(1) - z*q(0) , x*q(1) + z*q(3) , x*q(0) - 2.0f*y*q(3) + z*q(2),
 801569c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80156a0:	2101      	movs	r1, #1
 80156a2:	4618      	mov	r0, r3
 80156a4:	f7fd f890 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 80156a8:	eeb0 7a40 	vmov.f32	s14, s0
 80156ac:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80156b0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80156b4:	edd3 7a00 	vldr	s15, [r3]
 80156b8:	ee27 8a27 	vmul.f32	s16, s14, s15
 80156bc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80156c0:	2103      	movs	r1, #3
 80156c2:	4618      	mov	r0, r3
 80156c4:	f7fd f880 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 80156c8:	eeb0 7a40 	vmov.f32	s14, s0
 80156cc:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80156d0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80156d4:	edd3 7a00 	vldr	s15, [r3]
 80156d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80156dc:	ee78 7a27 	vadd.f32	s15, s16, s15
	}};
 80156e0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80156e4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80156e8:	edc3 7a06 	vstr	s15, [r3, #24]
        x*q(3) - z*q(1) , x*q(2) -2.0f*y*q(1) - z*q(0) , x*q(1) + z*q(3) , x*q(0) - 2.0f*y*q(3) + z*q(2),
 80156ec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80156f0:	2100      	movs	r1, #0
 80156f2:	4618      	mov	r0, r3
 80156f4:	f7fd f868 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 80156f8:	eeb0 7a40 	vmov.f32	s14, s0
 80156fc:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8015700:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8015704:	edd3 7a00 	vldr	s15, [r3]
 8015708:	ee27 8a27 	vmul.f32	s16, s14, s15
 801570c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8015710:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8015714:	edd3 7a00 	vldr	s15, [r3]
 8015718:	ee77 8aa7 	vadd.f32	s17, s15, s15
 801571c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8015720:	2103      	movs	r1, #3
 8015722:	4618      	mov	r0, r3
 8015724:	f7fd f850 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8015728:	eef0 7a40 	vmov.f32	s15, s0
 801572c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8015730:	ee38 8a67 	vsub.f32	s16, s16, s15
 8015734:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8015738:	2102      	movs	r1, #2
 801573a:	4618      	mov	r0, r3
 801573c:	f7fd f844 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8015740:	eeb0 7a40 	vmov.f32	s14, s0
 8015744:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8015748:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 801574c:	edd3 7a00 	vldr	s15, [r3]
 8015750:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015754:	ee78 7a27 	vadd.f32	s15, s16, s15
	}};
 8015758:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 801575c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8015760:	edc3 7a07 	vstr	s15, [r3, #28]
        -x*q(2) + y*q(1) , x*q(3) + y*q(0) -2.0f*z*q(1) , -x*q(0) + y*q(3) - 2.0f*z*q(2) , x*q(1) + y*q(2)
 8015764:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8015768:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 801576c:	edd3 7a00 	vldr	s15, [r3]
 8015770:	eeb1 8a67 	vneg.f32	s16, s15
 8015774:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8015778:	2102      	movs	r1, #2
 801577a:	4618      	mov	r0, r3
 801577c:	f7fd f824 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8015780:	eef0 7a40 	vmov.f32	s15, s0
 8015784:	ee28 8a27 	vmul.f32	s16, s16, s15
 8015788:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801578c:	2101      	movs	r1, #1
 801578e:	4618      	mov	r0, r3
 8015790:	f7fd f81a 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8015794:	eeb0 7a40 	vmov.f32	s14, s0
 8015798:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 801579c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80157a0:	edd3 7a00 	vldr	s15, [r3]
 80157a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80157a8:	ee78 7a27 	vadd.f32	s15, s16, s15
	}};
 80157ac:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80157b0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80157b4:	edc3 7a08 	vstr	s15, [r3, #32]
        -x*q(2) + y*q(1) , x*q(3) + y*q(0) -2.0f*z*q(1) , -x*q(0) + y*q(3) - 2.0f*z*q(2) , x*q(1) + y*q(2)
 80157b8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80157bc:	2103      	movs	r1, #3
 80157be:	4618      	mov	r0, r3
 80157c0:	f7fd f802 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 80157c4:	eeb0 7a40 	vmov.f32	s14, s0
 80157c8:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80157cc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80157d0:	edd3 7a00 	vldr	s15, [r3]
 80157d4:	ee27 8a27 	vmul.f32	s16, s14, s15
 80157d8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80157dc:	2100      	movs	r1, #0
 80157de:	4618      	mov	r0, r3
 80157e0:	f7fc fff2 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 80157e4:	eeb0 7a40 	vmov.f32	s14, s0
 80157e8:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80157ec:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80157f0:	edd3 7a00 	vldr	s15, [r3]
 80157f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80157f8:	ee38 8a27 	vadd.f32	s16, s16, s15
 80157fc:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8015800:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8015804:	edd3 7a00 	vldr	s15, [r3]
 8015808:	ee77 8aa7 	vadd.f32	s17, s15, s15
 801580c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8015810:	2101      	movs	r1, #1
 8015812:	4618      	mov	r0, r3
 8015814:	f7fc ffd8 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8015818:	eef0 7a40 	vmov.f32	s15, s0
 801581c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8015820:	ee78 7a67 	vsub.f32	s15, s16, s15
	}};
 8015824:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8015828:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 801582c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
        -x*q(2) + y*q(1) , x*q(3) + y*q(0) -2.0f*z*q(1) , -x*q(0) + y*q(3) - 2.0f*z*q(2) , x*q(1) + y*q(2)
 8015830:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8015834:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8015838:	edd3 7a00 	vldr	s15, [r3]
 801583c:	eeb1 8a67 	vneg.f32	s16, s15
 8015840:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8015844:	2100      	movs	r1, #0
 8015846:	4618      	mov	r0, r3
 8015848:	f7fc ffbe 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 801584c:	eef0 7a40 	vmov.f32	s15, s0
 8015850:	ee28 8a27 	vmul.f32	s16, s16, s15
 8015854:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8015858:	2103      	movs	r1, #3
 801585a:	4618      	mov	r0, r3
 801585c:	f7fc ffb4 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8015860:	eeb0 7a40 	vmov.f32	s14, s0
 8015864:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8015868:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 801586c:	edd3 7a00 	vldr	s15, [r3]
 8015870:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015874:	ee38 8a27 	vadd.f32	s16, s16, s15
 8015878:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 801587c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8015880:	edd3 7a00 	vldr	s15, [r3]
 8015884:	ee77 8aa7 	vadd.f32	s17, s15, s15
 8015888:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801588c:	2102      	movs	r1, #2
 801588e:	4618      	mov	r0, r3
 8015890:	f7fc ff9a 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 8015894:	eef0 7a40 	vmov.f32	s15, s0
 8015898:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801589c:	ee78 7a67 	vsub.f32	s15, s16, s15
	}};
 80158a0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80158a4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80158a8:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        -x*q(2) + y*q(1) , x*q(3) + y*q(0) -2.0f*z*q(1) , -x*q(0) + y*q(3) - 2.0f*z*q(2) , x*q(1) + y*q(2)
 80158ac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80158b0:	2101      	movs	r1, #1
 80158b2:	4618      	mov	r0, r3
 80158b4:	f7fc ff88 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 80158b8:	eeb0 7a40 	vmov.f32	s14, s0
 80158bc:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80158c0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80158c4:	edd3 7a00 	vldr	s15, [r3]
 80158c8:	ee27 8a27 	vmul.f32	s16, s14, s15
 80158cc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80158d0:	2102      	movs	r1, #2
 80158d2:	4618      	mov	r0, r3
 80158d4:	f7fc ff78 	bl	80127c8 <_ZNK3Mat8V_VectorILt4EEclEt>
 80158d8:	eeb0 7a40 	vmov.f32	s14, s0
 80158dc:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80158e0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80158e4:	edd3 7a00 	vldr	s15, [r3]
 80158e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80158ec:	ee78 7a27 	vadd.f32	s15, s16, s15
	}};
 80158f0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80158f4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80158f8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
 80158fc:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8015900:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015904:	4611      	mov	r1, r2
 8015906:	4618      	mov	r0, r3
 8015908:	f7fb fea5 	bl	8011656 <_ZN3Mat6MatrixILt3ELt4EEC1ERKSt5arrayIfLj12EE>
	result = a_a*_orientationControlCov*a_a.Transposed() + a_q*_AHRSKalman.GetNoiseCovariance()*a_q.Transposed();
 801590c:	4b2e      	ldr	r3, [pc, #184]	; (80159c8 <_ZNK10Algorithms15FusionAlgorithm16_GetGlobalAccCovEfff+0x6c8>)
 801590e:	6819      	ldr	r1, [r3, #0]
 8015910:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8015914:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8015918:	681b      	ldr	r3, [r3, #0]
 801591a:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 801591e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8015922:	4618      	mov	r0, r3
 8015924:	f000 f865 	bl	80159f2 <_ZNK3Mat6MatrixILt3ELt3EEmlILt3EEENS0_ILt3EXT_EEERKS3_>
 8015928:	4b27      	ldr	r3, [pc, #156]	; (80159c8 <_ZNK10Algorithms15FusionAlgorithm16_GetGlobalAccCovEfff+0x6c8>)
 801592a:	681a      	ldr	r2, [r3, #0]
 801592c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8015930:	4611      	mov	r1, r2
 8015932:	4618      	mov	r0, r3
 8015934:	f000 f870 	bl	8015a18 <_ZNK3Mat6MatrixILt3ELt3EE10TransposedEv>
 8015938:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801593c:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8015940:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 8015944:	4618      	mov	r0, r3
 8015946:	f000 f854 	bl	80159f2 <_ZNK3Mat6MatrixILt3ELt3EEmlILt3EEENS0_ILt3EXT_EEERKS3_>
 801594a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 801594e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8015952:	681b      	ldr	r3, [r3, #0]
 8015954:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8015958:	4618      	mov	r0, r3
 801595a:	f7f9 fd2a 	bl	800f3b2 <_ZNK10Algorithms10AHRSKalman18GetNoiseCovarianceEv>
 801595e:	4602      	mov	r2, r0
 8015960:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8015964:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8015968:	4618      	mov	r0, r3
 801596a:	f7fb fe8b 	bl	8011684 <_ZNK3Mat6MatrixILt3ELt4EEmlILt4EEENS0_ILt3EXT_EEERKNS0_ILt4EXT_EEE>
 801596e:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8015972:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8015976:	4611      	mov	r1, r2
 8015978:	4618      	mov	r0, r3
 801597a:	f7fb fe96 	bl	80116aa <_ZNK3Mat6MatrixILt3ELt4EE10TransposedEv>
 801597e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8015982:	f507 72be 	add.w	r2, r7, #380	; 0x17c
 8015986:	f507 71a6 	add.w	r1, r7, #332	; 0x14c
 801598a:	4618      	mov	r0, r3
 801598c:	f7fb febd 	bl	801170a <_ZNK3Mat6MatrixILt3ELt4EEmlILt3EEENS0_ILt3EXT_EEERKNS0_ILt4EXT_EEE>
 8015990:	4c0e      	ldr	r4, [pc, #56]	; (80159cc <_ZNK10Algorithms15FusionAlgorithm16_GetGlobalAccCovEfff+0x6cc>)
 8015992:	463b      	mov	r3, r7
 8015994:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8015998:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 801599c:	4618      	mov	r0, r3
 801599e:	f7fb fec7 	bl	8011730 <_ZNK3Mat6MatrixILt3ELt3EEplERKS1_>
 80159a2:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80159a6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80159aa:	461d      	mov	r5, r3
 80159ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80159ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80159b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80159b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80159b4:	682b      	ldr	r3, [r5, #0]
 80159b6:	6023      	str	r3, [r4, #0]
	return result;
 80159b8:	4b04      	ldr	r3, [pc, #16]	; (80159cc <_ZNK10Algorithms15FusionAlgorithm16_GetGlobalAccCovEfff+0x6cc>)
}
 80159ba:	4618      	mov	r0, r3
 80159bc:	f507 77d8 	add.w	r7, r7, #432	; 0x1b0
 80159c0:	46bd      	mov	sp, r7
 80159c2:	ecbd 8b02 	vpop	{d8}
 80159c6:	bdb0      	pop	{r4, r5, r7, pc}
 80159c8:	240055d0 	.word	0x240055d0
 80159cc:	240055a8 	.word	0x240055a8

080159d0 <_ZN3Mat8V_VectorILt3EEclEt>:
 80159d0:	b580      	push	{r7, lr}
 80159d2:	b082      	sub	sp, #8
 80159d4:	af00      	add	r7, sp, #0
 80159d6:	6078      	str	r0, [r7, #4]
 80159d8:	460b      	mov	r3, r1
 80159da:	807b      	strh	r3, [r7, #2]
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	887a      	ldrh	r2, [r7, #2]
 80159e0:	4611      	mov	r1, r2
 80159e2:	4618      	mov	r0, r3
 80159e4:	f7f7 feda 	bl	800d79c <_ZNSt5arrayIfLj3EEixEj>
 80159e8:	4603      	mov	r3, r0
 80159ea:	4618      	mov	r0, r3
 80159ec:	3708      	adds	r7, #8
 80159ee:	46bd      	mov	sp, r7
 80159f0:	bd80      	pop	{r7, pc}

080159f2 <_ZNK3Mat6MatrixILt3ELt3EEmlILt3EEENS0_ILt3EXT_EEERKS3_>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 80159f2:	b580      	push	{r7, lr}
 80159f4:	b084      	sub	sp, #16
 80159f6:	af00      	add	r7, sp, #0
 80159f8:	60f8      	str	r0, [r7, #12]
 80159fa:	60b9      	str	r1, [r7, #8]
 80159fc:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 80159fe:	68f8      	ldr	r0, [r7, #12]
 8015a00:	f7f7 fcea 	bl	800d3d8 <_ZN3Mat6MatrixILt3ELt3EEC1Ev>
	Multiply(other, result);
 8015a04:	68fa      	ldr	r2, [r7, #12]
 8015a06:	6879      	ldr	r1, [r7, #4]
 8015a08:	68b8      	ldr	r0, [r7, #8]
 8015a0a:	f000 f835 	bl	8015a78 <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERS3_>
	return result;
 8015a0e:	bf00      	nop
}
 8015a10:	68f8      	ldr	r0, [r7, #12]
 8015a12:	3710      	adds	r7, #16
 8015a14:	46bd      	mov	sp, r7
 8015a16:	bd80      	pop	{r7, pc}

08015a18 <_ZNK3Mat6MatrixILt3ELt3EE10TransposedEv>:
Matrix<width, heigth> Matrix<heigth, width>::Transposed() const
 8015a18:	b590      	push	{r4, r7, lr}
 8015a1a:	b085      	sub	sp, #20
 8015a1c:	af00      	add	r7, sp, #0
 8015a1e:	6078      	str	r0, [r7, #4]
 8015a20:	6039      	str	r1, [r7, #0]
	Matrix<width, heigth> result;
 8015a22:	6878      	ldr	r0, [r7, #4]
 8015a24:	f7f7 fcd8 	bl	800d3d8 <_ZN3Mat6MatrixILt3ELt3EEC1Ev>
	for(u_short r = 0; r < width; ++r)
 8015a28:	2300      	movs	r3, #0
 8015a2a:	81fb      	strh	r3, [r7, #14]
 8015a2c:	e01c      	b.n	8015a68 <_ZNK3Mat6MatrixILt3ELt3EE10TransposedEv+0x50>
		for(u_short c = 0; c < heigth; ++c)
 8015a2e:	2300      	movs	r3, #0
 8015a30:	81bb      	strh	r3, [r7, #12]
 8015a32:	e013      	b.n	8015a5c <_ZNK3Mat6MatrixILt3ELt3EE10TransposedEv+0x44>
			result(r, c) = operator()(c, r);
 8015a34:	89ba      	ldrh	r2, [r7, #12]
 8015a36:	89fb      	ldrh	r3, [r7, #14]
 8015a38:	4619      	mov	r1, r3
 8015a3a:	6878      	ldr	r0, [r7, #4]
 8015a3c:	f7f7 fe60 	bl	800d700 <_ZN3Mat6MatrixILt3ELt3EEclEtt>
 8015a40:	4604      	mov	r4, r0
 8015a42:	89fa      	ldrh	r2, [r7, #14]
 8015a44:	89bb      	ldrh	r3, [r7, #12]
 8015a46:	4619      	mov	r1, r3
 8015a48:	6838      	ldr	r0, [r7, #0]
 8015a4a:	f7f8 f839 	bl	800dac0 <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 8015a4e:	eef0 7a40 	vmov.f32	s15, s0
 8015a52:	edc4 7a00 	vstr	s15, [r4]
		for(u_short c = 0; c < heigth; ++c)
 8015a56:	89bb      	ldrh	r3, [r7, #12]
 8015a58:	3301      	adds	r3, #1
 8015a5a:	81bb      	strh	r3, [r7, #12]
 8015a5c:	89bb      	ldrh	r3, [r7, #12]
 8015a5e:	2b02      	cmp	r3, #2
 8015a60:	d9e8      	bls.n	8015a34 <_ZNK3Mat6MatrixILt3ELt3EE10TransposedEv+0x1c>
	for(u_short r = 0; r < width; ++r)
 8015a62:	89fb      	ldrh	r3, [r7, #14]
 8015a64:	3301      	adds	r3, #1
 8015a66:	81fb      	strh	r3, [r7, #14]
 8015a68:	89fb      	ldrh	r3, [r7, #14]
 8015a6a:	2b02      	cmp	r3, #2
 8015a6c:	d9df      	bls.n	8015a2e <_ZNK3Mat6MatrixILt3ELt3EE10TransposedEv+0x16>
	return result;
 8015a6e:	bf00      	nop
}
 8015a70:	6878      	ldr	r0, [r7, #4]
 8015a72:	3714      	adds	r7, #20
 8015a74:	46bd      	mov	sp, r7
 8015a76:	bd90      	pop	{r4, r7, pc}

08015a78 <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERS3_>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 8015a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015a7a:	b09b      	sub	sp, #108	; 0x6c
 8015a7c:	af00      	add	r7, sp, #0
 8015a7e:	60f8      	str	r0, [r7, #12]
 8015a80:	60b9      	str	r1, [r7, #8]
 8015a82:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 8015a84:	2300      	movs	r3, #0
 8015a86:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8015a8a:	e02d      	b.n	8015ae8 <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERS3_+0x70>
		for(u_short col = 0; col < width; ++col)
 8015a8c:	2300      	movs	r3, #0
 8015a8e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8015a92:	e020      	b.n	8015ad6 <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERS3_+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 8015a94:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8015a98:	f107 0314 	add.w	r3, r7, #20
 8015a9c:	4611      	mov	r1, r2
 8015a9e:	4618      	mov	r0, r3
 8015aa0:	f7f7 ffff 	bl	800daa2 <_ZNSt5arrayIS_IfLj3EELj3EEixEj>
 8015aa4:	4602      	mov	r2, r0
 8015aa6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8015aaa:	4619      	mov	r1, r3
 8015aac:	4610      	mov	r0, r2
 8015aae:	f7f7 fe75 	bl	800d79c <_ZNSt5arrayIfLj3EEixEj>
 8015ab2:	4604      	mov	r4, r0
 8015ab4:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8015ab8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8015abc:	4619      	mov	r1, r3
 8015abe:	68f8      	ldr	r0, [r7, #12]
 8015ac0:	f7f7 fffe 	bl	800dac0 <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 8015ac4:	eef0 7a40 	vmov.f32	s15, s0
 8015ac8:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 8015acc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8015ad0:	3301      	adds	r3, #1
 8015ad2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8015ad6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8015ada:	2b02      	cmp	r3, #2
 8015adc:	d9da      	bls.n	8015a94 <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERS3_+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 8015ade:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8015ae2:	3301      	adds	r3, #1
 8015ae4:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8015ae8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8015aec:	2b02      	cmp	r3, #2
 8015aee:	d9cd      	bls.n	8015a8c <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERS3_+0x14>
	for(u_short col = 0; col < other_width; ++col)
 8015af0:	2300      	movs	r3, #0
 8015af2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8015af6:	e02d      	b.n	8015b54 <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERS3_+0xdc>
		for(u_short row = 0; row < width; ++row)
 8015af8:	2300      	movs	r3, #0
 8015afa:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8015afe:	e020      	b.n	8015b42 <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERS3_+0xca>
			other_columns[col][row] = other(row, col);
 8015b00:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8015b04:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015b08:	4611      	mov	r1, r2
 8015b0a:	4618      	mov	r0, r3
 8015b0c:	f7f7 ffc9 	bl	800daa2 <_ZNSt5arrayIS_IfLj3EELj3EEixEj>
 8015b10:	4602      	mov	r2, r0
 8015b12:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8015b16:	4619      	mov	r1, r3
 8015b18:	4610      	mov	r0, r2
 8015b1a:	f7f7 fe3f 	bl	800d79c <_ZNSt5arrayIfLj3EEixEj>
 8015b1e:	4604      	mov	r4, r0
 8015b20:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8015b24:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8015b28:	4619      	mov	r1, r3
 8015b2a:	68b8      	ldr	r0, [r7, #8]
 8015b2c:	f7f7 ffc8 	bl	800dac0 <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 8015b30:	eef0 7a40 	vmov.f32	s15, s0
 8015b34:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 8015b38:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8015b3c:	3301      	adds	r3, #1
 8015b3e:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8015b42:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8015b46:	2b02      	cmp	r3, #2
 8015b48:	d9da      	bls.n	8015b00 <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERS3_+0x88>
	for(u_short col = 0; col < other_width; ++col)
 8015b4a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8015b4e:	3301      	adds	r3, #1
 8015b50:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8015b54:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8015b58:	2b02      	cmp	r3, #2
 8015b5a:	d9cd      	bls.n	8015af8 <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERS3_+0x80>
	for(u_short row = 0; row < heigth; ++row)
 8015b5c:	2300      	movs	r3, #0
 8015b5e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8015b62:	e034      	b.n	8015bce <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERS3_+0x156>
		for(u_short col = 0; col < other_width; ++col)
 8015b64:	2300      	movs	r3, #0
 8015b66:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8015b6a:	e027      	b.n	8015bbc <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERS3_+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 8015b6c:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8015b70:	f107 0314 	add.w	r3, r7, #20
 8015b74:	4611      	mov	r1, r2
 8015b76:	4618      	mov	r0, r3
 8015b78:	f7f7 ff93 	bl	800daa2 <_ZNSt5arrayIS_IfLj3EELj3EEixEj>
 8015b7c:	4605      	mov	r5, r0
 8015b7e:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8015b82:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015b86:	4611      	mov	r1, r2
 8015b88:	4618      	mov	r0, r3
 8015b8a:	f7f7 ff8a 	bl	800daa2 <_ZNSt5arrayIS_IfLj3EELj3EEixEj>
 8015b8e:	4606      	mov	r6, r0
 8015b90:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8015b94:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8015b98:	4619      	mov	r1, r3
 8015b9a:	6878      	ldr	r0, [r7, #4]
 8015b9c:	f7f7 fdb0 	bl	800d700 <_ZN3Mat6MatrixILt3ELt3EEclEtt>
 8015ba0:	4604      	mov	r4, r0
 8015ba2:	4631      	mov	r1, r6
 8015ba4:	4628      	mov	r0, r5
 8015ba6:	f7f7 ffd1 	bl	800db4c <_ZN3Mat13Multiply_rowsILj3EEEfRKSt5arrayIfXT_EES4_>
 8015baa:	eef0 7a40 	vmov.f32	s15, s0
 8015bae:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 8015bb2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8015bb6:	3301      	adds	r3, #1
 8015bb8:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8015bbc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8015bc0:	2b02      	cmp	r3, #2
 8015bc2:	d9d3      	bls.n	8015b6c <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERS3_+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 8015bc4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8015bc8:	3301      	adds	r3, #1
 8015bca:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8015bce:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8015bd2:	2b02      	cmp	r3, #2
 8015bd4:	d9c6      	bls.n	8015b64 <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERS3_+0xec>
}
 8015bd6:	bf00      	nop
 8015bd8:	bf00      	nop
 8015bda:	376c      	adds	r7, #108	; 0x6c
 8015bdc:	46bd      	mov	sp, r7
 8015bde:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015be0 <_ZN3Mat10QuaternionpLERKS0_>:

namespace Mat
{

Quaternion& Quaternion::operator+=(const Quaternion& other)
{
 8015be0:	b480      	push	{r7}
 8015be2:	b083      	sub	sp, #12
 8015be4:	af00      	add	r7, sp, #0
 8015be6:	6078      	str	r0, [r7, #4]
 8015be8:	6039      	str	r1, [r7, #0]
	w += other.w;
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	ed93 7a00 	vldr	s14, [r3]
 8015bf0:	683b      	ldr	r3, [r7, #0]
 8015bf2:	edd3 7a00 	vldr	s15, [r3]
 8015bf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	edc3 7a00 	vstr	s15, [r3]
	x += other.x;
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	ed93 7a01 	vldr	s14, [r3, #4]
 8015c06:	683b      	ldr	r3, [r7, #0]
 8015c08:	edd3 7a01 	vldr	s15, [r3, #4]
 8015c0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015c10:	687b      	ldr	r3, [r7, #4]
 8015c12:	edc3 7a01 	vstr	s15, [r3, #4]
	y += other.y;
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	ed93 7a02 	vldr	s14, [r3, #8]
 8015c1c:	683b      	ldr	r3, [r7, #0]
 8015c1e:	edd3 7a02 	vldr	s15, [r3, #8]
 8015c22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	edc3 7a02 	vstr	s15, [r3, #8]
	z += other.z;
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	ed93 7a03 	vldr	s14, [r3, #12]
 8015c32:	683b      	ldr	r3, [r7, #0]
 8015c34:	edd3 7a03 	vldr	s15, [r3, #12]
 8015c38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	edc3 7a03 	vstr	s15, [r3, #12]
	return *this;
 8015c42:	687b      	ldr	r3, [r7, #4]
}
 8015c44:	4618      	mov	r0, r3
 8015c46:	370c      	adds	r7, #12
 8015c48:	46bd      	mov	sp, r7
 8015c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c4e:	4770      	bx	lr

08015c50 <_ZN3Mat10QuaternionmLEf>:
	*this = operator*(other);
	return *this;
}

Quaternion& Quaternion::operator*=(float f)
{
 8015c50:	b480      	push	{r7}
 8015c52:	b083      	sub	sp, #12
 8015c54:	af00      	add	r7, sp, #0
 8015c56:	6078      	str	r0, [r7, #4]
 8015c58:	ed87 0a00 	vstr	s0, [r7]
	w *= f;
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	ed93 7a00 	vldr	s14, [r3]
 8015c62:	edd7 7a00 	vldr	s15, [r7]
 8015c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	edc3 7a00 	vstr	s15, [r3]
	x *= f;
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	ed93 7a01 	vldr	s14, [r3, #4]
 8015c76:	edd7 7a00 	vldr	s15, [r7]
 8015c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	edc3 7a01 	vstr	s15, [r3, #4]
	y *= f;
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	ed93 7a02 	vldr	s14, [r3, #8]
 8015c8a:	edd7 7a00 	vldr	s15, [r7]
 8015c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	edc3 7a02 	vstr	s15, [r3, #8]
	z *= f;
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	ed93 7a03 	vldr	s14, [r3, #12]
 8015c9e:	edd7 7a00 	vldr	s15, [r7]
 8015ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	edc3 7a03 	vstr	s15, [r3, #12]
	return *this;
 8015cac:	687b      	ldr	r3, [r7, #4]
}
 8015cae:	4618      	mov	r0, r3
 8015cb0:	370c      	adds	r7, #12
 8015cb2:	46bd      	mov	sp, r7
 8015cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cb8:	4770      	bx	lr

08015cba <_ZN3Mat10Quaternion9NormaliseEv>:

Quaternion& Quaternion::Normalise()
{
 8015cba:	b580      	push	{r7, lr}
 8015cbc:	b084      	sub	sp, #16
 8015cbe:	af00      	add	r7, sp, #0
 8015cc0:	6078      	str	r0, [r7, #4]
	float norm = Norm();
 8015cc2:	6878      	ldr	r0, [r7, #4]
 8015cc4:	f000 f9ac 	bl	8016020 <_ZNK3Mat10Quaternion4NormEv>
 8015cc8:	ed87 0a03 	vstr	s0, [r7, #12]
	if(norm != 0.0f) this->operator *=((1.0f / norm));
 8015ccc:	edd7 7a03 	vldr	s15, [r7, #12]
 8015cd0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8015cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cd8:	d00a      	beq.n	8015cf0 <_ZN3Mat10Quaternion9NormaliseEv+0x36>
 8015cda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015cde:	edd7 7a03 	vldr	s15, [r7, #12]
 8015ce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015ce6:	eeb0 0a47 	vmov.f32	s0, s14
 8015cea:	6878      	ldr	r0, [r7, #4]
 8015cec:	f7ff ffb0 	bl	8015c50 <_ZN3Mat10QuaternionmLEf>
	return *this;
 8015cf0:	687b      	ldr	r3, [r7, #4]
}
 8015cf2:	4618      	mov	r0, r3
 8015cf4:	3710      	adds	r7, #16
 8015cf6:	46bd      	mov	sp, r7
 8015cf8:	bd80      	pop	{r7, pc}

08015cfa <_ZNK3Mat10QuaternionplERKS0_>:

Quaternion Quaternion::operator+(const Quaternion& other) const
{
 8015cfa:	b590      	push	{r4, r7, lr}
 8015cfc:	b08f      	sub	sp, #60	; 0x3c
 8015cfe:	af00      	add	r7, sp, #0
 8015d00:	6178      	str	r0, [r7, #20]
 8015d02:	6139      	str	r1, [r7, #16]
	Quaternion result = *this;
 8015d04:	697b      	ldr	r3, [r7, #20]
 8015d06:	f107 0418 	add.w	r4, r7, #24
 8015d0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015d0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	result += other;
 8015d10:	f107 0318 	add.w	r3, r7, #24
 8015d14:	6939      	ldr	r1, [r7, #16]
 8015d16:	4618      	mov	r0, r3
 8015d18:	f7ff ff62 	bl	8015be0 <_ZN3Mat10QuaternionpLERKS0_>
	return result;
 8015d1c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8015d20:	f107 0318 	add.w	r3, r7, #24
 8015d24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015d26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8015d2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015d2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015d2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015d32:	ee06 0a10 	vmov	s12, r0
 8015d36:	ee06 1a90 	vmov	s13, r1
 8015d3a:	ee07 2a10 	vmov	s14, r2
 8015d3e:	ee07 3a90 	vmov	s15, r3
}
 8015d42:	eeb0 0a46 	vmov.f32	s0, s12
 8015d46:	eef0 0a66 	vmov.f32	s1, s13
 8015d4a:	eeb0 1a47 	vmov.f32	s2, s14
 8015d4e:	eef0 1a67 	vmov.f32	s3, s15
 8015d52:	373c      	adds	r7, #60	; 0x3c
 8015d54:	46bd      	mov	sp, r7
 8015d56:	bd90      	pop	{r4, r7, pc}

08015d58 <_ZNK3Mat10QuaternionmlERKS0_>:
	result -= other;
	return result;
}

Quaternion Quaternion::operator*(const Quaternion& other) const
{
 8015d58:	b490      	push	{r4, r7}
 8015d5a:	b08e      	sub	sp, #56	; 0x38
 8015d5c:	af00      	add	r7, sp, #0
 8015d5e:	6178      	str	r0, [r7, #20]
 8015d60:	6139      	str	r1, [r7, #16]
	Quaternion result{};
 8015d62:	f107 0318 	add.w	r3, r7, #24
 8015d66:	2200      	movs	r2, #0
 8015d68:	601a      	str	r2, [r3, #0]
 8015d6a:	605a      	str	r2, [r3, #4]
 8015d6c:	609a      	str	r2, [r3, #8]
 8015d6e:	60da      	str	r2, [r3, #12]
	result.w = this->w*other.w - this->x*other.x - this->y*other.y - this->z*other.z;
 8015d70:	697b      	ldr	r3, [r7, #20]
 8015d72:	ed93 7a00 	vldr	s14, [r3]
 8015d76:	693b      	ldr	r3, [r7, #16]
 8015d78:	edd3 7a00 	vldr	s15, [r3]
 8015d7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015d80:	697b      	ldr	r3, [r7, #20]
 8015d82:	edd3 6a01 	vldr	s13, [r3, #4]
 8015d86:	693b      	ldr	r3, [r7, #16]
 8015d88:	edd3 7a01 	vldr	s15, [r3, #4]
 8015d8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015d90:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015d94:	697b      	ldr	r3, [r7, #20]
 8015d96:	edd3 6a02 	vldr	s13, [r3, #8]
 8015d9a:	693b      	ldr	r3, [r7, #16]
 8015d9c:	edd3 7a02 	vldr	s15, [r3, #8]
 8015da0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015da4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015da8:	697b      	ldr	r3, [r7, #20]
 8015daa:	edd3 6a03 	vldr	s13, [r3, #12]
 8015dae:	693b      	ldr	r3, [r7, #16]
 8015db0:	edd3 7a03 	vldr	s15, [r3, #12]
 8015db4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015db8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015dbc:	edc7 7a06 	vstr	s15, [r7, #24]
	result.x = this->w*other.x + this->x*other.w + this->y*other.z - this->z*other.y;
 8015dc0:	697b      	ldr	r3, [r7, #20]
 8015dc2:	ed93 7a00 	vldr	s14, [r3]
 8015dc6:	693b      	ldr	r3, [r7, #16]
 8015dc8:	edd3 7a01 	vldr	s15, [r3, #4]
 8015dcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015dd0:	697b      	ldr	r3, [r7, #20]
 8015dd2:	edd3 6a01 	vldr	s13, [r3, #4]
 8015dd6:	693b      	ldr	r3, [r7, #16]
 8015dd8:	edd3 7a00 	vldr	s15, [r3]
 8015ddc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015de0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015de4:	697b      	ldr	r3, [r7, #20]
 8015de6:	edd3 6a02 	vldr	s13, [r3, #8]
 8015dea:	693b      	ldr	r3, [r7, #16]
 8015dec:	edd3 7a03 	vldr	s15, [r3, #12]
 8015df0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015df4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015df8:	697b      	ldr	r3, [r7, #20]
 8015dfa:	edd3 6a03 	vldr	s13, [r3, #12]
 8015dfe:	693b      	ldr	r3, [r7, #16]
 8015e00:	edd3 7a02 	vldr	s15, [r3, #8]
 8015e04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015e08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015e0c:	edc7 7a07 	vstr	s15, [r7, #28]
	result.y = this->w*other.y - this->x*other.z + this->y*other.w + this->z*other.x;
 8015e10:	697b      	ldr	r3, [r7, #20]
 8015e12:	ed93 7a00 	vldr	s14, [r3]
 8015e16:	693b      	ldr	r3, [r7, #16]
 8015e18:	edd3 7a02 	vldr	s15, [r3, #8]
 8015e1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015e20:	697b      	ldr	r3, [r7, #20]
 8015e22:	edd3 6a01 	vldr	s13, [r3, #4]
 8015e26:	693b      	ldr	r3, [r7, #16]
 8015e28:	edd3 7a03 	vldr	s15, [r3, #12]
 8015e2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015e30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015e34:	697b      	ldr	r3, [r7, #20]
 8015e36:	edd3 6a02 	vldr	s13, [r3, #8]
 8015e3a:	693b      	ldr	r3, [r7, #16]
 8015e3c:	edd3 7a00 	vldr	s15, [r3]
 8015e40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015e44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015e48:	697b      	ldr	r3, [r7, #20]
 8015e4a:	edd3 6a03 	vldr	s13, [r3, #12]
 8015e4e:	693b      	ldr	r3, [r7, #16]
 8015e50:	edd3 7a01 	vldr	s15, [r3, #4]
 8015e54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015e58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015e5c:	edc7 7a08 	vstr	s15, [r7, #32]
	result.z = this->w*other.z + this->x*other.y - this->y*other.x + this->z*other.w;
 8015e60:	697b      	ldr	r3, [r7, #20]
 8015e62:	ed93 7a00 	vldr	s14, [r3]
 8015e66:	693b      	ldr	r3, [r7, #16]
 8015e68:	edd3 7a03 	vldr	s15, [r3, #12]
 8015e6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015e70:	697b      	ldr	r3, [r7, #20]
 8015e72:	edd3 6a01 	vldr	s13, [r3, #4]
 8015e76:	693b      	ldr	r3, [r7, #16]
 8015e78:	edd3 7a02 	vldr	s15, [r3, #8]
 8015e7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015e80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015e84:	697b      	ldr	r3, [r7, #20]
 8015e86:	edd3 6a02 	vldr	s13, [r3, #8]
 8015e8a:	693b      	ldr	r3, [r7, #16]
 8015e8c:	edd3 7a01 	vldr	s15, [r3, #4]
 8015e90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015e94:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015e98:	697b      	ldr	r3, [r7, #20]
 8015e9a:	edd3 6a03 	vldr	s13, [r3, #12]
 8015e9e:	693b      	ldr	r3, [r7, #16]
 8015ea0:	edd3 7a00 	vldr	s15, [r3]
 8015ea4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015ea8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015eac:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	return result;
 8015eb0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8015eb4:	f107 0318 	add.w	r3, r7, #24
 8015eb8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015eba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8015ebe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015ec0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015ec2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015ec6:	ee06 0a10 	vmov	s12, r0
 8015eca:	ee06 1a90 	vmov	s13, r1
 8015ece:	ee07 2a10 	vmov	s14, r2
 8015ed2:	ee07 3a90 	vmov	s15, r3
}
 8015ed6:	eeb0 0a46 	vmov.f32	s0, s12
 8015eda:	eef0 0a66 	vmov.f32	s1, s13
 8015ede:	eeb0 1a47 	vmov.f32	s2, s14
 8015ee2:	eef0 1a67 	vmov.f32	s3, s15
 8015ee6:	3738      	adds	r7, #56	; 0x38
 8015ee8:	46bd      	mov	sp, r7
 8015eea:	bc90      	pop	{r4, r7}
 8015eec:	4770      	bx	lr

08015eee <_ZNK3Mat10QuaternionmlEf>:

Quaternion Quaternion::operator*(float f) const
{
 8015eee:	b590      	push	{r4, r7, lr}
 8015ef0:	b08f      	sub	sp, #60	; 0x3c
 8015ef2:	af00      	add	r7, sp, #0
 8015ef4:	6178      	str	r0, [r7, #20]
 8015ef6:	ed87 0a04 	vstr	s0, [r7, #16]
	Quaternion result = *this;
 8015efa:	697b      	ldr	r3, [r7, #20]
 8015efc:	f107 0418 	add.w	r4, r7, #24
 8015f00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015f02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	result *= f;
 8015f06:	f107 0318 	add.w	r3, r7, #24
 8015f0a:	ed97 0a04 	vldr	s0, [r7, #16]
 8015f0e:	4618      	mov	r0, r3
 8015f10:	f7ff fe9e 	bl	8015c50 <_ZN3Mat10QuaternionmLEf>
	return result;
 8015f14:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8015f18:	f107 0318 	add.w	r3, r7, #24
 8015f1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015f1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8015f22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015f24:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015f26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015f2a:	ee06 0a10 	vmov	s12, r0
 8015f2e:	ee06 1a90 	vmov	s13, r1
 8015f32:	ee07 2a10 	vmov	s14, r2
 8015f36:	ee07 3a90 	vmov	s15, r3
}
 8015f3a:	eeb0 0a46 	vmov.f32	s0, s12
 8015f3e:	eef0 0a66 	vmov.f32	s1, s13
 8015f42:	eeb0 1a47 	vmov.f32	s2, s14
 8015f46:	eef0 1a67 	vmov.f32	s3, s15
 8015f4a:	373c      	adds	r7, #60	; 0x3c
 8015f4c:	46bd      	mov	sp, r7
 8015f4e:	bd90      	pop	{r4, r7, pc}

08015f50 <_ZNK3Mat10Quaternion9ConjugateEv>:

Quaternion Quaternion::Conjugate() const
{
 8015f50:	b490      	push	{r4, r7}
 8015f52:	b08e      	sub	sp, #56	; 0x38
 8015f54:	af00      	add	r7, sp, #0
 8015f56:	6178      	str	r0, [r7, #20]
	Quaternion result = *this;
 8015f58:	697b      	ldr	r3, [r7, #20]
 8015f5a:	f107 0418 	add.w	r4, r7, #24
 8015f5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015f60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	result.x*= -1.0f;
 8015f64:	edd7 7a07 	vldr	s15, [r7, #28]
 8015f68:	eef1 7a67 	vneg.f32	s15, s15
 8015f6c:	edc7 7a07 	vstr	s15, [r7, #28]
	result.y*= -1.0f;
 8015f70:	edd7 7a08 	vldr	s15, [r7, #32]
 8015f74:	eef1 7a67 	vneg.f32	s15, s15
 8015f78:	edc7 7a08 	vstr	s15, [r7, #32]
	result.z*= -1.0f;
 8015f7c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8015f80:	eef1 7a67 	vneg.f32	s15, s15
 8015f84:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	return result;
 8015f88:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8015f8c:	f107 0318 	add.w	r3, r7, #24
 8015f90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015f92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8015f96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015f98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015f9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015f9e:	ee06 0a10 	vmov	s12, r0
 8015fa2:	ee06 1a90 	vmov	s13, r1
 8015fa6:	ee07 2a10 	vmov	s14, r2
 8015faa:	ee07 3a90 	vmov	s15, r3
}
 8015fae:	eeb0 0a46 	vmov.f32	s0, s12
 8015fb2:	eef0 0a66 	vmov.f32	s1, s13
 8015fb6:	eeb0 1a47 	vmov.f32	s2, s14
 8015fba:	eef0 1a67 	vmov.f32	s3, s15
 8015fbe:	3738      	adds	r7, #56	; 0x38
 8015fc0:	46bd      	mov	sp, r7
 8015fc2:	bc90      	pop	{r4, r7}
 8015fc4:	4770      	bx	lr

08015fc6 <_ZNK3Mat10Quaternion10NormalisedEv>:

Quaternion Quaternion::Normalised() const
{
 8015fc6:	b590      	push	{r4, r7, lr}
 8015fc8:	b08f      	sub	sp, #60	; 0x3c
 8015fca:	af00      	add	r7, sp, #0
 8015fcc:	6178      	str	r0, [r7, #20]
	Quaternion normalised = *this;
 8015fce:	697b      	ldr	r3, [r7, #20]
 8015fd0:	f107 0418 	add.w	r4, r7, #24
 8015fd4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015fd6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	normalised.Normalise();
 8015fda:	f107 0318 	add.w	r3, r7, #24
 8015fde:	4618      	mov	r0, r3
 8015fe0:	f7ff fe6b 	bl	8015cba <_ZN3Mat10Quaternion9NormaliseEv>
	return normalised;
 8015fe4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8015fe8:	f107 0318 	add.w	r3, r7, #24
 8015fec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015fee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8015ff2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015ff4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015ff6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015ffa:	ee06 0a10 	vmov	s12, r0
 8015ffe:	ee06 1a90 	vmov	s13, r1
 8016002:	ee07 2a10 	vmov	s14, r2
 8016006:	ee07 3a90 	vmov	s15, r3
}
 801600a:	eeb0 0a46 	vmov.f32	s0, s12
 801600e:	eef0 0a66 	vmov.f32	s1, s13
 8016012:	eeb0 1a47 	vmov.f32	s2, s14
 8016016:	eef0 1a67 	vmov.f32	s3, s15
 801601a:	373c      	adds	r7, #60	; 0x3c
 801601c:	46bd      	mov	sp, r7
 801601e:	bd90      	pop	{r4, r7, pc}

08016020 <_ZNK3Mat10Quaternion4NormEv>:
	conjugate.Normalise();
	return conjugate;
}

float Quaternion::Norm() const
{
 8016020:	b580      	push	{r7, lr}
 8016022:	b082      	sub	sp, #8
 8016024:	af00      	add	r7, sp, #0
 8016026:	6078      	str	r0, [r7, #4]
	return sqrt(w*w + x*x + y*y + z*z);
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	ed93 7a00 	vldr	s14, [r3]
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	edd3 7a00 	vldr	s15, [r3]
 8016034:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	edd3 6a01 	vldr	s13, [r3, #4]
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	edd3 7a01 	vldr	s15, [r3, #4]
 8016044:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016048:	ee37 7a27 	vadd.f32	s14, s14, s15
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	edd3 6a02 	vldr	s13, [r3, #8]
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	edd3 7a02 	vldr	s15, [r3, #8]
 8016058:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801605c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	edd3 6a03 	vldr	s13, [r3, #12]
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	edd3 7a03 	vldr	s15, [r3, #12]
 801606c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016070:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016074:	eeb0 0a67 	vmov.f32	s0, s15
 8016078:	f7f8 ff66 	bl	800ef48 <_ZSt4sqrtf>
 801607c:	eef0 7a40 	vmov.f32	s15, s0
}
 8016080:	eeb0 0a67 	vmov.f32	s0, s15
 8016084:	3708      	adds	r7, #8
 8016086:	46bd      	mov	sp, r7
 8016088:	bd80      	pop	{r7, pc}
	...

0801608c <__NVIC_SetPriority>:
{
 801608c:	b480      	push	{r7}
 801608e:	b083      	sub	sp, #12
 8016090:	af00      	add	r7, sp, #0
 8016092:	4603      	mov	r3, r0
 8016094:	6039      	str	r1, [r7, #0]
 8016096:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8016098:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801609c:	2b00      	cmp	r3, #0
 801609e:	db0a      	blt.n	80160b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80160a0:	683b      	ldr	r3, [r7, #0]
 80160a2:	b2da      	uxtb	r2, r3
 80160a4:	490c      	ldr	r1, [pc, #48]	; (80160d8 <__NVIC_SetPriority+0x4c>)
 80160a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80160aa:	0112      	lsls	r2, r2, #4
 80160ac:	b2d2      	uxtb	r2, r2
 80160ae:	440b      	add	r3, r1
 80160b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80160b4:	e00a      	b.n	80160cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80160b6:	683b      	ldr	r3, [r7, #0]
 80160b8:	b2da      	uxtb	r2, r3
 80160ba:	4908      	ldr	r1, [pc, #32]	; (80160dc <__NVIC_SetPriority+0x50>)
 80160bc:	88fb      	ldrh	r3, [r7, #6]
 80160be:	f003 030f 	and.w	r3, r3, #15
 80160c2:	3b04      	subs	r3, #4
 80160c4:	0112      	lsls	r2, r2, #4
 80160c6:	b2d2      	uxtb	r2, r2
 80160c8:	440b      	add	r3, r1
 80160ca:	761a      	strb	r2, [r3, #24]
}
 80160cc:	bf00      	nop
 80160ce:	370c      	adds	r7, #12
 80160d0:	46bd      	mov	sp, r7
 80160d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160d6:	4770      	bx	lr
 80160d8:	e000e100 	.word	0xe000e100
 80160dc:	e000ed00 	.word	0xe000ed00

080160e0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80160e0:	b580      	push	{r7, lr}
 80160e2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80160e4:	4b05      	ldr	r3, [pc, #20]	; (80160fc <SysTick_Handler+0x1c>)
 80160e6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80160e8:	f001 fe8a 	bl	8017e00 <xTaskGetSchedulerState>
 80160ec:	4603      	mov	r3, r0
 80160ee:	2b01      	cmp	r3, #1
 80160f0:	d001      	beq.n	80160f6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80160f2:	f002 fc71 	bl	80189d8 <xPortSysTickHandler>
  }
}
 80160f6:	bf00      	nop
 80160f8:	bd80      	pop	{r7, pc}
 80160fa:	bf00      	nop
 80160fc:	e000e010 	.word	0xe000e010

08016100 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8016100:	b580      	push	{r7, lr}
 8016102:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8016104:	2100      	movs	r1, #0
 8016106:	f06f 0004 	mvn.w	r0, #4
 801610a:	f7ff ffbf 	bl	801608c <__NVIC_SetPriority>
#endif
}
 801610e:	bf00      	nop
 8016110:	bd80      	pop	{r7, pc}
	...

08016114 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8016114:	b480      	push	{r7}
 8016116:	b083      	sub	sp, #12
 8016118:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801611a:	f3ef 8305 	mrs	r3, IPSR
 801611e:	603b      	str	r3, [r7, #0]
  return(result);
 8016120:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016122:	2b00      	cmp	r3, #0
 8016124:	d003      	beq.n	801612e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8016126:	f06f 0305 	mvn.w	r3, #5
 801612a:	607b      	str	r3, [r7, #4]
 801612c:	e00c      	b.n	8016148 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801612e:	4b0a      	ldr	r3, [pc, #40]	; (8016158 <osKernelInitialize+0x44>)
 8016130:	681b      	ldr	r3, [r3, #0]
 8016132:	2b00      	cmp	r3, #0
 8016134:	d105      	bne.n	8016142 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8016136:	4b08      	ldr	r3, [pc, #32]	; (8016158 <osKernelInitialize+0x44>)
 8016138:	2201      	movs	r2, #1
 801613a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801613c:	2300      	movs	r3, #0
 801613e:	607b      	str	r3, [r7, #4]
 8016140:	e002      	b.n	8016148 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8016142:	f04f 33ff 	mov.w	r3, #4294967295
 8016146:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8016148:	687b      	ldr	r3, [r7, #4]
}
 801614a:	4618      	mov	r0, r3
 801614c:	370c      	adds	r7, #12
 801614e:	46bd      	mov	sp, r7
 8016150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016154:	4770      	bx	lr
 8016156:	bf00      	nop
 8016158:	240055d8 	.word	0x240055d8

0801615c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 801615c:	b580      	push	{r7, lr}
 801615e:	b082      	sub	sp, #8
 8016160:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016162:	f3ef 8305 	mrs	r3, IPSR
 8016166:	603b      	str	r3, [r7, #0]
  return(result);
 8016168:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801616a:	2b00      	cmp	r3, #0
 801616c:	d003      	beq.n	8016176 <osKernelStart+0x1a>
    stat = osErrorISR;
 801616e:	f06f 0305 	mvn.w	r3, #5
 8016172:	607b      	str	r3, [r7, #4]
 8016174:	e010      	b.n	8016198 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8016176:	4b0b      	ldr	r3, [pc, #44]	; (80161a4 <osKernelStart+0x48>)
 8016178:	681b      	ldr	r3, [r3, #0]
 801617a:	2b01      	cmp	r3, #1
 801617c:	d109      	bne.n	8016192 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801617e:	f7ff ffbf 	bl	8016100 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8016182:	4b08      	ldr	r3, [pc, #32]	; (80161a4 <osKernelStart+0x48>)
 8016184:	2202      	movs	r2, #2
 8016186:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8016188:	f001 fa2a 	bl	80175e0 <vTaskStartScheduler>
      stat = osOK;
 801618c:	2300      	movs	r3, #0
 801618e:	607b      	str	r3, [r7, #4]
 8016190:	e002      	b.n	8016198 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8016192:	f04f 33ff 	mov.w	r3, #4294967295
 8016196:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8016198:	687b      	ldr	r3, [r7, #4]
}
 801619a:	4618      	mov	r0, r3
 801619c:	3708      	adds	r7, #8
 801619e:	46bd      	mov	sp, r7
 80161a0:	bd80      	pop	{r7, pc}
 80161a2:	bf00      	nop
 80161a4:	240055d8 	.word	0x240055d8

080161a8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80161a8:	b580      	push	{r7, lr}
 80161aa:	b08e      	sub	sp, #56	; 0x38
 80161ac:	af04      	add	r7, sp, #16
 80161ae:	60f8      	str	r0, [r7, #12]
 80161b0:	60b9      	str	r1, [r7, #8]
 80161b2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80161b4:	2300      	movs	r3, #0
 80161b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80161b8:	f3ef 8305 	mrs	r3, IPSR
 80161bc:	617b      	str	r3, [r7, #20]
  return(result);
 80161be:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	d17e      	bne.n	80162c2 <osThreadNew+0x11a>
 80161c4:	68fb      	ldr	r3, [r7, #12]
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	d07b      	beq.n	80162c2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80161ca:	2380      	movs	r3, #128	; 0x80
 80161cc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80161ce:	2318      	movs	r3, #24
 80161d0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80161d2:	2300      	movs	r3, #0
 80161d4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80161d6:	f04f 33ff 	mov.w	r3, #4294967295
 80161da:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80161dc:	687b      	ldr	r3, [r7, #4]
 80161de:	2b00      	cmp	r3, #0
 80161e0:	d045      	beq.n	801626e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80161e2:	687b      	ldr	r3, [r7, #4]
 80161e4:	681b      	ldr	r3, [r3, #0]
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	d002      	beq.n	80161f0 <osThreadNew+0x48>
        name = attr->name;
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	681b      	ldr	r3, [r3, #0]
 80161ee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	699b      	ldr	r3, [r3, #24]
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	d002      	beq.n	80161fe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80161f8:	687b      	ldr	r3, [r7, #4]
 80161fa:	699b      	ldr	r3, [r3, #24]
 80161fc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80161fe:	69fb      	ldr	r3, [r7, #28]
 8016200:	2b00      	cmp	r3, #0
 8016202:	d008      	beq.n	8016216 <osThreadNew+0x6e>
 8016204:	69fb      	ldr	r3, [r7, #28]
 8016206:	2b38      	cmp	r3, #56	; 0x38
 8016208:	d805      	bhi.n	8016216 <osThreadNew+0x6e>
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	685b      	ldr	r3, [r3, #4]
 801620e:	f003 0301 	and.w	r3, r3, #1
 8016212:	2b00      	cmp	r3, #0
 8016214:	d001      	beq.n	801621a <osThreadNew+0x72>
        return (NULL);
 8016216:	2300      	movs	r3, #0
 8016218:	e054      	b.n	80162c4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	695b      	ldr	r3, [r3, #20]
 801621e:	2b00      	cmp	r3, #0
 8016220:	d003      	beq.n	801622a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	695b      	ldr	r3, [r3, #20]
 8016226:	089b      	lsrs	r3, r3, #2
 8016228:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	689b      	ldr	r3, [r3, #8]
 801622e:	2b00      	cmp	r3, #0
 8016230:	d00e      	beq.n	8016250 <osThreadNew+0xa8>
 8016232:	687b      	ldr	r3, [r7, #4]
 8016234:	68db      	ldr	r3, [r3, #12]
 8016236:	2b5b      	cmp	r3, #91	; 0x5b
 8016238:	d90a      	bls.n	8016250 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801623e:	2b00      	cmp	r3, #0
 8016240:	d006      	beq.n	8016250 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	695b      	ldr	r3, [r3, #20]
 8016246:	2b00      	cmp	r3, #0
 8016248:	d002      	beq.n	8016250 <osThreadNew+0xa8>
        mem = 1;
 801624a:	2301      	movs	r3, #1
 801624c:	61bb      	str	r3, [r7, #24]
 801624e:	e010      	b.n	8016272 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	689b      	ldr	r3, [r3, #8]
 8016254:	2b00      	cmp	r3, #0
 8016256:	d10c      	bne.n	8016272 <osThreadNew+0xca>
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	68db      	ldr	r3, [r3, #12]
 801625c:	2b00      	cmp	r3, #0
 801625e:	d108      	bne.n	8016272 <osThreadNew+0xca>
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	691b      	ldr	r3, [r3, #16]
 8016264:	2b00      	cmp	r3, #0
 8016266:	d104      	bne.n	8016272 <osThreadNew+0xca>
          mem = 0;
 8016268:	2300      	movs	r3, #0
 801626a:	61bb      	str	r3, [r7, #24]
 801626c:	e001      	b.n	8016272 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801626e:	2300      	movs	r3, #0
 8016270:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8016272:	69bb      	ldr	r3, [r7, #24]
 8016274:	2b01      	cmp	r3, #1
 8016276:	d110      	bne.n	801629a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 801627c:	687a      	ldr	r2, [r7, #4]
 801627e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8016280:	9202      	str	r2, [sp, #8]
 8016282:	9301      	str	r3, [sp, #4]
 8016284:	69fb      	ldr	r3, [r7, #28]
 8016286:	9300      	str	r3, [sp, #0]
 8016288:	68bb      	ldr	r3, [r7, #8]
 801628a:	6a3a      	ldr	r2, [r7, #32]
 801628c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801628e:	68f8      	ldr	r0, [r7, #12]
 8016290:	f000 ffe0 	bl	8017254 <xTaskCreateStatic>
 8016294:	4603      	mov	r3, r0
 8016296:	613b      	str	r3, [r7, #16]
 8016298:	e013      	b.n	80162c2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801629a:	69bb      	ldr	r3, [r7, #24]
 801629c:	2b00      	cmp	r3, #0
 801629e:	d110      	bne.n	80162c2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80162a0:	6a3b      	ldr	r3, [r7, #32]
 80162a2:	b29a      	uxth	r2, r3
 80162a4:	f107 0310 	add.w	r3, r7, #16
 80162a8:	9301      	str	r3, [sp, #4]
 80162aa:	69fb      	ldr	r3, [r7, #28]
 80162ac:	9300      	str	r3, [sp, #0]
 80162ae:	68bb      	ldr	r3, [r7, #8]
 80162b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80162b2:	68f8      	ldr	r0, [r7, #12]
 80162b4:	f001 f82b 	bl	801730e <xTaskCreate>
 80162b8:	4603      	mov	r3, r0
 80162ba:	2b01      	cmp	r3, #1
 80162bc:	d001      	beq.n	80162c2 <osThreadNew+0x11a>
            hTask = NULL;
 80162be:	2300      	movs	r3, #0
 80162c0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80162c2:	693b      	ldr	r3, [r7, #16]
}
 80162c4:	4618      	mov	r0, r3
 80162c6:	3728      	adds	r7, #40	; 0x28
 80162c8:	46bd      	mov	sp, r7
 80162ca:	bd80      	pop	{r7, pc}

080162cc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80162cc:	b580      	push	{r7, lr}
 80162ce:	b084      	sub	sp, #16
 80162d0:	af00      	add	r7, sp, #0
 80162d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80162d4:	f3ef 8305 	mrs	r3, IPSR
 80162d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80162da:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80162dc:	2b00      	cmp	r3, #0
 80162de:	d003      	beq.n	80162e8 <osDelay+0x1c>
    stat = osErrorISR;
 80162e0:	f06f 0305 	mvn.w	r3, #5
 80162e4:	60fb      	str	r3, [r7, #12]
 80162e6:	e007      	b.n	80162f8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80162e8:	2300      	movs	r3, #0
 80162ea:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	d002      	beq.n	80162f8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80162f2:	6878      	ldr	r0, [r7, #4]
 80162f4:	f001 f940 	bl	8017578 <vTaskDelay>
    }
  }

  return (stat);
 80162f8:	68fb      	ldr	r3, [r7, #12]
}
 80162fa:	4618      	mov	r0, r3
 80162fc:	3710      	adds	r7, #16
 80162fe:	46bd      	mov	sp, r7
 8016300:	bd80      	pop	{r7, pc}

08016302 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8016302:	b580      	push	{r7, lr}
 8016304:	b08a      	sub	sp, #40	; 0x28
 8016306:	af02      	add	r7, sp, #8
 8016308:	60f8      	str	r0, [r7, #12]
 801630a:	60b9      	str	r1, [r7, #8]
 801630c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 801630e:	2300      	movs	r3, #0
 8016310:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016312:	f3ef 8305 	mrs	r3, IPSR
 8016316:	613b      	str	r3, [r7, #16]
  return(result);
 8016318:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 801631a:	2b00      	cmp	r3, #0
 801631c:	d175      	bne.n	801640a <osSemaphoreNew+0x108>
 801631e:	68fb      	ldr	r3, [r7, #12]
 8016320:	2b00      	cmp	r3, #0
 8016322:	d072      	beq.n	801640a <osSemaphoreNew+0x108>
 8016324:	68ba      	ldr	r2, [r7, #8]
 8016326:	68fb      	ldr	r3, [r7, #12]
 8016328:	429a      	cmp	r2, r3
 801632a:	d86e      	bhi.n	801640a <osSemaphoreNew+0x108>
    mem = -1;
 801632c:	f04f 33ff 	mov.w	r3, #4294967295
 8016330:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	2b00      	cmp	r3, #0
 8016336:	d015      	beq.n	8016364 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	689b      	ldr	r3, [r3, #8]
 801633c:	2b00      	cmp	r3, #0
 801633e:	d006      	beq.n	801634e <osSemaphoreNew+0x4c>
 8016340:	687b      	ldr	r3, [r7, #4]
 8016342:	68db      	ldr	r3, [r3, #12]
 8016344:	2b4f      	cmp	r3, #79	; 0x4f
 8016346:	d902      	bls.n	801634e <osSemaphoreNew+0x4c>
        mem = 1;
 8016348:	2301      	movs	r3, #1
 801634a:	61bb      	str	r3, [r7, #24]
 801634c:	e00c      	b.n	8016368 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	689b      	ldr	r3, [r3, #8]
 8016352:	2b00      	cmp	r3, #0
 8016354:	d108      	bne.n	8016368 <osSemaphoreNew+0x66>
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	68db      	ldr	r3, [r3, #12]
 801635a:	2b00      	cmp	r3, #0
 801635c:	d104      	bne.n	8016368 <osSemaphoreNew+0x66>
          mem = 0;
 801635e:	2300      	movs	r3, #0
 8016360:	61bb      	str	r3, [r7, #24]
 8016362:	e001      	b.n	8016368 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8016364:	2300      	movs	r3, #0
 8016366:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8016368:	69bb      	ldr	r3, [r7, #24]
 801636a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801636e:	d04c      	beq.n	801640a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8016370:	68fb      	ldr	r3, [r7, #12]
 8016372:	2b01      	cmp	r3, #1
 8016374:	d128      	bne.n	80163c8 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8016376:	69bb      	ldr	r3, [r7, #24]
 8016378:	2b01      	cmp	r3, #1
 801637a:	d10a      	bne.n	8016392 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	689b      	ldr	r3, [r3, #8]
 8016380:	2203      	movs	r2, #3
 8016382:	9200      	str	r2, [sp, #0]
 8016384:	2200      	movs	r2, #0
 8016386:	2100      	movs	r1, #0
 8016388:	2001      	movs	r0, #1
 801638a:	f000 f986 	bl	801669a <xQueueGenericCreateStatic>
 801638e:	61f8      	str	r0, [r7, #28]
 8016390:	e005      	b.n	801639e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8016392:	2203      	movs	r2, #3
 8016394:	2100      	movs	r1, #0
 8016396:	2001      	movs	r0, #1
 8016398:	f000 f9f7 	bl	801678a <xQueueGenericCreate>
 801639c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 801639e:	69fb      	ldr	r3, [r7, #28]
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	d022      	beq.n	80163ea <osSemaphoreNew+0xe8>
 80163a4:	68bb      	ldr	r3, [r7, #8]
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	d01f      	beq.n	80163ea <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80163aa:	2300      	movs	r3, #0
 80163ac:	2200      	movs	r2, #0
 80163ae:	2100      	movs	r1, #0
 80163b0:	69f8      	ldr	r0, [r7, #28]
 80163b2:	f000 fab1 	bl	8016918 <xQueueGenericSend>
 80163b6:	4603      	mov	r3, r0
 80163b8:	2b01      	cmp	r3, #1
 80163ba:	d016      	beq.n	80163ea <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80163bc:	69f8      	ldr	r0, [r7, #28]
 80163be:	f000 fd8d 	bl	8016edc <vQueueDelete>
            hSemaphore = NULL;
 80163c2:	2300      	movs	r3, #0
 80163c4:	61fb      	str	r3, [r7, #28]
 80163c6:	e010      	b.n	80163ea <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80163c8:	69bb      	ldr	r3, [r7, #24]
 80163ca:	2b01      	cmp	r3, #1
 80163cc:	d108      	bne.n	80163e0 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	689b      	ldr	r3, [r3, #8]
 80163d2:	461a      	mov	r2, r3
 80163d4:	68b9      	ldr	r1, [r7, #8]
 80163d6:	68f8      	ldr	r0, [r7, #12]
 80163d8:	f000 fa34 	bl	8016844 <xQueueCreateCountingSemaphoreStatic>
 80163dc:	61f8      	str	r0, [r7, #28]
 80163de:	e004      	b.n	80163ea <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80163e0:	68b9      	ldr	r1, [r7, #8]
 80163e2:	68f8      	ldr	r0, [r7, #12]
 80163e4:	f000 fa65 	bl	80168b2 <xQueueCreateCountingSemaphore>
 80163e8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80163ea:	69fb      	ldr	r3, [r7, #28]
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	d00c      	beq.n	801640a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	2b00      	cmp	r3, #0
 80163f4:	d003      	beq.n	80163fe <osSemaphoreNew+0xfc>
          name = attr->name;
 80163f6:	687b      	ldr	r3, [r7, #4]
 80163f8:	681b      	ldr	r3, [r3, #0]
 80163fa:	617b      	str	r3, [r7, #20]
 80163fc:	e001      	b.n	8016402 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80163fe:	2300      	movs	r3, #0
 8016400:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8016402:	6979      	ldr	r1, [r7, #20]
 8016404:	69f8      	ldr	r0, [r7, #28]
 8016406:	f000 fe9d 	bl	8017144 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 801640a:	69fb      	ldr	r3, [r7, #28]
}
 801640c:	4618      	mov	r0, r3
 801640e:	3720      	adds	r7, #32
 8016410:	46bd      	mov	sp, r7
 8016412:	bd80      	pop	{r7, pc}

08016414 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8016414:	b480      	push	{r7}
 8016416:	b085      	sub	sp, #20
 8016418:	af00      	add	r7, sp, #0
 801641a:	60f8      	str	r0, [r7, #12]
 801641c:	60b9      	str	r1, [r7, #8]
 801641e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8016420:	68fb      	ldr	r3, [r7, #12]
 8016422:	4a07      	ldr	r2, [pc, #28]	; (8016440 <vApplicationGetIdleTaskMemory+0x2c>)
 8016424:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8016426:	68bb      	ldr	r3, [r7, #8]
 8016428:	4a06      	ldr	r2, [pc, #24]	; (8016444 <vApplicationGetIdleTaskMemory+0x30>)
 801642a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	2280      	movs	r2, #128	; 0x80
 8016430:	601a      	str	r2, [r3, #0]
}
 8016432:	bf00      	nop
 8016434:	3714      	adds	r7, #20
 8016436:	46bd      	mov	sp, r7
 8016438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801643c:	4770      	bx	lr
 801643e:	bf00      	nop
 8016440:	240055dc 	.word	0x240055dc
 8016444:	24005638 	.word	0x24005638

08016448 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8016448:	b480      	push	{r7}
 801644a:	b085      	sub	sp, #20
 801644c:	af00      	add	r7, sp, #0
 801644e:	60f8      	str	r0, [r7, #12]
 8016450:	60b9      	str	r1, [r7, #8]
 8016452:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8016454:	68fb      	ldr	r3, [r7, #12]
 8016456:	4a07      	ldr	r2, [pc, #28]	; (8016474 <vApplicationGetTimerTaskMemory+0x2c>)
 8016458:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801645a:	68bb      	ldr	r3, [r7, #8]
 801645c:	4a06      	ldr	r2, [pc, #24]	; (8016478 <vApplicationGetTimerTaskMemory+0x30>)
 801645e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016466:	601a      	str	r2, [r3, #0]
}
 8016468:	bf00      	nop
 801646a:	3714      	adds	r7, #20
 801646c:	46bd      	mov	sp, r7
 801646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016472:	4770      	bx	lr
 8016474:	24005838 	.word	0x24005838
 8016478:	24005894 	.word	0x24005894

0801647c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801647c:	b480      	push	{r7}
 801647e:	b083      	sub	sp, #12
 8016480:	af00      	add	r7, sp, #0
 8016482:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	f103 0208 	add.w	r2, r3, #8
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	f04f 32ff 	mov.w	r2, #4294967295
 8016494:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	f103 0208 	add.w	r2, r3, #8
 801649c:	687b      	ldr	r3, [r7, #4]
 801649e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	f103 0208 	add.w	r2, r3, #8
 80164a6:	687b      	ldr	r3, [r7, #4]
 80164a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	2200      	movs	r2, #0
 80164ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80164b0:	bf00      	nop
 80164b2:	370c      	adds	r7, #12
 80164b4:	46bd      	mov	sp, r7
 80164b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164ba:	4770      	bx	lr

080164bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80164bc:	b480      	push	{r7}
 80164be:	b083      	sub	sp, #12
 80164c0:	af00      	add	r7, sp, #0
 80164c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80164c4:	687b      	ldr	r3, [r7, #4]
 80164c6:	2200      	movs	r2, #0
 80164c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80164ca:	bf00      	nop
 80164cc:	370c      	adds	r7, #12
 80164ce:	46bd      	mov	sp, r7
 80164d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164d4:	4770      	bx	lr

080164d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80164d6:	b480      	push	{r7}
 80164d8:	b085      	sub	sp, #20
 80164da:	af00      	add	r7, sp, #0
 80164dc:	6078      	str	r0, [r7, #4]
 80164de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	685b      	ldr	r3, [r3, #4]
 80164e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80164e6:	683b      	ldr	r3, [r7, #0]
 80164e8:	68fa      	ldr	r2, [r7, #12]
 80164ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80164ec:	68fb      	ldr	r3, [r7, #12]
 80164ee:	689a      	ldr	r2, [r3, #8]
 80164f0:	683b      	ldr	r3, [r7, #0]
 80164f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80164f4:	68fb      	ldr	r3, [r7, #12]
 80164f6:	689b      	ldr	r3, [r3, #8]
 80164f8:	683a      	ldr	r2, [r7, #0]
 80164fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80164fc:	68fb      	ldr	r3, [r7, #12]
 80164fe:	683a      	ldr	r2, [r7, #0]
 8016500:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8016502:	683b      	ldr	r3, [r7, #0]
 8016504:	687a      	ldr	r2, [r7, #4]
 8016506:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	681b      	ldr	r3, [r3, #0]
 801650c:	1c5a      	adds	r2, r3, #1
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	601a      	str	r2, [r3, #0]
}
 8016512:	bf00      	nop
 8016514:	3714      	adds	r7, #20
 8016516:	46bd      	mov	sp, r7
 8016518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801651c:	4770      	bx	lr

0801651e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801651e:	b480      	push	{r7}
 8016520:	b085      	sub	sp, #20
 8016522:	af00      	add	r7, sp, #0
 8016524:	6078      	str	r0, [r7, #4]
 8016526:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8016528:	683b      	ldr	r3, [r7, #0]
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801652e:	68bb      	ldr	r3, [r7, #8]
 8016530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016534:	d103      	bne.n	801653e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8016536:	687b      	ldr	r3, [r7, #4]
 8016538:	691b      	ldr	r3, [r3, #16]
 801653a:	60fb      	str	r3, [r7, #12]
 801653c:	e00c      	b.n	8016558 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	3308      	adds	r3, #8
 8016542:	60fb      	str	r3, [r7, #12]
 8016544:	e002      	b.n	801654c <vListInsert+0x2e>
 8016546:	68fb      	ldr	r3, [r7, #12]
 8016548:	685b      	ldr	r3, [r3, #4]
 801654a:	60fb      	str	r3, [r7, #12]
 801654c:	68fb      	ldr	r3, [r7, #12]
 801654e:	685b      	ldr	r3, [r3, #4]
 8016550:	681b      	ldr	r3, [r3, #0]
 8016552:	68ba      	ldr	r2, [r7, #8]
 8016554:	429a      	cmp	r2, r3
 8016556:	d2f6      	bcs.n	8016546 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8016558:	68fb      	ldr	r3, [r7, #12]
 801655a:	685a      	ldr	r2, [r3, #4]
 801655c:	683b      	ldr	r3, [r7, #0]
 801655e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8016560:	683b      	ldr	r3, [r7, #0]
 8016562:	685b      	ldr	r3, [r3, #4]
 8016564:	683a      	ldr	r2, [r7, #0]
 8016566:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8016568:	683b      	ldr	r3, [r7, #0]
 801656a:	68fa      	ldr	r2, [r7, #12]
 801656c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801656e:	68fb      	ldr	r3, [r7, #12]
 8016570:	683a      	ldr	r2, [r7, #0]
 8016572:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8016574:	683b      	ldr	r3, [r7, #0]
 8016576:	687a      	ldr	r2, [r7, #4]
 8016578:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	681b      	ldr	r3, [r3, #0]
 801657e:	1c5a      	adds	r2, r3, #1
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	601a      	str	r2, [r3, #0]
}
 8016584:	bf00      	nop
 8016586:	3714      	adds	r7, #20
 8016588:	46bd      	mov	sp, r7
 801658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801658e:	4770      	bx	lr

08016590 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8016590:	b480      	push	{r7}
 8016592:	b085      	sub	sp, #20
 8016594:	af00      	add	r7, sp, #0
 8016596:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	691b      	ldr	r3, [r3, #16]
 801659c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	685b      	ldr	r3, [r3, #4]
 80165a2:	687a      	ldr	r2, [r7, #4]
 80165a4:	6892      	ldr	r2, [r2, #8]
 80165a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	689b      	ldr	r3, [r3, #8]
 80165ac:	687a      	ldr	r2, [r7, #4]
 80165ae:	6852      	ldr	r2, [r2, #4]
 80165b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80165b2:	68fb      	ldr	r3, [r7, #12]
 80165b4:	685b      	ldr	r3, [r3, #4]
 80165b6:	687a      	ldr	r2, [r7, #4]
 80165b8:	429a      	cmp	r2, r3
 80165ba:	d103      	bne.n	80165c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	689a      	ldr	r2, [r3, #8]
 80165c0:	68fb      	ldr	r3, [r7, #12]
 80165c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	2200      	movs	r2, #0
 80165c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80165ca:	68fb      	ldr	r3, [r7, #12]
 80165cc:	681b      	ldr	r3, [r3, #0]
 80165ce:	1e5a      	subs	r2, r3, #1
 80165d0:	68fb      	ldr	r3, [r7, #12]
 80165d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80165d4:	68fb      	ldr	r3, [r7, #12]
 80165d6:	681b      	ldr	r3, [r3, #0]
}
 80165d8:	4618      	mov	r0, r3
 80165da:	3714      	adds	r7, #20
 80165dc:	46bd      	mov	sp, r7
 80165de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165e2:	4770      	bx	lr

080165e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80165e4:	b580      	push	{r7, lr}
 80165e6:	b084      	sub	sp, #16
 80165e8:	af00      	add	r7, sp, #0
 80165ea:	6078      	str	r0, [r7, #4]
 80165ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80165f2:	68fb      	ldr	r3, [r7, #12]
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	d10a      	bne.n	801660e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80165f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165fc:	f383 8811 	msr	BASEPRI, r3
 8016600:	f3bf 8f6f 	isb	sy
 8016604:	f3bf 8f4f 	dsb	sy
 8016608:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801660a:	bf00      	nop
 801660c:	e7fe      	b.n	801660c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801660e:	f002 f951 	bl	80188b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016612:	68fb      	ldr	r3, [r7, #12]
 8016614:	681a      	ldr	r2, [r3, #0]
 8016616:	68fb      	ldr	r3, [r7, #12]
 8016618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801661a:	68f9      	ldr	r1, [r7, #12]
 801661c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801661e:	fb01 f303 	mul.w	r3, r1, r3
 8016622:	441a      	add	r2, r3
 8016624:	68fb      	ldr	r3, [r7, #12]
 8016626:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8016628:	68fb      	ldr	r3, [r7, #12]
 801662a:	2200      	movs	r2, #0
 801662c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801662e:	68fb      	ldr	r3, [r7, #12]
 8016630:	681a      	ldr	r2, [r3, #0]
 8016632:	68fb      	ldr	r3, [r7, #12]
 8016634:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016636:	68fb      	ldr	r3, [r7, #12]
 8016638:	681a      	ldr	r2, [r3, #0]
 801663a:	68fb      	ldr	r3, [r7, #12]
 801663c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801663e:	3b01      	subs	r3, #1
 8016640:	68f9      	ldr	r1, [r7, #12]
 8016642:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8016644:	fb01 f303 	mul.w	r3, r1, r3
 8016648:	441a      	add	r2, r3
 801664a:	68fb      	ldr	r3, [r7, #12]
 801664c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801664e:	68fb      	ldr	r3, [r7, #12]
 8016650:	22ff      	movs	r2, #255	; 0xff
 8016652:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8016656:	68fb      	ldr	r3, [r7, #12]
 8016658:	22ff      	movs	r2, #255	; 0xff
 801665a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801665e:	683b      	ldr	r3, [r7, #0]
 8016660:	2b00      	cmp	r3, #0
 8016662:	d109      	bne.n	8016678 <xQueueGenericReset+0x94>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016664:	68fb      	ldr	r3, [r7, #12]
 8016666:	691b      	ldr	r3, [r3, #16]
 8016668:	2b00      	cmp	r3, #0
 801666a:	d00f      	beq.n	801668c <xQueueGenericReset+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801666c:	68fb      	ldr	r3, [r7, #12]
 801666e:	3310      	adds	r3, #16
 8016670:	4618      	mov	r0, r3
 8016672:	f001 fa0d 	bl	8017a90 <xTaskRemoveFromEventList>
 8016676:	e009      	b.n	801668c <xQueueGenericReset+0xa8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8016678:	68fb      	ldr	r3, [r7, #12]
 801667a:	3310      	adds	r3, #16
 801667c:	4618      	mov	r0, r3
 801667e:	f7ff fefd 	bl	801647c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8016682:	68fb      	ldr	r3, [r7, #12]
 8016684:	3324      	adds	r3, #36	; 0x24
 8016686:	4618      	mov	r0, r3
 8016688:	f7ff fef8 	bl	801647c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801668c:	f002 f942 	bl	8018914 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8016690:	2301      	movs	r3, #1
}
 8016692:	4618      	mov	r0, r3
 8016694:	3710      	adds	r7, #16
 8016696:	46bd      	mov	sp, r7
 8016698:	bd80      	pop	{r7, pc}

0801669a <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801669a:	b580      	push	{r7, lr}
 801669c:	b08e      	sub	sp, #56	; 0x38
 801669e:	af02      	add	r7, sp, #8
 80166a0:	60f8      	str	r0, [r7, #12]
 80166a2:	60b9      	str	r1, [r7, #8]
 80166a4:	607a      	str	r2, [r7, #4]
 80166a6:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80166a8:	68fb      	ldr	r3, [r7, #12]
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	d10a      	bne.n	80166c4 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80166ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166b2:	f383 8811 	msr	BASEPRI, r3
 80166b6:	f3bf 8f6f 	isb	sy
 80166ba:	f3bf 8f4f 	dsb	sy
 80166be:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80166c0:	bf00      	nop
 80166c2:	e7fe      	b.n	80166c2 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80166c4:	683b      	ldr	r3, [r7, #0]
 80166c6:	2b00      	cmp	r3, #0
 80166c8:	d10a      	bne.n	80166e0 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80166ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166ce:	f383 8811 	msr	BASEPRI, r3
 80166d2:	f3bf 8f6f 	isb	sy
 80166d6:	f3bf 8f4f 	dsb	sy
 80166da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80166dc:	bf00      	nop
 80166de:	e7fe      	b.n	80166de <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	2b00      	cmp	r3, #0
 80166e4:	d002      	beq.n	80166ec <xQueueGenericCreateStatic+0x52>
 80166e6:	68bb      	ldr	r3, [r7, #8]
 80166e8:	2b00      	cmp	r3, #0
 80166ea:	d001      	beq.n	80166f0 <xQueueGenericCreateStatic+0x56>
 80166ec:	2301      	movs	r3, #1
 80166ee:	e000      	b.n	80166f2 <xQueueGenericCreateStatic+0x58>
 80166f0:	2300      	movs	r3, #0
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	d10a      	bne.n	801670c <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80166f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166fa:	f383 8811 	msr	BASEPRI, r3
 80166fe:	f3bf 8f6f 	isb	sy
 8016702:	f3bf 8f4f 	dsb	sy
 8016706:	623b      	str	r3, [r7, #32]
}
 8016708:	bf00      	nop
 801670a:	e7fe      	b.n	801670a <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	2b00      	cmp	r3, #0
 8016710:	d102      	bne.n	8016718 <xQueueGenericCreateStatic+0x7e>
 8016712:	68bb      	ldr	r3, [r7, #8]
 8016714:	2b00      	cmp	r3, #0
 8016716:	d101      	bne.n	801671c <xQueueGenericCreateStatic+0x82>
 8016718:	2301      	movs	r3, #1
 801671a:	e000      	b.n	801671e <xQueueGenericCreateStatic+0x84>
 801671c:	2300      	movs	r3, #0
 801671e:	2b00      	cmp	r3, #0
 8016720:	d10a      	bne.n	8016738 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8016722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016726:	f383 8811 	msr	BASEPRI, r3
 801672a:	f3bf 8f6f 	isb	sy
 801672e:	f3bf 8f4f 	dsb	sy
 8016732:	61fb      	str	r3, [r7, #28]
}
 8016734:	bf00      	nop
 8016736:	e7fe      	b.n	8016736 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8016738:	2350      	movs	r3, #80	; 0x50
 801673a:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801673c:	697b      	ldr	r3, [r7, #20]
 801673e:	2b50      	cmp	r3, #80	; 0x50
 8016740:	d00a      	beq.n	8016758 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8016742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016746:	f383 8811 	msr	BASEPRI, r3
 801674a:	f3bf 8f6f 	isb	sy
 801674e:	f3bf 8f4f 	dsb	sy
 8016752:	61bb      	str	r3, [r7, #24]
}
 8016754:	bf00      	nop
 8016756:	e7fe      	b.n	8016756 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8016758:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801675a:	683b      	ldr	r3, [r7, #0]
 801675c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801675e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016760:	2b00      	cmp	r3, #0
 8016762:	d00d      	beq.n	8016780 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8016764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016766:	2201      	movs	r2, #1
 8016768:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801676c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8016770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016772:	9300      	str	r3, [sp, #0]
 8016774:	4613      	mov	r3, r2
 8016776:	687a      	ldr	r2, [r7, #4]
 8016778:	68b9      	ldr	r1, [r7, #8]
 801677a:	68f8      	ldr	r0, [r7, #12]
 801677c:	f000 f83f 	bl	80167fe <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8016782:	4618      	mov	r0, r3
 8016784:	3730      	adds	r7, #48	; 0x30
 8016786:	46bd      	mov	sp, r7
 8016788:	bd80      	pop	{r7, pc}

0801678a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801678a:	b580      	push	{r7, lr}
 801678c:	b08a      	sub	sp, #40	; 0x28
 801678e:	af02      	add	r7, sp, #8
 8016790:	60f8      	str	r0, [r7, #12]
 8016792:	60b9      	str	r1, [r7, #8]
 8016794:	4613      	mov	r3, r2
 8016796:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016798:	68fb      	ldr	r3, [r7, #12]
 801679a:	2b00      	cmp	r3, #0
 801679c:	d10a      	bne.n	80167b4 <xQueueGenericCreate+0x2a>
	__asm volatile
 801679e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167a2:	f383 8811 	msr	BASEPRI, r3
 80167a6:	f3bf 8f6f 	isb	sy
 80167aa:	f3bf 8f4f 	dsb	sy
 80167ae:	613b      	str	r3, [r7, #16]
}
 80167b0:	bf00      	nop
 80167b2:	e7fe      	b.n	80167b2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80167b4:	68fb      	ldr	r3, [r7, #12]
 80167b6:	68ba      	ldr	r2, [r7, #8]
 80167b8:	fb02 f303 	mul.w	r3, r2, r3
 80167bc:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80167be:	69fb      	ldr	r3, [r7, #28]
 80167c0:	3350      	adds	r3, #80	; 0x50
 80167c2:	4618      	mov	r0, r3
 80167c4:	f002 f998 	bl	8018af8 <pvPortMalloc>
 80167c8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80167ca:	69bb      	ldr	r3, [r7, #24]
 80167cc:	2b00      	cmp	r3, #0
 80167ce:	d011      	beq.n	80167f4 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80167d0:	69bb      	ldr	r3, [r7, #24]
 80167d2:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80167d4:	697b      	ldr	r3, [r7, #20]
 80167d6:	3350      	adds	r3, #80	; 0x50
 80167d8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80167da:	69bb      	ldr	r3, [r7, #24]
 80167dc:	2200      	movs	r2, #0
 80167de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80167e2:	79fa      	ldrb	r2, [r7, #7]
 80167e4:	69bb      	ldr	r3, [r7, #24]
 80167e6:	9300      	str	r3, [sp, #0]
 80167e8:	4613      	mov	r3, r2
 80167ea:	697a      	ldr	r2, [r7, #20]
 80167ec:	68b9      	ldr	r1, [r7, #8]
 80167ee:	68f8      	ldr	r0, [r7, #12]
 80167f0:	f000 f805 	bl	80167fe <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80167f4:	69bb      	ldr	r3, [r7, #24]
	}
 80167f6:	4618      	mov	r0, r3
 80167f8:	3720      	adds	r7, #32
 80167fa:	46bd      	mov	sp, r7
 80167fc:	bd80      	pop	{r7, pc}

080167fe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80167fe:	b580      	push	{r7, lr}
 8016800:	b084      	sub	sp, #16
 8016802:	af00      	add	r7, sp, #0
 8016804:	60f8      	str	r0, [r7, #12]
 8016806:	60b9      	str	r1, [r7, #8]
 8016808:	607a      	str	r2, [r7, #4]
 801680a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801680c:	68bb      	ldr	r3, [r7, #8]
 801680e:	2b00      	cmp	r3, #0
 8016810:	d103      	bne.n	801681a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8016812:	69bb      	ldr	r3, [r7, #24]
 8016814:	69ba      	ldr	r2, [r7, #24]
 8016816:	601a      	str	r2, [r3, #0]
 8016818:	e002      	b.n	8016820 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801681a:	69bb      	ldr	r3, [r7, #24]
 801681c:	687a      	ldr	r2, [r7, #4]
 801681e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8016820:	69bb      	ldr	r3, [r7, #24]
 8016822:	68fa      	ldr	r2, [r7, #12]
 8016824:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8016826:	69bb      	ldr	r3, [r7, #24]
 8016828:	68ba      	ldr	r2, [r7, #8]
 801682a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801682c:	2101      	movs	r1, #1
 801682e:	69b8      	ldr	r0, [r7, #24]
 8016830:	f7ff fed8 	bl	80165e4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8016834:	69bb      	ldr	r3, [r7, #24]
 8016836:	78fa      	ldrb	r2, [r7, #3]
 8016838:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801683c:	bf00      	nop
 801683e:	3710      	adds	r7, #16
 8016840:	46bd      	mov	sp, r7
 8016842:	bd80      	pop	{r7, pc}

08016844 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8016844:	b580      	push	{r7, lr}
 8016846:	b08a      	sub	sp, #40	; 0x28
 8016848:	af02      	add	r7, sp, #8
 801684a:	60f8      	str	r0, [r7, #12]
 801684c:	60b9      	str	r1, [r7, #8]
 801684e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8016850:	68fb      	ldr	r3, [r7, #12]
 8016852:	2b00      	cmp	r3, #0
 8016854:	d10a      	bne.n	801686c <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8016856:	f04f 0350 	mov.w	r3, #80	; 0x50
 801685a:	f383 8811 	msr	BASEPRI, r3
 801685e:	f3bf 8f6f 	isb	sy
 8016862:	f3bf 8f4f 	dsb	sy
 8016866:	61bb      	str	r3, [r7, #24]
}
 8016868:	bf00      	nop
 801686a:	e7fe      	b.n	801686a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 801686c:	68ba      	ldr	r2, [r7, #8]
 801686e:	68fb      	ldr	r3, [r7, #12]
 8016870:	429a      	cmp	r2, r3
 8016872:	d90a      	bls.n	801688a <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8016874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016878:	f383 8811 	msr	BASEPRI, r3
 801687c:	f3bf 8f6f 	isb	sy
 8016880:	f3bf 8f4f 	dsb	sy
 8016884:	617b      	str	r3, [r7, #20]
}
 8016886:	bf00      	nop
 8016888:	e7fe      	b.n	8016888 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801688a:	2302      	movs	r3, #2
 801688c:	9300      	str	r3, [sp, #0]
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	2200      	movs	r2, #0
 8016892:	2100      	movs	r1, #0
 8016894:	68f8      	ldr	r0, [r7, #12]
 8016896:	f7ff ff00 	bl	801669a <xQueueGenericCreateStatic>
 801689a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 801689c:	69fb      	ldr	r3, [r7, #28]
 801689e:	2b00      	cmp	r3, #0
 80168a0:	d002      	beq.n	80168a8 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80168a2:	69fb      	ldr	r3, [r7, #28]
 80168a4:	68ba      	ldr	r2, [r7, #8]
 80168a6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80168a8:	69fb      	ldr	r3, [r7, #28]
	}
 80168aa:	4618      	mov	r0, r3
 80168ac:	3720      	adds	r7, #32
 80168ae:	46bd      	mov	sp, r7
 80168b0:	bd80      	pop	{r7, pc}

080168b2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80168b2:	b580      	push	{r7, lr}
 80168b4:	b086      	sub	sp, #24
 80168b6:	af00      	add	r7, sp, #0
 80168b8:	6078      	str	r0, [r7, #4]
 80168ba:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	2b00      	cmp	r3, #0
 80168c0:	d10a      	bne.n	80168d8 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80168c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168c6:	f383 8811 	msr	BASEPRI, r3
 80168ca:	f3bf 8f6f 	isb	sy
 80168ce:	f3bf 8f4f 	dsb	sy
 80168d2:	613b      	str	r3, [r7, #16]
}
 80168d4:	bf00      	nop
 80168d6:	e7fe      	b.n	80168d6 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80168d8:	683a      	ldr	r2, [r7, #0]
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	429a      	cmp	r2, r3
 80168de:	d90a      	bls.n	80168f6 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80168e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168e4:	f383 8811 	msr	BASEPRI, r3
 80168e8:	f3bf 8f6f 	isb	sy
 80168ec:	f3bf 8f4f 	dsb	sy
 80168f0:	60fb      	str	r3, [r7, #12]
}
 80168f2:	bf00      	nop
 80168f4:	e7fe      	b.n	80168f4 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80168f6:	2202      	movs	r2, #2
 80168f8:	2100      	movs	r1, #0
 80168fa:	6878      	ldr	r0, [r7, #4]
 80168fc:	f7ff ff45 	bl	801678a <xQueueGenericCreate>
 8016900:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8016902:	697b      	ldr	r3, [r7, #20]
 8016904:	2b00      	cmp	r3, #0
 8016906:	d002      	beq.n	801690e <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8016908:	697b      	ldr	r3, [r7, #20]
 801690a:	683a      	ldr	r2, [r7, #0]
 801690c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801690e:	697b      	ldr	r3, [r7, #20]
	}
 8016910:	4618      	mov	r0, r3
 8016912:	3718      	adds	r7, #24
 8016914:	46bd      	mov	sp, r7
 8016916:	bd80      	pop	{r7, pc}

08016918 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8016918:	b580      	push	{r7, lr}
 801691a:	b08e      	sub	sp, #56	; 0x38
 801691c:	af00      	add	r7, sp, #0
 801691e:	60f8      	str	r0, [r7, #12]
 8016920:	60b9      	str	r1, [r7, #8]
 8016922:	607a      	str	r2, [r7, #4]
 8016924:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8016926:	2300      	movs	r3, #0
 8016928:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801692a:	68fb      	ldr	r3, [r7, #12]
 801692c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801692e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016930:	2b00      	cmp	r3, #0
 8016932:	d10a      	bne.n	801694a <xQueueGenericSend+0x32>
	__asm volatile
 8016934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016938:	f383 8811 	msr	BASEPRI, r3
 801693c:	f3bf 8f6f 	isb	sy
 8016940:	f3bf 8f4f 	dsb	sy
 8016944:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8016946:	bf00      	nop
 8016948:	e7fe      	b.n	8016948 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801694a:	68bb      	ldr	r3, [r7, #8]
 801694c:	2b00      	cmp	r3, #0
 801694e:	d103      	bne.n	8016958 <xQueueGenericSend+0x40>
 8016950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016954:	2b00      	cmp	r3, #0
 8016956:	d101      	bne.n	801695c <xQueueGenericSend+0x44>
 8016958:	2301      	movs	r3, #1
 801695a:	e000      	b.n	801695e <xQueueGenericSend+0x46>
 801695c:	2300      	movs	r3, #0
 801695e:	2b00      	cmp	r3, #0
 8016960:	d10a      	bne.n	8016978 <xQueueGenericSend+0x60>
	__asm volatile
 8016962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016966:	f383 8811 	msr	BASEPRI, r3
 801696a:	f3bf 8f6f 	isb	sy
 801696e:	f3bf 8f4f 	dsb	sy
 8016972:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016974:	bf00      	nop
 8016976:	e7fe      	b.n	8016976 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016978:	683b      	ldr	r3, [r7, #0]
 801697a:	2b02      	cmp	r3, #2
 801697c:	d103      	bne.n	8016986 <xQueueGenericSend+0x6e>
 801697e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016982:	2b01      	cmp	r3, #1
 8016984:	d101      	bne.n	801698a <xQueueGenericSend+0x72>
 8016986:	2301      	movs	r3, #1
 8016988:	e000      	b.n	801698c <xQueueGenericSend+0x74>
 801698a:	2300      	movs	r3, #0
 801698c:	2b00      	cmp	r3, #0
 801698e:	d10a      	bne.n	80169a6 <xQueueGenericSend+0x8e>
	__asm volatile
 8016990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016994:	f383 8811 	msr	BASEPRI, r3
 8016998:	f3bf 8f6f 	isb	sy
 801699c:	f3bf 8f4f 	dsb	sy
 80169a0:	623b      	str	r3, [r7, #32]
}
 80169a2:	bf00      	nop
 80169a4:	e7fe      	b.n	80169a4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80169a6:	f001 fa2b 	bl	8017e00 <xTaskGetSchedulerState>
 80169aa:	4603      	mov	r3, r0
 80169ac:	2b00      	cmp	r3, #0
 80169ae:	d102      	bne.n	80169b6 <xQueueGenericSend+0x9e>
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	2b00      	cmp	r3, #0
 80169b4:	d101      	bne.n	80169ba <xQueueGenericSend+0xa2>
 80169b6:	2301      	movs	r3, #1
 80169b8:	e000      	b.n	80169bc <xQueueGenericSend+0xa4>
 80169ba:	2300      	movs	r3, #0
 80169bc:	2b00      	cmp	r3, #0
 80169be:	d10a      	bne.n	80169d6 <xQueueGenericSend+0xbe>
	__asm volatile
 80169c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169c4:	f383 8811 	msr	BASEPRI, r3
 80169c8:	f3bf 8f6f 	isb	sy
 80169cc:	f3bf 8f4f 	dsb	sy
 80169d0:	61fb      	str	r3, [r7, #28]
}
 80169d2:	bf00      	nop
 80169d4:	e7fe      	b.n	80169d4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80169d6:	f001 ff6d 	bl	80188b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80169da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80169de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80169e2:	429a      	cmp	r2, r3
 80169e4:	d302      	bcc.n	80169ec <xQueueGenericSend+0xd4>
 80169e6:	683b      	ldr	r3, [r7, #0]
 80169e8:	2b02      	cmp	r3, #2
 80169ea:	d112      	bne.n	8016a12 <xQueueGenericSend+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80169ec:	683a      	ldr	r2, [r7, #0]
 80169ee:	68b9      	ldr	r1, [r7, #8]
 80169f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80169f2:	f000 fa96 	bl	8016f22 <prvCopyDataToQueue>
 80169f6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80169f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80169fc:	2b00      	cmp	r3, #0
 80169fe:	d004      	beq.n	8016a0a <xQueueGenericSend+0xf2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a02:	3324      	adds	r3, #36	; 0x24
 8016a04:	4618      	mov	r0, r3
 8016a06:	f001 f843 	bl	8017a90 <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8016a0a:	f001 ff83 	bl	8018914 <vPortExitCritical>
				return pdPASS;
 8016a0e:	2301      	movs	r3, #1
 8016a10:	e062      	b.n	8016ad8 <xQueueGenericSend+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	2b00      	cmp	r3, #0
 8016a16:	d103      	bne.n	8016a20 <xQueueGenericSend+0x108>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016a18:	f001 ff7c 	bl	8018914 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8016a1c:	2300      	movs	r3, #0
 8016a1e:	e05b      	b.n	8016ad8 <xQueueGenericSend+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a22:	2b00      	cmp	r3, #0
 8016a24:	d106      	bne.n	8016a34 <xQueueGenericSend+0x11c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016a26:	f107 0314 	add.w	r3, r7, #20
 8016a2a:	4618      	mov	r0, r3
 8016a2c:	f001 f894 	bl	8017b58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016a30:	2301      	movs	r3, #1
 8016a32:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016a34:	f001 ff6e 	bl	8018914 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016a38:	f000 fe38 	bl	80176ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016a3c:	f001 ff3a 	bl	80188b4 <vPortEnterCritical>
 8016a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016a46:	b25b      	sxtb	r3, r3
 8016a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a4c:	d103      	bne.n	8016a56 <xQueueGenericSend+0x13e>
 8016a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a50:	2200      	movs	r2, #0
 8016a52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016a5c:	b25b      	sxtb	r3, r3
 8016a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a62:	d103      	bne.n	8016a6c <xQueueGenericSend+0x154>
 8016a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a66:	2200      	movs	r2, #0
 8016a68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016a6c:	f001 ff52 	bl	8018914 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016a70:	1d3a      	adds	r2, r7, #4
 8016a72:	f107 0314 	add.w	r3, r7, #20
 8016a76:	4611      	mov	r1, r2
 8016a78:	4618      	mov	r0, r3
 8016a7a:	f001 f883 	bl	8017b84 <xTaskCheckForTimeOut>
 8016a7e:	4603      	mov	r3, r0
 8016a80:	2b00      	cmp	r3, #0
 8016a82:	d123      	bne.n	8016acc <xQueueGenericSend+0x1b4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8016a84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016a86:	f000 fb44 	bl	8017112 <prvIsQueueFull>
 8016a8a:	4603      	mov	r3, r0
 8016a8c:	2b00      	cmp	r3, #0
 8016a8e:	d017      	beq.n	8016ac0 <xQueueGenericSend+0x1a8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8016a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a92:	3310      	adds	r3, #16
 8016a94:	687a      	ldr	r2, [r7, #4]
 8016a96:	4611      	mov	r1, r2
 8016a98:	4618      	mov	r0, r3
 8016a9a:	f000 ffa9 	bl	80179f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8016a9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016aa0:	f000 facf 	bl	8017042 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8016aa4:	f000 fe10 	bl	80176c8 <xTaskResumeAll>
 8016aa8:	4603      	mov	r3, r0
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	d193      	bne.n	80169d6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8016aae:	4b0c      	ldr	r3, [pc, #48]	; (8016ae0 <xQueueGenericSend+0x1c8>)
 8016ab0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016ab4:	601a      	str	r2, [r3, #0]
 8016ab6:	f3bf 8f4f 	dsb	sy
 8016aba:	f3bf 8f6f 	isb	sy
 8016abe:	e78a      	b.n	80169d6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8016ac0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016ac2:	f000 fabe 	bl	8017042 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016ac6:	f000 fdff 	bl	80176c8 <xTaskResumeAll>
 8016aca:	e784      	b.n	80169d6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8016acc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016ace:	f000 fab8 	bl	8017042 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016ad2:	f000 fdf9 	bl	80176c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8016ad6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8016ad8:	4618      	mov	r0, r3
 8016ada:	3738      	adds	r7, #56	; 0x38
 8016adc:	46bd      	mov	sp, r7
 8016ade:	bd80      	pop	{r7, pc}
 8016ae0:	e000ed04 	.word	0xe000ed04

08016ae4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8016ae4:	b580      	push	{r7, lr}
 8016ae6:	b090      	sub	sp, #64	; 0x40
 8016ae8:	af00      	add	r7, sp, #0
 8016aea:	60f8      	str	r0, [r7, #12]
 8016aec:	60b9      	str	r1, [r7, #8]
 8016aee:	607a      	str	r2, [r7, #4]
 8016af0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016af2:	68fb      	ldr	r3, [r7, #12]
 8016af4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8016af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016af8:	2b00      	cmp	r3, #0
 8016afa:	d10a      	bne.n	8016b12 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8016afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b00:	f383 8811 	msr	BASEPRI, r3
 8016b04:	f3bf 8f6f 	isb	sy
 8016b08:	f3bf 8f4f 	dsb	sy
 8016b0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8016b0e:	bf00      	nop
 8016b10:	e7fe      	b.n	8016b10 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016b12:	68bb      	ldr	r3, [r7, #8]
 8016b14:	2b00      	cmp	r3, #0
 8016b16:	d103      	bne.n	8016b20 <xQueueGenericSendFromISR+0x3c>
 8016b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016b1c:	2b00      	cmp	r3, #0
 8016b1e:	d101      	bne.n	8016b24 <xQueueGenericSendFromISR+0x40>
 8016b20:	2301      	movs	r3, #1
 8016b22:	e000      	b.n	8016b26 <xQueueGenericSendFromISR+0x42>
 8016b24:	2300      	movs	r3, #0
 8016b26:	2b00      	cmp	r3, #0
 8016b28:	d10a      	bne.n	8016b40 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8016b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b2e:	f383 8811 	msr	BASEPRI, r3
 8016b32:	f3bf 8f6f 	isb	sy
 8016b36:	f3bf 8f4f 	dsb	sy
 8016b3a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016b3c:	bf00      	nop
 8016b3e:	e7fe      	b.n	8016b3e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016b40:	683b      	ldr	r3, [r7, #0]
 8016b42:	2b02      	cmp	r3, #2
 8016b44:	d103      	bne.n	8016b4e <xQueueGenericSendFromISR+0x6a>
 8016b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016b4a:	2b01      	cmp	r3, #1
 8016b4c:	d101      	bne.n	8016b52 <xQueueGenericSendFromISR+0x6e>
 8016b4e:	2301      	movs	r3, #1
 8016b50:	e000      	b.n	8016b54 <xQueueGenericSendFromISR+0x70>
 8016b52:	2300      	movs	r3, #0
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	d10a      	bne.n	8016b6e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8016b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b5c:	f383 8811 	msr	BASEPRI, r3
 8016b60:	f3bf 8f6f 	isb	sy
 8016b64:	f3bf 8f4f 	dsb	sy
 8016b68:	623b      	str	r3, [r7, #32]
}
 8016b6a:	bf00      	nop
 8016b6c:	e7fe      	b.n	8016b6c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016b6e:	f001 ff83 	bl	8018a78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8016b72:	f3ef 8211 	mrs	r2, BASEPRI
 8016b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b7a:	f383 8811 	msr	BASEPRI, r3
 8016b7e:	f3bf 8f6f 	isb	sy
 8016b82:	f3bf 8f4f 	dsb	sy
 8016b86:	61fa      	str	r2, [r7, #28]
 8016b88:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8016b8a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016b8c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016b96:	429a      	cmp	r2, r3
 8016b98:	d302      	bcc.n	8016ba0 <xQueueGenericSendFromISR+0xbc>
 8016b9a:	683b      	ldr	r3, [r7, #0]
 8016b9c:	2b02      	cmp	r3, #2
 8016b9e:	d12f      	bne.n	8016c00 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8016ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ba2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016ba6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016bae:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016bb0:	683a      	ldr	r2, [r7, #0]
 8016bb2:	68b9      	ldr	r1, [r7, #8]
 8016bb4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016bb6:	f000 f9b4 	bl	8016f22 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8016bba:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8016bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016bc2:	d112      	bne.n	8016bea <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016bc8:	2b00      	cmp	r3, #0
 8016bca:	d016      	beq.n	8016bfa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016bce:	3324      	adds	r3, #36	; 0x24
 8016bd0:	4618      	mov	r0, r3
 8016bd2:	f000 ff5d 	bl	8017a90 <xTaskRemoveFromEventList>
 8016bd6:	4603      	mov	r3, r0
 8016bd8:	2b00      	cmp	r3, #0
 8016bda:	d00e      	beq.n	8016bfa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	d00b      	beq.n	8016bfa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8016be2:	687b      	ldr	r3, [r7, #4]
 8016be4:	2201      	movs	r2, #1
 8016be6:	601a      	str	r2, [r3, #0]
 8016be8:	e007      	b.n	8016bfa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016bea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8016bee:	3301      	adds	r3, #1
 8016bf0:	b2db      	uxtb	r3, r3
 8016bf2:	b25a      	sxtb	r2, r3
 8016bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016bf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8016bfa:	2301      	movs	r3, #1
 8016bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8016bfe:	e001      	b.n	8016c04 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8016c00:	2300      	movs	r3, #0
 8016c02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016c06:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8016c08:	697b      	ldr	r3, [r7, #20]
 8016c0a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8016c0e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8016c12:	4618      	mov	r0, r3
 8016c14:	3740      	adds	r7, #64	; 0x40
 8016c16:	46bd      	mov	sp, r7
 8016c18:	bd80      	pop	{r7, pc}

08016c1a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8016c1a:	b580      	push	{r7, lr}
 8016c1c:	b08e      	sub	sp, #56	; 0x38
 8016c1e:	af00      	add	r7, sp, #0
 8016c20:	6078      	str	r0, [r7, #4]
 8016c22:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8016c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c2a:	2b00      	cmp	r3, #0
 8016c2c:	d10a      	bne.n	8016c44 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8016c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c32:	f383 8811 	msr	BASEPRI, r3
 8016c36:	f3bf 8f6f 	isb	sy
 8016c3a:	f3bf 8f4f 	dsb	sy
 8016c3e:	623b      	str	r3, [r7, #32]
}
 8016c40:	bf00      	nop
 8016c42:	e7fe      	b.n	8016c42 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8016c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	d00a      	beq.n	8016c62 <xQueueGiveFromISR+0x48>
	__asm volatile
 8016c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c50:	f383 8811 	msr	BASEPRI, r3
 8016c54:	f3bf 8f6f 	isb	sy
 8016c58:	f3bf 8f4f 	dsb	sy
 8016c5c:	61fb      	str	r3, [r7, #28]
}
 8016c5e:	bf00      	nop
 8016c60:	e7fe      	b.n	8016c60 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8016c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c64:	681b      	ldr	r3, [r3, #0]
 8016c66:	2b00      	cmp	r3, #0
 8016c68:	d103      	bne.n	8016c72 <xQueueGiveFromISR+0x58>
 8016c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c6c:	689b      	ldr	r3, [r3, #8]
 8016c6e:	2b00      	cmp	r3, #0
 8016c70:	d101      	bne.n	8016c76 <xQueueGiveFromISR+0x5c>
 8016c72:	2301      	movs	r3, #1
 8016c74:	e000      	b.n	8016c78 <xQueueGiveFromISR+0x5e>
 8016c76:	2300      	movs	r3, #0
 8016c78:	2b00      	cmp	r3, #0
 8016c7a:	d10a      	bne.n	8016c92 <xQueueGiveFromISR+0x78>
	__asm volatile
 8016c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c80:	f383 8811 	msr	BASEPRI, r3
 8016c84:	f3bf 8f6f 	isb	sy
 8016c88:	f3bf 8f4f 	dsb	sy
 8016c8c:	61bb      	str	r3, [r7, #24]
}
 8016c8e:	bf00      	nop
 8016c90:	e7fe      	b.n	8016c90 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016c92:	f001 fef1 	bl	8018a78 <vPortValidateInterruptPriority>
	__asm volatile
 8016c96:	f3ef 8211 	mrs	r2, BASEPRI
 8016c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c9e:	f383 8811 	msr	BASEPRI, r3
 8016ca2:	f3bf 8f6f 	isb	sy
 8016ca6:	f3bf 8f4f 	dsb	sy
 8016caa:	617a      	str	r2, [r7, #20]
 8016cac:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8016cae:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016cb6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8016cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016cbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016cbe:	429a      	cmp	r2, r3
 8016cc0:	d22b      	bcs.n	8016d1a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8016cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016cc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cce:	1c5a      	adds	r2, r3, #1
 8016cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cd2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8016cd4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016cdc:	d112      	bne.n	8016d04 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ce2:	2b00      	cmp	r3, #0
 8016ce4:	d016      	beq.n	8016d14 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ce8:	3324      	adds	r3, #36	; 0x24
 8016cea:	4618      	mov	r0, r3
 8016cec:	f000 fed0 	bl	8017a90 <xTaskRemoveFromEventList>
 8016cf0:	4603      	mov	r3, r0
 8016cf2:	2b00      	cmp	r3, #0
 8016cf4:	d00e      	beq.n	8016d14 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8016cf6:	683b      	ldr	r3, [r7, #0]
 8016cf8:	2b00      	cmp	r3, #0
 8016cfa:	d00b      	beq.n	8016d14 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8016cfc:	683b      	ldr	r3, [r7, #0]
 8016cfe:	2201      	movs	r2, #1
 8016d00:	601a      	str	r2, [r3, #0]
 8016d02:	e007      	b.n	8016d14 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016d04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016d08:	3301      	adds	r3, #1
 8016d0a:	b2db      	uxtb	r3, r3
 8016d0c:	b25a      	sxtb	r2, r3
 8016d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8016d14:	2301      	movs	r3, #1
 8016d16:	637b      	str	r3, [r7, #52]	; 0x34
 8016d18:	e001      	b.n	8016d1e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8016d1a:	2300      	movs	r3, #0
 8016d1c:	637b      	str	r3, [r7, #52]	; 0x34
 8016d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d20:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8016d22:	68fb      	ldr	r3, [r7, #12]
 8016d24:	f383 8811 	msr	BASEPRI, r3
}
 8016d28:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8016d2c:	4618      	mov	r0, r3
 8016d2e:	3738      	adds	r7, #56	; 0x38
 8016d30:	46bd      	mov	sp, r7
 8016d32:	bd80      	pop	{r7, pc}

08016d34 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8016d34:	b580      	push	{r7, lr}
 8016d36:	b08c      	sub	sp, #48	; 0x30
 8016d38:	af00      	add	r7, sp, #0
 8016d3a:	60f8      	str	r0, [r7, #12]
 8016d3c:	60b9      	str	r1, [r7, #8]
 8016d3e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8016d40:	2300      	movs	r3, #0
 8016d42:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016d44:	68fb      	ldr	r3, [r7, #12]
 8016d46:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8016d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d4a:	2b00      	cmp	r3, #0
 8016d4c:	d10a      	bne.n	8016d64 <xQueueReceive+0x30>
	__asm volatile
 8016d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d52:	f383 8811 	msr	BASEPRI, r3
 8016d56:	f3bf 8f6f 	isb	sy
 8016d5a:	f3bf 8f4f 	dsb	sy
 8016d5e:	623b      	str	r3, [r7, #32]
}
 8016d60:	bf00      	nop
 8016d62:	e7fe      	b.n	8016d62 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016d64:	68bb      	ldr	r3, [r7, #8]
 8016d66:	2b00      	cmp	r3, #0
 8016d68:	d103      	bne.n	8016d72 <xQueueReceive+0x3e>
 8016d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016d6e:	2b00      	cmp	r3, #0
 8016d70:	d101      	bne.n	8016d76 <xQueueReceive+0x42>
 8016d72:	2301      	movs	r3, #1
 8016d74:	e000      	b.n	8016d78 <xQueueReceive+0x44>
 8016d76:	2300      	movs	r3, #0
 8016d78:	2b00      	cmp	r3, #0
 8016d7a:	d10a      	bne.n	8016d92 <xQueueReceive+0x5e>
	__asm volatile
 8016d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d80:	f383 8811 	msr	BASEPRI, r3
 8016d84:	f3bf 8f6f 	isb	sy
 8016d88:	f3bf 8f4f 	dsb	sy
 8016d8c:	61fb      	str	r3, [r7, #28]
}
 8016d8e:	bf00      	nop
 8016d90:	e7fe      	b.n	8016d90 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016d92:	f001 f835 	bl	8017e00 <xTaskGetSchedulerState>
 8016d96:	4603      	mov	r3, r0
 8016d98:	2b00      	cmp	r3, #0
 8016d9a:	d102      	bne.n	8016da2 <xQueueReceive+0x6e>
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	2b00      	cmp	r3, #0
 8016da0:	d101      	bne.n	8016da6 <xQueueReceive+0x72>
 8016da2:	2301      	movs	r3, #1
 8016da4:	e000      	b.n	8016da8 <xQueueReceive+0x74>
 8016da6:	2300      	movs	r3, #0
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	d10a      	bne.n	8016dc2 <xQueueReceive+0x8e>
	__asm volatile
 8016dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016db0:	f383 8811 	msr	BASEPRI, r3
 8016db4:	f3bf 8f6f 	isb	sy
 8016db8:	f3bf 8f4f 	dsb	sy
 8016dbc:	61bb      	str	r3, [r7, #24]
}
 8016dbe:	bf00      	nop
 8016dc0:	e7fe      	b.n	8016dc0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016dc2:	f001 fd77 	bl	80188b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016dca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dce:	2b00      	cmp	r3, #0
 8016dd0:	d014      	beq.n	8016dfc <xQueueReceive+0xc8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8016dd2:	68b9      	ldr	r1, [r7, #8]
 8016dd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016dd6:	f000 f90e 	bl	8016ff6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8016dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ddc:	1e5a      	subs	r2, r3, #1
 8016dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016de0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016de4:	691b      	ldr	r3, [r3, #16]
 8016de6:	2b00      	cmp	r3, #0
 8016de8:	d004      	beq.n	8016df4 <xQueueReceive+0xc0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016dec:	3310      	adds	r3, #16
 8016dee:	4618      	mov	r0, r3
 8016df0:	f000 fe4e 	bl	8017a90 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8016df4:	f001 fd8e 	bl	8018914 <vPortExitCritical>
				return pdPASS;
 8016df8:	2301      	movs	r3, #1
 8016dfa:	e069      	b.n	8016ed0 <xQueueReceive+0x19c>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016dfc:	687b      	ldr	r3, [r7, #4]
 8016dfe:	2b00      	cmp	r3, #0
 8016e00:	d103      	bne.n	8016e0a <xQueueReceive+0xd6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016e02:	f001 fd87 	bl	8018914 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8016e06:	2300      	movs	r3, #0
 8016e08:	e062      	b.n	8016ed0 <xQueueReceive+0x19c>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e0c:	2b00      	cmp	r3, #0
 8016e0e:	d106      	bne.n	8016e1e <xQueueReceive+0xea>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016e10:	f107 0310 	add.w	r3, r7, #16
 8016e14:	4618      	mov	r0, r3
 8016e16:	f000 fe9f 	bl	8017b58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016e1a:	2301      	movs	r3, #1
 8016e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016e1e:	f001 fd79 	bl	8018914 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016e22:	f000 fc43 	bl	80176ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016e26:	f001 fd45 	bl	80188b4 <vPortEnterCritical>
 8016e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016e30:	b25b      	sxtb	r3, r3
 8016e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e36:	d103      	bne.n	8016e40 <xQueueReceive+0x10c>
 8016e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e3a:	2200      	movs	r2, #0
 8016e3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016e46:	b25b      	sxtb	r3, r3
 8016e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e4c:	d103      	bne.n	8016e56 <xQueueReceive+0x122>
 8016e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e50:	2200      	movs	r2, #0
 8016e52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016e56:	f001 fd5d 	bl	8018914 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016e5a:	1d3a      	adds	r2, r7, #4
 8016e5c:	f107 0310 	add.w	r3, r7, #16
 8016e60:	4611      	mov	r1, r2
 8016e62:	4618      	mov	r0, r3
 8016e64:	f000 fe8e 	bl	8017b84 <xTaskCheckForTimeOut>
 8016e68:	4603      	mov	r3, r0
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	d123      	bne.n	8016eb6 <xQueueReceive+0x182>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016e6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016e70:	f000 f939 	bl	80170e6 <prvIsQueueEmpty>
 8016e74:	4603      	mov	r3, r0
 8016e76:	2b00      	cmp	r3, #0
 8016e78:	d017      	beq.n	8016eaa <xQueueReceive+0x176>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e7c:	3324      	adds	r3, #36	; 0x24
 8016e7e:	687a      	ldr	r2, [r7, #4]
 8016e80:	4611      	mov	r1, r2
 8016e82:	4618      	mov	r0, r3
 8016e84:	f000 fdb4 	bl	80179f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8016e88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016e8a:	f000 f8da 	bl	8017042 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016e8e:	f000 fc1b 	bl	80176c8 <xTaskResumeAll>
 8016e92:	4603      	mov	r3, r0
 8016e94:	2b00      	cmp	r3, #0
 8016e96:	d194      	bne.n	8016dc2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8016e98:	4b0f      	ldr	r3, [pc, #60]	; (8016ed8 <xQueueReceive+0x1a4>)
 8016e9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016e9e:	601a      	str	r2, [r3, #0]
 8016ea0:	f3bf 8f4f 	dsb	sy
 8016ea4:	f3bf 8f6f 	isb	sy
 8016ea8:	e78b      	b.n	8016dc2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8016eaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016eac:	f000 f8c9 	bl	8017042 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016eb0:	f000 fc0a 	bl	80176c8 <xTaskResumeAll>
 8016eb4:	e785      	b.n	8016dc2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8016eb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016eb8:	f000 f8c3 	bl	8017042 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016ebc:	f000 fc04 	bl	80176c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016ec0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016ec2:	f000 f910 	bl	80170e6 <prvIsQueueEmpty>
 8016ec6:	4603      	mov	r3, r0
 8016ec8:	2b00      	cmp	r3, #0
 8016eca:	f43f af7a 	beq.w	8016dc2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8016ece:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8016ed0:	4618      	mov	r0, r3
 8016ed2:	3730      	adds	r7, #48	; 0x30
 8016ed4:	46bd      	mov	sp, r7
 8016ed6:	bd80      	pop	{r7, pc}
 8016ed8:	e000ed04 	.word	0xe000ed04

08016edc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8016edc:	b580      	push	{r7, lr}
 8016ede:	b084      	sub	sp, #16
 8016ee0:	af00      	add	r7, sp, #0
 8016ee2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8016ee8:	68fb      	ldr	r3, [r7, #12]
 8016eea:	2b00      	cmp	r3, #0
 8016eec:	d10a      	bne.n	8016f04 <vQueueDelete+0x28>
	__asm volatile
 8016eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ef2:	f383 8811 	msr	BASEPRI, r3
 8016ef6:	f3bf 8f6f 	isb	sy
 8016efa:	f3bf 8f4f 	dsb	sy
 8016efe:	60bb      	str	r3, [r7, #8]
}
 8016f00:	bf00      	nop
 8016f02:	e7fe      	b.n	8016f02 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8016f04:	68f8      	ldr	r0, [r7, #12]
 8016f06:	f000 f947 	bl	8017198 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8016f0a:	68fb      	ldr	r3, [r7, #12]
 8016f0c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8016f10:	2b00      	cmp	r3, #0
 8016f12:	d102      	bne.n	8016f1a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8016f14:	68f8      	ldr	r0, [r7, #12]
 8016f16:	f001 febb 	bl	8018c90 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8016f1a:	bf00      	nop
 8016f1c:	3710      	adds	r7, #16
 8016f1e:	46bd      	mov	sp, r7
 8016f20:	bd80      	pop	{r7, pc}

08016f22 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8016f22:	b580      	push	{r7, lr}
 8016f24:	b086      	sub	sp, #24
 8016f26:	af00      	add	r7, sp, #0
 8016f28:	60f8      	str	r0, [r7, #12]
 8016f2a:	60b9      	str	r1, [r7, #8]
 8016f2c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8016f2e:	2300      	movs	r3, #0
 8016f30:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016f32:	68fb      	ldr	r3, [r7, #12]
 8016f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016f36:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8016f38:	68fb      	ldr	r3, [r7, #12]
 8016f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016f3c:	2b00      	cmp	r3, #0
 8016f3e:	d10d      	bne.n	8016f5c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016f40:	68fb      	ldr	r3, [r7, #12]
 8016f42:	681b      	ldr	r3, [r3, #0]
 8016f44:	2b00      	cmp	r3, #0
 8016f46:	d14d      	bne.n	8016fe4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016f48:	68fb      	ldr	r3, [r7, #12]
 8016f4a:	689b      	ldr	r3, [r3, #8]
 8016f4c:	4618      	mov	r0, r3
 8016f4e:	f000 ff75 	bl	8017e3c <xTaskPriorityDisinherit>
 8016f52:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8016f54:	68fb      	ldr	r3, [r7, #12]
 8016f56:	2200      	movs	r2, #0
 8016f58:	609a      	str	r2, [r3, #8]
 8016f5a:	e043      	b.n	8016fe4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	2b00      	cmp	r3, #0
 8016f60:	d119      	bne.n	8016f96 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016f62:	68fb      	ldr	r3, [r7, #12]
 8016f64:	6858      	ldr	r0, [r3, #4]
 8016f66:	68fb      	ldr	r3, [r7, #12]
 8016f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016f6a:	461a      	mov	r2, r3
 8016f6c:	68b9      	ldr	r1, [r7, #8]
 8016f6e:	f003 fcd0 	bl	801a912 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016f72:	68fb      	ldr	r3, [r7, #12]
 8016f74:	685a      	ldr	r2, [r3, #4]
 8016f76:	68fb      	ldr	r3, [r7, #12]
 8016f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016f7a:	441a      	add	r2, r3
 8016f7c:	68fb      	ldr	r3, [r7, #12]
 8016f7e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016f80:	68fb      	ldr	r3, [r7, #12]
 8016f82:	685a      	ldr	r2, [r3, #4]
 8016f84:	68fb      	ldr	r3, [r7, #12]
 8016f86:	689b      	ldr	r3, [r3, #8]
 8016f88:	429a      	cmp	r2, r3
 8016f8a:	d32b      	bcc.n	8016fe4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8016f8c:	68fb      	ldr	r3, [r7, #12]
 8016f8e:	681a      	ldr	r2, [r3, #0]
 8016f90:	68fb      	ldr	r3, [r7, #12]
 8016f92:	605a      	str	r2, [r3, #4]
 8016f94:	e026      	b.n	8016fe4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8016f96:	68fb      	ldr	r3, [r7, #12]
 8016f98:	68d8      	ldr	r0, [r3, #12]
 8016f9a:	68fb      	ldr	r3, [r7, #12]
 8016f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016f9e:	461a      	mov	r2, r3
 8016fa0:	68b9      	ldr	r1, [r7, #8]
 8016fa2:	f003 fcb6 	bl	801a912 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8016fa6:	68fb      	ldr	r3, [r7, #12]
 8016fa8:	68da      	ldr	r2, [r3, #12]
 8016faa:	68fb      	ldr	r3, [r7, #12]
 8016fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016fae:	425b      	negs	r3, r3
 8016fb0:	441a      	add	r2, r3
 8016fb2:	68fb      	ldr	r3, [r7, #12]
 8016fb4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016fb6:	68fb      	ldr	r3, [r7, #12]
 8016fb8:	68da      	ldr	r2, [r3, #12]
 8016fba:	68fb      	ldr	r3, [r7, #12]
 8016fbc:	681b      	ldr	r3, [r3, #0]
 8016fbe:	429a      	cmp	r2, r3
 8016fc0:	d207      	bcs.n	8016fd2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8016fc2:	68fb      	ldr	r3, [r7, #12]
 8016fc4:	689a      	ldr	r2, [r3, #8]
 8016fc6:	68fb      	ldr	r3, [r7, #12]
 8016fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016fca:	425b      	negs	r3, r3
 8016fcc:	441a      	add	r2, r3
 8016fce:	68fb      	ldr	r3, [r7, #12]
 8016fd0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8016fd2:	687b      	ldr	r3, [r7, #4]
 8016fd4:	2b02      	cmp	r3, #2
 8016fd6:	d105      	bne.n	8016fe4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016fd8:	693b      	ldr	r3, [r7, #16]
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	d002      	beq.n	8016fe4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8016fde:	693b      	ldr	r3, [r7, #16]
 8016fe0:	3b01      	subs	r3, #1
 8016fe2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016fe4:	693b      	ldr	r3, [r7, #16]
 8016fe6:	1c5a      	adds	r2, r3, #1
 8016fe8:	68fb      	ldr	r3, [r7, #12]
 8016fea:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8016fec:	697b      	ldr	r3, [r7, #20]
}
 8016fee:	4618      	mov	r0, r3
 8016ff0:	3718      	adds	r7, #24
 8016ff2:	46bd      	mov	sp, r7
 8016ff4:	bd80      	pop	{r7, pc}

08016ff6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8016ff6:	b580      	push	{r7, lr}
 8016ff8:	b082      	sub	sp, #8
 8016ffa:	af00      	add	r7, sp, #0
 8016ffc:	6078      	str	r0, [r7, #4]
 8016ffe:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017004:	2b00      	cmp	r3, #0
 8017006:	d018      	beq.n	801703a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017008:	687b      	ldr	r3, [r7, #4]
 801700a:	68da      	ldr	r2, [r3, #12]
 801700c:	687b      	ldr	r3, [r7, #4]
 801700e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017010:	441a      	add	r2, r3
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8017016:	687b      	ldr	r3, [r7, #4]
 8017018:	68da      	ldr	r2, [r3, #12]
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	689b      	ldr	r3, [r3, #8]
 801701e:	429a      	cmp	r2, r3
 8017020:	d303      	bcc.n	801702a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	681a      	ldr	r2, [r3, #0]
 8017026:	687b      	ldr	r3, [r7, #4]
 8017028:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	68d9      	ldr	r1, [r3, #12]
 801702e:	687b      	ldr	r3, [r7, #4]
 8017030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017032:	461a      	mov	r2, r3
 8017034:	6838      	ldr	r0, [r7, #0]
 8017036:	f003 fc6c 	bl	801a912 <memcpy>
	}
}
 801703a:	bf00      	nop
 801703c:	3708      	adds	r7, #8
 801703e:	46bd      	mov	sp, r7
 8017040:	bd80      	pop	{r7, pc}

08017042 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8017042:	b580      	push	{r7, lr}
 8017044:	b084      	sub	sp, #16
 8017046:	af00      	add	r7, sp, #0
 8017048:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801704a:	f001 fc33 	bl	80188b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017054:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017056:	e011      	b.n	801707c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801705c:	2b00      	cmp	r3, #0
 801705e:	d012      	beq.n	8017086 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017060:	687b      	ldr	r3, [r7, #4]
 8017062:	3324      	adds	r3, #36	; 0x24
 8017064:	4618      	mov	r0, r3
 8017066:	f000 fd13 	bl	8017a90 <xTaskRemoveFromEventList>
 801706a:	4603      	mov	r3, r0
 801706c:	2b00      	cmp	r3, #0
 801706e:	d001      	beq.n	8017074 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8017070:	f000 fdea 	bl	8017c48 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8017074:	7bfb      	ldrb	r3, [r7, #15]
 8017076:	3b01      	subs	r3, #1
 8017078:	b2db      	uxtb	r3, r3
 801707a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801707c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017080:	2b00      	cmp	r3, #0
 8017082:	dce9      	bgt.n	8017058 <prvUnlockQueue+0x16>
 8017084:	e000      	b.n	8017088 <prvUnlockQueue+0x46>
					break;
 8017086:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8017088:	687b      	ldr	r3, [r7, #4]
 801708a:	22ff      	movs	r2, #255	; 0xff
 801708c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8017090:	f001 fc40 	bl	8018914 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8017094:	f001 fc0e 	bl	80188b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8017098:	687b      	ldr	r3, [r7, #4]
 801709a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801709e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80170a0:	e011      	b.n	80170c6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80170a2:	687b      	ldr	r3, [r7, #4]
 80170a4:	691b      	ldr	r3, [r3, #16]
 80170a6:	2b00      	cmp	r3, #0
 80170a8:	d012      	beq.n	80170d0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80170aa:	687b      	ldr	r3, [r7, #4]
 80170ac:	3310      	adds	r3, #16
 80170ae:	4618      	mov	r0, r3
 80170b0:	f000 fcee 	bl	8017a90 <xTaskRemoveFromEventList>
 80170b4:	4603      	mov	r3, r0
 80170b6:	2b00      	cmp	r3, #0
 80170b8:	d001      	beq.n	80170be <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80170ba:	f000 fdc5 	bl	8017c48 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80170be:	7bbb      	ldrb	r3, [r7, #14]
 80170c0:	3b01      	subs	r3, #1
 80170c2:	b2db      	uxtb	r3, r3
 80170c4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80170c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80170ca:	2b00      	cmp	r3, #0
 80170cc:	dce9      	bgt.n	80170a2 <prvUnlockQueue+0x60>
 80170ce:	e000      	b.n	80170d2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80170d0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	22ff      	movs	r2, #255	; 0xff
 80170d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80170da:	f001 fc1b 	bl	8018914 <vPortExitCritical>
}
 80170de:	bf00      	nop
 80170e0:	3710      	adds	r7, #16
 80170e2:	46bd      	mov	sp, r7
 80170e4:	bd80      	pop	{r7, pc}

080170e6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80170e6:	b580      	push	{r7, lr}
 80170e8:	b084      	sub	sp, #16
 80170ea:	af00      	add	r7, sp, #0
 80170ec:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80170ee:	f001 fbe1 	bl	80188b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80170f2:	687b      	ldr	r3, [r7, #4]
 80170f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80170f6:	2b00      	cmp	r3, #0
 80170f8:	d102      	bne.n	8017100 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80170fa:	2301      	movs	r3, #1
 80170fc:	60fb      	str	r3, [r7, #12]
 80170fe:	e001      	b.n	8017104 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8017100:	2300      	movs	r3, #0
 8017102:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017104:	f001 fc06 	bl	8018914 <vPortExitCritical>

	return xReturn;
 8017108:	68fb      	ldr	r3, [r7, #12]
}
 801710a:	4618      	mov	r0, r3
 801710c:	3710      	adds	r7, #16
 801710e:	46bd      	mov	sp, r7
 8017110:	bd80      	pop	{r7, pc}

08017112 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8017112:	b580      	push	{r7, lr}
 8017114:	b084      	sub	sp, #16
 8017116:	af00      	add	r7, sp, #0
 8017118:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801711a:	f001 fbcb 	bl	80188b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801711e:	687b      	ldr	r3, [r7, #4]
 8017120:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017122:	687b      	ldr	r3, [r7, #4]
 8017124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017126:	429a      	cmp	r2, r3
 8017128:	d102      	bne.n	8017130 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801712a:	2301      	movs	r3, #1
 801712c:	60fb      	str	r3, [r7, #12]
 801712e:	e001      	b.n	8017134 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8017130:	2300      	movs	r3, #0
 8017132:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017134:	f001 fbee 	bl	8018914 <vPortExitCritical>

	return xReturn;
 8017138:	68fb      	ldr	r3, [r7, #12]
}
 801713a:	4618      	mov	r0, r3
 801713c:	3710      	adds	r7, #16
 801713e:	46bd      	mov	sp, r7
 8017140:	bd80      	pop	{r7, pc}
	...

08017144 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8017144:	b480      	push	{r7}
 8017146:	b085      	sub	sp, #20
 8017148:	af00      	add	r7, sp, #0
 801714a:	6078      	str	r0, [r7, #4]
 801714c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801714e:	2300      	movs	r3, #0
 8017150:	60fb      	str	r3, [r7, #12]
 8017152:	e014      	b.n	801717e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8017154:	4a0f      	ldr	r2, [pc, #60]	; (8017194 <vQueueAddToRegistry+0x50>)
 8017156:	68fb      	ldr	r3, [r7, #12]
 8017158:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801715c:	2b00      	cmp	r3, #0
 801715e:	d10b      	bne.n	8017178 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8017160:	490c      	ldr	r1, [pc, #48]	; (8017194 <vQueueAddToRegistry+0x50>)
 8017162:	68fb      	ldr	r3, [r7, #12]
 8017164:	683a      	ldr	r2, [r7, #0]
 8017166:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801716a:	4a0a      	ldr	r2, [pc, #40]	; (8017194 <vQueueAddToRegistry+0x50>)
 801716c:	68fb      	ldr	r3, [r7, #12]
 801716e:	00db      	lsls	r3, r3, #3
 8017170:	4413      	add	r3, r2
 8017172:	687a      	ldr	r2, [r7, #4]
 8017174:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8017176:	e006      	b.n	8017186 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017178:	68fb      	ldr	r3, [r7, #12]
 801717a:	3301      	adds	r3, #1
 801717c:	60fb      	str	r3, [r7, #12]
 801717e:	68fb      	ldr	r3, [r7, #12]
 8017180:	2b07      	cmp	r3, #7
 8017182:	d9e7      	bls.n	8017154 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8017184:	bf00      	nop
 8017186:	bf00      	nop
 8017188:	3714      	adds	r7, #20
 801718a:	46bd      	mov	sp, r7
 801718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017190:	4770      	bx	lr
 8017192:	bf00      	nop
 8017194:	24005c94 	.word	0x24005c94

08017198 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8017198:	b480      	push	{r7}
 801719a:	b085      	sub	sp, #20
 801719c:	af00      	add	r7, sp, #0
 801719e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80171a0:	2300      	movs	r3, #0
 80171a2:	60fb      	str	r3, [r7, #12]
 80171a4:	e016      	b.n	80171d4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80171a6:	4a10      	ldr	r2, [pc, #64]	; (80171e8 <vQueueUnregisterQueue+0x50>)
 80171a8:	68fb      	ldr	r3, [r7, #12]
 80171aa:	00db      	lsls	r3, r3, #3
 80171ac:	4413      	add	r3, r2
 80171ae:	685b      	ldr	r3, [r3, #4]
 80171b0:	687a      	ldr	r2, [r7, #4]
 80171b2:	429a      	cmp	r2, r3
 80171b4:	d10b      	bne.n	80171ce <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80171b6:	4a0c      	ldr	r2, [pc, #48]	; (80171e8 <vQueueUnregisterQueue+0x50>)
 80171b8:	68fb      	ldr	r3, [r7, #12]
 80171ba:	2100      	movs	r1, #0
 80171bc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80171c0:	4a09      	ldr	r2, [pc, #36]	; (80171e8 <vQueueUnregisterQueue+0x50>)
 80171c2:	68fb      	ldr	r3, [r7, #12]
 80171c4:	00db      	lsls	r3, r3, #3
 80171c6:	4413      	add	r3, r2
 80171c8:	2200      	movs	r2, #0
 80171ca:	605a      	str	r2, [r3, #4]
				break;
 80171cc:	e006      	b.n	80171dc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80171ce:	68fb      	ldr	r3, [r7, #12]
 80171d0:	3301      	adds	r3, #1
 80171d2:	60fb      	str	r3, [r7, #12]
 80171d4:	68fb      	ldr	r3, [r7, #12]
 80171d6:	2b07      	cmp	r3, #7
 80171d8:	d9e5      	bls.n	80171a6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80171da:	bf00      	nop
 80171dc:	bf00      	nop
 80171de:	3714      	adds	r7, #20
 80171e0:	46bd      	mov	sp, r7
 80171e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171e6:	4770      	bx	lr
 80171e8:	24005c94 	.word	0x24005c94

080171ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80171ec:	b580      	push	{r7, lr}
 80171ee:	b086      	sub	sp, #24
 80171f0:	af00      	add	r7, sp, #0
 80171f2:	60f8      	str	r0, [r7, #12]
 80171f4:	60b9      	str	r1, [r7, #8]
 80171f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80171f8:	68fb      	ldr	r3, [r7, #12]
 80171fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80171fc:	f001 fb5a 	bl	80188b4 <vPortEnterCritical>
 8017200:	697b      	ldr	r3, [r7, #20]
 8017202:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017206:	b25b      	sxtb	r3, r3
 8017208:	f1b3 3fff 	cmp.w	r3, #4294967295
 801720c:	d103      	bne.n	8017216 <vQueueWaitForMessageRestricted+0x2a>
 801720e:	697b      	ldr	r3, [r7, #20]
 8017210:	2200      	movs	r2, #0
 8017212:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017216:	697b      	ldr	r3, [r7, #20]
 8017218:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801721c:	b25b      	sxtb	r3, r3
 801721e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017222:	d103      	bne.n	801722c <vQueueWaitForMessageRestricted+0x40>
 8017224:	697b      	ldr	r3, [r7, #20]
 8017226:	2200      	movs	r2, #0
 8017228:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801722c:	f001 fb72 	bl	8018914 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8017230:	697b      	ldr	r3, [r7, #20]
 8017232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017234:	2b00      	cmp	r3, #0
 8017236:	d106      	bne.n	8017246 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8017238:	697b      	ldr	r3, [r7, #20]
 801723a:	3324      	adds	r3, #36	; 0x24
 801723c:	687a      	ldr	r2, [r7, #4]
 801723e:	68b9      	ldr	r1, [r7, #8]
 8017240:	4618      	mov	r0, r3
 8017242:	f000 fbf9 	bl	8017a38 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8017246:	6978      	ldr	r0, [r7, #20]
 8017248:	f7ff fefb 	bl	8017042 <prvUnlockQueue>
	}
 801724c:	bf00      	nop
 801724e:	3718      	adds	r7, #24
 8017250:	46bd      	mov	sp, r7
 8017252:	bd80      	pop	{r7, pc}

08017254 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8017254:	b580      	push	{r7, lr}
 8017256:	b08e      	sub	sp, #56	; 0x38
 8017258:	af04      	add	r7, sp, #16
 801725a:	60f8      	str	r0, [r7, #12]
 801725c:	60b9      	str	r1, [r7, #8]
 801725e:	607a      	str	r2, [r7, #4]
 8017260:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8017262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017264:	2b00      	cmp	r3, #0
 8017266:	d10a      	bne.n	801727e <xTaskCreateStatic+0x2a>
	__asm volatile
 8017268:	f04f 0350 	mov.w	r3, #80	; 0x50
 801726c:	f383 8811 	msr	BASEPRI, r3
 8017270:	f3bf 8f6f 	isb	sy
 8017274:	f3bf 8f4f 	dsb	sy
 8017278:	623b      	str	r3, [r7, #32]
}
 801727a:	bf00      	nop
 801727c:	e7fe      	b.n	801727c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801727e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017280:	2b00      	cmp	r3, #0
 8017282:	d10a      	bne.n	801729a <xTaskCreateStatic+0x46>
	__asm volatile
 8017284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017288:	f383 8811 	msr	BASEPRI, r3
 801728c:	f3bf 8f6f 	isb	sy
 8017290:	f3bf 8f4f 	dsb	sy
 8017294:	61fb      	str	r3, [r7, #28]
}
 8017296:	bf00      	nop
 8017298:	e7fe      	b.n	8017298 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801729a:	235c      	movs	r3, #92	; 0x5c
 801729c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801729e:	693b      	ldr	r3, [r7, #16]
 80172a0:	2b5c      	cmp	r3, #92	; 0x5c
 80172a2:	d00a      	beq.n	80172ba <xTaskCreateStatic+0x66>
	__asm volatile
 80172a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172a8:	f383 8811 	msr	BASEPRI, r3
 80172ac:	f3bf 8f6f 	isb	sy
 80172b0:	f3bf 8f4f 	dsb	sy
 80172b4:	61bb      	str	r3, [r7, #24]
}
 80172b6:	bf00      	nop
 80172b8:	e7fe      	b.n	80172b8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80172ba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80172bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172be:	2b00      	cmp	r3, #0
 80172c0:	d01e      	beq.n	8017300 <xTaskCreateStatic+0xac>
 80172c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80172c4:	2b00      	cmp	r3, #0
 80172c6:	d01b      	beq.n	8017300 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80172c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172ca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80172cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80172d0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80172d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172d4:	2202      	movs	r2, #2
 80172d6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80172da:	2300      	movs	r3, #0
 80172dc:	9303      	str	r3, [sp, #12]
 80172de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172e0:	9302      	str	r3, [sp, #8]
 80172e2:	f107 0314 	add.w	r3, r7, #20
 80172e6:	9301      	str	r3, [sp, #4]
 80172e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172ea:	9300      	str	r3, [sp, #0]
 80172ec:	683b      	ldr	r3, [r7, #0]
 80172ee:	687a      	ldr	r2, [r7, #4]
 80172f0:	68b9      	ldr	r1, [r7, #8]
 80172f2:	68f8      	ldr	r0, [r7, #12]
 80172f4:	f000 f850 	bl	8017398 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80172f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80172fa:	f000 f8dd 	bl	80174b8 <prvAddNewTaskToReadyList>
 80172fe:	e001      	b.n	8017304 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8017300:	2300      	movs	r3, #0
 8017302:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8017304:	697b      	ldr	r3, [r7, #20]
	}
 8017306:	4618      	mov	r0, r3
 8017308:	3728      	adds	r7, #40	; 0x28
 801730a:	46bd      	mov	sp, r7
 801730c:	bd80      	pop	{r7, pc}

0801730e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801730e:	b580      	push	{r7, lr}
 8017310:	b08c      	sub	sp, #48	; 0x30
 8017312:	af04      	add	r7, sp, #16
 8017314:	60f8      	str	r0, [r7, #12]
 8017316:	60b9      	str	r1, [r7, #8]
 8017318:	603b      	str	r3, [r7, #0]
 801731a:	4613      	mov	r3, r2
 801731c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801731e:	88fb      	ldrh	r3, [r7, #6]
 8017320:	009b      	lsls	r3, r3, #2
 8017322:	4618      	mov	r0, r3
 8017324:	f001 fbe8 	bl	8018af8 <pvPortMalloc>
 8017328:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801732a:	697b      	ldr	r3, [r7, #20]
 801732c:	2b00      	cmp	r3, #0
 801732e:	d00e      	beq.n	801734e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8017330:	205c      	movs	r0, #92	; 0x5c
 8017332:	f001 fbe1 	bl	8018af8 <pvPortMalloc>
 8017336:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8017338:	69fb      	ldr	r3, [r7, #28]
 801733a:	2b00      	cmp	r3, #0
 801733c:	d003      	beq.n	8017346 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801733e:	69fb      	ldr	r3, [r7, #28]
 8017340:	697a      	ldr	r2, [r7, #20]
 8017342:	631a      	str	r2, [r3, #48]	; 0x30
 8017344:	e005      	b.n	8017352 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8017346:	6978      	ldr	r0, [r7, #20]
 8017348:	f001 fca2 	bl	8018c90 <vPortFree>
 801734c:	e001      	b.n	8017352 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801734e:	2300      	movs	r3, #0
 8017350:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8017352:	69fb      	ldr	r3, [r7, #28]
 8017354:	2b00      	cmp	r3, #0
 8017356:	d017      	beq.n	8017388 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8017358:	69fb      	ldr	r3, [r7, #28]
 801735a:	2200      	movs	r2, #0
 801735c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8017360:	88fa      	ldrh	r2, [r7, #6]
 8017362:	2300      	movs	r3, #0
 8017364:	9303      	str	r3, [sp, #12]
 8017366:	69fb      	ldr	r3, [r7, #28]
 8017368:	9302      	str	r3, [sp, #8]
 801736a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801736c:	9301      	str	r3, [sp, #4]
 801736e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017370:	9300      	str	r3, [sp, #0]
 8017372:	683b      	ldr	r3, [r7, #0]
 8017374:	68b9      	ldr	r1, [r7, #8]
 8017376:	68f8      	ldr	r0, [r7, #12]
 8017378:	f000 f80e 	bl	8017398 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801737c:	69f8      	ldr	r0, [r7, #28]
 801737e:	f000 f89b 	bl	80174b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8017382:	2301      	movs	r3, #1
 8017384:	61bb      	str	r3, [r7, #24]
 8017386:	e002      	b.n	801738e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8017388:	f04f 33ff 	mov.w	r3, #4294967295
 801738c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801738e:	69bb      	ldr	r3, [r7, #24]
	}
 8017390:	4618      	mov	r0, r3
 8017392:	3720      	adds	r7, #32
 8017394:	46bd      	mov	sp, r7
 8017396:	bd80      	pop	{r7, pc}

08017398 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8017398:	b580      	push	{r7, lr}
 801739a:	b088      	sub	sp, #32
 801739c:	af00      	add	r7, sp, #0
 801739e:	60f8      	str	r0, [r7, #12]
 80173a0:	60b9      	str	r1, [r7, #8]
 80173a2:	607a      	str	r2, [r7, #4]
 80173a4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80173a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173a8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80173aa:	687b      	ldr	r3, [r7, #4]
 80173ac:	009b      	lsls	r3, r3, #2
 80173ae:	461a      	mov	r2, r3
 80173b0:	21a5      	movs	r1, #165	; 0xa5
 80173b2:	f003 fa2e 	bl	801a812 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80173b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80173ba:	6879      	ldr	r1, [r7, #4]
 80173bc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80173c0:	440b      	add	r3, r1
 80173c2:	009b      	lsls	r3, r3, #2
 80173c4:	4413      	add	r3, r2
 80173c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80173c8:	69bb      	ldr	r3, [r7, #24]
 80173ca:	f023 0307 	bic.w	r3, r3, #7
 80173ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80173d0:	69bb      	ldr	r3, [r7, #24]
 80173d2:	f003 0307 	and.w	r3, r3, #7
 80173d6:	2b00      	cmp	r3, #0
 80173d8:	d00a      	beq.n	80173f0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80173da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80173de:	f383 8811 	msr	BASEPRI, r3
 80173e2:	f3bf 8f6f 	isb	sy
 80173e6:	f3bf 8f4f 	dsb	sy
 80173ea:	617b      	str	r3, [r7, #20]
}
 80173ec:	bf00      	nop
 80173ee:	e7fe      	b.n	80173ee <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80173f0:	68bb      	ldr	r3, [r7, #8]
 80173f2:	2b00      	cmp	r3, #0
 80173f4:	d01f      	beq.n	8017436 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80173f6:	2300      	movs	r3, #0
 80173f8:	61fb      	str	r3, [r7, #28]
 80173fa:	e012      	b.n	8017422 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80173fc:	68ba      	ldr	r2, [r7, #8]
 80173fe:	69fb      	ldr	r3, [r7, #28]
 8017400:	4413      	add	r3, r2
 8017402:	7819      	ldrb	r1, [r3, #0]
 8017404:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017406:	69fb      	ldr	r3, [r7, #28]
 8017408:	4413      	add	r3, r2
 801740a:	3334      	adds	r3, #52	; 0x34
 801740c:	460a      	mov	r2, r1
 801740e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8017410:	68ba      	ldr	r2, [r7, #8]
 8017412:	69fb      	ldr	r3, [r7, #28]
 8017414:	4413      	add	r3, r2
 8017416:	781b      	ldrb	r3, [r3, #0]
 8017418:	2b00      	cmp	r3, #0
 801741a:	d006      	beq.n	801742a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801741c:	69fb      	ldr	r3, [r7, #28]
 801741e:	3301      	adds	r3, #1
 8017420:	61fb      	str	r3, [r7, #28]
 8017422:	69fb      	ldr	r3, [r7, #28]
 8017424:	2b0f      	cmp	r3, #15
 8017426:	d9e9      	bls.n	80173fc <prvInitialiseNewTask+0x64>
 8017428:	e000      	b.n	801742c <prvInitialiseNewTask+0x94>
			{
				break;
 801742a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801742c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801742e:	2200      	movs	r2, #0
 8017430:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8017434:	e003      	b.n	801743e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8017436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017438:	2200      	movs	r2, #0
 801743a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801743e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017440:	2b37      	cmp	r3, #55	; 0x37
 8017442:	d901      	bls.n	8017448 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8017444:	2337      	movs	r3, #55	; 0x37
 8017446:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8017448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801744a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801744c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801744e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017450:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017452:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8017454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017456:	2200      	movs	r2, #0
 8017458:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801745a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801745c:	3304      	adds	r3, #4
 801745e:	4618      	mov	r0, r3
 8017460:	f7ff f82c 	bl	80164bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8017464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017466:	3318      	adds	r3, #24
 8017468:	4618      	mov	r0, r3
 801746a:	f7ff f827 	bl	80164bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801746e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017470:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017472:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017476:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801747a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801747c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801747e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017480:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017482:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8017484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017486:	2200      	movs	r2, #0
 8017488:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801748a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801748c:	2200      	movs	r2, #0
 801748e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8017492:	683a      	ldr	r2, [r7, #0]
 8017494:	68f9      	ldr	r1, [r7, #12]
 8017496:	69b8      	ldr	r0, [r7, #24]
 8017498:	f001 f8e0 	bl	801865c <pxPortInitialiseStack>
 801749c:	4602      	mov	r2, r0
 801749e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174a0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80174a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174a4:	2b00      	cmp	r3, #0
 80174a6:	d002      	beq.n	80174ae <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80174a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80174ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80174ae:	bf00      	nop
 80174b0:	3720      	adds	r7, #32
 80174b2:	46bd      	mov	sp, r7
 80174b4:	bd80      	pop	{r7, pc}
	...

080174b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80174b8:	b580      	push	{r7, lr}
 80174ba:	b082      	sub	sp, #8
 80174bc:	af00      	add	r7, sp, #0
 80174be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80174c0:	f001 f9f8 	bl	80188b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80174c4:	4b26      	ldr	r3, [pc, #152]	; (8017560 <prvAddNewTaskToReadyList+0xa8>)
 80174c6:	681b      	ldr	r3, [r3, #0]
 80174c8:	3301      	adds	r3, #1
 80174ca:	4a25      	ldr	r2, [pc, #148]	; (8017560 <prvAddNewTaskToReadyList+0xa8>)
 80174cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80174ce:	4b25      	ldr	r3, [pc, #148]	; (8017564 <prvAddNewTaskToReadyList+0xac>)
 80174d0:	681b      	ldr	r3, [r3, #0]
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	d109      	bne.n	80174ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80174d6:	4a23      	ldr	r2, [pc, #140]	; (8017564 <prvAddNewTaskToReadyList+0xac>)
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80174dc:	4b20      	ldr	r3, [pc, #128]	; (8017560 <prvAddNewTaskToReadyList+0xa8>)
 80174de:	681b      	ldr	r3, [r3, #0]
 80174e0:	2b01      	cmp	r3, #1
 80174e2:	d110      	bne.n	8017506 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80174e4:	f000 fbce 	bl	8017c84 <prvInitialiseTaskLists>
 80174e8:	e00d      	b.n	8017506 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80174ea:	4b1f      	ldr	r3, [pc, #124]	; (8017568 <prvAddNewTaskToReadyList+0xb0>)
 80174ec:	681b      	ldr	r3, [r3, #0]
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	d109      	bne.n	8017506 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80174f2:	4b1c      	ldr	r3, [pc, #112]	; (8017564 <prvAddNewTaskToReadyList+0xac>)
 80174f4:	681b      	ldr	r3, [r3, #0]
 80174f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80174fc:	429a      	cmp	r2, r3
 80174fe:	d802      	bhi.n	8017506 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8017500:	4a18      	ldr	r2, [pc, #96]	; (8017564 <prvAddNewTaskToReadyList+0xac>)
 8017502:	687b      	ldr	r3, [r7, #4]
 8017504:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8017506:	4b19      	ldr	r3, [pc, #100]	; (801756c <prvAddNewTaskToReadyList+0xb4>)
 8017508:	681b      	ldr	r3, [r3, #0]
 801750a:	3301      	adds	r3, #1
 801750c:	4a17      	ldr	r2, [pc, #92]	; (801756c <prvAddNewTaskToReadyList+0xb4>)
 801750e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8017510:	4b16      	ldr	r3, [pc, #88]	; (801756c <prvAddNewTaskToReadyList+0xb4>)
 8017512:	681a      	ldr	r2, [r3, #0]
 8017514:	687b      	ldr	r3, [r7, #4]
 8017516:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8017518:	687b      	ldr	r3, [r7, #4]
 801751a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801751c:	4b14      	ldr	r3, [pc, #80]	; (8017570 <prvAddNewTaskToReadyList+0xb8>)
 801751e:	681b      	ldr	r3, [r3, #0]
 8017520:	429a      	cmp	r2, r3
 8017522:	d903      	bls.n	801752c <prvAddNewTaskToReadyList+0x74>
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017528:	4a11      	ldr	r2, [pc, #68]	; (8017570 <prvAddNewTaskToReadyList+0xb8>)
 801752a:	6013      	str	r3, [r2, #0]
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017530:	4613      	mov	r3, r2
 8017532:	009b      	lsls	r3, r3, #2
 8017534:	4413      	add	r3, r2
 8017536:	009b      	lsls	r3, r3, #2
 8017538:	4a0e      	ldr	r2, [pc, #56]	; (8017574 <prvAddNewTaskToReadyList+0xbc>)
 801753a:	441a      	add	r2, r3
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	3304      	adds	r3, #4
 8017540:	4619      	mov	r1, r3
 8017542:	4610      	mov	r0, r2
 8017544:	f7fe ffc7 	bl	80164d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8017548:	f001 f9e4 	bl	8018914 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801754c:	4b06      	ldr	r3, [pc, #24]	; (8017568 <prvAddNewTaskToReadyList+0xb0>)
 801754e:	681b      	ldr	r3, [r3, #0]
 8017550:	2b00      	cmp	r3, #0
 8017552:	d001      	beq.n	8017558 <prvAddNewTaskToReadyList+0xa0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8017554:	4b03      	ldr	r3, [pc, #12]	; (8017564 <prvAddNewTaskToReadyList+0xac>)
 8017556:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017558:	bf00      	nop
 801755a:	3708      	adds	r7, #8
 801755c:	46bd      	mov	sp, r7
 801755e:	bd80      	pop	{r7, pc}
 8017560:	240061a8 	.word	0x240061a8
 8017564:	24005cd4 	.word	0x24005cd4
 8017568:	240061b4 	.word	0x240061b4
 801756c:	240061c4 	.word	0x240061c4
 8017570:	240061b0 	.word	0x240061b0
 8017574:	24005cd8 	.word	0x24005cd8

08017578 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8017578:	b580      	push	{r7, lr}
 801757a:	b084      	sub	sp, #16
 801757c:	af00      	add	r7, sp, #0
 801757e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8017580:	2300      	movs	r3, #0
 8017582:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8017584:	687b      	ldr	r3, [r7, #4]
 8017586:	2b00      	cmp	r3, #0
 8017588:	d017      	beq.n	80175ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801758a:	4b13      	ldr	r3, [pc, #76]	; (80175d8 <vTaskDelay+0x60>)
 801758c:	681b      	ldr	r3, [r3, #0]
 801758e:	2b00      	cmp	r3, #0
 8017590:	d00a      	beq.n	80175a8 <vTaskDelay+0x30>
	__asm volatile
 8017592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017596:	f383 8811 	msr	BASEPRI, r3
 801759a:	f3bf 8f6f 	isb	sy
 801759e:	f3bf 8f4f 	dsb	sy
 80175a2:	60bb      	str	r3, [r7, #8]
}
 80175a4:	bf00      	nop
 80175a6:	e7fe      	b.n	80175a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80175a8:	f000 f880 	bl	80176ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80175ac:	2100      	movs	r1, #0
 80175ae:	6878      	ldr	r0, [r7, #4]
 80175b0:	f000 fcb2 	bl	8017f18 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80175b4:	f000 f888 	bl	80176c8 <xTaskResumeAll>
 80175b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80175ba:	68fb      	ldr	r3, [r7, #12]
 80175bc:	2b00      	cmp	r3, #0
 80175be:	d107      	bne.n	80175d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80175c0:	4b06      	ldr	r3, [pc, #24]	; (80175dc <vTaskDelay+0x64>)
 80175c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80175c6:	601a      	str	r2, [r3, #0]
 80175c8:	f3bf 8f4f 	dsb	sy
 80175cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80175d0:	bf00      	nop
 80175d2:	3710      	adds	r7, #16
 80175d4:	46bd      	mov	sp, r7
 80175d6:	bd80      	pop	{r7, pc}
 80175d8:	240061d0 	.word	0x240061d0
 80175dc:	e000ed04 	.word	0xe000ed04

080175e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80175e0:	b580      	push	{r7, lr}
 80175e2:	b08a      	sub	sp, #40	; 0x28
 80175e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80175e6:	2300      	movs	r3, #0
 80175e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80175ea:	2300      	movs	r3, #0
 80175ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80175ee:	463a      	mov	r2, r7
 80175f0:	1d39      	adds	r1, r7, #4
 80175f2:	f107 0308 	add.w	r3, r7, #8
 80175f6:	4618      	mov	r0, r3
 80175f8:	f7fe ff0c 	bl	8016414 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80175fc:	6839      	ldr	r1, [r7, #0]
 80175fe:	687b      	ldr	r3, [r7, #4]
 8017600:	68ba      	ldr	r2, [r7, #8]
 8017602:	9202      	str	r2, [sp, #8]
 8017604:	9301      	str	r3, [sp, #4]
 8017606:	2300      	movs	r3, #0
 8017608:	9300      	str	r3, [sp, #0]
 801760a:	2300      	movs	r3, #0
 801760c:	460a      	mov	r2, r1
 801760e:	4921      	ldr	r1, [pc, #132]	; (8017694 <vTaskStartScheduler+0xb4>)
 8017610:	4821      	ldr	r0, [pc, #132]	; (8017698 <vTaskStartScheduler+0xb8>)
 8017612:	f7ff fe1f 	bl	8017254 <xTaskCreateStatic>
 8017616:	4603      	mov	r3, r0
 8017618:	4a20      	ldr	r2, [pc, #128]	; (801769c <vTaskStartScheduler+0xbc>)
 801761a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801761c:	4b1f      	ldr	r3, [pc, #124]	; (801769c <vTaskStartScheduler+0xbc>)
 801761e:	681b      	ldr	r3, [r3, #0]
 8017620:	2b00      	cmp	r3, #0
 8017622:	d002      	beq.n	801762a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8017624:	2301      	movs	r3, #1
 8017626:	617b      	str	r3, [r7, #20]
 8017628:	e001      	b.n	801762e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801762a:	2300      	movs	r3, #0
 801762c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801762e:	697b      	ldr	r3, [r7, #20]
 8017630:	2b01      	cmp	r3, #1
 8017632:	d102      	bne.n	801763a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8017634:	f000 fcc4 	bl	8017fc0 <xTimerCreateTimerTask>
 8017638:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801763a:	697b      	ldr	r3, [r7, #20]
 801763c:	2b01      	cmp	r3, #1
 801763e:	d116      	bne.n	801766e <vTaskStartScheduler+0x8e>
	__asm volatile
 8017640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017644:	f383 8811 	msr	BASEPRI, r3
 8017648:	f3bf 8f6f 	isb	sy
 801764c:	f3bf 8f4f 	dsb	sy
 8017650:	613b      	str	r3, [r7, #16]
}
 8017652:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8017654:	4b12      	ldr	r3, [pc, #72]	; (80176a0 <vTaskStartScheduler+0xc0>)
 8017656:	f04f 32ff 	mov.w	r2, #4294967295
 801765a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801765c:	4b11      	ldr	r3, [pc, #68]	; (80176a4 <vTaskStartScheduler+0xc4>)
 801765e:	2201      	movs	r2, #1
 8017660:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8017662:	4b11      	ldr	r3, [pc, #68]	; (80176a8 <vTaskStartScheduler+0xc8>)
 8017664:	2200      	movs	r2, #0
 8017666:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8017668:	f001 f882 	bl	8018770 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801766c:	e00e      	b.n	801768c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801766e:	697b      	ldr	r3, [r7, #20]
 8017670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017674:	d10a      	bne.n	801768c <vTaskStartScheduler+0xac>
	__asm volatile
 8017676:	f04f 0350 	mov.w	r3, #80	; 0x50
 801767a:	f383 8811 	msr	BASEPRI, r3
 801767e:	f3bf 8f6f 	isb	sy
 8017682:	f3bf 8f4f 	dsb	sy
 8017686:	60fb      	str	r3, [r7, #12]
}
 8017688:	bf00      	nop
 801768a:	e7fe      	b.n	801768a <vTaskStartScheduler+0xaa>
}
 801768c:	bf00      	nop
 801768e:	3718      	adds	r7, #24
 8017690:	46bd      	mov	sp, r7
 8017692:	bd80      	pop	{r7, pc}
 8017694:	0801c8c8 	.word	0x0801c8c8
 8017698:	08017c61 	.word	0x08017c61
 801769c:	240061cc 	.word	0x240061cc
 80176a0:	240061c8 	.word	0x240061c8
 80176a4:	240061b4 	.word	0x240061b4
 80176a8:	240061ac 	.word	0x240061ac

080176ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80176ac:	b480      	push	{r7}
 80176ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80176b0:	4b04      	ldr	r3, [pc, #16]	; (80176c4 <vTaskSuspendAll+0x18>)
 80176b2:	681b      	ldr	r3, [r3, #0]
 80176b4:	3301      	adds	r3, #1
 80176b6:	4a03      	ldr	r2, [pc, #12]	; (80176c4 <vTaskSuspendAll+0x18>)
 80176b8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80176ba:	bf00      	nop
 80176bc:	46bd      	mov	sp, r7
 80176be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176c2:	4770      	bx	lr
 80176c4:	240061d0 	.word	0x240061d0

080176c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80176c8:	b580      	push	{r7, lr}
 80176ca:	b084      	sub	sp, #16
 80176cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80176ce:	2300      	movs	r3, #0
 80176d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80176d2:	2300      	movs	r3, #0
 80176d4:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80176d6:	4b3c      	ldr	r3, [pc, #240]	; (80177c8 <xTaskResumeAll+0x100>)
 80176d8:	681b      	ldr	r3, [r3, #0]
 80176da:	2b00      	cmp	r3, #0
 80176dc:	d10a      	bne.n	80176f4 <xTaskResumeAll+0x2c>
	__asm volatile
 80176de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176e2:	f383 8811 	msr	BASEPRI, r3
 80176e6:	f3bf 8f6f 	isb	sy
 80176ea:	f3bf 8f4f 	dsb	sy
 80176ee:	603b      	str	r3, [r7, #0]
}
 80176f0:	bf00      	nop
 80176f2:	e7fe      	b.n	80176f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80176f4:	f001 f8de 	bl	80188b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80176f8:	4b33      	ldr	r3, [pc, #204]	; (80177c8 <xTaskResumeAll+0x100>)
 80176fa:	681b      	ldr	r3, [r3, #0]
 80176fc:	3b01      	subs	r3, #1
 80176fe:	4a32      	ldr	r2, [pc, #200]	; (80177c8 <xTaskResumeAll+0x100>)
 8017700:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017702:	4b31      	ldr	r3, [pc, #196]	; (80177c8 <xTaskResumeAll+0x100>)
 8017704:	681b      	ldr	r3, [r3, #0]
 8017706:	2b00      	cmp	r3, #0
 8017708:	d156      	bne.n	80177b8 <xTaskResumeAll+0xf0>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801770a:	4b30      	ldr	r3, [pc, #192]	; (80177cc <xTaskResumeAll+0x104>)
 801770c:	681b      	ldr	r3, [r3, #0]
 801770e:	2b00      	cmp	r3, #0
 8017710:	d052      	beq.n	80177b8 <xTaskResumeAll+0xf0>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017712:	e02f      	b.n	8017774 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017714:	4b2e      	ldr	r3, [pc, #184]	; (80177d0 <xTaskResumeAll+0x108>)
 8017716:	68db      	ldr	r3, [r3, #12]
 8017718:	68db      	ldr	r3, [r3, #12]
 801771a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801771c:	68fb      	ldr	r3, [r7, #12]
 801771e:	3318      	adds	r3, #24
 8017720:	4618      	mov	r0, r3
 8017722:	f7fe ff35 	bl	8016590 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017726:	68fb      	ldr	r3, [r7, #12]
 8017728:	3304      	adds	r3, #4
 801772a:	4618      	mov	r0, r3
 801772c:	f7fe ff30 	bl	8016590 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8017730:	68fb      	ldr	r3, [r7, #12]
 8017732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017734:	4b27      	ldr	r3, [pc, #156]	; (80177d4 <xTaskResumeAll+0x10c>)
 8017736:	681b      	ldr	r3, [r3, #0]
 8017738:	429a      	cmp	r2, r3
 801773a:	d903      	bls.n	8017744 <xTaskResumeAll+0x7c>
 801773c:	68fb      	ldr	r3, [r7, #12]
 801773e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017740:	4a24      	ldr	r2, [pc, #144]	; (80177d4 <xTaskResumeAll+0x10c>)
 8017742:	6013      	str	r3, [r2, #0]
 8017744:	68fb      	ldr	r3, [r7, #12]
 8017746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017748:	4613      	mov	r3, r2
 801774a:	009b      	lsls	r3, r3, #2
 801774c:	4413      	add	r3, r2
 801774e:	009b      	lsls	r3, r3, #2
 8017750:	4a21      	ldr	r2, [pc, #132]	; (80177d8 <xTaskResumeAll+0x110>)
 8017752:	441a      	add	r2, r3
 8017754:	68fb      	ldr	r3, [r7, #12]
 8017756:	3304      	adds	r3, #4
 8017758:	4619      	mov	r1, r3
 801775a:	4610      	mov	r0, r2
 801775c:	f7fe febb 	bl	80164d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017760:	68fb      	ldr	r3, [r7, #12]
 8017762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017764:	4b1d      	ldr	r3, [pc, #116]	; (80177dc <xTaskResumeAll+0x114>)
 8017766:	681b      	ldr	r3, [r3, #0]
 8017768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801776a:	429a      	cmp	r2, r3
 801776c:	d302      	bcc.n	8017774 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801776e:	4b1c      	ldr	r3, [pc, #112]	; (80177e0 <xTaskResumeAll+0x118>)
 8017770:	2201      	movs	r2, #1
 8017772:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017774:	4b16      	ldr	r3, [pc, #88]	; (80177d0 <xTaskResumeAll+0x108>)
 8017776:	681b      	ldr	r3, [r3, #0]
 8017778:	2b00      	cmp	r3, #0
 801777a:	d1cb      	bne.n	8017714 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801777c:	68fb      	ldr	r3, [r7, #12]
 801777e:	2b00      	cmp	r3, #0
 8017780:	d001      	beq.n	8017786 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8017782:	f000 fb1d 	bl	8017dc0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8017786:	4b17      	ldr	r3, [pc, #92]	; (80177e4 <xTaskResumeAll+0x11c>)
 8017788:	681b      	ldr	r3, [r3, #0]
 801778a:	60bb      	str	r3, [r7, #8]

					if( xPendedCounts > ( TickType_t ) 0U )
 801778c:	68bb      	ldr	r3, [r7, #8]
 801778e:	2b00      	cmp	r3, #0
 8017790:	d010      	beq.n	80177b4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8017792:	f000 f839 	bl	8017808 <xTaskIncrementTick>
 8017796:	4603      	mov	r3, r0
 8017798:	2b00      	cmp	r3, #0
 801779a:	d002      	beq.n	80177a2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801779c:	4b10      	ldr	r3, [pc, #64]	; (80177e0 <xTaskResumeAll+0x118>)
 801779e:	2201      	movs	r2, #1
 80177a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80177a2:	68bb      	ldr	r3, [r7, #8]
 80177a4:	3b01      	subs	r3, #1
 80177a6:	60bb      	str	r3, [r7, #8]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80177a8:	68bb      	ldr	r3, [r7, #8]
 80177aa:	2b00      	cmp	r3, #0
 80177ac:	d1f1      	bne.n	8017792 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80177ae:	4b0d      	ldr	r3, [pc, #52]	; (80177e4 <xTaskResumeAll+0x11c>)
 80177b0:	2200      	movs	r2, #0
 80177b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80177b4:	4b0a      	ldr	r3, [pc, #40]	; (80177e0 <xTaskResumeAll+0x118>)
 80177b6:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80177b8:	f001 f8ac 	bl	8018914 <vPortExitCritical>

	return xAlreadyYielded;
 80177bc:	687b      	ldr	r3, [r7, #4]
}
 80177be:	4618      	mov	r0, r3
 80177c0:	3710      	adds	r7, #16
 80177c2:	46bd      	mov	sp, r7
 80177c4:	bd80      	pop	{r7, pc}
 80177c6:	bf00      	nop
 80177c8:	240061d0 	.word	0x240061d0
 80177cc:	240061a8 	.word	0x240061a8
 80177d0:	24006168 	.word	0x24006168
 80177d4:	240061b0 	.word	0x240061b0
 80177d8:	24005cd8 	.word	0x24005cd8
 80177dc:	24005cd4 	.word	0x24005cd4
 80177e0:	240061bc 	.word	0x240061bc
 80177e4:	240061b8 	.word	0x240061b8

080177e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80177e8:	b480      	push	{r7}
 80177ea:	b083      	sub	sp, #12
 80177ec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80177ee:	4b05      	ldr	r3, [pc, #20]	; (8017804 <xTaskGetTickCount+0x1c>)
 80177f0:	681b      	ldr	r3, [r3, #0]
 80177f2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80177f4:	687b      	ldr	r3, [r7, #4]
}
 80177f6:	4618      	mov	r0, r3
 80177f8:	370c      	adds	r7, #12
 80177fa:	46bd      	mov	sp, r7
 80177fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017800:	4770      	bx	lr
 8017802:	bf00      	nop
 8017804:	240061ac 	.word	0x240061ac

08017808 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8017808:	b580      	push	{r7, lr}
 801780a:	b086      	sub	sp, #24
 801780c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801780e:	2300      	movs	r3, #0
 8017810:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017812:	4b3f      	ldr	r3, [pc, #252]	; (8017910 <xTaskIncrementTick+0x108>)
 8017814:	681b      	ldr	r3, [r3, #0]
 8017816:	2b00      	cmp	r3, #0
 8017818:	d170      	bne.n	80178fc <xTaskIncrementTick+0xf4>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801781a:	4b3e      	ldr	r3, [pc, #248]	; (8017914 <xTaskIncrementTick+0x10c>)
 801781c:	681b      	ldr	r3, [r3, #0]
 801781e:	3301      	adds	r3, #1
 8017820:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8017822:	4a3c      	ldr	r2, [pc, #240]	; (8017914 <xTaskIncrementTick+0x10c>)
 8017824:	693b      	ldr	r3, [r7, #16]
 8017826:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8017828:	693b      	ldr	r3, [r7, #16]
 801782a:	2b00      	cmp	r3, #0
 801782c:	d120      	bne.n	8017870 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 801782e:	4b3a      	ldr	r3, [pc, #232]	; (8017918 <xTaskIncrementTick+0x110>)
 8017830:	681b      	ldr	r3, [r3, #0]
 8017832:	681b      	ldr	r3, [r3, #0]
 8017834:	2b00      	cmp	r3, #0
 8017836:	d00a      	beq.n	801784e <xTaskIncrementTick+0x46>
	__asm volatile
 8017838:	f04f 0350 	mov.w	r3, #80	; 0x50
 801783c:	f383 8811 	msr	BASEPRI, r3
 8017840:	f3bf 8f6f 	isb	sy
 8017844:	f3bf 8f4f 	dsb	sy
 8017848:	603b      	str	r3, [r7, #0]
}
 801784a:	bf00      	nop
 801784c:	e7fe      	b.n	801784c <xTaskIncrementTick+0x44>
 801784e:	4b32      	ldr	r3, [pc, #200]	; (8017918 <xTaskIncrementTick+0x110>)
 8017850:	681b      	ldr	r3, [r3, #0]
 8017852:	60fb      	str	r3, [r7, #12]
 8017854:	4b31      	ldr	r3, [pc, #196]	; (801791c <xTaskIncrementTick+0x114>)
 8017856:	681b      	ldr	r3, [r3, #0]
 8017858:	4a2f      	ldr	r2, [pc, #188]	; (8017918 <xTaskIncrementTick+0x110>)
 801785a:	6013      	str	r3, [r2, #0]
 801785c:	4a2f      	ldr	r2, [pc, #188]	; (801791c <xTaskIncrementTick+0x114>)
 801785e:	68fb      	ldr	r3, [r7, #12]
 8017860:	6013      	str	r3, [r2, #0]
 8017862:	4b2f      	ldr	r3, [pc, #188]	; (8017920 <xTaskIncrementTick+0x118>)
 8017864:	681b      	ldr	r3, [r3, #0]
 8017866:	3301      	adds	r3, #1
 8017868:	4a2d      	ldr	r2, [pc, #180]	; (8017920 <xTaskIncrementTick+0x118>)
 801786a:	6013      	str	r3, [r2, #0]
 801786c:	f000 faa8 	bl	8017dc0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8017870:	4b2c      	ldr	r3, [pc, #176]	; (8017924 <xTaskIncrementTick+0x11c>)
 8017872:	681b      	ldr	r3, [r3, #0]
 8017874:	693a      	ldr	r2, [r7, #16]
 8017876:	429a      	cmp	r2, r3
 8017878:	d345      	bcc.n	8017906 <xTaskIncrementTick+0xfe>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801787a:	4b27      	ldr	r3, [pc, #156]	; (8017918 <xTaskIncrementTick+0x110>)
 801787c:	681b      	ldr	r3, [r3, #0]
 801787e:	681b      	ldr	r3, [r3, #0]
 8017880:	2b00      	cmp	r3, #0
 8017882:	d104      	bne.n	801788e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017884:	4b27      	ldr	r3, [pc, #156]	; (8017924 <xTaskIncrementTick+0x11c>)
 8017886:	f04f 32ff 	mov.w	r2, #4294967295
 801788a:	601a      	str	r2, [r3, #0]
					break;
 801788c:	e03b      	b.n	8017906 <xTaskIncrementTick+0xfe>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801788e:	4b22      	ldr	r3, [pc, #136]	; (8017918 <xTaskIncrementTick+0x110>)
 8017890:	681b      	ldr	r3, [r3, #0]
 8017892:	68db      	ldr	r3, [r3, #12]
 8017894:	68db      	ldr	r3, [r3, #12]
 8017896:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8017898:	68bb      	ldr	r3, [r7, #8]
 801789a:	685b      	ldr	r3, [r3, #4]
 801789c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801789e:	693a      	ldr	r2, [r7, #16]
 80178a0:	687b      	ldr	r3, [r7, #4]
 80178a2:	429a      	cmp	r2, r3
 80178a4:	d203      	bcs.n	80178ae <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80178a6:	4a1f      	ldr	r2, [pc, #124]	; (8017924 <xTaskIncrementTick+0x11c>)
 80178a8:	687b      	ldr	r3, [r7, #4]
 80178aa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80178ac:	e02b      	b.n	8017906 <xTaskIncrementTick+0xfe>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80178ae:	68bb      	ldr	r3, [r7, #8]
 80178b0:	3304      	adds	r3, #4
 80178b2:	4618      	mov	r0, r3
 80178b4:	f7fe fe6c 	bl	8016590 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80178b8:	68bb      	ldr	r3, [r7, #8]
 80178ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80178bc:	2b00      	cmp	r3, #0
 80178be:	d004      	beq.n	80178ca <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80178c0:	68bb      	ldr	r3, [r7, #8]
 80178c2:	3318      	adds	r3, #24
 80178c4:	4618      	mov	r0, r3
 80178c6:	f7fe fe63 	bl	8016590 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80178ca:	68bb      	ldr	r3, [r7, #8]
 80178cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80178ce:	4b16      	ldr	r3, [pc, #88]	; (8017928 <xTaskIncrementTick+0x120>)
 80178d0:	681b      	ldr	r3, [r3, #0]
 80178d2:	429a      	cmp	r2, r3
 80178d4:	d903      	bls.n	80178de <xTaskIncrementTick+0xd6>
 80178d6:	68bb      	ldr	r3, [r7, #8]
 80178d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80178da:	4a13      	ldr	r2, [pc, #76]	; (8017928 <xTaskIncrementTick+0x120>)
 80178dc:	6013      	str	r3, [r2, #0]
 80178de:	68bb      	ldr	r3, [r7, #8]
 80178e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80178e2:	4613      	mov	r3, r2
 80178e4:	009b      	lsls	r3, r3, #2
 80178e6:	4413      	add	r3, r2
 80178e8:	009b      	lsls	r3, r3, #2
 80178ea:	4a10      	ldr	r2, [pc, #64]	; (801792c <xTaskIncrementTick+0x124>)
 80178ec:	441a      	add	r2, r3
 80178ee:	68bb      	ldr	r3, [r7, #8]
 80178f0:	3304      	adds	r3, #4
 80178f2:	4619      	mov	r1, r3
 80178f4:	4610      	mov	r0, r2
 80178f6:	f7fe fdee 	bl	80164d6 <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80178fa:	e7be      	b.n	801787a <xTaskIncrementTick+0x72>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80178fc:	4b0c      	ldr	r3, [pc, #48]	; (8017930 <xTaskIncrementTick+0x128>)
 80178fe:	681b      	ldr	r3, [r3, #0]
 8017900:	3301      	adds	r3, #1
 8017902:	4a0b      	ldr	r2, [pc, #44]	; (8017930 <xTaskIncrementTick+0x128>)
 8017904:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8017906:	697b      	ldr	r3, [r7, #20]
}
 8017908:	4618      	mov	r0, r3
 801790a:	3718      	adds	r7, #24
 801790c:	46bd      	mov	sp, r7
 801790e:	bd80      	pop	{r7, pc}
 8017910:	240061d0 	.word	0x240061d0
 8017914:	240061ac 	.word	0x240061ac
 8017918:	24006160 	.word	0x24006160
 801791c:	24006164 	.word	0x24006164
 8017920:	240061c0 	.word	0x240061c0
 8017924:	240061c8 	.word	0x240061c8
 8017928:	240061b0 	.word	0x240061b0
 801792c:	24005cd8 	.word	0x24005cd8
 8017930:	240061b8 	.word	0x240061b8

08017934 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8017934:	b480      	push	{r7}
 8017936:	b085      	sub	sp, #20
 8017938:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801793a:	4b28      	ldr	r3, [pc, #160]	; (80179dc <vTaskSwitchContext+0xa8>)
 801793c:	681b      	ldr	r3, [r3, #0]
 801793e:	2b00      	cmp	r3, #0
 8017940:	d003      	beq.n	801794a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8017942:	4b27      	ldr	r3, [pc, #156]	; (80179e0 <vTaskSwitchContext+0xac>)
 8017944:	2201      	movs	r2, #1
 8017946:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8017948:	e041      	b.n	80179ce <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 801794a:	4b25      	ldr	r3, [pc, #148]	; (80179e0 <vTaskSwitchContext+0xac>)
 801794c:	2200      	movs	r2, #0
 801794e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017950:	4b24      	ldr	r3, [pc, #144]	; (80179e4 <vTaskSwitchContext+0xb0>)
 8017952:	681b      	ldr	r3, [r3, #0]
 8017954:	60fb      	str	r3, [r7, #12]
 8017956:	e010      	b.n	801797a <vTaskSwitchContext+0x46>
 8017958:	68fb      	ldr	r3, [r7, #12]
 801795a:	2b00      	cmp	r3, #0
 801795c:	d10a      	bne.n	8017974 <vTaskSwitchContext+0x40>
	__asm volatile
 801795e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017962:	f383 8811 	msr	BASEPRI, r3
 8017966:	f3bf 8f6f 	isb	sy
 801796a:	f3bf 8f4f 	dsb	sy
 801796e:	607b      	str	r3, [r7, #4]
}
 8017970:	bf00      	nop
 8017972:	e7fe      	b.n	8017972 <vTaskSwitchContext+0x3e>
 8017974:	68fb      	ldr	r3, [r7, #12]
 8017976:	3b01      	subs	r3, #1
 8017978:	60fb      	str	r3, [r7, #12]
 801797a:	491b      	ldr	r1, [pc, #108]	; (80179e8 <vTaskSwitchContext+0xb4>)
 801797c:	68fa      	ldr	r2, [r7, #12]
 801797e:	4613      	mov	r3, r2
 8017980:	009b      	lsls	r3, r3, #2
 8017982:	4413      	add	r3, r2
 8017984:	009b      	lsls	r3, r3, #2
 8017986:	440b      	add	r3, r1
 8017988:	681b      	ldr	r3, [r3, #0]
 801798a:	2b00      	cmp	r3, #0
 801798c:	d0e4      	beq.n	8017958 <vTaskSwitchContext+0x24>
 801798e:	68fa      	ldr	r2, [r7, #12]
 8017990:	4613      	mov	r3, r2
 8017992:	009b      	lsls	r3, r3, #2
 8017994:	4413      	add	r3, r2
 8017996:	009b      	lsls	r3, r3, #2
 8017998:	4a13      	ldr	r2, [pc, #76]	; (80179e8 <vTaskSwitchContext+0xb4>)
 801799a:	4413      	add	r3, r2
 801799c:	60bb      	str	r3, [r7, #8]
 801799e:	68bb      	ldr	r3, [r7, #8]
 80179a0:	685b      	ldr	r3, [r3, #4]
 80179a2:	685a      	ldr	r2, [r3, #4]
 80179a4:	68bb      	ldr	r3, [r7, #8]
 80179a6:	605a      	str	r2, [r3, #4]
 80179a8:	68bb      	ldr	r3, [r7, #8]
 80179aa:	685a      	ldr	r2, [r3, #4]
 80179ac:	68bb      	ldr	r3, [r7, #8]
 80179ae:	3308      	adds	r3, #8
 80179b0:	429a      	cmp	r2, r3
 80179b2:	d104      	bne.n	80179be <vTaskSwitchContext+0x8a>
 80179b4:	68bb      	ldr	r3, [r7, #8]
 80179b6:	685b      	ldr	r3, [r3, #4]
 80179b8:	685a      	ldr	r2, [r3, #4]
 80179ba:	68bb      	ldr	r3, [r7, #8]
 80179bc:	605a      	str	r2, [r3, #4]
 80179be:	68bb      	ldr	r3, [r7, #8]
 80179c0:	685b      	ldr	r3, [r3, #4]
 80179c2:	68db      	ldr	r3, [r3, #12]
 80179c4:	4a09      	ldr	r2, [pc, #36]	; (80179ec <vTaskSwitchContext+0xb8>)
 80179c6:	6013      	str	r3, [r2, #0]
 80179c8:	4a06      	ldr	r2, [pc, #24]	; (80179e4 <vTaskSwitchContext+0xb0>)
 80179ca:	68fb      	ldr	r3, [r7, #12]
 80179cc:	6013      	str	r3, [r2, #0]
}
 80179ce:	bf00      	nop
 80179d0:	3714      	adds	r7, #20
 80179d2:	46bd      	mov	sp, r7
 80179d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179d8:	4770      	bx	lr
 80179da:	bf00      	nop
 80179dc:	240061d0 	.word	0x240061d0
 80179e0:	240061bc 	.word	0x240061bc
 80179e4:	240061b0 	.word	0x240061b0
 80179e8:	24005cd8 	.word	0x24005cd8
 80179ec:	24005cd4 	.word	0x24005cd4

080179f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80179f0:	b580      	push	{r7, lr}
 80179f2:	b084      	sub	sp, #16
 80179f4:	af00      	add	r7, sp, #0
 80179f6:	6078      	str	r0, [r7, #4]
 80179f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80179fa:	687b      	ldr	r3, [r7, #4]
 80179fc:	2b00      	cmp	r3, #0
 80179fe:	d10a      	bne.n	8017a16 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8017a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a04:	f383 8811 	msr	BASEPRI, r3
 8017a08:	f3bf 8f6f 	isb	sy
 8017a0c:	f3bf 8f4f 	dsb	sy
 8017a10:	60fb      	str	r3, [r7, #12]
}
 8017a12:	bf00      	nop
 8017a14:	e7fe      	b.n	8017a14 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017a16:	4b07      	ldr	r3, [pc, #28]	; (8017a34 <vTaskPlaceOnEventList+0x44>)
 8017a18:	681b      	ldr	r3, [r3, #0]
 8017a1a:	3318      	adds	r3, #24
 8017a1c:	4619      	mov	r1, r3
 8017a1e:	6878      	ldr	r0, [r7, #4]
 8017a20:	f7fe fd7d 	bl	801651e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8017a24:	2101      	movs	r1, #1
 8017a26:	6838      	ldr	r0, [r7, #0]
 8017a28:	f000 fa76 	bl	8017f18 <prvAddCurrentTaskToDelayedList>
}
 8017a2c:	bf00      	nop
 8017a2e:	3710      	adds	r7, #16
 8017a30:	46bd      	mov	sp, r7
 8017a32:	bd80      	pop	{r7, pc}
 8017a34:	24005cd4 	.word	0x24005cd4

08017a38 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017a38:	b580      	push	{r7, lr}
 8017a3a:	b086      	sub	sp, #24
 8017a3c:	af00      	add	r7, sp, #0
 8017a3e:	60f8      	str	r0, [r7, #12]
 8017a40:	60b9      	str	r1, [r7, #8]
 8017a42:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8017a44:	68fb      	ldr	r3, [r7, #12]
 8017a46:	2b00      	cmp	r3, #0
 8017a48:	d10a      	bne.n	8017a60 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8017a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a4e:	f383 8811 	msr	BASEPRI, r3
 8017a52:	f3bf 8f6f 	isb	sy
 8017a56:	f3bf 8f4f 	dsb	sy
 8017a5a:	617b      	str	r3, [r7, #20]
}
 8017a5c:	bf00      	nop
 8017a5e:	e7fe      	b.n	8017a5e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017a60:	4b0a      	ldr	r3, [pc, #40]	; (8017a8c <vTaskPlaceOnEventListRestricted+0x54>)
 8017a62:	681b      	ldr	r3, [r3, #0]
 8017a64:	3318      	adds	r3, #24
 8017a66:	4619      	mov	r1, r3
 8017a68:	68f8      	ldr	r0, [r7, #12]
 8017a6a:	f7fe fd34 	bl	80164d6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8017a6e:	687b      	ldr	r3, [r7, #4]
 8017a70:	2b00      	cmp	r3, #0
 8017a72:	d002      	beq.n	8017a7a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8017a74:	f04f 33ff 	mov.w	r3, #4294967295
 8017a78:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8017a7a:	6879      	ldr	r1, [r7, #4]
 8017a7c:	68b8      	ldr	r0, [r7, #8]
 8017a7e:	f000 fa4b 	bl	8017f18 <prvAddCurrentTaskToDelayedList>
	}
 8017a82:	bf00      	nop
 8017a84:	3718      	adds	r7, #24
 8017a86:	46bd      	mov	sp, r7
 8017a88:	bd80      	pop	{r7, pc}
 8017a8a:	bf00      	nop
 8017a8c:	24005cd4 	.word	0x24005cd4

08017a90 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8017a90:	b580      	push	{r7, lr}
 8017a92:	b086      	sub	sp, #24
 8017a94:	af00      	add	r7, sp, #0
 8017a96:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017a98:	687b      	ldr	r3, [r7, #4]
 8017a9a:	68db      	ldr	r3, [r3, #12]
 8017a9c:	68db      	ldr	r3, [r3, #12]
 8017a9e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8017aa0:	693b      	ldr	r3, [r7, #16]
 8017aa2:	2b00      	cmp	r3, #0
 8017aa4:	d10a      	bne.n	8017abc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8017aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017aaa:	f383 8811 	msr	BASEPRI, r3
 8017aae:	f3bf 8f6f 	isb	sy
 8017ab2:	f3bf 8f4f 	dsb	sy
 8017ab6:	60fb      	str	r3, [r7, #12]
}
 8017ab8:	bf00      	nop
 8017aba:	e7fe      	b.n	8017aba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8017abc:	693b      	ldr	r3, [r7, #16]
 8017abe:	3318      	adds	r3, #24
 8017ac0:	4618      	mov	r0, r3
 8017ac2:	f7fe fd65 	bl	8016590 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017ac6:	4b1e      	ldr	r3, [pc, #120]	; (8017b40 <xTaskRemoveFromEventList+0xb0>)
 8017ac8:	681b      	ldr	r3, [r3, #0]
 8017aca:	2b00      	cmp	r3, #0
 8017acc:	d11d      	bne.n	8017b0a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8017ace:	693b      	ldr	r3, [r7, #16]
 8017ad0:	3304      	adds	r3, #4
 8017ad2:	4618      	mov	r0, r3
 8017ad4:	f7fe fd5c 	bl	8016590 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8017ad8:	693b      	ldr	r3, [r7, #16]
 8017ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017adc:	4b19      	ldr	r3, [pc, #100]	; (8017b44 <xTaskRemoveFromEventList+0xb4>)
 8017ade:	681b      	ldr	r3, [r3, #0]
 8017ae0:	429a      	cmp	r2, r3
 8017ae2:	d903      	bls.n	8017aec <xTaskRemoveFromEventList+0x5c>
 8017ae4:	693b      	ldr	r3, [r7, #16]
 8017ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017ae8:	4a16      	ldr	r2, [pc, #88]	; (8017b44 <xTaskRemoveFromEventList+0xb4>)
 8017aea:	6013      	str	r3, [r2, #0]
 8017aec:	693b      	ldr	r3, [r7, #16]
 8017aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017af0:	4613      	mov	r3, r2
 8017af2:	009b      	lsls	r3, r3, #2
 8017af4:	4413      	add	r3, r2
 8017af6:	009b      	lsls	r3, r3, #2
 8017af8:	4a13      	ldr	r2, [pc, #76]	; (8017b48 <xTaskRemoveFromEventList+0xb8>)
 8017afa:	441a      	add	r2, r3
 8017afc:	693b      	ldr	r3, [r7, #16]
 8017afe:	3304      	adds	r3, #4
 8017b00:	4619      	mov	r1, r3
 8017b02:	4610      	mov	r0, r2
 8017b04:	f7fe fce7 	bl	80164d6 <vListInsertEnd>
 8017b08:	e005      	b.n	8017b16 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8017b0a:	693b      	ldr	r3, [r7, #16]
 8017b0c:	3318      	adds	r3, #24
 8017b0e:	4619      	mov	r1, r3
 8017b10:	480e      	ldr	r0, [pc, #56]	; (8017b4c <xTaskRemoveFromEventList+0xbc>)
 8017b12:	f7fe fce0 	bl	80164d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8017b16:	693b      	ldr	r3, [r7, #16]
 8017b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017b1a:	4b0d      	ldr	r3, [pc, #52]	; (8017b50 <xTaskRemoveFromEventList+0xc0>)
 8017b1c:	681b      	ldr	r3, [r3, #0]
 8017b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017b20:	429a      	cmp	r2, r3
 8017b22:	d905      	bls.n	8017b30 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8017b24:	2301      	movs	r3, #1
 8017b26:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8017b28:	4b0a      	ldr	r3, [pc, #40]	; (8017b54 <xTaskRemoveFromEventList+0xc4>)
 8017b2a:	2201      	movs	r2, #1
 8017b2c:	601a      	str	r2, [r3, #0]
 8017b2e:	e001      	b.n	8017b34 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8017b30:	2300      	movs	r3, #0
 8017b32:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8017b34:	697b      	ldr	r3, [r7, #20]
}
 8017b36:	4618      	mov	r0, r3
 8017b38:	3718      	adds	r7, #24
 8017b3a:	46bd      	mov	sp, r7
 8017b3c:	bd80      	pop	{r7, pc}
 8017b3e:	bf00      	nop
 8017b40:	240061d0 	.word	0x240061d0
 8017b44:	240061b0 	.word	0x240061b0
 8017b48:	24005cd8 	.word	0x24005cd8
 8017b4c:	24006168 	.word	0x24006168
 8017b50:	24005cd4 	.word	0x24005cd4
 8017b54:	240061bc 	.word	0x240061bc

08017b58 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8017b58:	b480      	push	{r7}
 8017b5a:	b083      	sub	sp, #12
 8017b5c:	af00      	add	r7, sp, #0
 8017b5e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8017b60:	4b06      	ldr	r3, [pc, #24]	; (8017b7c <vTaskInternalSetTimeOutState+0x24>)
 8017b62:	681a      	ldr	r2, [r3, #0]
 8017b64:	687b      	ldr	r3, [r7, #4]
 8017b66:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8017b68:	4b05      	ldr	r3, [pc, #20]	; (8017b80 <vTaskInternalSetTimeOutState+0x28>)
 8017b6a:	681a      	ldr	r2, [r3, #0]
 8017b6c:	687b      	ldr	r3, [r7, #4]
 8017b6e:	605a      	str	r2, [r3, #4]
}
 8017b70:	bf00      	nop
 8017b72:	370c      	adds	r7, #12
 8017b74:	46bd      	mov	sp, r7
 8017b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b7a:	4770      	bx	lr
 8017b7c:	240061c0 	.word	0x240061c0
 8017b80:	240061ac 	.word	0x240061ac

08017b84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8017b84:	b580      	push	{r7, lr}
 8017b86:	b088      	sub	sp, #32
 8017b88:	af00      	add	r7, sp, #0
 8017b8a:	6078      	str	r0, [r7, #4]
 8017b8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8017b8e:	687b      	ldr	r3, [r7, #4]
 8017b90:	2b00      	cmp	r3, #0
 8017b92:	d10a      	bne.n	8017baa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8017b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b98:	f383 8811 	msr	BASEPRI, r3
 8017b9c:	f3bf 8f6f 	isb	sy
 8017ba0:	f3bf 8f4f 	dsb	sy
 8017ba4:	613b      	str	r3, [r7, #16]
}
 8017ba6:	bf00      	nop
 8017ba8:	e7fe      	b.n	8017ba8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8017baa:	683b      	ldr	r3, [r7, #0]
 8017bac:	2b00      	cmp	r3, #0
 8017bae:	d10a      	bne.n	8017bc6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8017bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017bb4:	f383 8811 	msr	BASEPRI, r3
 8017bb8:	f3bf 8f6f 	isb	sy
 8017bbc:	f3bf 8f4f 	dsb	sy
 8017bc0:	60fb      	str	r3, [r7, #12]
}
 8017bc2:	bf00      	nop
 8017bc4:	e7fe      	b.n	8017bc4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8017bc6:	f000 fe75 	bl	80188b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8017bca:	4b1d      	ldr	r3, [pc, #116]	; (8017c40 <xTaskCheckForTimeOut+0xbc>)
 8017bcc:	681b      	ldr	r3, [r3, #0]
 8017bce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8017bd0:	687b      	ldr	r3, [r7, #4]
 8017bd2:	685b      	ldr	r3, [r3, #4]
 8017bd4:	69ba      	ldr	r2, [r7, #24]
 8017bd6:	1ad3      	subs	r3, r2, r3
 8017bd8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8017bda:	683b      	ldr	r3, [r7, #0]
 8017bdc:	681b      	ldr	r3, [r3, #0]
 8017bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017be2:	d102      	bne.n	8017bea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8017be4:	2300      	movs	r3, #0
 8017be6:	61fb      	str	r3, [r7, #28]
 8017be8:	e023      	b.n	8017c32 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8017bea:	687b      	ldr	r3, [r7, #4]
 8017bec:	681a      	ldr	r2, [r3, #0]
 8017bee:	4b15      	ldr	r3, [pc, #84]	; (8017c44 <xTaskCheckForTimeOut+0xc0>)
 8017bf0:	681b      	ldr	r3, [r3, #0]
 8017bf2:	429a      	cmp	r2, r3
 8017bf4:	d007      	beq.n	8017c06 <xTaskCheckForTimeOut+0x82>
 8017bf6:	687b      	ldr	r3, [r7, #4]
 8017bf8:	685b      	ldr	r3, [r3, #4]
 8017bfa:	69ba      	ldr	r2, [r7, #24]
 8017bfc:	429a      	cmp	r2, r3
 8017bfe:	d302      	bcc.n	8017c06 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8017c00:	2301      	movs	r3, #1
 8017c02:	61fb      	str	r3, [r7, #28]
 8017c04:	e015      	b.n	8017c32 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8017c06:	683b      	ldr	r3, [r7, #0]
 8017c08:	681b      	ldr	r3, [r3, #0]
 8017c0a:	697a      	ldr	r2, [r7, #20]
 8017c0c:	429a      	cmp	r2, r3
 8017c0e:	d20b      	bcs.n	8017c28 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8017c10:	683b      	ldr	r3, [r7, #0]
 8017c12:	681a      	ldr	r2, [r3, #0]
 8017c14:	697b      	ldr	r3, [r7, #20]
 8017c16:	1ad2      	subs	r2, r2, r3
 8017c18:	683b      	ldr	r3, [r7, #0]
 8017c1a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8017c1c:	6878      	ldr	r0, [r7, #4]
 8017c1e:	f7ff ff9b 	bl	8017b58 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8017c22:	2300      	movs	r3, #0
 8017c24:	61fb      	str	r3, [r7, #28]
 8017c26:	e004      	b.n	8017c32 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8017c28:	683b      	ldr	r3, [r7, #0]
 8017c2a:	2200      	movs	r2, #0
 8017c2c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8017c2e:	2301      	movs	r3, #1
 8017c30:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8017c32:	f000 fe6f 	bl	8018914 <vPortExitCritical>

	return xReturn;
 8017c36:	69fb      	ldr	r3, [r7, #28]
}
 8017c38:	4618      	mov	r0, r3
 8017c3a:	3720      	adds	r7, #32
 8017c3c:	46bd      	mov	sp, r7
 8017c3e:	bd80      	pop	{r7, pc}
 8017c40:	240061ac 	.word	0x240061ac
 8017c44:	240061c0 	.word	0x240061c0

08017c48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8017c48:	b480      	push	{r7}
 8017c4a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8017c4c:	4b03      	ldr	r3, [pc, #12]	; (8017c5c <vTaskMissedYield+0x14>)
 8017c4e:	2201      	movs	r2, #1
 8017c50:	601a      	str	r2, [r3, #0]
}
 8017c52:	bf00      	nop
 8017c54:	46bd      	mov	sp, r7
 8017c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c5a:	4770      	bx	lr
 8017c5c:	240061bc 	.word	0x240061bc

08017c60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8017c60:	b580      	push	{r7, lr}
 8017c62:	b082      	sub	sp, #8
 8017c64:	af00      	add	r7, sp, #0
 8017c66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8017c68:	f000 f84c 	bl	8017d04 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 8017c6c:	4b04      	ldr	r3, [pc, #16]	; (8017c80 <prvIdleTask+0x20>)
 8017c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017c72:	601a      	str	r2, [r3, #0]
 8017c74:	f3bf 8f4f 	dsb	sy
 8017c78:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8017c7c:	e7f4      	b.n	8017c68 <prvIdleTask+0x8>
 8017c7e:	bf00      	nop
 8017c80:	e000ed04 	.word	0xe000ed04

08017c84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8017c84:	b580      	push	{r7, lr}
 8017c86:	b082      	sub	sp, #8
 8017c88:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017c8a:	2300      	movs	r3, #0
 8017c8c:	607b      	str	r3, [r7, #4]
 8017c8e:	e00c      	b.n	8017caa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8017c90:	687a      	ldr	r2, [r7, #4]
 8017c92:	4613      	mov	r3, r2
 8017c94:	009b      	lsls	r3, r3, #2
 8017c96:	4413      	add	r3, r2
 8017c98:	009b      	lsls	r3, r3, #2
 8017c9a:	4a12      	ldr	r2, [pc, #72]	; (8017ce4 <prvInitialiseTaskLists+0x60>)
 8017c9c:	4413      	add	r3, r2
 8017c9e:	4618      	mov	r0, r3
 8017ca0:	f7fe fbec 	bl	801647c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017ca4:	687b      	ldr	r3, [r7, #4]
 8017ca6:	3301      	adds	r3, #1
 8017ca8:	607b      	str	r3, [r7, #4]
 8017caa:	687b      	ldr	r3, [r7, #4]
 8017cac:	2b37      	cmp	r3, #55	; 0x37
 8017cae:	d9ef      	bls.n	8017c90 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8017cb0:	480d      	ldr	r0, [pc, #52]	; (8017ce8 <prvInitialiseTaskLists+0x64>)
 8017cb2:	f7fe fbe3 	bl	801647c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8017cb6:	480d      	ldr	r0, [pc, #52]	; (8017cec <prvInitialiseTaskLists+0x68>)
 8017cb8:	f7fe fbe0 	bl	801647c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8017cbc:	480c      	ldr	r0, [pc, #48]	; (8017cf0 <prvInitialiseTaskLists+0x6c>)
 8017cbe:	f7fe fbdd 	bl	801647c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8017cc2:	480c      	ldr	r0, [pc, #48]	; (8017cf4 <prvInitialiseTaskLists+0x70>)
 8017cc4:	f7fe fbda 	bl	801647c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8017cc8:	480b      	ldr	r0, [pc, #44]	; (8017cf8 <prvInitialiseTaskLists+0x74>)
 8017cca:	f7fe fbd7 	bl	801647c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8017cce:	4b0b      	ldr	r3, [pc, #44]	; (8017cfc <prvInitialiseTaskLists+0x78>)
 8017cd0:	4a05      	ldr	r2, [pc, #20]	; (8017ce8 <prvInitialiseTaskLists+0x64>)
 8017cd2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8017cd4:	4b0a      	ldr	r3, [pc, #40]	; (8017d00 <prvInitialiseTaskLists+0x7c>)
 8017cd6:	4a05      	ldr	r2, [pc, #20]	; (8017cec <prvInitialiseTaskLists+0x68>)
 8017cd8:	601a      	str	r2, [r3, #0]
}
 8017cda:	bf00      	nop
 8017cdc:	3708      	adds	r7, #8
 8017cde:	46bd      	mov	sp, r7
 8017ce0:	bd80      	pop	{r7, pc}
 8017ce2:	bf00      	nop
 8017ce4:	24005cd8 	.word	0x24005cd8
 8017ce8:	24006138 	.word	0x24006138
 8017cec:	2400614c 	.word	0x2400614c
 8017cf0:	24006168 	.word	0x24006168
 8017cf4:	2400617c 	.word	0x2400617c
 8017cf8:	24006194 	.word	0x24006194
 8017cfc:	24006160 	.word	0x24006160
 8017d00:	24006164 	.word	0x24006164

08017d04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8017d04:	b580      	push	{r7, lr}
 8017d06:	b082      	sub	sp, #8
 8017d08:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017d0a:	e019      	b.n	8017d40 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8017d0c:	f000 fdd2 	bl	80188b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017d10:	4b10      	ldr	r3, [pc, #64]	; (8017d54 <prvCheckTasksWaitingTermination+0x50>)
 8017d12:	68db      	ldr	r3, [r3, #12]
 8017d14:	68db      	ldr	r3, [r3, #12]
 8017d16:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017d18:	687b      	ldr	r3, [r7, #4]
 8017d1a:	3304      	adds	r3, #4
 8017d1c:	4618      	mov	r0, r3
 8017d1e:	f7fe fc37 	bl	8016590 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8017d22:	4b0d      	ldr	r3, [pc, #52]	; (8017d58 <prvCheckTasksWaitingTermination+0x54>)
 8017d24:	681b      	ldr	r3, [r3, #0]
 8017d26:	3b01      	subs	r3, #1
 8017d28:	4a0b      	ldr	r2, [pc, #44]	; (8017d58 <prvCheckTasksWaitingTermination+0x54>)
 8017d2a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8017d2c:	4b0b      	ldr	r3, [pc, #44]	; (8017d5c <prvCheckTasksWaitingTermination+0x58>)
 8017d2e:	681b      	ldr	r3, [r3, #0]
 8017d30:	3b01      	subs	r3, #1
 8017d32:	4a0a      	ldr	r2, [pc, #40]	; (8017d5c <prvCheckTasksWaitingTermination+0x58>)
 8017d34:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8017d36:	f000 fded 	bl	8018914 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8017d3a:	6878      	ldr	r0, [r7, #4]
 8017d3c:	f000 f810 	bl	8017d60 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017d40:	4b06      	ldr	r3, [pc, #24]	; (8017d5c <prvCheckTasksWaitingTermination+0x58>)
 8017d42:	681b      	ldr	r3, [r3, #0]
 8017d44:	2b00      	cmp	r3, #0
 8017d46:	d1e1      	bne.n	8017d0c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8017d48:	bf00      	nop
 8017d4a:	bf00      	nop
 8017d4c:	3708      	adds	r7, #8
 8017d4e:	46bd      	mov	sp, r7
 8017d50:	bd80      	pop	{r7, pc}
 8017d52:	bf00      	nop
 8017d54:	2400617c 	.word	0x2400617c
 8017d58:	240061a8 	.word	0x240061a8
 8017d5c:	24006190 	.word	0x24006190

08017d60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8017d60:	b580      	push	{r7, lr}
 8017d62:	b084      	sub	sp, #16
 8017d64:	af00      	add	r7, sp, #0
 8017d66:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8017d68:	687b      	ldr	r3, [r7, #4]
 8017d6a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8017d6e:	2b00      	cmp	r3, #0
 8017d70:	d108      	bne.n	8017d84 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8017d72:	687b      	ldr	r3, [r7, #4]
 8017d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d76:	4618      	mov	r0, r3
 8017d78:	f000 ff8a 	bl	8018c90 <vPortFree>
				vPortFree( pxTCB );
 8017d7c:	6878      	ldr	r0, [r7, #4]
 8017d7e:	f000 ff87 	bl	8018c90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8017d82:	e018      	b.n	8017db6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8017d84:	687b      	ldr	r3, [r7, #4]
 8017d86:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8017d8a:	2b01      	cmp	r3, #1
 8017d8c:	d103      	bne.n	8017d96 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8017d8e:	6878      	ldr	r0, [r7, #4]
 8017d90:	f000 ff7e 	bl	8018c90 <vPortFree>
	}
 8017d94:	e00f      	b.n	8017db6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8017d96:	687b      	ldr	r3, [r7, #4]
 8017d98:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8017d9c:	2b02      	cmp	r3, #2
 8017d9e:	d00a      	beq.n	8017db6 <prvDeleteTCB+0x56>
	__asm volatile
 8017da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017da4:	f383 8811 	msr	BASEPRI, r3
 8017da8:	f3bf 8f6f 	isb	sy
 8017dac:	f3bf 8f4f 	dsb	sy
 8017db0:	60fb      	str	r3, [r7, #12]
}
 8017db2:	bf00      	nop
 8017db4:	e7fe      	b.n	8017db4 <prvDeleteTCB+0x54>
	}
 8017db6:	bf00      	nop
 8017db8:	3710      	adds	r7, #16
 8017dba:	46bd      	mov	sp, r7
 8017dbc:	bd80      	pop	{r7, pc}
	...

08017dc0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8017dc0:	b480      	push	{r7}
 8017dc2:	b083      	sub	sp, #12
 8017dc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017dc6:	4b0c      	ldr	r3, [pc, #48]	; (8017df8 <prvResetNextTaskUnblockTime+0x38>)
 8017dc8:	681b      	ldr	r3, [r3, #0]
 8017dca:	681b      	ldr	r3, [r3, #0]
 8017dcc:	2b00      	cmp	r3, #0
 8017dce:	d104      	bne.n	8017dda <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8017dd0:	4b0a      	ldr	r3, [pc, #40]	; (8017dfc <prvResetNextTaskUnblockTime+0x3c>)
 8017dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8017dd6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8017dd8:	e008      	b.n	8017dec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017dda:	4b07      	ldr	r3, [pc, #28]	; (8017df8 <prvResetNextTaskUnblockTime+0x38>)
 8017ddc:	681b      	ldr	r3, [r3, #0]
 8017dde:	68db      	ldr	r3, [r3, #12]
 8017de0:	68db      	ldr	r3, [r3, #12]
 8017de2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8017de4:	687b      	ldr	r3, [r7, #4]
 8017de6:	685b      	ldr	r3, [r3, #4]
 8017de8:	4a04      	ldr	r2, [pc, #16]	; (8017dfc <prvResetNextTaskUnblockTime+0x3c>)
 8017dea:	6013      	str	r3, [r2, #0]
}
 8017dec:	bf00      	nop
 8017dee:	370c      	adds	r7, #12
 8017df0:	46bd      	mov	sp, r7
 8017df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017df6:	4770      	bx	lr
 8017df8:	24006160 	.word	0x24006160
 8017dfc:	240061c8 	.word	0x240061c8

08017e00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8017e00:	b480      	push	{r7}
 8017e02:	b083      	sub	sp, #12
 8017e04:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8017e06:	4b0b      	ldr	r3, [pc, #44]	; (8017e34 <xTaskGetSchedulerState+0x34>)
 8017e08:	681b      	ldr	r3, [r3, #0]
 8017e0a:	2b00      	cmp	r3, #0
 8017e0c:	d102      	bne.n	8017e14 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8017e0e:	2301      	movs	r3, #1
 8017e10:	607b      	str	r3, [r7, #4]
 8017e12:	e008      	b.n	8017e26 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017e14:	4b08      	ldr	r3, [pc, #32]	; (8017e38 <xTaskGetSchedulerState+0x38>)
 8017e16:	681b      	ldr	r3, [r3, #0]
 8017e18:	2b00      	cmp	r3, #0
 8017e1a:	d102      	bne.n	8017e22 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8017e1c:	2302      	movs	r3, #2
 8017e1e:	607b      	str	r3, [r7, #4]
 8017e20:	e001      	b.n	8017e26 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8017e22:	2300      	movs	r3, #0
 8017e24:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8017e26:	687b      	ldr	r3, [r7, #4]
	}
 8017e28:	4618      	mov	r0, r3
 8017e2a:	370c      	adds	r7, #12
 8017e2c:	46bd      	mov	sp, r7
 8017e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e32:	4770      	bx	lr
 8017e34:	240061b4 	.word	0x240061b4
 8017e38:	240061d0 	.word	0x240061d0

08017e3c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8017e3c:	b580      	push	{r7, lr}
 8017e3e:	b086      	sub	sp, #24
 8017e40:	af00      	add	r7, sp, #0
 8017e42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8017e44:	687b      	ldr	r3, [r7, #4]
 8017e46:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8017e48:	2300      	movs	r3, #0
 8017e4a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8017e4c:	687b      	ldr	r3, [r7, #4]
 8017e4e:	2b00      	cmp	r3, #0
 8017e50:	d056      	beq.n	8017f00 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8017e52:	4b2e      	ldr	r3, [pc, #184]	; (8017f0c <xTaskPriorityDisinherit+0xd0>)
 8017e54:	681b      	ldr	r3, [r3, #0]
 8017e56:	693a      	ldr	r2, [r7, #16]
 8017e58:	429a      	cmp	r2, r3
 8017e5a:	d00a      	beq.n	8017e72 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8017e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e60:	f383 8811 	msr	BASEPRI, r3
 8017e64:	f3bf 8f6f 	isb	sy
 8017e68:	f3bf 8f4f 	dsb	sy
 8017e6c:	60fb      	str	r3, [r7, #12]
}
 8017e6e:	bf00      	nop
 8017e70:	e7fe      	b.n	8017e70 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8017e72:	693b      	ldr	r3, [r7, #16]
 8017e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017e76:	2b00      	cmp	r3, #0
 8017e78:	d10a      	bne.n	8017e90 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8017e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e7e:	f383 8811 	msr	BASEPRI, r3
 8017e82:	f3bf 8f6f 	isb	sy
 8017e86:	f3bf 8f4f 	dsb	sy
 8017e8a:	60bb      	str	r3, [r7, #8]
}
 8017e8c:	bf00      	nop
 8017e8e:	e7fe      	b.n	8017e8e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8017e90:	693b      	ldr	r3, [r7, #16]
 8017e92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017e94:	1e5a      	subs	r2, r3, #1
 8017e96:	693b      	ldr	r3, [r7, #16]
 8017e98:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8017e9a:	693b      	ldr	r3, [r7, #16]
 8017e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017e9e:	693b      	ldr	r3, [r7, #16]
 8017ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017ea2:	429a      	cmp	r2, r3
 8017ea4:	d02c      	beq.n	8017f00 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8017ea6:	693b      	ldr	r3, [r7, #16]
 8017ea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017eaa:	2b00      	cmp	r3, #0
 8017eac:	d128      	bne.n	8017f00 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017eae:	693b      	ldr	r3, [r7, #16]
 8017eb0:	3304      	adds	r3, #4
 8017eb2:	4618      	mov	r0, r3
 8017eb4:	f7fe fb6c 	bl	8016590 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8017eb8:	693b      	ldr	r3, [r7, #16]
 8017eba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017ebc:	693b      	ldr	r3, [r7, #16]
 8017ebe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017ec0:	693b      	ldr	r3, [r7, #16]
 8017ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017ec4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017ec8:	693b      	ldr	r3, [r7, #16]
 8017eca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8017ecc:	693b      	ldr	r3, [r7, #16]
 8017ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017ed0:	4b0f      	ldr	r3, [pc, #60]	; (8017f10 <xTaskPriorityDisinherit+0xd4>)
 8017ed2:	681b      	ldr	r3, [r3, #0]
 8017ed4:	429a      	cmp	r2, r3
 8017ed6:	d903      	bls.n	8017ee0 <xTaskPriorityDisinherit+0xa4>
 8017ed8:	693b      	ldr	r3, [r7, #16]
 8017eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017edc:	4a0c      	ldr	r2, [pc, #48]	; (8017f10 <xTaskPriorityDisinherit+0xd4>)
 8017ede:	6013      	str	r3, [r2, #0]
 8017ee0:	693b      	ldr	r3, [r7, #16]
 8017ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017ee4:	4613      	mov	r3, r2
 8017ee6:	009b      	lsls	r3, r3, #2
 8017ee8:	4413      	add	r3, r2
 8017eea:	009b      	lsls	r3, r3, #2
 8017eec:	4a09      	ldr	r2, [pc, #36]	; (8017f14 <xTaskPriorityDisinherit+0xd8>)
 8017eee:	441a      	add	r2, r3
 8017ef0:	693b      	ldr	r3, [r7, #16]
 8017ef2:	3304      	adds	r3, #4
 8017ef4:	4619      	mov	r1, r3
 8017ef6:	4610      	mov	r0, r2
 8017ef8:	f7fe faed 	bl	80164d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8017efc:	2301      	movs	r3, #1
 8017efe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8017f00:	697b      	ldr	r3, [r7, #20]
	}
 8017f02:	4618      	mov	r0, r3
 8017f04:	3718      	adds	r7, #24
 8017f06:	46bd      	mov	sp, r7
 8017f08:	bd80      	pop	{r7, pc}
 8017f0a:	bf00      	nop
 8017f0c:	24005cd4 	.word	0x24005cd4
 8017f10:	240061b0 	.word	0x240061b0
 8017f14:	24005cd8 	.word	0x24005cd8

08017f18 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8017f18:	b580      	push	{r7, lr}
 8017f1a:	b084      	sub	sp, #16
 8017f1c:	af00      	add	r7, sp, #0
 8017f1e:	6078      	str	r0, [r7, #4]
 8017f20:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8017f22:	4b21      	ldr	r3, [pc, #132]	; (8017fa8 <prvAddCurrentTaskToDelayedList+0x90>)
 8017f24:	681b      	ldr	r3, [r3, #0]
 8017f26:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017f28:	4b20      	ldr	r3, [pc, #128]	; (8017fac <prvAddCurrentTaskToDelayedList+0x94>)
 8017f2a:	681b      	ldr	r3, [r3, #0]
 8017f2c:	3304      	adds	r3, #4
 8017f2e:	4618      	mov	r0, r3
 8017f30:	f7fe fb2e 	bl	8016590 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8017f34:	687b      	ldr	r3, [r7, #4]
 8017f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017f3a:	d10a      	bne.n	8017f52 <prvAddCurrentTaskToDelayedList+0x3a>
 8017f3c:	683b      	ldr	r3, [r7, #0]
 8017f3e:	2b00      	cmp	r3, #0
 8017f40:	d007      	beq.n	8017f52 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017f42:	4b1a      	ldr	r3, [pc, #104]	; (8017fac <prvAddCurrentTaskToDelayedList+0x94>)
 8017f44:	681b      	ldr	r3, [r3, #0]
 8017f46:	3304      	adds	r3, #4
 8017f48:	4619      	mov	r1, r3
 8017f4a:	4819      	ldr	r0, [pc, #100]	; (8017fb0 <prvAddCurrentTaskToDelayedList+0x98>)
 8017f4c:	f7fe fac3 	bl	80164d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8017f50:	e026      	b.n	8017fa0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8017f52:	68fa      	ldr	r2, [r7, #12]
 8017f54:	687b      	ldr	r3, [r7, #4]
 8017f56:	4413      	add	r3, r2
 8017f58:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8017f5a:	4b14      	ldr	r3, [pc, #80]	; (8017fac <prvAddCurrentTaskToDelayedList+0x94>)
 8017f5c:	681b      	ldr	r3, [r3, #0]
 8017f5e:	68ba      	ldr	r2, [r7, #8]
 8017f60:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8017f62:	68ba      	ldr	r2, [r7, #8]
 8017f64:	68fb      	ldr	r3, [r7, #12]
 8017f66:	429a      	cmp	r2, r3
 8017f68:	d209      	bcs.n	8017f7e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017f6a:	4b12      	ldr	r3, [pc, #72]	; (8017fb4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8017f6c:	681a      	ldr	r2, [r3, #0]
 8017f6e:	4b0f      	ldr	r3, [pc, #60]	; (8017fac <prvAddCurrentTaskToDelayedList+0x94>)
 8017f70:	681b      	ldr	r3, [r3, #0]
 8017f72:	3304      	adds	r3, #4
 8017f74:	4619      	mov	r1, r3
 8017f76:	4610      	mov	r0, r2
 8017f78:	f7fe fad1 	bl	801651e <vListInsert>
}
 8017f7c:	e010      	b.n	8017fa0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017f7e:	4b0e      	ldr	r3, [pc, #56]	; (8017fb8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8017f80:	681a      	ldr	r2, [r3, #0]
 8017f82:	4b0a      	ldr	r3, [pc, #40]	; (8017fac <prvAddCurrentTaskToDelayedList+0x94>)
 8017f84:	681b      	ldr	r3, [r3, #0]
 8017f86:	3304      	adds	r3, #4
 8017f88:	4619      	mov	r1, r3
 8017f8a:	4610      	mov	r0, r2
 8017f8c:	f7fe fac7 	bl	801651e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8017f90:	4b0a      	ldr	r3, [pc, #40]	; (8017fbc <prvAddCurrentTaskToDelayedList+0xa4>)
 8017f92:	681b      	ldr	r3, [r3, #0]
 8017f94:	68ba      	ldr	r2, [r7, #8]
 8017f96:	429a      	cmp	r2, r3
 8017f98:	d202      	bcs.n	8017fa0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8017f9a:	4a08      	ldr	r2, [pc, #32]	; (8017fbc <prvAddCurrentTaskToDelayedList+0xa4>)
 8017f9c:	68bb      	ldr	r3, [r7, #8]
 8017f9e:	6013      	str	r3, [r2, #0]
}
 8017fa0:	bf00      	nop
 8017fa2:	3710      	adds	r7, #16
 8017fa4:	46bd      	mov	sp, r7
 8017fa6:	bd80      	pop	{r7, pc}
 8017fa8:	240061ac 	.word	0x240061ac
 8017fac:	24005cd4 	.word	0x24005cd4
 8017fb0:	24006194 	.word	0x24006194
 8017fb4:	24006164 	.word	0x24006164
 8017fb8:	24006160 	.word	0x24006160
 8017fbc:	240061c8 	.word	0x240061c8

08017fc0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8017fc0:	b580      	push	{r7, lr}
 8017fc2:	b08a      	sub	sp, #40	; 0x28
 8017fc4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8017fc6:	2300      	movs	r3, #0
 8017fc8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8017fca:	f000 fb07 	bl	80185dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8017fce:	4b1c      	ldr	r3, [pc, #112]	; (8018040 <xTimerCreateTimerTask+0x80>)
 8017fd0:	681b      	ldr	r3, [r3, #0]
 8017fd2:	2b00      	cmp	r3, #0
 8017fd4:	d021      	beq.n	801801a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8017fd6:	2300      	movs	r3, #0
 8017fd8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8017fda:	2300      	movs	r3, #0
 8017fdc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8017fde:	1d3a      	adds	r2, r7, #4
 8017fe0:	f107 0108 	add.w	r1, r7, #8
 8017fe4:	f107 030c 	add.w	r3, r7, #12
 8017fe8:	4618      	mov	r0, r3
 8017fea:	f7fe fa2d 	bl	8016448 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8017fee:	6879      	ldr	r1, [r7, #4]
 8017ff0:	68bb      	ldr	r3, [r7, #8]
 8017ff2:	68fa      	ldr	r2, [r7, #12]
 8017ff4:	9202      	str	r2, [sp, #8]
 8017ff6:	9301      	str	r3, [sp, #4]
 8017ff8:	2302      	movs	r3, #2
 8017ffa:	9300      	str	r3, [sp, #0]
 8017ffc:	2300      	movs	r3, #0
 8017ffe:	460a      	mov	r2, r1
 8018000:	4910      	ldr	r1, [pc, #64]	; (8018044 <xTimerCreateTimerTask+0x84>)
 8018002:	4811      	ldr	r0, [pc, #68]	; (8018048 <xTimerCreateTimerTask+0x88>)
 8018004:	f7ff f926 	bl	8017254 <xTaskCreateStatic>
 8018008:	4603      	mov	r3, r0
 801800a:	4a10      	ldr	r2, [pc, #64]	; (801804c <xTimerCreateTimerTask+0x8c>)
 801800c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801800e:	4b0f      	ldr	r3, [pc, #60]	; (801804c <xTimerCreateTimerTask+0x8c>)
 8018010:	681b      	ldr	r3, [r3, #0]
 8018012:	2b00      	cmp	r3, #0
 8018014:	d001      	beq.n	801801a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8018016:	2301      	movs	r3, #1
 8018018:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801801a:	697b      	ldr	r3, [r7, #20]
 801801c:	2b00      	cmp	r3, #0
 801801e:	d10a      	bne.n	8018036 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8018020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018024:	f383 8811 	msr	BASEPRI, r3
 8018028:	f3bf 8f6f 	isb	sy
 801802c:	f3bf 8f4f 	dsb	sy
 8018030:	613b      	str	r3, [r7, #16]
}
 8018032:	bf00      	nop
 8018034:	e7fe      	b.n	8018034 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8018036:	697b      	ldr	r3, [r7, #20]
}
 8018038:	4618      	mov	r0, r3
 801803a:	3718      	adds	r7, #24
 801803c:	46bd      	mov	sp, r7
 801803e:	bd80      	pop	{r7, pc}
 8018040:	24006204 	.word	0x24006204
 8018044:	0801c8d0 	.word	0x0801c8d0
 8018048:	08018185 	.word	0x08018185
 801804c:	24006208 	.word	0x24006208

08018050 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8018050:	b580      	push	{r7, lr}
 8018052:	b08a      	sub	sp, #40	; 0x28
 8018054:	af00      	add	r7, sp, #0
 8018056:	60f8      	str	r0, [r7, #12]
 8018058:	60b9      	str	r1, [r7, #8]
 801805a:	607a      	str	r2, [r7, #4]
 801805c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801805e:	2300      	movs	r3, #0
 8018060:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8018062:	68fb      	ldr	r3, [r7, #12]
 8018064:	2b00      	cmp	r3, #0
 8018066:	d10a      	bne.n	801807e <xTimerGenericCommand+0x2e>
	__asm volatile
 8018068:	f04f 0350 	mov.w	r3, #80	; 0x50
 801806c:	f383 8811 	msr	BASEPRI, r3
 8018070:	f3bf 8f6f 	isb	sy
 8018074:	f3bf 8f4f 	dsb	sy
 8018078:	623b      	str	r3, [r7, #32]
}
 801807a:	bf00      	nop
 801807c:	e7fe      	b.n	801807c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801807e:	4b1a      	ldr	r3, [pc, #104]	; (80180e8 <xTimerGenericCommand+0x98>)
 8018080:	681b      	ldr	r3, [r3, #0]
 8018082:	2b00      	cmp	r3, #0
 8018084:	d02a      	beq.n	80180dc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8018086:	68bb      	ldr	r3, [r7, #8]
 8018088:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801808a:	687b      	ldr	r3, [r7, #4]
 801808c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801808e:	68fb      	ldr	r3, [r7, #12]
 8018090:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8018092:	68bb      	ldr	r3, [r7, #8]
 8018094:	2b05      	cmp	r3, #5
 8018096:	dc18      	bgt.n	80180ca <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8018098:	f7ff feb2 	bl	8017e00 <xTaskGetSchedulerState>
 801809c:	4603      	mov	r3, r0
 801809e:	2b02      	cmp	r3, #2
 80180a0:	d109      	bne.n	80180b6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80180a2:	4b11      	ldr	r3, [pc, #68]	; (80180e8 <xTimerGenericCommand+0x98>)
 80180a4:	6818      	ldr	r0, [r3, #0]
 80180a6:	f107 0110 	add.w	r1, r7, #16
 80180aa:	2300      	movs	r3, #0
 80180ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80180ae:	f7fe fc33 	bl	8016918 <xQueueGenericSend>
 80180b2:	6278      	str	r0, [r7, #36]	; 0x24
 80180b4:	e012      	b.n	80180dc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80180b6:	4b0c      	ldr	r3, [pc, #48]	; (80180e8 <xTimerGenericCommand+0x98>)
 80180b8:	6818      	ldr	r0, [r3, #0]
 80180ba:	f107 0110 	add.w	r1, r7, #16
 80180be:	2300      	movs	r3, #0
 80180c0:	2200      	movs	r2, #0
 80180c2:	f7fe fc29 	bl	8016918 <xQueueGenericSend>
 80180c6:	6278      	str	r0, [r7, #36]	; 0x24
 80180c8:	e008      	b.n	80180dc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80180ca:	4b07      	ldr	r3, [pc, #28]	; (80180e8 <xTimerGenericCommand+0x98>)
 80180cc:	6818      	ldr	r0, [r3, #0]
 80180ce:	f107 0110 	add.w	r1, r7, #16
 80180d2:	2300      	movs	r3, #0
 80180d4:	683a      	ldr	r2, [r7, #0]
 80180d6:	f7fe fd05 	bl	8016ae4 <xQueueGenericSendFromISR>
 80180da:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80180dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80180de:	4618      	mov	r0, r3
 80180e0:	3728      	adds	r7, #40	; 0x28
 80180e2:	46bd      	mov	sp, r7
 80180e4:	bd80      	pop	{r7, pc}
 80180e6:	bf00      	nop
 80180e8:	24006204 	.word	0x24006204

080180ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80180ec:	b580      	push	{r7, lr}
 80180ee:	b088      	sub	sp, #32
 80180f0:	af02      	add	r7, sp, #8
 80180f2:	6078      	str	r0, [r7, #4]
 80180f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80180f6:	4b22      	ldr	r3, [pc, #136]	; (8018180 <prvProcessExpiredTimer+0x94>)
 80180f8:	681b      	ldr	r3, [r3, #0]
 80180fa:	68db      	ldr	r3, [r3, #12]
 80180fc:	68db      	ldr	r3, [r3, #12]
 80180fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018100:	697b      	ldr	r3, [r7, #20]
 8018102:	3304      	adds	r3, #4
 8018104:	4618      	mov	r0, r3
 8018106:	f7fe fa43 	bl	8016590 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801810a:	697b      	ldr	r3, [r7, #20]
 801810c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018110:	f003 0304 	and.w	r3, r3, #4
 8018114:	2b00      	cmp	r3, #0
 8018116:	d022      	beq.n	801815e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8018118:	697b      	ldr	r3, [r7, #20]
 801811a:	699a      	ldr	r2, [r3, #24]
 801811c:	687b      	ldr	r3, [r7, #4]
 801811e:	18d1      	adds	r1, r2, r3
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	683a      	ldr	r2, [r7, #0]
 8018124:	6978      	ldr	r0, [r7, #20]
 8018126:	f000 f8d1 	bl	80182cc <prvInsertTimerInActiveList>
 801812a:	4603      	mov	r3, r0
 801812c:	2b00      	cmp	r3, #0
 801812e:	d01f      	beq.n	8018170 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018130:	2300      	movs	r3, #0
 8018132:	9300      	str	r3, [sp, #0]
 8018134:	2300      	movs	r3, #0
 8018136:	687a      	ldr	r2, [r7, #4]
 8018138:	2100      	movs	r1, #0
 801813a:	6978      	ldr	r0, [r7, #20]
 801813c:	f7ff ff88 	bl	8018050 <xTimerGenericCommand>
 8018140:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8018142:	693b      	ldr	r3, [r7, #16]
 8018144:	2b00      	cmp	r3, #0
 8018146:	d113      	bne.n	8018170 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8018148:	f04f 0350 	mov.w	r3, #80	; 0x50
 801814c:	f383 8811 	msr	BASEPRI, r3
 8018150:	f3bf 8f6f 	isb	sy
 8018154:	f3bf 8f4f 	dsb	sy
 8018158:	60fb      	str	r3, [r7, #12]
}
 801815a:	bf00      	nop
 801815c:	e7fe      	b.n	801815c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801815e:	697b      	ldr	r3, [r7, #20]
 8018160:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018164:	f023 0301 	bic.w	r3, r3, #1
 8018168:	b2da      	uxtb	r2, r3
 801816a:	697b      	ldr	r3, [r7, #20]
 801816c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018170:	697b      	ldr	r3, [r7, #20]
 8018172:	6a1b      	ldr	r3, [r3, #32]
 8018174:	6978      	ldr	r0, [r7, #20]
 8018176:	4798      	blx	r3
}
 8018178:	bf00      	nop
 801817a:	3718      	adds	r7, #24
 801817c:	46bd      	mov	sp, r7
 801817e:	bd80      	pop	{r7, pc}
 8018180:	240061fc 	.word	0x240061fc

08018184 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8018184:	b580      	push	{r7, lr}
 8018186:	b084      	sub	sp, #16
 8018188:	af00      	add	r7, sp, #0
 801818a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801818c:	f107 0308 	add.w	r3, r7, #8
 8018190:	4618      	mov	r0, r3
 8018192:	f000 f857 	bl	8018244 <prvGetNextExpireTime>
 8018196:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8018198:	68bb      	ldr	r3, [r7, #8]
 801819a:	4619      	mov	r1, r3
 801819c:	68f8      	ldr	r0, [r7, #12]
 801819e:	f000 f803 	bl	80181a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80181a2:	f000 f8d5 	bl	8018350 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80181a6:	e7f1      	b.n	801818c <prvTimerTask+0x8>

080181a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80181a8:	b580      	push	{r7, lr}
 80181aa:	b084      	sub	sp, #16
 80181ac:	af00      	add	r7, sp, #0
 80181ae:	6078      	str	r0, [r7, #4]
 80181b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80181b2:	f7ff fa7b 	bl	80176ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80181b6:	f107 0308 	add.w	r3, r7, #8
 80181ba:	4618      	mov	r0, r3
 80181bc:	f000 f866 	bl	801828c <prvSampleTimeNow>
 80181c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80181c2:	68bb      	ldr	r3, [r7, #8]
 80181c4:	2b00      	cmp	r3, #0
 80181c6:	d130      	bne.n	801822a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80181c8:	683b      	ldr	r3, [r7, #0]
 80181ca:	2b00      	cmp	r3, #0
 80181cc:	d10a      	bne.n	80181e4 <prvProcessTimerOrBlockTask+0x3c>
 80181ce:	687a      	ldr	r2, [r7, #4]
 80181d0:	68fb      	ldr	r3, [r7, #12]
 80181d2:	429a      	cmp	r2, r3
 80181d4:	d806      	bhi.n	80181e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80181d6:	f7ff fa77 	bl	80176c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80181da:	68f9      	ldr	r1, [r7, #12]
 80181dc:	6878      	ldr	r0, [r7, #4]
 80181de:	f7ff ff85 	bl	80180ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80181e2:	e024      	b.n	801822e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80181e4:	683b      	ldr	r3, [r7, #0]
 80181e6:	2b00      	cmp	r3, #0
 80181e8:	d008      	beq.n	80181fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80181ea:	4b13      	ldr	r3, [pc, #76]	; (8018238 <prvProcessTimerOrBlockTask+0x90>)
 80181ec:	681b      	ldr	r3, [r3, #0]
 80181ee:	681b      	ldr	r3, [r3, #0]
 80181f0:	2b00      	cmp	r3, #0
 80181f2:	d101      	bne.n	80181f8 <prvProcessTimerOrBlockTask+0x50>
 80181f4:	2301      	movs	r3, #1
 80181f6:	e000      	b.n	80181fa <prvProcessTimerOrBlockTask+0x52>
 80181f8:	2300      	movs	r3, #0
 80181fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80181fc:	4b0f      	ldr	r3, [pc, #60]	; (801823c <prvProcessTimerOrBlockTask+0x94>)
 80181fe:	6818      	ldr	r0, [r3, #0]
 8018200:	687a      	ldr	r2, [r7, #4]
 8018202:	68fb      	ldr	r3, [r7, #12]
 8018204:	1ad3      	subs	r3, r2, r3
 8018206:	683a      	ldr	r2, [r7, #0]
 8018208:	4619      	mov	r1, r3
 801820a:	f7fe ffef 	bl	80171ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801820e:	f7ff fa5b 	bl	80176c8 <xTaskResumeAll>
 8018212:	4603      	mov	r3, r0
 8018214:	2b00      	cmp	r3, #0
 8018216:	d10a      	bne.n	801822e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8018218:	4b09      	ldr	r3, [pc, #36]	; (8018240 <prvProcessTimerOrBlockTask+0x98>)
 801821a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801821e:	601a      	str	r2, [r3, #0]
 8018220:	f3bf 8f4f 	dsb	sy
 8018224:	f3bf 8f6f 	isb	sy
}
 8018228:	e001      	b.n	801822e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801822a:	f7ff fa4d 	bl	80176c8 <xTaskResumeAll>
}
 801822e:	bf00      	nop
 8018230:	3710      	adds	r7, #16
 8018232:	46bd      	mov	sp, r7
 8018234:	bd80      	pop	{r7, pc}
 8018236:	bf00      	nop
 8018238:	24006200 	.word	0x24006200
 801823c:	24006204 	.word	0x24006204
 8018240:	e000ed04 	.word	0xe000ed04

08018244 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8018244:	b480      	push	{r7}
 8018246:	b085      	sub	sp, #20
 8018248:	af00      	add	r7, sp, #0
 801824a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801824c:	4b0e      	ldr	r3, [pc, #56]	; (8018288 <prvGetNextExpireTime+0x44>)
 801824e:	681b      	ldr	r3, [r3, #0]
 8018250:	681b      	ldr	r3, [r3, #0]
 8018252:	2b00      	cmp	r3, #0
 8018254:	d101      	bne.n	801825a <prvGetNextExpireTime+0x16>
 8018256:	2201      	movs	r2, #1
 8018258:	e000      	b.n	801825c <prvGetNextExpireTime+0x18>
 801825a:	2200      	movs	r2, #0
 801825c:	687b      	ldr	r3, [r7, #4]
 801825e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8018260:	687b      	ldr	r3, [r7, #4]
 8018262:	681b      	ldr	r3, [r3, #0]
 8018264:	2b00      	cmp	r3, #0
 8018266:	d105      	bne.n	8018274 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018268:	4b07      	ldr	r3, [pc, #28]	; (8018288 <prvGetNextExpireTime+0x44>)
 801826a:	681b      	ldr	r3, [r3, #0]
 801826c:	68db      	ldr	r3, [r3, #12]
 801826e:	681b      	ldr	r3, [r3, #0]
 8018270:	60fb      	str	r3, [r7, #12]
 8018272:	e001      	b.n	8018278 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8018274:	2300      	movs	r3, #0
 8018276:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8018278:	68fb      	ldr	r3, [r7, #12]
}
 801827a:	4618      	mov	r0, r3
 801827c:	3714      	adds	r7, #20
 801827e:	46bd      	mov	sp, r7
 8018280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018284:	4770      	bx	lr
 8018286:	bf00      	nop
 8018288:	240061fc 	.word	0x240061fc

0801828c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801828c:	b580      	push	{r7, lr}
 801828e:	b084      	sub	sp, #16
 8018290:	af00      	add	r7, sp, #0
 8018292:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8018294:	f7ff faa8 	bl	80177e8 <xTaskGetTickCount>
 8018298:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801829a:	4b0b      	ldr	r3, [pc, #44]	; (80182c8 <prvSampleTimeNow+0x3c>)
 801829c:	681b      	ldr	r3, [r3, #0]
 801829e:	68fa      	ldr	r2, [r7, #12]
 80182a0:	429a      	cmp	r2, r3
 80182a2:	d205      	bcs.n	80182b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80182a4:	f000 f936 	bl	8018514 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80182a8:	687b      	ldr	r3, [r7, #4]
 80182aa:	2201      	movs	r2, #1
 80182ac:	601a      	str	r2, [r3, #0]
 80182ae:	e002      	b.n	80182b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	2200      	movs	r2, #0
 80182b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80182b6:	4a04      	ldr	r2, [pc, #16]	; (80182c8 <prvSampleTimeNow+0x3c>)
 80182b8:	68fb      	ldr	r3, [r7, #12]
 80182ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80182bc:	68fb      	ldr	r3, [r7, #12]
}
 80182be:	4618      	mov	r0, r3
 80182c0:	3710      	adds	r7, #16
 80182c2:	46bd      	mov	sp, r7
 80182c4:	bd80      	pop	{r7, pc}
 80182c6:	bf00      	nop
 80182c8:	2400620c 	.word	0x2400620c

080182cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80182cc:	b580      	push	{r7, lr}
 80182ce:	b086      	sub	sp, #24
 80182d0:	af00      	add	r7, sp, #0
 80182d2:	60f8      	str	r0, [r7, #12]
 80182d4:	60b9      	str	r1, [r7, #8]
 80182d6:	607a      	str	r2, [r7, #4]
 80182d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80182da:	2300      	movs	r3, #0
 80182dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80182de:	68fb      	ldr	r3, [r7, #12]
 80182e0:	68ba      	ldr	r2, [r7, #8]
 80182e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80182e4:	68fb      	ldr	r3, [r7, #12]
 80182e6:	68fa      	ldr	r2, [r7, #12]
 80182e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80182ea:	68ba      	ldr	r2, [r7, #8]
 80182ec:	687b      	ldr	r3, [r7, #4]
 80182ee:	429a      	cmp	r2, r3
 80182f0:	d812      	bhi.n	8018318 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80182f2:	687a      	ldr	r2, [r7, #4]
 80182f4:	683b      	ldr	r3, [r7, #0]
 80182f6:	1ad2      	subs	r2, r2, r3
 80182f8:	68fb      	ldr	r3, [r7, #12]
 80182fa:	699b      	ldr	r3, [r3, #24]
 80182fc:	429a      	cmp	r2, r3
 80182fe:	d302      	bcc.n	8018306 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8018300:	2301      	movs	r3, #1
 8018302:	617b      	str	r3, [r7, #20]
 8018304:	e01b      	b.n	801833e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8018306:	4b10      	ldr	r3, [pc, #64]	; (8018348 <prvInsertTimerInActiveList+0x7c>)
 8018308:	681a      	ldr	r2, [r3, #0]
 801830a:	68fb      	ldr	r3, [r7, #12]
 801830c:	3304      	adds	r3, #4
 801830e:	4619      	mov	r1, r3
 8018310:	4610      	mov	r0, r2
 8018312:	f7fe f904 	bl	801651e <vListInsert>
 8018316:	e012      	b.n	801833e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8018318:	687a      	ldr	r2, [r7, #4]
 801831a:	683b      	ldr	r3, [r7, #0]
 801831c:	429a      	cmp	r2, r3
 801831e:	d206      	bcs.n	801832e <prvInsertTimerInActiveList+0x62>
 8018320:	68ba      	ldr	r2, [r7, #8]
 8018322:	683b      	ldr	r3, [r7, #0]
 8018324:	429a      	cmp	r2, r3
 8018326:	d302      	bcc.n	801832e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8018328:	2301      	movs	r3, #1
 801832a:	617b      	str	r3, [r7, #20]
 801832c:	e007      	b.n	801833e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801832e:	4b07      	ldr	r3, [pc, #28]	; (801834c <prvInsertTimerInActiveList+0x80>)
 8018330:	681a      	ldr	r2, [r3, #0]
 8018332:	68fb      	ldr	r3, [r7, #12]
 8018334:	3304      	adds	r3, #4
 8018336:	4619      	mov	r1, r3
 8018338:	4610      	mov	r0, r2
 801833a:	f7fe f8f0 	bl	801651e <vListInsert>
		}
	}

	return xProcessTimerNow;
 801833e:	697b      	ldr	r3, [r7, #20]
}
 8018340:	4618      	mov	r0, r3
 8018342:	3718      	adds	r7, #24
 8018344:	46bd      	mov	sp, r7
 8018346:	bd80      	pop	{r7, pc}
 8018348:	24006200 	.word	0x24006200
 801834c:	240061fc 	.word	0x240061fc

08018350 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8018350:	b580      	push	{r7, lr}
 8018352:	b08e      	sub	sp, #56	; 0x38
 8018354:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8018356:	e0ca      	b.n	80184ee <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8018358:	687b      	ldr	r3, [r7, #4]
 801835a:	2b00      	cmp	r3, #0
 801835c:	da18      	bge.n	8018390 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801835e:	1d3b      	adds	r3, r7, #4
 8018360:	3304      	adds	r3, #4
 8018362:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8018364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018366:	2b00      	cmp	r3, #0
 8018368:	d10a      	bne.n	8018380 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801836a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801836e:	f383 8811 	msr	BASEPRI, r3
 8018372:	f3bf 8f6f 	isb	sy
 8018376:	f3bf 8f4f 	dsb	sy
 801837a:	61fb      	str	r3, [r7, #28]
}
 801837c:	bf00      	nop
 801837e:	e7fe      	b.n	801837e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8018380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018382:	681b      	ldr	r3, [r3, #0]
 8018384:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018386:	6850      	ldr	r0, [r2, #4]
 8018388:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801838a:	6892      	ldr	r2, [r2, #8]
 801838c:	4611      	mov	r1, r2
 801838e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	2b00      	cmp	r3, #0
 8018394:	f2c0 80ab 	blt.w	80184ee <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8018398:	68fb      	ldr	r3, [r7, #12]
 801839a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801839c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801839e:	695b      	ldr	r3, [r3, #20]
 80183a0:	2b00      	cmp	r3, #0
 80183a2:	d004      	beq.n	80183ae <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80183a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183a6:	3304      	adds	r3, #4
 80183a8:	4618      	mov	r0, r3
 80183aa:	f7fe f8f1 	bl	8016590 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80183ae:	463b      	mov	r3, r7
 80183b0:	4618      	mov	r0, r3
 80183b2:	f7ff ff6b 	bl	801828c <prvSampleTimeNow>
 80183b6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80183b8:	687b      	ldr	r3, [r7, #4]
 80183ba:	2b09      	cmp	r3, #9
 80183bc:	f200 8096 	bhi.w	80184ec <prvProcessReceivedCommands+0x19c>
 80183c0:	a201      	add	r2, pc, #4	; (adr r2, 80183c8 <prvProcessReceivedCommands+0x78>)
 80183c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80183c6:	bf00      	nop
 80183c8:	080183f1 	.word	0x080183f1
 80183cc:	080183f1 	.word	0x080183f1
 80183d0:	080183f1 	.word	0x080183f1
 80183d4:	08018465 	.word	0x08018465
 80183d8:	08018479 	.word	0x08018479
 80183dc:	080184c3 	.word	0x080184c3
 80183e0:	080183f1 	.word	0x080183f1
 80183e4:	080183f1 	.word	0x080183f1
 80183e8:	08018465 	.word	0x08018465
 80183ec:	08018479 	.word	0x08018479
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80183f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80183f6:	f043 0301 	orr.w	r3, r3, #1
 80183fa:	b2da      	uxtb	r2, r3
 80183fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8018402:	68ba      	ldr	r2, [r7, #8]
 8018404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018406:	699b      	ldr	r3, [r3, #24]
 8018408:	18d1      	adds	r1, r2, r3
 801840a:	68bb      	ldr	r3, [r7, #8]
 801840c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801840e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018410:	f7ff ff5c 	bl	80182cc <prvInsertTimerInActiveList>
 8018414:	4603      	mov	r3, r0
 8018416:	2b00      	cmp	r3, #0
 8018418:	d069      	beq.n	80184ee <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801841a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801841c:	6a1b      	ldr	r3, [r3, #32]
 801841e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018420:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018424:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018428:	f003 0304 	and.w	r3, r3, #4
 801842c:	2b00      	cmp	r3, #0
 801842e:	d05e      	beq.n	80184ee <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8018430:	68ba      	ldr	r2, [r7, #8]
 8018432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018434:	699b      	ldr	r3, [r3, #24]
 8018436:	441a      	add	r2, r3
 8018438:	2300      	movs	r3, #0
 801843a:	9300      	str	r3, [sp, #0]
 801843c:	2300      	movs	r3, #0
 801843e:	2100      	movs	r1, #0
 8018440:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018442:	f7ff fe05 	bl	8018050 <xTimerGenericCommand>
 8018446:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8018448:	6a3b      	ldr	r3, [r7, #32]
 801844a:	2b00      	cmp	r3, #0
 801844c:	d14f      	bne.n	80184ee <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801844e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018452:	f383 8811 	msr	BASEPRI, r3
 8018456:	f3bf 8f6f 	isb	sy
 801845a:	f3bf 8f4f 	dsb	sy
 801845e:	61bb      	str	r3, [r7, #24]
}
 8018460:	bf00      	nop
 8018462:	e7fe      	b.n	8018462 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018466:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801846a:	f023 0301 	bic.w	r3, r3, #1
 801846e:	b2da      	uxtb	r2, r3
 8018470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018472:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8018476:	e03a      	b.n	80184ee <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801847a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801847e:	f043 0301 	orr.w	r3, r3, #1
 8018482:	b2da      	uxtb	r2, r3
 8018484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018486:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801848a:	68ba      	ldr	r2, [r7, #8]
 801848c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801848e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8018490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018492:	699b      	ldr	r3, [r3, #24]
 8018494:	2b00      	cmp	r3, #0
 8018496:	d10a      	bne.n	80184ae <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8018498:	f04f 0350 	mov.w	r3, #80	; 0x50
 801849c:	f383 8811 	msr	BASEPRI, r3
 80184a0:	f3bf 8f6f 	isb	sy
 80184a4:	f3bf 8f4f 	dsb	sy
 80184a8:	617b      	str	r3, [r7, #20]
}
 80184aa:	bf00      	nop
 80184ac:	e7fe      	b.n	80184ac <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80184ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184b0:	699a      	ldr	r2, [r3, #24]
 80184b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184b4:	18d1      	adds	r1, r2, r3
 80184b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80184ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80184bc:	f7ff ff06 	bl	80182cc <prvInsertTimerInActiveList>
					break;
 80184c0:	e015      	b.n	80184ee <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80184c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80184c8:	f003 0302 	and.w	r3, r3, #2
 80184cc:	2b00      	cmp	r3, #0
 80184ce:	d103      	bne.n	80184d8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80184d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80184d2:	f000 fbdd 	bl	8018c90 <vPortFree>
 80184d6:	e00a      	b.n	80184ee <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80184d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80184de:	f023 0301 	bic.w	r3, r3, #1
 80184e2:	b2da      	uxtb	r2, r3
 80184e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80184ea:	e000      	b.n	80184ee <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80184ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80184ee:	4b08      	ldr	r3, [pc, #32]	; (8018510 <prvProcessReceivedCommands+0x1c0>)
 80184f0:	681b      	ldr	r3, [r3, #0]
 80184f2:	1d39      	adds	r1, r7, #4
 80184f4:	2200      	movs	r2, #0
 80184f6:	4618      	mov	r0, r3
 80184f8:	f7fe fc1c 	bl	8016d34 <xQueueReceive>
 80184fc:	4603      	mov	r3, r0
 80184fe:	2b00      	cmp	r3, #0
 8018500:	f47f af2a 	bne.w	8018358 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8018504:	bf00      	nop
 8018506:	bf00      	nop
 8018508:	3730      	adds	r7, #48	; 0x30
 801850a:	46bd      	mov	sp, r7
 801850c:	bd80      	pop	{r7, pc}
 801850e:	bf00      	nop
 8018510:	24006204 	.word	0x24006204

08018514 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8018514:	b580      	push	{r7, lr}
 8018516:	b088      	sub	sp, #32
 8018518:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801851a:	e048      	b.n	80185ae <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801851c:	4b2d      	ldr	r3, [pc, #180]	; (80185d4 <prvSwitchTimerLists+0xc0>)
 801851e:	681b      	ldr	r3, [r3, #0]
 8018520:	68db      	ldr	r3, [r3, #12]
 8018522:	681b      	ldr	r3, [r3, #0]
 8018524:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018526:	4b2b      	ldr	r3, [pc, #172]	; (80185d4 <prvSwitchTimerLists+0xc0>)
 8018528:	681b      	ldr	r3, [r3, #0]
 801852a:	68db      	ldr	r3, [r3, #12]
 801852c:	68db      	ldr	r3, [r3, #12]
 801852e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018530:	68fb      	ldr	r3, [r7, #12]
 8018532:	3304      	adds	r3, #4
 8018534:	4618      	mov	r0, r3
 8018536:	f7fe f82b 	bl	8016590 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801853a:	68fb      	ldr	r3, [r7, #12]
 801853c:	6a1b      	ldr	r3, [r3, #32]
 801853e:	68f8      	ldr	r0, [r7, #12]
 8018540:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018542:	68fb      	ldr	r3, [r7, #12]
 8018544:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018548:	f003 0304 	and.w	r3, r3, #4
 801854c:	2b00      	cmp	r3, #0
 801854e:	d02e      	beq.n	80185ae <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8018550:	68fb      	ldr	r3, [r7, #12]
 8018552:	699b      	ldr	r3, [r3, #24]
 8018554:	693a      	ldr	r2, [r7, #16]
 8018556:	4413      	add	r3, r2
 8018558:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801855a:	68ba      	ldr	r2, [r7, #8]
 801855c:	693b      	ldr	r3, [r7, #16]
 801855e:	429a      	cmp	r2, r3
 8018560:	d90e      	bls.n	8018580 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8018562:	68fb      	ldr	r3, [r7, #12]
 8018564:	68ba      	ldr	r2, [r7, #8]
 8018566:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018568:	68fb      	ldr	r3, [r7, #12]
 801856a:	68fa      	ldr	r2, [r7, #12]
 801856c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801856e:	4b19      	ldr	r3, [pc, #100]	; (80185d4 <prvSwitchTimerLists+0xc0>)
 8018570:	681a      	ldr	r2, [r3, #0]
 8018572:	68fb      	ldr	r3, [r7, #12]
 8018574:	3304      	adds	r3, #4
 8018576:	4619      	mov	r1, r3
 8018578:	4610      	mov	r0, r2
 801857a:	f7fd ffd0 	bl	801651e <vListInsert>
 801857e:	e016      	b.n	80185ae <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018580:	2300      	movs	r3, #0
 8018582:	9300      	str	r3, [sp, #0]
 8018584:	2300      	movs	r3, #0
 8018586:	693a      	ldr	r2, [r7, #16]
 8018588:	2100      	movs	r1, #0
 801858a:	68f8      	ldr	r0, [r7, #12]
 801858c:	f7ff fd60 	bl	8018050 <xTimerGenericCommand>
 8018590:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8018592:	687b      	ldr	r3, [r7, #4]
 8018594:	2b00      	cmp	r3, #0
 8018596:	d10a      	bne.n	80185ae <prvSwitchTimerLists+0x9a>
	__asm volatile
 8018598:	f04f 0350 	mov.w	r3, #80	; 0x50
 801859c:	f383 8811 	msr	BASEPRI, r3
 80185a0:	f3bf 8f6f 	isb	sy
 80185a4:	f3bf 8f4f 	dsb	sy
 80185a8:	603b      	str	r3, [r7, #0]
}
 80185aa:	bf00      	nop
 80185ac:	e7fe      	b.n	80185ac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80185ae:	4b09      	ldr	r3, [pc, #36]	; (80185d4 <prvSwitchTimerLists+0xc0>)
 80185b0:	681b      	ldr	r3, [r3, #0]
 80185b2:	681b      	ldr	r3, [r3, #0]
 80185b4:	2b00      	cmp	r3, #0
 80185b6:	d1b1      	bne.n	801851c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80185b8:	4b06      	ldr	r3, [pc, #24]	; (80185d4 <prvSwitchTimerLists+0xc0>)
 80185ba:	681b      	ldr	r3, [r3, #0]
 80185bc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80185be:	4b06      	ldr	r3, [pc, #24]	; (80185d8 <prvSwitchTimerLists+0xc4>)
 80185c0:	681b      	ldr	r3, [r3, #0]
 80185c2:	4a04      	ldr	r2, [pc, #16]	; (80185d4 <prvSwitchTimerLists+0xc0>)
 80185c4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80185c6:	4a04      	ldr	r2, [pc, #16]	; (80185d8 <prvSwitchTimerLists+0xc4>)
 80185c8:	697b      	ldr	r3, [r7, #20]
 80185ca:	6013      	str	r3, [r2, #0]
}
 80185cc:	bf00      	nop
 80185ce:	3718      	adds	r7, #24
 80185d0:	46bd      	mov	sp, r7
 80185d2:	bd80      	pop	{r7, pc}
 80185d4:	240061fc 	.word	0x240061fc
 80185d8:	24006200 	.word	0x24006200

080185dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80185dc:	b580      	push	{r7, lr}
 80185de:	b082      	sub	sp, #8
 80185e0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80185e2:	f000 f967 	bl	80188b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80185e6:	4b15      	ldr	r3, [pc, #84]	; (801863c <prvCheckForValidListAndQueue+0x60>)
 80185e8:	681b      	ldr	r3, [r3, #0]
 80185ea:	2b00      	cmp	r3, #0
 80185ec:	d120      	bne.n	8018630 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80185ee:	4814      	ldr	r0, [pc, #80]	; (8018640 <prvCheckForValidListAndQueue+0x64>)
 80185f0:	f7fd ff44 	bl	801647c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80185f4:	4813      	ldr	r0, [pc, #76]	; (8018644 <prvCheckForValidListAndQueue+0x68>)
 80185f6:	f7fd ff41 	bl	801647c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80185fa:	4b13      	ldr	r3, [pc, #76]	; (8018648 <prvCheckForValidListAndQueue+0x6c>)
 80185fc:	4a10      	ldr	r2, [pc, #64]	; (8018640 <prvCheckForValidListAndQueue+0x64>)
 80185fe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8018600:	4b12      	ldr	r3, [pc, #72]	; (801864c <prvCheckForValidListAndQueue+0x70>)
 8018602:	4a10      	ldr	r2, [pc, #64]	; (8018644 <prvCheckForValidListAndQueue+0x68>)
 8018604:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8018606:	2300      	movs	r3, #0
 8018608:	9300      	str	r3, [sp, #0]
 801860a:	4b11      	ldr	r3, [pc, #68]	; (8018650 <prvCheckForValidListAndQueue+0x74>)
 801860c:	4a11      	ldr	r2, [pc, #68]	; (8018654 <prvCheckForValidListAndQueue+0x78>)
 801860e:	2110      	movs	r1, #16
 8018610:	200a      	movs	r0, #10
 8018612:	f7fe f842 	bl	801669a <xQueueGenericCreateStatic>
 8018616:	4603      	mov	r3, r0
 8018618:	4a08      	ldr	r2, [pc, #32]	; (801863c <prvCheckForValidListAndQueue+0x60>)
 801861a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801861c:	4b07      	ldr	r3, [pc, #28]	; (801863c <prvCheckForValidListAndQueue+0x60>)
 801861e:	681b      	ldr	r3, [r3, #0]
 8018620:	2b00      	cmp	r3, #0
 8018622:	d005      	beq.n	8018630 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8018624:	4b05      	ldr	r3, [pc, #20]	; (801863c <prvCheckForValidListAndQueue+0x60>)
 8018626:	681b      	ldr	r3, [r3, #0]
 8018628:	490b      	ldr	r1, [pc, #44]	; (8018658 <prvCheckForValidListAndQueue+0x7c>)
 801862a:	4618      	mov	r0, r3
 801862c:	f7fe fd8a 	bl	8017144 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018630:	f000 f970 	bl	8018914 <vPortExitCritical>
}
 8018634:	bf00      	nop
 8018636:	46bd      	mov	sp, r7
 8018638:	bd80      	pop	{r7, pc}
 801863a:	bf00      	nop
 801863c:	24006204 	.word	0x24006204
 8018640:	240061d4 	.word	0x240061d4
 8018644:	240061e8 	.word	0x240061e8
 8018648:	240061fc 	.word	0x240061fc
 801864c:	24006200 	.word	0x24006200
 8018650:	240062b0 	.word	0x240062b0
 8018654:	24006210 	.word	0x24006210
 8018658:	0801c8d8 	.word	0x0801c8d8

0801865c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801865c:	b480      	push	{r7}
 801865e:	b085      	sub	sp, #20
 8018660:	af00      	add	r7, sp, #0
 8018662:	60f8      	str	r0, [r7, #12]
 8018664:	60b9      	str	r1, [r7, #8]
 8018666:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8018668:	68fb      	ldr	r3, [r7, #12]
 801866a:	3b04      	subs	r3, #4
 801866c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801866e:	68fb      	ldr	r3, [r7, #12]
 8018670:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8018674:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018676:	68fb      	ldr	r3, [r7, #12]
 8018678:	3b04      	subs	r3, #4
 801867a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801867c:	68bb      	ldr	r3, [r7, #8]
 801867e:	f023 0201 	bic.w	r2, r3, #1
 8018682:	68fb      	ldr	r3, [r7, #12]
 8018684:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018686:	68fb      	ldr	r3, [r7, #12]
 8018688:	3b04      	subs	r3, #4
 801868a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801868c:	4a0c      	ldr	r2, [pc, #48]	; (80186c0 <pxPortInitialiseStack+0x64>)
 801868e:	68fb      	ldr	r3, [r7, #12]
 8018690:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8018692:	68fb      	ldr	r3, [r7, #12]
 8018694:	3b14      	subs	r3, #20
 8018696:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8018698:	687a      	ldr	r2, [r7, #4]
 801869a:	68fb      	ldr	r3, [r7, #12]
 801869c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801869e:	68fb      	ldr	r3, [r7, #12]
 80186a0:	3b04      	subs	r3, #4
 80186a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80186a4:	68fb      	ldr	r3, [r7, #12]
 80186a6:	f06f 0202 	mvn.w	r2, #2
 80186aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80186ac:	68fb      	ldr	r3, [r7, #12]
 80186ae:	3b20      	subs	r3, #32
 80186b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80186b2:	68fb      	ldr	r3, [r7, #12]
}
 80186b4:	4618      	mov	r0, r3
 80186b6:	3714      	adds	r7, #20
 80186b8:	46bd      	mov	sp, r7
 80186ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186be:	4770      	bx	lr
 80186c0:	080186c5 	.word	0x080186c5

080186c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80186c4:	b480      	push	{r7}
 80186c6:	b085      	sub	sp, #20
 80186c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80186ca:	2300      	movs	r3, #0
 80186cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80186ce:	4b12      	ldr	r3, [pc, #72]	; (8018718 <prvTaskExitError+0x54>)
 80186d0:	681b      	ldr	r3, [r3, #0]
 80186d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80186d6:	d00a      	beq.n	80186ee <prvTaskExitError+0x2a>
	__asm volatile
 80186d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186dc:	f383 8811 	msr	BASEPRI, r3
 80186e0:	f3bf 8f6f 	isb	sy
 80186e4:	f3bf 8f4f 	dsb	sy
 80186e8:	60fb      	str	r3, [r7, #12]
}
 80186ea:	bf00      	nop
 80186ec:	e7fe      	b.n	80186ec <prvTaskExitError+0x28>
	__asm volatile
 80186ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186f2:	f383 8811 	msr	BASEPRI, r3
 80186f6:	f3bf 8f6f 	isb	sy
 80186fa:	f3bf 8f4f 	dsb	sy
 80186fe:	60bb      	str	r3, [r7, #8]
}
 8018700:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8018702:	bf00      	nop
 8018704:	687b      	ldr	r3, [r7, #4]
 8018706:	2b00      	cmp	r3, #0
 8018708:	d0fc      	beq.n	8018704 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801870a:	bf00      	nop
 801870c:	bf00      	nop
 801870e:	3714      	adds	r7, #20
 8018710:	46bd      	mov	sp, r7
 8018712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018716:	4770      	bx	lr
 8018718:	24000010 	.word	0x24000010
 801871c:	00000000 	.word	0x00000000

08018720 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8018720:	4b07      	ldr	r3, [pc, #28]	; (8018740 <pxCurrentTCBConst2>)
 8018722:	6819      	ldr	r1, [r3, #0]
 8018724:	6808      	ldr	r0, [r1, #0]
 8018726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801872a:	f380 8809 	msr	PSP, r0
 801872e:	f3bf 8f6f 	isb	sy
 8018732:	f04f 0000 	mov.w	r0, #0
 8018736:	f380 8811 	msr	BASEPRI, r0
 801873a:	4770      	bx	lr
 801873c:	f3af 8000 	nop.w

08018740 <pxCurrentTCBConst2>:
 8018740:	24005cd4 	.word	0x24005cd4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8018744:	bf00      	nop
 8018746:	bf00      	nop

08018748 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8018748:	4808      	ldr	r0, [pc, #32]	; (801876c <prvPortStartFirstTask+0x24>)
 801874a:	6800      	ldr	r0, [r0, #0]
 801874c:	6800      	ldr	r0, [r0, #0]
 801874e:	f380 8808 	msr	MSP, r0
 8018752:	f04f 0000 	mov.w	r0, #0
 8018756:	f380 8814 	msr	CONTROL, r0
 801875a:	b662      	cpsie	i
 801875c:	b661      	cpsie	f
 801875e:	f3bf 8f4f 	dsb	sy
 8018762:	f3bf 8f6f 	isb	sy
 8018766:	df00      	svc	0
 8018768:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801876a:	bf00      	nop
 801876c:	e000ed08 	.word	0xe000ed08

08018770 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8018770:	b580      	push	{r7, lr}
 8018772:	b086      	sub	sp, #24
 8018774:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8018776:	4b46      	ldr	r3, [pc, #280]	; (8018890 <xPortStartScheduler+0x120>)
 8018778:	681b      	ldr	r3, [r3, #0]
 801877a:	4a46      	ldr	r2, [pc, #280]	; (8018894 <xPortStartScheduler+0x124>)
 801877c:	4293      	cmp	r3, r2
 801877e:	d10a      	bne.n	8018796 <xPortStartScheduler+0x26>
	__asm volatile
 8018780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018784:	f383 8811 	msr	BASEPRI, r3
 8018788:	f3bf 8f6f 	isb	sy
 801878c:	f3bf 8f4f 	dsb	sy
 8018790:	613b      	str	r3, [r7, #16]
}
 8018792:	bf00      	nop
 8018794:	e7fe      	b.n	8018794 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8018796:	4b3e      	ldr	r3, [pc, #248]	; (8018890 <xPortStartScheduler+0x120>)
 8018798:	681b      	ldr	r3, [r3, #0]
 801879a:	4a3f      	ldr	r2, [pc, #252]	; (8018898 <xPortStartScheduler+0x128>)
 801879c:	4293      	cmp	r3, r2
 801879e:	d10a      	bne.n	80187b6 <xPortStartScheduler+0x46>
	__asm volatile
 80187a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80187a4:	f383 8811 	msr	BASEPRI, r3
 80187a8:	f3bf 8f6f 	isb	sy
 80187ac:	f3bf 8f4f 	dsb	sy
 80187b0:	60fb      	str	r3, [r7, #12]
}
 80187b2:	bf00      	nop
 80187b4:	e7fe      	b.n	80187b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80187b6:	4b39      	ldr	r3, [pc, #228]	; (801889c <xPortStartScheduler+0x12c>)
 80187b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80187ba:	697b      	ldr	r3, [r7, #20]
 80187bc:	781b      	ldrb	r3, [r3, #0]
 80187be:	b2db      	uxtb	r3, r3
 80187c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80187c2:	697b      	ldr	r3, [r7, #20]
 80187c4:	22ff      	movs	r2, #255	; 0xff
 80187c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80187c8:	697b      	ldr	r3, [r7, #20]
 80187ca:	781b      	ldrb	r3, [r3, #0]
 80187cc:	b2db      	uxtb	r3, r3
 80187ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80187d0:	78fb      	ldrb	r3, [r7, #3]
 80187d2:	b2db      	uxtb	r3, r3
 80187d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80187d8:	b2da      	uxtb	r2, r3
 80187da:	4b31      	ldr	r3, [pc, #196]	; (80188a0 <xPortStartScheduler+0x130>)
 80187dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80187de:	4b31      	ldr	r3, [pc, #196]	; (80188a4 <xPortStartScheduler+0x134>)
 80187e0:	2207      	movs	r2, #7
 80187e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80187e4:	e009      	b.n	80187fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80187e6:	4b2f      	ldr	r3, [pc, #188]	; (80188a4 <xPortStartScheduler+0x134>)
 80187e8:	681b      	ldr	r3, [r3, #0]
 80187ea:	3b01      	subs	r3, #1
 80187ec:	4a2d      	ldr	r2, [pc, #180]	; (80188a4 <xPortStartScheduler+0x134>)
 80187ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80187f0:	78fb      	ldrb	r3, [r7, #3]
 80187f2:	b2db      	uxtb	r3, r3
 80187f4:	005b      	lsls	r3, r3, #1
 80187f6:	b2db      	uxtb	r3, r3
 80187f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80187fa:	78fb      	ldrb	r3, [r7, #3]
 80187fc:	b2db      	uxtb	r3, r3
 80187fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018802:	2b80      	cmp	r3, #128	; 0x80
 8018804:	d0ef      	beq.n	80187e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8018806:	4b27      	ldr	r3, [pc, #156]	; (80188a4 <xPortStartScheduler+0x134>)
 8018808:	681b      	ldr	r3, [r3, #0]
 801880a:	f1c3 0307 	rsb	r3, r3, #7
 801880e:	2b04      	cmp	r3, #4
 8018810:	d00a      	beq.n	8018828 <xPortStartScheduler+0xb8>
	__asm volatile
 8018812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018816:	f383 8811 	msr	BASEPRI, r3
 801881a:	f3bf 8f6f 	isb	sy
 801881e:	f3bf 8f4f 	dsb	sy
 8018822:	60bb      	str	r3, [r7, #8]
}
 8018824:	bf00      	nop
 8018826:	e7fe      	b.n	8018826 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8018828:	4b1e      	ldr	r3, [pc, #120]	; (80188a4 <xPortStartScheduler+0x134>)
 801882a:	681b      	ldr	r3, [r3, #0]
 801882c:	021b      	lsls	r3, r3, #8
 801882e:	4a1d      	ldr	r2, [pc, #116]	; (80188a4 <xPortStartScheduler+0x134>)
 8018830:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8018832:	4b1c      	ldr	r3, [pc, #112]	; (80188a4 <xPortStartScheduler+0x134>)
 8018834:	681b      	ldr	r3, [r3, #0]
 8018836:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801883a:	4a1a      	ldr	r2, [pc, #104]	; (80188a4 <xPortStartScheduler+0x134>)
 801883c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801883e:	687b      	ldr	r3, [r7, #4]
 8018840:	b2da      	uxtb	r2, r3
 8018842:	697b      	ldr	r3, [r7, #20]
 8018844:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8018846:	4b18      	ldr	r3, [pc, #96]	; (80188a8 <xPortStartScheduler+0x138>)
 8018848:	681b      	ldr	r3, [r3, #0]
 801884a:	4a17      	ldr	r2, [pc, #92]	; (80188a8 <xPortStartScheduler+0x138>)
 801884c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8018850:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8018852:	4b15      	ldr	r3, [pc, #84]	; (80188a8 <xPortStartScheduler+0x138>)
 8018854:	681b      	ldr	r3, [r3, #0]
 8018856:	4a14      	ldr	r2, [pc, #80]	; (80188a8 <xPortStartScheduler+0x138>)
 8018858:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801885c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801885e:	f000 f8dd 	bl	8018a1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8018862:	4b12      	ldr	r3, [pc, #72]	; (80188ac <xPortStartScheduler+0x13c>)
 8018864:	2200      	movs	r2, #0
 8018866:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8018868:	f000 f8fc 	bl	8018a64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801886c:	4b10      	ldr	r3, [pc, #64]	; (80188b0 <xPortStartScheduler+0x140>)
 801886e:	681b      	ldr	r3, [r3, #0]
 8018870:	4a0f      	ldr	r2, [pc, #60]	; (80188b0 <xPortStartScheduler+0x140>)
 8018872:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8018876:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8018878:	f7ff ff66 	bl	8018748 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801887c:	f7ff f85a 	bl	8017934 <vTaskSwitchContext>
	prvTaskExitError();
 8018880:	f7ff ff20 	bl	80186c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8018884:	2300      	movs	r3, #0
}
 8018886:	4618      	mov	r0, r3
 8018888:	3718      	adds	r7, #24
 801888a:	46bd      	mov	sp, r7
 801888c:	bd80      	pop	{r7, pc}
 801888e:	bf00      	nop
 8018890:	e000ed00 	.word	0xe000ed00
 8018894:	410fc271 	.word	0x410fc271
 8018898:	410fc270 	.word	0x410fc270
 801889c:	e000e400 	.word	0xe000e400
 80188a0:	24006300 	.word	0x24006300
 80188a4:	24006304 	.word	0x24006304
 80188a8:	e000ed20 	.word	0xe000ed20
 80188ac:	24000010 	.word	0x24000010
 80188b0:	e000ef34 	.word	0xe000ef34

080188b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80188b4:	b480      	push	{r7}
 80188b6:	b083      	sub	sp, #12
 80188b8:	af00      	add	r7, sp, #0
	__asm volatile
 80188ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188be:	f383 8811 	msr	BASEPRI, r3
 80188c2:	f3bf 8f6f 	isb	sy
 80188c6:	f3bf 8f4f 	dsb	sy
 80188ca:	607b      	str	r3, [r7, #4]
}
 80188cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80188ce:	4b0f      	ldr	r3, [pc, #60]	; (801890c <vPortEnterCritical+0x58>)
 80188d0:	681b      	ldr	r3, [r3, #0]
 80188d2:	3301      	adds	r3, #1
 80188d4:	4a0d      	ldr	r2, [pc, #52]	; (801890c <vPortEnterCritical+0x58>)
 80188d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80188d8:	4b0c      	ldr	r3, [pc, #48]	; (801890c <vPortEnterCritical+0x58>)
 80188da:	681b      	ldr	r3, [r3, #0]
 80188dc:	2b01      	cmp	r3, #1
 80188de:	d10f      	bne.n	8018900 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80188e0:	4b0b      	ldr	r3, [pc, #44]	; (8018910 <vPortEnterCritical+0x5c>)
 80188e2:	681b      	ldr	r3, [r3, #0]
 80188e4:	b2db      	uxtb	r3, r3
 80188e6:	2b00      	cmp	r3, #0
 80188e8:	d00a      	beq.n	8018900 <vPortEnterCritical+0x4c>
	__asm volatile
 80188ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188ee:	f383 8811 	msr	BASEPRI, r3
 80188f2:	f3bf 8f6f 	isb	sy
 80188f6:	f3bf 8f4f 	dsb	sy
 80188fa:	603b      	str	r3, [r7, #0]
}
 80188fc:	bf00      	nop
 80188fe:	e7fe      	b.n	80188fe <vPortEnterCritical+0x4a>
	}
}
 8018900:	bf00      	nop
 8018902:	370c      	adds	r7, #12
 8018904:	46bd      	mov	sp, r7
 8018906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801890a:	4770      	bx	lr
 801890c:	24000010 	.word	0x24000010
 8018910:	e000ed04 	.word	0xe000ed04

08018914 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8018914:	b480      	push	{r7}
 8018916:	b083      	sub	sp, #12
 8018918:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801891a:	4b12      	ldr	r3, [pc, #72]	; (8018964 <vPortExitCritical+0x50>)
 801891c:	681b      	ldr	r3, [r3, #0]
 801891e:	2b00      	cmp	r3, #0
 8018920:	d10a      	bne.n	8018938 <vPortExitCritical+0x24>
	__asm volatile
 8018922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018926:	f383 8811 	msr	BASEPRI, r3
 801892a:	f3bf 8f6f 	isb	sy
 801892e:	f3bf 8f4f 	dsb	sy
 8018932:	607b      	str	r3, [r7, #4]
}
 8018934:	bf00      	nop
 8018936:	e7fe      	b.n	8018936 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8018938:	4b0a      	ldr	r3, [pc, #40]	; (8018964 <vPortExitCritical+0x50>)
 801893a:	681b      	ldr	r3, [r3, #0]
 801893c:	3b01      	subs	r3, #1
 801893e:	4a09      	ldr	r2, [pc, #36]	; (8018964 <vPortExitCritical+0x50>)
 8018940:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8018942:	4b08      	ldr	r3, [pc, #32]	; (8018964 <vPortExitCritical+0x50>)
 8018944:	681b      	ldr	r3, [r3, #0]
 8018946:	2b00      	cmp	r3, #0
 8018948:	d105      	bne.n	8018956 <vPortExitCritical+0x42>
 801894a:	2300      	movs	r3, #0
 801894c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801894e:	683b      	ldr	r3, [r7, #0]
 8018950:	f383 8811 	msr	BASEPRI, r3
}
 8018954:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8018956:	bf00      	nop
 8018958:	370c      	adds	r7, #12
 801895a:	46bd      	mov	sp, r7
 801895c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018960:	4770      	bx	lr
 8018962:	bf00      	nop
 8018964:	24000010 	.word	0x24000010
	...

08018970 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8018970:	f3ef 8009 	mrs	r0, PSP
 8018974:	f3bf 8f6f 	isb	sy
 8018978:	4b15      	ldr	r3, [pc, #84]	; (80189d0 <pxCurrentTCBConst>)
 801897a:	681a      	ldr	r2, [r3, #0]
 801897c:	f01e 0f10 	tst.w	lr, #16
 8018980:	bf08      	it	eq
 8018982:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8018986:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801898a:	6010      	str	r0, [r2, #0]
 801898c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8018990:	f04f 0050 	mov.w	r0, #80	; 0x50
 8018994:	f380 8811 	msr	BASEPRI, r0
 8018998:	f3bf 8f4f 	dsb	sy
 801899c:	f3bf 8f6f 	isb	sy
 80189a0:	f7fe ffc8 	bl	8017934 <vTaskSwitchContext>
 80189a4:	f04f 0000 	mov.w	r0, #0
 80189a8:	f380 8811 	msr	BASEPRI, r0
 80189ac:	bc09      	pop	{r0, r3}
 80189ae:	6819      	ldr	r1, [r3, #0]
 80189b0:	6808      	ldr	r0, [r1, #0]
 80189b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189b6:	f01e 0f10 	tst.w	lr, #16
 80189ba:	bf08      	it	eq
 80189bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80189c0:	f380 8809 	msr	PSP, r0
 80189c4:	f3bf 8f6f 	isb	sy
 80189c8:	4770      	bx	lr
 80189ca:	bf00      	nop
 80189cc:	f3af 8000 	nop.w

080189d0 <pxCurrentTCBConst>:
 80189d0:	24005cd4 	.word	0x24005cd4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80189d4:	bf00      	nop
 80189d6:	bf00      	nop

080189d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80189d8:	b580      	push	{r7, lr}
 80189da:	b082      	sub	sp, #8
 80189dc:	af00      	add	r7, sp, #0
	__asm volatile
 80189de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80189e2:	f383 8811 	msr	BASEPRI, r3
 80189e6:	f3bf 8f6f 	isb	sy
 80189ea:	f3bf 8f4f 	dsb	sy
 80189ee:	607b      	str	r3, [r7, #4]
}
 80189f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80189f2:	f7fe ff09 	bl	8017808 <xTaskIncrementTick>
 80189f6:	4603      	mov	r3, r0
 80189f8:	2b00      	cmp	r3, #0
 80189fa:	d003      	beq.n	8018a04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80189fc:	4b06      	ldr	r3, [pc, #24]	; (8018a18 <xPortSysTickHandler+0x40>)
 80189fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018a02:	601a      	str	r2, [r3, #0]
 8018a04:	2300      	movs	r3, #0
 8018a06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018a08:	683b      	ldr	r3, [r7, #0]
 8018a0a:	f383 8811 	msr	BASEPRI, r3
}
 8018a0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8018a10:	bf00      	nop
 8018a12:	3708      	adds	r7, #8
 8018a14:	46bd      	mov	sp, r7
 8018a16:	bd80      	pop	{r7, pc}
 8018a18:	e000ed04 	.word	0xe000ed04

08018a1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8018a1c:	b480      	push	{r7}
 8018a1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8018a20:	4b0b      	ldr	r3, [pc, #44]	; (8018a50 <vPortSetupTimerInterrupt+0x34>)
 8018a22:	2200      	movs	r2, #0
 8018a24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8018a26:	4b0b      	ldr	r3, [pc, #44]	; (8018a54 <vPortSetupTimerInterrupt+0x38>)
 8018a28:	2200      	movs	r2, #0
 8018a2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8018a2c:	4b0a      	ldr	r3, [pc, #40]	; (8018a58 <vPortSetupTimerInterrupt+0x3c>)
 8018a2e:	681b      	ldr	r3, [r3, #0]
 8018a30:	4a0a      	ldr	r2, [pc, #40]	; (8018a5c <vPortSetupTimerInterrupt+0x40>)
 8018a32:	fba2 2303 	umull	r2, r3, r2, r3
 8018a36:	099b      	lsrs	r3, r3, #6
 8018a38:	4a09      	ldr	r2, [pc, #36]	; (8018a60 <vPortSetupTimerInterrupt+0x44>)
 8018a3a:	3b01      	subs	r3, #1
 8018a3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8018a3e:	4b04      	ldr	r3, [pc, #16]	; (8018a50 <vPortSetupTimerInterrupt+0x34>)
 8018a40:	2207      	movs	r2, #7
 8018a42:	601a      	str	r2, [r3, #0]
}
 8018a44:	bf00      	nop
 8018a46:	46bd      	mov	sp, r7
 8018a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a4c:	4770      	bx	lr
 8018a4e:	bf00      	nop
 8018a50:	e000e010 	.word	0xe000e010
 8018a54:	e000e018 	.word	0xe000e018
 8018a58:	24000000 	.word	0x24000000
 8018a5c:	10624dd3 	.word	0x10624dd3
 8018a60:	e000e014 	.word	0xe000e014

08018a64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8018a64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8018a74 <vPortEnableVFP+0x10>
 8018a68:	6801      	ldr	r1, [r0, #0]
 8018a6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8018a6e:	6001      	str	r1, [r0, #0]
 8018a70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8018a72:	bf00      	nop
 8018a74:	e000ed88 	.word	0xe000ed88

08018a78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8018a78:	b480      	push	{r7}
 8018a7a:	b085      	sub	sp, #20
 8018a7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8018a7e:	f3ef 8305 	mrs	r3, IPSR
 8018a82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8018a84:	68fb      	ldr	r3, [r7, #12]
 8018a86:	2b0f      	cmp	r3, #15
 8018a88:	d914      	bls.n	8018ab4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8018a8a:	4a17      	ldr	r2, [pc, #92]	; (8018ae8 <vPortValidateInterruptPriority+0x70>)
 8018a8c:	68fb      	ldr	r3, [r7, #12]
 8018a8e:	4413      	add	r3, r2
 8018a90:	781b      	ldrb	r3, [r3, #0]
 8018a92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8018a94:	4b15      	ldr	r3, [pc, #84]	; (8018aec <vPortValidateInterruptPriority+0x74>)
 8018a96:	781b      	ldrb	r3, [r3, #0]
 8018a98:	7afa      	ldrb	r2, [r7, #11]
 8018a9a:	429a      	cmp	r2, r3
 8018a9c:	d20a      	bcs.n	8018ab4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8018a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018aa2:	f383 8811 	msr	BASEPRI, r3
 8018aa6:	f3bf 8f6f 	isb	sy
 8018aaa:	f3bf 8f4f 	dsb	sy
 8018aae:	607b      	str	r3, [r7, #4]
}
 8018ab0:	bf00      	nop
 8018ab2:	e7fe      	b.n	8018ab2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8018ab4:	4b0e      	ldr	r3, [pc, #56]	; (8018af0 <vPortValidateInterruptPriority+0x78>)
 8018ab6:	681b      	ldr	r3, [r3, #0]
 8018ab8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8018abc:	4b0d      	ldr	r3, [pc, #52]	; (8018af4 <vPortValidateInterruptPriority+0x7c>)
 8018abe:	681b      	ldr	r3, [r3, #0]
 8018ac0:	429a      	cmp	r2, r3
 8018ac2:	d90a      	bls.n	8018ada <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8018ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ac8:	f383 8811 	msr	BASEPRI, r3
 8018acc:	f3bf 8f6f 	isb	sy
 8018ad0:	f3bf 8f4f 	dsb	sy
 8018ad4:	603b      	str	r3, [r7, #0]
}
 8018ad6:	bf00      	nop
 8018ad8:	e7fe      	b.n	8018ad8 <vPortValidateInterruptPriority+0x60>
	}
 8018ada:	bf00      	nop
 8018adc:	3714      	adds	r7, #20
 8018ade:	46bd      	mov	sp, r7
 8018ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ae4:	4770      	bx	lr
 8018ae6:	bf00      	nop
 8018ae8:	e000e3f0 	.word	0xe000e3f0
 8018aec:	24006300 	.word	0x24006300
 8018af0:	e000ed0c 	.word	0xe000ed0c
 8018af4:	24006304 	.word	0x24006304

08018af8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8018af8:	b580      	push	{r7, lr}
 8018afa:	b08a      	sub	sp, #40	; 0x28
 8018afc:	af00      	add	r7, sp, #0
 8018afe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8018b00:	2300      	movs	r3, #0
 8018b02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8018b04:	f7fe fdd2 	bl	80176ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8018b08:	4b5b      	ldr	r3, [pc, #364]	; (8018c78 <pvPortMalloc+0x180>)
 8018b0a:	681b      	ldr	r3, [r3, #0]
 8018b0c:	2b00      	cmp	r3, #0
 8018b0e:	d101      	bne.n	8018b14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8018b10:	f000 f920 	bl	8018d54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8018b14:	4b59      	ldr	r3, [pc, #356]	; (8018c7c <pvPortMalloc+0x184>)
 8018b16:	681a      	ldr	r2, [r3, #0]
 8018b18:	687b      	ldr	r3, [r7, #4]
 8018b1a:	4013      	ands	r3, r2
 8018b1c:	2b00      	cmp	r3, #0
 8018b1e:	f040 8093 	bne.w	8018c48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8018b22:	687b      	ldr	r3, [r7, #4]
 8018b24:	2b00      	cmp	r3, #0
 8018b26:	d01d      	beq.n	8018b64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8018b28:	2208      	movs	r2, #8
 8018b2a:	687b      	ldr	r3, [r7, #4]
 8018b2c:	4413      	add	r3, r2
 8018b2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8018b30:	687b      	ldr	r3, [r7, #4]
 8018b32:	f003 0307 	and.w	r3, r3, #7
 8018b36:	2b00      	cmp	r3, #0
 8018b38:	d014      	beq.n	8018b64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8018b3a:	687b      	ldr	r3, [r7, #4]
 8018b3c:	f023 0307 	bic.w	r3, r3, #7
 8018b40:	3308      	adds	r3, #8
 8018b42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018b44:	687b      	ldr	r3, [r7, #4]
 8018b46:	f003 0307 	and.w	r3, r3, #7
 8018b4a:	2b00      	cmp	r3, #0
 8018b4c:	d00a      	beq.n	8018b64 <pvPortMalloc+0x6c>
	__asm volatile
 8018b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b52:	f383 8811 	msr	BASEPRI, r3
 8018b56:	f3bf 8f6f 	isb	sy
 8018b5a:	f3bf 8f4f 	dsb	sy
 8018b5e:	617b      	str	r3, [r7, #20]
}
 8018b60:	bf00      	nop
 8018b62:	e7fe      	b.n	8018b62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8018b64:	687b      	ldr	r3, [r7, #4]
 8018b66:	2b00      	cmp	r3, #0
 8018b68:	d06e      	beq.n	8018c48 <pvPortMalloc+0x150>
 8018b6a:	4b45      	ldr	r3, [pc, #276]	; (8018c80 <pvPortMalloc+0x188>)
 8018b6c:	681b      	ldr	r3, [r3, #0]
 8018b6e:	687a      	ldr	r2, [r7, #4]
 8018b70:	429a      	cmp	r2, r3
 8018b72:	d869      	bhi.n	8018c48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8018b74:	4b43      	ldr	r3, [pc, #268]	; (8018c84 <pvPortMalloc+0x18c>)
 8018b76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8018b78:	4b42      	ldr	r3, [pc, #264]	; (8018c84 <pvPortMalloc+0x18c>)
 8018b7a:	681b      	ldr	r3, [r3, #0]
 8018b7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8018b7e:	e004      	b.n	8018b8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8018b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8018b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b86:	681b      	ldr	r3, [r3, #0]
 8018b88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8018b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b8c:	685b      	ldr	r3, [r3, #4]
 8018b8e:	687a      	ldr	r2, [r7, #4]
 8018b90:	429a      	cmp	r2, r3
 8018b92:	d903      	bls.n	8018b9c <pvPortMalloc+0xa4>
 8018b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b96:	681b      	ldr	r3, [r3, #0]
 8018b98:	2b00      	cmp	r3, #0
 8018b9a:	d1f1      	bne.n	8018b80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8018b9c:	4b36      	ldr	r3, [pc, #216]	; (8018c78 <pvPortMalloc+0x180>)
 8018b9e:	681b      	ldr	r3, [r3, #0]
 8018ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018ba2:	429a      	cmp	r2, r3
 8018ba4:	d050      	beq.n	8018c48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8018ba6:	6a3b      	ldr	r3, [r7, #32]
 8018ba8:	681b      	ldr	r3, [r3, #0]
 8018baa:	2208      	movs	r2, #8
 8018bac:	4413      	add	r3, r2
 8018bae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8018bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bb2:	681a      	ldr	r2, [r3, #0]
 8018bb4:	6a3b      	ldr	r3, [r7, #32]
 8018bb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8018bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bba:	685a      	ldr	r2, [r3, #4]
 8018bbc:	687b      	ldr	r3, [r7, #4]
 8018bbe:	1ad2      	subs	r2, r2, r3
 8018bc0:	2308      	movs	r3, #8
 8018bc2:	005b      	lsls	r3, r3, #1
 8018bc4:	429a      	cmp	r2, r3
 8018bc6:	d91f      	bls.n	8018c08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8018bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018bca:	687b      	ldr	r3, [r7, #4]
 8018bcc:	4413      	add	r3, r2
 8018bce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018bd0:	69bb      	ldr	r3, [r7, #24]
 8018bd2:	f003 0307 	and.w	r3, r3, #7
 8018bd6:	2b00      	cmp	r3, #0
 8018bd8:	d00a      	beq.n	8018bf0 <pvPortMalloc+0xf8>
	__asm volatile
 8018bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018bde:	f383 8811 	msr	BASEPRI, r3
 8018be2:	f3bf 8f6f 	isb	sy
 8018be6:	f3bf 8f4f 	dsb	sy
 8018bea:	613b      	str	r3, [r7, #16]
}
 8018bec:	bf00      	nop
 8018bee:	e7fe      	b.n	8018bee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8018bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bf2:	685a      	ldr	r2, [r3, #4]
 8018bf4:	687b      	ldr	r3, [r7, #4]
 8018bf6:	1ad2      	subs	r2, r2, r3
 8018bf8:	69bb      	ldr	r3, [r7, #24]
 8018bfa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8018bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bfe:	687a      	ldr	r2, [r7, #4]
 8018c00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8018c02:	69b8      	ldr	r0, [r7, #24]
 8018c04:	f000 f908 	bl	8018e18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8018c08:	4b1d      	ldr	r3, [pc, #116]	; (8018c80 <pvPortMalloc+0x188>)
 8018c0a:	681a      	ldr	r2, [r3, #0]
 8018c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c0e:	685b      	ldr	r3, [r3, #4]
 8018c10:	1ad3      	subs	r3, r2, r3
 8018c12:	4a1b      	ldr	r2, [pc, #108]	; (8018c80 <pvPortMalloc+0x188>)
 8018c14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8018c16:	4b1a      	ldr	r3, [pc, #104]	; (8018c80 <pvPortMalloc+0x188>)
 8018c18:	681a      	ldr	r2, [r3, #0]
 8018c1a:	4b1b      	ldr	r3, [pc, #108]	; (8018c88 <pvPortMalloc+0x190>)
 8018c1c:	681b      	ldr	r3, [r3, #0]
 8018c1e:	429a      	cmp	r2, r3
 8018c20:	d203      	bcs.n	8018c2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8018c22:	4b17      	ldr	r3, [pc, #92]	; (8018c80 <pvPortMalloc+0x188>)
 8018c24:	681b      	ldr	r3, [r3, #0]
 8018c26:	4a18      	ldr	r2, [pc, #96]	; (8018c88 <pvPortMalloc+0x190>)
 8018c28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8018c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c2c:	685a      	ldr	r2, [r3, #4]
 8018c2e:	4b13      	ldr	r3, [pc, #76]	; (8018c7c <pvPortMalloc+0x184>)
 8018c30:	681b      	ldr	r3, [r3, #0]
 8018c32:	431a      	orrs	r2, r3
 8018c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8018c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c3a:	2200      	movs	r2, #0
 8018c3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8018c3e:	4b13      	ldr	r3, [pc, #76]	; (8018c8c <pvPortMalloc+0x194>)
 8018c40:	681b      	ldr	r3, [r3, #0]
 8018c42:	3301      	adds	r3, #1
 8018c44:	4a11      	ldr	r2, [pc, #68]	; (8018c8c <pvPortMalloc+0x194>)
 8018c46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8018c48:	f7fe fd3e 	bl	80176c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8018c4c:	69fb      	ldr	r3, [r7, #28]
 8018c4e:	f003 0307 	and.w	r3, r3, #7
 8018c52:	2b00      	cmp	r3, #0
 8018c54:	d00a      	beq.n	8018c6c <pvPortMalloc+0x174>
	__asm volatile
 8018c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c5a:	f383 8811 	msr	BASEPRI, r3
 8018c5e:	f3bf 8f6f 	isb	sy
 8018c62:	f3bf 8f4f 	dsb	sy
 8018c66:	60fb      	str	r3, [r7, #12]
}
 8018c68:	bf00      	nop
 8018c6a:	e7fe      	b.n	8018c6a <pvPortMalloc+0x172>
	return pvReturn;
 8018c6c:	69fb      	ldr	r3, [r7, #28]
}
 8018c6e:	4618      	mov	r0, r3
 8018c70:	3728      	adds	r7, #40	; 0x28
 8018c72:	46bd      	mov	sp, r7
 8018c74:	bd80      	pop	{r7, pc}
 8018c76:	bf00      	nop
 8018c78:	24009f10 	.word	0x24009f10
 8018c7c:	24009f24 	.word	0x24009f24
 8018c80:	24009f14 	.word	0x24009f14
 8018c84:	24009f08 	.word	0x24009f08
 8018c88:	24009f18 	.word	0x24009f18
 8018c8c:	24009f1c 	.word	0x24009f1c

08018c90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8018c90:	b580      	push	{r7, lr}
 8018c92:	b086      	sub	sp, #24
 8018c94:	af00      	add	r7, sp, #0
 8018c96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8018c98:	687b      	ldr	r3, [r7, #4]
 8018c9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8018c9c:	687b      	ldr	r3, [r7, #4]
 8018c9e:	2b00      	cmp	r3, #0
 8018ca0:	d04d      	beq.n	8018d3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8018ca2:	2308      	movs	r3, #8
 8018ca4:	425b      	negs	r3, r3
 8018ca6:	697a      	ldr	r2, [r7, #20]
 8018ca8:	4413      	add	r3, r2
 8018caa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8018cac:	697b      	ldr	r3, [r7, #20]
 8018cae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8018cb0:	693b      	ldr	r3, [r7, #16]
 8018cb2:	685a      	ldr	r2, [r3, #4]
 8018cb4:	4b24      	ldr	r3, [pc, #144]	; (8018d48 <vPortFree+0xb8>)
 8018cb6:	681b      	ldr	r3, [r3, #0]
 8018cb8:	4013      	ands	r3, r2
 8018cba:	2b00      	cmp	r3, #0
 8018cbc:	d10a      	bne.n	8018cd4 <vPortFree+0x44>
	__asm volatile
 8018cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018cc2:	f383 8811 	msr	BASEPRI, r3
 8018cc6:	f3bf 8f6f 	isb	sy
 8018cca:	f3bf 8f4f 	dsb	sy
 8018cce:	60fb      	str	r3, [r7, #12]
}
 8018cd0:	bf00      	nop
 8018cd2:	e7fe      	b.n	8018cd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8018cd4:	693b      	ldr	r3, [r7, #16]
 8018cd6:	681b      	ldr	r3, [r3, #0]
 8018cd8:	2b00      	cmp	r3, #0
 8018cda:	d00a      	beq.n	8018cf2 <vPortFree+0x62>
	__asm volatile
 8018cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ce0:	f383 8811 	msr	BASEPRI, r3
 8018ce4:	f3bf 8f6f 	isb	sy
 8018ce8:	f3bf 8f4f 	dsb	sy
 8018cec:	60bb      	str	r3, [r7, #8]
}
 8018cee:	bf00      	nop
 8018cf0:	e7fe      	b.n	8018cf0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8018cf2:	693b      	ldr	r3, [r7, #16]
 8018cf4:	685a      	ldr	r2, [r3, #4]
 8018cf6:	4b14      	ldr	r3, [pc, #80]	; (8018d48 <vPortFree+0xb8>)
 8018cf8:	681b      	ldr	r3, [r3, #0]
 8018cfa:	4013      	ands	r3, r2
 8018cfc:	2b00      	cmp	r3, #0
 8018cfe:	d01e      	beq.n	8018d3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8018d00:	693b      	ldr	r3, [r7, #16]
 8018d02:	681b      	ldr	r3, [r3, #0]
 8018d04:	2b00      	cmp	r3, #0
 8018d06:	d11a      	bne.n	8018d3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8018d08:	693b      	ldr	r3, [r7, #16]
 8018d0a:	685a      	ldr	r2, [r3, #4]
 8018d0c:	4b0e      	ldr	r3, [pc, #56]	; (8018d48 <vPortFree+0xb8>)
 8018d0e:	681b      	ldr	r3, [r3, #0]
 8018d10:	43db      	mvns	r3, r3
 8018d12:	401a      	ands	r2, r3
 8018d14:	693b      	ldr	r3, [r7, #16]
 8018d16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8018d18:	f7fe fcc8 	bl	80176ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8018d1c:	693b      	ldr	r3, [r7, #16]
 8018d1e:	685a      	ldr	r2, [r3, #4]
 8018d20:	4b0a      	ldr	r3, [pc, #40]	; (8018d4c <vPortFree+0xbc>)
 8018d22:	681b      	ldr	r3, [r3, #0]
 8018d24:	4413      	add	r3, r2
 8018d26:	4a09      	ldr	r2, [pc, #36]	; (8018d4c <vPortFree+0xbc>)
 8018d28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8018d2a:	6938      	ldr	r0, [r7, #16]
 8018d2c:	f000 f874 	bl	8018e18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8018d30:	4b07      	ldr	r3, [pc, #28]	; (8018d50 <vPortFree+0xc0>)
 8018d32:	681b      	ldr	r3, [r3, #0]
 8018d34:	3301      	adds	r3, #1
 8018d36:	4a06      	ldr	r2, [pc, #24]	; (8018d50 <vPortFree+0xc0>)
 8018d38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8018d3a:	f7fe fcc5 	bl	80176c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8018d3e:	bf00      	nop
 8018d40:	3718      	adds	r7, #24
 8018d42:	46bd      	mov	sp, r7
 8018d44:	bd80      	pop	{r7, pc}
 8018d46:	bf00      	nop
 8018d48:	24009f24 	.word	0x24009f24
 8018d4c:	24009f14 	.word	0x24009f14
 8018d50:	24009f20 	.word	0x24009f20

08018d54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8018d54:	b480      	push	{r7}
 8018d56:	b085      	sub	sp, #20
 8018d58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8018d5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8018d5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8018d60:	4b27      	ldr	r3, [pc, #156]	; (8018e00 <prvHeapInit+0xac>)
 8018d62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8018d64:	68fb      	ldr	r3, [r7, #12]
 8018d66:	f003 0307 	and.w	r3, r3, #7
 8018d6a:	2b00      	cmp	r3, #0
 8018d6c:	d00c      	beq.n	8018d88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8018d6e:	68fb      	ldr	r3, [r7, #12]
 8018d70:	3307      	adds	r3, #7
 8018d72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018d74:	68fb      	ldr	r3, [r7, #12]
 8018d76:	f023 0307 	bic.w	r3, r3, #7
 8018d7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8018d7c:	68ba      	ldr	r2, [r7, #8]
 8018d7e:	68fb      	ldr	r3, [r7, #12]
 8018d80:	1ad3      	subs	r3, r2, r3
 8018d82:	4a1f      	ldr	r2, [pc, #124]	; (8018e00 <prvHeapInit+0xac>)
 8018d84:	4413      	add	r3, r2
 8018d86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8018d88:	68fb      	ldr	r3, [r7, #12]
 8018d8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8018d8c:	4a1d      	ldr	r2, [pc, #116]	; (8018e04 <prvHeapInit+0xb0>)
 8018d8e:	687b      	ldr	r3, [r7, #4]
 8018d90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8018d92:	4b1c      	ldr	r3, [pc, #112]	; (8018e04 <prvHeapInit+0xb0>)
 8018d94:	2200      	movs	r2, #0
 8018d96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8018d98:	687b      	ldr	r3, [r7, #4]
 8018d9a:	68ba      	ldr	r2, [r7, #8]
 8018d9c:	4413      	add	r3, r2
 8018d9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8018da0:	2208      	movs	r2, #8
 8018da2:	68fb      	ldr	r3, [r7, #12]
 8018da4:	1a9b      	subs	r3, r3, r2
 8018da6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018da8:	68fb      	ldr	r3, [r7, #12]
 8018daa:	f023 0307 	bic.w	r3, r3, #7
 8018dae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8018db0:	68fb      	ldr	r3, [r7, #12]
 8018db2:	4a15      	ldr	r2, [pc, #84]	; (8018e08 <prvHeapInit+0xb4>)
 8018db4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8018db6:	4b14      	ldr	r3, [pc, #80]	; (8018e08 <prvHeapInit+0xb4>)
 8018db8:	681b      	ldr	r3, [r3, #0]
 8018dba:	2200      	movs	r2, #0
 8018dbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8018dbe:	4b12      	ldr	r3, [pc, #72]	; (8018e08 <prvHeapInit+0xb4>)
 8018dc0:	681b      	ldr	r3, [r3, #0]
 8018dc2:	2200      	movs	r2, #0
 8018dc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8018dc6:	687b      	ldr	r3, [r7, #4]
 8018dc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8018dca:	683b      	ldr	r3, [r7, #0]
 8018dcc:	68fa      	ldr	r2, [r7, #12]
 8018dce:	1ad2      	subs	r2, r2, r3
 8018dd0:	683b      	ldr	r3, [r7, #0]
 8018dd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8018dd4:	4b0c      	ldr	r3, [pc, #48]	; (8018e08 <prvHeapInit+0xb4>)
 8018dd6:	681a      	ldr	r2, [r3, #0]
 8018dd8:	683b      	ldr	r3, [r7, #0]
 8018dda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018ddc:	683b      	ldr	r3, [r7, #0]
 8018dde:	685b      	ldr	r3, [r3, #4]
 8018de0:	4a0a      	ldr	r2, [pc, #40]	; (8018e0c <prvHeapInit+0xb8>)
 8018de2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018de4:	683b      	ldr	r3, [r7, #0]
 8018de6:	685b      	ldr	r3, [r3, #4]
 8018de8:	4a09      	ldr	r2, [pc, #36]	; (8018e10 <prvHeapInit+0xbc>)
 8018dea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8018dec:	4b09      	ldr	r3, [pc, #36]	; (8018e14 <prvHeapInit+0xc0>)
 8018dee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8018df2:	601a      	str	r2, [r3, #0]
}
 8018df4:	bf00      	nop
 8018df6:	3714      	adds	r7, #20
 8018df8:	46bd      	mov	sp, r7
 8018dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dfe:	4770      	bx	lr
 8018e00:	24006308 	.word	0x24006308
 8018e04:	24009f08 	.word	0x24009f08
 8018e08:	24009f10 	.word	0x24009f10
 8018e0c:	24009f18 	.word	0x24009f18
 8018e10:	24009f14 	.word	0x24009f14
 8018e14:	24009f24 	.word	0x24009f24

08018e18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8018e18:	b480      	push	{r7}
 8018e1a:	b085      	sub	sp, #20
 8018e1c:	af00      	add	r7, sp, #0
 8018e1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8018e20:	4b28      	ldr	r3, [pc, #160]	; (8018ec4 <prvInsertBlockIntoFreeList+0xac>)
 8018e22:	60fb      	str	r3, [r7, #12]
 8018e24:	e002      	b.n	8018e2c <prvInsertBlockIntoFreeList+0x14>
 8018e26:	68fb      	ldr	r3, [r7, #12]
 8018e28:	681b      	ldr	r3, [r3, #0]
 8018e2a:	60fb      	str	r3, [r7, #12]
 8018e2c:	68fb      	ldr	r3, [r7, #12]
 8018e2e:	681b      	ldr	r3, [r3, #0]
 8018e30:	687a      	ldr	r2, [r7, #4]
 8018e32:	429a      	cmp	r2, r3
 8018e34:	d8f7      	bhi.n	8018e26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8018e36:	68fb      	ldr	r3, [r7, #12]
 8018e38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8018e3a:	68fb      	ldr	r3, [r7, #12]
 8018e3c:	685b      	ldr	r3, [r3, #4]
 8018e3e:	68ba      	ldr	r2, [r7, #8]
 8018e40:	4413      	add	r3, r2
 8018e42:	687a      	ldr	r2, [r7, #4]
 8018e44:	429a      	cmp	r2, r3
 8018e46:	d108      	bne.n	8018e5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8018e48:	68fb      	ldr	r3, [r7, #12]
 8018e4a:	685a      	ldr	r2, [r3, #4]
 8018e4c:	687b      	ldr	r3, [r7, #4]
 8018e4e:	685b      	ldr	r3, [r3, #4]
 8018e50:	441a      	add	r2, r3
 8018e52:	68fb      	ldr	r3, [r7, #12]
 8018e54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8018e56:	68fb      	ldr	r3, [r7, #12]
 8018e58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8018e5a:	687b      	ldr	r3, [r7, #4]
 8018e5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8018e5e:	687b      	ldr	r3, [r7, #4]
 8018e60:	685b      	ldr	r3, [r3, #4]
 8018e62:	68ba      	ldr	r2, [r7, #8]
 8018e64:	441a      	add	r2, r3
 8018e66:	68fb      	ldr	r3, [r7, #12]
 8018e68:	681b      	ldr	r3, [r3, #0]
 8018e6a:	429a      	cmp	r2, r3
 8018e6c:	d118      	bne.n	8018ea0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8018e6e:	68fb      	ldr	r3, [r7, #12]
 8018e70:	681a      	ldr	r2, [r3, #0]
 8018e72:	4b15      	ldr	r3, [pc, #84]	; (8018ec8 <prvInsertBlockIntoFreeList+0xb0>)
 8018e74:	681b      	ldr	r3, [r3, #0]
 8018e76:	429a      	cmp	r2, r3
 8018e78:	d00d      	beq.n	8018e96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8018e7a:	687b      	ldr	r3, [r7, #4]
 8018e7c:	685a      	ldr	r2, [r3, #4]
 8018e7e:	68fb      	ldr	r3, [r7, #12]
 8018e80:	681b      	ldr	r3, [r3, #0]
 8018e82:	685b      	ldr	r3, [r3, #4]
 8018e84:	441a      	add	r2, r3
 8018e86:	687b      	ldr	r3, [r7, #4]
 8018e88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8018e8a:	68fb      	ldr	r3, [r7, #12]
 8018e8c:	681b      	ldr	r3, [r3, #0]
 8018e8e:	681a      	ldr	r2, [r3, #0]
 8018e90:	687b      	ldr	r3, [r7, #4]
 8018e92:	601a      	str	r2, [r3, #0]
 8018e94:	e008      	b.n	8018ea8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8018e96:	4b0c      	ldr	r3, [pc, #48]	; (8018ec8 <prvInsertBlockIntoFreeList+0xb0>)
 8018e98:	681a      	ldr	r2, [r3, #0]
 8018e9a:	687b      	ldr	r3, [r7, #4]
 8018e9c:	601a      	str	r2, [r3, #0]
 8018e9e:	e003      	b.n	8018ea8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8018ea0:	68fb      	ldr	r3, [r7, #12]
 8018ea2:	681a      	ldr	r2, [r3, #0]
 8018ea4:	687b      	ldr	r3, [r7, #4]
 8018ea6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8018ea8:	68fa      	ldr	r2, [r7, #12]
 8018eaa:	687b      	ldr	r3, [r7, #4]
 8018eac:	429a      	cmp	r2, r3
 8018eae:	d002      	beq.n	8018eb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8018eb0:	68fb      	ldr	r3, [r7, #12]
 8018eb2:	687a      	ldr	r2, [r7, #4]
 8018eb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018eb6:	bf00      	nop
 8018eb8:	3714      	adds	r7, #20
 8018eba:	46bd      	mov	sp, r7
 8018ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ec0:	4770      	bx	lr
 8018ec2:	bf00      	nop
 8018ec4:	24009f08 	.word	0x24009f08
 8018ec8:	24009f10 	.word	0x24009f10

08018ecc <Bmx160_init>:
const float gyroRange = Bmx160_GYRO_SENSITIVITY_250DPS;

sBmx160Dev_t Obmx160;

void Bmx160_init()
{
 8018ecc:	b580      	push	{r7, lr}
 8018ece:	af00      	add	r7, sp, #0
    Obmx160.delayMs = HAL_Delay;
 8018ed0:	4b04      	ldr	r3, [pc, #16]	; (8018ee4 <Bmx160_init+0x18>)
 8018ed2:	4a05      	ldr	r2, [pc, #20]	; (8018ee8 <Bmx160_init+0x1c>)
 8018ed4:	621a      	str	r2, [r3, #32]
    Bmx160_begin();
 8018ed6:	f000 f809 	bl	8018eec <Bmx160_begin>
    DelayUs(100);
 8018eda:	2064      	movs	r0, #100	; 0x64
 8018edc:	f000 fa6a 	bl	80193b4 <DelayUs>
}
 8018ee0:	bf00      	nop
 8018ee2:	bd80      	pop	{r7, pc}
 8018ee4:	24009f28 	.word	0x24009f28
 8018ee8:	08001e7d 	.word	0x08001e7d

08018eec <Bmx160_begin>:

uint8_t Bmx160_begin()
{
 8018eec:	b580      	push	{r7, lr}
 8018eee:	af00      	add	r7, sp, #0
    if (Bmx160_scan() == TRUE){
 8018ef0:	f000 fa57 	bl	80193a2 <Bmx160_scan>
 8018ef4:	4603      	mov	r3, r0
 8018ef6:	2b01      	cmp	r3, #1
 8018ef8:	d11d      	bne.n	8018f36 <Bmx160_begin+0x4a>
        Bmx160_softReset_();
 8018efa:	f000 f821 	bl	8018f40 <Bmx160_softReset_>
        Bmx160_writeBmxReg(Bmx160_COMMAND_REG_ADDR, 0x11);
 8018efe:	2111      	movs	r1, #17
 8018f00:	207e      	movs	r0, #126	; 0x7e
 8018f02:	f000 fa15 	bl	8019330 <Bmx160_writeBmxReg>
        Obmx160.delayMs(50);
 8018f06:	4b0d      	ldr	r3, [pc, #52]	; (8018f3c <Bmx160_begin+0x50>)
 8018f08:	6a1b      	ldr	r3, [r3, #32]
 8018f0a:	2032      	movs	r0, #50	; 0x32
 8018f0c:	4798      	blx	r3
        /* Set gyro to normal mode */
        Bmx160_writeBmxReg(Bmx160_COMMAND_REG_ADDR, 0x15);
 8018f0e:	2115      	movs	r1, #21
 8018f10:	207e      	movs	r0, #126	; 0x7e
 8018f12:	f000 fa0d 	bl	8019330 <Bmx160_writeBmxReg>
        Obmx160.delayMs(100);
 8018f16:	4b09      	ldr	r3, [pc, #36]	; (8018f3c <Bmx160_begin+0x50>)
 8018f18:	6a1b      	ldr	r3, [r3, #32]
 8018f1a:	2064      	movs	r0, #100	; 0x64
 8018f1c:	4798      	blx	r3
        /* Set mag to normal mode */
        Bmx160_writeBmxReg(Bmx160_COMMAND_REG_ADDR, 0x19);
 8018f1e:	2119      	movs	r1, #25
 8018f20:	207e      	movs	r0, #126	; 0x7e
 8018f22:	f000 fa05 	bl	8019330 <Bmx160_writeBmxReg>
        Obmx160.delayMs(10);
 8018f26:	4b05      	ldr	r3, [pc, #20]	; (8018f3c <Bmx160_begin+0x50>)
 8018f28:	6a1b      	ldr	r3, [r3, #32]
 8018f2a:	200a      	movs	r0, #10
 8018f2c:	4798      	blx	r3
        Bmx160_setMagnConf();
 8018f2e:	f000 f873 	bl	8019018 <Bmx160_setMagnConf>
        return TRUE;
 8018f32:	2301      	movs	r3, #1
 8018f34:	e000      	b.n	8018f38 <Bmx160_begin+0x4c>
    }
    else
        return FALSE;
 8018f36:	2300      	movs	r3, #0
}
 8018f38:	4618      	mov	r0, r3
 8018f3a:	bd80      	pop	{r7, pc}
 8018f3c:	24009f28 	.word	0x24009f28

08018f40 <Bmx160_softReset_>:
    Bmx160_writeBmxReg(Bmx160_COMMAND_REG_ADDR, 0x19);
    Obmx160.delayMs(100);
}

uint8_t Bmx160_softReset_()
{
 8018f40:	b580      	push	{r7, lr}
 8018f42:	b082      	sub	sp, #8
 8018f44:	af00      	add	r7, sp, #0
  int8_t rslt=Bmx160_OK;
 8018f46:	2300      	movs	r3, #0
 8018f48:	71fb      	strb	r3, [r7, #7]
  rslt = Bmx160_softReset(&Obmx160);
 8018f4a:	4808      	ldr	r0, [pc, #32]	; (8018f6c <Bmx160_softReset_+0x2c>)
 8018f4c:	f000 f810 	bl	8018f70 <Bmx160_softReset>
 8018f50:	4603      	mov	r3, r0
 8018f52:	71fb      	strb	r3, [r7, #7]
  if (rslt == 0)
 8018f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018f58:	2b00      	cmp	r3, #0
 8018f5a:	d101      	bne.n	8018f60 <Bmx160_softReset_+0x20>
    return TRUE;
 8018f5c:	2301      	movs	r3, #1
 8018f5e:	e000      	b.n	8018f62 <Bmx160_softReset_+0x22>
  else
    return FALSE;
 8018f60:	2300      	movs	r3, #0
}
 8018f62:	4618      	mov	r0, r3
 8018f64:	3708      	adds	r7, #8
 8018f66:	46bd      	mov	sp, r7
 8018f68:	bd80      	pop	{r7, pc}
 8018f6a:	bf00      	nop
 8018f6c:	24009f28 	.word	0x24009f28

08018f70 <Bmx160_softReset>:

int8_t Bmx160_softReset(sBmx160Dev_t *dev)
{
 8018f70:	b580      	push	{r7, lr}
 8018f72:	b084      	sub	sp, #16
 8018f74:	af00      	add	r7, sp, #0
 8018f76:	6078      	str	r0, [r7, #4]
  int8_t rslt=Bmx160_OK;
 8018f78:	2300      	movs	r3, #0
 8018f7a:	73fb      	strb	r3, [r7, #15]
  uint8_t data = Bmx160_SOFT_RESET_CMD;
 8018f7c:	23b6      	movs	r3, #182	; 0xb6
 8018f7e:	73bb      	strb	r3, [r7, #14]
  if (dev==NULL){
 8018f80:	687b      	ldr	r3, [r7, #4]
 8018f82:	2b00      	cmp	r3, #0
 8018f84:	d101      	bne.n	8018f8a <Bmx160_softReset+0x1a>
    rslt = Bmx160_E_NULL_PTR;
 8018f86:	23ff      	movs	r3, #255	; 0xff
 8018f88:	73fb      	strb	r3, [r7, #15]
  }
  Bmx160_writeBmxReg(Bmx160_COMMAND_REG_ADDR, data);
 8018f8a:	7bbb      	ldrb	r3, [r7, #14]
 8018f8c:	4619      	mov	r1, r3
 8018f8e:	207e      	movs	r0, #126	; 0x7e
 8018f90:	f000 f9ce 	bl	8019330 <Bmx160_writeBmxReg>
  Obmx160.delayMs(Bmx160_SOFT_RESET_DELAY_MS);
 8018f94:	4b08      	ldr	r3, [pc, #32]	; (8018fb8 <Bmx160_softReset+0x48>)
 8018f96:	6a1b      	ldr	r3, [r3, #32]
 8018f98:	200f      	movs	r0, #15
 8018f9a:	4798      	blx	r3
  if (rslt == Bmx160_OK){
 8018f9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018fa0:	2b00      	cmp	r3, #0
 8018fa2:	d102      	bne.n	8018faa <Bmx160_softReset+0x3a>
    Bmx160_defaultParamSettg(dev);
 8018fa4:	6878      	ldr	r0, [r7, #4]
 8018fa6:	f000 f809 	bl	8018fbc <Bmx160_defaultParamSettg>
  }
  return rslt;
 8018faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018fae:	4618      	mov	r0, r3
 8018fb0:	3710      	adds	r7, #16
 8018fb2:	46bd      	mov	sp, r7
 8018fb4:	bd80      	pop	{r7, pc}
 8018fb6:	bf00      	nop
 8018fb8:	24009f28 	.word	0x24009f28

08018fbc <Bmx160_defaultParamSettg>:

void Bmx160_defaultParamSettg(sBmx160Dev_t *dev)
{
 8018fbc:	b480      	push	{r7}
 8018fbe:	b083      	sub	sp, #12
 8018fc0:	af00      	add	r7, sp, #0
 8018fc2:	6078      	str	r0, [r7, #4]
  // Initializing accel and gyro params with
  dev->gyroCfg.bw = Bmx160_GYRO_BW_NORMAL_MODE;
 8018fc4:	687b      	ldr	r3, [r7, #4]
 8018fc6:	2202      	movs	r2, #2
 8018fc8:	75da      	strb	r2, [r3, #23]
  dev->gyroCfg.odr = Bmx160_GYRO_ODR_100HZ;
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	2208      	movs	r2, #8
 8018fce:	755a      	strb	r2, [r3, #21]
  dev->gyroCfg.power = Bmx160_GYRO_SUSPEND_MODE;
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	2214      	movs	r2, #20
 8018fd4:	751a      	strb	r2, [r3, #20]
  dev->gyroCfg.range = Bmx160_GYRO_RANGE_250_DPS;
 8018fd6:	687b      	ldr	r3, [r7, #4]
 8018fd8:	2203      	movs	r2, #3
 8018fda:	759a      	strb	r2, [r3, #22]
  dev->accelCfg.bw = Bmx160_ACCEL_BW_NORMAL_AVG4;
 8018fdc:	687b      	ldr	r3, [r7, #4]
 8018fde:	2202      	movs	r2, #2
 8018fe0:	73da      	strb	r2, [r3, #15]
  dev->accelCfg.odr = Bmx160_ACCEL_ODR_100HZ;
 8018fe2:	687b      	ldr	r3, [r7, #4]
 8018fe4:	2208      	movs	r2, #8
 8018fe6:	735a      	strb	r2, [r3, #13]
  dev->accelCfg.power = Bmx160_ACCEL_SUSPEND_MODE;
 8018fe8:	687b      	ldr	r3, [r7, #4]
 8018fea:	2210      	movs	r2, #16
 8018fec:	731a      	strb	r2, [r3, #12]
  dev->accelCfg.range = Bmx160_ACCEL_RANGE_2G;
 8018fee:	687b      	ldr	r3, [r7, #4]
 8018ff0:	2203      	movs	r2, #3
 8018ff2:	739a      	strb	r2, [r3, #14]


  dev->prevMagnCfg = dev->magnCfg;
 8018ff4:	687b      	ldr	r3, [r7, #4]
 8018ff6:	687a      	ldr	r2, [r7, #4]
 8018ff8:	6852      	ldr	r2, [r2, #4]
 8018ffa:	609a      	str	r2, [r3, #8]
  dev->prevGyroCfg = dev->gyroCfg;
 8018ffc:	687b      	ldr	r3, [r7, #4]
 8018ffe:	687a      	ldr	r2, [r7, #4]
 8019000:	6952      	ldr	r2, [r2, #20]
 8019002:	619a      	str	r2, [r3, #24]
  dev->prevAccelCfg = dev->accelCfg;
 8019004:	687b      	ldr	r3, [r7, #4]
 8019006:	687a      	ldr	r2, [r7, #4]
 8019008:	68d2      	ldr	r2, [r2, #12]
 801900a:	611a      	str	r2, [r3, #16]
}
 801900c:	bf00      	nop
 801900e:	370c      	adds	r7, #12
 8019010:	46bd      	mov	sp, r7
 8019012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019016:	4770      	bx	lr

08019018 <Bmx160_setMagnConf>:

void Bmx160_setMagnConf()
{
 8019018:	b580      	push	{r7, lr}
 801901a:	af00      	add	r7, sp, #0
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_0_ADDR, 0x80);
 801901c:	2180      	movs	r1, #128	; 0x80
 801901e:	204c      	movs	r0, #76	; 0x4c
 8019020:	f000 f986 	bl	8019330 <Bmx160_writeBmxReg>
    Obmx160.delayMs(150);
 8019024:	4b1a      	ldr	r3, [pc, #104]	; (8019090 <Bmx160_setMagnConf+0x78>)
 8019026:	6a1b      	ldr	r3, [r3, #32]
 8019028:	2096      	movs	r0, #150	; 0x96
 801902a:	4798      	blx	r3
    // Sleep mode
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_3_ADDR, 0x01);
 801902c:	2101      	movs	r1, #1
 801902e:	204f      	movs	r0, #79	; 0x4f
 8019030:	f000 f97e 	bl	8019330 <Bmx160_writeBmxReg>
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_2_ADDR, 0x4B);
 8019034:	214b      	movs	r1, #75	; 0x4b
 8019036:	204e      	movs	r0, #78	; 0x4e
 8019038:	f000 f97a 	bl	8019330 <Bmx160_writeBmxReg>
    // REPXY regular preset
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_3_ADDR, 0x04);
 801903c:	2104      	movs	r1, #4
 801903e:	204f      	movs	r0, #79	; 0x4f
 8019040:	f000 f976 	bl	8019330 <Bmx160_writeBmxReg>
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_2_ADDR, 0x51);
 8019044:	2151      	movs	r1, #81	; 0x51
 8019046:	204e      	movs	r0, #78	; 0x4e
 8019048:	f000 f972 	bl	8019330 <Bmx160_writeBmxReg>
    // REPZ regular preset
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_3_ADDR, 0x0E);
 801904c:	210e      	movs	r1, #14
 801904e:	204f      	movs	r0, #79	; 0x4f
 8019050:	f000 f96e 	bl	8019330 <Bmx160_writeBmxReg>
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_2_ADDR, 0x52);
 8019054:	2152      	movs	r1, #82	; 0x52
 8019056:	204e      	movs	r0, #78	; 0x4e
 8019058:	f000 f96a 	bl	8019330 <Bmx160_writeBmxReg>

    Bmx160_writeBmxReg(Bmx160_MAGN_IF_3_ADDR, 0x02);
 801905c:	2102      	movs	r1, #2
 801905e:	204f      	movs	r0, #79	; 0x4f
 8019060:	f000 f966 	bl	8019330 <Bmx160_writeBmxReg>
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_2_ADDR, 0x4C);
 8019064:	214c      	movs	r1, #76	; 0x4c
 8019066:	204e      	movs	r0, #78	; 0x4e
 8019068:	f000 f962 	bl	8019330 <Bmx160_writeBmxReg>
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_1_ADDR, 0x42);
 801906c:	2142      	movs	r1, #66	; 0x42
 801906e:	204d      	movs	r0, #77	; 0x4d
 8019070:	f000 f95e 	bl	8019330 <Bmx160_writeBmxReg>
    Bmx160_writeBmxReg(Bmx160_MAGN_CONFIG_ADDR, Bmx160_MAGN_ODR_100HZ);
 8019074:	2108      	movs	r1, #8
 8019076:	2044      	movs	r0, #68	; 0x44
 8019078:	f000 f95a 	bl	8019330 <Bmx160_writeBmxReg>
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_0_ADDR, 0x03);
 801907c:	2103      	movs	r1, #3
 801907e:	204c      	movs	r0, #76	; 0x4c
 8019080:	f000 f956 	bl	8019330 <Bmx160_writeBmxReg>
    Obmx160.delayMs(150);
 8019084:	4b02      	ldr	r3, [pc, #8]	; (8019090 <Bmx160_setMagnConf+0x78>)
 8019086:	6a1b      	ldr	r3, [r3, #32]
 8019088:	2096      	movs	r0, #150	; 0x96
 801908a:	4798      	blx	r3
}
 801908c:	bf00      	nop
 801908e:	bd80      	pop	{r7, pc}
 8019090:	24009f28 	.word	0x24009f28

08019094 <Bmx160_getAllData>:

void Bmx160_getAllData(sBmx160SensorData_t *magn, sBmx160SensorData_t *gyro, sBmx160SensorData_t *accel){
 8019094:	b580      	push	{r7, lr}
 8019096:	b08e      	sub	sp, #56	; 0x38
 8019098:	af00      	add	r7, sp, #0
 801909a:	60f8      	str	r0, [r7, #12]
 801909c:	60b9      	str	r1, [r7, #8]
 801909e:	607a      	str	r2, [r7, #4]

    uint8_t data[23] = {0};
 80190a0:	2300      	movs	r3, #0
 80190a2:	613b      	str	r3, [r7, #16]
 80190a4:	f107 0314 	add.w	r3, r7, #20
 80190a8:	2200      	movs	r2, #0
 80190aa:	601a      	str	r2, [r3, #0]
 80190ac:	605a      	str	r2, [r3, #4]
 80190ae:	609a      	str	r2, [r3, #8]
 80190b0:	60da      	str	r2, [r3, #12]
 80190b2:	f8c3 200f 	str.w	r2, [r3, #15]
    int16_t x=0,y=0,z=0;
 80190b6:	2300      	movs	r3, #0
 80190b8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80190ba:	2300      	movs	r3, #0
 80190bc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80190be:	2300      	movs	r3, #0
 80190c0:	867b      	strh	r3, [r7, #50]	; 0x32
    static int16_t old_x=0, old_y=0, old_z=0;
    uint32_t time = 0;
 80190c2:	2300      	movs	r3, #0
 80190c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    float time_f;
    Bmx160_readReg(Bmx160_MAG_DATA_ADDR, data, 23);
 80190c6:	f107 0310 	add.w	r3, r7, #16
 80190ca:	2217      	movs	r2, #23
 80190cc:	4619      	mov	r1, r3
 80190ce:	2004      	movs	r0, #4
 80190d0:	f000 f955 	bl	801937e <Bmx160_readReg>
    time = (uint32_t) ((uint32_t)(((uint16_t)data[22] << 8) | data[21]) << 8 | data[20]);
 80190d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80190d8:	021b      	lsls	r3, r3, #8
 80190da:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80190de:	4313      	orrs	r3, r2
 80190e0:	021b      	lsls	r3, r3, #8
 80190e2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80190e6:	4313      	orrs	r3, r2
 80190e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    time_f = ((float)(time)) * 0.039f;
 80190ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190ec:	ee07 3a90 	vmov	s15, r3
 80190f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80190f4:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8019300 <Bmx160_getAllData+0x26c>
 80190f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80190fc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    if(magn){
 8019100:	68fb      	ldr	r3, [r7, #12]
 8019102:	2b00      	cmp	r3, #0
 8019104:	d070      	beq.n	80191e8 <Bmx160_getAllData+0x154>
    	x = (int16_t) (((uint16_t)data[1] << 8) | data[0]);
 8019106:	7c7b      	ldrb	r3, [r7, #17]
 8019108:	021b      	lsls	r3, r3, #8
 801910a:	b21a      	sxth	r2, r3
 801910c:	7c3b      	ldrb	r3, [r7, #16]
 801910e:	b21b      	sxth	r3, r3
 8019110:	4313      	orrs	r3, r2
 8019112:	86fb      	strh	r3, [r7, #54]	; 0x36
        y = (int16_t) (((uint16_t)data[3] << 8) | data[2]);
 8019114:	7cfb      	ldrb	r3, [r7, #19]
 8019116:	021b      	lsls	r3, r3, #8
 8019118:	b21a      	sxth	r2, r3
 801911a:	7cbb      	ldrb	r3, [r7, #18]
 801911c:	b21b      	sxth	r3, r3
 801911e:	4313      	orrs	r3, r2
 8019120:	86bb      	strh	r3, [r7, #52]	; 0x34
        z = (int16_t) (((uint16_t)data[5] << 8) | data[4]);
 8019122:	7d7b      	ldrb	r3, [r7, #21]
 8019124:	021b      	lsls	r3, r3, #8
 8019126:	b21a      	sxth	r2, r3
 8019128:	7d3b      	ldrb	r3, [r7, #20]
 801912a:	b21b      	sxth	r3, r3
 801912c:	4313      	orrs	r3, r2
 801912e:	867b      	strh	r3, [r7, #50]	; 0x32
        if(x == old_x && y == old_y && z == old_z)
 8019130:	4b74      	ldr	r3, [pc, #464]	; (8019304 <Bmx160_getAllData+0x270>)
 8019132:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019136:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 801913a:	429a      	cmp	r2, r3
 801913c:	d121      	bne.n	8019182 <Bmx160_getAllData+0xee>
 801913e:	4b72      	ldr	r3, [pc, #456]	; (8019308 <Bmx160_getAllData+0x274>)
 8019140:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019144:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8019148:	429a      	cmp	r2, r3
 801914a:	d11a      	bne.n	8019182 <Bmx160_getAllData+0xee>
 801914c:	4b6f      	ldr	r3, [pc, #444]	; (801930c <Bmx160_getAllData+0x278>)
 801914e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019152:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8019156:	429a      	cmp	r2, r3
 8019158:	d113      	bne.n	8019182 <Bmx160_getAllData+0xee>
        	LOG("ERROR: X: %d, Y: %d, Z: %d", x, y, z);
 801915a:	f7e8 fe83 	bl	8001e64 <HAL_GetTick>
 801915e:	4601      	mov	r1, r0
 8019160:	23a0      	movs	r3, #160	; 0xa0
 8019162:	4a6b      	ldr	r2, [pc, #428]	; (8019310 <Bmx160_getAllData+0x27c>)
 8019164:	486b      	ldr	r0, [pc, #428]	; (8019314 <Bmx160_getAllData+0x280>)
 8019166:	f001 faff 	bl	801a768 <iprintf>
 801916a:	f9b7 1036 	ldrsh.w	r1, [r7, #54]	; 0x36
 801916e:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8019172:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8019176:	4868      	ldr	r0, [pc, #416]	; (8019318 <Bmx160_getAllData+0x284>)
 8019178:	f001 faf6 	bl	801a768 <iprintf>
 801917c:	4867      	ldr	r0, [pc, #412]	; (801931c <Bmx160_getAllData+0x288>)
 801917e:	f001 faf3 	bl	801a768 <iprintf>
        old_x = x; old_y = y; old_z = z;
 8019182:	4a60      	ldr	r2, [pc, #384]	; (8019304 <Bmx160_getAllData+0x270>)
 8019184:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8019186:	8013      	strh	r3, [r2, #0]
 8019188:	4a5f      	ldr	r2, [pc, #380]	; (8019308 <Bmx160_getAllData+0x274>)
 801918a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801918c:	8013      	strh	r3, [r2, #0]
 801918e:	4a5f      	ldr	r2, [pc, #380]	; (801930c <Bmx160_getAllData+0x278>)
 8019190:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8019192:	8013      	strh	r3, [r2, #0]
        //printf("Raw:%d,%d,%d,%d,%d,%d,%d,%d,%d\n\r", 0, 0, 0, 0, 0, 0, x, y, z);
        magn->x = x * Bmx160_MAGN_UT_LSB_XY;
 8019194:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8019198:	ee07 3a90 	vmov	s15, r3
 801919c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80191a0:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8019320 <Bmx160_getAllData+0x28c>
 80191a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80191a8:	68fb      	ldr	r3, [r7, #12]
 80191aa:	edc3 7a00 	vstr	s15, [r3]
        magn->y = y * Bmx160_MAGN_UT_LSB_XY;
 80191ae:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80191b2:	ee07 3a90 	vmov	s15, r3
 80191b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80191ba:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8019320 <Bmx160_getAllData+0x28c>
 80191be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80191c2:	68fb      	ldr	r3, [r7, #12]
 80191c4:	edc3 7a01 	vstr	s15, [r3, #4]
        magn->z = z * Bmx160_MAGN_UT_LSB_Z;
 80191c8:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80191cc:	ee07 3a90 	vmov	s15, r3
 80191d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80191d4:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8019324 <Bmx160_getAllData+0x290>
 80191d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80191dc:	68fb      	ldr	r3, [r7, #12]
 80191de:	edc3 7a02 	vstr	s15, [r3, #8]
//        magn->x = x;
//		magn->y = y;
//		magn->z = z;
        magn->sensortime = time_f;
 80191e2:	68fb      	ldr	r3, [r7, #12]
 80191e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80191e6:	60da      	str	r2, [r3, #12]
    }
    if(gyro){
 80191e8:	68bb      	ldr	r3, [r7, #8]
 80191ea:	2b00      	cmp	r3, #0
 80191ec:	d03e      	beq.n	801926c <Bmx160_getAllData+0x1d8>
        x = (int16_t) (((uint16_t)data[9] << 8) | data[8]);
 80191ee:	7e7b      	ldrb	r3, [r7, #25]
 80191f0:	021b      	lsls	r3, r3, #8
 80191f2:	b21a      	sxth	r2, r3
 80191f4:	7e3b      	ldrb	r3, [r7, #24]
 80191f6:	b21b      	sxth	r3, r3
 80191f8:	4313      	orrs	r3, r2
 80191fa:	86fb      	strh	r3, [r7, #54]	; 0x36
        y = (int16_t) (((uint16_t)data[11] << 8) | data[10]);
 80191fc:	7efb      	ldrb	r3, [r7, #27]
 80191fe:	021b      	lsls	r3, r3, #8
 8019200:	b21a      	sxth	r2, r3
 8019202:	7ebb      	ldrb	r3, [r7, #26]
 8019204:	b21b      	sxth	r3, r3
 8019206:	4313      	orrs	r3, r2
 8019208:	86bb      	strh	r3, [r7, #52]	; 0x34
        z = (int16_t) (((uint16_t)data[13] << 8) | data[12]);
 801920a:	7f7b      	ldrb	r3, [r7, #29]
 801920c:	021b      	lsls	r3, r3, #8
 801920e:	b21a      	sxth	r2, r3
 8019210:	7f3b      	ldrb	r3, [r7, #28]
 8019212:	b21b      	sxth	r3, r3
 8019214:	4313      	orrs	r3, r2
 8019216:	867b      	strh	r3, [r7, #50]	; 0x32
        gyro->x = x * gyroRange;
 8019218:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801921c:	ee07 3a90 	vmov	s15, r3
 8019220:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019224:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8019328 <Bmx160_getAllData+0x294>
 8019228:	ee67 7a87 	vmul.f32	s15, s15, s14
 801922c:	68bb      	ldr	r3, [r7, #8]
 801922e:	edc3 7a00 	vstr	s15, [r3]
        gyro->y = y * gyroRange;
 8019232:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8019236:	ee07 3a90 	vmov	s15, r3
 801923a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801923e:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8019328 <Bmx160_getAllData+0x294>
 8019242:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019246:	68bb      	ldr	r3, [r7, #8]
 8019248:	edc3 7a01 	vstr	s15, [r3, #4]
        gyro->z = z * gyroRange;
 801924c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8019250:	ee07 3a90 	vmov	s15, r3
 8019254:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019258:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8019328 <Bmx160_getAllData+0x294>
 801925c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019260:	68bb      	ldr	r3, [r7, #8]
 8019262:	edc3 7a02 	vstr	s15, [r3, #8]
        gyro->sensortime = time_f;
 8019266:	68bb      	ldr	r3, [r7, #8]
 8019268:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801926a:	60da      	str	r2, [r3, #12]
    }
    if(accel){
 801926c:	687b      	ldr	r3, [r7, #4]
 801926e:	2b00      	cmp	r3, #0
 8019270:	d042      	beq.n	80192f8 <Bmx160_getAllData+0x264>
        x = (int16_t) (((uint16_t)data[15] << 8) | data[14]);
 8019272:	7ffb      	ldrb	r3, [r7, #31]
 8019274:	021b      	lsls	r3, r3, #8
 8019276:	b21a      	sxth	r2, r3
 8019278:	7fbb      	ldrb	r3, [r7, #30]
 801927a:	b21b      	sxth	r3, r3
 801927c:	4313      	orrs	r3, r2
 801927e:	86fb      	strh	r3, [r7, #54]	; 0x36
        y = (int16_t) (((uint16_t)data[17] << 8) | data[16]);
 8019280:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8019284:	021b      	lsls	r3, r3, #8
 8019286:	b21a      	sxth	r2, r3
 8019288:	f897 3020 	ldrb.w	r3, [r7, #32]
 801928c:	b21b      	sxth	r3, r3
 801928e:	4313      	orrs	r3, r2
 8019290:	86bb      	strh	r3, [r7, #52]	; 0x34
        z = (int16_t) (((uint16_t)data[19] << 8) | data[18]);
 8019292:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019296:	021b      	lsls	r3, r3, #8
 8019298:	b21a      	sxth	r2, r3
 801929a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801929e:	b21b      	sxth	r3, r3
 80192a0:	4313      	orrs	r3, r2
 80192a2:	867b      	strh	r3, [r7, #50]	; 0x32
        accel->x = x * accelRange;
 80192a4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80192a8:	ee07 3a90 	vmov	s15, r3
 80192ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80192b0:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 801932c <Bmx160_getAllData+0x298>
 80192b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80192b8:	687b      	ldr	r3, [r7, #4]
 80192ba:	edc3 7a00 	vstr	s15, [r3]
        accel->y = y * accelRange;
 80192be:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80192c2:	ee07 3a90 	vmov	s15, r3
 80192c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80192ca:	ed9f 7a18 	vldr	s14, [pc, #96]	; 801932c <Bmx160_getAllData+0x298>
 80192ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80192d2:	687b      	ldr	r3, [r7, #4]
 80192d4:	edc3 7a01 	vstr	s15, [r3, #4]
        accel->z = z * accelRange;
 80192d8:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80192dc:	ee07 3a90 	vmov	s15, r3
 80192e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80192e4:	ed9f 7a11 	vldr	s14, [pc, #68]	; 801932c <Bmx160_getAllData+0x298>
 80192e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80192ec:	687b      	ldr	r3, [r7, #4]
 80192ee:	edc3 7a02 	vstr	s15, [r3, #8]
        accel->sensortime = time_f;
 80192f2:	687b      	ldr	r3, [r7, #4]
 80192f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80192f6:	60da      	str	r2, [r3, #12]
    }
}
 80192f8:	bf00      	nop
 80192fa:	3738      	adds	r7, #56	; 0x38
 80192fc:	46bd      	mov	sp, r7
 80192fe:	bd80      	pop	{r7, pc}
 8019300:	3d1fbe77 	.word	0x3d1fbe77
 8019304:	24009f4c 	.word	0x24009f4c
 8019308:	24009f4e 	.word	0x24009f4e
 801930c:	24009f50 	.word	0x24009f50
 8019310:	0801ca58 	.word	0x0801ca58
 8019314:	0801c8e0 	.word	0x0801c8e0
 8019318:	0801c8f0 	.word	0x0801c8f0
 801931c:	0801c90c 	.word	0x0801c90c
 8019320:	3eb3b107 	.word	0x3eb3b107
 8019324:	3fa2c3ca 	.word	0x3fa2c3ca
 8019328:	3bf9c1f8 	.word	0x3bf9c1f8
 801932c:	3a1ce7f0 	.word	0x3a1ce7f0

08019330 <Bmx160_writeBmxReg>:

void Bmx160_writeBmxReg(uint8_t reg, uint8_t value)
{
 8019330:	b580      	push	{r7, lr}
 8019332:	b084      	sub	sp, #16
 8019334:	af00      	add	r7, sp, #0
 8019336:	4603      	mov	r3, r0
 8019338:	460a      	mov	r2, r1
 801933a:	71fb      	strb	r3, [r7, #7]
 801933c:	4613      	mov	r3, r2
 801933e:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer[1] = {value};
 8019340:	79bb      	ldrb	r3, [r7, #6]
 8019342:	733b      	strb	r3, [r7, #12]
    Bmx160_writeReg(reg, buffer, 1);
 8019344:	f107 010c 	add.w	r1, r7, #12
 8019348:	79fb      	ldrb	r3, [r7, #7]
 801934a:	2201      	movs	r2, #1
 801934c:	4618      	mov	r0, r3
 801934e:	f000 f804 	bl	801935a <Bmx160_writeReg>
}
 8019352:	bf00      	nop
 8019354:	3710      	adds	r7, #16
 8019356:	46bd      	mov	sp, r7
 8019358:	bd80      	pop	{r7, pc}

0801935a <Bmx160_writeReg>:

void Bmx160_writeReg(uint8_t reg, uint8_t *pBuf, uint16_t len)
{
 801935a:	b580      	push	{r7, lr}
 801935c:	b082      	sub	sp, #8
 801935e:	af00      	add	r7, sp, #0
 8019360:	4603      	mov	r3, r0
 8019362:	6039      	str	r1, [r7, #0]
 8019364:	71fb      	strb	r3, [r7, #7]
 8019366:	4613      	mov	r3, r2
 8019368:	80bb      	strh	r3, [r7, #4]
    SensorAPI_I2Cx_Write(0, reg, pBuf, len);
 801936a:	88bb      	ldrh	r3, [r7, #4]
 801936c:	79f9      	ldrb	r1, [r7, #7]
 801936e:	683a      	ldr	r2, [r7, #0]
 8019370:	2000      	movs	r0, #0
 8019372:	f000 f85f 	bl	8019434 <SensorAPI_I2Cx_Write>
}
 8019376:	bf00      	nop
 8019378:	3708      	adds	r7, #8
 801937a:	46bd      	mov	sp, r7
 801937c:	bd80      	pop	{r7, pc}

0801937e <Bmx160_readReg>:

void Bmx160_readReg(uint8_t reg, uint8_t *pBuf, uint16_t len)
{
 801937e:	b580      	push	{r7, lr}
 8019380:	b082      	sub	sp, #8
 8019382:	af00      	add	r7, sp, #0
 8019384:	4603      	mov	r3, r0
 8019386:	6039      	str	r1, [r7, #0]
 8019388:	71fb      	strb	r3, [r7, #7]
 801938a:	4613      	mov	r3, r2
 801938c:	80bb      	strh	r3, [r7, #4]
    SensorAPI_I2Cx_Read(0, reg, pBuf, len);
 801938e:	88bb      	ldrh	r3, [r7, #4]
 8019390:	79f9      	ldrb	r1, [r7, #7]
 8019392:	683a      	ldr	r2, [r7, #0]
 8019394:	2000      	movs	r0, #0
 8019396:	f000 f82b 	bl	80193f0 <SensorAPI_I2Cx_Read>
}
 801939a:	bf00      	nop
 801939c:	3708      	adds	r7, #8
 801939e:	46bd      	mov	sp, r7
 80193a0:	bd80      	pop	{r7, pc}

080193a2 <Bmx160_scan>:

uint8_t Bmx160_scan()
{
 80193a2:	b480      	push	{r7}
 80193a4:	af00      	add	r7, sp, #0
    return TRUE;
 80193a6:	2301      	movs	r3, #1
}
 80193a8:	4618      	mov	r0, r3
 80193aa:	46bd      	mov	sp, r7
 80193ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193b0:	4770      	bx	lr
	...

080193b4 <DelayUs>:

uint8_t GTXBuffer[512], GRXBuffer[2048];


void DelayUs(uint32_t Delay)
{
 80193b4:	b480      	push	{r7}
 80193b6:	b085      	sub	sp, #20
 80193b8:	af00      	add	r7, sp, #0
 80193ba:	6078      	str	r0, [r7, #4]
	uint32_t i;

	while(--Delay)
 80193bc:	e009      	b.n	80193d2 <DelayUs+0x1e>
	{
		for(i = 0; i < 84000; i++)
 80193be:	2300      	movs	r3, #0
 80193c0:	60fb      	str	r3, [r7, #12]
 80193c2:	e002      	b.n	80193ca <DelayUs+0x16>
 80193c4:	68fb      	ldr	r3, [r7, #12]
 80193c6:	3301      	adds	r3, #1
 80193c8:	60fb      	str	r3, [r7, #12]
 80193ca:	68fb      	ldr	r3, [r7, #12]
 80193cc:	4a07      	ldr	r2, [pc, #28]	; (80193ec <DelayUs+0x38>)
 80193ce:	4293      	cmp	r3, r2
 80193d0:	d9f8      	bls.n	80193c4 <DelayUs+0x10>
	while(--Delay)
 80193d2:	687b      	ldr	r3, [r7, #4]
 80193d4:	3b01      	subs	r3, #1
 80193d6:	607b      	str	r3, [r7, #4]
 80193d8:	687b      	ldr	r3, [r7, #4]
 80193da:	2b00      	cmp	r3, #0
 80193dc:	d1ef      	bne.n	80193be <DelayUs+0xa>
		{
			;
		}
	}
}
 80193de:	bf00      	nop
 80193e0:	bf00      	nop
 80193e2:	3714      	adds	r7, #20
 80193e4:	46bd      	mov	sp, r7
 80193e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193ea:	4770      	bx	lr
 80193ec:	0001481f 	.word	0x0001481f

080193f0 <SensorAPI_I2Cx_Read>:
* Input          : I2C2 device_address, register address, data, data lenght
* Output         : None
* Return         : None
*******************************************************************************/
int8_t SensorAPI_I2Cx_Read(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 80193f0:	b580      	push	{r7, lr}
 80193f2:	b084      	sub	sp, #16
 80193f4:	af02      	add	r7, sp, #8
 80193f6:	603a      	str	r2, [r7, #0]
 80193f8:	461a      	mov	r2, r3
 80193fa:	4603      	mov	r3, r0
 80193fc:	71fb      	strb	r3, [r7, #7]
 80193fe:	460b      	mov	r3, r1
 8019400:	71bb      	strb	r3, [r7, #6]
 8019402:	4613      	mov	r3, r2
 8019404:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&I2C_HANDLE, BMI160_ADDR, &reg_addr, 1, I2CTIMEOUT);
 8019406:	1dba      	adds	r2, r7, #6
 8019408:	2364      	movs	r3, #100	; 0x64
 801940a:	9300      	str	r3, [sp, #0]
 801940c:	2301      	movs	r3, #1
 801940e:	21d0      	movs	r1, #208	; 0xd0
 8019410:	4807      	ldr	r0, [pc, #28]	; (8019430 <SensorAPI_I2Cx_Read+0x40>)
 8019412:	f7ec fb29 	bl	8005a68 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&I2C_HANDLE, BMI160_ADDR, data, len, I2CTIMEOUT);
 8019416:	88bb      	ldrh	r3, [r7, #4]
 8019418:	2264      	movs	r2, #100	; 0x64
 801941a:	9200      	str	r2, [sp, #0]
 801941c:	683a      	ldr	r2, [r7, #0]
 801941e:	21d0      	movs	r1, #208	; 0xd0
 8019420:	4803      	ldr	r0, [pc, #12]	; (8019430 <SensorAPI_I2Cx_Read+0x40>)
 8019422:	f7ec fc15 	bl	8005c50 <HAL_I2C_Master_Receive>
	return 0;
 8019426:	2300      	movs	r3, #0
}
 8019428:	4618      	mov	r0, r3
 801942a:	3708      	adds	r7, #8
 801942c:	46bd      	mov	sp, r7
 801942e:	bd80      	pop	{r7, pc}
 8019430:	240044c8 	.word	0x240044c8

08019434 <SensorAPI_I2Cx_Write>:
* Input          : I2C2 device_address, register address, data, data lenght
* Output         : None
* Return         : None
*******************************************************************************/
int8_t SensorAPI_I2Cx_Write(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8019434:	b580      	push	{r7, lr}
 8019436:	b084      	sub	sp, #16
 8019438:	af02      	add	r7, sp, #8
 801943a:	603a      	str	r2, [r7, #0]
 801943c:	461a      	mov	r2, r3
 801943e:	4603      	mov	r3, r0
 8019440:	71fb      	strb	r3, [r7, #7]
 8019442:	460b      	mov	r3, r1
 8019444:	71bb      	strb	r3, [r7, #6]
 8019446:	4613      	mov	r3, r2
 8019448:	80bb      	strh	r3, [r7, #4]
	GTXBuffer[0] = reg_addr;
 801944a:	4a0c      	ldr	r2, [pc, #48]	; (801947c <SensorAPI_I2Cx_Write+0x48>)
 801944c:	79bb      	ldrb	r3, [r7, #6]
 801944e:	7013      	strb	r3, [r2, #0]
	memcpy(&GTXBuffer[1], data, len);
 8019450:	88bb      	ldrh	r3, [r7, #4]
 8019452:	461a      	mov	r2, r3
 8019454:	6839      	ldr	r1, [r7, #0]
 8019456:	480a      	ldr	r0, [pc, #40]	; (8019480 <SensorAPI_I2Cx_Write+0x4c>)
 8019458:	f001 fa5b 	bl	801a912 <memcpy>

	HAL_I2C_Master_Transmit(&I2C_HANDLE, BMI160_ADDR, GTXBuffer, len+1, I2CTIMEOUT);
 801945c:	88bb      	ldrh	r3, [r7, #4]
 801945e:	3301      	adds	r3, #1
 8019460:	b29b      	uxth	r3, r3
 8019462:	2264      	movs	r2, #100	; 0x64
 8019464:	9200      	str	r2, [sp, #0]
 8019466:	4a05      	ldr	r2, [pc, #20]	; (801947c <SensorAPI_I2Cx_Write+0x48>)
 8019468:	21d0      	movs	r1, #208	; 0xd0
 801946a:	4806      	ldr	r0, [pc, #24]	; (8019484 <SensorAPI_I2Cx_Write+0x50>)
 801946c:	f7ec fafc 	bl	8005a68 <HAL_I2C_Master_Transmit>
	return 0;
 8019470:	2300      	movs	r3, #0
}
 8019472:	4618      	mov	r0, r3
 8019474:	3708      	adds	r7, #8
 8019476:	46bd      	mov	sp, r7
 8019478:	bd80      	pop	{r7, pc}
 801947a:	bf00      	nop
 801947c:	24009f54 	.word	0x24009f54
 8019480:	24009f55 	.word	0x24009f55
 8019484:	240044c8 	.word	0x240044c8

08019488 <__cxa_guard_acquire>:
 8019488:	6803      	ldr	r3, [r0, #0]
 801948a:	07db      	lsls	r3, r3, #31
 801948c:	d406      	bmi.n	801949c <__cxa_guard_acquire+0x14>
 801948e:	7843      	ldrb	r3, [r0, #1]
 8019490:	b103      	cbz	r3, 8019494 <__cxa_guard_acquire+0xc>
 8019492:	deff      	udf	#255	; 0xff
 8019494:	2301      	movs	r3, #1
 8019496:	7043      	strb	r3, [r0, #1]
 8019498:	4618      	mov	r0, r3
 801949a:	4770      	bx	lr
 801949c:	2000      	movs	r0, #0
 801949e:	4770      	bx	lr

080194a0 <__cxa_guard_release>:
 80194a0:	2301      	movs	r3, #1
 80194a2:	6003      	str	r3, [r0, #0]
 80194a4:	4770      	bx	lr
	...

080194a8 <asinf>:
 80194a8:	b508      	push	{r3, lr}
 80194aa:	ed2d 8b02 	vpush	{d8}
 80194ae:	eeb0 8a40 	vmov.f32	s16, s0
 80194b2:	f000 fa03 	bl	80198bc <__ieee754_asinf>
 80194b6:	eeb4 8a48 	vcmp.f32	s16, s16
 80194ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194be:	eef0 8a40 	vmov.f32	s17, s0
 80194c2:	d615      	bvs.n	80194f0 <asinf+0x48>
 80194c4:	eeb0 0a48 	vmov.f32	s0, s16
 80194c8:	f000 f83a 	bl	8019540 <fabsf>
 80194cc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80194d0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80194d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194d8:	dd0a      	ble.n	80194f0 <asinf+0x48>
 80194da:	f001 f9ed 	bl	801a8b8 <__errno>
 80194de:	ecbd 8b02 	vpop	{d8}
 80194e2:	2321      	movs	r3, #33	; 0x21
 80194e4:	6003      	str	r3, [r0, #0]
 80194e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80194ea:	4804      	ldr	r0, [pc, #16]	; (80194fc <asinf+0x54>)
 80194ec:	f000 b830 	b.w	8019550 <nanf>
 80194f0:	eeb0 0a68 	vmov.f32	s0, s17
 80194f4:	ecbd 8b02 	vpop	{d8}
 80194f8:	bd08      	pop	{r3, pc}
 80194fa:	bf00      	nop
 80194fc:	0801ce5a 	.word	0x0801ce5a

08019500 <atan2f>:
 8019500:	f000 bac2 	b.w	8019a88 <__ieee754_atan2f>

08019504 <sqrtf>:
 8019504:	b508      	push	{r3, lr}
 8019506:	ed2d 8b02 	vpush	{d8}
 801950a:	eeb0 8a40 	vmov.f32	s16, s0
 801950e:	f000 f9d1 	bl	80198b4 <__ieee754_sqrtf>
 8019512:	eeb4 8a48 	vcmp.f32	s16, s16
 8019516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801951a:	d60c      	bvs.n	8019536 <sqrtf+0x32>
 801951c:	eddf 8a07 	vldr	s17, [pc, #28]	; 801953c <sqrtf+0x38>
 8019520:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8019524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019528:	d505      	bpl.n	8019536 <sqrtf+0x32>
 801952a:	f001 f9c5 	bl	801a8b8 <__errno>
 801952e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8019532:	2321      	movs	r3, #33	; 0x21
 8019534:	6003      	str	r3, [r0, #0]
 8019536:	ecbd 8b02 	vpop	{d8}
 801953a:	bd08      	pop	{r3, pc}
 801953c:	00000000 	.word	0x00000000

08019540 <fabsf>:
 8019540:	ee10 3a10 	vmov	r3, s0
 8019544:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019548:	ee00 3a10 	vmov	s0, r3
 801954c:	4770      	bx	lr
	...

08019550 <nanf>:
 8019550:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8019558 <nanf+0x8>
 8019554:	4770      	bx	lr
 8019556:	bf00      	nop
 8019558:	7fc00000 	.word	0x7fc00000

0801955c <sinf_poly>:
 801955c:	07cb      	lsls	r3, r1, #31
 801955e:	d412      	bmi.n	8019586 <sinf_poly+0x2a>
 8019560:	ee21 5b00 	vmul.f64	d5, d1, d0
 8019564:	ed90 6b1a 	vldr	d6, [r0, #104]	; 0x68
 8019568:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 801956c:	eea6 7b01 	vfma.f64	d7, d6, d1
 8019570:	ed90 6b16 	vldr	d6, [r0, #88]	; 0x58
 8019574:	ee21 1b05 	vmul.f64	d1, d1, d5
 8019578:	eea6 0b05 	vfma.f64	d0, d6, d5
 801957c:	eea7 0b01 	vfma.f64	d0, d7, d1
 8019580:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8019584:	4770      	bx	lr
 8019586:	ed90 6b14 	vldr	d6, [r0, #80]	; 0x50
 801958a:	ee21 5b01 	vmul.f64	d5, d1, d1
 801958e:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 8019592:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 8019596:	eea1 7b06 	vfma.f64	d7, d1, d6
 801959a:	ed90 6b0e 	vldr	d6, [r0, #56]	; 0x38
 801959e:	eea1 0b06 	vfma.f64	d0, d1, d6
 80195a2:	ed90 6b10 	vldr	d6, [r0, #64]	; 0x40
 80195a6:	ee21 1b05 	vmul.f64	d1, d1, d5
 80195aa:	eea5 0b06 	vfma.f64	d0, d5, d6
 80195ae:	e7e5      	b.n	801957c <sinf_poly+0x20>

080195b0 <sinf>:
 80195b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80195b2:	ee10 4a10 	vmov	r4, s0
 80195b6:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80195ba:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 80195be:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 80195c2:	eef0 7a40 	vmov.f32	s15, s0
 80195c6:	ea4f 5214 	mov.w	r2, r4, lsr #20
 80195ca:	d218      	bcs.n	80195fe <sinf+0x4e>
 80195cc:	ee26 1b06 	vmul.f64	d1, d6, d6
 80195d0:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 80195d4:	d20a      	bcs.n	80195ec <sinf+0x3c>
 80195d6:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 80195da:	d103      	bne.n	80195e4 <sinf+0x34>
 80195dc:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 80195e0:	ed8d 1a01 	vstr	s2, [sp, #4]
 80195e4:	eeb0 0a67 	vmov.f32	s0, s15
 80195e8:	b003      	add	sp, #12
 80195ea:	bd30      	pop	{r4, r5, pc}
 80195ec:	483a      	ldr	r0, [pc, #232]	; (80196d8 <sinf+0x128>)
 80195ee:	eeb0 0b46 	vmov.f64	d0, d6
 80195f2:	2100      	movs	r1, #0
 80195f4:	b003      	add	sp, #12
 80195f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80195fa:	f7ff bfaf 	b.w	801955c <sinf_poly>
 80195fe:	f240 422e 	movw	r2, #1070	; 0x42e
 8019602:	4293      	cmp	r3, r2
 8019604:	d824      	bhi.n	8019650 <sinf+0xa0>
 8019606:	4b34      	ldr	r3, [pc, #208]	; (80196d8 <sinf+0x128>)
 8019608:	ed93 7b08 	vldr	d7, [r3, #32]
 801960c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8019610:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8019614:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8019618:	ee17 1a90 	vmov	r1, s15
 801961c:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 8019620:	1609      	asrs	r1, r1, #24
 8019622:	ee07 1a90 	vmov	s15, r1
 8019626:	f001 0203 	and.w	r2, r1, #3
 801962a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801962e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8019632:	ed92 0b00 	vldr	d0, [r2]
 8019636:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 801963a:	f011 0f02 	tst.w	r1, #2
 801963e:	eea5 6b47 	vfms.f64	d6, d5, d7
 8019642:	bf08      	it	eq
 8019644:	4618      	moveq	r0, r3
 8019646:	ee26 1b06 	vmul.f64	d1, d6, d6
 801964a:	ee20 0b06 	vmul.f64	d0, d0, d6
 801964e:	e7d1      	b.n	80195f4 <sinf+0x44>
 8019650:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8019654:	d237      	bcs.n	80196c6 <sinf+0x116>
 8019656:	4a21      	ldr	r2, [pc, #132]	; (80196dc <sinf+0x12c>)
 8019658:	f3c4 6183 	ubfx	r1, r4, #26, #4
 801965c:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 8019660:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8019664:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 8019668:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 801966c:	6a2a      	ldr	r2, [r5, #32]
 801966e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8019672:	4083      	lsls	r3, r0
 8019674:	fba3 2002 	umull	r2, r0, r3, r2
 8019678:	692a      	ldr	r2, [r5, #16]
 801967a:	4359      	muls	r1, r3
 801967c:	fbe3 0102 	umlal	r0, r1, r3, r2
 8019680:	f101 5300 	add.w	r3, r1, #536870912	; 0x20000000
 8019684:	0f9d      	lsrs	r5, r3, #30
 8019686:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 801968a:	1ac9      	subs	r1, r1, r3
 801968c:	f7e7 f80e 	bl	80006ac <__aeabi_l2d>
 8019690:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8019694:	4b10      	ldr	r3, [pc, #64]	; (80196d8 <sinf+0x128>)
 8019696:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80196d0 <sinf+0x120>
 801969a:	ec41 0b17 	vmov	d7, r0, r1
 801969e:	f004 0203 	and.w	r2, r4, #3
 80196a2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80196a6:	ee27 0b00 	vmul.f64	d0, d7, d0
 80196aa:	ed92 7b00 	vldr	d7, [r2]
 80196ae:	ee20 1b00 	vmul.f64	d1, d0, d0
 80196b2:	f014 0f02 	tst.w	r4, #2
 80196b6:	f103 0070 	add.w	r0, r3, #112	; 0x70
 80196ba:	4629      	mov	r1, r5
 80196bc:	bf08      	it	eq
 80196be:	4618      	moveq	r0, r3
 80196c0:	ee27 0b00 	vmul.f64	d0, d7, d0
 80196c4:	e796      	b.n	80195f4 <sinf+0x44>
 80196c6:	b003      	add	sp, #12
 80196c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80196cc:	f000 b8e3 	b.w	8019896 <__math_invalidf>
 80196d0:	54442d18 	.word	0x54442d18
 80196d4:	3c1921fb 	.word	0x3c1921fb
 80196d8:	0801cad0 	.word	0x0801cad0
 80196dc:	0801ca6c 	.word	0x0801ca6c

080196e0 <sinf_poly>:
 80196e0:	07cb      	lsls	r3, r1, #31
 80196e2:	d412      	bmi.n	801970a <sinf_poly+0x2a>
 80196e4:	ee21 5b00 	vmul.f64	d5, d1, d0
 80196e8:	ed90 6b1a 	vldr	d6, [r0, #104]	; 0x68
 80196ec:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 80196f0:	eea6 7b01 	vfma.f64	d7, d6, d1
 80196f4:	ed90 6b16 	vldr	d6, [r0, #88]	; 0x58
 80196f8:	ee21 1b05 	vmul.f64	d1, d1, d5
 80196fc:	eea6 0b05 	vfma.f64	d0, d6, d5
 8019700:	eea7 0b01 	vfma.f64	d0, d7, d1
 8019704:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8019708:	4770      	bx	lr
 801970a:	ed90 6b14 	vldr	d6, [r0, #80]	; 0x50
 801970e:	ee21 5b01 	vmul.f64	d5, d1, d1
 8019712:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 8019716:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 801971a:	eea1 7b06 	vfma.f64	d7, d1, d6
 801971e:	ed90 6b0e 	vldr	d6, [r0, #56]	; 0x38
 8019722:	eea1 0b06 	vfma.f64	d0, d1, d6
 8019726:	ed90 6b10 	vldr	d6, [r0, #64]	; 0x40
 801972a:	ee21 1b05 	vmul.f64	d1, d1, d5
 801972e:	eea5 0b06 	vfma.f64	d0, d5, d6
 8019732:	e7e5      	b.n	8019700 <sinf_poly+0x20>
 8019734:	0000      	movs	r0, r0
	...

08019738 <cosf>:
 8019738:	b538      	push	{r3, r4, r5, lr}
 801973a:	ee10 4a10 	vmov	r4, s0
 801973e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8019742:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 8019746:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 801974a:	d21f      	bcs.n	801978c <cosf+0x54>
 801974c:	ee27 7b07 	vmul.f64	d7, d7, d7
 8019750:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 8019754:	f0c0 8086 	bcc.w	8019864 <cosf+0x12c>
 8019758:	ee27 4b07 	vmul.f64	d4, d7, d7
 801975c:	4b46      	ldr	r3, [pc, #280]	; (8019878 <cosf+0x140>)
 801975e:	ed93 5b14 	vldr	d5, [r3, #80]	; 0x50
 8019762:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8019766:	ed93 0b0c 	vldr	d0, [r3, #48]	; 0x30
 801976a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801976e:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
 8019772:	eea7 0b05 	vfma.f64	d0, d7, d5
 8019776:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 801977a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801977e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8019782:	eea6 0b07 	vfma.f64	d0, d6, d7
 8019786:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801978a:	bd38      	pop	{r3, r4, r5, pc}
 801978c:	f240 422e 	movw	r2, #1070	; 0x42e
 8019790:	4293      	cmp	r3, r2
 8019792:	d829      	bhi.n	80197e8 <cosf+0xb0>
 8019794:	4b38      	ldr	r3, [pc, #224]	; (8019878 <cosf+0x140>)
 8019796:	ed93 6b08 	vldr	d6, [r3, #32]
 801979a:	ee27 6b06 	vmul.f64	d6, d7, d6
 801979e:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 80197a2:	f103 0070 	add.w	r0, r3, #112	; 0x70
 80197a6:	ee16 1a90 	vmov	r1, s13
 80197aa:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 80197ae:	1609      	asrs	r1, r1, #24
 80197b0:	ee06 1a90 	vmov	s13, r1
 80197b4:	f001 0203 	and.w	r2, r1, #3
 80197b8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80197bc:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80197c0:	ed92 0b00 	vldr	d0, [r2]
 80197c4:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 80197c8:	f011 0f02 	tst.w	r1, #2
 80197cc:	bf08      	it	eq
 80197ce:	4618      	moveq	r0, r3
 80197d0:	f081 0101 	eor.w	r1, r1, #1
 80197d4:	eea5 7b46 	vfms.f64	d7, d5, d6
 80197d8:	ee27 1b07 	vmul.f64	d1, d7, d7
 80197dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80197e0:	ee27 0b00 	vmul.f64	d0, d7, d0
 80197e4:	f7ff bf7c 	b.w	80196e0 <sinf_poly>
 80197e8:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 80197ec:	d236      	bcs.n	801985c <cosf+0x124>
 80197ee:	4a23      	ldr	r2, [pc, #140]	; (801987c <cosf+0x144>)
 80197f0:	f3c4 6183 	ubfx	r1, r4, #26, #4
 80197f4:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 80197f8:	f3c4 0316 	ubfx	r3, r4, #0, #23
 80197fc:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 8019800:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8019804:	6a2a      	ldr	r2, [r5, #32]
 8019806:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801980a:	4083      	lsls	r3, r0
 801980c:	fba3 2002 	umull	r2, r0, r3, r2
 8019810:	692a      	ldr	r2, [r5, #16]
 8019812:	4359      	muls	r1, r3
 8019814:	fbe3 0102 	umlal	r0, r1, r3, r2
 8019818:	f101 5300 	add.w	r3, r1, #536870912	; 0x20000000
 801981c:	0f9d      	lsrs	r5, r3, #30
 801981e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8019822:	1ac9      	subs	r1, r1, r3
 8019824:	f7e6 ff42 	bl	80006ac <__aeabi_l2d>
 8019828:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 801982c:	4b12      	ldr	r3, [pc, #72]	; (8019878 <cosf+0x140>)
 801982e:	ed9f 0b10 	vldr	d0, [pc, #64]	; 8019870 <cosf+0x138>
 8019832:	ec41 0b17 	vmov	d7, r0, r1
 8019836:	f004 0203 	and.w	r2, r4, #3
 801983a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801983e:	f014 0f02 	tst.w	r4, #2
 8019842:	ee27 0b00 	vmul.f64	d0, d7, d0
 8019846:	f103 0070 	add.w	r0, r3, #112	; 0x70
 801984a:	ed92 7b00 	vldr	d7, [r2]
 801984e:	ee20 1b00 	vmul.f64	d1, d0, d0
 8019852:	f085 0101 	eor.w	r1, r5, #1
 8019856:	bf08      	it	eq
 8019858:	4618      	moveq	r0, r3
 801985a:	e7bf      	b.n	80197dc <cosf+0xa4>
 801985c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019860:	f000 b819 	b.w	8019896 <__math_invalidf>
 8019864:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8019868:	e78f      	b.n	801978a <cosf+0x52>
 801986a:	bf00      	nop
 801986c:	f3af 8000 	nop.w
 8019870:	54442d18 	.word	0x54442d18
 8019874:	3c1921fb 	.word	0x3c1921fb
 8019878:	0801cad0 	.word	0x0801cad0
 801987c:	0801ca6c 	.word	0x0801ca6c

08019880 <with_errnof>:
 8019880:	b513      	push	{r0, r1, r4, lr}
 8019882:	4604      	mov	r4, r0
 8019884:	ed8d 0a01 	vstr	s0, [sp, #4]
 8019888:	f001 f816 	bl	801a8b8 <__errno>
 801988c:	ed9d 0a01 	vldr	s0, [sp, #4]
 8019890:	6004      	str	r4, [r0, #0]
 8019892:	b002      	add	sp, #8
 8019894:	bd10      	pop	{r4, pc}

08019896 <__math_invalidf>:
 8019896:	eef0 7a40 	vmov.f32	s15, s0
 801989a:	ee30 7a40 	vsub.f32	s14, s0, s0
 801989e:	eef4 7a67 	vcmp.f32	s15, s15
 80198a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198a6:	ee87 0a07 	vdiv.f32	s0, s14, s14
 80198aa:	d602      	bvs.n	80198b2 <__math_invalidf+0x1c>
 80198ac:	2021      	movs	r0, #33	; 0x21
 80198ae:	f7ff bfe7 	b.w	8019880 <with_errnof>
 80198b2:	4770      	bx	lr

080198b4 <__ieee754_sqrtf>:
 80198b4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80198b8:	4770      	bx	lr
	...

080198bc <__ieee754_asinf>:
 80198bc:	b538      	push	{r3, r4, r5, lr}
 80198be:	ee10 5a10 	vmov	r5, s0
 80198c2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80198c6:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80198ca:	ed2d 8b04 	vpush	{d8-d9}
 80198ce:	d10c      	bne.n	80198ea <__ieee754_asinf+0x2e>
 80198d0:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8019a48 <__ieee754_asinf+0x18c>
 80198d4:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8019a4c <__ieee754_asinf+0x190>
 80198d8:	ee60 7a27 	vmul.f32	s15, s0, s15
 80198dc:	eee0 7a07 	vfma.f32	s15, s0, s14
 80198e0:	eeb0 0a67 	vmov.f32	s0, s15
 80198e4:	ecbd 8b04 	vpop	{d8-d9}
 80198e8:	bd38      	pop	{r3, r4, r5, pc}
 80198ea:	dd04      	ble.n	80198f6 <__ieee754_asinf+0x3a>
 80198ec:	ee70 7a40 	vsub.f32	s15, s0, s0
 80198f0:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80198f4:	e7f6      	b.n	80198e4 <__ieee754_asinf+0x28>
 80198f6:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80198fa:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80198fe:	da0b      	bge.n	8019918 <__ieee754_asinf+0x5c>
 8019900:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8019904:	da52      	bge.n	80199ac <__ieee754_asinf+0xf0>
 8019906:	eddf 7a52 	vldr	s15, [pc, #328]	; 8019a50 <__ieee754_asinf+0x194>
 801990a:	ee70 7a27 	vadd.f32	s15, s0, s15
 801990e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8019912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019916:	dce5      	bgt.n	80198e4 <__ieee754_asinf+0x28>
 8019918:	f7ff fe12 	bl	8019540 <fabsf>
 801991c:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8019920:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8019924:	ee20 8a27 	vmul.f32	s16, s0, s15
 8019928:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8019a54 <__ieee754_asinf+0x198>
 801992c:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8019a58 <__ieee754_asinf+0x19c>
 8019930:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8019a5c <__ieee754_asinf+0x1a0>
 8019934:	eea8 7a27 	vfma.f32	s14, s16, s15
 8019938:	eddf 7a49 	vldr	s15, [pc, #292]	; 8019a60 <__ieee754_asinf+0x1a4>
 801993c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8019940:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8019a64 <__ieee754_asinf+0x1a8>
 8019944:	eea7 7a88 	vfma.f32	s14, s15, s16
 8019948:	eddf 7a47 	vldr	s15, [pc, #284]	; 8019a68 <__ieee754_asinf+0x1ac>
 801994c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8019950:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8019a6c <__ieee754_asinf+0x1b0>
 8019954:	eea7 9a88 	vfma.f32	s18, s15, s16
 8019958:	eddf 7a45 	vldr	s15, [pc, #276]	; 8019a70 <__ieee754_asinf+0x1b4>
 801995c:	eee8 7a07 	vfma.f32	s15, s16, s14
 8019960:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8019a74 <__ieee754_asinf+0x1b8>
 8019964:	eea7 7a88 	vfma.f32	s14, s15, s16
 8019968:	eddf 7a43 	vldr	s15, [pc, #268]	; 8019a78 <__ieee754_asinf+0x1bc>
 801996c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8019970:	eeb0 0a48 	vmov.f32	s0, s16
 8019974:	eee7 8a88 	vfma.f32	s17, s15, s16
 8019978:	f7ff ff9c 	bl	80198b4 <__ieee754_sqrtf>
 801997c:	4b3f      	ldr	r3, [pc, #252]	; (8019a7c <__ieee754_asinf+0x1c0>)
 801997e:	ee29 9a08 	vmul.f32	s18, s18, s16
 8019982:	429c      	cmp	r4, r3
 8019984:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8019988:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801998c:	dd3d      	ble.n	8019a0a <__ieee754_asinf+0x14e>
 801998e:	eea0 0a06 	vfma.f32	s0, s0, s12
 8019992:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8019a80 <__ieee754_asinf+0x1c4>
 8019996:	eee0 7a26 	vfma.f32	s15, s0, s13
 801999a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8019a4c <__ieee754_asinf+0x190>
 801999e:	ee30 0a67 	vsub.f32	s0, s0, s15
 80199a2:	2d00      	cmp	r5, #0
 80199a4:	bfd8      	it	le
 80199a6:	eeb1 0a40 	vnegle.f32	s0, s0
 80199aa:	e79b      	b.n	80198e4 <__ieee754_asinf+0x28>
 80199ac:	ee60 7a00 	vmul.f32	s15, s0, s0
 80199b0:	eddf 6a29 	vldr	s13, [pc, #164]	; 8019a58 <__ieee754_asinf+0x19c>
 80199b4:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8019a54 <__ieee754_asinf+0x198>
 80199b8:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8019a6c <__ieee754_asinf+0x1b0>
 80199bc:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80199c0:	eddf 6a27 	vldr	s13, [pc, #156]	; 8019a60 <__ieee754_asinf+0x1a4>
 80199c4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80199c8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8019a64 <__ieee754_asinf+0x1a8>
 80199cc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80199d0:	eddf 6a25 	vldr	s13, [pc, #148]	; 8019a68 <__ieee754_asinf+0x1ac>
 80199d4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80199d8:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8019a5c <__ieee754_asinf+0x1a0>
 80199dc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80199e0:	eddf 6a23 	vldr	s13, [pc, #140]	; 8019a70 <__ieee754_asinf+0x1b4>
 80199e4:	eee7 6a86 	vfma.f32	s13, s15, s12
 80199e8:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8019a74 <__ieee754_asinf+0x1b8>
 80199ec:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80199f0:	eddf 6a21 	vldr	s13, [pc, #132]	; 8019a78 <__ieee754_asinf+0x1bc>
 80199f4:	eee6 6a27 	vfma.f32	s13, s12, s15
 80199f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80199fc:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8019a00:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8019a04:	eea0 0a27 	vfma.f32	s0, s0, s15
 8019a08:	e76c      	b.n	80198e4 <__ieee754_asinf+0x28>
 8019a0a:	ee10 3a10 	vmov	r3, s0
 8019a0e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8019a12:	f023 030f 	bic.w	r3, r3, #15
 8019a16:	ee07 3a10 	vmov	s14, r3
 8019a1a:	eea7 8a47 	vfms.f32	s16, s14, s14
 8019a1e:	ee70 7a07 	vadd.f32	s15, s0, s14
 8019a22:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019a26:	eec8 5a27 	vdiv.f32	s11, s16, s15
 8019a2a:	eddf 7a07 	vldr	s15, [pc, #28]	; 8019a48 <__ieee754_asinf+0x18c>
 8019a2e:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8019a32:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8019a36:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8019a84 <__ieee754_asinf+0x1c8>
 8019a3a:	eeb0 6a40 	vmov.f32	s12, s0
 8019a3e:	eea7 6a66 	vfms.f32	s12, s14, s13
 8019a42:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8019a46:	e7aa      	b.n	801999e <__ieee754_asinf+0xe2>
 8019a48:	b33bbd2e 	.word	0xb33bbd2e
 8019a4c:	3fc90fdb 	.word	0x3fc90fdb
 8019a50:	7149f2ca 	.word	0x7149f2ca
 8019a54:	3a4f7f04 	.word	0x3a4f7f04
 8019a58:	3811ef08 	.word	0x3811ef08
 8019a5c:	3e2aaaab 	.word	0x3e2aaaab
 8019a60:	bd241146 	.word	0xbd241146
 8019a64:	3e4e0aa8 	.word	0x3e4e0aa8
 8019a68:	bea6b090 	.word	0xbea6b090
 8019a6c:	3d9dc62e 	.word	0x3d9dc62e
 8019a70:	bf303361 	.word	0xbf303361
 8019a74:	4001572d 	.word	0x4001572d
 8019a78:	c019d139 	.word	0xc019d139
 8019a7c:	3f799999 	.word	0x3f799999
 8019a80:	333bbd2e 	.word	0x333bbd2e
 8019a84:	3f490fdb 	.word	0x3f490fdb

08019a88 <__ieee754_atan2f>:
 8019a88:	ee10 2a90 	vmov	r2, s1
 8019a8c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8019a90:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8019a94:	b510      	push	{r4, lr}
 8019a96:	eef0 7a40 	vmov.f32	s15, s0
 8019a9a:	dc06      	bgt.n	8019aaa <__ieee754_atan2f+0x22>
 8019a9c:	ee10 0a10 	vmov	r0, s0
 8019aa0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8019aa4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019aa8:	dd04      	ble.n	8019ab4 <__ieee754_atan2f+0x2c>
 8019aaa:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8019aae:	eeb0 0a67 	vmov.f32	s0, s15
 8019ab2:	bd10      	pop	{r4, pc}
 8019ab4:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8019ab8:	d103      	bne.n	8019ac2 <__ieee754_atan2f+0x3a>
 8019aba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019abe:	f000 b881 	b.w	8019bc4 <atanf>
 8019ac2:	1794      	asrs	r4, r2, #30
 8019ac4:	f004 0402 	and.w	r4, r4, #2
 8019ac8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8019acc:	b93b      	cbnz	r3, 8019ade <__ieee754_atan2f+0x56>
 8019ace:	2c02      	cmp	r4, #2
 8019ad0:	d05c      	beq.n	8019b8c <__ieee754_atan2f+0x104>
 8019ad2:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8019ba0 <__ieee754_atan2f+0x118>
 8019ad6:	2c03      	cmp	r4, #3
 8019ad8:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8019adc:	e7e7      	b.n	8019aae <__ieee754_atan2f+0x26>
 8019ade:	b939      	cbnz	r1, 8019af0 <__ieee754_atan2f+0x68>
 8019ae0:	eddf 7a30 	vldr	s15, [pc, #192]	; 8019ba4 <__ieee754_atan2f+0x11c>
 8019ae4:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8019ba8 <__ieee754_atan2f+0x120>
 8019ae8:	2800      	cmp	r0, #0
 8019aea:	fe67 7a87 	vselge.f32	s15, s15, s14
 8019aee:	e7de      	b.n	8019aae <__ieee754_atan2f+0x26>
 8019af0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8019af4:	d110      	bne.n	8019b18 <__ieee754_atan2f+0x90>
 8019af6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019afa:	f104 34ff 	add.w	r4, r4, #4294967295
 8019afe:	d107      	bne.n	8019b10 <__ieee754_atan2f+0x88>
 8019b00:	2c02      	cmp	r4, #2
 8019b02:	d846      	bhi.n	8019b92 <__ieee754_atan2f+0x10a>
 8019b04:	4b29      	ldr	r3, [pc, #164]	; (8019bac <__ieee754_atan2f+0x124>)
 8019b06:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8019b0a:	edd3 7a00 	vldr	s15, [r3]
 8019b0e:	e7ce      	b.n	8019aae <__ieee754_atan2f+0x26>
 8019b10:	2c02      	cmp	r4, #2
 8019b12:	d841      	bhi.n	8019b98 <__ieee754_atan2f+0x110>
 8019b14:	4b26      	ldr	r3, [pc, #152]	; (8019bb0 <__ieee754_atan2f+0x128>)
 8019b16:	e7f6      	b.n	8019b06 <__ieee754_atan2f+0x7e>
 8019b18:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019b1c:	d0e0      	beq.n	8019ae0 <__ieee754_atan2f+0x58>
 8019b1e:	1a5b      	subs	r3, r3, r1
 8019b20:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8019b24:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8019b28:	da1a      	bge.n	8019b60 <__ieee754_atan2f+0xd8>
 8019b2a:	2a00      	cmp	r2, #0
 8019b2c:	da01      	bge.n	8019b32 <__ieee754_atan2f+0xaa>
 8019b2e:	313c      	adds	r1, #60	; 0x3c
 8019b30:	db19      	blt.n	8019b66 <__ieee754_atan2f+0xde>
 8019b32:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8019b36:	f7ff fd03 	bl	8019540 <fabsf>
 8019b3a:	f000 f843 	bl	8019bc4 <atanf>
 8019b3e:	eef0 7a40 	vmov.f32	s15, s0
 8019b42:	2c01      	cmp	r4, #1
 8019b44:	d012      	beq.n	8019b6c <__ieee754_atan2f+0xe4>
 8019b46:	2c02      	cmp	r4, #2
 8019b48:	d017      	beq.n	8019b7a <__ieee754_atan2f+0xf2>
 8019b4a:	2c00      	cmp	r4, #0
 8019b4c:	d0af      	beq.n	8019aae <__ieee754_atan2f+0x26>
 8019b4e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8019bb4 <__ieee754_atan2f+0x12c>
 8019b52:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019b56:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8019bb8 <__ieee754_atan2f+0x130>
 8019b5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019b5e:	e7a6      	b.n	8019aae <__ieee754_atan2f+0x26>
 8019b60:	eddf 7a10 	vldr	s15, [pc, #64]	; 8019ba4 <__ieee754_atan2f+0x11c>
 8019b64:	e7ed      	b.n	8019b42 <__ieee754_atan2f+0xba>
 8019b66:	eddf 7a15 	vldr	s15, [pc, #84]	; 8019bbc <__ieee754_atan2f+0x134>
 8019b6a:	e7ea      	b.n	8019b42 <__ieee754_atan2f+0xba>
 8019b6c:	ee17 3a90 	vmov	r3, s15
 8019b70:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8019b74:	ee07 3a90 	vmov	s15, r3
 8019b78:	e799      	b.n	8019aae <__ieee754_atan2f+0x26>
 8019b7a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8019bb4 <__ieee754_atan2f+0x12c>
 8019b7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019b82:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8019bb8 <__ieee754_atan2f+0x130>
 8019b86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019b8a:	e790      	b.n	8019aae <__ieee754_atan2f+0x26>
 8019b8c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8019bb8 <__ieee754_atan2f+0x130>
 8019b90:	e78d      	b.n	8019aae <__ieee754_atan2f+0x26>
 8019b92:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8019bc0 <__ieee754_atan2f+0x138>
 8019b96:	e78a      	b.n	8019aae <__ieee754_atan2f+0x26>
 8019b98:	eddf 7a08 	vldr	s15, [pc, #32]	; 8019bbc <__ieee754_atan2f+0x134>
 8019b9c:	e787      	b.n	8019aae <__ieee754_atan2f+0x26>
 8019b9e:	bf00      	nop
 8019ba0:	c0490fdb 	.word	0xc0490fdb
 8019ba4:	3fc90fdb 	.word	0x3fc90fdb
 8019ba8:	bfc90fdb 	.word	0xbfc90fdb
 8019bac:	0801cbb0 	.word	0x0801cbb0
 8019bb0:	0801cbbc 	.word	0x0801cbbc
 8019bb4:	33bbbd2e 	.word	0x33bbbd2e
 8019bb8:	40490fdb 	.word	0x40490fdb
 8019bbc:	00000000 	.word	0x00000000
 8019bc0:	3f490fdb 	.word	0x3f490fdb

08019bc4 <atanf>:
 8019bc4:	b538      	push	{r3, r4, r5, lr}
 8019bc6:	ee10 5a10 	vmov	r5, s0
 8019bca:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8019bce:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8019bd2:	eef0 7a40 	vmov.f32	s15, s0
 8019bd6:	db0f      	blt.n	8019bf8 <atanf+0x34>
 8019bd8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8019bdc:	dd04      	ble.n	8019be8 <atanf+0x24>
 8019bde:	ee70 7a00 	vadd.f32	s15, s0, s0
 8019be2:	eeb0 0a67 	vmov.f32	s0, s15
 8019be6:	bd38      	pop	{r3, r4, r5, pc}
 8019be8:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8019d20 <atanf+0x15c>
 8019bec:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8019d24 <atanf+0x160>
 8019bf0:	2d00      	cmp	r5, #0
 8019bf2:	fe77 7a87 	vselgt.f32	s15, s15, s14
 8019bf6:	e7f4      	b.n	8019be2 <atanf+0x1e>
 8019bf8:	4b4b      	ldr	r3, [pc, #300]	; (8019d28 <atanf+0x164>)
 8019bfa:	429c      	cmp	r4, r3
 8019bfc:	dc10      	bgt.n	8019c20 <atanf+0x5c>
 8019bfe:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8019c02:	da0a      	bge.n	8019c1a <atanf+0x56>
 8019c04:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8019d2c <atanf+0x168>
 8019c08:	ee30 7a07 	vadd.f32	s14, s0, s14
 8019c0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019c10:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8019c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c18:	dce3      	bgt.n	8019be2 <atanf+0x1e>
 8019c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8019c1e:	e013      	b.n	8019c48 <atanf+0x84>
 8019c20:	f7ff fc8e 	bl	8019540 <fabsf>
 8019c24:	4b42      	ldr	r3, [pc, #264]	; (8019d30 <atanf+0x16c>)
 8019c26:	429c      	cmp	r4, r3
 8019c28:	dc4f      	bgt.n	8019cca <atanf+0x106>
 8019c2a:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8019c2e:	429c      	cmp	r4, r3
 8019c30:	dc41      	bgt.n	8019cb6 <atanf+0xf2>
 8019c32:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8019c36:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8019c3a:	eea0 7a27 	vfma.f32	s14, s0, s15
 8019c3e:	2300      	movs	r3, #0
 8019c40:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019c44:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019c48:	1c5a      	adds	r2, r3, #1
 8019c4a:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8019c4e:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8019d34 <atanf+0x170>
 8019c52:	eddf 5a39 	vldr	s11, [pc, #228]	; 8019d38 <atanf+0x174>
 8019c56:	ed9f 5a39 	vldr	s10, [pc, #228]	; 8019d3c <atanf+0x178>
 8019c5a:	ee66 6a06 	vmul.f32	s13, s12, s12
 8019c5e:	eee6 5a87 	vfma.f32	s11, s13, s14
 8019c62:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8019d40 <atanf+0x17c>
 8019c66:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8019c6a:	eddf 5a36 	vldr	s11, [pc, #216]	; 8019d44 <atanf+0x180>
 8019c6e:	eee7 5a26 	vfma.f32	s11, s14, s13
 8019c72:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8019d48 <atanf+0x184>
 8019c76:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8019c7a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8019d4c <atanf+0x188>
 8019c7e:	eee7 5a26 	vfma.f32	s11, s14, s13
 8019c82:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8019d50 <atanf+0x18c>
 8019c86:	eea6 5a87 	vfma.f32	s10, s13, s14
 8019c8a:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8019d54 <atanf+0x190>
 8019c8e:	eea5 7a26 	vfma.f32	s14, s10, s13
 8019c92:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8019d58 <atanf+0x194>
 8019c96:	eea7 5a26 	vfma.f32	s10, s14, s13
 8019c9a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8019d5c <atanf+0x198>
 8019c9e:	eea5 7a26 	vfma.f32	s14, s10, s13
 8019ca2:	ee27 7a26 	vmul.f32	s14, s14, s13
 8019ca6:	eea5 7a86 	vfma.f32	s14, s11, s12
 8019caa:	ee27 7a87 	vmul.f32	s14, s15, s14
 8019cae:	d121      	bne.n	8019cf4 <atanf+0x130>
 8019cb0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019cb4:	e795      	b.n	8019be2 <atanf+0x1e>
 8019cb6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019cba:	ee30 7a67 	vsub.f32	s14, s0, s15
 8019cbe:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019cc2:	2301      	movs	r3, #1
 8019cc4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019cc8:	e7be      	b.n	8019c48 <atanf+0x84>
 8019cca:	4b25      	ldr	r3, [pc, #148]	; (8019d60 <atanf+0x19c>)
 8019ccc:	429c      	cmp	r4, r3
 8019cce:	dc0b      	bgt.n	8019ce8 <atanf+0x124>
 8019cd0:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8019cd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019cd8:	eea0 7a27 	vfma.f32	s14, s0, s15
 8019cdc:	2302      	movs	r3, #2
 8019cde:	ee70 6a67 	vsub.f32	s13, s0, s15
 8019ce2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8019ce6:	e7af      	b.n	8019c48 <atanf+0x84>
 8019ce8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8019cec:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019cf0:	2303      	movs	r3, #3
 8019cf2:	e7a9      	b.n	8019c48 <atanf+0x84>
 8019cf4:	4a1b      	ldr	r2, [pc, #108]	; (8019d64 <atanf+0x1a0>)
 8019cf6:	491c      	ldr	r1, [pc, #112]	; (8019d68 <atanf+0x1a4>)
 8019cf8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8019cfc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8019d00:	edd3 6a00 	vldr	s13, [r3]
 8019d04:	ee37 7a66 	vsub.f32	s14, s14, s13
 8019d08:	2d00      	cmp	r5, #0
 8019d0a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8019d0e:	edd2 7a00 	vldr	s15, [r2]
 8019d12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019d16:	bfb8      	it	lt
 8019d18:	eef1 7a67 	vneglt.f32	s15, s15
 8019d1c:	e761      	b.n	8019be2 <atanf+0x1e>
 8019d1e:	bf00      	nop
 8019d20:	3fc90fdb 	.word	0x3fc90fdb
 8019d24:	bfc90fdb 	.word	0xbfc90fdb
 8019d28:	3edfffff 	.word	0x3edfffff
 8019d2c:	7149f2ca 	.word	0x7149f2ca
 8019d30:	3f97ffff 	.word	0x3f97ffff
 8019d34:	3c8569d7 	.word	0x3c8569d7
 8019d38:	3d4bda59 	.word	0x3d4bda59
 8019d3c:	bd6ef16b 	.word	0xbd6ef16b
 8019d40:	3d886b35 	.word	0x3d886b35
 8019d44:	3dba2e6e 	.word	0x3dba2e6e
 8019d48:	3e124925 	.word	0x3e124925
 8019d4c:	3eaaaaab 	.word	0x3eaaaaab
 8019d50:	bd15a221 	.word	0xbd15a221
 8019d54:	bd9d8795 	.word	0xbd9d8795
 8019d58:	bde38e38 	.word	0xbde38e38
 8019d5c:	be4ccccd 	.word	0xbe4ccccd
 8019d60:	401bffff 	.word	0x401bffff
 8019d64:	0801cbc8 	.word	0x0801cbc8
 8019d68:	0801cbd8 	.word	0x0801cbd8

08019d6c <__cvt>:
 8019d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019d6e:	ed2d 8b02 	vpush	{d8}
 8019d72:	eeb0 8b40 	vmov.f64	d8, d0
 8019d76:	b085      	sub	sp, #20
 8019d78:	4617      	mov	r7, r2
 8019d7a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8019d7c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8019d7e:	ee18 2a90 	vmov	r2, s17
 8019d82:	f025 0520 	bic.w	r5, r5, #32
 8019d86:	2a00      	cmp	r2, #0
 8019d88:	bfb6      	itet	lt
 8019d8a:	222d      	movlt	r2, #45	; 0x2d
 8019d8c:	2200      	movge	r2, #0
 8019d8e:	eeb1 8b40 	vneglt.f64	d8, d0
 8019d92:	2d46      	cmp	r5, #70	; 0x46
 8019d94:	460c      	mov	r4, r1
 8019d96:	701a      	strb	r2, [r3, #0]
 8019d98:	d004      	beq.n	8019da4 <__cvt+0x38>
 8019d9a:	2d45      	cmp	r5, #69	; 0x45
 8019d9c:	d100      	bne.n	8019da0 <__cvt+0x34>
 8019d9e:	3401      	adds	r4, #1
 8019da0:	2102      	movs	r1, #2
 8019da2:	e000      	b.n	8019da6 <__cvt+0x3a>
 8019da4:	2103      	movs	r1, #3
 8019da6:	ab03      	add	r3, sp, #12
 8019da8:	9301      	str	r3, [sp, #4]
 8019daa:	ab02      	add	r3, sp, #8
 8019dac:	9300      	str	r3, [sp, #0]
 8019dae:	4622      	mov	r2, r4
 8019db0:	4633      	mov	r3, r6
 8019db2:	eeb0 0b48 	vmov.f64	d0, d8
 8019db6:	f000 fe43 	bl	801aa40 <_dtoa_r>
 8019dba:	2d47      	cmp	r5, #71	; 0x47
 8019dbc:	d101      	bne.n	8019dc2 <__cvt+0x56>
 8019dbe:	07fb      	lsls	r3, r7, #31
 8019dc0:	d51a      	bpl.n	8019df8 <__cvt+0x8c>
 8019dc2:	2d46      	cmp	r5, #70	; 0x46
 8019dc4:	eb00 0204 	add.w	r2, r0, r4
 8019dc8:	d10c      	bne.n	8019de4 <__cvt+0x78>
 8019dca:	7803      	ldrb	r3, [r0, #0]
 8019dcc:	2b30      	cmp	r3, #48	; 0x30
 8019dce:	d107      	bne.n	8019de0 <__cvt+0x74>
 8019dd0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8019dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019dd8:	bf1c      	itt	ne
 8019dda:	f1c4 0401 	rsbne	r4, r4, #1
 8019dde:	6034      	strne	r4, [r6, #0]
 8019de0:	6833      	ldr	r3, [r6, #0]
 8019de2:	441a      	add	r2, r3
 8019de4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8019de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019dec:	bf08      	it	eq
 8019dee:	9203      	streq	r2, [sp, #12]
 8019df0:	2130      	movs	r1, #48	; 0x30
 8019df2:	9b03      	ldr	r3, [sp, #12]
 8019df4:	4293      	cmp	r3, r2
 8019df6:	d307      	bcc.n	8019e08 <__cvt+0x9c>
 8019df8:	9b03      	ldr	r3, [sp, #12]
 8019dfa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019dfc:	1a1b      	subs	r3, r3, r0
 8019dfe:	6013      	str	r3, [r2, #0]
 8019e00:	b005      	add	sp, #20
 8019e02:	ecbd 8b02 	vpop	{d8}
 8019e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019e08:	1c5c      	adds	r4, r3, #1
 8019e0a:	9403      	str	r4, [sp, #12]
 8019e0c:	7019      	strb	r1, [r3, #0]
 8019e0e:	e7f0      	b.n	8019df2 <__cvt+0x86>

08019e10 <__exponent>:
 8019e10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019e12:	4603      	mov	r3, r0
 8019e14:	2900      	cmp	r1, #0
 8019e16:	bfb8      	it	lt
 8019e18:	4249      	neglt	r1, r1
 8019e1a:	f803 2b02 	strb.w	r2, [r3], #2
 8019e1e:	bfb4      	ite	lt
 8019e20:	222d      	movlt	r2, #45	; 0x2d
 8019e22:	222b      	movge	r2, #43	; 0x2b
 8019e24:	2909      	cmp	r1, #9
 8019e26:	7042      	strb	r2, [r0, #1]
 8019e28:	dd2a      	ble.n	8019e80 <__exponent+0x70>
 8019e2a:	f10d 0207 	add.w	r2, sp, #7
 8019e2e:	4617      	mov	r7, r2
 8019e30:	260a      	movs	r6, #10
 8019e32:	4694      	mov	ip, r2
 8019e34:	fb91 f5f6 	sdiv	r5, r1, r6
 8019e38:	fb06 1415 	mls	r4, r6, r5, r1
 8019e3c:	3430      	adds	r4, #48	; 0x30
 8019e3e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8019e42:	460c      	mov	r4, r1
 8019e44:	2c63      	cmp	r4, #99	; 0x63
 8019e46:	f102 32ff 	add.w	r2, r2, #4294967295
 8019e4a:	4629      	mov	r1, r5
 8019e4c:	dcf1      	bgt.n	8019e32 <__exponent+0x22>
 8019e4e:	3130      	adds	r1, #48	; 0x30
 8019e50:	f1ac 0402 	sub.w	r4, ip, #2
 8019e54:	f802 1c01 	strb.w	r1, [r2, #-1]
 8019e58:	1c41      	adds	r1, r0, #1
 8019e5a:	4622      	mov	r2, r4
 8019e5c:	42ba      	cmp	r2, r7
 8019e5e:	d30a      	bcc.n	8019e76 <__exponent+0x66>
 8019e60:	f10d 0209 	add.w	r2, sp, #9
 8019e64:	eba2 020c 	sub.w	r2, r2, ip
 8019e68:	42bc      	cmp	r4, r7
 8019e6a:	bf88      	it	hi
 8019e6c:	2200      	movhi	r2, #0
 8019e6e:	4413      	add	r3, r2
 8019e70:	1a18      	subs	r0, r3, r0
 8019e72:	b003      	add	sp, #12
 8019e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019e76:	f812 5b01 	ldrb.w	r5, [r2], #1
 8019e7a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8019e7e:	e7ed      	b.n	8019e5c <__exponent+0x4c>
 8019e80:	2330      	movs	r3, #48	; 0x30
 8019e82:	3130      	adds	r1, #48	; 0x30
 8019e84:	7083      	strb	r3, [r0, #2]
 8019e86:	70c1      	strb	r1, [r0, #3]
 8019e88:	1d03      	adds	r3, r0, #4
 8019e8a:	e7f1      	b.n	8019e70 <__exponent+0x60>
 8019e8c:	0000      	movs	r0, r0
	...

08019e90 <_printf_float>:
 8019e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e94:	b08b      	sub	sp, #44	; 0x2c
 8019e96:	460c      	mov	r4, r1
 8019e98:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8019e9c:	4616      	mov	r6, r2
 8019e9e:	461f      	mov	r7, r3
 8019ea0:	4605      	mov	r5, r0
 8019ea2:	f000 fcbf 	bl	801a824 <_localeconv_r>
 8019ea6:	f8d0 b000 	ldr.w	fp, [r0]
 8019eaa:	4658      	mov	r0, fp
 8019eac:	f7e6 fa68 	bl	8000380 <strlen>
 8019eb0:	2300      	movs	r3, #0
 8019eb2:	9308      	str	r3, [sp, #32]
 8019eb4:	f8d8 3000 	ldr.w	r3, [r8]
 8019eb8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8019ebc:	6822      	ldr	r2, [r4, #0]
 8019ebe:	3307      	adds	r3, #7
 8019ec0:	f023 0307 	bic.w	r3, r3, #7
 8019ec4:	f103 0108 	add.w	r1, r3, #8
 8019ec8:	f8c8 1000 	str.w	r1, [r8]
 8019ecc:	ed93 0b00 	vldr	d0, [r3]
 8019ed0:	ed9f 6b97 	vldr	d6, [pc, #604]	; 801a130 <_printf_float+0x2a0>
 8019ed4:	eeb0 7bc0 	vabs.f64	d7, d0
 8019ed8:	eeb4 7b46 	vcmp.f64	d7, d6
 8019edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ee0:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8019ee4:	4682      	mov	sl, r0
 8019ee6:	dd24      	ble.n	8019f32 <_printf_float+0xa2>
 8019ee8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8019eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ef0:	d502      	bpl.n	8019ef8 <_printf_float+0x68>
 8019ef2:	232d      	movs	r3, #45	; 0x2d
 8019ef4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019ef8:	498f      	ldr	r1, [pc, #572]	; (801a138 <_printf_float+0x2a8>)
 8019efa:	4b90      	ldr	r3, [pc, #576]	; (801a13c <_printf_float+0x2ac>)
 8019efc:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8019f00:	bf94      	ite	ls
 8019f02:	4688      	movls	r8, r1
 8019f04:	4698      	movhi	r8, r3
 8019f06:	2303      	movs	r3, #3
 8019f08:	6123      	str	r3, [r4, #16]
 8019f0a:	f022 0204 	bic.w	r2, r2, #4
 8019f0e:	2300      	movs	r3, #0
 8019f10:	6022      	str	r2, [r4, #0]
 8019f12:	9304      	str	r3, [sp, #16]
 8019f14:	9700      	str	r7, [sp, #0]
 8019f16:	4633      	mov	r3, r6
 8019f18:	aa09      	add	r2, sp, #36	; 0x24
 8019f1a:	4621      	mov	r1, r4
 8019f1c:	4628      	mov	r0, r5
 8019f1e:	f000 f9d1 	bl	801a2c4 <_printf_common>
 8019f22:	3001      	adds	r0, #1
 8019f24:	f040 808a 	bne.w	801a03c <_printf_float+0x1ac>
 8019f28:	f04f 30ff 	mov.w	r0, #4294967295
 8019f2c:	b00b      	add	sp, #44	; 0x2c
 8019f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f32:	eeb4 0b40 	vcmp.f64	d0, d0
 8019f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f3a:	d709      	bvc.n	8019f50 <_printf_float+0xc0>
 8019f3c:	ee10 3a90 	vmov	r3, s1
 8019f40:	2b00      	cmp	r3, #0
 8019f42:	bfbc      	itt	lt
 8019f44:	232d      	movlt	r3, #45	; 0x2d
 8019f46:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8019f4a:	497d      	ldr	r1, [pc, #500]	; (801a140 <_printf_float+0x2b0>)
 8019f4c:	4b7d      	ldr	r3, [pc, #500]	; (801a144 <_printf_float+0x2b4>)
 8019f4e:	e7d5      	b.n	8019efc <_printf_float+0x6c>
 8019f50:	6863      	ldr	r3, [r4, #4]
 8019f52:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8019f56:	9104      	str	r1, [sp, #16]
 8019f58:	1c59      	adds	r1, r3, #1
 8019f5a:	d13c      	bne.n	8019fd6 <_printf_float+0x146>
 8019f5c:	2306      	movs	r3, #6
 8019f5e:	6063      	str	r3, [r4, #4]
 8019f60:	2300      	movs	r3, #0
 8019f62:	9303      	str	r3, [sp, #12]
 8019f64:	ab08      	add	r3, sp, #32
 8019f66:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8019f6a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8019f6e:	ab07      	add	r3, sp, #28
 8019f70:	6861      	ldr	r1, [r4, #4]
 8019f72:	9300      	str	r3, [sp, #0]
 8019f74:	6022      	str	r2, [r4, #0]
 8019f76:	f10d 031b 	add.w	r3, sp, #27
 8019f7a:	4628      	mov	r0, r5
 8019f7c:	f7ff fef6 	bl	8019d6c <__cvt>
 8019f80:	9b04      	ldr	r3, [sp, #16]
 8019f82:	9907      	ldr	r1, [sp, #28]
 8019f84:	2b47      	cmp	r3, #71	; 0x47
 8019f86:	4680      	mov	r8, r0
 8019f88:	d108      	bne.n	8019f9c <_printf_float+0x10c>
 8019f8a:	1cc8      	adds	r0, r1, #3
 8019f8c:	db02      	blt.n	8019f94 <_printf_float+0x104>
 8019f8e:	6863      	ldr	r3, [r4, #4]
 8019f90:	4299      	cmp	r1, r3
 8019f92:	dd41      	ble.n	801a018 <_printf_float+0x188>
 8019f94:	f1a9 0902 	sub.w	r9, r9, #2
 8019f98:	fa5f f989 	uxtb.w	r9, r9
 8019f9c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8019fa0:	d820      	bhi.n	8019fe4 <_printf_float+0x154>
 8019fa2:	3901      	subs	r1, #1
 8019fa4:	464a      	mov	r2, r9
 8019fa6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8019faa:	9107      	str	r1, [sp, #28]
 8019fac:	f7ff ff30 	bl	8019e10 <__exponent>
 8019fb0:	9a08      	ldr	r2, [sp, #32]
 8019fb2:	9004      	str	r0, [sp, #16]
 8019fb4:	1813      	adds	r3, r2, r0
 8019fb6:	2a01      	cmp	r2, #1
 8019fb8:	6123      	str	r3, [r4, #16]
 8019fba:	dc02      	bgt.n	8019fc2 <_printf_float+0x132>
 8019fbc:	6822      	ldr	r2, [r4, #0]
 8019fbe:	07d2      	lsls	r2, r2, #31
 8019fc0:	d501      	bpl.n	8019fc6 <_printf_float+0x136>
 8019fc2:	3301      	adds	r3, #1
 8019fc4:	6123      	str	r3, [r4, #16]
 8019fc6:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8019fca:	2b00      	cmp	r3, #0
 8019fcc:	d0a2      	beq.n	8019f14 <_printf_float+0x84>
 8019fce:	232d      	movs	r3, #45	; 0x2d
 8019fd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019fd4:	e79e      	b.n	8019f14 <_printf_float+0x84>
 8019fd6:	9904      	ldr	r1, [sp, #16]
 8019fd8:	2947      	cmp	r1, #71	; 0x47
 8019fda:	d1c1      	bne.n	8019f60 <_printf_float+0xd0>
 8019fdc:	2b00      	cmp	r3, #0
 8019fde:	d1bf      	bne.n	8019f60 <_printf_float+0xd0>
 8019fe0:	2301      	movs	r3, #1
 8019fe2:	e7bc      	b.n	8019f5e <_printf_float+0xce>
 8019fe4:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8019fe8:	d118      	bne.n	801a01c <_printf_float+0x18c>
 8019fea:	2900      	cmp	r1, #0
 8019fec:	6863      	ldr	r3, [r4, #4]
 8019fee:	dd0b      	ble.n	801a008 <_printf_float+0x178>
 8019ff0:	6121      	str	r1, [r4, #16]
 8019ff2:	b913      	cbnz	r3, 8019ffa <_printf_float+0x16a>
 8019ff4:	6822      	ldr	r2, [r4, #0]
 8019ff6:	07d0      	lsls	r0, r2, #31
 8019ff8:	d502      	bpl.n	801a000 <_printf_float+0x170>
 8019ffa:	3301      	adds	r3, #1
 8019ffc:	440b      	add	r3, r1
 8019ffe:	6123      	str	r3, [r4, #16]
 801a000:	2300      	movs	r3, #0
 801a002:	65a1      	str	r1, [r4, #88]	; 0x58
 801a004:	9304      	str	r3, [sp, #16]
 801a006:	e7de      	b.n	8019fc6 <_printf_float+0x136>
 801a008:	b913      	cbnz	r3, 801a010 <_printf_float+0x180>
 801a00a:	6822      	ldr	r2, [r4, #0]
 801a00c:	07d2      	lsls	r2, r2, #31
 801a00e:	d501      	bpl.n	801a014 <_printf_float+0x184>
 801a010:	3302      	adds	r3, #2
 801a012:	e7f4      	b.n	8019ffe <_printf_float+0x16e>
 801a014:	2301      	movs	r3, #1
 801a016:	e7f2      	b.n	8019ffe <_printf_float+0x16e>
 801a018:	f04f 0967 	mov.w	r9, #103	; 0x67
 801a01c:	9b08      	ldr	r3, [sp, #32]
 801a01e:	4299      	cmp	r1, r3
 801a020:	db05      	blt.n	801a02e <_printf_float+0x19e>
 801a022:	6823      	ldr	r3, [r4, #0]
 801a024:	6121      	str	r1, [r4, #16]
 801a026:	07d8      	lsls	r0, r3, #31
 801a028:	d5ea      	bpl.n	801a000 <_printf_float+0x170>
 801a02a:	1c4b      	adds	r3, r1, #1
 801a02c:	e7e7      	b.n	8019ffe <_printf_float+0x16e>
 801a02e:	2900      	cmp	r1, #0
 801a030:	bfd4      	ite	le
 801a032:	f1c1 0202 	rsble	r2, r1, #2
 801a036:	2201      	movgt	r2, #1
 801a038:	4413      	add	r3, r2
 801a03a:	e7e0      	b.n	8019ffe <_printf_float+0x16e>
 801a03c:	6823      	ldr	r3, [r4, #0]
 801a03e:	055a      	lsls	r2, r3, #21
 801a040:	d407      	bmi.n	801a052 <_printf_float+0x1c2>
 801a042:	6923      	ldr	r3, [r4, #16]
 801a044:	4642      	mov	r2, r8
 801a046:	4631      	mov	r1, r6
 801a048:	4628      	mov	r0, r5
 801a04a:	47b8      	blx	r7
 801a04c:	3001      	adds	r0, #1
 801a04e:	d12a      	bne.n	801a0a6 <_printf_float+0x216>
 801a050:	e76a      	b.n	8019f28 <_printf_float+0x98>
 801a052:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801a056:	f240 80e0 	bls.w	801a21a <_printf_float+0x38a>
 801a05a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801a05e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801a062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a066:	d133      	bne.n	801a0d0 <_printf_float+0x240>
 801a068:	4a37      	ldr	r2, [pc, #220]	; (801a148 <_printf_float+0x2b8>)
 801a06a:	2301      	movs	r3, #1
 801a06c:	4631      	mov	r1, r6
 801a06e:	4628      	mov	r0, r5
 801a070:	47b8      	blx	r7
 801a072:	3001      	adds	r0, #1
 801a074:	f43f af58 	beq.w	8019f28 <_printf_float+0x98>
 801a078:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801a07c:	429a      	cmp	r2, r3
 801a07e:	db02      	blt.n	801a086 <_printf_float+0x1f6>
 801a080:	6823      	ldr	r3, [r4, #0]
 801a082:	07d8      	lsls	r0, r3, #31
 801a084:	d50f      	bpl.n	801a0a6 <_printf_float+0x216>
 801a086:	4653      	mov	r3, sl
 801a088:	465a      	mov	r2, fp
 801a08a:	4631      	mov	r1, r6
 801a08c:	4628      	mov	r0, r5
 801a08e:	47b8      	blx	r7
 801a090:	3001      	adds	r0, #1
 801a092:	f43f af49 	beq.w	8019f28 <_printf_float+0x98>
 801a096:	f04f 0800 	mov.w	r8, #0
 801a09a:	f104 091a 	add.w	r9, r4, #26
 801a09e:	9b08      	ldr	r3, [sp, #32]
 801a0a0:	3b01      	subs	r3, #1
 801a0a2:	4543      	cmp	r3, r8
 801a0a4:	dc09      	bgt.n	801a0ba <_printf_float+0x22a>
 801a0a6:	6823      	ldr	r3, [r4, #0]
 801a0a8:	079b      	lsls	r3, r3, #30
 801a0aa:	f100 8106 	bmi.w	801a2ba <_printf_float+0x42a>
 801a0ae:	68e0      	ldr	r0, [r4, #12]
 801a0b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a0b2:	4298      	cmp	r0, r3
 801a0b4:	bfb8      	it	lt
 801a0b6:	4618      	movlt	r0, r3
 801a0b8:	e738      	b.n	8019f2c <_printf_float+0x9c>
 801a0ba:	2301      	movs	r3, #1
 801a0bc:	464a      	mov	r2, r9
 801a0be:	4631      	mov	r1, r6
 801a0c0:	4628      	mov	r0, r5
 801a0c2:	47b8      	blx	r7
 801a0c4:	3001      	adds	r0, #1
 801a0c6:	f43f af2f 	beq.w	8019f28 <_printf_float+0x98>
 801a0ca:	f108 0801 	add.w	r8, r8, #1
 801a0ce:	e7e6      	b.n	801a09e <_printf_float+0x20e>
 801a0d0:	9b07      	ldr	r3, [sp, #28]
 801a0d2:	2b00      	cmp	r3, #0
 801a0d4:	dc3a      	bgt.n	801a14c <_printf_float+0x2bc>
 801a0d6:	4a1c      	ldr	r2, [pc, #112]	; (801a148 <_printf_float+0x2b8>)
 801a0d8:	2301      	movs	r3, #1
 801a0da:	4631      	mov	r1, r6
 801a0dc:	4628      	mov	r0, r5
 801a0de:	47b8      	blx	r7
 801a0e0:	3001      	adds	r0, #1
 801a0e2:	f43f af21 	beq.w	8019f28 <_printf_float+0x98>
 801a0e6:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801a0ea:	4313      	orrs	r3, r2
 801a0ec:	d102      	bne.n	801a0f4 <_printf_float+0x264>
 801a0ee:	6823      	ldr	r3, [r4, #0]
 801a0f0:	07d9      	lsls	r1, r3, #31
 801a0f2:	d5d8      	bpl.n	801a0a6 <_printf_float+0x216>
 801a0f4:	4653      	mov	r3, sl
 801a0f6:	465a      	mov	r2, fp
 801a0f8:	4631      	mov	r1, r6
 801a0fa:	4628      	mov	r0, r5
 801a0fc:	47b8      	blx	r7
 801a0fe:	3001      	adds	r0, #1
 801a100:	f43f af12 	beq.w	8019f28 <_printf_float+0x98>
 801a104:	f04f 0900 	mov.w	r9, #0
 801a108:	f104 0a1a 	add.w	sl, r4, #26
 801a10c:	9b07      	ldr	r3, [sp, #28]
 801a10e:	425b      	negs	r3, r3
 801a110:	454b      	cmp	r3, r9
 801a112:	dc01      	bgt.n	801a118 <_printf_float+0x288>
 801a114:	9b08      	ldr	r3, [sp, #32]
 801a116:	e795      	b.n	801a044 <_printf_float+0x1b4>
 801a118:	2301      	movs	r3, #1
 801a11a:	4652      	mov	r2, sl
 801a11c:	4631      	mov	r1, r6
 801a11e:	4628      	mov	r0, r5
 801a120:	47b8      	blx	r7
 801a122:	3001      	adds	r0, #1
 801a124:	f43f af00 	beq.w	8019f28 <_printf_float+0x98>
 801a128:	f109 0901 	add.w	r9, r9, #1
 801a12c:	e7ee      	b.n	801a10c <_printf_float+0x27c>
 801a12e:	bf00      	nop
 801a130:	ffffffff 	.word	0xffffffff
 801a134:	7fefffff 	.word	0x7fefffff
 801a138:	0801cbe8 	.word	0x0801cbe8
 801a13c:	0801cbec 	.word	0x0801cbec
 801a140:	0801cbf0 	.word	0x0801cbf0
 801a144:	0801cbf4 	.word	0x0801cbf4
 801a148:	0801cbf8 	.word	0x0801cbf8
 801a14c:	9a08      	ldr	r2, [sp, #32]
 801a14e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a150:	429a      	cmp	r2, r3
 801a152:	bfa8      	it	ge
 801a154:	461a      	movge	r2, r3
 801a156:	2a00      	cmp	r2, #0
 801a158:	4691      	mov	r9, r2
 801a15a:	dc38      	bgt.n	801a1ce <_printf_float+0x33e>
 801a15c:	2300      	movs	r3, #0
 801a15e:	9305      	str	r3, [sp, #20]
 801a160:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a164:	f104 021a 	add.w	r2, r4, #26
 801a168:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a16a:	9905      	ldr	r1, [sp, #20]
 801a16c:	9304      	str	r3, [sp, #16]
 801a16e:	eba3 0309 	sub.w	r3, r3, r9
 801a172:	428b      	cmp	r3, r1
 801a174:	dc33      	bgt.n	801a1de <_printf_float+0x34e>
 801a176:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801a17a:	429a      	cmp	r2, r3
 801a17c:	db3c      	blt.n	801a1f8 <_printf_float+0x368>
 801a17e:	6823      	ldr	r3, [r4, #0]
 801a180:	07da      	lsls	r2, r3, #31
 801a182:	d439      	bmi.n	801a1f8 <_printf_float+0x368>
 801a184:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801a188:	eba2 0903 	sub.w	r9, r2, r3
 801a18c:	9b04      	ldr	r3, [sp, #16]
 801a18e:	1ad2      	subs	r2, r2, r3
 801a190:	4591      	cmp	r9, r2
 801a192:	bfa8      	it	ge
 801a194:	4691      	movge	r9, r2
 801a196:	f1b9 0f00 	cmp.w	r9, #0
 801a19a:	dc35      	bgt.n	801a208 <_printf_float+0x378>
 801a19c:	f04f 0800 	mov.w	r8, #0
 801a1a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a1a4:	f104 0a1a 	add.w	sl, r4, #26
 801a1a8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801a1ac:	1a9b      	subs	r3, r3, r2
 801a1ae:	eba3 0309 	sub.w	r3, r3, r9
 801a1b2:	4543      	cmp	r3, r8
 801a1b4:	f77f af77 	ble.w	801a0a6 <_printf_float+0x216>
 801a1b8:	2301      	movs	r3, #1
 801a1ba:	4652      	mov	r2, sl
 801a1bc:	4631      	mov	r1, r6
 801a1be:	4628      	mov	r0, r5
 801a1c0:	47b8      	blx	r7
 801a1c2:	3001      	adds	r0, #1
 801a1c4:	f43f aeb0 	beq.w	8019f28 <_printf_float+0x98>
 801a1c8:	f108 0801 	add.w	r8, r8, #1
 801a1cc:	e7ec      	b.n	801a1a8 <_printf_float+0x318>
 801a1ce:	4613      	mov	r3, r2
 801a1d0:	4631      	mov	r1, r6
 801a1d2:	4642      	mov	r2, r8
 801a1d4:	4628      	mov	r0, r5
 801a1d6:	47b8      	blx	r7
 801a1d8:	3001      	adds	r0, #1
 801a1da:	d1bf      	bne.n	801a15c <_printf_float+0x2cc>
 801a1dc:	e6a4      	b.n	8019f28 <_printf_float+0x98>
 801a1de:	2301      	movs	r3, #1
 801a1e0:	4631      	mov	r1, r6
 801a1e2:	4628      	mov	r0, r5
 801a1e4:	9204      	str	r2, [sp, #16]
 801a1e6:	47b8      	blx	r7
 801a1e8:	3001      	adds	r0, #1
 801a1ea:	f43f ae9d 	beq.w	8019f28 <_printf_float+0x98>
 801a1ee:	9b05      	ldr	r3, [sp, #20]
 801a1f0:	9a04      	ldr	r2, [sp, #16]
 801a1f2:	3301      	adds	r3, #1
 801a1f4:	9305      	str	r3, [sp, #20]
 801a1f6:	e7b7      	b.n	801a168 <_printf_float+0x2d8>
 801a1f8:	4653      	mov	r3, sl
 801a1fa:	465a      	mov	r2, fp
 801a1fc:	4631      	mov	r1, r6
 801a1fe:	4628      	mov	r0, r5
 801a200:	47b8      	blx	r7
 801a202:	3001      	adds	r0, #1
 801a204:	d1be      	bne.n	801a184 <_printf_float+0x2f4>
 801a206:	e68f      	b.n	8019f28 <_printf_float+0x98>
 801a208:	9a04      	ldr	r2, [sp, #16]
 801a20a:	464b      	mov	r3, r9
 801a20c:	4442      	add	r2, r8
 801a20e:	4631      	mov	r1, r6
 801a210:	4628      	mov	r0, r5
 801a212:	47b8      	blx	r7
 801a214:	3001      	adds	r0, #1
 801a216:	d1c1      	bne.n	801a19c <_printf_float+0x30c>
 801a218:	e686      	b.n	8019f28 <_printf_float+0x98>
 801a21a:	9a08      	ldr	r2, [sp, #32]
 801a21c:	2a01      	cmp	r2, #1
 801a21e:	dc01      	bgt.n	801a224 <_printf_float+0x394>
 801a220:	07db      	lsls	r3, r3, #31
 801a222:	d537      	bpl.n	801a294 <_printf_float+0x404>
 801a224:	2301      	movs	r3, #1
 801a226:	4642      	mov	r2, r8
 801a228:	4631      	mov	r1, r6
 801a22a:	4628      	mov	r0, r5
 801a22c:	47b8      	blx	r7
 801a22e:	3001      	adds	r0, #1
 801a230:	f43f ae7a 	beq.w	8019f28 <_printf_float+0x98>
 801a234:	4653      	mov	r3, sl
 801a236:	465a      	mov	r2, fp
 801a238:	4631      	mov	r1, r6
 801a23a:	4628      	mov	r0, r5
 801a23c:	47b8      	blx	r7
 801a23e:	3001      	adds	r0, #1
 801a240:	f43f ae72 	beq.w	8019f28 <_printf_float+0x98>
 801a244:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801a248:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801a24c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a250:	9b08      	ldr	r3, [sp, #32]
 801a252:	d01a      	beq.n	801a28a <_printf_float+0x3fa>
 801a254:	3b01      	subs	r3, #1
 801a256:	f108 0201 	add.w	r2, r8, #1
 801a25a:	4631      	mov	r1, r6
 801a25c:	4628      	mov	r0, r5
 801a25e:	47b8      	blx	r7
 801a260:	3001      	adds	r0, #1
 801a262:	d10e      	bne.n	801a282 <_printf_float+0x3f2>
 801a264:	e660      	b.n	8019f28 <_printf_float+0x98>
 801a266:	2301      	movs	r3, #1
 801a268:	464a      	mov	r2, r9
 801a26a:	4631      	mov	r1, r6
 801a26c:	4628      	mov	r0, r5
 801a26e:	47b8      	blx	r7
 801a270:	3001      	adds	r0, #1
 801a272:	f43f ae59 	beq.w	8019f28 <_printf_float+0x98>
 801a276:	f108 0801 	add.w	r8, r8, #1
 801a27a:	9b08      	ldr	r3, [sp, #32]
 801a27c:	3b01      	subs	r3, #1
 801a27e:	4543      	cmp	r3, r8
 801a280:	dcf1      	bgt.n	801a266 <_printf_float+0x3d6>
 801a282:	9b04      	ldr	r3, [sp, #16]
 801a284:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801a288:	e6dd      	b.n	801a046 <_printf_float+0x1b6>
 801a28a:	f04f 0800 	mov.w	r8, #0
 801a28e:	f104 091a 	add.w	r9, r4, #26
 801a292:	e7f2      	b.n	801a27a <_printf_float+0x3ea>
 801a294:	2301      	movs	r3, #1
 801a296:	4642      	mov	r2, r8
 801a298:	e7df      	b.n	801a25a <_printf_float+0x3ca>
 801a29a:	2301      	movs	r3, #1
 801a29c:	464a      	mov	r2, r9
 801a29e:	4631      	mov	r1, r6
 801a2a0:	4628      	mov	r0, r5
 801a2a2:	47b8      	blx	r7
 801a2a4:	3001      	adds	r0, #1
 801a2a6:	f43f ae3f 	beq.w	8019f28 <_printf_float+0x98>
 801a2aa:	f108 0801 	add.w	r8, r8, #1
 801a2ae:	68e3      	ldr	r3, [r4, #12]
 801a2b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a2b2:	1a5b      	subs	r3, r3, r1
 801a2b4:	4543      	cmp	r3, r8
 801a2b6:	dcf0      	bgt.n	801a29a <_printf_float+0x40a>
 801a2b8:	e6f9      	b.n	801a0ae <_printf_float+0x21e>
 801a2ba:	f04f 0800 	mov.w	r8, #0
 801a2be:	f104 0919 	add.w	r9, r4, #25
 801a2c2:	e7f4      	b.n	801a2ae <_printf_float+0x41e>

0801a2c4 <_printf_common>:
 801a2c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a2c8:	4616      	mov	r6, r2
 801a2ca:	4699      	mov	r9, r3
 801a2cc:	688a      	ldr	r2, [r1, #8]
 801a2ce:	690b      	ldr	r3, [r1, #16]
 801a2d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a2d4:	4293      	cmp	r3, r2
 801a2d6:	bfb8      	it	lt
 801a2d8:	4613      	movlt	r3, r2
 801a2da:	6033      	str	r3, [r6, #0]
 801a2dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a2e0:	4607      	mov	r7, r0
 801a2e2:	460c      	mov	r4, r1
 801a2e4:	b10a      	cbz	r2, 801a2ea <_printf_common+0x26>
 801a2e6:	3301      	adds	r3, #1
 801a2e8:	6033      	str	r3, [r6, #0]
 801a2ea:	6823      	ldr	r3, [r4, #0]
 801a2ec:	0699      	lsls	r1, r3, #26
 801a2ee:	bf42      	ittt	mi
 801a2f0:	6833      	ldrmi	r3, [r6, #0]
 801a2f2:	3302      	addmi	r3, #2
 801a2f4:	6033      	strmi	r3, [r6, #0]
 801a2f6:	6825      	ldr	r5, [r4, #0]
 801a2f8:	f015 0506 	ands.w	r5, r5, #6
 801a2fc:	d106      	bne.n	801a30c <_printf_common+0x48>
 801a2fe:	f104 0a19 	add.w	sl, r4, #25
 801a302:	68e3      	ldr	r3, [r4, #12]
 801a304:	6832      	ldr	r2, [r6, #0]
 801a306:	1a9b      	subs	r3, r3, r2
 801a308:	42ab      	cmp	r3, r5
 801a30a:	dc26      	bgt.n	801a35a <_printf_common+0x96>
 801a30c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a310:	1e13      	subs	r3, r2, #0
 801a312:	6822      	ldr	r2, [r4, #0]
 801a314:	bf18      	it	ne
 801a316:	2301      	movne	r3, #1
 801a318:	0692      	lsls	r2, r2, #26
 801a31a:	d42b      	bmi.n	801a374 <_printf_common+0xb0>
 801a31c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a320:	4649      	mov	r1, r9
 801a322:	4638      	mov	r0, r7
 801a324:	47c0      	blx	r8
 801a326:	3001      	adds	r0, #1
 801a328:	d01e      	beq.n	801a368 <_printf_common+0xa4>
 801a32a:	6823      	ldr	r3, [r4, #0]
 801a32c:	6922      	ldr	r2, [r4, #16]
 801a32e:	f003 0306 	and.w	r3, r3, #6
 801a332:	2b04      	cmp	r3, #4
 801a334:	bf02      	ittt	eq
 801a336:	68e5      	ldreq	r5, [r4, #12]
 801a338:	6833      	ldreq	r3, [r6, #0]
 801a33a:	1aed      	subeq	r5, r5, r3
 801a33c:	68a3      	ldr	r3, [r4, #8]
 801a33e:	bf0c      	ite	eq
 801a340:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a344:	2500      	movne	r5, #0
 801a346:	4293      	cmp	r3, r2
 801a348:	bfc4      	itt	gt
 801a34a:	1a9b      	subgt	r3, r3, r2
 801a34c:	18ed      	addgt	r5, r5, r3
 801a34e:	2600      	movs	r6, #0
 801a350:	341a      	adds	r4, #26
 801a352:	42b5      	cmp	r5, r6
 801a354:	d11a      	bne.n	801a38c <_printf_common+0xc8>
 801a356:	2000      	movs	r0, #0
 801a358:	e008      	b.n	801a36c <_printf_common+0xa8>
 801a35a:	2301      	movs	r3, #1
 801a35c:	4652      	mov	r2, sl
 801a35e:	4649      	mov	r1, r9
 801a360:	4638      	mov	r0, r7
 801a362:	47c0      	blx	r8
 801a364:	3001      	adds	r0, #1
 801a366:	d103      	bne.n	801a370 <_printf_common+0xac>
 801a368:	f04f 30ff 	mov.w	r0, #4294967295
 801a36c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a370:	3501      	adds	r5, #1
 801a372:	e7c6      	b.n	801a302 <_printf_common+0x3e>
 801a374:	18e1      	adds	r1, r4, r3
 801a376:	1c5a      	adds	r2, r3, #1
 801a378:	2030      	movs	r0, #48	; 0x30
 801a37a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a37e:	4422      	add	r2, r4
 801a380:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a384:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a388:	3302      	adds	r3, #2
 801a38a:	e7c7      	b.n	801a31c <_printf_common+0x58>
 801a38c:	2301      	movs	r3, #1
 801a38e:	4622      	mov	r2, r4
 801a390:	4649      	mov	r1, r9
 801a392:	4638      	mov	r0, r7
 801a394:	47c0      	blx	r8
 801a396:	3001      	adds	r0, #1
 801a398:	d0e6      	beq.n	801a368 <_printf_common+0xa4>
 801a39a:	3601      	adds	r6, #1
 801a39c:	e7d9      	b.n	801a352 <_printf_common+0x8e>
	...

0801a3a0 <_printf_i>:
 801a3a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a3a4:	7e0f      	ldrb	r7, [r1, #24]
 801a3a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a3a8:	2f78      	cmp	r7, #120	; 0x78
 801a3aa:	4691      	mov	r9, r2
 801a3ac:	4680      	mov	r8, r0
 801a3ae:	460c      	mov	r4, r1
 801a3b0:	469a      	mov	sl, r3
 801a3b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801a3b6:	d807      	bhi.n	801a3c8 <_printf_i+0x28>
 801a3b8:	2f62      	cmp	r7, #98	; 0x62
 801a3ba:	d80a      	bhi.n	801a3d2 <_printf_i+0x32>
 801a3bc:	2f00      	cmp	r7, #0
 801a3be:	f000 80d4 	beq.w	801a56a <_printf_i+0x1ca>
 801a3c2:	2f58      	cmp	r7, #88	; 0x58
 801a3c4:	f000 80c0 	beq.w	801a548 <_printf_i+0x1a8>
 801a3c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a3cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a3d0:	e03a      	b.n	801a448 <_printf_i+0xa8>
 801a3d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a3d6:	2b15      	cmp	r3, #21
 801a3d8:	d8f6      	bhi.n	801a3c8 <_printf_i+0x28>
 801a3da:	a101      	add	r1, pc, #4	; (adr r1, 801a3e0 <_printf_i+0x40>)
 801a3dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a3e0:	0801a439 	.word	0x0801a439
 801a3e4:	0801a44d 	.word	0x0801a44d
 801a3e8:	0801a3c9 	.word	0x0801a3c9
 801a3ec:	0801a3c9 	.word	0x0801a3c9
 801a3f0:	0801a3c9 	.word	0x0801a3c9
 801a3f4:	0801a3c9 	.word	0x0801a3c9
 801a3f8:	0801a44d 	.word	0x0801a44d
 801a3fc:	0801a3c9 	.word	0x0801a3c9
 801a400:	0801a3c9 	.word	0x0801a3c9
 801a404:	0801a3c9 	.word	0x0801a3c9
 801a408:	0801a3c9 	.word	0x0801a3c9
 801a40c:	0801a551 	.word	0x0801a551
 801a410:	0801a479 	.word	0x0801a479
 801a414:	0801a50b 	.word	0x0801a50b
 801a418:	0801a3c9 	.word	0x0801a3c9
 801a41c:	0801a3c9 	.word	0x0801a3c9
 801a420:	0801a573 	.word	0x0801a573
 801a424:	0801a3c9 	.word	0x0801a3c9
 801a428:	0801a479 	.word	0x0801a479
 801a42c:	0801a3c9 	.word	0x0801a3c9
 801a430:	0801a3c9 	.word	0x0801a3c9
 801a434:	0801a513 	.word	0x0801a513
 801a438:	682b      	ldr	r3, [r5, #0]
 801a43a:	1d1a      	adds	r2, r3, #4
 801a43c:	681b      	ldr	r3, [r3, #0]
 801a43e:	602a      	str	r2, [r5, #0]
 801a440:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a444:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a448:	2301      	movs	r3, #1
 801a44a:	e09f      	b.n	801a58c <_printf_i+0x1ec>
 801a44c:	6820      	ldr	r0, [r4, #0]
 801a44e:	682b      	ldr	r3, [r5, #0]
 801a450:	0607      	lsls	r7, r0, #24
 801a452:	f103 0104 	add.w	r1, r3, #4
 801a456:	6029      	str	r1, [r5, #0]
 801a458:	d501      	bpl.n	801a45e <_printf_i+0xbe>
 801a45a:	681e      	ldr	r6, [r3, #0]
 801a45c:	e003      	b.n	801a466 <_printf_i+0xc6>
 801a45e:	0646      	lsls	r6, r0, #25
 801a460:	d5fb      	bpl.n	801a45a <_printf_i+0xba>
 801a462:	f9b3 6000 	ldrsh.w	r6, [r3]
 801a466:	2e00      	cmp	r6, #0
 801a468:	da03      	bge.n	801a472 <_printf_i+0xd2>
 801a46a:	232d      	movs	r3, #45	; 0x2d
 801a46c:	4276      	negs	r6, r6
 801a46e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a472:	485a      	ldr	r0, [pc, #360]	; (801a5dc <_printf_i+0x23c>)
 801a474:	230a      	movs	r3, #10
 801a476:	e012      	b.n	801a49e <_printf_i+0xfe>
 801a478:	682b      	ldr	r3, [r5, #0]
 801a47a:	6820      	ldr	r0, [r4, #0]
 801a47c:	1d19      	adds	r1, r3, #4
 801a47e:	6029      	str	r1, [r5, #0]
 801a480:	0605      	lsls	r5, r0, #24
 801a482:	d501      	bpl.n	801a488 <_printf_i+0xe8>
 801a484:	681e      	ldr	r6, [r3, #0]
 801a486:	e002      	b.n	801a48e <_printf_i+0xee>
 801a488:	0641      	lsls	r1, r0, #25
 801a48a:	d5fb      	bpl.n	801a484 <_printf_i+0xe4>
 801a48c:	881e      	ldrh	r6, [r3, #0]
 801a48e:	4853      	ldr	r0, [pc, #332]	; (801a5dc <_printf_i+0x23c>)
 801a490:	2f6f      	cmp	r7, #111	; 0x6f
 801a492:	bf0c      	ite	eq
 801a494:	2308      	moveq	r3, #8
 801a496:	230a      	movne	r3, #10
 801a498:	2100      	movs	r1, #0
 801a49a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a49e:	6865      	ldr	r5, [r4, #4]
 801a4a0:	60a5      	str	r5, [r4, #8]
 801a4a2:	2d00      	cmp	r5, #0
 801a4a4:	bfa2      	ittt	ge
 801a4a6:	6821      	ldrge	r1, [r4, #0]
 801a4a8:	f021 0104 	bicge.w	r1, r1, #4
 801a4ac:	6021      	strge	r1, [r4, #0]
 801a4ae:	b90e      	cbnz	r6, 801a4b4 <_printf_i+0x114>
 801a4b0:	2d00      	cmp	r5, #0
 801a4b2:	d04b      	beq.n	801a54c <_printf_i+0x1ac>
 801a4b4:	4615      	mov	r5, r2
 801a4b6:	fbb6 f1f3 	udiv	r1, r6, r3
 801a4ba:	fb03 6711 	mls	r7, r3, r1, r6
 801a4be:	5dc7      	ldrb	r7, [r0, r7]
 801a4c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801a4c4:	4637      	mov	r7, r6
 801a4c6:	42bb      	cmp	r3, r7
 801a4c8:	460e      	mov	r6, r1
 801a4ca:	d9f4      	bls.n	801a4b6 <_printf_i+0x116>
 801a4cc:	2b08      	cmp	r3, #8
 801a4ce:	d10b      	bne.n	801a4e8 <_printf_i+0x148>
 801a4d0:	6823      	ldr	r3, [r4, #0]
 801a4d2:	07de      	lsls	r6, r3, #31
 801a4d4:	d508      	bpl.n	801a4e8 <_printf_i+0x148>
 801a4d6:	6923      	ldr	r3, [r4, #16]
 801a4d8:	6861      	ldr	r1, [r4, #4]
 801a4da:	4299      	cmp	r1, r3
 801a4dc:	bfde      	ittt	le
 801a4de:	2330      	movle	r3, #48	; 0x30
 801a4e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a4e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 801a4e8:	1b52      	subs	r2, r2, r5
 801a4ea:	6122      	str	r2, [r4, #16]
 801a4ec:	f8cd a000 	str.w	sl, [sp]
 801a4f0:	464b      	mov	r3, r9
 801a4f2:	aa03      	add	r2, sp, #12
 801a4f4:	4621      	mov	r1, r4
 801a4f6:	4640      	mov	r0, r8
 801a4f8:	f7ff fee4 	bl	801a2c4 <_printf_common>
 801a4fc:	3001      	adds	r0, #1
 801a4fe:	d14a      	bne.n	801a596 <_printf_i+0x1f6>
 801a500:	f04f 30ff 	mov.w	r0, #4294967295
 801a504:	b004      	add	sp, #16
 801a506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a50a:	6823      	ldr	r3, [r4, #0]
 801a50c:	f043 0320 	orr.w	r3, r3, #32
 801a510:	6023      	str	r3, [r4, #0]
 801a512:	4833      	ldr	r0, [pc, #204]	; (801a5e0 <_printf_i+0x240>)
 801a514:	2778      	movs	r7, #120	; 0x78
 801a516:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801a51a:	6823      	ldr	r3, [r4, #0]
 801a51c:	6829      	ldr	r1, [r5, #0]
 801a51e:	061f      	lsls	r7, r3, #24
 801a520:	f851 6b04 	ldr.w	r6, [r1], #4
 801a524:	d402      	bmi.n	801a52c <_printf_i+0x18c>
 801a526:	065f      	lsls	r7, r3, #25
 801a528:	bf48      	it	mi
 801a52a:	b2b6      	uxthmi	r6, r6
 801a52c:	07df      	lsls	r7, r3, #31
 801a52e:	bf48      	it	mi
 801a530:	f043 0320 	orrmi.w	r3, r3, #32
 801a534:	6029      	str	r1, [r5, #0]
 801a536:	bf48      	it	mi
 801a538:	6023      	strmi	r3, [r4, #0]
 801a53a:	b91e      	cbnz	r6, 801a544 <_printf_i+0x1a4>
 801a53c:	6823      	ldr	r3, [r4, #0]
 801a53e:	f023 0320 	bic.w	r3, r3, #32
 801a542:	6023      	str	r3, [r4, #0]
 801a544:	2310      	movs	r3, #16
 801a546:	e7a7      	b.n	801a498 <_printf_i+0xf8>
 801a548:	4824      	ldr	r0, [pc, #144]	; (801a5dc <_printf_i+0x23c>)
 801a54a:	e7e4      	b.n	801a516 <_printf_i+0x176>
 801a54c:	4615      	mov	r5, r2
 801a54e:	e7bd      	b.n	801a4cc <_printf_i+0x12c>
 801a550:	682b      	ldr	r3, [r5, #0]
 801a552:	6826      	ldr	r6, [r4, #0]
 801a554:	6961      	ldr	r1, [r4, #20]
 801a556:	1d18      	adds	r0, r3, #4
 801a558:	6028      	str	r0, [r5, #0]
 801a55a:	0635      	lsls	r5, r6, #24
 801a55c:	681b      	ldr	r3, [r3, #0]
 801a55e:	d501      	bpl.n	801a564 <_printf_i+0x1c4>
 801a560:	6019      	str	r1, [r3, #0]
 801a562:	e002      	b.n	801a56a <_printf_i+0x1ca>
 801a564:	0670      	lsls	r0, r6, #25
 801a566:	d5fb      	bpl.n	801a560 <_printf_i+0x1c0>
 801a568:	8019      	strh	r1, [r3, #0]
 801a56a:	2300      	movs	r3, #0
 801a56c:	6123      	str	r3, [r4, #16]
 801a56e:	4615      	mov	r5, r2
 801a570:	e7bc      	b.n	801a4ec <_printf_i+0x14c>
 801a572:	682b      	ldr	r3, [r5, #0]
 801a574:	1d1a      	adds	r2, r3, #4
 801a576:	602a      	str	r2, [r5, #0]
 801a578:	681d      	ldr	r5, [r3, #0]
 801a57a:	6862      	ldr	r2, [r4, #4]
 801a57c:	2100      	movs	r1, #0
 801a57e:	4628      	mov	r0, r5
 801a580:	f7e5 feae 	bl	80002e0 <memchr>
 801a584:	b108      	cbz	r0, 801a58a <_printf_i+0x1ea>
 801a586:	1b40      	subs	r0, r0, r5
 801a588:	6060      	str	r0, [r4, #4]
 801a58a:	6863      	ldr	r3, [r4, #4]
 801a58c:	6123      	str	r3, [r4, #16]
 801a58e:	2300      	movs	r3, #0
 801a590:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a594:	e7aa      	b.n	801a4ec <_printf_i+0x14c>
 801a596:	6923      	ldr	r3, [r4, #16]
 801a598:	462a      	mov	r2, r5
 801a59a:	4649      	mov	r1, r9
 801a59c:	4640      	mov	r0, r8
 801a59e:	47d0      	blx	sl
 801a5a0:	3001      	adds	r0, #1
 801a5a2:	d0ad      	beq.n	801a500 <_printf_i+0x160>
 801a5a4:	6823      	ldr	r3, [r4, #0]
 801a5a6:	079b      	lsls	r3, r3, #30
 801a5a8:	d413      	bmi.n	801a5d2 <_printf_i+0x232>
 801a5aa:	68e0      	ldr	r0, [r4, #12]
 801a5ac:	9b03      	ldr	r3, [sp, #12]
 801a5ae:	4298      	cmp	r0, r3
 801a5b0:	bfb8      	it	lt
 801a5b2:	4618      	movlt	r0, r3
 801a5b4:	e7a6      	b.n	801a504 <_printf_i+0x164>
 801a5b6:	2301      	movs	r3, #1
 801a5b8:	4632      	mov	r2, r6
 801a5ba:	4649      	mov	r1, r9
 801a5bc:	4640      	mov	r0, r8
 801a5be:	47d0      	blx	sl
 801a5c0:	3001      	adds	r0, #1
 801a5c2:	d09d      	beq.n	801a500 <_printf_i+0x160>
 801a5c4:	3501      	adds	r5, #1
 801a5c6:	68e3      	ldr	r3, [r4, #12]
 801a5c8:	9903      	ldr	r1, [sp, #12]
 801a5ca:	1a5b      	subs	r3, r3, r1
 801a5cc:	42ab      	cmp	r3, r5
 801a5ce:	dcf2      	bgt.n	801a5b6 <_printf_i+0x216>
 801a5d0:	e7eb      	b.n	801a5aa <_printf_i+0x20a>
 801a5d2:	2500      	movs	r5, #0
 801a5d4:	f104 0619 	add.w	r6, r4, #25
 801a5d8:	e7f5      	b.n	801a5c6 <_printf_i+0x226>
 801a5da:	bf00      	nop
 801a5dc:	0801cbfa 	.word	0x0801cbfa
 801a5e0:	0801cc0b 	.word	0x0801cc0b

0801a5e4 <std>:
 801a5e4:	2300      	movs	r3, #0
 801a5e6:	b510      	push	{r4, lr}
 801a5e8:	4604      	mov	r4, r0
 801a5ea:	e9c0 3300 	strd	r3, r3, [r0]
 801a5ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a5f2:	6083      	str	r3, [r0, #8]
 801a5f4:	8181      	strh	r1, [r0, #12]
 801a5f6:	6643      	str	r3, [r0, #100]	; 0x64
 801a5f8:	81c2      	strh	r2, [r0, #14]
 801a5fa:	6183      	str	r3, [r0, #24]
 801a5fc:	4619      	mov	r1, r3
 801a5fe:	2208      	movs	r2, #8
 801a600:	305c      	adds	r0, #92	; 0x5c
 801a602:	f000 f906 	bl	801a812 <memset>
 801a606:	4b0d      	ldr	r3, [pc, #52]	; (801a63c <std+0x58>)
 801a608:	6263      	str	r3, [r4, #36]	; 0x24
 801a60a:	4b0d      	ldr	r3, [pc, #52]	; (801a640 <std+0x5c>)
 801a60c:	62a3      	str	r3, [r4, #40]	; 0x28
 801a60e:	4b0d      	ldr	r3, [pc, #52]	; (801a644 <std+0x60>)
 801a610:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a612:	4b0d      	ldr	r3, [pc, #52]	; (801a648 <std+0x64>)
 801a614:	6323      	str	r3, [r4, #48]	; 0x30
 801a616:	4b0d      	ldr	r3, [pc, #52]	; (801a64c <std+0x68>)
 801a618:	6224      	str	r4, [r4, #32]
 801a61a:	429c      	cmp	r4, r3
 801a61c:	d006      	beq.n	801a62c <std+0x48>
 801a61e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801a622:	4294      	cmp	r4, r2
 801a624:	d002      	beq.n	801a62c <std+0x48>
 801a626:	33d0      	adds	r3, #208	; 0xd0
 801a628:	429c      	cmp	r4, r3
 801a62a:	d105      	bne.n	801a638 <std+0x54>
 801a62c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a634:	f000 b96a 	b.w	801a90c <__retarget_lock_init_recursive>
 801a638:	bd10      	pop	{r4, pc}
 801a63a:	bf00      	nop
 801a63c:	0801a78d 	.word	0x0801a78d
 801a640:	0801a7af 	.word	0x0801a7af
 801a644:	0801a7e7 	.word	0x0801a7e7
 801a648:	0801a80b 	.word	0x0801a80b
 801a64c:	2400a59c 	.word	0x2400a59c

0801a650 <stdio_exit_handler>:
 801a650:	4a02      	ldr	r2, [pc, #8]	; (801a65c <stdio_exit_handler+0xc>)
 801a652:	4903      	ldr	r1, [pc, #12]	; (801a660 <stdio_exit_handler+0x10>)
 801a654:	4803      	ldr	r0, [pc, #12]	; (801a664 <stdio_exit_handler+0x14>)
 801a656:	f000 b869 	b.w	801a72c <_fwalk_sglue>
 801a65a:	bf00      	nop
 801a65c:	24000014 	.word	0x24000014
 801a660:	0801c1a5 	.word	0x0801c1a5
 801a664:	24000020 	.word	0x24000020

0801a668 <cleanup_stdio>:
 801a668:	6841      	ldr	r1, [r0, #4]
 801a66a:	4b0c      	ldr	r3, [pc, #48]	; (801a69c <cleanup_stdio+0x34>)
 801a66c:	4299      	cmp	r1, r3
 801a66e:	b510      	push	{r4, lr}
 801a670:	4604      	mov	r4, r0
 801a672:	d001      	beq.n	801a678 <cleanup_stdio+0x10>
 801a674:	f001 fd96 	bl	801c1a4 <_fflush_r>
 801a678:	68a1      	ldr	r1, [r4, #8]
 801a67a:	4b09      	ldr	r3, [pc, #36]	; (801a6a0 <cleanup_stdio+0x38>)
 801a67c:	4299      	cmp	r1, r3
 801a67e:	d002      	beq.n	801a686 <cleanup_stdio+0x1e>
 801a680:	4620      	mov	r0, r4
 801a682:	f001 fd8f 	bl	801c1a4 <_fflush_r>
 801a686:	68e1      	ldr	r1, [r4, #12]
 801a688:	4b06      	ldr	r3, [pc, #24]	; (801a6a4 <cleanup_stdio+0x3c>)
 801a68a:	4299      	cmp	r1, r3
 801a68c:	d004      	beq.n	801a698 <cleanup_stdio+0x30>
 801a68e:	4620      	mov	r0, r4
 801a690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a694:	f001 bd86 	b.w	801c1a4 <_fflush_r>
 801a698:	bd10      	pop	{r4, pc}
 801a69a:	bf00      	nop
 801a69c:	2400a59c 	.word	0x2400a59c
 801a6a0:	2400a604 	.word	0x2400a604
 801a6a4:	2400a66c 	.word	0x2400a66c

0801a6a8 <global_stdio_init.part.0>:
 801a6a8:	b510      	push	{r4, lr}
 801a6aa:	4b0b      	ldr	r3, [pc, #44]	; (801a6d8 <global_stdio_init.part.0+0x30>)
 801a6ac:	4c0b      	ldr	r4, [pc, #44]	; (801a6dc <global_stdio_init.part.0+0x34>)
 801a6ae:	4a0c      	ldr	r2, [pc, #48]	; (801a6e0 <global_stdio_init.part.0+0x38>)
 801a6b0:	601a      	str	r2, [r3, #0]
 801a6b2:	4620      	mov	r0, r4
 801a6b4:	2200      	movs	r2, #0
 801a6b6:	2104      	movs	r1, #4
 801a6b8:	f7ff ff94 	bl	801a5e4 <std>
 801a6bc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801a6c0:	2201      	movs	r2, #1
 801a6c2:	2109      	movs	r1, #9
 801a6c4:	f7ff ff8e 	bl	801a5e4 <std>
 801a6c8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801a6cc:	2202      	movs	r2, #2
 801a6ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a6d2:	2112      	movs	r1, #18
 801a6d4:	f7ff bf86 	b.w	801a5e4 <std>
 801a6d8:	2400a6d4 	.word	0x2400a6d4
 801a6dc:	2400a59c 	.word	0x2400a59c
 801a6e0:	0801a651 	.word	0x0801a651

0801a6e4 <__sfp_lock_acquire>:
 801a6e4:	4801      	ldr	r0, [pc, #4]	; (801a6ec <__sfp_lock_acquire+0x8>)
 801a6e6:	f000 b912 	b.w	801a90e <__retarget_lock_acquire_recursive>
 801a6ea:	bf00      	nop
 801a6ec:	2400a6dd 	.word	0x2400a6dd

0801a6f0 <__sfp_lock_release>:
 801a6f0:	4801      	ldr	r0, [pc, #4]	; (801a6f8 <__sfp_lock_release+0x8>)
 801a6f2:	f000 b90d 	b.w	801a910 <__retarget_lock_release_recursive>
 801a6f6:	bf00      	nop
 801a6f8:	2400a6dd 	.word	0x2400a6dd

0801a6fc <__sinit>:
 801a6fc:	b510      	push	{r4, lr}
 801a6fe:	4604      	mov	r4, r0
 801a700:	f7ff fff0 	bl	801a6e4 <__sfp_lock_acquire>
 801a704:	6a23      	ldr	r3, [r4, #32]
 801a706:	b11b      	cbz	r3, 801a710 <__sinit+0x14>
 801a708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a70c:	f7ff bff0 	b.w	801a6f0 <__sfp_lock_release>
 801a710:	4b04      	ldr	r3, [pc, #16]	; (801a724 <__sinit+0x28>)
 801a712:	6223      	str	r3, [r4, #32]
 801a714:	4b04      	ldr	r3, [pc, #16]	; (801a728 <__sinit+0x2c>)
 801a716:	681b      	ldr	r3, [r3, #0]
 801a718:	2b00      	cmp	r3, #0
 801a71a:	d1f5      	bne.n	801a708 <__sinit+0xc>
 801a71c:	f7ff ffc4 	bl	801a6a8 <global_stdio_init.part.0>
 801a720:	e7f2      	b.n	801a708 <__sinit+0xc>
 801a722:	bf00      	nop
 801a724:	0801a669 	.word	0x0801a669
 801a728:	2400a6d4 	.word	0x2400a6d4

0801a72c <_fwalk_sglue>:
 801a72c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a730:	4607      	mov	r7, r0
 801a732:	4688      	mov	r8, r1
 801a734:	4614      	mov	r4, r2
 801a736:	2600      	movs	r6, #0
 801a738:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a73c:	f1b9 0901 	subs.w	r9, r9, #1
 801a740:	d505      	bpl.n	801a74e <_fwalk_sglue+0x22>
 801a742:	6824      	ldr	r4, [r4, #0]
 801a744:	2c00      	cmp	r4, #0
 801a746:	d1f7      	bne.n	801a738 <_fwalk_sglue+0xc>
 801a748:	4630      	mov	r0, r6
 801a74a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a74e:	89ab      	ldrh	r3, [r5, #12]
 801a750:	2b01      	cmp	r3, #1
 801a752:	d907      	bls.n	801a764 <_fwalk_sglue+0x38>
 801a754:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a758:	3301      	adds	r3, #1
 801a75a:	d003      	beq.n	801a764 <_fwalk_sglue+0x38>
 801a75c:	4629      	mov	r1, r5
 801a75e:	4638      	mov	r0, r7
 801a760:	47c0      	blx	r8
 801a762:	4306      	orrs	r6, r0
 801a764:	3568      	adds	r5, #104	; 0x68
 801a766:	e7e9      	b.n	801a73c <_fwalk_sglue+0x10>

0801a768 <iprintf>:
 801a768:	b40f      	push	{r0, r1, r2, r3}
 801a76a:	b507      	push	{r0, r1, r2, lr}
 801a76c:	4906      	ldr	r1, [pc, #24]	; (801a788 <iprintf+0x20>)
 801a76e:	ab04      	add	r3, sp, #16
 801a770:	6808      	ldr	r0, [r1, #0]
 801a772:	f853 2b04 	ldr.w	r2, [r3], #4
 801a776:	6881      	ldr	r1, [r0, #8]
 801a778:	9301      	str	r3, [sp, #4]
 801a77a:	f001 fb73 	bl	801be64 <_vfiprintf_r>
 801a77e:	b003      	add	sp, #12
 801a780:	f85d eb04 	ldr.w	lr, [sp], #4
 801a784:	b004      	add	sp, #16
 801a786:	4770      	bx	lr
 801a788:	2400006c 	.word	0x2400006c

0801a78c <__sread>:
 801a78c:	b510      	push	{r4, lr}
 801a78e:	460c      	mov	r4, r1
 801a790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a794:	f000 f86c 	bl	801a870 <_read_r>
 801a798:	2800      	cmp	r0, #0
 801a79a:	bfab      	itete	ge
 801a79c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a79e:	89a3      	ldrhlt	r3, [r4, #12]
 801a7a0:	181b      	addge	r3, r3, r0
 801a7a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a7a6:	bfac      	ite	ge
 801a7a8:	6563      	strge	r3, [r4, #84]	; 0x54
 801a7aa:	81a3      	strhlt	r3, [r4, #12]
 801a7ac:	bd10      	pop	{r4, pc}

0801a7ae <__swrite>:
 801a7ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a7b2:	461f      	mov	r7, r3
 801a7b4:	898b      	ldrh	r3, [r1, #12]
 801a7b6:	05db      	lsls	r3, r3, #23
 801a7b8:	4605      	mov	r5, r0
 801a7ba:	460c      	mov	r4, r1
 801a7bc:	4616      	mov	r6, r2
 801a7be:	d505      	bpl.n	801a7cc <__swrite+0x1e>
 801a7c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a7c4:	2302      	movs	r3, #2
 801a7c6:	2200      	movs	r2, #0
 801a7c8:	f000 f840 	bl	801a84c <_lseek_r>
 801a7cc:	89a3      	ldrh	r3, [r4, #12]
 801a7ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a7d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a7d6:	81a3      	strh	r3, [r4, #12]
 801a7d8:	4632      	mov	r2, r6
 801a7da:	463b      	mov	r3, r7
 801a7dc:	4628      	mov	r0, r5
 801a7de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a7e2:	f000 b857 	b.w	801a894 <_write_r>

0801a7e6 <__sseek>:
 801a7e6:	b510      	push	{r4, lr}
 801a7e8:	460c      	mov	r4, r1
 801a7ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a7ee:	f000 f82d 	bl	801a84c <_lseek_r>
 801a7f2:	1c43      	adds	r3, r0, #1
 801a7f4:	89a3      	ldrh	r3, [r4, #12]
 801a7f6:	bf15      	itete	ne
 801a7f8:	6560      	strne	r0, [r4, #84]	; 0x54
 801a7fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a7fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a802:	81a3      	strheq	r3, [r4, #12]
 801a804:	bf18      	it	ne
 801a806:	81a3      	strhne	r3, [r4, #12]
 801a808:	bd10      	pop	{r4, pc}

0801a80a <__sclose>:
 801a80a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a80e:	f000 b80d 	b.w	801a82c <_close_r>

0801a812 <memset>:
 801a812:	4402      	add	r2, r0
 801a814:	4603      	mov	r3, r0
 801a816:	4293      	cmp	r3, r2
 801a818:	d100      	bne.n	801a81c <memset+0xa>
 801a81a:	4770      	bx	lr
 801a81c:	f803 1b01 	strb.w	r1, [r3], #1
 801a820:	e7f9      	b.n	801a816 <memset+0x4>
	...

0801a824 <_localeconv_r>:
 801a824:	4800      	ldr	r0, [pc, #0]	; (801a828 <_localeconv_r+0x4>)
 801a826:	4770      	bx	lr
 801a828:	24000160 	.word	0x24000160

0801a82c <_close_r>:
 801a82c:	b538      	push	{r3, r4, r5, lr}
 801a82e:	4d06      	ldr	r5, [pc, #24]	; (801a848 <_close_r+0x1c>)
 801a830:	2300      	movs	r3, #0
 801a832:	4604      	mov	r4, r0
 801a834:	4608      	mov	r0, r1
 801a836:	602b      	str	r3, [r5, #0]
 801a838:	f7e6 ff3b 	bl	80016b2 <_close>
 801a83c:	1c43      	adds	r3, r0, #1
 801a83e:	d102      	bne.n	801a846 <_close_r+0x1a>
 801a840:	682b      	ldr	r3, [r5, #0]
 801a842:	b103      	cbz	r3, 801a846 <_close_r+0x1a>
 801a844:	6023      	str	r3, [r4, #0]
 801a846:	bd38      	pop	{r3, r4, r5, pc}
 801a848:	2400a6d8 	.word	0x2400a6d8

0801a84c <_lseek_r>:
 801a84c:	b538      	push	{r3, r4, r5, lr}
 801a84e:	4d07      	ldr	r5, [pc, #28]	; (801a86c <_lseek_r+0x20>)
 801a850:	4604      	mov	r4, r0
 801a852:	4608      	mov	r0, r1
 801a854:	4611      	mov	r1, r2
 801a856:	2200      	movs	r2, #0
 801a858:	602a      	str	r2, [r5, #0]
 801a85a:	461a      	mov	r2, r3
 801a85c:	f7e6 ff50 	bl	8001700 <_lseek>
 801a860:	1c43      	adds	r3, r0, #1
 801a862:	d102      	bne.n	801a86a <_lseek_r+0x1e>
 801a864:	682b      	ldr	r3, [r5, #0]
 801a866:	b103      	cbz	r3, 801a86a <_lseek_r+0x1e>
 801a868:	6023      	str	r3, [r4, #0]
 801a86a:	bd38      	pop	{r3, r4, r5, pc}
 801a86c:	2400a6d8 	.word	0x2400a6d8

0801a870 <_read_r>:
 801a870:	b538      	push	{r3, r4, r5, lr}
 801a872:	4d07      	ldr	r5, [pc, #28]	; (801a890 <_read_r+0x20>)
 801a874:	4604      	mov	r4, r0
 801a876:	4608      	mov	r0, r1
 801a878:	4611      	mov	r1, r2
 801a87a:	2200      	movs	r2, #0
 801a87c:	602a      	str	r2, [r5, #0]
 801a87e:	461a      	mov	r2, r3
 801a880:	f7e6 fede 	bl	8001640 <_read>
 801a884:	1c43      	adds	r3, r0, #1
 801a886:	d102      	bne.n	801a88e <_read_r+0x1e>
 801a888:	682b      	ldr	r3, [r5, #0]
 801a88a:	b103      	cbz	r3, 801a88e <_read_r+0x1e>
 801a88c:	6023      	str	r3, [r4, #0]
 801a88e:	bd38      	pop	{r3, r4, r5, pc}
 801a890:	2400a6d8 	.word	0x2400a6d8

0801a894 <_write_r>:
 801a894:	b538      	push	{r3, r4, r5, lr}
 801a896:	4d07      	ldr	r5, [pc, #28]	; (801a8b4 <_write_r+0x20>)
 801a898:	4604      	mov	r4, r0
 801a89a:	4608      	mov	r0, r1
 801a89c:	4611      	mov	r1, r2
 801a89e:	2200      	movs	r2, #0
 801a8a0:	602a      	str	r2, [r5, #0]
 801a8a2:	461a      	mov	r2, r3
 801a8a4:	f7e6 fee9 	bl	800167a <_write>
 801a8a8:	1c43      	adds	r3, r0, #1
 801a8aa:	d102      	bne.n	801a8b2 <_write_r+0x1e>
 801a8ac:	682b      	ldr	r3, [r5, #0]
 801a8ae:	b103      	cbz	r3, 801a8b2 <_write_r+0x1e>
 801a8b0:	6023      	str	r3, [r4, #0]
 801a8b2:	bd38      	pop	{r3, r4, r5, pc}
 801a8b4:	2400a6d8 	.word	0x2400a6d8

0801a8b8 <__errno>:
 801a8b8:	4b01      	ldr	r3, [pc, #4]	; (801a8c0 <__errno+0x8>)
 801a8ba:	6818      	ldr	r0, [r3, #0]
 801a8bc:	4770      	bx	lr
 801a8be:	bf00      	nop
 801a8c0:	2400006c 	.word	0x2400006c

0801a8c4 <__libc_init_array>:
 801a8c4:	b570      	push	{r4, r5, r6, lr}
 801a8c6:	4d0d      	ldr	r5, [pc, #52]	; (801a8fc <__libc_init_array+0x38>)
 801a8c8:	4c0d      	ldr	r4, [pc, #52]	; (801a900 <__libc_init_array+0x3c>)
 801a8ca:	1b64      	subs	r4, r4, r5
 801a8cc:	10a4      	asrs	r4, r4, #2
 801a8ce:	2600      	movs	r6, #0
 801a8d0:	42a6      	cmp	r6, r4
 801a8d2:	d109      	bne.n	801a8e8 <__libc_init_array+0x24>
 801a8d4:	4d0b      	ldr	r5, [pc, #44]	; (801a904 <__libc_init_array+0x40>)
 801a8d6:	4c0c      	ldr	r4, [pc, #48]	; (801a908 <__libc_init_array+0x44>)
 801a8d8:	f001 fe68 	bl	801c5ac <_init>
 801a8dc:	1b64      	subs	r4, r4, r5
 801a8de:	10a4      	asrs	r4, r4, #2
 801a8e0:	2600      	movs	r6, #0
 801a8e2:	42a6      	cmp	r6, r4
 801a8e4:	d105      	bne.n	801a8f2 <__libc_init_array+0x2e>
 801a8e6:	bd70      	pop	{r4, r5, r6, pc}
 801a8e8:	f855 3b04 	ldr.w	r3, [r5], #4
 801a8ec:	4798      	blx	r3
 801a8ee:	3601      	adds	r6, #1
 801a8f0:	e7ee      	b.n	801a8d0 <__libc_init_array+0xc>
 801a8f2:	f855 3b04 	ldr.w	r3, [r5], #4
 801a8f6:	4798      	blx	r3
 801a8f8:	3601      	adds	r6, #1
 801a8fa:	e7f2      	b.n	801a8e2 <__libc_init_array+0x1e>
 801a8fc:	0801cf64 	.word	0x0801cf64
 801a900:	0801cf64 	.word	0x0801cf64
 801a904:	0801cf64 	.word	0x0801cf64
 801a908:	0801cf74 	.word	0x0801cf74

0801a90c <__retarget_lock_init_recursive>:
 801a90c:	4770      	bx	lr

0801a90e <__retarget_lock_acquire_recursive>:
 801a90e:	4770      	bx	lr

0801a910 <__retarget_lock_release_recursive>:
 801a910:	4770      	bx	lr

0801a912 <memcpy>:
 801a912:	440a      	add	r2, r1
 801a914:	4291      	cmp	r1, r2
 801a916:	f100 33ff 	add.w	r3, r0, #4294967295
 801a91a:	d100      	bne.n	801a91e <memcpy+0xc>
 801a91c:	4770      	bx	lr
 801a91e:	b510      	push	{r4, lr}
 801a920:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a924:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a928:	4291      	cmp	r1, r2
 801a92a:	d1f9      	bne.n	801a920 <memcpy+0xe>
 801a92c:	bd10      	pop	{r4, pc}

0801a92e <quorem>:
 801a92e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a932:	6903      	ldr	r3, [r0, #16]
 801a934:	690c      	ldr	r4, [r1, #16]
 801a936:	42a3      	cmp	r3, r4
 801a938:	4607      	mov	r7, r0
 801a93a:	db7e      	blt.n	801aa3a <quorem+0x10c>
 801a93c:	3c01      	subs	r4, #1
 801a93e:	f101 0814 	add.w	r8, r1, #20
 801a942:	f100 0514 	add.w	r5, r0, #20
 801a946:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a94a:	9301      	str	r3, [sp, #4]
 801a94c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801a950:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a954:	3301      	adds	r3, #1
 801a956:	429a      	cmp	r2, r3
 801a958:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801a95c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801a960:	fbb2 f6f3 	udiv	r6, r2, r3
 801a964:	d331      	bcc.n	801a9ca <quorem+0x9c>
 801a966:	f04f 0e00 	mov.w	lr, #0
 801a96a:	4640      	mov	r0, r8
 801a96c:	46ac      	mov	ip, r5
 801a96e:	46f2      	mov	sl, lr
 801a970:	f850 2b04 	ldr.w	r2, [r0], #4
 801a974:	b293      	uxth	r3, r2
 801a976:	fb06 e303 	mla	r3, r6, r3, lr
 801a97a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801a97e:	0c1a      	lsrs	r2, r3, #16
 801a980:	b29b      	uxth	r3, r3
 801a982:	ebaa 0303 	sub.w	r3, sl, r3
 801a986:	f8dc a000 	ldr.w	sl, [ip]
 801a98a:	fa13 f38a 	uxtah	r3, r3, sl
 801a98e:	fb06 220e 	mla	r2, r6, lr, r2
 801a992:	9300      	str	r3, [sp, #0]
 801a994:	9b00      	ldr	r3, [sp, #0]
 801a996:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801a99a:	b292      	uxth	r2, r2
 801a99c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801a9a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a9a4:	f8bd 3000 	ldrh.w	r3, [sp]
 801a9a8:	4581      	cmp	r9, r0
 801a9aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a9ae:	f84c 3b04 	str.w	r3, [ip], #4
 801a9b2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801a9b6:	d2db      	bcs.n	801a970 <quorem+0x42>
 801a9b8:	f855 300b 	ldr.w	r3, [r5, fp]
 801a9bc:	b92b      	cbnz	r3, 801a9ca <quorem+0x9c>
 801a9be:	9b01      	ldr	r3, [sp, #4]
 801a9c0:	3b04      	subs	r3, #4
 801a9c2:	429d      	cmp	r5, r3
 801a9c4:	461a      	mov	r2, r3
 801a9c6:	d32c      	bcc.n	801aa22 <quorem+0xf4>
 801a9c8:	613c      	str	r4, [r7, #16]
 801a9ca:	4638      	mov	r0, r7
 801a9cc:	f001 f920 	bl	801bc10 <__mcmp>
 801a9d0:	2800      	cmp	r0, #0
 801a9d2:	db22      	blt.n	801aa1a <quorem+0xec>
 801a9d4:	3601      	adds	r6, #1
 801a9d6:	4629      	mov	r1, r5
 801a9d8:	2000      	movs	r0, #0
 801a9da:	f858 2b04 	ldr.w	r2, [r8], #4
 801a9de:	f8d1 c000 	ldr.w	ip, [r1]
 801a9e2:	b293      	uxth	r3, r2
 801a9e4:	1ac3      	subs	r3, r0, r3
 801a9e6:	0c12      	lsrs	r2, r2, #16
 801a9e8:	fa13 f38c 	uxtah	r3, r3, ip
 801a9ec:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801a9f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a9f4:	b29b      	uxth	r3, r3
 801a9f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a9fa:	45c1      	cmp	r9, r8
 801a9fc:	f841 3b04 	str.w	r3, [r1], #4
 801aa00:	ea4f 4022 	mov.w	r0, r2, asr #16
 801aa04:	d2e9      	bcs.n	801a9da <quorem+0xac>
 801aa06:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801aa0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801aa0e:	b922      	cbnz	r2, 801aa1a <quorem+0xec>
 801aa10:	3b04      	subs	r3, #4
 801aa12:	429d      	cmp	r5, r3
 801aa14:	461a      	mov	r2, r3
 801aa16:	d30a      	bcc.n	801aa2e <quorem+0x100>
 801aa18:	613c      	str	r4, [r7, #16]
 801aa1a:	4630      	mov	r0, r6
 801aa1c:	b003      	add	sp, #12
 801aa1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa22:	6812      	ldr	r2, [r2, #0]
 801aa24:	3b04      	subs	r3, #4
 801aa26:	2a00      	cmp	r2, #0
 801aa28:	d1ce      	bne.n	801a9c8 <quorem+0x9a>
 801aa2a:	3c01      	subs	r4, #1
 801aa2c:	e7c9      	b.n	801a9c2 <quorem+0x94>
 801aa2e:	6812      	ldr	r2, [r2, #0]
 801aa30:	3b04      	subs	r3, #4
 801aa32:	2a00      	cmp	r2, #0
 801aa34:	d1f0      	bne.n	801aa18 <quorem+0xea>
 801aa36:	3c01      	subs	r4, #1
 801aa38:	e7eb      	b.n	801aa12 <quorem+0xe4>
 801aa3a:	2000      	movs	r0, #0
 801aa3c:	e7ee      	b.n	801aa1c <quorem+0xee>
	...

0801aa40 <_dtoa_r>:
 801aa40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa44:	ed2d 8b02 	vpush	{d8}
 801aa48:	69c5      	ldr	r5, [r0, #28]
 801aa4a:	b091      	sub	sp, #68	; 0x44
 801aa4c:	ed8d 0b02 	vstr	d0, [sp, #8]
 801aa50:	ec59 8b10 	vmov	r8, r9, d0
 801aa54:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801aa56:	9106      	str	r1, [sp, #24]
 801aa58:	4606      	mov	r6, r0
 801aa5a:	9208      	str	r2, [sp, #32]
 801aa5c:	930c      	str	r3, [sp, #48]	; 0x30
 801aa5e:	b975      	cbnz	r5, 801aa7e <_dtoa_r+0x3e>
 801aa60:	2010      	movs	r0, #16
 801aa62:	f000 fda5 	bl	801b5b0 <malloc>
 801aa66:	4602      	mov	r2, r0
 801aa68:	61f0      	str	r0, [r6, #28]
 801aa6a:	b920      	cbnz	r0, 801aa76 <_dtoa_r+0x36>
 801aa6c:	4ba6      	ldr	r3, [pc, #664]	; (801ad08 <_dtoa_r+0x2c8>)
 801aa6e:	21ef      	movs	r1, #239	; 0xef
 801aa70:	48a6      	ldr	r0, [pc, #664]	; (801ad0c <_dtoa_r+0x2cc>)
 801aa72:	f001 fc65 	bl	801c340 <__assert_func>
 801aa76:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801aa7a:	6005      	str	r5, [r0, #0]
 801aa7c:	60c5      	str	r5, [r0, #12]
 801aa7e:	69f3      	ldr	r3, [r6, #28]
 801aa80:	6819      	ldr	r1, [r3, #0]
 801aa82:	b151      	cbz	r1, 801aa9a <_dtoa_r+0x5a>
 801aa84:	685a      	ldr	r2, [r3, #4]
 801aa86:	604a      	str	r2, [r1, #4]
 801aa88:	2301      	movs	r3, #1
 801aa8a:	4093      	lsls	r3, r2
 801aa8c:	608b      	str	r3, [r1, #8]
 801aa8e:	4630      	mov	r0, r6
 801aa90:	f000 fe82 	bl	801b798 <_Bfree>
 801aa94:	69f3      	ldr	r3, [r6, #28]
 801aa96:	2200      	movs	r2, #0
 801aa98:	601a      	str	r2, [r3, #0]
 801aa9a:	f1b9 0300 	subs.w	r3, r9, #0
 801aa9e:	bfbb      	ittet	lt
 801aaa0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801aaa4:	9303      	strlt	r3, [sp, #12]
 801aaa6:	2300      	movge	r3, #0
 801aaa8:	2201      	movlt	r2, #1
 801aaaa:	bfac      	ite	ge
 801aaac:	6023      	strge	r3, [r4, #0]
 801aaae:	6022      	strlt	r2, [r4, #0]
 801aab0:	4b97      	ldr	r3, [pc, #604]	; (801ad10 <_dtoa_r+0x2d0>)
 801aab2:	9c03      	ldr	r4, [sp, #12]
 801aab4:	43a3      	bics	r3, r4
 801aab6:	d11c      	bne.n	801aaf2 <_dtoa_r+0xb2>
 801aab8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801aaba:	f242 730f 	movw	r3, #9999	; 0x270f
 801aabe:	6013      	str	r3, [r2, #0]
 801aac0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801aac4:	ea53 0308 	orrs.w	r3, r3, r8
 801aac8:	f000 84fb 	beq.w	801b4c2 <_dtoa_r+0xa82>
 801aacc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801aace:	b963      	cbnz	r3, 801aaea <_dtoa_r+0xaa>
 801aad0:	4b90      	ldr	r3, [pc, #576]	; (801ad14 <_dtoa_r+0x2d4>)
 801aad2:	e020      	b.n	801ab16 <_dtoa_r+0xd6>
 801aad4:	4b90      	ldr	r3, [pc, #576]	; (801ad18 <_dtoa_r+0x2d8>)
 801aad6:	9301      	str	r3, [sp, #4]
 801aad8:	3308      	adds	r3, #8
 801aada:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801aadc:	6013      	str	r3, [r2, #0]
 801aade:	9801      	ldr	r0, [sp, #4]
 801aae0:	b011      	add	sp, #68	; 0x44
 801aae2:	ecbd 8b02 	vpop	{d8}
 801aae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aaea:	4b8a      	ldr	r3, [pc, #552]	; (801ad14 <_dtoa_r+0x2d4>)
 801aaec:	9301      	str	r3, [sp, #4]
 801aaee:	3303      	adds	r3, #3
 801aaf0:	e7f3      	b.n	801aada <_dtoa_r+0x9a>
 801aaf2:	ed9d 8b02 	vldr	d8, [sp, #8]
 801aaf6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801aafa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aafe:	d10c      	bne.n	801ab1a <_dtoa_r+0xda>
 801ab00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ab02:	2301      	movs	r3, #1
 801ab04:	6013      	str	r3, [r2, #0]
 801ab06:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ab08:	2b00      	cmp	r3, #0
 801ab0a:	f000 84d7 	beq.w	801b4bc <_dtoa_r+0xa7c>
 801ab0e:	4b83      	ldr	r3, [pc, #524]	; (801ad1c <_dtoa_r+0x2dc>)
 801ab10:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801ab12:	6013      	str	r3, [r2, #0]
 801ab14:	3b01      	subs	r3, #1
 801ab16:	9301      	str	r3, [sp, #4]
 801ab18:	e7e1      	b.n	801aade <_dtoa_r+0x9e>
 801ab1a:	aa0e      	add	r2, sp, #56	; 0x38
 801ab1c:	a90f      	add	r1, sp, #60	; 0x3c
 801ab1e:	4630      	mov	r0, r6
 801ab20:	eeb0 0b48 	vmov.f64	d0, d8
 801ab24:	f001 f91a 	bl	801bd5c <__d2b>
 801ab28:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801ab2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ab2e:	4605      	mov	r5, r0
 801ab30:	2b00      	cmp	r3, #0
 801ab32:	d046      	beq.n	801abc2 <_dtoa_r+0x182>
 801ab34:	eeb0 7b48 	vmov.f64	d7, d8
 801ab38:	ee18 1a90 	vmov	r1, s17
 801ab3c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801ab40:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 801ab44:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801ab48:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801ab4c:	2000      	movs	r0, #0
 801ab4e:	ee07 1a90 	vmov	s15, r1
 801ab52:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 801ab56:	ed9f 5b66 	vldr	d5, [pc, #408]	; 801acf0 <_dtoa_r+0x2b0>
 801ab5a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801ab5e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 801acf8 <_dtoa_r+0x2b8>
 801ab62:	eea7 6b05 	vfma.f64	d6, d7, d5
 801ab66:	ed9f 5b66 	vldr	d5, [pc, #408]	; 801ad00 <_dtoa_r+0x2c0>
 801ab6a:	ee07 3a90 	vmov	s15, r3
 801ab6e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801ab72:	eeb0 7b46 	vmov.f64	d7, d6
 801ab76:	eea4 7b05 	vfma.f64	d7, d4, d5
 801ab7a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801ab7e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801ab82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab86:	ee16 ba90 	vmov	fp, s13
 801ab8a:	9009      	str	r0, [sp, #36]	; 0x24
 801ab8c:	d508      	bpl.n	801aba0 <_dtoa_r+0x160>
 801ab8e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801ab92:	eeb4 6b47 	vcmp.f64	d6, d7
 801ab96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab9a:	bf18      	it	ne
 801ab9c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801aba0:	f1bb 0f16 	cmp.w	fp, #22
 801aba4:	d82b      	bhi.n	801abfe <_dtoa_r+0x1be>
 801aba6:	495e      	ldr	r1, [pc, #376]	; (801ad20 <_dtoa_r+0x2e0>)
 801aba8:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 801abac:	ed91 7b00 	vldr	d7, [r1]
 801abb0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801abb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801abb8:	d501      	bpl.n	801abbe <_dtoa_r+0x17e>
 801abba:	f10b 3bff 	add.w	fp, fp, #4294967295
 801abbe:	2100      	movs	r1, #0
 801abc0:	e01e      	b.n	801ac00 <_dtoa_r+0x1c0>
 801abc2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801abc4:	4413      	add	r3, r2
 801abc6:	f203 4132 	addw	r1, r3, #1074	; 0x432
 801abca:	2920      	cmp	r1, #32
 801abcc:	bfc1      	itttt	gt
 801abce:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 801abd2:	408c      	lslgt	r4, r1
 801abd4:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 801abd8:	fa28 f101 	lsrgt.w	r1, r8, r1
 801abdc:	bfd6      	itet	le
 801abde:	f1c1 0120 	rsble	r1, r1, #32
 801abe2:	4321      	orrgt	r1, r4
 801abe4:	fa08 f101 	lslle.w	r1, r8, r1
 801abe8:	ee07 1a90 	vmov	s15, r1
 801abec:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801abf0:	3b01      	subs	r3, #1
 801abf2:	ee17 1a90 	vmov	r1, s15
 801abf6:	2001      	movs	r0, #1
 801abf8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801abfc:	e7a7      	b.n	801ab4e <_dtoa_r+0x10e>
 801abfe:	2101      	movs	r1, #1
 801ac00:	1ad2      	subs	r2, r2, r3
 801ac02:	1e53      	subs	r3, r2, #1
 801ac04:	9305      	str	r3, [sp, #20]
 801ac06:	bf45      	ittet	mi
 801ac08:	f1c2 0301 	rsbmi	r3, r2, #1
 801ac0c:	9304      	strmi	r3, [sp, #16]
 801ac0e:	2300      	movpl	r3, #0
 801ac10:	2300      	movmi	r3, #0
 801ac12:	bf4c      	ite	mi
 801ac14:	9305      	strmi	r3, [sp, #20]
 801ac16:	9304      	strpl	r3, [sp, #16]
 801ac18:	f1bb 0f00 	cmp.w	fp, #0
 801ac1c:	910b      	str	r1, [sp, #44]	; 0x2c
 801ac1e:	db18      	blt.n	801ac52 <_dtoa_r+0x212>
 801ac20:	9b05      	ldr	r3, [sp, #20]
 801ac22:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801ac26:	445b      	add	r3, fp
 801ac28:	9305      	str	r3, [sp, #20]
 801ac2a:	2300      	movs	r3, #0
 801ac2c:	9a06      	ldr	r2, [sp, #24]
 801ac2e:	2a09      	cmp	r2, #9
 801ac30:	d848      	bhi.n	801acc4 <_dtoa_r+0x284>
 801ac32:	2a05      	cmp	r2, #5
 801ac34:	bfc4      	itt	gt
 801ac36:	3a04      	subgt	r2, #4
 801ac38:	9206      	strgt	r2, [sp, #24]
 801ac3a:	9a06      	ldr	r2, [sp, #24]
 801ac3c:	f1a2 0202 	sub.w	r2, r2, #2
 801ac40:	bfcc      	ite	gt
 801ac42:	2400      	movgt	r4, #0
 801ac44:	2401      	movle	r4, #1
 801ac46:	2a03      	cmp	r2, #3
 801ac48:	d847      	bhi.n	801acda <_dtoa_r+0x29a>
 801ac4a:	e8df f002 	tbb	[pc, r2]
 801ac4e:	2d0b      	.short	0x2d0b
 801ac50:	392b      	.short	0x392b
 801ac52:	9b04      	ldr	r3, [sp, #16]
 801ac54:	2200      	movs	r2, #0
 801ac56:	eba3 030b 	sub.w	r3, r3, fp
 801ac5a:	9304      	str	r3, [sp, #16]
 801ac5c:	920a      	str	r2, [sp, #40]	; 0x28
 801ac5e:	f1cb 0300 	rsb	r3, fp, #0
 801ac62:	e7e3      	b.n	801ac2c <_dtoa_r+0x1ec>
 801ac64:	2200      	movs	r2, #0
 801ac66:	9207      	str	r2, [sp, #28]
 801ac68:	9a08      	ldr	r2, [sp, #32]
 801ac6a:	2a00      	cmp	r2, #0
 801ac6c:	dc38      	bgt.n	801ace0 <_dtoa_r+0x2a0>
 801ac6e:	f04f 0a01 	mov.w	sl, #1
 801ac72:	46d1      	mov	r9, sl
 801ac74:	4652      	mov	r2, sl
 801ac76:	f8cd a020 	str.w	sl, [sp, #32]
 801ac7a:	69f7      	ldr	r7, [r6, #28]
 801ac7c:	2100      	movs	r1, #0
 801ac7e:	2004      	movs	r0, #4
 801ac80:	f100 0c14 	add.w	ip, r0, #20
 801ac84:	4594      	cmp	ip, r2
 801ac86:	d930      	bls.n	801acea <_dtoa_r+0x2aa>
 801ac88:	6079      	str	r1, [r7, #4]
 801ac8a:	4630      	mov	r0, r6
 801ac8c:	930d      	str	r3, [sp, #52]	; 0x34
 801ac8e:	f000 fd43 	bl	801b718 <_Balloc>
 801ac92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ac94:	9001      	str	r0, [sp, #4]
 801ac96:	4602      	mov	r2, r0
 801ac98:	2800      	cmp	r0, #0
 801ac9a:	d145      	bne.n	801ad28 <_dtoa_r+0x2e8>
 801ac9c:	4b21      	ldr	r3, [pc, #132]	; (801ad24 <_dtoa_r+0x2e4>)
 801ac9e:	f240 11af 	movw	r1, #431	; 0x1af
 801aca2:	e6e5      	b.n	801aa70 <_dtoa_r+0x30>
 801aca4:	2201      	movs	r2, #1
 801aca6:	e7de      	b.n	801ac66 <_dtoa_r+0x226>
 801aca8:	2200      	movs	r2, #0
 801acaa:	9207      	str	r2, [sp, #28]
 801acac:	9a08      	ldr	r2, [sp, #32]
 801acae:	eb0b 0a02 	add.w	sl, fp, r2
 801acb2:	f10a 0901 	add.w	r9, sl, #1
 801acb6:	464a      	mov	r2, r9
 801acb8:	2a01      	cmp	r2, #1
 801acba:	bfb8      	it	lt
 801acbc:	2201      	movlt	r2, #1
 801acbe:	e7dc      	b.n	801ac7a <_dtoa_r+0x23a>
 801acc0:	2201      	movs	r2, #1
 801acc2:	e7f2      	b.n	801acaa <_dtoa_r+0x26a>
 801acc4:	2401      	movs	r4, #1
 801acc6:	2200      	movs	r2, #0
 801acc8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801accc:	f04f 3aff 	mov.w	sl, #4294967295
 801acd0:	2100      	movs	r1, #0
 801acd2:	46d1      	mov	r9, sl
 801acd4:	2212      	movs	r2, #18
 801acd6:	9108      	str	r1, [sp, #32]
 801acd8:	e7cf      	b.n	801ac7a <_dtoa_r+0x23a>
 801acda:	2201      	movs	r2, #1
 801acdc:	9207      	str	r2, [sp, #28]
 801acde:	e7f5      	b.n	801accc <_dtoa_r+0x28c>
 801ace0:	f8dd a020 	ldr.w	sl, [sp, #32]
 801ace4:	46d1      	mov	r9, sl
 801ace6:	4652      	mov	r2, sl
 801ace8:	e7c7      	b.n	801ac7a <_dtoa_r+0x23a>
 801acea:	3101      	adds	r1, #1
 801acec:	0040      	lsls	r0, r0, #1
 801acee:	e7c7      	b.n	801ac80 <_dtoa_r+0x240>
 801acf0:	636f4361 	.word	0x636f4361
 801acf4:	3fd287a7 	.word	0x3fd287a7
 801acf8:	8b60c8b3 	.word	0x8b60c8b3
 801acfc:	3fc68a28 	.word	0x3fc68a28
 801ad00:	509f79fb 	.word	0x509f79fb
 801ad04:	3fd34413 	.word	0x3fd34413
 801ad08:	0801cc29 	.word	0x0801cc29
 801ad0c:	0801cc40 	.word	0x0801cc40
 801ad10:	7ff00000 	.word	0x7ff00000
 801ad14:	0801cc25 	.word	0x0801cc25
 801ad18:	0801cc1c 	.word	0x0801cc1c
 801ad1c:	0801cbf9 	.word	0x0801cbf9
 801ad20:	0801cd30 	.word	0x0801cd30
 801ad24:	0801cc98 	.word	0x0801cc98
 801ad28:	69f2      	ldr	r2, [r6, #28]
 801ad2a:	9901      	ldr	r1, [sp, #4]
 801ad2c:	6011      	str	r1, [r2, #0]
 801ad2e:	f1b9 0f0e 	cmp.w	r9, #14
 801ad32:	d86c      	bhi.n	801ae0e <_dtoa_r+0x3ce>
 801ad34:	2c00      	cmp	r4, #0
 801ad36:	d06a      	beq.n	801ae0e <_dtoa_r+0x3ce>
 801ad38:	f1bb 0f00 	cmp.w	fp, #0
 801ad3c:	f340 80a0 	ble.w	801ae80 <_dtoa_r+0x440>
 801ad40:	4ac1      	ldr	r2, [pc, #772]	; (801b048 <_dtoa_r+0x608>)
 801ad42:	f00b 010f 	and.w	r1, fp, #15
 801ad46:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801ad4a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801ad4e:	ed92 7b00 	vldr	d7, [r2]
 801ad52:	ea4f 122b 	mov.w	r2, fp, asr #4
 801ad56:	f000 8087 	beq.w	801ae68 <_dtoa_r+0x428>
 801ad5a:	49bc      	ldr	r1, [pc, #752]	; (801b04c <_dtoa_r+0x60c>)
 801ad5c:	ed91 6b08 	vldr	d6, [r1, #32]
 801ad60:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801ad64:	ed8d 6b02 	vstr	d6, [sp, #8]
 801ad68:	f002 020f 	and.w	r2, r2, #15
 801ad6c:	2103      	movs	r1, #3
 801ad6e:	48b7      	ldr	r0, [pc, #732]	; (801b04c <_dtoa_r+0x60c>)
 801ad70:	2a00      	cmp	r2, #0
 801ad72:	d17b      	bne.n	801ae6c <_dtoa_r+0x42c>
 801ad74:	ed9d 6b02 	vldr	d6, [sp, #8]
 801ad78:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801ad7c:	ed8d 7b02 	vstr	d7, [sp, #8]
 801ad80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ad82:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ad86:	2a00      	cmp	r2, #0
 801ad88:	f000 80a0 	beq.w	801aecc <_dtoa_r+0x48c>
 801ad8c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801ad90:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801ad94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ad98:	f140 8098 	bpl.w	801aecc <_dtoa_r+0x48c>
 801ad9c:	f1b9 0f00 	cmp.w	r9, #0
 801ada0:	f000 8094 	beq.w	801aecc <_dtoa_r+0x48c>
 801ada4:	f1ba 0f00 	cmp.w	sl, #0
 801ada8:	dd2f      	ble.n	801ae0a <_dtoa_r+0x3ca>
 801adaa:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801adae:	ee27 7b06 	vmul.f64	d7, d7, d6
 801adb2:	ed8d 7b02 	vstr	d7, [sp, #8]
 801adb6:	f10b 32ff 	add.w	r2, fp, #4294967295
 801adba:	3101      	adds	r1, #1
 801adbc:	4654      	mov	r4, sl
 801adbe:	ed9d 6b02 	vldr	d6, [sp, #8]
 801adc2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801adc6:	ee07 1a90 	vmov	s15, r1
 801adca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801adce:	eea7 5b06 	vfma.f64	d5, d7, d6
 801add2:	ee15 7a90 	vmov	r7, s11
 801add6:	ec51 0b15 	vmov	r0, r1, d5
 801adda:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 801adde:	2c00      	cmp	r4, #0
 801ade0:	d177      	bne.n	801aed2 <_dtoa_r+0x492>
 801ade2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801ade6:	ee36 6b47 	vsub.f64	d6, d6, d7
 801adea:	ec41 0b17 	vmov	d7, r0, r1
 801adee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801adf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801adf6:	f300 826a 	bgt.w	801b2ce <_dtoa_r+0x88e>
 801adfa:	eeb1 7b47 	vneg.f64	d7, d7
 801adfe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801ae02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae06:	f100 8260 	bmi.w	801b2ca <_dtoa_r+0x88a>
 801ae0a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801ae0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ae10:	2a00      	cmp	r2, #0
 801ae12:	f2c0 811d 	blt.w	801b050 <_dtoa_r+0x610>
 801ae16:	f1bb 0f0e 	cmp.w	fp, #14
 801ae1a:	f300 8119 	bgt.w	801b050 <_dtoa_r+0x610>
 801ae1e:	4b8a      	ldr	r3, [pc, #552]	; (801b048 <_dtoa_r+0x608>)
 801ae20:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801ae24:	ed93 6b00 	vldr	d6, [r3]
 801ae28:	9b08      	ldr	r3, [sp, #32]
 801ae2a:	2b00      	cmp	r3, #0
 801ae2c:	f280 80b7 	bge.w	801af9e <_dtoa_r+0x55e>
 801ae30:	f1b9 0f00 	cmp.w	r9, #0
 801ae34:	f300 80b3 	bgt.w	801af9e <_dtoa_r+0x55e>
 801ae38:	f040 8246 	bne.w	801b2c8 <_dtoa_r+0x888>
 801ae3c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801ae40:	ee26 6b07 	vmul.f64	d6, d6, d7
 801ae44:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ae48:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801ae4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae50:	464c      	mov	r4, r9
 801ae52:	464f      	mov	r7, r9
 801ae54:	f280 821c 	bge.w	801b290 <_dtoa_r+0x850>
 801ae58:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801ae5c:	2331      	movs	r3, #49	; 0x31
 801ae5e:	f808 3b01 	strb.w	r3, [r8], #1
 801ae62:	f10b 0b01 	add.w	fp, fp, #1
 801ae66:	e218      	b.n	801b29a <_dtoa_r+0x85a>
 801ae68:	2102      	movs	r1, #2
 801ae6a:	e780      	b.n	801ad6e <_dtoa_r+0x32e>
 801ae6c:	07d4      	lsls	r4, r2, #31
 801ae6e:	d504      	bpl.n	801ae7a <_dtoa_r+0x43a>
 801ae70:	ed90 6b00 	vldr	d6, [r0]
 801ae74:	3101      	adds	r1, #1
 801ae76:	ee27 7b06 	vmul.f64	d7, d7, d6
 801ae7a:	1052      	asrs	r2, r2, #1
 801ae7c:	3008      	adds	r0, #8
 801ae7e:	e777      	b.n	801ad70 <_dtoa_r+0x330>
 801ae80:	d022      	beq.n	801aec8 <_dtoa_r+0x488>
 801ae82:	f1cb 0200 	rsb	r2, fp, #0
 801ae86:	4970      	ldr	r1, [pc, #448]	; (801b048 <_dtoa_r+0x608>)
 801ae88:	f002 000f 	and.w	r0, r2, #15
 801ae8c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801ae90:	ed91 7b00 	vldr	d7, [r1]
 801ae94:	ee28 7b07 	vmul.f64	d7, d8, d7
 801ae98:	ed8d 7b02 	vstr	d7, [sp, #8]
 801ae9c:	486b      	ldr	r0, [pc, #428]	; (801b04c <_dtoa_r+0x60c>)
 801ae9e:	1112      	asrs	r2, r2, #4
 801aea0:	2400      	movs	r4, #0
 801aea2:	2102      	movs	r1, #2
 801aea4:	b92a      	cbnz	r2, 801aeb2 <_dtoa_r+0x472>
 801aea6:	2c00      	cmp	r4, #0
 801aea8:	f43f af6a 	beq.w	801ad80 <_dtoa_r+0x340>
 801aeac:	ed8d 7b02 	vstr	d7, [sp, #8]
 801aeb0:	e766      	b.n	801ad80 <_dtoa_r+0x340>
 801aeb2:	07d7      	lsls	r7, r2, #31
 801aeb4:	d505      	bpl.n	801aec2 <_dtoa_r+0x482>
 801aeb6:	ed90 6b00 	vldr	d6, [r0]
 801aeba:	3101      	adds	r1, #1
 801aebc:	2401      	movs	r4, #1
 801aebe:	ee27 7b06 	vmul.f64	d7, d7, d6
 801aec2:	1052      	asrs	r2, r2, #1
 801aec4:	3008      	adds	r0, #8
 801aec6:	e7ed      	b.n	801aea4 <_dtoa_r+0x464>
 801aec8:	2102      	movs	r1, #2
 801aeca:	e759      	b.n	801ad80 <_dtoa_r+0x340>
 801aecc:	465a      	mov	r2, fp
 801aece:	464c      	mov	r4, r9
 801aed0:	e775      	b.n	801adbe <_dtoa_r+0x37e>
 801aed2:	ec41 0b17 	vmov	d7, r0, r1
 801aed6:	495c      	ldr	r1, [pc, #368]	; (801b048 <_dtoa_r+0x608>)
 801aed8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 801aedc:	ed11 4b02 	vldr	d4, [r1, #-8]
 801aee0:	9901      	ldr	r1, [sp, #4]
 801aee2:	440c      	add	r4, r1
 801aee4:	9907      	ldr	r1, [sp, #28]
 801aee6:	b351      	cbz	r1, 801af3e <_dtoa_r+0x4fe>
 801aee8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801aeec:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801aef0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801aef4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801aef8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801aefc:	ee35 7b47 	vsub.f64	d7, d5, d7
 801af00:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801af04:	ee14 1a90 	vmov	r1, s9
 801af08:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801af0c:	3130      	adds	r1, #48	; 0x30
 801af0e:	ee36 6b45 	vsub.f64	d6, d6, d5
 801af12:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801af16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af1a:	f808 1b01 	strb.w	r1, [r8], #1
 801af1e:	d439      	bmi.n	801af94 <_dtoa_r+0x554>
 801af20:	ee32 5b46 	vsub.f64	d5, d2, d6
 801af24:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801af28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af2c:	d472      	bmi.n	801b014 <_dtoa_r+0x5d4>
 801af2e:	45a0      	cmp	r8, r4
 801af30:	f43f af6b 	beq.w	801ae0a <_dtoa_r+0x3ca>
 801af34:	ee27 7b03 	vmul.f64	d7, d7, d3
 801af38:	ee26 6b03 	vmul.f64	d6, d6, d3
 801af3c:	e7e0      	b.n	801af00 <_dtoa_r+0x4c0>
 801af3e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801af42:	ee27 7b04 	vmul.f64	d7, d7, d4
 801af46:	4620      	mov	r0, r4
 801af48:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801af4c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801af50:	ee14 1a90 	vmov	r1, s9
 801af54:	3130      	adds	r1, #48	; 0x30
 801af56:	f808 1b01 	strb.w	r1, [r8], #1
 801af5a:	45a0      	cmp	r8, r4
 801af5c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801af60:	ee36 6b45 	vsub.f64	d6, d6, d5
 801af64:	d118      	bne.n	801af98 <_dtoa_r+0x558>
 801af66:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801af6a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801af6e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801af72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af76:	dc4d      	bgt.n	801b014 <_dtoa_r+0x5d4>
 801af78:	ee35 5b47 	vsub.f64	d5, d5, d7
 801af7c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801af80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af84:	f57f af41 	bpl.w	801ae0a <_dtoa_r+0x3ca>
 801af88:	4680      	mov	r8, r0
 801af8a:	3801      	subs	r0, #1
 801af8c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801af90:	2b30      	cmp	r3, #48	; 0x30
 801af92:	d0f9      	beq.n	801af88 <_dtoa_r+0x548>
 801af94:	4693      	mov	fp, r2
 801af96:	e02a      	b.n	801afee <_dtoa_r+0x5ae>
 801af98:	ee26 6b03 	vmul.f64	d6, d6, d3
 801af9c:	e7d6      	b.n	801af4c <_dtoa_r+0x50c>
 801af9e:	ed9d 7b02 	vldr	d7, [sp, #8]
 801afa2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801afa6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801afaa:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801afae:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801afb2:	ee15 3a10 	vmov	r3, s10
 801afb6:	3330      	adds	r3, #48	; 0x30
 801afb8:	f808 3b01 	strb.w	r3, [r8], #1
 801afbc:	9b01      	ldr	r3, [sp, #4]
 801afbe:	eba8 0303 	sub.w	r3, r8, r3
 801afc2:	4599      	cmp	r9, r3
 801afc4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801afc8:	eea3 7b46 	vfms.f64	d7, d3, d6
 801afcc:	d133      	bne.n	801b036 <_dtoa_r+0x5f6>
 801afce:	ee37 7b07 	vadd.f64	d7, d7, d7
 801afd2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801afd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801afda:	dc1a      	bgt.n	801b012 <_dtoa_r+0x5d2>
 801afdc:	eeb4 7b46 	vcmp.f64	d7, d6
 801afe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801afe4:	d103      	bne.n	801afee <_dtoa_r+0x5ae>
 801afe6:	ee15 3a10 	vmov	r3, s10
 801afea:	07d9      	lsls	r1, r3, #31
 801afec:	d411      	bmi.n	801b012 <_dtoa_r+0x5d2>
 801afee:	4629      	mov	r1, r5
 801aff0:	4630      	mov	r0, r6
 801aff2:	f000 fbd1 	bl	801b798 <_Bfree>
 801aff6:	2300      	movs	r3, #0
 801aff8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801affa:	f888 3000 	strb.w	r3, [r8]
 801affe:	f10b 0301 	add.w	r3, fp, #1
 801b002:	6013      	str	r3, [r2, #0]
 801b004:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b006:	2b00      	cmp	r3, #0
 801b008:	f43f ad69 	beq.w	801aade <_dtoa_r+0x9e>
 801b00c:	f8c3 8000 	str.w	r8, [r3]
 801b010:	e565      	b.n	801aade <_dtoa_r+0x9e>
 801b012:	465a      	mov	r2, fp
 801b014:	4643      	mov	r3, r8
 801b016:	4698      	mov	r8, r3
 801b018:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 801b01c:	2939      	cmp	r1, #57	; 0x39
 801b01e:	d106      	bne.n	801b02e <_dtoa_r+0x5ee>
 801b020:	9901      	ldr	r1, [sp, #4]
 801b022:	4299      	cmp	r1, r3
 801b024:	d1f7      	bne.n	801b016 <_dtoa_r+0x5d6>
 801b026:	9801      	ldr	r0, [sp, #4]
 801b028:	2130      	movs	r1, #48	; 0x30
 801b02a:	3201      	adds	r2, #1
 801b02c:	7001      	strb	r1, [r0, #0]
 801b02e:	7819      	ldrb	r1, [r3, #0]
 801b030:	3101      	adds	r1, #1
 801b032:	7019      	strb	r1, [r3, #0]
 801b034:	e7ae      	b.n	801af94 <_dtoa_r+0x554>
 801b036:	ee27 7b04 	vmul.f64	d7, d7, d4
 801b03a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801b03e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b042:	d1b2      	bne.n	801afaa <_dtoa_r+0x56a>
 801b044:	e7d3      	b.n	801afee <_dtoa_r+0x5ae>
 801b046:	bf00      	nop
 801b048:	0801cd30 	.word	0x0801cd30
 801b04c:	0801cd08 	.word	0x0801cd08
 801b050:	9907      	ldr	r1, [sp, #28]
 801b052:	2900      	cmp	r1, #0
 801b054:	f000 80d0 	beq.w	801b1f8 <_dtoa_r+0x7b8>
 801b058:	9906      	ldr	r1, [sp, #24]
 801b05a:	2901      	cmp	r1, #1
 801b05c:	f300 80b4 	bgt.w	801b1c8 <_dtoa_r+0x788>
 801b060:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b062:	2900      	cmp	r1, #0
 801b064:	f000 80ac 	beq.w	801b1c0 <_dtoa_r+0x780>
 801b068:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801b06c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801b070:	461c      	mov	r4, r3
 801b072:	9309      	str	r3, [sp, #36]	; 0x24
 801b074:	9b04      	ldr	r3, [sp, #16]
 801b076:	4413      	add	r3, r2
 801b078:	9304      	str	r3, [sp, #16]
 801b07a:	9b05      	ldr	r3, [sp, #20]
 801b07c:	2101      	movs	r1, #1
 801b07e:	4413      	add	r3, r2
 801b080:	4630      	mov	r0, r6
 801b082:	9305      	str	r3, [sp, #20]
 801b084:	f000 fc3e 	bl	801b904 <__i2b>
 801b088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b08a:	4607      	mov	r7, r0
 801b08c:	f1b8 0f00 	cmp.w	r8, #0
 801b090:	d00d      	beq.n	801b0ae <_dtoa_r+0x66e>
 801b092:	9a05      	ldr	r2, [sp, #20]
 801b094:	2a00      	cmp	r2, #0
 801b096:	dd0a      	ble.n	801b0ae <_dtoa_r+0x66e>
 801b098:	4542      	cmp	r2, r8
 801b09a:	9904      	ldr	r1, [sp, #16]
 801b09c:	bfa8      	it	ge
 801b09e:	4642      	movge	r2, r8
 801b0a0:	1a89      	subs	r1, r1, r2
 801b0a2:	9104      	str	r1, [sp, #16]
 801b0a4:	9905      	ldr	r1, [sp, #20]
 801b0a6:	eba8 0802 	sub.w	r8, r8, r2
 801b0aa:	1a8a      	subs	r2, r1, r2
 801b0ac:	9205      	str	r2, [sp, #20]
 801b0ae:	b303      	cbz	r3, 801b0f2 <_dtoa_r+0x6b2>
 801b0b0:	9a07      	ldr	r2, [sp, #28]
 801b0b2:	2a00      	cmp	r2, #0
 801b0b4:	f000 80a5 	beq.w	801b202 <_dtoa_r+0x7c2>
 801b0b8:	2c00      	cmp	r4, #0
 801b0ba:	dd13      	ble.n	801b0e4 <_dtoa_r+0x6a4>
 801b0bc:	4639      	mov	r1, r7
 801b0be:	4622      	mov	r2, r4
 801b0c0:	4630      	mov	r0, r6
 801b0c2:	930d      	str	r3, [sp, #52]	; 0x34
 801b0c4:	f000 fcde 	bl	801ba84 <__pow5mult>
 801b0c8:	462a      	mov	r2, r5
 801b0ca:	4601      	mov	r1, r0
 801b0cc:	4607      	mov	r7, r0
 801b0ce:	4630      	mov	r0, r6
 801b0d0:	f000 fc2e 	bl	801b930 <__multiply>
 801b0d4:	4629      	mov	r1, r5
 801b0d6:	9009      	str	r0, [sp, #36]	; 0x24
 801b0d8:	4630      	mov	r0, r6
 801b0da:	f000 fb5d 	bl	801b798 <_Bfree>
 801b0de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b0e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b0e2:	4615      	mov	r5, r2
 801b0e4:	1b1a      	subs	r2, r3, r4
 801b0e6:	d004      	beq.n	801b0f2 <_dtoa_r+0x6b2>
 801b0e8:	4629      	mov	r1, r5
 801b0ea:	4630      	mov	r0, r6
 801b0ec:	f000 fcca 	bl	801ba84 <__pow5mult>
 801b0f0:	4605      	mov	r5, r0
 801b0f2:	2101      	movs	r1, #1
 801b0f4:	4630      	mov	r0, r6
 801b0f6:	f000 fc05 	bl	801b904 <__i2b>
 801b0fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b0fc:	2b00      	cmp	r3, #0
 801b0fe:	4604      	mov	r4, r0
 801b100:	f340 8081 	ble.w	801b206 <_dtoa_r+0x7c6>
 801b104:	461a      	mov	r2, r3
 801b106:	4601      	mov	r1, r0
 801b108:	4630      	mov	r0, r6
 801b10a:	f000 fcbb 	bl	801ba84 <__pow5mult>
 801b10e:	9b06      	ldr	r3, [sp, #24]
 801b110:	2b01      	cmp	r3, #1
 801b112:	4604      	mov	r4, r0
 801b114:	dd7a      	ble.n	801b20c <_dtoa_r+0x7cc>
 801b116:	2300      	movs	r3, #0
 801b118:	9309      	str	r3, [sp, #36]	; 0x24
 801b11a:	6922      	ldr	r2, [r4, #16]
 801b11c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801b120:	6910      	ldr	r0, [r2, #16]
 801b122:	f000 fba1 	bl	801b868 <__hi0bits>
 801b126:	f1c0 0020 	rsb	r0, r0, #32
 801b12a:	9b05      	ldr	r3, [sp, #20]
 801b12c:	4418      	add	r0, r3
 801b12e:	f010 001f 	ands.w	r0, r0, #31
 801b132:	f000 8093 	beq.w	801b25c <_dtoa_r+0x81c>
 801b136:	f1c0 0220 	rsb	r2, r0, #32
 801b13a:	2a04      	cmp	r2, #4
 801b13c:	f340 8085 	ble.w	801b24a <_dtoa_r+0x80a>
 801b140:	9b04      	ldr	r3, [sp, #16]
 801b142:	f1c0 001c 	rsb	r0, r0, #28
 801b146:	4403      	add	r3, r0
 801b148:	9304      	str	r3, [sp, #16]
 801b14a:	9b05      	ldr	r3, [sp, #20]
 801b14c:	4480      	add	r8, r0
 801b14e:	4403      	add	r3, r0
 801b150:	9305      	str	r3, [sp, #20]
 801b152:	9b04      	ldr	r3, [sp, #16]
 801b154:	2b00      	cmp	r3, #0
 801b156:	dd05      	ble.n	801b164 <_dtoa_r+0x724>
 801b158:	4629      	mov	r1, r5
 801b15a:	461a      	mov	r2, r3
 801b15c:	4630      	mov	r0, r6
 801b15e:	f000 fceb 	bl	801bb38 <__lshift>
 801b162:	4605      	mov	r5, r0
 801b164:	9b05      	ldr	r3, [sp, #20]
 801b166:	2b00      	cmp	r3, #0
 801b168:	dd05      	ble.n	801b176 <_dtoa_r+0x736>
 801b16a:	4621      	mov	r1, r4
 801b16c:	461a      	mov	r2, r3
 801b16e:	4630      	mov	r0, r6
 801b170:	f000 fce2 	bl	801bb38 <__lshift>
 801b174:	4604      	mov	r4, r0
 801b176:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b178:	2b00      	cmp	r3, #0
 801b17a:	d071      	beq.n	801b260 <_dtoa_r+0x820>
 801b17c:	4621      	mov	r1, r4
 801b17e:	4628      	mov	r0, r5
 801b180:	f000 fd46 	bl	801bc10 <__mcmp>
 801b184:	2800      	cmp	r0, #0
 801b186:	da6b      	bge.n	801b260 <_dtoa_r+0x820>
 801b188:	2300      	movs	r3, #0
 801b18a:	4629      	mov	r1, r5
 801b18c:	220a      	movs	r2, #10
 801b18e:	4630      	mov	r0, r6
 801b190:	f000 fb24 	bl	801b7dc <__multadd>
 801b194:	9b07      	ldr	r3, [sp, #28]
 801b196:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b19a:	4605      	mov	r5, r0
 801b19c:	2b00      	cmp	r3, #0
 801b19e:	f000 8197 	beq.w	801b4d0 <_dtoa_r+0xa90>
 801b1a2:	4639      	mov	r1, r7
 801b1a4:	2300      	movs	r3, #0
 801b1a6:	220a      	movs	r2, #10
 801b1a8:	4630      	mov	r0, r6
 801b1aa:	f000 fb17 	bl	801b7dc <__multadd>
 801b1ae:	f1ba 0f00 	cmp.w	sl, #0
 801b1b2:	4607      	mov	r7, r0
 801b1b4:	f300 8093 	bgt.w	801b2de <_dtoa_r+0x89e>
 801b1b8:	9b06      	ldr	r3, [sp, #24]
 801b1ba:	2b02      	cmp	r3, #2
 801b1bc:	dc57      	bgt.n	801b26e <_dtoa_r+0x82e>
 801b1be:	e08e      	b.n	801b2de <_dtoa_r+0x89e>
 801b1c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b1c2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801b1c6:	e751      	b.n	801b06c <_dtoa_r+0x62c>
 801b1c8:	f109 34ff 	add.w	r4, r9, #4294967295
 801b1cc:	42a3      	cmp	r3, r4
 801b1ce:	bfbf      	itttt	lt
 801b1d0:	1ae2      	sublt	r2, r4, r3
 801b1d2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801b1d4:	189b      	addlt	r3, r3, r2
 801b1d6:	930a      	strlt	r3, [sp, #40]	; 0x28
 801b1d8:	bfae      	itee	ge
 801b1da:	1b1c      	subge	r4, r3, r4
 801b1dc:	4623      	movlt	r3, r4
 801b1de:	2400      	movlt	r4, #0
 801b1e0:	f1b9 0f00 	cmp.w	r9, #0
 801b1e4:	bfb5      	itete	lt
 801b1e6:	9a04      	ldrlt	r2, [sp, #16]
 801b1e8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801b1ec:	eba2 0809 	sublt.w	r8, r2, r9
 801b1f0:	464a      	movge	r2, r9
 801b1f2:	bfb8      	it	lt
 801b1f4:	2200      	movlt	r2, #0
 801b1f6:	e73c      	b.n	801b072 <_dtoa_r+0x632>
 801b1f8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801b1fc:	9f07      	ldr	r7, [sp, #28]
 801b1fe:	461c      	mov	r4, r3
 801b200:	e744      	b.n	801b08c <_dtoa_r+0x64c>
 801b202:	461a      	mov	r2, r3
 801b204:	e770      	b.n	801b0e8 <_dtoa_r+0x6a8>
 801b206:	9b06      	ldr	r3, [sp, #24]
 801b208:	2b01      	cmp	r3, #1
 801b20a:	dc18      	bgt.n	801b23e <_dtoa_r+0x7fe>
 801b20c:	9b02      	ldr	r3, [sp, #8]
 801b20e:	b9b3      	cbnz	r3, 801b23e <_dtoa_r+0x7fe>
 801b210:	9b03      	ldr	r3, [sp, #12]
 801b212:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801b216:	b9a2      	cbnz	r2, 801b242 <_dtoa_r+0x802>
 801b218:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801b21c:	0d12      	lsrs	r2, r2, #20
 801b21e:	0512      	lsls	r2, r2, #20
 801b220:	b18a      	cbz	r2, 801b246 <_dtoa_r+0x806>
 801b222:	9b04      	ldr	r3, [sp, #16]
 801b224:	3301      	adds	r3, #1
 801b226:	9304      	str	r3, [sp, #16]
 801b228:	9b05      	ldr	r3, [sp, #20]
 801b22a:	3301      	adds	r3, #1
 801b22c:	9305      	str	r3, [sp, #20]
 801b22e:	2301      	movs	r3, #1
 801b230:	9309      	str	r3, [sp, #36]	; 0x24
 801b232:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b234:	2b00      	cmp	r3, #0
 801b236:	f47f af70 	bne.w	801b11a <_dtoa_r+0x6da>
 801b23a:	2001      	movs	r0, #1
 801b23c:	e775      	b.n	801b12a <_dtoa_r+0x6ea>
 801b23e:	2300      	movs	r3, #0
 801b240:	e7f6      	b.n	801b230 <_dtoa_r+0x7f0>
 801b242:	9b02      	ldr	r3, [sp, #8]
 801b244:	e7f4      	b.n	801b230 <_dtoa_r+0x7f0>
 801b246:	9209      	str	r2, [sp, #36]	; 0x24
 801b248:	e7f3      	b.n	801b232 <_dtoa_r+0x7f2>
 801b24a:	d082      	beq.n	801b152 <_dtoa_r+0x712>
 801b24c:	9b04      	ldr	r3, [sp, #16]
 801b24e:	321c      	adds	r2, #28
 801b250:	4413      	add	r3, r2
 801b252:	9304      	str	r3, [sp, #16]
 801b254:	9b05      	ldr	r3, [sp, #20]
 801b256:	4490      	add	r8, r2
 801b258:	4413      	add	r3, r2
 801b25a:	e779      	b.n	801b150 <_dtoa_r+0x710>
 801b25c:	4602      	mov	r2, r0
 801b25e:	e7f5      	b.n	801b24c <_dtoa_r+0x80c>
 801b260:	f1b9 0f00 	cmp.w	r9, #0
 801b264:	dc36      	bgt.n	801b2d4 <_dtoa_r+0x894>
 801b266:	9b06      	ldr	r3, [sp, #24]
 801b268:	2b02      	cmp	r3, #2
 801b26a:	dd33      	ble.n	801b2d4 <_dtoa_r+0x894>
 801b26c:	46ca      	mov	sl, r9
 801b26e:	f1ba 0f00 	cmp.w	sl, #0
 801b272:	d10d      	bne.n	801b290 <_dtoa_r+0x850>
 801b274:	4621      	mov	r1, r4
 801b276:	4653      	mov	r3, sl
 801b278:	2205      	movs	r2, #5
 801b27a:	4630      	mov	r0, r6
 801b27c:	f000 faae 	bl	801b7dc <__multadd>
 801b280:	4601      	mov	r1, r0
 801b282:	4604      	mov	r4, r0
 801b284:	4628      	mov	r0, r5
 801b286:	f000 fcc3 	bl	801bc10 <__mcmp>
 801b28a:	2800      	cmp	r0, #0
 801b28c:	f73f ade4 	bgt.w	801ae58 <_dtoa_r+0x418>
 801b290:	9b08      	ldr	r3, [sp, #32]
 801b292:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801b296:	ea6f 0b03 	mvn.w	fp, r3
 801b29a:	f04f 0900 	mov.w	r9, #0
 801b29e:	4621      	mov	r1, r4
 801b2a0:	4630      	mov	r0, r6
 801b2a2:	f000 fa79 	bl	801b798 <_Bfree>
 801b2a6:	2f00      	cmp	r7, #0
 801b2a8:	f43f aea1 	beq.w	801afee <_dtoa_r+0x5ae>
 801b2ac:	f1b9 0f00 	cmp.w	r9, #0
 801b2b0:	d005      	beq.n	801b2be <_dtoa_r+0x87e>
 801b2b2:	45b9      	cmp	r9, r7
 801b2b4:	d003      	beq.n	801b2be <_dtoa_r+0x87e>
 801b2b6:	4649      	mov	r1, r9
 801b2b8:	4630      	mov	r0, r6
 801b2ba:	f000 fa6d 	bl	801b798 <_Bfree>
 801b2be:	4639      	mov	r1, r7
 801b2c0:	4630      	mov	r0, r6
 801b2c2:	f000 fa69 	bl	801b798 <_Bfree>
 801b2c6:	e692      	b.n	801afee <_dtoa_r+0x5ae>
 801b2c8:	2400      	movs	r4, #0
 801b2ca:	4627      	mov	r7, r4
 801b2cc:	e7e0      	b.n	801b290 <_dtoa_r+0x850>
 801b2ce:	4693      	mov	fp, r2
 801b2d0:	4627      	mov	r7, r4
 801b2d2:	e5c1      	b.n	801ae58 <_dtoa_r+0x418>
 801b2d4:	9b07      	ldr	r3, [sp, #28]
 801b2d6:	46ca      	mov	sl, r9
 801b2d8:	2b00      	cmp	r3, #0
 801b2da:	f000 8100 	beq.w	801b4de <_dtoa_r+0xa9e>
 801b2de:	f1b8 0f00 	cmp.w	r8, #0
 801b2e2:	dd05      	ble.n	801b2f0 <_dtoa_r+0x8b0>
 801b2e4:	4639      	mov	r1, r7
 801b2e6:	4642      	mov	r2, r8
 801b2e8:	4630      	mov	r0, r6
 801b2ea:	f000 fc25 	bl	801bb38 <__lshift>
 801b2ee:	4607      	mov	r7, r0
 801b2f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b2f2:	2b00      	cmp	r3, #0
 801b2f4:	d05d      	beq.n	801b3b2 <_dtoa_r+0x972>
 801b2f6:	6879      	ldr	r1, [r7, #4]
 801b2f8:	4630      	mov	r0, r6
 801b2fa:	f000 fa0d 	bl	801b718 <_Balloc>
 801b2fe:	4680      	mov	r8, r0
 801b300:	b928      	cbnz	r0, 801b30e <_dtoa_r+0x8ce>
 801b302:	4b82      	ldr	r3, [pc, #520]	; (801b50c <_dtoa_r+0xacc>)
 801b304:	4602      	mov	r2, r0
 801b306:	f240 21ef 	movw	r1, #751	; 0x2ef
 801b30a:	f7ff bbb1 	b.w	801aa70 <_dtoa_r+0x30>
 801b30e:	693a      	ldr	r2, [r7, #16]
 801b310:	3202      	adds	r2, #2
 801b312:	0092      	lsls	r2, r2, #2
 801b314:	f107 010c 	add.w	r1, r7, #12
 801b318:	300c      	adds	r0, #12
 801b31a:	f7ff fafa 	bl	801a912 <memcpy>
 801b31e:	2201      	movs	r2, #1
 801b320:	4641      	mov	r1, r8
 801b322:	4630      	mov	r0, r6
 801b324:	f000 fc08 	bl	801bb38 <__lshift>
 801b328:	9b01      	ldr	r3, [sp, #4]
 801b32a:	3301      	adds	r3, #1
 801b32c:	9304      	str	r3, [sp, #16]
 801b32e:	9b01      	ldr	r3, [sp, #4]
 801b330:	4453      	add	r3, sl
 801b332:	9308      	str	r3, [sp, #32]
 801b334:	9b02      	ldr	r3, [sp, #8]
 801b336:	f003 0301 	and.w	r3, r3, #1
 801b33a:	46b9      	mov	r9, r7
 801b33c:	9307      	str	r3, [sp, #28]
 801b33e:	4607      	mov	r7, r0
 801b340:	9b04      	ldr	r3, [sp, #16]
 801b342:	4621      	mov	r1, r4
 801b344:	3b01      	subs	r3, #1
 801b346:	4628      	mov	r0, r5
 801b348:	9302      	str	r3, [sp, #8]
 801b34a:	f7ff faf0 	bl	801a92e <quorem>
 801b34e:	4603      	mov	r3, r0
 801b350:	3330      	adds	r3, #48	; 0x30
 801b352:	9005      	str	r0, [sp, #20]
 801b354:	4649      	mov	r1, r9
 801b356:	4628      	mov	r0, r5
 801b358:	9309      	str	r3, [sp, #36]	; 0x24
 801b35a:	f000 fc59 	bl	801bc10 <__mcmp>
 801b35e:	463a      	mov	r2, r7
 801b360:	4682      	mov	sl, r0
 801b362:	4621      	mov	r1, r4
 801b364:	4630      	mov	r0, r6
 801b366:	f000 fc6f 	bl	801bc48 <__mdiff>
 801b36a:	68c2      	ldr	r2, [r0, #12]
 801b36c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b36e:	4680      	mov	r8, r0
 801b370:	bb0a      	cbnz	r2, 801b3b6 <_dtoa_r+0x976>
 801b372:	4601      	mov	r1, r0
 801b374:	4628      	mov	r0, r5
 801b376:	f000 fc4b 	bl	801bc10 <__mcmp>
 801b37a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b37c:	4602      	mov	r2, r0
 801b37e:	4641      	mov	r1, r8
 801b380:	4630      	mov	r0, r6
 801b382:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801b386:	f000 fa07 	bl	801b798 <_Bfree>
 801b38a:	9b06      	ldr	r3, [sp, #24]
 801b38c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b38e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801b392:	ea43 0102 	orr.w	r1, r3, r2
 801b396:	9b07      	ldr	r3, [sp, #28]
 801b398:	4319      	orrs	r1, r3
 801b39a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b39c:	d10d      	bne.n	801b3ba <_dtoa_r+0x97a>
 801b39e:	2b39      	cmp	r3, #57	; 0x39
 801b3a0:	d029      	beq.n	801b3f6 <_dtoa_r+0x9b6>
 801b3a2:	f1ba 0f00 	cmp.w	sl, #0
 801b3a6:	dd01      	ble.n	801b3ac <_dtoa_r+0x96c>
 801b3a8:	9b05      	ldr	r3, [sp, #20]
 801b3aa:	3331      	adds	r3, #49	; 0x31
 801b3ac:	9a02      	ldr	r2, [sp, #8]
 801b3ae:	7013      	strb	r3, [r2, #0]
 801b3b0:	e775      	b.n	801b29e <_dtoa_r+0x85e>
 801b3b2:	4638      	mov	r0, r7
 801b3b4:	e7b8      	b.n	801b328 <_dtoa_r+0x8e8>
 801b3b6:	2201      	movs	r2, #1
 801b3b8:	e7e1      	b.n	801b37e <_dtoa_r+0x93e>
 801b3ba:	f1ba 0f00 	cmp.w	sl, #0
 801b3be:	db06      	blt.n	801b3ce <_dtoa_r+0x98e>
 801b3c0:	9906      	ldr	r1, [sp, #24]
 801b3c2:	ea41 0a0a 	orr.w	sl, r1, sl
 801b3c6:	9907      	ldr	r1, [sp, #28]
 801b3c8:	ea5a 0a01 	orrs.w	sl, sl, r1
 801b3cc:	d120      	bne.n	801b410 <_dtoa_r+0x9d0>
 801b3ce:	2a00      	cmp	r2, #0
 801b3d0:	ddec      	ble.n	801b3ac <_dtoa_r+0x96c>
 801b3d2:	4629      	mov	r1, r5
 801b3d4:	2201      	movs	r2, #1
 801b3d6:	4630      	mov	r0, r6
 801b3d8:	9304      	str	r3, [sp, #16]
 801b3da:	f000 fbad 	bl	801bb38 <__lshift>
 801b3de:	4621      	mov	r1, r4
 801b3e0:	4605      	mov	r5, r0
 801b3e2:	f000 fc15 	bl	801bc10 <__mcmp>
 801b3e6:	2800      	cmp	r0, #0
 801b3e8:	9b04      	ldr	r3, [sp, #16]
 801b3ea:	dc02      	bgt.n	801b3f2 <_dtoa_r+0x9b2>
 801b3ec:	d1de      	bne.n	801b3ac <_dtoa_r+0x96c>
 801b3ee:	07da      	lsls	r2, r3, #31
 801b3f0:	d5dc      	bpl.n	801b3ac <_dtoa_r+0x96c>
 801b3f2:	2b39      	cmp	r3, #57	; 0x39
 801b3f4:	d1d8      	bne.n	801b3a8 <_dtoa_r+0x968>
 801b3f6:	9a02      	ldr	r2, [sp, #8]
 801b3f8:	2339      	movs	r3, #57	; 0x39
 801b3fa:	7013      	strb	r3, [r2, #0]
 801b3fc:	4643      	mov	r3, r8
 801b3fe:	4698      	mov	r8, r3
 801b400:	3b01      	subs	r3, #1
 801b402:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801b406:	2a39      	cmp	r2, #57	; 0x39
 801b408:	d051      	beq.n	801b4ae <_dtoa_r+0xa6e>
 801b40a:	3201      	adds	r2, #1
 801b40c:	701a      	strb	r2, [r3, #0]
 801b40e:	e746      	b.n	801b29e <_dtoa_r+0x85e>
 801b410:	2a00      	cmp	r2, #0
 801b412:	dd03      	ble.n	801b41c <_dtoa_r+0x9dc>
 801b414:	2b39      	cmp	r3, #57	; 0x39
 801b416:	d0ee      	beq.n	801b3f6 <_dtoa_r+0x9b6>
 801b418:	3301      	adds	r3, #1
 801b41a:	e7c7      	b.n	801b3ac <_dtoa_r+0x96c>
 801b41c:	9a04      	ldr	r2, [sp, #16]
 801b41e:	9908      	ldr	r1, [sp, #32]
 801b420:	f802 3c01 	strb.w	r3, [r2, #-1]
 801b424:	428a      	cmp	r2, r1
 801b426:	d02b      	beq.n	801b480 <_dtoa_r+0xa40>
 801b428:	4629      	mov	r1, r5
 801b42a:	2300      	movs	r3, #0
 801b42c:	220a      	movs	r2, #10
 801b42e:	4630      	mov	r0, r6
 801b430:	f000 f9d4 	bl	801b7dc <__multadd>
 801b434:	45b9      	cmp	r9, r7
 801b436:	4605      	mov	r5, r0
 801b438:	f04f 0300 	mov.w	r3, #0
 801b43c:	f04f 020a 	mov.w	r2, #10
 801b440:	4649      	mov	r1, r9
 801b442:	4630      	mov	r0, r6
 801b444:	d107      	bne.n	801b456 <_dtoa_r+0xa16>
 801b446:	f000 f9c9 	bl	801b7dc <__multadd>
 801b44a:	4681      	mov	r9, r0
 801b44c:	4607      	mov	r7, r0
 801b44e:	9b04      	ldr	r3, [sp, #16]
 801b450:	3301      	adds	r3, #1
 801b452:	9304      	str	r3, [sp, #16]
 801b454:	e774      	b.n	801b340 <_dtoa_r+0x900>
 801b456:	f000 f9c1 	bl	801b7dc <__multadd>
 801b45a:	4639      	mov	r1, r7
 801b45c:	4681      	mov	r9, r0
 801b45e:	2300      	movs	r3, #0
 801b460:	220a      	movs	r2, #10
 801b462:	4630      	mov	r0, r6
 801b464:	f000 f9ba 	bl	801b7dc <__multadd>
 801b468:	4607      	mov	r7, r0
 801b46a:	e7f0      	b.n	801b44e <_dtoa_r+0xa0e>
 801b46c:	f1ba 0f00 	cmp.w	sl, #0
 801b470:	9a01      	ldr	r2, [sp, #4]
 801b472:	bfcc      	ite	gt
 801b474:	46d0      	movgt	r8, sl
 801b476:	f04f 0801 	movle.w	r8, #1
 801b47a:	4490      	add	r8, r2
 801b47c:	f04f 0900 	mov.w	r9, #0
 801b480:	4629      	mov	r1, r5
 801b482:	2201      	movs	r2, #1
 801b484:	4630      	mov	r0, r6
 801b486:	9302      	str	r3, [sp, #8]
 801b488:	f000 fb56 	bl	801bb38 <__lshift>
 801b48c:	4621      	mov	r1, r4
 801b48e:	4605      	mov	r5, r0
 801b490:	f000 fbbe 	bl	801bc10 <__mcmp>
 801b494:	2800      	cmp	r0, #0
 801b496:	dcb1      	bgt.n	801b3fc <_dtoa_r+0x9bc>
 801b498:	d102      	bne.n	801b4a0 <_dtoa_r+0xa60>
 801b49a:	9b02      	ldr	r3, [sp, #8]
 801b49c:	07db      	lsls	r3, r3, #31
 801b49e:	d4ad      	bmi.n	801b3fc <_dtoa_r+0x9bc>
 801b4a0:	4643      	mov	r3, r8
 801b4a2:	4698      	mov	r8, r3
 801b4a4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801b4a8:	2a30      	cmp	r2, #48	; 0x30
 801b4aa:	d0fa      	beq.n	801b4a2 <_dtoa_r+0xa62>
 801b4ac:	e6f7      	b.n	801b29e <_dtoa_r+0x85e>
 801b4ae:	9a01      	ldr	r2, [sp, #4]
 801b4b0:	429a      	cmp	r2, r3
 801b4b2:	d1a4      	bne.n	801b3fe <_dtoa_r+0x9be>
 801b4b4:	f10b 0b01 	add.w	fp, fp, #1
 801b4b8:	2331      	movs	r3, #49	; 0x31
 801b4ba:	e778      	b.n	801b3ae <_dtoa_r+0x96e>
 801b4bc:	4b14      	ldr	r3, [pc, #80]	; (801b510 <_dtoa_r+0xad0>)
 801b4be:	f7ff bb2a 	b.w	801ab16 <_dtoa_r+0xd6>
 801b4c2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b4c4:	2b00      	cmp	r3, #0
 801b4c6:	f47f ab05 	bne.w	801aad4 <_dtoa_r+0x94>
 801b4ca:	4b12      	ldr	r3, [pc, #72]	; (801b514 <_dtoa_r+0xad4>)
 801b4cc:	f7ff bb23 	b.w	801ab16 <_dtoa_r+0xd6>
 801b4d0:	f1ba 0f00 	cmp.w	sl, #0
 801b4d4:	dc03      	bgt.n	801b4de <_dtoa_r+0xa9e>
 801b4d6:	9b06      	ldr	r3, [sp, #24]
 801b4d8:	2b02      	cmp	r3, #2
 801b4da:	f73f aec8 	bgt.w	801b26e <_dtoa_r+0x82e>
 801b4de:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801b4e2:	4621      	mov	r1, r4
 801b4e4:	4628      	mov	r0, r5
 801b4e6:	f7ff fa22 	bl	801a92e <quorem>
 801b4ea:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801b4ee:	f808 3b01 	strb.w	r3, [r8], #1
 801b4f2:	9a01      	ldr	r2, [sp, #4]
 801b4f4:	eba8 0202 	sub.w	r2, r8, r2
 801b4f8:	4592      	cmp	sl, r2
 801b4fa:	ddb7      	ble.n	801b46c <_dtoa_r+0xa2c>
 801b4fc:	4629      	mov	r1, r5
 801b4fe:	2300      	movs	r3, #0
 801b500:	220a      	movs	r2, #10
 801b502:	4630      	mov	r0, r6
 801b504:	f000 f96a 	bl	801b7dc <__multadd>
 801b508:	4605      	mov	r5, r0
 801b50a:	e7ea      	b.n	801b4e2 <_dtoa_r+0xaa2>
 801b50c:	0801cc98 	.word	0x0801cc98
 801b510:	0801cbf8 	.word	0x0801cbf8
 801b514:	0801cc1c 	.word	0x0801cc1c

0801b518 <_free_r>:
 801b518:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b51a:	2900      	cmp	r1, #0
 801b51c:	d044      	beq.n	801b5a8 <_free_r+0x90>
 801b51e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b522:	9001      	str	r0, [sp, #4]
 801b524:	2b00      	cmp	r3, #0
 801b526:	f1a1 0404 	sub.w	r4, r1, #4
 801b52a:	bfb8      	it	lt
 801b52c:	18e4      	addlt	r4, r4, r3
 801b52e:	f000 f8e7 	bl	801b700 <__malloc_lock>
 801b532:	4a1e      	ldr	r2, [pc, #120]	; (801b5ac <_free_r+0x94>)
 801b534:	9801      	ldr	r0, [sp, #4]
 801b536:	6813      	ldr	r3, [r2, #0]
 801b538:	b933      	cbnz	r3, 801b548 <_free_r+0x30>
 801b53a:	6063      	str	r3, [r4, #4]
 801b53c:	6014      	str	r4, [r2, #0]
 801b53e:	b003      	add	sp, #12
 801b540:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b544:	f000 b8e2 	b.w	801b70c <__malloc_unlock>
 801b548:	42a3      	cmp	r3, r4
 801b54a:	d908      	bls.n	801b55e <_free_r+0x46>
 801b54c:	6825      	ldr	r5, [r4, #0]
 801b54e:	1961      	adds	r1, r4, r5
 801b550:	428b      	cmp	r3, r1
 801b552:	bf01      	itttt	eq
 801b554:	6819      	ldreq	r1, [r3, #0]
 801b556:	685b      	ldreq	r3, [r3, #4]
 801b558:	1949      	addeq	r1, r1, r5
 801b55a:	6021      	streq	r1, [r4, #0]
 801b55c:	e7ed      	b.n	801b53a <_free_r+0x22>
 801b55e:	461a      	mov	r2, r3
 801b560:	685b      	ldr	r3, [r3, #4]
 801b562:	b10b      	cbz	r3, 801b568 <_free_r+0x50>
 801b564:	42a3      	cmp	r3, r4
 801b566:	d9fa      	bls.n	801b55e <_free_r+0x46>
 801b568:	6811      	ldr	r1, [r2, #0]
 801b56a:	1855      	adds	r5, r2, r1
 801b56c:	42a5      	cmp	r5, r4
 801b56e:	d10b      	bne.n	801b588 <_free_r+0x70>
 801b570:	6824      	ldr	r4, [r4, #0]
 801b572:	4421      	add	r1, r4
 801b574:	1854      	adds	r4, r2, r1
 801b576:	42a3      	cmp	r3, r4
 801b578:	6011      	str	r1, [r2, #0]
 801b57a:	d1e0      	bne.n	801b53e <_free_r+0x26>
 801b57c:	681c      	ldr	r4, [r3, #0]
 801b57e:	685b      	ldr	r3, [r3, #4]
 801b580:	6053      	str	r3, [r2, #4]
 801b582:	440c      	add	r4, r1
 801b584:	6014      	str	r4, [r2, #0]
 801b586:	e7da      	b.n	801b53e <_free_r+0x26>
 801b588:	d902      	bls.n	801b590 <_free_r+0x78>
 801b58a:	230c      	movs	r3, #12
 801b58c:	6003      	str	r3, [r0, #0]
 801b58e:	e7d6      	b.n	801b53e <_free_r+0x26>
 801b590:	6825      	ldr	r5, [r4, #0]
 801b592:	1961      	adds	r1, r4, r5
 801b594:	428b      	cmp	r3, r1
 801b596:	bf04      	itt	eq
 801b598:	6819      	ldreq	r1, [r3, #0]
 801b59a:	685b      	ldreq	r3, [r3, #4]
 801b59c:	6063      	str	r3, [r4, #4]
 801b59e:	bf04      	itt	eq
 801b5a0:	1949      	addeq	r1, r1, r5
 801b5a2:	6021      	streq	r1, [r4, #0]
 801b5a4:	6054      	str	r4, [r2, #4]
 801b5a6:	e7ca      	b.n	801b53e <_free_r+0x26>
 801b5a8:	b003      	add	sp, #12
 801b5aa:	bd30      	pop	{r4, r5, pc}
 801b5ac:	2400a6e0 	.word	0x2400a6e0

0801b5b0 <malloc>:
 801b5b0:	4b02      	ldr	r3, [pc, #8]	; (801b5bc <malloc+0xc>)
 801b5b2:	4601      	mov	r1, r0
 801b5b4:	6818      	ldr	r0, [r3, #0]
 801b5b6:	f000 b823 	b.w	801b600 <_malloc_r>
 801b5ba:	bf00      	nop
 801b5bc:	2400006c 	.word	0x2400006c

0801b5c0 <sbrk_aligned>:
 801b5c0:	b570      	push	{r4, r5, r6, lr}
 801b5c2:	4e0e      	ldr	r6, [pc, #56]	; (801b5fc <sbrk_aligned+0x3c>)
 801b5c4:	460c      	mov	r4, r1
 801b5c6:	6831      	ldr	r1, [r6, #0]
 801b5c8:	4605      	mov	r5, r0
 801b5ca:	b911      	cbnz	r1, 801b5d2 <sbrk_aligned+0x12>
 801b5cc:	f000 fea8 	bl	801c320 <_sbrk_r>
 801b5d0:	6030      	str	r0, [r6, #0]
 801b5d2:	4621      	mov	r1, r4
 801b5d4:	4628      	mov	r0, r5
 801b5d6:	f000 fea3 	bl	801c320 <_sbrk_r>
 801b5da:	1c43      	adds	r3, r0, #1
 801b5dc:	d00a      	beq.n	801b5f4 <sbrk_aligned+0x34>
 801b5de:	1cc4      	adds	r4, r0, #3
 801b5e0:	f024 0403 	bic.w	r4, r4, #3
 801b5e4:	42a0      	cmp	r0, r4
 801b5e6:	d007      	beq.n	801b5f8 <sbrk_aligned+0x38>
 801b5e8:	1a21      	subs	r1, r4, r0
 801b5ea:	4628      	mov	r0, r5
 801b5ec:	f000 fe98 	bl	801c320 <_sbrk_r>
 801b5f0:	3001      	adds	r0, #1
 801b5f2:	d101      	bne.n	801b5f8 <sbrk_aligned+0x38>
 801b5f4:	f04f 34ff 	mov.w	r4, #4294967295
 801b5f8:	4620      	mov	r0, r4
 801b5fa:	bd70      	pop	{r4, r5, r6, pc}
 801b5fc:	2400a6e4 	.word	0x2400a6e4

0801b600 <_malloc_r>:
 801b600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b604:	1ccd      	adds	r5, r1, #3
 801b606:	f025 0503 	bic.w	r5, r5, #3
 801b60a:	3508      	adds	r5, #8
 801b60c:	2d0c      	cmp	r5, #12
 801b60e:	bf38      	it	cc
 801b610:	250c      	movcc	r5, #12
 801b612:	2d00      	cmp	r5, #0
 801b614:	4607      	mov	r7, r0
 801b616:	db01      	blt.n	801b61c <_malloc_r+0x1c>
 801b618:	42a9      	cmp	r1, r5
 801b61a:	d905      	bls.n	801b628 <_malloc_r+0x28>
 801b61c:	230c      	movs	r3, #12
 801b61e:	603b      	str	r3, [r7, #0]
 801b620:	2600      	movs	r6, #0
 801b622:	4630      	mov	r0, r6
 801b624:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b628:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801b6fc <_malloc_r+0xfc>
 801b62c:	f000 f868 	bl	801b700 <__malloc_lock>
 801b630:	f8d8 3000 	ldr.w	r3, [r8]
 801b634:	461c      	mov	r4, r3
 801b636:	bb5c      	cbnz	r4, 801b690 <_malloc_r+0x90>
 801b638:	4629      	mov	r1, r5
 801b63a:	4638      	mov	r0, r7
 801b63c:	f7ff ffc0 	bl	801b5c0 <sbrk_aligned>
 801b640:	1c43      	adds	r3, r0, #1
 801b642:	4604      	mov	r4, r0
 801b644:	d155      	bne.n	801b6f2 <_malloc_r+0xf2>
 801b646:	f8d8 4000 	ldr.w	r4, [r8]
 801b64a:	4626      	mov	r6, r4
 801b64c:	2e00      	cmp	r6, #0
 801b64e:	d145      	bne.n	801b6dc <_malloc_r+0xdc>
 801b650:	2c00      	cmp	r4, #0
 801b652:	d048      	beq.n	801b6e6 <_malloc_r+0xe6>
 801b654:	6823      	ldr	r3, [r4, #0]
 801b656:	4631      	mov	r1, r6
 801b658:	4638      	mov	r0, r7
 801b65a:	eb04 0903 	add.w	r9, r4, r3
 801b65e:	f000 fe5f 	bl	801c320 <_sbrk_r>
 801b662:	4581      	cmp	r9, r0
 801b664:	d13f      	bne.n	801b6e6 <_malloc_r+0xe6>
 801b666:	6821      	ldr	r1, [r4, #0]
 801b668:	1a6d      	subs	r5, r5, r1
 801b66a:	4629      	mov	r1, r5
 801b66c:	4638      	mov	r0, r7
 801b66e:	f7ff ffa7 	bl	801b5c0 <sbrk_aligned>
 801b672:	3001      	adds	r0, #1
 801b674:	d037      	beq.n	801b6e6 <_malloc_r+0xe6>
 801b676:	6823      	ldr	r3, [r4, #0]
 801b678:	442b      	add	r3, r5
 801b67a:	6023      	str	r3, [r4, #0]
 801b67c:	f8d8 3000 	ldr.w	r3, [r8]
 801b680:	2b00      	cmp	r3, #0
 801b682:	d038      	beq.n	801b6f6 <_malloc_r+0xf6>
 801b684:	685a      	ldr	r2, [r3, #4]
 801b686:	42a2      	cmp	r2, r4
 801b688:	d12b      	bne.n	801b6e2 <_malloc_r+0xe2>
 801b68a:	2200      	movs	r2, #0
 801b68c:	605a      	str	r2, [r3, #4]
 801b68e:	e00f      	b.n	801b6b0 <_malloc_r+0xb0>
 801b690:	6822      	ldr	r2, [r4, #0]
 801b692:	1b52      	subs	r2, r2, r5
 801b694:	d41f      	bmi.n	801b6d6 <_malloc_r+0xd6>
 801b696:	2a0b      	cmp	r2, #11
 801b698:	d917      	bls.n	801b6ca <_malloc_r+0xca>
 801b69a:	1961      	adds	r1, r4, r5
 801b69c:	42a3      	cmp	r3, r4
 801b69e:	6025      	str	r5, [r4, #0]
 801b6a0:	bf18      	it	ne
 801b6a2:	6059      	strne	r1, [r3, #4]
 801b6a4:	6863      	ldr	r3, [r4, #4]
 801b6a6:	bf08      	it	eq
 801b6a8:	f8c8 1000 	streq.w	r1, [r8]
 801b6ac:	5162      	str	r2, [r4, r5]
 801b6ae:	604b      	str	r3, [r1, #4]
 801b6b0:	4638      	mov	r0, r7
 801b6b2:	f104 060b 	add.w	r6, r4, #11
 801b6b6:	f000 f829 	bl	801b70c <__malloc_unlock>
 801b6ba:	f026 0607 	bic.w	r6, r6, #7
 801b6be:	1d23      	adds	r3, r4, #4
 801b6c0:	1af2      	subs	r2, r6, r3
 801b6c2:	d0ae      	beq.n	801b622 <_malloc_r+0x22>
 801b6c4:	1b9b      	subs	r3, r3, r6
 801b6c6:	50a3      	str	r3, [r4, r2]
 801b6c8:	e7ab      	b.n	801b622 <_malloc_r+0x22>
 801b6ca:	42a3      	cmp	r3, r4
 801b6cc:	6862      	ldr	r2, [r4, #4]
 801b6ce:	d1dd      	bne.n	801b68c <_malloc_r+0x8c>
 801b6d0:	f8c8 2000 	str.w	r2, [r8]
 801b6d4:	e7ec      	b.n	801b6b0 <_malloc_r+0xb0>
 801b6d6:	4623      	mov	r3, r4
 801b6d8:	6864      	ldr	r4, [r4, #4]
 801b6da:	e7ac      	b.n	801b636 <_malloc_r+0x36>
 801b6dc:	4634      	mov	r4, r6
 801b6de:	6876      	ldr	r6, [r6, #4]
 801b6e0:	e7b4      	b.n	801b64c <_malloc_r+0x4c>
 801b6e2:	4613      	mov	r3, r2
 801b6e4:	e7cc      	b.n	801b680 <_malloc_r+0x80>
 801b6e6:	230c      	movs	r3, #12
 801b6e8:	603b      	str	r3, [r7, #0]
 801b6ea:	4638      	mov	r0, r7
 801b6ec:	f000 f80e 	bl	801b70c <__malloc_unlock>
 801b6f0:	e797      	b.n	801b622 <_malloc_r+0x22>
 801b6f2:	6025      	str	r5, [r4, #0]
 801b6f4:	e7dc      	b.n	801b6b0 <_malloc_r+0xb0>
 801b6f6:	605b      	str	r3, [r3, #4]
 801b6f8:	deff      	udf	#255	; 0xff
 801b6fa:	bf00      	nop
 801b6fc:	2400a6e0 	.word	0x2400a6e0

0801b700 <__malloc_lock>:
 801b700:	4801      	ldr	r0, [pc, #4]	; (801b708 <__malloc_lock+0x8>)
 801b702:	f7ff b904 	b.w	801a90e <__retarget_lock_acquire_recursive>
 801b706:	bf00      	nop
 801b708:	2400a6dc 	.word	0x2400a6dc

0801b70c <__malloc_unlock>:
 801b70c:	4801      	ldr	r0, [pc, #4]	; (801b714 <__malloc_unlock+0x8>)
 801b70e:	f7ff b8ff 	b.w	801a910 <__retarget_lock_release_recursive>
 801b712:	bf00      	nop
 801b714:	2400a6dc 	.word	0x2400a6dc

0801b718 <_Balloc>:
 801b718:	b570      	push	{r4, r5, r6, lr}
 801b71a:	69c6      	ldr	r6, [r0, #28]
 801b71c:	4604      	mov	r4, r0
 801b71e:	460d      	mov	r5, r1
 801b720:	b976      	cbnz	r6, 801b740 <_Balloc+0x28>
 801b722:	2010      	movs	r0, #16
 801b724:	f7ff ff44 	bl	801b5b0 <malloc>
 801b728:	4602      	mov	r2, r0
 801b72a:	61e0      	str	r0, [r4, #28]
 801b72c:	b920      	cbnz	r0, 801b738 <_Balloc+0x20>
 801b72e:	4b18      	ldr	r3, [pc, #96]	; (801b790 <_Balloc+0x78>)
 801b730:	4818      	ldr	r0, [pc, #96]	; (801b794 <_Balloc+0x7c>)
 801b732:	216b      	movs	r1, #107	; 0x6b
 801b734:	f000 fe04 	bl	801c340 <__assert_func>
 801b738:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b73c:	6006      	str	r6, [r0, #0]
 801b73e:	60c6      	str	r6, [r0, #12]
 801b740:	69e6      	ldr	r6, [r4, #28]
 801b742:	68f3      	ldr	r3, [r6, #12]
 801b744:	b183      	cbz	r3, 801b768 <_Balloc+0x50>
 801b746:	69e3      	ldr	r3, [r4, #28]
 801b748:	68db      	ldr	r3, [r3, #12]
 801b74a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801b74e:	b9b8      	cbnz	r0, 801b780 <_Balloc+0x68>
 801b750:	2101      	movs	r1, #1
 801b752:	fa01 f605 	lsl.w	r6, r1, r5
 801b756:	1d72      	adds	r2, r6, #5
 801b758:	0092      	lsls	r2, r2, #2
 801b75a:	4620      	mov	r0, r4
 801b75c:	f000 fe0e 	bl	801c37c <_calloc_r>
 801b760:	b160      	cbz	r0, 801b77c <_Balloc+0x64>
 801b762:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801b766:	e00e      	b.n	801b786 <_Balloc+0x6e>
 801b768:	2221      	movs	r2, #33	; 0x21
 801b76a:	2104      	movs	r1, #4
 801b76c:	4620      	mov	r0, r4
 801b76e:	f000 fe05 	bl	801c37c <_calloc_r>
 801b772:	69e3      	ldr	r3, [r4, #28]
 801b774:	60f0      	str	r0, [r6, #12]
 801b776:	68db      	ldr	r3, [r3, #12]
 801b778:	2b00      	cmp	r3, #0
 801b77a:	d1e4      	bne.n	801b746 <_Balloc+0x2e>
 801b77c:	2000      	movs	r0, #0
 801b77e:	bd70      	pop	{r4, r5, r6, pc}
 801b780:	6802      	ldr	r2, [r0, #0]
 801b782:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801b786:	2300      	movs	r3, #0
 801b788:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801b78c:	e7f7      	b.n	801b77e <_Balloc+0x66>
 801b78e:	bf00      	nop
 801b790:	0801cc29 	.word	0x0801cc29
 801b794:	0801cca9 	.word	0x0801cca9

0801b798 <_Bfree>:
 801b798:	b570      	push	{r4, r5, r6, lr}
 801b79a:	69c6      	ldr	r6, [r0, #28]
 801b79c:	4605      	mov	r5, r0
 801b79e:	460c      	mov	r4, r1
 801b7a0:	b976      	cbnz	r6, 801b7c0 <_Bfree+0x28>
 801b7a2:	2010      	movs	r0, #16
 801b7a4:	f7ff ff04 	bl	801b5b0 <malloc>
 801b7a8:	4602      	mov	r2, r0
 801b7aa:	61e8      	str	r0, [r5, #28]
 801b7ac:	b920      	cbnz	r0, 801b7b8 <_Bfree+0x20>
 801b7ae:	4b09      	ldr	r3, [pc, #36]	; (801b7d4 <_Bfree+0x3c>)
 801b7b0:	4809      	ldr	r0, [pc, #36]	; (801b7d8 <_Bfree+0x40>)
 801b7b2:	218f      	movs	r1, #143	; 0x8f
 801b7b4:	f000 fdc4 	bl	801c340 <__assert_func>
 801b7b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b7bc:	6006      	str	r6, [r0, #0]
 801b7be:	60c6      	str	r6, [r0, #12]
 801b7c0:	b13c      	cbz	r4, 801b7d2 <_Bfree+0x3a>
 801b7c2:	69eb      	ldr	r3, [r5, #28]
 801b7c4:	6862      	ldr	r2, [r4, #4]
 801b7c6:	68db      	ldr	r3, [r3, #12]
 801b7c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801b7cc:	6021      	str	r1, [r4, #0]
 801b7ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801b7d2:	bd70      	pop	{r4, r5, r6, pc}
 801b7d4:	0801cc29 	.word	0x0801cc29
 801b7d8:	0801cca9 	.word	0x0801cca9

0801b7dc <__multadd>:
 801b7dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b7e0:	690d      	ldr	r5, [r1, #16]
 801b7e2:	4607      	mov	r7, r0
 801b7e4:	460c      	mov	r4, r1
 801b7e6:	461e      	mov	r6, r3
 801b7e8:	f101 0c14 	add.w	ip, r1, #20
 801b7ec:	2000      	movs	r0, #0
 801b7ee:	f8dc 3000 	ldr.w	r3, [ip]
 801b7f2:	b299      	uxth	r1, r3
 801b7f4:	fb02 6101 	mla	r1, r2, r1, r6
 801b7f8:	0c1e      	lsrs	r6, r3, #16
 801b7fa:	0c0b      	lsrs	r3, r1, #16
 801b7fc:	fb02 3306 	mla	r3, r2, r6, r3
 801b800:	b289      	uxth	r1, r1
 801b802:	3001      	adds	r0, #1
 801b804:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801b808:	4285      	cmp	r5, r0
 801b80a:	f84c 1b04 	str.w	r1, [ip], #4
 801b80e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801b812:	dcec      	bgt.n	801b7ee <__multadd+0x12>
 801b814:	b30e      	cbz	r6, 801b85a <__multadd+0x7e>
 801b816:	68a3      	ldr	r3, [r4, #8]
 801b818:	42ab      	cmp	r3, r5
 801b81a:	dc19      	bgt.n	801b850 <__multadd+0x74>
 801b81c:	6861      	ldr	r1, [r4, #4]
 801b81e:	4638      	mov	r0, r7
 801b820:	3101      	adds	r1, #1
 801b822:	f7ff ff79 	bl	801b718 <_Balloc>
 801b826:	4680      	mov	r8, r0
 801b828:	b928      	cbnz	r0, 801b836 <__multadd+0x5a>
 801b82a:	4602      	mov	r2, r0
 801b82c:	4b0c      	ldr	r3, [pc, #48]	; (801b860 <__multadd+0x84>)
 801b82e:	480d      	ldr	r0, [pc, #52]	; (801b864 <__multadd+0x88>)
 801b830:	21ba      	movs	r1, #186	; 0xba
 801b832:	f000 fd85 	bl	801c340 <__assert_func>
 801b836:	6922      	ldr	r2, [r4, #16]
 801b838:	3202      	adds	r2, #2
 801b83a:	f104 010c 	add.w	r1, r4, #12
 801b83e:	0092      	lsls	r2, r2, #2
 801b840:	300c      	adds	r0, #12
 801b842:	f7ff f866 	bl	801a912 <memcpy>
 801b846:	4621      	mov	r1, r4
 801b848:	4638      	mov	r0, r7
 801b84a:	f7ff ffa5 	bl	801b798 <_Bfree>
 801b84e:	4644      	mov	r4, r8
 801b850:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801b854:	3501      	adds	r5, #1
 801b856:	615e      	str	r6, [r3, #20]
 801b858:	6125      	str	r5, [r4, #16]
 801b85a:	4620      	mov	r0, r4
 801b85c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b860:	0801cc98 	.word	0x0801cc98
 801b864:	0801cca9 	.word	0x0801cca9

0801b868 <__hi0bits>:
 801b868:	0c03      	lsrs	r3, r0, #16
 801b86a:	041b      	lsls	r3, r3, #16
 801b86c:	b9d3      	cbnz	r3, 801b8a4 <__hi0bits+0x3c>
 801b86e:	0400      	lsls	r0, r0, #16
 801b870:	2310      	movs	r3, #16
 801b872:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801b876:	bf04      	itt	eq
 801b878:	0200      	lsleq	r0, r0, #8
 801b87a:	3308      	addeq	r3, #8
 801b87c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801b880:	bf04      	itt	eq
 801b882:	0100      	lsleq	r0, r0, #4
 801b884:	3304      	addeq	r3, #4
 801b886:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801b88a:	bf04      	itt	eq
 801b88c:	0080      	lsleq	r0, r0, #2
 801b88e:	3302      	addeq	r3, #2
 801b890:	2800      	cmp	r0, #0
 801b892:	db05      	blt.n	801b8a0 <__hi0bits+0x38>
 801b894:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801b898:	f103 0301 	add.w	r3, r3, #1
 801b89c:	bf08      	it	eq
 801b89e:	2320      	moveq	r3, #32
 801b8a0:	4618      	mov	r0, r3
 801b8a2:	4770      	bx	lr
 801b8a4:	2300      	movs	r3, #0
 801b8a6:	e7e4      	b.n	801b872 <__hi0bits+0xa>

0801b8a8 <__lo0bits>:
 801b8a8:	6803      	ldr	r3, [r0, #0]
 801b8aa:	f013 0207 	ands.w	r2, r3, #7
 801b8ae:	d00c      	beq.n	801b8ca <__lo0bits+0x22>
 801b8b0:	07d9      	lsls	r1, r3, #31
 801b8b2:	d422      	bmi.n	801b8fa <__lo0bits+0x52>
 801b8b4:	079a      	lsls	r2, r3, #30
 801b8b6:	bf49      	itett	mi
 801b8b8:	085b      	lsrmi	r3, r3, #1
 801b8ba:	089b      	lsrpl	r3, r3, #2
 801b8bc:	6003      	strmi	r3, [r0, #0]
 801b8be:	2201      	movmi	r2, #1
 801b8c0:	bf5c      	itt	pl
 801b8c2:	6003      	strpl	r3, [r0, #0]
 801b8c4:	2202      	movpl	r2, #2
 801b8c6:	4610      	mov	r0, r2
 801b8c8:	4770      	bx	lr
 801b8ca:	b299      	uxth	r1, r3
 801b8cc:	b909      	cbnz	r1, 801b8d2 <__lo0bits+0x2a>
 801b8ce:	0c1b      	lsrs	r3, r3, #16
 801b8d0:	2210      	movs	r2, #16
 801b8d2:	b2d9      	uxtb	r1, r3
 801b8d4:	b909      	cbnz	r1, 801b8da <__lo0bits+0x32>
 801b8d6:	3208      	adds	r2, #8
 801b8d8:	0a1b      	lsrs	r3, r3, #8
 801b8da:	0719      	lsls	r1, r3, #28
 801b8dc:	bf04      	itt	eq
 801b8de:	091b      	lsreq	r3, r3, #4
 801b8e0:	3204      	addeq	r2, #4
 801b8e2:	0799      	lsls	r1, r3, #30
 801b8e4:	bf04      	itt	eq
 801b8e6:	089b      	lsreq	r3, r3, #2
 801b8e8:	3202      	addeq	r2, #2
 801b8ea:	07d9      	lsls	r1, r3, #31
 801b8ec:	d403      	bmi.n	801b8f6 <__lo0bits+0x4e>
 801b8ee:	085b      	lsrs	r3, r3, #1
 801b8f0:	f102 0201 	add.w	r2, r2, #1
 801b8f4:	d003      	beq.n	801b8fe <__lo0bits+0x56>
 801b8f6:	6003      	str	r3, [r0, #0]
 801b8f8:	e7e5      	b.n	801b8c6 <__lo0bits+0x1e>
 801b8fa:	2200      	movs	r2, #0
 801b8fc:	e7e3      	b.n	801b8c6 <__lo0bits+0x1e>
 801b8fe:	2220      	movs	r2, #32
 801b900:	e7e1      	b.n	801b8c6 <__lo0bits+0x1e>
	...

0801b904 <__i2b>:
 801b904:	b510      	push	{r4, lr}
 801b906:	460c      	mov	r4, r1
 801b908:	2101      	movs	r1, #1
 801b90a:	f7ff ff05 	bl	801b718 <_Balloc>
 801b90e:	4602      	mov	r2, r0
 801b910:	b928      	cbnz	r0, 801b91e <__i2b+0x1a>
 801b912:	4b05      	ldr	r3, [pc, #20]	; (801b928 <__i2b+0x24>)
 801b914:	4805      	ldr	r0, [pc, #20]	; (801b92c <__i2b+0x28>)
 801b916:	f240 1145 	movw	r1, #325	; 0x145
 801b91a:	f000 fd11 	bl	801c340 <__assert_func>
 801b91e:	2301      	movs	r3, #1
 801b920:	6144      	str	r4, [r0, #20]
 801b922:	6103      	str	r3, [r0, #16]
 801b924:	bd10      	pop	{r4, pc}
 801b926:	bf00      	nop
 801b928:	0801cc98 	.word	0x0801cc98
 801b92c:	0801cca9 	.word	0x0801cca9

0801b930 <__multiply>:
 801b930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b934:	4691      	mov	r9, r2
 801b936:	690a      	ldr	r2, [r1, #16]
 801b938:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801b93c:	429a      	cmp	r2, r3
 801b93e:	bfb8      	it	lt
 801b940:	460b      	movlt	r3, r1
 801b942:	460c      	mov	r4, r1
 801b944:	bfbc      	itt	lt
 801b946:	464c      	movlt	r4, r9
 801b948:	4699      	movlt	r9, r3
 801b94a:	6927      	ldr	r7, [r4, #16]
 801b94c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801b950:	68a3      	ldr	r3, [r4, #8]
 801b952:	6861      	ldr	r1, [r4, #4]
 801b954:	eb07 060a 	add.w	r6, r7, sl
 801b958:	42b3      	cmp	r3, r6
 801b95a:	b085      	sub	sp, #20
 801b95c:	bfb8      	it	lt
 801b95e:	3101      	addlt	r1, #1
 801b960:	f7ff feda 	bl	801b718 <_Balloc>
 801b964:	b930      	cbnz	r0, 801b974 <__multiply+0x44>
 801b966:	4602      	mov	r2, r0
 801b968:	4b44      	ldr	r3, [pc, #272]	; (801ba7c <__multiply+0x14c>)
 801b96a:	4845      	ldr	r0, [pc, #276]	; (801ba80 <__multiply+0x150>)
 801b96c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801b970:	f000 fce6 	bl	801c340 <__assert_func>
 801b974:	f100 0514 	add.w	r5, r0, #20
 801b978:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801b97c:	462b      	mov	r3, r5
 801b97e:	2200      	movs	r2, #0
 801b980:	4543      	cmp	r3, r8
 801b982:	d321      	bcc.n	801b9c8 <__multiply+0x98>
 801b984:	f104 0314 	add.w	r3, r4, #20
 801b988:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801b98c:	f109 0314 	add.w	r3, r9, #20
 801b990:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801b994:	9202      	str	r2, [sp, #8]
 801b996:	1b3a      	subs	r2, r7, r4
 801b998:	3a15      	subs	r2, #21
 801b99a:	f022 0203 	bic.w	r2, r2, #3
 801b99e:	3204      	adds	r2, #4
 801b9a0:	f104 0115 	add.w	r1, r4, #21
 801b9a4:	428f      	cmp	r7, r1
 801b9a6:	bf38      	it	cc
 801b9a8:	2204      	movcc	r2, #4
 801b9aa:	9201      	str	r2, [sp, #4]
 801b9ac:	9a02      	ldr	r2, [sp, #8]
 801b9ae:	9303      	str	r3, [sp, #12]
 801b9b0:	429a      	cmp	r2, r3
 801b9b2:	d80c      	bhi.n	801b9ce <__multiply+0x9e>
 801b9b4:	2e00      	cmp	r6, #0
 801b9b6:	dd03      	ble.n	801b9c0 <__multiply+0x90>
 801b9b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801b9bc:	2b00      	cmp	r3, #0
 801b9be:	d05b      	beq.n	801ba78 <__multiply+0x148>
 801b9c0:	6106      	str	r6, [r0, #16]
 801b9c2:	b005      	add	sp, #20
 801b9c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b9c8:	f843 2b04 	str.w	r2, [r3], #4
 801b9cc:	e7d8      	b.n	801b980 <__multiply+0x50>
 801b9ce:	f8b3 a000 	ldrh.w	sl, [r3]
 801b9d2:	f1ba 0f00 	cmp.w	sl, #0
 801b9d6:	d024      	beq.n	801ba22 <__multiply+0xf2>
 801b9d8:	f104 0e14 	add.w	lr, r4, #20
 801b9dc:	46a9      	mov	r9, r5
 801b9de:	f04f 0c00 	mov.w	ip, #0
 801b9e2:	f85e 2b04 	ldr.w	r2, [lr], #4
 801b9e6:	f8d9 1000 	ldr.w	r1, [r9]
 801b9ea:	fa1f fb82 	uxth.w	fp, r2
 801b9ee:	b289      	uxth	r1, r1
 801b9f0:	fb0a 110b 	mla	r1, sl, fp, r1
 801b9f4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801b9f8:	f8d9 2000 	ldr.w	r2, [r9]
 801b9fc:	4461      	add	r1, ip
 801b9fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801ba02:	fb0a c20b 	mla	r2, sl, fp, ip
 801ba06:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801ba0a:	b289      	uxth	r1, r1
 801ba0c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801ba10:	4577      	cmp	r7, lr
 801ba12:	f849 1b04 	str.w	r1, [r9], #4
 801ba16:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801ba1a:	d8e2      	bhi.n	801b9e2 <__multiply+0xb2>
 801ba1c:	9a01      	ldr	r2, [sp, #4]
 801ba1e:	f845 c002 	str.w	ip, [r5, r2]
 801ba22:	9a03      	ldr	r2, [sp, #12]
 801ba24:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801ba28:	3304      	adds	r3, #4
 801ba2a:	f1b9 0f00 	cmp.w	r9, #0
 801ba2e:	d021      	beq.n	801ba74 <__multiply+0x144>
 801ba30:	6829      	ldr	r1, [r5, #0]
 801ba32:	f104 0c14 	add.w	ip, r4, #20
 801ba36:	46ae      	mov	lr, r5
 801ba38:	f04f 0a00 	mov.w	sl, #0
 801ba3c:	f8bc b000 	ldrh.w	fp, [ip]
 801ba40:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801ba44:	fb09 220b 	mla	r2, r9, fp, r2
 801ba48:	4452      	add	r2, sl
 801ba4a:	b289      	uxth	r1, r1
 801ba4c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801ba50:	f84e 1b04 	str.w	r1, [lr], #4
 801ba54:	f85c 1b04 	ldr.w	r1, [ip], #4
 801ba58:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801ba5c:	f8be 1000 	ldrh.w	r1, [lr]
 801ba60:	fb09 110a 	mla	r1, r9, sl, r1
 801ba64:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801ba68:	4567      	cmp	r7, ip
 801ba6a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801ba6e:	d8e5      	bhi.n	801ba3c <__multiply+0x10c>
 801ba70:	9a01      	ldr	r2, [sp, #4]
 801ba72:	50a9      	str	r1, [r5, r2]
 801ba74:	3504      	adds	r5, #4
 801ba76:	e799      	b.n	801b9ac <__multiply+0x7c>
 801ba78:	3e01      	subs	r6, #1
 801ba7a:	e79b      	b.n	801b9b4 <__multiply+0x84>
 801ba7c:	0801cc98 	.word	0x0801cc98
 801ba80:	0801cca9 	.word	0x0801cca9

0801ba84 <__pow5mult>:
 801ba84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ba88:	4615      	mov	r5, r2
 801ba8a:	f012 0203 	ands.w	r2, r2, #3
 801ba8e:	4606      	mov	r6, r0
 801ba90:	460f      	mov	r7, r1
 801ba92:	d007      	beq.n	801baa4 <__pow5mult+0x20>
 801ba94:	4c25      	ldr	r4, [pc, #148]	; (801bb2c <__pow5mult+0xa8>)
 801ba96:	3a01      	subs	r2, #1
 801ba98:	2300      	movs	r3, #0
 801ba9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801ba9e:	f7ff fe9d 	bl	801b7dc <__multadd>
 801baa2:	4607      	mov	r7, r0
 801baa4:	10ad      	asrs	r5, r5, #2
 801baa6:	d03d      	beq.n	801bb24 <__pow5mult+0xa0>
 801baa8:	69f4      	ldr	r4, [r6, #28]
 801baaa:	b97c      	cbnz	r4, 801bacc <__pow5mult+0x48>
 801baac:	2010      	movs	r0, #16
 801baae:	f7ff fd7f 	bl	801b5b0 <malloc>
 801bab2:	4602      	mov	r2, r0
 801bab4:	61f0      	str	r0, [r6, #28]
 801bab6:	b928      	cbnz	r0, 801bac4 <__pow5mult+0x40>
 801bab8:	4b1d      	ldr	r3, [pc, #116]	; (801bb30 <__pow5mult+0xac>)
 801baba:	481e      	ldr	r0, [pc, #120]	; (801bb34 <__pow5mult+0xb0>)
 801babc:	f240 11b3 	movw	r1, #435	; 0x1b3
 801bac0:	f000 fc3e 	bl	801c340 <__assert_func>
 801bac4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801bac8:	6004      	str	r4, [r0, #0]
 801baca:	60c4      	str	r4, [r0, #12]
 801bacc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801bad0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801bad4:	b94c      	cbnz	r4, 801baea <__pow5mult+0x66>
 801bad6:	f240 2171 	movw	r1, #625	; 0x271
 801bada:	4630      	mov	r0, r6
 801badc:	f7ff ff12 	bl	801b904 <__i2b>
 801bae0:	2300      	movs	r3, #0
 801bae2:	f8c8 0008 	str.w	r0, [r8, #8]
 801bae6:	4604      	mov	r4, r0
 801bae8:	6003      	str	r3, [r0, #0]
 801baea:	f04f 0900 	mov.w	r9, #0
 801baee:	07eb      	lsls	r3, r5, #31
 801baf0:	d50a      	bpl.n	801bb08 <__pow5mult+0x84>
 801baf2:	4639      	mov	r1, r7
 801baf4:	4622      	mov	r2, r4
 801baf6:	4630      	mov	r0, r6
 801baf8:	f7ff ff1a 	bl	801b930 <__multiply>
 801bafc:	4639      	mov	r1, r7
 801bafe:	4680      	mov	r8, r0
 801bb00:	4630      	mov	r0, r6
 801bb02:	f7ff fe49 	bl	801b798 <_Bfree>
 801bb06:	4647      	mov	r7, r8
 801bb08:	106d      	asrs	r5, r5, #1
 801bb0a:	d00b      	beq.n	801bb24 <__pow5mult+0xa0>
 801bb0c:	6820      	ldr	r0, [r4, #0]
 801bb0e:	b938      	cbnz	r0, 801bb20 <__pow5mult+0x9c>
 801bb10:	4622      	mov	r2, r4
 801bb12:	4621      	mov	r1, r4
 801bb14:	4630      	mov	r0, r6
 801bb16:	f7ff ff0b 	bl	801b930 <__multiply>
 801bb1a:	6020      	str	r0, [r4, #0]
 801bb1c:	f8c0 9000 	str.w	r9, [r0]
 801bb20:	4604      	mov	r4, r0
 801bb22:	e7e4      	b.n	801baee <__pow5mult+0x6a>
 801bb24:	4638      	mov	r0, r7
 801bb26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bb2a:	bf00      	nop
 801bb2c:	0801cdf8 	.word	0x0801cdf8
 801bb30:	0801cc29 	.word	0x0801cc29
 801bb34:	0801cca9 	.word	0x0801cca9

0801bb38 <__lshift>:
 801bb38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bb3c:	460c      	mov	r4, r1
 801bb3e:	6849      	ldr	r1, [r1, #4]
 801bb40:	6923      	ldr	r3, [r4, #16]
 801bb42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801bb46:	68a3      	ldr	r3, [r4, #8]
 801bb48:	4607      	mov	r7, r0
 801bb4a:	4691      	mov	r9, r2
 801bb4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801bb50:	f108 0601 	add.w	r6, r8, #1
 801bb54:	42b3      	cmp	r3, r6
 801bb56:	db0b      	blt.n	801bb70 <__lshift+0x38>
 801bb58:	4638      	mov	r0, r7
 801bb5a:	f7ff fddd 	bl	801b718 <_Balloc>
 801bb5e:	4605      	mov	r5, r0
 801bb60:	b948      	cbnz	r0, 801bb76 <__lshift+0x3e>
 801bb62:	4602      	mov	r2, r0
 801bb64:	4b28      	ldr	r3, [pc, #160]	; (801bc08 <__lshift+0xd0>)
 801bb66:	4829      	ldr	r0, [pc, #164]	; (801bc0c <__lshift+0xd4>)
 801bb68:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801bb6c:	f000 fbe8 	bl	801c340 <__assert_func>
 801bb70:	3101      	adds	r1, #1
 801bb72:	005b      	lsls	r3, r3, #1
 801bb74:	e7ee      	b.n	801bb54 <__lshift+0x1c>
 801bb76:	2300      	movs	r3, #0
 801bb78:	f100 0114 	add.w	r1, r0, #20
 801bb7c:	f100 0210 	add.w	r2, r0, #16
 801bb80:	4618      	mov	r0, r3
 801bb82:	4553      	cmp	r3, sl
 801bb84:	db33      	blt.n	801bbee <__lshift+0xb6>
 801bb86:	6920      	ldr	r0, [r4, #16]
 801bb88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801bb8c:	f104 0314 	add.w	r3, r4, #20
 801bb90:	f019 091f 	ands.w	r9, r9, #31
 801bb94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801bb98:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801bb9c:	d02b      	beq.n	801bbf6 <__lshift+0xbe>
 801bb9e:	f1c9 0e20 	rsb	lr, r9, #32
 801bba2:	468a      	mov	sl, r1
 801bba4:	2200      	movs	r2, #0
 801bba6:	6818      	ldr	r0, [r3, #0]
 801bba8:	fa00 f009 	lsl.w	r0, r0, r9
 801bbac:	4310      	orrs	r0, r2
 801bbae:	f84a 0b04 	str.w	r0, [sl], #4
 801bbb2:	f853 2b04 	ldr.w	r2, [r3], #4
 801bbb6:	459c      	cmp	ip, r3
 801bbb8:	fa22 f20e 	lsr.w	r2, r2, lr
 801bbbc:	d8f3      	bhi.n	801bba6 <__lshift+0x6e>
 801bbbe:	ebac 0304 	sub.w	r3, ip, r4
 801bbc2:	3b15      	subs	r3, #21
 801bbc4:	f023 0303 	bic.w	r3, r3, #3
 801bbc8:	3304      	adds	r3, #4
 801bbca:	f104 0015 	add.w	r0, r4, #21
 801bbce:	4584      	cmp	ip, r0
 801bbd0:	bf38      	it	cc
 801bbd2:	2304      	movcc	r3, #4
 801bbd4:	50ca      	str	r2, [r1, r3]
 801bbd6:	b10a      	cbz	r2, 801bbdc <__lshift+0xa4>
 801bbd8:	f108 0602 	add.w	r6, r8, #2
 801bbdc:	3e01      	subs	r6, #1
 801bbde:	4638      	mov	r0, r7
 801bbe0:	612e      	str	r6, [r5, #16]
 801bbe2:	4621      	mov	r1, r4
 801bbe4:	f7ff fdd8 	bl	801b798 <_Bfree>
 801bbe8:	4628      	mov	r0, r5
 801bbea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bbee:	f842 0f04 	str.w	r0, [r2, #4]!
 801bbf2:	3301      	adds	r3, #1
 801bbf4:	e7c5      	b.n	801bb82 <__lshift+0x4a>
 801bbf6:	3904      	subs	r1, #4
 801bbf8:	f853 2b04 	ldr.w	r2, [r3], #4
 801bbfc:	f841 2f04 	str.w	r2, [r1, #4]!
 801bc00:	459c      	cmp	ip, r3
 801bc02:	d8f9      	bhi.n	801bbf8 <__lshift+0xc0>
 801bc04:	e7ea      	b.n	801bbdc <__lshift+0xa4>
 801bc06:	bf00      	nop
 801bc08:	0801cc98 	.word	0x0801cc98
 801bc0c:	0801cca9 	.word	0x0801cca9

0801bc10 <__mcmp>:
 801bc10:	b530      	push	{r4, r5, lr}
 801bc12:	6902      	ldr	r2, [r0, #16]
 801bc14:	690c      	ldr	r4, [r1, #16]
 801bc16:	1b12      	subs	r2, r2, r4
 801bc18:	d10e      	bne.n	801bc38 <__mcmp+0x28>
 801bc1a:	f100 0314 	add.w	r3, r0, #20
 801bc1e:	3114      	adds	r1, #20
 801bc20:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801bc24:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801bc28:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801bc2c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801bc30:	42a5      	cmp	r5, r4
 801bc32:	d003      	beq.n	801bc3c <__mcmp+0x2c>
 801bc34:	d305      	bcc.n	801bc42 <__mcmp+0x32>
 801bc36:	2201      	movs	r2, #1
 801bc38:	4610      	mov	r0, r2
 801bc3a:	bd30      	pop	{r4, r5, pc}
 801bc3c:	4283      	cmp	r3, r0
 801bc3e:	d3f3      	bcc.n	801bc28 <__mcmp+0x18>
 801bc40:	e7fa      	b.n	801bc38 <__mcmp+0x28>
 801bc42:	f04f 32ff 	mov.w	r2, #4294967295
 801bc46:	e7f7      	b.n	801bc38 <__mcmp+0x28>

0801bc48 <__mdiff>:
 801bc48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc4c:	460c      	mov	r4, r1
 801bc4e:	4606      	mov	r6, r0
 801bc50:	4611      	mov	r1, r2
 801bc52:	4620      	mov	r0, r4
 801bc54:	4690      	mov	r8, r2
 801bc56:	f7ff ffdb 	bl	801bc10 <__mcmp>
 801bc5a:	1e05      	subs	r5, r0, #0
 801bc5c:	d110      	bne.n	801bc80 <__mdiff+0x38>
 801bc5e:	4629      	mov	r1, r5
 801bc60:	4630      	mov	r0, r6
 801bc62:	f7ff fd59 	bl	801b718 <_Balloc>
 801bc66:	b930      	cbnz	r0, 801bc76 <__mdiff+0x2e>
 801bc68:	4b3a      	ldr	r3, [pc, #232]	; (801bd54 <__mdiff+0x10c>)
 801bc6a:	4602      	mov	r2, r0
 801bc6c:	f240 2137 	movw	r1, #567	; 0x237
 801bc70:	4839      	ldr	r0, [pc, #228]	; (801bd58 <__mdiff+0x110>)
 801bc72:	f000 fb65 	bl	801c340 <__assert_func>
 801bc76:	2301      	movs	r3, #1
 801bc78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801bc7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc80:	bfa4      	itt	ge
 801bc82:	4643      	movge	r3, r8
 801bc84:	46a0      	movge	r8, r4
 801bc86:	4630      	mov	r0, r6
 801bc88:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801bc8c:	bfa6      	itte	ge
 801bc8e:	461c      	movge	r4, r3
 801bc90:	2500      	movge	r5, #0
 801bc92:	2501      	movlt	r5, #1
 801bc94:	f7ff fd40 	bl	801b718 <_Balloc>
 801bc98:	b920      	cbnz	r0, 801bca4 <__mdiff+0x5c>
 801bc9a:	4b2e      	ldr	r3, [pc, #184]	; (801bd54 <__mdiff+0x10c>)
 801bc9c:	4602      	mov	r2, r0
 801bc9e:	f240 2145 	movw	r1, #581	; 0x245
 801bca2:	e7e5      	b.n	801bc70 <__mdiff+0x28>
 801bca4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801bca8:	6926      	ldr	r6, [r4, #16]
 801bcaa:	60c5      	str	r5, [r0, #12]
 801bcac:	f104 0914 	add.w	r9, r4, #20
 801bcb0:	f108 0514 	add.w	r5, r8, #20
 801bcb4:	f100 0e14 	add.w	lr, r0, #20
 801bcb8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801bcbc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801bcc0:	f108 0210 	add.w	r2, r8, #16
 801bcc4:	46f2      	mov	sl, lr
 801bcc6:	2100      	movs	r1, #0
 801bcc8:	f859 3b04 	ldr.w	r3, [r9], #4
 801bccc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801bcd0:	fa11 f88b 	uxtah	r8, r1, fp
 801bcd4:	b299      	uxth	r1, r3
 801bcd6:	0c1b      	lsrs	r3, r3, #16
 801bcd8:	eba8 0801 	sub.w	r8, r8, r1
 801bcdc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801bce0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801bce4:	fa1f f888 	uxth.w	r8, r8
 801bce8:	1419      	asrs	r1, r3, #16
 801bcea:	454e      	cmp	r6, r9
 801bcec:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801bcf0:	f84a 3b04 	str.w	r3, [sl], #4
 801bcf4:	d8e8      	bhi.n	801bcc8 <__mdiff+0x80>
 801bcf6:	1b33      	subs	r3, r6, r4
 801bcf8:	3b15      	subs	r3, #21
 801bcfa:	f023 0303 	bic.w	r3, r3, #3
 801bcfe:	3304      	adds	r3, #4
 801bd00:	3415      	adds	r4, #21
 801bd02:	42a6      	cmp	r6, r4
 801bd04:	bf38      	it	cc
 801bd06:	2304      	movcc	r3, #4
 801bd08:	441d      	add	r5, r3
 801bd0a:	4473      	add	r3, lr
 801bd0c:	469e      	mov	lr, r3
 801bd0e:	462e      	mov	r6, r5
 801bd10:	4566      	cmp	r6, ip
 801bd12:	d30e      	bcc.n	801bd32 <__mdiff+0xea>
 801bd14:	f10c 0203 	add.w	r2, ip, #3
 801bd18:	1b52      	subs	r2, r2, r5
 801bd1a:	f022 0203 	bic.w	r2, r2, #3
 801bd1e:	3d03      	subs	r5, #3
 801bd20:	45ac      	cmp	ip, r5
 801bd22:	bf38      	it	cc
 801bd24:	2200      	movcc	r2, #0
 801bd26:	4413      	add	r3, r2
 801bd28:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801bd2c:	b17a      	cbz	r2, 801bd4e <__mdiff+0x106>
 801bd2e:	6107      	str	r7, [r0, #16]
 801bd30:	e7a4      	b.n	801bc7c <__mdiff+0x34>
 801bd32:	f856 8b04 	ldr.w	r8, [r6], #4
 801bd36:	fa11 f288 	uxtah	r2, r1, r8
 801bd3a:	1414      	asrs	r4, r2, #16
 801bd3c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801bd40:	b292      	uxth	r2, r2
 801bd42:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801bd46:	f84e 2b04 	str.w	r2, [lr], #4
 801bd4a:	1421      	asrs	r1, r4, #16
 801bd4c:	e7e0      	b.n	801bd10 <__mdiff+0xc8>
 801bd4e:	3f01      	subs	r7, #1
 801bd50:	e7ea      	b.n	801bd28 <__mdiff+0xe0>
 801bd52:	bf00      	nop
 801bd54:	0801cc98 	.word	0x0801cc98
 801bd58:	0801cca9 	.word	0x0801cca9

0801bd5c <__d2b>:
 801bd5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801bd60:	460f      	mov	r7, r1
 801bd62:	2101      	movs	r1, #1
 801bd64:	ec59 8b10 	vmov	r8, r9, d0
 801bd68:	4616      	mov	r6, r2
 801bd6a:	f7ff fcd5 	bl	801b718 <_Balloc>
 801bd6e:	4604      	mov	r4, r0
 801bd70:	b930      	cbnz	r0, 801bd80 <__d2b+0x24>
 801bd72:	4602      	mov	r2, r0
 801bd74:	4b24      	ldr	r3, [pc, #144]	; (801be08 <__d2b+0xac>)
 801bd76:	4825      	ldr	r0, [pc, #148]	; (801be0c <__d2b+0xb0>)
 801bd78:	f240 310f 	movw	r1, #783	; 0x30f
 801bd7c:	f000 fae0 	bl	801c340 <__assert_func>
 801bd80:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801bd84:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801bd88:	bb2d      	cbnz	r5, 801bdd6 <__d2b+0x7a>
 801bd8a:	9301      	str	r3, [sp, #4]
 801bd8c:	f1b8 0300 	subs.w	r3, r8, #0
 801bd90:	d026      	beq.n	801bde0 <__d2b+0x84>
 801bd92:	4668      	mov	r0, sp
 801bd94:	9300      	str	r3, [sp, #0]
 801bd96:	f7ff fd87 	bl	801b8a8 <__lo0bits>
 801bd9a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801bd9e:	b1e8      	cbz	r0, 801bddc <__d2b+0x80>
 801bda0:	f1c0 0320 	rsb	r3, r0, #32
 801bda4:	fa02 f303 	lsl.w	r3, r2, r3
 801bda8:	430b      	orrs	r3, r1
 801bdaa:	40c2      	lsrs	r2, r0
 801bdac:	6163      	str	r3, [r4, #20]
 801bdae:	9201      	str	r2, [sp, #4]
 801bdb0:	9b01      	ldr	r3, [sp, #4]
 801bdb2:	61a3      	str	r3, [r4, #24]
 801bdb4:	2b00      	cmp	r3, #0
 801bdb6:	bf14      	ite	ne
 801bdb8:	2202      	movne	r2, #2
 801bdba:	2201      	moveq	r2, #1
 801bdbc:	6122      	str	r2, [r4, #16]
 801bdbe:	b1bd      	cbz	r5, 801bdf0 <__d2b+0x94>
 801bdc0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801bdc4:	4405      	add	r5, r0
 801bdc6:	603d      	str	r5, [r7, #0]
 801bdc8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801bdcc:	6030      	str	r0, [r6, #0]
 801bdce:	4620      	mov	r0, r4
 801bdd0:	b003      	add	sp, #12
 801bdd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bdd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801bdda:	e7d6      	b.n	801bd8a <__d2b+0x2e>
 801bddc:	6161      	str	r1, [r4, #20]
 801bdde:	e7e7      	b.n	801bdb0 <__d2b+0x54>
 801bde0:	a801      	add	r0, sp, #4
 801bde2:	f7ff fd61 	bl	801b8a8 <__lo0bits>
 801bde6:	9b01      	ldr	r3, [sp, #4]
 801bde8:	6163      	str	r3, [r4, #20]
 801bdea:	3020      	adds	r0, #32
 801bdec:	2201      	movs	r2, #1
 801bdee:	e7e5      	b.n	801bdbc <__d2b+0x60>
 801bdf0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801bdf4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801bdf8:	6038      	str	r0, [r7, #0]
 801bdfa:	6918      	ldr	r0, [r3, #16]
 801bdfc:	f7ff fd34 	bl	801b868 <__hi0bits>
 801be00:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801be04:	e7e2      	b.n	801bdcc <__d2b+0x70>
 801be06:	bf00      	nop
 801be08:	0801cc98 	.word	0x0801cc98
 801be0c:	0801cca9 	.word	0x0801cca9

0801be10 <__sfputc_r>:
 801be10:	6893      	ldr	r3, [r2, #8]
 801be12:	3b01      	subs	r3, #1
 801be14:	2b00      	cmp	r3, #0
 801be16:	b410      	push	{r4}
 801be18:	6093      	str	r3, [r2, #8]
 801be1a:	da08      	bge.n	801be2e <__sfputc_r+0x1e>
 801be1c:	6994      	ldr	r4, [r2, #24]
 801be1e:	42a3      	cmp	r3, r4
 801be20:	db01      	blt.n	801be26 <__sfputc_r+0x16>
 801be22:	290a      	cmp	r1, #10
 801be24:	d103      	bne.n	801be2e <__sfputc_r+0x1e>
 801be26:	f85d 4b04 	ldr.w	r4, [sp], #4
 801be2a:	f000 b9e3 	b.w	801c1f4 <__swbuf_r>
 801be2e:	6813      	ldr	r3, [r2, #0]
 801be30:	1c58      	adds	r0, r3, #1
 801be32:	6010      	str	r0, [r2, #0]
 801be34:	7019      	strb	r1, [r3, #0]
 801be36:	4608      	mov	r0, r1
 801be38:	f85d 4b04 	ldr.w	r4, [sp], #4
 801be3c:	4770      	bx	lr

0801be3e <__sfputs_r>:
 801be3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801be40:	4606      	mov	r6, r0
 801be42:	460f      	mov	r7, r1
 801be44:	4614      	mov	r4, r2
 801be46:	18d5      	adds	r5, r2, r3
 801be48:	42ac      	cmp	r4, r5
 801be4a:	d101      	bne.n	801be50 <__sfputs_r+0x12>
 801be4c:	2000      	movs	r0, #0
 801be4e:	e007      	b.n	801be60 <__sfputs_r+0x22>
 801be50:	f814 1b01 	ldrb.w	r1, [r4], #1
 801be54:	463a      	mov	r2, r7
 801be56:	4630      	mov	r0, r6
 801be58:	f7ff ffda 	bl	801be10 <__sfputc_r>
 801be5c:	1c43      	adds	r3, r0, #1
 801be5e:	d1f3      	bne.n	801be48 <__sfputs_r+0xa>
 801be60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801be64 <_vfiprintf_r>:
 801be64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be68:	460d      	mov	r5, r1
 801be6a:	b09d      	sub	sp, #116	; 0x74
 801be6c:	4614      	mov	r4, r2
 801be6e:	4698      	mov	r8, r3
 801be70:	4606      	mov	r6, r0
 801be72:	b118      	cbz	r0, 801be7c <_vfiprintf_r+0x18>
 801be74:	6a03      	ldr	r3, [r0, #32]
 801be76:	b90b      	cbnz	r3, 801be7c <_vfiprintf_r+0x18>
 801be78:	f7fe fc40 	bl	801a6fc <__sinit>
 801be7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801be7e:	07d9      	lsls	r1, r3, #31
 801be80:	d405      	bmi.n	801be8e <_vfiprintf_r+0x2a>
 801be82:	89ab      	ldrh	r3, [r5, #12]
 801be84:	059a      	lsls	r2, r3, #22
 801be86:	d402      	bmi.n	801be8e <_vfiprintf_r+0x2a>
 801be88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801be8a:	f7fe fd40 	bl	801a90e <__retarget_lock_acquire_recursive>
 801be8e:	89ab      	ldrh	r3, [r5, #12]
 801be90:	071b      	lsls	r3, r3, #28
 801be92:	d501      	bpl.n	801be98 <_vfiprintf_r+0x34>
 801be94:	692b      	ldr	r3, [r5, #16]
 801be96:	b99b      	cbnz	r3, 801bec0 <_vfiprintf_r+0x5c>
 801be98:	4629      	mov	r1, r5
 801be9a:	4630      	mov	r0, r6
 801be9c:	f000 f9e8 	bl	801c270 <__swsetup_r>
 801bea0:	b170      	cbz	r0, 801bec0 <_vfiprintf_r+0x5c>
 801bea2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bea4:	07dc      	lsls	r4, r3, #31
 801bea6:	d504      	bpl.n	801beb2 <_vfiprintf_r+0x4e>
 801bea8:	f04f 30ff 	mov.w	r0, #4294967295
 801beac:	b01d      	add	sp, #116	; 0x74
 801beae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801beb2:	89ab      	ldrh	r3, [r5, #12]
 801beb4:	0598      	lsls	r0, r3, #22
 801beb6:	d4f7      	bmi.n	801bea8 <_vfiprintf_r+0x44>
 801beb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801beba:	f7fe fd29 	bl	801a910 <__retarget_lock_release_recursive>
 801bebe:	e7f3      	b.n	801bea8 <_vfiprintf_r+0x44>
 801bec0:	2300      	movs	r3, #0
 801bec2:	9309      	str	r3, [sp, #36]	; 0x24
 801bec4:	2320      	movs	r3, #32
 801bec6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801beca:	f8cd 800c 	str.w	r8, [sp, #12]
 801bece:	2330      	movs	r3, #48	; 0x30
 801bed0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801c084 <_vfiprintf_r+0x220>
 801bed4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801bed8:	f04f 0901 	mov.w	r9, #1
 801bedc:	4623      	mov	r3, r4
 801bede:	469a      	mov	sl, r3
 801bee0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bee4:	b10a      	cbz	r2, 801beea <_vfiprintf_r+0x86>
 801bee6:	2a25      	cmp	r2, #37	; 0x25
 801bee8:	d1f9      	bne.n	801bede <_vfiprintf_r+0x7a>
 801beea:	ebba 0b04 	subs.w	fp, sl, r4
 801beee:	d00b      	beq.n	801bf08 <_vfiprintf_r+0xa4>
 801bef0:	465b      	mov	r3, fp
 801bef2:	4622      	mov	r2, r4
 801bef4:	4629      	mov	r1, r5
 801bef6:	4630      	mov	r0, r6
 801bef8:	f7ff ffa1 	bl	801be3e <__sfputs_r>
 801befc:	3001      	adds	r0, #1
 801befe:	f000 80a9 	beq.w	801c054 <_vfiprintf_r+0x1f0>
 801bf02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bf04:	445a      	add	r2, fp
 801bf06:	9209      	str	r2, [sp, #36]	; 0x24
 801bf08:	f89a 3000 	ldrb.w	r3, [sl]
 801bf0c:	2b00      	cmp	r3, #0
 801bf0e:	f000 80a1 	beq.w	801c054 <_vfiprintf_r+0x1f0>
 801bf12:	2300      	movs	r3, #0
 801bf14:	f04f 32ff 	mov.w	r2, #4294967295
 801bf18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bf1c:	f10a 0a01 	add.w	sl, sl, #1
 801bf20:	9304      	str	r3, [sp, #16]
 801bf22:	9307      	str	r3, [sp, #28]
 801bf24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801bf28:	931a      	str	r3, [sp, #104]	; 0x68
 801bf2a:	4654      	mov	r4, sl
 801bf2c:	2205      	movs	r2, #5
 801bf2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bf32:	4854      	ldr	r0, [pc, #336]	; (801c084 <_vfiprintf_r+0x220>)
 801bf34:	f7e4 f9d4 	bl	80002e0 <memchr>
 801bf38:	9a04      	ldr	r2, [sp, #16]
 801bf3a:	b9d8      	cbnz	r0, 801bf74 <_vfiprintf_r+0x110>
 801bf3c:	06d1      	lsls	r1, r2, #27
 801bf3e:	bf44      	itt	mi
 801bf40:	2320      	movmi	r3, #32
 801bf42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bf46:	0713      	lsls	r3, r2, #28
 801bf48:	bf44      	itt	mi
 801bf4a:	232b      	movmi	r3, #43	; 0x2b
 801bf4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bf50:	f89a 3000 	ldrb.w	r3, [sl]
 801bf54:	2b2a      	cmp	r3, #42	; 0x2a
 801bf56:	d015      	beq.n	801bf84 <_vfiprintf_r+0x120>
 801bf58:	9a07      	ldr	r2, [sp, #28]
 801bf5a:	4654      	mov	r4, sl
 801bf5c:	2000      	movs	r0, #0
 801bf5e:	f04f 0c0a 	mov.w	ip, #10
 801bf62:	4621      	mov	r1, r4
 801bf64:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bf68:	3b30      	subs	r3, #48	; 0x30
 801bf6a:	2b09      	cmp	r3, #9
 801bf6c:	d94d      	bls.n	801c00a <_vfiprintf_r+0x1a6>
 801bf6e:	b1b0      	cbz	r0, 801bf9e <_vfiprintf_r+0x13a>
 801bf70:	9207      	str	r2, [sp, #28]
 801bf72:	e014      	b.n	801bf9e <_vfiprintf_r+0x13a>
 801bf74:	eba0 0308 	sub.w	r3, r0, r8
 801bf78:	fa09 f303 	lsl.w	r3, r9, r3
 801bf7c:	4313      	orrs	r3, r2
 801bf7e:	9304      	str	r3, [sp, #16]
 801bf80:	46a2      	mov	sl, r4
 801bf82:	e7d2      	b.n	801bf2a <_vfiprintf_r+0xc6>
 801bf84:	9b03      	ldr	r3, [sp, #12]
 801bf86:	1d19      	adds	r1, r3, #4
 801bf88:	681b      	ldr	r3, [r3, #0]
 801bf8a:	9103      	str	r1, [sp, #12]
 801bf8c:	2b00      	cmp	r3, #0
 801bf8e:	bfbb      	ittet	lt
 801bf90:	425b      	neglt	r3, r3
 801bf92:	f042 0202 	orrlt.w	r2, r2, #2
 801bf96:	9307      	strge	r3, [sp, #28]
 801bf98:	9307      	strlt	r3, [sp, #28]
 801bf9a:	bfb8      	it	lt
 801bf9c:	9204      	strlt	r2, [sp, #16]
 801bf9e:	7823      	ldrb	r3, [r4, #0]
 801bfa0:	2b2e      	cmp	r3, #46	; 0x2e
 801bfa2:	d10c      	bne.n	801bfbe <_vfiprintf_r+0x15a>
 801bfa4:	7863      	ldrb	r3, [r4, #1]
 801bfa6:	2b2a      	cmp	r3, #42	; 0x2a
 801bfa8:	d134      	bne.n	801c014 <_vfiprintf_r+0x1b0>
 801bfaa:	9b03      	ldr	r3, [sp, #12]
 801bfac:	1d1a      	adds	r2, r3, #4
 801bfae:	681b      	ldr	r3, [r3, #0]
 801bfb0:	9203      	str	r2, [sp, #12]
 801bfb2:	2b00      	cmp	r3, #0
 801bfb4:	bfb8      	it	lt
 801bfb6:	f04f 33ff 	movlt.w	r3, #4294967295
 801bfba:	3402      	adds	r4, #2
 801bfbc:	9305      	str	r3, [sp, #20]
 801bfbe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801c094 <_vfiprintf_r+0x230>
 801bfc2:	7821      	ldrb	r1, [r4, #0]
 801bfc4:	2203      	movs	r2, #3
 801bfc6:	4650      	mov	r0, sl
 801bfc8:	f7e4 f98a 	bl	80002e0 <memchr>
 801bfcc:	b138      	cbz	r0, 801bfde <_vfiprintf_r+0x17a>
 801bfce:	9b04      	ldr	r3, [sp, #16]
 801bfd0:	eba0 000a 	sub.w	r0, r0, sl
 801bfd4:	2240      	movs	r2, #64	; 0x40
 801bfd6:	4082      	lsls	r2, r0
 801bfd8:	4313      	orrs	r3, r2
 801bfda:	3401      	adds	r4, #1
 801bfdc:	9304      	str	r3, [sp, #16]
 801bfde:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bfe2:	4829      	ldr	r0, [pc, #164]	; (801c088 <_vfiprintf_r+0x224>)
 801bfe4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801bfe8:	2206      	movs	r2, #6
 801bfea:	f7e4 f979 	bl	80002e0 <memchr>
 801bfee:	2800      	cmp	r0, #0
 801bff0:	d03f      	beq.n	801c072 <_vfiprintf_r+0x20e>
 801bff2:	4b26      	ldr	r3, [pc, #152]	; (801c08c <_vfiprintf_r+0x228>)
 801bff4:	bb1b      	cbnz	r3, 801c03e <_vfiprintf_r+0x1da>
 801bff6:	9b03      	ldr	r3, [sp, #12]
 801bff8:	3307      	adds	r3, #7
 801bffa:	f023 0307 	bic.w	r3, r3, #7
 801bffe:	3308      	adds	r3, #8
 801c000:	9303      	str	r3, [sp, #12]
 801c002:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c004:	443b      	add	r3, r7
 801c006:	9309      	str	r3, [sp, #36]	; 0x24
 801c008:	e768      	b.n	801bedc <_vfiprintf_r+0x78>
 801c00a:	fb0c 3202 	mla	r2, ip, r2, r3
 801c00e:	460c      	mov	r4, r1
 801c010:	2001      	movs	r0, #1
 801c012:	e7a6      	b.n	801bf62 <_vfiprintf_r+0xfe>
 801c014:	2300      	movs	r3, #0
 801c016:	3401      	adds	r4, #1
 801c018:	9305      	str	r3, [sp, #20]
 801c01a:	4619      	mov	r1, r3
 801c01c:	f04f 0c0a 	mov.w	ip, #10
 801c020:	4620      	mov	r0, r4
 801c022:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c026:	3a30      	subs	r2, #48	; 0x30
 801c028:	2a09      	cmp	r2, #9
 801c02a:	d903      	bls.n	801c034 <_vfiprintf_r+0x1d0>
 801c02c:	2b00      	cmp	r3, #0
 801c02e:	d0c6      	beq.n	801bfbe <_vfiprintf_r+0x15a>
 801c030:	9105      	str	r1, [sp, #20]
 801c032:	e7c4      	b.n	801bfbe <_vfiprintf_r+0x15a>
 801c034:	fb0c 2101 	mla	r1, ip, r1, r2
 801c038:	4604      	mov	r4, r0
 801c03a:	2301      	movs	r3, #1
 801c03c:	e7f0      	b.n	801c020 <_vfiprintf_r+0x1bc>
 801c03e:	ab03      	add	r3, sp, #12
 801c040:	9300      	str	r3, [sp, #0]
 801c042:	462a      	mov	r2, r5
 801c044:	4b12      	ldr	r3, [pc, #72]	; (801c090 <_vfiprintf_r+0x22c>)
 801c046:	a904      	add	r1, sp, #16
 801c048:	4630      	mov	r0, r6
 801c04a:	f7fd ff21 	bl	8019e90 <_printf_float>
 801c04e:	4607      	mov	r7, r0
 801c050:	1c78      	adds	r0, r7, #1
 801c052:	d1d6      	bne.n	801c002 <_vfiprintf_r+0x19e>
 801c054:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c056:	07d9      	lsls	r1, r3, #31
 801c058:	d405      	bmi.n	801c066 <_vfiprintf_r+0x202>
 801c05a:	89ab      	ldrh	r3, [r5, #12]
 801c05c:	059a      	lsls	r2, r3, #22
 801c05e:	d402      	bmi.n	801c066 <_vfiprintf_r+0x202>
 801c060:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c062:	f7fe fc55 	bl	801a910 <__retarget_lock_release_recursive>
 801c066:	89ab      	ldrh	r3, [r5, #12]
 801c068:	065b      	lsls	r3, r3, #25
 801c06a:	f53f af1d 	bmi.w	801bea8 <_vfiprintf_r+0x44>
 801c06e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c070:	e71c      	b.n	801beac <_vfiprintf_r+0x48>
 801c072:	ab03      	add	r3, sp, #12
 801c074:	9300      	str	r3, [sp, #0]
 801c076:	462a      	mov	r2, r5
 801c078:	4b05      	ldr	r3, [pc, #20]	; (801c090 <_vfiprintf_r+0x22c>)
 801c07a:	a904      	add	r1, sp, #16
 801c07c:	4630      	mov	r0, r6
 801c07e:	f7fe f98f 	bl	801a3a0 <_printf_i>
 801c082:	e7e4      	b.n	801c04e <_vfiprintf_r+0x1ea>
 801c084:	0801ce04 	.word	0x0801ce04
 801c088:	0801ce0e 	.word	0x0801ce0e
 801c08c:	08019e91 	.word	0x08019e91
 801c090:	0801be3f 	.word	0x0801be3f
 801c094:	0801ce0a 	.word	0x0801ce0a

0801c098 <__sflush_r>:
 801c098:	898a      	ldrh	r2, [r1, #12]
 801c09a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c09e:	4605      	mov	r5, r0
 801c0a0:	0710      	lsls	r0, r2, #28
 801c0a2:	460c      	mov	r4, r1
 801c0a4:	d458      	bmi.n	801c158 <__sflush_r+0xc0>
 801c0a6:	684b      	ldr	r3, [r1, #4]
 801c0a8:	2b00      	cmp	r3, #0
 801c0aa:	dc05      	bgt.n	801c0b8 <__sflush_r+0x20>
 801c0ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801c0ae:	2b00      	cmp	r3, #0
 801c0b0:	dc02      	bgt.n	801c0b8 <__sflush_r+0x20>
 801c0b2:	2000      	movs	r0, #0
 801c0b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c0b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c0ba:	2e00      	cmp	r6, #0
 801c0bc:	d0f9      	beq.n	801c0b2 <__sflush_r+0x1a>
 801c0be:	2300      	movs	r3, #0
 801c0c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801c0c4:	682f      	ldr	r7, [r5, #0]
 801c0c6:	6a21      	ldr	r1, [r4, #32]
 801c0c8:	602b      	str	r3, [r5, #0]
 801c0ca:	d032      	beq.n	801c132 <__sflush_r+0x9a>
 801c0cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801c0ce:	89a3      	ldrh	r3, [r4, #12]
 801c0d0:	075a      	lsls	r2, r3, #29
 801c0d2:	d505      	bpl.n	801c0e0 <__sflush_r+0x48>
 801c0d4:	6863      	ldr	r3, [r4, #4]
 801c0d6:	1ac0      	subs	r0, r0, r3
 801c0d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c0da:	b10b      	cbz	r3, 801c0e0 <__sflush_r+0x48>
 801c0dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c0de:	1ac0      	subs	r0, r0, r3
 801c0e0:	2300      	movs	r3, #0
 801c0e2:	4602      	mov	r2, r0
 801c0e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c0e6:	6a21      	ldr	r1, [r4, #32]
 801c0e8:	4628      	mov	r0, r5
 801c0ea:	47b0      	blx	r6
 801c0ec:	1c43      	adds	r3, r0, #1
 801c0ee:	89a3      	ldrh	r3, [r4, #12]
 801c0f0:	d106      	bne.n	801c100 <__sflush_r+0x68>
 801c0f2:	6829      	ldr	r1, [r5, #0]
 801c0f4:	291d      	cmp	r1, #29
 801c0f6:	d82b      	bhi.n	801c150 <__sflush_r+0xb8>
 801c0f8:	4a29      	ldr	r2, [pc, #164]	; (801c1a0 <__sflush_r+0x108>)
 801c0fa:	410a      	asrs	r2, r1
 801c0fc:	07d6      	lsls	r6, r2, #31
 801c0fe:	d427      	bmi.n	801c150 <__sflush_r+0xb8>
 801c100:	2200      	movs	r2, #0
 801c102:	6062      	str	r2, [r4, #4]
 801c104:	04d9      	lsls	r1, r3, #19
 801c106:	6922      	ldr	r2, [r4, #16]
 801c108:	6022      	str	r2, [r4, #0]
 801c10a:	d504      	bpl.n	801c116 <__sflush_r+0x7e>
 801c10c:	1c42      	adds	r2, r0, #1
 801c10e:	d101      	bne.n	801c114 <__sflush_r+0x7c>
 801c110:	682b      	ldr	r3, [r5, #0]
 801c112:	b903      	cbnz	r3, 801c116 <__sflush_r+0x7e>
 801c114:	6560      	str	r0, [r4, #84]	; 0x54
 801c116:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c118:	602f      	str	r7, [r5, #0]
 801c11a:	2900      	cmp	r1, #0
 801c11c:	d0c9      	beq.n	801c0b2 <__sflush_r+0x1a>
 801c11e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c122:	4299      	cmp	r1, r3
 801c124:	d002      	beq.n	801c12c <__sflush_r+0x94>
 801c126:	4628      	mov	r0, r5
 801c128:	f7ff f9f6 	bl	801b518 <_free_r>
 801c12c:	2000      	movs	r0, #0
 801c12e:	6360      	str	r0, [r4, #52]	; 0x34
 801c130:	e7c0      	b.n	801c0b4 <__sflush_r+0x1c>
 801c132:	2301      	movs	r3, #1
 801c134:	4628      	mov	r0, r5
 801c136:	47b0      	blx	r6
 801c138:	1c41      	adds	r1, r0, #1
 801c13a:	d1c8      	bne.n	801c0ce <__sflush_r+0x36>
 801c13c:	682b      	ldr	r3, [r5, #0]
 801c13e:	2b00      	cmp	r3, #0
 801c140:	d0c5      	beq.n	801c0ce <__sflush_r+0x36>
 801c142:	2b1d      	cmp	r3, #29
 801c144:	d001      	beq.n	801c14a <__sflush_r+0xb2>
 801c146:	2b16      	cmp	r3, #22
 801c148:	d101      	bne.n	801c14e <__sflush_r+0xb6>
 801c14a:	602f      	str	r7, [r5, #0]
 801c14c:	e7b1      	b.n	801c0b2 <__sflush_r+0x1a>
 801c14e:	89a3      	ldrh	r3, [r4, #12]
 801c150:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c154:	81a3      	strh	r3, [r4, #12]
 801c156:	e7ad      	b.n	801c0b4 <__sflush_r+0x1c>
 801c158:	690f      	ldr	r7, [r1, #16]
 801c15a:	2f00      	cmp	r7, #0
 801c15c:	d0a9      	beq.n	801c0b2 <__sflush_r+0x1a>
 801c15e:	0793      	lsls	r3, r2, #30
 801c160:	680e      	ldr	r6, [r1, #0]
 801c162:	bf08      	it	eq
 801c164:	694b      	ldreq	r3, [r1, #20]
 801c166:	600f      	str	r7, [r1, #0]
 801c168:	bf18      	it	ne
 801c16a:	2300      	movne	r3, #0
 801c16c:	eba6 0807 	sub.w	r8, r6, r7
 801c170:	608b      	str	r3, [r1, #8]
 801c172:	f1b8 0f00 	cmp.w	r8, #0
 801c176:	dd9c      	ble.n	801c0b2 <__sflush_r+0x1a>
 801c178:	6a21      	ldr	r1, [r4, #32]
 801c17a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801c17c:	4643      	mov	r3, r8
 801c17e:	463a      	mov	r2, r7
 801c180:	4628      	mov	r0, r5
 801c182:	47b0      	blx	r6
 801c184:	2800      	cmp	r0, #0
 801c186:	dc06      	bgt.n	801c196 <__sflush_r+0xfe>
 801c188:	89a3      	ldrh	r3, [r4, #12]
 801c18a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c18e:	81a3      	strh	r3, [r4, #12]
 801c190:	f04f 30ff 	mov.w	r0, #4294967295
 801c194:	e78e      	b.n	801c0b4 <__sflush_r+0x1c>
 801c196:	4407      	add	r7, r0
 801c198:	eba8 0800 	sub.w	r8, r8, r0
 801c19c:	e7e9      	b.n	801c172 <__sflush_r+0xda>
 801c19e:	bf00      	nop
 801c1a0:	dfbffffe 	.word	0xdfbffffe

0801c1a4 <_fflush_r>:
 801c1a4:	b538      	push	{r3, r4, r5, lr}
 801c1a6:	690b      	ldr	r3, [r1, #16]
 801c1a8:	4605      	mov	r5, r0
 801c1aa:	460c      	mov	r4, r1
 801c1ac:	b913      	cbnz	r3, 801c1b4 <_fflush_r+0x10>
 801c1ae:	2500      	movs	r5, #0
 801c1b0:	4628      	mov	r0, r5
 801c1b2:	bd38      	pop	{r3, r4, r5, pc}
 801c1b4:	b118      	cbz	r0, 801c1be <_fflush_r+0x1a>
 801c1b6:	6a03      	ldr	r3, [r0, #32]
 801c1b8:	b90b      	cbnz	r3, 801c1be <_fflush_r+0x1a>
 801c1ba:	f7fe fa9f 	bl	801a6fc <__sinit>
 801c1be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c1c2:	2b00      	cmp	r3, #0
 801c1c4:	d0f3      	beq.n	801c1ae <_fflush_r+0xa>
 801c1c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801c1c8:	07d0      	lsls	r0, r2, #31
 801c1ca:	d404      	bmi.n	801c1d6 <_fflush_r+0x32>
 801c1cc:	0599      	lsls	r1, r3, #22
 801c1ce:	d402      	bmi.n	801c1d6 <_fflush_r+0x32>
 801c1d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c1d2:	f7fe fb9c 	bl	801a90e <__retarget_lock_acquire_recursive>
 801c1d6:	4628      	mov	r0, r5
 801c1d8:	4621      	mov	r1, r4
 801c1da:	f7ff ff5d 	bl	801c098 <__sflush_r>
 801c1de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c1e0:	07da      	lsls	r2, r3, #31
 801c1e2:	4605      	mov	r5, r0
 801c1e4:	d4e4      	bmi.n	801c1b0 <_fflush_r+0xc>
 801c1e6:	89a3      	ldrh	r3, [r4, #12]
 801c1e8:	059b      	lsls	r3, r3, #22
 801c1ea:	d4e1      	bmi.n	801c1b0 <_fflush_r+0xc>
 801c1ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c1ee:	f7fe fb8f 	bl	801a910 <__retarget_lock_release_recursive>
 801c1f2:	e7dd      	b.n	801c1b0 <_fflush_r+0xc>

0801c1f4 <__swbuf_r>:
 801c1f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c1f6:	460e      	mov	r6, r1
 801c1f8:	4614      	mov	r4, r2
 801c1fa:	4605      	mov	r5, r0
 801c1fc:	b118      	cbz	r0, 801c206 <__swbuf_r+0x12>
 801c1fe:	6a03      	ldr	r3, [r0, #32]
 801c200:	b90b      	cbnz	r3, 801c206 <__swbuf_r+0x12>
 801c202:	f7fe fa7b 	bl	801a6fc <__sinit>
 801c206:	69a3      	ldr	r3, [r4, #24]
 801c208:	60a3      	str	r3, [r4, #8]
 801c20a:	89a3      	ldrh	r3, [r4, #12]
 801c20c:	071a      	lsls	r2, r3, #28
 801c20e:	d525      	bpl.n	801c25c <__swbuf_r+0x68>
 801c210:	6923      	ldr	r3, [r4, #16]
 801c212:	b31b      	cbz	r3, 801c25c <__swbuf_r+0x68>
 801c214:	6823      	ldr	r3, [r4, #0]
 801c216:	6922      	ldr	r2, [r4, #16]
 801c218:	1a98      	subs	r0, r3, r2
 801c21a:	6963      	ldr	r3, [r4, #20]
 801c21c:	b2f6      	uxtb	r6, r6
 801c21e:	4283      	cmp	r3, r0
 801c220:	4637      	mov	r7, r6
 801c222:	dc04      	bgt.n	801c22e <__swbuf_r+0x3a>
 801c224:	4621      	mov	r1, r4
 801c226:	4628      	mov	r0, r5
 801c228:	f7ff ffbc 	bl	801c1a4 <_fflush_r>
 801c22c:	b9e0      	cbnz	r0, 801c268 <__swbuf_r+0x74>
 801c22e:	68a3      	ldr	r3, [r4, #8]
 801c230:	3b01      	subs	r3, #1
 801c232:	60a3      	str	r3, [r4, #8]
 801c234:	6823      	ldr	r3, [r4, #0]
 801c236:	1c5a      	adds	r2, r3, #1
 801c238:	6022      	str	r2, [r4, #0]
 801c23a:	701e      	strb	r6, [r3, #0]
 801c23c:	6962      	ldr	r2, [r4, #20]
 801c23e:	1c43      	adds	r3, r0, #1
 801c240:	429a      	cmp	r2, r3
 801c242:	d004      	beq.n	801c24e <__swbuf_r+0x5a>
 801c244:	89a3      	ldrh	r3, [r4, #12]
 801c246:	07db      	lsls	r3, r3, #31
 801c248:	d506      	bpl.n	801c258 <__swbuf_r+0x64>
 801c24a:	2e0a      	cmp	r6, #10
 801c24c:	d104      	bne.n	801c258 <__swbuf_r+0x64>
 801c24e:	4621      	mov	r1, r4
 801c250:	4628      	mov	r0, r5
 801c252:	f7ff ffa7 	bl	801c1a4 <_fflush_r>
 801c256:	b938      	cbnz	r0, 801c268 <__swbuf_r+0x74>
 801c258:	4638      	mov	r0, r7
 801c25a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c25c:	4621      	mov	r1, r4
 801c25e:	4628      	mov	r0, r5
 801c260:	f000 f806 	bl	801c270 <__swsetup_r>
 801c264:	2800      	cmp	r0, #0
 801c266:	d0d5      	beq.n	801c214 <__swbuf_r+0x20>
 801c268:	f04f 37ff 	mov.w	r7, #4294967295
 801c26c:	e7f4      	b.n	801c258 <__swbuf_r+0x64>
	...

0801c270 <__swsetup_r>:
 801c270:	b538      	push	{r3, r4, r5, lr}
 801c272:	4b2a      	ldr	r3, [pc, #168]	; (801c31c <__swsetup_r+0xac>)
 801c274:	4605      	mov	r5, r0
 801c276:	6818      	ldr	r0, [r3, #0]
 801c278:	460c      	mov	r4, r1
 801c27a:	b118      	cbz	r0, 801c284 <__swsetup_r+0x14>
 801c27c:	6a03      	ldr	r3, [r0, #32]
 801c27e:	b90b      	cbnz	r3, 801c284 <__swsetup_r+0x14>
 801c280:	f7fe fa3c 	bl	801a6fc <__sinit>
 801c284:	89a3      	ldrh	r3, [r4, #12]
 801c286:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c28a:	0718      	lsls	r0, r3, #28
 801c28c:	d422      	bmi.n	801c2d4 <__swsetup_r+0x64>
 801c28e:	06d9      	lsls	r1, r3, #27
 801c290:	d407      	bmi.n	801c2a2 <__swsetup_r+0x32>
 801c292:	2309      	movs	r3, #9
 801c294:	602b      	str	r3, [r5, #0]
 801c296:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801c29a:	81a3      	strh	r3, [r4, #12]
 801c29c:	f04f 30ff 	mov.w	r0, #4294967295
 801c2a0:	e034      	b.n	801c30c <__swsetup_r+0x9c>
 801c2a2:	0758      	lsls	r0, r3, #29
 801c2a4:	d512      	bpl.n	801c2cc <__swsetup_r+0x5c>
 801c2a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c2a8:	b141      	cbz	r1, 801c2bc <__swsetup_r+0x4c>
 801c2aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c2ae:	4299      	cmp	r1, r3
 801c2b0:	d002      	beq.n	801c2b8 <__swsetup_r+0x48>
 801c2b2:	4628      	mov	r0, r5
 801c2b4:	f7ff f930 	bl	801b518 <_free_r>
 801c2b8:	2300      	movs	r3, #0
 801c2ba:	6363      	str	r3, [r4, #52]	; 0x34
 801c2bc:	89a3      	ldrh	r3, [r4, #12]
 801c2be:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801c2c2:	81a3      	strh	r3, [r4, #12]
 801c2c4:	2300      	movs	r3, #0
 801c2c6:	6063      	str	r3, [r4, #4]
 801c2c8:	6923      	ldr	r3, [r4, #16]
 801c2ca:	6023      	str	r3, [r4, #0]
 801c2cc:	89a3      	ldrh	r3, [r4, #12]
 801c2ce:	f043 0308 	orr.w	r3, r3, #8
 801c2d2:	81a3      	strh	r3, [r4, #12]
 801c2d4:	6923      	ldr	r3, [r4, #16]
 801c2d6:	b94b      	cbnz	r3, 801c2ec <__swsetup_r+0x7c>
 801c2d8:	89a3      	ldrh	r3, [r4, #12]
 801c2da:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801c2de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c2e2:	d003      	beq.n	801c2ec <__swsetup_r+0x7c>
 801c2e4:	4621      	mov	r1, r4
 801c2e6:	4628      	mov	r0, r5
 801c2e8:	f000 f8b6 	bl	801c458 <__smakebuf_r>
 801c2ec:	89a0      	ldrh	r0, [r4, #12]
 801c2ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c2f2:	f010 0301 	ands.w	r3, r0, #1
 801c2f6:	d00a      	beq.n	801c30e <__swsetup_r+0x9e>
 801c2f8:	2300      	movs	r3, #0
 801c2fa:	60a3      	str	r3, [r4, #8]
 801c2fc:	6963      	ldr	r3, [r4, #20]
 801c2fe:	425b      	negs	r3, r3
 801c300:	61a3      	str	r3, [r4, #24]
 801c302:	6923      	ldr	r3, [r4, #16]
 801c304:	b943      	cbnz	r3, 801c318 <__swsetup_r+0xa8>
 801c306:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801c30a:	d1c4      	bne.n	801c296 <__swsetup_r+0x26>
 801c30c:	bd38      	pop	{r3, r4, r5, pc}
 801c30e:	0781      	lsls	r1, r0, #30
 801c310:	bf58      	it	pl
 801c312:	6963      	ldrpl	r3, [r4, #20]
 801c314:	60a3      	str	r3, [r4, #8]
 801c316:	e7f4      	b.n	801c302 <__swsetup_r+0x92>
 801c318:	2000      	movs	r0, #0
 801c31a:	e7f7      	b.n	801c30c <__swsetup_r+0x9c>
 801c31c:	2400006c 	.word	0x2400006c

0801c320 <_sbrk_r>:
 801c320:	b538      	push	{r3, r4, r5, lr}
 801c322:	4d06      	ldr	r5, [pc, #24]	; (801c33c <_sbrk_r+0x1c>)
 801c324:	2300      	movs	r3, #0
 801c326:	4604      	mov	r4, r0
 801c328:	4608      	mov	r0, r1
 801c32a:	602b      	str	r3, [r5, #0]
 801c32c:	f7e5 f9f6 	bl	800171c <_sbrk>
 801c330:	1c43      	adds	r3, r0, #1
 801c332:	d102      	bne.n	801c33a <_sbrk_r+0x1a>
 801c334:	682b      	ldr	r3, [r5, #0]
 801c336:	b103      	cbz	r3, 801c33a <_sbrk_r+0x1a>
 801c338:	6023      	str	r3, [r4, #0]
 801c33a:	bd38      	pop	{r3, r4, r5, pc}
 801c33c:	2400a6d8 	.word	0x2400a6d8

0801c340 <__assert_func>:
 801c340:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c342:	4614      	mov	r4, r2
 801c344:	461a      	mov	r2, r3
 801c346:	4b09      	ldr	r3, [pc, #36]	; (801c36c <__assert_func+0x2c>)
 801c348:	681b      	ldr	r3, [r3, #0]
 801c34a:	4605      	mov	r5, r0
 801c34c:	68d8      	ldr	r0, [r3, #12]
 801c34e:	b14c      	cbz	r4, 801c364 <__assert_func+0x24>
 801c350:	4b07      	ldr	r3, [pc, #28]	; (801c370 <__assert_func+0x30>)
 801c352:	9100      	str	r1, [sp, #0]
 801c354:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c358:	4906      	ldr	r1, [pc, #24]	; (801c374 <__assert_func+0x34>)
 801c35a:	462b      	mov	r3, r5
 801c35c:	f000 f844 	bl	801c3e8 <fiprintf>
 801c360:	f000 f8d8 	bl	801c514 <abort>
 801c364:	4b04      	ldr	r3, [pc, #16]	; (801c378 <__assert_func+0x38>)
 801c366:	461c      	mov	r4, r3
 801c368:	e7f3      	b.n	801c352 <__assert_func+0x12>
 801c36a:	bf00      	nop
 801c36c:	2400006c 	.word	0x2400006c
 801c370:	0801ce1f 	.word	0x0801ce1f
 801c374:	0801ce2c 	.word	0x0801ce2c
 801c378:	0801ce5a 	.word	0x0801ce5a

0801c37c <_calloc_r>:
 801c37c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c37e:	fba1 2402 	umull	r2, r4, r1, r2
 801c382:	b94c      	cbnz	r4, 801c398 <_calloc_r+0x1c>
 801c384:	4611      	mov	r1, r2
 801c386:	9201      	str	r2, [sp, #4]
 801c388:	f7ff f93a 	bl	801b600 <_malloc_r>
 801c38c:	9a01      	ldr	r2, [sp, #4]
 801c38e:	4605      	mov	r5, r0
 801c390:	b930      	cbnz	r0, 801c3a0 <_calloc_r+0x24>
 801c392:	4628      	mov	r0, r5
 801c394:	b003      	add	sp, #12
 801c396:	bd30      	pop	{r4, r5, pc}
 801c398:	220c      	movs	r2, #12
 801c39a:	6002      	str	r2, [r0, #0]
 801c39c:	2500      	movs	r5, #0
 801c39e:	e7f8      	b.n	801c392 <_calloc_r+0x16>
 801c3a0:	4621      	mov	r1, r4
 801c3a2:	f7fe fa36 	bl	801a812 <memset>
 801c3a6:	e7f4      	b.n	801c392 <_calloc_r+0x16>

0801c3a8 <__ascii_mbtowc>:
 801c3a8:	b082      	sub	sp, #8
 801c3aa:	b901      	cbnz	r1, 801c3ae <__ascii_mbtowc+0x6>
 801c3ac:	a901      	add	r1, sp, #4
 801c3ae:	b142      	cbz	r2, 801c3c2 <__ascii_mbtowc+0x1a>
 801c3b0:	b14b      	cbz	r3, 801c3c6 <__ascii_mbtowc+0x1e>
 801c3b2:	7813      	ldrb	r3, [r2, #0]
 801c3b4:	600b      	str	r3, [r1, #0]
 801c3b6:	7812      	ldrb	r2, [r2, #0]
 801c3b8:	1e10      	subs	r0, r2, #0
 801c3ba:	bf18      	it	ne
 801c3bc:	2001      	movne	r0, #1
 801c3be:	b002      	add	sp, #8
 801c3c0:	4770      	bx	lr
 801c3c2:	4610      	mov	r0, r2
 801c3c4:	e7fb      	b.n	801c3be <__ascii_mbtowc+0x16>
 801c3c6:	f06f 0001 	mvn.w	r0, #1
 801c3ca:	e7f8      	b.n	801c3be <__ascii_mbtowc+0x16>

0801c3cc <__ascii_wctomb>:
 801c3cc:	b149      	cbz	r1, 801c3e2 <__ascii_wctomb+0x16>
 801c3ce:	2aff      	cmp	r2, #255	; 0xff
 801c3d0:	bf85      	ittet	hi
 801c3d2:	238a      	movhi	r3, #138	; 0x8a
 801c3d4:	6003      	strhi	r3, [r0, #0]
 801c3d6:	700a      	strbls	r2, [r1, #0]
 801c3d8:	f04f 30ff 	movhi.w	r0, #4294967295
 801c3dc:	bf98      	it	ls
 801c3de:	2001      	movls	r0, #1
 801c3e0:	4770      	bx	lr
 801c3e2:	4608      	mov	r0, r1
 801c3e4:	4770      	bx	lr
	...

0801c3e8 <fiprintf>:
 801c3e8:	b40e      	push	{r1, r2, r3}
 801c3ea:	b503      	push	{r0, r1, lr}
 801c3ec:	4601      	mov	r1, r0
 801c3ee:	ab03      	add	r3, sp, #12
 801c3f0:	4805      	ldr	r0, [pc, #20]	; (801c408 <fiprintf+0x20>)
 801c3f2:	f853 2b04 	ldr.w	r2, [r3], #4
 801c3f6:	6800      	ldr	r0, [r0, #0]
 801c3f8:	9301      	str	r3, [sp, #4]
 801c3fa:	f7ff fd33 	bl	801be64 <_vfiprintf_r>
 801c3fe:	b002      	add	sp, #8
 801c400:	f85d eb04 	ldr.w	lr, [sp], #4
 801c404:	b003      	add	sp, #12
 801c406:	4770      	bx	lr
 801c408:	2400006c 	.word	0x2400006c

0801c40c <__swhatbuf_r>:
 801c40c:	b570      	push	{r4, r5, r6, lr}
 801c40e:	460c      	mov	r4, r1
 801c410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c414:	2900      	cmp	r1, #0
 801c416:	b096      	sub	sp, #88	; 0x58
 801c418:	4615      	mov	r5, r2
 801c41a:	461e      	mov	r6, r3
 801c41c:	da0d      	bge.n	801c43a <__swhatbuf_r+0x2e>
 801c41e:	89a3      	ldrh	r3, [r4, #12]
 801c420:	f013 0f80 	tst.w	r3, #128	; 0x80
 801c424:	f04f 0100 	mov.w	r1, #0
 801c428:	bf0c      	ite	eq
 801c42a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801c42e:	2340      	movne	r3, #64	; 0x40
 801c430:	2000      	movs	r0, #0
 801c432:	6031      	str	r1, [r6, #0]
 801c434:	602b      	str	r3, [r5, #0]
 801c436:	b016      	add	sp, #88	; 0x58
 801c438:	bd70      	pop	{r4, r5, r6, pc}
 801c43a:	466a      	mov	r2, sp
 801c43c:	f000 f848 	bl	801c4d0 <_fstat_r>
 801c440:	2800      	cmp	r0, #0
 801c442:	dbec      	blt.n	801c41e <__swhatbuf_r+0x12>
 801c444:	9901      	ldr	r1, [sp, #4]
 801c446:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801c44a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801c44e:	4259      	negs	r1, r3
 801c450:	4159      	adcs	r1, r3
 801c452:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c456:	e7eb      	b.n	801c430 <__swhatbuf_r+0x24>

0801c458 <__smakebuf_r>:
 801c458:	898b      	ldrh	r3, [r1, #12]
 801c45a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c45c:	079d      	lsls	r5, r3, #30
 801c45e:	4606      	mov	r6, r0
 801c460:	460c      	mov	r4, r1
 801c462:	d507      	bpl.n	801c474 <__smakebuf_r+0x1c>
 801c464:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c468:	6023      	str	r3, [r4, #0]
 801c46a:	6123      	str	r3, [r4, #16]
 801c46c:	2301      	movs	r3, #1
 801c46e:	6163      	str	r3, [r4, #20]
 801c470:	b002      	add	sp, #8
 801c472:	bd70      	pop	{r4, r5, r6, pc}
 801c474:	ab01      	add	r3, sp, #4
 801c476:	466a      	mov	r2, sp
 801c478:	f7ff ffc8 	bl	801c40c <__swhatbuf_r>
 801c47c:	9900      	ldr	r1, [sp, #0]
 801c47e:	4605      	mov	r5, r0
 801c480:	4630      	mov	r0, r6
 801c482:	f7ff f8bd 	bl	801b600 <_malloc_r>
 801c486:	b948      	cbnz	r0, 801c49c <__smakebuf_r+0x44>
 801c488:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c48c:	059a      	lsls	r2, r3, #22
 801c48e:	d4ef      	bmi.n	801c470 <__smakebuf_r+0x18>
 801c490:	f023 0303 	bic.w	r3, r3, #3
 801c494:	f043 0302 	orr.w	r3, r3, #2
 801c498:	81a3      	strh	r3, [r4, #12]
 801c49a:	e7e3      	b.n	801c464 <__smakebuf_r+0xc>
 801c49c:	89a3      	ldrh	r3, [r4, #12]
 801c49e:	6020      	str	r0, [r4, #0]
 801c4a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c4a4:	81a3      	strh	r3, [r4, #12]
 801c4a6:	9b00      	ldr	r3, [sp, #0]
 801c4a8:	6163      	str	r3, [r4, #20]
 801c4aa:	9b01      	ldr	r3, [sp, #4]
 801c4ac:	6120      	str	r0, [r4, #16]
 801c4ae:	b15b      	cbz	r3, 801c4c8 <__smakebuf_r+0x70>
 801c4b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c4b4:	4630      	mov	r0, r6
 801c4b6:	f000 f81d 	bl	801c4f4 <_isatty_r>
 801c4ba:	b128      	cbz	r0, 801c4c8 <__smakebuf_r+0x70>
 801c4bc:	89a3      	ldrh	r3, [r4, #12]
 801c4be:	f023 0303 	bic.w	r3, r3, #3
 801c4c2:	f043 0301 	orr.w	r3, r3, #1
 801c4c6:	81a3      	strh	r3, [r4, #12]
 801c4c8:	89a3      	ldrh	r3, [r4, #12]
 801c4ca:	431d      	orrs	r5, r3
 801c4cc:	81a5      	strh	r5, [r4, #12]
 801c4ce:	e7cf      	b.n	801c470 <__smakebuf_r+0x18>

0801c4d0 <_fstat_r>:
 801c4d0:	b538      	push	{r3, r4, r5, lr}
 801c4d2:	4d07      	ldr	r5, [pc, #28]	; (801c4f0 <_fstat_r+0x20>)
 801c4d4:	2300      	movs	r3, #0
 801c4d6:	4604      	mov	r4, r0
 801c4d8:	4608      	mov	r0, r1
 801c4da:	4611      	mov	r1, r2
 801c4dc:	602b      	str	r3, [r5, #0]
 801c4de:	f7e5 f8f4 	bl	80016ca <_fstat>
 801c4e2:	1c43      	adds	r3, r0, #1
 801c4e4:	d102      	bne.n	801c4ec <_fstat_r+0x1c>
 801c4e6:	682b      	ldr	r3, [r5, #0]
 801c4e8:	b103      	cbz	r3, 801c4ec <_fstat_r+0x1c>
 801c4ea:	6023      	str	r3, [r4, #0]
 801c4ec:	bd38      	pop	{r3, r4, r5, pc}
 801c4ee:	bf00      	nop
 801c4f0:	2400a6d8 	.word	0x2400a6d8

0801c4f4 <_isatty_r>:
 801c4f4:	b538      	push	{r3, r4, r5, lr}
 801c4f6:	4d06      	ldr	r5, [pc, #24]	; (801c510 <_isatty_r+0x1c>)
 801c4f8:	2300      	movs	r3, #0
 801c4fa:	4604      	mov	r4, r0
 801c4fc:	4608      	mov	r0, r1
 801c4fe:	602b      	str	r3, [r5, #0]
 801c500:	f7e5 f8f3 	bl	80016ea <_isatty>
 801c504:	1c43      	adds	r3, r0, #1
 801c506:	d102      	bne.n	801c50e <_isatty_r+0x1a>
 801c508:	682b      	ldr	r3, [r5, #0]
 801c50a:	b103      	cbz	r3, 801c50e <_isatty_r+0x1a>
 801c50c:	6023      	str	r3, [r4, #0]
 801c50e:	bd38      	pop	{r3, r4, r5, pc}
 801c510:	2400a6d8 	.word	0x2400a6d8

0801c514 <abort>:
 801c514:	b508      	push	{r3, lr}
 801c516:	2006      	movs	r0, #6
 801c518:	f000 f82c 	bl	801c574 <raise>
 801c51c:	2001      	movs	r0, #1
 801c51e:	f7e5 f885 	bl	800162c <_exit>

0801c522 <_raise_r>:
 801c522:	291f      	cmp	r1, #31
 801c524:	b538      	push	{r3, r4, r5, lr}
 801c526:	4604      	mov	r4, r0
 801c528:	460d      	mov	r5, r1
 801c52a:	d904      	bls.n	801c536 <_raise_r+0x14>
 801c52c:	2316      	movs	r3, #22
 801c52e:	6003      	str	r3, [r0, #0]
 801c530:	f04f 30ff 	mov.w	r0, #4294967295
 801c534:	bd38      	pop	{r3, r4, r5, pc}
 801c536:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801c538:	b112      	cbz	r2, 801c540 <_raise_r+0x1e>
 801c53a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c53e:	b94b      	cbnz	r3, 801c554 <_raise_r+0x32>
 801c540:	4620      	mov	r0, r4
 801c542:	f000 f831 	bl	801c5a8 <_getpid_r>
 801c546:	462a      	mov	r2, r5
 801c548:	4601      	mov	r1, r0
 801c54a:	4620      	mov	r0, r4
 801c54c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c550:	f000 b818 	b.w	801c584 <_kill_r>
 801c554:	2b01      	cmp	r3, #1
 801c556:	d00a      	beq.n	801c56e <_raise_r+0x4c>
 801c558:	1c59      	adds	r1, r3, #1
 801c55a:	d103      	bne.n	801c564 <_raise_r+0x42>
 801c55c:	2316      	movs	r3, #22
 801c55e:	6003      	str	r3, [r0, #0]
 801c560:	2001      	movs	r0, #1
 801c562:	e7e7      	b.n	801c534 <_raise_r+0x12>
 801c564:	2400      	movs	r4, #0
 801c566:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801c56a:	4628      	mov	r0, r5
 801c56c:	4798      	blx	r3
 801c56e:	2000      	movs	r0, #0
 801c570:	e7e0      	b.n	801c534 <_raise_r+0x12>
	...

0801c574 <raise>:
 801c574:	4b02      	ldr	r3, [pc, #8]	; (801c580 <raise+0xc>)
 801c576:	4601      	mov	r1, r0
 801c578:	6818      	ldr	r0, [r3, #0]
 801c57a:	f7ff bfd2 	b.w	801c522 <_raise_r>
 801c57e:	bf00      	nop
 801c580:	2400006c 	.word	0x2400006c

0801c584 <_kill_r>:
 801c584:	b538      	push	{r3, r4, r5, lr}
 801c586:	4d07      	ldr	r5, [pc, #28]	; (801c5a4 <_kill_r+0x20>)
 801c588:	2300      	movs	r3, #0
 801c58a:	4604      	mov	r4, r0
 801c58c:	4608      	mov	r0, r1
 801c58e:	4611      	mov	r1, r2
 801c590:	602b      	str	r3, [r5, #0]
 801c592:	f7e5 f83b 	bl	800160c <_kill>
 801c596:	1c43      	adds	r3, r0, #1
 801c598:	d102      	bne.n	801c5a0 <_kill_r+0x1c>
 801c59a:	682b      	ldr	r3, [r5, #0]
 801c59c:	b103      	cbz	r3, 801c5a0 <_kill_r+0x1c>
 801c59e:	6023      	str	r3, [r4, #0]
 801c5a0:	bd38      	pop	{r3, r4, r5, pc}
 801c5a2:	bf00      	nop
 801c5a4:	2400a6d8 	.word	0x2400a6d8

0801c5a8 <_getpid_r>:
 801c5a8:	f7e5 b828 	b.w	80015fc <_getpid>

0801c5ac <_init>:
 801c5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c5ae:	bf00      	nop
 801c5b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c5b2:	bc08      	pop	{r3}
 801c5b4:	469e      	mov	lr, r3
 801c5b6:	4770      	bx	lr

0801c5b8 <_fini>:
 801c5b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c5ba:	bf00      	nop
 801c5bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c5be:	bc08      	pop	{r3}
 801c5c0:	469e      	mov	lr, r3
 801c5c2:	4770      	bx	lr
