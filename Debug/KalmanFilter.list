
KalmanFilter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013e34  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007dc  080140d8  080140d8  000240d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080148b4  080148b4  000248b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   0000000c  080148bc  080148bc  000248bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080148c8  080148c8  000248c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  24000000  080148cc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  240001dc  08014aa8  000301dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  2400023c  08014b08  0003023c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000099d0  2400029c  08014b68  0003029c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24009c6c  08014b68  00039c6c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003029c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000302ca  2**0
                  CONTENTS, READONLY
 13 .debug_info   000476c5  00000000  00000000  0003030d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008136  00000000  00000000  000779d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002ad8  00000000  00000000  0007fb08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002105  00000000  00000000  000825e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00044b6d  00000000  00000000  000846e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003a8da  00000000  00000000  000c9252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001873b9  00000000  00000000  00103b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000c650  00000000  00000000  0028aee8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00297538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400029c 	.word	0x2400029c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080140bc 	.word	0x080140bc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002a0 	.word	0x240002a0
 80002dc:	080140bc 	.word	0x080140bc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000692:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <MX_DMA_Init+0x30>)
 8000694:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000698:	4a08      	ldr	r2, [pc, #32]	; (80006bc <MX_DMA_Init+0x30>)
 800069a:	f043 0301 	orr.w	r3, r3, #1
 800069e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <MX_DMA_Init+0x30>)
 80006a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006a8:	f003 0301 	and.w	r3, r3, #1
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	687b      	ldr	r3, [r7, #4]

}
 80006b0:	bf00      	nop
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	58024400 	.word	0x58024400

080006c0 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006c4:	4b1e      	ldr	r3, [pc, #120]	; (8000740 <MX_ETH_Init+0x80>)
 80006c6:	4a1f      	ldr	r2, [pc, #124]	; (8000744 <MX_ETH_Init+0x84>)
 80006c8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006ca:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <MX_ETH_Init+0x88>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006d0:	4b1d      	ldr	r3, [pc, #116]	; (8000748 <MX_ETH_Init+0x88>)
 80006d2:	2280      	movs	r2, #128	; 0x80
 80006d4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006d6:	4b1c      	ldr	r3, [pc, #112]	; (8000748 <MX_ETH_Init+0x88>)
 80006d8:	22e1      	movs	r2, #225	; 0xe1
 80006da:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006dc:	4b1a      	ldr	r3, [pc, #104]	; (8000748 <MX_ETH_Init+0x88>)
 80006de:	2200      	movs	r2, #0
 80006e0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006e2:	4b19      	ldr	r3, [pc, #100]	; (8000748 <MX_ETH_Init+0x88>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006e8:	4b17      	ldr	r3, [pc, #92]	; (8000748 <MX_ETH_Init+0x88>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006ee:	4b14      	ldr	r3, [pc, #80]	; (8000740 <MX_ETH_Init+0x80>)
 80006f0:	4a15      	ldr	r2, [pc, #84]	; (8000748 <MX_ETH_Init+0x88>)
 80006f2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006f4:	4b12      	ldr	r3, [pc, #72]	; (8000740 <MX_ETH_Init+0x80>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006fa:	4b11      	ldr	r3, [pc, #68]	; (8000740 <MX_ETH_Init+0x80>)
 80006fc:	4a13      	ldr	r2, [pc, #76]	; (800074c <MX_ETH_Init+0x8c>)
 80006fe:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000700:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <MX_ETH_Init+0x80>)
 8000702:	4a13      	ldr	r2, [pc, #76]	; (8000750 <MX_ETH_Init+0x90>)
 8000704:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000706:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <MX_ETH_Init+0x80>)
 8000708:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800070c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800070e:	480c      	ldr	r0, [pc, #48]	; (8000740 <MX_ETH_Init+0x80>)
 8000710:	f004 fa40 	bl	8004b94 <HAL_ETH_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800071a:	f000 fde1 	bl	80012e0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800071e:	2238      	movs	r2, #56	; 0x38
 8000720:	2100      	movs	r1, #0
 8000722:	480c      	ldr	r0, [pc, #48]	; (8000754 <MX_ETH_Init+0x94>)
 8000724:	f011 fdfd 	bl	8012322 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000728:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <MX_ETH_Init+0x94>)
 800072a:	2221      	movs	r2, #33	; 0x21
 800072c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MX_ETH_Init+0x94>)
 8000730:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000734:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000736:	4b07      	ldr	r3, [pc, #28]	; (8000754 <MX_ETH_Init+0x94>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}
 8000740:	240002f0 	.word	0x240002f0
 8000744:	40028000 	.word	0x40028000
 8000748:	240003a0 	.word	0x240003a0
 800074c:	2400023c 	.word	0x2400023c
 8000750:	240001dc 	.word	0x240001dc
 8000754:	240002b8 	.word	0x240002b8

08000758 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08e      	sub	sp, #56	; 0x38
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a59      	ldr	r2, [pc, #356]	; (80008dc <HAL_ETH_MspInit+0x184>)
 8000776:	4293      	cmp	r3, r2
 8000778:	f040 80ab 	bne.w	80008d2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800077c:	4b58      	ldr	r3, [pc, #352]	; (80008e0 <HAL_ETH_MspInit+0x188>)
 800077e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000782:	4a57      	ldr	r2, [pc, #348]	; (80008e0 <HAL_ETH_MspInit+0x188>)
 8000784:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000788:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800078c:	4b54      	ldr	r3, [pc, #336]	; (80008e0 <HAL_ETH_MspInit+0x188>)
 800078e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000792:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000796:	623b      	str	r3, [r7, #32]
 8000798:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800079a:	4b51      	ldr	r3, [pc, #324]	; (80008e0 <HAL_ETH_MspInit+0x188>)
 800079c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007a0:	4a4f      	ldr	r2, [pc, #316]	; (80008e0 <HAL_ETH_MspInit+0x188>)
 80007a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007a6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80007aa:	4b4d      	ldr	r3, [pc, #308]	; (80008e0 <HAL_ETH_MspInit+0x188>)
 80007ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007b4:	61fb      	str	r3, [r7, #28]
 80007b6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80007b8:	4b49      	ldr	r3, [pc, #292]	; (80008e0 <HAL_ETH_MspInit+0x188>)
 80007ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007be:	4a48      	ldr	r2, [pc, #288]	; (80008e0 <HAL_ETH_MspInit+0x188>)
 80007c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007c4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80007c8:	4b45      	ldr	r3, [pc, #276]	; (80008e0 <HAL_ETH_MspInit+0x188>)
 80007ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007d2:	61bb      	str	r3, [r7, #24]
 80007d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d6:	4b42      	ldr	r3, [pc, #264]	; (80008e0 <HAL_ETH_MspInit+0x188>)
 80007d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007dc:	4a40      	ldr	r2, [pc, #256]	; (80008e0 <HAL_ETH_MspInit+0x188>)
 80007de:	f043 0304 	orr.w	r3, r3, #4
 80007e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007e6:	4b3e      	ldr	r3, [pc, #248]	; (80008e0 <HAL_ETH_MspInit+0x188>)
 80007e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ec:	f003 0304 	and.w	r3, r3, #4
 80007f0:	617b      	str	r3, [r7, #20]
 80007f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f4:	4b3a      	ldr	r3, [pc, #232]	; (80008e0 <HAL_ETH_MspInit+0x188>)
 80007f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007fa:	4a39      	ldr	r2, [pc, #228]	; (80008e0 <HAL_ETH_MspInit+0x188>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000804:	4b36      	ldr	r3, [pc, #216]	; (80008e0 <HAL_ETH_MspInit+0x188>)
 8000806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000812:	4b33      	ldr	r3, [pc, #204]	; (80008e0 <HAL_ETH_MspInit+0x188>)
 8000814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000818:	4a31      	ldr	r2, [pc, #196]	; (80008e0 <HAL_ETH_MspInit+0x188>)
 800081a:	f043 0302 	orr.w	r3, r3, #2
 800081e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000822:	4b2f      	ldr	r3, [pc, #188]	; (80008e0 <HAL_ETH_MspInit+0x188>)
 8000824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000828:	f003 0302 	and.w	r3, r3, #2
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000830:	4b2b      	ldr	r3, [pc, #172]	; (80008e0 <HAL_ETH_MspInit+0x188>)
 8000832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000836:	4a2a      	ldr	r2, [pc, #168]	; (80008e0 <HAL_ETH_MspInit+0x188>)
 8000838:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800083c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000840:	4b27      	ldr	r3, [pc, #156]	; (80008e0 <HAL_ETH_MspInit+0x188>)
 8000842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800084e:	2332      	movs	r3, #50	; 0x32
 8000850:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000852:	2302      	movs	r3, #2
 8000854:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085a:	2300      	movs	r3, #0
 800085c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800085e:	230b      	movs	r3, #11
 8000860:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000862:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000866:	4619      	mov	r1, r3
 8000868:	481e      	ldr	r0, [pc, #120]	; (80008e4 <HAL_ETH_MspInit+0x18c>)
 800086a:	f004 fdb7 	bl	80053dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800086e:	2386      	movs	r3, #134	; 0x86
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000872:	2302      	movs	r3, #2
 8000874:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800087e:	230b      	movs	r3, #11
 8000880:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000882:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000886:	4619      	mov	r1, r3
 8000888:	4817      	ldr	r0, [pc, #92]	; (80008e8 <HAL_ETH_MspInit+0x190>)
 800088a:	f004 fda7 	bl	80053dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800088e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000894:	2302      	movs	r3, #2
 8000896:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089c:	2300      	movs	r3, #0
 800089e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008a0:	230b      	movs	r3, #11
 80008a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80008a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a8:	4619      	mov	r1, r3
 80008aa:	4810      	ldr	r0, [pc, #64]	; (80008ec <HAL_ETH_MspInit+0x194>)
 80008ac:	f004 fd96 	bl	80053dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80008b0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b6:	2302      	movs	r3, #2
 80008b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008be:	2300      	movs	r3, #0
 80008c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008c2:	230b      	movs	r3, #11
 80008c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ca:	4619      	mov	r1, r3
 80008cc:	4808      	ldr	r0, [pc, #32]	; (80008f0 <HAL_ETH_MspInit+0x198>)
 80008ce:	f004 fd85 	bl	80053dc <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80008d2:	bf00      	nop
 80008d4:	3738      	adds	r7, #56	; 0x38
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40028000 	.word	0x40028000
 80008e0:	58024400 	.word	0x58024400
 80008e4:	58020800 	.word	0x58020800
 80008e8:	58020000 	.word	0x58020000
 80008ec:	58020400 	.word	0x58020400
 80008f0:	58021800 	.word	0x58021800

080008f4 <HAL_UART_RxHalfCpltCallback>:
	GNSS_Handle.uniqueID[2], GNSS_Handle.uniqueID[3],
	GNSS_Handle.uniqueID[4], GNSS_Handle.uniqueID[5]);
}

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
	LOG("HALF");
 80008fc:	f001 f9de 	bl	8001cbc <HAL_GetTick>
 8000900:	4601      	mov	r1, r0
 8000902:	2389      	movs	r3, #137	; 0x89
 8000904:	4a06      	ldr	r2, [pc, #24]	; (8000920 <HAL_UART_RxHalfCpltCallback+0x2c>)
 8000906:	4807      	ldr	r0, [pc, #28]	; (8000924 <HAL_UART_RxHalfCpltCallback+0x30>)
 8000908:	f011 fcb6 	bl	8012278 <iprintf>
 800090c:	4806      	ldr	r0, [pc, #24]	; (8000928 <HAL_UART_RxHalfCpltCallback+0x34>)
 800090e:	f011 fcb3 	bl	8012278 <iprintf>
 8000912:	4806      	ldr	r0, [pc, #24]	; (800092c <HAL_UART_RxHalfCpltCallback+0x38>)
 8000914:	f011 fcb0 	bl	8012278 <iprintf>
}
 8000918:	bf00      	nop
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	08014434 	.word	0x08014434
 8000924:	08014114 	.word	0x08014114
 8000928:	08014224 	.word	0x08014224
 800092c:	08014130 	.word	0x08014130

08000930 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]

	inter_flag = 0;
 8000938:	4b08      	ldr	r3, [pc, #32]	; (800095c <HAL_UART_RxCpltCallback+0x2c>)
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
	++INTERRUPTS;
 800093e:	4b08      	ldr	r3, [pc, #32]	; (8000960 <HAL_UART_RxCpltCallback+0x30>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	3301      	adds	r3, #1
 8000944:	4a06      	ldr	r2, [pc, #24]	; (8000960 <HAL_UART_RxCpltCallback+0x30>)
 8000946:	6013      	str	r3, [r2, #0]
	//HAL_UART_Receive_DMA(&huart2, GNSS_Handle.uartWorkingBuffer, 10);
	//xTaskResumeFromISR(ReceiveGNSSDataHandle);
	xSemaphoreGiveFromISR(GNNS_UART_INTERRUPTHandle, &GiveSemaphoreResult);
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <HAL_UART_RxCpltCallback+0x34>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4906      	ldr	r1, [pc, #24]	; (8000968 <HAL_UART_RxCpltCallback+0x38>)
 800094e:	4618      	mov	r0, r3
 8000950:	f00e f8d3 	bl	800eafa <xQueueGiveFromISR>
}
 8000954:	bf00      	nop
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	24000400 	.word	0x24000400
 8000960:	24000404 	.word	0x24000404
 8000964:	240044d0 	.word	0x240044d0
 8000968:	24000408 	.word	0x24000408

0800096c <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	460b      	mov	r3, r1
 8000976:	807b      	strh	r3, [r7, #2]
	inter_flag = Size;
 8000978:	887b      	ldrh	r3, [r7, #2]
 800097a:	4a08      	ldr	r2, [pc, #32]	; (800099c <HAL_UARTEx_RxEventCallback+0x30>)
 800097c:	6013      	str	r3, [r2, #0]
	++INTERRUPTS;
 800097e:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <HAL_UARTEx_RxEventCallback+0x34>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	3301      	adds	r3, #1
 8000984:	4a06      	ldr	r2, [pc, #24]	; (80009a0 <HAL_UARTEx_RxEventCallback+0x34>)
 8000986:	6013      	str	r3, [r2, #0]
	//xTaskResumeFromISR(ReceiveGNSSDataHandle);
	xSemaphoreGiveFromISR(GNNS_UART_INTERRUPTHandle, &GiveSemaphoreResult);
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <HAL_UARTEx_RxEventCallback+0x38>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4906      	ldr	r1, [pc, #24]	; (80009a8 <HAL_UARTEx_RxEventCallback+0x3c>)
 800098e:	4618      	mov	r0, r3
 8000990:	f00e f8b3 	bl	800eafa <xQueueGiveFromISR>
	//HAL_UARTEx_ReceiveToIdle_DMA(&huart2, GNSS_Handle.uartWorkingBuffer, 10);
}
 8000994:	bf00      	nop
 8000996:	3708      	adds	r7, #8
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	24000400 	.word	0x24000400
 80009a0:	24000404 	.word	0x24000404
 80009a4:	240044d0 	.word	0x240044d0
 80009a8:	24000408 	.word	0x24000408

080009ac <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	Bmx160_init();
 80009b0:	f010 fc14 	bl	80111dc <Bmx160_init>
	LOG("BMX INIT");
 80009b4:	f001 f982 	bl	8001cbc <HAL_GetTick>
 80009b8:	4601      	mov	r1, r0
 80009ba:	23ae      	movs	r3, #174	; 0xae
 80009bc:	4a3a      	ldr	r2, [pc, #232]	; (8000aa8 <MX_FREERTOS_Init+0xfc>)
 80009be:	483b      	ldr	r0, [pc, #236]	; (8000aac <MX_FREERTOS_Init+0x100>)
 80009c0:	f011 fc5a 	bl	8012278 <iprintf>
 80009c4:	483a      	ldr	r0, [pc, #232]	; (8000ab0 <MX_FREERTOS_Init+0x104>)
 80009c6:	f011 fc57 	bl	8012278 <iprintf>
 80009ca:	483a      	ldr	r0, [pc, #232]	; (8000ab4 <MX_FREERTOS_Init+0x108>)
 80009cc:	f011 fc54 	bl	8012278 <iprintf>
	GNSS_Init(&GNSS_Handle, &huart2);
 80009d0:	4939      	ldr	r1, [pc, #228]	; (8000ab8 <MX_FREERTOS_Init+0x10c>)
 80009d2:	483a      	ldr	r0, [pc, #232]	; (8000abc <MX_FREERTOS_Init+0x110>)
 80009d4:	f010 fea0 	bl	8011718 <GNSS_Init>
	LOG("GNSS INIT");
 80009d8:	f001 f970 	bl	8001cbc <HAL_GetTick>
 80009dc:	4601      	mov	r1, r0
 80009de:	23b0      	movs	r3, #176	; 0xb0
 80009e0:	4a31      	ldr	r2, [pc, #196]	; (8000aa8 <MX_FREERTOS_Init+0xfc>)
 80009e2:	4832      	ldr	r0, [pc, #200]	; (8000aac <MX_FREERTOS_Init+0x100>)
 80009e4:	f011 fc48 	bl	8012278 <iprintf>
 80009e8:	4835      	ldr	r0, [pc, #212]	; (8000ac0 <MX_FREERTOS_Init+0x114>)
 80009ea:	f011 fc45 	bl	8012278 <iprintf>
 80009ee:	4831      	ldr	r0, [pc, #196]	; (8000ab4 <MX_FREERTOS_Init+0x108>)
 80009f0:	f011 fc42 	bl	8012278 <iprintf>
	DelayUs(1000);
 80009f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009f8:	f010 fe24 	bl	8011644 <DelayUs>
	LOG("Buffer: %d", GNSS_Handle.uartWorkingBuffer[0]);
 80009fc:	f001 f95e 	bl	8001cbc <HAL_GetTick>
 8000a00:	4601      	mov	r1, r0
 8000a02:	23b2      	movs	r3, #178	; 0xb2
 8000a04:	4a28      	ldr	r2, [pc, #160]	; (8000aa8 <MX_FREERTOS_Init+0xfc>)
 8000a06:	4829      	ldr	r0, [pc, #164]	; (8000aac <MX_FREERTOS_Init+0x100>)
 8000a08:	f011 fc36 	bl	8012278 <iprintf>
 8000a0c:	4b2b      	ldr	r3, [pc, #172]	; (8000abc <MX_FREERTOS_Init+0x110>)
 8000a0e:	7a1b      	ldrb	r3, [r3, #8]
 8000a10:	4619      	mov	r1, r3
 8000a12:	482c      	ldr	r0, [pc, #176]	; (8000ac4 <MX_FREERTOS_Init+0x118>)
 8000a14:	f011 fc30 	bl	8012278 <iprintf>
 8000a18:	4826      	ldr	r0, [pc, #152]	; (8000ab4 <MX_FREERTOS_Init+0x108>)
 8000a1a:	f011 fc2d 	bl	8012278 <iprintf>
	LOG("GNSS LOAD CONFIG");
 8000a1e:	f001 f94d 	bl	8001cbc <HAL_GetTick>
 8000a22:	4601      	mov	r1, r0
 8000a24:	23b3      	movs	r3, #179	; 0xb3
 8000a26:	4a20      	ldr	r2, [pc, #128]	; (8000aa8 <MX_FREERTOS_Init+0xfc>)
 8000a28:	4820      	ldr	r0, [pc, #128]	; (8000aac <MX_FREERTOS_Init+0x100>)
 8000a2a:	f011 fc25 	bl	8012278 <iprintf>
 8000a2e:	4826      	ldr	r0, [pc, #152]	; (8000ac8 <MX_FREERTOS_Init+0x11c>)
 8000a30:	f011 fc22 	bl	8012278 <iprintf>
 8000a34:	481f      	ldr	r0, [pc, #124]	; (8000ab4 <MX_FREERTOS_Init+0x108>)
 8000a36:	f011 fc1f 	bl	8012278 <iprintf>
	GNSS_LoadConfig(&GNSS_Handle);
 8000a3a:	4820      	ldr	r0, [pc, #128]	; (8000abc <MX_FREERTOS_Init+0x110>)
 8000a3c:	f010 fed0 	bl	80117e0 <GNSS_LoadConfig>
	LOG("Buffer: %d", GNSS_Handle.uartWorkingBuffer[0]);
 8000a40:	f001 f93c 	bl	8001cbc <HAL_GetTick>
 8000a44:	4601      	mov	r1, r0
 8000a46:	23b5      	movs	r3, #181	; 0xb5
 8000a48:	4a17      	ldr	r2, [pc, #92]	; (8000aa8 <MX_FREERTOS_Init+0xfc>)
 8000a4a:	4818      	ldr	r0, [pc, #96]	; (8000aac <MX_FREERTOS_Init+0x100>)
 8000a4c:	f011 fc14 	bl	8012278 <iprintf>
 8000a50:	4b1a      	ldr	r3, [pc, #104]	; (8000abc <MX_FREERTOS_Init+0x110>)
 8000a52:	7a1b      	ldrb	r3, [r3, #8]
 8000a54:	4619      	mov	r1, r3
 8000a56:	481b      	ldr	r0, [pc, #108]	; (8000ac4 <MX_FREERTOS_Init+0x118>)
 8000a58:	f011 fc0e 	bl	8012278 <iprintf>
 8000a5c:	4815      	ldr	r0, [pc, #84]	; (8000ab4 <MX_FREERTOS_Init+0x108>)
 8000a5e:	f011 fc0b 	bl	8012278 <iprintf>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of GNNS_UART_INTERRUPT */
  GNNS_UART_INTERRUPTHandle = osSemaphoreNew(1, 1, &GNNS_UART_INTERRUPT_attributes);
 8000a62:	4a1a      	ldr	r2, [pc, #104]	; (8000acc <MX_FREERTOS_Init+0x120>)
 8000a64:	2101      	movs	r1, #1
 8000a66:	2001      	movs	r0, #1
 8000a68:	f00d fbbb 	bl	800e1e2 <osSemaphoreNew>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	4a18      	ldr	r2, [pc, #96]	; (8000ad0 <MX_FREERTOS_Init+0x124>)
 8000a70:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000a72:	4a18      	ldr	r2, [pc, #96]	; (8000ad4 <MX_FREERTOS_Init+0x128>)
 8000a74:	2100      	movs	r1, #0
 8000a76:	4818      	ldr	r0, [pc, #96]	; (8000ad8 <MX_FREERTOS_Init+0x12c>)
 8000a78:	f00d fb06 	bl	800e088 <osThreadNew>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	4a17      	ldr	r2, [pc, #92]	; (8000adc <MX_FREERTOS_Init+0x130>)
 8000a80:	6013      	str	r3, [r2, #0]

  /* creation of AccMeassure */
  AccMeassureHandle = osThreadNew(StartAccMeassureTask, NULL, &AccMeassure_attributes);
 8000a82:	4a17      	ldr	r2, [pc, #92]	; (8000ae0 <MX_FREERTOS_Init+0x134>)
 8000a84:	2100      	movs	r1, #0
 8000a86:	4817      	ldr	r0, [pc, #92]	; (8000ae4 <MX_FREERTOS_Init+0x138>)
 8000a88:	f00d fafe 	bl	800e088 <osThreadNew>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	4a16      	ldr	r2, [pc, #88]	; (8000ae8 <MX_FREERTOS_Init+0x13c>)
 8000a90:	6013      	str	r3, [r2, #0]

  /* creation of ReceiveGNSSData */
  ReceiveGNSSDataHandle = osThreadNew(StartReceiveGNSSDataTask, NULL, &ReceiveGNSSData_attributes);
 8000a92:	4a16      	ldr	r2, [pc, #88]	; (8000aec <MX_FREERTOS_Init+0x140>)
 8000a94:	2100      	movs	r1, #0
 8000a96:	4816      	ldr	r0, [pc, #88]	; (8000af0 <MX_FREERTOS_Init+0x144>)
 8000a98:	f00d faf6 	bl	800e088 <osThreadNew>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	4a15      	ldr	r2, [pc, #84]	; (8000af4 <MX_FREERTOS_Init+0x148>)
 8000aa0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	08014450 	.word	0x08014450
 8000aac:	08014114 	.word	0x08014114
 8000ab0:	0801422c 	.word	0x0801422c
 8000ab4:	08014130 	.word	0x08014130
 8000ab8:	240045c8 	.word	0x240045c8
 8000abc:	24009a70 	.word	0x24009a70
 8000ac0:	08014238 	.word	0x08014238
 8000ac4:	08014124 	.word	0x08014124
 8000ac8:	08014244 	.word	0x08014244
 8000acc:	08014424 	.word	0x08014424
 8000ad0:	240044d0 	.word	0x240044d0
 8000ad4:	080143b8 	.word	0x080143b8
 8000ad8:	08000af9 	.word	0x08000af9
 8000adc:	2400040c 	.word	0x2400040c
 8000ae0:	080143dc 	.word	0x080143dc
 8000ae4:	08000c11 	.word	0x08000c11
 8000ae8:	24000410 	.word	0x24000410
 8000aec:	08014400 	.word	0x08014400
 8000af0:	08000d35 	.word	0x08000d35
 8000af4:	24002470 	.word	0x24002470

08000af8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08c      	sub	sp, #48	; 0x30
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	Vec3 Pos, Acc, Vel;
	int flag = 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Infinite loop */
  for(;;)
  {
	if(HAL_GPIO_ReadPin(UserButton_GPIO_Port, UserButton_Pin))
 8000b04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b08:	4836      	ldr	r0, [pc, #216]	; (8000be4 <StartDefaultTask+0xec>)
 8000b0a:	f004 fe17 	bl	800573c <HAL_GPIO_ReadPin>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d024      	beq.n	8000b5e <StartDefaultTask+0x66>
	{
		LOG("PUSHED BUTTON");
 8000b14:	f001 f8d2 	bl	8001cbc <HAL_GetTick>
 8000b18:	4601      	mov	r1, r0
 8000b1a:	23f1      	movs	r3, #241	; 0xf1
 8000b1c:	4a32      	ldr	r2, [pc, #200]	; (8000be8 <StartDefaultTask+0xf0>)
 8000b1e:	4833      	ldr	r0, [pc, #204]	; (8000bec <StartDefaultTask+0xf4>)
 8000b20:	f011 fbaa 	bl	8012278 <iprintf>
 8000b24:	4832      	ldr	r0, [pc, #200]	; (8000bf0 <StartDefaultTask+0xf8>)
 8000b26:	f011 fba7 	bl	8012278 <iprintf>
 8000b2a:	4832      	ldr	r0, [pc, #200]	; (8000bf4 <StartDefaultTask+0xfc>)
 8000b2c:	f011 fba4 	bl	8012278 <iprintf>
		GNSS_GetUniqID(&GNSS_Handle);
 8000b30:	4831      	ldr	r0, [pc, #196]	; (8000bf8 <StartDefaultTask+0x100>)
 8000b32:	f010 fe3b 	bl	80117ac <GNSS_GetUniqID>
		if(flag == 0)
 8000b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d107      	bne.n	8000b4c <StartDefaultTask+0x54>
		{
			HAL_UART_Receive_DMA(&huart2, GNSS_Handle.uartWorkingBuffer, 10);
 8000b3c:	220a      	movs	r2, #10
 8000b3e:	492f      	ldr	r1, [pc, #188]	; (8000bfc <StartDefaultTask+0x104>)
 8000b40:	482f      	ldr	r0, [pc, #188]	; (8000c00 <StartDefaultTask+0x108>)
 8000b42:	f009 f85f 	bl	8009c04 <HAL_UART_Receive_DMA>
			flag = 1;
 8000b46:	2301      	movs	r3, #1
 8000b48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b4a:	e008      	b.n	8000b5e <StartDefaultTask+0x66>
		}
		else
		{
			HAL_UART_Receive_IT(GNSS_Handle.huart, GNSS_Handle.uartWorkingBuffer, 92);
 8000b4c:	4b2a      	ldr	r3, [pc, #168]	; (8000bf8 <StartDefaultTask+0x100>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	225c      	movs	r2, #92	; 0x5c
 8000b52:	492a      	ldr	r1, [pc, #168]	; (8000bfc <StartDefaultTask+0x104>)
 8000b54:	4618      	mov	r0, r3
 8000b56:	f008 ff89 	bl	8009a6c <HAL_UART_Receive_IT>
			flag = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
//		imy = my * 1000.0f;
//		imz = mz * 1000.0f;
//		//printf("Raw:0,0,0,0,0,0,%d,%d,%d\n\r", imx, imy, imz);
//		printf("%f %f %f\n\r", mx, my, mz);
	}
	Pos = GetPosition();
 8000b5e:	f00c f993 	bl	800ce88 <GetPosition>
 8000b62:	eef0 6a40 	vmov.f32	s13, s0
 8000b66:	eeb0 7a60 	vmov.f32	s14, s1
 8000b6a:	eef0 7a41 	vmov.f32	s15, s2
 8000b6e:	edc7 6a08 	vstr	s13, [r7, #32]
 8000b72:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 8000b76:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	Acc = GetAcceleration();
 8000b7a:	f00c f9e1 	bl	800cf40 <GetAcceleration>
 8000b7e:	eef0 6a40 	vmov.f32	s13, s0
 8000b82:	eeb0 7a60 	vmov.f32	s14, s1
 8000b86:	eef0 7a41 	vmov.f32	s15, s2
 8000b8a:	edc7 6a05 	vstr	s13, [r7, #20]
 8000b8e:	ed87 7a06 	vstr	s14, [r7, #24]
 8000b92:	edc7 7a07 	vstr	s15, [r7, #28]
	Vel = GetVelocity();
 8000b96:	f00c f9a5 	bl	800cee4 <GetVelocity>
 8000b9a:	eef0 6a40 	vmov.f32	s13, s0
 8000b9e:	eeb0 7a60 	vmov.f32	s14, s1
 8000ba2:	eef0 7a41 	vmov.f32	s15, s2
 8000ba6:	edc7 6a02 	vstr	s13, [r7, #8]
 8000baa:	ed87 7a03 	vstr	s14, [r7, #12]
 8000bae:	edc7 7a04 	vstr	s15, [r7, #16]
	//LOG("Vel: %f, \t%f, \t%f\tPos: %f, \t%f, \t%f", Vel.x, Vel.y, Vel.z, Pos.x, Pos.y, Pos.z);
	LOG("INTERRUPTS: %d, inter_flag: %d", INTERRUPTS, inter_flag);
 8000bb2:	f001 f883 	bl	8001cbc <HAL_GetTick>
 8000bb6:	4601      	mov	r1, r0
 8000bb8:	f44f 738d 	mov.w	r3, #282	; 0x11a
 8000bbc:	4a0a      	ldr	r2, [pc, #40]	; (8000be8 <StartDefaultTask+0xf0>)
 8000bbe:	480b      	ldr	r0, [pc, #44]	; (8000bec <StartDefaultTask+0xf4>)
 8000bc0:	f011 fb5a 	bl	8012278 <iprintf>
 8000bc4:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <StartDefaultTask+0x10c>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a0f      	ldr	r2, [pc, #60]	; (8000c08 <StartDefaultTask+0x110>)
 8000bca:	6812      	ldr	r2, [r2, #0]
 8000bcc:	4619      	mov	r1, r3
 8000bce:	480f      	ldr	r0, [pc, #60]	; (8000c0c <StartDefaultTask+0x114>)
 8000bd0:	f011 fb52 	bl	8012278 <iprintf>
 8000bd4:	4807      	ldr	r0, [pc, #28]	; (8000bf4 <StartDefaultTask+0xfc>)
 8000bd6:	f011 fb4f 	bl	8012278 <iprintf>
	//GNSS_GetPVTData(&GNSS_Handle);
	//GNSS_GetPVTData(&GNSS_Handle);
    osDelay(1000);
 8000bda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bde:	f00d fae5 	bl	800e1ac <osDelay>
	if(HAL_GPIO_ReadPin(UserButton_GPIO_Port, UserButton_Pin))
 8000be2:	e78f      	b.n	8000b04 <StartDefaultTask+0xc>
 8000be4:	58020800 	.word	0x58020800
 8000be8:	08014464 	.word	0x08014464
 8000bec:	08014114 	.word	0x08014114
 8000bf0:	08014258 	.word	0x08014258
 8000bf4:	08014130 	.word	0x08014130
 8000bf8:	24009a70 	.word	0x24009a70
 8000bfc:	24009a78 	.word	0x24009a78
 8000c00:	240045c8 	.word	0x240045c8
 8000c04:	24000404 	.word	0x24000404
 8000c08:	24000400 	.word	0x24000400
 8000c0c:	08014268 	.word	0x08014268

08000c10 <StartAccMeassureTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAccMeassureTask */
void StartAccMeassureTask(void *argument)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAccMeassureTask */
  /* Infinite loop */
	//Bmx160_init();
	//LOG("After INIT");
	Bmx160_getAllData(&Omagn, &Ogyro, &Oaccel);
 8000c18:	4a42      	ldr	r2, [pc, #264]	; (8000d24 <StartAccMeassureTask+0x114>)
 8000c1a:	4943      	ldr	r1, [pc, #268]	; (8000d28 <StartAccMeassureTask+0x118>)
 8000c1c:	4843      	ldr	r0, [pc, #268]	; (8000d2c <StartAccMeassureTask+0x11c>)
 8000c1e:	f010 fbc1 	bl	80113a4 <Bmx160_getAllData>
	SensorData.Acc.x = Oaccel.x;
 8000c22:	4b40      	ldr	r3, [pc, #256]	; (8000d24 <StartAccMeassureTask+0x114>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a42      	ldr	r2, [pc, #264]	; (8000d30 <StartAccMeassureTask+0x120>)
 8000c28:	60d3      	str	r3, [r2, #12]
	SensorData.Acc.y = Oaccel.y;
 8000c2a:	4b3e      	ldr	r3, [pc, #248]	; (8000d24 <StartAccMeassureTask+0x114>)
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	4a40      	ldr	r2, [pc, #256]	; (8000d30 <StartAccMeassureTask+0x120>)
 8000c30:	6113      	str	r3, [r2, #16]
	SensorData.Acc.z = Oaccel.z;
 8000c32:	4b3c      	ldr	r3, [pc, #240]	; (8000d24 <StartAccMeassureTask+0x114>)
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	4a3e      	ldr	r2, [pc, #248]	; (8000d30 <StartAccMeassureTask+0x120>)
 8000c38:	6153      	str	r3, [r2, #20]
	SensorData.Gyro.x = Ogyro.x;
 8000c3a:	4b3b      	ldr	r3, [pc, #236]	; (8000d28 <StartAccMeassureTask+0x118>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a3c      	ldr	r2, [pc, #240]	; (8000d30 <StartAccMeassureTask+0x120>)
 8000c40:	6193      	str	r3, [r2, #24]
	SensorData.Gyro.y = Ogyro.y;
 8000c42:	4b39      	ldr	r3, [pc, #228]	; (8000d28 <StartAccMeassureTask+0x118>)
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	4a3a      	ldr	r2, [pc, #232]	; (8000d30 <StartAccMeassureTask+0x120>)
 8000c48:	61d3      	str	r3, [r2, #28]
	SensorData.Gyro.z = Ogyro.z;
 8000c4a:	4b37      	ldr	r3, [pc, #220]	; (8000d28 <StartAccMeassureTask+0x118>)
 8000c4c:	689b      	ldr	r3, [r3, #8]
 8000c4e:	4a38      	ldr	r2, [pc, #224]	; (8000d30 <StartAccMeassureTask+0x120>)
 8000c50:	6213      	str	r3, [r2, #32]
	SensorData.Mag.x = Omagn.x;
 8000c52:	4b36      	ldr	r3, [pc, #216]	; (8000d2c <StartAccMeassureTask+0x11c>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a36      	ldr	r2, [pc, #216]	; (8000d30 <StartAccMeassureTask+0x120>)
 8000c58:	6013      	str	r3, [r2, #0]
	SensorData.Mag.y = Omagn.y;
 8000c5a:	4b34      	ldr	r3, [pc, #208]	; (8000d2c <StartAccMeassureTask+0x11c>)
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	4a34      	ldr	r2, [pc, #208]	; (8000d30 <StartAccMeassureTask+0x120>)
 8000c60:	6053      	str	r3, [r2, #4]
	SensorData.Mag.z = Omagn.z;
 8000c62:	4b32      	ldr	r3, [pc, #200]	; (8000d2c <StartAccMeassureTask+0x11c>)
 8000c64:	689b      	ldr	r3, [r3, #8]
 8000c66:	4a32      	ldr	r2, [pc, #200]	; (8000d30 <StartAccMeassureTask+0x120>)
 8000c68:	6093      	str	r3, [r2, #8]
	SensorData.SensorTime = Omagn.sensortime;
 8000c6a:	4b30      	ldr	r3, [pc, #192]	; (8000d2c <StartAccMeassureTask+0x11c>)
 8000c6c:	68db      	ldr	r3, [r3, #12]
 8000c6e:	4a30      	ldr	r2, [pc, #192]	; (8000d30 <StartAccMeassureTask+0x120>)
 8000c70:	6253      	str	r3, [r2, #36]	; 0x24
	InitAlgorithms(&SensorData);
 8000c72:	482f      	ldr	r0, [pc, #188]	; (8000d30 <StartAccMeassureTask+0x120>)
 8000c74:	f00c f894 	bl	800cda0 <InitAlgorithms>
//		}
//		printf("%f %f %f\n\r", (sum_x/((float)(steps))), (sum_y/((float)(steps))), (sum_z/((float)(steps))));
//		sum_x = 0.0f; sum_y = 0.0f; sum_z = 0.0f;
//	}
	//Bmx160_getAllData(&Omagn, &Ogyro, &Oaccel);
	SensorData.Acc.x = Oaccel.x;
 8000c78:	4b2a      	ldr	r3, [pc, #168]	; (8000d24 <StartAccMeassureTask+0x114>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a2c      	ldr	r2, [pc, #176]	; (8000d30 <StartAccMeassureTask+0x120>)
 8000c7e:	60d3      	str	r3, [r2, #12]
	SensorData.Acc.y = Oaccel.y;
 8000c80:	4b28      	ldr	r3, [pc, #160]	; (8000d24 <StartAccMeassureTask+0x114>)
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	4a2a      	ldr	r2, [pc, #168]	; (8000d30 <StartAccMeassureTask+0x120>)
 8000c86:	6113      	str	r3, [r2, #16]
	SensorData.Acc.z = Oaccel.z;
 8000c88:	4b26      	ldr	r3, [pc, #152]	; (8000d24 <StartAccMeassureTask+0x114>)
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	4a28      	ldr	r2, [pc, #160]	; (8000d30 <StartAccMeassureTask+0x120>)
 8000c8e:	6153      	str	r3, [r2, #20]
	SensorData.Gyro.x = Ogyro.x;
 8000c90:	4b25      	ldr	r3, [pc, #148]	; (8000d28 <StartAccMeassureTask+0x118>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a26      	ldr	r2, [pc, #152]	; (8000d30 <StartAccMeassureTask+0x120>)
 8000c96:	6193      	str	r3, [r2, #24]
	SensorData.Gyro.y = Ogyro.y;
 8000c98:	4b23      	ldr	r3, [pc, #140]	; (8000d28 <StartAccMeassureTask+0x118>)
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	4a24      	ldr	r2, [pc, #144]	; (8000d30 <StartAccMeassureTask+0x120>)
 8000c9e:	61d3      	str	r3, [r2, #28]
	SensorData.Gyro.z = Ogyro.z;
 8000ca0:	4b21      	ldr	r3, [pc, #132]	; (8000d28 <StartAccMeassureTask+0x118>)
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	4a22      	ldr	r2, [pc, #136]	; (8000d30 <StartAccMeassureTask+0x120>)
 8000ca6:	6213      	str	r3, [r2, #32]
	SensorData.Mag.x = Omagn.x;
 8000ca8:	4b20      	ldr	r3, [pc, #128]	; (8000d2c <StartAccMeassureTask+0x11c>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a20      	ldr	r2, [pc, #128]	; (8000d30 <StartAccMeassureTask+0x120>)
 8000cae:	6013      	str	r3, [r2, #0]
	SensorData.Mag.y = Omagn.y;
 8000cb0:	4b1e      	ldr	r3, [pc, #120]	; (8000d2c <StartAccMeassureTask+0x11c>)
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	4a1e      	ldr	r2, [pc, #120]	; (8000d30 <StartAccMeassureTask+0x120>)
 8000cb6:	6053      	str	r3, [r2, #4]
	SensorData.Mag.z = Omagn.z;
 8000cb8:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <StartAccMeassureTask+0x11c>)
 8000cba:	689b      	ldr	r3, [r3, #8]
 8000cbc:	4a1c      	ldr	r2, [pc, #112]	; (8000d30 <StartAccMeassureTask+0x120>)
 8000cbe:	6093      	str	r3, [r2, #8]
	SensorData.SensorTime = Omagn.sensortime;
 8000cc0:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <StartAccMeassureTask+0x11c>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	4a1a      	ldr	r2, [pc, #104]	; (8000d30 <StartAccMeassureTask+0x120>)
 8000cc6:	6253      	str	r3, [r2, #36]	; 0x24
	//MadgwickUpdate(&SensorData);
	int mx = 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]
	int my = 0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	613b      	str	r3, [r7, #16]
	int mz = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60fb      	str	r3, [r7, #12]
	mx = Omagn.x * 10.0f;
 8000cd4:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <StartAccMeassureTask+0x11c>)
 8000cd6:	edd3 7a00 	vldr	s15, [r3]
 8000cda:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000cde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ce2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ce6:	ee17 3a90 	vmov	r3, s15
 8000cea:	617b      	str	r3, [r7, #20]
	my = Omagn.y * 10.0f;
 8000cec:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <StartAccMeassureTask+0x11c>)
 8000cee:	edd3 7a01 	vldr	s15, [r3, #4]
 8000cf2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000cf6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cfe:	ee17 3a90 	vmov	r3, s15
 8000d02:	613b      	str	r3, [r7, #16]
	mz = Omagn.z * 10.0f;
 8000d04:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <StartAccMeassureTask+0x11c>)
 8000d06:	edd3 7a02 	vldr	s15, [r3, #8]
 8000d0a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000d0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d16:	ee17 3a90 	vmov	r3, s15
 8000d1a:	60fb      	str	r3, [r7, #12]
	//LOG("Raw:0,0,0,0,0,0,%d,%d,%d\n\r", mx, my, mz);
	//GNSS_GetUniqID(&GNSS_Handle);
	//HAL_UART_Receive_IT(GNSS_Handle.huart, GNSS_Handle.uartWorkingBuffer, 92);
	osDelay(50);
 8000d1c:	2032      	movs	r0, #50	; 0x32
 8000d1e:	f00d fa45 	bl	800e1ac <osDelay>
  {
 8000d22:	e7a9      	b.n	8000c78 <StartAccMeassureTask+0x68>
 8000d24:	240003b8 	.word	0x240003b8
 8000d28:	240003c8 	.word	0x240003c8
 8000d2c:	240003a8 	.word	0x240003a8
 8000d30:	240003d8 	.word	0x240003d8

08000d34 <StartReceiveGNSSDataTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReceiveGNSSDataTask */
void StartReceiveGNSSDataTask(void *argument)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  //GNSS_GetPVTData(&GNSS_Handle);
	//GNSS_GetUniqID(&GNSS_Handle);
	//GNSS_GetUniqID(&GNSS_Handle);
	//GNSS_GetUniqID(&GNSS_Handle);
	//GNSS_GetUniqID(&GNSS_Handle);
	HAL_UART_Receive_DMA(GNSS_Handle.huart, GNSS_Handle.uartWorkingBuffer, 92);
 8000d3c:	4b3b      	ldr	r3, [pc, #236]	; (8000e2c <StartReceiveGNSSDataTask+0xf8>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	225c      	movs	r2, #92	; 0x5c
 8000d42:	493b      	ldr	r1, [pc, #236]	; (8000e30 <StartReceiveGNSSDataTask+0xfc>)
 8000d44:	4618      	mov	r0, r3
 8000d46:	f008 ff5d 	bl	8009c04 <HAL_UART_Receive_DMA>
  for(;;)
  {
	xSemaphoreTake(GNNS_UART_INTERRUPTHandle, portMAX_DELAY);
 8000d4a:	4b3a      	ldr	r3, [pc, #232]	; (8000e34 <StartReceiveGNSSDataTask+0x100>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f04f 31ff 	mov.w	r1, #4294967295
 8000d52:	4618      	mov	r0, r3
 8000d54:	f00e f832 	bl	800edbc <xQueueSemaphoreTake>
	LOG("");
 8000d58:	f000 ffb0 	bl	8001cbc <HAL_GetTick>
 8000d5c:	4601      	mov	r1, r0
 8000d5e:	f44f 73be 	mov.w	r3, #380	; 0x17c
 8000d62:	4a35      	ldr	r2, [pc, #212]	; (8000e38 <StartReceiveGNSSDataTask+0x104>)
 8000d64:	4835      	ldr	r0, [pc, #212]	; (8000e3c <StartReceiveGNSSDataTask+0x108>)
 8000d66:	f011 fa87 	bl	8012278 <iprintf>
 8000d6a:	4835      	ldr	r0, [pc, #212]	; (8000e40 <StartReceiveGNSSDataTask+0x10c>)
 8000d6c:	f011 fa84 	bl	8012278 <iprintf>
	if(inter_flag == 0)
 8000d70:	4b34      	ldr	r3, [pc, #208]	; (8000e44 <StartReceiveGNSSDataTask+0x110>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d112      	bne.n	8000d9e <StartReceiveGNSSDataTask+0x6a>
	{
		LOG("NORMAL GNSS INTERRUPT[%d]!!!", INTERRUPTS);
 8000d78:	f000 ffa0 	bl	8001cbc <HAL_GetTick>
 8000d7c:	4601      	mov	r1, r0
 8000d7e:	f240 137f 	movw	r3, #383	; 0x17f
 8000d82:	4a2d      	ldr	r2, [pc, #180]	; (8000e38 <StartReceiveGNSSDataTask+0x104>)
 8000d84:	482d      	ldr	r0, [pc, #180]	; (8000e3c <StartReceiveGNSSDataTask+0x108>)
 8000d86:	f011 fa77 	bl	8012278 <iprintf>
 8000d8a:	4b2f      	ldr	r3, [pc, #188]	; (8000e48 <StartReceiveGNSSDataTask+0x114>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4619      	mov	r1, r3
 8000d90:	482e      	ldr	r0, [pc, #184]	; (8000e4c <StartReceiveGNSSDataTask+0x118>)
 8000d92:	f011 fa71 	bl	8012278 <iprintf>
 8000d96:	482a      	ldr	r0, [pc, #168]	; (8000e40 <StartReceiveGNSSDataTask+0x10c>)
 8000d98:	f011 fa6e 	bl	8012278 <iprintf>
 8000d9c:	e013      	b.n	8000dc6 <StartReceiveGNSSDataTask+0x92>
	}
	else
	{
		LOG("IDLE GNSS INTERRUPT[%d], SIZE: %d", INTERRUPTS, inter_flag);
 8000d9e:	f000 ff8d 	bl	8001cbc <HAL_GetTick>
 8000da2:	4601      	mov	r1, r0
 8000da4:	f240 1383 	movw	r3, #387	; 0x183
 8000da8:	4a23      	ldr	r2, [pc, #140]	; (8000e38 <StartReceiveGNSSDataTask+0x104>)
 8000daa:	4824      	ldr	r0, [pc, #144]	; (8000e3c <StartReceiveGNSSDataTask+0x108>)
 8000dac:	f011 fa64 	bl	8012278 <iprintf>
 8000db0:	4b25      	ldr	r3, [pc, #148]	; (8000e48 <StartReceiveGNSSDataTask+0x114>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a23      	ldr	r2, [pc, #140]	; (8000e44 <StartReceiveGNSSDataTask+0x110>)
 8000db6:	6812      	ldr	r2, [r2, #0]
 8000db8:	4619      	mov	r1, r3
 8000dba:	4825      	ldr	r0, [pc, #148]	; (8000e50 <StartReceiveGNSSDataTask+0x11c>)
 8000dbc:	f011 fa5c 	bl	8012278 <iprintf>
 8000dc0:	481f      	ldr	r0, [pc, #124]	; (8000e40 <StartReceiveGNSSDataTask+0x10c>)
 8000dc2:	f011 fa59 	bl	8012278 <iprintf>
	}
	printf("\n\r");
 8000dc6:	481e      	ldr	r0, [pc, #120]	; (8000e40 <StartReceiveGNSSDataTask+0x10c>)
 8000dc8:	f011 fa56 	bl	8012278 <iprintf>
	printf("\n\r");
 8000dcc:	481c      	ldr	r0, [pc, #112]	; (8000e40 <StartReceiveGNSSDataTask+0x10c>)
 8000dce:	f011 fa53 	bl	8012278 <iprintf>
	for(int i = 0; i < sizeof(GNSS_Handle.uartWorkingBuffer); ++i)
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	e00b      	b.n	8000df0 <StartReceiveGNSSDataTask+0xbc>
	{
		printf("%02x", GNSS_Handle.uartWorkingBuffer[i]);
 8000dd8:	4a14      	ldr	r2, [pc, #80]	; (8000e2c <StartReceiveGNSSDataTask+0xf8>)
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	4413      	add	r3, r2
 8000dde:	3308      	adds	r3, #8
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	4619      	mov	r1, r3
 8000de4:	481b      	ldr	r0, [pc, #108]	; (8000e54 <StartReceiveGNSSDataTask+0x120>)
 8000de6:	f011 fa47 	bl	8012278 <iprintf>
	for(int i = 0; i < sizeof(GNSS_Handle.uartWorkingBuffer); ++i)
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	3301      	adds	r3, #1
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	2b63      	cmp	r3, #99	; 0x63
 8000df4:	d9f0      	bls.n	8000dd8 <StartReceiveGNSSDataTask+0xa4>
	}
	printf("\n\r");
 8000df6:	4812      	ldr	r0, [pc, #72]	; (8000e40 <StartReceiveGNSSDataTask+0x10c>)
 8000df8:	f011 fa3e 	bl	8012278 <iprintf>
	printf("\n\r");
 8000dfc:	4810      	ldr	r0, [pc, #64]	; (8000e40 <StartReceiveGNSSDataTask+0x10c>)
 8000dfe:	f011 fa3b 	bl	8012278 <iprintf>
	LOG("");
 8000e02:	f000 ff5b 	bl	8001cbc <HAL_GetTick>
 8000e06:	4601      	mov	r1, r0
 8000e08:	f240 138d 	movw	r3, #397	; 0x18d
 8000e0c:	4a0a      	ldr	r2, [pc, #40]	; (8000e38 <StartReceiveGNSSDataTask+0x104>)
 8000e0e:	480b      	ldr	r0, [pc, #44]	; (8000e3c <StartReceiveGNSSDataTask+0x108>)
 8000e10:	f011 fa32 	bl	8012278 <iprintf>
 8000e14:	480a      	ldr	r0, [pc, #40]	; (8000e40 <StartReceiveGNSSDataTask+0x10c>)
 8000e16:	f011 fa2f 	bl	8012278 <iprintf>
	HAL_UART_Receive_DMA(GNSS_Handle.huart, GNSS_Handle.uartWorkingBuffer, 92);
 8000e1a:	4b04      	ldr	r3, [pc, #16]	; (8000e2c <StartReceiveGNSSDataTask+0xf8>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	225c      	movs	r2, #92	; 0x5c
 8000e20:	4903      	ldr	r1, [pc, #12]	; (8000e30 <StartReceiveGNSSDataTask+0xfc>)
 8000e22:	4618      	mov	r0, r3
 8000e24:	f008 feee 	bl	8009c04 <HAL_UART_Receive_DMA>
	xSemaphoreTake(GNNS_UART_INTERRUPTHandle, portMAX_DELAY);
 8000e28:	e78f      	b.n	8000d4a <StartReceiveGNSSDataTask+0x16>
 8000e2a:	bf00      	nop
 8000e2c:	24009a70 	.word	0x24009a70
 8000e30:	24009a78 	.word	0x24009a78
 8000e34:	240044d0 	.word	0x240044d0
 8000e38:	08014478 	.word	0x08014478
 8000e3c:	08014114 	.word	0x08014114
 8000e40:	08014130 	.word	0x08014130
 8000e44:	24000400 	.word	0x24000400
 8000e48:	24000404 	.word	0x24000404
 8000e4c:	08014288 	.word	0x08014288
 8000e50:	080142a8 	.word	0x080142a8
 8000e54:	080142cc 	.word	0x080142cc

08000e58 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08c      	sub	sp, #48	; 0x30
 8000e5c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5e:	f107 031c 	add.w	r3, r7, #28
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
 8000e6a:	60da      	str	r2, [r3, #12]
 8000e6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6e:	4b57      	ldr	r3, [pc, #348]	; (8000fcc <MX_GPIO_Init+0x174>)
 8000e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e74:	4a55      	ldr	r2, [pc, #340]	; (8000fcc <MX_GPIO_Init+0x174>)
 8000e76:	f043 0304 	orr.w	r3, r3, #4
 8000e7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e7e:	4b53      	ldr	r3, [pc, #332]	; (8000fcc <MX_GPIO_Init+0x174>)
 8000e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e84:	f003 0304 	and.w	r3, r3, #4
 8000e88:	61bb      	str	r3, [r7, #24]
 8000e8a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e8c:	4b4f      	ldr	r3, [pc, #316]	; (8000fcc <MX_GPIO_Init+0x174>)
 8000e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e92:	4a4e      	ldr	r2, [pc, #312]	; (8000fcc <MX_GPIO_Init+0x174>)
 8000e94:	f043 0320 	orr.w	r3, r3, #32
 8000e98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e9c:	4b4b      	ldr	r3, [pc, #300]	; (8000fcc <MX_GPIO_Init+0x174>)
 8000e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea2:	f003 0320 	and.w	r3, r3, #32
 8000ea6:	617b      	str	r3, [r7, #20]
 8000ea8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eaa:	4b48      	ldr	r3, [pc, #288]	; (8000fcc <MX_GPIO_Init+0x174>)
 8000eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb0:	4a46      	ldr	r2, [pc, #280]	; (8000fcc <MX_GPIO_Init+0x174>)
 8000eb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eba:	4b44      	ldr	r3, [pc, #272]	; (8000fcc <MX_GPIO_Init+0x174>)
 8000ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ec4:	613b      	str	r3, [r7, #16]
 8000ec6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec8:	4b40      	ldr	r3, [pc, #256]	; (8000fcc <MX_GPIO_Init+0x174>)
 8000eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ece:	4a3f      	ldr	r2, [pc, #252]	; (8000fcc <MX_GPIO_Init+0x174>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ed8:	4b3c      	ldr	r3, [pc, #240]	; (8000fcc <MX_GPIO_Init+0x174>)
 8000eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee6:	4b39      	ldr	r3, [pc, #228]	; (8000fcc <MX_GPIO_Init+0x174>)
 8000ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eec:	4a37      	ldr	r2, [pc, #220]	; (8000fcc <MX_GPIO_Init+0x174>)
 8000eee:	f043 0302 	orr.w	r3, r3, #2
 8000ef2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ef6:	4b35      	ldr	r3, [pc, #212]	; (8000fcc <MX_GPIO_Init+0x174>)
 8000ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000efc:	f003 0302 	and.w	r3, r3, #2
 8000f00:	60bb      	str	r3, [r7, #8]
 8000f02:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f04:	4b31      	ldr	r3, [pc, #196]	; (8000fcc <MX_GPIO_Init+0x174>)
 8000f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f0a:	4a30      	ldr	r2, [pc, #192]	; (8000fcc <MX_GPIO_Init+0x174>)
 8000f0c:	f043 0308 	orr.w	r3, r3, #8
 8000f10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f14:	4b2d      	ldr	r3, [pc, #180]	; (8000fcc <MX_GPIO_Init+0x174>)
 8000f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1a:	f003 0308 	and.w	r3, r3, #8
 8000f1e:	607b      	str	r3, [r7, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f22:	4b2a      	ldr	r3, [pc, #168]	; (8000fcc <MX_GPIO_Init+0x174>)
 8000f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f28:	4a28      	ldr	r2, [pc, #160]	; (8000fcc <MX_GPIO_Init+0x174>)
 8000f2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f32:	4b26      	ldr	r3, [pc, #152]	; (8000fcc <MX_GPIO_Init+0x174>)
 8000f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f3c:	603b      	str	r3, [r7, #0]
 8000f3e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, USR_LED3_Pin|USR_LED2_Pin, GPIO_PIN_RESET);
 8000f40:	2200      	movs	r2, #0
 8000f42:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000f46:	4822      	ldr	r0, [pc, #136]	; (8000fd0 <MX_GPIO_Init+0x178>)
 8000f48:	f004 fc10 	bl	800576c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	2140      	movs	r1, #64	; 0x40
 8000f50:	4820      	ldr	r0, [pc, #128]	; (8000fd4 <MX_GPIO_Init+0x17c>)
 8000f52:	f004 fc0b 	bl	800576c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UserButton_Pin;
 8000f56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UserButton_GPIO_Port, &GPIO_InitStruct);
 8000f64:	f107 031c 	add.w	r3, r7, #28
 8000f68:	4619      	mov	r1, r3
 8000f6a:	481b      	ldr	r0, [pc, #108]	; (8000fd8 <MX_GPIO_Init+0x180>)
 8000f6c:	f004 fa36 	bl	80053dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = USR_LED3_Pin|USR_LED2_Pin;
 8000f70:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000f74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f76:	2301      	movs	r3, #1
 8000f78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f82:	f107 031c 	add.w	r3, r7, #28
 8000f86:	4619      	mov	r1, r3
 8000f88:	4811      	ldr	r0, [pc, #68]	; (8000fd0 <MX_GPIO_Init+0x178>)
 8000f8a:	f004 fa27 	bl	80053dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000f8e:	2340      	movs	r3, #64	; 0x40
 8000f90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f92:	2301      	movs	r3, #1
 8000f94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f9e:	f107 031c 	add.w	r3, r7, #28
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	480b      	ldr	r0, [pc, #44]	; (8000fd4 <MX_GPIO_Init+0x17c>)
 8000fa6:	f004 fa19 	bl	80053dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000faa:	2380      	movs	r3, #128	; 0x80
 8000fac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000fb6:	f107 031c 	add.w	r3, r7, #28
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4805      	ldr	r0, [pc, #20]	; (8000fd4 <MX_GPIO_Init+0x17c>)
 8000fbe:	f004 fa0d 	bl	80053dc <HAL_GPIO_Init>

}
 8000fc2:	bf00      	nop
 8000fc4:	3730      	adds	r7, #48	; 0x30
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	58024400 	.word	0x58024400
 8000fd0:	58020400 	.word	0x58020400
 8000fd4:	58021800 	.word	0x58021800
 8000fd8:	58020800 	.word	0x58020800

08000fdc <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000fe0:	4b1c      	ldr	r3, [pc, #112]	; (8001054 <MX_I2C2_Init+0x78>)
 8000fe2:	4a1d      	ldr	r2, [pc, #116]	; (8001058 <MX_I2C2_Init+0x7c>)
 8000fe4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0040163A;
 8000fe6:	4b1b      	ldr	r3, [pc, #108]	; (8001054 <MX_I2C2_Init+0x78>)
 8000fe8:	4a1c      	ldr	r2, [pc, #112]	; (800105c <MX_I2C2_Init+0x80>)
 8000fea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000fec:	4b19      	ldr	r3, [pc, #100]	; (8001054 <MX_I2C2_Init+0x78>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ff2:	4b18      	ldr	r3, [pc, #96]	; (8001054 <MX_I2C2_Init+0x78>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ff8:	4b16      	ldr	r3, [pc, #88]	; (8001054 <MX_I2C2_Init+0x78>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000ffe:	4b15      	ldr	r3, [pc, #84]	; (8001054 <MX_I2C2_Init+0x78>)
 8001000:	2200      	movs	r2, #0
 8001002:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001004:	4b13      	ldr	r3, [pc, #76]	; (8001054 <MX_I2C2_Init+0x78>)
 8001006:	2200      	movs	r2, #0
 8001008:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800100a:	4b12      	ldr	r3, [pc, #72]	; (8001054 <MX_I2C2_Init+0x78>)
 800100c:	2200      	movs	r2, #0
 800100e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001010:	4b10      	ldr	r3, [pc, #64]	; (8001054 <MX_I2C2_Init+0x78>)
 8001012:	2200      	movs	r2, #0
 8001014:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001016:	480f      	ldr	r0, [pc, #60]	; (8001054 <MX_I2C2_Init+0x78>)
 8001018:	f004 fbc2 	bl	80057a0 <HAL_I2C_Init>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001022:	f000 f95d 	bl	80012e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001026:	2100      	movs	r1, #0
 8001028:	480a      	ldr	r0, [pc, #40]	; (8001054 <MX_I2C2_Init+0x78>)
 800102a:	f005 f8c5 	bl	80061b8 <HAL_I2CEx_ConfigAnalogFilter>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001034:	f000 f954 	bl	80012e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001038:	2100      	movs	r1, #0
 800103a:	4806      	ldr	r0, [pc, #24]	; (8001054 <MX_I2C2_Init+0x78>)
 800103c:	f005 f907 	bl	800624e <HAL_I2CEx_ConfigDigitalFilter>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001046:	f000 f94b 	bl	80012e0 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C2);
 800104a:	2002      	movs	r0, #2
 800104c:	f005 f94c 	bl	80062e8 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}
 8001054:	24004524 	.word	0x24004524
 8001058:	40005800 	.word	0x40005800
 800105c:	0040163a 	.word	0x0040163a

08001060 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b0ba      	sub	sp, #232	; 0xe8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001078:	f107 0310 	add.w	r3, r7, #16
 800107c:	22c0      	movs	r2, #192	; 0xc0
 800107e:	2100      	movs	r1, #0
 8001080:	4618      	mov	r0, r3
 8001082:	f011 f94e 	bl	8012322 <memset>
  if(i2cHandle->Instance==I2C2)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a26      	ldr	r2, [pc, #152]	; (8001124 <HAL_I2C_MspInit+0xc4>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d145      	bne.n	800111c <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001090:	f04f 0208 	mov.w	r2, #8
 8001094:	f04f 0300 	mov.w	r3, #0
 8001098:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800109c:	2300      	movs	r3, #0
 800109e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010a2:	f107 0310 	add.w	r3, r7, #16
 80010a6:	4618      	mov	r0, r3
 80010a8:	f006 fafc 	bl	80076a4 <HAL_RCCEx_PeriphCLKConfig>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80010b2:	f000 f915 	bl	80012e0 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80010b6:	4b1c      	ldr	r3, [pc, #112]	; (8001128 <HAL_I2C_MspInit+0xc8>)
 80010b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010bc:	4a1a      	ldr	r2, [pc, #104]	; (8001128 <HAL_I2C_MspInit+0xc8>)
 80010be:	f043 0320 	orr.w	r3, r3, #32
 80010c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010c6:	4b18      	ldr	r3, [pc, #96]	; (8001128 <HAL_I2C_MspInit+0xc8>)
 80010c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010cc:	f003 0320 	and.w	r3, r3, #32
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010d4:	2303      	movs	r3, #3
 80010d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010da:	2312      	movs	r3, #18
 80010dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e6:	2300      	movs	r3, #0
 80010e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80010ec:	2304      	movs	r3, #4
 80010ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010f2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010f6:	4619      	mov	r1, r3
 80010f8:	480c      	ldr	r0, [pc, #48]	; (800112c <HAL_I2C_MspInit+0xcc>)
 80010fa:	f004 f96f 	bl	80053dc <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80010fe:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <HAL_I2C_MspInit+0xc8>)
 8001100:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001104:	4a08      	ldr	r2, [pc, #32]	; (8001128 <HAL_I2C_MspInit+0xc8>)
 8001106:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800110a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800110e:	4b06      	ldr	r3, [pc, #24]	; (8001128 <HAL_I2C_MspInit+0xc8>)
 8001110:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001114:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800111c:	bf00      	nop
 800111e:	37e8      	adds	r7, #232	; 0xe8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40005800 	.word	0x40005800
 8001128:	58024400 	.word	0x58024400
 800112c:	58021400 	.word	0x58021400

08001130 <__io_putchar>:
 */
#include "logger.h"

#ifdef DEBUG
PUTCHAR_PROTOTYPE
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8001138:	1d39      	adds	r1, r7, #4
 800113a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800113e:	2201      	movs	r2, #1
 8001140:	4803      	ldr	r0, [pc, #12]	; (8001150 <__io_putchar+0x20>)
 8001142:	f008 fc05 	bl	8009950 <HAL_UART_Transmit>

  return ch;
 8001146:	687b      	ldr	r3, [r7, #4]
}
 8001148:	4618      	mov	r0, r3
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	2400465c 	.word	0x2400465c

08001154 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001158:	f000 fd60 	bl	8001c1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800115c:	f000 f818 	bl	8001190 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001160:	f7ff fe7a 	bl	8000e58 <MX_GPIO_Init>
  MX_DMA_Init();
 8001164:	f7ff fa92 	bl	800068c <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001168:	f000 fc80 	bl	8001a6c <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 800116c:	f7ff ff36 	bl	8000fdc <MX_I2C2_Init>
  MX_ETH_Init();
 8001170:	f7ff faa6 	bl	80006c0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001174:	f000 fb10 	bl	8001798 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8001178:	f000 fac2 	bl	8001700 <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800117c:	f000 f882 	bl	8001284 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001180:	f00c ff38 	bl	800dff4 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001184:	f7ff fc12 	bl	80009ac <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001188:	f00c ff58 	bl	800e03c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800118c:	e7fe      	b.n	800118c <main+0x38>
	...

08001190 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b09c      	sub	sp, #112	; 0x70
 8001194:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001196:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119a:	224c      	movs	r2, #76	; 0x4c
 800119c:	2100      	movs	r1, #0
 800119e:	4618      	mov	r0, r3
 80011a0:	f011 f8bf 	bl	8012322 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	2220      	movs	r2, #32
 80011a8:	2100      	movs	r1, #0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f011 f8b9 	bl	8012322 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80011b0:	2002      	movs	r0, #2
 80011b2:	f005 fa05 	bl	80065c0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011b6:	2300      	movs	r3, #0
 80011b8:	603b      	str	r3, [r7, #0]
 80011ba:	4b30      	ldr	r3, [pc, #192]	; (800127c <SystemClock_Config+0xec>)
 80011bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011be:	4a2f      	ldr	r2, [pc, #188]	; (800127c <SystemClock_Config+0xec>)
 80011c0:	f023 0301 	bic.w	r3, r3, #1
 80011c4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80011c6:	4b2d      	ldr	r3, [pc, #180]	; (800127c <SystemClock_Config+0xec>)
 80011c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	603b      	str	r3, [r7, #0]
 80011d0:	4b2b      	ldr	r3, [pc, #172]	; (8001280 <SystemClock_Config+0xf0>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	4a2a      	ldr	r2, [pc, #168]	; (8001280 <SystemClock_Config+0xf0>)
 80011d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011da:	6193      	str	r3, [r2, #24]
 80011dc:	4b28      	ldr	r3, [pc, #160]	; (8001280 <SystemClock_Config+0xf0>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011e4:	603b      	str	r3, [r7, #0]
 80011e6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80011e8:	bf00      	nop
 80011ea:	4b25      	ldr	r3, [pc, #148]	; (8001280 <SystemClock_Config+0xf0>)
 80011ec:	699b      	ldr	r3, [r3, #24]
 80011ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011f6:	d1f8      	bne.n	80011ea <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011f8:	2301      	movs	r3, #1
 80011fa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80011fc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001200:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001202:	2302      	movs	r3, #2
 8001204:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001206:	2302      	movs	r3, #2
 8001208:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800120a:	2301      	movs	r3, #1
 800120c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800120e:	2318      	movs	r3, #24
 8001210:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001212:	2302      	movs	r3, #2
 8001214:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001216:	2304      	movs	r3, #4
 8001218:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800121a:	2302      	movs	r3, #2
 800121c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800121e:	230c      	movs	r3, #12
 8001220:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001222:	2300      	movs	r3, #0
 8001224:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800122a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800122e:	4618      	mov	r0, r3
 8001230:	f005 fa10 	bl	8006654 <HAL_RCC_OscConfig>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800123a:	f000 f851 	bl	80012e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800123e:	233f      	movs	r3, #63	; 0x3f
 8001240:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001242:	2303      	movs	r3, #3
 8001244:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001246:	2300      	movs	r3, #0
 8001248:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800124a:	2300      	movs	r3, #0
 800124c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800124e:	2300      	movs	r3, #0
 8001250:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001252:	2300      	movs	r3, #0
 8001254:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800125a:	2300      	movs	r3, #0
 800125c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	2101      	movs	r1, #1
 8001262:	4618      	mov	r0, r3
 8001264:	f005 fe50 	bl	8006f08 <HAL_RCC_ClockConfig>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 800126e:	f000 f837 	bl	80012e0 <Error_Handler>
  }
}
 8001272:	bf00      	nop
 8001274:	3770      	adds	r7, #112	; 0x70
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	58000400 	.word	0x58000400
 8001280:	58024800 	.word	0x58024800

08001284 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001288:	2200      	movs	r2, #0
 800128a:	2105      	movs	r1, #5
 800128c:	2026      	movs	r0, #38	; 0x26
 800128e:	f000 fe1d 	bl	8001ecc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001292:	2026      	movs	r0, #38	; 0x26
 8001294:	f000 fe34 	bl	8001f00 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001298:	2200      	movs	r2, #0
 800129a:	2105      	movs	r1, #5
 800129c:	2011      	movs	r0, #17
 800129e:	f000 fe15 	bl	8001ecc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80012a2:	2011      	movs	r0, #17
 80012a4:	f000 fe2c 	bl	8001f00 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 80012a8:	2200      	movs	r2, #0
 80012aa:	2105      	movs	r1, #5
 80012ac:	202f      	movs	r0, #47	; 0x2f
 80012ae:	f000 fe0d 	bl	8001ecc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80012b2:	202f      	movs	r0, #47	; 0x2f
 80012b4:	f000 fe24 	bl	8001f00 <HAL_NVIC_EnableIRQ>
}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}

080012bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a04      	ldr	r2, [pc, #16]	; (80012dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d101      	bne.n	80012d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012ce:	f000 fce1 	bl	8001c94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40014800 	.word	0x40014800

080012e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e4:	b672      	cpsid	i
}
 80012e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <Error_Handler+0x8>
	...

080012ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f2:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <HAL_MspInit+0x38>)
 80012f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012f8:	4a0a      	ldr	r2, [pc, #40]	; (8001324 <HAL_MspInit+0x38>)
 80012fa:	f043 0302 	orr.w	r3, r3, #2
 80012fe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001302:	4b08      	ldr	r3, [pc, #32]	; (8001324 <HAL_MspInit+0x38>)
 8001304:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001308:	f003 0302 	and.w	r3, r3, #2
 800130c:	607b      	str	r3, [r7, #4]
 800130e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001310:	2200      	movs	r2, #0
 8001312:	210f      	movs	r1, #15
 8001314:	f06f 0001 	mvn.w	r0, #1
 8001318:	f000 fdd8 	bl	8001ecc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800131c:	bf00      	nop
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	58024400 	.word	0x58024400

08001328 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08e      	sub	sp, #56	; 0x38
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM17 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2b0f      	cmp	r3, #15
 8001334:	d842      	bhi.n	80013bc <HAL_InitTick+0x94>
  {
  HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0U);
 8001336:	2200      	movs	r2, #0
 8001338:	6879      	ldr	r1, [r7, #4]
 800133a:	2076      	movs	r0, #118	; 0x76
 800133c:	f000 fdc6 	bl	8001ecc <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8001340:	2076      	movs	r0, #118	; 0x76
 8001342:	f000 fddd 	bl	8001f00 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001346:	4a23      	ldr	r2, [pc, #140]	; (80013d4 <HAL_InitTick+0xac>)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 800134c:	4b22      	ldr	r3, [pc, #136]	; (80013d8 <HAL_InitTick+0xb0>)
 800134e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001352:	4a21      	ldr	r2, [pc, #132]	; (80013d8 <HAL_InitTick+0xb0>)
 8001354:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001358:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800135c:	4b1e      	ldr	r3, [pc, #120]	; (80013d8 <HAL_InitTick+0xb0>)
 800135e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001362:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001366:	60bb      	str	r3, [r7, #8]
 8001368:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800136a:	f107 020c 	add.w	r2, r7, #12
 800136e:	f107 0310 	add.w	r3, r7, #16
 8001372:	4611      	mov	r1, r2
 8001374:	4618      	mov	r0, r3
 8001376:	f006 f953 	bl	8007620 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800137a:	f006 f93b 	bl	80075f4 <HAL_RCC_GetPCLK2Freq>
 800137e:	6378      	str	r0, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001382:	4a16      	ldr	r2, [pc, #88]	; (80013dc <HAL_InitTick+0xb4>)
 8001384:	fba2 2303 	umull	r2, r3, r2, r3
 8001388:	0c9b      	lsrs	r3, r3, #18
 800138a:	3b01      	subs	r3, #1
 800138c:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 800138e:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <HAL_InitTick+0xb8>)
 8001390:	4a14      	ldr	r2, [pc, #80]	; (80013e4 <HAL_InitTick+0xbc>)
 8001392:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8001394:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <HAL_InitTick+0xb8>)
 8001396:	f240 32e7 	movw	r2, #999	; 0x3e7
 800139a:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 800139c:	4a10      	ldr	r2, [pc, #64]	; (80013e0 <HAL_InitTick+0xb8>)
 800139e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013a0:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 80013a2:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <HAL_InitTick+0xb8>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a8:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <HAL_InitTick+0xb8>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 80013ae:	480c      	ldr	r0, [pc, #48]	; (80013e0 <HAL_InitTick+0xb8>)
 80013b0:	f007 ffa4 	bl	80092fc <HAL_TIM_Base_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d107      	bne.n	80013ca <HAL_InitTick+0xa2>
 80013ba:	e001      	b.n	80013c0 <HAL_InitTick+0x98>
    return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e005      	b.n	80013cc <HAL_InitTick+0xa4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 80013c0:	4807      	ldr	r0, [pc, #28]	; (80013e0 <HAL_InitTick+0xb8>)
 80013c2:	f007 fffd 	bl	80093c0 <HAL_TIM_Base_Start_IT>
 80013c6:	4603      	mov	r3, r0
 80013c8:	e000      	b.n	80013cc <HAL_InitTick+0xa4>
  }

  /* Return function status */
  return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3738      	adds	r7, #56	; 0x38
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	24000008 	.word	0x24000008
 80013d8:	58024400 	.word	0x58024400
 80013dc:	431bde83 	.word	0x431bde83
 80013e0:	24004578 	.word	0x24004578
 80013e4:	40014800 	.word	0x40014800

080013e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013ec:	e7fe      	b.n	80013ec <NMI_Handler+0x4>

080013ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013f2:	e7fe      	b.n	80013f2 <HardFault_Handler+0x4>

080013f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <MemManage_Handler+0x4>

080013fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013fe:	e7fe      	b.n	80013fe <BusFault_Handler+0x4>

08001400 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <UsageFault_Handler+0x4>

08001406 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001418:	4802      	ldr	r0, [pc, #8]	; (8001424 <DMA1_Stream6_IRQHandler+0x10>)
 800141a:	f002 f8a9 	bl	8003570 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	240046f0 	.word	0x240046f0

08001428 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800142c:	4802      	ldr	r0, [pc, #8]	; (8001438 <USART2_IRQHandler+0x10>)
 800142e:	f008 fc35 	bl	8009c9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	240045c8 	.word	0x240045c8

0800143c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001440:	4802      	ldr	r0, [pc, #8]	; (800144c <DMA1_Stream7_IRQHandler+0x10>)
 8001442:	f002 f895 	bl	8003570 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	24004768 	.word	0x24004768

08001450 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001454:	4802      	ldr	r0, [pc, #8]	; (8001460 <TIM17_IRQHandler+0x10>)
 8001456:	f008 f82b 	bl	80094b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	24004578 	.word	0x24004578

08001464 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  return 1;
 8001468:	2301      	movs	r3, #1
}
 800146a:	4618      	mov	r0, r3
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <_kill>:

int _kill(int pid, int sig)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800147e:	f010 ffa3 	bl	80123c8 <__errno>
 8001482:	4603      	mov	r3, r0
 8001484:	2216      	movs	r2, #22
 8001486:	601a      	str	r2, [r3, #0]
  return -1;
 8001488:	f04f 33ff 	mov.w	r3, #4294967295
}
 800148c:	4618      	mov	r0, r3
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <_exit>:

void _exit (int status)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800149c:	f04f 31ff 	mov.w	r1, #4294967295
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f7ff ffe7 	bl	8001474 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014a6:	e7fe      	b.n	80014a6 <_exit+0x12>

080014a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	e00a      	b.n	80014d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014ba:	f3af 8000 	nop.w
 80014be:	4601      	mov	r1, r0
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	1c5a      	adds	r2, r3, #1
 80014c4:	60ba      	str	r2, [r7, #8]
 80014c6:	b2ca      	uxtb	r2, r1
 80014c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	3301      	adds	r3, #1
 80014ce:	617b      	str	r3, [r7, #20]
 80014d0:	697a      	ldr	r2, [r7, #20]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	dbf0      	blt.n	80014ba <_read+0x12>
  }

  return len;
 80014d8:	687b      	ldr	r3, [r7, #4]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b086      	sub	sp, #24
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	60f8      	str	r0, [r7, #12]
 80014ea:	60b9      	str	r1, [r7, #8]
 80014ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]
 80014f2:	e009      	b.n	8001508 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	1c5a      	adds	r2, r3, #1
 80014f8:	60ba      	str	r2, [r7, #8]
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff fe17 	bl	8001130 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	3301      	adds	r3, #1
 8001506:	617b      	str	r3, [r7, #20]
 8001508:	697a      	ldr	r2, [r7, #20]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	429a      	cmp	r2, r3
 800150e:	dbf1      	blt.n	80014f4 <_write+0x12>
  }
  return len;
 8001510:	687b      	ldr	r3, [r7, #4]
}
 8001512:	4618      	mov	r0, r3
 8001514:	3718      	adds	r7, #24
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <_close>:

int _close(int file)
{
 800151a:	b480      	push	{r7}
 800151c:	b083      	sub	sp, #12
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001522:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001526:	4618      	mov	r0, r3
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001532:	b480      	push	{r7}
 8001534:	b083      	sub	sp, #12
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
 800153a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001542:	605a      	str	r2, [r3, #4]
  return 0;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <_isatty>:

int _isatty(int file)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800155a:	2301      	movs	r3, #1
}
 800155c:	4618      	mov	r0, r3
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3714      	adds	r7, #20
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
	...

08001584 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800158c:	4a14      	ldr	r2, [pc, #80]	; (80015e0 <_sbrk+0x5c>)
 800158e:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <_sbrk+0x60>)
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001598:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <_sbrk+0x64>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d102      	bne.n	80015a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015a0:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <_sbrk+0x64>)
 80015a2:	4a12      	ldr	r2, [pc, #72]	; (80015ec <_sbrk+0x68>)
 80015a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015a6:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <_sbrk+0x64>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4413      	add	r3, r2
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d207      	bcs.n	80015c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015b4:	f010 ff08 	bl	80123c8 <__errno>
 80015b8:	4603      	mov	r3, r0
 80015ba:	220c      	movs	r2, #12
 80015bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015be:	f04f 33ff 	mov.w	r3, #4294967295
 80015c2:	e009      	b.n	80015d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015c4:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <_sbrk+0x64>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ca:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <_sbrk+0x64>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4413      	add	r3, r2
 80015d2:	4a05      	ldr	r2, [pc, #20]	; (80015e8 <_sbrk+0x64>)
 80015d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015d6:	68fb      	ldr	r3, [r7, #12]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	24080000 	.word	0x24080000
 80015e4:	00000400 	.word	0x00000400
 80015e8:	240045c4 	.word	0x240045c4
 80015ec:	24009c70 	.word	0x24009c70

080015f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80015f4:	4b37      	ldr	r3, [pc, #220]	; (80016d4 <SystemInit+0xe4>)
 80015f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015fa:	4a36      	ldr	r2, [pc, #216]	; (80016d4 <SystemInit+0xe4>)
 80015fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001600:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001604:	4b34      	ldr	r3, [pc, #208]	; (80016d8 <SystemInit+0xe8>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 030f 	and.w	r3, r3, #15
 800160c:	2b06      	cmp	r3, #6
 800160e:	d807      	bhi.n	8001620 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001610:	4b31      	ldr	r3, [pc, #196]	; (80016d8 <SystemInit+0xe8>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f023 030f 	bic.w	r3, r3, #15
 8001618:	4a2f      	ldr	r2, [pc, #188]	; (80016d8 <SystemInit+0xe8>)
 800161a:	f043 0307 	orr.w	r3, r3, #7
 800161e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001620:	4b2e      	ldr	r3, [pc, #184]	; (80016dc <SystemInit+0xec>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a2d      	ldr	r2, [pc, #180]	; (80016dc <SystemInit+0xec>)
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800162c:	4b2b      	ldr	r3, [pc, #172]	; (80016dc <SystemInit+0xec>)
 800162e:	2200      	movs	r2, #0
 8001630:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001632:	4b2a      	ldr	r3, [pc, #168]	; (80016dc <SystemInit+0xec>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	4929      	ldr	r1, [pc, #164]	; (80016dc <SystemInit+0xec>)
 8001638:	4b29      	ldr	r3, [pc, #164]	; (80016e0 <SystemInit+0xf0>)
 800163a:	4013      	ands	r3, r2
 800163c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800163e:	4b26      	ldr	r3, [pc, #152]	; (80016d8 <SystemInit+0xe8>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0308 	and.w	r3, r3, #8
 8001646:	2b00      	cmp	r3, #0
 8001648:	d007      	beq.n	800165a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800164a:	4b23      	ldr	r3, [pc, #140]	; (80016d8 <SystemInit+0xe8>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f023 030f 	bic.w	r3, r3, #15
 8001652:	4a21      	ldr	r2, [pc, #132]	; (80016d8 <SystemInit+0xe8>)
 8001654:	f043 0307 	orr.w	r3, r3, #7
 8001658:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800165a:	4b20      	ldr	r3, [pc, #128]	; (80016dc <SystemInit+0xec>)
 800165c:	2200      	movs	r2, #0
 800165e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001660:	4b1e      	ldr	r3, [pc, #120]	; (80016dc <SystemInit+0xec>)
 8001662:	2200      	movs	r2, #0
 8001664:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001666:	4b1d      	ldr	r3, [pc, #116]	; (80016dc <SystemInit+0xec>)
 8001668:	2200      	movs	r2, #0
 800166a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800166c:	4b1b      	ldr	r3, [pc, #108]	; (80016dc <SystemInit+0xec>)
 800166e:	4a1d      	ldr	r2, [pc, #116]	; (80016e4 <SystemInit+0xf4>)
 8001670:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001672:	4b1a      	ldr	r3, [pc, #104]	; (80016dc <SystemInit+0xec>)
 8001674:	4a1c      	ldr	r2, [pc, #112]	; (80016e8 <SystemInit+0xf8>)
 8001676:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001678:	4b18      	ldr	r3, [pc, #96]	; (80016dc <SystemInit+0xec>)
 800167a:	4a1c      	ldr	r2, [pc, #112]	; (80016ec <SystemInit+0xfc>)
 800167c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800167e:	4b17      	ldr	r3, [pc, #92]	; (80016dc <SystemInit+0xec>)
 8001680:	2200      	movs	r2, #0
 8001682:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001684:	4b15      	ldr	r3, [pc, #84]	; (80016dc <SystemInit+0xec>)
 8001686:	4a19      	ldr	r2, [pc, #100]	; (80016ec <SystemInit+0xfc>)
 8001688:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800168a:	4b14      	ldr	r3, [pc, #80]	; (80016dc <SystemInit+0xec>)
 800168c:	2200      	movs	r2, #0
 800168e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001690:	4b12      	ldr	r3, [pc, #72]	; (80016dc <SystemInit+0xec>)
 8001692:	4a16      	ldr	r2, [pc, #88]	; (80016ec <SystemInit+0xfc>)
 8001694:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001696:	4b11      	ldr	r3, [pc, #68]	; (80016dc <SystemInit+0xec>)
 8001698:	2200      	movs	r2, #0
 800169a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800169c:	4b0f      	ldr	r3, [pc, #60]	; (80016dc <SystemInit+0xec>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a0e      	ldr	r2, [pc, #56]	; (80016dc <SystemInit+0xec>)
 80016a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80016a8:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <SystemInit+0xec>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80016ae:	4b10      	ldr	r3, [pc, #64]	; (80016f0 <SystemInit+0x100>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	4b10      	ldr	r3, [pc, #64]	; (80016f4 <SystemInit+0x104>)
 80016b4:	4013      	ands	r3, r2
 80016b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80016ba:	d202      	bcs.n	80016c2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80016bc:	4b0e      	ldr	r3, [pc, #56]	; (80016f8 <SystemInit+0x108>)
 80016be:	2201      	movs	r2, #1
 80016c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80016c2:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <SystemInit+0x10c>)
 80016c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80016c8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80016ca:	bf00      	nop
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	e000ed00 	.word	0xe000ed00
 80016d8:	52002000 	.word	0x52002000
 80016dc:	58024400 	.word	0x58024400
 80016e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80016e4:	02020200 	.word	0x02020200
 80016e8:	01ff0000 	.word	0x01ff0000
 80016ec:	01010280 	.word	0x01010280
 80016f0:	5c001000 	.word	0x5c001000
 80016f4:	ffff0000 	.word	0xffff0000
 80016f8:	51008108 	.word	0x51008108
 80016fc:	52004000 	.word	0x52004000

08001700 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001704:	4b22      	ldr	r3, [pc, #136]	; (8001790 <MX_USART2_UART_Init+0x90>)
 8001706:	4a23      	ldr	r2, [pc, #140]	; (8001794 <MX_USART2_UART_Init+0x94>)
 8001708:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800170a:	4b21      	ldr	r3, [pc, #132]	; (8001790 <MX_USART2_UART_Init+0x90>)
 800170c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001710:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001712:	4b1f      	ldr	r3, [pc, #124]	; (8001790 <MX_USART2_UART_Init+0x90>)
 8001714:	2200      	movs	r2, #0
 8001716:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001718:	4b1d      	ldr	r3, [pc, #116]	; (8001790 <MX_USART2_UART_Init+0x90>)
 800171a:	2200      	movs	r2, #0
 800171c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800171e:	4b1c      	ldr	r3, [pc, #112]	; (8001790 <MX_USART2_UART_Init+0x90>)
 8001720:	2200      	movs	r2, #0
 8001722:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001724:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <MX_USART2_UART_Init+0x90>)
 8001726:	220c      	movs	r2, #12
 8001728:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800172a:	4b19      	ldr	r3, [pc, #100]	; (8001790 <MX_USART2_UART_Init+0x90>)
 800172c:	2200      	movs	r2, #0
 800172e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001730:	4b17      	ldr	r3, [pc, #92]	; (8001790 <MX_USART2_UART_Init+0x90>)
 8001732:	2200      	movs	r2, #0
 8001734:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001736:	4b16      	ldr	r3, [pc, #88]	; (8001790 <MX_USART2_UART_Init+0x90>)
 8001738:	2200      	movs	r2, #0
 800173a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800173c:	4b14      	ldr	r3, [pc, #80]	; (8001790 <MX_USART2_UART_Init+0x90>)
 800173e:	2200      	movs	r2, #0
 8001740:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001742:	4b13      	ldr	r3, [pc, #76]	; (8001790 <MX_USART2_UART_Init+0x90>)
 8001744:	2200      	movs	r2, #0
 8001746:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001748:	4811      	ldr	r0, [pc, #68]	; (8001790 <MX_USART2_UART_Init+0x90>)
 800174a:	f008 f8b1 	bl	80098b0 <HAL_UART_Init>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001754:	f7ff fdc4 	bl	80012e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001758:	2100      	movs	r1, #0
 800175a:	480d      	ldr	r0, [pc, #52]	; (8001790 <MX_USART2_UART_Init+0x90>)
 800175c:	f00a ff03 	bl	800c566 <HAL_UARTEx_SetTxFifoThreshold>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001766:	f7ff fdbb 	bl	80012e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800176a:	2100      	movs	r1, #0
 800176c:	4808      	ldr	r0, [pc, #32]	; (8001790 <MX_USART2_UART_Init+0x90>)
 800176e:	f00a ff38 	bl	800c5e2 <HAL_UARTEx_SetRxFifoThreshold>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001778:	f7ff fdb2 	bl	80012e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800177c:	4804      	ldr	r0, [pc, #16]	; (8001790 <MX_USART2_UART_Init+0x90>)
 800177e:	f00a feb9 	bl	800c4f4 <HAL_UARTEx_DisableFifoMode>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001788:	f7ff fdaa 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800178c:	bf00      	nop
 800178e:	bd80      	pop	{r7, pc}
 8001790:	240045c8 	.word	0x240045c8
 8001794:	40004400 	.word	0x40004400

08001798 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800179c:	4b22      	ldr	r3, [pc, #136]	; (8001828 <MX_USART3_UART_Init+0x90>)
 800179e:	4a23      	ldr	r2, [pc, #140]	; (800182c <MX_USART3_UART_Init+0x94>)
 80017a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017a2:	4b21      	ldr	r3, [pc, #132]	; (8001828 <MX_USART3_UART_Init+0x90>)
 80017a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017aa:	4b1f      	ldr	r3, [pc, #124]	; (8001828 <MX_USART3_UART_Init+0x90>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017b0:	4b1d      	ldr	r3, [pc, #116]	; (8001828 <MX_USART3_UART_Init+0x90>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017b6:	4b1c      	ldr	r3, [pc, #112]	; (8001828 <MX_USART3_UART_Init+0x90>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017bc:	4b1a      	ldr	r3, [pc, #104]	; (8001828 <MX_USART3_UART_Init+0x90>)
 80017be:	220c      	movs	r2, #12
 80017c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017c2:	4b19      	ldr	r3, [pc, #100]	; (8001828 <MX_USART3_UART_Init+0x90>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017c8:	4b17      	ldr	r3, [pc, #92]	; (8001828 <MX_USART3_UART_Init+0x90>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ce:	4b16      	ldr	r3, [pc, #88]	; (8001828 <MX_USART3_UART_Init+0x90>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017d4:	4b14      	ldr	r3, [pc, #80]	; (8001828 <MX_USART3_UART_Init+0x90>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017da:	4b13      	ldr	r3, [pc, #76]	; (8001828 <MX_USART3_UART_Init+0x90>)
 80017dc:	2200      	movs	r2, #0
 80017de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017e0:	4811      	ldr	r0, [pc, #68]	; (8001828 <MX_USART3_UART_Init+0x90>)
 80017e2:	f008 f865 	bl	80098b0 <HAL_UART_Init>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80017ec:	f7ff fd78 	bl	80012e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017f0:	2100      	movs	r1, #0
 80017f2:	480d      	ldr	r0, [pc, #52]	; (8001828 <MX_USART3_UART_Init+0x90>)
 80017f4:	f00a feb7 	bl	800c566 <HAL_UARTEx_SetTxFifoThreshold>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80017fe:	f7ff fd6f 	bl	80012e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001802:	2100      	movs	r1, #0
 8001804:	4808      	ldr	r0, [pc, #32]	; (8001828 <MX_USART3_UART_Init+0x90>)
 8001806:	f00a feec 	bl	800c5e2 <HAL_UARTEx_SetRxFifoThreshold>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001810:	f7ff fd66 	bl	80012e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001814:	4804      	ldr	r0, [pc, #16]	; (8001828 <MX_USART3_UART_Init+0x90>)
 8001816:	f00a fe6d 	bl	800c4f4 <HAL_UARTEx_DisableFifoMode>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001820:	f7ff fd5e 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001824:	bf00      	nop
 8001826:	bd80      	pop	{r7, pc}
 8001828:	2400465c 	.word	0x2400465c
 800182c:	40004800 	.word	0x40004800

08001830 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b0bc      	sub	sp, #240	; 0xf0
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001848:	f107 0318 	add.w	r3, r7, #24
 800184c:	22c0      	movs	r2, #192	; 0xc0
 800184e:	2100      	movs	r1, #0
 8001850:	4618      	mov	r0, r3
 8001852:	f010 fd66 	bl	8012322 <memset>
  if(uartHandle->Instance==USART2)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a7c      	ldr	r2, [pc, #496]	; (8001a4c <HAL_UART_MspInit+0x21c>)
 800185c:	4293      	cmp	r3, r2
 800185e:	f040 80a5 	bne.w	80019ac <HAL_UART_MspInit+0x17c>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001862:	f04f 0202 	mov.w	r2, #2
 8001866:	f04f 0300 	mov.w	r3, #0
 800186a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800186e:	2300      	movs	r3, #0
 8001870:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001874:	f107 0318 	add.w	r3, r7, #24
 8001878:	4618      	mov	r0, r3
 800187a:	f005 ff13 	bl	80076a4 <HAL_RCCEx_PeriphCLKConfig>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8001884:	f7ff fd2c 	bl	80012e0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001888:	4b71      	ldr	r3, [pc, #452]	; (8001a50 <HAL_UART_MspInit+0x220>)
 800188a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800188e:	4a70      	ldr	r2, [pc, #448]	; (8001a50 <HAL_UART_MspInit+0x220>)
 8001890:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001894:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001898:	4b6d      	ldr	r3, [pc, #436]	; (8001a50 <HAL_UART_MspInit+0x220>)
 800189a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800189e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a2:	617b      	str	r3, [r7, #20]
 80018a4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018a6:	4b6a      	ldr	r3, [pc, #424]	; (8001a50 <HAL_UART_MspInit+0x220>)
 80018a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ac:	4a68      	ldr	r2, [pc, #416]	; (8001a50 <HAL_UART_MspInit+0x220>)
 80018ae:	f043 0308 	orr.w	r3, r3, #8
 80018b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018b6:	4b66      	ldr	r3, [pc, #408]	; (8001a50 <HAL_UART_MspInit+0x220>)
 80018b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018bc:	f003 0308 	and.w	r3, r3, #8
 80018c0:	613b      	str	r3, [r7, #16]
 80018c2:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80018c4:	2360      	movs	r3, #96	; 0x60
 80018c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ca:	2302      	movs	r3, #2
 80018cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d6:	2300      	movs	r3, #0
 80018d8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018dc:	2307      	movs	r3, #7
 80018de:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018e2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80018e6:	4619      	mov	r1, r3
 80018e8:	485a      	ldr	r0, [pc, #360]	; (8001a54 <HAL_UART_MspInit+0x224>)
 80018ea:	f003 fd77 	bl	80053dc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream6;
 80018ee:	4b5a      	ldr	r3, [pc, #360]	; (8001a58 <HAL_UART_MspInit+0x228>)
 80018f0:	4a5a      	ldr	r2, [pc, #360]	; (8001a5c <HAL_UART_MspInit+0x22c>)
 80018f2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80018f4:	4b58      	ldr	r3, [pc, #352]	; (8001a58 <HAL_UART_MspInit+0x228>)
 80018f6:	222b      	movs	r2, #43	; 0x2b
 80018f8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018fa:	4b57      	ldr	r3, [pc, #348]	; (8001a58 <HAL_UART_MspInit+0x228>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001900:	4b55      	ldr	r3, [pc, #340]	; (8001a58 <HAL_UART_MspInit+0x228>)
 8001902:	2200      	movs	r2, #0
 8001904:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001906:	4b54      	ldr	r3, [pc, #336]	; (8001a58 <HAL_UART_MspInit+0x228>)
 8001908:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800190c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800190e:	4b52      	ldr	r3, [pc, #328]	; (8001a58 <HAL_UART_MspInit+0x228>)
 8001910:	2200      	movs	r2, #0
 8001912:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001914:	4b50      	ldr	r3, [pc, #320]	; (8001a58 <HAL_UART_MspInit+0x228>)
 8001916:	2200      	movs	r2, #0
 8001918:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800191a:	4b4f      	ldr	r3, [pc, #316]	; (8001a58 <HAL_UART_MspInit+0x228>)
 800191c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001920:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001922:	4b4d      	ldr	r3, [pc, #308]	; (8001a58 <HAL_UART_MspInit+0x228>)
 8001924:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001928:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800192a:	4b4b      	ldr	r3, [pc, #300]	; (8001a58 <HAL_UART_MspInit+0x228>)
 800192c:	2200      	movs	r2, #0
 800192e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001930:	4849      	ldr	r0, [pc, #292]	; (8001a58 <HAL_UART_MspInit+0x228>)
 8001932:	f000 faf3 	bl	8001f1c <HAL_DMA_Init>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 800193c:	f7ff fcd0 	bl	80012e0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a45      	ldr	r2, [pc, #276]	; (8001a58 <HAL_UART_MspInit+0x228>)
 8001944:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001948:	4a43      	ldr	r2, [pc, #268]	; (8001a58 <HAL_UART_MspInit+0x228>)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream7;
 800194e:	4b44      	ldr	r3, [pc, #272]	; (8001a60 <HAL_UART_MspInit+0x230>)
 8001950:	4a44      	ldr	r2, [pc, #272]	; (8001a64 <HAL_UART_MspInit+0x234>)
 8001952:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001954:	4b42      	ldr	r3, [pc, #264]	; (8001a60 <HAL_UART_MspInit+0x230>)
 8001956:	222c      	movs	r2, #44	; 0x2c
 8001958:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800195a:	4b41      	ldr	r3, [pc, #260]	; (8001a60 <HAL_UART_MspInit+0x230>)
 800195c:	2240      	movs	r2, #64	; 0x40
 800195e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001960:	4b3f      	ldr	r3, [pc, #252]	; (8001a60 <HAL_UART_MspInit+0x230>)
 8001962:	2200      	movs	r2, #0
 8001964:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001966:	4b3e      	ldr	r3, [pc, #248]	; (8001a60 <HAL_UART_MspInit+0x230>)
 8001968:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800196c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800196e:	4b3c      	ldr	r3, [pc, #240]	; (8001a60 <HAL_UART_MspInit+0x230>)
 8001970:	2200      	movs	r2, #0
 8001972:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001974:	4b3a      	ldr	r3, [pc, #232]	; (8001a60 <HAL_UART_MspInit+0x230>)
 8001976:	2200      	movs	r2, #0
 8001978:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800197a:	4b39      	ldr	r3, [pc, #228]	; (8001a60 <HAL_UART_MspInit+0x230>)
 800197c:	2200      	movs	r2, #0
 800197e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001980:	4b37      	ldr	r3, [pc, #220]	; (8001a60 <HAL_UART_MspInit+0x230>)
 8001982:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001986:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001988:	4b35      	ldr	r3, [pc, #212]	; (8001a60 <HAL_UART_MspInit+0x230>)
 800198a:	2200      	movs	r2, #0
 800198c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800198e:	4834      	ldr	r0, [pc, #208]	; (8001a60 <HAL_UART_MspInit+0x230>)
 8001990:	f000 fac4 	bl	8001f1c <HAL_DMA_Init>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <HAL_UART_MspInit+0x16e>
    {
      Error_Handler();
 800199a:	f7ff fca1 	bl	80012e0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a2f      	ldr	r2, [pc, #188]	; (8001a60 <HAL_UART_MspInit+0x230>)
 80019a2:	67da      	str	r2, [r3, #124]	; 0x7c
 80019a4:	4a2e      	ldr	r2, [pc, #184]	; (8001a60 <HAL_UART_MspInit+0x230>)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80019aa:	e04b      	b.n	8001a44 <HAL_UART_MspInit+0x214>
  else if(uartHandle->Instance==USART3)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a2d      	ldr	r2, [pc, #180]	; (8001a68 <HAL_UART_MspInit+0x238>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d146      	bne.n	8001a44 <HAL_UART_MspInit+0x214>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80019b6:	f04f 0202 	mov.w	r2, #2
 80019ba:	f04f 0300 	mov.w	r3, #0
 80019be:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80019c2:	2300      	movs	r3, #0
 80019c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019c8:	f107 0318 	add.w	r3, r7, #24
 80019cc:	4618      	mov	r0, r3
 80019ce:	f005 fe69 	bl	80076a4 <HAL_RCCEx_PeriphCLKConfig>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <HAL_UART_MspInit+0x1ac>
      Error_Handler();
 80019d8:	f7ff fc82 	bl	80012e0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80019dc:	4b1c      	ldr	r3, [pc, #112]	; (8001a50 <HAL_UART_MspInit+0x220>)
 80019de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019e2:	4a1b      	ldr	r2, [pc, #108]	; (8001a50 <HAL_UART_MspInit+0x220>)
 80019e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019e8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80019ec:	4b18      	ldr	r3, [pc, #96]	; (8001a50 <HAL_UART_MspInit+0x220>)
 80019ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019fa:	4b15      	ldr	r3, [pc, #84]	; (8001a50 <HAL_UART_MspInit+0x220>)
 80019fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a00:	4a13      	ldr	r2, [pc, #76]	; (8001a50 <HAL_UART_MspInit+0x220>)
 8001a02:	f043 0308 	orr.w	r3, r3, #8
 8001a06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a0a:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <HAL_UART_MspInit+0x220>)
 8001a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a10:	f003 0308 	and.w	r3, r3, #8
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a18:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a1c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a20:	2302      	movs	r3, #2
 8001a22:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a32:	2307      	movs	r3, #7
 8001a34:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a38:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4805      	ldr	r0, [pc, #20]	; (8001a54 <HAL_UART_MspInit+0x224>)
 8001a40:	f003 fccc 	bl	80053dc <HAL_GPIO_Init>
}
 8001a44:	bf00      	nop
 8001a46:	37f0      	adds	r7, #240	; 0xf0
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40004400 	.word	0x40004400
 8001a50:	58024400 	.word	0x58024400
 8001a54:	58020c00 	.word	0x58020c00
 8001a58:	240046f0 	.word	0x240046f0
 8001a5c:	400200a0 	.word	0x400200a0
 8001a60:	24004768 	.word	0x24004768
 8001a64:	400200b8 	.word	0x400200b8
 8001a68:	40004800 	.word	0x40004800

08001a6c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001a70:	4b15      	ldr	r3, [pc, #84]	; (8001ac8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a72:	4a16      	ldr	r2, [pc, #88]	; (8001acc <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001a74:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001a76:	4b14      	ldr	r3, [pc, #80]	; (8001ac8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a78:	2209      	movs	r2, #9
 8001a7a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001a7c:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a7e:	2202      	movs	r2, #2
 8001a80:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001a82:	4b11      	ldr	r3, [pc, #68]	; (8001ac8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001a88:	4b0f      	ldr	r3, [pc, #60]	; (8001ac8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001a8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ac8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a90:	2201      	movs	r2, #1
 8001a92:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001a94:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001a9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001aa0:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001aa6:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001ab2:	4805      	ldr	r0, [pc, #20]	; (8001ac8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001ab4:	f004 fc3c 	bl	8006330 <HAL_PCD_Init>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001abe:	f7ff fc0f 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	240047e0 	.word	0x240047e0
 8001acc:	40080000 	.word	0x40080000

08001ad0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b0ba      	sub	sp, #232	; 0xe8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ae8:	f107 0310 	add.w	r3, r7, #16
 8001aec:	22c0      	movs	r2, #192	; 0xc0
 8001aee:	2100      	movs	r1, #0
 8001af0:	4618      	mov	r0, r3
 8001af2:	f010 fc16 	bl	8012322 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a30      	ldr	r2, [pc, #192]	; (8001bbc <HAL_PCD_MspInit+0xec>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d159      	bne.n	8001bb4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001b00:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001b04:	f04f 0300 	mov.w	r3, #0
 8001b08:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001b0c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001b10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b14:	f107 0310 	add.w	r3, r7, #16
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f005 fdc3 	bl	80076a4 <HAL_RCCEx_PeriphCLKConfig>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001b24:	f7ff fbdc 	bl	80012e0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001b28:	f004 fd84 	bl	8006634 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2c:	4b24      	ldr	r3, [pc, #144]	; (8001bc0 <HAL_PCD_MspInit+0xf0>)
 8001b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b32:	4a23      	ldr	r2, [pc, #140]	; (8001bc0 <HAL_PCD_MspInit+0xf0>)
 8001b34:	f043 0301 	orr.w	r3, r3, #1
 8001b38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b3c:	4b20      	ldr	r3, [pc, #128]	; (8001bc0 <HAL_PCD_MspInit+0xf0>)
 8001b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001b4a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001b4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b52:	2302      	movs	r3, #2
 8001b54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001b64:	230a      	movs	r3, #10
 8001b66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4814      	ldr	r0, [pc, #80]	; (8001bc4 <HAL_PCD_MspInit+0xf4>)
 8001b72:	f003 fc33 	bl	80053dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001b76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001b8a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001b8e:	4619      	mov	r1, r3
 8001b90:	480c      	ldr	r0, [pc, #48]	; (8001bc4 <HAL_PCD_MspInit+0xf4>)
 8001b92:	f003 fc23 	bl	80053dc <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001b96:	4b0a      	ldr	r3, [pc, #40]	; (8001bc0 <HAL_PCD_MspInit+0xf0>)
 8001b98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b9c:	4a08      	ldr	r2, [pc, #32]	; (8001bc0 <HAL_PCD_MspInit+0xf0>)
 8001b9e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001ba2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001ba6:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <HAL_PCD_MspInit+0xf0>)
 8001ba8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001bac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001bb0:	60bb      	str	r3, [r7, #8]
 8001bb2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001bb4:	bf00      	nop
 8001bb6:	37e8      	adds	r7, #232	; 0xe8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40080000 	.word	0x40080000
 8001bc0:	58024400 	.word	0x58024400
 8001bc4:	58020000 	.word	0x58020000

08001bc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001bc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c00 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001bcc:	f7ff fd10 	bl	80015f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bd0:	480c      	ldr	r0, [pc, #48]	; (8001c04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bd2:	490d      	ldr	r1, [pc, #52]	; (8001c08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bd4:	4a0d      	ldr	r2, [pc, #52]	; (8001c0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bd8:	e002      	b.n	8001be0 <LoopCopyDataInit>

08001bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bde:	3304      	adds	r3, #4

08001be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001be4:	d3f9      	bcc.n	8001bda <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001be6:	4a0a      	ldr	r2, [pc, #40]	; (8001c10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001be8:	4c0a      	ldr	r4, [pc, #40]	; (8001c14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bec:	e001      	b.n	8001bf2 <LoopFillZerobss>

08001bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bf0:	3204      	adds	r2, #4

08001bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bf4:	d3fb      	bcc.n	8001bee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bf6:	f010 fbed 	bl	80123d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bfa:	f7ff faab 	bl	8001154 <main>
  bx  lr
 8001bfe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c00:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001c04:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001c08:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 8001c0c:	080148cc 	.word	0x080148cc
  ldr r2, =_sbss
 8001c10:	2400029c 	.word	0x2400029c
  ldr r4, =_ebss
 8001c14:	24009c6c 	.word	0x24009c6c

08001c18 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c18:	e7fe      	b.n	8001c18 <ADC3_IRQHandler>
	...

08001c1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c22:	2003      	movs	r0, #3
 8001c24:	f000 f947 	bl	8001eb6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c28:	f005 fb24 	bl	8007274 <HAL_RCC_GetSysClockFreq>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <HAL_Init+0x68>)
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	0a1b      	lsrs	r3, r3, #8
 8001c34:	f003 030f 	and.w	r3, r3, #15
 8001c38:	4913      	ldr	r1, [pc, #76]	; (8001c88 <HAL_Init+0x6c>)
 8001c3a:	5ccb      	ldrb	r3, [r1, r3]
 8001c3c:	f003 031f 	and.w	r3, r3, #31
 8001c40:	fa22 f303 	lsr.w	r3, r2, r3
 8001c44:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c46:	4b0f      	ldr	r3, [pc, #60]	; (8001c84 <HAL_Init+0x68>)
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	f003 030f 	and.w	r3, r3, #15
 8001c4e:	4a0e      	ldr	r2, [pc, #56]	; (8001c88 <HAL_Init+0x6c>)
 8001c50:	5cd3      	ldrb	r3, [r2, r3]
 8001c52:	f003 031f 	and.w	r3, r3, #31
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	fa22 f303 	lsr.w	r3, r2, r3
 8001c5c:	4a0b      	ldr	r2, [pc, #44]	; (8001c8c <HAL_Init+0x70>)
 8001c5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c60:	4a0b      	ldr	r2, [pc, #44]	; (8001c90 <HAL_Init+0x74>)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c66:	200f      	movs	r0, #15
 8001c68:	f7ff fb5e 	bl	8001328 <HAL_InitTick>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e002      	b.n	8001c7c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c76:	f7ff fb39 	bl	80012ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	58024400 	.word	0x58024400
 8001c88:	08014494 	.word	0x08014494
 8001c8c:	24000004 	.word	0x24000004
 8001c90:	24000000 	.word	0x24000000

08001c94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c98:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <HAL_IncTick+0x20>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <HAL_IncTick+0x24>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	4a04      	ldr	r2, [pc, #16]	; (8001cb8 <HAL_IncTick+0x24>)
 8001ca6:	6013      	str	r3, [r2, #0]
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	2400000c 	.word	0x2400000c
 8001cb8:	24004cec 	.word	0x24004cec

08001cbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc0:	4b03      	ldr	r3, [pc, #12]	; (8001cd0 <HAL_GetTick+0x14>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	24004cec 	.word	0x24004cec

08001cd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cdc:	f7ff ffee 	bl	8001cbc <HAL_GetTick>
 8001ce0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cec:	d005      	beq.n	8001cfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cee:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <HAL_Delay+0x44>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cfa:	bf00      	nop
 8001cfc:	f7ff ffde 	bl	8001cbc <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d8f7      	bhi.n	8001cfc <HAL_Delay+0x28>
  {
  }
}
 8001d0c:	bf00      	nop
 8001d0e:	bf00      	nop
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	2400000c 	.word	0x2400000c

08001d1c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001d20:	4b03      	ldr	r3, [pc, #12]	; (8001d30 <HAL_GetREVID+0x14>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	0c1b      	lsrs	r3, r3, #16
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	5c001000 	.word	0x5c001000

08001d34 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001d3c:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001d44:	4904      	ldr	r1, [pc, #16]	; (8001d58 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	604b      	str	r3, [r1, #4]
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	58000400 	.word	0x58000400

08001d5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d6c:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <__NVIC_SetPriorityGrouping+0x40>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d72:	68ba      	ldr	r2, [r7, #8]
 8001d74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d78:	4013      	ands	r3, r2
 8001d7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d84:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <__NVIC_SetPriorityGrouping+0x44>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d8a:	4a04      	ldr	r2, [pc, #16]	; (8001d9c <__NVIC_SetPriorityGrouping+0x40>)
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	60d3      	str	r3, [r2, #12]
}
 8001d90:	bf00      	nop
 8001d92:	3714      	adds	r7, #20
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	e000ed00 	.word	0xe000ed00
 8001da0:	05fa0000 	.word	0x05fa0000

08001da4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001da8:	4b04      	ldr	r3, [pc, #16]	; (8001dbc <__NVIC_GetPriorityGrouping+0x18>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	0a1b      	lsrs	r3, r3, #8
 8001dae:	f003 0307 	and.w	r3, r3, #7
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	e000ed00 	.word	0xe000ed00

08001dc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001dca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	db0b      	blt.n	8001dea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dd2:	88fb      	ldrh	r3, [r7, #6]
 8001dd4:	f003 021f 	and.w	r2, r3, #31
 8001dd8:	4907      	ldr	r1, [pc, #28]	; (8001df8 <__NVIC_EnableIRQ+0x38>)
 8001dda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dde:	095b      	lsrs	r3, r3, #5
 8001de0:	2001      	movs	r0, #1
 8001de2:	fa00 f202 	lsl.w	r2, r0, r2
 8001de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	e000e100 	.word	0xe000e100

08001dfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	6039      	str	r1, [r7, #0]
 8001e06:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	db0a      	blt.n	8001e26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	b2da      	uxtb	r2, r3
 8001e14:	490c      	ldr	r1, [pc, #48]	; (8001e48 <__NVIC_SetPriority+0x4c>)
 8001e16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e1a:	0112      	lsls	r2, r2, #4
 8001e1c:	b2d2      	uxtb	r2, r2
 8001e1e:	440b      	add	r3, r1
 8001e20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e24:	e00a      	b.n	8001e3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	4908      	ldr	r1, [pc, #32]	; (8001e4c <__NVIC_SetPriority+0x50>)
 8001e2c:	88fb      	ldrh	r3, [r7, #6]
 8001e2e:	f003 030f 	and.w	r3, r3, #15
 8001e32:	3b04      	subs	r3, #4
 8001e34:	0112      	lsls	r2, r2, #4
 8001e36:	b2d2      	uxtb	r2, r2
 8001e38:	440b      	add	r3, r1
 8001e3a:	761a      	strb	r2, [r3, #24]
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	e000e100 	.word	0xe000e100
 8001e4c:	e000ed00 	.word	0xe000ed00

08001e50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b089      	sub	sp, #36	; 0x24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	f1c3 0307 	rsb	r3, r3, #7
 8001e6a:	2b04      	cmp	r3, #4
 8001e6c:	bf28      	it	cs
 8001e6e:	2304      	movcs	r3, #4
 8001e70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	3304      	adds	r3, #4
 8001e76:	2b06      	cmp	r3, #6
 8001e78:	d902      	bls.n	8001e80 <NVIC_EncodePriority+0x30>
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	3b03      	subs	r3, #3
 8001e7e:	e000      	b.n	8001e82 <NVIC_EncodePriority+0x32>
 8001e80:	2300      	movs	r3, #0
 8001e82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e84:	f04f 32ff 	mov.w	r2, #4294967295
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	43da      	mvns	r2, r3
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	401a      	ands	r2, r3
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e98:	f04f 31ff 	mov.w	r1, #4294967295
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea2:	43d9      	mvns	r1, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea8:	4313      	orrs	r3, r2
         );
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3724      	adds	r7, #36	; 0x24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b082      	sub	sp, #8
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7ff ff4c 	bl	8001d5c <__NVIC_SetPriorityGrouping>
}
 8001ec4:	bf00      	nop
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
 8001ed8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001eda:	f7ff ff63 	bl	8001da4 <__NVIC_GetPriorityGrouping>
 8001ede:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	68b9      	ldr	r1, [r7, #8]
 8001ee4:	6978      	ldr	r0, [r7, #20]
 8001ee6:	f7ff ffb3 	bl	8001e50 <NVIC_EncodePriority>
 8001eea:	4602      	mov	r2, r0
 8001eec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ef0:	4611      	mov	r1, r2
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff ff82 	bl	8001dfc <__NVIC_SetPriority>
}
 8001ef8:	bf00      	nop
 8001efa:	3718      	adds	r7, #24
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff ff56 	bl	8001dc0 <__NVIC_EnableIRQ>
}
 8001f14:	bf00      	nop
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001f24:	f7ff feca 	bl	8001cbc <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d101      	bne.n	8001f34 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e316      	b.n	8002562 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a66      	ldr	r2, [pc, #408]	; (80020d4 <HAL_DMA_Init+0x1b8>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d04a      	beq.n	8001fd4 <HAL_DMA_Init+0xb8>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a65      	ldr	r2, [pc, #404]	; (80020d8 <HAL_DMA_Init+0x1bc>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d045      	beq.n	8001fd4 <HAL_DMA_Init+0xb8>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a63      	ldr	r2, [pc, #396]	; (80020dc <HAL_DMA_Init+0x1c0>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d040      	beq.n	8001fd4 <HAL_DMA_Init+0xb8>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a62      	ldr	r2, [pc, #392]	; (80020e0 <HAL_DMA_Init+0x1c4>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d03b      	beq.n	8001fd4 <HAL_DMA_Init+0xb8>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a60      	ldr	r2, [pc, #384]	; (80020e4 <HAL_DMA_Init+0x1c8>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d036      	beq.n	8001fd4 <HAL_DMA_Init+0xb8>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a5f      	ldr	r2, [pc, #380]	; (80020e8 <HAL_DMA_Init+0x1cc>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d031      	beq.n	8001fd4 <HAL_DMA_Init+0xb8>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a5d      	ldr	r2, [pc, #372]	; (80020ec <HAL_DMA_Init+0x1d0>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d02c      	beq.n	8001fd4 <HAL_DMA_Init+0xb8>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a5c      	ldr	r2, [pc, #368]	; (80020f0 <HAL_DMA_Init+0x1d4>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d027      	beq.n	8001fd4 <HAL_DMA_Init+0xb8>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a5a      	ldr	r2, [pc, #360]	; (80020f4 <HAL_DMA_Init+0x1d8>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d022      	beq.n	8001fd4 <HAL_DMA_Init+0xb8>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a59      	ldr	r2, [pc, #356]	; (80020f8 <HAL_DMA_Init+0x1dc>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d01d      	beq.n	8001fd4 <HAL_DMA_Init+0xb8>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a57      	ldr	r2, [pc, #348]	; (80020fc <HAL_DMA_Init+0x1e0>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d018      	beq.n	8001fd4 <HAL_DMA_Init+0xb8>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a56      	ldr	r2, [pc, #344]	; (8002100 <HAL_DMA_Init+0x1e4>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d013      	beq.n	8001fd4 <HAL_DMA_Init+0xb8>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a54      	ldr	r2, [pc, #336]	; (8002104 <HAL_DMA_Init+0x1e8>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d00e      	beq.n	8001fd4 <HAL_DMA_Init+0xb8>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a53      	ldr	r2, [pc, #332]	; (8002108 <HAL_DMA_Init+0x1ec>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d009      	beq.n	8001fd4 <HAL_DMA_Init+0xb8>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a51      	ldr	r2, [pc, #324]	; (800210c <HAL_DMA_Init+0x1f0>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d004      	beq.n	8001fd4 <HAL_DMA_Init+0xb8>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a50      	ldr	r2, [pc, #320]	; (8002110 <HAL_DMA_Init+0x1f4>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d101      	bne.n	8001fd8 <HAL_DMA_Init+0xbc>
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e000      	b.n	8001fda <HAL_DMA_Init+0xbe>
 8001fd8:	2300      	movs	r3, #0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f000 813b 	beq.w	8002256 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2202      	movs	r2, #2
 8001fe4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a37      	ldr	r2, [pc, #220]	; (80020d4 <HAL_DMA_Init+0x1b8>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d04a      	beq.n	8002090 <HAL_DMA_Init+0x174>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a36      	ldr	r2, [pc, #216]	; (80020d8 <HAL_DMA_Init+0x1bc>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d045      	beq.n	8002090 <HAL_DMA_Init+0x174>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a34      	ldr	r2, [pc, #208]	; (80020dc <HAL_DMA_Init+0x1c0>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d040      	beq.n	8002090 <HAL_DMA_Init+0x174>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a33      	ldr	r2, [pc, #204]	; (80020e0 <HAL_DMA_Init+0x1c4>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d03b      	beq.n	8002090 <HAL_DMA_Init+0x174>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a31      	ldr	r2, [pc, #196]	; (80020e4 <HAL_DMA_Init+0x1c8>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d036      	beq.n	8002090 <HAL_DMA_Init+0x174>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a30      	ldr	r2, [pc, #192]	; (80020e8 <HAL_DMA_Init+0x1cc>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d031      	beq.n	8002090 <HAL_DMA_Init+0x174>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a2e      	ldr	r2, [pc, #184]	; (80020ec <HAL_DMA_Init+0x1d0>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d02c      	beq.n	8002090 <HAL_DMA_Init+0x174>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a2d      	ldr	r2, [pc, #180]	; (80020f0 <HAL_DMA_Init+0x1d4>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d027      	beq.n	8002090 <HAL_DMA_Init+0x174>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a2b      	ldr	r2, [pc, #172]	; (80020f4 <HAL_DMA_Init+0x1d8>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d022      	beq.n	8002090 <HAL_DMA_Init+0x174>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a2a      	ldr	r2, [pc, #168]	; (80020f8 <HAL_DMA_Init+0x1dc>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d01d      	beq.n	8002090 <HAL_DMA_Init+0x174>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a28      	ldr	r2, [pc, #160]	; (80020fc <HAL_DMA_Init+0x1e0>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d018      	beq.n	8002090 <HAL_DMA_Init+0x174>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a27      	ldr	r2, [pc, #156]	; (8002100 <HAL_DMA_Init+0x1e4>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d013      	beq.n	8002090 <HAL_DMA_Init+0x174>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a25      	ldr	r2, [pc, #148]	; (8002104 <HAL_DMA_Init+0x1e8>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d00e      	beq.n	8002090 <HAL_DMA_Init+0x174>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a24      	ldr	r2, [pc, #144]	; (8002108 <HAL_DMA_Init+0x1ec>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d009      	beq.n	8002090 <HAL_DMA_Init+0x174>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a22      	ldr	r2, [pc, #136]	; (800210c <HAL_DMA_Init+0x1f0>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d004      	beq.n	8002090 <HAL_DMA_Init+0x174>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a21      	ldr	r2, [pc, #132]	; (8002110 <HAL_DMA_Init+0x1f4>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d108      	bne.n	80020a2 <HAL_DMA_Init+0x186>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f022 0201 	bic.w	r2, r2, #1
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	e007      	b.n	80020b2 <HAL_DMA_Init+0x196>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 0201 	bic.w	r2, r2, #1
 80020b0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80020b2:	e02f      	b.n	8002114 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020b4:	f7ff fe02 	bl	8001cbc <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b05      	cmp	r3, #5
 80020c0:	d928      	bls.n	8002114 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2220      	movs	r2, #32
 80020c6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2203      	movs	r2, #3
 80020cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e246      	b.n	8002562 <HAL_DMA_Init+0x646>
 80020d4:	40020010 	.word	0x40020010
 80020d8:	40020028 	.word	0x40020028
 80020dc:	40020040 	.word	0x40020040
 80020e0:	40020058 	.word	0x40020058
 80020e4:	40020070 	.word	0x40020070
 80020e8:	40020088 	.word	0x40020088
 80020ec:	400200a0 	.word	0x400200a0
 80020f0:	400200b8 	.word	0x400200b8
 80020f4:	40020410 	.word	0x40020410
 80020f8:	40020428 	.word	0x40020428
 80020fc:	40020440 	.word	0x40020440
 8002100:	40020458 	.word	0x40020458
 8002104:	40020470 	.word	0x40020470
 8002108:	40020488 	.word	0x40020488
 800210c:	400204a0 	.word	0x400204a0
 8002110:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1c8      	bne.n	80020b4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800212a:	697a      	ldr	r2, [r7, #20]
 800212c:	4b83      	ldr	r3, [pc, #524]	; (800233c <HAL_DMA_Init+0x420>)
 800212e:	4013      	ands	r3, r2
 8002130:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800213a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002146:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002152:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800215a:	697a      	ldr	r2, [r7, #20]
 800215c:	4313      	orrs	r3, r2
 800215e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002164:	2b04      	cmp	r3, #4
 8002166:	d107      	bne.n	8002178 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002170:	4313      	orrs	r3, r2
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	4313      	orrs	r3, r2
 8002176:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002178:	4b71      	ldr	r3, [pc, #452]	; (8002340 <HAL_DMA_Init+0x424>)
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	4b71      	ldr	r3, [pc, #452]	; (8002344 <HAL_DMA_Init+0x428>)
 800217e:	4013      	ands	r3, r2
 8002180:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002184:	d328      	bcc.n	80021d8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	2b28      	cmp	r3, #40	; 0x28
 800218c:	d903      	bls.n	8002196 <HAL_DMA_Init+0x27a>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b2e      	cmp	r3, #46	; 0x2e
 8002194:	d917      	bls.n	80021c6 <HAL_DMA_Init+0x2aa>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	2b3e      	cmp	r3, #62	; 0x3e
 800219c:	d903      	bls.n	80021a6 <HAL_DMA_Init+0x28a>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	2b42      	cmp	r3, #66	; 0x42
 80021a4:	d90f      	bls.n	80021c6 <HAL_DMA_Init+0x2aa>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b46      	cmp	r3, #70	; 0x46
 80021ac:	d903      	bls.n	80021b6 <HAL_DMA_Init+0x29a>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b48      	cmp	r3, #72	; 0x48
 80021b4:	d907      	bls.n	80021c6 <HAL_DMA_Init+0x2aa>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2b4e      	cmp	r3, #78	; 0x4e
 80021bc:	d905      	bls.n	80021ca <HAL_DMA_Init+0x2ae>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2b52      	cmp	r3, #82	; 0x52
 80021c4:	d801      	bhi.n	80021ca <HAL_DMA_Init+0x2ae>
 80021c6:	2301      	movs	r3, #1
 80021c8:	e000      	b.n	80021cc <HAL_DMA_Init+0x2b0>
 80021ca:	2300      	movs	r3, #0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d003      	beq.n	80021d8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021d6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	697a      	ldr	r2, [r7, #20]
 80021de:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	695b      	ldr	r3, [r3, #20]
 80021e6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	f023 0307 	bic.w	r3, r3, #7
 80021ee:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f4:	697a      	ldr	r2, [r7, #20]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fe:	2b04      	cmp	r3, #4
 8002200:	d117      	bne.n	8002232 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	4313      	orrs	r3, r2
 800220a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00e      	beq.n	8002232 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f002 fb33 	bl	8004880 <DMA_CheckFifoParam>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d008      	beq.n	8002232 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2240      	movs	r2, #64	; 0x40
 8002224:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2201      	movs	r2, #1
 800222a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e197      	b.n	8002562 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	697a      	ldr	r2, [r7, #20]
 8002238:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f002 fa6e 	bl	800471c <DMA_CalcBaseAndBitshift>
 8002240:	4603      	mov	r3, r0
 8002242:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002248:	f003 031f 	and.w	r3, r3, #31
 800224c:	223f      	movs	r2, #63	; 0x3f
 800224e:	409a      	lsls	r2, r3
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	609a      	str	r2, [r3, #8]
 8002254:	e0cd      	b.n	80023f2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a3b      	ldr	r2, [pc, #236]	; (8002348 <HAL_DMA_Init+0x42c>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d022      	beq.n	80022a6 <HAL_DMA_Init+0x38a>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a39      	ldr	r2, [pc, #228]	; (800234c <HAL_DMA_Init+0x430>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d01d      	beq.n	80022a6 <HAL_DMA_Init+0x38a>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a38      	ldr	r2, [pc, #224]	; (8002350 <HAL_DMA_Init+0x434>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d018      	beq.n	80022a6 <HAL_DMA_Init+0x38a>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a36      	ldr	r2, [pc, #216]	; (8002354 <HAL_DMA_Init+0x438>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d013      	beq.n	80022a6 <HAL_DMA_Init+0x38a>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a35      	ldr	r2, [pc, #212]	; (8002358 <HAL_DMA_Init+0x43c>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d00e      	beq.n	80022a6 <HAL_DMA_Init+0x38a>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a33      	ldr	r2, [pc, #204]	; (800235c <HAL_DMA_Init+0x440>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d009      	beq.n	80022a6 <HAL_DMA_Init+0x38a>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a32      	ldr	r2, [pc, #200]	; (8002360 <HAL_DMA_Init+0x444>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d004      	beq.n	80022a6 <HAL_DMA_Init+0x38a>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a30      	ldr	r2, [pc, #192]	; (8002364 <HAL_DMA_Init+0x448>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d101      	bne.n	80022aa <HAL_DMA_Init+0x38e>
 80022a6:	2301      	movs	r3, #1
 80022a8:	e000      	b.n	80022ac <HAL_DMA_Init+0x390>
 80022aa:	2300      	movs	r3, #0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f000 8097 	beq.w	80023e0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a24      	ldr	r2, [pc, #144]	; (8002348 <HAL_DMA_Init+0x42c>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d021      	beq.n	8002300 <HAL_DMA_Init+0x3e4>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a22      	ldr	r2, [pc, #136]	; (800234c <HAL_DMA_Init+0x430>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d01c      	beq.n	8002300 <HAL_DMA_Init+0x3e4>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a21      	ldr	r2, [pc, #132]	; (8002350 <HAL_DMA_Init+0x434>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d017      	beq.n	8002300 <HAL_DMA_Init+0x3e4>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a1f      	ldr	r2, [pc, #124]	; (8002354 <HAL_DMA_Init+0x438>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d012      	beq.n	8002300 <HAL_DMA_Init+0x3e4>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a1e      	ldr	r2, [pc, #120]	; (8002358 <HAL_DMA_Init+0x43c>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d00d      	beq.n	8002300 <HAL_DMA_Init+0x3e4>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a1c      	ldr	r2, [pc, #112]	; (800235c <HAL_DMA_Init+0x440>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d008      	beq.n	8002300 <HAL_DMA_Init+0x3e4>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a1b      	ldr	r2, [pc, #108]	; (8002360 <HAL_DMA_Init+0x444>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d003      	beq.n	8002300 <HAL_DMA_Init+0x3e4>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a19      	ldr	r2, [pc, #100]	; (8002364 <HAL_DMA_Init+0x448>)
 80022fe:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2202      	movs	r2, #2
 8002304:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	4b13      	ldr	r3, [pc, #76]	; (8002368 <HAL_DMA_Init+0x44c>)
 800231c:	4013      	ands	r3, r2
 800231e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	2b40      	cmp	r3, #64	; 0x40
 8002326:	d021      	beq.n	800236c <HAL_DMA_Init+0x450>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	2b80      	cmp	r3, #128	; 0x80
 800232e:	d102      	bne.n	8002336 <HAL_DMA_Init+0x41a>
 8002330:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002334:	e01b      	b.n	800236e <HAL_DMA_Init+0x452>
 8002336:	2300      	movs	r3, #0
 8002338:	e019      	b.n	800236e <HAL_DMA_Init+0x452>
 800233a:	bf00      	nop
 800233c:	fe10803f 	.word	0xfe10803f
 8002340:	5c001000 	.word	0x5c001000
 8002344:	ffff0000 	.word	0xffff0000
 8002348:	58025408 	.word	0x58025408
 800234c:	5802541c 	.word	0x5802541c
 8002350:	58025430 	.word	0x58025430
 8002354:	58025444 	.word	0x58025444
 8002358:	58025458 	.word	0x58025458
 800235c:	5802546c 	.word	0x5802546c
 8002360:	58025480 	.word	0x58025480
 8002364:	58025494 	.word	0x58025494
 8002368:	fffe000f 	.word	0xfffe000f
 800236c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	68d2      	ldr	r2, [r2, #12]
 8002372:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002374:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800237c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002384:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800238c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002394:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a1b      	ldr	r3, [r3, #32]
 800239a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800239c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800239e:	697a      	ldr	r2, [r7, #20]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	697a      	ldr	r2, [r7, #20]
 80023aa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	461a      	mov	r2, r3
 80023b2:	4b6e      	ldr	r3, [pc, #440]	; (800256c <HAL_DMA_Init+0x650>)
 80023b4:	4413      	add	r3, r2
 80023b6:	4a6e      	ldr	r2, [pc, #440]	; (8002570 <HAL_DMA_Init+0x654>)
 80023b8:	fba2 2303 	umull	r2, r3, r2, r3
 80023bc:	091b      	lsrs	r3, r3, #4
 80023be:	009a      	lsls	r2, r3, #2
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f002 f9a9 	bl	800471c <DMA_CalcBaseAndBitshift>
 80023ca:	4603      	mov	r3, r0
 80023cc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d2:	f003 031f 	and.w	r3, r3, #31
 80023d6:	2201      	movs	r2, #1
 80023d8:	409a      	lsls	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	605a      	str	r2, [r3, #4]
 80023de:	e008      	b.n	80023f2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2240      	movs	r2, #64	; 0x40
 80023e4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2203      	movs	r2, #3
 80023ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e0b7      	b.n	8002562 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a5f      	ldr	r2, [pc, #380]	; (8002574 <HAL_DMA_Init+0x658>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d072      	beq.n	80024e2 <HAL_DMA_Init+0x5c6>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a5d      	ldr	r2, [pc, #372]	; (8002578 <HAL_DMA_Init+0x65c>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d06d      	beq.n	80024e2 <HAL_DMA_Init+0x5c6>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a5c      	ldr	r2, [pc, #368]	; (800257c <HAL_DMA_Init+0x660>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d068      	beq.n	80024e2 <HAL_DMA_Init+0x5c6>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a5a      	ldr	r2, [pc, #360]	; (8002580 <HAL_DMA_Init+0x664>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d063      	beq.n	80024e2 <HAL_DMA_Init+0x5c6>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a59      	ldr	r2, [pc, #356]	; (8002584 <HAL_DMA_Init+0x668>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d05e      	beq.n	80024e2 <HAL_DMA_Init+0x5c6>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a57      	ldr	r2, [pc, #348]	; (8002588 <HAL_DMA_Init+0x66c>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d059      	beq.n	80024e2 <HAL_DMA_Init+0x5c6>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a56      	ldr	r2, [pc, #344]	; (800258c <HAL_DMA_Init+0x670>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d054      	beq.n	80024e2 <HAL_DMA_Init+0x5c6>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a54      	ldr	r2, [pc, #336]	; (8002590 <HAL_DMA_Init+0x674>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d04f      	beq.n	80024e2 <HAL_DMA_Init+0x5c6>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a53      	ldr	r2, [pc, #332]	; (8002594 <HAL_DMA_Init+0x678>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d04a      	beq.n	80024e2 <HAL_DMA_Init+0x5c6>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a51      	ldr	r2, [pc, #324]	; (8002598 <HAL_DMA_Init+0x67c>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d045      	beq.n	80024e2 <HAL_DMA_Init+0x5c6>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a50      	ldr	r2, [pc, #320]	; (800259c <HAL_DMA_Init+0x680>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d040      	beq.n	80024e2 <HAL_DMA_Init+0x5c6>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a4e      	ldr	r2, [pc, #312]	; (80025a0 <HAL_DMA_Init+0x684>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d03b      	beq.n	80024e2 <HAL_DMA_Init+0x5c6>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a4d      	ldr	r2, [pc, #308]	; (80025a4 <HAL_DMA_Init+0x688>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d036      	beq.n	80024e2 <HAL_DMA_Init+0x5c6>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a4b      	ldr	r2, [pc, #300]	; (80025a8 <HAL_DMA_Init+0x68c>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d031      	beq.n	80024e2 <HAL_DMA_Init+0x5c6>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a4a      	ldr	r2, [pc, #296]	; (80025ac <HAL_DMA_Init+0x690>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d02c      	beq.n	80024e2 <HAL_DMA_Init+0x5c6>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a48      	ldr	r2, [pc, #288]	; (80025b0 <HAL_DMA_Init+0x694>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d027      	beq.n	80024e2 <HAL_DMA_Init+0x5c6>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a47      	ldr	r2, [pc, #284]	; (80025b4 <HAL_DMA_Init+0x698>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d022      	beq.n	80024e2 <HAL_DMA_Init+0x5c6>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a45      	ldr	r2, [pc, #276]	; (80025b8 <HAL_DMA_Init+0x69c>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d01d      	beq.n	80024e2 <HAL_DMA_Init+0x5c6>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a44      	ldr	r2, [pc, #272]	; (80025bc <HAL_DMA_Init+0x6a0>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d018      	beq.n	80024e2 <HAL_DMA_Init+0x5c6>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a42      	ldr	r2, [pc, #264]	; (80025c0 <HAL_DMA_Init+0x6a4>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d013      	beq.n	80024e2 <HAL_DMA_Init+0x5c6>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a41      	ldr	r2, [pc, #260]	; (80025c4 <HAL_DMA_Init+0x6a8>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d00e      	beq.n	80024e2 <HAL_DMA_Init+0x5c6>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a3f      	ldr	r2, [pc, #252]	; (80025c8 <HAL_DMA_Init+0x6ac>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d009      	beq.n	80024e2 <HAL_DMA_Init+0x5c6>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a3e      	ldr	r2, [pc, #248]	; (80025cc <HAL_DMA_Init+0x6b0>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d004      	beq.n	80024e2 <HAL_DMA_Init+0x5c6>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a3c      	ldr	r2, [pc, #240]	; (80025d0 <HAL_DMA_Init+0x6b4>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d101      	bne.n	80024e6 <HAL_DMA_Init+0x5ca>
 80024e2:	2301      	movs	r3, #1
 80024e4:	e000      	b.n	80024e8 <HAL_DMA_Init+0x5cc>
 80024e6:	2300      	movs	r3, #0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d032      	beq.n	8002552 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f002 fa43 	bl	8004978 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	2b80      	cmp	r3, #128	; 0x80
 80024f8:	d102      	bne.n	8002500 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002508:	b2d2      	uxtb	r2, r2
 800250a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002514:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d010      	beq.n	8002540 <HAL_DMA_Init+0x624>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	2b08      	cmp	r3, #8
 8002524:	d80c      	bhi.n	8002540 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f002 fac0 	bl	8004aac <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800253c:	605a      	str	r2, [r3, #4]
 800253e:	e008      	b.n	8002552 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3718      	adds	r7, #24
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	a7fdabf8 	.word	0xa7fdabf8
 8002570:	cccccccd 	.word	0xcccccccd
 8002574:	40020010 	.word	0x40020010
 8002578:	40020028 	.word	0x40020028
 800257c:	40020040 	.word	0x40020040
 8002580:	40020058 	.word	0x40020058
 8002584:	40020070 	.word	0x40020070
 8002588:	40020088 	.word	0x40020088
 800258c:	400200a0 	.word	0x400200a0
 8002590:	400200b8 	.word	0x400200b8
 8002594:	40020410 	.word	0x40020410
 8002598:	40020428 	.word	0x40020428
 800259c:	40020440 	.word	0x40020440
 80025a0:	40020458 	.word	0x40020458
 80025a4:	40020470 	.word	0x40020470
 80025a8:	40020488 	.word	0x40020488
 80025ac:	400204a0 	.word	0x400204a0
 80025b0:	400204b8 	.word	0x400204b8
 80025b4:	58025408 	.word	0x58025408
 80025b8:	5802541c 	.word	0x5802541c
 80025bc:	58025430 	.word	0x58025430
 80025c0:	58025444 	.word	0x58025444
 80025c4:	58025458 	.word	0x58025458
 80025c8:	5802546c 	.word	0x5802546c
 80025cc:	58025480 	.word	0x58025480
 80025d0:	58025494 	.word	0x58025494

080025d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
 80025e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025e2:	2300      	movs	r3, #0
 80025e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e226      	b.n	8002a3e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d101      	bne.n	80025fe <HAL_DMA_Start_IT+0x2a>
 80025fa:	2302      	movs	r3, #2
 80025fc:	e21f      	b.n	8002a3e <HAL_DMA_Start_IT+0x46a>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2201      	movs	r2, #1
 8002602:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b01      	cmp	r3, #1
 8002610:	f040 820a 	bne.w	8002a28 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2202      	movs	r2, #2
 8002618:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2200      	movs	r2, #0
 8002620:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a68      	ldr	r2, [pc, #416]	; (80027c8 <HAL_DMA_Start_IT+0x1f4>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d04a      	beq.n	80026c2 <HAL_DMA_Start_IT+0xee>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a66      	ldr	r2, [pc, #408]	; (80027cc <HAL_DMA_Start_IT+0x1f8>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d045      	beq.n	80026c2 <HAL_DMA_Start_IT+0xee>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a65      	ldr	r2, [pc, #404]	; (80027d0 <HAL_DMA_Start_IT+0x1fc>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d040      	beq.n	80026c2 <HAL_DMA_Start_IT+0xee>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a63      	ldr	r2, [pc, #396]	; (80027d4 <HAL_DMA_Start_IT+0x200>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d03b      	beq.n	80026c2 <HAL_DMA_Start_IT+0xee>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a62      	ldr	r2, [pc, #392]	; (80027d8 <HAL_DMA_Start_IT+0x204>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d036      	beq.n	80026c2 <HAL_DMA_Start_IT+0xee>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a60      	ldr	r2, [pc, #384]	; (80027dc <HAL_DMA_Start_IT+0x208>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d031      	beq.n	80026c2 <HAL_DMA_Start_IT+0xee>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a5f      	ldr	r2, [pc, #380]	; (80027e0 <HAL_DMA_Start_IT+0x20c>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d02c      	beq.n	80026c2 <HAL_DMA_Start_IT+0xee>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a5d      	ldr	r2, [pc, #372]	; (80027e4 <HAL_DMA_Start_IT+0x210>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d027      	beq.n	80026c2 <HAL_DMA_Start_IT+0xee>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a5c      	ldr	r2, [pc, #368]	; (80027e8 <HAL_DMA_Start_IT+0x214>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d022      	beq.n	80026c2 <HAL_DMA_Start_IT+0xee>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a5a      	ldr	r2, [pc, #360]	; (80027ec <HAL_DMA_Start_IT+0x218>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d01d      	beq.n	80026c2 <HAL_DMA_Start_IT+0xee>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a59      	ldr	r2, [pc, #356]	; (80027f0 <HAL_DMA_Start_IT+0x21c>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d018      	beq.n	80026c2 <HAL_DMA_Start_IT+0xee>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a57      	ldr	r2, [pc, #348]	; (80027f4 <HAL_DMA_Start_IT+0x220>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d013      	beq.n	80026c2 <HAL_DMA_Start_IT+0xee>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a56      	ldr	r2, [pc, #344]	; (80027f8 <HAL_DMA_Start_IT+0x224>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d00e      	beq.n	80026c2 <HAL_DMA_Start_IT+0xee>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a54      	ldr	r2, [pc, #336]	; (80027fc <HAL_DMA_Start_IT+0x228>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d009      	beq.n	80026c2 <HAL_DMA_Start_IT+0xee>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a53      	ldr	r2, [pc, #332]	; (8002800 <HAL_DMA_Start_IT+0x22c>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d004      	beq.n	80026c2 <HAL_DMA_Start_IT+0xee>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a51      	ldr	r2, [pc, #324]	; (8002804 <HAL_DMA_Start_IT+0x230>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d108      	bne.n	80026d4 <HAL_DMA_Start_IT+0x100>
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 0201 	bic.w	r2, r2, #1
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	e007      	b.n	80026e4 <HAL_DMA_Start_IT+0x110>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 0201 	bic.w	r2, r2, #1
 80026e2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	68b9      	ldr	r1, [r7, #8]
 80026ea:	68f8      	ldr	r0, [r7, #12]
 80026ec:	f001 fe6a 	bl	80043c4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a34      	ldr	r2, [pc, #208]	; (80027c8 <HAL_DMA_Start_IT+0x1f4>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d04a      	beq.n	8002790 <HAL_DMA_Start_IT+0x1bc>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a33      	ldr	r2, [pc, #204]	; (80027cc <HAL_DMA_Start_IT+0x1f8>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d045      	beq.n	8002790 <HAL_DMA_Start_IT+0x1bc>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a31      	ldr	r2, [pc, #196]	; (80027d0 <HAL_DMA_Start_IT+0x1fc>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d040      	beq.n	8002790 <HAL_DMA_Start_IT+0x1bc>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a30      	ldr	r2, [pc, #192]	; (80027d4 <HAL_DMA_Start_IT+0x200>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d03b      	beq.n	8002790 <HAL_DMA_Start_IT+0x1bc>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a2e      	ldr	r2, [pc, #184]	; (80027d8 <HAL_DMA_Start_IT+0x204>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d036      	beq.n	8002790 <HAL_DMA_Start_IT+0x1bc>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a2d      	ldr	r2, [pc, #180]	; (80027dc <HAL_DMA_Start_IT+0x208>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d031      	beq.n	8002790 <HAL_DMA_Start_IT+0x1bc>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a2b      	ldr	r2, [pc, #172]	; (80027e0 <HAL_DMA_Start_IT+0x20c>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d02c      	beq.n	8002790 <HAL_DMA_Start_IT+0x1bc>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a2a      	ldr	r2, [pc, #168]	; (80027e4 <HAL_DMA_Start_IT+0x210>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d027      	beq.n	8002790 <HAL_DMA_Start_IT+0x1bc>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a28      	ldr	r2, [pc, #160]	; (80027e8 <HAL_DMA_Start_IT+0x214>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d022      	beq.n	8002790 <HAL_DMA_Start_IT+0x1bc>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a27      	ldr	r2, [pc, #156]	; (80027ec <HAL_DMA_Start_IT+0x218>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d01d      	beq.n	8002790 <HAL_DMA_Start_IT+0x1bc>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a25      	ldr	r2, [pc, #148]	; (80027f0 <HAL_DMA_Start_IT+0x21c>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d018      	beq.n	8002790 <HAL_DMA_Start_IT+0x1bc>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a24      	ldr	r2, [pc, #144]	; (80027f4 <HAL_DMA_Start_IT+0x220>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d013      	beq.n	8002790 <HAL_DMA_Start_IT+0x1bc>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a22      	ldr	r2, [pc, #136]	; (80027f8 <HAL_DMA_Start_IT+0x224>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d00e      	beq.n	8002790 <HAL_DMA_Start_IT+0x1bc>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a21      	ldr	r2, [pc, #132]	; (80027fc <HAL_DMA_Start_IT+0x228>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d009      	beq.n	8002790 <HAL_DMA_Start_IT+0x1bc>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a1f      	ldr	r2, [pc, #124]	; (8002800 <HAL_DMA_Start_IT+0x22c>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d004      	beq.n	8002790 <HAL_DMA_Start_IT+0x1bc>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a1e      	ldr	r2, [pc, #120]	; (8002804 <HAL_DMA_Start_IT+0x230>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d101      	bne.n	8002794 <HAL_DMA_Start_IT+0x1c0>
 8002790:	2301      	movs	r3, #1
 8002792:	e000      	b.n	8002796 <HAL_DMA_Start_IT+0x1c2>
 8002794:	2300      	movs	r3, #0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d036      	beq.n	8002808 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f023 021e 	bic.w	r2, r3, #30
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f042 0216 	orr.w	r2, r2, #22
 80027ac:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d03e      	beq.n	8002834 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f042 0208 	orr.w	r2, r2, #8
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	e035      	b.n	8002834 <HAL_DMA_Start_IT+0x260>
 80027c8:	40020010 	.word	0x40020010
 80027cc:	40020028 	.word	0x40020028
 80027d0:	40020040 	.word	0x40020040
 80027d4:	40020058 	.word	0x40020058
 80027d8:	40020070 	.word	0x40020070
 80027dc:	40020088 	.word	0x40020088
 80027e0:	400200a0 	.word	0x400200a0
 80027e4:	400200b8 	.word	0x400200b8
 80027e8:	40020410 	.word	0x40020410
 80027ec:	40020428 	.word	0x40020428
 80027f0:	40020440 	.word	0x40020440
 80027f4:	40020458 	.word	0x40020458
 80027f8:	40020470 	.word	0x40020470
 80027fc:	40020488 	.word	0x40020488
 8002800:	400204a0 	.word	0x400204a0
 8002804:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f023 020e 	bic.w	r2, r3, #14
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f042 020a 	orr.w	r2, r2, #10
 800281a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002820:	2b00      	cmp	r3, #0
 8002822:	d007      	beq.n	8002834 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f042 0204 	orr.w	r2, r2, #4
 8002832:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a83      	ldr	r2, [pc, #524]	; (8002a48 <HAL_DMA_Start_IT+0x474>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d072      	beq.n	8002924 <HAL_DMA_Start_IT+0x350>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a82      	ldr	r2, [pc, #520]	; (8002a4c <HAL_DMA_Start_IT+0x478>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d06d      	beq.n	8002924 <HAL_DMA_Start_IT+0x350>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a80      	ldr	r2, [pc, #512]	; (8002a50 <HAL_DMA_Start_IT+0x47c>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d068      	beq.n	8002924 <HAL_DMA_Start_IT+0x350>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a7f      	ldr	r2, [pc, #508]	; (8002a54 <HAL_DMA_Start_IT+0x480>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d063      	beq.n	8002924 <HAL_DMA_Start_IT+0x350>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a7d      	ldr	r2, [pc, #500]	; (8002a58 <HAL_DMA_Start_IT+0x484>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d05e      	beq.n	8002924 <HAL_DMA_Start_IT+0x350>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a7c      	ldr	r2, [pc, #496]	; (8002a5c <HAL_DMA_Start_IT+0x488>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d059      	beq.n	8002924 <HAL_DMA_Start_IT+0x350>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a7a      	ldr	r2, [pc, #488]	; (8002a60 <HAL_DMA_Start_IT+0x48c>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d054      	beq.n	8002924 <HAL_DMA_Start_IT+0x350>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a79      	ldr	r2, [pc, #484]	; (8002a64 <HAL_DMA_Start_IT+0x490>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d04f      	beq.n	8002924 <HAL_DMA_Start_IT+0x350>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a77      	ldr	r2, [pc, #476]	; (8002a68 <HAL_DMA_Start_IT+0x494>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d04a      	beq.n	8002924 <HAL_DMA_Start_IT+0x350>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a76      	ldr	r2, [pc, #472]	; (8002a6c <HAL_DMA_Start_IT+0x498>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d045      	beq.n	8002924 <HAL_DMA_Start_IT+0x350>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a74      	ldr	r2, [pc, #464]	; (8002a70 <HAL_DMA_Start_IT+0x49c>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d040      	beq.n	8002924 <HAL_DMA_Start_IT+0x350>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a73      	ldr	r2, [pc, #460]	; (8002a74 <HAL_DMA_Start_IT+0x4a0>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d03b      	beq.n	8002924 <HAL_DMA_Start_IT+0x350>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a71      	ldr	r2, [pc, #452]	; (8002a78 <HAL_DMA_Start_IT+0x4a4>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d036      	beq.n	8002924 <HAL_DMA_Start_IT+0x350>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a70      	ldr	r2, [pc, #448]	; (8002a7c <HAL_DMA_Start_IT+0x4a8>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d031      	beq.n	8002924 <HAL_DMA_Start_IT+0x350>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a6e      	ldr	r2, [pc, #440]	; (8002a80 <HAL_DMA_Start_IT+0x4ac>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d02c      	beq.n	8002924 <HAL_DMA_Start_IT+0x350>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a6d      	ldr	r2, [pc, #436]	; (8002a84 <HAL_DMA_Start_IT+0x4b0>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d027      	beq.n	8002924 <HAL_DMA_Start_IT+0x350>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a6b      	ldr	r2, [pc, #428]	; (8002a88 <HAL_DMA_Start_IT+0x4b4>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d022      	beq.n	8002924 <HAL_DMA_Start_IT+0x350>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a6a      	ldr	r2, [pc, #424]	; (8002a8c <HAL_DMA_Start_IT+0x4b8>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d01d      	beq.n	8002924 <HAL_DMA_Start_IT+0x350>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a68      	ldr	r2, [pc, #416]	; (8002a90 <HAL_DMA_Start_IT+0x4bc>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d018      	beq.n	8002924 <HAL_DMA_Start_IT+0x350>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a67      	ldr	r2, [pc, #412]	; (8002a94 <HAL_DMA_Start_IT+0x4c0>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d013      	beq.n	8002924 <HAL_DMA_Start_IT+0x350>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a65      	ldr	r2, [pc, #404]	; (8002a98 <HAL_DMA_Start_IT+0x4c4>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d00e      	beq.n	8002924 <HAL_DMA_Start_IT+0x350>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a64      	ldr	r2, [pc, #400]	; (8002a9c <HAL_DMA_Start_IT+0x4c8>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d009      	beq.n	8002924 <HAL_DMA_Start_IT+0x350>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a62      	ldr	r2, [pc, #392]	; (8002aa0 <HAL_DMA_Start_IT+0x4cc>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d004      	beq.n	8002924 <HAL_DMA_Start_IT+0x350>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a61      	ldr	r2, [pc, #388]	; (8002aa4 <HAL_DMA_Start_IT+0x4d0>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d101      	bne.n	8002928 <HAL_DMA_Start_IT+0x354>
 8002924:	2301      	movs	r3, #1
 8002926:	e000      	b.n	800292a <HAL_DMA_Start_IT+0x356>
 8002928:	2300      	movs	r3, #0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d01a      	beq.n	8002964 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d007      	beq.n	800294c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002946:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800294a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002950:	2b00      	cmp	r3, #0
 8002952:	d007      	beq.n	8002964 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800295e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002962:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a37      	ldr	r2, [pc, #220]	; (8002a48 <HAL_DMA_Start_IT+0x474>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d04a      	beq.n	8002a04 <HAL_DMA_Start_IT+0x430>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a36      	ldr	r2, [pc, #216]	; (8002a4c <HAL_DMA_Start_IT+0x478>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d045      	beq.n	8002a04 <HAL_DMA_Start_IT+0x430>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a34      	ldr	r2, [pc, #208]	; (8002a50 <HAL_DMA_Start_IT+0x47c>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d040      	beq.n	8002a04 <HAL_DMA_Start_IT+0x430>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a33      	ldr	r2, [pc, #204]	; (8002a54 <HAL_DMA_Start_IT+0x480>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d03b      	beq.n	8002a04 <HAL_DMA_Start_IT+0x430>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a31      	ldr	r2, [pc, #196]	; (8002a58 <HAL_DMA_Start_IT+0x484>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d036      	beq.n	8002a04 <HAL_DMA_Start_IT+0x430>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a30      	ldr	r2, [pc, #192]	; (8002a5c <HAL_DMA_Start_IT+0x488>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d031      	beq.n	8002a04 <HAL_DMA_Start_IT+0x430>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a2e      	ldr	r2, [pc, #184]	; (8002a60 <HAL_DMA_Start_IT+0x48c>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d02c      	beq.n	8002a04 <HAL_DMA_Start_IT+0x430>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a2d      	ldr	r2, [pc, #180]	; (8002a64 <HAL_DMA_Start_IT+0x490>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d027      	beq.n	8002a04 <HAL_DMA_Start_IT+0x430>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a2b      	ldr	r2, [pc, #172]	; (8002a68 <HAL_DMA_Start_IT+0x494>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d022      	beq.n	8002a04 <HAL_DMA_Start_IT+0x430>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a2a      	ldr	r2, [pc, #168]	; (8002a6c <HAL_DMA_Start_IT+0x498>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d01d      	beq.n	8002a04 <HAL_DMA_Start_IT+0x430>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a28      	ldr	r2, [pc, #160]	; (8002a70 <HAL_DMA_Start_IT+0x49c>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d018      	beq.n	8002a04 <HAL_DMA_Start_IT+0x430>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a27      	ldr	r2, [pc, #156]	; (8002a74 <HAL_DMA_Start_IT+0x4a0>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d013      	beq.n	8002a04 <HAL_DMA_Start_IT+0x430>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a25      	ldr	r2, [pc, #148]	; (8002a78 <HAL_DMA_Start_IT+0x4a4>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d00e      	beq.n	8002a04 <HAL_DMA_Start_IT+0x430>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a24      	ldr	r2, [pc, #144]	; (8002a7c <HAL_DMA_Start_IT+0x4a8>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d009      	beq.n	8002a04 <HAL_DMA_Start_IT+0x430>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a22      	ldr	r2, [pc, #136]	; (8002a80 <HAL_DMA_Start_IT+0x4ac>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d004      	beq.n	8002a04 <HAL_DMA_Start_IT+0x430>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a21      	ldr	r2, [pc, #132]	; (8002a84 <HAL_DMA_Start_IT+0x4b0>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d108      	bne.n	8002a16 <HAL_DMA_Start_IT+0x442>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f042 0201 	orr.w	r2, r2, #1
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	e012      	b.n	8002a3c <HAL_DMA_Start_IT+0x468>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f042 0201 	orr.w	r2, r2, #1
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	e009      	b.n	8002a3c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a2e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002a3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3718      	adds	r7, #24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	40020010 	.word	0x40020010
 8002a4c:	40020028 	.word	0x40020028
 8002a50:	40020040 	.word	0x40020040
 8002a54:	40020058 	.word	0x40020058
 8002a58:	40020070 	.word	0x40020070
 8002a5c:	40020088 	.word	0x40020088
 8002a60:	400200a0 	.word	0x400200a0
 8002a64:	400200b8 	.word	0x400200b8
 8002a68:	40020410 	.word	0x40020410
 8002a6c:	40020428 	.word	0x40020428
 8002a70:	40020440 	.word	0x40020440
 8002a74:	40020458 	.word	0x40020458
 8002a78:	40020470 	.word	0x40020470
 8002a7c:	40020488 	.word	0x40020488
 8002a80:	400204a0 	.word	0x400204a0
 8002a84:	400204b8 	.word	0x400204b8
 8002a88:	58025408 	.word	0x58025408
 8002a8c:	5802541c 	.word	0x5802541c
 8002a90:	58025430 	.word	0x58025430
 8002a94:	58025444 	.word	0x58025444
 8002a98:	58025458 	.word	0x58025458
 8002a9c:	5802546c 	.word	0x5802546c
 8002aa0:	58025480 	.word	0x58025480
 8002aa4:	58025494 	.word	0x58025494

08002aa8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002ab0:	f7ff f904 	bl	8001cbc <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d101      	bne.n	8002ac0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e2dc      	b.n	800307a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d008      	beq.n	8002ade <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2280      	movs	r2, #128	; 0x80
 8002ad0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e2cd      	b.n	800307a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a76      	ldr	r2, [pc, #472]	; (8002cbc <HAL_DMA_Abort+0x214>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d04a      	beq.n	8002b7e <HAL_DMA_Abort+0xd6>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a74      	ldr	r2, [pc, #464]	; (8002cc0 <HAL_DMA_Abort+0x218>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d045      	beq.n	8002b7e <HAL_DMA_Abort+0xd6>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a73      	ldr	r2, [pc, #460]	; (8002cc4 <HAL_DMA_Abort+0x21c>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d040      	beq.n	8002b7e <HAL_DMA_Abort+0xd6>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a71      	ldr	r2, [pc, #452]	; (8002cc8 <HAL_DMA_Abort+0x220>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d03b      	beq.n	8002b7e <HAL_DMA_Abort+0xd6>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a70      	ldr	r2, [pc, #448]	; (8002ccc <HAL_DMA_Abort+0x224>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d036      	beq.n	8002b7e <HAL_DMA_Abort+0xd6>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a6e      	ldr	r2, [pc, #440]	; (8002cd0 <HAL_DMA_Abort+0x228>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d031      	beq.n	8002b7e <HAL_DMA_Abort+0xd6>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a6d      	ldr	r2, [pc, #436]	; (8002cd4 <HAL_DMA_Abort+0x22c>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d02c      	beq.n	8002b7e <HAL_DMA_Abort+0xd6>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a6b      	ldr	r2, [pc, #428]	; (8002cd8 <HAL_DMA_Abort+0x230>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d027      	beq.n	8002b7e <HAL_DMA_Abort+0xd6>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a6a      	ldr	r2, [pc, #424]	; (8002cdc <HAL_DMA_Abort+0x234>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d022      	beq.n	8002b7e <HAL_DMA_Abort+0xd6>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a68      	ldr	r2, [pc, #416]	; (8002ce0 <HAL_DMA_Abort+0x238>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d01d      	beq.n	8002b7e <HAL_DMA_Abort+0xd6>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a67      	ldr	r2, [pc, #412]	; (8002ce4 <HAL_DMA_Abort+0x23c>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d018      	beq.n	8002b7e <HAL_DMA_Abort+0xd6>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a65      	ldr	r2, [pc, #404]	; (8002ce8 <HAL_DMA_Abort+0x240>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d013      	beq.n	8002b7e <HAL_DMA_Abort+0xd6>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a64      	ldr	r2, [pc, #400]	; (8002cec <HAL_DMA_Abort+0x244>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d00e      	beq.n	8002b7e <HAL_DMA_Abort+0xd6>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a62      	ldr	r2, [pc, #392]	; (8002cf0 <HAL_DMA_Abort+0x248>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d009      	beq.n	8002b7e <HAL_DMA_Abort+0xd6>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a61      	ldr	r2, [pc, #388]	; (8002cf4 <HAL_DMA_Abort+0x24c>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d004      	beq.n	8002b7e <HAL_DMA_Abort+0xd6>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a5f      	ldr	r2, [pc, #380]	; (8002cf8 <HAL_DMA_Abort+0x250>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d101      	bne.n	8002b82 <HAL_DMA_Abort+0xda>
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e000      	b.n	8002b84 <HAL_DMA_Abort+0xdc>
 8002b82:	2300      	movs	r3, #0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d013      	beq.n	8002bb0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 021e 	bic.w	r2, r2, #30
 8002b96:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	695a      	ldr	r2, [r3, #20]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ba6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	617b      	str	r3, [r7, #20]
 8002bae:	e00a      	b.n	8002bc6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f022 020e 	bic.w	r2, r2, #14
 8002bbe:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a3c      	ldr	r2, [pc, #240]	; (8002cbc <HAL_DMA_Abort+0x214>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d072      	beq.n	8002cb6 <HAL_DMA_Abort+0x20e>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a3a      	ldr	r2, [pc, #232]	; (8002cc0 <HAL_DMA_Abort+0x218>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d06d      	beq.n	8002cb6 <HAL_DMA_Abort+0x20e>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a39      	ldr	r2, [pc, #228]	; (8002cc4 <HAL_DMA_Abort+0x21c>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d068      	beq.n	8002cb6 <HAL_DMA_Abort+0x20e>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a37      	ldr	r2, [pc, #220]	; (8002cc8 <HAL_DMA_Abort+0x220>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d063      	beq.n	8002cb6 <HAL_DMA_Abort+0x20e>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a36      	ldr	r2, [pc, #216]	; (8002ccc <HAL_DMA_Abort+0x224>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d05e      	beq.n	8002cb6 <HAL_DMA_Abort+0x20e>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a34      	ldr	r2, [pc, #208]	; (8002cd0 <HAL_DMA_Abort+0x228>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d059      	beq.n	8002cb6 <HAL_DMA_Abort+0x20e>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a33      	ldr	r2, [pc, #204]	; (8002cd4 <HAL_DMA_Abort+0x22c>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d054      	beq.n	8002cb6 <HAL_DMA_Abort+0x20e>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a31      	ldr	r2, [pc, #196]	; (8002cd8 <HAL_DMA_Abort+0x230>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d04f      	beq.n	8002cb6 <HAL_DMA_Abort+0x20e>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a30      	ldr	r2, [pc, #192]	; (8002cdc <HAL_DMA_Abort+0x234>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d04a      	beq.n	8002cb6 <HAL_DMA_Abort+0x20e>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a2e      	ldr	r2, [pc, #184]	; (8002ce0 <HAL_DMA_Abort+0x238>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d045      	beq.n	8002cb6 <HAL_DMA_Abort+0x20e>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a2d      	ldr	r2, [pc, #180]	; (8002ce4 <HAL_DMA_Abort+0x23c>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d040      	beq.n	8002cb6 <HAL_DMA_Abort+0x20e>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a2b      	ldr	r2, [pc, #172]	; (8002ce8 <HAL_DMA_Abort+0x240>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d03b      	beq.n	8002cb6 <HAL_DMA_Abort+0x20e>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a2a      	ldr	r2, [pc, #168]	; (8002cec <HAL_DMA_Abort+0x244>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d036      	beq.n	8002cb6 <HAL_DMA_Abort+0x20e>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a28      	ldr	r2, [pc, #160]	; (8002cf0 <HAL_DMA_Abort+0x248>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d031      	beq.n	8002cb6 <HAL_DMA_Abort+0x20e>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a27      	ldr	r2, [pc, #156]	; (8002cf4 <HAL_DMA_Abort+0x24c>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d02c      	beq.n	8002cb6 <HAL_DMA_Abort+0x20e>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a25      	ldr	r2, [pc, #148]	; (8002cf8 <HAL_DMA_Abort+0x250>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d027      	beq.n	8002cb6 <HAL_DMA_Abort+0x20e>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a24      	ldr	r2, [pc, #144]	; (8002cfc <HAL_DMA_Abort+0x254>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d022      	beq.n	8002cb6 <HAL_DMA_Abort+0x20e>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a22      	ldr	r2, [pc, #136]	; (8002d00 <HAL_DMA_Abort+0x258>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d01d      	beq.n	8002cb6 <HAL_DMA_Abort+0x20e>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a21      	ldr	r2, [pc, #132]	; (8002d04 <HAL_DMA_Abort+0x25c>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d018      	beq.n	8002cb6 <HAL_DMA_Abort+0x20e>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a1f      	ldr	r2, [pc, #124]	; (8002d08 <HAL_DMA_Abort+0x260>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d013      	beq.n	8002cb6 <HAL_DMA_Abort+0x20e>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a1e      	ldr	r2, [pc, #120]	; (8002d0c <HAL_DMA_Abort+0x264>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d00e      	beq.n	8002cb6 <HAL_DMA_Abort+0x20e>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a1c      	ldr	r2, [pc, #112]	; (8002d10 <HAL_DMA_Abort+0x268>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d009      	beq.n	8002cb6 <HAL_DMA_Abort+0x20e>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a1b      	ldr	r2, [pc, #108]	; (8002d14 <HAL_DMA_Abort+0x26c>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d004      	beq.n	8002cb6 <HAL_DMA_Abort+0x20e>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a19      	ldr	r2, [pc, #100]	; (8002d18 <HAL_DMA_Abort+0x270>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d132      	bne.n	8002d1c <HAL_DMA_Abort+0x274>
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e031      	b.n	8002d1e <HAL_DMA_Abort+0x276>
 8002cba:	bf00      	nop
 8002cbc:	40020010 	.word	0x40020010
 8002cc0:	40020028 	.word	0x40020028
 8002cc4:	40020040 	.word	0x40020040
 8002cc8:	40020058 	.word	0x40020058
 8002ccc:	40020070 	.word	0x40020070
 8002cd0:	40020088 	.word	0x40020088
 8002cd4:	400200a0 	.word	0x400200a0
 8002cd8:	400200b8 	.word	0x400200b8
 8002cdc:	40020410 	.word	0x40020410
 8002ce0:	40020428 	.word	0x40020428
 8002ce4:	40020440 	.word	0x40020440
 8002ce8:	40020458 	.word	0x40020458
 8002cec:	40020470 	.word	0x40020470
 8002cf0:	40020488 	.word	0x40020488
 8002cf4:	400204a0 	.word	0x400204a0
 8002cf8:	400204b8 	.word	0x400204b8
 8002cfc:	58025408 	.word	0x58025408
 8002d00:	5802541c 	.word	0x5802541c
 8002d04:	58025430 	.word	0x58025430
 8002d08:	58025444 	.word	0x58025444
 8002d0c:	58025458 	.word	0x58025458
 8002d10:	5802546c 	.word	0x5802546c
 8002d14:	58025480 	.word	0x58025480
 8002d18:	58025494 	.word	0x58025494
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d007      	beq.n	8002d32 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d30:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a6d      	ldr	r2, [pc, #436]	; (8002eec <HAL_DMA_Abort+0x444>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d04a      	beq.n	8002dd2 <HAL_DMA_Abort+0x32a>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a6b      	ldr	r2, [pc, #428]	; (8002ef0 <HAL_DMA_Abort+0x448>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d045      	beq.n	8002dd2 <HAL_DMA_Abort+0x32a>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a6a      	ldr	r2, [pc, #424]	; (8002ef4 <HAL_DMA_Abort+0x44c>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d040      	beq.n	8002dd2 <HAL_DMA_Abort+0x32a>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a68      	ldr	r2, [pc, #416]	; (8002ef8 <HAL_DMA_Abort+0x450>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d03b      	beq.n	8002dd2 <HAL_DMA_Abort+0x32a>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a67      	ldr	r2, [pc, #412]	; (8002efc <HAL_DMA_Abort+0x454>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d036      	beq.n	8002dd2 <HAL_DMA_Abort+0x32a>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a65      	ldr	r2, [pc, #404]	; (8002f00 <HAL_DMA_Abort+0x458>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d031      	beq.n	8002dd2 <HAL_DMA_Abort+0x32a>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a64      	ldr	r2, [pc, #400]	; (8002f04 <HAL_DMA_Abort+0x45c>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d02c      	beq.n	8002dd2 <HAL_DMA_Abort+0x32a>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a62      	ldr	r2, [pc, #392]	; (8002f08 <HAL_DMA_Abort+0x460>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d027      	beq.n	8002dd2 <HAL_DMA_Abort+0x32a>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a61      	ldr	r2, [pc, #388]	; (8002f0c <HAL_DMA_Abort+0x464>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d022      	beq.n	8002dd2 <HAL_DMA_Abort+0x32a>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a5f      	ldr	r2, [pc, #380]	; (8002f10 <HAL_DMA_Abort+0x468>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d01d      	beq.n	8002dd2 <HAL_DMA_Abort+0x32a>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a5e      	ldr	r2, [pc, #376]	; (8002f14 <HAL_DMA_Abort+0x46c>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d018      	beq.n	8002dd2 <HAL_DMA_Abort+0x32a>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a5c      	ldr	r2, [pc, #368]	; (8002f18 <HAL_DMA_Abort+0x470>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d013      	beq.n	8002dd2 <HAL_DMA_Abort+0x32a>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a5b      	ldr	r2, [pc, #364]	; (8002f1c <HAL_DMA_Abort+0x474>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d00e      	beq.n	8002dd2 <HAL_DMA_Abort+0x32a>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a59      	ldr	r2, [pc, #356]	; (8002f20 <HAL_DMA_Abort+0x478>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d009      	beq.n	8002dd2 <HAL_DMA_Abort+0x32a>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a58      	ldr	r2, [pc, #352]	; (8002f24 <HAL_DMA_Abort+0x47c>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d004      	beq.n	8002dd2 <HAL_DMA_Abort+0x32a>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a56      	ldr	r2, [pc, #344]	; (8002f28 <HAL_DMA_Abort+0x480>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d108      	bne.n	8002de4 <HAL_DMA_Abort+0x33c>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f022 0201 	bic.w	r2, r2, #1
 8002de0:	601a      	str	r2, [r3, #0]
 8002de2:	e007      	b.n	8002df4 <HAL_DMA_Abort+0x34c>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f022 0201 	bic.w	r2, r2, #1
 8002df2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002df4:	e013      	b.n	8002e1e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002df6:	f7fe ff61 	bl	8001cbc <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b05      	cmp	r3, #5
 8002e02:	d90c      	bls.n	8002e1e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2220      	movs	r2, #32
 8002e08:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2203      	movs	r2, #3
 8002e0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e12d      	b.n	800307a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1e5      	bne.n	8002df6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a2f      	ldr	r2, [pc, #188]	; (8002eec <HAL_DMA_Abort+0x444>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d04a      	beq.n	8002eca <HAL_DMA_Abort+0x422>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a2d      	ldr	r2, [pc, #180]	; (8002ef0 <HAL_DMA_Abort+0x448>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d045      	beq.n	8002eca <HAL_DMA_Abort+0x422>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a2c      	ldr	r2, [pc, #176]	; (8002ef4 <HAL_DMA_Abort+0x44c>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d040      	beq.n	8002eca <HAL_DMA_Abort+0x422>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a2a      	ldr	r2, [pc, #168]	; (8002ef8 <HAL_DMA_Abort+0x450>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d03b      	beq.n	8002eca <HAL_DMA_Abort+0x422>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a29      	ldr	r2, [pc, #164]	; (8002efc <HAL_DMA_Abort+0x454>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d036      	beq.n	8002eca <HAL_DMA_Abort+0x422>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a27      	ldr	r2, [pc, #156]	; (8002f00 <HAL_DMA_Abort+0x458>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d031      	beq.n	8002eca <HAL_DMA_Abort+0x422>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a26      	ldr	r2, [pc, #152]	; (8002f04 <HAL_DMA_Abort+0x45c>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d02c      	beq.n	8002eca <HAL_DMA_Abort+0x422>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a24      	ldr	r2, [pc, #144]	; (8002f08 <HAL_DMA_Abort+0x460>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d027      	beq.n	8002eca <HAL_DMA_Abort+0x422>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a23      	ldr	r2, [pc, #140]	; (8002f0c <HAL_DMA_Abort+0x464>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d022      	beq.n	8002eca <HAL_DMA_Abort+0x422>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a21      	ldr	r2, [pc, #132]	; (8002f10 <HAL_DMA_Abort+0x468>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d01d      	beq.n	8002eca <HAL_DMA_Abort+0x422>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a20      	ldr	r2, [pc, #128]	; (8002f14 <HAL_DMA_Abort+0x46c>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d018      	beq.n	8002eca <HAL_DMA_Abort+0x422>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a1e      	ldr	r2, [pc, #120]	; (8002f18 <HAL_DMA_Abort+0x470>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d013      	beq.n	8002eca <HAL_DMA_Abort+0x422>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a1d      	ldr	r2, [pc, #116]	; (8002f1c <HAL_DMA_Abort+0x474>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d00e      	beq.n	8002eca <HAL_DMA_Abort+0x422>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a1b      	ldr	r2, [pc, #108]	; (8002f20 <HAL_DMA_Abort+0x478>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d009      	beq.n	8002eca <HAL_DMA_Abort+0x422>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a1a      	ldr	r2, [pc, #104]	; (8002f24 <HAL_DMA_Abort+0x47c>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d004      	beq.n	8002eca <HAL_DMA_Abort+0x422>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a18      	ldr	r2, [pc, #96]	; (8002f28 <HAL_DMA_Abort+0x480>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d101      	bne.n	8002ece <HAL_DMA_Abort+0x426>
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e000      	b.n	8002ed0 <HAL_DMA_Abort+0x428>
 8002ece:	2300      	movs	r3, #0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d02b      	beq.n	8002f2c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ede:	f003 031f 	and.w	r3, r3, #31
 8002ee2:	223f      	movs	r2, #63	; 0x3f
 8002ee4:	409a      	lsls	r2, r3
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	609a      	str	r2, [r3, #8]
 8002eea:	e02a      	b.n	8002f42 <HAL_DMA_Abort+0x49a>
 8002eec:	40020010 	.word	0x40020010
 8002ef0:	40020028 	.word	0x40020028
 8002ef4:	40020040 	.word	0x40020040
 8002ef8:	40020058 	.word	0x40020058
 8002efc:	40020070 	.word	0x40020070
 8002f00:	40020088 	.word	0x40020088
 8002f04:	400200a0 	.word	0x400200a0
 8002f08:	400200b8 	.word	0x400200b8
 8002f0c:	40020410 	.word	0x40020410
 8002f10:	40020428 	.word	0x40020428
 8002f14:	40020440 	.word	0x40020440
 8002f18:	40020458 	.word	0x40020458
 8002f1c:	40020470 	.word	0x40020470
 8002f20:	40020488 	.word	0x40020488
 8002f24:	400204a0 	.word	0x400204a0
 8002f28:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f30:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f36:	f003 031f 	and.w	r3, r3, #31
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	409a      	lsls	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a4f      	ldr	r2, [pc, #316]	; (8003084 <HAL_DMA_Abort+0x5dc>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d072      	beq.n	8003032 <HAL_DMA_Abort+0x58a>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a4d      	ldr	r2, [pc, #308]	; (8003088 <HAL_DMA_Abort+0x5e0>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d06d      	beq.n	8003032 <HAL_DMA_Abort+0x58a>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a4c      	ldr	r2, [pc, #304]	; (800308c <HAL_DMA_Abort+0x5e4>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d068      	beq.n	8003032 <HAL_DMA_Abort+0x58a>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a4a      	ldr	r2, [pc, #296]	; (8003090 <HAL_DMA_Abort+0x5e8>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d063      	beq.n	8003032 <HAL_DMA_Abort+0x58a>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a49      	ldr	r2, [pc, #292]	; (8003094 <HAL_DMA_Abort+0x5ec>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d05e      	beq.n	8003032 <HAL_DMA_Abort+0x58a>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a47      	ldr	r2, [pc, #284]	; (8003098 <HAL_DMA_Abort+0x5f0>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d059      	beq.n	8003032 <HAL_DMA_Abort+0x58a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a46      	ldr	r2, [pc, #280]	; (800309c <HAL_DMA_Abort+0x5f4>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d054      	beq.n	8003032 <HAL_DMA_Abort+0x58a>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a44      	ldr	r2, [pc, #272]	; (80030a0 <HAL_DMA_Abort+0x5f8>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d04f      	beq.n	8003032 <HAL_DMA_Abort+0x58a>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a43      	ldr	r2, [pc, #268]	; (80030a4 <HAL_DMA_Abort+0x5fc>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d04a      	beq.n	8003032 <HAL_DMA_Abort+0x58a>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a41      	ldr	r2, [pc, #260]	; (80030a8 <HAL_DMA_Abort+0x600>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d045      	beq.n	8003032 <HAL_DMA_Abort+0x58a>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a40      	ldr	r2, [pc, #256]	; (80030ac <HAL_DMA_Abort+0x604>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d040      	beq.n	8003032 <HAL_DMA_Abort+0x58a>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a3e      	ldr	r2, [pc, #248]	; (80030b0 <HAL_DMA_Abort+0x608>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d03b      	beq.n	8003032 <HAL_DMA_Abort+0x58a>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a3d      	ldr	r2, [pc, #244]	; (80030b4 <HAL_DMA_Abort+0x60c>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d036      	beq.n	8003032 <HAL_DMA_Abort+0x58a>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a3b      	ldr	r2, [pc, #236]	; (80030b8 <HAL_DMA_Abort+0x610>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d031      	beq.n	8003032 <HAL_DMA_Abort+0x58a>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a3a      	ldr	r2, [pc, #232]	; (80030bc <HAL_DMA_Abort+0x614>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d02c      	beq.n	8003032 <HAL_DMA_Abort+0x58a>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a38      	ldr	r2, [pc, #224]	; (80030c0 <HAL_DMA_Abort+0x618>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d027      	beq.n	8003032 <HAL_DMA_Abort+0x58a>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a37      	ldr	r2, [pc, #220]	; (80030c4 <HAL_DMA_Abort+0x61c>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d022      	beq.n	8003032 <HAL_DMA_Abort+0x58a>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a35      	ldr	r2, [pc, #212]	; (80030c8 <HAL_DMA_Abort+0x620>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d01d      	beq.n	8003032 <HAL_DMA_Abort+0x58a>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a34      	ldr	r2, [pc, #208]	; (80030cc <HAL_DMA_Abort+0x624>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d018      	beq.n	8003032 <HAL_DMA_Abort+0x58a>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a32      	ldr	r2, [pc, #200]	; (80030d0 <HAL_DMA_Abort+0x628>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d013      	beq.n	8003032 <HAL_DMA_Abort+0x58a>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a31      	ldr	r2, [pc, #196]	; (80030d4 <HAL_DMA_Abort+0x62c>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d00e      	beq.n	8003032 <HAL_DMA_Abort+0x58a>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a2f      	ldr	r2, [pc, #188]	; (80030d8 <HAL_DMA_Abort+0x630>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d009      	beq.n	8003032 <HAL_DMA_Abort+0x58a>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a2e      	ldr	r2, [pc, #184]	; (80030dc <HAL_DMA_Abort+0x634>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d004      	beq.n	8003032 <HAL_DMA_Abort+0x58a>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a2c      	ldr	r2, [pc, #176]	; (80030e0 <HAL_DMA_Abort+0x638>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d101      	bne.n	8003036 <HAL_DMA_Abort+0x58e>
 8003032:	2301      	movs	r3, #1
 8003034:	e000      	b.n	8003038 <HAL_DMA_Abort+0x590>
 8003036:	2300      	movs	r3, #0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d015      	beq.n	8003068 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003044:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00c      	beq.n	8003068 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003058:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800305c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003066:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3718      	adds	r7, #24
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	40020010 	.word	0x40020010
 8003088:	40020028 	.word	0x40020028
 800308c:	40020040 	.word	0x40020040
 8003090:	40020058 	.word	0x40020058
 8003094:	40020070 	.word	0x40020070
 8003098:	40020088 	.word	0x40020088
 800309c:	400200a0 	.word	0x400200a0
 80030a0:	400200b8 	.word	0x400200b8
 80030a4:	40020410 	.word	0x40020410
 80030a8:	40020428 	.word	0x40020428
 80030ac:	40020440 	.word	0x40020440
 80030b0:	40020458 	.word	0x40020458
 80030b4:	40020470 	.word	0x40020470
 80030b8:	40020488 	.word	0x40020488
 80030bc:	400204a0 	.word	0x400204a0
 80030c0:	400204b8 	.word	0x400204b8
 80030c4:	58025408 	.word	0x58025408
 80030c8:	5802541c 	.word	0x5802541c
 80030cc:	58025430 	.word	0x58025430
 80030d0:	58025444 	.word	0x58025444
 80030d4:	58025458 	.word	0x58025458
 80030d8:	5802546c 	.word	0x5802546c
 80030dc:	58025480 	.word	0x58025480
 80030e0:	58025494 	.word	0x58025494

080030e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e237      	b.n	8003566 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d004      	beq.n	800310c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2280      	movs	r2, #128	; 0x80
 8003106:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e22c      	b.n	8003566 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a5c      	ldr	r2, [pc, #368]	; (8003284 <HAL_DMA_Abort_IT+0x1a0>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d04a      	beq.n	80031ac <HAL_DMA_Abort_IT+0xc8>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a5b      	ldr	r2, [pc, #364]	; (8003288 <HAL_DMA_Abort_IT+0x1a4>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d045      	beq.n	80031ac <HAL_DMA_Abort_IT+0xc8>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a59      	ldr	r2, [pc, #356]	; (800328c <HAL_DMA_Abort_IT+0x1a8>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d040      	beq.n	80031ac <HAL_DMA_Abort_IT+0xc8>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a58      	ldr	r2, [pc, #352]	; (8003290 <HAL_DMA_Abort_IT+0x1ac>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d03b      	beq.n	80031ac <HAL_DMA_Abort_IT+0xc8>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a56      	ldr	r2, [pc, #344]	; (8003294 <HAL_DMA_Abort_IT+0x1b0>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d036      	beq.n	80031ac <HAL_DMA_Abort_IT+0xc8>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a55      	ldr	r2, [pc, #340]	; (8003298 <HAL_DMA_Abort_IT+0x1b4>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d031      	beq.n	80031ac <HAL_DMA_Abort_IT+0xc8>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a53      	ldr	r2, [pc, #332]	; (800329c <HAL_DMA_Abort_IT+0x1b8>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d02c      	beq.n	80031ac <HAL_DMA_Abort_IT+0xc8>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a52      	ldr	r2, [pc, #328]	; (80032a0 <HAL_DMA_Abort_IT+0x1bc>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d027      	beq.n	80031ac <HAL_DMA_Abort_IT+0xc8>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a50      	ldr	r2, [pc, #320]	; (80032a4 <HAL_DMA_Abort_IT+0x1c0>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d022      	beq.n	80031ac <HAL_DMA_Abort_IT+0xc8>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a4f      	ldr	r2, [pc, #316]	; (80032a8 <HAL_DMA_Abort_IT+0x1c4>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d01d      	beq.n	80031ac <HAL_DMA_Abort_IT+0xc8>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a4d      	ldr	r2, [pc, #308]	; (80032ac <HAL_DMA_Abort_IT+0x1c8>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d018      	beq.n	80031ac <HAL_DMA_Abort_IT+0xc8>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a4c      	ldr	r2, [pc, #304]	; (80032b0 <HAL_DMA_Abort_IT+0x1cc>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d013      	beq.n	80031ac <HAL_DMA_Abort_IT+0xc8>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a4a      	ldr	r2, [pc, #296]	; (80032b4 <HAL_DMA_Abort_IT+0x1d0>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d00e      	beq.n	80031ac <HAL_DMA_Abort_IT+0xc8>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a49      	ldr	r2, [pc, #292]	; (80032b8 <HAL_DMA_Abort_IT+0x1d4>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d009      	beq.n	80031ac <HAL_DMA_Abort_IT+0xc8>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a47      	ldr	r2, [pc, #284]	; (80032bc <HAL_DMA_Abort_IT+0x1d8>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d004      	beq.n	80031ac <HAL_DMA_Abort_IT+0xc8>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a46      	ldr	r2, [pc, #280]	; (80032c0 <HAL_DMA_Abort_IT+0x1dc>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d101      	bne.n	80031b0 <HAL_DMA_Abort_IT+0xcc>
 80031ac:	2301      	movs	r3, #1
 80031ae:	e000      	b.n	80031b2 <HAL_DMA_Abort_IT+0xce>
 80031b0:	2300      	movs	r3, #0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f000 8086 	beq.w	80032c4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2204      	movs	r2, #4
 80031bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a2f      	ldr	r2, [pc, #188]	; (8003284 <HAL_DMA_Abort_IT+0x1a0>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d04a      	beq.n	8003260 <HAL_DMA_Abort_IT+0x17c>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a2e      	ldr	r2, [pc, #184]	; (8003288 <HAL_DMA_Abort_IT+0x1a4>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d045      	beq.n	8003260 <HAL_DMA_Abort_IT+0x17c>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a2c      	ldr	r2, [pc, #176]	; (800328c <HAL_DMA_Abort_IT+0x1a8>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d040      	beq.n	8003260 <HAL_DMA_Abort_IT+0x17c>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a2b      	ldr	r2, [pc, #172]	; (8003290 <HAL_DMA_Abort_IT+0x1ac>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d03b      	beq.n	8003260 <HAL_DMA_Abort_IT+0x17c>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a29      	ldr	r2, [pc, #164]	; (8003294 <HAL_DMA_Abort_IT+0x1b0>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d036      	beq.n	8003260 <HAL_DMA_Abort_IT+0x17c>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a28      	ldr	r2, [pc, #160]	; (8003298 <HAL_DMA_Abort_IT+0x1b4>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d031      	beq.n	8003260 <HAL_DMA_Abort_IT+0x17c>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a26      	ldr	r2, [pc, #152]	; (800329c <HAL_DMA_Abort_IT+0x1b8>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d02c      	beq.n	8003260 <HAL_DMA_Abort_IT+0x17c>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a25      	ldr	r2, [pc, #148]	; (80032a0 <HAL_DMA_Abort_IT+0x1bc>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d027      	beq.n	8003260 <HAL_DMA_Abort_IT+0x17c>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a23      	ldr	r2, [pc, #140]	; (80032a4 <HAL_DMA_Abort_IT+0x1c0>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d022      	beq.n	8003260 <HAL_DMA_Abort_IT+0x17c>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a22      	ldr	r2, [pc, #136]	; (80032a8 <HAL_DMA_Abort_IT+0x1c4>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d01d      	beq.n	8003260 <HAL_DMA_Abort_IT+0x17c>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a20      	ldr	r2, [pc, #128]	; (80032ac <HAL_DMA_Abort_IT+0x1c8>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d018      	beq.n	8003260 <HAL_DMA_Abort_IT+0x17c>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a1f      	ldr	r2, [pc, #124]	; (80032b0 <HAL_DMA_Abort_IT+0x1cc>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d013      	beq.n	8003260 <HAL_DMA_Abort_IT+0x17c>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a1d      	ldr	r2, [pc, #116]	; (80032b4 <HAL_DMA_Abort_IT+0x1d0>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d00e      	beq.n	8003260 <HAL_DMA_Abort_IT+0x17c>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a1c      	ldr	r2, [pc, #112]	; (80032b8 <HAL_DMA_Abort_IT+0x1d4>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d009      	beq.n	8003260 <HAL_DMA_Abort_IT+0x17c>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a1a      	ldr	r2, [pc, #104]	; (80032bc <HAL_DMA_Abort_IT+0x1d8>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d004      	beq.n	8003260 <HAL_DMA_Abort_IT+0x17c>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a19      	ldr	r2, [pc, #100]	; (80032c0 <HAL_DMA_Abort_IT+0x1dc>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d108      	bne.n	8003272 <HAL_DMA_Abort_IT+0x18e>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f022 0201 	bic.w	r2, r2, #1
 800326e:	601a      	str	r2, [r3, #0]
 8003270:	e178      	b.n	8003564 <HAL_DMA_Abort_IT+0x480>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 0201 	bic.w	r2, r2, #1
 8003280:	601a      	str	r2, [r3, #0]
 8003282:	e16f      	b.n	8003564 <HAL_DMA_Abort_IT+0x480>
 8003284:	40020010 	.word	0x40020010
 8003288:	40020028 	.word	0x40020028
 800328c:	40020040 	.word	0x40020040
 8003290:	40020058 	.word	0x40020058
 8003294:	40020070 	.word	0x40020070
 8003298:	40020088 	.word	0x40020088
 800329c:	400200a0 	.word	0x400200a0
 80032a0:	400200b8 	.word	0x400200b8
 80032a4:	40020410 	.word	0x40020410
 80032a8:	40020428 	.word	0x40020428
 80032ac:	40020440 	.word	0x40020440
 80032b0:	40020458 	.word	0x40020458
 80032b4:	40020470 	.word	0x40020470
 80032b8:	40020488 	.word	0x40020488
 80032bc:	400204a0 	.word	0x400204a0
 80032c0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 020e 	bic.w	r2, r2, #14
 80032d2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a6c      	ldr	r2, [pc, #432]	; (800348c <HAL_DMA_Abort_IT+0x3a8>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d04a      	beq.n	8003374 <HAL_DMA_Abort_IT+0x290>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a6b      	ldr	r2, [pc, #428]	; (8003490 <HAL_DMA_Abort_IT+0x3ac>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d045      	beq.n	8003374 <HAL_DMA_Abort_IT+0x290>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a69      	ldr	r2, [pc, #420]	; (8003494 <HAL_DMA_Abort_IT+0x3b0>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d040      	beq.n	8003374 <HAL_DMA_Abort_IT+0x290>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a68      	ldr	r2, [pc, #416]	; (8003498 <HAL_DMA_Abort_IT+0x3b4>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d03b      	beq.n	8003374 <HAL_DMA_Abort_IT+0x290>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a66      	ldr	r2, [pc, #408]	; (800349c <HAL_DMA_Abort_IT+0x3b8>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d036      	beq.n	8003374 <HAL_DMA_Abort_IT+0x290>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a65      	ldr	r2, [pc, #404]	; (80034a0 <HAL_DMA_Abort_IT+0x3bc>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d031      	beq.n	8003374 <HAL_DMA_Abort_IT+0x290>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a63      	ldr	r2, [pc, #396]	; (80034a4 <HAL_DMA_Abort_IT+0x3c0>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d02c      	beq.n	8003374 <HAL_DMA_Abort_IT+0x290>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a62      	ldr	r2, [pc, #392]	; (80034a8 <HAL_DMA_Abort_IT+0x3c4>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d027      	beq.n	8003374 <HAL_DMA_Abort_IT+0x290>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a60      	ldr	r2, [pc, #384]	; (80034ac <HAL_DMA_Abort_IT+0x3c8>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d022      	beq.n	8003374 <HAL_DMA_Abort_IT+0x290>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a5f      	ldr	r2, [pc, #380]	; (80034b0 <HAL_DMA_Abort_IT+0x3cc>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d01d      	beq.n	8003374 <HAL_DMA_Abort_IT+0x290>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a5d      	ldr	r2, [pc, #372]	; (80034b4 <HAL_DMA_Abort_IT+0x3d0>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d018      	beq.n	8003374 <HAL_DMA_Abort_IT+0x290>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a5c      	ldr	r2, [pc, #368]	; (80034b8 <HAL_DMA_Abort_IT+0x3d4>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d013      	beq.n	8003374 <HAL_DMA_Abort_IT+0x290>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a5a      	ldr	r2, [pc, #360]	; (80034bc <HAL_DMA_Abort_IT+0x3d8>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d00e      	beq.n	8003374 <HAL_DMA_Abort_IT+0x290>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a59      	ldr	r2, [pc, #356]	; (80034c0 <HAL_DMA_Abort_IT+0x3dc>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d009      	beq.n	8003374 <HAL_DMA_Abort_IT+0x290>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a57      	ldr	r2, [pc, #348]	; (80034c4 <HAL_DMA_Abort_IT+0x3e0>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d004      	beq.n	8003374 <HAL_DMA_Abort_IT+0x290>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a56      	ldr	r2, [pc, #344]	; (80034c8 <HAL_DMA_Abort_IT+0x3e4>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d108      	bne.n	8003386 <HAL_DMA_Abort_IT+0x2a2>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f022 0201 	bic.w	r2, r2, #1
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	e007      	b.n	8003396 <HAL_DMA_Abort_IT+0x2b2>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0201 	bic.w	r2, r2, #1
 8003394:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a3c      	ldr	r2, [pc, #240]	; (800348c <HAL_DMA_Abort_IT+0x3a8>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d072      	beq.n	8003486 <HAL_DMA_Abort_IT+0x3a2>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a3a      	ldr	r2, [pc, #232]	; (8003490 <HAL_DMA_Abort_IT+0x3ac>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d06d      	beq.n	8003486 <HAL_DMA_Abort_IT+0x3a2>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a39      	ldr	r2, [pc, #228]	; (8003494 <HAL_DMA_Abort_IT+0x3b0>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d068      	beq.n	8003486 <HAL_DMA_Abort_IT+0x3a2>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a37      	ldr	r2, [pc, #220]	; (8003498 <HAL_DMA_Abort_IT+0x3b4>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d063      	beq.n	8003486 <HAL_DMA_Abort_IT+0x3a2>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a36      	ldr	r2, [pc, #216]	; (800349c <HAL_DMA_Abort_IT+0x3b8>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d05e      	beq.n	8003486 <HAL_DMA_Abort_IT+0x3a2>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a34      	ldr	r2, [pc, #208]	; (80034a0 <HAL_DMA_Abort_IT+0x3bc>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d059      	beq.n	8003486 <HAL_DMA_Abort_IT+0x3a2>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a33      	ldr	r2, [pc, #204]	; (80034a4 <HAL_DMA_Abort_IT+0x3c0>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d054      	beq.n	8003486 <HAL_DMA_Abort_IT+0x3a2>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a31      	ldr	r2, [pc, #196]	; (80034a8 <HAL_DMA_Abort_IT+0x3c4>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d04f      	beq.n	8003486 <HAL_DMA_Abort_IT+0x3a2>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a30      	ldr	r2, [pc, #192]	; (80034ac <HAL_DMA_Abort_IT+0x3c8>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d04a      	beq.n	8003486 <HAL_DMA_Abort_IT+0x3a2>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a2e      	ldr	r2, [pc, #184]	; (80034b0 <HAL_DMA_Abort_IT+0x3cc>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d045      	beq.n	8003486 <HAL_DMA_Abort_IT+0x3a2>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a2d      	ldr	r2, [pc, #180]	; (80034b4 <HAL_DMA_Abort_IT+0x3d0>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d040      	beq.n	8003486 <HAL_DMA_Abort_IT+0x3a2>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a2b      	ldr	r2, [pc, #172]	; (80034b8 <HAL_DMA_Abort_IT+0x3d4>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d03b      	beq.n	8003486 <HAL_DMA_Abort_IT+0x3a2>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a2a      	ldr	r2, [pc, #168]	; (80034bc <HAL_DMA_Abort_IT+0x3d8>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d036      	beq.n	8003486 <HAL_DMA_Abort_IT+0x3a2>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a28      	ldr	r2, [pc, #160]	; (80034c0 <HAL_DMA_Abort_IT+0x3dc>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d031      	beq.n	8003486 <HAL_DMA_Abort_IT+0x3a2>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a27      	ldr	r2, [pc, #156]	; (80034c4 <HAL_DMA_Abort_IT+0x3e0>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d02c      	beq.n	8003486 <HAL_DMA_Abort_IT+0x3a2>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a25      	ldr	r2, [pc, #148]	; (80034c8 <HAL_DMA_Abort_IT+0x3e4>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d027      	beq.n	8003486 <HAL_DMA_Abort_IT+0x3a2>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a24      	ldr	r2, [pc, #144]	; (80034cc <HAL_DMA_Abort_IT+0x3e8>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d022      	beq.n	8003486 <HAL_DMA_Abort_IT+0x3a2>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a22      	ldr	r2, [pc, #136]	; (80034d0 <HAL_DMA_Abort_IT+0x3ec>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d01d      	beq.n	8003486 <HAL_DMA_Abort_IT+0x3a2>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a21      	ldr	r2, [pc, #132]	; (80034d4 <HAL_DMA_Abort_IT+0x3f0>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d018      	beq.n	8003486 <HAL_DMA_Abort_IT+0x3a2>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a1f      	ldr	r2, [pc, #124]	; (80034d8 <HAL_DMA_Abort_IT+0x3f4>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d013      	beq.n	8003486 <HAL_DMA_Abort_IT+0x3a2>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a1e      	ldr	r2, [pc, #120]	; (80034dc <HAL_DMA_Abort_IT+0x3f8>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d00e      	beq.n	8003486 <HAL_DMA_Abort_IT+0x3a2>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a1c      	ldr	r2, [pc, #112]	; (80034e0 <HAL_DMA_Abort_IT+0x3fc>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d009      	beq.n	8003486 <HAL_DMA_Abort_IT+0x3a2>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a1b      	ldr	r2, [pc, #108]	; (80034e4 <HAL_DMA_Abort_IT+0x400>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d004      	beq.n	8003486 <HAL_DMA_Abort_IT+0x3a2>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a19      	ldr	r2, [pc, #100]	; (80034e8 <HAL_DMA_Abort_IT+0x404>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d132      	bne.n	80034ec <HAL_DMA_Abort_IT+0x408>
 8003486:	2301      	movs	r3, #1
 8003488:	e031      	b.n	80034ee <HAL_DMA_Abort_IT+0x40a>
 800348a:	bf00      	nop
 800348c:	40020010 	.word	0x40020010
 8003490:	40020028 	.word	0x40020028
 8003494:	40020040 	.word	0x40020040
 8003498:	40020058 	.word	0x40020058
 800349c:	40020070 	.word	0x40020070
 80034a0:	40020088 	.word	0x40020088
 80034a4:	400200a0 	.word	0x400200a0
 80034a8:	400200b8 	.word	0x400200b8
 80034ac:	40020410 	.word	0x40020410
 80034b0:	40020428 	.word	0x40020428
 80034b4:	40020440 	.word	0x40020440
 80034b8:	40020458 	.word	0x40020458
 80034bc:	40020470 	.word	0x40020470
 80034c0:	40020488 	.word	0x40020488
 80034c4:	400204a0 	.word	0x400204a0
 80034c8:	400204b8 	.word	0x400204b8
 80034cc:	58025408 	.word	0x58025408
 80034d0:	5802541c 	.word	0x5802541c
 80034d4:	58025430 	.word	0x58025430
 80034d8:	58025444 	.word	0x58025444
 80034dc:	58025458 	.word	0x58025458
 80034e0:	5802546c 	.word	0x5802546c
 80034e4:	58025480 	.word	0x58025480
 80034e8:	58025494 	.word	0x58025494
 80034ec:	2300      	movs	r3, #0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d028      	beq.n	8003544 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003500:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003506:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800350c:	f003 031f 	and.w	r3, r3, #31
 8003510:	2201      	movs	r2, #1
 8003512:	409a      	lsls	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003520:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00c      	beq.n	8003544 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003534:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003538:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003542:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003558:	2b00      	cmp	r3, #0
 800355a:	d003      	beq.n	8003564 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3710      	adds	r7, #16
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop

08003570 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b08a      	sub	sp, #40	; 0x28
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003578:	2300      	movs	r3, #0
 800357a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800357c:	4b67      	ldr	r3, [pc, #412]	; (800371c <HAL_DMA_IRQHandler+0x1ac>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a67      	ldr	r2, [pc, #412]	; (8003720 <HAL_DMA_IRQHandler+0x1b0>)
 8003582:	fba2 2303 	umull	r2, r3, r2, r3
 8003586:	0a9b      	lsrs	r3, r3, #10
 8003588:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800358e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003594:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003596:	6a3b      	ldr	r3, [r7, #32]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a5f      	ldr	r2, [pc, #380]	; (8003724 <HAL_DMA_IRQHandler+0x1b4>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d04a      	beq.n	8003642 <HAL_DMA_IRQHandler+0xd2>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a5d      	ldr	r2, [pc, #372]	; (8003728 <HAL_DMA_IRQHandler+0x1b8>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d045      	beq.n	8003642 <HAL_DMA_IRQHandler+0xd2>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a5c      	ldr	r2, [pc, #368]	; (800372c <HAL_DMA_IRQHandler+0x1bc>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d040      	beq.n	8003642 <HAL_DMA_IRQHandler+0xd2>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a5a      	ldr	r2, [pc, #360]	; (8003730 <HAL_DMA_IRQHandler+0x1c0>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d03b      	beq.n	8003642 <HAL_DMA_IRQHandler+0xd2>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a59      	ldr	r2, [pc, #356]	; (8003734 <HAL_DMA_IRQHandler+0x1c4>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d036      	beq.n	8003642 <HAL_DMA_IRQHandler+0xd2>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a57      	ldr	r2, [pc, #348]	; (8003738 <HAL_DMA_IRQHandler+0x1c8>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d031      	beq.n	8003642 <HAL_DMA_IRQHandler+0xd2>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a56      	ldr	r2, [pc, #344]	; (800373c <HAL_DMA_IRQHandler+0x1cc>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d02c      	beq.n	8003642 <HAL_DMA_IRQHandler+0xd2>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a54      	ldr	r2, [pc, #336]	; (8003740 <HAL_DMA_IRQHandler+0x1d0>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d027      	beq.n	8003642 <HAL_DMA_IRQHandler+0xd2>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a53      	ldr	r2, [pc, #332]	; (8003744 <HAL_DMA_IRQHandler+0x1d4>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d022      	beq.n	8003642 <HAL_DMA_IRQHandler+0xd2>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a51      	ldr	r2, [pc, #324]	; (8003748 <HAL_DMA_IRQHandler+0x1d8>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d01d      	beq.n	8003642 <HAL_DMA_IRQHandler+0xd2>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a50      	ldr	r2, [pc, #320]	; (800374c <HAL_DMA_IRQHandler+0x1dc>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d018      	beq.n	8003642 <HAL_DMA_IRQHandler+0xd2>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a4e      	ldr	r2, [pc, #312]	; (8003750 <HAL_DMA_IRQHandler+0x1e0>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d013      	beq.n	8003642 <HAL_DMA_IRQHandler+0xd2>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a4d      	ldr	r2, [pc, #308]	; (8003754 <HAL_DMA_IRQHandler+0x1e4>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d00e      	beq.n	8003642 <HAL_DMA_IRQHandler+0xd2>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a4b      	ldr	r2, [pc, #300]	; (8003758 <HAL_DMA_IRQHandler+0x1e8>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d009      	beq.n	8003642 <HAL_DMA_IRQHandler+0xd2>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a4a      	ldr	r2, [pc, #296]	; (800375c <HAL_DMA_IRQHandler+0x1ec>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d004      	beq.n	8003642 <HAL_DMA_IRQHandler+0xd2>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a48      	ldr	r2, [pc, #288]	; (8003760 <HAL_DMA_IRQHandler+0x1f0>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d101      	bne.n	8003646 <HAL_DMA_IRQHandler+0xd6>
 8003642:	2301      	movs	r3, #1
 8003644:	e000      	b.n	8003648 <HAL_DMA_IRQHandler+0xd8>
 8003646:	2300      	movs	r3, #0
 8003648:	2b00      	cmp	r3, #0
 800364a:	f000 842b 	beq.w	8003ea4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003652:	f003 031f 	and.w	r3, r3, #31
 8003656:	2208      	movs	r2, #8
 8003658:	409a      	lsls	r2, r3
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	4013      	ands	r3, r2
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 80a2 	beq.w	80037a8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a2e      	ldr	r2, [pc, #184]	; (8003724 <HAL_DMA_IRQHandler+0x1b4>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d04a      	beq.n	8003704 <HAL_DMA_IRQHandler+0x194>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a2d      	ldr	r2, [pc, #180]	; (8003728 <HAL_DMA_IRQHandler+0x1b8>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d045      	beq.n	8003704 <HAL_DMA_IRQHandler+0x194>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a2b      	ldr	r2, [pc, #172]	; (800372c <HAL_DMA_IRQHandler+0x1bc>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d040      	beq.n	8003704 <HAL_DMA_IRQHandler+0x194>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a2a      	ldr	r2, [pc, #168]	; (8003730 <HAL_DMA_IRQHandler+0x1c0>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d03b      	beq.n	8003704 <HAL_DMA_IRQHandler+0x194>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a28      	ldr	r2, [pc, #160]	; (8003734 <HAL_DMA_IRQHandler+0x1c4>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d036      	beq.n	8003704 <HAL_DMA_IRQHandler+0x194>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a27      	ldr	r2, [pc, #156]	; (8003738 <HAL_DMA_IRQHandler+0x1c8>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d031      	beq.n	8003704 <HAL_DMA_IRQHandler+0x194>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a25      	ldr	r2, [pc, #148]	; (800373c <HAL_DMA_IRQHandler+0x1cc>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d02c      	beq.n	8003704 <HAL_DMA_IRQHandler+0x194>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a24      	ldr	r2, [pc, #144]	; (8003740 <HAL_DMA_IRQHandler+0x1d0>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d027      	beq.n	8003704 <HAL_DMA_IRQHandler+0x194>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a22      	ldr	r2, [pc, #136]	; (8003744 <HAL_DMA_IRQHandler+0x1d4>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d022      	beq.n	8003704 <HAL_DMA_IRQHandler+0x194>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a21      	ldr	r2, [pc, #132]	; (8003748 <HAL_DMA_IRQHandler+0x1d8>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d01d      	beq.n	8003704 <HAL_DMA_IRQHandler+0x194>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a1f      	ldr	r2, [pc, #124]	; (800374c <HAL_DMA_IRQHandler+0x1dc>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d018      	beq.n	8003704 <HAL_DMA_IRQHandler+0x194>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a1e      	ldr	r2, [pc, #120]	; (8003750 <HAL_DMA_IRQHandler+0x1e0>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d013      	beq.n	8003704 <HAL_DMA_IRQHandler+0x194>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a1c      	ldr	r2, [pc, #112]	; (8003754 <HAL_DMA_IRQHandler+0x1e4>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d00e      	beq.n	8003704 <HAL_DMA_IRQHandler+0x194>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a1b      	ldr	r2, [pc, #108]	; (8003758 <HAL_DMA_IRQHandler+0x1e8>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d009      	beq.n	8003704 <HAL_DMA_IRQHandler+0x194>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a19      	ldr	r2, [pc, #100]	; (800375c <HAL_DMA_IRQHandler+0x1ec>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d004      	beq.n	8003704 <HAL_DMA_IRQHandler+0x194>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a18      	ldr	r2, [pc, #96]	; (8003760 <HAL_DMA_IRQHandler+0x1f0>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d12f      	bne.n	8003764 <HAL_DMA_IRQHandler+0x1f4>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0304 	and.w	r3, r3, #4
 800370e:	2b00      	cmp	r3, #0
 8003710:	bf14      	ite	ne
 8003712:	2301      	movne	r3, #1
 8003714:	2300      	moveq	r3, #0
 8003716:	b2db      	uxtb	r3, r3
 8003718:	e02e      	b.n	8003778 <HAL_DMA_IRQHandler+0x208>
 800371a:	bf00      	nop
 800371c:	24000000 	.word	0x24000000
 8003720:	1b4e81b5 	.word	0x1b4e81b5
 8003724:	40020010 	.word	0x40020010
 8003728:	40020028 	.word	0x40020028
 800372c:	40020040 	.word	0x40020040
 8003730:	40020058 	.word	0x40020058
 8003734:	40020070 	.word	0x40020070
 8003738:	40020088 	.word	0x40020088
 800373c:	400200a0 	.word	0x400200a0
 8003740:	400200b8 	.word	0x400200b8
 8003744:	40020410 	.word	0x40020410
 8003748:	40020428 	.word	0x40020428
 800374c:	40020440 	.word	0x40020440
 8003750:	40020458 	.word	0x40020458
 8003754:	40020470 	.word	0x40020470
 8003758:	40020488 	.word	0x40020488
 800375c:	400204a0 	.word	0x400204a0
 8003760:	400204b8 	.word	0x400204b8
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0308 	and.w	r3, r3, #8
 800376e:	2b00      	cmp	r3, #0
 8003770:	bf14      	ite	ne
 8003772:	2301      	movne	r3, #1
 8003774:	2300      	moveq	r3, #0
 8003776:	b2db      	uxtb	r3, r3
 8003778:	2b00      	cmp	r3, #0
 800377a:	d015      	beq.n	80037a8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f022 0204 	bic.w	r2, r2, #4
 800378a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003790:	f003 031f 	and.w	r3, r3, #31
 8003794:	2208      	movs	r2, #8
 8003796:	409a      	lsls	r2, r3
 8003798:	6a3b      	ldr	r3, [r7, #32]
 800379a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a0:	f043 0201 	orr.w	r2, r3, #1
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ac:	f003 031f 	and.w	r3, r3, #31
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	fa22 f303 	lsr.w	r3, r2, r3
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d06e      	beq.n	800389c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a69      	ldr	r2, [pc, #420]	; (8003968 <HAL_DMA_IRQHandler+0x3f8>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d04a      	beq.n	800385e <HAL_DMA_IRQHandler+0x2ee>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a67      	ldr	r2, [pc, #412]	; (800396c <HAL_DMA_IRQHandler+0x3fc>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d045      	beq.n	800385e <HAL_DMA_IRQHandler+0x2ee>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a66      	ldr	r2, [pc, #408]	; (8003970 <HAL_DMA_IRQHandler+0x400>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d040      	beq.n	800385e <HAL_DMA_IRQHandler+0x2ee>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a64      	ldr	r2, [pc, #400]	; (8003974 <HAL_DMA_IRQHandler+0x404>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d03b      	beq.n	800385e <HAL_DMA_IRQHandler+0x2ee>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a63      	ldr	r2, [pc, #396]	; (8003978 <HAL_DMA_IRQHandler+0x408>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d036      	beq.n	800385e <HAL_DMA_IRQHandler+0x2ee>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a61      	ldr	r2, [pc, #388]	; (800397c <HAL_DMA_IRQHandler+0x40c>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d031      	beq.n	800385e <HAL_DMA_IRQHandler+0x2ee>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a60      	ldr	r2, [pc, #384]	; (8003980 <HAL_DMA_IRQHandler+0x410>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d02c      	beq.n	800385e <HAL_DMA_IRQHandler+0x2ee>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a5e      	ldr	r2, [pc, #376]	; (8003984 <HAL_DMA_IRQHandler+0x414>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d027      	beq.n	800385e <HAL_DMA_IRQHandler+0x2ee>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a5d      	ldr	r2, [pc, #372]	; (8003988 <HAL_DMA_IRQHandler+0x418>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d022      	beq.n	800385e <HAL_DMA_IRQHandler+0x2ee>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a5b      	ldr	r2, [pc, #364]	; (800398c <HAL_DMA_IRQHandler+0x41c>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d01d      	beq.n	800385e <HAL_DMA_IRQHandler+0x2ee>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a5a      	ldr	r2, [pc, #360]	; (8003990 <HAL_DMA_IRQHandler+0x420>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d018      	beq.n	800385e <HAL_DMA_IRQHandler+0x2ee>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a58      	ldr	r2, [pc, #352]	; (8003994 <HAL_DMA_IRQHandler+0x424>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d013      	beq.n	800385e <HAL_DMA_IRQHandler+0x2ee>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a57      	ldr	r2, [pc, #348]	; (8003998 <HAL_DMA_IRQHandler+0x428>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d00e      	beq.n	800385e <HAL_DMA_IRQHandler+0x2ee>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a55      	ldr	r2, [pc, #340]	; (800399c <HAL_DMA_IRQHandler+0x42c>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d009      	beq.n	800385e <HAL_DMA_IRQHandler+0x2ee>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a54      	ldr	r2, [pc, #336]	; (80039a0 <HAL_DMA_IRQHandler+0x430>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d004      	beq.n	800385e <HAL_DMA_IRQHandler+0x2ee>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a52      	ldr	r2, [pc, #328]	; (80039a4 <HAL_DMA_IRQHandler+0x434>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d10a      	bne.n	8003874 <HAL_DMA_IRQHandler+0x304>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	695b      	ldr	r3, [r3, #20]
 8003864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003868:	2b00      	cmp	r3, #0
 800386a:	bf14      	ite	ne
 800386c:	2301      	movne	r3, #1
 800386e:	2300      	moveq	r3, #0
 8003870:	b2db      	uxtb	r3, r3
 8003872:	e003      	b.n	800387c <HAL_DMA_IRQHandler+0x30c>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2300      	movs	r3, #0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00d      	beq.n	800389c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003884:	f003 031f 	and.w	r3, r3, #31
 8003888:	2201      	movs	r2, #1
 800388a:	409a      	lsls	r2, r3
 800388c:	6a3b      	ldr	r3, [r7, #32]
 800388e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003894:	f043 0202 	orr.w	r2, r3, #2
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a0:	f003 031f 	and.w	r3, r3, #31
 80038a4:	2204      	movs	r2, #4
 80038a6:	409a      	lsls	r2, r3
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	4013      	ands	r3, r2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f000 808f 	beq.w	80039d0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a2c      	ldr	r2, [pc, #176]	; (8003968 <HAL_DMA_IRQHandler+0x3f8>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d04a      	beq.n	8003952 <HAL_DMA_IRQHandler+0x3e2>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a2a      	ldr	r2, [pc, #168]	; (800396c <HAL_DMA_IRQHandler+0x3fc>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d045      	beq.n	8003952 <HAL_DMA_IRQHandler+0x3e2>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a29      	ldr	r2, [pc, #164]	; (8003970 <HAL_DMA_IRQHandler+0x400>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d040      	beq.n	8003952 <HAL_DMA_IRQHandler+0x3e2>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a27      	ldr	r2, [pc, #156]	; (8003974 <HAL_DMA_IRQHandler+0x404>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d03b      	beq.n	8003952 <HAL_DMA_IRQHandler+0x3e2>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a26      	ldr	r2, [pc, #152]	; (8003978 <HAL_DMA_IRQHandler+0x408>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d036      	beq.n	8003952 <HAL_DMA_IRQHandler+0x3e2>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a24      	ldr	r2, [pc, #144]	; (800397c <HAL_DMA_IRQHandler+0x40c>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d031      	beq.n	8003952 <HAL_DMA_IRQHandler+0x3e2>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a23      	ldr	r2, [pc, #140]	; (8003980 <HAL_DMA_IRQHandler+0x410>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d02c      	beq.n	8003952 <HAL_DMA_IRQHandler+0x3e2>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a21      	ldr	r2, [pc, #132]	; (8003984 <HAL_DMA_IRQHandler+0x414>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d027      	beq.n	8003952 <HAL_DMA_IRQHandler+0x3e2>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a20      	ldr	r2, [pc, #128]	; (8003988 <HAL_DMA_IRQHandler+0x418>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d022      	beq.n	8003952 <HAL_DMA_IRQHandler+0x3e2>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a1e      	ldr	r2, [pc, #120]	; (800398c <HAL_DMA_IRQHandler+0x41c>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d01d      	beq.n	8003952 <HAL_DMA_IRQHandler+0x3e2>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a1d      	ldr	r2, [pc, #116]	; (8003990 <HAL_DMA_IRQHandler+0x420>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d018      	beq.n	8003952 <HAL_DMA_IRQHandler+0x3e2>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a1b      	ldr	r2, [pc, #108]	; (8003994 <HAL_DMA_IRQHandler+0x424>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d013      	beq.n	8003952 <HAL_DMA_IRQHandler+0x3e2>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a1a      	ldr	r2, [pc, #104]	; (8003998 <HAL_DMA_IRQHandler+0x428>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d00e      	beq.n	8003952 <HAL_DMA_IRQHandler+0x3e2>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a18      	ldr	r2, [pc, #96]	; (800399c <HAL_DMA_IRQHandler+0x42c>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d009      	beq.n	8003952 <HAL_DMA_IRQHandler+0x3e2>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a17      	ldr	r2, [pc, #92]	; (80039a0 <HAL_DMA_IRQHandler+0x430>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d004      	beq.n	8003952 <HAL_DMA_IRQHandler+0x3e2>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a15      	ldr	r2, [pc, #84]	; (80039a4 <HAL_DMA_IRQHandler+0x434>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d12a      	bne.n	80039a8 <HAL_DMA_IRQHandler+0x438>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b00      	cmp	r3, #0
 800395e:	bf14      	ite	ne
 8003960:	2301      	movne	r3, #1
 8003962:	2300      	moveq	r3, #0
 8003964:	b2db      	uxtb	r3, r3
 8003966:	e023      	b.n	80039b0 <HAL_DMA_IRQHandler+0x440>
 8003968:	40020010 	.word	0x40020010
 800396c:	40020028 	.word	0x40020028
 8003970:	40020040 	.word	0x40020040
 8003974:	40020058 	.word	0x40020058
 8003978:	40020070 	.word	0x40020070
 800397c:	40020088 	.word	0x40020088
 8003980:	400200a0 	.word	0x400200a0
 8003984:	400200b8 	.word	0x400200b8
 8003988:	40020410 	.word	0x40020410
 800398c:	40020428 	.word	0x40020428
 8003990:	40020440 	.word	0x40020440
 8003994:	40020458 	.word	0x40020458
 8003998:	40020470 	.word	0x40020470
 800399c:	40020488 	.word	0x40020488
 80039a0:	400204a0 	.word	0x400204a0
 80039a4:	400204b8 	.word	0x400204b8
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2300      	movs	r3, #0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00d      	beq.n	80039d0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b8:	f003 031f 	and.w	r3, r3, #31
 80039bc:	2204      	movs	r2, #4
 80039be:	409a      	lsls	r2, r3
 80039c0:	6a3b      	ldr	r3, [r7, #32]
 80039c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c8:	f043 0204 	orr.w	r2, r3, #4
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d4:	f003 031f 	and.w	r3, r3, #31
 80039d8:	2210      	movs	r2, #16
 80039da:	409a      	lsls	r2, r3
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	4013      	ands	r3, r2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f000 80a6 	beq.w	8003b32 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a85      	ldr	r2, [pc, #532]	; (8003c00 <HAL_DMA_IRQHandler+0x690>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d04a      	beq.n	8003a86 <HAL_DMA_IRQHandler+0x516>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a83      	ldr	r2, [pc, #524]	; (8003c04 <HAL_DMA_IRQHandler+0x694>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d045      	beq.n	8003a86 <HAL_DMA_IRQHandler+0x516>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a82      	ldr	r2, [pc, #520]	; (8003c08 <HAL_DMA_IRQHandler+0x698>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d040      	beq.n	8003a86 <HAL_DMA_IRQHandler+0x516>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a80      	ldr	r2, [pc, #512]	; (8003c0c <HAL_DMA_IRQHandler+0x69c>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d03b      	beq.n	8003a86 <HAL_DMA_IRQHandler+0x516>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a7f      	ldr	r2, [pc, #508]	; (8003c10 <HAL_DMA_IRQHandler+0x6a0>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d036      	beq.n	8003a86 <HAL_DMA_IRQHandler+0x516>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a7d      	ldr	r2, [pc, #500]	; (8003c14 <HAL_DMA_IRQHandler+0x6a4>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d031      	beq.n	8003a86 <HAL_DMA_IRQHandler+0x516>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a7c      	ldr	r2, [pc, #496]	; (8003c18 <HAL_DMA_IRQHandler+0x6a8>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d02c      	beq.n	8003a86 <HAL_DMA_IRQHandler+0x516>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a7a      	ldr	r2, [pc, #488]	; (8003c1c <HAL_DMA_IRQHandler+0x6ac>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d027      	beq.n	8003a86 <HAL_DMA_IRQHandler+0x516>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a79      	ldr	r2, [pc, #484]	; (8003c20 <HAL_DMA_IRQHandler+0x6b0>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d022      	beq.n	8003a86 <HAL_DMA_IRQHandler+0x516>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a77      	ldr	r2, [pc, #476]	; (8003c24 <HAL_DMA_IRQHandler+0x6b4>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d01d      	beq.n	8003a86 <HAL_DMA_IRQHandler+0x516>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a76      	ldr	r2, [pc, #472]	; (8003c28 <HAL_DMA_IRQHandler+0x6b8>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d018      	beq.n	8003a86 <HAL_DMA_IRQHandler+0x516>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a74      	ldr	r2, [pc, #464]	; (8003c2c <HAL_DMA_IRQHandler+0x6bc>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d013      	beq.n	8003a86 <HAL_DMA_IRQHandler+0x516>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a73      	ldr	r2, [pc, #460]	; (8003c30 <HAL_DMA_IRQHandler+0x6c0>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d00e      	beq.n	8003a86 <HAL_DMA_IRQHandler+0x516>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a71      	ldr	r2, [pc, #452]	; (8003c34 <HAL_DMA_IRQHandler+0x6c4>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d009      	beq.n	8003a86 <HAL_DMA_IRQHandler+0x516>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a70      	ldr	r2, [pc, #448]	; (8003c38 <HAL_DMA_IRQHandler+0x6c8>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d004      	beq.n	8003a86 <HAL_DMA_IRQHandler+0x516>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a6e      	ldr	r2, [pc, #440]	; (8003c3c <HAL_DMA_IRQHandler+0x6cc>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d10a      	bne.n	8003a9c <HAL_DMA_IRQHandler+0x52c>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0308 	and.w	r3, r3, #8
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	bf14      	ite	ne
 8003a94:	2301      	movne	r3, #1
 8003a96:	2300      	moveq	r3, #0
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	e009      	b.n	8003ab0 <HAL_DMA_IRQHandler+0x540>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0304 	and.w	r3, r3, #4
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	bf14      	ite	ne
 8003aaa:	2301      	movne	r3, #1
 8003aac:	2300      	moveq	r3, #0
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d03e      	beq.n	8003b32 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab8:	f003 031f 	and.w	r3, r3, #31
 8003abc:	2210      	movs	r2, #16
 8003abe:	409a      	lsls	r2, r3
 8003ac0:	6a3b      	ldr	r3, [r7, #32]
 8003ac2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d018      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d108      	bne.n	8003af2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d024      	beq.n	8003b32 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	4798      	blx	r3
 8003af0:	e01f      	b.n	8003b32 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d01b      	beq.n	8003b32 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	4798      	blx	r3
 8003b02:	e016      	b.n	8003b32 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d107      	bne.n	8003b22 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 0208 	bic.w	r2, r2, #8
 8003b20:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d003      	beq.n	8003b32 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b36:	f003 031f 	and.w	r3, r3, #31
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	409a      	lsls	r2, r3
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	4013      	ands	r3, r2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	f000 8110 	beq.w	8003d68 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a2c      	ldr	r2, [pc, #176]	; (8003c00 <HAL_DMA_IRQHandler+0x690>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d04a      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x678>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a2b      	ldr	r2, [pc, #172]	; (8003c04 <HAL_DMA_IRQHandler+0x694>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d045      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x678>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a29      	ldr	r2, [pc, #164]	; (8003c08 <HAL_DMA_IRQHandler+0x698>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d040      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x678>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a28      	ldr	r2, [pc, #160]	; (8003c0c <HAL_DMA_IRQHandler+0x69c>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d03b      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x678>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a26      	ldr	r2, [pc, #152]	; (8003c10 <HAL_DMA_IRQHandler+0x6a0>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d036      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x678>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a25      	ldr	r2, [pc, #148]	; (8003c14 <HAL_DMA_IRQHandler+0x6a4>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d031      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x678>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a23      	ldr	r2, [pc, #140]	; (8003c18 <HAL_DMA_IRQHandler+0x6a8>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d02c      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x678>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a22      	ldr	r2, [pc, #136]	; (8003c1c <HAL_DMA_IRQHandler+0x6ac>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d027      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x678>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a20      	ldr	r2, [pc, #128]	; (8003c20 <HAL_DMA_IRQHandler+0x6b0>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d022      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x678>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a1f      	ldr	r2, [pc, #124]	; (8003c24 <HAL_DMA_IRQHandler+0x6b4>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d01d      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x678>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a1d      	ldr	r2, [pc, #116]	; (8003c28 <HAL_DMA_IRQHandler+0x6b8>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d018      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x678>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a1c      	ldr	r2, [pc, #112]	; (8003c2c <HAL_DMA_IRQHandler+0x6bc>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d013      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x678>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a1a      	ldr	r2, [pc, #104]	; (8003c30 <HAL_DMA_IRQHandler+0x6c0>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d00e      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x678>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a19      	ldr	r2, [pc, #100]	; (8003c34 <HAL_DMA_IRQHandler+0x6c4>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d009      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x678>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a17      	ldr	r2, [pc, #92]	; (8003c38 <HAL_DMA_IRQHandler+0x6c8>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d004      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x678>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a16      	ldr	r2, [pc, #88]	; (8003c3c <HAL_DMA_IRQHandler+0x6cc>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d12b      	bne.n	8003c40 <HAL_DMA_IRQHandler+0x6d0>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0310 	and.w	r3, r3, #16
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	bf14      	ite	ne
 8003bf6:	2301      	movne	r3, #1
 8003bf8:	2300      	moveq	r3, #0
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	e02a      	b.n	8003c54 <HAL_DMA_IRQHandler+0x6e4>
 8003bfe:	bf00      	nop
 8003c00:	40020010 	.word	0x40020010
 8003c04:	40020028 	.word	0x40020028
 8003c08:	40020040 	.word	0x40020040
 8003c0c:	40020058 	.word	0x40020058
 8003c10:	40020070 	.word	0x40020070
 8003c14:	40020088 	.word	0x40020088
 8003c18:	400200a0 	.word	0x400200a0
 8003c1c:	400200b8 	.word	0x400200b8
 8003c20:	40020410 	.word	0x40020410
 8003c24:	40020428 	.word	0x40020428
 8003c28:	40020440 	.word	0x40020440
 8003c2c:	40020458 	.word	0x40020458
 8003c30:	40020470 	.word	0x40020470
 8003c34:	40020488 	.word	0x40020488
 8003c38:	400204a0 	.word	0x400204a0
 8003c3c:	400204b8 	.word	0x400204b8
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	bf14      	ite	ne
 8003c4e:	2301      	movne	r3, #1
 8003c50:	2300      	moveq	r3, #0
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f000 8087 	beq.w	8003d68 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c5e:	f003 031f 	and.w	r3, r3, #31
 8003c62:	2220      	movs	r2, #32
 8003c64:	409a      	lsls	r2, r3
 8003c66:	6a3b      	ldr	r3, [r7, #32]
 8003c68:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b04      	cmp	r3, #4
 8003c74:	d139      	bne.n	8003cea <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f022 0216 	bic.w	r2, r2, #22
 8003c84:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	695a      	ldr	r2, [r3, #20]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c94:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d103      	bne.n	8003ca6 <HAL_DMA_IRQHandler+0x736>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d007      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f022 0208 	bic.w	r2, r2, #8
 8003cb4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cba:	f003 031f 	and.w	r3, r3, #31
 8003cbe:	223f      	movs	r2, #63	; 0x3f
 8003cc0:	409a      	lsls	r2, r3
 8003cc2:	6a3b      	ldr	r3, [r7, #32]
 8003cc4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f000 834a 	beq.w	8004374 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	4798      	blx	r3
          }
          return;
 8003ce8:	e344      	b.n	8004374 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d018      	beq.n	8003d2a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d108      	bne.n	8003d18 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d02c      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	4798      	blx	r3
 8003d16:	e027      	b.n	8003d68 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d023      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	4798      	blx	r3
 8003d28:	e01e      	b.n	8003d68 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d10f      	bne.n	8003d58 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 0210 	bic.w	r2, r2, #16
 8003d46:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d003      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f000 8306 	beq.w	800437e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	f000 8088 	beq.w	8003e90 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2204      	movs	r2, #4
 8003d84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a7a      	ldr	r2, [pc, #488]	; (8003f78 <HAL_DMA_IRQHandler+0xa08>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d04a      	beq.n	8003e28 <HAL_DMA_IRQHandler+0x8b8>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a79      	ldr	r2, [pc, #484]	; (8003f7c <HAL_DMA_IRQHandler+0xa0c>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d045      	beq.n	8003e28 <HAL_DMA_IRQHandler+0x8b8>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a77      	ldr	r2, [pc, #476]	; (8003f80 <HAL_DMA_IRQHandler+0xa10>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d040      	beq.n	8003e28 <HAL_DMA_IRQHandler+0x8b8>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a76      	ldr	r2, [pc, #472]	; (8003f84 <HAL_DMA_IRQHandler+0xa14>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d03b      	beq.n	8003e28 <HAL_DMA_IRQHandler+0x8b8>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a74      	ldr	r2, [pc, #464]	; (8003f88 <HAL_DMA_IRQHandler+0xa18>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d036      	beq.n	8003e28 <HAL_DMA_IRQHandler+0x8b8>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a73      	ldr	r2, [pc, #460]	; (8003f8c <HAL_DMA_IRQHandler+0xa1c>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d031      	beq.n	8003e28 <HAL_DMA_IRQHandler+0x8b8>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a71      	ldr	r2, [pc, #452]	; (8003f90 <HAL_DMA_IRQHandler+0xa20>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d02c      	beq.n	8003e28 <HAL_DMA_IRQHandler+0x8b8>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a70      	ldr	r2, [pc, #448]	; (8003f94 <HAL_DMA_IRQHandler+0xa24>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d027      	beq.n	8003e28 <HAL_DMA_IRQHandler+0x8b8>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a6e      	ldr	r2, [pc, #440]	; (8003f98 <HAL_DMA_IRQHandler+0xa28>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d022      	beq.n	8003e28 <HAL_DMA_IRQHandler+0x8b8>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a6d      	ldr	r2, [pc, #436]	; (8003f9c <HAL_DMA_IRQHandler+0xa2c>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d01d      	beq.n	8003e28 <HAL_DMA_IRQHandler+0x8b8>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a6b      	ldr	r2, [pc, #428]	; (8003fa0 <HAL_DMA_IRQHandler+0xa30>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d018      	beq.n	8003e28 <HAL_DMA_IRQHandler+0x8b8>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a6a      	ldr	r2, [pc, #424]	; (8003fa4 <HAL_DMA_IRQHandler+0xa34>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d013      	beq.n	8003e28 <HAL_DMA_IRQHandler+0x8b8>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a68      	ldr	r2, [pc, #416]	; (8003fa8 <HAL_DMA_IRQHandler+0xa38>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d00e      	beq.n	8003e28 <HAL_DMA_IRQHandler+0x8b8>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a67      	ldr	r2, [pc, #412]	; (8003fac <HAL_DMA_IRQHandler+0xa3c>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d009      	beq.n	8003e28 <HAL_DMA_IRQHandler+0x8b8>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a65      	ldr	r2, [pc, #404]	; (8003fb0 <HAL_DMA_IRQHandler+0xa40>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d004      	beq.n	8003e28 <HAL_DMA_IRQHandler+0x8b8>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a64      	ldr	r2, [pc, #400]	; (8003fb4 <HAL_DMA_IRQHandler+0xa44>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d108      	bne.n	8003e3a <HAL_DMA_IRQHandler+0x8ca>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f022 0201 	bic.w	r2, r2, #1
 8003e36:	601a      	str	r2, [r3, #0]
 8003e38:	e007      	b.n	8003e4a <HAL_DMA_IRQHandler+0x8da>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f022 0201 	bic.w	r2, r2, #1
 8003e48:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	60fb      	str	r3, [r7, #12]
 8003e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d307      	bcc.n	8003e66 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0301 	and.w	r3, r3, #1
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1f2      	bne.n	8003e4a <HAL_DMA_IRQHandler+0x8da>
 8003e64:	e000      	b.n	8003e68 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003e66:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d004      	beq.n	8003e80 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2203      	movs	r2, #3
 8003e7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003e7e:	e003      	b.n	8003e88 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f000 8272 	beq.w	800437e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	4798      	blx	r3
 8003ea2:	e26c      	b.n	800437e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a43      	ldr	r2, [pc, #268]	; (8003fb8 <HAL_DMA_IRQHandler+0xa48>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d022      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0x984>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a42      	ldr	r2, [pc, #264]	; (8003fbc <HAL_DMA_IRQHandler+0xa4c>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d01d      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0x984>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a40      	ldr	r2, [pc, #256]	; (8003fc0 <HAL_DMA_IRQHandler+0xa50>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d018      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0x984>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a3f      	ldr	r2, [pc, #252]	; (8003fc4 <HAL_DMA_IRQHandler+0xa54>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d013      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0x984>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a3d      	ldr	r2, [pc, #244]	; (8003fc8 <HAL_DMA_IRQHandler+0xa58>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d00e      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0x984>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a3c      	ldr	r2, [pc, #240]	; (8003fcc <HAL_DMA_IRQHandler+0xa5c>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d009      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0x984>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a3a      	ldr	r2, [pc, #232]	; (8003fd0 <HAL_DMA_IRQHandler+0xa60>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d004      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0x984>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a39      	ldr	r2, [pc, #228]	; (8003fd4 <HAL_DMA_IRQHandler+0xa64>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d101      	bne.n	8003ef8 <HAL_DMA_IRQHandler+0x988>
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e000      	b.n	8003efa <HAL_DMA_IRQHandler+0x98a>
 8003ef8:	2300      	movs	r3, #0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f000 823f 	beq.w	800437e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f0c:	f003 031f 	and.w	r3, r3, #31
 8003f10:	2204      	movs	r2, #4
 8003f12:	409a      	lsls	r2, r3
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	4013      	ands	r3, r2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f000 80cd 	beq.w	80040b8 <HAL_DMA_IRQHandler+0xb48>
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	f003 0304 	and.w	r3, r3, #4
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f000 80c7 	beq.w	80040b8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f2e:	f003 031f 	and.w	r3, r3, #31
 8003f32:	2204      	movs	r2, #4
 8003f34:	409a      	lsls	r2, r3
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d049      	beq.n	8003fd8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d109      	bne.n	8003f62 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f000 8210 	beq.w	8004378 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f60:	e20a      	b.n	8004378 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	f000 8206 	beq.w	8004378 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f74:	e200      	b.n	8004378 <HAL_DMA_IRQHandler+0xe08>
 8003f76:	bf00      	nop
 8003f78:	40020010 	.word	0x40020010
 8003f7c:	40020028 	.word	0x40020028
 8003f80:	40020040 	.word	0x40020040
 8003f84:	40020058 	.word	0x40020058
 8003f88:	40020070 	.word	0x40020070
 8003f8c:	40020088 	.word	0x40020088
 8003f90:	400200a0 	.word	0x400200a0
 8003f94:	400200b8 	.word	0x400200b8
 8003f98:	40020410 	.word	0x40020410
 8003f9c:	40020428 	.word	0x40020428
 8003fa0:	40020440 	.word	0x40020440
 8003fa4:	40020458 	.word	0x40020458
 8003fa8:	40020470 	.word	0x40020470
 8003fac:	40020488 	.word	0x40020488
 8003fb0:	400204a0 	.word	0x400204a0
 8003fb4:	400204b8 	.word	0x400204b8
 8003fb8:	58025408 	.word	0x58025408
 8003fbc:	5802541c 	.word	0x5802541c
 8003fc0:	58025430 	.word	0x58025430
 8003fc4:	58025444 	.word	0x58025444
 8003fc8:	58025458 	.word	0x58025458
 8003fcc:	5802546c 	.word	0x5802546c
 8003fd0:	58025480 	.word	0x58025480
 8003fd4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	f003 0320 	and.w	r3, r3, #32
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d160      	bne.n	80040a4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a7f      	ldr	r2, [pc, #508]	; (80041e4 <HAL_DMA_IRQHandler+0xc74>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d04a      	beq.n	8004082 <HAL_DMA_IRQHandler+0xb12>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a7d      	ldr	r2, [pc, #500]	; (80041e8 <HAL_DMA_IRQHandler+0xc78>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d045      	beq.n	8004082 <HAL_DMA_IRQHandler+0xb12>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a7c      	ldr	r2, [pc, #496]	; (80041ec <HAL_DMA_IRQHandler+0xc7c>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d040      	beq.n	8004082 <HAL_DMA_IRQHandler+0xb12>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a7a      	ldr	r2, [pc, #488]	; (80041f0 <HAL_DMA_IRQHandler+0xc80>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d03b      	beq.n	8004082 <HAL_DMA_IRQHandler+0xb12>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a79      	ldr	r2, [pc, #484]	; (80041f4 <HAL_DMA_IRQHandler+0xc84>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d036      	beq.n	8004082 <HAL_DMA_IRQHandler+0xb12>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a77      	ldr	r2, [pc, #476]	; (80041f8 <HAL_DMA_IRQHandler+0xc88>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d031      	beq.n	8004082 <HAL_DMA_IRQHandler+0xb12>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a76      	ldr	r2, [pc, #472]	; (80041fc <HAL_DMA_IRQHandler+0xc8c>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d02c      	beq.n	8004082 <HAL_DMA_IRQHandler+0xb12>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a74      	ldr	r2, [pc, #464]	; (8004200 <HAL_DMA_IRQHandler+0xc90>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d027      	beq.n	8004082 <HAL_DMA_IRQHandler+0xb12>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a73      	ldr	r2, [pc, #460]	; (8004204 <HAL_DMA_IRQHandler+0xc94>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d022      	beq.n	8004082 <HAL_DMA_IRQHandler+0xb12>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a71      	ldr	r2, [pc, #452]	; (8004208 <HAL_DMA_IRQHandler+0xc98>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d01d      	beq.n	8004082 <HAL_DMA_IRQHandler+0xb12>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a70      	ldr	r2, [pc, #448]	; (800420c <HAL_DMA_IRQHandler+0xc9c>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d018      	beq.n	8004082 <HAL_DMA_IRQHandler+0xb12>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a6e      	ldr	r2, [pc, #440]	; (8004210 <HAL_DMA_IRQHandler+0xca0>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d013      	beq.n	8004082 <HAL_DMA_IRQHandler+0xb12>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a6d      	ldr	r2, [pc, #436]	; (8004214 <HAL_DMA_IRQHandler+0xca4>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d00e      	beq.n	8004082 <HAL_DMA_IRQHandler+0xb12>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a6b      	ldr	r2, [pc, #428]	; (8004218 <HAL_DMA_IRQHandler+0xca8>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d009      	beq.n	8004082 <HAL_DMA_IRQHandler+0xb12>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a6a      	ldr	r2, [pc, #424]	; (800421c <HAL_DMA_IRQHandler+0xcac>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d004      	beq.n	8004082 <HAL_DMA_IRQHandler+0xb12>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a68      	ldr	r2, [pc, #416]	; (8004220 <HAL_DMA_IRQHandler+0xcb0>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d108      	bne.n	8004094 <HAL_DMA_IRQHandler+0xb24>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f022 0208 	bic.w	r2, r2, #8
 8004090:	601a      	str	r2, [r3, #0]
 8004092:	e007      	b.n	80040a4 <HAL_DMA_IRQHandler+0xb34>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f022 0204 	bic.w	r2, r2, #4
 80040a2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f000 8165 	beq.w	8004378 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040b6:	e15f      	b.n	8004378 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040bc:	f003 031f 	and.w	r3, r3, #31
 80040c0:	2202      	movs	r2, #2
 80040c2:	409a      	lsls	r2, r3
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	4013      	ands	r3, r2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	f000 80c5 	beq.w	8004258 <HAL_DMA_IRQHandler+0xce8>
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	f003 0302 	and.w	r3, r3, #2
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f000 80bf 	beq.w	8004258 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040de:	f003 031f 	and.w	r3, r3, #31
 80040e2:	2202      	movs	r2, #2
 80040e4:	409a      	lsls	r2, r3
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d018      	beq.n	8004126 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d109      	bne.n	8004112 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004102:	2b00      	cmp	r3, #0
 8004104:	f000 813a 	beq.w	800437c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004110:	e134      	b.n	800437c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004116:	2b00      	cmp	r3, #0
 8004118:	f000 8130 	beq.w	800437c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004124:	e12a      	b.n	800437c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	f003 0320 	and.w	r3, r3, #32
 800412c:	2b00      	cmp	r3, #0
 800412e:	f040 8089 	bne.w	8004244 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a2b      	ldr	r2, [pc, #172]	; (80041e4 <HAL_DMA_IRQHandler+0xc74>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d04a      	beq.n	80041d2 <HAL_DMA_IRQHandler+0xc62>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a29      	ldr	r2, [pc, #164]	; (80041e8 <HAL_DMA_IRQHandler+0xc78>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d045      	beq.n	80041d2 <HAL_DMA_IRQHandler+0xc62>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a28      	ldr	r2, [pc, #160]	; (80041ec <HAL_DMA_IRQHandler+0xc7c>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d040      	beq.n	80041d2 <HAL_DMA_IRQHandler+0xc62>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a26      	ldr	r2, [pc, #152]	; (80041f0 <HAL_DMA_IRQHandler+0xc80>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d03b      	beq.n	80041d2 <HAL_DMA_IRQHandler+0xc62>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a25      	ldr	r2, [pc, #148]	; (80041f4 <HAL_DMA_IRQHandler+0xc84>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d036      	beq.n	80041d2 <HAL_DMA_IRQHandler+0xc62>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a23      	ldr	r2, [pc, #140]	; (80041f8 <HAL_DMA_IRQHandler+0xc88>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d031      	beq.n	80041d2 <HAL_DMA_IRQHandler+0xc62>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a22      	ldr	r2, [pc, #136]	; (80041fc <HAL_DMA_IRQHandler+0xc8c>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d02c      	beq.n	80041d2 <HAL_DMA_IRQHandler+0xc62>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a20      	ldr	r2, [pc, #128]	; (8004200 <HAL_DMA_IRQHandler+0xc90>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d027      	beq.n	80041d2 <HAL_DMA_IRQHandler+0xc62>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a1f      	ldr	r2, [pc, #124]	; (8004204 <HAL_DMA_IRQHandler+0xc94>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d022      	beq.n	80041d2 <HAL_DMA_IRQHandler+0xc62>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a1d      	ldr	r2, [pc, #116]	; (8004208 <HAL_DMA_IRQHandler+0xc98>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d01d      	beq.n	80041d2 <HAL_DMA_IRQHandler+0xc62>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a1c      	ldr	r2, [pc, #112]	; (800420c <HAL_DMA_IRQHandler+0xc9c>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d018      	beq.n	80041d2 <HAL_DMA_IRQHandler+0xc62>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a1a      	ldr	r2, [pc, #104]	; (8004210 <HAL_DMA_IRQHandler+0xca0>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d013      	beq.n	80041d2 <HAL_DMA_IRQHandler+0xc62>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a19      	ldr	r2, [pc, #100]	; (8004214 <HAL_DMA_IRQHandler+0xca4>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d00e      	beq.n	80041d2 <HAL_DMA_IRQHandler+0xc62>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a17      	ldr	r2, [pc, #92]	; (8004218 <HAL_DMA_IRQHandler+0xca8>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d009      	beq.n	80041d2 <HAL_DMA_IRQHandler+0xc62>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a16      	ldr	r2, [pc, #88]	; (800421c <HAL_DMA_IRQHandler+0xcac>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d004      	beq.n	80041d2 <HAL_DMA_IRQHandler+0xc62>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a14      	ldr	r2, [pc, #80]	; (8004220 <HAL_DMA_IRQHandler+0xcb0>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d128      	bne.n	8004224 <HAL_DMA_IRQHandler+0xcb4>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 0214 	bic.w	r2, r2, #20
 80041e0:	601a      	str	r2, [r3, #0]
 80041e2:	e027      	b.n	8004234 <HAL_DMA_IRQHandler+0xcc4>
 80041e4:	40020010 	.word	0x40020010
 80041e8:	40020028 	.word	0x40020028
 80041ec:	40020040 	.word	0x40020040
 80041f0:	40020058 	.word	0x40020058
 80041f4:	40020070 	.word	0x40020070
 80041f8:	40020088 	.word	0x40020088
 80041fc:	400200a0 	.word	0x400200a0
 8004200:	400200b8 	.word	0x400200b8
 8004204:	40020410 	.word	0x40020410
 8004208:	40020428 	.word	0x40020428
 800420c:	40020440 	.word	0x40020440
 8004210:	40020458 	.word	0x40020458
 8004214:	40020470 	.word	0x40020470
 8004218:	40020488 	.word	0x40020488
 800421c:	400204a0 	.word	0x400204a0
 8004220:	400204b8 	.word	0x400204b8
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f022 020a 	bic.w	r2, r2, #10
 8004232:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004248:	2b00      	cmp	r3, #0
 800424a:	f000 8097 	beq.w	800437c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004256:	e091      	b.n	800437c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800425c:	f003 031f 	and.w	r3, r3, #31
 8004260:	2208      	movs	r2, #8
 8004262:	409a      	lsls	r2, r3
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	4013      	ands	r3, r2
 8004268:	2b00      	cmp	r3, #0
 800426a:	f000 8088 	beq.w	800437e <HAL_DMA_IRQHandler+0xe0e>
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	f003 0308 	and.w	r3, r3, #8
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 8082 	beq.w	800437e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a41      	ldr	r2, [pc, #260]	; (8004384 <HAL_DMA_IRQHandler+0xe14>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d04a      	beq.n	800431a <HAL_DMA_IRQHandler+0xdaa>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a3f      	ldr	r2, [pc, #252]	; (8004388 <HAL_DMA_IRQHandler+0xe18>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d045      	beq.n	800431a <HAL_DMA_IRQHandler+0xdaa>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a3e      	ldr	r2, [pc, #248]	; (800438c <HAL_DMA_IRQHandler+0xe1c>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d040      	beq.n	800431a <HAL_DMA_IRQHandler+0xdaa>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a3c      	ldr	r2, [pc, #240]	; (8004390 <HAL_DMA_IRQHandler+0xe20>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d03b      	beq.n	800431a <HAL_DMA_IRQHandler+0xdaa>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a3b      	ldr	r2, [pc, #236]	; (8004394 <HAL_DMA_IRQHandler+0xe24>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d036      	beq.n	800431a <HAL_DMA_IRQHandler+0xdaa>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a39      	ldr	r2, [pc, #228]	; (8004398 <HAL_DMA_IRQHandler+0xe28>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d031      	beq.n	800431a <HAL_DMA_IRQHandler+0xdaa>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a38      	ldr	r2, [pc, #224]	; (800439c <HAL_DMA_IRQHandler+0xe2c>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d02c      	beq.n	800431a <HAL_DMA_IRQHandler+0xdaa>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a36      	ldr	r2, [pc, #216]	; (80043a0 <HAL_DMA_IRQHandler+0xe30>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d027      	beq.n	800431a <HAL_DMA_IRQHandler+0xdaa>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a35      	ldr	r2, [pc, #212]	; (80043a4 <HAL_DMA_IRQHandler+0xe34>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d022      	beq.n	800431a <HAL_DMA_IRQHandler+0xdaa>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a33      	ldr	r2, [pc, #204]	; (80043a8 <HAL_DMA_IRQHandler+0xe38>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d01d      	beq.n	800431a <HAL_DMA_IRQHandler+0xdaa>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a32      	ldr	r2, [pc, #200]	; (80043ac <HAL_DMA_IRQHandler+0xe3c>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d018      	beq.n	800431a <HAL_DMA_IRQHandler+0xdaa>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a30      	ldr	r2, [pc, #192]	; (80043b0 <HAL_DMA_IRQHandler+0xe40>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d013      	beq.n	800431a <HAL_DMA_IRQHandler+0xdaa>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a2f      	ldr	r2, [pc, #188]	; (80043b4 <HAL_DMA_IRQHandler+0xe44>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d00e      	beq.n	800431a <HAL_DMA_IRQHandler+0xdaa>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a2d      	ldr	r2, [pc, #180]	; (80043b8 <HAL_DMA_IRQHandler+0xe48>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d009      	beq.n	800431a <HAL_DMA_IRQHandler+0xdaa>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a2c      	ldr	r2, [pc, #176]	; (80043bc <HAL_DMA_IRQHandler+0xe4c>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d004      	beq.n	800431a <HAL_DMA_IRQHandler+0xdaa>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a2a      	ldr	r2, [pc, #168]	; (80043c0 <HAL_DMA_IRQHandler+0xe50>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d108      	bne.n	800432c <HAL_DMA_IRQHandler+0xdbc>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f022 021c 	bic.w	r2, r2, #28
 8004328:	601a      	str	r2, [r3, #0]
 800432a:	e007      	b.n	800433c <HAL_DMA_IRQHandler+0xdcc>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f022 020e 	bic.w	r2, r2, #14
 800433a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004340:	f003 031f 	and.w	r3, r3, #31
 8004344:	2201      	movs	r2, #1
 8004346:	409a      	lsls	r2, r3
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004366:	2b00      	cmp	r3, #0
 8004368:	d009      	beq.n	800437e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	4798      	blx	r3
 8004372:	e004      	b.n	800437e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004374:	bf00      	nop
 8004376:	e002      	b.n	800437e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004378:	bf00      	nop
 800437a:	e000      	b.n	800437e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800437c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800437e:	3728      	adds	r7, #40	; 0x28
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	40020010 	.word	0x40020010
 8004388:	40020028 	.word	0x40020028
 800438c:	40020040 	.word	0x40020040
 8004390:	40020058 	.word	0x40020058
 8004394:	40020070 	.word	0x40020070
 8004398:	40020088 	.word	0x40020088
 800439c:	400200a0 	.word	0x400200a0
 80043a0:	400200b8 	.word	0x400200b8
 80043a4:	40020410 	.word	0x40020410
 80043a8:	40020428 	.word	0x40020428
 80043ac:	40020440 	.word	0x40020440
 80043b0:	40020458 	.word	0x40020458
 80043b4:	40020470 	.word	0x40020470
 80043b8:	40020488 	.word	0x40020488
 80043bc:	400204a0 	.word	0x400204a0
 80043c0:	400204b8 	.word	0x400204b8

080043c4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b087      	sub	sp, #28
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
 80043d0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043dc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a7f      	ldr	r2, [pc, #508]	; (80045e0 <DMA_SetConfig+0x21c>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d072      	beq.n	80044ce <DMA_SetConfig+0x10a>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a7d      	ldr	r2, [pc, #500]	; (80045e4 <DMA_SetConfig+0x220>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d06d      	beq.n	80044ce <DMA_SetConfig+0x10a>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a7c      	ldr	r2, [pc, #496]	; (80045e8 <DMA_SetConfig+0x224>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d068      	beq.n	80044ce <DMA_SetConfig+0x10a>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a7a      	ldr	r2, [pc, #488]	; (80045ec <DMA_SetConfig+0x228>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d063      	beq.n	80044ce <DMA_SetConfig+0x10a>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a79      	ldr	r2, [pc, #484]	; (80045f0 <DMA_SetConfig+0x22c>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d05e      	beq.n	80044ce <DMA_SetConfig+0x10a>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a77      	ldr	r2, [pc, #476]	; (80045f4 <DMA_SetConfig+0x230>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d059      	beq.n	80044ce <DMA_SetConfig+0x10a>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a76      	ldr	r2, [pc, #472]	; (80045f8 <DMA_SetConfig+0x234>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d054      	beq.n	80044ce <DMA_SetConfig+0x10a>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a74      	ldr	r2, [pc, #464]	; (80045fc <DMA_SetConfig+0x238>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d04f      	beq.n	80044ce <DMA_SetConfig+0x10a>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a73      	ldr	r2, [pc, #460]	; (8004600 <DMA_SetConfig+0x23c>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d04a      	beq.n	80044ce <DMA_SetConfig+0x10a>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a71      	ldr	r2, [pc, #452]	; (8004604 <DMA_SetConfig+0x240>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d045      	beq.n	80044ce <DMA_SetConfig+0x10a>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a70      	ldr	r2, [pc, #448]	; (8004608 <DMA_SetConfig+0x244>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d040      	beq.n	80044ce <DMA_SetConfig+0x10a>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a6e      	ldr	r2, [pc, #440]	; (800460c <DMA_SetConfig+0x248>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d03b      	beq.n	80044ce <DMA_SetConfig+0x10a>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a6d      	ldr	r2, [pc, #436]	; (8004610 <DMA_SetConfig+0x24c>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d036      	beq.n	80044ce <DMA_SetConfig+0x10a>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a6b      	ldr	r2, [pc, #428]	; (8004614 <DMA_SetConfig+0x250>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d031      	beq.n	80044ce <DMA_SetConfig+0x10a>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a6a      	ldr	r2, [pc, #424]	; (8004618 <DMA_SetConfig+0x254>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d02c      	beq.n	80044ce <DMA_SetConfig+0x10a>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a68      	ldr	r2, [pc, #416]	; (800461c <DMA_SetConfig+0x258>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d027      	beq.n	80044ce <DMA_SetConfig+0x10a>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a67      	ldr	r2, [pc, #412]	; (8004620 <DMA_SetConfig+0x25c>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d022      	beq.n	80044ce <DMA_SetConfig+0x10a>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a65      	ldr	r2, [pc, #404]	; (8004624 <DMA_SetConfig+0x260>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d01d      	beq.n	80044ce <DMA_SetConfig+0x10a>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a64      	ldr	r2, [pc, #400]	; (8004628 <DMA_SetConfig+0x264>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d018      	beq.n	80044ce <DMA_SetConfig+0x10a>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a62      	ldr	r2, [pc, #392]	; (800462c <DMA_SetConfig+0x268>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d013      	beq.n	80044ce <DMA_SetConfig+0x10a>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a61      	ldr	r2, [pc, #388]	; (8004630 <DMA_SetConfig+0x26c>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d00e      	beq.n	80044ce <DMA_SetConfig+0x10a>
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a5f      	ldr	r2, [pc, #380]	; (8004634 <DMA_SetConfig+0x270>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d009      	beq.n	80044ce <DMA_SetConfig+0x10a>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a5e      	ldr	r2, [pc, #376]	; (8004638 <DMA_SetConfig+0x274>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d004      	beq.n	80044ce <DMA_SetConfig+0x10a>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a5c      	ldr	r2, [pc, #368]	; (800463c <DMA_SetConfig+0x278>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d101      	bne.n	80044d2 <DMA_SetConfig+0x10e>
 80044ce:	2301      	movs	r3, #1
 80044d0:	e000      	b.n	80044d4 <DMA_SetConfig+0x110>
 80044d2:	2300      	movs	r3, #0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00d      	beq.n	80044f4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80044e0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d004      	beq.n	80044f4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80044f2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a39      	ldr	r2, [pc, #228]	; (80045e0 <DMA_SetConfig+0x21c>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d04a      	beq.n	8004594 <DMA_SetConfig+0x1d0>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a38      	ldr	r2, [pc, #224]	; (80045e4 <DMA_SetConfig+0x220>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d045      	beq.n	8004594 <DMA_SetConfig+0x1d0>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a36      	ldr	r2, [pc, #216]	; (80045e8 <DMA_SetConfig+0x224>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d040      	beq.n	8004594 <DMA_SetConfig+0x1d0>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a35      	ldr	r2, [pc, #212]	; (80045ec <DMA_SetConfig+0x228>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d03b      	beq.n	8004594 <DMA_SetConfig+0x1d0>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a33      	ldr	r2, [pc, #204]	; (80045f0 <DMA_SetConfig+0x22c>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d036      	beq.n	8004594 <DMA_SetConfig+0x1d0>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a32      	ldr	r2, [pc, #200]	; (80045f4 <DMA_SetConfig+0x230>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d031      	beq.n	8004594 <DMA_SetConfig+0x1d0>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a30      	ldr	r2, [pc, #192]	; (80045f8 <DMA_SetConfig+0x234>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d02c      	beq.n	8004594 <DMA_SetConfig+0x1d0>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a2f      	ldr	r2, [pc, #188]	; (80045fc <DMA_SetConfig+0x238>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d027      	beq.n	8004594 <DMA_SetConfig+0x1d0>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a2d      	ldr	r2, [pc, #180]	; (8004600 <DMA_SetConfig+0x23c>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d022      	beq.n	8004594 <DMA_SetConfig+0x1d0>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a2c      	ldr	r2, [pc, #176]	; (8004604 <DMA_SetConfig+0x240>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d01d      	beq.n	8004594 <DMA_SetConfig+0x1d0>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a2a      	ldr	r2, [pc, #168]	; (8004608 <DMA_SetConfig+0x244>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d018      	beq.n	8004594 <DMA_SetConfig+0x1d0>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a29      	ldr	r2, [pc, #164]	; (800460c <DMA_SetConfig+0x248>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d013      	beq.n	8004594 <DMA_SetConfig+0x1d0>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a27      	ldr	r2, [pc, #156]	; (8004610 <DMA_SetConfig+0x24c>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d00e      	beq.n	8004594 <DMA_SetConfig+0x1d0>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a26      	ldr	r2, [pc, #152]	; (8004614 <DMA_SetConfig+0x250>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d009      	beq.n	8004594 <DMA_SetConfig+0x1d0>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a24      	ldr	r2, [pc, #144]	; (8004618 <DMA_SetConfig+0x254>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d004      	beq.n	8004594 <DMA_SetConfig+0x1d0>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a23      	ldr	r2, [pc, #140]	; (800461c <DMA_SetConfig+0x258>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d101      	bne.n	8004598 <DMA_SetConfig+0x1d4>
 8004594:	2301      	movs	r3, #1
 8004596:	e000      	b.n	800459a <DMA_SetConfig+0x1d6>
 8004598:	2300      	movs	r3, #0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d059      	beq.n	8004652 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045a2:	f003 031f 	and.w	r3, r3, #31
 80045a6:	223f      	movs	r2, #63	; 0x3f
 80045a8:	409a      	lsls	r2, r3
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80045bc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	683a      	ldr	r2, [r7, #0]
 80045c4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	2b40      	cmp	r3, #64	; 0x40
 80045cc:	d138      	bne.n	8004640 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80045de:	e086      	b.n	80046ee <DMA_SetConfig+0x32a>
 80045e0:	40020010 	.word	0x40020010
 80045e4:	40020028 	.word	0x40020028
 80045e8:	40020040 	.word	0x40020040
 80045ec:	40020058 	.word	0x40020058
 80045f0:	40020070 	.word	0x40020070
 80045f4:	40020088 	.word	0x40020088
 80045f8:	400200a0 	.word	0x400200a0
 80045fc:	400200b8 	.word	0x400200b8
 8004600:	40020410 	.word	0x40020410
 8004604:	40020428 	.word	0x40020428
 8004608:	40020440 	.word	0x40020440
 800460c:	40020458 	.word	0x40020458
 8004610:	40020470 	.word	0x40020470
 8004614:	40020488 	.word	0x40020488
 8004618:	400204a0 	.word	0x400204a0
 800461c:	400204b8 	.word	0x400204b8
 8004620:	58025408 	.word	0x58025408
 8004624:	5802541c 	.word	0x5802541c
 8004628:	58025430 	.word	0x58025430
 800462c:	58025444 	.word	0x58025444
 8004630:	58025458 	.word	0x58025458
 8004634:	5802546c 	.word	0x5802546c
 8004638:	58025480 	.word	0x58025480
 800463c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68ba      	ldr	r2, [r7, #8]
 8004646:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	60da      	str	r2, [r3, #12]
}
 8004650:	e04d      	b.n	80046ee <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a29      	ldr	r2, [pc, #164]	; (80046fc <DMA_SetConfig+0x338>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d022      	beq.n	80046a2 <DMA_SetConfig+0x2de>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a27      	ldr	r2, [pc, #156]	; (8004700 <DMA_SetConfig+0x33c>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d01d      	beq.n	80046a2 <DMA_SetConfig+0x2de>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a26      	ldr	r2, [pc, #152]	; (8004704 <DMA_SetConfig+0x340>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d018      	beq.n	80046a2 <DMA_SetConfig+0x2de>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a24      	ldr	r2, [pc, #144]	; (8004708 <DMA_SetConfig+0x344>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d013      	beq.n	80046a2 <DMA_SetConfig+0x2de>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a23      	ldr	r2, [pc, #140]	; (800470c <DMA_SetConfig+0x348>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d00e      	beq.n	80046a2 <DMA_SetConfig+0x2de>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a21      	ldr	r2, [pc, #132]	; (8004710 <DMA_SetConfig+0x34c>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d009      	beq.n	80046a2 <DMA_SetConfig+0x2de>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a20      	ldr	r2, [pc, #128]	; (8004714 <DMA_SetConfig+0x350>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d004      	beq.n	80046a2 <DMA_SetConfig+0x2de>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a1e      	ldr	r2, [pc, #120]	; (8004718 <DMA_SetConfig+0x354>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d101      	bne.n	80046a6 <DMA_SetConfig+0x2e2>
 80046a2:	2301      	movs	r3, #1
 80046a4:	e000      	b.n	80046a8 <DMA_SetConfig+0x2e4>
 80046a6:	2300      	movs	r3, #0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d020      	beq.n	80046ee <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046b0:	f003 031f 	and.w	r3, r3, #31
 80046b4:	2201      	movs	r2, #1
 80046b6:	409a      	lsls	r2, r3
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	2b40      	cmp	r3, #64	; 0x40
 80046ca:	d108      	bne.n	80046de <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68ba      	ldr	r2, [r7, #8]
 80046da:	60da      	str	r2, [r3, #12]
}
 80046dc:	e007      	b.n	80046ee <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68ba      	ldr	r2, [r7, #8]
 80046e4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	60da      	str	r2, [r3, #12]
}
 80046ee:	bf00      	nop
 80046f0:	371c      	adds	r7, #28
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	58025408 	.word	0x58025408
 8004700:	5802541c 	.word	0x5802541c
 8004704:	58025430 	.word	0x58025430
 8004708:	58025444 	.word	0x58025444
 800470c:	58025458 	.word	0x58025458
 8004710:	5802546c 	.word	0x5802546c
 8004714:	58025480 	.word	0x58025480
 8004718:	58025494 	.word	0x58025494

0800471c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a42      	ldr	r2, [pc, #264]	; (8004834 <DMA_CalcBaseAndBitshift+0x118>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d04a      	beq.n	80047c4 <DMA_CalcBaseAndBitshift+0xa8>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a41      	ldr	r2, [pc, #260]	; (8004838 <DMA_CalcBaseAndBitshift+0x11c>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d045      	beq.n	80047c4 <DMA_CalcBaseAndBitshift+0xa8>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a3f      	ldr	r2, [pc, #252]	; (800483c <DMA_CalcBaseAndBitshift+0x120>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d040      	beq.n	80047c4 <DMA_CalcBaseAndBitshift+0xa8>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a3e      	ldr	r2, [pc, #248]	; (8004840 <DMA_CalcBaseAndBitshift+0x124>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d03b      	beq.n	80047c4 <DMA_CalcBaseAndBitshift+0xa8>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a3c      	ldr	r2, [pc, #240]	; (8004844 <DMA_CalcBaseAndBitshift+0x128>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d036      	beq.n	80047c4 <DMA_CalcBaseAndBitshift+0xa8>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a3b      	ldr	r2, [pc, #236]	; (8004848 <DMA_CalcBaseAndBitshift+0x12c>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d031      	beq.n	80047c4 <DMA_CalcBaseAndBitshift+0xa8>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a39      	ldr	r2, [pc, #228]	; (800484c <DMA_CalcBaseAndBitshift+0x130>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d02c      	beq.n	80047c4 <DMA_CalcBaseAndBitshift+0xa8>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a38      	ldr	r2, [pc, #224]	; (8004850 <DMA_CalcBaseAndBitshift+0x134>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d027      	beq.n	80047c4 <DMA_CalcBaseAndBitshift+0xa8>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a36      	ldr	r2, [pc, #216]	; (8004854 <DMA_CalcBaseAndBitshift+0x138>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d022      	beq.n	80047c4 <DMA_CalcBaseAndBitshift+0xa8>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a35      	ldr	r2, [pc, #212]	; (8004858 <DMA_CalcBaseAndBitshift+0x13c>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d01d      	beq.n	80047c4 <DMA_CalcBaseAndBitshift+0xa8>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a33      	ldr	r2, [pc, #204]	; (800485c <DMA_CalcBaseAndBitshift+0x140>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d018      	beq.n	80047c4 <DMA_CalcBaseAndBitshift+0xa8>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a32      	ldr	r2, [pc, #200]	; (8004860 <DMA_CalcBaseAndBitshift+0x144>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d013      	beq.n	80047c4 <DMA_CalcBaseAndBitshift+0xa8>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a30      	ldr	r2, [pc, #192]	; (8004864 <DMA_CalcBaseAndBitshift+0x148>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d00e      	beq.n	80047c4 <DMA_CalcBaseAndBitshift+0xa8>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a2f      	ldr	r2, [pc, #188]	; (8004868 <DMA_CalcBaseAndBitshift+0x14c>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d009      	beq.n	80047c4 <DMA_CalcBaseAndBitshift+0xa8>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a2d      	ldr	r2, [pc, #180]	; (800486c <DMA_CalcBaseAndBitshift+0x150>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d004      	beq.n	80047c4 <DMA_CalcBaseAndBitshift+0xa8>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a2c      	ldr	r2, [pc, #176]	; (8004870 <DMA_CalcBaseAndBitshift+0x154>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d101      	bne.n	80047c8 <DMA_CalcBaseAndBitshift+0xac>
 80047c4:	2301      	movs	r3, #1
 80047c6:	e000      	b.n	80047ca <DMA_CalcBaseAndBitshift+0xae>
 80047c8:	2300      	movs	r3, #0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d024      	beq.n	8004818 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	3b10      	subs	r3, #16
 80047d6:	4a27      	ldr	r2, [pc, #156]	; (8004874 <DMA_CalcBaseAndBitshift+0x158>)
 80047d8:	fba2 2303 	umull	r2, r3, r2, r3
 80047dc:	091b      	lsrs	r3, r3, #4
 80047de:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f003 0307 	and.w	r3, r3, #7
 80047e6:	4a24      	ldr	r2, [pc, #144]	; (8004878 <DMA_CalcBaseAndBitshift+0x15c>)
 80047e8:	5cd3      	ldrb	r3, [r2, r3]
 80047ea:	461a      	mov	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2b03      	cmp	r3, #3
 80047f4:	d908      	bls.n	8004808 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	461a      	mov	r2, r3
 80047fc:	4b1f      	ldr	r3, [pc, #124]	; (800487c <DMA_CalcBaseAndBitshift+0x160>)
 80047fe:	4013      	ands	r3, r2
 8004800:	1d1a      	adds	r2, r3, #4
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	659a      	str	r2, [r3, #88]	; 0x58
 8004806:	e00d      	b.n	8004824 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	461a      	mov	r2, r3
 800480e:	4b1b      	ldr	r3, [pc, #108]	; (800487c <DMA_CalcBaseAndBitshift+0x160>)
 8004810:	4013      	ands	r3, r2
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	6593      	str	r3, [r2, #88]	; 0x58
 8004816:	e005      	b.n	8004824 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004828:	4618      	mov	r0, r3
 800482a:	3714      	adds	r7, #20
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr
 8004834:	40020010 	.word	0x40020010
 8004838:	40020028 	.word	0x40020028
 800483c:	40020040 	.word	0x40020040
 8004840:	40020058 	.word	0x40020058
 8004844:	40020070 	.word	0x40020070
 8004848:	40020088 	.word	0x40020088
 800484c:	400200a0 	.word	0x400200a0
 8004850:	400200b8 	.word	0x400200b8
 8004854:	40020410 	.word	0x40020410
 8004858:	40020428 	.word	0x40020428
 800485c:	40020440 	.word	0x40020440
 8004860:	40020458 	.word	0x40020458
 8004864:	40020470 	.word	0x40020470
 8004868:	40020488 	.word	0x40020488
 800486c:	400204a0 	.word	0x400204a0
 8004870:	400204b8 	.word	0x400204b8
 8004874:	aaaaaaab 	.word	0xaaaaaaab
 8004878:	080144a4 	.word	0x080144a4
 800487c:	fffffc00 	.word	0xfffffc00

08004880 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004888:	2300      	movs	r3, #0
 800488a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	699b      	ldr	r3, [r3, #24]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d120      	bne.n	80048d6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004898:	2b03      	cmp	r3, #3
 800489a:	d858      	bhi.n	800494e <DMA_CheckFifoParam+0xce>
 800489c:	a201      	add	r2, pc, #4	; (adr r2, 80048a4 <DMA_CheckFifoParam+0x24>)
 800489e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a2:	bf00      	nop
 80048a4:	080048b5 	.word	0x080048b5
 80048a8:	080048c7 	.word	0x080048c7
 80048ac:	080048b5 	.word	0x080048b5
 80048b0:	0800494f 	.word	0x0800494f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d048      	beq.n	8004952 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80048c4:	e045      	b.n	8004952 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80048ce:	d142      	bne.n	8004956 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80048d4:	e03f      	b.n	8004956 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048de:	d123      	bne.n	8004928 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e4:	2b03      	cmp	r3, #3
 80048e6:	d838      	bhi.n	800495a <DMA_CheckFifoParam+0xda>
 80048e8:	a201      	add	r2, pc, #4	; (adr r2, 80048f0 <DMA_CheckFifoParam+0x70>)
 80048ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ee:	bf00      	nop
 80048f0:	08004901 	.word	0x08004901
 80048f4:	08004907 	.word	0x08004907
 80048f8:	08004901 	.word	0x08004901
 80048fc:	08004919 	.word	0x08004919
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	73fb      	strb	r3, [r7, #15]
        break;
 8004904:	e030      	b.n	8004968 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d025      	beq.n	800495e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004916:	e022      	b.n	800495e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004920:	d11f      	bne.n	8004962 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004926:	e01c      	b.n	8004962 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492c:	2b02      	cmp	r3, #2
 800492e:	d902      	bls.n	8004936 <DMA_CheckFifoParam+0xb6>
 8004930:	2b03      	cmp	r3, #3
 8004932:	d003      	beq.n	800493c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004934:	e018      	b.n	8004968 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	73fb      	strb	r3, [r7, #15]
        break;
 800493a:	e015      	b.n	8004968 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004940:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00e      	beq.n	8004966 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	73fb      	strb	r3, [r7, #15]
    break;
 800494c:	e00b      	b.n	8004966 <DMA_CheckFifoParam+0xe6>
        break;
 800494e:	bf00      	nop
 8004950:	e00a      	b.n	8004968 <DMA_CheckFifoParam+0xe8>
        break;
 8004952:	bf00      	nop
 8004954:	e008      	b.n	8004968 <DMA_CheckFifoParam+0xe8>
        break;
 8004956:	bf00      	nop
 8004958:	e006      	b.n	8004968 <DMA_CheckFifoParam+0xe8>
        break;
 800495a:	bf00      	nop
 800495c:	e004      	b.n	8004968 <DMA_CheckFifoParam+0xe8>
        break;
 800495e:	bf00      	nop
 8004960:	e002      	b.n	8004968 <DMA_CheckFifoParam+0xe8>
        break;
 8004962:	bf00      	nop
 8004964:	e000      	b.n	8004968 <DMA_CheckFifoParam+0xe8>
    break;
 8004966:	bf00      	nop
    }
  }

  return status;
 8004968:	7bfb      	ldrb	r3, [r7, #15]
}
 800496a:	4618      	mov	r0, r3
 800496c:	3714      	adds	r7, #20
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop

08004978 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a38      	ldr	r2, [pc, #224]	; (8004a6c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d022      	beq.n	80049d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a36      	ldr	r2, [pc, #216]	; (8004a70 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d01d      	beq.n	80049d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a35      	ldr	r2, [pc, #212]	; (8004a74 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d018      	beq.n	80049d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a33      	ldr	r2, [pc, #204]	; (8004a78 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d013      	beq.n	80049d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a32      	ldr	r2, [pc, #200]	; (8004a7c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d00e      	beq.n	80049d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a30      	ldr	r2, [pc, #192]	; (8004a80 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d009      	beq.n	80049d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a2f      	ldr	r2, [pc, #188]	; (8004a84 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d004      	beq.n	80049d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a2d      	ldr	r2, [pc, #180]	; (8004a88 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d101      	bne.n	80049da <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80049d6:	2301      	movs	r3, #1
 80049d8:	e000      	b.n	80049dc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80049da:	2300      	movs	r3, #0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d01a      	beq.n	8004a16 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	3b08      	subs	r3, #8
 80049e8:	4a28      	ldr	r2, [pc, #160]	; (8004a8c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80049ea:	fba2 2303 	umull	r2, r3, r2, r3
 80049ee:	091b      	lsrs	r3, r3, #4
 80049f0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	4b26      	ldr	r3, [pc, #152]	; (8004a90 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80049f6:	4413      	add	r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	461a      	mov	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a24      	ldr	r2, [pc, #144]	; (8004a94 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004a04:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f003 031f 	and.w	r3, r3, #31
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	409a      	lsls	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004a14:	e024      	b.n	8004a60 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	3b10      	subs	r3, #16
 8004a1e:	4a1e      	ldr	r2, [pc, #120]	; (8004a98 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004a20:	fba2 2303 	umull	r2, r3, r2, r3
 8004a24:	091b      	lsrs	r3, r3, #4
 8004a26:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	4a1c      	ldr	r2, [pc, #112]	; (8004a9c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d806      	bhi.n	8004a3e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	4a1b      	ldr	r2, [pc, #108]	; (8004aa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d902      	bls.n	8004a3e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	3308      	adds	r3, #8
 8004a3c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	4b18      	ldr	r3, [pc, #96]	; (8004aa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004a42:	4413      	add	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	461a      	mov	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a16      	ldr	r2, [pc, #88]	; (8004aa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004a50:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f003 031f 	and.w	r3, r3, #31
 8004a58:	2201      	movs	r2, #1
 8004a5a:	409a      	lsls	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004a60:	bf00      	nop
 8004a62:	3714      	adds	r7, #20
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr
 8004a6c:	58025408 	.word	0x58025408
 8004a70:	5802541c 	.word	0x5802541c
 8004a74:	58025430 	.word	0x58025430
 8004a78:	58025444 	.word	0x58025444
 8004a7c:	58025458 	.word	0x58025458
 8004a80:	5802546c 	.word	0x5802546c
 8004a84:	58025480 	.word	0x58025480
 8004a88:	58025494 	.word	0x58025494
 8004a8c:	cccccccd 	.word	0xcccccccd
 8004a90:	16009600 	.word	0x16009600
 8004a94:	58025880 	.word	0x58025880
 8004a98:	aaaaaaab 	.word	0xaaaaaaab
 8004a9c:	400204b8 	.word	0x400204b8
 8004aa0:	4002040f 	.word	0x4002040f
 8004aa4:	10008200 	.word	0x10008200
 8004aa8:	40020880 	.word	0x40020880

08004aac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d04a      	beq.n	8004b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2b08      	cmp	r3, #8
 8004ac6:	d847      	bhi.n	8004b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a25      	ldr	r2, [pc, #148]	; (8004b64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d022      	beq.n	8004b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a24      	ldr	r2, [pc, #144]	; (8004b68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d01d      	beq.n	8004b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a22      	ldr	r2, [pc, #136]	; (8004b6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d018      	beq.n	8004b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a21      	ldr	r2, [pc, #132]	; (8004b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d013      	beq.n	8004b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a1f      	ldr	r2, [pc, #124]	; (8004b74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d00e      	beq.n	8004b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a1e      	ldr	r2, [pc, #120]	; (8004b78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d009      	beq.n	8004b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a1c      	ldr	r2, [pc, #112]	; (8004b7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d004      	beq.n	8004b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a1b      	ldr	r2, [pc, #108]	; (8004b80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d101      	bne.n	8004b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e000      	b.n	8004b1e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00a      	beq.n	8004b38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	4b17      	ldr	r3, [pc, #92]	; (8004b84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004b26:	4413      	add	r3, r2
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a15      	ldr	r2, [pc, #84]	; (8004b88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004b34:	671a      	str	r2, [r3, #112]	; 0x70
 8004b36:	e009      	b.n	8004b4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	4b14      	ldr	r3, [pc, #80]	; (8004b8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004b3c:	4413      	add	r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	461a      	mov	r2, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a11      	ldr	r2, [pc, #68]	; (8004b90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004b4a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	2201      	movs	r2, #1
 8004b52:	409a      	lsls	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004b58:	bf00      	nop
 8004b5a:	3714      	adds	r7, #20
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr
 8004b64:	58025408 	.word	0x58025408
 8004b68:	5802541c 	.word	0x5802541c
 8004b6c:	58025430 	.word	0x58025430
 8004b70:	58025444 	.word	0x58025444
 8004b74:	58025458 	.word	0x58025458
 8004b78:	5802546c 	.word	0x5802546c
 8004b7c:	58025480 	.word	0x58025480
 8004b80:	58025494 	.word	0x58025494
 8004b84:	1600963f 	.word	0x1600963f
 8004b88:	58025940 	.word	0x58025940
 8004b8c:	1000823f 	.word	0x1000823f
 8004b90:	40020940 	.word	0x40020940

08004b94 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d101      	bne.n	8004ba6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e0cf      	b.n	8004d46 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d106      	bne.n	8004bbe <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2223      	movs	r2, #35	; 0x23
 8004bb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f7fb fdcd 	bl	8000758 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bbe:	4b64      	ldr	r3, [pc, #400]	; (8004d50 <HAL_ETH_Init+0x1bc>)
 8004bc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004bc4:	4a62      	ldr	r2, [pc, #392]	; (8004d50 <HAL_ETH_Init+0x1bc>)
 8004bc6:	f043 0302 	orr.w	r3, r3, #2
 8004bca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004bce:	4b60      	ldr	r3, [pc, #384]	; (8004d50 <HAL_ETH_Init+0x1bc>)
 8004bd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004bd4:	f003 0302 	and.w	r3, r3, #2
 8004bd8:	60bb      	str	r3, [r7, #8]
 8004bda:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	7a1b      	ldrb	r3, [r3, #8]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d103      	bne.n	8004bec <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004be4:	2000      	movs	r0, #0
 8004be6:	f7fd f8a5 	bl	8001d34 <HAL_SYSCFG_ETHInterfaceSelect>
 8004bea:	e003      	b.n	8004bf4 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004bec:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004bf0:	f7fd f8a0 	bl	8001d34 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8004bf4:	4b57      	ldr	r3, [pc, #348]	; (8004d54 <HAL_ETH_Init+0x1c0>)
 8004bf6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	6812      	ldr	r2, [r2, #0]
 8004c06:	f043 0301 	orr.w	r3, r3, #1
 8004c0a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004c0e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c10:	f7fd f854 	bl	8001cbc <HAL_GetTick>
 8004c14:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004c16:	e011      	b.n	8004c3c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004c18:	f7fd f850 	bl	8001cbc <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004c26:	d909      	bls.n	8004c3c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2204      	movs	r2, #4
 8004c2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	22e0      	movs	r2, #224	; 0xe0
 8004c34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e084      	b.n	8004d46 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1e4      	bne.n	8004c18 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 f886 	bl	8004d60 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004c54:	f002 fc88 	bl	8007568 <HAL_RCC_GetHCLKFreq>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	4a3f      	ldr	r2, [pc, #252]	; (8004d58 <HAL_ETH_Init+0x1c4>)
 8004c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c60:	0c9a      	lsrs	r2, r3, #18
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	3a01      	subs	r2, #1
 8004c68:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 fa71 	bl	8005154 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c7a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004c7e:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	6812      	ldr	r2, [r2, #0]
 8004c86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c8a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004c8e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	f003 0303 	and.w	r3, r3, #3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d009      	beq.n	8004cb2 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	22e0      	movs	r2, #224	; 0xe0
 8004caa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e049      	b.n	8004d46 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cba:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004cbe:	4b27      	ldr	r3, [pc, #156]	; (8004d5c <HAL_ETH_Init+0x1c8>)
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	6952      	ldr	r2, [r2, #20]
 8004cc6:	0051      	lsls	r1, r2, #1
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	6812      	ldr	r2, [r2, #0]
 8004ccc:	430b      	orrs	r3, r1
 8004cce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004cd2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 fad9 	bl	800528e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 fb1f 	bl	8005320 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	3305      	adds	r3, #5
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	021a      	lsls	r2, r3, #8
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	3304      	adds	r3, #4
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	3303      	adds	r3, #3
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	061a      	lsls	r2, r3, #24
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	3302      	adds	r3, #2
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	041b      	lsls	r3, r3, #16
 8004d14:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004d20:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004d2e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004d30:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2210      	movs	r2, #16
 8004d40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	58024400 	.word	0x58024400
 8004d54:	58000400 	.word	0x58000400
 8004d58:	431bde83 	.word	0x431bde83
 8004d5c:	ffff8001 	.word	0xffff8001

08004d60 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004d70:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004d78:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004d7a:	f002 fbf5 	bl	8007568 <HAL_RCC_GetHCLKFreq>
 8004d7e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	4a1e      	ldr	r2, [pc, #120]	; (8004dfc <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d908      	bls.n	8004d9a <HAL_ETH_SetMDIOClockRange+0x3a>
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	4a1d      	ldr	r2, [pc, #116]	; (8004e00 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d804      	bhi.n	8004d9a <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d96:	60fb      	str	r3, [r7, #12]
 8004d98:	e027      	b.n	8004dea <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	4a18      	ldr	r2, [pc, #96]	; (8004e00 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d908      	bls.n	8004db4 <HAL_ETH_SetMDIOClockRange+0x54>
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	4a17      	ldr	r2, [pc, #92]	; (8004e04 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d204      	bcs.n	8004db4 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004db0:	60fb      	str	r3, [r7, #12]
 8004db2:	e01a      	b.n	8004dea <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	4a13      	ldr	r2, [pc, #76]	; (8004e04 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d303      	bcc.n	8004dc4 <HAL_ETH_SetMDIOClockRange+0x64>
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	4a12      	ldr	r2, [pc, #72]	; (8004e08 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d911      	bls.n	8004de8 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	4a10      	ldr	r2, [pc, #64]	; (8004e08 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d908      	bls.n	8004dde <HAL_ETH_SetMDIOClockRange+0x7e>
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	4a0f      	ldr	r2, [pc, #60]	; (8004e0c <HAL_ETH_SetMDIOClockRange+0xac>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d804      	bhi.n	8004dde <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dda:	60fb      	str	r3, [r7, #12]
 8004ddc:	e005      	b.n	8004dea <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004de4:	60fb      	str	r3, [r7, #12]
 8004de6:	e000      	b.n	8004dea <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8004de8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004df4:	bf00      	nop
 8004df6:	3710      	adds	r7, #16
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	01312cff 	.word	0x01312cff
 8004e00:	02160ebf 	.word	0x02160ebf
 8004e04:	03938700 	.word	0x03938700
 8004e08:	05f5e0ff 	.word	0x05f5e0ff
 8004e0c:	08f0d17f 	.word	0x08f0d17f

08004e10 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8004e22:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	791b      	ldrb	r3, [r3, #4]
 8004e28:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8004e2a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	7b1b      	ldrb	r3, [r3, #12]
 8004e30:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004e32:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	7b5b      	ldrb	r3, [r3, #13]
 8004e38:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004e3a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	7b9b      	ldrb	r3, [r3, #14]
 8004e40:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004e42:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	7bdb      	ldrb	r3, [r3, #15]
 8004e48:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004e4a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004e4c:	683a      	ldr	r2, [r7, #0]
 8004e4e:	7c12      	ldrb	r2, [r2, #16]
 8004e50:	2a00      	cmp	r2, #0
 8004e52:	d102      	bne.n	8004e5a <ETH_SetMACConfig+0x4a>
 8004e54:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004e58:	e000      	b.n	8004e5c <ETH_SetMACConfig+0x4c>
 8004e5a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004e5c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004e5e:	683a      	ldr	r2, [r7, #0]
 8004e60:	7c52      	ldrb	r2, [r2, #17]
 8004e62:	2a00      	cmp	r2, #0
 8004e64:	d102      	bne.n	8004e6c <ETH_SetMACConfig+0x5c>
 8004e66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004e6a:	e000      	b.n	8004e6e <ETH_SetMACConfig+0x5e>
 8004e6c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004e6e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	7c9b      	ldrb	r3, [r3, #18]
 8004e74:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004e76:	431a      	orrs	r2, r3
               macconf->Speed |
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8004e7c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8004e82:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	7f1b      	ldrb	r3, [r3, #28]
 8004e88:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8004e8a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	7f5b      	ldrb	r3, [r3, #29]
 8004e90:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004e92:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004e94:	683a      	ldr	r2, [r7, #0]
 8004e96:	7f92      	ldrb	r2, [r2, #30]
 8004e98:	2a00      	cmp	r2, #0
 8004e9a:	d102      	bne.n	8004ea2 <ETH_SetMACConfig+0x92>
 8004e9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ea0:	e000      	b.n	8004ea4 <ETH_SetMACConfig+0x94>
 8004ea2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004ea4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	7fdb      	ldrb	r3, [r3, #31]
 8004eaa:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004eac:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004eae:	683a      	ldr	r2, [r7, #0]
 8004eb0:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004eb4:	2a00      	cmp	r2, #0
 8004eb6:	d102      	bne.n	8004ebe <ETH_SetMACConfig+0xae>
 8004eb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ebc:	e000      	b.n	8004ec0 <ETH_SetMACConfig+0xb0>
 8004ebe:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004ec0:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004ec6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ece:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8004ed0:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	4b56      	ldr	r3, [pc, #344]	; (800503c <ETH_SetMACConfig+0x22c>)
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	6812      	ldr	r2, [r2, #0]
 8004ee8:	68f9      	ldr	r1, [r7, #12]
 8004eea:	430b      	orrs	r3, r1
 8004eec:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ef2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004efa:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004efc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004f04:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004f06:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004f0e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004f10:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8004f12:	683a      	ldr	r2, [r7, #0]
 8004f14:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8004f18:	2a00      	cmp	r2, #0
 8004f1a:	d102      	bne.n	8004f22 <ETH_SetMACConfig+0x112>
 8004f1c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004f20:	e000      	b.n	8004f24 <ETH_SetMACConfig+0x114>
 8004f22:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004f24:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	685a      	ldr	r2, [r3, #4]
 8004f34:	4b42      	ldr	r3, [pc, #264]	; (8005040 <ETH_SetMACConfig+0x230>)
 8004f36:	4013      	ands	r3, r2
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	6812      	ldr	r2, [r2, #0]
 8004f3c:	68f9      	ldr	r1, [r7, #12]
 8004f3e:	430b      	orrs	r3, r1
 8004f40:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f48:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68da      	ldr	r2, [r3, #12]
 8004f58:	4b3a      	ldr	r3, [pc, #232]	; (8005044 <ETH_SetMACConfig+0x234>)
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	6812      	ldr	r2, [r2, #0]
 8004f60:	68f9      	ldr	r1, [r7, #12]
 8004f62:	430b      	orrs	r3, r1
 8004f64:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004f6c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004f72:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8004f74:	683a      	ldr	r2, [r7, #0]
 8004f76:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004f7a:	2a00      	cmp	r2, #0
 8004f7c:	d101      	bne.n	8004f82 <ETH_SetMACConfig+0x172>
 8004f7e:	2280      	movs	r2, #128	; 0x80
 8004f80:	e000      	b.n	8004f84 <ETH_SetMACConfig+0x174>
 8004f82:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004f84:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f8a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f96:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	6812      	ldr	r2, [r2, #0]
 8004fa0:	68f9      	ldr	r1, [r7, #12]
 8004fa2:	430b      	orrs	r3, r1
 8004fa4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004fac:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004fb4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc2:	f023 0103 	bic.w	r1, r3, #3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	430a      	orrs	r2, r1
 8004fce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004fda:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004ff0:	683a      	ldr	r2, [r7, #0]
 8004ff2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8004ff6:	2a00      	cmp	r2, #0
 8004ff8:	d101      	bne.n	8004ffe <ETH_SetMACConfig+0x1ee>
 8004ffa:	2240      	movs	r2, #64	; 0x40
 8004ffc:	e000      	b.n	8005000 <ETH_SetMACConfig+0x1f0>
 8004ffe:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8005000:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005008:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800500a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005012:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8005014:	4313      	orrs	r3, r2
 8005016:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005020:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	430a      	orrs	r2, r1
 800502c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8005030:	bf00      	nop
 8005032:	3714      	adds	r7, #20
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr
 800503c:	00048083 	.word	0x00048083
 8005040:	c0f88000 	.word	0xc0f88000
 8005044:	fffffef0 	.word	0xfffffef0

08005048 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	4b38      	ldr	r3, [pc, #224]	; (8005140 <ETH_SetDMAConfig+0xf8>)
 800505e:	4013      	ands	r3, r2
 8005060:	683a      	ldr	r2, [r7, #0]
 8005062:	6811      	ldr	r1, [r2, #0]
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	6812      	ldr	r2, [r2, #0]
 8005068:	430b      	orrs	r3, r1
 800506a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800506e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	791b      	ldrb	r3, [r3, #4]
 8005074:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800507a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	7b1b      	ldrb	r3, [r3, #12]
 8005080:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005082:	4313      	orrs	r3, r2
 8005084:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800508e:	685a      	ldr	r2, [r3, #4]
 8005090:	4b2c      	ldr	r3, [pc, #176]	; (8005144 <ETH_SetDMAConfig+0xfc>)
 8005092:	4013      	ands	r3, r2
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	6812      	ldr	r2, [r2, #0]
 8005098:	68f9      	ldr	r1, [r7, #12]
 800509a:	430b      	orrs	r3, r1
 800509c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80050a0:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	7b5b      	ldrb	r3, [r3, #13]
 80050a6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80050ac:	4313      	orrs	r3, r2
 80050ae:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050b8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80050bc:	4b22      	ldr	r3, [pc, #136]	; (8005148 <ETH_SetDMAConfig+0x100>)
 80050be:	4013      	ands	r3, r2
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	6812      	ldr	r2, [r2, #0]
 80050c4:	68f9      	ldr	r1, [r7, #12]
 80050c6:	430b      	orrs	r3, r1
 80050c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80050cc:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	7d1b      	ldrb	r3, [r3, #20]
 80050d8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80050da:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	7f5b      	ldrb	r3, [r3, #29]
 80050e0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80050e2:	4313      	orrs	r3, r2
 80050e4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050ee:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80050f2:	4b16      	ldr	r3, [pc, #88]	; (800514c <ETH_SetDMAConfig+0x104>)
 80050f4:	4013      	ands	r3, r2
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	6812      	ldr	r2, [r2, #0]
 80050fa:	68f9      	ldr	r1, [r7, #12]
 80050fc:	430b      	orrs	r3, r1
 80050fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005102:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	7f1b      	ldrb	r3, [r3, #28]
 800510a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005110:	4313      	orrs	r3, r2
 8005112:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800511c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8005120:	4b0b      	ldr	r3, [pc, #44]	; (8005150 <ETH_SetDMAConfig+0x108>)
 8005122:	4013      	ands	r3, r2
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	6812      	ldr	r2, [r2, #0]
 8005128:	68f9      	ldr	r1, [r7, #12]
 800512a:	430b      	orrs	r3, r1
 800512c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005130:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8005134:	bf00      	nop
 8005136:	3714      	adds	r7, #20
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr
 8005140:	ffff87fd 	.word	0xffff87fd
 8005144:	ffff2ffe 	.word	0xffff2ffe
 8005148:	fffec000 	.word	0xfffec000
 800514c:	ffc0efef 	.word	0xffc0efef
 8005150:	7fc0ffff 	.word	0x7fc0ffff

08005154 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b0a4      	sub	sp, #144	; 0x90
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800515c:	2301      	movs	r3, #1
 800515e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005162:	2300      	movs	r3, #0
 8005164:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8005166:	2300      	movs	r3, #0
 8005168:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800516c:	2300      	movs	r3, #0
 800516e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8005172:	2301      	movs	r3, #1
 8005174:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005178:	2301      	movs	r3, #1
 800517a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800517e:	2301      	movs	r3, #1
 8005180:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005184:	2300      	movs	r3, #0
 8005186:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800518a:	2301      	movs	r3, #1
 800518c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005190:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005194:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8005196:	2300      	movs	r3, #0
 8005198:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800519c:	2300      	movs	r3, #0
 800519e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80051a0:	2300      	movs	r3, #0
 80051a2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80051a6:	2300      	movs	r3, #0
 80051a8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80051ac:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80051b0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80051b2:	2300      	movs	r3, #0
 80051b4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80051b8:	2300      	movs	r3, #0
 80051ba:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80051bc:	2301      	movs	r3, #1
 80051be:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80051c2:	2300      	movs	r3, #0
 80051c4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80051c8:	2300      	movs	r3, #0
 80051ca:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80051ce:	2300      	movs	r3, #0
 80051d0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80051d2:	2300      	movs	r3, #0
 80051d4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80051d6:	2300      	movs	r3, #0
 80051d8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80051da:	2300      	movs	r3, #0
 80051dc:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80051e0:	2300      	movs	r3, #0
 80051e2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80051e6:	2301      	movs	r3, #1
 80051e8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80051ec:	2320      	movs	r3, #32
 80051ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80051f2:	2301      	movs	r3, #1
 80051f4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80051f8:	2300      	movs	r3, #0
 80051fa:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80051fe:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8005202:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005204:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005208:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800520a:	2300      	movs	r3, #0
 800520c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005210:	2302      	movs	r3, #2
 8005212:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005216:	2300      	movs	r3, #0
 8005218:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800521c:	2300      	movs	r3, #0
 800521e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8005222:	2300      	movs	r3, #0
 8005224:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005228:	2301      	movs	r3, #1
 800522a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800522e:	2300      	movs	r3, #0
 8005230:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8005232:	2301      	movs	r3, #1
 8005234:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005238:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800523c:	4619      	mov	r1, r3
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f7ff fde6 	bl	8004e10 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005244:	2301      	movs	r3, #1
 8005246:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005248:	2301      	movs	r3, #1
 800524a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800524c:	2300      	movs	r3, #0
 800524e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005250:	2300      	movs	r3, #0
 8005252:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005256:	2300      	movs	r3, #0
 8005258:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800525a:	2300      	movs	r3, #0
 800525c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800525e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005262:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005264:	2300      	movs	r3, #0
 8005266:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005268:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800526c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800526e:	2300      	movs	r3, #0
 8005270:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8005274:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005278:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800527a:	f107 0308 	add.w	r3, r7, #8
 800527e:	4619      	mov	r1, r3
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f7ff fee1 	bl	8005048 <ETH_SetDMAConfig>
}
 8005286:	bf00      	nop
 8005288:	3790      	adds	r7, #144	; 0x90
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}

0800528e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800528e:	b480      	push	{r7}
 8005290:	b085      	sub	sp, #20
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005296:	2300      	movs	r3, #0
 8005298:	60fb      	str	r3, [r7, #12]
 800529a:	e01d      	b.n	80052d8 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	68d9      	ldr	r1, [r3, #12]
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	4613      	mov	r3, r2
 80052a4:	005b      	lsls	r3, r3, #1
 80052a6:	4413      	add	r3, r2
 80052a8:	00db      	lsls	r3, r3, #3
 80052aa:	440b      	add	r3, r1
 80052ac:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	2200      	movs	r2, #0
 80052b2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	2200      	movs	r2, #0
 80052b8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	2200      	movs	r2, #0
 80052be:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	2200      	movs	r2, #0
 80052c4:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80052c6:	68b9      	ldr	r1, [r7, #8]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	3206      	adds	r2, #6
 80052ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	3301      	adds	r3, #1
 80052d6:	60fb      	str	r3, [r7, #12]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2b03      	cmp	r3, #3
 80052dc:	d9de      	bls.n	800529c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052ec:	461a      	mov	r2, r3
 80052ee:	2303      	movs	r3, #3
 80052f0:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	68da      	ldr	r2, [r3, #12]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005300:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	68da      	ldr	r2, [r3, #12]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005310:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8005314:	bf00      	nop
 8005316:	3714      	adds	r7, #20
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005328:	2300      	movs	r3, #0
 800532a:	60fb      	str	r3, [r7, #12]
 800532c:	e023      	b.n	8005376 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6919      	ldr	r1, [r3, #16]
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	4613      	mov	r3, r2
 8005336:	005b      	lsls	r3, r3, #1
 8005338:	4413      	add	r3, r2
 800533a:	00db      	lsls	r3, r3, #3
 800533c:	440b      	add	r3, r1
 800533e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	2200      	movs	r2, #0
 8005344:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	2200      	movs	r2, #0
 800534a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	2200      	movs	r2, #0
 8005350:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	2200      	movs	r2, #0
 8005356:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	2200      	movs	r2, #0
 800535c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	2200      	movs	r2, #0
 8005362:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005364:	68b9      	ldr	r1, [r7, #8]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	3212      	adds	r2, #18
 800536c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	3301      	adds	r3, #1
 8005374:	60fb      	str	r3, [r7, #12]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2b03      	cmp	r3, #3
 800537a:	d9d8      	bls.n	800532e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053a2:	461a      	mov	r2, r3
 80053a4:	2303      	movs	r3, #3
 80053a6:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	691a      	ldr	r2, [r3, #16]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053b6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053ca:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80053ce:	bf00      	nop
 80053d0:	3714      	adds	r7, #20
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
	...

080053dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053dc:	b480      	push	{r7}
 80053de:	b089      	sub	sp, #36	; 0x24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80053e6:	2300      	movs	r3, #0
 80053e8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80053ea:	4b89      	ldr	r3, [pc, #548]	; (8005610 <HAL_GPIO_Init+0x234>)
 80053ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80053ee:	e194      	b.n	800571a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	2101      	movs	r1, #1
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	fa01 f303 	lsl.w	r3, r1, r3
 80053fc:	4013      	ands	r3, r2
 80053fe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	2b00      	cmp	r3, #0
 8005404:	f000 8186 	beq.w	8005714 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f003 0303 	and.w	r3, r3, #3
 8005410:	2b01      	cmp	r3, #1
 8005412:	d005      	beq.n	8005420 <HAL_GPIO_Init+0x44>
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	f003 0303 	and.w	r3, r3, #3
 800541c:	2b02      	cmp	r3, #2
 800541e:	d130      	bne.n	8005482 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	005b      	lsls	r3, r3, #1
 800542a:	2203      	movs	r2, #3
 800542c:	fa02 f303 	lsl.w	r3, r2, r3
 8005430:	43db      	mvns	r3, r3
 8005432:	69ba      	ldr	r2, [r7, #24]
 8005434:	4013      	ands	r3, r2
 8005436:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	68da      	ldr	r2, [r3, #12]
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	005b      	lsls	r3, r3, #1
 8005440:	fa02 f303 	lsl.w	r3, r2, r3
 8005444:	69ba      	ldr	r2, [r7, #24]
 8005446:	4313      	orrs	r3, r2
 8005448:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	69ba      	ldr	r2, [r7, #24]
 800544e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005456:	2201      	movs	r2, #1
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	fa02 f303 	lsl.w	r3, r2, r3
 800545e:	43db      	mvns	r3, r3
 8005460:	69ba      	ldr	r2, [r7, #24]
 8005462:	4013      	ands	r3, r2
 8005464:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	091b      	lsrs	r3, r3, #4
 800546c:	f003 0201 	and.w	r2, r3, #1
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	fa02 f303 	lsl.w	r3, r2, r3
 8005476:	69ba      	ldr	r2, [r7, #24]
 8005478:	4313      	orrs	r3, r2
 800547a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	69ba      	ldr	r2, [r7, #24]
 8005480:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f003 0303 	and.w	r3, r3, #3
 800548a:	2b03      	cmp	r3, #3
 800548c:	d017      	beq.n	80054be <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	005b      	lsls	r3, r3, #1
 8005498:	2203      	movs	r2, #3
 800549a:	fa02 f303 	lsl.w	r3, r2, r3
 800549e:	43db      	mvns	r3, r3
 80054a0:	69ba      	ldr	r2, [r7, #24]
 80054a2:	4013      	ands	r3, r2
 80054a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	689a      	ldr	r2, [r3, #8]
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	005b      	lsls	r3, r3, #1
 80054ae:	fa02 f303 	lsl.w	r3, r2, r3
 80054b2:	69ba      	ldr	r2, [r7, #24]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	69ba      	ldr	r2, [r7, #24]
 80054bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	f003 0303 	and.w	r3, r3, #3
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d123      	bne.n	8005512 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	08da      	lsrs	r2, r3, #3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	3208      	adds	r2, #8
 80054d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	f003 0307 	and.w	r3, r3, #7
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	220f      	movs	r2, #15
 80054e2:	fa02 f303 	lsl.w	r3, r2, r3
 80054e6:	43db      	mvns	r3, r3
 80054e8:	69ba      	ldr	r2, [r7, #24]
 80054ea:	4013      	ands	r3, r2
 80054ec:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	691a      	ldr	r2, [r3, #16]
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	f003 0307 	and.w	r3, r3, #7
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	fa02 f303 	lsl.w	r3, r2, r3
 80054fe:	69ba      	ldr	r2, [r7, #24]
 8005500:	4313      	orrs	r3, r2
 8005502:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	08da      	lsrs	r2, r3, #3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	3208      	adds	r2, #8
 800550c:	69b9      	ldr	r1, [r7, #24]
 800550e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	005b      	lsls	r3, r3, #1
 800551c:	2203      	movs	r2, #3
 800551e:	fa02 f303 	lsl.w	r3, r2, r3
 8005522:	43db      	mvns	r3, r3
 8005524:	69ba      	ldr	r2, [r7, #24]
 8005526:	4013      	ands	r3, r2
 8005528:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f003 0203 	and.w	r2, r3, #3
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	005b      	lsls	r3, r3, #1
 8005536:	fa02 f303 	lsl.w	r3, r2, r3
 800553a:	69ba      	ldr	r2, [r7, #24]
 800553c:	4313      	orrs	r3, r2
 800553e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	69ba      	ldr	r2, [r7, #24]
 8005544:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800554e:	2b00      	cmp	r3, #0
 8005550:	f000 80e0 	beq.w	8005714 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005554:	4b2f      	ldr	r3, [pc, #188]	; (8005614 <HAL_GPIO_Init+0x238>)
 8005556:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800555a:	4a2e      	ldr	r2, [pc, #184]	; (8005614 <HAL_GPIO_Init+0x238>)
 800555c:	f043 0302 	orr.w	r3, r3, #2
 8005560:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005564:	4b2b      	ldr	r3, [pc, #172]	; (8005614 <HAL_GPIO_Init+0x238>)
 8005566:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800556a:	f003 0302 	and.w	r3, r3, #2
 800556e:	60fb      	str	r3, [r7, #12]
 8005570:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005572:	4a29      	ldr	r2, [pc, #164]	; (8005618 <HAL_GPIO_Init+0x23c>)
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	089b      	lsrs	r3, r3, #2
 8005578:	3302      	adds	r3, #2
 800557a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800557e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	f003 0303 	and.w	r3, r3, #3
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	220f      	movs	r2, #15
 800558a:	fa02 f303 	lsl.w	r3, r2, r3
 800558e:	43db      	mvns	r3, r3
 8005590:	69ba      	ldr	r2, [r7, #24]
 8005592:	4013      	ands	r3, r2
 8005594:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a20      	ldr	r2, [pc, #128]	; (800561c <HAL_GPIO_Init+0x240>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d052      	beq.n	8005644 <HAL_GPIO_Init+0x268>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a1f      	ldr	r2, [pc, #124]	; (8005620 <HAL_GPIO_Init+0x244>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d031      	beq.n	800560a <HAL_GPIO_Init+0x22e>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a1e      	ldr	r2, [pc, #120]	; (8005624 <HAL_GPIO_Init+0x248>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d02b      	beq.n	8005606 <HAL_GPIO_Init+0x22a>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a1d      	ldr	r2, [pc, #116]	; (8005628 <HAL_GPIO_Init+0x24c>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d025      	beq.n	8005602 <HAL_GPIO_Init+0x226>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a1c      	ldr	r2, [pc, #112]	; (800562c <HAL_GPIO_Init+0x250>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d01f      	beq.n	80055fe <HAL_GPIO_Init+0x222>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a1b      	ldr	r2, [pc, #108]	; (8005630 <HAL_GPIO_Init+0x254>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d019      	beq.n	80055fa <HAL_GPIO_Init+0x21e>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a1a      	ldr	r2, [pc, #104]	; (8005634 <HAL_GPIO_Init+0x258>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d013      	beq.n	80055f6 <HAL_GPIO_Init+0x21a>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a19      	ldr	r2, [pc, #100]	; (8005638 <HAL_GPIO_Init+0x25c>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d00d      	beq.n	80055f2 <HAL_GPIO_Init+0x216>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a18      	ldr	r2, [pc, #96]	; (800563c <HAL_GPIO_Init+0x260>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d007      	beq.n	80055ee <HAL_GPIO_Init+0x212>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a17      	ldr	r2, [pc, #92]	; (8005640 <HAL_GPIO_Init+0x264>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d101      	bne.n	80055ea <HAL_GPIO_Init+0x20e>
 80055e6:	2309      	movs	r3, #9
 80055e8:	e02d      	b.n	8005646 <HAL_GPIO_Init+0x26a>
 80055ea:	230a      	movs	r3, #10
 80055ec:	e02b      	b.n	8005646 <HAL_GPIO_Init+0x26a>
 80055ee:	2308      	movs	r3, #8
 80055f0:	e029      	b.n	8005646 <HAL_GPIO_Init+0x26a>
 80055f2:	2307      	movs	r3, #7
 80055f4:	e027      	b.n	8005646 <HAL_GPIO_Init+0x26a>
 80055f6:	2306      	movs	r3, #6
 80055f8:	e025      	b.n	8005646 <HAL_GPIO_Init+0x26a>
 80055fa:	2305      	movs	r3, #5
 80055fc:	e023      	b.n	8005646 <HAL_GPIO_Init+0x26a>
 80055fe:	2304      	movs	r3, #4
 8005600:	e021      	b.n	8005646 <HAL_GPIO_Init+0x26a>
 8005602:	2303      	movs	r3, #3
 8005604:	e01f      	b.n	8005646 <HAL_GPIO_Init+0x26a>
 8005606:	2302      	movs	r3, #2
 8005608:	e01d      	b.n	8005646 <HAL_GPIO_Init+0x26a>
 800560a:	2301      	movs	r3, #1
 800560c:	e01b      	b.n	8005646 <HAL_GPIO_Init+0x26a>
 800560e:	bf00      	nop
 8005610:	58000080 	.word	0x58000080
 8005614:	58024400 	.word	0x58024400
 8005618:	58000400 	.word	0x58000400
 800561c:	58020000 	.word	0x58020000
 8005620:	58020400 	.word	0x58020400
 8005624:	58020800 	.word	0x58020800
 8005628:	58020c00 	.word	0x58020c00
 800562c:	58021000 	.word	0x58021000
 8005630:	58021400 	.word	0x58021400
 8005634:	58021800 	.word	0x58021800
 8005638:	58021c00 	.word	0x58021c00
 800563c:	58022000 	.word	0x58022000
 8005640:	58022400 	.word	0x58022400
 8005644:	2300      	movs	r3, #0
 8005646:	69fa      	ldr	r2, [r7, #28]
 8005648:	f002 0203 	and.w	r2, r2, #3
 800564c:	0092      	lsls	r2, r2, #2
 800564e:	4093      	lsls	r3, r2
 8005650:	69ba      	ldr	r2, [r7, #24]
 8005652:	4313      	orrs	r3, r2
 8005654:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005656:	4938      	ldr	r1, [pc, #224]	; (8005738 <HAL_GPIO_Init+0x35c>)
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	089b      	lsrs	r3, r3, #2
 800565c:	3302      	adds	r3, #2
 800565e:	69ba      	ldr	r2, [r7, #24]
 8005660:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005664:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	43db      	mvns	r3, r3
 8005670:	69ba      	ldr	r2, [r7, #24]
 8005672:	4013      	ands	r3, r2
 8005674:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d003      	beq.n	800568a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005682:	69ba      	ldr	r2, [r7, #24]
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	4313      	orrs	r3, r2
 8005688:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800568a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005692:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	43db      	mvns	r3, r3
 800569e:	69ba      	ldr	r2, [r7, #24]
 80056a0:	4013      	ands	r3, r2
 80056a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d003      	beq.n	80056b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80056b0:	69ba      	ldr	r2, [r7, #24]
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80056b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	43db      	mvns	r3, r3
 80056ca:	69ba      	ldr	r2, [r7, #24]
 80056cc:	4013      	ands	r3, r2
 80056ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d003      	beq.n	80056e4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80056dc:	69ba      	ldr	r2, [r7, #24]
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	69ba      	ldr	r2, [r7, #24]
 80056e8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	43db      	mvns	r3, r3
 80056f4:	69ba      	ldr	r2, [r7, #24]
 80056f6:	4013      	ands	r3, r2
 80056f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d003      	beq.n	800570e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005706:	69ba      	ldr	r2, [r7, #24]
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	4313      	orrs	r3, r2
 800570c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	69ba      	ldr	r2, [r7, #24]
 8005712:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	3301      	adds	r3, #1
 8005718:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	fa22 f303 	lsr.w	r3, r2, r3
 8005724:	2b00      	cmp	r3, #0
 8005726:	f47f ae63 	bne.w	80053f0 <HAL_GPIO_Init+0x14>
  }
}
 800572a:	bf00      	nop
 800572c:	bf00      	nop
 800572e:	3724      	adds	r7, #36	; 0x24
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr
 8005738:	58000400 	.word	0x58000400

0800573c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800573c:	b480      	push	{r7}
 800573e:	b085      	sub	sp, #20
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	460b      	mov	r3, r1
 8005746:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	691a      	ldr	r2, [r3, #16]
 800574c:	887b      	ldrh	r3, [r7, #2]
 800574e:	4013      	ands	r3, r2
 8005750:	2b00      	cmp	r3, #0
 8005752:	d002      	beq.n	800575a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005754:	2301      	movs	r3, #1
 8005756:	73fb      	strb	r3, [r7, #15]
 8005758:	e001      	b.n	800575e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800575a:	2300      	movs	r3, #0
 800575c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800575e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005760:	4618      	mov	r0, r3
 8005762:	3714      	adds	r7, #20
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	460b      	mov	r3, r1
 8005776:	807b      	strh	r3, [r7, #2]
 8005778:	4613      	mov	r3, r2
 800577a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800577c:	787b      	ldrb	r3, [r7, #1]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d003      	beq.n	800578a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005782:	887a      	ldrh	r2, [r7, #2]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005788:	e003      	b.n	8005792 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800578a:	887b      	ldrh	r3, [r7, #2]
 800578c:	041a      	lsls	r2, r3, #16
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	619a      	str	r2, [r3, #24]
}
 8005792:	bf00      	nop
 8005794:	370c      	adds	r7, #12
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr
	...

080057a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d101      	bne.n	80057b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e07f      	b.n	80058b2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d106      	bne.n	80057cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f7fb fc4a 	bl	8001060 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2224      	movs	r2, #36	; 0x24
 80057d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f022 0201 	bic.w	r2, r2, #1
 80057e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	685a      	ldr	r2, [r3, #4]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80057f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	689a      	ldr	r2, [r3, #8]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005800:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	2b01      	cmp	r3, #1
 8005808:	d107      	bne.n	800581a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	689a      	ldr	r2, [r3, #8]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005816:	609a      	str	r2, [r3, #8]
 8005818:	e006      	b.n	8005828 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	689a      	ldr	r2, [r3, #8]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005826:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	2b02      	cmp	r3, #2
 800582e:	d104      	bne.n	800583a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005838:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	6859      	ldr	r1, [r3, #4]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	4b1d      	ldr	r3, [pc, #116]	; (80058bc <HAL_I2C_Init+0x11c>)
 8005846:	430b      	orrs	r3, r1
 8005848:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68da      	ldr	r2, [r3, #12]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005858:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	691a      	ldr	r2, [r3, #16]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	695b      	ldr	r3, [r3, #20]
 8005862:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	430a      	orrs	r2, r1
 8005872:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	69d9      	ldr	r1, [r3, #28]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a1a      	ldr	r2, [r3, #32]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	430a      	orrs	r2, r1
 8005882:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f042 0201 	orr.w	r2, r2, #1
 8005892:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2220      	movs	r2, #32
 800589e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3708      	adds	r7, #8
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	02008000 	.word	0x02008000

080058c0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b088      	sub	sp, #32
 80058c4:	af02      	add	r7, sp, #8
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	607a      	str	r2, [r7, #4]
 80058ca:	461a      	mov	r2, r3
 80058cc:	460b      	mov	r3, r1
 80058ce:	817b      	strh	r3, [r7, #10]
 80058d0:	4613      	mov	r3, r2
 80058d2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	2b20      	cmp	r3, #32
 80058de:	f040 80da 	bne.w	8005a96 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d101      	bne.n	80058f0 <HAL_I2C_Master_Transmit+0x30>
 80058ec:	2302      	movs	r3, #2
 80058ee:	e0d3      	b.n	8005a98 <HAL_I2C_Master_Transmit+0x1d8>
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80058f8:	f7fc f9e0 	bl	8001cbc <HAL_GetTick>
 80058fc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	9300      	str	r3, [sp, #0]
 8005902:	2319      	movs	r3, #25
 8005904:	2201      	movs	r2, #1
 8005906:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f000 f9e6 	bl	8005cdc <I2C_WaitOnFlagUntilTimeout>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d001      	beq.n	800591a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e0be      	b.n	8005a98 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2221      	movs	r2, #33	; 0x21
 800591e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2210      	movs	r2, #16
 8005926:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	893a      	ldrh	r2, [r7, #8]
 800593a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2200      	movs	r2, #0
 8005940:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005946:	b29b      	uxth	r3, r3
 8005948:	2bff      	cmp	r3, #255	; 0xff
 800594a:	d90e      	bls.n	800596a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	22ff      	movs	r2, #255	; 0xff
 8005950:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005956:	b2da      	uxtb	r2, r3
 8005958:	8979      	ldrh	r1, [r7, #10]
 800595a:	4b51      	ldr	r3, [pc, #324]	; (8005aa0 <HAL_I2C_Master_Transmit+0x1e0>)
 800595c:	9300      	str	r3, [sp, #0]
 800595e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	f000 fbf6 	bl	8006154 <I2C_TransferConfig>
 8005968:	e06c      	b.n	8005a44 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800596e:	b29a      	uxth	r2, r3
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005978:	b2da      	uxtb	r2, r3
 800597a:	8979      	ldrh	r1, [r7, #10]
 800597c:	4b48      	ldr	r3, [pc, #288]	; (8005aa0 <HAL_I2C_Master_Transmit+0x1e0>)
 800597e:	9300      	str	r3, [sp, #0]
 8005980:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005984:	68f8      	ldr	r0, [r7, #12]
 8005986:	f000 fbe5 	bl	8006154 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800598a:	e05b      	b.n	8005a44 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800598c:	697a      	ldr	r2, [r7, #20]
 800598e:	6a39      	ldr	r1, [r7, #32]
 8005990:	68f8      	ldr	r0, [r7, #12]
 8005992:	f000 f9f2 	bl	8005d7a <I2C_WaitOnTXISFlagUntilTimeout>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d001      	beq.n	80059a0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e07b      	b.n	8005a98 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a4:	781a      	ldrb	r2, [r3, #0]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b0:	1c5a      	adds	r2, r3, #1
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	3b01      	subs	r3, #1
 80059be:	b29a      	uxth	r2, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059c8:	3b01      	subs	r3, #1
 80059ca:	b29a      	uxth	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d034      	beq.n	8005a44 <HAL_I2C_Master_Transmit+0x184>
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d130      	bne.n	8005a44 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	9300      	str	r3, [sp, #0]
 80059e6:	6a3b      	ldr	r3, [r7, #32]
 80059e8:	2200      	movs	r2, #0
 80059ea:	2180      	movs	r1, #128	; 0x80
 80059ec:	68f8      	ldr	r0, [r7, #12]
 80059ee:	f000 f975 	bl	8005cdc <I2C_WaitOnFlagUntilTimeout>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d001      	beq.n	80059fc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e04d      	b.n	8005a98 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	2bff      	cmp	r3, #255	; 0xff
 8005a04:	d90e      	bls.n	8005a24 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	22ff      	movs	r2, #255	; 0xff
 8005a0a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a10:	b2da      	uxtb	r2, r3
 8005a12:	8979      	ldrh	r1, [r7, #10]
 8005a14:	2300      	movs	r3, #0
 8005a16:	9300      	str	r3, [sp, #0]
 8005a18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f000 fb99 	bl	8006154 <I2C_TransferConfig>
 8005a22:	e00f      	b.n	8005a44 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a32:	b2da      	uxtb	r2, r3
 8005a34:	8979      	ldrh	r1, [r7, #10]
 8005a36:	2300      	movs	r3, #0
 8005a38:	9300      	str	r3, [sp, #0]
 8005a3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a3e:	68f8      	ldr	r0, [r7, #12]
 8005a40:	f000 fb88 	bl	8006154 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d19e      	bne.n	800598c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a4e:	697a      	ldr	r2, [r7, #20]
 8005a50:	6a39      	ldr	r1, [r7, #32]
 8005a52:	68f8      	ldr	r0, [r7, #12]
 8005a54:	f000 f9d8 	bl	8005e08 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d001      	beq.n	8005a62 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e01a      	b.n	8005a98 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2220      	movs	r2, #32
 8005a68:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	6859      	ldr	r1, [r3, #4]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	4b0b      	ldr	r3, [pc, #44]	; (8005aa4 <HAL_I2C_Master_Transmit+0x1e4>)
 8005a76:	400b      	ands	r3, r1
 8005a78:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2220      	movs	r2, #32
 8005a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005a92:	2300      	movs	r3, #0
 8005a94:	e000      	b.n	8005a98 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005a96:	2302      	movs	r3, #2
  }
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3718      	adds	r7, #24
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	80002000 	.word	0x80002000
 8005aa4:	fe00e800 	.word	0xfe00e800

08005aa8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b088      	sub	sp, #32
 8005aac:	af02      	add	r7, sp, #8
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	607a      	str	r2, [r7, #4]
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	817b      	strh	r3, [r7, #10]
 8005ab8:	4613      	mov	r3, r2
 8005aba:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	2b20      	cmp	r3, #32
 8005ac6:	f040 80db 	bne.w	8005c80 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d101      	bne.n	8005ad8 <HAL_I2C_Master_Receive+0x30>
 8005ad4:	2302      	movs	r3, #2
 8005ad6:	e0d4      	b.n	8005c82 <HAL_I2C_Master_Receive+0x1da>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005ae0:	f7fc f8ec 	bl	8001cbc <HAL_GetTick>
 8005ae4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	9300      	str	r3, [sp, #0]
 8005aea:	2319      	movs	r3, #25
 8005aec:	2201      	movs	r2, #1
 8005aee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	f000 f8f2 	bl	8005cdc <I2C_WaitOnFlagUntilTimeout>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d001      	beq.n	8005b02 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e0bf      	b.n	8005c82 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2222      	movs	r2, #34	; 0x22
 8005b06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2210      	movs	r2, #16
 8005b0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2200      	movs	r2, #0
 8005b16:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	893a      	ldrh	r2, [r7, #8]
 8005b22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2200      	movs	r2, #0
 8005b28:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	2bff      	cmp	r3, #255	; 0xff
 8005b32:	d90e      	bls.n	8005b52 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	22ff      	movs	r2, #255	; 0xff
 8005b38:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b3e:	b2da      	uxtb	r2, r3
 8005b40:	8979      	ldrh	r1, [r7, #10]
 8005b42:	4b52      	ldr	r3, [pc, #328]	; (8005c8c <HAL_I2C_Master_Receive+0x1e4>)
 8005b44:	9300      	str	r3, [sp, #0]
 8005b46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f000 fb02 	bl	8006154 <I2C_TransferConfig>
 8005b50:	e06d      	b.n	8005c2e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b56:	b29a      	uxth	r2, r3
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b60:	b2da      	uxtb	r2, r3
 8005b62:	8979      	ldrh	r1, [r7, #10]
 8005b64:	4b49      	ldr	r3, [pc, #292]	; (8005c8c <HAL_I2C_Master_Receive+0x1e4>)
 8005b66:	9300      	str	r3, [sp, #0]
 8005b68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b6c:	68f8      	ldr	r0, [r7, #12]
 8005b6e:	f000 faf1 	bl	8006154 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005b72:	e05c      	b.n	8005c2e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	6a39      	ldr	r1, [r7, #32]
 8005b78:	68f8      	ldr	r0, [r7, #12]
 8005b7a:	f000 f989 	bl	8005e90 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d001      	beq.n	8005b88 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e07c      	b.n	8005c82 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b92:	b2d2      	uxtb	r2, r2
 8005b94:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9a:	1c5a      	adds	r2, r3, #1
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	3b01      	subs	r3, #1
 8005bb4:	b29a      	uxth	r2, r3
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d034      	beq.n	8005c2e <HAL_I2C_Master_Receive+0x186>
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d130      	bne.n	8005c2e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	9300      	str	r3, [sp, #0]
 8005bd0:	6a3b      	ldr	r3, [r7, #32]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	2180      	movs	r1, #128	; 0x80
 8005bd6:	68f8      	ldr	r0, [r7, #12]
 8005bd8:	f000 f880 	bl	8005cdc <I2C_WaitOnFlagUntilTimeout>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d001      	beq.n	8005be6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e04d      	b.n	8005c82 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	2bff      	cmp	r3, #255	; 0xff
 8005bee:	d90e      	bls.n	8005c0e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	22ff      	movs	r2, #255	; 0xff
 8005bf4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bfa:	b2da      	uxtb	r2, r3
 8005bfc:	8979      	ldrh	r1, [r7, #10]
 8005bfe:	2300      	movs	r3, #0
 8005c00:	9300      	str	r3, [sp, #0]
 8005c02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005c06:	68f8      	ldr	r0, [r7, #12]
 8005c08:	f000 faa4 	bl	8006154 <I2C_TransferConfig>
 8005c0c:	e00f      	b.n	8005c2e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c12:	b29a      	uxth	r2, r3
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c1c:	b2da      	uxtb	r2, r3
 8005c1e:	8979      	ldrh	r1, [r7, #10]
 8005c20:	2300      	movs	r3, #0
 8005c22:	9300      	str	r3, [sp, #0]
 8005c24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	f000 fa93 	bl	8006154 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d19d      	bne.n	8005b74 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	6a39      	ldr	r1, [r7, #32]
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f000 f8e3 	bl	8005e08 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d001      	beq.n	8005c4c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e01a      	b.n	8005c82 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2220      	movs	r2, #32
 8005c52:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	6859      	ldr	r1, [r3, #4]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	4b0c      	ldr	r3, [pc, #48]	; (8005c90 <HAL_I2C_Master_Receive+0x1e8>)
 8005c60:	400b      	ands	r3, r1
 8005c62:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2220      	movs	r2, #32
 8005c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	e000      	b.n	8005c82 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005c80:	2302      	movs	r3, #2
  }
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3718      	adds	r7, #24
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	80002400 	.word	0x80002400
 8005c90:	fe00e800 	.word	0xfe00e800

08005c94 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	f003 0302 	and.w	r3, r3, #2
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	d103      	bne.n	8005cb2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	699b      	ldr	r3, [r3, #24]
 8005cb8:	f003 0301 	and.w	r3, r3, #1
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d007      	beq.n	8005cd0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	699a      	ldr	r2, [r3, #24]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f042 0201 	orr.w	r2, r2, #1
 8005cce:	619a      	str	r2, [r3, #24]
  }
}
 8005cd0:	bf00      	nop
 8005cd2:	370c      	adds	r7, #12
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	603b      	str	r3, [r7, #0]
 8005ce8:	4613      	mov	r3, r2
 8005cea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005cec:	e031      	b.n	8005d52 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf4:	d02d      	beq.n	8005d52 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cf6:	f7fb ffe1 	bl	8001cbc <HAL_GetTick>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	1ad3      	subs	r3, r2, r3
 8005d00:	683a      	ldr	r2, [r7, #0]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d302      	bcc.n	8005d0c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d122      	bne.n	8005d52 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	699a      	ldr	r2, [r3, #24]
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	4013      	ands	r3, r2
 8005d16:	68ba      	ldr	r2, [r7, #8]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	bf0c      	ite	eq
 8005d1c:	2301      	moveq	r3, #1
 8005d1e:	2300      	movne	r3, #0
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	461a      	mov	r2, r3
 8005d24:	79fb      	ldrb	r3, [r7, #7]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d113      	bne.n	8005d52 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d2e:	f043 0220 	orr.w	r2, r3, #32
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2220      	movs	r2, #32
 8005d3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e00f      	b.n	8005d72 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	699a      	ldr	r2, [r3, #24]
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	68ba      	ldr	r2, [r7, #8]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	bf0c      	ite	eq
 8005d62:	2301      	moveq	r3, #1
 8005d64:	2300      	movne	r3, #0
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	461a      	mov	r2, r3
 8005d6a:	79fb      	ldrb	r3, [r7, #7]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d0be      	beq.n	8005cee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d70:	2300      	movs	r3, #0
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3710      	adds	r7, #16
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}

08005d7a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005d7a:	b580      	push	{r7, lr}
 8005d7c:	b084      	sub	sp, #16
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	60f8      	str	r0, [r7, #12]
 8005d82:	60b9      	str	r1, [r7, #8]
 8005d84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005d86:	e033      	b.n	8005df0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	68b9      	ldr	r1, [r7, #8]
 8005d8c:	68f8      	ldr	r0, [r7, #12]
 8005d8e:	f000 f901 	bl	8005f94 <I2C_IsErrorOccurred>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d001      	beq.n	8005d9c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e031      	b.n	8005e00 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da2:	d025      	beq.n	8005df0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005da4:	f7fb ff8a 	bl	8001cbc <HAL_GetTick>
 8005da8:	4602      	mov	r2, r0
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	68ba      	ldr	r2, [r7, #8]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d302      	bcc.n	8005dba <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d11a      	bne.n	8005df0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	699b      	ldr	r3, [r3, #24]
 8005dc0:	f003 0302 	and.w	r3, r3, #2
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	d013      	beq.n	8005df0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dcc:	f043 0220 	orr.w	r2, r3, #32
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2220      	movs	r2, #32
 8005dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e007      	b.n	8005e00 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	f003 0302 	and.w	r3, r3, #2
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d1c4      	bne.n	8005d88 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3710      	adds	r7, #16
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e14:	e02f      	b.n	8005e76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	68b9      	ldr	r1, [r7, #8]
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	f000 f8ba 	bl	8005f94 <I2C_IsErrorOccurred>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d001      	beq.n	8005e2a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e02d      	b.n	8005e86 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e2a:	f7fb ff47 	bl	8001cbc <HAL_GetTick>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	1ad3      	subs	r3, r2, r3
 8005e34:	68ba      	ldr	r2, [r7, #8]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d302      	bcc.n	8005e40 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d11a      	bne.n	8005e76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	699b      	ldr	r3, [r3, #24]
 8005e46:	f003 0320 	and.w	r3, r3, #32
 8005e4a:	2b20      	cmp	r3, #32
 8005e4c:	d013      	beq.n	8005e76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e52:	f043 0220 	orr.w	r2, r3, #32
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2220      	movs	r2, #32
 8005e5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e007      	b.n	8005e86 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	f003 0320 	and.w	r3, r3, #32
 8005e80:	2b20      	cmp	r3, #32
 8005e82:	d1c8      	bne.n	8005e16 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
	...

08005e90 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e9c:	e06b      	b.n	8005f76 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	68b9      	ldr	r1, [r7, #8]
 8005ea2:	68f8      	ldr	r0, [r7, #12]
 8005ea4:	f000 f876 	bl	8005f94 <I2C_IsErrorOccurred>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d001      	beq.n	8005eb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e069      	b.n	8005f86 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	699b      	ldr	r3, [r3, #24]
 8005eb8:	f003 0320 	and.w	r3, r3, #32
 8005ebc:	2b20      	cmp	r3, #32
 8005ebe:	d138      	bne.n	8005f32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	699b      	ldr	r3, [r3, #24]
 8005ec6:	f003 0304 	and.w	r3, r3, #4
 8005eca:	2b04      	cmp	r3, #4
 8005ecc:	d105      	bne.n	8005eda <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d001      	beq.n	8005eda <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	e055      	b.n	8005f86 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	699b      	ldr	r3, [r3, #24]
 8005ee0:	f003 0310 	and.w	r3, r3, #16
 8005ee4:	2b10      	cmp	r3, #16
 8005ee6:	d107      	bne.n	8005ef8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2210      	movs	r2, #16
 8005eee:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2204      	movs	r2, #4
 8005ef4:	645a      	str	r2, [r3, #68]	; 0x44
 8005ef6:	e002      	b.n	8005efe <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2200      	movs	r2, #0
 8005efc:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2220      	movs	r2, #32
 8005f04:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	6859      	ldr	r1, [r3, #4]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	4b1f      	ldr	r3, [pc, #124]	; (8005f90 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8005f12:	400b      	ands	r3, r1
 8005f14:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2220      	movs	r2, #32
 8005f1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e029      	b.n	8005f86 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f32:	f7fb fec3 	bl	8001cbc <HAL_GetTick>
 8005f36:	4602      	mov	r2, r0
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	1ad3      	subs	r3, r2, r3
 8005f3c:	68ba      	ldr	r2, [r7, #8]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d302      	bcc.n	8005f48 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d116      	bne.n	8005f76 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	699b      	ldr	r3, [r3, #24]
 8005f4e:	f003 0304 	and.w	r3, r3, #4
 8005f52:	2b04      	cmp	r3, #4
 8005f54:	d00f      	beq.n	8005f76 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f5a:	f043 0220 	orr.w	r2, r3, #32
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2220      	movs	r2, #32
 8005f66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e007      	b.n	8005f86 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	699b      	ldr	r3, [r3, #24]
 8005f7c:	f003 0304 	and.w	r3, r3, #4
 8005f80:	2b04      	cmp	r3, #4
 8005f82:	d18c      	bne.n	8005e9e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3710      	adds	r7, #16
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	fe00e800 	.word	0xfe00e800

08005f94 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b08a      	sub	sp, #40	; 0x28
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	699b      	ldr	r3, [r3, #24]
 8005fac:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	f003 0310 	and.w	r3, r3, #16
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d068      	beq.n	8006092 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2210      	movs	r2, #16
 8005fc6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005fc8:	e049      	b.n	800605e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd0:	d045      	beq.n	800605e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005fd2:	f7fb fe73 	bl	8001cbc <HAL_GetTick>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	68ba      	ldr	r2, [r7, #8]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d302      	bcc.n	8005fe8 <I2C_IsErrorOccurred+0x54>
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d13a      	bne.n	800605e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ff2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005ffa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	699b      	ldr	r3, [r3, #24]
 8006002:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006006:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800600a:	d121      	bne.n	8006050 <I2C_IsErrorOccurred+0xbc>
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006012:	d01d      	beq.n	8006050 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006014:	7cfb      	ldrb	r3, [r7, #19]
 8006016:	2b20      	cmp	r3, #32
 8006018:	d01a      	beq.n	8006050 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	685a      	ldr	r2, [r3, #4]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006028:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800602a:	f7fb fe47 	bl	8001cbc <HAL_GetTick>
 800602e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006030:	e00e      	b.n	8006050 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006032:	f7fb fe43 	bl	8001cbc <HAL_GetTick>
 8006036:	4602      	mov	r2, r0
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	1ad3      	subs	r3, r2, r3
 800603c:	2b19      	cmp	r3, #25
 800603e:	d907      	bls.n	8006050 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006040:	6a3b      	ldr	r3, [r7, #32]
 8006042:	f043 0320 	orr.w	r3, r3, #32
 8006046:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800604e:	e006      	b.n	800605e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	699b      	ldr	r3, [r3, #24]
 8006056:	f003 0320 	and.w	r3, r3, #32
 800605a:	2b20      	cmp	r3, #32
 800605c:	d1e9      	bne.n	8006032 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	699b      	ldr	r3, [r3, #24]
 8006064:	f003 0320 	and.w	r3, r3, #32
 8006068:	2b20      	cmp	r3, #32
 800606a:	d003      	beq.n	8006074 <I2C_IsErrorOccurred+0xe0>
 800606c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006070:	2b00      	cmp	r3, #0
 8006072:	d0aa      	beq.n	8005fca <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006074:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006078:	2b00      	cmp	r3, #0
 800607a:	d103      	bne.n	8006084 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2220      	movs	r2, #32
 8006082:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006084:	6a3b      	ldr	r3, [r7, #32]
 8006086:	f043 0304 	orr.w	r3, r3, #4
 800608a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	699b      	ldr	r3, [r3, #24]
 8006098:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d00b      	beq.n	80060bc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80060a4:	6a3b      	ldr	r3, [r7, #32]
 80060a6:	f043 0301 	orr.w	r3, r3, #1
 80060aa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80060b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00b      	beq.n	80060de <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80060c6:	6a3b      	ldr	r3, [r7, #32]
 80060c8:	f043 0308 	orr.w	r3, r3, #8
 80060cc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80060d6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d00b      	beq.n	8006100 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80060e8:	6a3b      	ldr	r3, [r7, #32]
 80060ea:	f043 0302 	orr.w	r3, r3, #2
 80060ee:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006100:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006104:	2b00      	cmp	r3, #0
 8006106:	d01c      	beq.n	8006142 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006108:	68f8      	ldr	r0, [r7, #12]
 800610a:	f7ff fdc3 	bl	8005c94 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	6859      	ldr	r1, [r3, #4]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	4b0d      	ldr	r3, [pc, #52]	; (8006150 <I2C_IsErrorOccurred+0x1bc>)
 800611a:	400b      	ands	r3, r1
 800611c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006122:	6a3b      	ldr	r3, [r7, #32]
 8006124:	431a      	orrs	r2, r3
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2220      	movs	r2, #32
 800612e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2200      	movs	r2, #0
 800613e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006142:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006146:	4618      	mov	r0, r3
 8006148:	3728      	adds	r7, #40	; 0x28
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	fe00e800 	.word	0xfe00e800

08006154 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006154:	b480      	push	{r7}
 8006156:	b087      	sub	sp, #28
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	607b      	str	r3, [r7, #4]
 800615e:	460b      	mov	r3, r1
 8006160:	817b      	strh	r3, [r7, #10]
 8006162:	4613      	mov	r3, r2
 8006164:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006166:	897b      	ldrh	r3, [r7, #10]
 8006168:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800616c:	7a7b      	ldrb	r3, [r7, #9]
 800616e:	041b      	lsls	r3, r3, #16
 8006170:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006174:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800617a:	6a3b      	ldr	r3, [r7, #32]
 800617c:	4313      	orrs	r3, r2
 800617e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006182:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	685a      	ldr	r2, [r3, #4]
 800618a:	6a3b      	ldr	r3, [r7, #32]
 800618c:	0d5b      	lsrs	r3, r3, #21
 800618e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006192:	4b08      	ldr	r3, [pc, #32]	; (80061b4 <I2C_TransferConfig+0x60>)
 8006194:	430b      	orrs	r3, r1
 8006196:	43db      	mvns	r3, r3
 8006198:	ea02 0103 	and.w	r1, r2, r3
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	697a      	ldr	r2, [r7, #20]
 80061a2:	430a      	orrs	r2, r1
 80061a4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80061a6:	bf00      	nop
 80061a8:	371c      	adds	r7, #28
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	03ff63ff 	.word	0x03ff63ff

080061b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	2b20      	cmp	r3, #32
 80061cc:	d138      	bne.n	8006240 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d101      	bne.n	80061dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80061d8:	2302      	movs	r3, #2
 80061da:	e032      	b.n	8006242 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2224      	movs	r2, #36	; 0x24
 80061e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f022 0201 	bic.w	r2, r2, #1
 80061fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800620a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	6819      	ldr	r1, [r3, #0]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	683a      	ldr	r2, [r7, #0]
 8006218:	430a      	orrs	r2, r1
 800621a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f042 0201 	orr.w	r2, r2, #1
 800622a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2220      	movs	r2, #32
 8006230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800623c:	2300      	movs	r3, #0
 800623e:	e000      	b.n	8006242 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006240:	2302      	movs	r3, #2
  }
}
 8006242:	4618      	mov	r0, r3
 8006244:	370c      	adds	r7, #12
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr

0800624e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800624e:	b480      	push	{r7}
 8006250:	b085      	sub	sp, #20
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
 8006256:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800625e:	b2db      	uxtb	r3, r3
 8006260:	2b20      	cmp	r3, #32
 8006262:	d139      	bne.n	80062d8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800626a:	2b01      	cmp	r3, #1
 800626c:	d101      	bne.n	8006272 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800626e:	2302      	movs	r3, #2
 8006270:	e033      	b.n	80062da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2201      	movs	r2, #1
 8006276:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2224      	movs	r2, #36	; 0x24
 800627e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f022 0201 	bic.w	r2, r2, #1
 8006290:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80062a0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	021b      	lsls	r3, r3, #8
 80062a6:	68fa      	ldr	r2, [r7, #12]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f042 0201 	orr.w	r2, r2, #1
 80062c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2220      	movs	r2, #32
 80062c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80062d4:	2300      	movs	r3, #0
 80062d6:	e000      	b.n	80062da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80062d8:	2302      	movs	r3, #2
  }
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3714      	adds	r7, #20
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr
	...

080062e8 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b085      	sub	sp, #20
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062f0:	4b0d      	ldr	r3, [pc, #52]	; (8006328 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80062f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80062f6:	4a0c      	ldr	r2, [pc, #48]	; (8006328 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80062f8:	f043 0302 	orr.w	r3, r3, #2
 80062fc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006300:	4b09      	ldr	r3, [pc, #36]	; (8006328 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8006302:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006306:	f003 0302 	and.w	r3, r3, #2
 800630a:	60fb      	str	r3, [r7, #12]
 800630c:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800630e:	4b07      	ldr	r3, [pc, #28]	; (800632c <HAL_I2CEx_EnableFastModePlus+0x44>)
 8006310:	685a      	ldr	r2, [r3, #4]
 8006312:	4906      	ldr	r1, [pc, #24]	; (800632c <HAL_I2CEx_EnableFastModePlus+0x44>)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4313      	orrs	r3, r2
 8006318:	604b      	str	r3, [r1, #4]
}
 800631a:	bf00      	nop
 800631c:	3714      	adds	r7, #20
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop
 8006328:	58024400 	.word	0x58024400
 800632c:	58000400 	.word	0x58000400

08006330 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006332:	b08f      	sub	sp, #60	; 0x3c
 8006334:	af0a      	add	r7, sp, #40	; 0x28
 8006336:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d101      	bne.n	8006342 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e116      	b.n	8006570 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800634e:	b2db      	uxtb	r3, r3
 8006350:	2b00      	cmp	r3, #0
 8006352:	d106      	bne.n	8006362 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f7fb fbb7 	bl	8001ad0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2203      	movs	r2, #3
 8006366:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800636e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006372:	2b00      	cmp	r3, #0
 8006374:	d102      	bne.n	800637c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4618      	mov	r0, r3
 8006382:	f006 fa29 	bl	800c7d8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	603b      	str	r3, [r7, #0]
 800638c:	687e      	ldr	r6, [r7, #4]
 800638e:	466d      	mov	r5, sp
 8006390:	f106 0410 	add.w	r4, r6, #16
 8006394:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006396:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006398:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800639a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800639c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80063a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80063a4:	1d33      	adds	r3, r6, #4
 80063a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80063a8:	6838      	ldr	r0, [r7, #0]
 80063aa:	f006 f9a7 	bl	800c6fc <USB_CoreInit>
 80063ae:	4603      	mov	r3, r0
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d005      	beq.n	80063c0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2202      	movs	r2, #2
 80063b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	e0d7      	b.n	8006570 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2100      	movs	r1, #0
 80063c6:	4618      	mov	r0, r3
 80063c8:	f006 fa17 	bl	800c7fa <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80063cc:	2300      	movs	r3, #0
 80063ce:	73fb      	strb	r3, [r7, #15]
 80063d0:	e04a      	b.n	8006468 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80063d2:	7bfa      	ldrb	r2, [r7, #15]
 80063d4:	6879      	ldr	r1, [r7, #4]
 80063d6:	4613      	mov	r3, r2
 80063d8:	00db      	lsls	r3, r3, #3
 80063da:	4413      	add	r3, r2
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	440b      	add	r3, r1
 80063e0:	333d      	adds	r3, #61	; 0x3d
 80063e2:	2201      	movs	r2, #1
 80063e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80063e6:	7bfa      	ldrb	r2, [r7, #15]
 80063e8:	6879      	ldr	r1, [r7, #4]
 80063ea:	4613      	mov	r3, r2
 80063ec:	00db      	lsls	r3, r3, #3
 80063ee:	4413      	add	r3, r2
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	440b      	add	r3, r1
 80063f4:	333c      	adds	r3, #60	; 0x3c
 80063f6:	7bfa      	ldrb	r2, [r7, #15]
 80063f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80063fa:	7bfa      	ldrb	r2, [r7, #15]
 80063fc:	7bfb      	ldrb	r3, [r7, #15]
 80063fe:	b298      	uxth	r0, r3
 8006400:	6879      	ldr	r1, [r7, #4]
 8006402:	4613      	mov	r3, r2
 8006404:	00db      	lsls	r3, r3, #3
 8006406:	4413      	add	r3, r2
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	440b      	add	r3, r1
 800640c:	3356      	adds	r3, #86	; 0x56
 800640e:	4602      	mov	r2, r0
 8006410:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006412:	7bfa      	ldrb	r2, [r7, #15]
 8006414:	6879      	ldr	r1, [r7, #4]
 8006416:	4613      	mov	r3, r2
 8006418:	00db      	lsls	r3, r3, #3
 800641a:	4413      	add	r3, r2
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	440b      	add	r3, r1
 8006420:	3340      	adds	r3, #64	; 0x40
 8006422:	2200      	movs	r2, #0
 8006424:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006426:	7bfa      	ldrb	r2, [r7, #15]
 8006428:	6879      	ldr	r1, [r7, #4]
 800642a:	4613      	mov	r3, r2
 800642c:	00db      	lsls	r3, r3, #3
 800642e:	4413      	add	r3, r2
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	440b      	add	r3, r1
 8006434:	3344      	adds	r3, #68	; 0x44
 8006436:	2200      	movs	r2, #0
 8006438:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800643a:	7bfa      	ldrb	r2, [r7, #15]
 800643c:	6879      	ldr	r1, [r7, #4]
 800643e:	4613      	mov	r3, r2
 8006440:	00db      	lsls	r3, r3, #3
 8006442:	4413      	add	r3, r2
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	440b      	add	r3, r1
 8006448:	3348      	adds	r3, #72	; 0x48
 800644a:	2200      	movs	r2, #0
 800644c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800644e:	7bfa      	ldrb	r2, [r7, #15]
 8006450:	6879      	ldr	r1, [r7, #4]
 8006452:	4613      	mov	r3, r2
 8006454:	00db      	lsls	r3, r3, #3
 8006456:	4413      	add	r3, r2
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	440b      	add	r3, r1
 800645c:	334c      	adds	r3, #76	; 0x4c
 800645e:	2200      	movs	r2, #0
 8006460:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006462:	7bfb      	ldrb	r3, [r7, #15]
 8006464:	3301      	adds	r3, #1
 8006466:	73fb      	strb	r3, [r7, #15]
 8006468:	7bfa      	ldrb	r2, [r7, #15]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	429a      	cmp	r2, r3
 8006470:	d3af      	bcc.n	80063d2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006472:	2300      	movs	r3, #0
 8006474:	73fb      	strb	r3, [r7, #15]
 8006476:	e044      	b.n	8006502 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006478:	7bfa      	ldrb	r2, [r7, #15]
 800647a:	6879      	ldr	r1, [r7, #4]
 800647c:	4613      	mov	r3, r2
 800647e:	00db      	lsls	r3, r3, #3
 8006480:	4413      	add	r3, r2
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	440b      	add	r3, r1
 8006486:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800648a:	2200      	movs	r2, #0
 800648c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800648e:	7bfa      	ldrb	r2, [r7, #15]
 8006490:	6879      	ldr	r1, [r7, #4]
 8006492:	4613      	mov	r3, r2
 8006494:	00db      	lsls	r3, r3, #3
 8006496:	4413      	add	r3, r2
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	440b      	add	r3, r1
 800649c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80064a0:	7bfa      	ldrb	r2, [r7, #15]
 80064a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80064a4:	7bfa      	ldrb	r2, [r7, #15]
 80064a6:	6879      	ldr	r1, [r7, #4]
 80064a8:	4613      	mov	r3, r2
 80064aa:	00db      	lsls	r3, r3, #3
 80064ac:	4413      	add	r3, r2
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	440b      	add	r3, r1
 80064b2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80064b6:	2200      	movs	r2, #0
 80064b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80064ba:	7bfa      	ldrb	r2, [r7, #15]
 80064bc:	6879      	ldr	r1, [r7, #4]
 80064be:	4613      	mov	r3, r2
 80064c0:	00db      	lsls	r3, r3, #3
 80064c2:	4413      	add	r3, r2
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	440b      	add	r3, r1
 80064c8:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80064cc:	2200      	movs	r2, #0
 80064ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80064d0:	7bfa      	ldrb	r2, [r7, #15]
 80064d2:	6879      	ldr	r1, [r7, #4]
 80064d4:	4613      	mov	r3, r2
 80064d6:	00db      	lsls	r3, r3, #3
 80064d8:	4413      	add	r3, r2
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	440b      	add	r3, r1
 80064de:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80064e2:	2200      	movs	r2, #0
 80064e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80064e6:	7bfa      	ldrb	r2, [r7, #15]
 80064e8:	6879      	ldr	r1, [r7, #4]
 80064ea:	4613      	mov	r3, r2
 80064ec:	00db      	lsls	r3, r3, #3
 80064ee:	4413      	add	r3, r2
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	440b      	add	r3, r1
 80064f4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80064f8:	2200      	movs	r2, #0
 80064fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80064fc:	7bfb      	ldrb	r3, [r7, #15]
 80064fe:	3301      	adds	r3, #1
 8006500:	73fb      	strb	r3, [r7, #15]
 8006502:	7bfa      	ldrb	r2, [r7, #15]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	429a      	cmp	r2, r3
 800650a:	d3b5      	bcc.n	8006478 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	603b      	str	r3, [r7, #0]
 8006512:	687e      	ldr	r6, [r7, #4]
 8006514:	466d      	mov	r5, sp
 8006516:	f106 0410 	add.w	r4, r6, #16
 800651a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800651c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800651e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006520:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006522:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006526:	e885 0003 	stmia.w	r5, {r0, r1}
 800652a:	1d33      	adds	r3, r6, #4
 800652c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800652e:	6838      	ldr	r0, [r7, #0]
 8006530:	f006 f9b0 	bl	800c894 <USB_DevInit>
 8006534:	4603      	mov	r3, r0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d005      	beq.n	8006546 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2202      	movs	r2, #2
 800653e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e014      	b.n	8006570 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2201      	movs	r2, #1
 8006552:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655a:	2b01      	cmp	r3, #1
 800655c:	d102      	bne.n	8006564 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 f80a 	bl	8006578 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4618      	mov	r0, r3
 800656a:	f006 fb6e 	bl	800cc4a <USB_DevDisconnect>

  return HAL_OK;
 800656e:	2300      	movs	r3, #0
}
 8006570:	4618      	mov	r0, r3
 8006572:	3714      	adds	r7, #20
 8006574:	46bd      	mov	sp, r7
 8006576:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006578 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006578:	b480      	push	{r7}
 800657a:	b085      	sub	sp, #20
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2201      	movs	r2, #1
 800658a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065a6:	4b05      	ldr	r3, [pc, #20]	; (80065bc <HAL_PCDEx_ActivateLPM+0x44>)
 80065a8:	4313      	orrs	r3, r2
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3714      	adds	r7, #20
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr
 80065bc:	10000003 	.word	0x10000003

080065c0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80065c8:	4b19      	ldr	r3, [pc, #100]	; (8006630 <HAL_PWREx_ConfigSupply+0x70>)
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	f003 0304 	and.w	r3, r3, #4
 80065d0:	2b04      	cmp	r3, #4
 80065d2:	d00a      	beq.n	80065ea <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80065d4:	4b16      	ldr	r3, [pc, #88]	; (8006630 <HAL_PWREx_ConfigSupply+0x70>)
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	f003 0307 	and.w	r3, r3, #7
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	429a      	cmp	r2, r3
 80065e0:	d001      	beq.n	80065e6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e01f      	b.n	8006626 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80065e6:	2300      	movs	r3, #0
 80065e8:	e01d      	b.n	8006626 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80065ea:	4b11      	ldr	r3, [pc, #68]	; (8006630 <HAL_PWREx_ConfigSupply+0x70>)
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	f023 0207 	bic.w	r2, r3, #7
 80065f2:	490f      	ldr	r1, [pc, #60]	; (8006630 <HAL_PWREx_ConfigSupply+0x70>)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80065fa:	f7fb fb5f 	bl	8001cbc <HAL_GetTick>
 80065fe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006600:	e009      	b.n	8006616 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006602:	f7fb fb5b 	bl	8001cbc <HAL_GetTick>
 8006606:	4602      	mov	r2, r0
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	1ad3      	subs	r3, r2, r3
 800660c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006610:	d901      	bls.n	8006616 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e007      	b.n	8006626 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006616:	4b06      	ldr	r3, [pc, #24]	; (8006630 <HAL_PWREx_ConfigSupply+0x70>)
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800661e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006622:	d1ee      	bne.n	8006602 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3710      	adds	r7, #16
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	58024800 	.word	0x58024800

08006634 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006634:	b480      	push	{r7}
 8006636:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006638:	4b05      	ldr	r3, [pc, #20]	; (8006650 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	4a04      	ldr	r2, [pc, #16]	; (8006650 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800663e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006642:	60d3      	str	r3, [r2, #12]
}
 8006644:	bf00      	nop
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop
 8006650:	58024800 	.word	0x58024800

08006654 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b08c      	sub	sp, #48	; 0x30
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d102      	bne.n	8006668 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	f000 bc48 	b.w	8006ef8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 0301 	and.w	r3, r3, #1
 8006670:	2b00      	cmp	r3, #0
 8006672:	f000 8088 	beq.w	8006786 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006676:	4b99      	ldr	r3, [pc, #612]	; (80068dc <HAL_RCC_OscConfig+0x288>)
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800667e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006680:	4b96      	ldr	r3, [pc, #600]	; (80068dc <HAL_RCC_OscConfig+0x288>)
 8006682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006684:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006688:	2b10      	cmp	r3, #16
 800668a:	d007      	beq.n	800669c <HAL_RCC_OscConfig+0x48>
 800668c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668e:	2b18      	cmp	r3, #24
 8006690:	d111      	bne.n	80066b6 <HAL_RCC_OscConfig+0x62>
 8006692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006694:	f003 0303 	and.w	r3, r3, #3
 8006698:	2b02      	cmp	r3, #2
 800669a:	d10c      	bne.n	80066b6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800669c:	4b8f      	ldr	r3, [pc, #572]	; (80068dc <HAL_RCC_OscConfig+0x288>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d06d      	beq.n	8006784 <HAL_RCC_OscConfig+0x130>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d169      	bne.n	8006784 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	f000 bc21 	b.w	8006ef8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066be:	d106      	bne.n	80066ce <HAL_RCC_OscConfig+0x7a>
 80066c0:	4b86      	ldr	r3, [pc, #536]	; (80068dc <HAL_RCC_OscConfig+0x288>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a85      	ldr	r2, [pc, #532]	; (80068dc <HAL_RCC_OscConfig+0x288>)
 80066c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066ca:	6013      	str	r3, [r2, #0]
 80066cc:	e02e      	b.n	800672c <HAL_RCC_OscConfig+0xd8>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d10c      	bne.n	80066f0 <HAL_RCC_OscConfig+0x9c>
 80066d6:	4b81      	ldr	r3, [pc, #516]	; (80068dc <HAL_RCC_OscConfig+0x288>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a80      	ldr	r2, [pc, #512]	; (80068dc <HAL_RCC_OscConfig+0x288>)
 80066dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066e0:	6013      	str	r3, [r2, #0]
 80066e2:	4b7e      	ldr	r3, [pc, #504]	; (80068dc <HAL_RCC_OscConfig+0x288>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a7d      	ldr	r2, [pc, #500]	; (80068dc <HAL_RCC_OscConfig+0x288>)
 80066e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80066ec:	6013      	str	r3, [r2, #0]
 80066ee:	e01d      	b.n	800672c <HAL_RCC_OscConfig+0xd8>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066f8:	d10c      	bne.n	8006714 <HAL_RCC_OscConfig+0xc0>
 80066fa:	4b78      	ldr	r3, [pc, #480]	; (80068dc <HAL_RCC_OscConfig+0x288>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a77      	ldr	r2, [pc, #476]	; (80068dc <HAL_RCC_OscConfig+0x288>)
 8006700:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006704:	6013      	str	r3, [r2, #0]
 8006706:	4b75      	ldr	r3, [pc, #468]	; (80068dc <HAL_RCC_OscConfig+0x288>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a74      	ldr	r2, [pc, #464]	; (80068dc <HAL_RCC_OscConfig+0x288>)
 800670c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006710:	6013      	str	r3, [r2, #0]
 8006712:	e00b      	b.n	800672c <HAL_RCC_OscConfig+0xd8>
 8006714:	4b71      	ldr	r3, [pc, #452]	; (80068dc <HAL_RCC_OscConfig+0x288>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a70      	ldr	r2, [pc, #448]	; (80068dc <HAL_RCC_OscConfig+0x288>)
 800671a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800671e:	6013      	str	r3, [r2, #0]
 8006720:	4b6e      	ldr	r3, [pc, #440]	; (80068dc <HAL_RCC_OscConfig+0x288>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a6d      	ldr	r2, [pc, #436]	; (80068dc <HAL_RCC_OscConfig+0x288>)
 8006726:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800672a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d013      	beq.n	800675c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006734:	f7fb fac2 	bl	8001cbc <HAL_GetTick>
 8006738:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800673a:	e008      	b.n	800674e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800673c:	f7fb fabe 	bl	8001cbc <HAL_GetTick>
 8006740:	4602      	mov	r2, r0
 8006742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	2b64      	cmp	r3, #100	; 0x64
 8006748:	d901      	bls.n	800674e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800674a:	2303      	movs	r3, #3
 800674c:	e3d4      	b.n	8006ef8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800674e:	4b63      	ldr	r3, [pc, #396]	; (80068dc <HAL_RCC_OscConfig+0x288>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006756:	2b00      	cmp	r3, #0
 8006758:	d0f0      	beq.n	800673c <HAL_RCC_OscConfig+0xe8>
 800675a:	e014      	b.n	8006786 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800675c:	f7fb faae 	bl	8001cbc <HAL_GetTick>
 8006760:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006762:	e008      	b.n	8006776 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006764:	f7fb faaa 	bl	8001cbc <HAL_GetTick>
 8006768:	4602      	mov	r2, r0
 800676a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	2b64      	cmp	r3, #100	; 0x64
 8006770:	d901      	bls.n	8006776 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006772:	2303      	movs	r3, #3
 8006774:	e3c0      	b.n	8006ef8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006776:	4b59      	ldr	r3, [pc, #356]	; (80068dc <HAL_RCC_OscConfig+0x288>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800677e:	2b00      	cmp	r3, #0
 8006780:	d1f0      	bne.n	8006764 <HAL_RCC_OscConfig+0x110>
 8006782:	e000      	b.n	8006786 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006784:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 0302 	and.w	r3, r3, #2
 800678e:	2b00      	cmp	r3, #0
 8006790:	f000 80ca 	beq.w	8006928 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006794:	4b51      	ldr	r3, [pc, #324]	; (80068dc <HAL_RCC_OscConfig+0x288>)
 8006796:	691b      	ldr	r3, [r3, #16]
 8006798:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800679c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800679e:	4b4f      	ldr	r3, [pc, #316]	; (80068dc <HAL_RCC_OscConfig+0x288>)
 80067a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80067a4:	6a3b      	ldr	r3, [r7, #32]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d007      	beq.n	80067ba <HAL_RCC_OscConfig+0x166>
 80067aa:	6a3b      	ldr	r3, [r7, #32]
 80067ac:	2b18      	cmp	r3, #24
 80067ae:	d156      	bne.n	800685e <HAL_RCC_OscConfig+0x20a>
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	f003 0303 	and.w	r3, r3, #3
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d151      	bne.n	800685e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80067ba:	4b48      	ldr	r3, [pc, #288]	; (80068dc <HAL_RCC_OscConfig+0x288>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f003 0304 	and.w	r3, r3, #4
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d005      	beq.n	80067d2 <HAL_RCC_OscConfig+0x17e>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d101      	bne.n	80067d2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e392      	b.n	8006ef8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80067d2:	4b42      	ldr	r3, [pc, #264]	; (80068dc <HAL_RCC_OscConfig+0x288>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f023 0219 	bic.w	r2, r3, #25
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	493f      	ldr	r1, [pc, #252]	; (80068dc <HAL_RCC_OscConfig+0x288>)
 80067e0:	4313      	orrs	r3, r2
 80067e2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067e4:	f7fb fa6a 	bl	8001cbc <HAL_GetTick>
 80067e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80067ea:	e008      	b.n	80067fe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067ec:	f7fb fa66 	bl	8001cbc <HAL_GetTick>
 80067f0:	4602      	mov	r2, r0
 80067f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f4:	1ad3      	subs	r3, r2, r3
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	d901      	bls.n	80067fe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e37c      	b.n	8006ef8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80067fe:	4b37      	ldr	r3, [pc, #220]	; (80068dc <HAL_RCC_OscConfig+0x288>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 0304 	and.w	r3, r3, #4
 8006806:	2b00      	cmp	r3, #0
 8006808:	d0f0      	beq.n	80067ec <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800680a:	f7fb fa87 	bl	8001d1c <HAL_GetREVID>
 800680e:	4603      	mov	r3, r0
 8006810:	f241 0203 	movw	r2, #4099	; 0x1003
 8006814:	4293      	cmp	r3, r2
 8006816:	d817      	bhi.n	8006848 <HAL_RCC_OscConfig+0x1f4>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	691b      	ldr	r3, [r3, #16]
 800681c:	2b40      	cmp	r3, #64	; 0x40
 800681e:	d108      	bne.n	8006832 <HAL_RCC_OscConfig+0x1de>
 8006820:	4b2e      	ldr	r3, [pc, #184]	; (80068dc <HAL_RCC_OscConfig+0x288>)
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006828:	4a2c      	ldr	r2, [pc, #176]	; (80068dc <HAL_RCC_OscConfig+0x288>)
 800682a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800682e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006830:	e07a      	b.n	8006928 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006832:	4b2a      	ldr	r3, [pc, #168]	; (80068dc <HAL_RCC_OscConfig+0x288>)
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	031b      	lsls	r3, r3, #12
 8006840:	4926      	ldr	r1, [pc, #152]	; (80068dc <HAL_RCC_OscConfig+0x288>)
 8006842:	4313      	orrs	r3, r2
 8006844:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006846:	e06f      	b.n	8006928 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006848:	4b24      	ldr	r3, [pc, #144]	; (80068dc <HAL_RCC_OscConfig+0x288>)
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	691b      	ldr	r3, [r3, #16]
 8006854:	061b      	lsls	r3, r3, #24
 8006856:	4921      	ldr	r1, [pc, #132]	; (80068dc <HAL_RCC_OscConfig+0x288>)
 8006858:	4313      	orrs	r3, r2
 800685a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800685c:	e064      	b.n	8006928 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d047      	beq.n	80068f6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006866:	4b1d      	ldr	r3, [pc, #116]	; (80068dc <HAL_RCC_OscConfig+0x288>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f023 0219 	bic.w	r2, r3, #25
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	491a      	ldr	r1, [pc, #104]	; (80068dc <HAL_RCC_OscConfig+0x288>)
 8006874:	4313      	orrs	r3, r2
 8006876:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006878:	f7fb fa20 	bl	8001cbc <HAL_GetTick>
 800687c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800687e:	e008      	b.n	8006892 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006880:	f7fb fa1c 	bl	8001cbc <HAL_GetTick>
 8006884:	4602      	mov	r2, r0
 8006886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	2b02      	cmp	r3, #2
 800688c:	d901      	bls.n	8006892 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	e332      	b.n	8006ef8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006892:	4b12      	ldr	r3, [pc, #72]	; (80068dc <HAL_RCC_OscConfig+0x288>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 0304 	and.w	r3, r3, #4
 800689a:	2b00      	cmp	r3, #0
 800689c:	d0f0      	beq.n	8006880 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800689e:	f7fb fa3d 	bl	8001d1c <HAL_GetREVID>
 80068a2:	4603      	mov	r3, r0
 80068a4:	f241 0203 	movw	r2, #4099	; 0x1003
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d819      	bhi.n	80068e0 <HAL_RCC_OscConfig+0x28c>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	691b      	ldr	r3, [r3, #16]
 80068b0:	2b40      	cmp	r3, #64	; 0x40
 80068b2:	d108      	bne.n	80068c6 <HAL_RCC_OscConfig+0x272>
 80068b4:	4b09      	ldr	r3, [pc, #36]	; (80068dc <HAL_RCC_OscConfig+0x288>)
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80068bc:	4a07      	ldr	r2, [pc, #28]	; (80068dc <HAL_RCC_OscConfig+0x288>)
 80068be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068c2:	6053      	str	r3, [r2, #4]
 80068c4:	e030      	b.n	8006928 <HAL_RCC_OscConfig+0x2d4>
 80068c6:	4b05      	ldr	r3, [pc, #20]	; (80068dc <HAL_RCC_OscConfig+0x288>)
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	031b      	lsls	r3, r3, #12
 80068d4:	4901      	ldr	r1, [pc, #4]	; (80068dc <HAL_RCC_OscConfig+0x288>)
 80068d6:	4313      	orrs	r3, r2
 80068d8:	604b      	str	r3, [r1, #4]
 80068da:	e025      	b.n	8006928 <HAL_RCC_OscConfig+0x2d4>
 80068dc:	58024400 	.word	0x58024400
 80068e0:	4b9a      	ldr	r3, [pc, #616]	; (8006b4c <HAL_RCC_OscConfig+0x4f8>)
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	061b      	lsls	r3, r3, #24
 80068ee:	4997      	ldr	r1, [pc, #604]	; (8006b4c <HAL_RCC_OscConfig+0x4f8>)
 80068f0:	4313      	orrs	r3, r2
 80068f2:	604b      	str	r3, [r1, #4]
 80068f4:	e018      	b.n	8006928 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068f6:	4b95      	ldr	r3, [pc, #596]	; (8006b4c <HAL_RCC_OscConfig+0x4f8>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a94      	ldr	r2, [pc, #592]	; (8006b4c <HAL_RCC_OscConfig+0x4f8>)
 80068fc:	f023 0301 	bic.w	r3, r3, #1
 8006900:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006902:	f7fb f9db 	bl	8001cbc <HAL_GetTick>
 8006906:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006908:	e008      	b.n	800691c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800690a:	f7fb f9d7 	bl	8001cbc <HAL_GetTick>
 800690e:	4602      	mov	r2, r0
 8006910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	2b02      	cmp	r3, #2
 8006916:	d901      	bls.n	800691c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006918:	2303      	movs	r3, #3
 800691a:	e2ed      	b.n	8006ef8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800691c:	4b8b      	ldr	r3, [pc, #556]	; (8006b4c <HAL_RCC_OscConfig+0x4f8>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 0304 	and.w	r3, r3, #4
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1f0      	bne.n	800690a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 0310 	and.w	r3, r3, #16
 8006930:	2b00      	cmp	r3, #0
 8006932:	f000 80a9 	beq.w	8006a88 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006936:	4b85      	ldr	r3, [pc, #532]	; (8006b4c <HAL_RCC_OscConfig+0x4f8>)
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800693e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006940:	4b82      	ldr	r3, [pc, #520]	; (8006b4c <HAL_RCC_OscConfig+0x4f8>)
 8006942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006944:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006946:	69bb      	ldr	r3, [r7, #24]
 8006948:	2b08      	cmp	r3, #8
 800694a:	d007      	beq.n	800695c <HAL_RCC_OscConfig+0x308>
 800694c:	69bb      	ldr	r3, [r7, #24]
 800694e:	2b18      	cmp	r3, #24
 8006950:	d13a      	bne.n	80069c8 <HAL_RCC_OscConfig+0x374>
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	f003 0303 	and.w	r3, r3, #3
 8006958:	2b01      	cmp	r3, #1
 800695a:	d135      	bne.n	80069c8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800695c:	4b7b      	ldr	r3, [pc, #492]	; (8006b4c <HAL_RCC_OscConfig+0x4f8>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006964:	2b00      	cmp	r3, #0
 8006966:	d005      	beq.n	8006974 <HAL_RCC_OscConfig+0x320>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	69db      	ldr	r3, [r3, #28]
 800696c:	2b80      	cmp	r3, #128	; 0x80
 800696e:	d001      	beq.n	8006974 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	e2c1      	b.n	8006ef8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006974:	f7fb f9d2 	bl	8001d1c <HAL_GetREVID>
 8006978:	4603      	mov	r3, r0
 800697a:	f241 0203 	movw	r2, #4099	; 0x1003
 800697e:	4293      	cmp	r3, r2
 8006980:	d817      	bhi.n	80069b2 <HAL_RCC_OscConfig+0x35e>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a1b      	ldr	r3, [r3, #32]
 8006986:	2b20      	cmp	r3, #32
 8006988:	d108      	bne.n	800699c <HAL_RCC_OscConfig+0x348>
 800698a:	4b70      	ldr	r3, [pc, #448]	; (8006b4c <HAL_RCC_OscConfig+0x4f8>)
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006992:	4a6e      	ldr	r2, [pc, #440]	; (8006b4c <HAL_RCC_OscConfig+0x4f8>)
 8006994:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006998:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800699a:	e075      	b.n	8006a88 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800699c:	4b6b      	ldr	r3, [pc, #428]	; (8006b4c <HAL_RCC_OscConfig+0x4f8>)
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6a1b      	ldr	r3, [r3, #32]
 80069a8:	069b      	lsls	r3, r3, #26
 80069aa:	4968      	ldr	r1, [pc, #416]	; (8006b4c <HAL_RCC_OscConfig+0x4f8>)
 80069ac:	4313      	orrs	r3, r2
 80069ae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80069b0:	e06a      	b.n	8006a88 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80069b2:	4b66      	ldr	r3, [pc, #408]	; (8006b4c <HAL_RCC_OscConfig+0x4f8>)
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a1b      	ldr	r3, [r3, #32]
 80069be:	061b      	lsls	r3, r3, #24
 80069c0:	4962      	ldr	r1, [pc, #392]	; (8006b4c <HAL_RCC_OscConfig+0x4f8>)
 80069c2:	4313      	orrs	r3, r2
 80069c4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80069c6:	e05f      	b.n	8006a88 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	69db      	ldr	r3, [r3, #28]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d042      	beq.n	8006a56 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80069d0:	4b5e      	ldr	r3, [pc, #376]	; (8006b4c <HAL_RCC_OscConfig+0x4f8>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a5d      	ldr	r2, [pc, #372]	; (8006b4c <HAL_RCC_OscConfig+0x4f8>)
 80069d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069dc:	f7fb f96e 	bl	8001cbc <HAL_GetTick>
 80069e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80069e2:	e008      	b.n	80069f6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80069e4:	f7fb f96a 	bl	8001cbc <HAL_GetTick>
 80069e8:	4602      	mov	r2, r0
 80069ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	2b02      	cmp	r3, #2
 80069f0:	d901      	bls.n	80069f6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	e280      	b.n	8006ef8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80069f6:	4b55      	ldr	r3, [pc, #340]	; (8006b4c <HAL_RCC_OscConfig+0x4f8>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d0f0      	beq.n	80069e4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006a02:	f7fb f98b 	bl	8001d1c <HAL_GetREVID>
 8006a06:	4603      	mov	r3, r0
 8006a08:	f241 0203 	movw	r2, #4099	; 0x1003
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d817      	bhi.n	8006a40 <HAL_RCC_OscConfig+0x3ec>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6a1b      	ldr	r3, [r3, #32]
 8006a14:	2b20      	cmp	r3, #32
 8006a16:	d108      	bne.n	8006a2a <HAL_RCC_OscConfig+0x3d6>
 8006a18:	4b4c      	ldr	r3, [pc, #304]	; (8006b4c <HAL_RCC_OscConfig+0x4f8>)
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006a20:	4a4a      	ldr	r2, [pc, #296]	; (8006b4c <HAL_RCC_OscConfig+0x4f8>)
 8006a22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a26:	6053      	str	r3, [r2, #4]
 8006a28:	e02e      	b.n	8006a88 <HAL_RCC_OscConfig+0x434>
 8006a2a:	4b48      	ldr	r3, [pc, #288]	; (8006b4c <HAL_RCC_OscConfig+0x4f8>)
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6a1b      	ldr	r3, [r3, #32]
 8006a36:	069b      	lsls	r3, r3, #26
 8006a38:	4944      	ldr	r1, [pc, #272]	; (8006b4c <HAL_RCC_OscConfig+0x4f8>)
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	604b      	str	r3, [r1, #4]
 8006a3e:	e023      	b.n	8006a88 <HAL_RCC_OscConfig+0x434>
 8006a40:	4b42      	ldr	r3, [pc, #264]	; (8006b4c <HAL_RCC_OscConfig+0x4f8>)
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6a1b      	ldr	r3, [r3, #32]
 8006a4c:	061b      	lsls	r3, r3, #24
 8006a4e:	493f      	ldr	r1, [pc, #252]	; (8006b4c <HAL_RCC_OscConfig+0x4f8>)
 8006a50:	4313      	orrs	r3, r2
 8006a52:	60cb      	str	r3, [r1, #12]
 8006a54:	e018      	b.n	8006a88 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006a56:	4b3d      	ldr	r3, [pc, #244]	; (8006b4c <HAL_RCC_OscConfig+0x4f8>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a3c      	ldr	r2, [pc, #240]	; (8006b4c <HAL_RCC_OscConfig+0x4f8>)
 8006a5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a62:	f7fb f92b 	bl	8001cbc <HAL_GetTick>
 8006a66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006a68:	e008      	b.n	8006a7c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006a6a:	f7fb f927 	bl	8001cbc <HAL_GetTick>
 8006a6e:	4602      	mov	r2, r0
 8006a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a72:	1ad3      	subs	r3, r2, r3
 8006a74:	2b02      	cmp	r3, #2
 8006a76:	d901      	bls.n	8006a7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006a78:	2303      	movs	r3, #3
 8006a7a:	e23d      	b.n	8006ef8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006a7c:	4b33      	ldr	r3, [pc, #204]	; (8006b4c <HAL_RCC_OscConfig+0x4f8>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d1f0      	bne.n	8006a6a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 0308 	and.w	r3, r3, #8
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d036      	beq.n	8006b02 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	695b      	ldr	r3, [r3, #20]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d019      	beq.n	8006ad0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a9c:	4b2b      	ldr	r3, [pc, #172]	; (8006b4c <HAL_RCC_OscConfig+0x4f8>)
 8006a9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aa0:	4a2a      	ldr	r2, [pc, #168]	; (8006b4c <HAL_RCC_OscConfig+0x4f8>)
 8006aa2:	f043 0301 	orr.w	r3, r3, #1
 8006aa6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aa8:	f7fb f908 	bl	8001cbc <HAL_GetTick>
 8006aac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006aae:	e008      	b.n	8006ac2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ab0:	f7fb f904 	bl	8001cbc <HAL_GetTick>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab8:	1ad3      	subs	r3, r2, r3
 8006aba:	2b02      	cmp	r3, #2
 8006abc:	d901      	bls.n	8006ac2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006abe:	2303      	movs	r3, #3
 8006ac0:	e21a      	b.n	8006ef8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006ac2:	4b22      	ldr	r3, [pc, #136]	; (8006b4c <HAL_RCC_OscConfig+0x4f8>)
 8006ac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ac6:	f003 0302 	and.w	r3, r3, #2
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d0f0      	beq.n	8006ab0 <HAL_RCC_OscConfig+0x45c>
 8006ace:	e018      	b.n	8006b02 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ad0:	4b1e      	ldr	r3, [pc, #120]	; (8006b4c <HAL_RCC_OscConfig+0x4f8>)
 8006ad2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ad4:	4a1d      	ldr	r2, [pc, #116]	; (8006b4c <HAL_RCC_OscConfig+0x4f8>)
 8006ad6:	f023 0301 	bic.w	r3, r3, #1
 8006ada:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006adc:	f7fb f8ee 	bl	8001cbc <HAL_GetTick>
 8006ae0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006ae2:	e008      	b.n	8006af6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ae4:	f7fb f8ea 	bl	8001cbc <HAL_GetTick>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aec:	1ad3      	subs	r3, r2, r3
 8006aee:	2b02      	cmp	r3, #2
 8006af0:	d901      	bls.n	8006af6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006af2:	2303      	movs	r3, #3
 8006af4:	e200      	b.n	8006ef8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006af6:	4b15      	ldr	r3, [pc, #84]	; (8006b4c <HAL_RCC_OscConfig+0x4f8>)
 8006af8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006afa:	f003 0302 	and.w	r3, r3, #2
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d1f0      	bne.n	8006ae4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f003 0320 	and.w	r3, r3, #32
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d039      	beq.n	8006b82 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	699b      	ldr	r3, [r3, #24]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d01c      	beq.n	8006b50 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006b16:	4b0d      	ldr	r3, [pc, #52]	; (8006b4c <HAL_RCC_OscConfig+0x4f8>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a0c      	ldr	r2, [pc, #48]	; (8006b4c <HAL_RCC_OscConfig+0x4f8>)
 8006b1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006b20:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006b22:	f7fb f8cb 	bl	8001cbc <HAL_GetTick>
 8006b26:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006b28:	e008      	b.n	8006b3c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006b2a:	f7fb f8c7 	bl	8001cbc <HAL_GetTick>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b32:	1ad3      	subs	r3, r2, r3
 8006b34:	2b02      	cmp	r3, #2
 8006b36:	d901      	bls.n	8006b3c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006b38:	2303      	movs	r3, #3
 8006b3a:	e1dd      	b.n	8006ef8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006b3c:	4b03      	ldr	r3, [pc, #12]	; (8006b4c <HAL_RCC_OscConfig+0x4f8>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d0f0      	beq.n	8006b2a <HAL_RCC_OscConfig+0x4d6>
 8006b48:	e01b      	b.n	8006b82 <HAL_RCC_OscConfig+0x52e>
 8006b4a:	bf00      	nop
 8006b4c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006b50:	4b9b      	ldr	r3, [pc, #620]	; (8006dc0 <HAL_RCC_OscConfig+0x76c>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a9a      	ldr	r2, [pc, #616]	; (8006dc0 <HAL_RCC_OscConfig+0x76c>)
 8006b56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b5a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006b5c:	f7fb f8ae 	bl	8001cbc <HAL_GetTick>
 8006b60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006b62:	e008      	b.n	8006b76 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006b64:	f7fb f8aa 	bl	8001cbc <HAL_GetTick>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6c:	1ad3      	subs	r3, r2, r3
 8006b6e:	2b02      	cmp	r3, #2
 8006b70:	d901      	bls.n	8006b76 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006b72:	2303      	movs	r3, #3
 8006b74:	e1c0      	b.n	8006ef8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006b76:	4b92      	ldr	r3, [pc, #584]	; (8006dc0 <HAL_RCC_OscConfig+0x76c>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d1f0      	bne.n	8006b64 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f003 0304 	and.w	r3, r3, #4
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	f000 8081 	beq.w	8006c92 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006b90:	4b8c      	ldr	r3, [pc, #560]	; (8006dc4 <HAL_RCC_OscConfig+0x770>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a8b      	ldr	r2, [pc, #556]	; (8006dc4 <HAL_RCC_OscConfig+0x770>)
 8006b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b9a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006b9c:	f7fb f88e 	bl	8001cbc <HAL_GetTick>
 8006ba0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ba2:	e008      	b.n	8006bb6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ba4:	f7fb f88a 	bl	8001cbc <HAL_GetTick>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bac:	1ad3      	subs	r3, r2, r3
 8006bae:	2b64      	cmp	r3, #100	; 0x64
 8006bb0:	d901      	bls.n	8006bb6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006bb2:	2303      	movs	r3, #3
 8006bb4:	e1a0      	b.n	8006ef8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006bb6:	4b83      	ldr	r3, [pc, #524]	; (8006dc4 <HAL_RCC_OscConfig+0x770>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d0f0      	beq.n	8006ba4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d106      	bne.n	8006bd8 <HAL_RCC_OscConfig+0x584>
 8006bca:	4b7d      	ldr	r3, [pc, #500]	; (8006dc0 <HAL_RCC_OscConfig+0x76c>)
 8006bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bce:	4a7c      	ldr	r2, [pc, #496]	; (8006dc0 <HAL_RCC_OscConfig+0x76c>)
 8006bd0:	f043 0301 	orr.w	r3, r3, #1
 8006bd4:	6713      	str	r3, [r2, #112]	; 0x70
 8006bd6:	e02d      	b.n	8006c34 <HAL_RCC_OscConfig+0x5e0>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d10c      	bne.n	8006bfa <HAL_RCC_OscConfig+0x5a6>
 8006be0:	4b77      	ldr	r3, [pc, #476]	; (8006dc0 <HAL_RCC_OscConfig+0x76c>)
 8006be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006be4:	4a76      	ldr	r2, [pc, #472]	; (8006dc0 <HAL_RCC_OscConfig+0x76c>)
 8006be6:	f023 0301 	bic.w	r3, r3, #1
 8006bea:	6713      	str	r3, [r2, #112]	; 0x70
 8006bec:	4b74      	ldr	r3, [pc, #464]	; (8006dc0 <HAL_RCC_OscConfig+0x76c>)
 8006bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bf0:	4a73      	ldr	r2, [pc, #460]	; (8006dc0 <HAL_RCC_OscConfig+0x76c>)
 8006bf2:	f023 0304 	bic.w	r3, r3, #4
 8006bf6:	6713      	str	r3, [r2, #112]	; 0x70
 8006bf8:	e01c      	b.n	8006c34 <HAL_RCC_OscConfig+0x5e0>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	2b05      	cmp	r3, #5
 8006c00:	d10c      	bne.n	8006c1c <HAL_RCC_OscConfig+0x5c8>
 8006c02:	4b6f      	ldr	r3, [pc, #444]	; (8006dc0 <HAL_RCC_OscConfig+0x76c>)
 8006c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c06:	4a6e      	ldr	r2, [pc, #440]	; (8006dc0 <HAL_RCC_OscConfig+0x76c>)
 8006c08:	f043 0304 	orr.w	r3, r3, #4
 8006c0c:	6713      	str	r3, [r2, #112]	; 0x70
 8006c0e:	4b6c      	ldr	r3, [pc, #432]	; (8006dc0 <HAL_RCC_OscConfig+0x76c>)
 8006c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c12:	4a6b      	ldr	r2, [pc, #428]	; (8006dc0 <HAL_RCC_OscConfig+0x76c>)
 8006c14:	f043 0301 	orr.w	r3, r3, #1
 8006c18:	6713      	str	r3, [r2, #112]	; 0x70
 8006c1a:	e00b      	b.n	8006c34 <HAL_RCC_OscConfig+0x5e0>
 8006c1c:	4b68      	ldr	r3, [pc, #416]	; (8006dc0 <HAL_RCC_OscConfig+0x76c>)
 8006c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c20:	4a67      	ldr	r2, [pc, #412]	; (8006dc0 <HAL_RCC_OscConfig+0x76c>)
 8006c22:	f023 0301 	bic.w	r3, r3, #1
 8006c26:	6713      	str	r3, [r2, #112]	; 0x70
 8006c28:	4b65      	ldr	r3, [pc, #404]	; (8006dc0 <HAL_RCC_OscConfig+0x76c>)
 8006c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c2c:	4a64      	ldr	r2, [pc, #400]	; (8006dc0 <HAL_RCC_OscConfig+0x76c>)
 8006c2e:	f023 0304 	bic.w	r3, r3, #4
 8006c32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d015      	beq.n	8006c68 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c3c:	f7fb f83e 	bl	8001cbc <HAL_GetTick>
 8006c40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006c42:	e00a      	b.n	8006c5a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c44:	f7fb f83a 	bl	8001cbc <HAL_GetTick>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d901      	bls.n	8006c5a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006c56:	2303      	movs	r3, #3
 8006c58:	e14e      	b.n	8006ef8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006c5a:	4b59      	ldr	r3, [pc, #356]	; (8006dc0 <HAL_RCC_OscConfig+0x76c>)
 8006c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c5e:	f003 0302 	and.w	r3, r3, #2
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d0ee      	beq.n	8006c44 <HAL_RCC_OscConfig+0x5f0>
 8006c66:	e014      	b.n	8006c92 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c68:	f7fb f828 	bl	8001cbc <HAL_GetTick>
 8006c6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006c6e:	e00a      	b.n	8006c86 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c70:	f7fb f824 	bl	8001cbc <HAL_GetTick>
 8006c74:	4602      	mov	r2, r0
 8006c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c78:	1ad3      	subs	r3, r2, r3
 8006c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d901      	bls.n	8006c86 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006c82:	2303      	movs	r3, #3
 8006c84:	e138      	b.n	8006ef8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006c86:	4b4e      	ldr	r3, [pc, #312]	; (8006dc0 <HAL_RCC_OscConfig+0x76c>)
 8006c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c8a:	f003 0302 	and.w	r3, r3, #2
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d1ee      	bne.n	8006c70 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	f000 812d 	beq.w	8006ef6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006c9c:	4b48      	ldr	r3, [pc, #288]	; (8006dc0 <HAL_RCC_OscConfig+0x76c>)
 8006c9e:	691b      	ldr	r3, [r3, #16]
 8006ca0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ca4:	2b18      	cmp	r3, #24
 8006ca6:	f000 80bd 	beq.w	8006e24 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cae:	2b02      	cmp	r3, #2
 8006cb0:	f040 809e 	bne.w	8006df0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cb4:	4b42      	ldr	r3, [pc, #264]	; (8006dc0 <HAL_RCC_OscConfig+0x76c>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a41      	ldr	r2, [pc, #260]	; (8006dc0 <HAL_RCC_OscConfig+0x76c>)
 8006cba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006cbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cc0:	f7fa fffc 	bl	8001cbc <HAL_GetTick>
 8006cc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006cc6:	e008      	b.n	8006cda <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cc8:	f7fa fff8 	bl	8001cbc <HAL_GetTick>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd0:	1ad3      	subs	r3, r2, r3
 8006cd2:	2b02      	cmp	r3, #2
 8006cd4:	d901      	bls.n	8006cda <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006cd6:	2303      	movs	r3, #3
 8006cd8:	e10e      	b.n	8006ef8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006cda:	4b39      	ldr	r3, [pc, #228]	; (8006dc0 <HAL_RCC_OscConfig+0x76c>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d1f0      	bne.n	8006cc8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ce6:	4b36      	ldr	r3, [pc, #216]	; (8006dc0 <HAL_RCC_OscConfig+0x76c>)
 8006ce8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006cea:	4b37      	ldr	r3, [pc, #220]	; (8006dc8 <HAL_RCC_OscConfig+0x774>)
 8006cec:	4013      	ands	r3, r2
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006cf6:	0112      	lsls	r2, r2, #4
 8006cf8:	430a      	orrs	r2, r1
 8006cfa:	4931      	ldr	r1, [pc, #196]	; (8006dc0 <HAL_RCC_OscConfig+0x76c>)
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	628b      	str	r3, [r1, #40]	; 0x28
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d04:	3b01      	subs	r3, #1
 8006d06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d0e:	3b01      	subs	r3, #1
 8006d10:	025b      	lsls	r3, r3, #9
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	431a      	orrs	r2, r3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d1a:	3b01      	subs	r3, #1
 8006d1c:	041b      	lsls	r3, r3, #16
 8006d1e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006d22:	431a      	orrs	r2, r3
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d28:	3b01      	subs	r3, #1
 8006d2a:	061b      	lsls	r3, r3, #24
 8006d2c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006d30:	4923      	ldr	r1, [pc, #140]	; (8006dc0 <HAL_RCC_OscConfig+0x76c>)
 8006d32:	4313      	orrs	r3, r2
 8006d34:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006d36:	4b22      	ldr	r3, [pc, #136]	; (8006dc0 <HAL_RCC_OscConfig+0x76c>)
 8006d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d3a:	4a21      	ldr	r2, [pc, #132]	; (8006dc0 <HAL_RCC_OscConfig+0x76c>)
 8006d3c:	f023 0301 	bic.w	r3, r3, #1
 8006d40:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006d42:	4b1f      	ldr	r3, [pc, #124]	; (8006dc0 <HAL_RCC_OscConfig+0x76c>)
 8006d44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d46:	4b21      	ldr	r3, [pc, #132]	; (8006dcc <HAL_RCC_OscConfig+0x778>)
 8006d48:	4013      	ands	r3, r2
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006d4e:	00d2      	lsls	r2, r2, #3
 8006d50:	491b      	ldr	r1, [pc, #108]	; (8006dc0 <HAL_RCC_OscConfig+0x76c>)
 8006d52:	4313      	orrs	r3, r2
 8006d54:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006d56:	4b1a      	ldr	r3, [pc, #104]	; (8006dc0 <HAL_RCC_OscConfig+0x76c>)
 8006d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d5a:	f023 020c 	bic.w	r2, r3, #12
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d62:	4917      	ldr	r1, [pc, #92]	; (8006dc0 <HAL_RCC_OscConfig+0x76c>)
 8006d64:	4313      	orrs	r3, r2
 8006d66:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006d68:	4b15      	ldr	r3, [pc, #84]	; (8006dc0 <HAL_RCC_OscConfig+0x76c>)
 8006d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d6c:	f023 0202 	bic.w	r2, r3, #2
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d74:	4912      	ldr	r1, [pc, #72]	; (8006dc0 <HAL_RCC_OscConfig+0x76c>)
 8006d76:	4313      	orrs	r3, r2
 8006d78:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006d7a:	4b11      	ldr	r3, [pc, #68]	; (8006dc0 <HAL_RCC_OscConfig+0x76c>)
 8006d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d7e:	4a10      	ldr	r2, [pc, #64]	; (8006dc0 <HAL_RCC_OscConfig+0x76c>)
 8006d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d84:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d86:	4b0e      	ldr	r3, [pc, #56]	; (8006dc0 <HAL_RCC_OscConfig+0x76c>)
 8006d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d8a:	4a0d      	ldr	r2, [pc, #52]	; (8006dc0 <HAL_RCC_OscConfig+0x76c>)
 8006d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d90:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006d92:	4b0b      	ldr	r3, [pc, #44]	; (8006dc0 <HAL_RCC_OscConfig+0x76c>)
 8006d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d96:	4a0a      	ldr	r2, [pc, #40]	; (8006dc0 <HAL_RCC_OscConfig+0x76c>)
 8006d98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d9c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006d9e:	4b08      	ldr	r3, [pc, #32]	; (8006dc0 <HAL_RCC_OscConfig+0x76c>)
 8006da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da2:	4a07      	ldr	r2, [pc, #28]	; (8006dc0 <HAL_RCC_OscConfig+0x76c>)
 8006da4:	f043 0301 	orr.w	r3, r3, #1
 8006da8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006daa:	4b05      	ldr	r3, [pc, #20]	; (8006dc0 <HAL_RCC_OscConfig+0x76c>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a04      	ldr	r2, [pc, #16]	; (8006dc0 <HAL_RCC_OscConfig+0x76c>)
 8006db0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006db4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006db6:	f7fa ff81 	bl	8001cbc <HAL_GetTick>
 8006dba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006dbc:	e011      	b.n	8006de2 <HAL_RCC_OscConfig+0x78e>
 8006dbe:	bf00      	nop
 8006dc0:	58024400 	.word	0x58024400
 8006dc4:	58024800 	.word	0x58024800
 8006dc8:	fffffc0c 	.word	0xfffffc0c
 8006dcc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dd0:	f7fa ff74 	bl	8001cbc <HAL_GetTick>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd8:	1ad3      	subs	r3, r2, r3
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d901      	bls.n	8006de2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006dde:	2303      	movs	r3, #3
 8006de0:	e08a      	b.n	8006ef8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006de2:	4b47      	ldr	r3, [pc, #284]	; (8006f00 <HAL_RCC_OscConfig+0x8ac>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d0f0      	beq.n	8006dd0 <HAL_RCC_OscConfig+0x77c>
 8006dee:	e082      	b.n	8006ef6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006df0:	4b43      	ldr	r3, [pc, #268]	; (8006f00 <HAL_RCC_OscConfig+0x8ac>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a42      	ldr	r2, [pc, #264]	; (8006f00 <HAL_RCC_OscConfig+0x8ac>)
 8006df6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006dfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dfc:	f7fa ff5e 	bl	8001cbc <HAL_GetTick>
 8006e00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e02:	e008      	b.n	8006e16 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e04:	f7fa ff5a 	bl	8001cbc <HAL_GetTick>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0c:	1ad3      	subs	r3, r2, r3
 8006e0e:	2b02      	cmp	r3, #2
 8006e10:	d901      	bls.n	8006e16 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006e12:	2303      	movs	r3, #3
 8006e14:	e070      	b.n	8006ef8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e16:	4b3a      	ldr	r3, [pc, #232]	; (8006f00 <HAL_RCC_OscConfig+0x8ac>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d1f0      	bne.n	8006e04 <HAL_RCC_OscConfig+0x7b0>
 8006e22:	e068      	b.n	8006ef6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006e24:	4b36      	ldr	r3, [pc, #216]	; (8006f00 <HAL_RCC_OscConfig+0x8ac>)
 8006e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e28:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006e2a:	4b35      	ldr	r3, [pc, #212]	; (8006f00 <HAL_RCC_OscConfig+0x8ac>)
 8006e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e2e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d031      	beq.n	8006e9c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	f003 0203 	and.w	r2, r3, #3
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d12a      	bne.n	8006e9c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	091b      	lsrs	r3, r3, #4
 8006e4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d122      	bne.n	8006e9c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e60:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d11a      	bne.n	8006e9c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	0a5b      	lsrs	r3, r3, #9
 8006e6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e72:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d111      	bne.n	8006e9c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	0c1b      	lsrs	r3, r3, #16
 8006e7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e84:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d108      	bne.n	8006e9c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	0e1b      	lsrs	r3, r3, #24
 8006e8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e96:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d001      	beq.n	8006ea0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e02b      	b.n	8006ef8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006ea0:	4b17      	ldr	r3, [pc, #92]	; (8006f00 <HAL_RCC_OscConfig+0x8ac>)
 8006ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ea4:	08db      	lsrs	r3, r3, #3
 8006ea6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006eaa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eb0:	693a      	ldr	r2, [r7, #16]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d01f      	beq.n	8006ef6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006eb6:	4b12      	ldr	r3, [pc, #72]	; (8006f00 <HAL_RCC_OscConfig+0x8ac>)
 8006eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eba:	4a11      	ldr	r2, [pc, #68]	; (8006f00 <HAL_RCC_OscConfig+0x8ac>)
 8006ebc:	f023 0301 	bic.w	r3, r3, #1
 8006ec0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006ec2:	f7fa fefb 	bl	8001cbc <HAL_GetTick>
 8006ec6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006ec8:	bf00      	nop
 8006eca:	f7fa fef7 	bl	8001cbc <HAL_GetTick>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d0f9      	beq.n	8006eca <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006ed6:	4b0a      	ldr	r3, [pc, #40]	; (8006f00 <HAL_RCC_OscConfig+0x8ac>)
 8006ed8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006eda:	4b0a      	ldr	r3, [pc, #40]	; (8006f04 <HAL_RCC_OscConfig+0x8b0>)
 8006edc:	4013      	ands	r3, r2
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006ee2:	00d2      	lsls	r2, r2, #3
 8006ee4:	4906      	ldr	r1, [pc, #24]	; (8006f00 <HAL_RCC_OscConfig+0x8ac>)
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006eea:	4b05      	ldr	r3, [pc, #20]	; (8006f00 <HAL_RCC_OscConfig+0x8ac>)
 8006eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eee:	4a04      	ldr	r2, [pc, #16]	; (8006f00 <HAL_RCC_OscConfig+0x8ac>)
 8006ef0:	f043 0301 	orr.w	r3, r3, #1
 8006ef4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006ef6:	2300      	movs	r3, #0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3730      	adds	r7, #48	; 0x30
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	58024400 	.word	0x58024400
 8006f04:	ffff0007 	.word	0xffff0007

08006f08 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b086      	sub	sp, #24
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d101      	bne.n	8006f1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e19c      	b.n	8007256 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006f1c:	4b8a      	ldr	r3, [pc, #552]	; (8007148 <HAL_RCC_ClockConfig+0x240>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 030f 	and.w	r3, r3, #15
 8006f24:	683a      	ldr	r2, [r7, #0]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d910      	bls.n	8006f4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f2a:	4b87      	ldr	r3, [pc, #540]	; (8007148 <HAL_RCC_ClockConfig+0x240>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f023 020f 	bic.w	r2, r3, #15
 8006f32:	4985      	ldr	r1, [pc, #532]	; (8007148 <HAL_RCC_ClockConfig+0x240>)
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f3a:	4b83      	ldr	r3, [pc, #524]	; (8007148 <HAL_RCC_ClockConfig+0x240>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f003 030f 	and.w	r3, r3, #15
 8006f42:	683a      	ldr	r2, [r7, #0]
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d001      	beq.n	8006f4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e184      	b.n	8007256 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 0304 	and.w	r3, r3, #4
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d010      	beq.n	8006f7a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	691a      	ldr	r2, [r3, #16]
 8006f5c:	4b7b      	ldr	r3, [pc, #492]	; (800714c <HAL_RCC_ClockConfig+0x244>)
 8006f5e:	699b      	ldr	r3, [r3, #24]
 8006f60:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d908      	bls.n	8006f7a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006f68:	4b78      	ldr	r3, [pc, #480]	; (800714c <HAL_RCC_ClockConfig+0x244>)
 8006f6a:	699b      	ldr	r3, [r3, #24]
 8006f6c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	691b      	ldr	r3, [r3, #16]
 8006f74:	4975      	ldr	r1, [pc, #468]	; (800714c <HAL_RCC_ClockConfig+0x244>)
 8006f76:	4313      	orrs	r3, r2
 8006f78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 0308 	and.w	r3, r3, #8
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d010      	beq.n	8006fa8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	695a      	ldr	r2, [r3, #20]
 8006f8a:	4b70      	ldr	r3, [pc, #448]	; (800714c <HAL_RCC_ClockConfig+0x244>)
 8006f8c:	69db      	ldr	r3, [r3, #28]
 8006f8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d908      	bls.n	8006fa8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006f96:	4b6d      	ldr	r3, [pc, #436]	; (800714c <HAL_RCC_ClockConfig+0x244>)
 8006f98:	69db      	ldr	r3, [r3, #28]
 8006f9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	695b      	ldr	r3, [r3, #20]
 8006fa2:	496a      	ldr	r1, [pc, #424]	; (800714c <HAL_RCC_ClockConfig+0x244>)
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f003 0310 	and.w	r3, r3, #16
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d010      	beq.n	8006fd6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	699a      	ldr	r2, [r3, #24]
 8006fb8:	4b64      	ldr	r3, [pc, #400]	; (800714c <HAL_RCC_ClockConfig+0x244>)
 8006fba:	69db      	ldr	r3, [r3, #28]
 8006fbc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d908      	bls.n	8006fd6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006fc4:	4b61      	ldr	r3, [pc, #388]	; (800714c <HAL_RCC_ClockConfig+0x244>)
 8006fc6:	69db      	ldr	r3, [r3, #28]
 8006fc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	699b      	ldr	r3, [r3, #24]
 8006fd0:	495e      	ldr	r1, [pc, #376]	; (800714c <HAL_RCC_ClockConfig+0x244>)
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 0320 	and.w	r3, r3, #32
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d010      	beq.n	8007004 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	69da      	ldr	r2, [r3, #28]
 8006fe6:	4b59      	ldr	r3, [pc, #356]	; (800714c <HAL_RCC_ClockConfig+0x244>)
 8006fe8:	6a1b      	ldr	r3, [r3, #32]
 8006fea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d908      	bls.n	8007004 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006ff2:	4b56      	ldr	r3, [pc, #344]	; (800714c <HAL_RCC_ClockConfig+0x244>)
 8006ff4:	6a1b      	ldr	r3, [r3, #32]
 8006ff6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	69db      	ldr	r3, [r3, #28]
 8006ffe:	4953      	ldr	r1, [pc, #332]	; (800714c <HAL_RCC_ClockConfig+0x244>)
 8007000:	4313      	orrs	r3, r2
 8007002:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f003 0302 	and.w	r3, r3, #2
 800700c:	2b00      	cmp	r3, #0
 800700e:	d010      	beq.n	8007032 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	68da      	ldr	r2, [r3, #12]
 8007014:	4b4d      	ldr	r3, [pc, #308]	; (800714c <HAL_RCC_ClockConfig+0x244>)
 8007016:	699b      	ldr	r3, [r3, #24]
 8007018:	f003 030f 	and.w	r3, r3, #15
 800701c:	429a      	cmp	r2, r3
 800701e:	d908      	bls.n	8007032 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007020:	4b4a      	ldr	r3, [pc, #296]	; (800714c <HAL_RCC_ClockConfig+0x244>)
 8007022:	699b      	ldr	r3, [r3, #24]
 8007024:	f023 020f 	bic.w	r2, r3, #15
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	4947      	ldr	r1, [pc, #284]	; (800714c <HAL_RCC_ClockConfig+0x244>)
 800702e:	4313      	orrs	r3, r2
 8007030:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f003 0301 	and.w	r3, r3, #1
 800703a:	2b00      	cmp	r3, #0
 800703c:	d055      	beq.n	80070ea <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800703e:	4b43      	ldr	r3, [pc, #268]	; (800714c <HAL_RCC_ClockConfig+0x244>)
 8007040:	699b      	ldr	r3, [r3, #24]
 8007042:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	4940      	ldr	r1, [pc, #256]	; (800714c <HAL_RCC_ClockConfig+0x244>)
 800704c:	4313      	orrs	r3, r2
 800704e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	2b02      	cmp	r3, #2
 8007056:	d107      	bne.n	8007068 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007058:	4b3c      	ldr	r3, [pc, #240]	; (800714c <HAL_RCC_ClockConfig+0x244>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007060:	2b00      	cmp	r3, #0
 8007062:	d121      	bne.n	80070a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	e0f6      	b.n	8007256 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	2b03      	cmp	r3, #3
 800706e:	d107      	bne.n	8007080 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007070:	4b36      	ldr	r3, [pc, #216]	; (800714c <HAL_RCC_ClockConfig+0x244>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007078:	2b00      	cmp	r3, #0
 800707a:	d115      	bne.n	80070a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	e0ea      	b.n	8007256 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	2b01      	cmp	r3, #1
 8007086:	d107      	bne.n	8007098 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007088:	4b30      	ldr	r3, [pc, #192]	; (800714c <HAL_RCC_ClockConfig+0x244>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007090:	2b00      	cmp	r3, #0
 8007092:	d109      	bne.n	80070a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	e0de      	b.n	8007256 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007098:	4b2c      	ldr	r3, [pc, #176]	; (800714c <HAL_RCC_ClockConfig+0x244>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f003 0304 	and.w	r3, r3, #4
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d101      	bne.n	80070a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	e0d6      	b.n	8007256 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80070a8:	4b28      	ldr	r3, [pc, #160]	; (800714c <HAL_RCC_ClockConfig+0x244>)
 80070aa:	691b      	ldr	r3, [r3, #16]
 80070ac:	f023 0207 	bic.w	r2, r3, #7
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	4925      	ldr	r1, [pc, #148]	; (800714c <HAL_RCC_ClockConfig+0x244>)
 80070b6:	4313      	orrs	r3, r2
 80070b8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070ba:	f7fa fdff 	bl	8001cbc <HAL_GetTick>
 80070be:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070c0:	e00a      	b.n	80070d8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070c2:	f7fa fdfb 	bl	8001cbc <HAL_GetTick>
 80070c6:	4602      	mov	r2, r0
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	1ad3      	subs	r3, r2, r3
 80070cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d901      	bls.n	80070d8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80070d4:	2303      	movs	r3, #3
 80070d6:	e0be      	b.n	8007256 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070d8:	4b1c      	ldr	r3, [pc, #112]	; (800714c <HAL_RCC_ClockConfig+0x244>)
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	00db      	lsls	r3, r3, #3
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d1eb      	bne.n	80070c2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f003 0302 	and.w	r3, r3, #2
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d010      	beq.n	8007118 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	68da      	ldr	r2, [r3, #12]
 80070fa:	4b14      	ldr	r3, [pc, #80]	; (800714c <HAL_RCC_ClockConfig+0x244>)
 80070fc:	699b      	ldr	r3, [r3, #24]
 80070fe:	f003 030f 	and.w	r3, r3, #15
 8007102:	429a      	cmp	r2, r3
 8007104:	d208      	bcs.n	8007118 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007106:	4b11      	ldr	r3, [pc, #68]	; (800714c <HAL_RCC_ClockConfig+0x244>)
 8007108:	699b      	ldr	r3, [r3, #24]
 800710a:	f023 020f 	bic.w	r2, r3, #15
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	490e      	ldr	r1, [pc, #56]	; (800714c <HAL_RCC_ClockConfig+0x244>)
 8007114:	4313      	orrs	r3, r2
 8007116:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007118:	4b0b      	ldr	r3, [pc, #44]	; (8007148 <HAL_RCC_ClockConfig+0x240>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f003 030f 	and.w	r3, r3, #15
 8007120:	683a      	ldr	r2, [r7, #0]
 8007122:	429a      	cmp	r2, r3
 8007124:	d214      	bcs.n	8007150 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007126:	4b08      	ldr	r3, [pc, #32]	; (8007148 <HAL_RCC_ClockConfig+0x240>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f023 020f 	bic.w	r2, r3, #15
 800712e:	4906      	ldr	r1, [pc, #24]	; (8007148 <HAL_RCC_ClockConfig+0x240>)
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	4313      	orrs	r3, r2
 8007134:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007136:	4b04      	ldr	r3, [pc, #16]	; (8007148 <HAL_RCC_ClockConfig+0x240>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f003 030f 	and.w	r3, r3, #15
 800713e:	683a      	ldr	r2, [r7, #0]
 8007140:	429a      	cmp	r2, r3
 8007142:	d005      	beq.n	8007150 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007144:	2301      	movs	r3, #1
 8007146:	e086      	b.n	8007256 <HAL_RCC_ClockConfig+0x34e>
 8007148:	52002000 	.word	0x52002000
 800714c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f003 0304 	and.w	r3, r3, #4
 8007158:	2b00      	cmp	r3, #0
 800715a:	d010      	beq.n	800717e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	691a      	ldr	r2, [r3, #16]
 8007160:	4b3f      	ldr	r3, [pc, #252]	; (8007260 <HAL_RCC_ClockConfig+0x358>)
 8007162:	699b      	ldr	r3, [r3, #24]
 8007164:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007168:	429a      	cmp	r2, r3
 800716a:	d208      	bcs.n	800717e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800716c:	4b3c      	ldr	r3, [pc, #240]	; (8007260 <HAL_RCC_ClockConfig+0x358>)
 800716e:	699b      	ldr	r3, [r3, #24]
 8007170:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	4939      	ldr	r1, [pc, #228]	; (8007260 <HAL_RCC_ClockConfig+0x358>)
 800717a:	4313      	orrs	r3, r2
 800717c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 0308 	and.w	r3, r3, #8
 8007186:	2b00      	cmp	r3, #0
 8007188:	d010      	beq.n	80071ac <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	695a      	ldr	r2, [r3, #20]
 800718e:	4b34      	ldr	r3, [pc, #208]	; (8007260 <HAL_RCC_ClockConfig+0x358>)
 8007190:	69db      	ldr	r3, [r3, #28]
 8007192:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007196:	429a      	cmp	r2, r3
 8007198:	d208      	bcs.n	80071ac <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800719a:	4b31      	ldr	r3, [pc, #196]	; (8007260 <HAL_RCC_ClockConfig+0x358>)
 800719c:	69db      	ldr	r3, [r3, #28]
 800719e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	695b      	ldr	r3, [r3, #20]
 80071a6:	492e      	ldr	r1, [pc, #184]	; (8007260 <HAL_RCC_ClockConfig+0x358>)
 80071a8:	4313      	orrs	r3, r2
 80071aa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f003 0310 	and.w	r3, r3, #16
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d010      	beq.n	80071da <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	699a      	ldr	r2, [r3, #24]
 80071bc:	4b28      	ldr	r3, [pc, #160]	; (8007260 <HAL_RCC_ClockConfig+0x358>)
 80071be:	69db      	ldr	r3, [r3, #28]
 80071c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d208      	bcs.n	80071da <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80071c8:	4b25      	ldr	r3, [pc, #148]	; (8007260 <HAL_RCC_ClockConfig+0x358>)
 80071ca:	69db      	ldr	r3, [r3, #28]
 80071cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	699b      	ldr	r3, [r3, #24]
 80071d4:	4922      	ldr	r1, [pc, #136]	; (8007260 <HAL_RCC_ClockConfig+0x358>)
 80071d6:	4313      	orrs	r3, r2
 80071d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f003 0320 	and.w	r3, r3, #32
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d010      	beq.n	8007208 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	69da      	ldr	r2, [r3, #28]
 80071ea:	4b1d      	ldr	r3, [pc, #116]	; (8007260 <HAL_RCC_ClockConfig+0x358>)
 80071ec:	6a1b      	ldr	r3, [r3, #32]
 80071ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d208      	bcs.n	8007208 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80071f6:	4b1a      	ldr	r3, [pc, #104]	; (8007260 <HAL_RCC_ClockConfig+0x358>)
 80071f8:	6a1b      	ldr	r3, [r3, #32]
 80071fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	69db      	ldr	r3, [r3, #28]
 8007202:	4917      	ldr	r1, [pc, #92]	; (8007260 <HAL_RCC_ClockConfig+0x358>)
 8007204:	4313      	orrs	r3, r2
 8007206:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007208:	f000 f834 	bl	8007274 <HAL_RCC_GetSysClockFreq>
 800720c:	4602      	mov	r2, r0
 800720e:	4b14      	ldr	r3, [pc, #80]	; (8007260 <HAL_RCC_ClockConfig+0x358>)
 8007210:	699b      	ldr	r3, [r3, #24]
 8007212:	0a1b      	lsrs	r3, r3, #8
 8007214:	f003 030f 	and.w	r3, r3, #15
 8007218:	4912      	ldr	r1, [pc, #72]	; (8007264 <HAL_RCC_ClockConfig+0x35c>)
 800721a:	5ccb      	ldrb	r3, [r1, r3]
 800721c:	f003 031f 	and.w	r3, r3, #31
 8007220:	fa22 f303 	lsr.w	r3, r2, r3
 8007224:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007226:	4b0e      	ldr	r3, [pc, #56]	; (8007260 <HAL_RCC_ClockConfig+0x358>)
 8007228:	699b      	ldr	r3, [r3, #24]
 800722a:	f003 030f 	and.w	r3, r3, #15
 800722e:	4a0d      	ldr	r2, [pc, #52]	; (8007264 <HAL_RCC_ClockConfig+0x35c>)
 8007230:	5cd3      	ldrb	r3, [r2, r3]
 8007232:	f003 031f 	and.w	r3, r3, #31
 8007236:	693a      	ldr	r2, [r7, #16]
 8007238:	fa22 f303 	lsr.w	r3, r2, r3
 800723c:	4a0a      	ldr	r2, [pc, #40]	; (8007268 <HAL_RCC_ClockConfig+0x360>)
 800723e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007240:	4a0a      	ldr	r2, [pc, #40]	; (800726c <HAL_RCC_ClockConfig+0x364>)
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007246:	4b0a      	ldr	r3, [pc, #40]	; (8007270 <HAL_RCC_ClockConfig+0x368>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4618      	mov	r0, r3
 800724c:	f7fa f86c 	bl	8001328 <HAL_InitTick>
 8007250:	4603      	mov	r3, r0
 8007252:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007254:	7bfb      	ldrb	r3, [r7, #15]
}
 8007256:	4618      	mov	r0, r3
 8007258:	3718      	adds	r7, #24
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	58024400 	.word	0x58024400
 8007264:	08014494 	.word	0x08014494
 8007268:	24000004 	.word	0x24000004
 800726c:	24000000 	.word	0x24000000
 8007270:	24000008 	.word	0x24000008

08007274 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007274:	b480      	push	{r7}
 8007276:	b089      	sub	sp, #36	; 0x24
 8007278:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800727a:	4bb3      	ldr	r3, [pc, #716]	; (8007548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007282:	2b18      	cmp	r3, #24
 8007284:	f200 8155 	bhi.w	8007532 <HAL_RCC_GetSysClockFreq+0x2be>
 8007288:	a201      	add	r2, pc, #4	; (adr r2, 8007290 <HAL_RCC_GetSysClockFreq+0x1c>)
 800728a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800728e:	bf00      	nop
 8007290:	080072f5 	.word	0x080072f5
 8007294:	08007533 	.word	0x08007533
 8007298:	08007533 	.word	0x08007533
 800729c:	08007533 	.word	0x08007533
 80072a0:	08007533 	.word	0x08007533
 80072a4:	08007533 	.word	0x08007533
 80072a8:	08007533 	.word	0x08007533
 80072ac:	08007533 	.word	0x08007533
 80072b0:	0800731b 	.word	0x0800731b
 80072b4:	08007533 	.word	0x08007533
 80072b8:	08007533 	.word	0x08007533
 80072bc:	08007533 	.word	0x08007533
 80072c0:	08007533 	.word	0x08007533
 80072c4:	08007533 	.word	0x08007533
 80072c8:	08007533 	.word	0x08007533
 80072cc:	08007533 	.word	0x08007533
 80072d0:	08007321 	.word	0x08007321
 80072d4:	08007533 	.word	0x08007533
 80072d8:	08007533 	.word	0x08007533
 80072dc:	08007533 	.word	0x08007533
 80072e0:	08007533 	.word	0x08007533
 80072e4:	08007533 	.word	0x08007533
 80072e8:	08007533 	.word	0x08007533
 80072ec:	08007533 	.word	0x08007533
 80072f0:	08007327 	.word	0x08007327
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072f4:	4b94      	ldr	r3, [pc, #592]	; (8007548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f003 0320 	and.w	r3, r3, #32
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d009      	beq.n	8007314 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007300:	4b91      	ldr	r3, [pc, #580]	; (8007548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	08db      	lsrs	r3, r3, #3
 8007306:	f003 0303 	and.w	r3, r3, #3
 800730a:	4a90      	ldr	r2, [pc, #576]	; (800754c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800730c:	fa22 f303 	lsr.w	r3, r2, r3
 8007310:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007312:	e111      	b.n	8007538 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007314:	4b8d      	ldr	r3, [pc, #564]	; (800754c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007316:	61bb      	str	r3, [r7, #24]
      break;
 8007318:	e10e      	b.n	8007538 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800731a:	4b8d      	ldr	r3, [pc, #564]	; (8007550 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800731c:	61bb      	str	r3, [r7, #24]
      break;
 800731e:	e10b      	b.n	8007538 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007320:	4b8c      	ldr	r3, [pc, #560]	; (8007554 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007322:	61bb      	str	r3, [r7, #24]
      break;
 8007324:	e108      	b.n	8007538 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007326:	4b88      	ldr	r3, [pc, #544]	; (8007548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800732a:	f003 0303 	and.w	r3, r3, #3
 800732e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007330:	4b85      	ldr	r3, [pc, #532]	; (8007548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007334:	091b      	lsrs	r3, r3, #4
 8007336:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800733a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800733c:	4b82      	ldr	r3, [pc, #520]	; (8007548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800733e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007340:	f003 0301 	and.w	r3, r3, #1
 8007344:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007346:	4b80      	ldr	r3, [pc, #512]	; (8007548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800734a:	08db      	lsrs	r3, r3, #3
 800734c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007350:	68fa      	ldr	r2, [r7, #12]
 8007352:	fb02 f303 	mul.w	r3, r2, r3
 8007356:	ee07 3a90 	vmov	s15, r3
 800735a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800735e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	2b00      	cmp	r3, #0
 8007366:	f000 80e1 	beq.w	800752c <HAL_RCC_GetSysClockFreq+0x2b8>
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	2b02      	cmp	r3, #2
 800736e:	f000 8083 	beq.w	8007478 <HAL_RCC_GetSysClockFreq+0x204>
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	2b02      	cmp	r3, #2
 8007376:	f200 80a1 	bhi.w	80074bc <HAL_RCC_GetSysClockFreq+0x248>
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d003      	beq.n	8007388 <HAL_RCC_GetSysClockFreq+0x114>
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	2b01      	cmp	r3, #1
 8007384:	d056      	beq.n	8007434 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007386:	e099      	b.n	80074bc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007388:	4b6f      	ldr	r3, [pc, #444]	; (8007548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f003 0320 	and.w	r3, r3, #32
 8007390:	2b00      	cmp	r3, #0
 8007392:	d02d      	beq.n	80073f0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007394:	4b6c      	ldr	r3, [pc, #432]	; (8007548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	08db      	lsrs	r3, r3, #3
 800739a:	f003 0303 	and.w	r3, r3, #3
 800739e:	4a6b      	ldr	r2, [pc, #428]	; (800754c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80073a0:	fa22 f303 	lsr.w	r3, r2, r3
 80073a4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	ee07 3a90 	vmov	s15, r3
 80073ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	ee07 3a90 	vmov	s15, r3
 80073b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073be:	4b62      	ldr	r3, [pc, #392]	; (8007548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073c6:	ee07 3a90 	vmov	s15, r3
 80073ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80073d2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007558 <HAL_RCC_GetSysClockFreq+0x2e4>
 80073d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073ea:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80073ee:	e087      	b.n	8007500 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	ee07 3a90 	vmov	s15, r3
 80073f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073fa:	eddf 6a58 	vldr	s13, [pc, #352]	; 800755c <HAL_RCC_GetSysClockFreq+0x2e8>
 80073fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007402:	4b51      	ldr	r3, [pc, #324]	; (8007548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800740a:	ee07 3a90 	vmov	s15, r3
 800740e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007412:	ed97 6a02 	vldr	s12, [r7, #8]
 8007416:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007558 <HAL_RCC_GetSysClockFreq+0x2e4>
 800741a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800741e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007422:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800742a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800742e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007432:	e065      	b.n	8007500 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	ee07 3a90 	vmov	s15, r3
 800743a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800743e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007560 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007446:	4b40      	ldr	r3, [pc, #256]	; (8007548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800744a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800744e:	ee07 3a90 	vmov	s15, r3
 8007452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007456:	ed97 6a02 	vldr	s12, [r7, #8]
 800745a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007558 <HAL_RCC_GetSysClockFreq+0x2e4>
 800745e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007466:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800746a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800746e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007472:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007476:	e043      	b.n	8007500 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	ee07 3a90 	vmov	s15, r3
 800747e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007482:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007564 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800748a:	4b2f      	ldr	r3, [pc, #188]	; (8007548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800748c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800748e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007492:	ee07 3a90 	vmov	s15, r3
 8007496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800749a:	ed97 6a02 	vldr	s12, [r7, #8]
 800749e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007558 <HAL_RCC_GetSysClockFreq+0x2e4>
 80074a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80074ba:	e021      	b.n	8007500 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	ee07 3a90 	vmov	s15, r3
 80074c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074c6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007560 <HAL_RCC_GetSysClockFreq+0x2ec>
 80074ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074ce:	4b1e      	ldr	r3, [pc, #120]	; (8007548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074d6:	ee07 3a90 	vmov	s15, r3
 80074da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074de:	ed97 6a02 	vldr	s12, [r7, #8]
 80074e2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007558 <HAL_RCC_GetSysClockFreq+0x2e4>
 80074e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80074fe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007500:	4b11      	ldr	r3, [pc, #68]	; (8007548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007504:	0a5b      	lsrs	r3, r3, #9
 8007506:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800750a:	3301      	adds	r3, #1
 800750c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	ee07 3a90 	vmov	s15, r3
 8007514:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007518:	edd7 6a07 	vldr	s13, [r7, #28]
 800751c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007520:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007524:	ee17 3a90 	vmov	r3, s15
 8007528:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800752a:	e005      	b.n	8007538 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800752c:	2300      	movs	r3, #0
 800752e:	61bb      	str	r3, [r7, #24]
      break;
 8007530:	e002      	b.n	8007538 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007532:	4b07      	ldr	r3, [pc, #28]	; (8007550 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007534:	61bb      	str	r3, [r7, #24]
      break;
 8007536:	bf00      	nop
  }

  return sysclockfreq;
 8007538:	69bb      	ldr	r3, [r7, #24]
}
 800753a:	4618      	mov	r0, r3
 800753c:	3724      	adds	r7, #36	; 0x24
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr
 8007546:	bf00      	nop
 8007548:	58024400 	.word	0x58024400
 800754c:	03d09000 	.word	0x03d09000
 8007550:	003d0900 	.word	0x003d0900
 8007554:	007a1200 	.word	0x007a1200
 8007558:	46000000 	.word	0x46000000
 800755c:	4c742400 	.word	0x4c742400
 8007560:	4a742400 	.word	0x4a742400
 8007564:	4af42400 	.word	0x4af42400

08007568 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800756e:	f7ff fe81 	bl	8007274 <HAL_RCC_GetSysClockFreq>
 8007572:	4602      	mov	r2, r0
 8007574:	4b10      	ldr	r3, [pc, #64]	; (80075b8 <HAL_RCC_GetHCLKFreq+0x50>)
 8007576:	699b      	ldr	r3, [r3, #24]
 8007578:	0a1b      	lsrs	r3, r3, #8
 800757a:	f003 030f 	and.w	r3, r3, #15
 800757e:	490f      	ldr	r1, [pc, #60]	; (80075bc <HAL_RCC_GetHCLKFreq+0x54>)
 8007580:	5ccb      	ldrb	r3, [r1, r3]
 8007582:	f003 031f 	and.w	r3, r3, #31
 8007586:	fa22 f303 	lsr.w	r3, r2, r3
 800758a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800758c:	4b0a      	ldr	r3, [pc, #40]	; (80075b8 <HAL_RCC_GetHCLKFreq+0x50>)
 800758e:	699b      	ldr	r3, [r3, #24]
 8007590:	f003 030f 	and.w	r3, r3, #15
 8007594:	4a09      	ldr	r2, [pc, #36]	; (80075bc <HAL_RCC_GetHCLKFreq+0x54>)
 8007596:	5cd3      	ldrb	r3, [r2, r3]
 8007598:	f003 031f 	and.w	r3, r3, #31
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	fa22 f303 	lsr.w	r3, r2, r3
 80075a2:	4a07      	ldr	r2, [pc, #28]	; (80075c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80075a4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80075a6:	4a07      	ldr	r2, [pc, #28]	; (80075c4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80075ac:	4b04      	ldr	r3, [pc, #16]	; (80075c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80075ae:	681b      	ldr	r3, [r3, #0]
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3708      	adds	r7, #8
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}
 80075b8:	58024400 	.word	0x58024400
 80075bc:	08014494 	.word	0x08014494
 80075c0:	24000004 	.word	0x24000004
 80075c4:	24000000 	.word	0x24000000

080075c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80075cc:	f7ff ffcc 	bl	8007568 <HAL_RCC_GetHCLKFreq>
 80075d0:	4602      	mov	r2, r0
 80075d2:	4b06      	ldr	r3, [pc, #24]	; (80075ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80075d4:	69db      	ldr	r3, [r3, #28]
 80075d6:	091b      	lsrs	r3, r3, #4
 80075d8:	f003 0307 	and.w	r3, r3, #7
 80075dc:	4904      	ldr	r1, [pc, #16]	; (80075f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80075de:	5ccb      	ldrb	r3, [r1, r3]
 80075e0:	f003 031f 	and.w	r3, r3, #31
 80075e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	bd80      	pop	{r7, pc}
 80075ec:	58024400 	.word	0x58024400
 80075f0:	08014494 	.word	0x08014494

080075f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80075f8:	f7ff ffb6 	bl	8007568 <HAL_RCC_GetHCLKFreq>
 80075fc:	4602      	mov	r2, r0
 80075fe:	4b06      	ldr	r3, [pc, #24]	; (8007618 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007600:	69db      	ldr	r3, [r3, #28]
 8007602:	0a1b      	lsrs	r3, r3, #8
 8007604:	f003 0307 	and.w	r3, r3, #7
 8007608:	4904      	ldr	r1, [pc, #16]	; (800761c <HAL_RCC_GetPCLK2Freq+0x28>)
 800760a:	5ccb      	ldrb	r3, [r1, r3]
 800760c:	f003 031f 	and.w	r3, r3, #31
 8007610:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007614:	4618      	mov	r0, r3
 8007616:	bd80      	pop	{r7, pc}
 8007618:	58024400 	.word	0x58024400
 800761c:	08014494 	.word	0x08014494

08007620 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	223f      	movs	r2, #63	; 0x3f
 800762e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007630:	4b1a      	ldr	r3, [pc, #104]	; (800769c <HAL_RCC_GetClockConfig+0x7c>)
 8007632:	691b      	ldr	r3, [r3, #16]
 8007634:	f003 0207 	and.w	r2, r3, #7
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800763c:	4b17      	ldr	r3, [pc, #92]	; (800769c <HAL_RCC_GetClockConfig+0x7c>)
 800763e:	699b      	ldr	r3, [r3, #24]
 8007640:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007648:	4b14      	ldr	r3, [pc, #80]	; (800769c <HAL_RCC_GetClockConfig+0x7c>)
 800764a:	699b      	ldr	r3, [r3, #24]
 800764c:	f003 020f 	and.w	r2, r3, #15
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007654:	4b11      	ldr	r3, [pc, #68]	; (800769c <HAL_RCC_GetClockConfig+0x7c>)
 8007656:	699b      	ldr	r3, [r3, #24]
 8007658:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007660:	4b0e      	ldr	r3, [pc, #56]	; (800769c <HAL_RCC_GetClockConfig+0x7c>)
 8007662:	69db      	ldr	r3, [r3, #28]
 8007664:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800766c:	4b0b      	ldr	r3, [pc, #44]	; (800769c <HAL_RCC_GetClockConfig+0x7c>)
 800766e:	69db      	ldr	r3, [r3, #28]
 8007670:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007678:	4b08      	ldr	r3, [pc, #32]	; (800769c <HAL_RCC_GetClockConfig+0x7c>)
 800767a:	6a1b      	ldr	r3, [r3, #32]
 800767c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007684:	4b06      	ldr	r3, [pc, #24]	; (80076a0 <HAL_RCC_GetClockConfig+0x80>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f003 020f 	and.w	r2, r3, #15
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	601a      	str	r2, [r3, #0]
}
 8007690:	bf00      	nop
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr
 800769c:	58024400 	.word	0x58024400
 80076a0:	52002000 	.word	0x52002000

080076a4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80076a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076a8:	b0ca      	sub	sp, #296	; 0x128
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80076b0:	2300      	movs	r3, #0
 80076b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80076b6:	2300      	movs	r3, #0
 80076b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80076bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80076c8:	2500      	movs	r5, #0
 80076ca:	ea54 0305 	orrs.w	r3, r4, r5
 80076ce:	d049      	beq.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80076d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80076da:	d02f      	beq.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80076dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80076e0:	d828      	bhi.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80076e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80076e6:	d01a      	beq.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80076e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80076ec:	d822      	bhi.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d003      	beq.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x56>
 80076f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076f6:	d007      	beq.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80076f8:	e01c      	b.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076fa:	4bb8      	ldr	r3, [pc, #736]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80076fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076fe:	4ab7      	ldr	r2, [pc, #732]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007704:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007706:	e01a      	b.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007708:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800770c:	3308      	adds	r3, #8
 800770e:	2102      	movs	r1, #2
 8007710:	4618      	mov	r0, r3
 8007712:	f001 fc8f 	bl	8009034 <RCCEx_PLL2_Config>
 8007716:	4603      	mov	r3, r0
 8007718:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800771c:	e00f      	b.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800771e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007722:	3328      	adds	r3, #40	; 0x28
 8007724:	2102      	movs	r1, #2
 8007726:	4618      	mov	r0, r3
 8007728:	f001 fd36 	bl	8009198 <RCCEx_PLL3_Config>
 800772c:	4603      	mov	r3, r0
 800772e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007732:	e004      	b.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800773a:	e000      	b.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800773c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800773e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007742:	2b00      	cmp	r3, #0
 8007744:	d10a      	bne.n	800775c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007746:	4ba5      	ldr	r3, [pc, #660]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007748:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800774a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800774e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007752:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007754:	4aa1      	ldr	r2, [pc, #644]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007756:	430b      	orrs	r3, r1
 8007758:	6513      	str	r3, [r2, #80]	; 0x50
 800775a:	e003      	b.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800775c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007760:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007764:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800776c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8007770:	f04f 0900 	mov.w	r9, #0
 8007774:	ea58 0309 	orrs.w	r3, r8, r9
 8007778:	d047      	beq.n	800780a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800777a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800777e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007780:	2b04      	cmp	r3, #4
 8007782:	d82a      	bhi.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007784:	a201      	add	r2, pc, #4	; (adr r2, 800778c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800778a:	bf00      	nop
 800778c:	080077a1 	.word	0x080077a1
 8007790:	080077af 	.word	0x080077af
 8007794:	080077c5 	.word	0x080077c5
 8007798:	080077e3 	.word	0x080077e3
 800779c:	080077e3 	.word	0x080077e3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077a0:	4b8e      	ldr	r3, [pc, #568]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80077a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a4:	4a8d      	ldr	r2, [pc, #564]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80077a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80077ac:	e01a      	b.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80077ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077b2:	3308      	adds	r3, #8
 80077b4:	2100      	movs	r1, #0
 80077b6:	4618      	mov	r0, r3
 80077b8:	f001 fc3c 	bl	8009034 <RCCEx_PLL2_Config>
 80077bc:	4603      	mov	r3, r0
 80077be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80077c2:	e00f      	b.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80077c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077c8:	3328      	adds	r3, #40	; 0x28
 80077ca:	2100      	movs	r1, #0
 80077cc:	4618      	mov	r0, r3
 80077ce:	f001 fce3 	bl	8009198 <RCCEx_PLL3_Config>
 80077d2:	4603      	mov	r3, r0
 80077d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80077d8:	e004      	b.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80077e0:	e000      	b.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80077e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d10a      	bne.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80077ec:	4b7b      	ldr	r3, [pc, #492]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80077ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077f0:	f023 0107 	bic.w	r1, r3, #7
 80077f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077fa:	4a78      	ldr	r2, [pc, #480]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80077fc:	430b      	orrs	r3, r1
 80077fe:	6513      	str	r3, [r2, #80]	; 0x50
 8007800:	e003      	b.n	800780a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007802:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007806:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800780a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800780e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007812:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8007816:	f04f 0b00 	mov.w	fp, #0
 800781a:	ea5a 030b 	orrs.w	r3, sl, fp
 800781e:	d04c      	beq.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007820:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007826:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800782a:	d030      	beq.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800782c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007830:	d829      	bhi.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007832:	2bc0      	cmp	r3, #192	; 0xc0
 8007834:	d02d      	beq.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007836:	2bc0      	cmp	r3, #192	; 0xc0
 8007838:	d825      	bhi.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800783a:	2b80      	cmp	r3, #128	; 0x80
 800783c:	d018      	beq.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800783e:	2b80      	cmp	r3, #128	; 0x80
 8007840:	d821      	bhi.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007842:	2b00      	cmp	r3, #0
 8007844:	d002      	beq.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007846:	2b40      	cmp	r3, #64	; 0x40
 8007848:	d007      	beq.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800784a:	e01c      	b.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800784c:	4b63      	ldr	r3, [pc, #396]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800784e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007850:	4a62      	ldr	r2, [pc, #392]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007852:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007856:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007858:	e01c      	b.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800785a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800785e:	3308      	adds	r3, #8
 8007860:	2100      	movs	r1, #0
 8007862:	4618      	mov	r0, r3
 8007864:	f001 fbe6 	bl	8009034 <RCCEx_PLL2_Config>
 8007868:	4603      	mov	r3, r0
 800786a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800786e:	e011      	b.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007870:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007874:	3328      	adds	r3, #40	; 0x28
 8007876:	2100      	movs	r1, #0
 8007878:	4618      	mov	r0, r3
 800787a:	f001 fc8d 	bl	8009198 <RCCEx_PLL3_Config>
 800787e:	4603      	mov	r3, r0
 8007880:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007884:	e006      	b.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800788c:	e002      	b.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800788e:	bf00      	nop
 8007890:	e000      	b.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007892:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007894:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007898:	2b00      	cmp	r3, #0
 800789a:	d10a      	bne.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800789c:	4b4f      	ldr	r3, [pc, #316]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800789e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078a0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80078a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078aa:	4a4c      	ldr	r2, [pc, #304]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80078ac:	430b      	orrs	r3, r1
 80078ae:	6513      	str	r3, [r2, #80]	; 0x50
 80078b0:	e003      	b.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80078ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80078c6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80078ca:	2300      	movs	r3, #0
 80078cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80078d0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80078d4:	460b      	mov	r3, r1
 80078d6:	4313      	orrs	r3, r2
 80078d8:	d053      	beq.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80078da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80078e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80078e6:	d035      	beq.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80078e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80078ec:	d82e      	bhi.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80078ee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80078f2:	d031      	beq.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80078f4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80078f8:	d828      	bhi.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80078fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078fe:	d01a      	beq.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007900:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007904:	d822      	bhi.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007906:	2b00      	cmp	r3, #0
 8007908:	d003      	beq.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800790a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800790e:	d007      	beq.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007910:	e01c      	b.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007912:	4b32      	ldr	r3, [pc, #200]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007916:	4a31      	ldr	r2, [pc, #196]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800791c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800791e:	e01c      	b.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007920:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007924:	3308      	adds	r3, #8
 8007926:	2100      	movs	r1, #0
 8007928:	4618      	mov	r0, r3
 800792a:	f001 fb83 	bl	8009034 <RCCEx_PLL2_Config>
 800792e:	4603      	mov	r3, r0
 8007930:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007934:	e011      	b.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007936:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800793a:	3328      	adds	r3, #40	; 0x28
 800793c:	2100      	movs	r1, #0
 800793e:	4618      	mov	r0, r3
 8007940:	f001 fc2a 	bl	8009198 <RCCEx_PLL3_Config>
 8007944:	4603      	mov	r3, r0
 8007946:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800794a:	e006      	b.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007952:	e002      	b.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007954:	bf00      	nop
 8007956:	e000      	b.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007958:	bf00      	nop
    }

    if (ret == HAL_OK)
 800795a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800795e:	2b00      	cmp	r3, #0
 8007960:	d10b      	bne.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007962:	4b1e      	ldr	r3, [pc, #120]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007966:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800796a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800796e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007972:	4a1a      	ldr	r2, [pc, #104]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007974:	430b      	orrs	r3, r1
 8007976:	6593      	str	r3, [r2, #88]	; 0x58
 8007978:	e003      	b.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800797a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800797e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007982:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800798a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800798e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007992:	2300      	movs	r3, #0
 8007994:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007998:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800799c:	460b      	mov	r3, r1
 800799e:	4313      	orrs	r3, r2
 80079a0:	d056      	beq.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80079a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80079aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80079ae:	d038      	beq.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80079b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80079b4:	d831      	bhi.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80079b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80079ba:	d034      	beq.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80079bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80079c0:	d82b      	bhi.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80079c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80079c6:	d01d      	beq.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80079c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80079cc:	d825      	bhi.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d006      	beq.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80079d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80079d6:	d00a      	beq.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80079d8:	e01f      	b.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80079da:	bf00      	nop
 80079dc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079e0:	4ba2      	ldr	r3, [pc, #648]	; (8007c6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80079e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e4:	4aa1      	ldr	r2, [pc, #644]	; (8007c6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80079e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80079ec:	e01c      	b.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079f2:	3308      	adds	r3, #8
 80079f4:	2100      	movs	r1, #0
 80079f6:	4618      	mov	r0, r3
 80079f8:	f001 fb1c 	bl	8009034 <RCCEx_PLL2_Config>
 80079fc:	4603      	mov	r3, r0
 80079fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007a02:	e011      	b.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a08:	3328      	adds	r3, #40	; 0x28
 8007a0a:	2100      	movs	r1, #0
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f001 fbc3 	bl	8009198 <RCCEx_PLL3_Config>
 8007a12:	4603      	mov	r3, r0
 8007a14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007a18:	e006      	b.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007a20:	e002      	b.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007a22:	bf00      	nop
 8007a24:	e000      	b.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007a26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d10b      	bne.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007a30:	4b8e      	ldr	r3, [pc, #568]	; (8007c6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a34:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8007a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a3c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007a40:	4a8a      	ldr	r2, [pc, #552]	; (8007c6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a42:	430b      	orrs	r3, r1
 8007a44:	6593      	str	r3, [r2, #88]	; 0x58
 8007a46:	e003      	b.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a4c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a58:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8007a5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007a60:	2300      	movs	r3, #0
 8007a62:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007a66:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8007a6a:	460b      	mov	r3, r1
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	d03a      	beq.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a76:	2b30      	cmp	r3, #48	; 0x30
 8007a78:	d01f      	beq.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007a7a:	2b30      	cmp	r3, #48	; 0x30
 8007a7c:	d819      	bhi.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007a7e:	2b20      	cmp	r3, #32
 8007a80:	d00c      	beq.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007a82:	2b20      	cmp	r3, #32
 8007a84:	d815      	bhi.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d019      	beq.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007a8a:	2b10      	cmp	r3, #16
 8007a8c:	d111      	bne.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a8e:	4b77      	ldr	r3, [pc, #476]	; (8007c6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a92:	4a76      	ldr	r2, [pc, #472]	; (8007c6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a98:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007a9a:	e011      	b.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aa0:	3308      	adds	r3, #8
 8007aa2:	2102      	movs	r1, #2
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f001 fac5 	bl	8009034 <RCCEx_PLL2_Config>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007ab0:	e006      	b.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007ab8:	e002      	b.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007aba:	bf00      	nop
 8007abc:	e000      	b.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007abe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ac0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d10a      	bne.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007ac8:	4b68      	ldr	r3, [pc, #416]	; (8007c6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007acc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8007ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ad6:	4a65      	ldr	r2, [pc, #404]	; (8007c6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ad8:	430b      	orrs	r3, r1
 8007ada:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007adc:	e003      	b.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ade:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ae2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aee:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8007af2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007af6:	2300      	movs	r3, #0
 8007af8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007afc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8007b00:	460b      	mov	r3, r1
 8007b02:	4313      	orrs	r3, r2
 8007b04:	d051      	beq.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b10:	d035      	beq.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007b12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b16:	d82e      	bhi.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007b18:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007b1c:	d031      	beq.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007b1e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007b22:	d828      	bhi.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007b24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b28:	d01a      	beq.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007b2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b2e:	d822      	bhi.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d003      	beq.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007b34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b38:	d007      	beq.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007b3a:	e01c      	b.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b3c:	4b4b      	ldr	r3, [pc, #300]	; (8007c6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b40:	4a4a      	ldr	r2, [pc, #296]	; (8007c6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007b48:	e01c      	b.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b4e:	3308      	adds	r3, #8
 8007b50:	2100      	movs	r1, #0
 8007b52:	4618      	mov	r0, r3
 8007b54:	f001 fa6e 	bl	8009034 <RCCEx_PLL2_Config>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007b5e:	e011      	b.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b64:	3328      	adds	r3, #40	; 0x28
 8007b66:	2100      	movs	r1, #0
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f001 fb15 	bl	8009198 <RCCEx_PLL3_Config>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007b74:	e006      	b.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007b7c:	e002      	b.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007b7e:	bf00      	nop
 8007b80:	e000      	b.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007b82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d10a      	bne.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007b8c:	4b37      	ldr	r3, [pc, #220]	; (8007c6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b90:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8007b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b9a:	4a34      	ldr	r2, [pc, #208]	; (8007c6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b9c:	430b      	orrs	r3, r1
 8007b9e:	6513      	str	r3, [r2, #80]	; 0x50
 8007ba0:	e003      	b.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ba2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ba6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8007bb6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007bba:	2300      	movs	r3, #0
 8007bbc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007bc0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	d056      	beq.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007bd4:	d033      	beq.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007bd6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007bda:	d82c      	bhi.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007bdc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007be0:	d02f      	beq.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007be2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007be6:	d826      	bhi.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007be8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007bec:	d02b      	beq.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007bee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007bf2:	d820      	bhi.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007bf4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007bf8:	d012      	beq.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007bfa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007bfe:	d81a      	bhi.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d022      	beq.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007c04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c08:	d115      	bne.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c0e:	3308      	adds	r3, #8
 8007c10:	2101      	movs	r1, #1
 8007c12:	4618      	mov	r0, r3
 8007c14:	f001 fa0e 	bl	8009034 <RCCEx_PLL2_Config>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007c1e:	e015      	b.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c24:	3328      	adds	r3, #40	; 0x28
 8007c26:	2101      	movs	r1, #1
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f001 fab5 	bl	8009198 <RCCEx_PLL3_Config>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007c34:	e00a      	b.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c36:	2301      	movs	r3, #1
 8007c38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007c3c:	e006      	b.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007c3e:	bf00      	nop
 8007c40:	e004      	b.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007c42:	bf00      	nop
 8007c44:	e002      	b.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007c46:	bf00      	nop
 8007c48:	e000      	b.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007c4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d10d      	bne.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007c54:	4b05      	ldr	r3, [pc, #20]	; (8007c6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c58:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8007c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c62:	4a02      	ldr	r2, [pc, #8]	; (8007c6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c64:	430b      	orrs	r3, r1
 8007c66:	6513      	str	r3, [r2, #80]	; 0x50
 8007c68:	e006      	b.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007c6a:	bf00      	nop
 8007c6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c74:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c80:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8007c84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007c88:	2300      	movs	r3, #0
 8007c8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007c8e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8007c92:	460b      	mov	r3, r1
 8007c94:	4313      	orrs	r3, r2
 8007c96:	d055      	beq.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c9c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007ca0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ca4:	d033      	beq.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007ca6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007caa:	d82c      	bhi.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cb0:	d02f      	beq.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cb6:	d826      	bhi.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007cb8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007cbc:	d02b      	beq.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007cbe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007cc2:	d820      	bhi.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007cc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cc8:	d012      	beq.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007cca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cce:	d81a      	bhi.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d022      	beq.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007cd4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007cd8:	d115      	bne.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cde:	3308      	adds	r3, #8
 8007ce0:	2101      	movs	r1, #1
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f001 f9a6 	bl	8009034 <RCCEx_PLL2_Config>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007cee:	e015      	b.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cf4:	3328      	adds	r3, #40	; 0x28
 8007cf6:	2101      	movs	r1, #1
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f001 fa4d 	bl	8009198 <RCCEx_PLL3_Config>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007d04:	e00a      	b.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007d0c:	e006      	b.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007d0e:	bf00      	nop
 8007d10:	e004      	b.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007d12:	bf00      	nop
 8007d14:	e002      	b.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007d16:	bf00      	nop
 8007d18:	e000      	b.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007d1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d10b      	bne.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007d24:	4ba3      	ldr	r3, [pc, #652]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d28:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007d34:	4a9f      	ldr	r2, [pc, #636]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d36:	430b      	orrs	r3, r1
 8007d38:	6593      	str	r3, [r2, #88]	; 0x58
 8007d3a:	e003      	b.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d40:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d4c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8007d50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007d54:	2300      	movs	r3, #0
 8007d56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007d5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007d5e:	460b      	mov	r3, r1
 8007d60:	4313      	orrs	r3, r2
 8007d62:	d037      	beq.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d6e:	d00e      	beq.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007d70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d74:	d816      	bhi.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d018      	beq.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007d7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d7e:	d111      	bne.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d80:	4b8c      	ldr	r3, [pc, #560]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d84:	4a8b      	ldr	r2, [pc, #556]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007d8c:	e00f      	b.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d92:	3308      	adds	r3, #8
 8007d94:	2101      	movs	r1, #1
 8007d96:	4618      	mov	r0, r3
 8007d98:	f001 f94c 	bl	8009034 <RCCEx_PLL2_Config>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007da2:	e004      	b.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007da4:	2301      	movs	r3, #1
 8007da6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007daa:	e000      	b.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007dac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d10a      	bne.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007db6:	4b7f      	ldr	r3, [pc, #508]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007db8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dba:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dc4:	4a7b      	ldr	r2, [pc, #492]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007dc6:	430b      	orrs	r3, r1
 8007dc8:	6513      	str	r3, [r2, #80]	; 0x50
 8007dca:	e003      	b.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dcc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007dd0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ddc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8007de0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007de4:	2300      	movs	r3, #0
 8007de6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007dea:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8007dee:	460b      	mov	r3, r1
 8007df0:	4313      	orrs	r3, r2
 8007df2:	d039      	beq.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007df8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007dfa:	2b03      	cmp	r3, #3
 8007dfc:	d81c      	bhi.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007dfe:	a201      	add	r2, pc, #4	; (adr r2, 8007e04 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e04:	08007e41 	.word	0x08007e41
 8007e08:	08007e15 	.word	0x08007e15
 8007e0c:	08007e23 	.word	0x08007e23
 8007e10:	08007e41 	.word	0x08007e41
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e14:	4b67      	ldr	r3, [pc, #412]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e18:	4a66      	ldr	r2, [pc, #408]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007e20:	e00f      	b.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e26:	3308      	adds	r3, #8
 8007e28:	2102      	movs	r1, #2
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f001 f902 	bl	8009034 <RCCEx_PLL2_Config>
 8007e30:	4603      	mov	r3, r0
 8007e32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007e36:	e004      	b.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007e3e:	e000      	b.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007e40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d10a      	bne.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007e4a:	4b5a      	ldr	r3, [pc, #360]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e4e:	f023 0103 	bic.w	r1, r3, #3
 8007e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e58:	4a56      	ldr	r2, [pc, #344]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e5a:	430b      	orrs	r3, r1
 8007e5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007e5e:	e003      	b.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e64:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e70:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8007e74:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e78:	2300      	movs	r3, #0
 8007e7a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007e7e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8007e82:	460b      	mov	r3, r1
 8007e84:	4313      	orrs	r3, r2
 8007e86:	f000 809f 	beq.w	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007e8a:	4b4b      	ldr	r3, [pc, #300]	; (8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a4a      	ldr	r2, [pc, #296]	; (8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e94:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007e96:	f7f9 ff11 	bl	8001cbc <HAL_GetTick>
 8007e9a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e9e:	e00b      	b.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ea0:	f7f9 ff0c 	bl	8001cbc <HAL_GetTick>
 8007ea4:	4602      	mov	r2, r0
 8007ea6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007eaa:	1ad3      	subs	r3, r2, r3
 8007eac:	2b64      	cmp	r3, #100	; 0x64
 8007eae:	d903      	bls.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007eb0:	2303      	movs	r3, #3
 8007eb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007eb6:	e005      	b.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007eb8:	4b3f      	ldr	r3, [pc, #252]	; (8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d0ed      	beq.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007ec4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d179      	bne.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007ecc:	4b39      	ldr	r3, [pc, #228]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ece:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ed4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007ed8:	4053      	eors	r3, r2
 8007eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d015      	beq.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007ee2:	4b34      	ldr	r3, [pc, #208]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ee6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007eea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007eee:	4b31      	ldr	r3, [pc, #196]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ef2:	4a30      	ldr	r2, [pc, #192]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ef8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007efa:	4b2e      	ldr	r3, [pc, #184]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007efe:	4a2d      	ldr	r2, [pc, #180]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f04:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007f06:	4a2b      	ldr	r2, [pc, #172]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f08:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007f0c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f12:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007f16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f1a:	d118      	bne.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f1c:	f7f9 fece 	bl	8001cbc <HAL_GetTick>
 8007f20:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007f24:	e00d      	b.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f26:	f7f9 fec9 	bl	8001cbc <HAL_GetTick>
 8007f2a:	4602      	mov	r2, r0
 8007f2c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007f30:	1ad2      	subs	r2, r2, r3
 8007f32:	f241 3388 	movw	r3, #5000	; 0x1388
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d903      	bls.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007f3a:	2303      	movs	r3, #3
 8007f3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8007f40:	e005      	b.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007f42:	4b1c      	ldr	r3, [pc, #112]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f46:	f003 0302 	and.w	r3, r3, #2
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d0eb      	beq.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007f4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d129      	bne.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f5a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f66:	d10e      	bne.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007f68:	4b12      	ldr	r3, [pc, #72]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f6a:	691b      	ldr	r3, [r3, #16]
 8007f6c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8007f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f74:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007f78:	091a      	lsrs	r2, r3, #4
 8007f7a:	4b10      	ldr	r3, [pc, #64]	; (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007f7c:	4013      	ands	r3, r2
 8007f7e:	4a0d      	ldr	r2, [pc, #52]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f80:	430b      	orrs	r3, r1
 8007f82:	6113      	str	r3, [r2, #16]
 8007f84:	e005      	b.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007f86:	4b0b      	ldr	r3, [pc, #44]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f88:	691b      	ldr	r3, [r3, #16]
 8007f8a:	4a0a      	ldr	r2, [pc, #40]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f8c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007f90:	6113      	str	r3, [r2, #16]
 8007f92:	4b08      	ldr	r3, [pc, #32]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f94:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f9a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007f9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007fa2:	4a04      	ldr	r2, [pc, #16]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fa4:	430b      	orrs	r3, r1
 8007fa6:	6713      	str	r3, [r2, #112]	; 0x70
 8007fa8:	e00e      	b.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007faa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007fae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8007fb2:	e009      	b.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007fb4:	58024400 	.word	0x58024400
 8007fb8:	58024800 	.word	0x58024800
 8007fbc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fc0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007fc4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd0:	f002 0301 	and.w	r3, r2, #1
 8007fd4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007fd8:	2300      	movs	r3, #0
 8007fda:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007fde:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007fe2:	460b      	mov	r3, r1
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	f000 8089 	beq.w	80080fc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ff0:	2b28      	cmp	r3, #40	; 0x28
 8007ff2:	d86b      	bhi.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007ff4:	a201      	add	r2, pc, #4	; (adr r2, 8007ffc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ffa:	bf00      	nop
 8007ffc:	080080d5 	.word	0x080080d5
 8008000:	080080cd 	.word	0x080080cd
 8008004:	080080cd 	.word	0x080080cd
 8008008:	080080cd 	.word	0x080080cd
 800800c:	080080cd 	.word	0x080080cd
 8008010:	080080cd 	.word	0x080080cd
 8008014:	080080cd 	.word	0x080080cd
 8008018:	080080cd 	.word	0x080080cd
 800801c:	080080a1 	.word	0x080080a1
 8008020:	080080cd 	.word	0x080080cd
 8008024:	080080cd 	.word	0x080080cd
 8008028:	080080cd 	.word	0x080080cd
 800802c:	080080cd 	.word	0x080080cd
 8008030:	080080cd 	.word	0x080080cd
 8008034:	080080cd 	.word	0x080080cd
 8008038:	080080cd 	.word	0x080080cd
 800803c:	080080b7 	.word	0x080080b7
 8008040:	080080cd 	.word	0x080080cd
 8008044:	080080cd 	.word	0x080080cd
 8008048:	080080cd 	.word	0x080080cd
 800804c:	080080cd 	.word	0x080080cd
 8008050:	080080cd 	.word	0x080080cd
 8008054:	080080cd 	.word	0x080080cd
 8008058:	080080cd 	.word	0x080080cd
 800805c:	080080d5 	.word	0x080080d5
 8008060:	080080cd 	.word	0x080080cd
 8008064:	080080cd 	.word	0x080080cd
 8008068:	080080cd 	.word	0x080080cd
 800806c:	080080cd 	.word	0x080080cd
 8008070:	080080cd 	.word	0x080080cd
 8008074:	080080cd 	.word	0x080080cd
 8008078:	080080cd 	.word	0x080080cd
 800807c:	080080d5 	.word	0x080080d5
 8008080:	080080cd 	.word	0x080080cd
 8008084:	080080cd 	.word	0x080080cd
 8008088:	080080cd 	.word	0x080080cd
 800808c:	080080cd 	.word	0x080080cd
 8008090:	080080cd 	.word	0x080080cd
 8008094:	080080cd 	.word	0x080080cd
 8008098:	080080cd 	.word	0x080080cd
 800809c:	080080d5 	.word	0x080080d5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80080a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080a4:	3308      	adds	r3, #8
 80080a6:	2101      	movs	r1, #1
 80080a8:	4618      	mov	r0, r3
 80080aa:	f000 ffc3 	bl	8009034 <RCCEx_PLL2_Config>
 80080ae:	4603      	mov	r3, r0
 80080b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80080b4:	e00f      	b.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80080b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080ba:	3328      	adds	r3, #40	; 0x28
 80080bc:	2101      	movs	r1, #1
 80080be:	4618      	mov	r0, r3
 80080c0:	f001 f86a 	bl	8009198 <RCCEx_PLL3_Config>
 80080c4:	4603      	mov	r3, r0
 80080c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80080ca:	e004      	b.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080cc:	2301      	movs	r3, #1
 80080ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80080d2:	e000      	b.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80080d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d10a      	bne.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80080de:	4bbf      	ldr	r3, [pc, #764]	; (80083dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80080e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080e2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80080e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080ec:	4abb      	ldr	r2, [pc, #748]	; (80083dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80080ee:	430b      	orrs	r3, r1
 80080f0:	6553      	str	r3, [r2, #84]	; 0x54
 80080f2:	e003      	b.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80080fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008104:	f002 0302 	and.w	r3, r2, #2
 8008108:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800810c:	2300      	movs	r3, #0
 800810e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008112:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8008116:	460b      	mov	r3, r1
 8008118:	4313      	orrs	r3, r2
 800811a:	d041      	beq.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800811c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008120:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008122:	2b05      	cmp	r3, #5
 8008124:	d824      	bhi.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8008126:	a201      	add	r2, pc, #4	; (adr r2, 800812c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800812c:	08008179 	.word	0x08008179
 8008130:	08008145 	.word	0x08008145
 8008134:	0800815b 	.word	0x0800815b
 8008138:	08008179 	.word	0x08008179
 800813c:	08008179 	.word	0x08008179
 8008140:	08008179 	.word	0x08008179
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008144:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008148:	3308      	adds	r3, #8
 800814a:	2101      	movs	r1, #1
 800814c:	4618      	mov	r0, r3
 800814e:	f000 ff71 	bl	8009034 <RCCEx_PLL2_Config>
 8008152:	4603      	mov	r3, r0
 8008154:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008158:	e00f      	b.n	800817a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800815a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800815e:	3328      	adds	r3, #40	; 0x28
 8008160:	2101      	movs	r1, #1
 8008162:	4618      	mov	r0, r3
 8008164:	f001 f818 	bl	8009198 <RCCEx_PLL3_Config>
 8008168:	4603      	mov	r3, r0
 800816a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800816e:	e004      	b.n	800817a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008170:	2301      	movs	r3, #1
 8008172:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008176:	e000      	b.n	800817a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008178:	bf00      	nop
    }

    if (ret == HAL_OK)
 800817a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800817e:	2b00      	cmp	r3, #0
 8008180:	d10a      	bne.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008182:	4b96      	ldr	r3, [pc, #600]	; (80083dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008186:	f023 0107 	bic.w	r1, r3, #7
 800818a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800818e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008190:	4a92      	ldr	r2, [pc, #584]	; (80083dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008192:	430b      	orrs	r3, r1
 8008194:	6553      	str	r3, [r2, #84]	; 0x54
 8008196:	e003      	b.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008198:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800819c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80081a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a8:	f002 0304 	and.w	r3, r2, #4
 80081ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80081b0:	2300      	movs	r3, #0
 80081b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80081b6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80081ba:	460b      	mov	r3, r1
 80081bc:	4313      	orrs	r3, r2
 80081be:	d044      	beq.n	800824a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80081c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081c8:	2b05      	cmp	r3, #5
 80081ca:	d825      	bhi.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80081cc:	a201      	add	r2, pc, #4	; (adr r2, 80081d4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80081ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081d2:	bf00      	nop
 80081d4:	08008221 	.word	0x08008221
 80081d8:	080081ed 	.word	0x080081ed
 80081dc:	08008203 	.word	0x08008203
 80081e0:	08008221 	.word	0x08008221
 80081e4:	08008221 	.word	0x08008221
 80081e8:	08008221 	.word	0x08008221
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80081ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081f0:	3308      	adds	r3, #8
 80081f2:	2101      	movs	r1, #1
 80081f4:	4618      	mov	r0, r3
 80081f6:	f000 ff1d 	bl	8009034 <RCCEx_PLL2_Config>
 80081fa:	4603      	mov	r3, r0
 80081fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008200:	e00f      	b.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008202:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008206:	3328      	adds	r3, #40	; 0x28
 8008208:	2101      	movs	r1, #1
 800820a:	4618      	mov	r0, r3
 800820c:	f000 ffc4 	bl	8009198 <RCCEx_PLL3_Config>
 8008210:	4603      	mov	r3, r0
 8008212:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008216:	e004      	b.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008218:	2301      	movs	r3, #1
 800821a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800821e:	e000      	b.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008220:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008222:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008226:	2b00      	cmp	r3, #0
 8008228:	d10b      	bne.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800822a:	4b6c      	ldr	r3, [pc, #432]	; (80083dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800822c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800822e:	f023 0107 	bic.w	r1, r3, #7
 8008232:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008236:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800823a:	4a68      	ldr	r2, [pc, #416]	; (80083dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800823c:	430b      	orrs	r3, r1
 800823e:	6593      	str	r3, [r2, #88]	; 0x58
 8008240:	e003      	b.n	800824a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008242:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008246:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800824a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800824e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008252:	f002 0320 	and.w	r3, r2, #32
 8008256:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800825a:	2300      	movs	r3, #0
 800825c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008260:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008264:	460b      	mov	r3, r1
 8008266:	4313      	orrs	r3, r2
 8008268:	d055      	beq.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800826a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800826e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008272:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008276:	d033      	beq.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008278:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800827c:	d82c      	bhi.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800827e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008282:	d02f      	beq.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008288:	d826      	bhi.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800828a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800828e:	d02b      	beq.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008290:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008294:	d820      	bhi.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008296:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800829a:	d012      	beq.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800829c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082a0:	d81a      	bhi.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d022      	beq.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80082a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082aa:	d115      	bne.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80082ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082b0:	3308      	adds	r3, #8
 80082b2:	2100      	movs	r1, #0
 80082b4:	4618      	mov	r0, r3
 80082b6:	f000 febd 	bl	8009034 <RCCEx_PLL2_Config>
 80082ba:	4603      	mov	r3, r0
 80082bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80082c0:	e015      	b.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80082c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082c6:	3328      	adds	r3, #40	; 0x28
 80082c8:	2102      	movs	r1, #2
 80082ca:	4618      	mov	r0, r3
 80082cc:	f000 ff64 	bl	8009198 <RCCEx_PLL3_Config>
 80082d0:	4603      	mov	r3, r0
 80082d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80082d6:	e00a      	b.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082d8:	2301      	movs	r3, #1
 80082da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80082de:	e006      	b.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80082e0:	bf00      	nop
 80082e2:	e004      	b.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80082e4:	bf00      	nop
 80082e6:	e002      	b.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80082e8:	bf00      	nop
 80082ea:	e000      	b.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80082ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d10b      	bne.n	800830e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80082f6:	4b39      	ldr	r3, [pc, #228]	; (80083dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80082f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082fa:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80082fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008306:	4a35      	ldr	r2, [pc, #212]	; (80083dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008308:	430b      	orrs	r3, r1
 800830a:	6553      	str	r3, [r2, #84]	; 0x54
 800830c:	e003      	b.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800830e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008312:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008316:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800831a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8008322:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008326:	2300      	movs	r3, #0
 8008328:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800832c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8008330:	460b      	mov	r3, r1
 8008332:	4313      	orrs	r3, r2
 8008334:	d058      	beq.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800833a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800833e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008342:	d033      	beq.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008344:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008348:	d82c      	bhi.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800834a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800834e:	d02f      	beq.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008354:	d826      	bhi.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008356:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800835a:	d02b      	beq.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800835c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008360:	d820      	bhi.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008362:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008366:	d012      	beq.n	800838e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008368:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800836c:	d81a      	bhi.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800836e:	2b00      	cmp	r3, #0
 8008370:	d022      	beq.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008372:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008376:	d115      	bne.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008378:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800837c:	3308      	adds	r3, #8
 800837e:	2100      	movs	r1, #0
 8008380:	4618      	mov	r0, r3
 8008382:	f000 fe57 	bl	8009034 <RCCEx_PLL2_Config>
 8008386:	4603      	mov	r3, r0
 8008388:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800838c:	e015      	b.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800838e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008392:	3328      	adds	r3, #40	; 0x28
 8008394:	2102      	movs	r1, #2
 8008396:	4618      	mov	r0, r3
 8008398:	f000 fefe 	bl	8009198 <RCCEx_PLL3_Config>
 800839c:	4603      	mov	r3, r0
 800839e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80083a2:	e00a      	b.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083a4:	2301      	movs	r3, #1
 80083a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80083aa:	e006      	b.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80083ac:	bf00      	nop
 80083ae:	e004      	b.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80083b0:	bf00      	nop
 80083b2:	e002      	b.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80083b4:	bf00      	nop
 80083b6:	e000      	b.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80083b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d10e      	bne.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80083c2:	4b06      	ldr	r3, [pc, #24]	; (80083dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80083c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083c6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80083ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80083d2:	4a02      	ldr	r2, [pc, #8]	; (80083dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80083d4:	430b      	orrs	r3, r1
 80083d6:	6593      	str	r3, [r2, #88]	; 0x58
 80083d8:	e006      	b.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80083da:	bf00      	nop
 80083dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80083e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80083f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80083f8:	2300      	movs	r3, #0
 80083fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80083fe:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8008402:	460b      	mov	r3, r1
 8008404:	4313      	orrs	r3, r2
 8008406:	d055      	beq.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008408:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800840c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008410:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008414:	d033      	beq.n	800847e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008416:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800841a:	d82c      	bhi.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800841c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008420:	d02f      	beq.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008422:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008426:	d826      	bhi.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008428:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800842c:	d02b      	beq.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800842e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008432:	d820      	bhi.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008434:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008438:	d012      	beq.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800843a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800843e:	d81a      	bhi.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008440:	2b00      	cmp	r3, #0
 8008442:	d022      	beq.n	800848a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008444:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008448:	d115      	bne.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800844a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800844e:	3308      	adds	r3, #8
 8008450:	2100      	movs	r1, #0
 8008452:	4618      	mov	r0, r3
 8008454:	f000 fdee 	bl	8009034 <RCCEx_PLL2_Config>
 8008458:	4603      	mov	r3, r0
 800845a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800845e:	e015      	b.n	800848c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008460:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008464:	3328      	adds	r3, #40	; 0x28
 8008466:	2102      	movs	r1, #2
 8008468:	4618      	mov	r0, r3
 800846a:	f000 fe95 	bl	8009198 <RCCEx_PLL3_Config>
 800846e:	4603      	mov	r3, r0
 8008470:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008474:	e00a      	b.n	800848c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008476:	2301      	movs	r3, #1
 8008478:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800847c:	e006      	b.n	800848c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800847e:	bf00      	nop
 8008480:	e004      	b.n	800848c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008482:	bf00      	nop
 8008484:	e002      	b.n	800848c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008486:	bf00      	nop
 8008488:	e000      	b.n	800848c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800848a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800848c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008490:	2b00      	cmp	r3, #0
 8008492:	d10b      	bne.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008494:	4ba1      	ldr	r3, [pc, #644]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008498:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800849c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80084a4:	4a9d      	ldr	r2, [pc, #628]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80084a6:	430b      	orrs	r3, r1
 80084a8:	6593      	str	r3, [r2, #88]	; 0x58
 80084aa:	e003      	b.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80084b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80084b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084bc:	f002 0308 	and.w	r3, r2, #8
 80084c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80084c4:	2300      	movs	r3, #0
 80084c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80084ca:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80084ce:	460b      	mov	r3, r1
 80084d0:	4313      	orrs	r3, r2
 80084d2:	d01e      	beq.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80084d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084e0:	d10c      	bne.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80084e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084e6:	3328      	adds	r3, #40	; 0x28
 80084e8:	2102      	movs	r1, #2
 80084ea:	4618      	mov	r0, r3
 80084ec:	f000 fe54 	bl	8009198 <RCCEx_PLL3_Config>
 80084f0:	4603      	mov	r3, r0
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d002      	beq.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80084f6:	2301      	movs	r3, #1
 80084f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80084fc:	4b87      	ldr	r3, [pc, #540]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80084fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008500:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008504:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008508:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800850c:	4a83      	ldr	r2, [pc, #524]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800850e:	430b      	orrs	r3, r1
 8008510:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008512:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800851a:	f002 0310 	and.w	r3, r2, #16
 800851e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008522:	2300      	movs	r3, #0
 8008524:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008528:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800852c:	460b      	mov	r3, r1
 800852e:	4313      	orrs	r3, r2
 8008530:	d01e      	beq.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008532:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008536:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800853a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800853e:	d10c      	bne.n	800855a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008540:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008544:	3328      	adds	r3, #40	; 0x28
 8008546:	2102      	movs	r1, #2
 8008548:	4618      	mov	r0, r3
 800854a:	f000 fe25 	bl	8009198 <RCCEx_PLL3_Config>
 800854e:	4603      	mov	r3, r0
 8008550:	2b00      	cmp	r3, #0
 8008552:	d002      	beq.n	800855a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008554:	2301      	movs	r3, #1
 8008556:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800855a:	4b70      	ldr	r3, [pc, #448]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800855c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800855e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008562:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008566:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800856a:	4a6c      	ldr	r2, [pc, #432]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800856c:	430b      	orrs	r3, r1
 800856e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008570:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008578:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800857c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008580:	2300      	movs	r3, #0
 8008582:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008586:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800858a:	460b      	mov	r3, r1
 800858c:	4313      	orrs	r3, r2
 800858e:	d03e      	beq.n	800860e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008590:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008594:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008598:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800859c:	d022      	beq.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800859e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085a2:	d81b      	bhi.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d003      	beq.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80085a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085ac:	d00b      	beq.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80085ae:	e015      	b.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80085b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085b4:	3308      	adds	r3, #8
 80085b6:	2100      	movs	r1, #0
 80085b8:	4618      	mov	r0, r3
 80085ba:	f000 fd3b 	bl	8009034 <RCCEx_PLL2_Config>
 80085be:	4603      	mov	r3, r0
 80085c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80085c4:	e00f      	b.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80085c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085ca:	3328      	adds	r3, #40	; 0x28
 80085cc:	2102      	movs	r1, #2
 80085ce:	4618      	mov	r0, r3
 80085d0:	f000 fde2 	bl	8009198 <RCCEx_PLL3_Config>
 80085d4:	4603      	mov	r3, r0
 80085d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80085da:	e004      	b.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085dc:	2301      	movs	r3, #1
 80085de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80085e2:	e000      	b.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80085e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d10b      	bne.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80085ee:	4b4b      	ldr	r3, [pc, #300]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80085f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085f2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80085f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80085fe:	4a47      	ldr	r2, [pc, #284]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008600:	430b      	orrs	r3, r1
 8008602:	6593      	str	r3, [r2, #88]	; 0x58
 8008604:	e003      	b.n	800860e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008606:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800860a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800860e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008616:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800861a:	67bb      	str	r3, [r7, #120]	; 0x78
 800861c:	2300      	movs	r3, #0
 800861e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008620:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8008624:	460b      	mov	r3, r1
 8008626:	4313      	orrs	r3, r2
 8008628:	d03b      	beq.n	80086a2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800862a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800862e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008632:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008636:	d01f      	beq.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008638:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800863c:	d818      	bhi.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800863e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008642:	d003      	beq.n	800864c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008644:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008648:	d007      	beq.n	800865a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800864a:	e011      	b.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800864c:	4b33      	ldr	r3, [pc, #204]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800864e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008650:	4a32      	ldr	r2, [pc, #200]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008652:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008656:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008658:	e00f      	b.n	800867a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800865a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800865e:	3328      	adds	r3, #40	; 0x28
 8008660:	2101      	movs	r1, #1
 8008662:	4618      	mov	r0, r3
 8008664:	f000 fd98 	bl	8009198 <RCCEx_PLL3_Config>
 8008668:	4603      	mov	r3, r0
 800866a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800866e:	e004      	b.n	800867a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008670:	2301      	movs	r3, #1
 8008672:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008676:	e000      	b.n	800867a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008678:	bf00      	nop
    }

    if (ret == HAL_OK)
 800867a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800867e:	2b00      	cmp	r3, #0
 8008680:	d10b      	bne.n	800869a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008682:	4b26      	ldr	r3, [pc, #152]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008686:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800868a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800868e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008692:	4a22      	ldr	r2, [pc, #136]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008694:	430b      	orrs	r3, r1
 8008696:	6553      	str	r3, [r2, #84]	; 0x54
 8008698:	e003      	b.n	80086a2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800869a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800869e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80086a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086aa:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80086ae:	673b      	str	r3, [r7, #112]	; 0x70
 80086b0:	2300      	movs	r3, #0
 80086b2:	677b      	str	r3, [r7, #116]	; 0x74
 80086b4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80086b8:	460b      	mov	r3, r1
 80086ba:	4313      	orrs	r3, r2
 80086bc:	d034      	beq.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80086be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d003      	beq.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80086c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086cc:	d007      	beq.n	80086de <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80086ce:	e011      	b.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086d0:	4b12      	ldr	r3, [pc, #72]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80086d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d4:	4a11      	ldr	r2, [pc, #68]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80086d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80086dc:	e00e      	b.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80086de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086e2:	3308      	adds	r3, #8
 80086e4:	2102      	movs	r1, #2
 80086e6:	4618      	mov	r0, r3
 80086e8:	f000 fca4 	bl	8009034 <RCCEx_PLL2_Config>
 80086ec:	4603      	mov	r3, r0
 80086ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80086f2:	e003      	b.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80086f4:	2301      	movs	r3, #1
 80086f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80086fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008700:	2b00      	cmp	r3, #0
 8008702:	d10d      	bne.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008704:	4b05      	ldr	r3, [pc, #20]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008708:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800870c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008712:	4a02      	ldr	r2, [pc, #8]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008714:	430b      	orrs	r3, r1
 8008716:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008718:	e006      	b.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800871a:	bf00      	nop
 800871c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008720:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008724:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008728:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800872c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008730:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8008734:	66bb      	str	r3, [r7, #104]	; 0x68
 8008736:	2300      	movs	r3, #0
 8008738:	66fb      	str	r3, [r7, #108]	; 0x6c
 800873a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800873e:	460b      	mov	r3, r1
 8008740:	4313      	orrs	r3, r2
 8008742:	d00c      	beq.n	800875e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008744:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008748:	3328      	adds	r3, #40	; 0x28
 800874a:	2102      	movs	r1, #2
 800874c:	4618      	mov	r0, r3
 800874e:	f000 fd23 	bl	8009198 <RCCEx_PLL3_Config>
 8008752:	4603      	mov	r3, r0
 8008754:	2b00      	cmp	r3, #0
 8008756:	d002      	beq.n	800875e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008758:	2301      	movs	r3, #1
 800875a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800875e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008766:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800876a:	663b      	str	r3, [r7, #96]	; 0x60
 800876c:	2300      	movs	r3, #0
 800876e:	667b      	str	r3, [r7, #100]	; 0x64
 8008770:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8008774:	460b      	mov	r3, r1
 8008776:	4313      	orrs	r3, r2
 8008778:	d038      	beq.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800877a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800877e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008782:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008786:	d018      	beq.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008788:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800878c:	d811      	bhi.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800878e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008792:	d014      	beq.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008794:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008798:	d80b      	bhi.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800879a:	2b00      	cmp	r3, #0
 800879c:	d011      	beq.n	80087c2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800879e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087a2:	d106      	bne.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087a4:	4bc3      	ldr	r3, [pc, #780]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80087a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a8:	4ac2      	ldr	r2, [pc, #776]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80087aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80087b0:	e008      	b.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087b2:	2301      	movs	r3, #1
 80087b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80087b8:	e004      	b.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80087ba:	bf00      	nop
 80087bc:	e002      	b.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80087be:	bf00      	nop
 80087c0:	e000      	b.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80087c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d10b      	bne.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80087cc:	4bb9      	ldr	r3, [pc, #740]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80087ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087d0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80087d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087dc:	4ab5      	ldr	r2, [pc, #724]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80087de:	430b      	orrs	r3, r1
 80087e0:	6553      	str	r3, [r2, #84]	; 0x54
 80087e2:	e003      	b.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80087ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80087f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80087fa:	2300      	movs	r3, #0
 80087fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80087fe:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8008802:	460b      	mov	r3, r1
 8008804:	4313      	orrs	r3, r2
 8008806:	d009      	beq.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008808:	4baa      	ldr	r3, [pc, #680]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800880a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800880c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008810:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008814:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008816:	4aa7      	ldr	r2, [pc, #668]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008818:	430b      	orrs	r3, r1
 800881a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800881c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008824:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8008828:	653b      	str	r3, [r7, #80]	; 0x50
 800882a:	2300      	movs	r3, #0
 800882c:	657b      	str	r3, [r7, #84]	; 0x54
 800882e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8008832:	460b      	mov	r3, r1
 8008834:	4313      	orrs	r3, r2
 8008836:	d00a      	beq.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008838:	4b9e      	ldr	r3, [pc, #632]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800883a:	691b      	ldr	r3, [r3, #16]
 800883c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8008840:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008844:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008848:	4a9a      	ldr	r2, [pc, #616]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800884a:	430b      	orrs	r3, r1
 800884c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800884e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008856:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800885a:	64bb      	str	r3, [r7, #72]	; 0x48
 800885c:	2300      	movs	r3, #0
 800885e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008860:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8008864:	460b      	mov	r3, r1
 8008866:	4313      	orrs	r3, r2
 8008868:	d009      	beq.n	800887e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800886a:	4b92      	ldr	r3, [pc, #584]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800886c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800886e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8008872:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008876:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008878:	4a8e      	ldr	r2, [pc, #568]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800887a:	430b      	orrs	r3, r1
 800887c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800887e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008886:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800888a:	643b      	str	r3, [r7, #64]	; 0x40
 800888c:	2300      	movs	r3, #0
 800888e:	647b      	str	r3, [r7, #68]	; 0x44
 8008890:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8008894:	460b      	mov	r3, r1
 8008896:	4313      	orrs	r3, r2
 8008898:	d00e      	beq.n	80088b8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800889a:	4b86      	ldr	r3, [pc, #536]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800889c:	691b      	ldr	r3, [r3, #16]
 800889e:	4a85      	ldr	r2, [pc, #532]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80088a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80088a4:	6113      	str	r3, [r2, #16]
 80088a6:	4b83      	ldr	r3, [pc, #524]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80088a8:	6919      	ldr	r1, [r3, #16]
 80088aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088ae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80088b2:	4a80      	ldr	r2, [pc, #512]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80088b4:	430b      	orrs	r3, r1
 80088b6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80088b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80088c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80088c6:	2300      	movs	r3, #0
 80088c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088ca:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80088ce:	460b      	mov	r3, r1
 80088d0:	4313      	orrs	r3, r2
 80088d2:	d009      	beq.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80088d4:	4b77      	ldr	r3, [pc, #476]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80088d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088d8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80088dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088e2:	4a74      	ldr	r2, [pc, #464]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80088e4:	430b      	orrs	r3, r1
 80088e6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80088e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80088f4:	633b      	str	r3, [r7, #48]	; 0x30
 80088f6:	2300      	movs	r3, #0
 80088f8:	637b      	str	r3, [r7, #52]	; 0x34
 80088fa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80088fe:	460b      	mov	r3, r1
 8008900:	4313      	orrs	r3, r2
 8008902:	d00a      	beq.n	800891a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008904:	4b6b      	ldr	r3, [pc, #428]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008908:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800890c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008910:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008914:	4a67      	ldr	r2, [pc, #412]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008916:	430b      	orrs	r3, r1
 8008918:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800891a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800891e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008922:	2100      	movs	r1, #0
 8008924:	62b9      	str	r1, [r7, #40]	; 0x28
 8008926:	f003 0301 	and.w	r3, r3, #1
 800892a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800892c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8008930:	460b      	mov	r3, r1
 8008932:	4313      	orrs	r3, r2
 8008934:	d011      	beq.n	800895a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008936:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800893a:	3308      	adds	r3, #8
 800893c:	2100      	movs	r1, #0
 800893e:	4618      	mov	r0, r3
 8008940:	f000 fb78 	bl	8009034 <RCCEx_PLL2_Config>
 8008944:	4603      	mov	r3, r0
 8008946:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800894a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800894e:	2b00      	cmp	r3, #0
 8008950:	d003      	beq.n	800895a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008952:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008956:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800895a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800895e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008962:	2100      	movs	r1, #0
 8008964:	6239      	str	r1, [r7, #32]
 8008966:	f003 0302 	and.w	r3, r3, #2
 800896a:	627b      	str	r3, [r7, #36]	; 0x24
 800896c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008970:	460b      	mov	r3, r1
 8008972:	4313      	orrs	r3, r2
 8008974:	d011      	beq.n	800899a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008976:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800897a:	3308      	adds	r3, #8
 800897c:	2101      	movs	r1, #1
 800897e:	4618      	mov	r0, r3
 8008980:	f000 fb58 	bl	8009034 <RCCEx_PLL2_Config>
 8008984:	4603      	mov	r3, r0
 8008986:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800898a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800898e:	2b00      	cmp	r3, #0
 8008990:	d003      	beq.n	800899a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008992:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008996:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800899a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800899e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a2:	2100      	movs	r1, #0
 80089a4:	61b9      	str	r1, [r7, #24]
 80089a6:	f003 0304 	and.w	r3, r3, #4
 80089aa:	61fb      	str	r3, [r7, #28]
 80089ac:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80089b0:	460b      	mov	r3, r1
 80089b2:	4313      	orrs	r3, r2
 80089b4:	d011      	beq.n	80089da <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80089b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089ba:	3308      	adds	r3, #8
 80089bc:	2102      	movs	r1, #2
 80089be:	4618      	mov	r0, r3
 80089c0:	f000 fb38 	bl	8009034 <RCCEx_PLL2_Config>
 80089c4:	4603      	mov	r3, r0
 80089c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80089ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d003      	beq.n	80089da <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80089da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e2:	2100      	movs	r1, #0
 80089e4:	6139      	str	r1, [r7, #16]
 80089e6:	f003 0308 	and.w	r3, r3, #8
 80089ea:	617b      	str	r3, [r7, #20]
 80089ec:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80089f0:	460b      	mov	r3, r1
 80089f2:	4313      	orrs	r3, r2
 80089f4:	d011      	beq.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80089f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089fa:	3328      	adds	r3, #40	; 0x28
 80089fc:	2100      	movs	r1, #0
 80089fe:	4618      	mov	r0, r3
 8008a00:	f000 fbca 	bl	8009198 <RCCEx_PLL3_Config>
 8008a04:	4603      	mov	r3, r0
 8008a06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8008a0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d003      	beq.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a16:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a22:	2100      	movs	r1, #0
 8008a24:	60b9      	str	r1, [r7, #8]
 8008a26:	f003 0310 	and.w	r3, r3, #16
 8008a2a:	60fb      	str	r3, [r7, #12]
 8008a2c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008a30:	460b      	mov	r3, r1
 8008a32:	4313      	orrs	r3, r2
 8008a34:	d011      	beq.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a3a:	3328      	adds	r3, #40	; 0x28
 8008a3c:	2101      	movs	r1, #1
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f000 fbaa 	bl	8009198 <RCCEx_PLL3_Config>
 8008a44:	4603      	mov	r3, r0
 8008a46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008a4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d003      	beq.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a62:	2100      	movs	r1, #0
 8008a64:	6039      	str	r1, [r7, #0]
 8008a66:	f003 0320 	and.w	r3, r3, #32
 8008a6a:	607b      	str	r3, [r7, #4]
 8008a6c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008a70:	460b      	mov	r3, r1
 8008a72:	4313      	orrs	r3, r2
 8008a74:	d011      	beq.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a7a:	3328      	adds	r3, #40	; 0x28
 8008a7c:	2102      	movs	r1, #2
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f000 fb8a 	bl	8009198 <RCCEx_PLL3_Config>
 8008a84:	4603      	mov	r3, r0
 8008a86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008a8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d003      	beq.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8008a9a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d101      	bne.n	8008aa6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	e000      	b.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008aa6:	2301      	movs	r3, #1
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008ab4:	58024400 	.word	0x58024400

08008ab8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008abc:	f7fe fd54 	bl	8007568 <HAL_RCC_GetHCLKFreq>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	4b06      	ldr	r3, [pc, #24]	; (8008adc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008ac4:	6a1b      	ldr	r3, [r3, #32]
 8008ac6:	091b      	lsrs	r3, r3, #4
 8008ac8:	f003 0307 	and.w	r3, r3, #7
 8008acc:	4904      	ldr	r1, [pc, #16]	; (8008ae0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008ace:	5ccb      	ldrb	r3, [r1, r3]
 8008ad0:	f003 031f 	and.w	r3, r3, #31
 8008ad4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	bd80      	pop	{r7, pc}
 8008adc:	58024400 	.word	0x58024400
 8008ae0:	08014494 	.word	0x08014494

08008ae4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b089      	sub	sp, #36	; 0x24
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008aec:	4ba1      	ldr	r3, [pc, #644]	; (8008d74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008af0:	f003 0303 	and.w	r3, r3, #3
 8008af4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008af6:	4b9f      	ldr	r3, [pc, #636]	; (8008d74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008afa:	0b1b      	lsrs	r3, r3, #12
 8008afc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b00:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008b02:	4b9c      	ldr	r3, [pc, #624]	; (8008d74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b06:	091b      	lsrs	r3, r3, #4
 8008b08:	f003 0301 	and.w	r3, r3, #1
 8008b0c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008b0e:	4b99      	ldr	r3, [pc, #612]	; (8008d74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b12:	08db      	lsrs	r3, r3, #3
 8008b14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b18:	693a      	ldr	r2, [r7, #16]
 8008b1a:	fb02 f303 	mul.w	r3, r2, r3
 8008b1e:	ee07 3a90 	vmov	s15, r3
 8008b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b26:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	f000 8111 	beq.w	8008d54 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008b32:	69bb      	ldr	r3, [r7, #24]
 8008b34:	2b02      	cmp	r3, #2
 8008b36:	f000 8083 	beq.w	8008c40 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008b3a:	69bb      	ldr	r3, [r7, #24]
 8008b3c:	2b02      	cmp	r3, #2
 8008b3e:	f200 80a1 	bhi.w	8008c84 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008b42:	69bb      	ldr	r3, [r7, #24]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d003      	beq.n	8008b50 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008b48:	69bb      	ldr	r3, [r7, #24]
 8008b4a:	2b01      	cmp	r3, #1
 8008b4c:	d056      	beq.n	8008bfc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008b4e:	e099      	b.n	8008c84 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b50:	4b88      	ldr	r3, [pc, #544]	; (8008d74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f003 0320 	and.w	r3, r3, #32
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d02d      	beq.n	8008bb8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008b5c:	4b85      	ldr	r3, [pc, #532]	; (8008d74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	08db      	lsrs	r3, r3, #3
 8008b62:	f003 0303 	and.w	r3, r3, #3
 8008b66:	4a84      	ldr	r2, [pc, #528]	; (8008d78 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008b68:	fa22 f303 	lsr.w	r3, r2, r3
 8008b6c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	ee07 3a90 	vmov	s15, r3
 8008b74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	ee07 3a90 	vmov	s15, r3
 8008b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b86:	4b7b      	ldr	r3, [pc, #492]	; (8008d74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b8e:	ee07 3a90 	vmov	s15, r3
 8008b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b96:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b9a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008d7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008b9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ba6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bb2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008bb6:	e087      	b.n	8008cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	ee07 3a90 	vmov	s15, r3
 8008bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bc2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008d80 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008bc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bca:	4b6a      	ldr	r3, [pc, #424]	; (8008d74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bd2:	ee07 3a90 	vmov	s15, r3
 8008bd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bda:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bde:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008d7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008be2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008be6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008bfa:	e065      	b.n	8008cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	ee07 3a90 	vmov	s15, r3
 8008c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c06:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008d84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008c0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c0e:	4b59      	ldr	r3, [pc, #356]	; (8008d74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c16:	ee07 3a90 	vmov	s15, r3
 8008c1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c22:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008d7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008c26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c3e:	e043      	b.n	8008cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	ee07 3a90 	vmov	s15, r3
 8008c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c4a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008d88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008c4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c52:	4b48      	ldr	r3, [pc, #288]	; (8008d74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c5a:	ee07 3a90 	vmov	s15, r3
 8008c5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c62:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c66:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008d7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008c6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c82:	e021      	b.n	8008cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	ee07 3a90 	vmov	s15, r3
 8008c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c8e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008d84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008c92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c96:	4b37      	ldr	r3, [pc, #220]	; (8008d74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c9e:	ee07 3a90 	vmov	s15, r3
 8008ca2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ca6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008caa:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008d7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008cae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008cc6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008cc8:	4b2a      	ldr	r3, [pc, #168]	; (8008d74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ccc:	0a5b      	lsrs	r3, r3, #9
 8008cce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cd2:	ee07 3a90 	vmov	s15, r3
 8008cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008cde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ce2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ce6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cee:	ee17 2a90 	vmov	r2, s15
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008cf6:	4b1f      	ldr	r3, [pc, #124]	; (8008d74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cfa:	0c1b      	lsrs	r3, r3, #16
 8008cfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d00:	ee07 3a90 	vmov	s15, r3
 8008d04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d10:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d1c:	ee17 2a90 	vmov	r2, s15
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008d24:	4b13      	ldr	r3, [pc, #76]	; (8008d74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d28:	0e1b      	lsrs	r3, r3, #24
 8008d2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d2e:	ee07 3a90 	vmov	s15, r3
 8008d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d4a:	ee17 2a90 	vmov	r2, s15
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008d52:	e008      	b.n	8008d66 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2200      	movs	r2, #0
 8008d58:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2200      	movs	r2, #0
 8008d64:	609a      	str	r2, [r3, #8]
}
 8008d66:	bf00      	nop
 8008d68:	3724      	adds	r7, #36	; 0x24
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr
 8008d72:	bf00      	nop
 8008d74:	58024400 	.word	0x58024400
 8008d78:	03d09000 	.word	0x03d09000
 8008d7c:	46000000 	.word	0x46000000
 8008d80:	4c742400 	.word	0x4c742400
 8008d84:	4a742400 	.word	0x4a742400
 8008d88:	4af42400 	.word	0x4af42400

08008d8c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b089      	sub	sp, #36	; 0x24
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008d94:	4ba1      	ldr	r3, [pc, #644]	; (800901c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d98:	f003 0303 	and.w	r3, r3, #3
 8008d9c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008d9e:	4b9f      	ldr	r3, [pc, #636]	; (800901c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008da2:	0d1b      	lsrs	r3, r3, #20
 8008da4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008da8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008daa:	4b9c      	ldr	r3, [pc, #624]	; (800901c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dae:	0a1b      	lsrs	r3, r3, #8
 8008db0:	f003 0301 	and.w	r3, r3, #1
 8008db4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008db6:	4b99      	ldr	r3, [pc, #612]	; (800901c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dba:	08db      	lsrs	r3, r3, #3
 8008dbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008dc0:	693a      	ldr	r2, [r7, #16]
 8008dc2:	fb02 f303 	mul.w	r3, r2, r3
 8008dc6:	ee07 3a90 	vmov	s15, r3
 8008dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	f000 8111 	beq.w	8008ffc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008dda:	69bb      	ldr	r3, [r7, #24]
 8008ddc:	2b02      	cmp	r3, #2
 8008dde:	f000 8083 	beq.w	8008ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008de2:	69bb      	ldr	r3, [r7, #24]
 8008de4:	2b02      	cmp	r3, #2
 8008de6:	f200 80a1 	bhi.w	8008f2c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008dea:	69bb      	ldr	r3, [r7, #24]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d003      	beq.n	8008df8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008df0:	69bb      	ldr	r3, [r7, #24]
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d056      	beq.n	8008ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008df6:	e099      	b.n	8008f2c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008df8:	4b88      	ldr	r3, [pc, #544]	; (800901c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f003 0320 	and.w	r3, r3, #32
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d02d      	beq.n	8008e60 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e04:	4b85      	ldr	r3, [pc, #532]	; (800901c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	08db      	lsrs	r3, r3, #3
 8008e0a:	f003 0303 	and.w	r3, r3, #3
 8008e0e:	4a84      	ldr	r2, [pc, #528]	; (8009020 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008e10:	fa22 f303 	lsr.w	r3, r2, r3
 8008e14:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	ee07 3a90 	vmov	s15, r3
 8008e1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	ee07 3a90 	vmov	s15, r3
 8008e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e2e:	4b7b      	ldr	r3, [pc, #492]	; (800901c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e36:	ee07 3a90 	vmov	s15, r3
 8008e3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e42:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009024 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008e46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e5a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008e5e:	e087      	b.n	8008f70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	ee07 3a90 	vmov	s15, r3
 8008e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e6a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009028 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008e6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e72:	4b6a      	ldr	r3, [pc, #424]	; (800901c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e7a:	ee07 3a90 	vmov	s15, r3
 8008e7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e82:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e86:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009024 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008e8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ea2:	e065      	b.n	8008f70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	ee07 3a90 	vmov	s15, r3
 8008eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800902c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008eb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008eb6:	4b59      	ldr	r3, [pc, #356]	; (800901c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ebe:	ee07 3a90 	vmov	s15, r3
 8008ec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ec6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008eca:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009024 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008ece:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ed2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ed6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008eda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ee2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ee6:	e043      	b.n	8008f70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	ee07 3a90 	vmov	s15, r3
 8008eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ef2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009030 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008ef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008efa:	4b48      	ldr	r3, [pc, #288]	; (800901c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f02:	ee07 3a90 	vmov	s15, r3
 8008f06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f0e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009024 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f2a:	e021      	b.n	8008f70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	ee07 3a90 	vmov	s15, r3
 8008f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f36:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800902c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008f3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f3e:	4b37      	ldr	r3, [pc, #220]	; (800901c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f46:	ee07 3a90 	vmov	s15, r3
 8008f4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f52:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009024 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f6e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008f70:	4b2a      	ldr	r3, [pc, #168]	; (800901c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f74:	0a5b      	lsrs	r3, r3, #9
 8008f76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f7a:	ee07 3a90 	vmov	s15, r3
 8008f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f96:	ee17 2a90 	vmov	r2, s15
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008f9e:	4b1f      	ldr	r3, [pc, #124]	; (800901c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fa2:	0c1b      	lsrs	r3, r3, #16
 8008fa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fa8:	ee07 3a90 	vmov	s15, r3
 8008fac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008fb4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008fb8:	edd7 6a07 	vldr	s13, [r7, #28]
 8008fbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fc4:	ee17 2a90 	vmov	r2, s15
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008fcc:	4b13      	ldr	r3, [pc, #76]	; (800901c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fd0:	0e1b      	lsrs	r3, r3, #24
 8008fd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fd6:	ee07 3a90 	vmov	s15, r3
 8008fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008fe2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008fe6:	edd7 6a07 	vldr	s13, [r7, #28]
 8008fea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ff2:	ee17 2a90 	vmov	r2, s15
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008ffa:	e008      	b.n	800900e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2200      	movs	r2, #0
 8009006:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2200      	movs	r2, #0
 800900c:	609a      	str	r2, [r3, #8]
}
 800900e:	bf00      	nop
 8009010:	3724      	adds	r7, #36	; 0x24
 8009012:	46bd      	mov	sp, r7
 8009014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009018:	4770      	bx	lr
 800901a:	bf00      	nop
 800901c:	58024400 	.word	0x58024400
 8009020:	03d09000 	.word	0x03d09000
 8009024:	46000000 	.word	0x46000000
 8009028:	4c742400 	.word	0x4c742400
 800902c:	4a742400 	.word	0x4a742400
 8009030:	4af42400 	.word	0x4af42400

08009034 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b084      	sub	sp, #16
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800903e:	2300      	movs	r3, #0
 8009040:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009042:	4b53      	ldr	r3, [pc, #332]	; (8009190 <RCCEx_PLL2_Config+0x15c>)
 8009044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009046:	f003 0303 	and.w	r3, r3, #3
 800904a:	2b03      	cmp	r3, #3
 800904c:	d101      	bne.n	8009052 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800904e:	2301      	movs	r3, #1
 8009050:	e099      	b.n	8009186 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009052:	4b4f      	ldr	r3, [pc, #316]	; (8009190 <RCCEx_PLL2_Config+0x15c>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4a4e      	ldr	r2, [pc, #312]	; (8009190 <RCCEx_PLL2_Config+0x15c>)
 8009058:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800905c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800905e:	f7f8 fe2d 	bl	8001cbc <HAL_GetTick>
 8009062:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009064:	e008      	b.n	8009078 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009066:	f7f8 fe29 	bl	8001cbc <HAL_GetTick>
 800906a:	4602      	mov	r2, r0
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	1ad3      	subs	r3, r2, r3
 8009070:	2b02      	cmp	r3, #2
 8009072:	d901      	bls.n	8009078 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009074:	2303      	movs	r3, #3
 8009076:	e086      	b.n	8009186 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009078:	4b45      	ldr	r3, [pc, #276]	; (8009190 <RCCEx_PLL2_Config+0x15c>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009080:	2b00      	cmp	r3, #0
 8009082:	d1f0      	bne.n	8009066 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009084:	4b42      	ldr	r3, [pc, #264]	; (8009190 <RCCEx_PLL2_Config+0x15c>)
 8009086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009088:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	031b      	lsls	r3, r3, #12
 8009092:	493f      	ldr	r1, [pc, #252]	; (8009190 <RCCEx_PLL2_Config+0x15c>)
 8009094:	4313      	orrs	r3, r2
 8009096:	628b      	str	r3, [r1, #40]	; 0x28
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	685b      	ldr	r3, [r3, #4]
 800909c:	3b01      	subs	r3, #1
 800909e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	689b      	ldr	r3, [r3, #8]
 80090a6:	3b01      	subs	r3, #1
 80090a8:	025b      	lsls	r3, r3, #9
 80090aa:	b29b      	uxth	r3, r3
 80090ac:	431a      	orrs	r2, r3
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	68db      	ldr	r3, [r3, #12]
 80090b2:	3b01      	subs	r3, #1
 80090b4:	041b      	lsls	r3, r3, #16
 80090b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80090ba:	431a      	orrs	r2, r3
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	691b      	ldr	r3, [r3, #16]
 80090c0:	3b01      	subs	r3, #1
 80090c2:	061b      	lsls	r3, r3, #24
 80090c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80090c8:	4931      	ldr	r1, [pc, #196]	; (8009190 <RCCEx_PLL2_Config+0x15c>)
 80090ca:	4313      	orrs	r3, r2
 80090cc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80090ce:	4b30      	ldr	r3, [pc, #192]	; (8009190 <RCCEx_PLL2_Config+0x15c>)
 80090d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	695b      	ldr	r3, [r3, #20]
 80090da:	492d      	ldr	r1, [pc, #180]	; (8009190 <RCCEx_PLL2_Config+0x15c>)
 80090dc:	4313      	orrs	r3, r2
 80090de:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80090e0:	4b2b      	ldr	r3, [pc, #172]	; (8009190 <RCCEx_PLL2_Config+0x15c>)
 80090e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e4:	f023 0220 	bic.w	r2, r3, #32
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	699b      	ldr	r3, [r3, #24]
 80090ec:	4928      	ldr	r1, [pc, #160]	; (8009190 <RCCEx_PLL2_Config+0x15c>)
 80090ee:	4313      	orrs	r3, r2
 80090f0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80090f2:	4b27      	ldr	r3, [pc, #156]	; (8009190 <RCCEx_PLL2_Config+0x15c>)
 80090f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f6:	4a26      	ldr	r2, [pc, #152]	; (8009190 <RCCEx_PLL2_Config+0x15c>)
 80090f8:	f023 0310 	bic.w	r3, r3, #16
 80090fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80090fe:	4b24      	ldr	r3, [pc, #144]	; (8009190 <RCCEx_PLL2_Config+0x15c>)
 8009100:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009102:	4b24      	ldr	r3, [pc, #144]	; (8009194 <RCCEx_PLL2_Config+0x160>)
 8009104:	4013      	ands	r3, r2
 8009106:	687a      	ldr	r2, [r7, #4]
 8009108:	69d2      	ldr	r2, [r2, #28]
 800910a:	00d2      	lsls	r2, r2, #3
 800910c:	4920      	ldr	r1, [pc, #128]	; (8009190 <RCCEx_PLL2_Config+0x15c>)
 800910e:	4313      	orrs	r3, r2
 8009110:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009112:	4b1f      	ldr	r3, [pc, #124]	; (8009190 <RCCEx_PLL2_Config+0x15c>)
 8009114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009116:	4a1e      	ldr	r2, [pc, #120]	; (8009190 <RCCEx_PLL2_Config+0x15c>)
 8009118:	f043 0310 	orr.w	r3, r3, #16
 800911c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d106      	bne.n	8009132 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009124:	4b1a      	ldr	r3, [pc, #104]	; (8009190 <RCCEx_PLL2_Config+0x15c>)
 8009126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009128:	4a19      	ldr	r2, [pc, #100]	; (8009190 <RCCEx_PLL2_Config+0x15c>)
 800912a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800912e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009130:	e00f      	b.n	8009152 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	2b01      	cmp	r3, #1
 8009136:	d106      	bne.n	8009146 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009138:	4b15      	ldr	r3, [pc, #84]	; (8009190 <RCCEx_PLL2_Config+0x15c>)
 800913a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800913c:	4a14      	ldr	r2, [pc, #80]	; (8009190 <RCCEx_PLL2_Config+0x15c>)
 800913e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009142:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009144:	e005      	b.n	8009152 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009146:	4b12      	ldr	r3, [pc, #72]	; (8009190 <RCCEx_PLL2_Config+0x15c>)
 8009148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800914a:	4a11      	ldr	r2, [pc, #68]	; (8009190 <RCCEx_PLL2_Config+0x15c>)
 800914c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009150:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009152:	4b0f      	ldr	r3, [pc, #60]	; (8009190 <RCCEx_PLL2_Config+0x15c>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4a0e      	ldr	r2, [pc, #56]	; (8009190 <RCCEx_PLL2_Config+0x15c>)
 8009158:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800915c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800915e:	f7f8 fdad 	bl	8001cbc <HAL_GetTick>
 8009162:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009164:	e008      	b.n	8009178 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009166:	f7f8 fda9 	bl	8001cbc <HAL_GetTick>
 800916a:	4602      	mov	r2, r0
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	1ad3      	subs	r3, r2, r3
 8009170:	2b02      	cmp	r3, #2
 8009172:	d901      	bls.n	8009178 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009174:	2303      	movs	r3, #3
 8009176:	e006      	b.n	8009186 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009178:	4b05      	ldr	r3, [pc, #20]	; (8009190 <RCCEx_PLL2_Config+0x15c>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009180:	2b00      	cmp	r3, #0
 8009182:	d0f0      	beq.n	8009166 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009184:	7bfb      	ldrb	r3, [r7, #15]
}
 8009186:	4618      	mov	r0, r3
 8009188:	3710      	adds	r7, #16
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}
 800918e:	bf00      	nop
 8009190:	58024400 	.word	0x58024400
 8009194:	ffff0007 	.word	0xffff0007

08009198 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80091a2:	2300      	movs	r3, #0
 80091a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80091a6:	4b53      	ldr	r3, [pc, #332]	; (80092f4 <RCCEx_PLL3_Config+0x15c>)
 80091a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091aa:	f003 0303 	and.w	r3, r3, #3
 80091ae:	2b03      	cmp	r3, #3
 80091b0:	d101      	bne.n	80091b6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80091b2:	2301      	movs	r3, #1
 80091b4:	e099      	b.n	80092ea <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80091b6:	4b4f      	ldr	r3, [pc, #316]	; (80092f4 <RCCEx_PLL3_Config+0x15c>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4a4e      	ldr	r2, [pc, #312]	; (80092f4 <RCCEx_PLL3_Config+0x15c>)
 80091bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80091c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091c2:	f7f8 fd7b 	bl	8001cbc <HAL_GetTick>
 80091c6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80091c8:	e008      	b.n	80091dc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80091ca:	f7f8 fd77 	bl	8001cbc <HAL_GetTick>
 80091ce:	4602      	mov	r2, r0
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	1ad3      	subs	r3, r2, r3
 80091d4:	2b02      	cmp	r3, #2
 80091d6:	d901      	bls.n	80091dc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80091d8:	2303      	movs	r3, #3
 80091da:	e086      	b.n	80092ea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80091dc:	4b45      	ldr	r3, [pc, #276]	; (80092f4 <RCCEx_PLL3_Config+0x15c>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d1f0      	bne.n	80091ca <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80091e8:	4b42      	ldr	r3, [pc, #264]	; (80092f4 <RCCEx_PLL3_Config+0x15c>)
 80091ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ec:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	051b      	lsls	r3, r3, #20
 80091f6:	493f      	ldr	r1, [pc, #252]	; (80092f4 <RCCEx_PLL3_Config+0x15c>)
 80091f8:	4313      	orrs	r3, r2
 80091fa:	628b      	str	r3, [r1, #40]	; 0x28
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	3b01      	subs	r3, #1
 8009202:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	689b      	ldr	r3, [r3, #8]
 800920a:	3b01      	subs	r3, #1
 800920c:	025b      	lsls	r3, r3, #9
 800920e:	b29b      	uxth	r3, r3
 8009210:	431a      	orrs	r2, r3
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	68db      	ldr	r3, [r3, #12]
 8009216:	3b01      	subs	r3, #1
 8009218:	041b      	lsls	r3, r3, #16
 800921a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800921e:	431a      	orrs	r2, r3
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	691b      	ldr	r3, [r3, #16]
 8009224:	3b01      	subs	r3, #1
 8009226:	061b      	lsls	r3, r3, #24
 8009228:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800922c:	4931      	ldr	r1, [pc, #196]	; (80092f4 <RCCEx_PLL3_Config+0x15c>)
 800922e:	4313      	orrs	r3, r2
 8009230:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009232:	4b30      	ldr	r3, [pc, #192]	; (80092f4 <RCCEx_PLL3_Config+0x15c>)
 8009234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009236:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	695b      	ldr	r3, [r3, #20]
 800923e:	492d      	ldr	r1, [pc, #180]	; (80092f4 <RCCEx_PLL3_Config+0x15c>)
 8009240:	4313      	orrs	r3, r2
 8009242:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009244:	4b2b      	ldr	r3, [pc, #172]	; (80092f4 <RCCEx_PLL3_Config+0x15c>)
 8009246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009248:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	699b      	ldr	r3, [r3, #24]
 8009250:	4928      	ldr	r1, [pc, #160]	; (80092f4 <RCCEx_PLL3_Config+0x15c>)
 8009252:	4313      	orrs	r3, r2
 8009254:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009256:	4b27      	ldr	r3, [pc, #156]	; (80092f4 <RCCEx_PLL3_Config+0x15c>)
 8009258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800925a:	4a26      	ldr	r2, [pc, #152]	; (80092f4 <RCCEx_PLL3_Config+0x15c>)
 800925c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009260:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009262:	4b24      	ldr	r3, [pc, #144]	; (80092f4 <RCCEx_PLL3_Config+0x15c>)
 8009264:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009266:	4b24      	ldr	r3, [pc, #144]	; (80092f8 <RCCEx_PLL3_Config+0x160>)
 8009268:	4013      	ands	r3, r2
 800926a:	687a      	ldr	r2, [r7, #4]
 800926c:	69d2      	ldr	r2, [r2, #28]
 800926e:	00d2      	lsls	r2, r2, #3
 8009270:	4920      	ldr	r1, [pc, #128]	; (80092f4 <RCCEx_PLL3_Config+0x15c>)
 8009272:	4313      	orrs	r3, r2
 8009274:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009276:	4b1f      	ldr	r3, [pc, #124]	; (80092f4 <RCCEx_PLL3_Config+0x15c>)
 8009278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800927a:	4a1e      	ldr	r2, [pc, #120]	; (80092f4 <RCCEx_PLL3_Config+0x15c>)
 800927c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009280:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d106      	bne.n	8009296 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009288:	4b1a      	ldr	r3, [pc, #104]	; (80092f4 <RCCEx_PLL3_Config+0x15c>)
 800928a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800928c:	4a19      	ldr	r2, [pc, #100]	; (80092f4 <RCCEx_PLL3_Config+0x15c>)
 800928e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009292:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009294:	e00f      	b.n	80092b6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	2b01      	cmp	r3, #1
 800929a:	d106      	bne.n	80092aa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800929c:	4b15      	ldr	r3, [pc, #84]	; (80092f4 <RCCEx_PLL3_Config+0x15c>)
 800929e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a0:	4a14      	ldr	r2, [pc, #80]	; (80092f4 <RCCEx_PLL3_Config+0x15c>)
 80092a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80092a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80092a8:	e005      	b.n	80092b6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80092aa:	4b12      	ldr	r3, [pc, #72]	; (80092f4 <RCCEx_PLL3_Config+0x15c>)
 80092ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ae:	4a11      	ldr	r2, [pc, #68]	; (80092f4 <RCCEx_PLL3_Config+0x15c>)
 80092b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80092b4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80092b6:	4b0f      	ldr	r3, [pc, #60]	; (80092f4 <RCCEx_PLL3_Config+0x15c>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4a0e      	ldr	r2, [pc, #56]	; (80092f4 <RCCEx_PLL3_Config+0x15c>)
 80092bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092c2:	f7f8 fcfb 	bl	8001cbc <HAL_GetTick>
 80092c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80092c8:	e008      	b.n	80092dc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80092ca:	f7f8 fcf7 	bl	8001cbc <HAL_GetTick>
 80092ce:	4602      	mov	r2, r0
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	1ad3      	subs	r3, r2, r3
 80092d4:	2b02      	cmp	r3, #2
 80092d6:	d901      	bls.n	80092dc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80092d8:	2303      	movs	r3, #3
 80092da:	e006      	b.n	80092ea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80092dc:	4b05      	ldr	r3, [pc, #20]	; (80092f4 <RCCEx_PLL3_Config+0x15c>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d0f0      	beq.n	80092ca <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80092e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3710      	adds	r7, #16
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}
 80092f2:	bf00      	nop
 80092f4:	58024400 	.word	0x58024400
 80092f8:	ffff0007 	.word	0xffff0007

080092fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b082      	sub	sp, #8
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d101      	bne.n	800930e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800930a:	2301      	movs	r3, #1
 800930c:	e049      	b.n	80093a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009314:	b2db      	uxtb	r3, r3
 8009316:	2b00      	cmp	r3, #0
 8009318:	d106      	bne.n	8009328 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2200      	movs	r2, #0
 800931e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 f841 	bl	80093aa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2202      	movs	r2, #2
 800932c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681a      	ldr	r2, [r3, #0]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	3304      	adds	r3, #4
 8009338:	4619      	mov	r1, r3
 800933a:	4610      	mov	r0, r2
 800933c:	f000 fa00 	bl	8009740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2201      	movs	r2, #1
 8009344:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2201      	movs	r2, #1
 800934c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2201      	movs	r2, #1
 8009354:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2201      	movs	r2, #1
 800935c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2201      	movs	r2, #1
 8009364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2201      	movs	r2, #1
 800936c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2201      	movs	r2, #1
 8009374:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2201      	movs	r2, #1
 800937c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2201      	movs	r2, #1
 8009384:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2201      	movs	r2, #1
 800938c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2201      	movs	r2, #1
 8009394:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2201      	movs	r2, #1
 800939c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80093a0:	2300      	movs	r3, #0
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3708      	adds	r7, #8
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}

080093aa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80093aa:	b480      	push	{r7}
 80093ac:	b083      	sub	sp, #12
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80093b2:	bf00      	nop
 80093b4:	370c      	adds	r7, #12
 80093b6:	46bd      	mov	sp, r7
 80093b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093bc:	4770      	bx	lr
	...

080093c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b085      	sub	sp, #20
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093ce:	b2db      	uxtb	r3, r3
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	d001      	beq.n	80093d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80093d4:	2301      	movs	r3, #1
 80093d6:	e054      	b.n	8009482 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2202      	movs	r2, #2
 80093dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	68da      	ldr	r2, [r3, #12]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f042 0201 	orr.w	r2, r2, #1
 80093ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4a26      	ldr	r2, [pc, #152]	; (8009490 <HAL_TIM_Base_Start_IT+0xd0>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d022      	beq.n	8009440 <HAL_TIM_Base_Start_IT+0x80>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009402:	d01d      	beq.n	8009440 <HAL_TIM_Base_Start_IT+0x80>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4a22      	ldr	r2, [pc, #136]	; (8009494 <HAL_TIM_Base_Start_IT+0xd4>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d018      	beq.n	8009440 <HAL_TIM_Base_Start_IT+0x80>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4a21      	ldr	r2, [pc, #132]	; (8009498 <HAL_TIM_Base_Start_IT+0xd8>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d013      	beq.n	8009440 <HAL_TIM_Base_Start_IT+0x80>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4a1f      	ldr	r2, [pc, #124]	; (800949c <HAL_TIM_Base_Start_IT+0xdc>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d00e      	beq.n	8009440 <HAL_TIM_Base_Start_IT+0x80>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	4a1e      	ldr	r2, [pc, #120]	; (80094a0 <HAL_TIM_Base_Start_IT+0xe0>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d009      	beq.n	8009440 <HAL_TIM_Base_Start_IT+0x80>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4a1c      	ldr	r2, [pc, #112]	; (80094a4 <HAL_TIM_Base_Start_IT+0xe4>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d004      	beq.n	8009440 <HAL_TIM_Base_Start_IT+0x80>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4a1b      	ldr	r2, [pc, #108]	; (80094a8 <HAL_TIM_Base_Start_IT+0xe8>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d115      	bne.n	800946c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	689a      	ldr	r2, [r3, #8]
 8009446:	4b19      	ldr	r3, [pc, #100]	; (80094ac <HAL_TIM_Base_Start_IT+0xec>)
 8009448:	4013      	ands	r3, r2
 800944a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2b06      	cmp	r3, #6
 8009450:	d015      	beq.n	800947e <HAL_TIM_Base_Start_IT+0xbe>
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009458:	d011      	beq.n	800947e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	681a      	ldr	r2, [r3, #0]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f042 0201 	orr.w	r2, r2, #1
 8009468:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800946a:	e008      	b.n	800947e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	681a      	ldr	r2, [r3, #0]
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f042 0201 	orr.w	r2, r2, #1
 800947a:	601a      	str	r2, [r3, #0]
 800947c:	e000      	b.n	8009480 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800947e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009480:	2300      	movs	r3, #0
}
 8009482:	4618      	mov	r0, r3
 8009484:	3714      	adds	r7, #20
 8009486:	46bd      	mov	sp, r7
 8009488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948c:	4770      	bx	lr
 800948e:	bf00      	nop
 8009490:	40010000 	.word	0x40010000
 8009494:	40000400 	.word	0x40000400
 8009498:	40000800 	.word	0x40000800
 800949c:	40000c00 	.word	0x40000c00
 80094a0:	40010400 	.word	0x40010400
 80094a4:	40001800 	.word	0x40001800
 80094a8:	40014000 	.word	0x40014000
 80094ac:	00010007 	.word	0x00010007

080094b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b082      	sub	sp, #8
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	691b      	ldr	r3, [r3, #16]
 80094be:	f003 0302 	and.w	r3, r3, #2
 80094c2:	2b02      	cmp	r3, #2
 80094c4:	d122      	bne.n	800950c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	68db      	ldr	r3, [r3, #12]
 80094cc:	f003 0302 	and.w	r3, r3, #2
 80094d0:	2b02      	cmp	r3, #2
 80094d2:	d11b      	bne.n	800950c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f06f 0202 	mvn.w	r2, #2
 80094dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2201      	movs	r2, #1
 80094e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	699b      	ldr	r3, [r3, #24]
 80094ea:	f003 0303 	and.w	r3, r3, #3
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d003      	beq.n	80094fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f000 f905 	bl	8009702 <HAL_TIM_IC_CaptureCallback>
 80094f8:	e005      	b.n	8009506 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f000 f8f7 	bl	80096ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f000 f908 	bl	8009716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2200      	movs	r2, #0
 800950a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	691b      	ldr	r3, [r3, #16]
 8009512:	f003 0304 	and.w	r3, r3, #4
 8009516:	2b04      	cmp	r3, #4
 8009518:	d122      	bne.n	8009560 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	68db      	ldr	r3, [r3, #12]
 8009520:	f003 0304 	and.w	r3, r3, #4
 8009524:	2b04      	cmp	r3, #4
 8009526:	d11b      	bne.n	8009560 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f06f 0204 	mvn.w	r2, #4
 8009530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2202      	movs	r2, #2
 8009536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	699b      	ldr	r3, [r3, #24]
 800953e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009542:	2b00      	cmp	r3, #0
 8009544:	d003      	beq.n	800954e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 f8db 	bl	8009702 <HAL_TIM_IC_CaptureCallback>
 800954c:	e005      	b.n	800955a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f000 f8cd 	bl	80096ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f000 f8de 	bl	8009716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2200      	movs	r2, #0
 800955e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	691b      	ldr	r3, [r3, #16]
 8009566:	f003 0308 	and.w	r3, r3, #8
 800956a:	2b08      	cmp	r3, #8
 800956c:	d122      	bne.n	80095b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	68db      	ldr	r3, [r3, #12]
 8009574:	f003 0308 	and.w	r3, r3, #8
 8009578:	2b08      	cmp	r3, #8
 800957a:	d11b      	bne.n	80095b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f06f 0208 	mvn.w	r2, #8
 8009584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2204      	movs	r2, #4
 800958a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	69db      	ldr	r3, [r3, #28]
 8009592:	f003 0303 	and.w	r3, r3, #3
 8009596:	2b00      	cmp	r3, #0
 8009598:	d003      	beq.n	80095a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f000 f8b1 	bl	8009702 <HAL_TIM_IC_CaptureCallback>
 80095a0:	e005      	b.n	80095ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 f8a3 	bl	80096ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f000 f8b4 	bl	8009716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2200      	movs	r2, #0
 80095b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	691b      	ldr	r3, [r3, #16]
 80095ba:	f003 0310 	and.w	r3, r3, #16
 80095be:	2b10      	cmp	r3, #16
 80095c0:	d122      	bne.n	8009608 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	68db      	ldr	r3, [r3, #12]
 80095c8:	f003 0310 	and.w	r3, r3, #16
 80095cc:	2b10      	cmp	r3, #16
 80095ce:	d11b      	bne.n	8009608 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f06f 0210 	mvn.w	r2, #16
 80095d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2208      	movs	r2, #8
 80095de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	69db      	ldr	r3, [r3, #28]
 80095e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d003      	beq.n	80095f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f000 f887 	bl	8009702 <HAL_TIM_IC_CaptureCallback>
 80095f4:	e005      	b.n	8009602 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f000 f879 	bl	80096ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f000 f88a 	bl	8009716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2200      	movs	r2, #0
 8009606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	691b      	ldr	r3, [r3, #16]
 800960e:	f003 0301 	and.w	r3, r3, #1
 8009612:	2b01      	cmp	r3, #1
 8009614:	d10e      	bne.n	8009634 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	68db      	ldr	r3, [r3, #12]
 800961c:	f003 0301 	and.w	r3, r3, #1
 8009620:	2b01      	cmp	r3, #1
 8009622:	d107      	bne.n	8009634 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f06f 0201 	mvn.w	r2, #1
 800962c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f7f7 fe44 	bl	80012bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	691b      	ldr	r3, [r3, #16]
 800963a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800963e:	2b80      	cmp	r3, #128	; 0x80
 8009640:	d10e      	bne.n	8009660 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	68db      	ldr	r3, [r3, #12]
 8009648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800964c:	2b80      	cmp	r3, #128	; 0x80
 800964e:	d107      	bne.n	8009660 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f000 f914 	bl	8009888 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	691b      	ldr	r3, [r3, #16]
 8009666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800966a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800966e:	d10e      	bne.n	800968e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	68db      	ldr	r3, [r3, #12]
 8009676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800967a:	2b80      	cmp	r3, #128	; 0x80
 800967c:	d107      	bne.n	800968e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009686:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f000 f907 	bl	800989c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	691b      	ldr	r3, [r3, #16]
 8009694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009698:	2b40      	cmp	r3, #64	; 0x40
 800969a:	d10e      	bne.n	80096ba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	68db      	ldr	r3, [r3, #12]
 80096a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096a6:	2b40      	cmp	r3, #64	; 0x40
 80096a8:	d107      	bne.n	80096ba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80096b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f000 f838 	bl	800972a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	691b      	ldr	r3, [r3, #16]
 80096c0:	f003 0320 	and.w	r3, r3, #32
 80096c4:	2b20      	cmp	r3, #32
 80096c6:	d10e      	bne.n	80096e6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	68db      	ldr	r3, [r3, #12]
 80096ce:	f003 0320 	and.w	r3, r3, #32
 80096d2:	2b20      	cmp	r3, #32
 80096d4:	d107      	bne.n	80096e6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f06f 0220 	mvn.w	r2, #32
 80096de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f000 f8c7 	bl	8009874 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80096e6:	bf00      	nop
 80096e8:	3708      	adds	r7, #8
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}

080096ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80096ee:	b480      	push	{r7}
 80096f0:	b083      	sub	sp, #12
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80096f6:	bf00      	nop
 80096f8:	370c      	adds	r7, #12
 80096fa:	46bd      	mov	sp, r7
 80096fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009700:	4770      	bx	lr

08009702 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009702:	b480      	push	{r7}
 8009704:	b083      	sub	sp, #12
 8009706:	af00      	add	r7, sp, #0
 8009708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800970a:	bf00      	nop
 800970c:	370c      	adds	r7, #12
 800970e:	46bd      	mov	sp, r7
 8009710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009714:	4770      	bx	lr

08009716 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009716:	b480      	push	{r7}
 8009718:	b083      	sub	sp, #12
 800971a:	af00      	add	r7, sp, #0
 800971c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800971e:	bf00      	nop
 8009720:	370c      	adds	r7, #12
 8009722:	46bd      	mov	sp, r7
 8009724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009728:	4770      	bx	lr

0800972a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800972a:	b480      	push	{r7}
 800972c:	b083      	sub	sp, #12
 800972e:	af00      	add	r7, sp, #0
 8009730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009732:	bf00      	nop
 8009734:	370c      	adds	r7, #12
 8009736:	46bd      	mov	sp, r7
 8009738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973c:	4770      	bx	lr
	...

08009740 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009740:	b480      	push	{r7}
 8009742:	b085      	sub	sp, #20
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	4a40      	ldr	r2, [pc, #256]	; (8009854 <TIM_Base_SetConfig+0x114>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d013      	beq.n	8009780 <TIM_Base_SetConfig+0x40>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800975e:	d00f      	beq.n	8009780 <TIM_Base_SetConfig+0x40>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	4a3d      	ldr	r2, [pc, #244]	; (8009858 <TIM_Base_SetConfig+0x118>)
 8009764:	4293      	cmp	r3, r2
 8009766:	d00b      	beq.n	8009780 <TIM_Base_SetConfig+0x40>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	4a3c      	ldr	r2, [pc, #240]	; (800985c <TIM_Base_SetConfig+0x11c>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d007      	beq.n	8009780 <TIM_Base_SetConfig+0x40>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	4a3b      	ldr	r2, [pc, #236]	; (8009860 <TIM_Base_SetConfig+0x120>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d003      	beq.n	8009780 <TIM_Base_SetConfig+0x40>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	4a3a      	ldr	r2, [pc, #232]	; (8009864 <TIM_Base_SetConfig+0x124>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d108      	bne.n	8009792 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009786:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	685b      	ldr	r3, [r3, #4]
 800978c:	68fa      	ldr	r2, [r7, #12]
 800978e:	4313      	orrs	r3, r2
 8009790:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	4a2f      	ldr	r2, [pc, #188]	; (8009854 <TIM_Base_SetConfig+0x114>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d01f      	beq.n	80097da <TIM_Base_SetConfig+0x9a>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097a0:	d01b      	beq.n	80097da <TIM_Base_SetConfig+0x9a>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	4a2c      	ldr	r2, [pc, #176]	; (8009858 <TIM_Base_SetConfig+0x118>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d017      	beq.n	80097da <TIM_Base_SetConfig+0x9a>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	4a2b      	ldr	r2, [pc, #172]	; (800985c <TIM_Base_SetConfig+0x11c>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d013      	beq.n	80097da <TIM_Base_SetConfig+0x9a>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	4a2a      	ldr	r2, [pc, #168]	; (8009860 <TIM_Base_SetConfig+0x120>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d00f      	beq.n	80097da <TIM_Base_SetConfig+0x9a>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	4a29      	ldr	r2, [pc, #164]	; (8009864 <TIM_Base_SetConfig+0x124>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d00b      	beq.n	80097da <TIM_Base_SetConfig+0x9a>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	4a28      	ldr	r2, [pc, #160]	; (8009868 <TIM_Base_SetConfig+0x128>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d007      	beq.n	80097da <TIM_Base_SetConfig+0x9a>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	4a27      	ldr	r2, [pc, #156]	; (800986c <TIM_Base_SetConfig+0x12c>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d003      	beq.n	80097da <TIM_Base_SetConfig+0x9a>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	4a26      	ldr	r2, [pc, #152]	; (8009870 <TIM_Base_SetConfig+0x130>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d108      	bne.n	80097ec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	68db      	ldr	r3, [r3, #12]
 80097e6:	68fa      	ldr	r2, [r7, #12]
 80097e8:	4313      	orrs	r3, r2
 80097ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	695b      	ldr	r3, [r3, #20]
 80097f6:	4313      	orrs	r3, r2
 80097f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	68fa      	ldr	r2, [r7, #12]
 80097fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	689a      	ldr	r2, [r3, #8]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	681a      	ldr	r2, [r3, #0]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	4a10      	ldr	r2, [pc, #64]	; (8009854 <TIM_Base_SetConfig+0x114>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d00f      	beq.n	8009838 <TIM_Base_SetConfig+0xf8>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	4a12      	ldr	r2, [pc, #72]	; (8009864 <TIM_Base_SetConfig+0x124>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d00b      	beq.n	8009838 <TIM_Base_SetConfig+0xf8>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	4a11      	ldr	r2, [pc, #68]	; (8009868 <TIM_Base_SetConfig+0x128>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d007      	beq.n	8009838 <TIM_Base_SetConfig+0xf8>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	4a10      	ldr	r2, [pc, #64]	; (800986c <TIM_Base_SetConfig+0x12c>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d003      	beq.n	8009838 <TIM_Base_SetConfig+0xf8>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	4a0f      	ldr	r2, [pc, #60]	; (8009870 <TIM_Base_SetConfig+0x130>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d103      	bne.n	8009840 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	691a      	ldr	r2, [r3, #16]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2201      	movs	r2, #1
 8009844:	615a      	str	r2, [r3, #20]
}
 8009846:	bf00      	nop
 8009848:	3714      	adds	r7, #20
 800984a:	46bd      	mov	sp, r7
 800984c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009850:	4770      	bx	lr
 8009852:	bf00      	nop
 8009854:	40010000 	.word	0x40010000
 8009858:	40000400 	.word	0x40000400
 800985c:	40000800 	.word	0x40000800
 8009860:	40000c00 	.word	0x40000c00
 8009864:	40010400 	.word	0x40010400
 8009868:	40014000 	.word	0x40014000
 800986c:	40014400 	.word	0x40014400
 8009870:	40014800 	.word	0x40014800

08009874 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009874:	b480      	push	{r7}
 8009876:	b083      	sub	sp, #12
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800987c:	bf00      	nop
 800987e:	370c      	adds	r7, #12
 8009880:	46bd      	mov	sp, r7
 8009882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009886:	4770      	bx	lr

08009888 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009888:	b480      	push	{r7}
 800988a:	b083      	sub	sp, #12
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009890:	bf00      	nop
 8009892:	370c      	adds	r7, #12
 8009894:	46bd      	mov	sp, r7
 8009896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989a:	4770      	bx	lr

0800989c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800989c:	b480      	push	{r7}
 800989e:	b083      	sub	sp, #12
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80098a4:	bf00      	nop
 80098a6:	370c      	adds	r7, #12
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr

080098b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b082      	sub	sp, #8
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d101      	bne.n	80098c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80098be:	2301      	movs	r3, #1
 80098c0:	e042      	b.n	8009948 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d106      	bne.n	80098da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2200      	movs	r2, #0
 80098d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f7f7 ffab 	bl	8001830 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2224      	movs	r2, #36	; 0x24
 80098de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	681a      	ldr	r2, [r3, #0]
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f022 0201 	bic.w	r2, r2, #1
 80098f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 fdaa 	bl	800a44c <UART_SetConfig>
 80098f8:	4603      	mov	r3, r0
 80098fa:	2b01      	cmp	r3, #1
 80098fc:	d101      	bne.n	8009902 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80098fe:	2301      	movs	r3, #1
 8009900:	e022      	b.n	8009948 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009906:	2b00      	cmp	r3, #0
 8009908:	d002      	beq.n	8009910 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f001 fb06 	bl	800af1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	685a      	ldr	r2, [r3, #4]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800991e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	689a      	ldr	r2, [r3, #8]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800992e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	681a      	ldr	r2, [r3, #0]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f042 0201 	orr.w	r2, r2, #1
 800993e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f001 fb8d 	bl	800b060 <UART_CheckIdleState>
 8009946:	4603      	mov	r3, r0
}
 8009948:	4618      	mov	r0, r3
 800994a:	3708      	adds	r7, #8
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}

08009950 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b08a      	sub	sp, #40	; 0x28
 8009954:	af02      	add	r7, sp, #8
 8009956:	60f8      	str	r0, [r7, #12]
 8009958:	60b9      	str	r1, [r7, #8]
 800995a:	603b      	str	r3, [r7, #0]
 800995c:	4613      	mov	r3, r2
 800995e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009966:	2b20      	cmp	r3, #32
 8009968:	d17b      	bne.n	8009a62 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d002      	beq.n	8009976 <HAL_UART_Transmit+0x26>
 8009970:	88fb      	ldrh	r3, [r7, #6]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d101      	bne.n	800997a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009976:	2301      	movs	r3, #1
 8009978:	e074      	b.n	8009a64 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	2200      	movs	r2, #0
 800997e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2221      	movs	r2, #33	; 0x21
 8009986:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800998a:	f7f8 f997 	bl	8001cbc <HAL_GetTick>
 800998e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	88fa      	ldrh	r2, [r7, #6]
 8009994:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	88fa      	ldrh	r2, [r7, #6]
 800999c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	689b      	ldr	r3, [r3, #8]
 80099a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099a8:	d108      	bne.n	80099bc <HAL_UART_Transmit+0x6c>
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	691b      	ldr	r3, [r3, #16]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d104      	bne.n	80099bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80099b2:	2300      	movs	r3, #0
 80099b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	61bb      	str	r3, [r7, #24]
 80099ba:	e003      	b.n	80099c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80099c0:	2300      	movs	r3, #0
 80099c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80099c4:	e030      	b.n	8009a28 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	9300      	str	r3, [sp, #0]
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	2200      	movs	r2, #0
 80099ce:	2180      	movs	r1, #128	; 0x80
 80099d0:	68f8      	ldr	r0, [r7, #12]
 80099d2:	f001 fbef 	bl	800b1b4 <UART_WaitOnFlagUntilTimeout>
 80099d6:	4603      	mov	r3, r0
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d005      	beq.n	80099e8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2220      	movs	r2, #32
 80099e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80099e4:	2303      	movs	r3, #3
 80099e6:	e03d      	b.n	8009a64 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80099e8:	69fb      	ldr	r3, [r7, #28]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d10b      	bne.n	8009a06 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80099ee:	69bb      	ldr	r3, [r7, #24]
 80099f0:	881b      	ldrh	r3, [r3, #0]
 80099f2:	461a      	mov	r2, r3
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80099fc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80099fe:	69bb      	ldr	r3, [r7, #24]
 8009a00:	3302      	adds	r3, #2
 8009a02:	61bb      	str	r3, [r7, #24]
 8009a04:	e007      	b.n	8009a16 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009a06:	69fb      	ldr	r3, [r7, #28]
 8009a08:	781a      	ldrb	r2, [r3, #0]
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009a10:	69fb      	ldr	r3, [r7, #28]
 8009a12:	3301      	adds	r3, #1
 8009a14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009a1c:	b29b      	uxth	r3, r3
 8009a1e:	3b01      	subs	r3, #1
 8009a20:	b29a      	uxth	r2, r3
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009a2e:	b29b      	uxth	r3, r3
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d1c8      	bne.n	80099c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	9300      	str	r3, [sp, #0]
 8009a38:	697b      	ldr	r3, [r7, #20]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	2140      	movs	r1, #64	; 0x40
 8009a3e:	68f8      	ldr	r0, [r7, #12]
 8009a40:	f001 fbb8 	bl	800b1b4 <UART_WaitOnFlagUntilTimeout>
 8009a44:	4603      	mov	r3, r0
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d005      	beq.n	8009a56 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2220      	movs	r2, #32
 8009a4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8009a52:	2303      	movs	r3, #3
 8009a54:	e006      	b.n	8009a64 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2220      	movs	r2, #32
 8009a5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	e000      	b.n	8009a64 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009a62:	2302      	movs	r3, #2
  }
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3720      	adds	r7, #32
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b08a      	sub	sp, #40	; 0x28
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	60f8      	str	r0, [r7, #12]
 8009a74:	60b9      	str	r1, [r7, #8]
 8009a76:	4613      	mov	r3, r2
 8009a78:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a80:	2b20      	cmp	r3, #32
 8009a82:	d137      	bne.n	8009af4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d002      	beq.n	8009a90 <HAL_UART_Receive_IT+0x24>
 8009a8a:	88fb      	ldrh	r3, [r7, #6]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d101      	bne.n	8009a94 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009a90:	2301      	movs	r3, #1
 8009a92:	e030      	b.n	8009af6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	2200      	movs	r2, #0
 8009a98:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	4a18      	ldr	r2, [pc, #96]	; (8009b00 <HAL_UART_Receive_IT+0x94>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d01f      	beq.n	8009ae4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d018      	beq.n	8009ae4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	e853 3f00 	ldrex	r3, [r3]
 8009abe:	613b      	str	r3, [r7, #16]
   return(result);
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009ac6:	627b      	str	r3, [r7, #36]	; 0x24
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	461a      	mov	r2, r3
 8009ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad0:	623b      	str	r3, [r7, #32]
 8009ad2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ad4:	69f9      	ldr	r1, [r7, #28]
 8009ad6:	6a3a      	ldr	r2, [r7, #32]
 8009ad8:	e841 2300 	strex	r3, r2, [r1]
 8009adc:	61bb      	str	r3, [r7, #24]
   return(result);
 8009ade:	69bb      	ldr	r3, [r7, #24]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d1e6      	bne.n	8009ab2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009ae4:	88fb      	ldrh	r3, [r7, #6]
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	68b9      	ldr	r1, [r7, #8]
 8009aea:	68f8      	ldr	r0, [r7, #12]
 8009aec:	f001 fbca 	bl	800b284 <UART_Start_Receive_IT>
 8009af0:	4603      	mov	r3, r0
 8009af2:	e000      	b.n	8009af6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009af4:	2302      	movs	r3, #2
  }
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3728      	adds	r7, #40	; 0x28
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}
 8009afe:	bf00      	nop
 8009b00:	58000c00 	.word	0x58000c00

08009b04 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b08a      	sub	sp, #40	; 0x28
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	60f8      	str	r0, [r7, #12]
 8009b0c:	60b9      	str	r1, [r7, #8]
 8009b0e:	4613      	mov	r3, r2
 8009b10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b18:	2b20      	cmp	r3, #32
 8009b1a:	d167      	bne.n	8009bec <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d002      	beq.n	8009b28 <HAL_UART_Transmit_DMA+0x24>
 8009b22:	88fb      	ldrh	r3, [r7, #6]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d101      	bne.n	8009b2c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009b28:	2301      	movs	r3, #1
 8009b2a:	e060      	b.n	8009bee <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	68ba      	ldr	r2, [r7, #8]
 8009b30:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	88fa      	ldrh	r2, [r7, #6]
 8009b36:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	88fa      	ldrh	r2, [r7, #6]
 8009b3e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	2200      	movs	r2, #0
 8009b46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	2221      	movs	r2, #33	; 0x21
 8009b4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d028      	beq.n	8009bac <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b5e:	4a26      	ldr	r2, [pc, #152]	; (8009bf8 <HAL_UART_Transmit_DMA+0xf4>)
 8009b60:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b66:	4a25      	ldr	r2, [pc, #148]	; (8009bfc <HAL_UART_Transmit_DMA+0xf8>)
 8009b68:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b6e:	4a24      	ldr	r2, [pc, #144]	; (8009c00 <HAL_UART_Transmit_DMA+0xfc>)
 8009b70:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b76:	2200      	movs	r2, #0
 8009b78:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b82:	4619      	mov	r1, r3
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	3328      	adds	r3, #40	; 0x28
 8009b8a:	461a      	mov	r2, r3
 8009b8c:	88fb      	ldrh	r3, [r7, #6]
 8009b8e:	f7f8 fd21 	bl	80025d4 <HAL_DMA_Start_IT>
 8009b92:	4603      	mov	r3, r0
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d009      	beq.n	8009bac <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	2210      	movs	r2, #16
 8009b9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	2220      	movs	r2, #32
 8009ba4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8009ba8:	2301      	movs	r3, #1
 8009baa:	e020      	b.n	8009bee <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	2240      	movs	r2, #64	; 0x40
 8009bb2:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	3308      	adds	r3, #8
 8009bba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	e853 3f00 	ldrex	r3, [r3]
 8009bc2:	613b      	str	r3, [r7, #16]
   return(result);
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bca:	627b      	str	r3, [r7, #36]	; 0x24
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	3308      	adds	r3, #8
 8009bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bd4:	623a      	str	r2, [r7, #32]
 8009bd6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bd8:	69f9      	ldr	r1, [r7, #28]
 8009bda:	6a3a      	ldr	r2, [r7, #32]
 8009bdc:	e841 2300 	strex	r3, r2, [r1]
 8009be0:	61bb      	str	r3, [r7, #24]
   return(result);
 8009be2:	69bb      	ldr	r3, [r7, #24]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d1e5      	bne.n	8009bb4 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8009be8:	2300      	movs	r3, #0
 8009bea:	e000      	b.n	8009bee <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009bec:	2302      	movs	r3, #2
  }
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3728      	adds	r7, #40	; 0x28
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}
 8009bf6:	bf00      	nop
 8009bf8:	0800b765 	.word	0x0800b765
 8009bfc:	0800b7fb 	.word	0x0800b7fb
 8009c00:	0800b97d 	.word	0x0800b97d

08009c04 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b08a      	sub	sp, #40	; 0x28
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	60f8      	str	r0, [r7, #12]
 8009c0c:	60b9      	str	r1, [r7, #8]
 8009c0e:	4613      	mov	r3, r2
 8009c10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c18:	2b20      	cmp	r3, #32
 8009c1a:	d137      	bne.n	8009c8c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d002      	beq.n	8009c28 <HAL_UART_Receive_DMA+0x24>
 8009c22:	88fb      	ldrh	r3, [r7, #6]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d101      	bne.n	8009c2c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009c28:	2301      	movs	r3, #1
 8009c2a:	e030      	b.n	8009c8e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	2200      	movs	r2, #0
 8009c30:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	4a18      	ldr	r2, [pc, #96]	; (8009c98 <HAL_UART_Receive_DMA+0x94>)
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	d01f      	beq.n	8009c7c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	685b      	ldr	r3, [r3, #4]
 8009c42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d018      	beq.n	8009c7c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	e853 3f00 	ldrex	r3, [r3]
 8009c56:	613b      	str	r3, [r7, #16]
   return(result);
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	461a      	mov	r2, r3
 8009c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c68:	623b      	str	r3, [r7, #32]
 8009c6a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c6c:	69f9      	ldr	r1, [r7, #28]
 8009c6e:	6a3a      	ldr	r2, [r7, #32]
 8009c70:	e841 2300 	strex	r3, r2, [r1]
 8009c74:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c76:	69bb      	ldr	r3, [r7, #24]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d1e6      	bne.n	8009c4a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009c7c:	88fb      	ldrh	r3, [r7, #6]
 8009c7e:	461a      	mov	r2, r3
 8009c80:	68b9      	ldr	r1, [r7, #8]
 8009c82:	68f8      	ldr	r0, [r7, #12]
 8009c84:	f001 fc20 	bl	800b4c8 <UART_Start_Receive_DMA>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	e000      	b.n	8009c8e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009c8c:	2302      	movs	r3, #2
  }
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3728      	adds	r7, #40	; 0x28
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}
 8009c96:	bf00      	nop
 8009c98:	58000c00 	.word	0x58000c00

08009c9c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b0ba      	sub	sp, #232	; 0xe8
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	69db      	ldr	r3, [r3, #28]
 8009caa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	689b      	ldr	r3, [r3, #8]
 8009cbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009cc2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009cc6:	f640 030f 	movw	r3, #2063	; 0x80f
 8009cca:	4013      	ands	r3, r2
 8009ccc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009cd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d11b      	bne.n	8009d10 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cdc:	f003 0320 	and.w	r3, r3, #32
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d015      	beq.n	8009d10 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009ce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ce8:	f003 0320 	and.w	r3, r3, #32
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d105      	bne.n	8009cfc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009cf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d009      	beq.n	8009d10 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	f000 8377 	beq.w	800a3f4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	4798      	blx	r3
      }
      return;
 8009d0e:	e371      	b.n	800a3f4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009d10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	f000 8123 	beq.w	8009f60 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009d1a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009d1e:	4b8d      	ldr	r3, [pc, #564]	; (8009f54 <HAL_UART_IRQHandler+0x2b8>)
 8009d20:	4013      	ands	r3, r2
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d106      	bne.n	8009d34 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009d26:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009d2a:	4b8b      	ldr	r3, [pc, #556]	; (8009f58 <HAL_UART_IRQHandler+0x2bc>)
 8009d2c:	4013      	ands	r3, r2
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	f000 8116 	beq.w	8009f60 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009d34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d38:	f003 0301 	and.w	r3, r3, #1
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d011      	beq.n	8009d64 <HAL_UART_IRQHandler+0xc8>
 8009d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d00b      	beq.n	8009d64 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	2201      	movs	r2, #1
 8009d52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d5a:	f043 0201 	orr.w	r2, r3, #1
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d68:	f003 0302 	and.w	r3, r3, #2
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d011      	beq.n	8009d94 <HAL_UART_IRQHandler+0xf8>
 8009d70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d74:	f003 0301 	and.w	r3, r3, #1
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d00b      	beq.n	8009d94 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	2202      	movs	r2, #2
 8009d82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d8a:	f043 0204 	orr.w	r2, r3, #4
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d98:	f003 0304 	and.w	r3, r3, #4
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d011      	beq.n	8009dc4 <HAL_UART_IRQHandler+0x128>
 8009da0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009da4:	f003 0301 	and.w	r3, r3, #1
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d00b      	beq.n	8009dc4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	2204      	movs	r2, #4
 8009db2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dba:	f043 0202 	orr.w	r2, r3, #2
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dc8:	f003 0308 	and.w	r3, r3, #8
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d017      	beq.n	8009e00 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009dd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009dd4:	f003 0320 	and.w	r3, r3, #32
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d105      	bne.n	8009de8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009ddc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009de0:	4b5c      	ldr	r3, [pc, #368]	; (8009f54 <HAL_UART_IRQHandler+0x2b8>)
 8009de2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d00b      	beq.n	8009e00 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	2208      	movs	r2, #8
 8009dee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009df6:	f043 0208 	orr.w	r2, r3, #8
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009e00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d012      	beq.n	8009e32 <HAL_UART_IRQHandler+0x196>
 8009e0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d00c      	beq.n	8009e32 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009e20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e28:	f043 0220 	orr.w	r2, r3, #32
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	f000 82dd 	beq.w	800a3f8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e42:	f003 0320 	and.w	r3, r3, #32
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d013      	beq.n	8009e72 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009e4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e4e:	f003 0320 	and.w	r3, r3, #32
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d105      	bne.n	8009e62 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009e56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d007      	beq.n	8009e72 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d003      	beq.n	8009e72 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	689b      	ldr	r3, [r3, #8]
 8009e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e86:	2b40      	cmp	r3, #64	; 0x40
 8009e88:	d005      	beq.n	8009e96 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009e8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009e8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d054      	beq.n	8009f40 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f001 fbfe 	bl	800b698 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	689b      	ldr	r3, [r3, #8]
 8009ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ea6:	2b40      	cmp	r3, #64	; 0x40
 8009ea8:	d146      	bne.n	8009f38 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	3308      	adds	r3, #8
 8009eb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009eb8:	e853 3f00 	ldrex	r3, [r3]
 8009ebc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009ec0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009ec4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ec8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	3308      	adds	r3, #8
 8009ed2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009ed6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009eda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ede:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009ee2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009ee6:	e841 2300 	strex	r3, r2, [r1]
 8009eea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009eee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d1d9      	bne.n	8009eaa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d017      	beq.n	8009f30 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f06:	4a15      	ldr	r2, [pc, #84]	; (8009f5c <HAL_UART_IRQHandler+0x2c0>)
 8009f08:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f10:	4618      	mov	r0, r3
 8009f12:	f7f9 f8e7 	bl	80030e4 <HAL_DMA_Abort_IT>
 8009f16:	4603      	mov	r3, r0
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d019      	beq.n	8009f50 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f24:	687a      	ldr	r2, [r7, #4]
 8009f26:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8009f2a:	4610      	mov	r0, r2
 8009f2c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f2e:	e00f      	b.n	8009f50 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f000 fa81 	bl	800a438 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f36:	e00b      	b.n	8009f50 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f000 fa7d 	bl	800a438 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f3e:	e007      	b.n	8009f50 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f000 fa79 	bl	800a438 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8009f4e:	e253      	b.n	800a3f8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f50:	bf00      	nop
    return;
 8009f52:	e251      	b.n	800a3f8 <HAL_UART_IRQHandler+0x75c>
 8009f54:	10000001 	.word	0x10000001
 8009f58:	04000120 	.word	0x04000120
 8009f5c:	0800b9fd 	.word	0x0800b9fd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f64:	2b01      	cmp	r3, #1
 8009f66:	f040 81e7 	bne.w	800a338 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f6e:	f003 0310 	and.w	r3, r3, #16
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	f000 81e0 	beq.w	800a338 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009f78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f7c:	f003 0310 	and.w	r3, r3, #16
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	f000 81d9 	beq.w	800a338 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	2210      	movs	r2, #16
 8009f8c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	689b      	ldr	r3, [r3, #8]
 8009f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f98:	2b40      	cmp	r3, #64	; 0x40
 8009f9a:	f040 8151 	bne.w	800a240 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	4a96      	ldr	r2, [pc, #600]	; (800a200 <HAL_UART_IRQHandler+0x564>)
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d068      	beq.n	800a07e <HAL_UART_IRQHandler+0x3e2>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4a93      	ldr	r2, [pc, #588]	; (800a204 <HAL_UART_IRQHandler+0x568>)
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d061      	beq.n	800a07e <HAL_UART_IRQHandler+0x3e2>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	4a91      	ldr	r2, [pc, #580]	; (800a208 <HAL_UART_IRQHandler+0x56c>)
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d05a      	beq.n	800a07e <HAL_UART_IRQHandler+0x3e2>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	4a8e      	ldr	r2, [pc, #568]	; (800a20c <HAL_UART_IRQHandler+0x570>)
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d053      	beq.n	800a07e <HAL_UART_IRQHandler+0x3e2>
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	4a8c      	ldr	r2, [pc, #560]	; (800a210 <HAL_UART_IRQHandler+0x574>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d04c      	beq.n	800a07e <HAL_UART_IRQHandler+0x3e2>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4a89      	ldr	r2, [pc, #548]	; (800a214 <HAL_UART_IRQHandler+0x578>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d045      	beq.n	800a07e <HAL_UART_IRQHandler+0x3e2>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	4a87      	ldr	r2, [pc, #540]	; (800a218 <HAL_UART_IRQHandler+0x57c>)
 8009ffc:	4293      	cmp	r3, r2
 8009ffe:	d03e      	beq.n	800a07e <HAL_UART_IRQHandler+0x3e2>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	4a84      	ldr	r2, [pc, #528]	; (800a21c <HAL_UART_IRQHandler+0x580>)
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d037      	beq.n	800a07e <HAL_UART_IRQHandler+0x3e2>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	4a82      	ldr	r2, [pc, #520]	; (800a220 <HAL_UART_IRQHandler+0x584>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d030      	beq.n	800a07e <HAL_UART_IRQHandler+0x3e2>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	4a7f      	ldr	r2, [pc, #508]	; (800a224 <HAL_UART_IRQHandler+0x588>)
 800a026:	4293      	cmp	r3, r2
 800a028:	d029      	beq.n	800a07e <HAL_UART_IRQHandler+0x3e2>
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	4a7d      	ldr	r2, [pc, #500]	; (800a228 <HAL_UART_IRQHandler+0x58c>)
 800a034:	4293      	cmp	r3, r2
 800a036:	d022      	beq.n	800a07e <HAL_UART_IRQHandler+0x3e2>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	4a7a      	ldr	r2, [pc, #488]	; (800a22c <HAL_UART_IRQHandler+0x590>)
 800a042:	4293      	cmp	r3, r2
 800a044:	d01b      	beq.n	800a07e <HAL_UART_IRQHandler+0x3e2>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	4a78      	ldr	r2, [pc, #480]	; (800a230 <HAL_UART_IRQHandler+0x594>)
 800a050:	4293      	cmp	r3, r2
 800a052:	d014      	beq.n	800a07e <HAL_UART_IRQHandler+0x3e2>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	4a75      	ldr	r2, [pc, #468]	; (800a234 <HAL_UART_IRQHandler+0x598>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	d00d      	beq.n	800a07e <HAL_UART_IRQHandler+0x3e2>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	4a73      	ldr	r2, [pc, #460]	; (800a238 <HAL_UART_IRQHandler+0x59c>)
 800a06c:	4293      	cmp	r3, r2
 800a06e:	d006      	beq.n	800a07e <HAL_UART_IRQHandler+0x3e2>
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	4a70      	ldr	r2, [pc, #448]	; (800a23c <HAL_UART_IRQHandler+0x5a0>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d106      	bne.n	800a08c <HAL_UART_IRQHandler+0x3f0>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	685b      	ldr	r3, [r3, #4]
 800a088:	b29b      	uxth	r3, r3
 800a08a:	e005      	b.n	800a098 <HAL_UART_IRQHandler+0x3fc>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	685b      	ldr	r3, [r3, #4]
 800a096:	b29b      	uxth	r3, r3
 800a098:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a09c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	f000 81ab 	beq.w	800a3fc <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a0ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a0b0:	429a      	cmp	r2, r3
 800a0b2:	f080 81a3 	bcs.w	800a3fc <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a0bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a0c6:	69db      	ldr	r3, [r3, #28]
 800a0c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0cc:	f000 8087 	beq.w	800a1de <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a0dc:	e853 3f00 	ldrex	r3, [r3]
 800a0e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a0e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a0e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	461a      	mov	r2, r3
 800a0f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a0fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a0fe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a102:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a106:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a10a:	e841 2300 	strex	r3, r2, [r1]
 800a10e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a112:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a116:	2b00      	cmp	r3, #0
 800a118:	d1da      	bne.n	800a0d0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	3308      	adds	r3, #8
 800a120:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a122:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a124:	e853 3f00 	ldrex	r3, [r3]
 800a128:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a12a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a12c:	f023 0301 	bic.w	r3, r3, #1
 800a130:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	3308      	adds	r3, #8
 800a13a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a13e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a142:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a144:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a146:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a14a:	e841 2300 	strex	r3, r2, [r1]
 800a14e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a150:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a152:	2b00      	cmp	r3, #0
 800a154:	d1e1      	bne.n	800a11a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	3308      	adds	r3, #8
 800a15c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a15e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a160:	e853 3f00 	ldrex	r3, [r3]
 800a164:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a166:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a168:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a16c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	3308      	adds	r3, #8
 800a176:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a17a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a17c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a17e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a180:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a182:	e841 2300 	strex	r3, r2, [r1]
 800a186:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a188:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d1e3      	bne.n	800a156 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2220      	movs	r2, #32
 800a192:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2200      	movs	r2, #0
 800a19a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1a4:	e853 3f00 	ldrex	r3, [r3]
 800a1a8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a1aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1ac:	f023 0310 	bic.w	r3, r3, #16
 800a1b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	461a      	mov	r2, r3
 800a1ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a1be:	65bb      	str	r3, [r7, #88]	; 0x58
 800a1c0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a1c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a1c6:	e841 2300 	strex	r3, r2, [r1]
 800a1ca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a1cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d1e4      	bne.n	800a19c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f7f8 fc65 	bl	8002aa8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2202      	movs	r2, #2
 800a1e2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	1ad3      	subs	r3, r2, r3
 800a1f4:	b29b      	uxth	r3, r3
 800a1f6:	4619      	mov	r1, r3
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f7f6 fbb7 	bl	800096c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a1fe:	e0fd      	b.n	800a3fc <HAL_UART_IRQHandler+0x760>
 800a200:	40020010 	.word	0x40020010
 800a204:	40020028 	.word	0x40020028
 800a208:	40020040 	.word	0x40020040
 800a20c:	40020058 	.word	0x40020058
 800a210:	40020070 	.word	0x40020070
 800a214:	40020088 	.word	0x40020088
 800a218:	400200a0 	.word	0x400200a0
 800a21c:	400200b8 	.word	0x400200b8
 800a220:	40020410 	.word	0x40020410
 800a224:	40020428 	.word	0x40020428
 800a228:	40020440 	.word	0x40020440
 800a22c:	40020458 	.word	0x40020458
 800a230:	40020470 	.word	0x40020470
 800a234:	40020488 	.word	0x40020488
 800a238:	400204a0 	.word	0x400204a0
 800a23c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a24c:	b29b      	uxth	r3, r3
 800a24e:	1ad3      	subs	r3, r2, r3
 800a250:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a25a:	b29b      	uxth	r3, r3
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	f000 80cf 	beq.w	800a400 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800a262:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a266:	2b00      	cmp	r3, #0
 800a268:	f000 80ca 	beq.w	800a400 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a274:	e853 3f00 	ldrex	r3, [r3]
 800a278:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a27a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a27c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a280:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	461a      	mov	r2, r3
 800a28a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a28e:	647b      	str	r3, [r7, #68]	; 0x44
 800a290:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a292:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a294:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a296:	e841 2300 	strex	r3, r2, [r1]
 800a29a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a29c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d1e4      	bne.n	800a26c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	3308      	adds	r3, #8
 800a2a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ac:	e853 3f00 	ldrex	r3, [r3]
 800a2b0:	623b      	str	r3, [r7, #32]
   return(result);
 800a2b2:	6a3a      	ldr	r2, [r7, #32]
 800a2b4:	4b55      	ldr	r3, [pc, #340]	; (800a40c <HAL_UART_IRQHandler+0x770>)
 800a2b6:	4013      	ands	r3, r2
 800a2b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	3308      	adds	r3, #8
 800a2c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a2c6:	633a      	str	r2, [r7, #48]	; 0x30
 800a2c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a2cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2ce:	e841 2300 	strex	r3, r2, [r1]
 800a2d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d1e3      	bne.n	800a2a2 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2220      	movs	r2, #32
 800a2de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2f4:	693b      	ldr	r3, [r7, #16]
 800a2f6:	e853 3f00 	ldrex	r3, [r3]
 800a2fa:	60fb      	str	r3, [r7, #12]
   return(result);
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	f023 0310 	bic.w	r3, r3, #16
 800a302:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	461a      	mov	r2, r3
 800a30c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a310:	61fb      	str	r3, [r7, #28]
 800a312:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a314:	69b9      	ldr	r1, [r7, #24]
 800a316:	69fa      	ldr	r2, [r7, #28]
 800a318:	e841 2300 	strex	r3, r2, [r1]
 800a31c:	617b      	str	r3, [r7, #20]
   return(result);
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d1e4      	bne.n	800a2ee <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2202      	movs	r2, #2
 800a328:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a32a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a32e:	4619      	mov	r1, r3
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f7f6 fb1b 	bl	800096c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a336:	e063      	b.n	800a400 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a33c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a340:	2b00      	cmp	r3, #0
 800a342:	d00e      	beq.n	800a362 <HAL_UART_IRQHandler+0x6c6>
 800a344:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a348:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d008      	beq.n	800a362 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a358:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f002 f8ac 	bl	800c4b8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a360:	e051      	b.n	800a406 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d014      	beq.n	800a398 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a36e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a376:	2b00      	cmp	r3, #0
 800a378:	d105      	bne.n	800a386 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a37a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a37e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a382:	2b00      	cmp	r3, #0
 800a384:	d008      	beq.n	800a398 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d03a      	beq.n	800a404 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	4798      	blx	r3
    }
    return;
 800a396:	e035      	b.n	800a404 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a39c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d009      	beq.n	800a3b8 <HAL_UART_IRQHandler+0x71c>
 800a3a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a3a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d003      	beq.n	800a3b8 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f001 fb39 	bl	800ba28 <UART_EndTransmit_IT>
    return;
 800a3b6:	e026      	b.n	800a406 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a3b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d009      	beq.n	800a3d8 <HAL_UART_IRQHandler+0x73c>
 800a3c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a3c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d003      	beq.n	800a3d8 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f002 f885 	bl	800c4e0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a3d6:	e016      	b.n	800a406 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a3d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d010      	beq.n	800a406 <HAL_UART_IRQHandler+0x76a>
 800a3e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	da0c      	bge.n	800a406 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f002 f86d 	bl	800c4cc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a3f2:	e008      	b.n	800a406 <HAL_UART_IRQHandler+0x76a>
      return;
 800a3f4:	bf00      	nop
 800a3f6:	e006      	b.n	800a406 <HAL_UART_IRQHandler+0x76a>
    return;
 800a3f8:	bf00      	nop
 800a3fa:	e004      	b.n	800a406 <HAL_UART_IRQHandler+0x76a>
      return;
 800a3fc:	bf00      	nop
 800a3fe:	e002      	b.n	800a406 <HAL_UART_IRQHandler+0x76a>
      return;
 800a400:	bf00      	nop
 800a402:	e000      	b.n	800a406 <HAL_UART_IRQHandler+0x76a>
    return;
 800a404:	bf00      	nop
  }
}
 800a406:	37e8      	adds	r7, #232	; 0xe8
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}
 800a40c:	effffffe 	.word	0xeffffffe

0800a410 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a410:	b480      	push	{r7}
 800a412:	b083      	sub	sp, #12
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a418:	bf00      	nop
 800a41a:	370c      	adds	r7, #12
 800a41c:	46bd      	mov	sp, r7
 800a41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a422:	4770      	bx	lr

0800a424 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a424:	b480      	push	{r7}
 800a426:	b083      	sub	sp, #12
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a42c:	bf00      	nop
 800a42e:	370c      	adds	r7, #12
 800a430:	46bd      	mov	sp, r7
 800a432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a436:	4770      	bx	lr

0800a438 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a438:	b480      	push	{r7}
 800a43a:	b083      	sub	sp, #12
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a440:	bf00      	nop
 800a442:	370c      	adds	r7, #12
 800a444:	46bd      	mov	sp, r7
 800a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44a:	4770      	bx	lr

0800a44c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a44c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a450:	b092      	sub	sp, #72	; 0x48
 800a452:	af00      	add	r7, sp, #0
 800a454:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a456:	2300      	movs	r3, #0
 800a458:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	689a      	ldr	r2, [r3, #8]
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	691b      	ldr	r3, [r3, #16]
 800a464:	431a      	orrs	r2, r3
 800a466:	697b      	ldr	r3, [r7, #20]
 800a468:	695b      	ldr	r3, [r3, #20]
 800a46a:	431a      	orrs	r2, r3
 800a46c:	697b      	ldr	r3, [r7, #20]
 800a46e:	69db      	ldr	r3, [r3, #28]
 800a470:	4313      	orrs	r3, r2
 800a472:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	681a      	ldr	r2, [r3, #0]
 800a47a:	4bbe      	ldr	r3, [pc, #760]	; (800a774 <UART_SetConfig+0x328>)
 800a47c:	4013      	ands	r3, r2
 800a47e:	697a      	ldr	r2, [r7, #20]
 800a480:	6812      	ldr	r2, [r2, #0]
 800a482:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a484:	430b      	orrs	r3, r1
 800a486:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	68da      	ldr	r2, [r3, #12]
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	430a      	orrs	r2, r1
 800a49c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	699b      	ldr	r3, [r3, #24]
 800a4a2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a4a4:	697b      	ldr	r3, [r7, #20]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	4ab3      	ldr	r2, [pc, #716]	; (800a778 <UART_SetConfig+0x32c>)
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d004      	beq.n	800a4b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	6a1b      	ldr	r3, [r3, #32]
 800a4b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a4b4:	4313      	orrs	r3, r2
 800a4b6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	689a      	ldr	r2, [r3, #8]
 800a4be:	4baf      	ldr	r3, [pc, #700]	; (800a77c <UART_SetConfig+0x330>)
 800a4c0:	4013      	ands	r3, r2
 800a4c2:	697a      	ldr	r2, [r7, #20]
 800a4c4:	6812      	ldr	r2, [r2, #0]
 800a4c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a4c8:	430b      	orrs	r3, r1
 800a4ca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4d2:	f023 010f 	bic.w	r1, r3, #15
 800a4d6:	697b      	ldr	r3, [r7, #20]
 800a4d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a4da:	697b      	ldr	r3, [r7, #20]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	430a      	orrs	r2, r1
 800a4e0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	4aa6      	ldr	r2, [pc, #664]	; (800a780 <UART_SetConfig+0x334>)
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d177      	bne.n	800a5dc <UART_SetConfig+0x190>
 800a4ec:	4ba5      	ldr	r3, [pc, #660]	; (800a784 <UART_SetConfig+0x338>)
 800a4ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a4f4:	2b28      	cmp	r3, #40	; 0x28
 800a4f6:	d86d      	bhi.n	800a5d4 <UART_SetConfig+0x188>
 800a4f8:	a201      	add	r2, pc, #4	; (adr r2, 800a500 <UART_SetConfig+0xb4>)
 800a4fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4fe:	bf00      	nop
 800a500:	0800a5a5 	.word	0x0800a5a5
 800a504:	0800a5d5 	.word	0x0800a5d5
 800a508:	0800a5d5 	.word	0x0800a5d5
 800a50c:	0800a5d5 	.word	0x0800a5d5
 800a510:	0800a5d5 	.word	0x0800a5d5
 800a514:	0800a5d5 	.word	0x0800a5d5
 800a518:	0800a5d5 	.word	0x0800a5d5
 800a51c:	0800a5d5 	.word	0x0800a5d5
 800a520:	0800a5ad 	.word	0x0800a5ad
 800a524:	0800a5d5 	.word	0x0800a5d5
 800a528:	0800a5d5 	.word	0x0800a5d5
 800a52c:	0800a5d5 	.word	0x0800a5d5
 800a530:	0800a5d5 	.word	0x0800a5d5
 800a534:	0800a5d5 	.word	0x0800a5d5
 800a538:	0800a5d5 	.word	0x0800a5d5
 800a53c:	0800a5d5 	.word	0x0800a5d5
 800a540:	0800a5b5 	.word	0x0800a5b5
 800a544:	0800a5d5 	.word	0x0800a5d5
 800a548:	0800a5d5 	.word	0x0800a5d5
 800a54c:	0800a5d5 	.word	0x0800a5d5
 800a550:	0800a5d5 	.word	0x0800a5d5
 800a554:	0800a5d5 	.word	0x0800a5d5
 800a558:	0800a5d5 	.word	0x0800a5d5
 800a55c:	0800a5d5 	.word	0x0800a5d5
 800a560:	0800a5bd 	.word	0x0800a5bd
 800a564:	0800a5d5 	.word	0x0800a5d5
 800a568:	0800a5d5 	.word	0x0800a5d5
 800a56c:	0800a5d5 	.word	0x0800a5d5
 800a570:	0800a5d5 	.word	0x0800a5d5
 800a574:	0800a5d5 	.word	0x0800a5d5
 800a578:	0800a5d5 	.word	0x0800a5d5
 800a57c:	0800a5d5 	.word	0x0800a5d5
 800a580:	0800a5c5 	.word	0x0800a5c5
 800a584:	0800a5d5 	.word	0x0800a5d5
 800a588:	0800a5d5 	.word	0x0800a5d5
 800a58c:	0800a5d5 	.word	0x0800a5d5
 800a590:	0800a5d5 	.word	0x0800a5d5
 800a594:	0800a5d5 	.word	0x0800a5d5
 800a598:	0800a5d5 	.word	0x0800a5d5
 800a59c:	0800a5d5 	.word	0x0800a5d5
 800a5a0:	0800a5cd 	.word	0x0800a5cd
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5aa:	e222      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a5ac:	2304      	movs	r3, #4
 800a5ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5b2:	e21e      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a5b4:	2308      	movs	r3, #8
 800a5b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5ba:	e21a      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a5bc:	2310      	movs	r3, #16
 800a5be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5c2:	e216      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a5c4:	2320      	movs	r3, #32
 800a5c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5ca:	e212      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a5cc:	2340      	movs	r3, #64	; 0x40
 800a5ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5d2:	e20e      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a5d4:	2380      	movs	r3, #128	; 0x80
 800a5d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5da:	e20a      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	4a69      	ldr	r2, [pc, #420]	; (800a788 <UART_SetConfig+0x33c>)
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	d130      	bne.n	800a648 <UART_SetConfig+0x1fc>
 800a5e6:	4b67      	ldr	r3, [pc, #412]	; (800a784 <UART_SetConfig+0x338>)
 800a5e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5ea:	f003 0307 	and.w	r3, r3, #7
 800a5ee:	2b05      	cmp	r3, #5
 800a5f0:	d826      	bhi.n	800a640 <UART_SetConfig+0x1f4>
 800a5f2:	a201      	add	r2, pc, #4	; (adr r2, 800a5f8 <UART_SetConfig+0x1ac>)
 800a5f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5f8:	0800a611 	.word	0x0800a611
 800a5fc:	0800a619 	.word	0x0800a619
 800a600:	0800a621 	.word	0x0800a621
 800a604:	0800a629 	.word	0x0800a629
 800a608:	0800a631 	.word	0x0800a631
 800a60c:	0800a639 	.word	0x0800a639
 800a610:	2300      	movs	r3, #0
 800a612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a616:	e1ec      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a618:	2304      	movs	r3, #4
 800a61a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a61e:	e1e8      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a620:	2308      	movs	r3, #8
 800a622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a626:	e1e4      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a628:	2310      	movs	r3, #16
 800a62a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a62e:	e1e0      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a630:	2320      	movs	r3, #32
 800a632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a636:	e1dc      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a638:	2340      	movs	r3, #64	; 0x40
 800a63a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a63e:	e1d8      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a640:	2380      	movs	r3, #128	; 0x80
 800a642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a646:	e1d4      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	4a4f      	ldr	r2, [pc, #316]	; (800a78c <UART_SetConfig+0x340>)
 800a64e:	4293      	cmp	r3, r2
 800a650:	d130      	bne.n	800a6b4 <UART_SetConfig+0x268>
 800a652:	4b4c      	ldr	r3, [pc, #304]	; (800a784 <UART_SetConfig+0x338>)
 800a654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a656:	f003 0307 	and.w	r3, r3, #7
 800a65a:	2b05      	cmp	r3, #5
 800a65c:	d826      	bhi.n	800a6ac <UART_SetConfig+0x260>
 800a65e:	a201      	add	r2, pc, #4	; (adr r2, 800a664 <UART_SetConfig+0x218>)
 800a660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a664:	0800a67d 	.word	0x0800a67d
 800a668:	0800a685 	.word	0x0800a685
 800a66c:	0800a68d 	.word	0x0800a68d
 800a670:	0800a695 	.word	0x0800a695
 800a674:	0800a69d 	.word	0x0800a69d
 800a678:	0800a6a5 	.word	0x0800a6a5
 800a67c:	2300      	movs	r3, #0
 800a67e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a682:	e1b6      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a684:	2304      	movs	r3, #4
 800a686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a68a:	e1b2      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a68c:	2308      	movs	r3, #8
 800a68e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a692:	e1ae      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a694:	2310      	movs	r3, #16
 800a696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a69a:	e1aa      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a69c:	2320      	movs	r3, #32
 800a69e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6a2:	e1a6      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a6a4:	2340      	movs	r3, #64	; 0x40
 800a6a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6aa:	e1a2      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a6ac:	2380      	movs	r3, #128	; 0x80
 800a6ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6b2:	e19e      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a6b4:	697b      	ldr	r3, [r7, #20]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	4a35      	ldr	r2, [pc, #212]	; (800a790 <UART_SetConfig+0x344>)
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d130      	bne.n	800a720 <UART_SetConfig+0x2d4>
 800a6be:	4b31      	ldr	r3, [pc, #196]	; (800a784 <UART_SetConfig+0x338>)
 800a6c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6c2:	f003 0307 	and.w	r3, r3, #7
 800a6c6:	2b05      	cmp	r3, #5
 800a6c8:	d826      	bhi.n	800a718 <UART_SetConfig+0x2cc>
 800a6ca:	a201      	add	r2, pc, #4	; (adr r2, 800a6d0 <UART_SetConfig+0x284>)
 800a6cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6d0:	0800a6e9 	.word	0x0800a6e9
 800a6d4:	0800a6f1 	.word	0x0800a6f1
 800a6d8:	0800a6f9 	.word	0x0800a6f9
 800a6dc:	0800a701 	.word	0x0800a701
 800a6e0:	0800a709 	.word	0x0800a709
 800a6e4:	0800a711 	.word	0x0800a711
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6ee:	e180      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a6f0:	2304      	movs	r3, #4
 800a6f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6f6:	e17c      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a6f8:	2308      	movs	r3, #8
 800a6fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6fe:	e178      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a700:	2310      	movs	r3, #16
 800a702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a706:	e174      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a708:	2320      	movs	r3, #32
 800a70a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a70e:	e170      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a710:	2340      	movs	r3, #64	; 0x40
 800a712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a716:	e16c      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a718:	2380      	movs	r3, #128	; 0x80
 800a71a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a71e:	e168      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	4a1b      	ldr	r2, [pc, #108]	; (800a794 <UART_SetConfig+0x348>)
 800a726:	4293      	cmp	r3, r2
 800a728:	d142      	bne.n	800a7b0 <UART_SetConfig+0x364>
 800a72a:	4b16      	ldr	r3, [pc, #88]	; (800a784 <UART_SetConfig+0x338>)
 800a72c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a72e:	f003 0307 	and.w	r3, r3, #7
 800a732:	2b05      	cmp	r3, #5
 800a734:	d838      	bhi.n	800a7a8 <UART_SetConfig+0x35c>
 800a736:	a201      	add	r2, pc, #4	; (adr r2, 800a73c <UART_SetConfig+0x2f0>)
 800a738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a73c:	0800a755 	.word	0x0800a755
 800a740:	0800a75d 	.word	0x0800a75d
 800a744:	0800a765 	.word	0x0800a765
 800a748:	0800a76d 	.word	0x0800a76d
 800a74c:	0800a799 	.word	0x0800a799
 800a750:	0800a7a1 	.word	0x0800a7a1
 800a754:	2300      	movs	r3, #0
 800a756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a75a:	e14a      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a75c:	2304      	movs	r3, #4
 800a75e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a762:	e146      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a764:	2308      	movs	r3, #8
 800a766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a76a:	e142      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a76c:	2310      	movs	r3, #16
 800a76e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a772:	e13e      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a774:	cfff69f3 	.word	0xcfff69f3
 800a778:	58000c00 	.word	0x58000c00
 800a77c:	11fff4ff 	.word	0x11fff4ff
 800a780:	40011000 	.word	0x40011000
 800a784:	58024400 	.word	0x58024400
 800a788:	40004400 	.word	0x40004400
 800a78c:	40004800 	.word	0x40004800
 800a790:	40004c00 	.word	0x40004c00
 800a794:	40005000 	.word	0x40005000
 800a798:	2320      	movs	r3, #32
 800a79a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a79e:	e128      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a7a0:	2340      	movs	r3, #64	; 0x40
 800a7a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7a6:	e124      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a7a8:	2380      	movs	r3, #128	; 0x80
 800a7aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7ae:	e120      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	4acb      	ldr	r2, [pc, #812]	; (800aae4 <UART_SetConfig+0x698>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d176      	bne.n	800a8a8 <UART_SetConfig+0x45c>
 800a7ba:	4bcb      	ldr	r3, [pc, #812]	; (800aae8 <UART_SetConfig+0x69c>)
 800a7bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a7c2:	2b28      	cmp	r3, #40	; 0x28
 800a7c4:	d86c      	bhi.n	800a8a0 <UART_SetConfig+0x454>
 800a7c6:	a201      	add	r2, pc, #4	; (adr r2, 800a7cc <UART_SetConfig+0x380>)
 800a7c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7cc:	0800a871 	.word	0x0800a871
 800a7d0:	0800a8a1 	.word	0x0800a8a1
 800a7d4:	0800a8a1 	.word	0x0800a8a1
 800a7d8:	0800a8a1 	.word	0x0800a8a1
 800a7dc:	0800a8a1 	.word	0x0800a8a1
 800a7e0:	0800a8a1 	.word	0x0800a8a1
 800a7e4:	0800a8a1 	.word	0x0800a8a1
 800a7e8:	0800a8a1 	.word	0x0800a8a1
 800a7ec:	0800a879 	.word	0x0800a879
 800a7f0:	0800a8a1 	.word	0x0800a8a1
 800a7f4:	0800a8a1 	.word	0x0800a8a1
 800a7f8:	0800a8a1 	.word	0x0800a8a1
 800a7fc:	0800a8a1 	.word	0x0800a8a1
 800a800:	0800a8a1 	.word	0x0800a8a1
 800a804:	0800a8a1 	.word	0x0800a8a1
 800a808:	0800a8a1 	.word	0x0800a8a1
 800a80c:	0800a881 	.word	0x0800a881
 800a810:	0800a8a1 	.word	0x0800a8a1
 800a814:	0800a8a1 	.word	0x0800a8a1
 800a818:	0800a8a1 	.word	0x0800a8a1
 800a81c:	0800a8a1 	.word	0x0800a8a1
 800a820:	0800a8a1 	.word	0x0800a8a1
 800a824:	0800a8a1 	.word	0x0800a8a1
 800a828:	0800a8a1 	.word	0x0800a8a1
 800a82c:	0800a889 	.word	0x0800a889
 800a830:	0800a8a1 	.word	0x0800a8a1
 800a834:	0800a8a1 	.word	0x0800a8a1
 800a838:	0800a8a1 	.word	0x0800a8a1
 800a83c:	0800a8a1 	.word	0x0800a8a1
 800a840:	0800a8a1 	.word	0x0800a8a1
 800a844:	0800a8a1 	.word	0x0800a8a1
 800a848:	0800a8a1 	.word	0x0800a8a1
 800a84c:	0800a891 	.word	0x0800a891
 800a850:	0800a8a1 	.word	0x0800a8a1
 800a854:	0800a8a1 	.word	0x0800a8a1
 800a858:	0800a8a1 	.word	0x0800a8a1
 800a85c:	0800a8a1 	.word	0x0800a8a1
 800a860:	0800a8a1 	.word	0x0800a8a1
 800a864:	0800a8a1 	.word	0x0800a8a1
 800a868:	0800a8a1 	.word	0x0800a8a1
 800a86c:	0800a899 	.word	0x0800a899
 800a870:	2301      	movs	r3, #1
 800a872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a876:	e0bc      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a878:	2304      	movs	r3, #4
 800a87a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a87e:	e0b8      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a880:	2308      	movs	r3, #8
 800a882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a886:	e0b4      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a888:	2310      	movs	r3, #16
 800a88a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a88e:	e0b0      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a890:	2320      	movs	r3, #32
 800a892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a896:	e0ac      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a898:	2340      	movs	r3, #64	; 0x40
 800a89a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a89e:	e0a8      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a8a0:	2380      	movs	r3, #128	; 0x80
 800a8a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8a6:	e0a4      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a8a8:	697b      	ldr	r3, [r7, #20]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	4a8f      	ldr	r2, [pc, #572]	; (800aaec <UART_SetConfig+0x6a0>)
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d130      	bne.n	800a914 <UART_SetConfig+0x4c8>
 800a8b2:	4b8d      	ldr	r3, [pc, #564]	; (800aae8 <UART_SetConfig+0x69c>)
 800a8b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8b6:	f003 0307 	and.w	r3, r3, #7
 800a8ba:	2b05      	cmp	r3, #5
 800a8bc:	d826      	bhi.n	800a90c <UART_SetConfig+0x4c0>
 800a8be:	a201      	add	r2, pc, #4	; (adr r2, 800a8c4 <UART_SetConfig+0x478>)
 800a8c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8c4:	0800a8dd 	.word	0x0800a8dd
 800a8c8:	0800a8e5 	.word	0x0800a8e5
 800a8cc:	0800a8ed 	.word	0x0800a8ed
 800a8d0:	0800a8f5 	.word	0x0800a8f5
 800a8d4:	0800a8fd 	.word	0x0800a8fd
 800a8d8:	0800a905 	.word	0x0800a905
 800a8dc:	2300      	movs	r3, #0
 800a8de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8e2:	e086      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a8e4:	2304      	movs	r3, #4
 800a8e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8ea:	e082      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a8ec:	2308      	movs	r3, #8
 800a8ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8f2:	e07e      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a8f4:	2310      	movs	r3, #16
 800a8f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8fa:	e07a      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a8fc:	2320      	movs	r3, #32
 800a8fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a902:	e076      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a904:	2340      	movs	r3, #64	; 0x40
 800a906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a90a:	e072      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a90c:	2380      	movs	r3, #128	; 0x80
 800a90e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a912:	e06e      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	4a75      	ldr	r2, [pc, #468]	; (800aaf0 <UART_SetConfig+0x6a4>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d130      	bne.n	800a980 <UART_SetConfig+0x534>
 800a91e:	4b72      	ldr	r3, [pc, #456]	; (800aae8 <UART_SetConfig+0x69c>)
 800a920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a922:	f003 0307 	and.w	r3, r3, #7
 800a926:	2b05      	cmp	r3, #5
 800a928:	d826      	bhi.n	800a978 <UART_SetConfig+0x52c>
 800a92a:	a201      	add	r2, pc, #4	; (adr r2, 800a930 <UART_SetConfig+0x4e4>)
 800a92c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a930:	0800a949 	.word	0x0800a949
 800a934:	0800a951 	.word	0x0800a951
 800a938:	0800a959 	.word	0x0800a959
 800a93c:	0800a961 	.word	0x0800a961
 800a940:	0800a969 	.word	0x0800a969
 800a944:	0800a971 	.word	0x0800a971
 800a948:	2300      	movs	r3, #0
 800a94a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a94e:	e050      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a950:	2304      	movs	r3, #4
 800a952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a956:	e04c      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a958:	2308      	movs	r3, #8
 800a95a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a95e:	e048      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a960:	2310      	movs	r3, #16
 800a962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a966:	e044      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a968:	2320      	movs	r3, #32
 800a96a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a96e:	e040      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a970:	2340      	movs	r3, #64	; 0x40
 800a972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a976:	e03c      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a978:	2380      	movs	r3, #128	; 0x80
 800a97a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a97e:	e038      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	4a5b      	ldr	r2, [pc, #364]	; (800aaf4 <UART_SetConfig+0x6a8>)
 800a986:	4293      	cmp	r3, r2
 800a988:	d130      	bne.n	800a9ec <UART_SetConfig+0x5a0>
 800a98a:	4b57      	ldr	r3, [pc, #348]	; (800aae8 <UART_SetConfig+0x69c>)
 800a98c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a98e:	f003 0307 	and.w	r3, r3, #7
 800a992:	2b05      	cmp	r3, #5
 800a994:	d826      	bhi.n	800a9e4 <UART_SetConfig+0x598>
 800a996:	a201      	add	r2, pc, #4	; (adr r2, 800a99c <UART_SetConfig+0x550>)
 800a998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a99c:	0800a9b5 	.word	0x0800a9b5
 800a9a0:	0800a9bd 	.word	0x0800a9bd
 800a9a4:	0800a9c5 	.word	0x0800a9c5
 800a9a8:	0800a9cd 	.word	0x0800a9cd
 800a9ac:	0800a9d5 	.word	0x0800a9d5
 800a9b0:	0800a9dd 	.word	0x0800a9dd
 800a9b4:	2302      	movs	r3, #2
 800a9b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9ba:	e01a      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a9bc:	2304      	movs	r3, #4
 800a9be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9c2:	e016      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a9c4:	2308      	movs	r3, #8
 800a9c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9ca:	e012      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a9cc:	2310      	movs	r3, #16
 800a9ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9d2:	e00e      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a9d4:	2320      	movs	r3, #32
 800a9d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9da:	e00a      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a9dc:	2340      	movs	r3, #64	; 0x40
 800a9de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9e2:	e006      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a9e4:	2380      	movs	r3, #128	; 0x80
 800a9e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9ea:	e002      	b.n	800a9f2 <UART_SetConfig+0x5a6>
 800a9ec:	2380      	movs	r3, #128	; 0x80
 800a9ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	4a3f      	ldr	r2, [pc, #252]	; (800aaf4 <UART_SetConfig+0x6a8>)
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	f040 80f8 	bne.w	800abee <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a9fe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800aa02:	2b20      	cmp	r3, #32
 800aa04:	dc46      	bgt.n	800aa94 <UART_SetConfig+0x648>
 800aa06:	2b02      	cmp	r3, #2
 800aa08:	f2c0 8082 	blt.w	800ab10 <UART_SetConfig+0x6c4>
 800aa0c:	3b02      	subs	r3, #2
 800aa0e:	2b1e      	cmp	r3, #30
 800aa10:	d87e      	bhi.n	800ab10 <UART_SetConfig+0x6c4>
 800aa12:	a201      	add	r2, pc, #4	; (adr r2, 800aa18 <UART_SetConfig+0x5cc>)
 800aa14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa18:	0800aa9b 	.word	0x0800aa9b
 800aa1c:	0800ab11 	.word	0x0800ab11
 800aa20:	0800aaa3 	.word	0x0800aaa3
 800aa24:	0800ab11 	.word	0x0800ab11
 800aa28:	0800ab11 	.word	0x0800ab11
 800aa2c:	0800ab11 	.word	0x0800ab11
 800aa30:	0800aab3 	.word	0x0800aab3
 800aa34:	0800ab11 	.word	0x0800ab11
 800aa38:	0800ab11 	.word	0x0800ab11
 800aa3c:	0800ab11 	.word	0x0800ab11
 800aa40:	0800ab11 	.word	0x0800ab11
 800aa44:	0800ab11 	.word	0x0800ab11
 800aa48:	0800ab11 	.word	0x0800ab11
 800aa4c:	0800ab11 	.word	0x0800ab11
 800aa50:	0800aac3 	.word	0x0800aac3
 800aa54:	0800ab11 	.word	0x0800ab11
 800aa58:	0800ab11 	.word	0x0800ab11
 800aa5c:	0800ab11 	.word	0x0800ab11
 800aa60:	0800ab11 	.word	0x0800ab11
 800aa64:	0800ab11 	.word	0x0800ab11
 800aa68:	0800ab11 	.word	0x0800ab11
 800aa6c:	0800ab11 	.word	0x0800ab11
 800aa70:	0800ab11 	.word	0x0800ab11
 800aa74:	0800ab11 	.word	0x0800ab11
 800aa78:	0800ab11 	.word	0x0800ab11
 800aa7c:	0800ab11 	.word	0x0800ab11
 800aa80:	0800ab11 	.word	0x0800ab11
 800aa84:	0800ab11 	.word	0x0800ab11
 800aa88:	0800ab11 	.word	0x0800ab11
 800aa8c:	0800ab11 	.word	0x0800ab11
 800aa90:	0800ab03 	.word	0x0800ab03
 800aa94:	2b40      	cmp	r3, #64	; 0x40
 800aa96:	d037      	beq.n	800ab08 <UART_SetConfig+0x6bc>
 800aa98:	e03a      	b.n	800ab10 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800aa9a:	f7fe f80d 	bl	8008ab8 <HAL_RCCEx_GetD3PCLK1Freq>
 800aa9e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800aaa0:	e03c      	b.n	800ab1c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aaa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f7fe f81c 	bl	8008ae4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aaac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aab0:	e034      	b.n	800ab1c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aab2:	f107 0318 	add.w	r3, r7, #24
 800aab6:	4618      	mov	r0, r3
 800aab8:	f7fe f968 	bl	8008d8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aabc:	69fb      	ldr	r3, [r7, #28]
 800aabe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aac0:	e02c      	b.n	800ab1c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aac2:	4b09      	ldr	r3, [pc, #36]	; (800aae8 <UART_SetConfig+0x69c>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f003 0320 	and.w	r3, r3, #32
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d016      	beq.n	800aafc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aace:	4b06      	ldr	r3, [pc, #24]	; (800aae8 <UART_SetConfig+0x69c>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	08db      	lsrs	r3, r3, #3
 800aad4:	f003 0303 	and.w	r3, r3, #3
 800aad8:	4a07      	ldr	r2, [pc, #28]	; (800aaf8 <UART_SetConfig+0x6ac>)
 800aada:	fa22 f303 	lsr.w	r3, r2, r3
 800aade:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aae0:	e01c      	b.n	800ab1c <UART_SetConfig+0x6d0>
 800aae2:	bf00      	nop
 800aae4:	40011400 	.word	0x40011400
 800aae8:	58024400 	.word	0x58024400
 800aaec:	40007800 	.word	0x40007800
 800aaf0:	40007c00 	.word	0x40007c00
 800aaf4:	58000c00 	.word	0x58000c00
 800aaf8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800aafc:	4b9d      	ldr	r3, [pc, #628]	; (800ad74 <UART_SetConfig+0x928>)
 800aafe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab00:	e00c      	b.n	800ab1c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ab02:	4b9d      	ldr	r3, [pc, #628]	; (800ad78 <UART_SetConfig+0x92c>)
 800ab04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab06:	e009      	b.n	800ab1c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab0e:	e005      	b.n	800ab1c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800ab10:	2300      	movs	r3, #0
 800ab12:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ab14:	2301      	movs	r3, #1
 800ab16:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ab1a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ab1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	f000 81de 	beq.w	800aee0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ab24:	697b      	ldr	r3, [r7, #20]
 800ab26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab28:	4a94      	ldr	r2, [pc, #592]	; (800ad7c <UART_SetConfig+0x930>)
 800ab2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab2e:	461a      	mov	r2, r3
 800ab30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab32:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab36:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	685a      	ldr	r2, [r3, #4]
 800ab3c:	4613      	mov	r3, r2
 800ab3e:	005b      	lsls	r3, r3, #1
 800ab40:	4413      	add	r3, r2
 800ab42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d305      	bcc.n	800ab54 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	685b      	ldr	r3, [r3, #4]
 800ab4c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ab4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab50:	429a      	cmp	r2, r3
 800ab52:	d903      	bls.n	800ab5c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800ab54:	2301      	movs	r3, #1
 800ab56:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ab5a:	e1c1      	b.n	800aee0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab5e:	2200      	movs	r2, #0
 800ab60:	60bb      	str	r3, [r7, #8]
 800ab62:	60fa      	str	r2, [r7, #12]
 800ab64:	697b      	ldr	r3, [r7, #20]
 800ab66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab68:	4a84      	ldr	r2, [pc, #528]	; (800ad7c <UART_SetConfig+0x930>)
 800ab6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab6e:	b29b      	uxth	r3, r3
 800ab70:	2200      	movs	r2, #0
 800ab72:	603b      	str	r3, [r7, #0]
 800ab74:	607a      	str	r2, [r7, #4]
 800ab76:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab7a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ab7e:	f7f5 fc07 	bl	8000390 <__aeabi_uldivmod>
 800ab82:	4602      	mov	r2, r0
 800ab84:	460b      	mov	r3, r1
 800ab86:	4610      	mov	r0, r2
 800ab88:	4619      	mov	r1, r3
 800ab8a:	f04f 0200 	mov.w	r2, #0
 800ab8e:	f04f 0300 	mov.w	r3, #0
 800ab92:	020b      	lsls	r3, r1, #8
 800ab94:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ab98:	0202      	lsls	r2, r0, #8
 800ab9a:	6979      	ldr	r1, [r7, #20]
 800ab9c:	6849      	ldr	r1, [r1, #4]
 800ab9e:	0849      	lsrs	r1, r1, #1
 800aba0:	2000      	movs	r0, #0
 800aba2:	460c      	mov	r4, r1
 800aba4:	4605      	mov	r5, r0
 800aba6:	eb12 0804 	adds.w	r8, r2, r4
 800abaa:	eb43 0905 	adc.w	r9, r3, r5
 800abae:	697b      	ldr	r3, [r7, #20]
 800abb0:	685b      	ldr	r3, [r3, #4]
 800abb2:	2200      	movs	r2, #0
 800abb4:	469a      	mov	sl, r3
 800abb6:	4693      	mov	fp, r2
 800abb8:	4652      	mov	r2, sl
 800abba:	465b      	mov	r3, fp
 800abbc:	4640      	mov	r0, r8
 800abbe:	4649      	mov	r1, r9
 800abc0:	f7f5 fbe6 	bl	8000390 <__aeabi_uldivmod>
 800abc4:	4602      	mov	r2, r0
 800abc6:	460b      	mov	r3, r1
 800abc8:	4613      	mov	r3, r2
 800abca:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800abcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800abd2:	d308      	bcc.n	800abe6 <UART_SetConfig+0x79a>
 800abd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800abda:	d204      	bcs.n	800abe6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800abe2:	60da      	str	r2, [r3, #12]
 800abe4:	e17c      	b.n	800aee0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800abe6:	2301      	movs	r3, #1
 800abe8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800abec:	e178      	b.n	800aee0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	69db      	ldr	r3, [r3, #28]
 800abf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800abf6:	f040 80c5 	bne.w	800ad84 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800abfa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800abfe:	2b20      	cmp	r3, #32
 800ac00:	dc48      	bgt.n	800ac94 <UART_SetConfig+0x848>
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	db7b      	blt.n	800acfe <UART_SetConfig+0x8b2>
 800ac06:	2b20      	cmp	r3, #32
 800ac08:	d879      	bhi.n	800acfe <UART_SetConfig+0x8b2>
 800ac0a:	a201      	add	r2, pc, #4	; (adr r2, 800ac10 <UART_SetConfig+0x7c4>)
 800ac0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac10:	0800ac9b 	.word	0x0800ac9b
 800ac14:	0800aca3 	.word	0x0800aca3
 800ac18:	0800acff 	.word	0x0800acff
 800ac1c:	0800acff 	.word	0x0800acff
 800ac20:	0800acab 	.word	0x0800acab
 800ac24:	0800acff 	.word	0x0800acff
 800ac28:	0800acff 	.word	0x0800acff
 800ac2c:	0800acff 	.word	0x0800acff
 800ac30:	0800acbb 	.word	0x0800acbb
 800ac34:	0800acff 	.word	0x0800acff
 800ac38:	0800acff 	.word	0x0800acff
 800ac3c:	0800acff 	.word	0x0800acff
 800ac40:	0800acff 	.word	0x0800acff
 800ac44:	0800acff 	.word	0x0800acff
 800ac48:	0800acff 	.word	0x0800acff
 800ac4c:	0800acff 	.word	0x0800acff
 800ac50:	0800accb 	.word	0x0800accb
 800ac54:	0800acff 	.word	0x0800acff
 800ac58:	0800acff 	.word	0x0800acff
 800ac5c:	0800acff 	.word	0x0800acff
 800ac60:	0800acff 	.word	0x0800acff
 800ac64:	0800acff 	.word	0x0800acff
 800ac68:	0800acff 	.word	0x0800acff
 800ac6c:	0800acff 	.word	0x0800acff
 800ac70:	0800acff 	.word	0x0800acff
 800ac74:	0800acff 	.word	0x0800acff
 800ac78:	0800acff 	.word	0x0800acff
 800ac7c:	0800acff 	.word	0x0800acff
 800ac80:	0800acff 	.word	0x0800acff
 800ac84:	0800acff 	.word	0x0800acff
 800ac88:	0800acff 	.word	0x0800acff
 800ac8c:	0800acff 	.word	0x0800acff
 800ac90:	0800acf1 	.word	0x0800acf1
 800ac94:	2b40      	cmp	r3, #64	; 0x40
 800ac96:	d02e      	beq.n	800acf6 <UART_SetConfig+0x8aa>
 800ac98:	e031      	b.n	800acfe <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac9a:	f7fc fc95 	bl	80075c8 <HAL_RCC_GetPCLK1Freq>
 800ac9e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800aca0:	e033      	b.n	800ad0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aca2:	f7fc fca7 	bl	80075f4 <HAL_RCC_GetPCLK2Freq>
 800aca6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800aca8:	e02f      	b.n	800ad0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800acae:	4618      	mov	r0, r3
 800acb0:	f7fd ff18 	bl	8008ae4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800acb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acb8:	e027      	b.n	800ad0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800acba:	f107 0318 	add.w	r3, r7, #24
 800acbe:	4618      	mov	r0, r3
 800acc0:	f7fe f864 	bl	8008d8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800acc4:	69fb      	ldr	r3, [r7, #28]
 800acc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acc8:	e01f      	b.n	800ad0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800acca:	4b2d      	ldr	r3, [pc, #180]	; (800ad80 <UART_SetConfig+0x934>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	f003 0320 	and.w	r3, r3, #32
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d009      	beq.n	800acea <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800acd6:	4b2a      	ldr	r3, [pc, #168]	; (800ad80 <UART_SetConfig+0x934>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	08db      	lsrs	r3, r3, #3
 800acdc:	f003 0303 	and.w	r3, r3, #3
 800ace0:	4a24      	ldr	r2, [pc, #144]	; (800ad74 <UART_SetConfig+0x928>)
 800ace2:	fa22 f303 	lsr.w	r3, r2, r3
 800ace6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ace8:	e00f      	b.n	800ad0a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800acea:	4b22      	ldr	r3, [pc, #136]	; (800ad74 <UART_SetConfig+0x928>)
 800acec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acee:	e00c      	b.n	800ad0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800acf0:	4b21      	ldr	r3, [pc, #132]	; (800ad78 <UART_SetConfig+0x92c>)
 800acf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acf4:	e009      	b.n	800ad0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800acf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800acfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acfc:	e005      	b.n	800ad0a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800acfe:	2300      	movs	r3, #0
 800ad00:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ad02:	2301      	movs	r3, #1
 800ad04:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ad08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ad0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	f000 80e7 	beq.w	800aee0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad12:	697b      	ldr	r3, [r7, #20]
 800ad14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad16:	4a19      	ldr	r2, [pc, #100]	; (800ad7c <UART_SetConfig+0x930>)
 800ad18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad1c:	461a      	mov	r2, r3
 800ad1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad20:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad24:	005a      	lsls	r2, r3, #1
 800ad26:	697b      	ldr	r3, [r7, #20]
 800ad28:	685b      	ldr	r3, [r3, #4]
 800ad2a:	085b      	lsrs	r3, r3, #1
 800ad2c:	441a      	add	r2, r3
 800ad2e:	697b      	ldr	r3, [r7, #20]
 800ad30:	685b      	ldr	r3, [r3, #4]
 800ad32:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad36:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad3a:	2b0f      	cmp	r3, #15
 800ad3c:	d916      	bls.n	800ad6c <UART_SetConfig+0x920>
 800ad3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad44:	d212      	bcs.n	800ad6c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ad46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad48:	b29b      	uxth	r3, r3
 800ad4a:	f023 030f 	bic.w	r3, r3, #15
 800ad4e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ad50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad52:	085b      	lsrs	r3, r3, #1
 800ad54:	b29b      	uxth	r3, r3
 800ad56:	f003 0307 	and.w	r3, r3, #7
 800ad5a:	b29a      	uxth	r2, r3
 800ad5c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ad5e:	4313      	orrs	r3, r2
 800ad60:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ad68:	60da      	str	r2, [r3, #12]
 800ad6a:	e0b9      	b.n	800aee0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ad72:	e0b5      	b.n	800aee0 <UART_SetConfig+0xa94>
 800ad74:	03d09000 	.word	0x03d09000
 800ad78:	003d0900 	.word	0x003d0900
 800ad7c:	080144ac 	.word	0x080144ac
 800ad80:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800ad84:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ad88:	2b20      	cmp	r3, #32
 800ad8a:	dc49      	bgt.n	800ae20 <UART_SetConfig+0x9d4>
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	db7c      	blt.n	800ae8a <UART_SetConfig+0xa3e>
 800ad90:	2b20      	cmp	r3, #32
 800ad92:	d87a      	bhi.n	800ae8a <UART_SetConfig+0xa3e>
 800ad94:	a201      	add	r2, pc, #4	; (adr r2, 800ad9c <UART_SetConfig+0x950>)
 800ad96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad9a:	bf00      	nop
 800ad9c:	0800ae27 	.word	0x0800ae27
 800ada0:	0800ae2f 	.word	0x0800ae2f
 800ada4:	0800ae8b 	.word	0x0800ae8b
 800ada8:	0800ae8b 	.word	0x0800ae8b
 800adac:	0800ae37 	.word	0x0800ae37
 800adb0:	0800ae8b 	.word	0x0800ae8b
 800adb4:	0800ae8b 	.word	0x0800ae8b
 800adb8:	0800ae8b 	.word	0x0800ae8b
 800adbc:	0800ae47 	.word	0x0800ae47
 800adc0:	0800ae8b 	.word	0x0800ae8b
 800adc4:	0800ae8b 	.word	0x0800ae8b
 800adc8:	0800ae8b 	.word	0x0800ae8b
 800adcc:	0800ae8b 	.word	0x0800ae8b
 800add0:	0800ae8b 	.word	0x0800ae8b
 800add4:	0800ae8b 	.word	0x0800ae8b
 800add8:	0800ae8b 	.word	0x0800ae8b
 800addc:	0800ae57 	.word	0x0800ae57
 800ade0:	0800ae8b 	.word	0x0800ae8b
 800ade4:	0800ae8b 	.word	0x0800ae8b
 800ade8:	0800ae8b 	.word	0x0800ae8b
 800adec:	0800ae8b 	.word	0x0800ae8b
 800adf0:	0800ae8b 	.word	0x0800ae8b
 800adf4:	0800ae8b 	.word	0x0800ae8b
 800adf8:	0800ae8b 	.word	0x0800ae8b
 800adfc:	0800ae8b 	.word	0x0800ae8b
 800ae00:	0800ae8b 	.word	0x0800ae8b
 800ae04:	0800ae8b 	.word	0x0800ae8b
 800ae08:	0800ae8b 	.word	0x0800ae8b
 800ae0c:	0800ae8b 	.word	0x0800ae8b
 800ae10:	0800ae8b 	.word	0x0800ae8b
 800ae14:	0800ae8b 	.word	0x0800ae8b
 800ae18:	0800ae8b 	.word	0x0800ae8b
 800ae1c:	0800ae7d 	.word	0x0800ae7d
 800ae20:	2b40      	cmp	r3, #64	; 0x40
 800ae22:	d02e      	beq.n	800ae82 <UART_SetConfig+0xa36>
 800ae24:	e031      	b.n	800ae8a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae26:	f7fc fbcf 	bl	80075c8 <HAL_RCC_GetPCLK1Freq>
 800ae2a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ae2c:	e033      	b.n	800ae96 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae2e:	f7fc fbe1 	bl	80075f4 <HAL_RCC_GetPCLK2Freq>
 800ae32:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ae34:	e02f      	b.n	800ae96 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f7fd fe52 	bl	8008ae4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ae40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae44:	e027      	b.n	800ae96 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae46:	f107 0318 	add.w	r3, r7, #24
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f7fd ff9e 	bl	8008d8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ae50:	69fb      	ldr	r3, [r7, #28]
 800ae52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae54:	e01f      	b.n	800ae96 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae56:	4b2d      	ldr	r3, [pc, #180]	; (800af0c <UART_SetConfig+0xac0>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f003 0320 	and.w	r3, r3, #32
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d009      	beq.n	800ae76 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ae62:	4b2a      	ldr	r3, [pc, #168]	; (800af0c <UART_SetConfig+0xac0>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	08db      	lsrs	r3, r3, #3
 800ae68:	f003 0303 	and.w	r3, r3, #3
 800ae6c:	4a28      	ldr	r2, [pc, #160]	; (800af10 <UART_SetConfig+0xac4>)
 800ae6e:	fa22 f303 	lsr.w	r3, r2, r3
 800ae72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ae74:	e00f      	b.n	800ae96 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800ae76:	4b26      	ldr	r3, [pc, #152]	; (800af10 <UART_SetConfig+0xac4>)
 800ae78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae7a:	e00c      	b.n	800ae96 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ae7c:	4b25      	ldr	r3, [pc, #148]	; (800af14 <UART_SetConfig+0xac8>)
 800ae7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae80:	e009      	b.n	800ae96 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae88:	e005      	b.n	800ae96 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ae8e:	2301      	movs	r3, #1
 800ae90:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ae94:	bf00      	nop
    }

    if (pclk != 0U)
 800ae96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d021      	beq.n	800aee0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aea0:	4a1d      	ldr	r2, [pc, #116]	; (800af18 <UART_SetConfig+0xacc>)
 800aea2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aea6:	461a      	mov	r2, r3
 800aea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aeaa:	fbb3 f2f2 	udiv	r2, r3, r2
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	685b      	ldr	r3, [r3, #4]
 800aeb2:	085b      	lsrs	r3, r3, #1
 800aeb4:	441a      	add	r2, r3
 800aeb6:	697b      	ldr	r3, [r7, #20]
 800aeb8:	685b      	ldr	r3, [r3, #4]
 800aeba:	fbb2 f3f3 	udiv	r3, r2, r3
 800aebe:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aec2:	2b0f      	cmp	r3, #15
 800aec4:	d909      	bls.n	800aeda <UART_SetConfig+0xa8e>
 800aec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aecc:	d205      	bcs.n	800aeda <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800aece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aed0:	b29a      	uxth	r2, r3
 800aed2:	697b      	ldr	r3, [r7, #20]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	60da      	str	r2, [r3, #12]
 800aed8:	e002      	b.n	800aee0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800aeda:	2301      	movs	r3, #1
 800aedc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	2201      	movs	r2, #1
 800aee4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800aee8:	697b      	ldr	r3, [r7, #20]
 800aeea:	2201      	movs	r2, #1
 800aeec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	2200      	movs	r2, #0
 800aef4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	2200      	movs	r2, #0
 800aefa:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800aefc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800af00:	4618      	mov	r0, r3
 800af02:	3748      	adds	r7, #72	; 0x48
 800af04:	46bd      	mov	sp, r7
 800af06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800af0a:	bf00      	nop
 800af0c:	58024400 	.word	0x58024400
 800af10:	03d09000 	.word	0x03d09000
 800af14:	003d0900 	.word	0x003d0900
 800af18:	080144ac 	.word	0x080144ac

0800af1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800af1c:	b480      	push	{r7}
 800af1e:	b083      	sub	sp, #12
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af28:	f003 0301 	and.w	r3, r3, #1
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d00a      	beq.n	800af46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	685b      	ldr	r3, [r3, #4]
 800af36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	430a      	orrs	r2, r1
 800af44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af4a:	f003 0302 	and.w	r3, r3, #2
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d00a      	beq.n	800af68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	685b      	ldr	r3, [r3, #4]
 800af58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	430a      	orrs	r2, r1
 800af66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af6c:	f003 0304 	and.w	r3, r3, #4
 800af70:	2b00      	cmp	r3, #0
 800af72:	d00a      	beq.n	800af8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	685b      	ldr	r3, [r3, #4]
 800af7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	430a      	orrs	r2, r1
 800af88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af8e:	f003 0308 	and.w	r3, r3, #8
 800af92:	2b00      	cmp	r3, #0
 800af94:	d00a      	beq.n	800afac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	685b      	ldr	r3, [r3, #4]
 800af9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	430a      	orrs	r2, r1
 800afaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afb0:	f003 0310 	and.w	r3, r3, #16
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d00a      	beq.n	800afce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	689b      	ldr	r3, [r3, #8]
 800afbe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	430a      	orrs	r2, r1
 800afcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afd2:	f003 0320 	and.w	r3, r3, #32
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d00a      	beq.n	800aff0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	689b      	ldr	r3, [r3, #8]
 800afe0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	430a      	orrs	r2, r1
 800afee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d01a      	beq.n	800b032 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	685b      	ldr	r3, [r3, #4]
 800b002:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	430a      	orrs	r2, r1
 800b010:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b016:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b01a:	d10a      	bne.n	800b032 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	685b      	ldr	r3, [r3, #4]
 800b022:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	430a      	orrs	r2, r1
 800b030:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d00a      	beq.n	800b054 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	685b      	ldr	r3, [r3, #4]
 800b044:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	430a      	orrs	r2, r1
 800b052:	605a      	str	r2, [r3, #4]
  }
}
 800b054:	bf00      	nop
 800b056:	370c      	adds	r7, #12
 800b058:	46bd      	mov	sp, r7
 800b05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05e:	4770      	bx	lr

0800b060 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b098      	sub	sp, #96	; 0x60
 800b064:	af02      	add	r7, sp, #8
 800b066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2200      	movs	r2, #0
 800b06c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b070:	f7f6 fe24 	bl	8001cbc <HAL_GetTick>
 800b074:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f003 0308 	and.w	r3, r3, #8
 800b080:	2b08      	cmp	r3, #8
 800b082:	d12f      	bne.n	800b0e4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b084:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b088:	9300      	str	r3, [sp, #0]
 800b08a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b08c:	2200      	movs	r2, #0
 800b08e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f000 f88e 	bl	800b1b4 <UART_WaitOnFlagUntilTimeout>
 800b098:	4603      	mov	r3, r0
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d022      	beq.n	800b0e4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0a6:	e853 3f00 	ldrex	r3, [r3]
 800b0aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b0ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b0b2:	653b      	str	r3, [r7, #80]	; 0x50
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0bc:	647b      	str	r3, [r7, #68]	; 0x44
 800b0be:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b0c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b0c4:	e841 2300 	strex	r3, r2, [r1]
 800b0c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b0ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d1e6      	bne.n	800b09e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2220      	movs	r2, #32
 800b0d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b0e0:	2303      	movs	r3, #3
 800b0e2:	e063      	b.n	800b1ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f003 0304 	and.w	r3, r3, #4
 800b0ee:	2b04      	cmp	r3, #4
 800b0f0:	d149      	bne.n	800b186 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b0f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b0f6:	9300      	str	r3, [sp, #0]
 800b0f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	f000 f857 	bl	800b1b4 <UART_WaitOnFlagUntilTimeout>
 800b106:	4603      	mov	r3, r0
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d03c      	beq.n	800b186 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b114:	e853 3f00 	ldrex	r3, [r3]
 800b118:	623b      	str	r3, [r7, #32]
   return(result);
 800b11a:	6a3b      	ldr	r3, [r7, #32]
 800b11c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b120:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	461a      	mov	r2, r3
 800b128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b12a:	633b      	str	r3, [r7, #48]	; 0x30
 800b12c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b12e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b130:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b132:	e841 2300 	strex	r3, r2, [r1]
 800b136:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d1e6      	bne.n	800b10c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	3308      	adds	r3, #8
 800b144:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b146:	693b      	ldr	r3, [r7, #16]
 800b148:	e853 3f00 	ldrex	r3, [r3]
 800b14c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	f023 0301 	bic.w	r3, r3, #1
 800b154:	64bb      	str	r3, [r7, #72]	; 0x48
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	3308      	adds	r3, #8
 800b15c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b15e:	61fa      	str	r2, [r7, #28]
 800b160:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b162:	69b9      	ldr	r1, [r7, #24]
 800b164:	69fa      	ldr	r2, [r7, #28]
 800b166:	e841 2300 	strex	r3, r2, [r1]
 800b16a:	617b      	str	r3, [r7, #20]
   return(result);
 800b16c:	697b      	ldr	r3, [r7, #20]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d1e5      	bne.n	800b13e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2220      	movs	r2, #32
 800b176:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2200      	movs	r2, #0
 800b17e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b182:	2303      	movs	r3, #3
 800b184:	e012      	b.n	800b1ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2220      	movs	r2, #32
 800b18a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2220      	movs	r2, #32
 800b192:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2200      	movs	r2, #0
 800b19a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b1aa:	2300      	movs	r3, #0
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	3758      	adds	r7, #88	; 0x58
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b084      	sub	sp, #16
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	60f8      	str	r0, [r7, #12]
 800b1bc:	60b9      	str	r1, [r7, #8]
 800b1be:	603b      	str	r3, [r7, #0]
 800b1c0:	4613      	mov	r3, r2
 800b1c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b1c4:	e049      	b.n	800b25a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b1c6:	69bb      	ldr	r3, [r7, #24]
 800b1c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1cc:	d045      	beq.n	800b25a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b1ce:	f7f6 fd75 	bl	8001cbc <HAL_GetTick>
 800b1d2:	4602      	mov	r2, r0
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	1ad3      	subs	r3, r2, r3
 800b1d8:	69ba      	ldr	r2, [r7, #24]
 800b1da:	429a      	cmp	r2, r3
 800b1dc:	d302      	bcc.n	800b1e4 <UART_WaitOnFlagUntilTimeout+0x30>
 800b1de:	69bb      	ldr	r3, [r7, #24]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d101      	bne.n	800b1e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b1e4:	2303      	movs	r3, #3
 800b1e6:	e048      	b.n	800b27a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	f003 0304 	and.w	r3, r3, #4
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d031      	beq.n	800b25a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	69db      	ldr	r3, [r3, #28]
 800b1fc:	f003 0308 	and.w	r3, r3, #8
 800b200:	2b08      	cmp	r3, #8
 800b202:	d110      	bne.n	800b226 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	2208      	movs	r2, #8
 800b20a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800b20c:	68f8      	ldr	r0, [r7, #12]
 800b20e:	f000 fa43 	bl	800b698 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	2208      	movs	r2, #8
 800b216:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	2200      	movs	r2, #0
 800b21e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800b222:	2301      	movs	r3, #1
 800b224:	e029      	b.n	800b27a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	69db      	ldr	r3, [r3, #28]
 800b22c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b230:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b234:	d111      	bne.n	800b25a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b23e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b240:	68f8      	ldr	r0, [r7, #12]
 800b242:	f000 fa29 	bl	800b698 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	2220      	movs	r2, #32
 800b24a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	2200      	movs	r2, #0
 800b252:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800b256:	2303      	movs	r3, #3
 800b258:	e00f      	b.n	800b27a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	69da      	ldr	r2, [r3, #28]
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	4013      	ands	r3, r2
 800b264:	68ba      	ldr	r2, [r7, #8]
 800b266:	429a      	cmp	r2, r3
 800b268:	bf0c      	ite	eq
 800b26a:	2301      	moveq	r3, #1
 800b26c:	2300      	movne	r3, #0
 800b26e:	b2db      	uxtb	r3, r3
 800b270:	461a      	mov	r2, r3
 800b272:	79fb      	ldrb	r3, [r7, #7]
 800b274:	429a      	cmp	r2, r3
 800b276:	d0a6      	beq.n	800b1c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b278:	2300      	movs	r3, #0
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3710      	adds	r7, #16
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}
	...

0800b284 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b284:	b480      	push	{r7}
 800b286:	b0a3      	sub	sp, #140	; 0x8c
 800b288:	af00      	add	r7, sp, #0
 800b28a:	60f8      	str	r0, [r7, #12]
 800b28c:	60b9      	str	r1, [r7, #8]
 800b28e:	4613      	mov	r3, r2
 800b290:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	68ba      	ldr	r2, [r7, #8]
 800b296:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	88fa      	ldrh	r2, [r7, #6]
 800b29c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	88fa      	ldrh	r2, [r7, #6]
 800b2a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	689b      	ldr	r3, [r3, #8]
 800b2b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2b6:	d10e      	bne.n	800b2d6 <UART_Start_Receive_IT+0x52>
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	691b      	ldr	r3, [r3, #16]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d105      	bne.n	800b2cc <UART_Start_Receive_IT+0x48>
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b2c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b2ca:	e02d      	b.n	800b328 <UART_Start_Receive_IT+0xa4>
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	22ff      	movs	r2, #255	; 0xff
 800b2d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b2d4:	e028      	b.n	800b328 <UART_Start_Receive_IT+0xa4>
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	689b      	ldr	r3, [r3, #8]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d10d      	bne.n	800b2fa <UART_Start_Receive_IT+0x76>
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	691b      	ldr	r3, [r3, #16]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d104      	bne.n	800b2f0 <UART_Start_Receive_IT+0x6c>
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	22ff      	movs	r2, #255	; 0xff
 800b2ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b2ee:	e01b      	b.n	800b328 <UART_Start_Receive_IT+0xa4>
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	227f      	movs	r2, #127	; 0x7f
 800b2f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b2f8:	e016      	b.n	800b328 <UART_Start_Receive_IT+0xa4>
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	689b      	ldr	r3, [r3, #8]
 800b2fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b302:	d10d      	bne.n	800b320 <UART_Start_Receive_IT+0x9c>
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	691b      	ldr	r3, [r3, #16]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d104      	bne.n	800b316 <UART_Start_Receive_IT+0x92>
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	227f      	movs	r2, #127	; 0x7f
 800b310:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b314:	e008      	b.n	800b328 <UART_Start_Receive_IT+0xa4>
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	223f      	movs	r2, #63	; 0x3f
 800b31a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b31e:	e003      	b.n	800b328 <UART_Start_Receive_IT+0xa4>
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	2200      	movs	r2, #0
 800b324:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	2200      	movs	r2, #0
 800b32c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	2222      	movs	r2, #34	; 0x22
 800b334:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	3308      	adds	r3, #8
 800b33e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b340:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b342:	e853 3f00 	ldrex	r3, [r3]
 800b346:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b348:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b34a:	f043 0301 	orr.w	r3, r3, #1
 800b34e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	3308      	adds	r3, #8
 800b358:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b35c:	673a      	str	r2, [r7, #112]	; 0x70
 800b35e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b360:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800b362:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b364:	e841 2300 	strex	r3, r2, [r1]
 800b368:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800b36a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d1e3      	bne.n	800b338 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b374:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b378:	d14f      	bne.n	800b41a <UART_Start_Receive_IT+0x196>
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b380:	88fa      	ldrh	r2, [r7, #6]
 800b382:	429a      	cmp	r2, r3
 800b384:	d349      	bcc.n	800b41a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	689b      	ldr	r3, [r3, #8]
 800b38a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b38e:	d107      	bne.n	800b3a0 <UART_Start_Receive_IT+0x11c>
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	691b      	ldr	r3, [r3, #16]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d103      	bne.n	800b3a0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	4a47      	ldr	r2, [pc, #284]	; (800b4b8 <UART_Start_Receive_IT+0x234>)
 800b39c:	675a      	str	r2, [r3, #116]	; 0x74
 800b39e:	e002      	b.n	800b3a6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	4a46      	ldr	r2, [pc, #280]	; (800b4bc <UART_Start_Receive_IT+0x238>)
 800b3a4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	691b      	ldr	r3, [r3, #16]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d01a      	beq.n	800b3e4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3b6:	e853 3f00 	ldrex	r3, [r3]
 800b3ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b3bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b3c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	461a      	mov	r2, r3
 800b3cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b3d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b3d2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3d4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b3d6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b3d8:	e841 2300 	strex	r3, r2, [r1]
 800b3dc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b3de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d1e4      	bne.n	800b3ae <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	3308      	adds	r3, #8
 800b3ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3ee:	e853 3f00 	ldrex	r3, [r3]
 800b3f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b3fa:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	3308      	adds	r3, #8
 800b402:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b404:	64ba      	str	r2, [r7, #72]	; 0x48
 800b406:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b408:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b40a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b40c:	e841 2300 	strex	r3, r2, [r1]
 800b410:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b412:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b414:	2b00      	cmp	r3, #0
 800b416:	d1e5      	bne.n	800b3e4 <UART_Start_Receive_IT+0x160>
 800b418:	e046      	b.n	800b4a8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	689b      	ldr	r3, [r3, #8]
 800b41e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b422:	d107      	bne.n	800b434 <UART_Start_Receive_IT+0x1b0>
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	691b      	ldr	r3, [r3, #16]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d103      	bne.n	800b434 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	4a24      	ldr	r2, [pc, #144]	; (800b4c0 <UART_Start_Receive_IT+0x23c>)
 800b430:	675a      	str	r2, [r3, #116]	; 0x74
 800b432:	e002      	b.n	800b43a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	4a23      	ldr	r2, [pc, #140]	; (800b4c4 <UART_Start_Receive_IT+0x240>)
 800b438:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	691b      	ldr	r3, [r3, #16]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d019      	beq.n	800b476 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b44a:	e853 3f00 	ldrex	r3, [r3]
 800b44e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b452:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800b456:	677b      	str	r3, [r7, #116]	; 0x74
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	461a      	mov	r2, r3
 800b45e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b460:	637b      	str	r3, [r7, #52]	; 0x34
 800b462:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b464:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b466:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b468:	e841 2300 	strex	r3, r2, [r1]
 800b46c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b470:	2b00      	cmp	r3, #0
 800b472:	d1e6      	bne.n	800b442 <UART_Start_Receive_IT+0x1be>
 800b474:	e018      	b.n	800b4a8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b47c:	697b      	ldr	r3, [r7, #20]
 800b47e:	e853 3f00 	ldrex	r3, [r3]
 800b482:	613b      	str	r3, [r7, #16]
   return(result);
 800b484:	693b      	ldr	r3, [r7, #16]
 800b486:	f043 0320 	orr.w	r3, r3, #32
 800b48a:	67bb      	str	r3, [r7, #120]	; 0x78
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	461a      	mov	r2, r3
 800b492:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b494:	623b      	str	r3, [r7, #32]
 800b496:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b498:	69f9      	ldr	r1, [r7, #28]
 800b49a:	6a3a      	ldr	r2, [r7, #32]
 800b49c:	e841 2300 	strex	r3, r2, [r1]
 800b4a0:	61bb      	str	r3, [r7, #24]
   return(result);
 800b4a2:	69bb      	ldr	r3, [r7, #24]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d1e6      	bne.n	800b476 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800b4a8:	2300      	movs	r3, #0
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	378c      	adds	r7, #140	; 0x8c
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b4:	4770      	bx	lr
 800b4b6:	bf00      	nop
 800b4b8:	0800c151 	.word	0x0800c151
 800b4bc:	0800bdf1 	.word	0x0800bdf1
 800b4c0:	0800bc39 	.word	0x0800bc39
 800b4c4:	0800ba81 	.word	0x0800ba81

0800b4c8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b096      	sub	sp, #88	; 0x58
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	60f8      	str	r0, [r7, #12]
 800b4d0:	60b9      	str	r1, [r7, #8]
 800b4d2:	4613      	mov	r3, r2
 800b4d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	68ba      	ldr	r2, [r7, #8]
 800b4da:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	88fa      	ldrh	r2, [r7, #6]
 800b4e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	2222      	movs	r2, #34	; 0x22
 800b4f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d02d      	beq.n	800b55a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b504:	4a40      	ldr	r2, [pc, #256]	; (800b608 <UART_Start_Receive_DMA+0x140>)
 800b506:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b50e:	4a3f      	ldr	r2, [pc, #252]	; (800b60c <UART_Start_Receive_DMA+0x144>)
 800b510:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b518:	4a3d      	ldr	r2, [pc, #244]	; (800b610 <UART_Start_Receive_DMA+0x148>)
 800b51a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b522:	2200      	movs	r2, #0
 800b524:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	3324      	adds	r3, #36	; 0x24
 800b532:	4619      	mov	r1, r3
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b538:	461a      	mov	r2, r3
 800b53a:	88fb      	ldrh	r3, [r7, #6]
 800b53c:	f7f7 f84a 	bl	80025d4 <HAL_DMA_Start_IT>
 800b540:	4603      	mov	r3, r0
 800b542:	2b00      	cmp	r3, #0
 800b544:	d009      	beq.n	800b55a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	2210      	movs	r2, #16
 800b54a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	2220      	movs	r2, #32
 800b552:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800b556:	2301      	movs	r3, #1
 800b558:	e051      	b.n	800b5fe <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	691b      	ldr	r3, [r3, #16]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d018      	beq.n	800b594 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b56a:	e853 3f00 	ldrex	r3, [r3]
 800b56e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b576:	657b      	str	r3, [r7, #84]	; 0x54
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	461a      	mov	r2, r3
 800b57e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b580:	64bb      	str	r3, [r7, #72]	; 0x48
 800b582:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b584:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b586:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b588:	e841 2300 	strex	r3, r2, [r1]
 800b58c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b58e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b590:	2b00      	cmp	r3, #0
 800b592:	d1e6      	bne.n	800b562 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	3308      	adds	r3, #8
 800b59a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b59c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b59e:	e853 3f00 	ldrex	r3, [r3]
 800b5a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5a6:	f043 0301 	orr.w	r3, r3, #1
 800b5aa:	653b      	str	r3, [r7, #80]	; 0x50
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	3308      	adds	r3, #8
 800b5b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b5b4:	637a      	str	r2, [r7, #52]	; 0x34
 800b5b6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b5ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b5bc:	e841 2300 	strex	r3, r2, [r1]
 800b5c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b5c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d1e5      	bne.n	800b594 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	3308      	adds	r3, #8
 800b5ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5d0:	697b      	ldr	r3, [r7, #20]
 800b5d2:	e853 3f00 	ldrex	r3, [r3]
 800b5d6:	613b      	str	r3, [r7, #16]
   return(result);
 800b5d8:	693b      	ldr	r3, [r7, #16]
 800b5da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5de:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	3308      	adds	r3, #8
 800b5e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b5e8:	623a      	str	r2, [r7, #32]
 800b5ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ec:	69f9      	ldr	r1, [r7, #28]
 800b5ee:	6a3a      	ldr	r2, [r7, #32]
 800b5f0:	e841 2300 	strex	r3, r2, [r1]
 800b5f4:	61bb      	str	r3, [r7, #24]
   return(result);
 800b5f6:	69bb      	ldr	r3, [r7, #24]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d1e5      	bne.n	800b5c8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b5fc:	2300      	movs	r3, #0
}
 800b5fe:	4618      	mov	r0, r3
 800b600:	3758      	adds	r7, #88	; 0x58
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}
 800b606:	bf00      	nop
 800b608:	0800b817 	.word	0x0800b817
 800b60c:	0800b93f 	.word	0x0800b93f
 800b610:	0800b97d 	.word	0x0800b97d

0800b614 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b614:	b480      	push	{r7}
 800b616:	b08f      	sub	sp, #60	; 0x3c
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b622:	6a3b      	ldr	r3, [r7, #32]
 800b624:	e853 3f00 	ldrex	r3, [r3]
 800b628:	61fb      	str	r3, [r7, #28]
   return(result);
 800b62a:	69fb      	ldr	r3, [r7, #28]
 800b62c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b630:	637b      	str	r3, [r7, #52]	; 0x34
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	461a      	mov	r2, r3
 800b638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b63a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b63c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b63e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b640:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b642:	e841 2300 	strex	r3, r2, [r1]
 800b646:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d1e6      	bne.n	800b61c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	3308      	adds	r3, #8
 800b654:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	e853 3f00 	ldrex	r3, [r3]
 800b65c:	60bb      	str	r3, [r7, #8]
   return(result);
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b664:	633b      	str	r3, [r7, #48]	; 0x30
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	3308      	adds	r3, #8
 800b66c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b66e:	61ba      	str	r2, [r7, #24]
 800b670:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b672:	6979      	ldr	r1, [r7, #20]
 800b674:	69ba      	ldr	r2, [r7, #24]
 800b676:	e841 2300 	strex	r3, r2, [r1]
 800b67a:	613b      	str	r3, [r7, #16]
   return(result);
 800b67c:	693b      	ldr	r3, [r7, #16]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d1e5      	bne.n	800b64e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2220      	movs	r2, #32
 800b686:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800b68a:	bf00      	nop
 800b68c:	373c      	adds	r7, #60	; 0x3c
 800b68e:	46bd      	mov	sp, r7
 800b690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b694:	4770      	bx	lr
	...

0800b698 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b698:	b480      	push	{r7}
 800b69a:	b095      	sub	sp, #84	; 0x54
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6a8:	e853 3f00 	ldrex	r3, [r3]
 800b6ac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b6b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	461a      	mov	r2, r3
 800b6bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6be:	643b      	str	r3, [r7, #64]	; 0x40
 800b6c0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b6c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b6c6:	e841 2300 	strex	r3, r2, [r1]
 800b6ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b6cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d1e6      	bne.n	800b6a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	3308      	adds	r3, #8
 800b6d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6da:	6a3b      	ldr	r3, [r7, #32]
 800b6dc:	e853 3f00 	ldrex	r3, [r3]
 800b6e0:	61fb      	str	r3, [r7, #28]
   return(result);
 800b6e2:	69fa      	ldr	r2, [r7, #28]
 800b6e4:	4b1e      	ldr	r3, [pc, #120]	; (800b760 <UART_EndRxTransfer+0xc8>)
 800b6e6:	4013      	ands	r3, r2
 800b6e8:	64bb      	str	r3, [r7, #72]	; 0x48
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	3308      	adds	r3, #8
 800b6f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b6f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b6f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b6f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6fa:	e841 2300 	strex	r3, r2, [r1]
 800b6fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b702:	2b00      	cmp	r3, #0
 800b704:	d1e5      	bne.n	800b6d2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b70a:	2b01      	cmp	r3, #1
 800b70c:	d118      	bne.n	800b740 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	e853 3f00 	ldrex	r3, [r3]
 800b71a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	f023 0310 	bic.w	r3, r3, #16
 800b722:	647b      	str	r3, [r7, #68]	; 0x44
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	461a      	mov	r2, r3
 800b72a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b72c:	61bb      	str	r3, [r7, #24]
 800b72e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b730:	6979      	ldr	r1, [r7, #20]
 800b732:	69ba      	ldr	r2, [r7, #24]
 800b734:	e841 2300 	strex	r3, r2, [r1]
 800b738:	613b      	str	r3, [r7, #16]
   return(result);
 800b73a:	693b      	ldr	r3, [r7, #16]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d1e6      	bne.n	800b70e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2220      	movs	r2, #32
 800b744:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2200      	movs	r2, #0
 800b74c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2200      	movs	r2, #0
 800b752:	675a      	str	r2, [r3, #116]	; 0x74
}
 800b754:	bf00      	nop
 800b756:	3754      	adds	r7, #84	; 0x54
 800b758:	46bd      	mov	sp, r7
 800b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75e:	4770      	bx	lr
 800b760:	effffffe 	.word	0xeffffffe

0800b764 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b090      	sub	sp, #64	; 0x40
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b770:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	69db      	ldr	r3, [r3, #28]
 800b776:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b77a:	d037      	beq.n	800b7ec <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800b77c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b77e:	2200      	movs	r2, #0
 800b780:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	3308      	adds	r3, #8
 800b78a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b78e:	e853 3f00 	ldrex	r3, [r3]
 800b792:	623b      	str	r3, [r7, #32]
   return(result);
 800b794:	6a3b      	ldr	r3, [r7, #32]
 800b796:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b79a:	63bb      	str	r3, [r7, #56]	; 0x38
 800b79c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	3308      	adds	r3, #8
 800b7a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b7a4:	633a      	str	r2, [r7, #48]	; 0x30
 800b7a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b7aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7ac:	e841 2300 	strex	r3, r2, [r1]
 800b7b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b7b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d1e5      	bne.n	800b784 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b7b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7be:	693b      	ldr	r3, [r7, #16]
 800b7c0:	e853 3f00 	ldrex	r3, [r3]
 800b7c4:	60fb      	str	r3, [r7, #12]
   return(result);
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7cc:	637b      	str	r3, [r7, #52]	; 0x34
 800b7ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	461a      	mov	r2, r3
 800b7d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7d6:	61fb      	str	r3, [r7, #28]
 800b7d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7da:	69b9      	ldr	r1, [r7, #24]
 800b7dc:	69fa      	ldr	r2, [r7, #28]
 800b7de:	e841 2300 	strex	r3, r2, [r1]
 800b7e2:	617b      	str	r3, [r7, #20]
   return(result);
 800b7e4:	697b      	ldr	r3, [r7, #20]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d1e6      	bne.n	800b7b8 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b7ea:	e002      	b.n	800b7f2 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800b7ec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b7ee:	f7fe fe0f 	bl	800a410 <HAL_UART_TxCpltCallback>
}
 800b7f2:	bf00      	nop
 800b7f4:	3740      	adds	r7, #64	; 0x40
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}

0800b7fa <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b7fa:	b580      	push	{r7, lr}
 800b7fc:	b084      	sub	sp, #16
 800b7fe:	af00      	add	r7, sp, #0
 800b800:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b806:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b808:	68f8      	ldr	r0, [r7, #12]
 800b80a:	f7fe fe0b 	bl	800a424 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b80e:	bf00      	nop
 800b810:	3710      	adds	r7, #16
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}

0800b816 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b816:	b580      	push	{r7, lr}
 800b818:	b09c      	sub	sp, #112	; 0x70
 800b81a:	af00      	add	r7, sp, #0
 800b81c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b822:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	69db      	ldr	r3, [r3, #28]
 800b828:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b82c:	d071      	beq.n	800b912 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800b82e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b830:	2200      	movs	r2, #0
 800b832:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b83c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b83e:	e853 3f00 	ldrex	r3, [r3]
 800b842:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b844:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b846:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b84a:	66bb      	str	r3, [r7, #104]	; 0x68
 800b84c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	461a      	mov	r2, r3
 800b852:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b854:	65bb      	str	r3, [r7, #88]	; 0x58
 800b856:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b858:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b85a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b85c:	e841 2300 	strex	r3, r2, [r1]
 800b860:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b862:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b864:	2b00      	cmp	r3, #0
 800b866:	d1e6      	bne.n	800b836 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b868:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	3308      	adds	r3, #8
 800b86e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b872:	e853 3f00 	ldrex	r3, [r3]
 800b876:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b87a:	f023 0301 	bic.w	r3, r3, #1
 800b87e:	667b      	str	r3, [r7, #100]	; 0x64
 800b880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	3308      	adds	r3, #8
 800b886:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b888:	647a      	str	r2, [r7, #68]	; 0x44
 800b88a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b88c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b88e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b890:	e841 2300 	strex	r3, r2, [r1]
 800b894:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d1e5      	bne.n	800b868 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b89c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	3308      	adds	r3, #8
 800b8a2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a6:	e853 3f00 	ldrex	r3, [r3]
 800b8aa:	623b      	str	r3, [r7, #32]
   return(result);
 800b8ac:	6a3b      	ldr	r3, [r7, #32]
 800b8ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8b2:	663b      	str	r3, [r7, #96]	; 0x60
 800b8b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	3308      	adds	r3, #8
 800b8ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b8bc:	633a      	str	r2, [r7, #48]	; 0x30
 800b8be:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b8c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8c4:	e841 2300 	strex	r3, r2, [r1]
 800b8c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d1e5      	bne.n	800b89c <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b8d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8d2:	2220      	movs	r2, #32
 800b8d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8dc:	2b01      	cmp	r3, #1
 800b8de:	d118      	bne.n	800b912 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	e853 3f00 	ldrex	r3, [r3]
 800b8ec:	60fb      	str	r3, [r7, #12]
   return(result);
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	f023 0310 	bic.w	r3, r3, #16
 800b8f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b8f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	461a      	mov	r2, r3
 800b8fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b8fe:	61fb      	str	r3, [r7, #28]
 800b900:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b902:	69b9      	ldr	r1, [r7, #24]
 800b904:	69fa      	ldr	r2, [r7, #28]
 800b906:	e841 2300 	strex	r3, r2, [r1]
 800b90a:	617b      	str	r3, [r7, #20]
   return(result);
 800b90c:	697b      	ldr	r3, [r7, #20]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d1e6      	bne.n	800b8e0 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b914:	2200      	movs	r2, #0
 800b916:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b918:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b91a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b91c:	2b01      	cmp	r3, #1
 800b91e:	d107      	bne.n	800b930 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b920:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b922:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b926:	4619      	mov	r1, r3
 800b928:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b92a:	f7f5 f81f 	bl	800096c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b92e:	e002      	b.n	800b936 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800b930:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b932:	f7f4 fffd 	bl	8000930 <HAL_UART_RxCpltCallback>
}
 800b936:	bf00      	nop
 800b938:	3770      	adds	r7, #112	; 0x70
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bd80      	pop	{r7, pc}

0800b93e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b93e:	b580      	push	{r7, lr}
 800b940:	b084      	sub	sp, #16
 800b942:	af00      	add	r7, sp, #0
 800b944:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b94a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	2201      	movs	r2, #1
 800b950:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b956:	2b01      	cmp	r3, #1
 800b958:	d109      	bne.n	800b96e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b960:	085b      	lsrs	r3, r3, #1
 800b962:	b29b      	uxth	r3, r3
 800b964:	4619      	mov	r1, r3
 800b966:	68f8      	ldr	r0, [r7, #12]
 800b968:	f7f5 f800 	bl	800096c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b96c:	e002      	b.n	800b974 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800b96e:	68f8      	ldr	r0, [r7, #12]
 800b970:	f7f4 ffc0 	bl	80008f4 <HAL_UART_RxHalfCpltCallback>
}
 800b974:	bf00      	nop
 800b976:	3710      	adds	r7, #16
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}

0800b97c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b086      	sub	sp, #24
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b988:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b990:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b998:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	689b      	ldr	r3, [r3, #8]
 800b9a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9a4:	2b80      	cmp	r3, #128	; 0x80
 800b9a6:	d109      	bne.n	800b9bc <UART_DMAError+0x40>
 800b9a8:	693b      	ldr	r3, [r7, #16]
 800b9aa:	2b21      	cmp	r3, #33	; 0x21
 800b9ac:	d106      	bne.n	800b9bc <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b9ae:	697b      	ldr	r3, [r7, #20]
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800b9b6:	6978      	ldr	r0, [r7, #20]
 800b9b8:	f7ff fe2c 	bl	800b614 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b9bc:	697b      	ldr	r3, [r7, #20]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	689b      	ldr	r3, [r3, #8]
 800b9c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9c6:	2b40      	cmp	r3, #64	; 0x40
 800b9c8:	d109      	bne.n	800b9de <UART_DMAError+0x62>
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	2b22      	cmp	r3, #34	; 0x22
 800b9ce:	d106      	bne.n	800b9de <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b9d0:	697b      	ldr	r3, [r7, #20]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800b9d8:	6978      	ldr	r0, [r7, #20]
 800b9da:	f7ff fe5d 	bl	800b698 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b9de:	697b      	ldr	r3, [r7, #20]
 800b9e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9e4:	f043 0210 	orr.w	r2, r3, #16
 800b9e8:	697b      	ldr	r3, [r7, #20]
 800b9ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b9ee:	6978      	ldr	r0, [r7, #20]
 800b9f0:	f7fe fd22 	bl	800a438 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b9f4:	bf00      	nop
 800b9f6:	3718      	adds	r7, #24
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}

0800b9fc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b084      	sub	sp, #16
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba08:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	2200      	movs	r2, #0
 800ba16:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ba1a:	68f8      	ldr	r0, [r7, #12]
 800ba1c:	f7fe fd0c 	bl	800a438 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba20:	bf00      	nop
 800ba22:	3710      	adds	r7, #16
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd80      	pop	{r7, pc}

0800ba28 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b088      	sub	sp, #32
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	e853 3f00 	ldrex	r3, [r3]
 800ba3c:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba3e:	68bb      	ldr	r3, [r7, #8]
 800ba40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba44:	61fb      	str	r3, [r7, #28]
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	461a      	mov	r2, r3
 800ba4c:	69fb      	ldr	r3, [r7, #28]
 800ba4e:	61bb      	str	r3, [r7, #24]
 800ba50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba52:	6979      	ldr	r1, [r7, #20]
 800ba54:	69ba      	ldr	r2, [r7, #24]
 800ba56:	e841 2300 	strex	r3, r2, [r1]
 800ba5a:	613b      	str	r3, [r7, #16]
   return(result);
 800ba5c:	693b      	ldr	r3, [r7, #16]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d1e6      	bne.n	800ba30 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2220      	movs	r2, #32
 800ba66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ba70:	6878      	ldr	r0, [r7, #4]
 800ba72:	f7fe fccd 	bl	800a410 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba76:	bf00      	nop
 800ba78:	3720      	adds	r7, #32
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bd80      	pop	{r7, pc}
	...

0800ba80 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b09c      	sub	sp, #112	; 0x70
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ba8e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba98:	2b22      	cmp	r3, #34	; 0x22
 800ba9a:	f040 80be 	bne.w	800bc1a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baa4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800baa8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800baac:	b2d9      	uxtb	r1, r3
 800baae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800bab2:	b2da      	uxtb	r2, r3
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bab8:	400a      	ands	r2, r1
 800baba:	b2d2      	uxtb	r2, r2
 800babc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bac2:	1c5a      	adds	r2, r3, #1
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bace:	b29b      	uxth	r3, r3
 800bad0:	3b01      	subs	r3, #1
 800bad2:	b29a      	uxth	r2, r3
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bae0:	b29b      	uxth	r3, r3
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	f040 80a1 	bne.w	800bc2a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800baf0:	e853 3f00 	ldrex	r3, [r3]
 800baf4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800baf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800baf8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bafc:	66bb      	str	r3, [r7, #104]	; 0x68
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	461a      	mov	r2, r3
 800bb04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bb06:	65bb      	str	r3, [r7, #88]	; 0x58
 800bb08:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb0a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bb0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bb0e:	e841 2300 	strex	r3, r2, [r1]
 800bb12:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bb14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d1e6      	bne.n	800bae8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	3308      	adds	r3, #8
 800bb20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb24:	e853 3f00 	ldrex	r3, [r3]
 800bb28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bb2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb2c:	f023 0301 	bic.w	r3, r3, #1
 800bb30:	667b      	str	r3, [r7, #100]	; 0x64
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	3308      	adds	r3, #8
 800bb38:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bb3a:	647a      	str	r2, [r7, #68]	; 0x44
 800bb3c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb3e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bb40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bb42:	e841 2300 	strex	r3, r2, [r1]
 800bb46:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bb48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d1e5      	bne.n	800bb1a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2220      	movs	r2, #32
 800bb52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2200      	movs	r2, #0
 800bb5a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2200      	movs	r2, #0
 800bb60:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	4a33      	ldr	r2, [pc, #204]	; (800bc34 <UART_RxISR_8BIT+0x1b4>)
 800bb68:	4293      	cmp	r3, r2
 800bb6a:	d01f      	beq.n	800bbac <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	685b      	ldr	r3, [r3, #4]
 800bb72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d018      	beq.n	800bbac <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb82:	e853 3f00 	ldrex	r3, [r3]
 800bb86:	623b      	str	r3, [r7, #32]
   return(result);
 800bb88:	6a3b      	ldr	r3, [r7, #32]
 800bb8a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bb8e:	663b      	str	r3, [r7, #96]	; 0x60
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	461a      	mov	r2, r3
 800bb96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb98:	633b      	str	r3, [r7, #48]	; 0x30
 800bb9a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bb9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bba0:	e841 2300 	strex	r3, r2, [r1]
 800bba4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d1e6      	bne.n	800bb7a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbb0:	2b01      	cmp	r3, #1
 800bbb2:	d12e      	bne.n	800bc12 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	e853 3f00 	ldrex	r3, [r3]
 800bbc6:	60fb      	str	r3, [r7, #12]
   return(result);
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	f023 0310 	bic.w	r3, r3, #16
 800bbce:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	461a      	mov	r2, r3
 800bbd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bbd8:	61fb      	str	r3, [r7, #28]
 800bbda:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbdc:	69b9      	ldr	r1, [r7, #24]
 800bbde:	69fa      	ldr	r2, [r7, #28]
 800bbe0:	e841 2300 	strex	r3, r2, [r1]
 800bbe4:	617b      	str	r3, [r7, #20]
   return(result);
 800bbe6:	697b      	ldr	r3, [r7, #20]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d1e6      	bne.n	800bbba <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	69db      	ldr	r3, [r3, #28]
 800bbf2:	f003 0310 	and.w	r3, r3, #16
 800bbf6:	2b10      	cmp	r3, #16
 800bbf8:	d103      	bne.n	800bc02 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	2210      	movs	r2, #16
 800bc00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bc08:	4619      	mov	r1, r3
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f7f4 feae 	bl	800096c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bc10:	e00b      	b.n	800bc2a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	f7f4 fe8c 	bl	8000930 <HAL_UART_RxCpltCallback>
}
 800bc18:	e007      	b.n	800bc2a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	699a      	ldr	r2, [r3, #24]
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	f042 0208 	orr.w	r2, r2, #8
 800bc28:	619a      	str	r2, [r3, #24]
}
 800bc2a:	bf00      	nop
 800bc2c:	3770      	adds	r7, #112	; 0x70
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bd80      	pop	{r7, pc}
 800bc32:	bf00      	nop
 800bc34:	58000c00 	.word	0x58000c00

0800bc38 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b09c      	sub	sp, #112	; 0x70
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bc46:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc50:	2b22      	cmp	r3, #34	; 0x22
 800bc52:	f040 80be 	bne.w	800bdd2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc5c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc64:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800bc66:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800bc6a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800bc6e:	4013      	ands	r3, r2
 800bc70:	b29a      	uxth	r2, r3
 800bc72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bc74:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc7a:	1c9a      	adds	r2, r3, #2
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bc86:	b29b      	uxth	r3, r3
 800bc88:	3b01      	subs	r3, #1
 800bc8a:	b29a      	uxth	r2, r3
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bc98:	b29b      	uxth	r3, r3
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	f040 80a1 	bne.w	800bde2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bca6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bca8:	e853 3f00 	ldrex	r3, [r3]
 800bcac:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800bcae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bcb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bcb4:	667b      	str	r3, [r7, #100]	; 0x64
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	461a      	mov	r2, r3
 800bcbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bcbe:	657b      	str	r3, [r7, #84]	; 0x54
 800bcc0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcc2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bcc4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bcc6:	e841 2300 	strex	r3, r2, [r1]
 800bcca:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bccc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d1e6      	bne.n	800bca0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	3308      	adds	r3, #8
 800bcd8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcdc:	e853 3f00 	ldrex	r3, [r3]
 800bce0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bce4:	f023 0301 	bic.w	r3, r3, #1
 800bce8:	663b      	str	r3, [r7, #96]	; 0x60
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	3308      	adds	r3, #8
 800bcf0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bcf2:	643a      	str	r2, [r7, #64]	; 0x40
 800bcf4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcf6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bcf8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bcfa:	e841 2300 	strex	r3, r2, [r1]
 800bcfe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bd00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d1e5      	bne.n	800bcd2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2220      	movs	r2, #32
 800bd0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2200      	movs	r2, #0
 800bd12:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2200      	movs	r2, #0
 800bd18:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	4a33      	ldr	r2, [pc, #204]	; (800bdec <UART_RxISR_16BIT+0x1b4>)
 800bd20:	4293      	cmp	r3, r2
 800bd22:	d01f      	beq.n	800bd64 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	685b      	ldr	r3, [r3, #4]
 800bd2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d018      	beq.n	800bd64 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd38:	6a3b      	ldr	r3, [r7, #32]
 800bd3a:	e853 3f00 	ldrex	r3, [r3]
 800bd3e:	61fb      	str	r3, [r7, #28]
   return(result);
 800bd40:	69fb      	ldr	r3, [r7, #28]
 800bd42:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bd46:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	461a      	mov	r2, r3
 800bd4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd50:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bd52:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bd56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd58:	e841 2300 	strex	r3, r2, [r1]
 800bd5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bd5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d1e6      	bne.n	800bd32 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd68:	2b01      	cmp	r3, #1
 800bd6a:	d12e      	bne.n	800bdca <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2200      	movs	r2, #0
 800bd70:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	e853 3f00 	ldrex	r3, [r3]
 800bd7e:	60bb      	str	r3, [r7, #8]
   return(result);
 800bd80:	68bb      	ldr	r3, [r7, #8]
 800bd82:	f023 0310 	bic.w	r3, r3, #16
 800bd86:	65bb      	str	r3, [r7, #88]	; 0x58
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	461a      	mov	r2, r3
 800bd8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bd90:	61bb      	str	r3, [r7, #24]
 800bd92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd94:	6979      	ldr	r1, [r7, #20]
 800bd96:	69ba      	ldr	r2, [r7, #24]
 800bd98:	e841 2300 	strex	r3, r2, [r1]
 800bd9c:	613b      	str	r3, [r7, #16]
   return(result);
 800bd9e:	693b      	ldr	r3, [r7, #16]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d1e6      	bne.n	800bd72 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	69db      	ldr	r3, [r3, #28]
 800bdaa:	f003 0310 	and.w	r3, r3, #16
 800bdae:	2b10      	cmp	r3, #16
 800bdb0:	d103      	bne.n	800bdba <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	2210      	movs	r2, #16
 800bdb8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bdc0:	4619      	mov	r1, r3
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	f7f4 fdd2 	bl	800096c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bdc8:	e00b      	b.n	800bde2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	f7f4 fdb0 	bl	8000930 <HAL_UART_RxCpltCallback>
}
 800bdd0:	e007      	b.n	800bde2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	699a      	ldr	r2, [r3, #24]
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	f042 0208 	orr.w	r2, r2, #8
 800bde0:	619a      	str	r2, [r3, #24]
}
 800bde2:	bf00      	nop
 800bde4:	3770      	adds	r7, #112	; 0x70
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}
 800bdea:	bf00      	nop
 800bdec:	58000c00 	.word	0x58000c00

0800bdf0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b0ac      	sub	sp, #176	; 0xb0
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bdfe:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	69db      	ldr	r3, [r3, #28]
 800be08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	689b      	ldr	r3, [r3, #8]
 800be1c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be26:	2b22      	cmp	r3, #34	; 0x22
 800be28:	f040 8180 	bne.w	800c12c <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800be32:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800be36:	e123      	b.n	800c080 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be3e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800be42:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800be46:	b2d9      	uxtb	r1, r3
 800be48:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800be4c:	b2da      	uxtb	r2, r3
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be52:	400a      	ands	r2, r1
 800be54:	b2d2      	uxtb	r2, r2
 800be56:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be5c:	1c5a      	adds	r2, r3, #1
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800be68:	b29b      	uxth	r3, r3
 800be6a:	3b01      	subs	r3, #1
 800be6c:	b29a      	uxth	r2, r3
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	69db      	ldr	r3, [r3, #28]
 800be7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800be7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800be82:	f003 0307 	and.w	r3, r3, #7
 800be86:	2b00      	cmp	r3, #0
 800be88:	d053      	beq.n	800bf32 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800be8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800be8e:	f003 0301 	and.w	r3, r3, #1
 800be92:	2b00      	cmp	r3, #0
 800be94:	d011      	beq.n	800beba <UART_RxISR_8BIT_FIFOEN+0xca>
 800be96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800be9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d00b      	beq.n	800beba <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	2201      	movs	r2, #1
 800bea8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800beb0:	f043 0201 	orr.w	r2, r3, #1
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800beba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bebe:	f003 0302 	and.w	r3, r3, #2
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d011      	beq.n	800beea <UART_RxISR_8BIT_FIFOEN+0xfa>
 800bec6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800beca:	f003 0301 	and.w	r3, r3, #1
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d00b      	beq.n	800beea <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	2202      	movs	r2, #2
 800bed8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bee0:	f043 0204 	orr.w	r2, r3, #4
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800beea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800beee:	f003 0304 	and.w	r3, r3, #4
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d011      	beq.n	800bf1a <UART_RxISR_8BIT_FIFOEN+0x12a>
 800bef6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800befa:	f003 0301 	and.w	r3, r3, #1
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d00b      	beq.n	800bf1a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	2204      	movs	r2, #4
 800bf08:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf10:	f043 0202 	orr.w	r2, r3, #2
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d006      	beq.n	800bf32 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bf24:	6878      	ldr	r0, [r7, #4]
 800bf26:	f7fe fa87 	bl	800a438 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bf38:	b29b      	uxth	r3, r3
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	f040 80a0 	bne.w	800c080 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bf48:	e853 3f00 	ldrex	r3, [r3]
 800bf4c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800bf4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bf54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	461a      	mov	r2, r3
 800bf5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bf62:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bf64:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf66:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800bf68:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800bf6a:	e841 2300 	strex	r3, r2, [r1]
 800bf6e:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800bf70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d1e4      	bne.n	800bf40 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	3308      	adds	r3, #8
 800bf7c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf80:	e853 3f00 	ldrex	r3, [r3]
 800bf84:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800bf86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bf88:	4b6e      	ldr	r3, [pc, #440]	; (800c144 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800bf8a:	4013      	ands	r3, r2
 800bf8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	3308      	adds	r3, #8
 800bf96:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bf9a:	66ba      	str	r2, [r7, #104]	; 0x68
 800bf9c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf9e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800bfa0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bfa2:	e841 2300 	strex	r3, r2, [r1]
 800bfa6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800bfa8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d1e3      	bne.n	800bf76 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	2220      	movs	r2, #32
 800bfb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2200      	movs	r2, #0
 800bfba:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	4a60      	ldr	r2, [pc, #384]	; (800c148 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800bfc8:	4293      	cmp	r3, r2
 800bfca:	d021      	beq.n	800c010 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	685b      	ldr	r3, [r3, #4]
 800bfd2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d01a      	beq.n	800c010 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfe0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bfe2:	e853 3f00 	ldrex	r3, [r3]
 800bfe6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800bfe8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bfea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bfee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	461a      	mov	r2, r3
 800bff8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bffc:	657b      	str	r3, [r7, #84]	; 0x54
 800bffe:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c000:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c002:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c004:	e841 2300 	strex	r3, r2, [r1]
 800c008:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c00a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d1e4      	bne.n	800bfda <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c014:	2b01      	cmp	r3, #1
 800c016:	d130      	bne.n	800c07a <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2200      	movs	r2, #0
 800c01c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c026:	e853 3f00 	ldrex	r3, [r3]
 800c02a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c02e:	f023 0310 	bic.w	r3, r3, #16
 800c032:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	461a      	mov	r2, r3
 800c03c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c040:	643b      	str	r3, [r7, #64]	; 0x40
 800c042:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c044:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c046:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c048:	e841 2300 	strex	r3, r2, [r1]
 800c04c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c04e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c050:	2b00      	cmp	r3, #0
 800c052:	d1e4      	bne.n	800c01e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	69db      	ldr	r3, [r3, #28]
 800c05a:	f003 0310 	and.w	r3, r3, #16
 800c05e:	2b10      	cmp	r3, #16
 800c060:	d103      	bne.n	800c06a <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	2210      	movs	r2, #16
 800c068:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c070:	4619      	mov	r1, r3
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f7f4 fc7a 	bl	800096c <HAL_UARTEx_RxEventCallback>
 800c078:	e002      	b.n	800c080 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c07a:	6878      	ldr	r0, [r7, #4]
 800c07c:	f7f4 fc58 	bl	8000930 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c080:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800c084:	2b00      	cmp	r3, #0
 800c086:	d006      	beq.n	800c096 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800c088:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c08c:	f003 0320 	and.w	r3, r3, #32
 800c090:	2b00      	cmp	r3, #0
 800c092:	f47f aed1 	bne.w	800be38 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c09c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c0a0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d049      	beq.n	800c13c <UART_RxISR_8BIT_FIFOEN+0x34c>
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c0ae:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800c0b2:	429a      	cmp	r2, r3
 800c0b4:	d242      	bcs.n	800c13c <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	3308      	adds	r3, #8
 800c0bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0be:	6a3b      	ldr	r3, [r7, #32]
 800c0c0:	e853 3f00 	ldrex	r3, [r3]
 800c0c4:	61fb      	str	r3, [r7, #28]
   return(result);
 800c0c6:	69fb      	ldr	r3, [r7, #28]
 800c0c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c0cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	3308      	adds	r3, #8
 800c0d6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c0da:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c0dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c0e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c0e2:	e841 2300 	strex	r3, r2, [r1]
 800c0e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d1e3      	bne.n	800c0b6 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	4a16      	ldr	r2, [pc, #88]	; (800c14c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800c0f2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	e853 3f00 	ldrex	r3, [r3]
 800c100:	60bb      	str	r3, [r7, #8]
   return(result);
 800c102:	68bb      	ldr	r3, [r7, #8]
 800c104:	f043 0320 	orr.w	r3, r3, #32
 800c108:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	461a      	mov	r2, r3
 800c112:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c116:	61bb      	str	r3, [r7, #24]
 800c118:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c11a:	6979      	ldr	r1, [r7, #20]
 800c11c:	69ba      	ldr	r2, [r7, #24]
 800c11e:	e841 2300 	strex	r3, r2, [r1]
 800c122:	613b      	str	r3, [r7, #16]
   return(result);
 800c124:	693b      	ldr	r3, [r7, #16]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d1e4      	bne.n	800c0f4 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c12a:	e007      	b.n	800c13c <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	699a      	ldr	r2, [r3, #24]
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	f042 0208 	orr.w	r2, r2, #8
 800c13a:	619a      	str	r2, [r3, #24]
}
 800c13c:	bf00      	nop
 800c13e:	37b0      	adds	r7, #176	; 0xb0
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}
 800c144:	effffffe 	.word	0xeffffffe
 800c148:	58000c00 	.word	0x58000c00
 800c14c:	0800ba81 	.word	0x0800ba81

0800c150 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b0ae      	sub	sp, #184	; 0xb8
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c15e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	69db      	ldr	r3, [r3, #28]
 800c168:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	689b      	ldr	r3, [r3, #8]
 800c17c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c186:	2b22      	cmp	r3, #34	; 0x22
 800c188:	f040 8184 	bne.w	800c494 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c192:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c196:	e127      	b.n	800c3e8 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c19e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800c1aa:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800c1ae:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800c1b2:	4013      	ands	r3, r2
 800c1b4:	b29a      	uxth	r2, r3
 800c1b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c1ba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1c0:	1c9a      	adds	r2, r3, #2
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c1cc:	b29b      	uxth	r3, r3
 800c1ce:	3b01      	subs	r3, #1
 800c1d0:	b29a      	uxth	r2, r3
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	69db      	ldr	r3, [r3, #28]
 800c1de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c1e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c1e6:	f003 0307 	and.w	r3, r3, #7
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d053      	beq.n	800c296 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c1ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c1f2:	f003 0301 	and.w	r3, r3, #1
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d011      	beq.n	800c21e <UART_RxISR_16BIT_FIFOEN+0xce>
 800c1fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c1fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c202:	2b00      	cmp	r3, #0
 800c204:	d00b      	beq.n	800c21e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	2201      	movs	r2, #1
 800c20c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c214:	f043 0201 	orr.w	r2, r3, #1
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c21e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c222:	f003 0302 	and.w	r3, r3, #2
 800c226:	2b00      	cmp	r3, #0
 800c228:	d011      	beq.n	800c24e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800c22a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c22e:	f003 0301 	and.w	r3, r3, #1
 800c232:	2b00      	cmp	r3, #0
 800c234:	d00b      	beq.n	800c24e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	2202      	movs	r2, #2
 800c23c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c244:	f043 0204 	orr.w	r2, r3, #4
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c24e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c252:	f003 0304 	and.w	r3, r3, #4
 800c256:	2b00      	cmp	r3, #0
 800c258:	d011      	beq.n	800c27e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800c25a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c25e:	f003 0301 	and.w	r3, r3, #1
 800c262:	2b00      	cmp	r3, #0
 800c264:	d00b      	beq.n	800c27e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	2204      	movs	r2, #4
 800c26c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c274:	f043 0202 	orr.w	r2, r3, #2
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c284:	2b00      	cmp	r3, #0
 800c286:	d006      	beq.n	800c296 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c288:	6878      	ldr	r0, [r7, #4]
 800c28a:	f7fe f8d5 	bl	800a438 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2200      	movs	r2, #0
 800c292:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c29c:	b29b      	uxth	r3, r3
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	f040 80a2 	bne.w	800c3e8 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c2ac:	e853 3f00 	ldrex	r3, [r3]
 800c2b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c2b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c2b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c2b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	461a      	mov	r2, r3
 800c2c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c2c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c2ca:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c2ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c2d2:	e841 2300 	strex	r3, r2, [r1]
 800c2d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c2d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d1e2      	bne.n	800c2a4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	3308      	adds	r3, #8
 800c2e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c2e8:	e853 3f00 	ldrex	r3, [r3]
 800c2ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c2ee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c2f0:	4b6e      	ldr	r3, [pc, #440]	; (800c4ac <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800c2f2:	4013      	ands	r3, r2
 800c2f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	3308      	adds	r3, #8
 800c2fe:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800c302:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c304:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c306:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c308:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c30a:	e841 2300 	strex	r3, r2, [r1]
 800c30e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c310:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c312:	2b00      	cmp	r3, #0
 800c314:	d1e3      	bne.n	800c2de <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2220      	movs	r2, #32
 800c31a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	2200      	movs	r2, #0
 800c322:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2200      	movs	r2, #0
 800c328:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	4a60      	ldr	r2, [pc, #384]	; (800c4b0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800c330:	4293      	cmp	r3, r2
 800c332:	d021      	beq.n	800c378 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	685b      	ldr	r3, [r3, #4]
 800c33a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d01a      	beq.n	800c378 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c34a:	e853 3f00 	ldrex	r3, [r3]
 800c34e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c350:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c352:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c356:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	461a      	mov	r2, r3
 800c360:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c364:	65bb      	str	r3, [r7, #88]	; 0x58
 800c366:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c368:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c36a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c36c:	e841 2300 	strex	r3, r2, [r1]
 800c370:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c372:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c374:	2b00      	cmp	r3, #0
 800c376:	d1e4      	bne.n	800c342 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c37c:	2b01      	cmp	r3, #1
 800c37e:	d130      	bne.n	800c3e2 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2200      	movs	r2, #0
 800c384:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c38c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c38e:	e853 3f00 	ldrex	r3, [r3]
 800c392:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c396:	f023 0310 	bic.w	r3, r3, #16
 800c39a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	461a      	mov	r2, r3
 800c3a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c3a8:	647b      	str	r3, [r7, #68]	; 0x44
 800c3aa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c3ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c3b0:	e841 2300 	strex	r3, r2, [r1]
 800c3b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c3b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d1e4      	bne.n	800c386 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	69db      	ldr	r3, [r3, #28]
 800c3c2:	f003 0310 	and.w	r3, r3, #16
 800c3c6:	2b10      	cmp	r3, #16
 800c3c8:	d103      	bne.n	800c3d2 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	2210      	movs	r2, #16
 800c3d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c3d8:	4619      	mov	r1, r3
 800c3da:	6878      	ldr	r0, [r7, #4]
 800c3dc:	f7f4 fac6 	bl	800096c <HAL_UARTEx_RxEventCallback>
 800c3e0:	e002      	b.n	800c3e8 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c3e2:	6878      	ldr	r0, [r7, #4]
 800c3e4:	f7f4 faa4 	bl	8000930 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c3e8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d006      	beq.n	800c3fe <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800c3f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c3f4:	f003 0320 	and.w	r3, r3, #32
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	f47f aecd 	bne.w	800c198 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c404:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c408:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d049      	beq.n	800c4a4 <UART_RxISR_16BIT_FIFOEN+0x354>
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c416:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800c41a:	429a      	cmp	r2, r3
 800c41c:	d242      	bcs.n	800c4a4 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	3308      	adds	r3, #8
 800c424:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c428:	e853 3f00 	ldrex	r3, [r3]
 800c42c:	623b      	str	r3, [r7, #32]
   return(result);
 800c42e:	6a3b      	ldr	r3, [r7, #32]
 800c430:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c434:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	3308      	adds	r3, #8
 800c43e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c442:	633a      	str	r2, [r7, #48]	; 0x30
 800c444:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c446:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c44a:	e841 2300 	strex	r3, r2, [r1]
 800c44e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c452:	2b00      	cmp	r3, #0
 800c454:	d1e3      	bne.n	800c41e <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	4a16      	ldr	r2, [pc, #88]	; (800c4b4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800c45a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c462:	693b      	ldr	r3, [r7, #16]
 800c464:	e853 3f00 	ldrex	r3, [r3]
 800c468:	60fb      	str	r3, [r7, #12]
   return(result);
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	f043 0320 	orr.w	r3, r3, #32
 800c470:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	461a      	mov	r2, r3
 800c47a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c47e:	61fb      	str	r3, [r7, #28]
 800c480:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c482:	69b9      	ldr	r1, [r7, #24]
 800c484:	69fa      	ldr	r2, [r7, #28]
 800c486:	e841 2300 	strex	r3, r2, [r1]
 800c48a:	617b      	str	r3, [r7, #20]
   return(result);
 800c48c:	697b      	ldr	r3, [r7, #20]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d1e4      	bne.n	800c45c <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c492:	e007      	b.n	800c4a4 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	699a      	ldr	r2, [r3, #24]
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	f042 0208 	orr.w	r2, r2, #8
 800c4a2:	619a      	str	r2, [r3, #24]
}
 800c4a4:	bf00      	nop
 800c4a6:	37b8      	adds	r7, #184	; 0xb8
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	bd80      	pop	{r7, pc}
 800c4ac:	effffffe 	.word	0xeffffffe
 800c4b0:	58000c00 	.word	0x58000c00
 800c4b4:	0800bc39 	.word	0x0800bc39

0800c4b8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c4b8:	b480      	push	{r7}
 800c4ba:	b083      	sub	sp, #12
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c4c0:	bf00      	nop
 800c4c2:	370c      	adds	r7, #12
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ca:	4770      	bx	lr

0800c4cc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c4cc:	b480      	push	{r7}
 800c4ce:	b083      	sub	sp, #12
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c4d4:	bf00      	nop
 800c4d6:	370c      	adds	r7, #12
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4de:	4770      	bx	lr

0800c4e0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b083      	sub	sp, #12
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c4e8:	bf00      	nop
 800c4ea:	370c      	adds	r7, #12
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f2:	4770      	bx	lr

0800c4f4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c4f4:	b480      	push	{r7}
 800c4f6:	b085      	sub	sp, #20
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c502:	2b01      	cmp	r3, #1
 800c504:	d101      	bne.n	800c50a <HAL_UARTEx_DisableFifoMode+0x16>
 800c506:	2302      	movs	r3, #2
 800c508:	e027      	b.n	800c55a <HAL_UARTEx_DisableFifoMode+0x66>
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2201      	movs	r2, #1
 800c50e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2224      	movs	r2, #36	; 0x24
 800c516:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	681a      	ldr	r2, [r3, #0]
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	f022 0201 	bic.w	r2, r2, #1
 800c530:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c538:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	2200      	movs	r2, #0
 800c53e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	68fa      	ldr	r2, [r7, #12]
 800c546:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	2220      	movs	r2, #32
 800c54c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2200      	movs	r2, #0
 800c554:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c558:	2300      	movs	r3, #0
}
 800c55a:	4618      	mov	r0, r3
 800c55c:	3714      	adds	r7, #20
 800c55e:	46bd      	mov	sp, r7
 800c560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c564:	4770      	bx	lr

0800c566 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c566:	b580      	push	{r7, lr}
 800c568:	b084      	sub	sp, #16
 800c56a:	af00      	add	r7, sp, #0
 800c56c:	6078      	str	r0, [r7, #4]
 800c56e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c576:	2b01      	cmp	r3, #1
 800c578:	d101      	bne.n	800c57e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c57a:	2302      	movs	r3, #2
 800c57c:	e02d      	b.n	800c5da <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	2201      	movs	r2, #1
 800c582:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	2224      	movs	r2, #36	; 0x24
 800c58a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	681a      	ldr	r2, [r3, #0]
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	f022 0201 	bic.w	r2, r2, #1
 800c5a4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	689b      	ldr	r3, [r3, #8]
 800c5ac:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	683a      	ldr	r2, [r7, #0]
 800c5b6:	430a      	orrs	r2, r1
 800c5b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f000 f850 	bl	800c660 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	68fa      	ldr	r2, [r7, #12]
 800c5c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2220      	movs	r2, #32
 800c5cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c5d8:	2300      	movs	r3, #0
}
 800c5da:	4618      	mov	r0, r3
 800c5dc:	3710      	adds	r7, #16
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd80      	pop	{r7, pc}

0800c5e2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c5e2:	b580      	push	{r7, lr}
 800c5e4:	b084      	sub	sp, #16
 800c5e6:	af00      	add	r7, sp, #0
 800c5e8:	6078      	str	r0, [r7, #4]
 800c5ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c5f2:	2b01      	cmp	r3, #1
 800c5f4:	d101      	bne.n	800c5fa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c5f6:	2302      	movs	r3, #2
 800c5f8:	e02d      	b.n	800c656 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	2201      	movs	r2, #1
 800c5fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	2224      	movs	r2, #36	; 0x24
 800c606:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	681a      	ldr	r2, [r3, #0]
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	f022 0201 	bic.w	r2, r2, #1
 800c620:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	689b      	ldr	r3, [r3, #8]
 800c628:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	683a      	ldr	r2, [r7, #0]
 800c632:	430a      	orrs	r2, r1
 800c634:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f000 f812 	bl	800c660 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	68fa      	ldr	r2, [r7, #12]
 800c642:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2220      	movs	r2, #32
 800c648:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2200      	movs	r2, #0
 800c650:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c654:	2300      	movs	r3, #0
}
 800c656:	4618      	mov	r0, r3
 800c658:	3710      	adds	r7, #16
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd80      	pop	{r7, pc}
	...

0800c660 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c660:	b480      	push	{r7}
 800c662:	b085      	sub	sp, #20
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d108      	bne.n	800c682 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2201      	movs	r2, #1
 800c674:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2201      	movs	r2, #1
 800c67c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c680:	e031      	b.n	800c6e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c682:	2310      	movs	r3, #16
 800c684:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c686:	2310      	movs	r3, #16
 800c688:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	689b      	ldr	r3, [r3, #8]
 800c690:	0e5b      	lsrs	r3, r3, #25
 800c692:	b2db      	uxtb	r3, r3
 800c694:	f003 0307 	and.w	r3, r3, #7
 800c698:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	689b      	ldr	r3, [r3, #8]
 800c6a0:	0f5b      	lsrs	r3, r3, #29
 800c6a2:	b2db      	uxtb	r3, r3
 800c6a4:	f003 0307 	and.w	r3, r3, #7
 800c6a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c6aa:	7bbb      	ldrb	r3, [r7, #14]
 800c6ac:	7b3a      	ldrb	r2, [r7, #12]
 800c6ae:	4911      	ldr	r1, [pc, #68]	; (800c6f4 <UARTEx_SetNbDataToProcess+0x94>)
 800c6b0:	5c8a      	ldrb	r2, [r1, r2]
 800c6b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c6b6:	7b3a      	ldrb	r2, [r7, #12]
 800c6b8:	490f      	ldr	r1, [pc, #60]	; (800c6f8 <UARTEx_SetNbDataToProcess+0x98>)
 800c6ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c6bc:	fb93 f3f2 	sdiv	r3, r3, r2
 800c6c0:	b29a      	uxth	r2, r3
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c6c8:	7bfb      	ldrb	r3, [r7, #15]
 800c6ca:	7b7a      	ldrb	r2, [r7, #13]
 800c6cc:	4909      	ldr	r1, [pc, #36]	; (800c6f4 <UARTEx_SetNbDataToProcess+0x94>)
 800c6ce:	5c8a      	ldrb	r2, [r1, r2]
 800c6d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c6d4:	7b7a      	ldrb	r2, [r7, #13]
 800c6d6:	4908      	ldr	r1, [pc, #32]	; (800c6f8 <UARTEx_SetNbDataToProcess+0x98>)
 800c6d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c6da:	fb93 f3f2 	sdiv	r3, r3, r2
 800c6de:	b29a      	uxth	r2, r3
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c6e6:	bf00      	nop
 800c6e8:	3714      	adds	r7, #20
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f0:	4770      	bx	lr
 800c6f2:	bf00      	nop
 800c6f4:	080144c4 	.word	0x080144c4
 800c6f8:	080144cc 	.word	0x080144cc

0800c6fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c6fc:	b084      	sub	sp, #16
 800c6fe:	b580      	push	{r7, lr}
 800c700:	b084      	sub	sp, #16
 800c702:	af00      	add	r7, sp, #0
 800c704:	6078      	str	r0, [r7, #4]
 800c706:	f107 001c 	add.w	r0, r7, #28
 800c70a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c710:	2b01      	cmp	r3, #1
 800c712:	d120      	bne.n	800c756 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c718:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	68da      	ldr	r2, [r3, #12]
 800c724:	4b2a      	ldr	r3, [pc, #168]	; (800c7d0 <USB_CoreInit+0xd4>)
 800c726:	4013      	ands	r3, r2
 800c728:	687a      	ldr	r2, [r7, #4]
 800c72a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	68db      	ldr	r3, [r3, #12]
 800c730:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c738:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c73a:	2b01      	cmp	r3, #1
 800c73c:	d105      	bne.n	800c74a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	68db      	ldr	r3, [r3, #12]
 800c742:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	f000 faac 	bl	800cca8 <USB_CoreReset>
 800c750:	4603      	mov	r3, r0
 800c752:	73fb      	strb	r3, [r7, #15]
 800c754:	e01a      	b.n	800c78c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	68db      	ldr	r3, [r3, #12]
 800c75a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c762:	6878      	ldr	r0, [r7, #4]
 800c764:	f000 faa0 	bl	800cca8 <USB_CoreReset>
 800c768:	4603      	mov	r3, r0
 800c76a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c76c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d106      	bne.n	800c780 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c776:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	639a      	str	r2, [r3, #56]	; 0x38
 800c77e:	e005      	b.n	800c78c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c784:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c78e:	2b01      	cmp	r3, #1
 800c790:	d116      	bne.n	800c7c0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c796:	b29a      	uxth	r2, r3
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c7a0:	4b0c      	ldr	r3, [pc, #48]	; (800c7d4 <USB_CoreInit+0xd8>)
 800c7a2:	4313      	orrs	r3, r2
 800c7a4:	687a      	ldr	r2, [r7, #4]
 800c7a6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	689b      	ldr	r3, [r3, #8]
 800c7ac:	f043 0206 	orr.w	r2, r3, #6
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	689b      	ldr	r3, [r3, #8]
 800c7b8:	f043 0220 	orr.w	r2, r3, #32
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c7c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	3710      	adds	r7, #16
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c7cc:	b004      	add	sp, #16
 800c7ce:	4770      	bx	lr
 800c7d0:	ffbdffbf 	.word	0xffbdffbf
 800c7d4:	03ee0000 	.word	0x03ee0000

0800c7d8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c7d8:	b480      	push	{r7}
 800c7da:	b083      	sub	sp, #12
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	689b      	ldr	r3, [r3, #8]
 800c7e4:	f023 0201 	bic.w	r2, r3, #1
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c7ec:	2300      	movs	r3, #0
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	370c      	adds	r7, #12
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f8:	4770      	bx	lr

0800c7fa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c7fa:	b580      	push	{r7, lr}
 800c7fc:	b084      	sub	sp, #16
 800c7fe:	af00      	add	r7, sp, #0
 800c800:	6078      	str	r0, [r7, #4]
 800c802:	460b      	mov	r3, r1
 800c804:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c806:	2300      	movs	r3, #0
 800c808:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	68db      	ldr	r3, [r3, #12]
 800c80e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c816:	78fb      	ldrb	r3, [r7, #3]
 800c818:	2b01      	cmp	r3, #1
 800c81a:	d115      	bne.n	800c848 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	68db      	ldr	r3, [r3, #12]
 800c820:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c828:	2001      	movs	r0, #1
 800c82a:	f7f5 fa53 	bl	8001cd4 <HAL_Delay>
      ms++;
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	3301      	adds	r3, #1
 800c832:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f000 fa29 	bl	800cc8c <USB_GetMode>
 800c83a:	4603      	mov	r3, r0
 800c83c:	2b01      	cmp	r3, #1
 800c83e:	d01e      	beq.n	800c87e <USB_SetCurrentMode+0x84>
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	2b31      	cmp	r3, #49	; 0x31
 800c844:	d9f0      	bls.n	800c828 <USB_SetCurrentMode+0x2e>
 800c846:	e01a      	b.n	800c87e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c848:	78fb      	ldrb	r3, [r7, #3]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d115      	bne.n	800c87a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	68db      	ldr	r3, [r3, #12]
 800c852:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c85a:	2001      	movs	r0, #1
 800c85c:	f7f5 fa3a 	bl	8001cd4 <HAL_Delay>
      ms++;
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	3301      	adds	r3, #1
 800c864:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c866:	6878      	ldr	r0, [r7, #4]
 800c868:	f000 fa10 	bl	800cc8c <USB_GetMode>
 800c86c:	4603      	mov	r3, r0
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d005      	beq.n	800c87e <USB_SetCurrentMode+0x84>
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	2b31      	cmp	r3, #49	; 0x31
 800c876:	d9f0      	bls.n	800c85a <USB_SetCurrentMode+0x60>
 800c878:	e001      	b.n	800c87e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c87a:	2301      	movs	r3, #1
 800c87c:	e005      	b.n	800c88a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	2b32      	cmp	r3, #50	; 0x32
 800c882:	d101      	bne.n	800c888 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c884:	2301      	movs	r3, #1
 800c886:	e000      	b.n	800c88a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c888:	2300      	movs	r3, #0
}
 800c88a:	4618      	mov	r0, r3
 800c88c:	3710      	adds	r7, #16
 800c88e:	46bd      	mov	sp, r7
 800c890:	bd80      	pop	{r7, pc}
	...

0800c894 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c894:	b084      	sub	sp, #16
 800c896:	b580      	push	{r7, lr}
 800c898:	b086      	sub	sp, #24
 800c89a:	af00      	add	r7, sp, #0
 800c89c:	6078      	str	r0, [r7, #4]
 800c89e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c8a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	613b      	str	r3, [r7, #16]
 800c8b2:	e009      	b.n	800c8c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c8b4:	687a      	ldr	r2, [r7, #4]
 800c8b6:	693b      	ldr	r3, [r7, #16]
 800c8b8:	3340      	adds	r3, #64	; 0x40
 800c8ba:	009b      	lsls	r3, r3, #2
 800c8bc:	4413      	add	r3, r2
 800c8be:	2200      	movs	r2, #0
 800c8c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c8c2:	693b      	ldr	r3, [r7, #16]
 800c8c4:	3301      	adds	r3, #1
 800c8c6:	613b      	str	r3, [r7, #16]
 800c8c8:	693b      	ldr	r3, [r7, #16]
 800c8ca:	2b0e      	cmp	r3, #14
 800c8cc:	d9f2      	bls.n	800c8b4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c8ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d11c      	bne.n	800c90e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8da:	685b      	ldr	r3, [r3, #4]
 800c8dc:	68fa      	ldr	r2, [r7, #12]
 800c8de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c8e2:	f043 0302 	orr.w	r3, r3, #2
 800c8e6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8ec:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	601a      	str	r2, [r3, #0]
 800c90c:	e005      	b.n	800c91a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c912:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c920:	461a      	mov	r2, r3
 800c922:	2300      	movs	r3, #0
 800c924:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c92c:	4619      	mov	r1, r3
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c934:	461a      	mov	r2, r3
 800c936:	680b      	ldr	r3, [r1, #0]
 800c938:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c93a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c93c:	2b01      	cmp	r3, #1
 800c93e:	d10c      	bne.n	800c95a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c942:	2b00      	cmp	r3, #0
 800c944:	d104      	bne.n	800c950 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c946:	2100      	movs	r1, #0
 800c948:	6878      	ldr	r0, [r7, #4]
 800c94a:	f000 f965 	bl	800cc18 <USB_SetDevSpeed>
 800c94e:	e008      	b.n	800c962 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c950:	2101      	movs	r1, #1
 800c952:	6878      	ldr	r0, [r7, #4]
 800c954:	f000 f960 	bl	800cc18 <USB_SetDevSpeed>
 800c958:	e003      	b.n	800c962 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c95a:	2103      	movs	r1, #3
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	f000 f95b 	bl	800cc18 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c962:	2110      	movs	r1, #16
 800c964:	6878      	ldr	r0, [r7, #4]
 800c966:	f000 f8f3 	bl	800cb50 <USB_FlushTxFifo>
 800c96a:	4603      	mov	r3, r0
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d001      	beq.n	800c974 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800c970:	2301      	movs	r3, #1
 800c972:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c974:	6878      	ldr	r0, [r7, #4]
 800c976:	f000 f91f 	bl	800cbb8 <USB_FlushRxFifo>
 800c97a:	4603      	mov	r3, r0
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d001      	beq.n	800c984 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800c980:	2301      	movs	r3, #1
 800c982:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c98a:	461a      	mov	r2, r3
 800c98c:	2300      	movs	r3, #0
 800c98e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c996:	461a      	mov	r2, r3
 800c998:	2300      	movs	r3, #0
 800c99a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9a2:	461a      	mov	r2, r3
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	613b      	str	r3, [r7, #16]
 800c9ac:	e043      	b.n	800ca36 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c9ae:	693b      	ldr	r3, [r7, #16]
 800c9b0:	015a      	lsls	r2, r3, #5
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	4413      	add	r3, r2
 800c9b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c9c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c9c4:	d118      	bne.n	800c9f8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800c9c6:	693b      	ldr	r3, [r7, #16]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d10a      	bne.n	800c9e2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c9cc:	693b      	ldr	r3, [r7, #16]
 800c9ce:	015a      	lsls	r2, r3, #5
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	4413      	add	r3, r2
 800c9d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9d8:	461a      	mov	r2, r3
 800c9da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c9de:	6013      	str	r3, [r2, #0]
 800c9e0:	e013      	b.n	800ca0a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c9e2:	693b      	ldr	r3, [r7, #16]
 800c9e4:	015a      	lsls	r2, r3, #5
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	4413      	add	r3, r2
 800c9ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9ee:	461a      	mov	r2, r3
 800c9f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c9f4:	6013      	str	r3, [r2, #0]
 800c9f6:	e008      	b.n	800ca0a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c9f8:	693b      	ldr	r3, [r7, #16]
 800c9fa:	015a      	lsls	r2, r3, #5
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	4413      	add	r3, r2
 800ca00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca04:	461a      	mov	r2, r3
 800ca06:	2300      	movs	r3, #0
 800ca08:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ca0a:	693b      	ldr	r3, [r7, #16]
 800ca0c:	015a      	lsls	r2, r3, #5
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	4413      	add	r3, r2
 800ca12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca16:	461a      	mov	r2, r3
 800ca18:	2300      	movs	r3, #0
 800ca1a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ca1c:	693b      	ldr	r3, [r7, #16]
 800ca1e:	015a      	lsls	r2, r3, #5
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	4413      	add	r3, r2
 800ca24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca28:	461a      	mov	r2, r3
 800ca2a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ca2e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ca30:	693b      	ldr	r3, [r7, #16]
 800ca32:	3301      	adds	r3, #1
 800ca34:	613b      	str	r3, [r7, #16]
 800ca36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca38:	693a      	ldr	r2, [r7, #16]
 800ca3a:	429a      	cmp	r2, r3
 800ca3c:	d3b7      	bcc.n	800c9ae <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ca3e:	2300      	movs	r3, #0
 800ca40:	613b      	str	r3, [r7, #16]
 800ca42:	e043      	b.n	800cacc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ca44:	693b      	ldr	r3, [r7, #16]
 800ca46:	015a      	lsls	r2, r3, #5
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	4413      	add	r3, r2
 800ca4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ca56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ca5a:	d118      	bne.n	800ca8e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800ca5c:	693b      	ldr	r3, [r7, #16]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d10a      	bne.n	800ca78 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ca62:	693b      	ldr	r3, [r7, #16]
 800ca64:	015a      	lsls	r2, r3, #5
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	4413      	add	r3, r2
 800ca6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca6e:	461a      	mov	r2, r3
 800ca70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ca74:	6013      	str	r3, [r2, #0]
 800ca76:	e013      	b.n	800caa0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ca78:	693b      	ldr	r3, [r7, #16]
 800ca7a:	015a      	lsls	r2, r3, #5
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	4413      	add	r3, r2
 800ca80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca84:	461a      	mov	r2, r3
 800ca86:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ca8a:	6013      	str	r3, [r2, #0]
 800ca8c:	e008      	b.n	800caa0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ca8e:	693b      	ldr	r3, [r7, #16]
 800ca90:	015a      	lsls	r2, r3, #5
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	4413      	add	r3, r2
 800ca96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca9a:	461a      	mov	r2, r3
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800caa0:	693b      	ldr	r3, [r7, #16]
 800caa2:	015a      	lsls	r2, r3, #5
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	4413      	add	r3, r2
 800caa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800caac:	461a      	mov	r2, r3
 800caae:	2300      	movs	r3, #0
 800cab0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800cab2:	693b      	ldr	r3, [r7, #16]
 800cab4:	015a      	lsls	r2, r3, #5
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	4413      	add	r3, r2
 800caba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cabe:	461a      	mov	r2, r3
 800cac0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cac4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cac6:	693b      	ldr	r3, [r7, #16]
 800cac8:	3301      	adds	r3, #1
 800caca:	613b      	str	r3, [r7, #16]
 800cacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cace:	693a      	ldr	r2, [r7, #16]
 800cad0:	429a      	cmp	r2, r3
 800cad2:	d3b7      	bcc.n	800ca44 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cada:	691b      	ldr	r3, [r3, #16]
 800cadc:	68fa      	ldr	r2, [r7, #12]
 800cade:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cae2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cae6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2200      	movs	r2, #0
 800caec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800caf4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800caf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d105      	bne.n	800cb08 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	699b      	ldr	r3, [r3, #24]
 800cb00:	f043 0210 	orr.w	r2, r3, #16
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	699a      	ldr	r2, [r3, #24]
 800cb0c:	4b0e      	ldr	r3, [pc, #56]	; (800cb48 <USB_DevInit+0x2b4>)
 800cb0e:	4313      	orrs	r3, r2
 800cb10:	687a      	ldr	r2, [r7, #4]
 800cb12:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800cb14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d005      	beq.n	800cb26 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	699b      	ldr	r3, [r3, #24]
 800cb1e:	f043 0208 	orr.w	r2, r3, #8
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800cb26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb28:	2b01      	cmp	r3, #1
 800cb2a:	d105      	bne.n	800cb38 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	699a      	ldr	r2, [r3, #24]
 800cb30:	4b06      	ldr	r3, [pc, #24]	; (800cb4c <USB_DevInit+0x2b8>)
 800cb32:	4313      	orrs	r3, r2
 800cb34:	687a      	ldr	r2, [r7, #4]
 800cb36:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800cb38:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	3718      	adds	r7, #24
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cb44:	b004      	add	sp, #16
 800cb46:	4770      	bx	lr
 800cb48:	803c3800 	.word	0x803c3800
 800cb4c:	40000004 	.word	0x40000004

0800cb50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cb50:	b480      	push	{r7}
 800cb52:	b085      	sub	sp, #20
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
 800cb58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	3301      	adds	r3, #1
 800cb62:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	4a13      	ldr	r2, [pc, #76]	; (800cbb4 <USB_FlushTxFifo+0x64>)
 800cb68:	4293      	cmp	r3, r2
 800cb6a:	d901      	bls.n	800cb70 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800cb6c:	2303      	movs	r3, #3
 800cb6e:	e01b      	b.n	800cba8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	691b      	ldr	r3, [r3, #16]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	daf2      	bge.n	800cb5e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800cb78:	2300      	movs	r3, #0
 800cb7a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	019b      	lsls	r3, r3, #6
 800cb80:	f043 0220 	orr.w	r2, r3, #32
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	3301      	adds	r3, #1
 800cb8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	4a08      	ldr	r2, [pc, #32]	; (800cbb4 <USB_FlushTxFifo+0x64>)
 800cb92:	4293      	cmp	r3, r2
 800cb94:	d901      	bls.n	800cb9a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800cb96:	2303      	movs	r3, #3
 800cb98:	e006      	b.n	800cba8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	691b      	ldr	r3, [r3, #16]
 800cb9e:	f003 0320 	and.w	r3, r3, #32
 800cba2:	2b20      	cmp	r3, #32
 800cba4:	d0f0      	beq.n	800cb88 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800cba6:	2300      	movs	r3, #0
}
 800cba8:	4618      	mov	r0, r3
 800cbaa:	3714      	adds	r7, #20
 800cbac:	46bd      	mov	sp, r7
 800cbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb2:	4770      	bx	lr
 800cbb4:	00030d40 	.word	0x00030d40

0800cbb8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800cbb8:	b480      	push	{r7}
 800cbba:	b085      	sub	sp, #20
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	3301      	adds	r3, #1
 800cbc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	4a11      	ldr	r2, [pc, #68]	; (800cc14 <USB_FlushRxFifo+0x5c>)
 800cbce:	4293      	cmp	r3, r2
 800cbd0:	d901      	bls.n	800cbd6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800cbd2:	2303      	movs	r3, #3
 800cbd4:	e018      	b.n	800cc08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	691b      	ldr	r3, [r3, #16]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	daf2      	bge.n	800cbc4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800cbde:	2300      	movs	r3, #0
 800cbe0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	2210      	movs	r2, #16
 800cbe6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	3301      	adds	r3, #1
 800cbec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	4a08      	ldr	r2, [pc, #32]	; (800cc14 <USB_FlushRxFifo+0x5c>)
 800cbf2:	4293      	cmp	r3, r2
 800cbf4:	d901      	bls.n	800cbfa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800cbf6:	2303      	movs	r3, #3
 800cbf8:	e006      	b.n	800cc08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	691b      	ldr	r3, [r3, #16]
 800cbfe:	f003 0310 	and.w	r3, r3, #16
 800cc02:	2b10      	cmp	r3, #16
 800cc04:	d0f0      	beq.n	800cbe8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800cc06:	2300      	movs	r3, #0
}
 800cc08:	4618      	mov	r0, r3
 800cc0a:	3714      	adds	r7, #20
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc12:	4770      	bx	lr
 800cc14:	00030d40 	.word	0x00030d40

0800cc18 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800cc18:	b480      	push	{r7}
 800cc1a:	b085      	sub	sp, #20
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
 800cc20:	460b      	mov	r3, r1
 800cc22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc2e:	681a      	ldr	r2, [r3, #0]
 800cc30:	78fb      	ldrb	r3, [r7, #3]
 800cc32:	68f9      	ldr	r1, [r7, #12]
 800cc34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cc38:	4313      	orrs	r3, r2
 800cc3a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800cc3c:	2300      	movs	r3, #0
}
 800cc3e:	4618      	mov	r0, r3
 800cc40:	3714      	adds	r7, #20
 800cc42:	46bd      	mov	sp, r7
 800cc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc48:	4770      	bx	lr

0800cc4a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cc4a:	b480      	push	{r7}
 800cc4c:	b085      	sub	sp, #20
 800cc4e:	af00      	add	r7, sp, #0
 800cc50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	68fa      	ldr	r2, [r7, #12]
 800cc60:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cc64:	f023 0303 	bic.w	r3, r3, #3
 800cc68:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc70:	685b      	ldr	r3, [r3, #4]
 800cc72:	68fa      	ldr	r2, [r7, #12]
 800cc74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cc78:	f043 0302 	orr.w	r3, r3, #2
 800cc7c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cc7e:	2300      	movs	r3, #0
}
 800cc80:	4618      	mov	r0, r3
 800cc82:	3714      	adds	r7, #20
 800cc84:	46bd      	mov	sp, r7
 800cc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8a:	4770      	bx	lr

0800cc8c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800cc8c:	b480      	push	{r7}
 800cc8e:	b083      	sub	sp, #12
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	695b      	ldr	r3, [r3, #20]
 800cc98:	f003 0301 	and.w	r3, r3, #1
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	370c      	adds	r7, #12
 800cca0:	46bd      	mov	sp, r7
 800cca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca6:	4770      	bx	lr

0800cca8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cca8:	b480      	push	{r7}
 800ccaa:	b085      	sub	sp, #20
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	3301      	adds	r3, #1
 800ccb8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	4a13      	ldr	r2, [pc, #76]	; (800cd0c <USB_CoreReset+0x64>)
 800ccbe:	4293      	cmp	r3, r2
 800ccc0:	d901      	bls.n	800ccc6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ccc2:	2303      	movs	r3, #3
 800ccc4:	e01b      	b.n	800ccfe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	691b      	ldr	r3, [r3, #16]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	daf2      	bge.n	800ccb4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ccce:	2300      	movs	r3, #0
 800ccd0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	691b      	ldr	r3, [r3, #16]
 800ccd6:	f043 0201 	orr.w	r2, r3, #1
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	3301      	adds	r3, #1
 800cce2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	4a09      	ldr	r2, [pc, #36]	; (800cd0c <USB_CoreReset+0x64>)
 800cce8:	4293      	cmp	r3, r2
 800ccea:	d901      	bls.n	800ccf0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ccec:	2303      	movs	r3, #3
 800ccee:	e006      	b.n	800ccfe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	691b      	ldr	r3, [r3, #16]
 800ccf4:	f003 0301 	and.w	r3, r3, #1
 800ccf8:	2b01      	cmp	r3, #1
 800ccfa:	d0f0      	beq.n	800ccde <USB_CoreReset+0x36>

  return HAL_OK;
 800ccfc:	2300      	movs	r3, #0
}
 800ccfe:	4618      	mov	r0, r3
 800cd00:	3714      	adds	r7, #20
 800cd02:	46bd      	mov	sp, r7
 800cd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd08:	4770      	bx	lr
 800cd0a:	bf00      	nop
 800cd0c:	00030d40 	.word	0x00030d40

0800cd10 <_ZNK10Algorithms15FusionAlgorithm15GetAccelerationEv>:
	void InitState(const AGMSensorData& imuData);
	void UpdateIMU(const AGMSensorData& imuData);
	//void UpdateGNSS(const GNSSSensorData& gnssData);
	void ResetKinematics();

	const Mat::Quaternion& GetAcceleration() const {return _acceleration;}
 800cd10:	b480      	push	{r7}
 800cd12:	b083      	sub	sp, #12
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	370c      	adds	r7, #12
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd24:	4770      	bx	lr

0800cd26 <_ZNK10Algorithms15FusionAlgorithm11GetVelocityEv>:
	const Mat::Quaternion& GetVelocity() const {return _velocity;}
 800cd26:	b480      	push	{r7}
 800cd28:	b083      	sub	sp, #12
 800cd2a:	af00      	add	r7, sp, #0
 800cd2c:	6078      	str	r0, [r7, #4]
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	3310      	adds	r3, #16
 800cd32:	4618      	mov	r0, r3
 800cd34:	370c      	adds	r7, #12
 800cd36:	46bd      	mov	sp, r7
 800cd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3c:	4770      	bx	lr

0800cd3e <_ZNK10Algorithms15FusionAlgorithm11GetPositionEv>:
	const Mat::Quaternion& GetPosition() const {return _position;}
 800cd3e:	b480      	push	{r7}
 800cd40:	b083      	sub	sp, #12
 800cd42:	af00      	add	r7, sp, #0
 800cd44:	6078      	str	r0, [r7, #4]
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	3320      	adds	r3, #32
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	370c      	adds	r7, #12
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd54:	4770      	bx	lr
	...

0800cd58 <_ZN10Algorithms10AHRSKalmanC1Ev>:
{

class AHRSKalman
{
public:
	AHRSKalman(){};
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b082      	sub	sp, #8
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	3310      	adds	r3, #16
 800cd64:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800cd68:	4618      	mov	r0, r3
 800cd6a:	f000 f917 	bl	800cf9c <_ZN3Mat3EyeILt4EEENS_6MatrixIXT_EXT_EEEf>
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	4a08      	ldr	r2, [pc, #32]	; (800cd94 <_ZN10Algorithms10AHRSKalmanC1Ev+0x3c>)
 800cd72:	659a      	str	r2, [r3, #88]	; 0x58
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	4a08      	ldr	r2, [pc, #32]	; (800cd98 <_ZN10Algorithms10AHRSKalmanC1Ev+0x40>)
 800cd78:	65da      	str	r2, [r3, #92]	; 0x5c
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	4a07      	ldr	r2, [pc, #28]	; (800cd9c <_ZN10Algorithms10AHRSKalmanC1Ev+0x44>)
 800cd7e:	661a      	str	r2, [r3, #96]	; 0x60
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	3364      	adds	r3, #100	; 0x64
 800cd84:	4618      	mov	r0, r3
 800cd86:	f000 f92d 	bl	800cfe4 <_ZN3Mat6MatrixILt4ELt4EEC1Ev>
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	3708      	adds	r7, #8
 800cd90:	46bd      	mov	sp, r7
 800cd92:	bd80      	pop	{r7, pc}
 800cd94:	3d4ccccd 	.word	0x3d4ccccd
 800cd98:	3f23d70a 	.word	0x3f23d70a
 800cd9c:	3c23d70a 	.word	0x3c23d70a

0800cda0 <InitAlgorithms>:
Mat::Matrix<3, 1> meanMag = 0.0f;

float al = 0.01f;

uint8_t InitAlgorithms(const AGMSensorData* sensorData)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b082      	sub	sp, #8
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
	printf("InitAlgorithms\n\r");
 800cda8:	4831      	ldr	r0, [pc, #196]	; (800ce70 <InitAlgorithms+0xd0>)
 800cdaa:	f005 fa65 	bl	8012278 <iprintf>
	AccRaw(0,0) = sensorData->Acc.x;
 800cdae:	2200      	movs	r2, #0
 800cdb0:	2100      	movs	r1, #0
 800cdb2:	4830      	ldr	r0, [pc, #192]	; (800ce74 <InitAlgorithms+0xd4>)
 800cdb4:	f000 f95e 	bl	800d074 <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800cdb8:	4602      	mov	r2, r0
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	68db      	ldr	r3, [r3, #12]
 800cdbe:	6013      	str	r3, [r2, #0]
	AccRaw(1,0) = sensorData->Acc.y;
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	2101      	movs	r1, #1
 800cdc4:	482b      	ldr	r0, [pc, #172]	; (800ce74 <InitAlgorithms+0xd4>)
 800cdc6:	f000 f955 	bl	800d074 <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800cdca:	4602      	mov	r2, r0
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	691b      	ldr	r3, [r3, #16]
 800cdd0:	6013      	str	r3, [r2, #0]
	AccRaw(2,0) = sensorData->Acc.z;
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	2102      	movs	r1, #2
 800cdd6:	4827      	ldr	r0, [pc, #156]	; (800ce74 <InitAlgorithms+0xd4>)
 800cdd8:	f000 f94c 	bl	800d074 <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800cddc:	4602      	mov	r2, r0
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	695b      	ldr	r3, [r3, #20]
 800cde2:	6013      	str	r3, [r2, #0]
	MagRaw(0,0) = sensorData->Mag.x;
 800cde4:	2200      	movs	r2, #0
 800cde6:	2100      	movs	r1, #0
 800cde8:	4823      	ldr	r0, [pc, #140]	; (800ce78 <InitAlgorithms+0xd8>)
 800cdea:	f000 f943 	bl	800d074 <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800cdee:	4602      	mov	r2, r0
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	6013      	str	r3, [r2, #0]
	MagRaw(1,0) = sensorData->Mag.y;
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	2101      	movs	r1, #1
 800cdfa:	481f      	ldr	r0, [pc, #124]	; (800ce78 <InitAlgorithms+0xd8>)
 800cdfc:	f000 f93a 	bl	800d074 <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800ce00:	4602      	mov	r2, r0
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	685b      	ldr	r3, [r3, #4]
 800ce06:	6013      	str	r3, [r2, #0]
	MagRaw(2,0) = sensorData->Mag.z;
 800ce08:	2200      	movs	r2, #0
 800ce0a:	2102      	movs	r1, #2
 800ce0c:	481a      	ldr	r0, [pc, #104]	; (800ce78 <InitAlgorithms+0xd8>)
 800ce0e:	f000 f931 	bl	800d074 <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800ce12:	4602      	mov	r2, r0
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	689b      	ldr	r3, [r3, #8]
 800ce18:	6013      	str	r3, [r2, #0]
	AccCal = CalibrateAcc(AccRaw);
 800ce1a:	4816      	ldr	r0, [pc, #88]	; (800ce74 <InitAlgorithms+0xd4>)
 800ce1c:	f000 fb5a 	bl	800d4d4 <_Z12CalibrateAccRKN3Mat6MatrixILt3ELt1EEE>
 800ce20:	eef0 6a40 	vmov.f32	s13, s0
 800ce24:	eeb0 7a60 	vmov.f32	s14, s1
 800ce28:	eef0 7a41 	vmov.f32	s15, s2
 800ce2c:	4b13      	ldr	r3, [pc, #76]	; (800ce7c <InitAlgorithms+0xdc>)
 800ce2e:	edc3 6a00 	vstr	s13, [r3]
 800ce32:	ed83 7a01 	vstr	s14, [r3, #4]
 800ce36:	edc3 7a02 	vstr	s15, [r3, #8]
	MagCal = CalibrateMag(MagRaw);
 800ce3a:	480f      	ldr	r0, [pc, #60]	; (800ce78 <InitAlgorithms+0xd8>)
 800ce3c:	f000 fb0e 	bl	800d45c <_Z12CalibrateMagRKN3Mat6MatrixILt3ELt1EEE>
 800ce40:	eef0 6a40 	vmov.f32	s13, s0
 800ce44:	eeb0 7a60 	vmov.f32	s14, s1
 800ce48:	eef0 7a41 	vmov.f32	s15, s2
 800ce4c:	4b0c      	ldr	r3, [pc, #48]	; (800ce80 <InitAlgorithms+0xe0>)
 800ce4e:	edc3 6a00 	vstr	s13, [r3]
 800ce52:	ed83 7a01 	vstr	s14, [r3, #4]
 800ce56:	edc3 7a02 	vstr	s15, [r3, #8]

	Kalman.InitialiseKalman(AccCal, MagCal);
 800ce5a:	4a09      	ldr	r2, [pc, #36]	; (800ce80 <InitAlgorithms+0xe0>)
 800ce5c:	4907      	ldr	r1, [pc, #28]	; (800ce7c <InitAlgorithms+0xdc>)
 800ce5e:	4809      	ldr	r0, [pc, #36]	; (800ce84 <InitAlgorithms+0xe4>)
 800ce60:	f000 fe72 	bl	800db48 <_ZN10Algorithms10AHRSKalman16InitialiseKalmanERKN3Mat6MatrixILt3ELt1EEES5_>

	return 1;
 800ce64:	2301      	movs	r3, #1
}
 800ce66:	4618      	mov	r0, r3
 800ce68:	3708      	adds	r7, #8
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	bd80      	pop	{r7, pc}
 800ce6e:	bf00      	nop
 800ce70:	080142d4 	.word	0x080142d4
 800ce74:	24004e24 	.word	0x24004e24
 800ce78:	24004df4 	.word	0x24004df4
 800ce7c:	24004e18 	.word	0x24004e18
 800ce80:	24004de8 	.word	0x24004de8
 800ce84:	24004d34 	.word	0x24004d34

0800ce88 <GetPosition>:
	}
	return 0;
}

Vec3 GetPosition()
{
 800ce88:	b590      	push	{r4, r7, lr}
 800ce8a:	b08f      	sub	sp, #60	; 0x3c
 800ce8c:	af00      	add	r7, sp, #0
	Vec3 result;
	auto pos = Fusion.GetPosition();
 800ce8e:	4814      	ldr	r0, [pc, #80]	; (800cee0 <GetPosition+0x58>)
 800ce90:	f7ff ff55 	bl	800cd3e <_ZNK10Algorithms15FusionAlgorithm11GetPositionEv>
 800ce94:	4603      	mov	r3, r0
 800ce96:	f107 0410 	add.w	r4, r7, #16
 800ce9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ce9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	result.x = pos.x;
 800cea0:	697b      	ldr	r3, [r7, #20]
 800cea2:	623b      	str	r3, [r7, #32]
	result.y = pos.y;
 800cea4:	69bb      	ldr	r3, [r7, #24]
 800cea6:	627b      	str	r3, [r7, #36]	; 0x24
	result.z = pos.z;
 800cea8:	69fb      	ldr	r3, [r7, #28]
 800ceaa:	62bb      	str	r3, [r7, #40]	; 0x28
	return result;
 800ceac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ceb0:	f107 0220 	add.w	r2, r7, #32
 800ceb4:	ca07      	ldmia	r2, {r0, r1, r2}
 800ceb6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ceba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cec0:	ee06 1a90 	vmov	s13, r1
 800cec4:	ee07 2a10 	vmov	s14, r2
 800cec8:	ee07 3a90 	vmov	s15, r3
}
 800cecc:	eeb0 0a66 	vmov.f32	s0, s13
 800ced0:	eef0 0a47 	vmov.f32	s1, s14
 800ced4:	eeb0 1a67 	vmov.f32	s2, s15
 800ced8:	373c      	adds	r7, #60	; 0x3c
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bd90      	pop	{r4, r7, pc}
 800cede:	bf00      	nop
 800cee0:	24004cf0 	.word	0x24004cf0

0800cee4 <GetVelocity>:

Vec3 GetVelocity()
{
 800cee4:	b590      	push	{r4, r7, lr}
 800cee6:	b08f      	sub	sp, #60	; 0x3c
 800cee8:	af00      	add	r7, sp, #0
	Vec3 result;
	auto pos = Fusion.GetVelocity();
 800ceea:	4814      	ldr	r0, [pc, #80]	; (800cf3c <GetVelocity+0x58>)
 800ceec:	f7ff ff1b 	bl	800cd26 <_ZNK10Algorithms15FusionAlgorithm11GetVelocityEv>
 800cef0:	4603      	mov	r3, r0
 800cef2:	f107 0410 	add.w	r4, r7, #16
 800cef6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cef8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	result.x = pos.x;
 800cefc:	697b      	ldr	r3, [r7, #20]
 800cefe:	623b      	str	r3, [r7, #32]
	result.y = pos.y;
 800cf00:	69bb      	ldr	r3, [r7, #24]
 800cf02:	627b      	str	r3, [r7, #36]	; 0x24
	result.z = pos.z;
 800cf04:	69fb      	ldr	r3, [r7, #28]
 800cf06:	62bb      	str	r3, [r7, #40]	; 0x28
	return result;
 800cf08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cf0c:	f107 0220 	add.w	r2, r7, #32
 800cf10:	ca07      	ldmia	r2, {r0, r1, r2}
 800cf12:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800cf16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cf18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf1c:	ee06 1a90 	vmov	s13, r1
 800cf20:	ee07 2a10 	vmov	s14, r2
 800cf24:	ee07 3a90 	vmov	s15, r3
}
 800cf28:	eeb0 0a66 	vmov.f32	s0, s13
 800cf2c:	eef0 0a47 	vmov.f32	s1, s14
 800cf30:	eeb0 1a67 	vmov.f32	s2, s15
 800cf34:	373c      	adds	r7, #60	; 0x3c
 800cf36:	46bd      	mov	sp, r7
 800cf38:	bd90      	pop	{r4, r7, pc}
 800cf3a:	bf00      	nop
 800cf3c:	24004cf0 	.word	0x24004cf0

0800cf40 <GetAcceleration>:

Vec3 GetAcceleration()
{
 800cf40:	b590      	push	{r4, r7, lr}
 800cf42:	b08f      	sub	sp, #60	; 0x3c
 800cf44:	af00      	add	r7, sp, #0
	Vec3 result;
	auto pos = Fusion.GetAcceleration();
 800cf46:	4814      	ldr	r0, [pc, #80]	; (800cf98 <GetAcceleration+0x58>)
 800cf48:	f7ff fee2 	bl	800cd10 <_ZNK10Algorithms15FusionAlgorithm15GetAccelerationEv>
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	f107 0410 	add.w	r4, r7, #16
 800cf52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cf54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	result.x = pos.x;
 800cf58:	697b      	ldr	r3, [r7, #20]
 800cf5a:	623b      	str	r3, [r7, #32]
	result.y = pos.y;
 800cf5c:	69bb      	ldr	r3, [r7, #24]
 800cf5e:	627b      	str	r3, [r7, #36]	; 0x24
	result.z = pos.z;
 800cf60:	69fb      	ldr	r3, [r7, #28]
 800cf62:	62bb      	str	r3, [r7, #40]	; 0x28
	return result;
 800cf64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cf68:	f107 0220 	add.w	r2, r7, #32
 800cf6c:	ca07      	ldmia	r2, {r0, r1, r2}
 800cf6e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800cf72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cf74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf78:	ee06 1a90 	vmov	s13, r1
 800cf7c:	ee07 2a10 	vmov	s14, r2
 800cf80:	ee07 3a90 	vmov	s15, r3
}
 800cf84:	eeb0 0a66 	vmov.f32	s0, s13
 800cf88:	eef0 0a47 	vmov.f32	s1, s14
 800cf8c:	eeb0 1a67 	vmov.f32	s2, s15
 800cf90:	373c      	adds	r7, #60	; 0x3c
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd90      	pop	{r4, r7, pc}
 800cf96:	bf00      	nop
 800cf98:	24004cf0 	.word	0x24004cf0

0800cf9c <_ZN3Mat3EyeILt4EEENS_6MatrixIXT_EXT_EEEf>:
protected:
	std::array<float, heigth*width> _values;
};

template<u_short size>
Matrix<size, size> Eye(float val = 1.0f)
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b084      	sub	sp, #16
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
 800cfa4:	ed87 0a00 	vstr	s0, [r7]
{
	static_assert(size > 0, "Matrix size must be positive!");
	Matrix<size, size> result{0.0f};
 800cfa8:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800cfe0 <_ZN3Mat3EyeILt4EEENS_6MatrixIXT_EXT_EEEf+0x44>
 800cfac:	6878      	ldr	r0, [r7, #4]
 800cfae:	f000 f886 	bl	800d0be <_ZN3Mat6MatrixILt4ELt4EEC1Ef>
	for(u_short i = 0; i < size; ++i)
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	81fb      	strh	r3, [r7, #14]
 800cfb6:	e00b      	b.n	800cfd0 <_ZN3Mat3EyeILt4EEENS_6MatrixIXT_EXT_EEEf+0x34>
		result(i, i) = val;
 800cfb8:	89fa      	ldrh	r2, [r7, #14]
 800cfba:	89fb      	ldrh	r3, [r7, #14]
 800cfbc:	4619      	mov	r1, r3
 800cfbe:	6878      	ldr	r0, [r7, #4]
 800cfc0:	f000 f89a 	bl	800d0f8 <_ZN3Mat6MatrixILt4ELt4EEclEtt>
 800cfc4:	4602      	mov	r2, r0
 800cfc6:	683b      	ldr	r3, [r7, #0]
 800cfc8:	6013      	str	r3, [r2, #0]
	for(u_short i = 0; i < size; ++i)
 800cfca:	89fb      	ldrh	r3, [r7, #14]
 800cfcc:	3301      	adds	r3, #1
 800cfce:	81fb      	strh	r3, [r7, #14]
 800cfd0:	89fb      	ldrh	r3, [r7, #14]
 800cfd2:	2b03      	cmp	r3, #3
 800cfd4:	d9f0      	bls.n	800cfb8 <_ZN3Mat3EyeILt4EEENS_6MatrixIXT_EXT_EEEf+0x1c>
	return result;
 800cfd6:	bf00      	nop
}
 800cfd8:	6878      	ldr	r0, [r7, #4]
 800cfda:	3710      	adds	r7, #16
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	bd80      	pop	{r7, pc}
 800cfe0:	00000000 	.word	0x00000000

0800cfe4 <_ZN3Mat6MatrixILt4ELt4EEC1Ev>:
	for(u_int i = 0; i < length; ++i) result += A[i]*B[i];
	return result;
}

template <u_short heigth, u_short width>
Matrix<heigth, width>::Matrix() {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 800cfe4:	b480      	push	{r7}
 800cfe6:	b083      	sub	sp, #12
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	4618      	mov	r0, r3
 800cff0:	370c      	adds	r7, #12
 800cff2:	46bd      	mov	sp, r7
 800cff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff8:	4770      	bx	lr

0800cffa <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>:
	static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
}

template <u_short heigth, u_short width>
Matrix<heigth, width>::Matrix(const std::array<float, heigth*width>& values): _values(values) {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 800cffa:	b480      	push	{r7}
 800cffc:	b083      	sub	sp, #12
 800cffe:	af00      	add	r7, sp, #0
 800d000:	6078      	str	r0, [r7, #4]
 800d002:	6039      	str	r1, [r7, #0]
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	683a      	ldr	r2, [r7, #0]
 800d008:	ca07      	ldmia	r2, {r0, r1, r2}
 800d00a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	4618      	mov	r0, r3
 800d012:	370c      	adds	r7, #12
 800d014:	46bd      	mov	sp, r7
 800d016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01a:	4770      	bx	lr

0800d01c <_ZZN3Mat6MatrixILt3ELt1EEC4EfENKUlRfE_clES2_>:
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 800d01c:	b480      	push	{r7}
 800d01e:	b083      	sub	sp, #12
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
 800d024:	6039      	str	r1, [r7, #0]
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681a      	ldr	r2, [r3, #0]
 800d02a:	683b      	ldr	r3, [r7, #0]
 800d02c:	601a      	str	r2, [r3, #0]
 800d02e:	bf00      	nop
 800d030:	370c      	adds	r7, #12
 800d032:	46bd      	mov	sp, r7
 800d034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d038:	4770      	bx	lr

0800d03a <_ZN3Mat6MatrixILt3ELt1EEC1Ef>:
Matrix<heigth, width>::Matrix(float val)
 800d03a:	b590      	push	{r4, r7, lr}
 800d03c:	b083      	sub	sp, #12
 800d03e:	af00      	add	r7, sp, #0
 800d040:	6078      	str	r0, [r7, #4]
 800d042:	ed87 0a00 	vstr	s0, [r7]
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	4618      	mov	r0, r3
 800d04a:	f000 f86c 	bl	800d126 <_ZNSt5arrayIfLj3EE5beginEv>
 800d04e:	4604      	mov	r4, r0
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	4618      	mov	r0, r3
 800d054:	f000 f873 	bl	800d13e <_ZNSt5arrayIfLj3EE3endEv>
 800d058:	4603      	mov	r3, r0
 800d05a:	edd7 7a00 	vldr	s15, [r7]
 800d05e:	eeb0 0a67 	vmov.f32	s0, s15
 800d062:	4619      	mov	r1, r3
 800d064:	4620      	mov	r0, r4
 800d066:	f000 f877 	bl	800d158 <_ZSt8for_eachIPfZN3Mat6MatrixILt3ELt1EEC4EfEUlRfE_ET0_T_S7_S6_>
}
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	4618      	mov	r0, r3
 800d06e:	370c      	adds	r7, #12
 800d070:	46bd      	mov	sp, r7
 800d072:	bd90      	pop	{r4, r7, pc}

0800d074 <_ZN3Mat6MatrixILt3ELt1EEclEtt>:

template <u_short heigth, u_short width>
float& Matrix<heigth, width>::operator()(u_short row, u_short col)
 800d074:	b580      	push	{r7, lr}
 800d076:	b084      	sub	sp, #16
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
 800d07c:	460b      	mov	r3, r1
 800d07e:	807b      	strh	r3, [r7, #2]
 800d080:	4613      	mov	r3, r2
 800d082:	803b      	strh	r3, [r7, #0]
{
	u_int index = width * row + col;
 800d084:	887a      	ldrh	r2, [r7, #2]
 800d086:	883b      	ldrh	r3, [r7, #0]
 800d088:	4413      	add	r3, r2
 800d08a:	60fb      	str	r3, [r7, #12]
	return _values[index];
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	68f9      	ldr	r1, [r7, #12]
 800d090:	4618      	mov	r0, r3
 800d092:	f000 f87d 	bl	800d190 <_ZNSt5arrayIfLj3EEixEj>
 800d096:	4603      	mov	r3, r0
}
 800d098:	4618      	mov	r0, r3
 800d09a:	3710      	adds	r7, #16
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bd80      	pop	{r7, pc}

0800d0a0 <_ZZN3Mat6MatrixILt4ELt4EEC4EfENKUlRfE_clES2_>:
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 800d0a0:	b480      	push	{r7}
 800d0a2:	b083      	sub	sp, #12
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
 800d0a8:	6039      	str	r1, [r7, #0]
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681a      	ldr	r2, [r3, #0]
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	601a      	str	r2, [r3, #0]
 800d0b2:	bf00      	nop
 800d0b4:	370c      	adds	r7, #12
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0bc:	4770      	bx	lr

0800d0be <_ZN3Mat6MatrixILt4ELt4EEC1Ef>:
Matrix<heigth, width>::Matrix(float val)
 800d0be:	b590      	push	{r4, r7, lr}
 800d0c0:	b083      	sub	sp, #12
 800d0c2:	af00      	add	r7, sp, #0
 800d0c4:	6078      	str	r0, [r7, #4]
 800d0c6:	ed87 0a00 	vstr	s0, [r7]
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	f000 f86e 	bl	800d1ae <_ZNSt5arrayIfLj16EE5beginEv>
 800d0d2:	4604      	mov	r4, r0
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	f000 f875 	bl	800d1c6 <_ZNSt5arrayIfLj16EE3endEv>
 800d0dc:	4603      	mov	r3, r0
 800d0de:	edd7 7a00 	vldr	s15, [r7]
 800d0e2:	eeb0 0a67 	vmov.f32	s0, s15
 800d0e6:	4619      	mov	r1, r3
 800d0e8:	4620      	mov	r0, r4
 800d0ea:	f000 f879 	bl	800d1e0 <_ZSt8for_eachIPfZN3Mat6MatrixILt4ELt4EEC4EfEUlRfE_ET0_T_S7_S6_>
}
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	370c      	adds	r7, #12
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bd90      	pop	{r4, r7, pc}

0800d0f8 <_ZN3Mat6MatrixILt4ELt4EEclEtt>:
float& Matrix<heigth, width>::operator()(u_short row, u_short col)
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b084      	sub	sp, #16
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
 800d100:	460b      	mov	r3, r1
 800d102:	807b      	strh	r3, [r7, #2]
 800d104:	4613      	mov	r3, r2
 800d106:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 800d108:	887b      	ldrh	r3, [r7, #2]
 800d10a:	009a      	lsls	r2, r3, #2
 800d10c:	883b      	ldrh	r3, [r7, #0]
 800d10e:	4413      	add	r3, r2
 800d110:	60fb      	str	r3, [r7, #12]
	return _values[index];
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	68f9      	ldr	r1, [r7, #12]
 800d116:	4618      	mov	r0, r3
 800d118:	f000 f87e 	bl	800d218 <_ZNSt5arrayIfLj16EEixEj>
 800d11c:	4603      	mov	r3, r0
}
 800d11e:	4618      	mov	r0, r3
 800d120:	3710      	adds	r7, #16
 800d122:	46bd      	mov	sp, r7
 800d124:	bd80      	pop	{r7, pc}

0800d126 <_ZNSt5arrayIfLj3EE5beginEv>:
      noexcept(_AT_Type::_Is_nothrow_swappable::value)
      { std::swap_ranges(begin(), end(), __other.begin()); }

      // Iterators.
      _GLIBCXX17_CONSTEXPR iterator
      begin() noexcept
 800d126:	b580      	push	{r7, lr}
 800d128:	b082      	sub	sp, #8
 800d12a:	af00      	add	r7, sp, #0
 800d12c:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	f000 f881 	bl	800d236 <_ZNSt5arrayIfLj3EE4dataEv>
 800d134:	4603      	mov	r3, r0
 800d136:	4618      	mov	r0, r3
 800d138:	3708      	adds	r7, #8
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bd80      	pop	{r7, pc}

0800d13e <_ZNSt5arrayIfLj3EE3endEv>:
      _GLIBCXX17_CONSTEXPR const_iterator
      begin() const noexcept
      { return const_iterator(data()); }

      _GLIBCXX17_CONSTEXPR iterator
      end() noexcept
 800d13e:	b580      	push	{r7, lr}
 800d140:	b082      	sub	sp, #8
 800d142:	af00      	add	r7, sp, #0
 800d144:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 800d146:	6878      	ldr	r0, [r7, #4]
 800d148:	f000 f875 	bl	800d236 <_ZNSt5arrayIfLj3EE4dataEv>
 800d14c:	4603      	mov	r3, r0
 800d14e:	330c      	adds	r3, #12
 800d150:	4618      	mov	r0, r3
 800d152:	3708      	adds	r7, #8
 800d154:	46bd      	mov	sp, r7
 800d156:	bd80      	pop	{r7, pc}

0800d158 <_ZSt8for_eachIPfZN3Mat6MatrixILt3ELt1EEC4EfEUlRfE_ET0_T_S7_S6_>:
   *  If @p __f has a return value it is ignored.
  */
  template<typename _InputIterator, typename _Function>
    _GLIBCXX20_CONSTEXPR
    _Function
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
 800d158:	b580      	push	{r7, lr}
 800d15a:	b084      	sub	sp, #16
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	60f8      	str	r0, [r7, #12]
 800d160:	60b9      	str	r1, [r7, #8]
 800d162:	ed87 0a01 	vstr	s0, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
      __glibcxx_requires_valid_range(__first, __last);
      for (; __first != __last; ++__first)
 800d166:	e007      	b.n	800d178 <_ZSt8for_eachIPfZN3Mat6MatrixILt3ELt1EEC4EfEUlRfE_ET0_T_S7_S6_+0x20>
	__f(*__first);
 800d168:	1d3b      	adds	r3, r7, #4
 800d16a:	68f9      	ldr	r1, [r7, #12]
 800d16c:	4618      	mov	r0, r3
 800d16e:	f7ff ff55 	bl	800d01c <_ZZN3Mat6MatrixILt3ELt1EEC4EfENKUlRfE_clES2_>
      for (; __first != __last; ++__first)
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	3304      	adds	r3, #4
 800d176:	60fb      	str	r3, [r7, #12]
 800d178:	68fa      	ldr	r2, [r7, #12]
 800d17a:	68bb      	ldr	r3, [r7, #8]
 800d17c:	429a      	cmp	r2, r3
 800d17e:	d1f3      	bne.n	800d168 <_ZSt8for_eachIPfZN3Mat6MatrixILt3ELt1EEC4EfEUlRfE_ET0_T_S7_S6_+0x10>
      return __f; // N.B. [alg.foreach] says std::move(f) but it's redundant.
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	ee07 3a90 	vmov	s15, r3
    }
 800d186:	eeb0 0a67 	vmov.f32	s0, s15
 800d18a:	3710      	adds	r7, #16
 800d18c:	46bd      	mov	sp, r7
 800d18e:	bd80      	pop	{r7, pc}

0800d190 <_ZNSt5arrayIfLj3EEixEj>:
      _GLIBCXX_NODISCARD constexpr bool
      empty() const noexcept { return size() == 0; }

      // Element access.
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
 800d190:	b580      	push	{r7, lr}
 800d192:	b082      	sub	sp, #8
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
 800d198:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return _AT_Type::_S_ref(_M_elems, __n);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	6839      	ldr	r1, [r7, #0]
 800d19e:	4618      	mov	r0, r3
 800d1a0:	f000 f856 	bl	800d250 <_ZNSt14__array_traitsIfLj3EE6_S_refERA3_Kfj>
 800d1a4:	4603      	mov	r3, r0
      }
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	3708      	adds	r7, #8
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}

0800d1ae <_ZNSt5arrayIfLj16EE5beginEv>:
      begin() noexcept
 800d1ae:	b580      	push	{r7, lr}
 800d1b0:	b082      	sub	sp, #8
 800d1b2:	af00      	add	r7, sp, #0
 800d1b4:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 800d1b6:	6878      	ldr	r0, [r7, #4]
 800d1b8:	f000 f859 	bl	800d26e <_ZNSt5arrayIfLj16EE4dataEv>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	4618      	mov	r0, r3
 800d1c0:	3708      	adds	r7, #8
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	bd80      	pop	{r7, pc}

0800d1c6 <_ZNSt5arrayIfLj16EE3endEv>:
      end() noexcept
 800d1c6:	b580      	push	{r7, lr}
 800d1c8:	b082      	sub	sp, #8
 800d1ca:	af00      	add	r7, sp, #0
 800d1cc:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 800d1ce:	6878      	ldr	r0, [r7, #4]
 800d1d0:	f000 f84d 	bl	800d26e <_ZNSt5arrayIfLj16EE4dataEv>
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	3340      	adds	r3, #64	; 0x40
 800d1d8:	4618      	mov	r0, r3
 800d1da:	3708      	adds	r7, #8
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	bd80      	pop	{r7, pc}

0800d1e0 <_ZSt8for_eachIPfZN3Mat6MatrixILt4ELt4EEC4EfEUlRfE_ET0_T_S7_S6_>:
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b084      	sub	sp, #16
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	60f8      	str	r0, [r7, #12]
 800d1e8:	60b9      	str	r1, [r7, #8]
 800d1ea:	ed87 0a01 	vstr	s0, [r7, #4]
      for (; __first != __last; ++__first)
 800d1ee:	e007      	b.n	800d200 <_ZSt8for_eachIPfZN3Mat6MatrixILt4ELt4EEC4EfEUlRfE_ET0_T_S7_S6_+0x20>
	__f(*__first);
 800d1f0:	1d3b      	adds	r3, r7, #4
 800d1f2:	68f9      	ldr	r1, [r7, #12]
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	f7ff ff53 	bl	800d0a0 <_ZZN3Mat6MatrixILt4ELt4EEC4EfENKUlRfE_clES2_>
      for (; __first != __last; ++__first)
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	3304      	adds	r3, #4
 800d1fe:	60fb      	str	r3, [r7, #12]
 800d200:	68fa      	ldr	r2, [r7, #12]
 800d202:	68bb      	ldr	r3, [r7, #8]
 800d204:	429a      	cmp	r2, r3
 800d206:	d1f3      	bne.n	800d1f0 <_ZSt8for_eachIPfZN3Mat6MatrixILt4ELt4EEC4EfEUlRfE_ET0_T_S7_S6_+0x10>
      return __f; // N.B. [alg.foreach] says std::move(f) but it's redundant.
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	ee07 3a90 	vmov	s15, r3
    }
 800d20e:	eeb0 0a67 	vmov.f32	s0, s15
 800d212:	3710      	adds	r7, #16
 800d214:	46bd      	mov	sp, r7
 800d216:	bd80      	pop	{r7, pc}

0800d218 <_ZNSt5arrayIfLj16EEixEj>:
      operator[](size_type __n) noexcept
 800d218:	b580      	push	{r7, lr}
 800d21a:	b082      	sub	sp, #8
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
 800d220:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	6839      	ldr	r1, [r7, #0]
 800d226:	4618      	mov	r0, r3
 800d228:	f000 f82e 	bl	800d288 <_ZNSt14__array_traitsIfLj16EE6_S_refERA16_Kfj>
 800d22c:	4603      	mov	r3, r0
      }
 800d22e:	4618      	mov	r0, r3
 800d230:	3708      	adds	r7, #8
 800d232:	46bd      	mov	sp, r7
 800d234:	bd80      	pop	{r7, pc}

0800d236 <_ZNSt5arrayIfLj3EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 800d236:	b580      	push	{r7, lr}
 800d238:	b082      	sub	sp, #8
 800d23a:	af00      	add	r7, sp, #0
 800d23c:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	4618      	mov	r0, r3
 800d242:	f000 f830 	bl	800d2a6 <_ZNSt14__array_traitsIfLj3EE6_S_ptrERA3_Kf>
 800d246:	4603      	mov	r3, r0
 800d248:	4618      	mov	r0, r3
 800d24a:	3708      	adds	r7, #8
 800d24c:	46bd      	mov	sp, r7
 800d24e:	bd80      	pop	{r7, pc}

0800d250 <_ZNSt14__array_traitsIfLj3EE6_S_refERA3_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800d250:	b480      	push	{r7}
 800d252:	b083      	sub	sp, #12
 800d254:	af00      	add	r7, sp, #0
 800d256:	6078      	str	r0, [r7, #4]
 800d258:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	009b      	lsls	r3, r3, #2
 800d25e:	687a      	ldr	r2, [r7, #4]
 800d260:	4413      	add	r3, r2
 800d262:	4618      	mov	r0, r3
 800d264:	370c      	adds	r7, #12
 800d266:	46bd      	mov	sp, r7
 800d268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26c:	4770      	bx	lr

0800d26e <_ZNSt5arrayIfLj16EE4dataEv>:
      data() noexcept
 800d26e:	b580      	push	{r7, lr}
 800d270:	b082      	sub	sp, #8
 800d272:	af00      	add	r7, sp, #0
 800d274:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	4618      	mov	r0, r3
 800d27a:	f000 f81f 	bl	800d2bc <_ZNSt14__array_traitsIfLj16EE6_S_ptrERA16_Kf>
 800d27e:	4603      	mov	r3, r0
 800d280:	4618      	mov	r0, r3
 800d282:	3708      	adds	r7, #8
 800d284:	46bd      	mov	sp, r7
 800d286:	bd80      	pop	{r7, pc}

0800d288 <_ZNSt14__array_traitsIfLj16EE6_S_refERA16_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800d288:	b480      	push	{r7}
 800d28a:	b083      	sub	sp, #12
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
 800d290:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800d292:	683b      	ldr	r3, [r7, #0]
 800d294:	009b      	lsls	r3, r3, #2
 800d296:	687a      	ldr	r2, [r7, #4]
 800d298:	4413      	add	r3, r2
 800d29a:	4618      	mov	r0, r3
 800d29c:	370c      	adds	r7, #12
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a4:	4770      	bx	lr

0800d2a6 <_ZNSt14__array_traitsIfLj3EE6_S_ptrERA3_Kf>:
      _S_ptr(const _Type& __t) noexcept
 800d2a6:	b480      	push	{r7}
 800d2a8:	b083      	sub	sp, #12
 800d2aa:	af00      	add	r7, sp, #0
 800d2ac:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	370c      	adds	r7, #12
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ba:	4770      	bx	lr

0800d2bc <_ZNSt14__array_traitsIfLj16EE6_S_ptrERA16_Kf>:
      _S_ptr(const _Type& __t) noexcept
 800d2bc:	b480      	push	{r7}
 800d2be:	b083      	sub	sp, #12
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	370c      	adds	r7, #12
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d0:	4770      	bx	lr
	...

0800d2d4 <_Z41__static_initialization_and_destruction_0ii>:
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b09a      	sub	sp, #104	; 0x68
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
 800d2dc:	6039      	str	r1, [r7, #0]
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	2b01      	cmp	r3, #1
 800d2e2:	f040 8093 	bne.w	800d40c <_Z41__static_initialization_and_destruction_0ii+0x138>
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d2ec:	4293      	cmp	r3, r2
 800d2ee:	f040 808d 	bne.w	800d40c <_Z41__static_initialization_and_destruction_0ii+0x138>
Algorithms::FusionAlgorithm Fusion{};
 800d2f2:	4848      	ldr	r0, [pc, #288]	; (800d414 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 800d2f4:	f000 fdf2 	bl	800dedc <_ZN10Algorithms15FusionAlgorithmC1Ev>
Algorithms::AHRSKalman Kalman{};
 800d2f8:	4847      	ldr	r0, [pc, #284]	; (800d418 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 800d2fa:	f7ff fd2d 	bl	800cd58 <_ZN10Algorithms10AHRSKalmanC1Ev>
Mat::Matrix<3, 1> MagCal({0, 0, 0});
 800d2fe:	f04f 0300 	mov.w	r3, #0
 800d302:	60bb      	str	r3, [r7, #8]
 800d304:	f04f 0300 	mov.w	r3, #0
 800d308:	60fb      	str	r3, [r7, #12]
 800d30a:	f04f 0300 	mov.w	r3, #0
 800d30e:	613b      	str	r3, [r7, #16]
 800d310:	f107 0308 	add.w	r3, r7, #8
 800d314:	4619      	mov	r1, r3
 800d316:	4841      	ldr	r0, [pc, #260]	; (800d41c <_Z41__static_initialization_and_destruction_0ii+0x148>)
 800d318:	f7ff fe6f 	bl	800cffa <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
Mat::Matrix<3, 1> MagRaw({0, 0, 0});
 800d31c:	f04f 0300 	mov.w	r3, #0
 800d320:	617b      	str	r3, [r7, #20]
 800d322:	f04f 0300 	mov.w	r3, #0
 800d326:	61bb      	str	r3, [r7, #24]
 800d328:	f04f 0300 	mov.w	r3, #0
 800d32c:	61fb      	str	r3, [r7, #28]
 800d32e:	f107 0314 	add.w	r3, r7, #20
 800d332:	4619      	mov	r1, r3
 800d334:	483a      	ldr	r0, [pc, #232]	; (800d420 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 800d336:	f7ff fe60 	bl	800cffa <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
Mat::Matrix<3, 1> GyroCal({0, 0, 0});
 800d33a:	f04f 0300 	mov.w	r3, #0
 800d33e:	623b      	str	r3, [r7, #32]
 800d340:	f04f 0300 	mov.w	r3, #0
 800d344:	627b      	str	r3, [r7, #36]	; 0x24
 800d346:	f04f 0300 	mov.w	r3, #0
 800d34a:	62bb      	str	r3, [r7, #40]	; 0x28
 800d34c:	f107 0320 	add.w	r3, r7, #32
 800d350:	4619      	mov	r1, r3
 800d352:	4834      	ldr	r0, [pc, #208]	; (800d424 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 800d354:	f7ff fe51 	bl	800cffa <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
Mat::Matrix<3, 1> GyroRaw({0, 0, 0});
 800d358:	f04f 0300 	mov.w	r3, #0
 800d35c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d35e:	f04f 0300 	mov.w	r3, #0
 800d362:	633b      	str	r3, [r7, #48]	; 0x30
 800d364:	f04f 0300 	mov.w	r3, #0
 800d368:	637b      	str	r3, [r7, #52]	; 0x34
 800d36a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d36e:	4619      	mov	r1, r3
 800d370:	482d      	ldr	r0, [pc, #180]	; (800d428 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 800d372:	f7ff fe42 	bl	800cffa <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
Mat::Matrix<3, 1> AccCal({0, 0, 0});
 800d376:	f04f 0300 	mov.w	r3, #0
 800d37a:	63bb      	str	r3, [r7, #56]	; 0x38
 800d37c:	f04f 0300 	mov.w	r3, #0
 800d380:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d382:	f04f 0300 	mov.w	r3, #0
 800d386:	643b      	str	r3, [r7, #64]	; 0x40
 800d388:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d38c:	4619      	mov	r1, r3
 800d38e:	4827      	ldr	r0, [pc, #156]	; (800d42c <_Z41__static_initialization_and_destruction_0ii+0x158>)
 800d390:	f7ff fe33 	bl	800cffa <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
Mat::Matrix<3, 1> AccRaw({0, 0, 0});
 800d394:	f04f 0300 	mov.w	r3, #0
 800d398:	647b      	str	r3, [r7, #68]	; 0x44
 800d39a:	f04f 0300 	mov.w	r3, #0
 800d39e:	64bb      	str	r3, [r7, #72]	; 0x48
 800d3a0:	f04f 0300 	mov.w	r3, #0
 800d3a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d3a6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d3aa:	4619      	mov	r1, r3
 800d3ac:	4820      	ldr	r0, [pc, #128]	; (800d430 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 800d3ae:	f7ff fe24 	bl	800cffa <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
Mat::Matrix<3, 1> GyroRawMean({0, 0, 0});
 800d3b2:	f04f 0300 	mov.w	r3, #0
 800d3b6:	653b      	str	r3, [r7, #80]	; 0x50
 800d3b8:	f04f 0300 	mov.w	r3, #0
 800d3bc:	657b      	str	r3, [r7, #84]	; 0x54
 800d3be:	f04f 0300 	mov.w	r3, #0
 800d3c2:	65bb      	str	r3, [r7, #88]	; 0x58
 800d3c4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d3c8:	4619      	mov	r1, r3
 800d3ca:	481a      	ldr	r0, [pc, #104]	; (800d434 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 800d3cc:	f7ff fe15 	bl	800cffa <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
Mat::Matrix<3, 1> GyroCalMean({0, 0, 0});
 800d3d0:	f04f 0300 	mov.w	r3, #0
 800d3d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d3d6:	f04f 0300 	mov.w	r3, #0
 800d3da:	663b      	str	r3, [r7, #96]	; 0x60
 800d3dc:	f04f 0300 	mov.w	r3, #0
 800d3e0:	667b      	str	r3, [r7, #100]	; 0x64
 800d3e2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800d3e6:	4619      	mov	r1, r3
 800d3e8:	4813      	ldr	r0, [pc, #76]	; (800d438 <_Z41__static_initialization_and_destruction_0ii+0x164>)
 800d3ea:	f7ff fe06 	bl	800cffa <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
Mat::Matrix<3, 1> angle = 0.0f;
 800d3ee:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800d43c <_Z41__static_initialization_and_destruction_0ii+0x168>
 800d3f2:	4813      	ldr	r0, [pc, #76]	; (800d440 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 800d3f4:	f7ff fe21 	bl	800d03a <_ZN3Mat6MatrixILt3ELt1EEC1Ef>
Mat::Matrix<3, 1> speed = 0.0f;
 800d3f8:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800d43c <_Z41__static_initialization_and_destruction_0ii+0x168>
 800d3fc:	4811      	ldr	r0, [pc, #68]	; (800d444 <_Z41__static_initialization_and_destruction_0ii+0x170>)
 800d3fe:	f7ff fe1c 	bl	800d03a <_ZN3Mat6MatrixILt3ELt1EEC1Ef>
Mat::Matrix<3, 1> meanMag = 0.0f;
 800d402:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800d43c <_Z41__static_initialization_and_destruction_0ii+0x168>
 800d406:	4810      	ldr	r0, [pc, #64]	; (800d448 <_Z41__static_initialization_and_destruction_0ii+0x174>)
 800d408:	f7ff fe17 	bl	800d03a <_ZN3Mat6MatrixILt3ELt1EEC1Ef>
}
 800d40c:	bf00      	nop
 800d40e:	3768      	adds	r7, #104	; 0x68
 800d410:	46bd      	mov	sp, r7
 800d412:	bd80      	pop	{r7, pc}
 800d414:	24004cf0 	.word	0x24004cf0
 800d418:	24004d34 	.word	0x24004d34
 800d41c:	24004de8 	.word	0x24004de8
 800d420:	24004df4 	.word	0x24004df4
 800d424:	24004e00 	.word	0x24004e00
 800d428:	24004e0c 	.word	0x24004e0c
 800d42c:	24004e18 	.word	0x24004e18
 800d430:	24004e24 	.word	0x24004e24
 800d434:	24004e30 	.word	0x24004e30
 800d438:	24004e3c 	.word	0x24004e3c
 800d43c:	00000000 	.word	0x00000000
 800d440:	24004e48 	.word	0x24004e48
 800d444:	24004e54 	.word	0x24004e54
 800d448:	24004e60 	.word	0x24004e60

0800d44c <_GLOBAL__sub_I_Fusion>:
 800d44c:	b580      	push	{r7, lr}
 800d44e:	af00      	add	r7, sp, #0
 800d450:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d454:	2001      	movs	r0, #1
 800d456:	f7ff ff3d 	bl	800d2d4 <_Z41__static_initialization_and_destruction_0ii>
 800d45a:	bd80      	pop	{r7, pc}

0800d45c <_Z12CalibrateMagRKN3Mat6MatrixILt3ELt1EEE>:
						0.0, 8.238f * DEG_2_RAD, 0.0,
						0.0, 0.0, 8.193f * DEG_2_RAD});
const Matrix<3, 1> GyroB({-0.0480, 0.04522, -0.004564});

Matrix<3, 1> CalibrateMag(const Matrix<3, 1>& MagVec)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b08c      	sub	sp, #48	; 0x30
 800d460:	af00      	add	r7, sp, #0
 800d462:	6178      	str	r0, [r7, #20]
	return (MagA * (MagVec - MagB));
 800d464:	4919      	ldr	r1, [pc, #100]	; (800d4cc <_Z12CalibrateMagRKN3Mat6MatrixILt3ELt1EEE+0x70>)
 800d466:	6978      	ldr	r0, [r7, #20]
 800d468:	f000 f885 	bl	800d576 <_ZNK3Mat6MatrixILt3ELt1EEmiERKS1_>
 800d46c:	eef0 6a40 	vmov.f32	s13, s0
 800d470:	eeb0 7a60 	vmov.f32	s14, s1
 800d474:	eef0 7a41 	vmov.f32	s15, s2
 800d478:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 800d47c:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 800d480:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 800d484:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d488:	4619      	mov	r1, r3
 800d48a:	4811      	ldr	r0, [pc, #68]	; (800d4d0 <_Z12CalibrateMagRKN3Mat6MatrixILt3ELt1EEE+0x74>)
 800d48c:	f000 f89d 	bl	800d5ca <_ZNK3Mat6MatrixILt3ELt3EEmlILt1EEENS0_ILt3EXT_EEERKS3_>
 800d490:	eef0 6a40 	vmov.f32	s13, s0
 800d494:	eeb0 7a60 	vmov.f32	s14, s1
 800d498:	eef0 7a41 	vmov.f32	s15, s2
 800d49c:	edc7 6a06 	vstr	s13, [r7, #24]
 800d4a0:	ed87 7a07 	vstr	s14, [r7, #28]
 800d4a4:	edc7 7a08 	vstr	s15, [r7, #32]
 800d4a8:	69b9      	ldr	r1, [r7, #24]
 800d4aa:	69fa      	ldr	r2, [r7, #28]
 800d4ac:	6a3b      	ldr	r3, [r7, #32]
 800d4ae:	ee06 1a90 	vmov	s13, r1
 800d4b2:	ee07 2a10 	vmov	s14, r2
 800d4b6:	ee07 3a90 	vmov	s15, r3
}
 800d4ba:	eeb0 0a66 	vmov.f32	s0, s13
 800d4be:	eef0 0a47 	vmov.f32	s1, s14
 800d4c2:	eeb0 1a67 	vmov.f32	s2, s15
 800d4c6:	3730      	adds	r7, #48	; 0x30
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	bd80      	pop	{r7, pc}
 800d4cc:	24004e90 	.word	0x24004e90
 800d4d0:	24004e6c 	.word	0x24004e6c

0800d4d4 <_Z12CalibrateAccRKN3Mat6MatrixILt3ELt1EEE>:
Matrix<3, 1> CalibrateAcc(const Matrix<3, 1>& AccVec)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b08c      	sub	sp, #48	; 0x30
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6178      	str	r0, [r7, #20]
	return (AccA * (AccVec - AccB));
 800d4dc:	4919      	ldr	r1, [pc, #100]	; (800d544 <_Z12CalibrateAccRKN3Mat6MatrixILt3ELt1EEE+0x70>)
 800d4de:	6978      	ldr	r0, [r7, #20]
 800d4e0:	f000 f849 	bl	800d576 <_ZNK3Mat6MatrixILt3ELt1EEmiERKS1_>
 800d4e4:	eef0 6a40 	vmov.f32	s13, s0
 800d4e8:	eeb0 7a60 	vmov.f32	s14, s1
 800d4ec:	eef0 7a41 	vmov.f32	s15, s2
 800d4f0:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 800d4f4:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 800d4f8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 800d4fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d500:	4619      	mov	r1, r3
 800d502:	4811      	ldr	r0, [pc, #68]	; (800d548 <_Z12CalibrateAccRKN3Mat6MatrixILt3ELt1EEE+0x74>)
 800d504:	f000 f861 	bl	800d5ca <_ZNK3Mat6MatrixILt3ELt3EEmlILt1EEENS0_ILt3EXT_EEERKS3_>
 800d508:	eef0 6a40 	vmov.f32	s13, s0
 800d50c:	eeb0 7a60 	vmov.f32	s14, s1
 800d510:	eef0 7a41 	vmov.f32	s15, s2
 800d514:	edc7 6a06 	vstr	s13, [r7, #24]
 800d518:	ed87 7a07 	vstr	s14, [r7, #28]
 800d51c:	edc7 7a08 	vstr	s15, [r7, #32]
 800d520:	69b9      	ldr	r1, [r7, #24]
 800d522:	69fa      	ldr	r2, [r7, #28]
 800d524:	6a3b      	ldr	r3, [r7, #32]
 800d526:	ee06 1a90 	vmov	s13, r1
 800d52a:	ee07 2a10 	vmov	s14, r2
 800d52e:	ee07 3a90 	vmov	s15, r3
}
 800d532:	eeb0 0a66 	vmov.f32	s0, s13
 800d536:	eef0 0a47 	vmov.f32	s1, s14
 800d53a:	eeb0 1a67 	vmov.f32	s2, s15
 800d53e:	3730      	adds	r7, #48	; 0x30
 800d540:	46bd      	mov	sp, r7
 800d542:	bd80      	pop	{r7, pc}
 800d544:	24004ec0 	.word	0x24004ec0
 800d548:	24004e9c 	.word	0x24004e9c

0800d54c <_ZN3Mat6MatrixILt3ELt3EEC1ERKSt5arrayIfLj9EE>:
Matrix<heigth, width>::Matrix(const std::array<float, heigth*width>& values): _values(values) {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 800d54c:	b4b0      	push	{r4, r5, r7}
 800d54e:	b083      	sub	sp, #12
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
 800d554:	6039      	str	r1, [r7, #0]
 800d556:	687a      	ldr	r2, [r7, #4]
 800d558:	683b      	ldr	r3, [r7, #0]
 800d55a:	4614      	mov	r4, r2
 800d55c:	461d      	mov	r5, r3
 800d55e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d560:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d562:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d564:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d566:	682b      	ldr	r3, [r5, #0]
 800d568:	6023      	str	r3, [r4, #0]
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	4618      	mov	r0, r3
 800d56e:	370c      	adds	r7, #12
 800d570:	46bd      	mov	sp, r7
 800d572:	bcb0      	pop	{r4, r5, r7}
 800d574:	4770      	bx	lr

0800d576 <_ZNK3Mat6MatrixILt3ELt1EEmiERKS1_>:
	result += val;
	return result;
}

template <u_short heigth, u_short width>
inline Matrix<heigth, width> Matrix<heigth, width>::operator-(const Matrix<heigth, width> &other) const
 800d576:	b580      	push	{r7, lr}
 800d578:	b08c      	sub	sp, #48	; 0x30
 800d57a:	af00      	add	r7, sp, #0
 800d57c:	6178      	str	r0, [r7, #20]
 800d57e:	6139      	str	r1, [r7, #16]
{
    Matrix<heigth, width> result = *this;
 800d580:	697a      	ldr	r2, [r7, #20]
 800d582:	f107 0318 	add.w	r3, r7, #24
 800d586:	ca07      	ldmia	r2, {r0, r1, r2}
 800d588:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	result -= other;
 800d58c:	f107 0318 	add.w	r3, r7, #24
 800d590:	6939      	ldr	r1, [r7, #16]
 800d592:	4618      	mov	r0, r3
 800d594:	f000 f843 	bl	800d61e <_ZN3Mat6MatrixILt3ELt1EEmIERKS1_>
	return result;
 800d598:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d59c:	f107 0218 	add.w	r2, r7, #24
 800d5a0:	ca07      	ldmia	r2, {r0, r1, r2}
 800d5a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d5a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d5a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d5aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5ac:	ee06 1a90 	vmov	s13, r1
 800d5b0:	ee07 2a10 	vmov	s14, r2
 800d5b4:	ee07 3a90 	vmov	s15, r3
}
 800d5b8:	eeb0 0a66 	vmov.f32	s0, s13
 800d5bc:	eef0 0a47 	vmov.f32	s1, s14
 800d5c0:	eeb0 1a67 	vmov.f32	s2, s15
 800d5c4:	3730      	adds	r7, #48	; 0x30
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	bd80      	pop	{r7, pc}

0800d5ca <_ZNK3Mat6MatrixILt3ELt3EEmlILt1EEENS0_ILt3EXT_EEERKS3_>:
	result *= val;
	return result;
}

template <u_short heigth, u_short width> template <u_short other_width>
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 800d5ca:	b580      	push	{r7, lr}
 800d5cc:	b08c      	sub	sp, #48	; 0x30
 800d5ce:	af00      	add	r7, sp, #0
 800d5d0:	6178      	str	r0, [r7, #20]
 800d5d2:	6139      	str	r1, [r7, #16]
{
	Matrix<heigth, other_width> result;
 800d5d4:	f107 0318 	add.w	r3, r7, #24
 800d5d8:	4618      	mov	r0, r3
 800d5da:	f000 f855 	bl	800d688 <_ZN3Mat6MatrixILt3ELt1EEC1Ev>
	Multiply(other, result);
 800d5de:	f107 0318 	add.w	r3, r7, #24
 800d5e2:	461a      	mov	r2, r3
 800d5e4:	6939      	ldr	r1, [r7, #16]
 800d5e6:	6978      	ldr	r0, [r7, #20]
 800d5e8:	f000 f859 	bl	800d69e <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_>
	return result;
 800d5ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d5f0:	f107 0218 	add.w	r2, r7, #24
 800d5f4:	ca07      	ldmia	r2, {r0, r1, r2}
 800d5f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d5fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d5fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d5fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d600:	ee06 1a90 	vmov	s13, r1
 800d604:	ee07 2a10 	vmov	s14, r2
 800d608:	ee07 3a90 	vmov	s15, r3
}
 800d60c:	eeb0 0a66 	vmov.f32	s0, s13
 800d610:	eef0 0a47 	vmov.f32	s1, s14
 800d614:	eeb0 1a67 	vmov.f32	s2, s15
 800d618:	3730      	adds	r7, #48	; 0x30
 800d61a:	46bd      	mov	sp, r7
 800d61c:	bd80      	pop	{r7, pc}

0800d61e <_ZN3Mat6MatrixILt3ELt1EEmIERKS1_>:
inline Matrix<heigth, width> &Matrix<heigth, width>::operator-=(const Matrix<heigth, width> &other)
 800d61e:	b580      	push	{r7, lr}
 800d620:	ed2d 8b02 	vpush	{d8}
 800d624:	b084      	sub	sp, #16
 800d626:	af00      	add	r7, sp, #0
 800d628:	6078      	str	r0, [r7, #4]
 800d62a:	6039      	str	r1, [r7, #0]
    for(u_int i = 0; i < _values.size(); ++i) _values[i] -= other._values[i];
 800d62c:	2300      	movs	r3, #0
 800d62e:	60fb      	str	r3, [r7, #12]
 800d630:	e016      	b.n	800d660 <_ZN3Mat6MatrixILt3ELt1EEmIERKS1_+0x42>
 800d632:	683b      	ldr	r3, [r7, #0]
 800d634:	68f9      	ldr	r1, [r7, #12]
 800d636:	4618      	mov	r0, r3
 800d638:	f000 f8f0 	bl	800d81c <_ZNKSt5arrayIfLj3EEixEj>
 800d63c:	4603      	mov	r3, r0
 800d63e:	ed93 8a00 	vldr	s16, [r3]
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	68f9      	ldr	r1, [r7, #12]
 800d646:	4618      	mov	r0, r3
 800d648:	f7ff fda2 	bl	800d190 <_ZNSt5arrayIfLj3EEixEj>
 800d64c:	4603      	mov	r3, r0
 800d64e:	edd3 7a00 	vldr	s15, [r3]
 800d652:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800d656:	edc3 7a00 	vstr	s15, [r3]
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	3301      	adds	r3, #1
 800d65e:	60fb      	str	r3, [r7, #12]
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	4618      	mov	r0, r3
 800d664:	f000 f8cf 	bl	800d806 <_ZNKSt5arrayIfLj3EE4sizeEv>
 800d668:	4602      	mov	r2, r0
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	4293      	cmp	r3, r2
 800d66e:	bf34      	ite	cc
 800d670:	2301      	movcc	r3, #1
 800d672:	2300      	movcs	r3, #0
 800d674:	b2db      	uxtb	r3, r3
 800d676:	2b00      	cmp	r3, #0
 800d678:	d1db      	bne.n	800d632 <_ZN3Mat6MatrixILt3ELt1EEmIERKS1_+0x14>
	return *this;
 800d67a:	687b      	ldr	r3, [r7, #4]
}
 800d67c:	4618      	mov	r0, r3
 800d67e:	3710      	adds	r7, #16
 800d680:	46bd      	mov	sp, r7
 800d682:	ecbd 8b02 	vpop	{d8}
 800d686:	bd80      	pop	{r7, pc}

0800d688 <_ZN3Mat6MatrixILt3ELt1EEC1Ev>:
Matrix<heigth, width>::Matrix() {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 800d688:	b480      	push	{r7}
 800d68a:	b083      	sub	sp, #12
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	4618      	mov	r0, r3
 800d694:	370c      	adds	r7, #12
 800d696:	46bd      	mov	sp, r7
 800d698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69c:	4770      	bx	lr

0800d69e <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_>:

template <u_short heigth, u_short width> template <u_short other_width>
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 800d69e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6a0:	b095      	sub	sp, #84	; 0x54
 800d6a2:	af00      	add	r7, sp, #0
 800d6a4:	60f8      	str	r0, [r7, #12]
 800d6a6:	60b9      	str	r1, [r7, #8]
 800d6a8:	607a      	str	r2, [r7, #4]
{
	std::array<Row, other_width> other_columns;
	std::array<Row, heigth> this_rows;
	for(u_short row = 0; row < heigth; ++row)
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800d6b0:	e02d      	b.n	800d70e <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0x70>
		for(u_short col = 0; col < width; ++col)
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800d6b8:	e020      	b.n	800d6fc <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 800d6ba:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800d6be:	f107 0314 	add.w	r3, r7, #20
 800d6c2:	4611      	mov	r1, r2
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	f000 f8b8 	bl	800d83a <_ZNSt5arrayIS_IfLj3EELj3EEixEj>
 800d6ca:	4602      	mov	r2, r0
 800d6cc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800d6d0:	4619      	mov	r1, r3
 800d6d2:	4610      	mov	r0, r2
 800d6d4:	f7ff fd5c 	bl	800d190 <_ZNSt5arrayIfLj3EEixEj>
 800d6d8:	4604      	mov	r4, r0
 800d6da:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800d6de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d6e2:	4619      	mov	r1, r3
 800d6e4:	68f8      	ldr	r0, [r7, #12]
 800d6e6:	f000 f8b7 	bl	800d858 <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 800d6ea:	eef0 7a40 	vmov.f32	s15, s0
 800d6ee:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 800d6f2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800d6f6:	3301      	adds	r3, #1
 800d6f8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800d6fc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800d700:	2b02      	cmp	r3, #2
 800d702:	d9da      	bls.n	800d6ba <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 800d704:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d708:	3301      	adds	r3, #1
 800d70a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800d70e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d712:	2b02      	cmp	r3, #2
 800d714:	d9cd      	bls.n	800d6b2 <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0x14>

	for(u_short col = 0; col < other_width; ++col)
 800d716:	2300      	movs	r3, #0
 800d718:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800d71c:	e02d      	b.n	800d77a <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0xdc>
		for(u_short row = 0; row < width; ++row)
 800d71e:	2300      	movs	r3, #0
 800d720:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800d724:	e020      	b.n	800d768 <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0xca>
			other_columns[col][row] = other(row, col);
 800d726:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800d72a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d72e:	4611      	mov	r1, r2
 800d730:	4618      	mov	r0, r3
 800d732:	f000 f8ae 	bl	800d892 <_ZNSt5arrayIS_IfLj3EELj1EEixEj>
 800d736:	4602      	mov	r2, r0
 800d738:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800d73c:	4619      	mov	r1, r3
 800d73e:	4610      	mov	r0, r2
 800d740:	f7ff fd26 	bl	800d190 <_ZNSt5arrayIfLj3EEixEj>
 800d744:	4604      	mov	r4, r0
 800d746:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800d74a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800d74e:	4619      	mov	r1, r3
 800d750:	68b8      	ldr	r0, [r7, #8]
 800d752:	f000 f8ad 	bl	800d8b0 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 800d756:	eef0 7a40 	vmov.f32	s15, s0
 800d75a:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 800d75e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800d762:	3301      	adds	r3, #1
 800d764:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800d768:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800d76c:	2b02      	cmp	r3, #2
 800d76e:	d9da      	bls.n	800d726 <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0x88>
	for(u_short col = 0; col < other_width; ++col)
 800d770:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800d774:	3301      	adds	r3, #1
 800d776:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800d77a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d0cd      	beq.n	800d71e <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0x80>

	for(u_short row = 0; row < heigth; ++row)
 800d782:	2300      	movs	r3, #0
 800d784:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800d788:	e034      	b.n	800d7f4 <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0x156>
		for(u_short col = 0; col < other_width; ++col)
 800d78a:	2300      	movs	r3, #0
 800d78c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800d790:	e027      	b.n	800d7e2 <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 800d792:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800d796:	f107 0314 	add.w	r3, r7, #20
 800d79a:	4611      	mov	r1, r2
 800d79c:	4618      	mov	r0, r3
 800d79e:	f000 f84c 	bl	800d83a <_ZNSt5arrayIS_IfLj3EELj3EEixEj>
 800d7a2:	4605      	mov	r5, r0
 800d7a4:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800d7a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d7ac:	4611      	mov	r1, r2
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	f000 f86f 	bl	800d892 <_ZNSt5arrayIS_IfLj3EELj1EEixEj>
 800d7b4:	4606      	mov	r6, r0
 800d7b6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800d7ba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d7be:	4619      	mov	r1, r3
 800d7c0:	6878      	ldr	r0, [r7, #4]
 800d7c2:	f7ff fc57 	bl	800d074 <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d7c6:	4604      	mov	r4, r0
 800d7c8:	4631      	mov	r1, r6
 800d7ca:	4628      	mov	r0, r5
 800d7cc:	f000 f88a 	bl	800d8e4 <_ZN3Mat13Multiply_rowsILj3EEEfRKSt5arrayIfXT_EES4_>
 800d7d0:	eef0 7a40 	vmov.f32	s15, s0
 800d7d4:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 800d7d8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800d7dc:	3301      	adds	r3, #1
 800d7de:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800d7e2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d0d3      	beq.n	800d792 <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 800d7ea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d7ee:	3301      	adds	r3, #1
 800d7f0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800d7f4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d7f8:	2b02      	cmp	r3, #2
 800d7fa:	d9c6      	bls.n	800d78a <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0xec>
}
 800d7fc:	bf00      	nop
 800d7fe:	bf00      	nop
 800d800:	3754      	adds	r7, #84	; 0x54
 800d802:	46bd      	mov	sp, r7
 800d804:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d806 <_ZNKSt5arrayIfLj3EE4sizeEv>:
      size() const noexcept { return _Nm; }
 800d806:	b480      	push	{r7}
 800d808:	b083      	sub	sp, #12
 800d80a:	af00      	add	r7, sp, #0
 800d80c:	6078      	str	r0, [r7, #4]
 800d80e:	2303      	movs	r3, #3
 800d810:	4618      	mov	r0, r3
 800d812:	370c      	adds	r7, #12
 800d814:	46bd      	mov	sp, r7
 800d816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81a:	4770      	bx	lr

0800d81c <_ZNKSt5arrayIfLj3EEixEj>:
      operator[](size_type __n) const noexcept
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b082      	sub	sp, #8
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
 800d824:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	6839      	ldr	r1, [r7, #0]
 800d82a:	4618      	mov	r0, r3
 800d82c:	f7ff fd10 	bl	800d250 <_ZNSt14__array_traitsIfLj3EE6_S_refERA3_Kfj>
 800d830:	4603      	mov	r3, r0
      }
 800d832:	4618      	mov	r0, r3
 800d834:	3708      	adds	r7, #8
 800d836:	46bd      	mov	sp, r7
 800d838:	bd80      	pop	{r7, pc}

0800d83a <_ZNSt5arrayIS_IfLj3EELj3EEixEj>:
      operator[](size_type __n) noexcept
 800d83a:	b580      	push	{r7, lr}
 800d83c:	b082      	sub	sp, #8
 800d83e:	af00      	add	r7, sp, #0
 800d840:	6078      	str	r0, [r7, #4]
 800d842:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	6839      	ldr	r1, [r7, #0]
 800d848:	4618      	mov	r0, r3
 800d84a:	f000 f87e 	bl	800d94a <_ZNSt14__array_traitsISt5arrayIfLj3EELj3EE6_S_refERA3_KS1_j>
 800d84e:	4603      	mov	r3, r0
      }
 800d850:	4618      	mov	r0, r3
 800d852:	3708      	adds	r7, #8
 800d854:	46bd      	mov	sp, r7
 800d856:	bd80      	pop	{r7, pc}

0800d858 <_ZNK3Mat6MatrixILt3ELt3EEclEtt>:
float Matrix<heigth, width>::operator()(u_short row, u_short col) const
 800d858:	b580      	push	{r7, lr}
 800d85a:	b084      	sub	sp, #16
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
 800d860:	460b      	mov	r3, r1
 800d862:	807b      	strh	r3, [r7, #2]
 800d864:	4613      	mov	r3, r2
 800d866:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 800d868:	887a      	ldrh	r2, [r7, #2]
 800d86a:	4613      	mov	r3, r2
 800d86c:	005b      	lsls	r3, r3, #1
 800d86e:	441a      	add	r2, r3
 800d870:	883b      	ldrh	r3, [r7, #0]
 800d872:	4413      	add	r3, r2
 800d874:	60fb      	str	r3, [r7, #12]
	return _values[index];
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	68f9      	ldr	r1, [r7, #12]
 800d87a:	4618      	mov	r0, r3
 800d87c:	f000 f877 	bl	800d96e <_ZNKSt5arrayIfLj9EEixEj>
 800d880:	4603      	mov	r3, r0
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	ee07 3a90 	vmov	s15, r3
}
 800d888:	eeb0 0a67 	vmov.f32	s0, s15
 800d88c:	3710      	adds	r7, #16
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd80      	pop	{r7, pc}

0800d892 <_ZNSt5arrayIS_IfLj3EELj1EEixEj>:
      operator[](size_type __n) noexcept
 800d892:	b580      	push	{r7, lr}
 800d894:	b082      	sub	sp, #8
 800d896:	af00      	add	r7, sp, #0
 800d898:	6078      	str	r0, [r7, #4]
 800d89a:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	6839      	ldr	r1, [r7, #0]
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	f000 f873 	bl	800d98c <_ZNSt14__array_traitsISt5arrayIfLj3EELj1EE6_S_refERA1_KS1_j>
 800d8a6:	4603      	mov	r3, r0
      }
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	3708      	adds	r7, #8
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}

0800d8b0 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>:
float Matrix<heigth, width>::operator()(u_short row, u_short col) const
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b084      	sub	sp, #16
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
 800d8b8:	460b      	mov	r3, r1
 800d8ba:	807b      	strh	r3, [r7, #2]
 800d8bc:	4613      	mov	r3, r2
 800d8be:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 800d8c0:	887a      	ldrh	r2, [r7, #2]
 800d8c2:	883b      	ldrh	r3, [r7, #0]
 800d8c4:	4413      	add	r3, r2
 800d8c6:	60fb      	str	r3, [r7, #12]
	return _values[index];
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	68f9      	ldr	r1, [r7, #12]
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	f7ff ffa5 	bl	800d81c <_ZNKSt5arrayIfLj3EEixEj>
 800d8d2:	4603      	mov	r3, r0
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	ee07 3a90 	vmov	s15, r3
}
 800d8da:	eeb0 0a67 	vmov.f32	s0, s15
 800d8de:	3710      	adds	r7, #16
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	bd80      	pop	{r7, pc}

0800d8e4 <_ZN3Mat13Multiply_rowsILj3EEEfRKSt5arrayIfXT_EES4_>:
float Multiply_rows(const std::array<float, length>& A, const std::array<float, length>& B)
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	ed2d 8b02 	vpush	{d8}
 800d8ea:	b084      	sub	sp, #16
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
 800d8f0:	6039      	str	r1, [r7, #0]
    float result = 0.0f;
 800d8f2:	f04f 0300 	mov.w	r3, #0
 800d8f6:	60fb      	str	r3, [r7, #12]
	for(u_int i = 0; i < length; ++i) result += A[i]*B[i];
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	60bb      	str	r3, [r7, #8]
 800d8fc:	e018      	b.n	800d930 <_ZN3Mat13Multiply_rowsILj3EEEfRKSt5arrayIfXT_EES4_+0x4c>
 800d8fe:	68b9      	ldr	r1, [r7, #8]
 800d900:	6878      	ldr	r0, [r7, #4]
 800d902:	f7ff ff8b 	bl	800d81c <_ZNKSt5arrayIfLj3EEixEj>
 800d906:	4603      	mov	r3, r0
 800d908:	ed93 8a00 	vldr	s16, [r3]
 800d90c:	68b9      	ldr	r1, [r7, #8]
 800d90e:	6838      	ldr	r0, [r7, #0]
 800d910:	f7ff ff84 	bl	800d81c <_ZNKSt5arrayIfLj3EEixEj>
 800d914:	4603      	mov	r3, r0
 800d916:	edd3 7a00 	vldr	s15, [r3]
 800d91a:	ee68 7a27 	vmul.f32	s15, s16, s15
 800d91e:	ed97 7a03 	vldr	s14, [r7, #12]
 800d922:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d926:	edc7 7a03 	vstr	s15, [r7, #12]
 800d92a:	68bb      	ldr	r3, [r7, #8]
 800d92c:	3301      	adds	r3, #1
 800d92e:	60bb      	str	r3, [r7, #8]
 800d930:	68bb      	ldr	r3, [r7, #8]
 800d932:	2b02      	cmp	r3, #2
 800d934:	d9e3      	bls.n	800d8fe <_ZN3Mat13Multiply_rowsILj3EEEfRKSt5arrayIfXT_EES4_+0x1a>
	return result;
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	ee07 3a90 	vmov	s15, r3
}
 800d93c:	eeb0 0a67 	vmov.f32	s0, s15
 800d940:	3710      	adds	r7, #16
 800d942:	46bd      	mov	sp, r7
 800d944:	ecbd 8b02 	vpop	{d8}
 800d948:	bd80      	pop	{r7, pc}

0800d94a <_ZNSt14__array_traitsISt5arrayIfLj3EELj3EE6_S_refERA3_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800d94a:	b480      	push	{r7}
 800d94c:	b083      	sub	sp, #12
 800d94e:	af00      	add	r7, sp, #0
 800d950:	6078      	str	r0, [r7, #4]
 800d952:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800d954:	683a      	ldr	r2, [r7, #0]
 800d956:	4613      	mov	r3, r2
 800d958:	005b      	lsls	r3, r3, #1
 800d95a:	4413      	add	r3, r2
 800d95c:	009b      	lsls	r3, r3, #2
 800d95e:	687a      	ldr	r2, [r7, #4]
 800d960:	4413      	add	r3, r2
 800d962:	4618      	mov	r0, r3
 800d964:	370c      	adds	r7, #12
 800d966:	46bd      	mov	sp, r7
 800d968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96c:	4770      	bx	lr

0800d96e <_ZNKSt5arrayIfLj9EEixEj>:
      operator[](size_type __n) const noexcept
 800d96e:	b580      	push	{r7, lr}
 800d970:	b082      	sub	sp, #8
 800d972:	af00      	add	r7, sp, #0
 800d974:	6078      	str	r0, [r7, #4]
 800d976:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	6839      	ldr	r1, [r7, #0]
 800d97c:	4618      	mov	r0, r3
 800d97e:	f000 f817 	bl	800d9b0 <_ZNSt14__array_traitsIfLj9EE6_S_refERA9_Kfj>
 800d982:	4603      	mov	r3, r0
      }
 800d984:	4618      	mov	r0, r3
 800d986:	3708      	adds	r7, #8
 800d988:	46bd      	mov	sp, r7
 800d98a:	bd80      	pop	{r7, pc}

0800d98c <_ZNSt14__array_traitsISt5arrayIfLj3EELj1EE6_S_refERA1_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800d98c:	b480      	push	{r7}
 800d98e:	b083      	sub	sp, #12
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
 800d994:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800d996:	683a      	ldr	r2, [r7, #0]
 800d998:	4613      	mov	r3, r2
 800d99a:	005b      	lsls	r3, r3, #1
 800d99c:	4413      	add	r3, r2
 800d99e:	009b      	lsls	r3, r3, #2
 800d9a0:	687a      	ldr	r2, [r7, #4]
 800d9a2:	4413      	add	r3, r2
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	370c      	adds	r7, #12
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ae:	4770      	bx	lr

0800d9b0 <_ZNSt14__array_traitsIfLj9EE6_S_refERA9_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800d9b0:	b480      	push	{r7}
 800d9b2:	b083      	sub	sp, #12
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
 800d9b8:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	009b      	lsls	r3, r3, #2
 800d9be:	687a      	ldr	r2, [r7, #4]
 800d9c0:	4413      	add	r3, r2
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	370c      	adds	r7, #12
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9cc:	4770      	bx	lr
	...

0800d9d0 <_Z41__static_initialization_and_destruction_0ii>:

Matrix<3, 1> CalibrateGyro(const Matrix<3, 1>& GyroVec)
{
	return (GyroA * (GyroVec - GyroB));
}
 800d9d0:	b5b0      	push	{r4, r5, r7, lr}
 800d9d2:	b0a6      	sub	sp, #152	; 0x98
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
 800d9d8:	6039      	str	r1, [r7, #0]
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	2b01      	cmp	r3, #1
 800d9de:	d158      	bne.n	800da92 <_Z41__static_initialization_and_destruction_0ii+0xc2>
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d9e6:	4293      	cmp	r3, r2
 800d9e8:	d153      	bne.n	800da92 <_Z41__static_initialization_and_destruction_0ii+0xc2>
						0.004f, -0.005f, 1.107f});
 800d9ea:	4b2c      	ldr	r3, [pc, #176]	; (800da9c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 800d9ec:	f107 0408 	add.w	r4, r7, #8
 800d9f0:	461d      	mov	r5, r3
 800d9f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d9f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d9f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d9f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d9fa:	682b      	ldr	r3, [r5, #0]
 800d9fc:	6023      	str	r3, [r4, #0]
 800d9fe:	f107 0308 	add.w	r3, r7, #8
 800da02:	4619      	mov	r1, r3
 800da04:	4826      	ldr	r0, [pc, #152]	; (800daa0 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 800da06:	f7ff fda1 	bl	800d54c <_ZN3Mat6MatrixILt3ELt3EEC1ERKSt5arrayIfLj9EE>
const Matrix<3, 1> MagB({-36.35f, 21.20f, -21.76f});
 800da0a:	4a26      	ldr	r2, [pc, #152]	; (800daa4 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 800da0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800da10:	ca07      	ldmia	r2, {r0, r1, r2}
 800da12:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800da16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800da1a:	4619      	mov	r1, r3
 800da1c:	4822      	ldr	r0, [pc, #136]	; (800daa8 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 800da1e:	f7ff faec 	bl	800cffa <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
						-0.001166, 0.000580, 0.996647});
 800da22:	4b22      	ldr	r3, [pc, #136]	; (800daac <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 800da24:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800da28:	461d      	mov	r5, r3
 800da2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800da2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800da2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800da30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800da32:	682b      	ldr	r3, [r5, #0]
 800da34:	6023      	str	r3, [r4, #0]
 800da36:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800da3a:	4619      	mov	r1, r3
 800da3c:	481c      	ldr	r0, [pc, #112]	; (800dab0 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 800da3e:	f7ff fd85 	bl	800d54c <_ZN3Mat6MatrixILt3ELt3EEC1ERKSt5arrayIfLj9EE>
const Matrix<3, 1> AccB({0.349030, 0.113962, -0.205569});
 800da42:	4a1c      	ldr	r2, [pc, #112]	; (800dab4 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 800da44:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800da48:	ca07      	ldmia	r2, {r0, r1, r2}
 800da4a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800da4e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800da52:	4619      	mov	r1, r3
 800da54:	4818      	ldr	r0, [pc, #96]	; (800dab8 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 800da56:	f7ff fad0 	bl	800cffa <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
						0.0, 0.0, 8.193f * DEG_2_RAD});
 800da5a:	4b18      	ldr	r3, [pc, #96]	; (800dabc <_Z41__static_initialization_and_destruction_0ii+0xec>)
 800da5c:	f107 0468 	add.w	r4, r7, #104	; 0x68
 800da60:	461d      	mov	r5, r3
 800da62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800da64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800da66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800da68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800da6a:	682b      	ldr	r3, [r5, #0]
 800da6c:	6023      	str	r3, [r4, #0]
 800da6e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800da72:	4619      	mov	r1, r3
 800da74:	4812      	ldr	r0, [pc, #72]	; (800dac0 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 800da76:	f7ff fd69 	bl	800d54c <_ZN3Mat6MatrixILt3ELt3EEC1ERKSt5arrayIfLj9EE>
const Matrix<3, 1> GyroB({-0.0480, 0.04522, -0.004564});
 800da7a:	4a12      	ldr	r2, [pc, #72]	; (800dac4 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 800da7c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800da80:	ca07      	ldmia	r2, {r0, r1, r2}
 800da82:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800da86:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800da8a:	4619      	mov	r1, r3
 800da8c:	480e      	ldr	r0, [pc, #56]	; (800dac8 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 800da8e:	f7ff fab4 	bl	800cffa <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
}
 800da92:	bf00      	nop
 800da94:	3798      	adds	r7, #152	; 0x98
 800da96:	46bd      	mov	sp, r7
 800da98:	bdb0      	pop	{r4, r5, r7, pc}
 800da9a:	bf00      	nop
 800da9c:	08014310 	.word	0x08014310
 800daa0:	24004e6c 	.word	0x24004e6c
 800daa4:	08014334 	.word	0x08014334
 800daa8:	24004e90 	.word	0x24004e90
 800daac:	08014340 	.word	0x08014340
 800dab0:	24004e9c 	.word	0x24004e9c
 800dab4:	08014364 	.word	0x08014364
 800dab8:	24004ec0 	.word	0x24004ec0
 800dabc:	08014370 	.word	0x08014370
 800dac0:	24004ecc 	.word	0x24004ecc
 800dac4:	08014394 	.word	0x08014394
 800dac8:	24004ef0 	.word	0x24004ef0

0800dacc <_GLOBAL__sub_I__Z12CalibrateMagRKN3Mat6MatrixILt3ELt1EEE>:
 800dacc:	b580      	push	{r7, lr}
 800dace:	af00      	add	r7, sp, #0
 800dad0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800dad4:	2001      	movs	r0, #1
 800dad6:	f7ff ff7b 	bl	800d9d0 <_Z41__static_initialization_and_destruction_0ii>
 800dada:	bd80      	pop	{r7, pc}

0800dadc <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 800dadc:	b580      	push	{r7, lr}
 800dade:	b082      	sub	sp, #8
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	ed87 0a01 	vstr	s0, [r7, #4]
 800dae6:	ed97 0a01 	vldr	s0, [r7, #4]
 800daea:	f003 fea5 	bl	8011838 <sqrtf>
 800daee:	eef0 7a40 	vmov.f32	s15, s0
 800daf2:	eeb0 0a67 	vmov.f32	s0, s15
 800daf6:	3708      	adds	r7, #8
 800daf8:	46bd      	mov	sp, r7
 800dafa:	bd80      	pop	{r7, pc}

0800dafc <_ZN10Algorithms3sgnEf>:

namespace Algorithms
{

float sgn(float val)
{
 800dafc:	b480      	push	{r7}
 800dafe:	b083      	sub	sp, #12
 800db00:	af00      	add	r7, sp, #0
 800db02:	ed87 0a01 	vstr	s0, [r7, #4]
	return ((0.0f < val) - (0.0f > val));
 800db06:	edd7 7a01 	vldr	s15, [r7, #4]
 800db0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800db0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db12:	bfcc      	ite	gt
 800db14:	2301      	movgt	r3, #1
 800db16:	2300      	movle	r3, #0
 800db18:	b2db      	uxtb	r3, r3
 800db1a:	461a      	mov	r2, r3
 800db1c:	edd7 7a01 	vldr	s15, [r7, #4]
 800db20:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800db24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db28:	bf4c      	ite	mi
 800db2a:	2301      	movmi	r3, #1
 800db2c:	2300      	movpl	r3, #0
 800db2e:	b2db      	uxtb	r3, r3
 800db30:	1ad3      	subs	r3, r2, r3
 800db32:	ee07 3a90 	vmov	s15, r3
 800db36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800db3a:	eeb0 0a67 	vmov.f32	s0, s15
 800db3e:	370c      	adds	r7, #12
 800db40:	46bd      	mov	sp, r7
 800db42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db46:	4770      	bx	lr

0800db48 <_ZN10Algorithms10AHRSKalman16InitialiseKalmanERKN3Mat6MatrixILt3ELt1EEES5_>:
{
	return _P;
}

void AHRSKalman::InitialiseKalman(const Matrix<3, 1>& acc, const Matrix<3, 1>& mag)
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	ed2d 8b02 	vpush	{d8}
 800db4e:	b094      	sub	sp, #80	; 0x50
 800db50:	af00      	add	r7, sp, #0
 800db52:	60f8      	str	r0, [r7, #12]
 800db54:	60b9      	str	r1, [r7, #8]
 800db56:	607a      	str	r2, [r7, #4]
	float ax{acc(0,0)}, ay{acc(1,0)}, az{acc(2,0)};
 800db58:	2200      	movs	r2, #0
 800db5a:	2100      	movs	r1, #0
 800db5c:	68b8      	ldr	r0, [r7, #8]
 800db5e:	f7ff fea7 	bl	800d8b0 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 800db62:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
 800db66:	2200      	movs	r2, #0
 800db68:	2101      	movs	r1, #1
 800db6a:	68b8      	ldr	r0, [r7, #8]
 800db6c:	f7ff fea0 	bl	800d8b0 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 800db70:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
 800db74:	2200      	movs	r2, #0
 800db76:	2102      	movs	r1, #2
 800db78:	68b8      	ldr	r0, [r7, #8]
 800db7a:	f7ff fe99 	bl	800d8b0 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 800db7e:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
	float mx{mag(0,0)}, my{mag(1,0)}, mz{mag(2,0)};
 800db82:	2200      	movs	r2, #0
 800db84:	2100      	movs	r1, #0
 800db86:	6878      	ldr	r0, [r7, #4]
 800db88:	f7ff fe92 	bl	800d8b0 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 800db8c:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
 800db90:	2200      	movs	r2, #0
 800db92:	2101      	movs	r1, #1
 800db94:	6878      	ldr	r0, [r7, #4]
 800db96:	f7ff fe8b 	bl	800d8b0 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 800db9a:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
 800db9e:	2200      	movs	r2, #0
 800dba0:	2102      	movs	r1, #2
 800dba2:	6878      	ldr	r0, [r7, #4]
 800dba4:	f7ff fe84 	bl	800d8b0 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 800dba8:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38

	float amx{ay*mz - az*my};
 800dbac:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800dbb0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800dbb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dbb8:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800dbbc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800dbc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dbc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dbc8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float amy{az*mx - ax*mz};
 800dbcc:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800dbd0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800dbd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dbd8:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800dbdc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800dbe0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dbe4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dbe8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float amz{ax*my - ay*mx};
 800dbec:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800dbf0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800dbf4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dbf8:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800dbfc:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800dc00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dc04:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dc08:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	float amax{amy*az - amz*ay};
 800dc0c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800dc10:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800dc14:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dc18:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800dc1c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800dc20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dc24:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dc28:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float amay{amz*ax - amx*az};
 800dc2c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800dc30:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800dc34:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dc38:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800dc3c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800dc40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dc44:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dc48:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float amaz{amx*ay - amy*ax};
 800dc4c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800dc50:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800dc54:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dc58:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800dc5c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800dc60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dc64:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dc68:	edc7 7a08 	vstr	s15, [r7, #32]

	float ad = 1.0f / sqrt(ax*ax + ay*ay +az*az);
 800dc6c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800dc70:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800dc74:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800dc78:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800dc7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dc80:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800dc84:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800dc88:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dc8c:	eeb0 0a67 	vmov.f32	s0, s15
 800dc90:	f7ff ff24 	bl	800dadc <_ZSt4sqrtf>
 800dc94:	eeb0 7a40 	vmov.f32	s14, s0
 800dc98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dc9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dca0:	edc7 7a07 	vstr	s15, [r7, #28]
	ax *= ad; ay *= ad; az *= ad;
 800dca4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800dca8:	edd7 7a07 	vldr	s15, [r7, #28]
 800dcac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dcb0:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
 800dcb4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800dcb8:	edd7 7a07 	vldr	s15, [r7, #28]
 800dcbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dcc0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
 800dcc4:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800dcc8:	edd7 7a07 	vldr	s15, [r7, #28]
 800dccc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dcd0:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

	float amd = 1.0f / sqrt(amx*amx + amy*amy +amz*amz);
 800dcd4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800dcd8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800dcdc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800dce0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800dce4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dce8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800dcec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800dcf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dcf4:	eeb0 0a67 	vmov.f32	s0, s15
 800dcf8:	f7ff fef0 	bl	800dadc <_ZSt4sqrtf>
 800dcfc:	eeb0 7a40 	vmov.f32	s14, s0
 800dd00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dd04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dd08:	edc7 7a06 	vstr	s15, [r7, #24]
	amx *= amd; amy *= amd; amz *= amd;
 800dd0c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800dd10:	edd7 7a06 	vldr	s15, [r7, #24]
 800dd14:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd18:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 800dd1c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800dd20:	edd7 7a06 	vldr	s15, [r7, #24]
 800dd24:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd28:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 800dd2c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800dd30:	edd7 7a06 	vldr	s15, [r7, #24]
 800dd34:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd38:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	float amad = 1.0f / sqrt(amax*amax + amay*amay +amaz*amaz);
 800dd3c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dd40:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800dd44:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800dd48:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800dd4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dd50:	edd7 7a08 	vldr	s15, [r7, #32]
 800dd54:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800dd58:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dd5c:	eeb0 0a67 	vmov.f32	s0, s15
 800dd60:	f7ff febc 	bl	800dadc <_ZSt4sqrtf>
 800dd64:	eeb0 7a40 	vmov.f32	s14, s0
 800dd68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dd6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dd70:	edc7 7a05 	vstr	s15, [r7, #20]
	amax *= amad; amay *= amad; amaz *= amad;
 800dd74:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800dd78:	edd7 7a05 	vldr	s15, [r7, #20]
 800dd7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd80:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800dd84:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800dd88:	edd7 7a05 	vldr	s15, [r7, #20]
 800dd8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd90:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 800dd94:	ed97 7a08 	vldr	s14, [r7, #32]
 800dd98:	edd7 7a05 	vldr	s15, [r7, #20]
 800dd9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dda0:	edc7 7a08 	vstr	s15, [r7, #32]

	_X.w = 0.5f * sqrt(amax + amy + az + 1.0f);
 800dda4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800dda8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ddac:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ddb0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800ddb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ddb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ddbc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ddc0:	eeb0 0a67 	vmov.f32	s0, s15
 800ddc4:	f7ff fe8a 	bl	800dadc <_ZSt4sqrtf>
 800ddc8:	eef0 7a40 	vmov.f32	s15, s0
 800ddcc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ddd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	edc3 7a00 	vstr	s15, [r3]
	_X.x = 0.5f * sgn(amz - ay) * sqrt(amax - amy - az + 1.0f);
 800ddda:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800ddde:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800dde2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dde6:	eeb0 0a67 	vmov.f32	s0, s15
 800ddea:	f7ff fe87 	bl	800dafc <_ZN10Algorithms3sgnEf>
 800ddee:	eef0 7a40 	vmov.f32	s15, s0
 800ddf2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ddf6:	ee27 8a87 	vmul.f32	s16, s15, s14
 800ddfa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ddfe:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800de02:	ee37 7a67 	vsub.f32	s14, s14, s15
 800de06:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800de0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800de0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800de12:	ee77 7a87 	vadd.f32	s15, s15, s14
 800de16:	eeb0 0a67 	vmov.f32	s0, s15
 800de1a:	f7ff fe5f 	bl	800dadc <_ZSt4sqrtf>
 800de1e:	eef0 7a40 	vmov.f32	s15, s0
 800de22:	ee68 7a27 	vmul.f32	s15, s16, s15
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	edc3 7a01 	vstr	s15, [r3, #4]
	_X.y = 0.5f * sgn(ax - amaz) * sqrt(amy - amax - az + 1.0f);
 800de2c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800de30:	edd7 7a08 	vldr	s15, [r7, #32]
 800de34:	ee77 7a67 	vsub.f32	s15, s14, s15
 800de38:	eeb0 0a67 	vmov.f32	s0, s15
 800de3c:	f7ff fe5e 	bl	800dafc <_ZN10Algorithms3sgnEf>
 800de40:	eef0 7a40 	vmov.f32	s15, s0
 800de44:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800de48:	ee27 8a87 	vmul.f32	s16, s15, s14
 800de4c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800de50:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800de54:	ee37 7a67 	vsub.f32	s14, s14, s15
 800de58:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800de5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800de60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800de64:	ee77 7a87 	vadd.f32	s15, s15, s14
 800de68:	eeb0 0a67 	vmov.f32	s0, s15
 800de6c:	f7ff fe36 	bl	800dadc <_ZSt4sqrtf>
 800de70:	eef0 7a40 	vmov.f32	s15, s0
 800de74:	ee68 7a27 	vmul.f32	s15, s16, s15
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	edc3 7a02 	vstr	s15, [r3, #8]
	_X.z = 0.5f * sgn(amz - ay) * sqrt(az - amax - amy + 1.0f);
 800de7e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800de82:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800de86:	ee77 7a67 	vsub.f32	s15, s14, s15
 800de8a:	eeb0 0a67 	vmov.f32	s0, s15
 800de8e:	f7ff fe35 	bl	800dafc <_ZN10Algorithms3sgnEf>
 800de92:	eef0 7a40 	vmov.f32	s15, s0
 800de96:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800de9a:	ee27 8a87 	vmul.f32	s16, s15, s14
 800de9e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800dea2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dea6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800deaa:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800deae:	ee77 7a67 	vsub.f32	s15, s14, s15
 800deb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800deb6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800deba:	eeb0 0a67 	vmov.f32	s0, s15
 800debe:	f7ff fe0d 	bl	800dadc <_ZSt4sqrtf>
 800dec2:	eef0 7a40 	vmov.f32	s15, s0
 800dec6:	ee68 7a27 	vmul.f32	s15, s16, s15
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800ded0:	bf00      	nop
 800ded2:	3750      	adds	r7, #80	; 0x50
 800ded4:	46bd      	mov	sp, r7
 800ded6:	ecbd 8b02 	vpop	{d8}
 800deda:	bd80      	pop	{r7, pc}

0800dedc <_ZN10Algorithms15FusionAlgorithmC1Ev>:
namespace Algorithms
{

using namespace Mat;

FusionAlgorithm::FusionAlgorithm(): _madgwickFilter{beta}{}
 800dedc:	b580      	push	{r7, lr}
 800dede:	b082      	sub	sp, #8
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	461a      	mov	r2, r3
 800dee8:	2300      	movs	r3, #0
 800deea:	6013      	str	r3, [r2, #0]
 800deec:	6053      	str	r3, [r2, #4]
 800deee:	6093      	str	r3, [r2, #8]
 800def0:	60d3      	str	r3, [r2, #12]
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	3310      	adds	r3, #16
 800def6:	2200      	movs	r2, #0
 800def8:	601a      	str	r2, [r3, #0]
 800defa:	605a      	str	r2, [r3, #4]
 800defc:	609a      	str	r2, [r3, #8]
 800defe:	60da      	str	r2, [r3, #12]
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	3320      	adds	r3, #32
 800df04:	2200      	movs	r2, #0
 800df06:	601a      	str	r2, [r3, #0]
 800df08:	605a      	str	r2, [r3, #4]
 800df0a:	609a      	str	r2, [r3, #8]
 800df0c:	60da      	str	r2, [r3, #12]
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	3330      	adds	r3, #48	; 0x30
 800df12:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800df28 <_ZN10Algorithms15FusionAlgorithmC1Ev+0x4c>
 800df16:	4618      	mov	r0, r3
 800df18:	f000 f808 	bl	800df2c <_ZN10Algorithms14MadgwickFilterC1Ef>
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	4618      	mov	r0, r3
 800df20:	3708      	adds	r7, #8
 800df22:	46bd      	mov	sp, r7
 800df24:	bd80      	pop	{r7, pc}
 800df26:	bf00      	nop
 800df28:	3cf7a4e2 	.word	0x3cf7a4e2

0800df2c <_ZN10Algorithms14MadgwickFilterC1Ef>:
{

inline Matrix<4, 6> Jgbt(const Quaternion& q, const Quaternion& b);
inline Matrix<6, 1> fgb(const Quaternion& q, const Quaternion& a, const Quaternion& b, const Quaternion& m);

MadgwickFilter::MadgwickFilter(float beta): _beta(beta)
 800df2c:	b480      	push	{r7}
 800df2e:	b083      	sub	sp, #12
 800df30:	af00      	add	r7, sp, #0
 800df32:	6078      	str	r0, [r7, #4]
 800df34:	ed87 0a00 	vstr	s0, [r7]
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	683a      	ldr	r2, [r7, #0]
 800df3c:	611a      	str	r2, [r3, #16]
{
	_q = {1.0f, 0.0f, 0.0f, 0.0f};
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800df44:	601a      	str	r2, [r3, #0]
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	f04f 0200 	mov.w	r2, #0
 800df4c:	605a      	str	r2, [r3, #4]
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	f04f 0200 	mov.w	r2, #0
 800df54:	609a      	str	r2, [r3, #8]
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	f04f 0200 	mov.w	r2, #0
 800df5c:	60da      	str	r2, [r3, #12]
}
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	4618      	mov	r0, r3
 800df62:	370c      	adds	r7, #12
 800df64:	46bd      	mov	sp, r7
 800df66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6a:	4770      	bx	lr

0800df6c <__NVIC_SetPriority>:
{
 800df6c:	b480      	push	{r7}
 800df6e:	b083      	sub	sp, #12
 800df70:	af00      	add	r7, sp, #0
 800df72:	4603      	mov	r3, r0
 800df74:	6039      	str	r1, [r7, #0]
 800df76:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800df78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	db0a      	blt.n	800df96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	b2da      	uxtb	r2, r3
 800df84:	490c      	ldr	r1, [pc, #48]	; (800dfb8 <__NVIC_SetPriority+0x4c>)
 800df86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800df8a:	0112      	lsls	r2, r2, #4
 800df8c:	b2d2      	uxtb	r2, r2
 800df8e:	440b      	add	r3, r1
 800df90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800df94:	e00a      	b.n	800dfac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800df96:	683b      	ldr	r3, [r7, #0]
 800df98:	b2da      	uxtb	r2, r3
 800df9a:	4908      	ldr	r1, [pc, #32]	; (800dfbc <__NVIC_SetPriority+0x50>)
 800df9c:	88fb      	ldrh	r3, [r7, #6]
 800df9e:	f003 030f 	and.w	r3, r3, #15
 800dfa2:	3b04      	subs	r3, #4
 800dfa4:	0112      	lsls	r2, r2, #4
 800dfa6:	b2d2      	uxtb	r2, r2
 800dfa8:	440b      	add	r3, r1
 800dfaa:	761a      	strb	r2, [r3, #24]
}
 800dfac:	bf00      	nop
 800dfae:	370c      	adds	r7, #12
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb6:	4770      	bx	lr
 800dfb8:	e000e100 	.word	0xe000e100
 800dfbc:	e000ed00 	.word	0xe000ed00

0800dfc0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800dfc4:	4b05      	ldr	r3, [pc, #20]	; (800dfdc <SysTick_Handler+0x1c>)
 800dfc6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800dfc8:	f001 ffa2 	bl	800ff10 <xTaskGetSchedulerState>
 800dfcc:	4603      	mov	r3, r0
 800dfce:	2b01      	cmp	r3, #1
 800dfd0:	d001      	beq.n	800dfd6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800dfd2:	f002 fe89 	bl	8010ce8 <xPortSysTickHandler>
  }
}
 800dfd6:	bf00      	nop
 800dfd8:	bd80      	pop	{r7, pc}
 800dfda:	bf00      	nop
 800dfdc:	e000e010 	.word	0xe000e010

0800dfe0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800dfe4:	2100      	movs	r1, #0
 800dfe6:	f06f 0004 	mvn.w	r0, #4
 800dfea:	f7ff ffbf 	bl	800df6c <__NVIC_SetPriority>
#endif
}
 800dfee:	bf00      	nop
 800dff0:	bd80      	pop	{r7, pc}
	...

0800dff4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800dff4:	b480      	push	{r7}
 800dff6:	b083      	sub	sp, #12
 800dff8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dffa:	f3ef 8305 	mrs	r3, IPSR
 800dffe:	603b      	str	r3, [r7, #0]
  return(result);
 800e000:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e002:	2b00      	cmp	r3, #0
 800e004:	d003      	beq.n	800e00e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800e006:	f06f 0305 	mvn.w	r3, #5
 800e00a:	607b      	str	r3, [r7, #4]
 800e00c:	e00c      	b.n	800e028 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e00e:	4b0a      	ldr	r3, [pc, #40]	; (800e038 <osKernelInitialize+0x44>)
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d105      	bne.n	800e022 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e016:	4b08      	ldr	r3, [pc, #32]	; (800e038 <osKernelInitialize+0x44>)
 800e018:	2201      	movs	r2, #1
 800e01a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e01c:	2300      	movs	r3, #0
 800e01e:	607b      	str	r3, [r7, #4]
 800e020:	e002      	b.n	800e028 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800e022:	f04f 33ff 	mov.w	r3, #4294967295
 800e026:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e028:	687b      	ldr	r3, [r7, #4]
}
 800e02a:	4618      	mov	r0, r3
 800e02c:	370c      	adds	r7, #12
 800e02e:	46bd      	mov	sp, r7
 800e030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e034:	4770      	bx	lr
 800e036:	bf00      	nop
 800e038:	24004efc 	.word	0x24004efc

0800e03c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e03c:	b580      	push	{r7, lr}
 800e03e:	b082      	sub	sp, #8
 800e040:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e042:	f3ef 8305 	mrs	r3, IPSR
 800e046:	603b      	str	r3, [r7, #0]
  return(result);
 800e048:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d003      	beq.n	800e056 <osKernelStart+0x1a>
    stat = osErrorISR;
 800e04e:	f06f 0305 	mvn.w	r3, #5
 800e052:	607b      	str	r3, [r7, #4]
 800e054:	e010      	b.n	800e078 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e056:	4b0b      	ldr	r3, [pc, #44]	; (800e084 <osKernelStart+0x48>)
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	2b01      	cmp	r3, #1
 800e05c:	d109      	bne.n	800e072 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e05e:	f7ff ffbf 	bl	800dfe0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e062:	4b08      	ldr	r3, [pc, #32]	; (800e084 <osKernelStart+0x48>)
 800e064:	2202      	movs	r2, #2
 800e066:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e068:	f001 fb42 	bl	800f6f0 <vTaskStartScheduler>
      stat = osOK;
 800e06c:	2300      	movs	r3, #0
 800e06e:	607b      	str	r3, [r7, #4]
 800e070:	e002      	b.n	800e078 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800e072:	f04f 33ff 	mov.w	r3, #4294967295
 800e076:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e078:	687b      	ldr	r3, [r7, #4]
}
 800e07a:	4618      	mov	r0, r3
 800e07c:	3708      	adds	r7, #8
 800e07e:	46bd      	mov	sp, r7
 800e080:	bd80      	pop	{r7, pc}
 800e082:	bf00      	nop
 800e084:	24004efc 	.word	0x24004efc

0800e088 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e088:	b580      	push	{r7, lr}
 800e08a:	b08e      	sub	sp, #56	; 0x38
 800e08c:	af04      	add	r7, sp, #16
 800e08e:	60f8      	str	r0, [r7, #12]
 800e090:	60b9      	str	r1, [r7, #8]
 800e092:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e094:	2300      	movs	r3, #0
 800e096:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e098:	f3ef 8305 	mrs	r3, IPSR
 800e09c:	617b      	str	r3, [r7, #20]
  return(result);
 800e09e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d17e      	bne.n	800e1a2 <osThreadNew+0x11a>
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d07b      	beq.n	800e1a2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800e0aa:	2380      	movs	r3, #128	; 0x80
 800e0ac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800e0ae:	2318      	movs	r3, #24
 800e0b0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800e0b6:	f04f 33ff 	mov.w	r3, #4294967295
 800e0ba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d045      	beq.n	800e14e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d002      	beq.n	800e0d0 <osThreadNew+0x48>
        name = attr->name;
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	699b      	ldr	r3, [r3, #24]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d002      	beq.n	800e0de <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	699b      	ldr	r3, [r3, #24]
 800e0dc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e0de:	69fb      	ldr	r3, [r7, #28]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d008      	beq.n	800e0f6 <osThreadNew+0x6e>
 800e0e4:	69fb      	ldr	r3, [r7, #28]
 800e0e6:	2b38      	cmp	r3, #56	; 0x38
 800e0e8:	d805      	bhi.n	800e0f6 <osThreadNew+0x6e>
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	685b      	ldr	r3, [r3, #4]
 800e0ee:	f003 0301 	and.w	r3, r3, #1
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d001      	beq.n	800e0fa <osThreadNew+0x72>
        return (NULL);
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	e054      	b.n	800e1a4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	695b      	ldr	r3, [r3, #20]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d003      	beq.n	800e10a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	695b      	ldr	r3, [r3, #20]
 800e106:	089b      	lsrs	r3, r3, #2
 800e108:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	689b      	ldr	r3, [r3, #8]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d00e      	beq.n	800e130 <osThreadNew+0xa8>
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	68db      	ldr	r3, [r3, #12]
 800e116:	2b5b      	cmp	r3, #91	; 0x5b
 800e118:	d90a      	bls.n	800e130 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d006      	beq.n	800e130 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	695b      	ldr	r3, [r3, #20]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d002      	beq.n	800e130 <osThreadNew+0xa8>
        mem = 1;
 800e12a:	2301      	movs	r3, #1
 800e12c:	61bb      	str	r3, [r7, #24]
 800e12e:	e010      	b.n	800e152 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	689b      	ldr	r3, [r3, #8]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d10c      	bne.n	800e152 <osThreadNew+0xca>
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	68db      	ldr	r3, [r3, #12]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d108      	bne.n	800e152 <osThreadNew+0xca>
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	691b      	ldr	r3, [r3, #16]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d104      	bne.n	800e152 <osThreadNew+0xca>
          mem = 0;
 800e148:	2300      	movs	r3, #0
 800e14a:	61bb      	str	r3, [r7, #24]
 800e14c:	e001      	b.n	800e152 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800e14e:	2300      	movs	r3, #0
 800e150:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e152:	69bb      	ldr	r3, [r7, #24]
 800e154:	2b01      	cmp	r3, #1
 800e156:	d110      	bne.n	800e17a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800e15c:	687a      	ldr	r2, [r7, #4]
 800e15e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e160:	9202      	str	r2, [sp, #8]
 800e162:	9301      	str	r3, [sp, #4]
 800e164:	69fb      	ldr	r3, [r7, #28]
 800e166:	9300      	str	r3, [sp, #0]
 800e168:	68bb      	ldr	r3, [r7, #8]
 800e16a:	6a3a      	ldr	r2, [r7, #32]
 800e16c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e16e:	68f8      	ldr	r0, [r7, #12]
 800e170:	f001 f8f8 	bl	800f364 <xTaskCreateStatic>
 800e174:	4603      	mov	r3, r0
 800e176:	613b      	str	r3, [r7, #16]
 800e178:	e013      	b.n	800e1a2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800e17a:	69bb      	ldr	r3, [r7, #24]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d110      	bne.n	800e1a2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e180:	6a3b      	ldr	r3, [r7, #32]
 800e182:	b29a      	uxth	r2, r3
 800e184:	f107 0310 	add.w	r3, r7, #16
 800e188:	9301      	str	r3, [sp, #4]
 800e18a:	69fb      	ldr	r3, [r7, #28]
 800e18c:	9300      	str	r3, [sp, #0]
 800e18e:	68bb      	ldr	r3, [r7, #8]
 800e190:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e192:	68f8      	ldr	r0, [r7, #12]
 800e194:	f001 f943 	bl	800f41e <xTaskCreate>
 800e198:	4603      	mov	r3, r0
 800e19a:	2b01      	cmp	r3, #1
 800e19c:	d001      	beq.n	800e1a2 <osThreadNew+0x11a>
            hTask = NULL;
 800e19e:	2300      	movs	r3, #0
 800e1a0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e1a2:	693b      	ldr	r3, [r7, #16]
}
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	3728      	adds	r7, #40	; 0x28
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	bd80      	pop	{r7, pc}

0800e1ac <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b084      	sub	sp, #16
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e1b4:	f3ef 8305 	mrs	r3, IPSR
 800e1b8:	60bb      	str	r3, [r7, #8]
  return(result);
 800e1ba:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d003      	beq.n	800e1c8 <osDelay+0x1c>
    stat = osErrorISR;
 800e1c0:	f06f 0305 	mvn.w	r3, #5
 800e1c4:	60fb      	str	r3, [r7, #12]
 800e1c6:	e007      	b.n	800e1d8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d002      	beq.n	800e1d8 <osDelay+0x2c>
      vTaskDelay(ticks);
 800e1d2:	6878      	ldr	r0, [r7, #4]
 800e1d4:	f001 fa58 	bl	800f688 <vTaskDelay>
    }
  }

  return (stat);
 800e1d8:	68fb      	ldr	r3, [r7, #12]
}
 800e1da:	4618      	mov	r0, r3
 800e1dc:	3710      	adds	r7, #16
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	bd80      	pop	{r7, pc}

0800e1e2 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800e1e2:	b580      	push	{r7, lr}
 800e1e4:	b08a      	sub	sp, #40	; 0x28
 800e1e6:	af02      	add	r7, sp, #8
 800e1e8:	60f8      	str	r0, [r7, #12]
 800e1ea:	60b9      	str	r1, [r7, #8]
 800e1ec:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e1f2:	f3ef 8305 	mrs	r3, IPSR
 800e1f6:	613b      	str	r3, [r7, #16]
  return(result);
 800e1f8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d175      	bne.n	800e2ea <osSemaphoreNew+0x108>
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d072      	beq.n	800e2ea <osSemaphoreNew+0x108>
 800e204:	68ba      	ldr	r2, [r7, #8]
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	429a      	cmp	r2, r3
 800e20a:	d86e      	bhi.n	800e2ea <osSemaphoreNew+0x108>
    mem = -1;
 800e20c:	f04f 33ff 	mov.w	r3, #4294967295
 800e210:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d015      	beq.n	800e244 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	689b      	ldr	r3, [r3, #8]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d006      	beq.n	800e22e <osSemaphoreNew+0x4c>
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	68db      	ldr	r3, [r3, #12]
 800e224:	2b4f      	cmp	r3, #79	; 0x4f
 800e226:	d902      	bls.n	800e22e <osSemaphoreNew+0x4c>
        mem = 1;
 800e228:	2301      	movs	r3, #1
 800e22a:	61bb      	str	r3, [r7, #24]
 800e22c:	e00c      	b.n	800e248 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	689b      	ldr	r3, [r3, #8]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d108      	bne.n	800e248 <osSemaphoreNew+0x66>
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	68db      	ldr	r3, [r3, #12]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d104      	bne.n	800e248 <osSemaphoreNew+0x66>
          mem = 0;
 800e23e:	2300      	movs	r3, #0
 800e240:	61bb      	str	r3, [r7, #24]
 800e242:	e001      	b.n	800e248 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800e244:	2300      	movs	r3, #0
 800e246:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800e248:	69bb      	ldr	r3, [r7, #24]
 800e24a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e24e:	d04c      	beq.n	800e2ea <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	2b01      	cmp	r3, #1
 800e254:	d128      	bne.n	800e2a8 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800e256:	69bb      	ldr	r3, [r7, #24]
 800e258:	2b01      	cmp	r3, #1
 800e25a:	d10a      	bne.n	800e272 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	689b      	ldr	r3, [r3, #8]
 800e260:	2203      	movs	r2, #3
 800e262:	9200      	str	r2, [sp, #0]
 800e264:	2200      	movs	r2, #0
 800e266:	2100      	movs	r1, #0
 800e268:	2001      	movs	r0, #1
 800e26a:	f000 f986 	bl	800e57a <xQueueGenericCreateStatic>
 800e26e:	61f8      	str	r0, [r7, #28]
 800e270:	e005      	b.n	800e27e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800e272:	2203      	movs	r2, #3
 800e274:	2100      	movs	r1, #0
 800e276:	2001      	movs	r0, #1
 800e278:	f000 f9f7 	bl	800e66a <xQueueGenericCreate>
 800e27c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800e27e:	69fb      	ldr	r3, [r7, #28]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d022      	beq.n	800e2ca <osSemaphoreNew+0xe8>
 800e284:	68bb      	ldr	r3, [r7, #8]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d01f      	beq.n	800e2ca <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e28a:	2300      	movs	r3, #0
 800e28c:	2200      	movs	r2, #0
 800e28e:	2100      	movs	r1, #0
 800e290:	69f8      	ldr	r0, [r7, #28]
 800e292:	f000 fab1 	bl	800e7f8 <xQueueGenericSend>
 800e296:	4603      	mov	r3, r0
 800e298:	2b01      	cmp	r3, #1
 800e29a:	d016      	beq.n	800e2ca <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800e29c:	69f8      	ldr	r0, [r7, #28]
 800e29e:	f000 fe8d 	bl	800efbc <vQueueDelete>
            hSemaphore = NULL;
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	61fb      	str	r3, [r7, #28]
 800e2a6:	e010      	b.n	800e2ca <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800e2a8:	69bb      	ldr	r3, [r7, #24]
 800e2aa:	2b01      	cmp	r3, #1
 800e2ac:	d108      	bne.n	800e2c0 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	689b      	ldr	r3, [r3, #8]
 800e2b2:	461a      	mov	r2, r3
 800e2b4:	68b9      	ldr	r1, [r7, #8]
 800e2b6:	68f8      	ldr	r0, [r7, #12]
 800e2b8:	f000 fa34 	bl	800e724 <xQueueCreateCountingSemaphoreStatic>
 800e2bc:	61f8      	str	r0, [r7, #28]
 800e2be:	e004      	b.n	800e2ca <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800e2c0:	68b9      	ldr	r1, [r7, #8]
 800e2c2:	68f8      	ldr	r0, [r7, #12]
 800e2c4:	f000 fa65 	bl	800e792 <xQueueCreateCountingSemaphore>
 800e2c8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800e2ca:	69fb      	ldr	r3, [r7, #28]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d00c      	beq.n	800e2ea <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d003      	beq.n	800e2de <osSemaphoreNew+0xfc>
          name = attr->name;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	617b      	str	r3, [r7, #20]
 800e2dc:	e001      	b.n	800e2e2 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800e2de:	2300      	movs	r3, #0
 800e2e0:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800e2e2:	6979      	ldr	r1, [r7, #20]
 800e2e4:	69f8      	ldr	r0, [r7, #28]
 800e2e6:	f000 ffb5 	bl	800f254 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800e2ea:	69fb      	ldr	r3, [r7, #28]
}
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	3720      	adds	r7, #32
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	bd80      	pop	{r7, pc}

0800e2f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e2f4:	b480      	push	{r7}
 800e2f6:	b085      	sub	sp, #20
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	60f8      	str	r0, [r7, #12]
 800e2fc:	60b9      	str	r1, [r7, #8]
 800e2fe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	4a07      	ldr	r2, [pc, #28]	; (800e320 <vApplicationGetIdleTaskMemory+0x2c>)
 800e304:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e306:	68bb      	ldr	r3, [r7, #8]
 800e308:	4a06      	ldr	r2, [pc, #24]	; (800e324 <vApplicationGetIdleTaskMemory+0x30>)
 800e30a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	2280      	movs	r2, #128	; 0x80
 800e310:	601a      	str	r2, [r3, #0]
}
 800e312:	bf00      	nop
 800e314:	3714      	adds	r7, #20
 800e316:	46bd      	mov	sp, r7
 800e318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31c:	4770      	bx	lr
 800e31e:	bf00      	nop
 800e320:	24004f00 	.word	0x24004f00
 800e324:	24004f5c 	.word	0x24004f5c

0800e328 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e328:	b480      	push	{r7}
 800e32a:	b085      	sub	sp, #20
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	60f8      	str	r0, [r7, #12]
 800e330:	60b9      	str	r1, [r7, #8]
 800e332:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	4a07      	ldr	r2, [pc, #28]	; (800e354 <vApplicationGetTimerTaskMemory+0x2c>)
 800e338:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e33a:	68bb      	ldr	r3, [r7, #8]
 800e33c:	4a06      	ldr	r2, [pc, #24]	; (800e358 <vApplicationGetTimerTaskMemory+0x30>)
 800e33e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e346:	601a      	str	r2, [r3, #0]
}
 800e348:	bf00      	nop
 800e34a:	3714      	adds	r7, #20
 800e34c:	46bd      	mov	sp, r7
 800e34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e352:	4770      	bx	lr
 800e354:	2400515c 	.word	0x2400515c
 800e358:	240051b8 	.word	0x240051b8

0800e35c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e35c:	b480      	push	{r7}
 800e35e:	b083      	sub	sp, #12
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	f103 0208 	add.w	r2, r3, #8
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	f04f 32ff 	mov.w	r2, #4294967295
 800e374:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	f103 0208 	add.w	r2, r3, #8
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	f103 0208 	add.w	r2, r3, #8
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	2200      	movs	r2, #0
 800e38e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e390:	bf00      	nop
 800e392:	370c      	adds	r7, #12
 800e394:	46bd      	mov	sp, r7
 800e396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39a:	4770      	bx	lr

0800e39c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e39c:	b480      	push	{r7}
 800e39e:	b083      	sub	sp, #12
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e3aa:	bf00      	nop
 800e3ac:	370c      	adds	r7, #12
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b4:	4770      	bx	lr

0800e3b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e3b6:	b480      	push	{r7}
 800e3b8:	b085      	sub	sp, #20
 800e3ba:	af00      	add	r7, sp, #0
 800e3bc:	6078      	str	r0, [r7, #4]
 800e3be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	685b      	ldr	r3, [r3, #4]
 800e3c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e3c6:	683b      	ldr	r3, [r7, #0]
 800e3c8:	68fa      	ldr	r2, [r7, #12]
 800e3ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	689a      	ldr	r2, [r3, #8]
 800e3d0:	683b      	ldr	r3, [r7, #0]
 800e3d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	689b      	ldr	r3, [r3, #8]
 800e3d8:	683a      	ldr	r2, [r7, #0]
 800e3da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	683a      	ldr	r2, [r7, #0]
 800e3e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e3e2:	683b      	ldr	r3, [r7, #0]
 800e3e4:	687a      	ldr	r2, [r7, #4]
 800e3e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	1c5a      	adds	r2, r3, #1
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	601a      	str	r2, [r3, #0]
}
 800e3f2:	bf00      	nop
 800e3f4:	3714      	adds	r7, #20
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fc:	4770      	bx	lr

0800e3fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e3fe:	b480      	push	{r7}
 800e400:	b085      	sub	sp, #20
 800e402:	af00      	add	r7, sp, #0
 800e404:	6078      	str	r0, [r7, #4]
 800e406:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e408:	683b      	ldr	r3, [r7, #0]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e40e:	68bb      	ldr	r3, [r7, #8]
 800e410:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e414:	d103      	bne.n	800e41e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	691b      	ldr	r3, [r3, #16]
 800e41a:	60fb      	str	r3, [r7, #12]
 800e41c:	e00c      	b.n	800e438 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	3308      	adds	r3, #8
 800e422:	60fb      	str	r3, [r7, #12]
 800e424:	e002      	b.n	800e42c <vListInsert+0x2e>
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	685b      	ldr	r3, [r3, #4]
 800e42a:	60fb      	str	r3, [r7, #12]
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	685b      	ldr	r3, [r3, #4]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	68ba      	ldr	r2, [r7, #8]
 800e434:	429a      	cmp	r2, r3
 800e436:	d2f6      	bcs.n	800e426 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	685a      	ldr	r2, [r3, #4]
 800e43c:	683b      	ldr	r3, [r7, #0]
 800e43e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e440:	683b      	ldr	r3, [r7, #0]
 800e442:	685b      	ldr	r3, [r3, #4]
 800e444:	683a      	ldr	r2, [r7, #0]
 800e446:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e448:	683b      	ldr	r3, [r7, #0]
 800e44a:	68fa      	ldr	r2, [r7, #12]
 800e44c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	683a      	ldr	r2, [r7, #0]
 800e452:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e454:	683b      	ldr	r3, [r7, #0]
 800e456:	687a      	ldr	r2, [r7, #4]
 800e458:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	1c5a      	adds	r2, r3, #1
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	601a      	str	r2, [r3, #0]
}
 800e464:	bf00      	nop
 800e466:	3714      	adds	r7, #20
 800e468:	46bd      	mov	sp, r7
 800e46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46e:	4770      	bx	lr

0800e470 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e470:	b480      	push	{r7}
 800e472:	b085      	sub	sp, #20
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	691b      	ldr	r3, [r3, #16]
 800e47c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	685b      	ldr	r3, [r3, #4]
 800e482:	687a      	ldr	r2, [r7, #4]
 800e484:	6892      	ldr	r2, [r2, #8]
 800e486:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	689b      	ldr	r3, [r3, #8]
 800e48c:	687a      	ldr	r2, [r7, #4]
 800e48e:	6852      	ldr	r2, [r2, #4]
 800e490:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	685b      	ldr	r3, [r3, #4]
 800e496:	687a      	ldr	r2, [r7, #4]
 800e498:	429a      	cmp	r2, r3
 800e49a:	d103      	bne.n	800e4a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	689a      	ldr	r2, [r3, #8]
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	2200      	movs	r2, #0
 800e4a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	1e5a      	subs	r2, r3, #1
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	681b      	ldr	r3, [r3, #0]
}
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	3714      	adds	r7, #20
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c2:	4770      	bx	lr

0800e4c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b084      	sub	sp, #16
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
 800e4cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d10a      	bne.n	800e4ee <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e4d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4dc:	f383 8811 	msr	BASEPRI, r3
 800e4e0:	f3bf 8f6f 	isb	sy
 800e4e4:	f3bf 8f4f 	dsb	sy
 800e4e8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e4ea:	bf00      	nop
 800e4ec:	e7fe      	b.n	800e4ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e4ee:	f002 fb69 	bl	8010bc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	681a      	ldr	r2, [r3, #0]
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4fa:	68f9      	ldr	r1, [r7, #12]
 800e4fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e4fe:	fb01 f303 	mul.w	r3, r1, r3
 800e502:	441a      	add	r2, r3
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	2200      	movs	r2, #0
 800e50c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	681a      	ldr	r2, [r3, #0]
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	681a      	ldr	r2, [r3, #0]
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e51e:	3b01      	subs	r3, #1
 800e520:	68f9      	ldr	r1, [r7, #12]
 800e522:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e524:	fb01 f303 	mul.w	r3, r1, r3
 800e528:	441a      	add	r2, r3
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	22ff      	movs	r2, #255	; 0xff
 800e532:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	22ff      	movs	r2, #255	; 0xff
 800e53a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e53e:	683b      	ldr	r3, [r7, #0]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d109      	bne.n	800e558 <xQueueGenericReset+0x94>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	691b      	ldr	r3, [r3, #16]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d00f      	beq.n	800e56c <xQueueGenericReset+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	3310      	adds	r3, #16
 800e550:	4618      	mov	r0, r3
 800e552:	f001 fb25 	bl	800fba0 <xTaskRemoveFromEventList>
 800e556:	e009      	b.n	800e56c <xQueueGenericReset+0xa8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	3310      	adds	r3, #16
 800e55c:	4618      	mov	r0, r3
 800e55e:	f7ff fefd 	bl	800e35c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	3324      	adds	r3, #36	; 0x24
 800e566:	4618      	mov	r0, r3
 800e568:	f7ff fef8 	bl	800e35c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e56c:	f002 fb5a 	bl	8010c24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e570:	2301      	movs	r3, #1
}
 800e572:	4618      	mov	r0, r3
 800e574:	3710      	adds	r7, #16
 800e576:	46bd      	mov	sp, r7
 800e578:	bd80      	pop	{r7, pc}

0800e57a <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e57a:	b580      	push	{r7, lr}
 800e57c:	b08e      	sub	sp, #56	; 0x38
 800e57e:	af02      	add	r7, sp, #8
 800e580:	60f8      	str	r0, [r7, #12]
 800e582:	60b9      	str	r1, [r7, #8]
 800e584:	607a      	str	r2, [r7, #4]
 800e586:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d10a      	bne.n	800e5a4 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800e58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e592:	f383 8811 	msr	BASEPRI, r3
 800e596:	f3bf 8f6f 	isb	sy
 800e59a:	f3bf 8f4f 	dsb	sy
 800e59e:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e5a0:	bf00      	nop
 800e5a2:	e7fe      	b.n	800e5a2 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e5a4:	683b      	ldr	r3, [r7, #0]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d10a      	bne.n	800e5c0 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800e5aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5ae:	f383 8811 	msr	BASEPRI, r3
 800e5b2:	f3bf 8f6f 	isb	sy
 800e5b6:	f3bf 8f4f 	dsb	sy
 800e5ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e5bc:	bf00      	nop
 800e5be:	e7fe      	b.n	800e5be <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d002      	beq.n	800e5cc <xQueueGenericCreateStatic+0x52>
 800e5c6:	68bb      	ldr	r3, [r7, #8]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d001      	beq.n	800e5d0 <xQueueGenericCreateStatic+0x56>
 800e5cc:	2301      	movs	r3, #1
 800e5ce:	e000      	b.n	800e5d2 <xQueueGenericCreateStatic+0x58>
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d10a      	bne.n	800e5ec <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800e5d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5da:	f383 8811 	msr	BASEPRI, r3
 800e5de:	f3bf 8f6f 	isb	sy
 800e5e2:	f3bf 8f4f 	dsb	sy
 800e5e6:	623b      	str	r3, [r7, #32]
}
 800e5e8:	bf00      	nop
 800e5ea:	e7fe      	b.n	800e5ea <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d102      	bne.n	800e5f8 <xQueueGenericCreateStatic+0x7e>
 800e5f2:	68bb      	ldr	r3, [r7, #8]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d101      	bne.n	800e5fc <xQueueGenericCreateStatic+0x82>
 800e5f8:	2301      	movs	r3, #1
 800e5fa:	e000      	b.n	800e5fe <xQueueGenericCreateStatic+0x84>
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d10a      	bne.n	800e618 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800e602:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e606:	f383 8811 	msr	BASEPRI, r3
 800e60a:	f3bf 8f6f 	isb	sy
 800e60e:	f3bf 8f4f 	dsb	sy
 800e612:	61fb      	str	r3, [r7, #28]
}
 800e614:	bf00      	nop
 800e616:	e7fe      	b.n	800e616 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e618:	2350      	movs	r3, #80	; 0x50
 800e61a:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e61c:	697b      	ldr	r3, [r7, #20]
 800e61e:	2b50      	cmp	r3, #80	; 0x50
 800e620:	d00a      	beq.n	800e638 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800e622:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e626:	f383 8811 	msr	BASEPRI, r3
 800e62a:	f3bf 8f6f 	isb	sy
 800e62e:	f3bf 8f4f 	dsb	sy
 800e632:	61bb      	str	r3, [r7, #24]
}
 800e634:	bf00      	nop
 800e636:	e7fe      	b.n	800e636 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e638:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e63a:	683b      	ldr	r3, [r7, #0]
 800e63c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e63e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e640:	2b00      	cmp	r3, #0
 800e642:	d00d      	beq.n	800e660 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e646:	2201      	movs	r2, #1
 800e648:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e64c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e652:	9300      	str	r3, [sp, #0]
 800e654:	4613      	mov	r3, r2
 800e656:	687a      	ldr	r2, [r7, #4]
 800e658:	68b9      	ldr	r1, [r7, #8]
 800e65a:	68f8      	ldr	r0, [r7, #12]
 800e65c:	f000 f83f 	bl	800e6de <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e662:	4618      	mov	r0, r3
 800e664:	3730      	adds	r7, #48	; 0x30
 800e666:	46bd      	mov	sp, r7
 800e668:	bd80      	pop	{r7, pc}

0800e66a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e66a:	b580      	push	{r7, lr}
 800e66c:	b08a      	sub	sp, #40	; 0x28
 800e66e:	af02      	add	r7, sp, #8
 800e670:	60f8      	str	r0, [r7, #12]
 800e672:	60b9      	str	r1, [r7, #8]
 800e674:	4613      	mov	r3, r2
 800e676:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d10a      	bne.n	800e694 <xQueueGenericCreate+0x2a>
	__asm volatile
 800e67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e682:	f383 8811 	msr	BASEPRI, r3
 800e686:	f3bf 8f6f 	isb	sy
 800e68a:	f3bf 8f4f 	dsb	sy
 800e68e:	613b      	str	r3, [r7, #16]
}
 800e690:	bf00      	nop
 800e692:	e7fe      	b.n	800e692 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	68ba      	ldr	r2, [r7, #8]
 800e698:	fb02 f303 	mul.w	r3, r2, r3
 800e69c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e69e:	69fb      	ldr	r3, [r7, #28]
 800e6a0:	3350      	adds	r3, #80	; 0x50
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	f002 fbb0 	bl	8010e08 <pvPortMalloc>
 800e6a8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e6aa:	69bb      	ldr	r3, [r7, #24]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d011      	beq.n	800e6d4 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e6b0:	69bb      	ldr	r3, [r7, #24]
 800e6b2:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e6b4:	697b      	ldr	r3, [r7, #20]
 800e6b6:	3350      	adds	r3, #80	; 0x50
 800e6b8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e6ba:	69bb      	ldr	r3, [r7, #24]
 800e6bc:	2200      	movs	r2, #0
 800e6be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e6c2:	79fa      	ldrb	r2, [r7, #7]
 800e6c4:	69bb      	ldr	r3, [r7, #24]
 800e6c6:	9300      	str	r3, [sp, #0]
 800e6c8:	4613      	mov	r3, r2
 800e6ca:	697a      	ldr	r2, [r7, #20]
 800e6cc:	68b9      	ldr	r1, [r7, #8]
 800e6ce:	68f8      	ldr	r0, [r7, #12]
 800e6d0:	f000 f805 	bl	800e6de <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e6d4:	69bb      	ldr	r3, [r7, #24]
	}
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	3720      	adds	r7, #32
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	bd80      	pop	{r7, pc}

0800e6de <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e6de:	b580      	push	{r7, lr}
 800e6e0:	b084      	sub	sp, #16
 800e6e2:	af00      	add	r7, sp, #0
 800e6e4:	60f8      	str	r0, [r7, #12]
 800e6e6:	60b9      	str	r1, [r7, #8]
 800e6e8:	607a      	str	r2, [r7, #4]
 800e6ea:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e6ec:	68bb      	ldr	r3, [r7, #8]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d103      	bne.n	800e6fa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e6f2:	69bb      	ldr	r3, [r7, #24]
 800e6f4:	69ba      	ldr	r2, [r7, #24]
 800e6f6:	601a      	str	r2, [r3, #0]
 800e6f8:	e002      	b.n	800e700 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e6fa:	69bb      	ldr	r3, [r7, #24]
 800e6fc:	687a      	ldr	r2, [r7, #4]
 800e6fe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e700:	69bb      	ldr	r3, [r7, #24]
 800e702:	68fa      	ldr	r2, [r7, #12]
 800e704:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e706:	69bb      	ldr	r3, [r7, #24]
 800e708:	68ba      	ldr	r2, [r7, #8]
 800e70a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e70c:	2101      	movs	r1, #1
 800e70e:	69b8      	ldr	r0, [r7, #24]
 800e710:	f7ff fed8 	bl	800e4c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e714:	69bb      	ldr	r3, [r7, #24]
 800e716:	78fa      	ldrb	r2, [r7, #3]
 800e718:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e71c:	bf00      	nop
 800e71e:	3710      	adds	r7, #16
 800e720:	46bd      	mov	sp, r7
 800e722:	bd80      	pop	{r7, pc}

0800e724 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800e724:	b580      	push	{r7, lr}
 800e726:	b08a      	sub	sp, #40	; 0x28
 800e728:	af02      	add	r7, sp, #8
 800e72a:	60f8      	str	r0, [r7, #12]
 800e72c:	60b9      	str	r1, [r7, #8]
 800e72e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d10a      	bne.n	800e74c <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800e736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e73a:	f383 8811 	msr	BASEPRI, r3
 800e73e:	f3bf 8f6f 	isb	sy
 800e742:	f3bf 8f4f 	dsb	sy
 800e746:	61bb      	str	r3, [r7, #24]
}
 800e748:	bf00      	nop
 800e74a:	e7fe      	b.n	800e74a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e74c:	68ba      	ldr	r2, [r7, #8]
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	429a      	cmp	r2, r3
 800e752:	d90a      	bls.n	800e76a <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800e754:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e758:	f383 8811 	msr	BASEPRI, r3
 800e75c:	f3bf 8f6f 	isb	sy
 800e760:	f3bf 8f4f 	dsb	sy
 800e764:	617b      	str	r3, [r7, #20]
}
 800e766:	bf00      	nop
 800e768:	e7fe      	b.n	800e768 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e76a:	2302      	movs	r3, #2
 800e76c:	9300      	str	r3, [sp, #0]
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	2200      	movs	r2, #0
 800e772:	2100      	movs	r1, #0
 800e774:	68f8      	ldr	r0, [r7, #12]
 800e776:	f7ff ff00 	bl	800e57a <xQueueGenericCreateStatic>
 800e77a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800e77c:	69fb      	ldr	r3, [r7, #28]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d002      	beq.n	800e788 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e782:	69fb      	ldr	r3, [r7, #28]
 800e784:	68ba      	ldr	r2, [r7, #8]
 800e786:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e788:	69fb      	ldr	r3, [r7, #28]
	}
 800e78a:	4618      	mov	r0, r3
 800e78c:	3720      	adds	r7, #32
 800e78e:	46bd      	mov	sp, r7
 800e790:	bd80      	pop	{r7, pc}

0800e792 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800e792:	b580      	push	{r7, lr}
 800e794:	b086      	sub	sp, #24
 800e796:	af00      	add	r7, sp, #0
 800e798:	6078      	str	r0, [r7, #4]
 800e79a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d10a      	bne.n	800e7b8 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800e7a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7a6:	f383 8811 	msr	BASEPRI, r3
 800e7aa:	f3bf 8f6f 	isb	sy
 800e7ae:	f3bf 8f4f 	dsb	sy
 800e7b2:	613b      	str	r3, [r7, #16]
}
 800e7b4:	bf00      	nop
 800e7b6:	e7fe      	b.n	800e7b6 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e7b8:	683a      	ldr	r2, [r7, #0]
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	429a      	cmp	r2, r3
 800e7be:	d90a      	bls.n	800e7d6 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800e7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7c4:	f383 8811 	msr	BASEPRI, r3
 800e7c8:	f3bf 8f6f 	isb	sy
 800e7cc:	f3bf 8f4f 	dsb	sy
 800e7d0:	60fb      	str	r3, [r7, #12]
}
 800e7d2:	bf00      	nop
 800e7d4:	e7fe      	b.n	800e7d4 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e7d6:	2202      	movs	r2, #2
 800e7d8:	2100      	movs	r1, #0
 800e7da:	6878      	ldr	r0, [r7, #4]
 800e7dc:	f7ff ff45 	bl	800e66a <xQueueGenericCreate>
 800e7e0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800e7e2:	697b      	ldr	r3, [r7, #20]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d002      	beq.n	800e7ee <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e7e8:	697b      	ldr	r3, [r7, #20]
 800e7ea:	683a      	ldr	r2, [r7, #0]
 800e7ec:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e7ee:	697b      	ldr	r3, [r7, #20]
	}
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	3718      	adds	r7, #24
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	bd80      	pop	{r7, pc}

0800e7f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b08e      	sub	sp, #56	; 0x38
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	60f8      	str	r0, [r7, #12]
 800e800:	60b9      	str	r1, [r7, #8]
 800e802:	607a      	str	r2, [r7, #4]
 800e804:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e806:	2300      	movs	r3, #0
 800e808:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e810:	2b00      	cmp	r3, #0
 800e812:	d10a      	bne.n	800e82a <xQueueGenericSend+0x32>
	__asm volatile
 800e814:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e818:	f383 8811 	msr	BASEPRI, r3
 800e81c:	f3bf 8f6f 	isb	sy
 800e820:	f3bf 8f4f 	dsb	sy
 800e824:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e826:	bf00      	nop
 800e828:	e7fe      	b.n	800e828 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e82a:	68bb      	ldr	r3, [r7, #8]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d103      	bne.n	800e838 <xQueueGenericSend+0x40>
 800e830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e834:	2b00      	cmp	r3, #0
 800e836:	d101      	bne.n	800e83c <xQueueGenericSend+0x44>
 800e838:	2301      	movs	r3, #1
 800e83a:	e000      	b.n	800e83e <xQueueGenericSend+0x46>
 800e83c:	2300      	movs	r3, #0
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d10a      	bne.n	800e858 <xQueueGenericSend+0x60>
	__asm volatile
 800e842:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e846:	f383 8811 	msr	BASEPRI, r3
 800e84a:	f3bf 8f6f 	isb	sy
 800e84e:	f3bf 8f4f 	dsb	sy
 800e852:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e854:	bf00      	nop
 800e856:	e7fe      	b.n	800e856 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e858:	683b      	ldr	r3, [r7, #0]
 800e85a:	2b02      	cmp	r3, #2
 800e85c:	d103      	bne.n	800e866 <xQueueGenericSend+0x6e>
 800e85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e862:	2b01      	cmp	r3, #1
 800e864:	d101      	bne.n	800e86a <xQueueGenericSend+0x72>
 800e866:	2301      	movs	r3, #1
 800e868:	e000      	b.n	800e86c <xQueueGenericSend+0x74>
 800e86a:	2300      	movs	r3, #0
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d10a      	bne.n	800e886 <xQueueGenericSend+0x8e>
	__asm volatile
 800e870:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e874:	f383 8811 	msr	BASEPRI, r3
 800e878:	f3bf 8f6f 	isb	sy
 800e87c:	f3bf 8f4f 	dsb	sy
 800e880:	623b      	str	r3, [r7, #32]
}
 800e882:	bf00      	nop
 800e884:	e7fe      	b.n	800e884 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e886:	f001 fb43 	bl	800ff10 <xTaskGetSchedulerState>
 800e88a:	4603      	mov	r3, r0
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d102      	bne.n	800e896 <xQueueGenericSend+0x9e>
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d101      	bne.n	800e89a <xQueueGenericSend+0xa2>
 800e896:	2301      	movs	r3, #1
 800e898:	e000      	b.n	800e89c <xQueueGenericSend+0xa4>
 800e89a:	2300      	movs	r3, #0
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d10a      	bne.n	800e8b6 <xQueueGenericSend+0xbe>
	__asm volatile
 800e8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8a4:	f383 8811 	msr	BASEPRI, r3
 800e8a8:	f3bf 8f6f 	isb	sy
 800e8ac:	f3bf 8f4f 	dsb	sy
 800e8b0:	61fb      	str	r3, [r7, #28]
}
 800e8b2:	bf00      	nop
 800e8b4:	e7fe      	b.n	800e8b4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e8b6:	f002 f985 	bl	8010bc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8c2:	429a      	cmp	r2, r3
 800e8c4:	d302      	bcc.n	800e8cc <xQueueGenericSend+0xd4>
 800e8c6:	683b      	ldr	r3, [r7, #0]
 800e8c8:	2b02      	cmp	r3, #2
 800e8ca:	d112      	bne.n	800e8f2 <xQueueGenericSend+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e8cc:	683a      	ldr	r2, [r7, #0]
 800e8ce:	68b9      	ldr	r1, [r7, #8]
 800e8d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e8d2:	f000 fbae 	bl	800f032 <prvCopyDataToQueue>
 800e8d6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e8d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d004      	beq.n	800e8ea <xQueueGenericSend+0xf2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e8e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8e2:	3324      	adds	r3, #36	; 0x24
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	f001 f95b 	bl	800fba0 <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e8ea:	f002 f99b 	bl	8010c24 <vPortExitCritical>
				return pdPASS;
 800e8ee:	2301      	movs	r3, #1
 800e8f0:	e062      	b.n	800e9b8 <xQueueGenericSend+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d103      	bne.n	800e900 <xQueueGenericSend+0x108>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e8f8:	f002 f994 	bl	8010c24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	e05b      	b.n	800e9b8 <xQueueGenericSend+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e902:	2b00      	cmp	r3, #0
 800e904:	d106      	bne.n	800e914 <xQueueGenericSend+0x11c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e906:	f107 0314 	add.w	r3, r7, #20
 800e90a:	4618      	mov	r0, r3
 800e90c:	f001 f9ac 	bl	800fc68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e910:	2301      	movs	r3, #1
 800e912:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e914:	f002 f986 	bl	8010c24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e918:	f000 ff50 	bl	800f7bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e91c:	f002 f952 	bl	8010bc4 <vPortEnterCritical>
 800e920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e922:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e926:	b25b      	sxtb	r3, r3
 800e928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e92c:	d103      	bne.n	800e936 <xQueueGenericSend+0x13e>
 800e92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e930:	2200      	movs	r2, #0
 800e932:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e938:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e93c:	b25b      	sxtb	r3, r3
 800e93e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e942:	d103      	bne.n	800e94c <xQueueGenericSend+0x154>
 800e944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e946:	2200      	movs	r2, #0
 800e948:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e94c:	f002 f96a 	bl	8010c24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e950:	1d3a      	adds	r2, r7, #4
 800e952:	f107 0314 	add.w	r3, r7, #20
 800e956:	4611      	mov	r1, r2
 800e958:	4618      	mov	r0, r3
 800e95a:	f001 f99b 	bl	800fc94 <xTaskCheckForTimeOut>
 800e95e:	4603      	mov	r3, r0
 800e960:	2b00      	cmp	r3, #0
 800e962:	d123      	bne.n	800e9ac <xQueueGenericSend+0x1b4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e964:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e966:	f000 fc5c 	bl	800f222 <prvIsQueueFull>
 800e96a:	4603      	mov	r3, r0
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d017      	beq.n	800e9a0 <xQueueGenericSend+0x1a8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e972:	3310      	adds	r3, #16
 800e974:	687a      	ldr	r2, [r7, #4]
 800e976:	4611      	mov	r1, r2
 800e978:	4618      	mov	r0, r3
 800e97a:	f001 f8c1 	bl	800fb00 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e97e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e980:	f000 fbe7 	bl	800f152 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e984:	f000 ff28 	bl	800f7d8 <xTaskResumeAll>
 800e988:	4603      	mov	r3, r0
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d193      	bne.n	800e8b6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e98e:	4b0c      	ldr	r3, [pc, #48]	; (800e9c0 <xQueueGenericSend+0x1c8>)
 800e990:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e994:	601a      	str	r2, [r3, #0]
 800e996:	f3bf 8f4f 	dsb	sy
 800e99a:	f3bf 8f6f 	isb	sy
 800e99e:	e78a      	b.n	800e8b6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e9a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e9a2:	f000 fbd6 	bl	800f152 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e9a6:	f000 ff17 	bl	800f7d8 <xTaskResumeAll>
 800e9aa:	e784      	b.n	800e8b6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e9ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e9ae:	f000 fbd0 	bl	800f152 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e9b2:	f000 ff11 	bl	800f7d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e9b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	3738      	adds	r7, #56	; 0x38
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	bd80      	pop	{r7, pc}
 800e9c0:	e000ed04 	.word	0xe000ed04

0800e9c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b090      	sub	sp, #64	; 0x40
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	60f8      	str	r0, [r7, #12]
 800e9cc:	60b9      	str	r1, [r7, #8]
 800e9ce:	607a      	str	r2, [r7, #4]
 800e9d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800e9d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d10a      	bne.n	800e9f2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800e9dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9e0:	f383 8811 	msr	BASEPRI, r3
 800e9e4:	f3bf 8f6f 	isb	sy
 800e9e8:	f3bf 8f4f 	dsb	sy
 800e9ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e9ee:	bf00      	nop
 800e9f0:	e7fe      	b.n	800e9f0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e9f2:	68bb      	ldr	r3, [r7, #8]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d103      	bne.n	800ea00 <xQueueGenericSendFromISR+0x3c>
 800e9f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d101      	bne.n	800ea04 <xQueueGenericSendFromISR+0x40>
 800ea00:	2301      	movs	r3, #1
 800ea02:	e000      	b.n	800ea06 <xQueueGenericSendFromISR+0x42>
 800ea04:	2300      	movs	r3, #0
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d10a      	bne.n	800ea20 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ea0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea0e:	f383 8811 	msr	BASEPRI, r3
 800ea12:	f3bf 8f6f 	isb	sy
 800ea16:	f3bf 8f4f 	dsb	sy
 800ea1a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ea1c:	bf00      	nop
 800ea1e:	e7fe      	b.n	800ea1e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ea20:	683b      	ldr	r3, [r7, #0]
 800ea22:	2b02      	cmp	r3, #2
 800ea24:	d103      	bne.n	800ea2e <xQueueGenericSendFromISR+0x6a>
 800ea26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea2a:	2b01      	cmp	r3, #1
 800ea2c:	d101      	bne.n	800ea32 <xQueueGenericSendFromISR+0x6e>
 800ea2e:	2301      	movs	r3, #1
 800ea30:	e000      	b.n	800ea34 <xQueueGenericSendFromISR+0x70>
 800ea32:	2300      	movs	r3, #0
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d10a      	bne.n	800ea4e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ea38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea3c:	f383 8811 	msr	BASEPRI, r3
 800ea40:	f3bf 8f6f 	isb	sy
 800ea44:	f3bf 8f4f 	dsb	sy
 800ea48:	623b      	str	r3, [r7, #32]
}
 800ea4a:	bf00      	nop
 800ea4c:	e7fe      	b.n	800ea4c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ea4e:	f002 f99b 	bl	8010d88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ea52:	f3ef 8211 	mrs	r2, BASEPRI
 800ea56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea5a:	f383 8811 	msr	BASEPRI, r3
 800ea5e:	f3bf 8f6f 	isb	sy
 800ea62:	f3bf 8f4f 	dsb	sy
 800ea66:	61fa      	str	r2, [r7, #28]
 800ea68:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ea6a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ea6c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ea6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ea72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea76:	429a      	cmp	r2, r3
 800ea78:	d302      	bcc.n	800ea80 <xQueueGenericSendFromISR+0xbc>
 800ea7a:	683b      	ldr	r3, [r7, #0]
 800ea7c:	2b02      	cmp	r3, #2
 800ea7e:	d12f      	bne.n	800eae0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ea80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ea86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ea8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea8e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ea90:	683a      	ldr	r2, [r7, #0]
 800ea92:	68b9      	ldr	r1, [r7, #8]
 800ea94:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ea96:	f000 facc 	bl	800f032 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ea9a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ea9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eaa2:	d112      	bne.n	800eaca <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eaa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d016      	beq.n	800eada <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eaac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaae:	3324      	adds	r3, #36	; 0x24
 800eab0:	4618      	mov	r0, r3
 800eab2:	f001 f875 	bl	800fba0 <xTaskRemoveFromEventList>
 800eab6:	4603      	mov	r3, r0
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d00e      	beq.n	800eada <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d00b      	beq.n	800eada <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	2201      	movs	r2, #1
 800eac6:	601a      	str	r2, [r3, #0]
 800eac8:	e007      	b.n	800eada <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800eaca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800eace:	3301      	adds	r3, #1
 800ead0:	b2db      	uxtb	r3, r3
 800ead2:	b25a      	sxtb	r2, r3
 800ead4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ead6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800eada:	2301      	movs	r3, #1
 800eadc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800eade:	e001      	b.n	800eae4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800eae0:	2300      	movs	r3, #0
 800eae2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eae6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800eae8:	697b      	ldr	r3, [r7, #20]
 800eaea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800eaee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800eaf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	3740      	adds	r7, #64	; 0x40
 800eaf6:	46bd      	mov	sp, r7
 800eaf8:	bd80      	pop	{r7, pc}

0800eafa <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800eafa:	b580      	push	{r7, lr}
 800eafc:	b08e      	sub	sp, #56	; 0x38
 800eafe:	af00      	add	r7, sp, #0
 800eb00:	6078      	str	r0, [r7, #4]
 800eb02:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800eb08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d10a      	bne.n	800eb24 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800eb0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb12:	f383 8811 	msr	BASEPRI, r3
 800eb16:	f3bf 8f6f 	isb	sy
 800eb1a:	f3bf 8f4f 	dsb	sy
 800eb1e:	623b      	str	r3, [r7, #32]
}
 800eb20:	bf00      	nop
 800eb22:	e7fe      	b.n	800eb22 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800eb24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d00a      	beq.n	800eb42 <xQueueGiveFromISR+0x48>
	__asm volatile
 800eb2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb30:	f383 8811 	msr	BASEPRI, r3
 800eb34:	f3bf 8f6f 	isb	sy
 800eb38:	f3bf 8f4f 	dsb	sy
 800eb3c:	61fb      	str	r3, [r7, #28]
}
 800eb3e:	bf00      	nop
 800eb40:	e7fe      	b.n	800eb40 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800eb42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d103      	bne.n	800eb52 <xQueueGiveFromISR+0x58>
 800eb4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb4c:	689b      	ldr	r3, [r3, #8]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d101      	bne.n	800eb56 <xQueueGiveFromISR+0x5c>
 800eb52:	2301      	movs	r3, #1
 800eb54:	e000      	b.n	800eb58 <xQueueGiveFromISR+0x5e>
 800eb56:	2300      	movs	r3, #0
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d10a      	bne.n	800eb72 <xQueueGiveFromISR+0x78>
	__asm volatile
 800eb5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb60:	f383 8811 	msr	BASEPRI, r3
 800eb64:	f3bf 8f6f 	isb	sy
 800eb68:	f3bf 8f4f 	dsb	sy
 800eb6c:	61bb      	str	r3, [r7, #24]
}
 800eb6e:	bf00      	nop
 800eb70:	e7fe      	b.n	800eb70 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800eb72:	f002 f909 	bl	8010d88 <vPortValidateInterruptPriority>
	__asm volatile
 800eb76:	f3ef 8211 	mrs	r2, BASEPRI
 800eb7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb7e:	f383 8811 	msr	BASEPRI, r3
 800eb82:	f3bf 8f6f 	isb	sy
 800eb86:	f3bf 8f4f 	dsb	sy
 800eb8a:	617a      	str	r2, [r7, #20]
 800eb8c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800eb8e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800eb90:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eb92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb96:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800eb98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb9e:	429a      	cmp	r2, r3
 800eba0:	d22b      	bcs.n	800ebfa <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800eba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eba4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eba8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ebac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebae:	1c5a      	adds	r2, r3, #1
 800ebb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebb2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ebb4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ebb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebbc:	d112      	bne.n	800ebe4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ebbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d016      	beq.n	800ebf4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ebc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebc8:	3324      	adds	r3, #36	; 0x24
 800ebca:	4618      	mov	r0, r3
 800ebcc:	f000 ffe8 	bl	800fba0 <xTaskRemoveFromEventList>
 800ebd0:	4603      	mov	r3, r0
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d00e      	beq.n	800ebf4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ebd6:	683b      	ldr	r3, [r7, #0]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d00b      	beq.n	800ebf4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	2201      	movs	r2, #1
 800ebe0:	601a      	str	r2, [r3, #0]
 800ebe2:	e007      	b.n	800ebf4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ebe4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ebe8:	3301      	adds	r3, #1
 800ebea:	b2db      	uxtb	r3, r3
 800ebec:	b25a      	sxtb	r2, r3
 800ebee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ebf4:	2301      	movs	r3, #1
 800ebf6:	637b      	str	r3, [r7, #52]	; 0x34
 800ebf8:	e001      	b.n	800ebfe <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	637b      	str	r3, [r7, #52]	; 0x34
 800ebfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec00:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	f383 8811 	msr	BASEPRI, r3
}
 800ec08:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ec0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	3738      	adds	r7, #56	; 0x38
 800ec10:	46bd      	mov	sp, r7
 800ec12:	bd80      	pop	{r7, pc}

0800ec14 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b08c      	sub	sp, #48	; 0x30
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	60f8      	str	r0, [r7, #12]
 800ec1c:	60b9      	str	r1, [r7, #8]
 800ec1e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ec20:	2300      	movs	r3, #0
 800ec22:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ec28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d10a      	bne.n	800ec44 <xQueueReceive+0x30>
	__asm volatile
 800ec2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec32:	f383 8811 	msr	BASEPRI, r3
 800ec36:	f3bf 8f6f 	isb	sy
 800ec3a:	f3bf 8f4f 	dsb	sy
 800ec3e:	623b      	str	r3, [r7, #32]
}
 800ec40:	bf00      	nop
 800ec42:	e7fe      	b.n	800ec42 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ec44:	68bb      	ldr	r3, [r7, #8]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d103      	bne.n	800ec52 <xQueueReceive+0x3e>
 800ec4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d101      	bne.n	800ec56 <xQueueReceive+0x42>
 800ec52:	2301      	movs	r3, #1
 800ec54:	e000      	b.n	800ec58 <xQueueReceive+0x44>
 800ec56:	2300      	movs	r3, #0
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d10a      	bne.n	800ec72 <xQueueReceive+0x5e>
	__asm volatile
 800ec5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec60:	f383 8811 	msr	BASEPRI, r3
 800ec64:	f3bf 8f6f 	isb	sy
 800ec68:	f3bf 8f4f 	dsb	sy
 800ec6c:	61fb      	str	r3, [r7, #28]
}
 800ec6e:	bf00      	nop
 800ec70:	e7fe      	b.n	800ec70 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ec72:	f001 f94d 	bl	800ff10 <xTaskGetSchedulerState>
 800ec76:	4603      	mov	r3, r0
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d102      	bne.n	800ec82 <xQueueReceive+0x6e>
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d101      	bne.n	800ec86 <xQueueReceive+0x72>
 800ec82:	2301      	movs	r3, #1
 800ec84:	e000      	b.n	800ec88 <xQueueReceive+0x74>
 800ec86:	2300      	movs	r3, #0
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d10a      	bne.n	800eca2 <xQueueReceive+0x8e>
	__asm volatile
 800ec8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec90:	f383 8811 	msr	BASEPRI, r3
 800ec94:	f3bf 8f6f 	isb	sy
 800ec98:	f3bf 8f4f 	dsb	sy
 800ec9c:	61bb      	str	r3, [r7, #24]
}
 800ec9e:	bf00      	nop
 800eca0:	e7fe      	b.n	800eca0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800eca2:	f001 ff8f 	bl	8010bc4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecaa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ecac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d014      	beq.n	800ecdc <xQueueReceive+0xc8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ecb2:	68b9      	ldr	r1, [r7, #8]
 800ecb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ecb6:	f000 fa26 	bl	800f106 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ecba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecbc:	1e5a      	subs	r2, r3, #1
 800ecbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecc0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ecc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecc4:	691b      	ldr	r3, [r3, #16]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d004      	beq.n	800ecd4 <xQueueReceive+0xc0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ecca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eccc:	3310      	adds	r3, #16
 800ecce:	4618      	mov	r0, r3
 800ecd0:	f000 ff66 	bl	800fba0 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ecd4:	f001 ffa6 	bl	8010c24 <vPortExitCritical>
				return pdPASS;
 800ecd8:	2301      	movs	r3, #1
 800ecda:	e069      	b.n	800edb0 <xQueueReceive+0x19c>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d103      	bne.n	800ecea <xQueueReceive+0xd6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ece2:	f001 ff9f 	bl	8010c24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ece6:	2300      	movs	r3, #0
 800ece8:	e062      	b.n	800edb0 <xQueueReceive+0x19c>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ecea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d106      	bne.n	800ecfe <xQueueReceive+0xea>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ecf0:	f107 0310 	add.w	r3, r7, #16
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	f000 ffb7 	bl	800fc68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ecfa:	2301      	movs	r3, #1
 800ecfc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ecfe:	f001 ff91 	bl	8010c24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ed02:	f000 fd5b 	bl	800f7bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ed06:	f001 ff5d 	bl	8010bc4 <vPortEnterCritical>
 800ed0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ed10:	b25b      	sxtb	r3, r3
 800ed12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed16:	d103      	bne.n	800ed20 <xQueueReceive+0x10c>
 800ed18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ed20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ed26:	b25b      	sxtb	r3, r3
 800ed28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed2c:	d103      	bne.n	800ed36 <xQueueReceive+0x122>
 800ed2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed30:	2200      	movs	r2, #0
 800ed32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ed36:	f001 ff75 	bl	8010c24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ed3a:	1d3a      	adds	r2, r7, #4
 800ed3c:	f107 0310 	add.w	r3, r7, #16
 800ed40:	4611      	mov	r1, r2
 800ed42:	4618      	mov	r0, r3
 800ed44:	f000 ffa6 	bl	800fc94 <xTaskCheckForTimeOut>
 800ed48:	4603      	mov	r3, r0
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d123      	bne.n	800ed96 <xQueueReceive+0x182>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ed4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed50:	f000 fa51 	bl	800f1f6 <prvIsQueueEmpty>
 800ed54:	4603      	mov	r3, r0
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d017      	beq.n	800ed8a <xQueueReceive+0x176>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ed5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed5c:	3324      	adds	r3, #36	; 0x24
 800ed5e:	687a      	ldr	r2, [r7, #4]
 800ed60:	4611      	mov	r1, r2
 800ed62:	4618      	mov	r0, r3
 800ed64:	f000 fecc 	bl	800fb00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ed68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed6a:	f000 f9f2 	bl	800f152 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ed6e:	f000 fd33 	bl	800f7d8 <xTaskResumeAll>
 800ed72:	4603      	mov	r3, r0
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d194      	bne.n	800eca2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ed78:	4b0f      	ldr	r3, [pc, #60]	; (800edb8 <xQueueReceive+0x1a4>)
 800ed7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed7e:	601a      	str	r2, [r3, #0]
 800ed80:	f3bf 8f4f 	dsb	sy
 800ed84:	f3bf 8f6f 	isb	sy
 800ed88:	e78b      	b.n	800eca2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ed8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed8c:	f000 f9e1 	bl	800f152 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ed90:	f000 fd22 	bl	800f7d8 <xTaskResumeAll>
 800ed94:	e785      	b.n	800eca2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ed96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed98:	f000 f9db 	bl	800f152 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ed9c:	f000 fd1c 	bl	800f7d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800eda0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eda2:	f000 fa28 	bl	800f1f6 <prvIsQueueEmpty>
 800eda6:	4603      	mov	r3, r0
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	f43f af7a 	beq.w	800eca2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800edae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800edb0:	4618      	mov	r0, r3
 800edb2:	3730      	adds	r7, #48	; 0x30
 800edb4:	46bd      	mov	sp, r7
 800edb6:	bd80      	pop	{r7, pc}
 800edb8:	e000ed04 	.word	0xe000ed04

0800edbc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800edbc:	b580      	push	{r7, lr}
 800edbe:	b08e      	sub	sp, #56	; 0x38
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
 800edc4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800edc6:	2300      	movs	r3, #0
 800edc8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800edce:	2300      	movs	r3, #0
 800edd0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800edd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d10a      	bne.n	800edee <xQueueSemaphoreTake+0x32>
	__asm volatile
 800edd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eddc:	f383 8811 	msr	BASEPRI, r3
 800ede0:	f3bf 8f6f 	isb	sy
 800ede4:	f3bf 8f4f 	dsb	sy
 800ede8:	623b      	str	r3, [r7, #32]
}
 800edea:	bf00      	nop
 800edec:	e7fe      	b.n	800edec <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800edee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d00a      	beq.n	800ee0c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800edf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edfa:	f383 8811 	msr	BASEPRI, r3
 800edfe:	f3bf 8f6f 	isb	sy
 800ee02:	f3bf 8f4f 	dsb	sy
 800ee06:	61fb      	str	r3, [r7, #28]
}
 800ee08:	bf00      	nop
 800ee0a:	e7fe      	b.n	800ee0a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ee0c:	f001 f880 	bl	800ff10 <xTaskGetSchedulerState>
 800ee10:	4603      	mov	r3, r0
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d102      	bne.n	800ee1c <xQueueSemaphoreTake+0x60>
 800ee16:	683b      	ldr	r3, [r7, #0]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d101      	bne.n	800ee20 <xQueueSemaphoreTake+0x64>
 800ee1c:	2301      	movs	r3, #1
 800ee1e:	e000      	b.n	800ee22 <xQueueSemaphoreTake+0x66>
 800ee20:	2300      	movs	r3, #0
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d10a      	bne.n	800ee3c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800ee26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee2a:	f383 8811 	msr	BASEPRI, r3
 800ee2e:	f3bf 8f6f 	isb	sy
 800ee32:	f3bf 8f4f 	dsb	sy
 800ee36:	61bb      	str	r3, [r7, #24]
}
 800ee38:	bf00      	nop
 800ee3a:	e7fe      	b.n	800ee3a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ee3c:	f001 fec2 	bl	8010bc4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ee40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee44:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ee46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d019      	beq.n	800ee80 <xQueueSemaphoreTake+0xc4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ee4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee4e:	1e5a      	subs	r2, r3, #1
 800ee50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee52:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ee54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d104      	bne.n	800ee66 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ee5c:	f001 f9ce 	bl	80101fc <pvTaskIncrementMutexHeldCount>
 800ee60:	4602      	mov	r2, r0
 800ee62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee64:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ee66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee68:	691b      	ldr	r3, [r3, #16]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d004      	beq.n	800ee78 <xQueueSemaphoreTake+0xbc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ee6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee70:	3310      	adds	r3, #16
 800ee72:	4618      	mov	r0, r3
 800ee74:	f000 fe94 	bl	800fba0 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ee78:	f001 fed4 	bl	8010c24 <vPortExitCritical>
				return pdPASS;
 800ee7c:	2301      	movs	r3, #1
 800ee7e:	e097      	b.n	800efb0 <xQueueSemaphoreTake+0x1f4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ee80:	683b      	ldr	r3, [r7, #0]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d111      	bne.n	800eeaa <xQueueSemaphoreTake+0xee>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ee86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d00a      	beq.n	800eea2 <xQueueSemaphoreTake+0xe6>
	__asm volatile
 800ee8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee90:	f383 8811 	msr	BASEPRI, r3
 800ee94:	f3bf 8f6f 	isb	sy
 800ee98:	f3bf 8f4f 	dsb	sy
 800ee9c:	617b      	str	r3, [r7, #20]
}
 800ee9e:	bf00      	nop
 800eea0:	e7fe      	b.n	800eea0 <xQueueSemaphoreTake+0xe4>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800eea2:	f001 febf 	bl	8010c24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800eea6:	2300      	movs	r3, #0
 800eea8:	e082      	b.n	800efb0 <xQueueSemaphoreTake+0x1f4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800eeaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d106      	bne.n	800eebe <xQueueSemaphoreTake+0x102>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800eeb0:	f107 030c 	add.w	r3, r7, #12
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	f000 fed7 	bl	800fc68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800eeba:	2301      	movs	r3, #1
 800eebc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800eebe:	f001 feb1 	bl	8010c24 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800eec2:	f000 fc7b 	bl	800f7bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800eec6:	f001 fe7d 	bl	8010bc4 <vPortEnterCritical>
 800eeca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eecc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eed0:	b25b      	sxtb	r3, r3
 800eed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eed6:	d103      	bne.n	800eee0 <xQueueSemaphoreTake+0x124>
 800eed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeda:	2200      	movs	r2, #0
 800eedc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eee2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eee6:	b25b      	sxtb	r3, r3
 800eee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eeec:	d103      	bne.n	800eef6 <xQueueSemaphoreTake+0x13a>
 800eeee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eef0:	2200      	movs	r2, #0
 800eef2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eef6:	f001 fe95 	bl	8010c24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800eefa:	463a      	mov	r2, r7
 800eefc:	f107 030c 	add.w	r3, r7, #12
 800ef00:	4611      	mov	r1, r2
 800ef02:	4618      	mov	r0, r3
 800ef04:	f000 fec6 	bl	800fc94 <xTaskCheckForTimeOut>
 800ef08:	4603      	mov	r3, r0
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d132      	bne.n	800ef74 <xQueueSemaphoreTake+0x1b8>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ef0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ef10:	f000 f971 	bl	800f1f6 <prvIsQueueEmpty>
 800ef14:	4603      	mov	r3, r0
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d026      	beq.n	800ef68 <xQueueSemaphoreTake+0x1ac>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ef1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d109      	bne.n	800ef36 <xQueueSemaphoreTake+0x17a>
					{
						taskENTER_CRITICAL();
 800ef22:	f001 fe4f 	bl	8010bc4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ef26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef28:	689b      	ldr	r3, [r3, #8]
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	f001 f80e 	bl	800ff4c <xTaskPriorityInherit>
 800ef30:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ef32:	f001 fe77 	bl	8010c24 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ef36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef38:	3324      	adds	r3, #36	; 0x24
 800ef3a:	683a      	ldr	r2, [r7, #0]
 800ef3c:	4611      	mov	r1, r2
 800ef3e:	4618      	mov	r0, r3
 800ef40:	f000 fdde 	bl	800fb00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ef44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ef46:	f000 f904 	bl	800f152 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ef4a:	f000 fc45 	bl	800f7d8 <xTaskResumeAll>
 800ef4e:	4603      	mov	r3, r0
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	f47f af73 	bne.w	800ee3c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800ef56:	4b18      	ldr	r3, [pc, #96]	; (800efb8 <xQueueSemaphoreTake+0x1fc>)
 800ef58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef5c:	601a      	str	r2, [r3, #0]
 800ef5e:	f3bf 8f4f 	dsb	sy
 800ef62:	f3bf 8f6f 	isb	sy
 800ef66:	e769      	b.n	800ee3c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ef68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ef6a:	f000 f8f2 	bl	800f152 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ef6e:	f000 fc33 	bl	800f7d8 <xTaskResumeAll>
 800ef72:	e763      	b.n	800ee3c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ef74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ef76:	f000 f8ec 	bl	800f152 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ef7a:	f000 fc2d 	bl	800f7d8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ef7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ef80:	f000 f939 	bl	800f1f6 <prvIsQueueEmpty>
 800ef84:	4603      	mov	r3, r0
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	f43f af58 	beq.w	800ee3c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ef8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d00d      	beq.n	800efae <xQueueSemaphoreTake+0x1f2>
					{
						taskENTER_CRITICAL();
 800ef92:	f001 fe17 	bl	8010bc4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ef96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ef98:	f000 f833 	bl	800f002 <prvGetDisinheritPriorityAfterTimeout>
 800ef9c:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ef9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efa0:	689b      	ldr	r3, [r3, #8]
 800efa2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800efa4:	4618      	mov	r0, r3
 800efa6:	f001 f8a7 	bl	80100f8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800efaa:	f001 fe3b 	bl	8010c24 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800efae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800efb0:	4618      	mov	r0, r3
 800efb2:	3738      	adds	r7, #56	; 0x38
 800efb4:	46bd      	mov	sp, r7
 800efb6:	bd80      	pop	{r7, pc}
 800efb8:	e000ed04 	.word	0xe000ed04

0800efbc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b084      	sub	sp, #16
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d10a      	bne.n	800efe4 <vQueueDelete+0x28>
	__asm volatile
 800efce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efd2:	f383 8811 	msr	BASEPRI, r3
 800efd6:	f3bf 8f6f 	isb	sy
 800efda:	f3bf 8f4f 	dsb	sy
 800efde:	60bb      	str	r3, [r7, #8]
}
 800efe0:	bf00      	nop
 800efe2:	e7fe      	b.n	800efe2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800efe4:	68f8      	ldr	r0, [r7, #12]
 800efe6:	f000 f95f 	bl	800f2a8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d102      	bne.n	800effa <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800eff4:	68f8      	ldr	r0, [r7, #12]
 800eff6:	f001 ffd3 	bl	8010fa0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800effa:	bf00      	nop
 800effc:	3710      	adds	r7, #16
 800effe:	46bd      	mov	sp, r7
 800f000:	bd80      	pop	{r7, pc}

0800f002 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f002:	b480      	push	{r7}
 800f004:	b085      	sub	sp, #20
 800f006:	af00      	add	r7, sp, #0
 800f008:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d006      	beq.n	800f020 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800f01c:	60fb      	str	r3, [r7, #12]
 800f01e:	e001      	b.n	800f024 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f020:	2300      	movs	r3, #0
 800f022:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f024:	68fb      	ldr	r3, [r7, #12]
	}
 800f026:	4618      	mov	r0, r3
 800f028:	3714      	adds	r7, #20
 800f02a:	46bd      	mov	sp, r7
 800f02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f030:	4770      	bx	lr

0800f032 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f032:	b580      	push	{r7, lr}
 800f034:	b086      	sub	sp, #24
 800f036:	af00      	add	r7, sp, #0
 800f038:	60f8      	str	r0, [r7, #12]
 800f03a:	60b9      	str	r1, [r7, #8]
 800f03c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f03e:	2300      	movs	r3, #0
 800f040:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f046:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d10d      	bne.n	800f06c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d14d      	bne.n	800f0f4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	689b      	ldr	r3, [r3, #8]
 800f05c:	4618      	mov	r0, r3
 800f05e:	f000 ffdd 	bl	801001c <xTaskPriorityDisinherit>
 800f062:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	2200      	movs	r2, #0
 800f068:	609a      	str	r2, [r3, #8]
 800f06a:	e043      	b.n	800f0f4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d119      	bne.n	800f0a6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	6858      	ldr	r0, [r3, #4]
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f07a:	461a      	mov	r2, r3
 800f07c:	68b9      	ldr	r1, [r7, #8]
 800f07e:	f003 f9d0 	bl	8012422 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	685a      	ldr	r2, [r3, #4]
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f08a:	441a      	add	r2, r3
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	685a      	ldr	r2, [r3, #4]
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	689b      	ldr	r3, [r3, #8]
 800f098:	429a      	cmp	r2, r3
 800f09a:	d32b      	bcc.n	800f0f4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	681a      	ldr	r2, [r3, #0]
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	605a      	str	r2, [r3, #4]
 800f0a4:	e026      	b.n	800f0f4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	68d8      	ldr	r0, [r3, #12]
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0ae:	461a      	mov	r2, r3
 800f0b0:	68b9      	ldr	r1, [r7, #8]
 800f0b2:	f003 f9b6 	bl	8012422 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	68da      	ldr	r2, [r3, #12]
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0be:	425b      	negs	r3, r3
 800f0c0:	441a      	add	r2, r3
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	68da      	ldr	r2, [r3, #12]
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	429a      	cmp	r2, r3
 800f0d0:	d207      	bcs.n	800f0e2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	689a      	ldr	r2, [r3, #8]
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0da:	425b      	negs	r3, r3
 800f0dc:	441a      	add	r2, r3
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	2b02      	cmp	r3, #2
 800f0e6:	d105      	bne.n	800f0f4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f0e8:	693b      	ldr	r3, [r7, #16]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d002      	beq.n	800f0f4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f0ee:	693b      	ldr	r3, [r7, #16]
 800f0f0:	3b01      	subs	r3, #1
 800f0f2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f0f4:	693b      	ldr	r3, [r7, #16]
 800f0f6:	1c5a      	adds	r2, r3, #1
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f0fc:	697b      	ldr	r3, [r7, #20]
}
 800f0fe:	4618      	mov	r0, r3
 800f100:	3718      	adds	r7, #24
 800f102:	46bd      	mov	sp, r7
 800f104:	bd80      	pop	{r7, pc}

0800f106 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f106:	b580      	push	{r7, lr}
 800f108:	b082      	sub	sp, #8
 800f10a:	af00      	add	r7, sp, #0
 800f10c:	6078      	str	r0, [r7, #4]
 800f10e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f114:	2b00      	cmp	r3, #0
 800f116:	d018      	beq.n	800f14a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	68da      	ldr	r2, [r3, #12]
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f120:	441a      	add	r2, r3
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	68da      	ldr	r2, [r3, #12]
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	689b      	ldr	r3, [r3, #8]
 800f12e:	429a      	cmp	r2, r3
 800f130:	d303      	bcc.n	800f13a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	681a      	ldr	r2, [r3, #0]
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	68d9      	ldr	r1, [r3, #12]
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f142:	461a      	mov	r2, r3
 800f144:	6838      	ldr	r0, [r7, #0]
 800f146:	f003 f96c 	bl	8012422 <memcpy>
	}
}
 800f14a:	bf00      	nop
 800f14c:	3708      	adds	r7, #8
 800f14e:	46bd      	mov	sp, r7
 800f150:	bd80      	pop	{r7, pc}

0800f152 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f152:	b580      	push	{r7, lr}
 800f154:	b084      	sub	sp, #16
 800f156:	af00      	add	r7, sp, #0
 800f158:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f15a:	f001 fd33 	bl	8010bc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f164:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f166:	e011      	b.n	800f18c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d012      	beq.n	800f196 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	3324      	adds	r3, #36	; 0x24
 800f174:	4618      	mov	r0, r3
 800f176:	f000 fd13 	bl	800fba0 <xTaskRemoveFromEventList>
 800f17a:	4603      	mov	r3, r0
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d001      	beq.n	800f184 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f180:	f000 fdea 	bl	800fd58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f184:	7bfb      	ldrb	r3, [r7, #15]
 800f186:	3b01      	subs	r3, #1
 800f188:	b2db      	uxtb	r3, r3
 800f18a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f18c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f190:	2b00      	cmp	r3, #0
 800f192:	dce9      	bgt.n	800f168 <prvUnlockQueue+0x16>
 800f194:	e000      	b.n	800f198 <prvUnlockQueue+0x46>
					break;
 800f196:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	22ff      	movs	r2, #255	; 0xff
 800f19c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f1a0:	f001 fd40 	bl	8010c24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f1a4:	f001 fd0e 	bl	8010bc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f1ae:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f1b0:	e011      	b.n	800f1d6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	691b      	ldr	r3, [r3, #16]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d012      	beq.n	800f1e0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	3310      	adds	r3, #16
 800f1be:	4618      	mov	r0, r3
 800f1c0:	f000 fcee 	bl	800fba0 <xTaskRemoveFromEventList>
 800f1c4:	4603      	mov	r3, r0
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d001      	beq.n	800f1ce <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f1ca:	f000 fdc5 	bl	800fd58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f1ce:	7bbb      	ldrb	r3, [r7, #14]
 800f1d0:	3b01      	subs	r3, #1
 800f1d2:	b2db      	uxtb	r3, r3
 800f1d4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f1d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	dce9      	bgt.n	800f1b2 <prvUnlockQueue+0x60>
 800f1de:	e000      	b.n	800f1e2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f1e0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	22ff      	movs	r2, #255	; 0xff
 800f1e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f1ea:	f001 fd1b 	bl	8010c24 <vPortExitCritical>
}
 800f1ee:	bf00      	nop
 800f1f0:	3710      	adds	r7, #16
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	bd80      	pop	{r7, pc}

0800f1f6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f1f6:	b580      	push	{r7, lr}
 800f1f8:	b084      	sub	sp, #16
 800f1fa:	af00      	add	r7, sp, #0
 800f1fc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f1fe:	f001 fce1 	bl	8010bc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f206:	2b00      	cmp	r3, #0
 800f208:	d102      	bne.n	800f210 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f20a:	2301      	movs	r3, #1
 800f20c:	60fb      	str	r3, [r7, #12]
 800f20e:	e001      	b.n	800f214 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f210:	2300      	movs	r3, #0
 800f212:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f214:	f001 fd06 	bl	8010c24 <vPortExitCritical>

	return xReturn;
 800f218:	68fb      	ldr	r3, [r7, #12]
}
 800f21a:	4618      	mov	r0, r3
 800f21c:	3710      	adds	r7, #16
 800f21e:	46bd      	mov	sp, r7
 800f220:	bd80      	pop	{r7, pc}

0800f222 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f222:	b580      	push	{r7, lr}
 800f224:	b084      	sub	sp, #16
 800f226:	af00      	add	r7, sp, #0
 800f228:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f22a:	f001 fccb 	bl	8010bc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f236:	429a      	cmp	r2, r3
 800f238:	d102      	bne.n	800f240 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f23a:	2301      	movs	r3, #1
 800f23c:	60fb      	str	r3, [r7, #12]
 800f23e:	e001      	b.n	800f244 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f240:	2300      	movs	r3, #0
 800f242:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f244:	f001 fcee 	bl	8010c24 <vPortExitCritical>

	return xReturn;
 800f248:	68fb      	ldr	r3, [r7, #12]
}
 800f24a:	4618      	mov	r0, r3
 800f24c:	3710      	adds	r7, #16
 800f24e:	46bd      	mov	sp, r7
 800f250:	bd80      	pop	{r7, pc}
	...

0800f254 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f254:	b480      	push	{r7}
 800f256:	b085      	sub	sp, #20
 800f258:	af00      	add	r7, sp, #0
 800f25a:	6078      	str	r0, [r7, #4]
 800f25c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f25e:	2300      	movs	r3, #0
 800f260:	60fb      	str	r3, [r7, #12]
 800f262:	e014      	b.n	800f28e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f264:	4a0f      	ldr	r2, [pc, #60]	; (800f2a4 <vQueueAddToRegistry+0x50>)
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d10b      	bne.n	800f288 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f270:	490c      	ldr	r1, [pc, #48]	; (800f2a4 <vQueueAddToRegistry+0x50>)
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	683a      	ldr	r2, [r7, #0]
 800f276:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f27a:	4a0a      	ldr	r2, [pc, #40]	; (800f2a4 <vQueueAddToRegistry+0x50>)
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	00db      	lsls	r3, r3, #3
 800f280:	4413      	add	r3, r2
 800f282:	687a      	ldr	r2, [r7, #4]
 800f284:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f286:	e006      	b.n	800f296 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	3301      	adds	r3, #1
 800f28c:	60fb      	str	r3, [r7, #12]
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	2b07      	cmp	r3, #7
 800f292:	d9e7      	bls.n	800f264 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f294:	bf00      	nop
 800f296:	bf00      	nop
 800f298:	3714      	adds	r7, #20
 800f29a:	46bd      	mov	sp, r7
 800f29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a0:	4770      	bx	lr
 800f2a2:	bf00      	nop
 800f2a4:	240055b8 	.word	0x240055b8

0800f2a8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800f2a8:	b480      	push	{r7}
 800f2aa:	b085      	sub	sp, #20
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f2b0:	2300      	movs	r3, #0
 800f2b2:	60fb      	str	r3, [r7, #12]
 800f2b4:	e016      	b.n	800f2e4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f2b6:	4a10      	ldr	r2, [pc, #64]	; (800f2f8 <vQueueUnregisterQueue+0x50>)
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	00db      	lsls	r3, r3, #3
 800f2bc:	4413      	add	r3, r2
 800f2be:	685b      	ldr	r3, [r3, #4]
 800f2c0:	687a      	ldr	r2, [r7, #4]
 800f2c2:	429a      	cmp	r2, r3
 800f2c4:	d10b      	bne.n	800f2de <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800f2c6:	4a0c      	ldr	r2, [pc, #48]	; (800f2f8 <vQueueUnregisterQueue+0x50>)
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	2100      	movs	r1, #0
 800f2cc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800f2d0:	4a09      	ldr	r2, [pc, #36]	; (800f2f8 <vQueueUnregisterQueue+0x50>)
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	00db      	lsls	r3, r3, #3
 800f2d6:	4413      	add	r3, r2
 800f2d8:	2200      	movs	r2, #0
 800f2da:	605a      	str	r2, [r3, #4]
				break;
 800f2dc:	e006      	b.n	800f2ec <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	3301      	adds	r3, #1
 800f2e2:	60fb      	str	r3, [r7, #12]
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	2b07      	cmp	r3, #7
 800f2e8:	d9e5      	bls.n	800f2b6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f2ea:	bf00      	nop
 800f2ec:	bf00      	nop
 800f2ee:	3714      	adds	r7, #20
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f6:	4770      	bx	lr
 800f2f8:	240055b8 	.word	0x240055b8

0800f2fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f2fc:	b580      	push	{r7, lr}
 800f2fe:	b086      	sub	sp, #24
 800f300:	af00      	add	r7, sp, #0
 800f302:	60f8      	str	r0, [r7, #12]
 800f304:	60b9      	str	r1, [r7, #8]
 800f306:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f30c:	f001 fc5a 	bl	8010bc4 <vPortEnterCritical>
 800f310:	697b      	ldr	r3, [r7, #20]
 800f312:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f316:	b25b      	sxtb	r3, r3
 800f318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f31c:	d103      	bne.n	800f326 <vQueueWaitForMessageRestricted+0x2a>
 800f31e:	697b      	ldr	r3, [r7, #20]
 800f320:	2200      	movs	r2, #0
 800f322:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f326:	697b      	ldr	r3, [r7, #20]
 800f328:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f32c:	b25b      	sxtb	r3, r3
 800f32e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f332:	d103      	bne.n	800f33c <vQueueWaitForMessageRestricted+0x40>
 800f334:	697b      	ldr	r3, [r7, #20]
 800f336:	2200      	movs	r2, #0
 800f338:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f33c:	f001 fc72 	bl	8010c24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f340:	697b      	ldr	r3, [r7, #20]
 800f342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f344:	2b00      	cmp	r3, #0
 800f346:	d106      	bne.n	800f356 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f348:	697b      	ldr	r3, [r7, #20]
 800f34a:	3324      	adds	r3, #36	; 0x24
 800f34c:	687a      	ldr	r2, [r7, #4]
 800f34e:	68b9      	ldr	r1, [r7, #8]
 800f350:	4618      	mov	r0, r3
 800f352:	f000 fbf9 	bl	800fb48 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f356:	6978      	ldr	r0, [r7, #20]
 800f358:	f7ff fefb 	bl	800f152 <prvUnlockQueue>
	}
 800f35c:	bf00      	nop
 800f35e:	3718      	adds	r7, #24
 800f360:	46bd      	mov	sp, r7
 800f362:	bd80      	pop	{r7, pc}

0800f364 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f364:	b580      	push	{r7, lr}
 800f366:	b08e      	sub	sp, #56	; 0x38
 800f368:	af04      	add	r7, sp, #16
 800f36a:	60f8      	str	r0, [r7, #12]
 800f36c:	60b9      	str	r1, [r7, #8]
 800f36e:	607a      	str	r2, [r7, #4]
 800f370:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f374:	2b00      	cmp	r3, #0
 800f376:	d10a      	bne.n	800f38e <xTaskCreateStatic+0x2a>
	__asm volatile
 800f378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f37c:	f383 8811 	msr	BASEPRI, r3
 800f380:	f3bf 8f6f 	isb	sy
 800f384:	f3bf 8f4f 	dsb	sy
 800f388:	623b      	str	r3, [r7, #32]
}
 800f38a:	bf00      	nop
 800f38c:	e7fe      	b.n	800f38c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f38e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f390:	2b00      	cmp	r3, #0
 800f392:	d10a      	bne.n	800f3aa <xTaskCreateStatic+0x46>
	__asm volatile
 800f394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f398:	f383 8811 	msr	BASEPRI, r3
 800f39c:	f3bf 8f6f 	isb	sy
 800f3a0:	f3bf 8f4f 	dsb	sy
 800f3a4:	61fb      	str	r3, [r7, #28]
}
 800f3a6:	bf00      	nop
 800f3a8:	e7fe      	b.n	800f3a8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f3aa:	235c      	movs	r3, #92	; 0x5c
 800f3ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f3ae:	693b      	ldr	r3, [r7, #16]
 800f3b0:	2b5c      	cmp	r3, #92	; 0x5c
 800f3b2:	d00a      	beq.n	800f3ca <xTaskCreateStatic+0x66>
	__asm volatile
 800f3b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3b8:	f383 8811 	msr	BASEPRI, r3
 800f3bc:	f3bf 8f6f 	isb	sy
 800f3c0:	f3bf 8f4f 	dsb	sy
 800f3c4:	61bb      	str	r3, [r7, #24]
}
 800f3c6:	bf00      	nop
 800f3c8:	e7fe      	b.n	800f3c8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f3ca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d01e      	beq.n	800f410 <xTaskCreateStatic+0xac>
 800f3d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d01b      	beq.n	800f410 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3da:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f3e0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3e4:	2202      	movs	r2, #2
 800f3e6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f3ea:	2300      	movs	r3, #0
 800f3ec:	9303      	str	r3, [sp, #12]
 800f3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3f0:	9302      	str	r3, [sp, #8]
 800f3f2:	f107 0314 	add.w	r3, r7, #20
 800f3f6:	9301      	str	r3, [sp, #4]
 800f3f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3fa:	9300      	str	r3, [sp, #0]
 800f3fc:	683b      	ldr	r3, [r7, #0]
 800f3fe:	687a      	ldr	r2, [r7, #4]
 800f400:	68b9      	ldr	r1, [r7, #8]
 800f402:	68f8      	ldr	r0, [r7, #12]
 800f404:	f000 f850 	bl	800f4a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f408:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f40a:	f000 f8dd 	bl	800f5c8 <prvAddNewTaskToReadyList>
 800f40e:	e001      	b.n	800f414 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800f410:	2300      	movs	r3, #0
 800f412:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f414:	697b      	ldr	r3, [r7, #20]
	}
 800f416:	4618      	mov	r0, r3
 800f418:	3728      	adds	r7, #40	; 0x28
 800f41a:	46bd      	mov	sp, r7
 800f41c:	bd80      	pop	{r7, pc}

0800f41e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f41e:	b580      	push	{r7, lr}
 800f420:	b08c      	sub	sp, #48	; 0x30
 800f422:	af04      	add	r7, sp, #16
 800f424:	60f8      	str	r0, [r7, #12]
 800f426:	60b9      	str	r1, [r7, #8]
 800f428:	603b      	str	r3, [r7, #0]
 800f42a:	4613      	mov	r3, r2
 800f42c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f42e:	88fb      	ldrh	r3, [r7, #6]
 800f430:	009b      	lsls	r3, r3, #2
 800f432:	4618      	mov	r0, r3
 800f434:	f001 fce8 	bl	8010e08 <pvPortMalloc>
 800f438:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f43a:	697b      	ldr	r3, [r7, #20]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d00e      	beq.n	800f45e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f440:	205c      	movs	r0, #92	; 0x5c
 800f442:	f001 fce1 	bl	8010e08 <pvPortMalloc>
 800f446:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f448:	69fb      	ldr	r3, [r7, #28]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d003      	beq.n	800f456 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f44e:	69fb      	ldr	r3, [r7, #28]
 800f450:	697a      	ldr	r2, [r7, #20]
 800f452:	631a      	str	r2, [r3, #48]	; 0x30
 800f454:	e005      	b.n	800f462 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f456:	6978      	ldr	r0, [r7, #20]
 800f458:	f001 fda2 	bl	8010fa0 <vPortFree>
 800f45c:	e001      	b.n	800f462 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f45e:	2300      	movs	r3, #0
 800f460:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f462:	69fb      	ldr	r3, [r7, #28]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d017      	beq.n	800f498 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f468:	69fb      	ldr	r3, [r7, #28]
 800f46a:	2200      	movs	r2, #0
 800f46c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f470:	88fa      	ldrh	r2, [r7, #6]
 800f472:	2300      	movs	r3, #0
 800f474:	9303      	str	r3, [sp, #12]
 800f476:	69fb      	ldr	r3, [r7, #28]
 800f478:	9302      	str	r3, [sp, #8]
 800f47a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f47c:	9301      	str	r3, [sp, #4]
 800f47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f480:	9300      	str	r3, [sp, #0]
 800f482:	683b      	ldr	r3, [r7, #0]
 800f484:	68b9      	ldr	r1, [r7, #8]
 800f486:	68f8      	ldr	r0, [r7, #12]
 800f488:	f000 f80e 	bl	800f4a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f48c:	69f8      	ldr	r0, [r7, #28]
 800f48e:	f000 f89b 	bl	800f5c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f492:	2301      	movs	r3, #1
 800f494:	61bb      	str	r3, [r7, #24]
 800f496:	e002      	b.n	800f49e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f498:	f04f 33ff 	mov.w	r3, #4294967295
 800f49c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f49e:	69bb      	ldr	r3, [r7, #24]
	}
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	3720      	adds	r7, #32
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	bd80      	pop	{r7, pc}

0800f4a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f4a8:	b580      	push	{r7, lr}
 800f4aa:	b088      	sub	sp, #32
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	60f8      	str	r0, [r7, #12]
 800f4b0:	60b9      	str	r1, [r7, #8]
 800f4b2:	607a      	str	r2, [r7, #4]
 800f4b4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4b8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	009b      	lsls	r3, r3, #2
 800f4be:	461a      	mov	r2, r3
 800f4c0:	21a5      	movs	r1, #165	; 0xa5
 800f4c2:	f002 ff2e 	bl	8012322 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f4ca:	6879      	ldr	r1, [r7, #4]
 800f4cc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800f4d0:	440b      	add	r3, r1
 800f4d2:	009b      	lsls	r3, r3, #2
 800f4d4:	4413      	add	r3, r2
 800f4d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f4d8:	69bb      	ldr	r3, [r7, #24]
 800f4da:	f023 0307 	bic.w	r3, r3, #7
 800f4de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f4e0:	69bb      	ldr	r3, [r7, #24]
 800f4e2:	f003 0307 	and.w	r3, r3, #7
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d00a      	beq.n	800f500 <prvInitialiseNewTask+0x58>
	__asm volatile
 800f4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4ee:	f383 8811 	msr	BASEPRI, r3
 800f4f2:	f3bf 8f6f 	isb	sy
 800f4f6:	f3bf 8f4f 	dsb	sy
 800f4fa:	617b      	str	r3, [r7, #20]
}
 800f4fc:	bf00      	nop
 800f4fe:	e7fe      	b.n	800f4fe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f500:	68bb      	ldr	r3, [r7, #8]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d01f      	beq.n	800f546 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f506:	2300      	movs	r3, #0
 800f508:	61fb      	str	r3, [r7, #28]
 800f50a:	e012      	b.n	800f532 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f50c:	68ba      	ldr	r2, [r7, #8]
 800f50e:	69fb      	ldr	r3, [r7, #28]
 800f510:	4413      	add	r3, r2
 800f512:	7819      	ldrb	r1, [r3, #0]
 800f514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f516:	69fb      	ldr	r3, [r7, #28]
 800f518:	4413      	add	r3, r2
 800f51a:	3334      	adds	r3, #52	; 0x34
 800f51c:	460a      	mov	r2, r1
 800f51e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f520:	68ba      	ldr	r2, [r7, #8]
 800f522:	69fb      	ldr	r3, [r7, #28]
 800f524:	4413      	add	r3, r2
 800f526:	781b      	ldrb	r3, [r3, #0]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d006      	beq.n	800f53a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f52c:	69fb      	ldr	r3, [r7, #28]
 800f52e:	3301      	adds	r3, #1
 800f530:	61fb      	str	r3, [r7, #28]
 800f532:	69fb      	ldr	r3, [r7, #28]
 800f534:	2b0f      	cmp	r3, #15
 800f536:	d9e9      	bls.n	800f50c <prvInitialiseNewTask+0x64>
 800f538:	e000      	b.n	800f53c <prvInitialiseNewTask+0x94>
			{
				break;
 800f53a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f53e:	2200      	movs	r2, #0
 800f540:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f544:	e003      	b.n	800f54e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f548:	2200      	movs	r2, #0
 800f54a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f550:	2b37      	cmp	r3, #55	; 0x37
 800f552:	d901      	bls.n	800f558 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f554:	2337      	movs	r3, #55	; 0x37
 800f556:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f55a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f55c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f560:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f562:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f566:	2200      	movs	r2, #0
 800f568:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f56c:	3304      	adds	r3, #4
 800f56e:	4618      	mov	r0, r3
 800f570:	f7fe ff14 	bl	800e39c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f576:	3318      	adds	r3, #24
 800f578:	4618      	mov	r0, r3
 800f57a:	f7fe ff0f 	bl	800e39c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f580:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f582:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f586:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f58c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f590:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f592:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f596:	2200      	movs	r2, #0
 800f598:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f59a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f59c:	2200      	movs	r2, #0
 800f59e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f5a2:	683a      	ldr	r2, [r7, #0]
 800f5a4:	68f9      	ldr	r1, [r7, #12]
 800f5a6:	69b8      	ldr	r0, [r7, #24]
 800f5a8:	f001 f9de 	bl	8010968 <pxPortInitialiseStack>
 800f5ac:	4602      	mov	r2, r0
 800f5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5b0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f5b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d002      	beq.n	800f5be <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f5bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f5be:	bf00      	nop
 800f5c0:	3720      	adds	r7, #32
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	bd80      	pop	{r7, pc}
	...

0800f5c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b082      	sub	sp, #8
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f5d0:	f001 faf8 	bl	8010bc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f5d4:	4b26      	ldr	r3, [pc, #152]	; (800f670 <prvAddNewTaskToReadyList+0xa8>)
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	3301      	adds	r3, #1
 800f5da:	4a25      	ldr	r2, [pc, #148]	; (800f670 <prvAddNewTaskToReadyList+0xa8>)
 800f5dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f5de:	4b25      	ldr	r3, [pc, #148]	; (800f674 <prvAddNewTaskToReadyList+0xac>)
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d109      	bne.n	800f5fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f5e6:	4a23      	ldr	r2, [pc, #140]	; (800f674 <prvAddNewTaskToReadyList+0xac>)
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f5ec:	4b20      	ldr	r3, [pc, #128]	; (800f670 <prvAddNewTaskToReadyList+0xa8>)
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	2b01      	cmp	r3, #1
 800f5f2:	d110      	bne.n	800f616 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f5f4:	f000 fbce 	bl	800fd94 <prvInitialiseTaskLists>
 800f5f8:	e00d      	b.n	800f616 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f5fa:	4b1f      	ldr	r3, [pc, #124]	; (800f678 <prvAddNewTaskToReadyList+0xb0>)
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d109      	bne.n	800f616 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f602:	4b1c      	ldr	r3, [pc, #112]	; (800f674 <prvAddNewTaskToReadyList+0xac>)
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f60c:	429a      	cmp	r2, r3
 800f60e:	d802      	bhi.n	800f616 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f610:	4a18      	ldr	r2, [pc, #96]	; (800f674 <prvAddNewTaskToReadyList+0xac>)
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f616:	4b19      	ldr	r3, [pc, #100]	; (800f67c <prvAddNewTaskToReadyList+0xb4>)
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	3301      	adds	r3, #1
 800f61c:	4a17      	ldr	r2, [pc, #92]	; (800f67c <prvAddNewTaskToReadyList+0xb4>)
 800f61e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f620:	4b16      	ldr	r3, [pc, #88]	; (800f67c <prvAddNewTaskToReadyList+0xb4>)
 800f622:	681a      	ldr	r2, [r3, #0]
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f62c:	4b14      	ldr	r3, [pc, #80]	; (800f680 <prvAddNewTaskToReadyList+0xb8>)
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	429a      	cmp	r2, r3
 800f632:	d903      	bls.n	800f63c <prvAddNewTaskToReadyList+0x74>
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f638:	4a11      	ldr	r2, [pc, #68]	; (800f680 <prvAddNewTaskToReadyList+0xb8>)
 800f63a:	6013      	str	r3, [r2, #0]
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f640:	4613      	mov	r3, r2
 800f642:	009b      	lsls	r3, r3, #2
 800f644:	4413      	add	r3, r2
 800f646:	009b      	lsls	r3, r3, #2
 800f648:	4a0e      	ldr	r2, [pc, #56]	; (800f684 <prvAddNewTaskToReadyList+0xbc>)
 800f64a:	441a      	add	r2, r3
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	3304      	adds	r3, #4
 800f650:	4619      	mov	r1, r3
 800f652:	4610      	mov	r0, r2
 800f654:	f7fe feaf 	bl	800e3b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f658:	f001 fae4 	bl	8010c24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f65c:	4b06      	ldr	r3, [pc, #24]	; (800f678 <prvAddNewTaskToReadyList+0xb0>)
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	2b00      	cmp	r3, #0
 800f662:	d001      	beq.n	800f668 <prvAddNewTaskToReadyList+0xa0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f664:	4b03      	ldr	r3, [pc, #12]	; (800f674 <prvAddNewTaskToReadyList+0xac>)
 800f666:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f668:	bf00      	nop
 800f66a:	3708      	adds	r7, #8
 800f66c:	46bd      	mov	sp, r7
 800f66e:	bd80      	pop	{r7, pc}
 800f670:	24005acc 	.word	0x24005acc
 800f674:	240055f8 	.word	0x240055f8
 800f678:	24005ad8 	.word	0x24005ad8
 800f67c:	24005ae8 	.word	0x24005ae8
 800f680:	24005ad4 	.word	0x24005ad4
 800f684:	240055fc 	.word	0x240055fc

0800f688 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b084      	sub	sp, #16
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f690:	2300      	movs	r3, #0
 800f692:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d017      	beq.n	800f6ca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f69a:	4b13      	ldr	r3, [pc, #76]	; (800f6e8 <vTaskDelay+0x60>)
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d00a      	beq.n	800f6b8 <vTaskDelay+0x30>
	__asm volatile
 800f6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6a6:	f383 8811 	msr	BASEPRI, r3
 800f6aa:	f3bf 8f6f 	isb	sy
 800f6ae:	f3bf 8f4f 	dsb	sy
 800f6b2:	60bb      	str	r3, [r7, #8]
}
 800f6b4:	bf00      	nop
 800f6b6:	e7fe      	b.n	800f6b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f6b8:	f000 f880 	bl	800f7bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f6bc:	2100      	movs	r1, #0
 800f6be:	6878      	ldr	r0, [r7, #4]
 800f6c0:	f000 fdb0 	bl	8010224 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f6c4:	f000 f888 	bl	800f7d8 <xTaskResumeAll>
 800f6c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d107      	bne.n	800f6e0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800f6d0:	4b06      	ldr	r3, [pc, #24]	; (800f6ec <vTaskDelay+0x64>)
 800f6d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f6d6:	601a      	str	r2, [r3, #0]
 800f6d8:	f3bf 8f4f 	dsb	sy
 800f6dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f6e0:	bf00      	nop
 800f6e2:	3710      	adds	r7, #16
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	bd80      	pop	{r7, pc}
 800f6e8:	24005af4 	.word	0x24005af4
 800f6ec:	e000ed04 	.word	0xe000ed04

0800f6f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f6f0:	b580      	push	{r7, lr}
 800f6f2:	b08a      	sub	sp, #40	; 0x28
 800f6f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f6fa:	2300      	movs	r3, #0
 800f6fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f6fe:	463a      	mov	r2, r7
 800f700:	1d39      	adds	r1, r7, #4
 800f702:	f107 0308 	add.w	r3, r7, #8
 800f706:	4618      	mov	r0, r3
 800f708:	f7fe fdf4 	bl	800e2f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f70c:	6839      	ldr	r1, [r7, #0]
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	68ba      	ldr	r2, [r7, #8]
 800f712:	9202      	str	r2, [sp, #8]
 800f714:	9301      	str	r3, [sp, #4]
 800f716:	2300      	movs	r3, #0
 800f718:	9300      	str	r3, [sp, #0]
 800f71a:	2300      	movs	r3, #0
 800f71c:	460a      	mov	r2, r1
 800f71e:	4921      	ldr	r1, [pc, #132]	; (800f7a4 <vTaskStartScheduler+0xb4>)
 800f720:	4821      	ldr	r0, [pc, #132]	; (800f7a8 <vTaskStartScheduler+0xb8>)
 800f722:	f7ff fe1f 	bl	800f364 <xTaskCreateStatic>
 800f726:	4603      	mov	r3, r0
 800f728:	4a20      	ldr	r2, [pc, #128]	; (800f7ac <vTaskStartScheduler+0xbc>)
 800f72a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f72c:	4b1f      	ldr	r3, [pc, #124]	; (800f7ac <vTaskStartScheduler+0xbc>)
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	2b00      	cmp	r3, #0
 800f732:	d002      	beq.n	800f73a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f734:	2301      	movs	r3, #1
 800f736:	617b      	str	r3, [r7, #20]
 800f738:	e001      	b.n	800f73e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f73a:	2300      	movs	r3, #0
 800f73c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f73e:	697b      	ldr	r3, [r7, #20]
 800f740:	2b01      	cmp	r3, #1
 800f742:	d102      	bne.n	800f74a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f744:	f000 fdc2 	bl	80102cc <xTimerCreateTimerTask>
 800f748:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f74a:	697b      	ldr	r3, [r7, #20]
 800f74c:	2b01      	cmp	r3, #1
 800f74e:	d116      	bne.n	800f77e <vTaskStartScheduler+0x8e>
	__asm volatile
 800f750:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f754:	f383 8811 	msr	BASEPRI, r3
 800f758:	f3bf 8f6f 	isb	sy
 800f75c:	f3bf 8f4f 	dsb	sy
 800f760:	613b      	str	r3, [r7, #16]
}
 800f762:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f764:	4b12      	ldr	r3, [pc, #72]	; (800f7b0 <vTaskStartScheduler+0xc0>)
 800f766:	f04f 32ff 	mov.w	r2, #4294967295
 800f76a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f76c:	4b11      	ldr	r3, [pc, #68]	; (800f7b4 <vTaskStartScheduler+0xc4>)
 800f76e:	2201      	movs	r2, #1
 800f770:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f772:	4b11      	ldr	r3, [pc, #68]	; (800f7b8 <vTaskStartScheduler+0xc8>)
 800f774:	2200      	movs	r2, #0
 800f776:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f778:	f001 f982 	bl	8010a80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f77c:	e00e      	b.n	800f79c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f77e:	697b      	ldr	r3, [r7, #20]
 800f780:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f784:	d10a      	bne.n	800f79c <vTaskStartScheduler+0xac>
	__asm volatile
 800f786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f78a:	f383 8811 	msr	BASEPRI, r3
 800f78e:	f3bf 8f6f 	isb	sy
 800f792:	f3bf 8f4f 	dsb	sy
 800f796:	60fb      	str	r3, [r7, #12]
}
 800f798:	bf00      	nop
 800f79a:	e7fe      	b.n	800f79a <vTaskStartScheduler+0xaa>
}
 800f79c:	bf00      	nop
 800f79e:	3718      	adds	r7, #24
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	bd80      	pop	{r7, pc}
 800f7a4:	080143a0 	.word	0x080143a0
 800f7a8:	0800fd71 	.word	0x0800fd71
 800f7ac:	24005af0 	.word	0x24005af0
 800f7b0:	24005aec 	.word	0x24005aec
 800f7b4:	24005ad8 	.word	0x24005ad8
 800f7b8:	24005ad0 	.word	0x24005ad0

0800f7bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f7bc:	b480      	push	{r7}
 800f7be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f7c0:	4b04      	ldr	r3, [pc, #16]	; (800f7d4 <vTaskSuspendAll+0x18>)
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	3301      	adds	r3, #1
 800f7c6:	4a03      	ldr	r2, [pc, #12]	; (800f7d4 <vTaskSuspendAll+0x18>)
 800f7c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f7ca:	bf00      	nop
 800f7cc:	46bd      	mov	sp, r7
 800f7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d2:	4770      	bx	lr
 800f7d4:	24005af4 	.word	0x24005af4

0800f7d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b084      	sub	sp, #16
 800f7dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f7de:	2300      	movs	r3, #0
 800f7e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f7e2:	2300      	movs	r3, #0
 800f7e4:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f7e6:	4b3c      	ldr	r3, [pc, #240]	; (800f8d8 <xTaskResumeAll+0x100>)
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d10a      	bne.n	800f804 <xTaskResumeAll+0x2c>
	__asm volatile
 800f7ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7f2:	f383 8811 	msr	BASEPRI, r3
 800f7f6:	f3bf 8f6f 	isb	sy
 800f7fa:	f3bf 8f4f 	dsb	sy
 800f7fe:	603b      	str	r3, [r7, #0]
}
 800f800:	bf00      	nop
 800f802:	e7fe      	b.n	800f802 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f804:	f001 f9de 	bl	8010bc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f808:	4b33      	ldr	r3, [pc, #204]	; (800f8d8 <xTaskResumeAll+0x100>)
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	3b01      	subs	r3, #1
 800f80e:	4a32      	ldr	r2, [pc, #200]	; (800f8d8 <xTaskResumeAll+0x100>)
 800f810:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f812:	4b31      	ldr	r3, [pc, #196]	; (800f8d8 <xTaskResumeAll+0x100>)
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	2b00      	cmp	r3, #0
 800f818:	d156      	bne.n	800f8c8 <xTaskResumeAll+0xf0>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f81a:	4b30      	ldr	r3, [pc, #192]	; (800f8dc <xTaskResumeAll+0x104>)
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d052      	beq.n	800f8c8 <xTaskResumeAll+0xf0>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f822:	e02f      	b.n	800f884 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f824:	4b2e      	ldr	r3, [pc, #184]	; (800f8e0 <xTaskResumeAll+0x108>)
 800f826:	68db      	ldr	r3, [r3, #12]
 800f828:	68db      	ldr	r3, [r3, #12]
 800f82a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	3318      	adds	r3, #24
 800f830:	4618      	mov	r0, r3
 800f832:	f7fe fe1d 	bl	800e470 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	3304      	adds	r3, #4
 800f83a:	4618      	mov	r0, r3
 800f83c:	f7fe fe18 	bl	800e470 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f844:	4b27      	ldr	r3, [pc, #156]	; (800f8e4 <xTaskResumeAll+0x10c>)
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	429a      	cmp	r2, r3
 800f84a:	d903      	bls.n	800f854 <xTaskResumeAll+0x7c>
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f850:	4a24      	ldr	r2, [pc, #144]	; (800f8e4 <xTaskResumeAll+0x10c>)
 800f852:	6013      	str	r3, [r2, #0]
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f858:	4613      	mov	r3, r2
 800f85a:	009b      	lsls	r3, r3, #2
 800f85c:	4413      	add	r3, r2
 800f85e:	009b      	lsls	r3, r3, #2
 800f860:	4a21      	ldr	r2, [pc, #132]	; (800f8e8 <xTaskResumeAll+0x110>)
 800f862:	441a      	add	r2, r3
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	3304      	adds	r3, #4
 800f868:	4619      	mov	r1, r3
 800f86a:	4610      	mov	r0, r2
 800f86c:	f7fe fda3 	bl	800e3b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f874:	4b1d      	ldr	r3, [pc, #116]	; (800f8ec <xTaskResumeAll+0x114>)
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f87a:	429a      	cmp	r2, r3
 800f87c:	d302      	bcc.n	800f884 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800f87e:	4b1c      	ldr	r3, [pc, #112]	; (800f8f0 <xTaskResumeAll+0x118>)
 800f880:	2201      	movs	r2, #1
 800f882:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f884:	4b16      	ldr	r3, [pc, #88]	; (800f8e0 <xTaskResumeAll+0x108>)
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d1cb      	bne.n	800f824 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d001      	beq.n	800f896 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f892:	f000 fb1d 	bl	800fed0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f896:	4b17      	ldr	r3, [pc, #92]	; (800f8f4 <xTaskResumeAll+0x11c>)
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	60bb      	str	r3, [r7, #8]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f89c:	68bb      	ldr	r3, [r7, #8]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d010      	beq.n	800f8c4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f8a2:	f000 f839 	bl	800f918 <xTaskIncrementTick>
 800f8a6:	4603      	mov	r3, r0
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d002      	beq.n	800f8b2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800f8ac:	4b10      	ldr	r3, [pc, #64]	; (800f8f0 <xTaskResumeAll+0x118>)
 800f8ae:	2201      	movs	r2, #1
 800f8b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f8b2:	68bb      	ldr	r3, [r7, #8]
 800f8b4:	3b01      	subs	r3, #1
 800f8b6:	60bb      	str	r3, [r7, #8]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f8b8:	68bb      	ldr	r3, [r7, #8]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d1f1      	bne.n	800f8a2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800f8be:	4b0d      	ldr	r3, [pc, #52]	; (800f8f4 <xTaskResumeAll+0x11c>)
 800f8c0:	2200      	movs	r2, #0
 800f8c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f8c4:	4b0a      	ldr	r3, [pc, #40]	; (800f8f0 <xTaskResumeAll+0x118>)
 800f8c6:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f8c8:	f001 f9ac 	bl	8010c24 <vPortExitCritical>

	return xAlreadyYielded;
 800f8cc:	687b      	ldr	r3, [r7, #4]
}
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	3710      	adds	r7, #16
 800f8d2:	46bd      	mov	sp, r7
 800f8d4:	bd80      	pop	{r7, pc}
 800f8d6:	bf00      	nop
 800f8d8:	24005af4 	.word	0x24005af4
 800f8dc:	24005acc 	.word	0x24005acc
 800f8e0:	24005a8c 	.word	0x24005a8c
 800f8e4:	24005ad4 	.word	0x24005ad4
 800f8e8:	240055fc 	.word	0x240055fc
 800f8ec:	240055f8 	.word	0x240055f8
 800f8f0:	24005ae0 	.word	0x24005ae0
 800f8f4:	24005adc 	.word	0x24005adc

0800f8f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f8f8:	b480      	push	{r7}
 800f8fa:	b083      	sub	sp, #12
 800f8fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f8fe:	4b05      	ldr	r3, [pc, #20]	; (800f914 <xTaskGetTickCount+0x1c>)
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f904:	687b      	ldr	r3, [r7, #4]
}
 800f906:	4618      	mov	r0, r3
 800f908:	370c      	adds	r7, #12
 800f90a:	46bd      	mov	sp, r7
 800f90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f910:	4770      	bx	lr
 800f912:	bf00      	nop
 800f914:	24005ad0 	.word	0x24005ad0

0800f918 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f918:	b580      	push	{r7, lr}
 800f91a:	b086      	sub	sp, #24
 800f91c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f91e:	2300      	movs	r3, #0
 800f920:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f922:	4b3f      	ldr	r3, [pc, #252]	; (800fa20 <xTaskIncrementTick+0x108>)
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d170      	bne.n	800fa0c <xTaskIncrementTick+0xf4>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f92a:	4b3e      	ldr	r3, [pc, #248]	; (800fa24 <xTaskIncrementTick+0x10c>)
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	3301      	adds	r3, #1
 800f930:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f932:	4a3c      	ldr	r2, [pc, #240]	; (800fa24 <xTaskIncrementTick+0x10c>)
 800f934:	693b      	ldr	r3, [r7, #16]
 800f936:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f938:	693b      	ldr	r3, [r7, #16]
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d120      	bne.n	800f980 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800f93e:	4b3a      	ldr	r3, [pc, #232]	; (800fa28 <xTaskIncrementTick+0x110>)
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	2b00      	cmp	r3, #0
 800f946:	d00a      	beq.n	800f95e <xTaskIncrementTick+0x46>
	__asm volatile
 800f948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f94c:	f383 8811 	msr	BASEPRI, r3
 800f950:	f3bf 8f6f 	isb	sy
 800f954:	f3bf 8f4f 	dsb	sy
 800f958:	603b      	str	r3, [r7, #0]
}
 800f95a:	bf00      	nop
 800f95c:	e7fe      	b.n	800f95c <xTaskIncrementTick+0x44>
 800f95e:	4b32      	ldr	r3, [pc, #200]	; (800fa28 <xTaskIncrementTick+0x110>)
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	60fb      	str	r3, [r7, #12]
 800f964:	4b31      	ldr	r3, [pc, #196]	; (800fa2c <xTaskIncrementTick+0x114>)
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	4a2f      	ldr	r2, [pc, #188]	; (800fa28 <xTaskIncrementTick+0x110>)
 800f96a:	6013      	str	r3, [r2, #0]
 800f96c:	4a2f      	ldr	r2, [pc, #188]	; (800fa2c <xTaskIncrementTick+0x114>)
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	6013      	str	r3, [r2, #0]
 800f972:	4b2f      	ldr	r3, [pc, #188]	; (800fa30 <xTaskIncrementTick+0x118>)
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	3301      	adds	r3, #1
 800f978:	4a2d      	ldr	r2, [pc, #180]	; (800fa30 <xTaskIncrementTick+0x118>)
 800f97a:	6013      	str	r3, [r2, #0]
 800f97c:	f000 faa8 	bl	800fed0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f980:	4b2c      	ldr	r3, [pc, #176]	; (800fa34 <xTaskIncrementTick+0x11c>)
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	693a      	ldr	r2, [r7, #16]
 800f986:	429a      	cmp	r2, r3
 800f988:	d345      	bcc.n	800fa16 <xTaskIncrementTick+0xfe>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f98a:	4b27      	ldr	r3, [pc, #156]	; (800fa28 <xTaskIncrementTick+0x110>)
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d104      	bne.n	800f99e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f994:	4b27      	ldr	r3, [pc, #156]	; (800fa34 <xTaskIncrementTick+0x11c>)
 800f996:	f04f 32ff 	mov.w	r2, #4294967295
 800f99a:	601a      	str	r2, [r3, #0]
					break;
 800f99c:	e03b      	b.n	800fa16 <xTaskIncrementTick+0xfe>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f99e:	4b22      	ldr	r3, [pc, #136]	; (800fa28 <xTaskIncrementTick+0x110>)
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	68db      	ldr	r3, [r3, #12]
 800f9a4:	68db      	ldr	r3, [r3, #12]
 800f9a6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f9a8:	68bb      	ldr	r3, [r7, #8]
 800f9aa:	685b      	ldr	r3, [r3, #4]
 800f9ac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f9ae:	693a      	ldr	r2, [r7, #16]
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	429a      	cmp	r2, r3
 800f9b4:	d203      	bcs.n	800f9be <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f9b6:	4a1f      	ldr	r2, [pc, #124]	; (800fa34 <xTaskIncrementTick+0x11c>)
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f9bc:	e02b      	b.n	800fa16 <xTaskIncrementTick+0xfe>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f9be:	68bb      	ldr	r3, [r7, #8]
 800f9c0:	3304      	adds	r3, #4
 800f9c2:	4618      	mov	r0, r3
 800f9c4:	f7fe fd54 	bl	800e470 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f9c8:	68bb      	ldr	r3, [r7, #8]
 800f9ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d004      	beq.n	800f9da <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f9d0:	68bb      	ldr	r3, [r7, #8]
 800f9d2:	3318      	adds	r3, #24
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	f7fe fd4b 	bl	800e470 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f9da:	68bb      	ldr	r3, [r7, #8]
 800f9dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9de:	4b16      	ldr	r3, [pc, #88]	; (800fa38 <xTaskIncrementTick+0x120>)
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	429a      	cmp	r2, r3
 800f9e4:	d903      	bls.n	800f9ee <xTaskIncrementTick+0xd6>
 800f9e6:	68bb      	ldr	r3, [r7, #8]
 800f9e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9ea:	4a13      	ldr	r2, [pc, #76]	; (800fa38 <xTaskIncrementTick+0x120>)
 800f9ec:	6013      	str	r3, [r2, #0]
 800f9ee:	68bb      	ldr	r3, [r7, #8]
 800f9f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9f2:	4613      	mov	r3, r2
 800f9f4:	009b      	lsls	r3, r3, #2
 800f9f6:	4413      	add	r3, r2
 800f9f8:	009b      	lsls	r3, r3, #2
 800f9fa:	4a10      	ldr	r2, [pc, #64]	; (800fa3c <xTaskIncrementTick+0x124>)
 800f9fc:	441a      	add	r2, r3
 800f9fe:	68bb      	ldr	r3, [r7, #8]
 800fa00:	3304      	adds	r3, #4
 800fa02:	4619      	mov	r1, r3
 800fa04:	4610      	mov	r0, r2
 800fa06:	f7fe fcd6 	bl	800e3b6 <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fa0a:	e7be      	b.n	800f98a <xTaskIncrementTick+0x72>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800fa0c:	4b0c      	ldr	r3, [pc, #48]	; (800fa40 <xTaskIncrementTick+0x128>)
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	3301      	adds	r3, #1
 800fa12:	4a0b      	ldr	r2, [pc, #44]	; (800fa40 <xTaskIncrementTick+0x128>)
 800fa14:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800fa16:	697b      	ldr	r3, [r7, #20]
}
 800fa18:	4618      	mov	r0, r3
 800fa1a:	3718      	adds	r7, #24
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	bd80      	pop	{r7, pc}
 800fa20:	24005af4 	.word	0x24005af4
 800fa24:	24005ad0 	.word	0x24005ad0
 800fa28:	24005a84 	.word	0x24005a84
 800fa2c:	24005a88 	.word	0x24005a88
 800fa30:	24005ae4 	.word	0x24005ae4
 800fa34:	24005aec 	.word	0x24005aec
 800fa38:	24005ad4 	.word	0x24005ad4
 800fa3c:	240055fc 	.word	0x240055fc
 800fa40:	24005adc 	.word	0x24005adc

0800fa44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fa44:	b480      	push	{r7}
 800fa46:	b085      	sub	sp, #20
 800fa48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fa4a:	4b28      	ldr	r3, [pc, #160]	; (800faec <vTaskSwitchContext+0xa8>)
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d003      	beq.n	800fa5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fa52:	4b27      	ldr	r3, [pc, #156]	; (800faf0 <vTaskSwitchContext+0xac>)
 800fa54:	2201      	movs	r2, #1
 800fa56:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fa58:	e041      	b.n	800fade <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800fa5a:	4b25      	ldr	r3, [pc, #148]	; (800faf0 <vTaskSwitchContext+0xac>)
 800fa5c:	2200      	movs	r2, #0
 800fa5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa60:	4b24      	ldr	r3, [pc, #144]	; (800faf4 <vTaskSwitchContext+0xb0>)
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	60fb      	str	r3, [r7, #12]
 800fa66:	e010      	b.n	800fa8a <vTaskSwitchContext+0x46>
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d10a      	bne.n	800fa84 <vTaskSwitchContext+0x40>
	__asm volatile
 800fa6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa72:	f383 8811 	msr	BASEPRI, r3
 800fa76:	f3bf 8f6f 	isb	sy
 800fa7a:	f3bf 8f4f 	dsb	sy
 800fa7e:	607b      	str	r3, [r7, #4]
}
 800fa80:	bf00      	nop
 800fa82:	e7fe      	b.n	800fa82 <vTaskSwitchContext+0x3e>
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	3b01      	subs	r3, #1
 800fa88:	60fb      	str	r3, [r7, #12]
 800fa8a:	491b      	ldr	r1, [pc, #108]	; (800faf8 <vTaskSwitchContext+0xb4>)
 800fa8c:	68fa      	ldr	r2, [r7, #12]
 800fa8e:	4613      	mov	r3, r2
 800fa90:	009b      	lsls	r3, r3, #2
 800fa92:	4413      	add	r3, r2
 800fa94:	009b      	lsls	r3, r3, #2
 800fa96:	440b      	add	r3, r1
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d0e4      	beq.n	800fa68 <vTaskSwitchContext+0x24>
 800fa9e:	68fa      	ldr	r2, [r7, #12]
 800faa0:	4613      	mov	r3, r2
 800faa2:	009b      	lsls	r3, r3, #2
 800faa4:	4413      	add	r3, r2
 800faa6:	009b      	lsls	r3, r3, #2
 800faa8:	4a13      	ldr	r2, [pc, #76]	; (800faf8 <vTaskSwitchContext+0xb4>)
 800faaa:	4413      	add	r3, r2
 800faac:	60bb      	str	r3, [r7, #8]
 800faae:	68bb      	ldr	r3, [r7, #8]
 800fab0:	685b      	ldr	r3, [r3, #4]
 800fab2:	685a      	ldr	r2, [r3, #4]
 800fab4:	68bb      	ldr	r3, [r7, #8]
 800fab6:	605a      	str	r2, [r3, #4]
 800fab8:	68bb      	ldr	r3, [r7, #8]
 800faba:	685a      	ldr	r2, [r3, #4]
 800fabc:	68bb      	ldr	r3, [r7, #8]
 800fabe:	3308      	adds	r3, #8
 800fac0:	429a      	cmp	r2, r3
 800fac2:	d104      	bne.n	800face <vTaskSwitchContext+0x8a>
 800fac4:	68bb      	ldr	r3, [r7, #8]
 800fac6:	685b      	ldr	r3, [r3, #4]
 800fac8:	685a      	ldr	r2, [r3, #4]
 800faca:	68bb      	ldr	r3, [r7, #8]
 800facc:	605a      	str	r2, [r3, #4]
 800face:	68bb      	ldr	r3, [r7, #8]
 800fad0:	685b      	ldr	r3, [r3, #4]
 800fad2:	68db      	ldr	r3, [r3, #12]
 800fad4:	4a09      	ldr	r2, [pc, #36]	; (800fafc <vTaskSwitchContext+0xb8>)
 800fad6:	6013      	str	r3, [r2, #0]
 800fad8:	4a06      	ldr	r2, [pc, #24]	; (800faf4 <vTaskSwitchContext+0xb0>)
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	6013      	str	r3, [r2, #0]
}
 800fade:	bf00      	nop
 800fae0:	3714      	adds	r7, #20
 800fae2:	46bd      	mov	sp, r7
 800fae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae8:	4770      	bx	lr
 800faea:	bf00      	nop
 800faec:	24005af4 	.word	0x24005af4
 800faf0:	24005ae0 	.word	0x24005ae0
 800faf4:	24005ad4 	.word	0x24005ad4
 800faf8:	240055fc 	.word	0x240055fc
 800fafc:	240055f8 	.word	0x240055f8

0800fb00 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b084      	sub	sp, #16
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
 800fb08:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d10a      	bne.n	800fb26 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800fb10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb14:	f383 8811 	msr	BASEPRI, r3
 800fb18:	f3bf 8f6f 	isb	sy
 800fb1c:	f3bf 8f4f 	dsb	sy
 800fb20:	60fb      	str	r3, [r7, #12]
}
 800fb22:	bf00      	nop
 800fb24:	e7fe      	b.n	800fb24 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fb26:	4b07      	ldr	r3, [pc, #28]	; (800fb44 <vTaskPlaceOnEventList+0x44>)
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	3318      	adds	r3, #24
 800fb2c:	4619      	mov	r1, r3
 800fb2e:	6878      	ldr	r0, [r7, #4]
 800fb30:	f7fe fc65 	bl	800e3fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fb34:	2101      	movs	r1, #1
 800fb36:	6838      	ldr	r0, [r7, #0]
 800fb38:	f000 fb74 	bl	8010224 <prvAddCurrentTaskToDelayedList>
}
 800fb3c:	bf00      	nop
 800fb3e:	3710      	adds	r7, #16
 800fb40:	46bd      	mov	sp, r7
 800fb42:	bd80      	pop	{r7, pc}
 800fb44:	240055f8 	.word	0x240055f8

0800fb48 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fb48:	b580      	push	{r7, lr}
 800fb4a:	b086      	sub	sp, #24
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	60f8      	str	r0, [r7, #12]
 800fb50:	60b9      	str	r1, [r7, #8]
 800fb52:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d10a      	bne.n	800fb70 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800fb5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb5e:	f383 8811 	msr	BASEPRI, r3
 800fb62:	f3bf 8f6f 	isb	sy
 800fb66:	f3bf 8f4f 	dsb	sy
 800fb6a:	617b      	str	r3, [r7, #20]
}
 800fb6c:	bf00      	nop
 800fb6e:	e7fe      	b.n	800fb6e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fb70:	4b0a      	ldr	r3, [pc, #40]	; (800fb9c <vTaskPlaceOnEventListRestricted+0x54>)
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	3318      	adds	r3, #24
 800fb76:	4619      	mov	r1, r3
 800fb78:	68f8      	ldr	r0, [r7, #12]
 800fb7a:	f7fe fc1c 	bl	800e3b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d002      	beq.n	800fb8a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800fb84:	f04f 33ff 	mov.w	r3, #4294967295
 800fb88:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800fb8a:	6879      	ldr	r1, [r7, #4]
 800fb8c:	68b8      	ldr	r0, [r7, #8]
 800fb8e:	f000 fb49 	bl	8010224 <prvAddCurrentTaskToDelayedList>
	}
 800fb92:	bf00      	nop
 800fb94:	3718      	adds	r7, #24
 800fb96:	46bd      	mov	sp, r7
 800fb98:	bd80      	pop	{r7, pc}
 800fb9a:	bf00      	nop
 800fb9c:	240055f8 	.word	0x240055f8

0800fba0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b086      	sub	sp, #24
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	68db      	ldr	r3, [r3, #12]
 800fbac:	68db      	ldr	r3, [r3, #12]
 800fbae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fbb0:	693b      	ldr	r3, [r7, #16]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d10a      	bne.n	800fbcc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800fbb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbba:	f383 8811 	msr	BASEPRI, r3
 800fbbe:	f3bf 8f6f 	isb	sy
 800fbc2:	f3bf 8f4f 	dsb	sy
 800fbc6:	60fb      	str	r3, [r7, #12]
}
 800fbc8:	bf00      	nop
 800fbca:	e7fe      	b.n	800fbca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fbcc:	693b      	ldr	r3, [r7, #16]
 800fbce:	3318      	adds	r3, #24
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	f7fe fc4d 	bl	800e470 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fbd6:	4b1e      	ldr	r3, [pc, #120]	; (800fc50 <xTaskRemoveFromEventList+0xb0>)
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d11d      	bne.n	800fc1a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fbde:	693b      	ldr	r3, [r7, #16]
 800fbe0:	3304      	adds	r3, #4
 800fbe2:	4618      	mov	r0, r3
 800fbe4:	f7fe fc44 	bl	800e470 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fbe8:	693b      	ldr	r3, [r7, #16]
 800fbea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbec:	4b19      	ldr	r3, [pc, #100]	; (800fc54 <xTaskRemoveFromEventList+0xb4>)
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	429a      	cmp	r2, r3
 800fbf2:	d903      	bls.n	800fbfc <xTaskRemoveFromEventList+0x5c>
 800fbf4:	693b      	ldr	r3, [r7, #16]
 800fbf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbf8:	4a16      	ldr	r2, [pc, #88]	; (800fc54 <xTaskRemoveFromEventList+0xb4>)
 800fbfa:	6013      	str	r3, [r2, #0]
 800fbfc:	693b      	ldr	r3, [r7, #16]
 800fbfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc00:	4613      	mov	r3, r2
 800fc02:	009b      	lsls	r3, r3, #2
 800fc04:	4413      	add	r3, r2
 800fc06:	009b      	lsls	r3, r3, #2
 800fc08:	4a13      	ldr	r2, [pc, #76]	; (800fc58 <xTaskRemoveFromEventList+0xb8>)
 800fc0a:	441a      	add	r2, r3
 800fc0c:	693b      	ldr	r3, [r7, #16]
 800fc0e:	3304      	adds	r3, #4
 800fc10:	4619      	mov	r1, r3
 800fc12:	4610      	mov	r0, r2
 800fc14:	f7fe fbcf 	bl	800e3b6 <vListInsertEnd>
 800fc18:	e005      	b.n	800fc26 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fc1a:	693b      	ldr	r3, [r7, #16]
 800fc1c:	3318      	adds	r3, #24
 800fc1e:	4619      	mov	r1, r3
 800fc20:	480e      	ldr	r0, [pc, #56]	; (800fc5c <xTaskRemoveFromEventList+0xbc>)
 800fc22:	f7fe fbc8 	bl	800e3b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fc26:	693b      	ldr	r3, [r7, #16]
 800fc28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc2a:	4b0d      	ldr	r3, [pc, #52]	; (800fc60 <xTaskRemoveFromEventList+0xc0>)
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc30:	429a      	cmp	r2, r3
 800fc32:	d905      	bls.n	800fc40 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fc34:	2301      	movs	r3, #1
 800fc36:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fc38:	4b0a      	ldr	r3, [pc, #40]	; (800fc64 <xTaskRemoveFromEventList+0xc4>)
 800fc3a:	2201      	movs	r2, #1
 800fc3c:	601a      	str	r2, [r3, #0]
 800fc3e:	e001      	b.n	800fc44 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800fc40:	2300      	movs	r3, #0
 800fc42:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800fc44:	697b      	ldr	r3, [r7, #20]
}
 800fc46:	4618      	mov	r0, r3
 800fc48:	3718      	adds	r7, #24
 800fc4a:	46bd      	mov	sp, r7
 800fc4c:	bd80      	pop	{r7, pc}
 800fc4e:	bf00      	nop
 800fc50:	24005af4 	.word	0x24005af4
 800fc54:	24005ad4 	.word	0x24005ad4
 800fc58:	240055fc 	.word	0x240055fc
 800fc5c:	24005a8c 	.word	0x24005a8c
 800fc60:	240055f8 	.word	0x240055f8
 800fc64:	24005ae0 	.word	0x24005ae0

0800fc68 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fc68:	b480      	push	{r7}
 800fc6a:	b083      	sub	sp, #12
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fc70:	4b06      	ldr	r3, [pc, #24]	; (800fc8c <vTaskInternalSetTimeOutState+0x24>)
 800fc72:	681a      	ldr	r2, [r3, #0]
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fc78:	4b05      	ldr	r3, [pc, #20]	; (800fc90 <vTaskInternalSetTimeOutState+0x28>)
 800fc7a:	681a      	ldr	r2, [r3, #0]
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	605a      	str	r2, [r3, #4]
}
 800fc80:	bf00      	nop
 800fc82:	370c      	adds	r7, #12
 800fc84:	46bd      	mov	sp, r7
 800fc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc8a:	4770      	bx	lr
 800fc8c:	24005ae4 	.word	0x24005ae4
 800fc90:	24005ad0 	.word	0x24005ad0

0800fc94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b088      	sub	sp, #32
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	6078      	str	r0, [r7, #4]
 800fc9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d10a      	bne.n	800fcba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800fca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fca8:	f383 8811 	msr	BASEPRI, r3
 800fcac:	f3bf 8f6f 	isb	sy
 800fcb0:	f3bf 8f4f 	dsb	sy
 800fcb4:	613b      	str	r3, [r7, #16]
}
 800fcb6:	bf00      	nop
 800fcb8:	e7fe      	b.n	800fcb8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800fcba:	683b      	ldr	r3, [r7, #0]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d10a      	bne.n	800fcd6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800fcc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcc4:	f383 8811 	msr	BASEPRI, r3
 800fcc8:	f3bf 8f6f 	isb	sy
 800fccc:	f3bf 8f4f 	dsb	sy
 800fcd0:	60fb      	str	r3, [r7, #12]
}
 800fcd2:	bf00      	nop
 800fcd4:	e7fe      	b.n	800fcd4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800fcd6:	f000 ff75 	bl	8010bc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fcda:	4b1d      	ldr	r3, [pc, #116]	; (800fd50 <xTaskCheckForTimeOut+0xbc>)
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	685b      	ldr	r3, [r3, #4]
 800fce4:	69ba      	ldr	r2, [r7, #24]
 800fce6:	1ad3      	subs	r3, r2, r3
 800fce8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fcea:	683b      	ldr	r3, [r7, #0]
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcf2:	d102      	bne.n	800fcfa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	61fb      	str	r3, [r7, #28]
 800fcf8:	e023      	b.n	800fd42 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	681a      	ldr	r2, [r3, #0]
 800fcfe:	4b15      	ldr	r3, [pc, #84]	; (800fd54 <xTaskCheckForTimeOut+0xc0>)
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	429a      	cmp	r2, r3
 800fd04:	d007      	beq.n	800fd16 <xTaskCheckForTimeOut+0x82>
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	685b      	ldr	r3, [r3, #4]
 800fd0a:	69ba      	ldr	r2, [r7, #24]
 800fd0c:	429a      	cmp	r2, r3
 800fd0e:	d302      	bcc.n	800fd16 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fd10:	2301      	movs	r3, #1
 800fd12:	61fb      	str	r3, [r7, #28]
 800fd14:	e015      	b.n	800fd42 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fd16:	683b      	ldr	r3, [r7, #0]
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	697a      	ldr	r2, [r7, #20]
 800fd1c:	429a      	cmp	r2, r3
 800fd1e:	d20b      	bcs.n	800fd38 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fd20:	683b      	ldr	r3, [r7, #0]
 800fd22:	681a      	ldr	r2, [r3, #0]
 800fd24:	697b      	ldr	r3, [r7, #20]
 800fd26:	1ad2      	subs	r2, r2, r3
 800fd28:	683b      	ldr	r3, [r7, #0]
 800fd2a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fd2c:	6878      	ldr	r0, [r7, #4]
 800fd2e:	f7ff ff9b 	bl	800fc68 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fd32:	2300      	movs	r3, #0
 800fd34:	61fb      	str	r3, [r7, #28]
 800fd36:	e004      	b.n	800fd42 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800fd38:	683b      	ldr	r3, [r7, #0]
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fd3e:	2301      	movs	r3, #1
 800fd40:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800fd42:	f000 ff6f 	bl	8010c24 <vPortExitCritical>

	return xReturn;
 800fd46:	69fb      	ldr	r3, [r7, #28]
}
 800fd48:	4618      	mov	r0, r3
 800fd4a:	3720      	adds	r7, #32
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	bd80      	pop	{r7, pc}
 800fd50:	24005ad0 	.word	0x24005ad0
 800fd54:	24005ae4 	.word	0x24005ae4

0800fd58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fd58:	b480      	push	{r7}
 800fd5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fd5c:	4b03      	ldr	r3, [pc, #12]	; (800fd6c <vTaskMissedYield+0x14>)
 800fd5e:	2201      	movs	r2, #1
 800fd60:	601a      	str	r2, [r3, #0]
}
 800fd62:	bf00      	nop
 800fd64:	46bd      	mov	sp, r7
 800fd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6a:	4770      	bx	lr
 800fd6c:	24005ae0 	.word	0x24005ae0

0800fd70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b082      	sub	sp, #8
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fd78:	f000 f84c 	bl	800fe14 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 800fd7c:	4b04      	ldr	r3, [pc, #16]	; (800fd90 <prvIdleTask+0x20>)
 800fd7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd82:	601a      	str	r2, [r3, #0]
 800fd84:	f3bf 8f4f 	dsb	sy
 800fd88:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800fd8c:	e7f4      	b.n	800fd78 <prvIdleTask+0x8>
 800fd8e:	bf00      	nop
 800fd90:	e000ed04 	.word	0xe000ed04

0800fd94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b082      	sub	sp, #8
 800fd98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	607b      	str	r3, [r7, #4]
 800fd9e:	e00c      	b.n	800fdba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fda0:	687a      	ldr	r2, [r7, #4]
 800fda2:	4613      	mov	r3, r2
 800fda4:	009b      	lsls	r3, r3, #2
 800fda6:	4413      	add	r3, r2
 800fda8:	009b      	lsls	r3, r3, #2
 800fdaa:	4a12      	ldr	r2, [pc, #72]	; (800fdf4 <prvInitialiseTaskLists+0x60>)
 800fdac:	4413      	add	r3, r2
 800fdae:	4618      	mov	r0, r3
 800fdb0:	f7fe fad4 	bl	800e35c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	3301      	adds	r3, #1
 800fdb8:	607b      	str	r3, [r7, #4]
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	2b37      	cmp	r3, #55	; 0x37
 800fdbe:	d9ef      	bls.n	800fda0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fdc0:	480d      	ldr	r0, [pc, #52]	; (800fdf8 <prvInitialiseTaskLists+0x64>)
 800fdc2:	f7fe facb 	bl	800e35c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fdc6:	480d      	ldr	r0, [pc, #52]	; (800fdfc <prvInitialiseTaskLists+0x68>)
 800fdc8:	f7fe fac8 	bl	800e35c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fdcc:	480c      	ldr	r0, [pc, #48]	; (800fe00 <prvInitialiseTaskLists+0x6c>)
 800fdce:	f7fe fac5 	bl	800e35c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fdd2:	480c      	ldr	r0, [pc, #48]	; (800fe04 <prvInitialiseTaskLists+0x70>)
 800fdd4:	f7fe fac2 	bl	800e35c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fdd8:	480b      	ldr	r0, [pc, #44]	; (800fe08 <prvInitialiseTaskLists+0x74>)
 800fdda:	f7fe fabf 	bl	800e35c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fdde:	4b0b      	ldr	r3, [pc, #44]	; (800fe0c <prvInitialiseTaskLists+0x78>)
 800fde0:	4a05      	ldr	r2, [pc, #20]	; (800fdf8 <prvInitialiseTaskLists+0x64>)
 800fde2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fde4:	4b0a      	ldr	r3, [pc, #40]	; (800fe10 <prvInitialiseTaskLists+0x7c>)
 800fde6:	4a05      	ldr	r2, [pc, #20]	; (800fdfc <prvInitialiseTaskLists+0x68>)
 800fde8:	601a      	str	r2, [r3, #0]
}
 800fdea:	bf00      	nop
 800fdec:	3708      	adds	r7, #8
 800fdee:	46bd      	mov	sp, r7
 800fdf0:	bd80      	pop	{r7, pc}
 800fdf2:	bf00      	nop
 800fdf4:	240055fc 	.word	0x240055fc
 800fdf8:	24005a5c 	.word	0x24005a5c
 800fdfc:	24005a70 	.word	0x24005a70
 800fe00:	24005a8c 	.word	0x24005a8c
 800fe04:	24005aa0 	.word	0x24005aa0
 800fe08:	24005ab8 	.word	0x24005ab8
 800fe0c:	24005a84 	.word	0x24005a84
 800fe10:	24005a88 	.word	0x24005a88

0800fe14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fe14:	b580      	push	{r7, lr}
 800fe16:	b082      	sub	sp, #8
 800fe18:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fe1a:	e019      	b.n	800fe50 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800fe1c:	f000 fed2 	bl	8010bc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe20:	4b10      	ldr	r3, [pc, #64]	; (800fe64 <prvCheckTasksWaitingTermination+0x50>)
 800fe22:	68db      	ldr	r3, [r3, #12]
 800fe24:	68db      	ldr	r3, [r3, #12]
 800fe26:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	3304      	adds	r3, #4
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	f7fe fb1f 	bl	800e470 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fe32:	4b0d      	ldr	r3, [pc, #52]	; (800fe68 <prvCheckTasksWaitingTermination+0x54>)
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	3b01      	subs	r3, #1
 800fe38:	4a0b      	ldr	r2, [pc, #44]	; (800fe68 <prvCheckTasksWaitingTermination+0x54>)
 800fe3a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fe3c:	4b0b      	ldr	r3, [pc, #44]	; (800fe6c <prvCheckTasksWaitingTermination+0x58>)
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	3b01      	subs	r3, #1
 800fe42:	4a0a      	ldr	r2, [pc, #40]	; (800fe6c <prvCheckTasksWaitingTermination+0x58>)
 800fe44:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800fe46:	f000 feed 	bl	8010c24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fe4a:	6878      	ldr	r0, [r7, #4]
 800fe4c:	f000 f810 	bl	800fe70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fe50:	4b06      	ldr	r3, [pc, #24]	; (800fe6c <prvCheckTasksWaitingTermination+0x58>)
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d1e1      	bne.n	800fe1c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fe58:	bf00      	nop
 800fe5a:	bf00      	nop
 800fe5c:	3708      	adds	r7, #8
 800fe5e:	46bd      	mov	sp, r7
 800fe60:	bd80      	pop	{r7, pc}
 800fe62:	bf00      	nop
 800fe64:	24005aa0 	.word	0x24005aa0
 800fe68:	24005acc 	.word	0x24005acc
 800fe6c:	24005ab4 	.word	0x24005ab4

0800fe70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800fe70:	b580      	push	{r7, lr}
 800fe72:	b084      	sub	sp, #16
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d108      	bne.n	800fe94 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe86:	4618      	mov	r0, r3
 800fe88:	f001 f88a 	bl	8010fa0 <vPortFree>
				vPortFree( pxTCB );
 800fe8c:	6878      	ldr	r0, [r7, #4]
 800fe8e:	f001 f887 	bl	8010fa0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fe92:	e018      	b.n	800fec6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800fe9a:	2b01      	cmp	r3, #1
 800fe9c:	d103      	bne.n	800fea6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800fe9e:	6878      	ldr	r0, [r7, #4]
 800fea0:	f001 f87e 	bl	8010fa0 <vPortFree>
	}
 800fea4:	e00f      	b.n	800fec6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800feac:	2b02      	cmp	r3, #2
 800feae:	d00a      	beq.n	800fec6 <prvDeleteTCB+0x56>
	__asm volatile
 800feb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feb4:	f383 8811 	msr	BASEPRI, r3
 800feb8:	f3bf 8f6f 	isb	sy
 800febc:	f3bf 8f4f 	dsb	sy
 800fec0:	60fb      	str	r3, [r7, #12]
}
 800fec2:	bf00      	nop
 800fec4:	e7fe      	b.n	800fec4 <prvDeleteTCB+0x54>
	}
 800fec6:	bf00      	nop
 800fec8:	3710      	adds	r7, #16
 800feca:	46bd      	mov	sp, r7
 800fecc:	bd80      	pop	{r7, pc}
	...

0800fed0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fed0:	b480      	push	{r7}
 800fed2:	b083      	sub	sp, #12
 800fed4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fed6:	4b0c      	ldr	r3, [pc, #48]	; (800ff08 <prvResetNextTaskUnblockTime+0x38>)
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d104      	bne.n	800feea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fee0:	4b0a      	ldr	r3, [pc, #40]	; (800ff0c <prvResetNextTaskUnblockTime+0x3c>)
 800fee2:	f04f 32ff 	mov.w	r2, #4294967295
 800fee6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fee8:	e008      	b.n	800fefc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800feea:	4b07      	ldr	r3, [pc, #28]	; (800ff08 <prvResetNextTaskUnblockTime+0x38>)
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	68db      	ldr	r3, [r3, #12]
 800fef0:	68db      	ldr	r3, [r3, #12]
 800fef2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	685b      	ldr	r3, [r3, #4]
 800fef8:	4a04      	ldr	r2, [pc, #16]	; (800ff0c <prvResetNextTaskUnblockTime+0x3c>)
 800fefa:	6013      	str	r3, [r2, #0]
}
 800fefc:	bf00      	nop
 800fefe:	370c      	adds	r7, #12
 800ff00:	46bd      	mov	sp, r7
 800ff02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff06:	4770      	bx	lr
 800ff08:	24005a84 	.word	0x24005a84
 800ff0c:	24005aec 	.word	0x24005aec

0800ff10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ff10:	b480      	push	{r7}
 800ff12:	b083      	sub	sp, #12
 800ff14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ff16:	4b0b      	ldr	r3, [pc, #44]	; (800ff44 <xTaskGetSchedulerState+0x34>)
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d102      	bne.n	800ff24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ff1e:	2301      	movs	r3, #1
 800ff20:	607b      	str	r3, [r7, #4]
 800ff22:	e008      	b.n	800ff36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ff24:	4b08      	ldr	r3, [pc, #32]	; (800ff48 <xTaskGetSchedulerState+0x38>)
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d102      	bne.n	800ff32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ff2c:	2302      	movs	r3, #2
 800ff2e:	607b      	str	r3, [r7, #4]
 800ff30:	e001      	b.n	800ff36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ff32:	2300      	movs	r3, #0
 800ff34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ff36:	687b      	ldr	r3, [r7, #4]
	}
 800ff38:	4618      	mov	r0, r3
 800ff3a:	370c      	adds	r7, #12
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff42:	4770      	bx	lr
 800ff44:	24005ad8 	.word	0x24005ad8
 800ff48:	24005af4 	.word	0x24005af4

0800ff4c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b084      	sub	sp, #16
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ff58:	2300      	movs	r3, #0
 800ff5a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d051      	beq.n	8010006 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ff62:	68bb      	ldr	r3, [r7, #8]
 800ff64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff66:	4b2a      	ldr	r3, [pc, #168]	; (8010010 <xTaskPriorityInherit+0xc4>)
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff6c:	429a      	cmp	r2, r3
 800ff6e:	d241      	bcs.n	800fff4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ff70:	68bb      	ldr	r3, [r7, #8]
 800ff72:	699b      	ldr	r3, [r3, #24]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	db06      	blt.n	800ff86 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ff78:	4b25      	ldr	r3, [pc, #148]	; (8010010 <xTaskPriorityInherit+0xc4>)
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff7e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ff82:	68bb      	ldr	r3, [r7, #8]
 800ff84:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ff86:	68bb      	ldr	r3, [r7, #8]
 800ff88:	6959      	ldr	r1, [r3, #20]
 800ff8a:	68bb      	ldr	r3, [r7, #8]
 800ff8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff8e:	4613      	mov	r3, r2
 800ff90:	009b      	lsls	r3, r3, #2
 800ff92:	4413      	add	r3, r2
 800ff94:	009b      	lsls	r3, r3, #2
 800ff96:	4a1f      	ldr	r2, [pc, #124]	; (8010014 <xTaskPriorityInherit+0xc8>)
 800ff98:	4413      	add	r3, r2
 800ff9a:	4299      	cmp	r1, r3
 800ff9c:	d122      	bne.n	800ffe4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ff9e:	68bb      	ldr	r3, [r7, #8]
 800ffa0:	3304      	adds	r3, #4
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	f7fe fa64 	bl	800e470 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ffa8:	4b19      	ldr	r3, [pc, #100]	; (8010010 <xTaskPriorityInherit+0xc4>)
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffae:	68bb      	ldr	r3, [r7, #8]
 800ffb0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ffb2:	68bb      	ldr	r3, [r7, #8]
 800ffb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffb6:	4b18      	ldr	r3, [pc, #96]	; (8010018 <xTaskPriorityInherit+0xcc>)
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	429a      	cmp	r2, r3
 800ffbc:	d903      	bls.n	800ffc6 <xTaskPriorityInherit+0x7a>
 800ffbe:	68bb      	ldr	r3, [r7, #8]
 800ffc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffc2:	4a15      	ldr	r2, [pc, #84]	; (8010018 <xTaskPriorityInherit+0xcc>)
 800ffc4:	6013      	str	r3, [r2, #0]
 800ffc6:	68bb      	ldr	r3, [r7, #8]
 800ffc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffca:	4613      	mov	r3, r2
 800ffcc:	009b      	lsls	r3, r3, #2
 800ffce:	4413      	add	r3, r2
 800ffd0:	009b      	lsls	r3, r3, #2
 800ffd2:	4a10      	ldr	r2, [pc, #64]	; (8010014 <xTaskPriorityInherit+0xc8>)
 800ffd4:	441a      	add	r2, r3
 800ffd6:	68bb      	ldr	r3, [r7, #8]
 800ffd8:	3304      	adds	r3, #4
 800ffda:	4619      	mov	r1, r3
 800ffdc:	4610      	mov	r0, r2
 800ffde:	f7fe f9ea 	bl	800e3b6 <vListInsertEnd>
 800ffe2:	e004      	b.n	800ffee <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ffe4:	4b0a      	ldr	r3, [pc, #40]	; (8010010 <xTaskPriorityInherit+0xc4>)
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffea:	68bb      	ldr	r3, [r7, #8]
 800ffec:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ffee:	2301      	movs	r3, #1
 800fff0:	60fb      	str	r3, [r7, #12]
 800fff2:	e008      	b.n	8010006 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800fff4:	68bb      	ldr	r3, [r7, #8]
 800fff6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fff8:	4b05      	ldr	r3, [pc, #20]	; (8010010 <xTaskPriorityInherit+0xc4>)
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fffe:	429a      	cmp	r2, r3
 8010000:	d201      	bcs.n	8010006 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010002:	2301      	movs	r3, #1
 8010004:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010006:	68fb      	ldr	r3, [r7, #12]
	}
 8010008:	4618      	mov	r0, r3
 801000a:	3710      	adds	r7, #16
 801000c:	46bd      	mov	sp, r7
 801000e:	bd80      	pop	{r7, pc}
 8010010:	240055f8 	.word	0x240055f8
 8010014:	240055fc 	.word	0x240055fc
 8010018:	24005ad4 	.word	0x24005ad4

0801001c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801001c:	b580      	push	{r7, lr}
 801001e:	b086      	sub	sp, #24
 8010020:	af00      	add	r7, sp, #0
 8010022:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010028:	2300      	movs	r3, #0
 801002a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	2b00      	cmp	r3, #0
 8010030:	d056      	beq.n	80100e0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010032:	4b2e      	ldr	r3, [pc, #184]	; (80100ec <xTaskPriorityDisinherit+0xd0>)
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	693a      	ldr	r2, [r7, #16]
 8010038:	429a      	cmp	r2, r3
 801003a:	d00a      	beq.n	8010052 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801003c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010040:	f383 8811 	msr	BASEPRI, r3
 8010044:	f3bf 8f6f 	isb	sy
 8010048:	f3bf 8f4f 	dsb	sy
 801004c:	60fb      	str	r3, [r7, #12]
}
 801004e:	bf00      	nop
 8010050:	e7fe      	b.n	8010050 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8010052:	693b      	ldr	r3, [r7, #16]
 8010054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010056:	2b00      	cmp	r3, #0
 8010058:	d10a      	bne.n	8010070 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801005a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801005e:	f383 8811 	msr	BASEPRI, r3
 8010062:	f3bf 8f6f 	isb	sy
 8010066:	f3bf 8f4f 	dsb	sy
 801006a:	60bb      	str	r3, [r7, #8]
}
 801006c:	bf00      	nop
 801006e:	e7fe      	b.n	801006e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8010070:	693b      	ldr	r3, [r7, #16]
 8010072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010074:	1e5a      	subs	r2, r3, #1
 8010076:	693b      	ldr	r3, [r7, #16]
 8010078:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801007a:	693b      	ldr	r3, [r7, #16]
 801007c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801007e:	693b      	ldr	r3, [r7, #16]
 8010080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010082:	429a      	cmp	r2, r3
 8010084:	d02c      	beq.n	80100e0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010086:	693b      	ldr	r3, [r7, #16]
 8010088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801008a:	2b00      	cmp	r3, #0
 801008c:	d128      	bne.n	80100e0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801008e:	693b      	ldr	r3, [r7, #16]
 8010090:	3304      	adds	r3, #4
 8010092:	4618      	mov	r0, r3
 8010094:	f7fe f9ec 	bl	800e470 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010098:	693b      	ldr	r3, [r7, #16]
 801009a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801009c:	693b      	ldr	r3, [r7, #16]
 801009e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80100a0:	693b      	ldr	r3, [r7, #16]
 80100a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100a4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80100a8:	693b      	ldr	r3, [r7, #16]
 80100aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80100ac:	693b      	ldr	r3, [r7, #16]
 80100ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100b0:	4b0f      	ldr	r3, [pc, #60]	; (80100f0 <xTaskPriorityDisinherit+0xd4>)
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	429a      	cmp	r2, r3
 80100b6:	d903      	bls.n	80100c0 <xTaskPriorityDisinherit+0xa4>
 80100b8:	693b      	ldr	r3, [r7, #16]
 80100ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100bc:	4a0c      	ldr	r2, [pc, #48]	; (80100f0 <xTaskPriorityDisinherit+0xd4>)
 80100be:	6013      	str	r3, [r2, #0]
 80100c0:	693b      	ldr	r3, [r7, #16]
 80100c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100c4:	4613      	mov	r3, r2
 80100c6:	009b      	lsls	r3, r3, #2
 80100c8:	4413      	add	r3, r2
 80100ca:	009b      	lsls	r3, r3, #2
 80100cc:	4a09      	ldr	r2, [pc, #36]	; (80100f4 <xTaskPriorityDisinherit+0xd8>)
 80100ce:	441a      	add	r2, r3
 80100d0:	693b      	ldr	r3, [r7, #16]
 80100d2:	3304      	adds	r3, #4
 80100d4:	4619      	mov	r1, r3
 80100d6:	4610      	mov	r0, r2
 80100d8:	f7fe f96d 	bl	800e3b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80100dc:	2301      	movs	r3, #1
 80100de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80100e0:	697b      	ldr	r3, [r7, #20]
	}
 80100e2:	4618      	mov	r0, r3
 80100e4:	3718      	adds	r7, #24
 80100e6:	46bd      	mov	sp, r7
 80100e8:	bd80      	pop	{r7, pc}
 80100ea:	bf00      	nop
 80100ec:	240055f8 	.word	0x240055f8
 80100f0:	24005ad4 	.word	0x24005ad4
 80100f4:	240055fc 	.word	0x240055fc

080100f8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80100f8:	b580      	push	{r7, lr}
 80100fa:	b088      	sub	sp, #32
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	6078      	str	r0, [r7, #4]
 8010100:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8010106:	2301      	movs	r3, #1
 8010108:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	2b00      	cmp	r3, #0
 801010e:	d06a      	beq.n	80101e6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010110:	69bb      	ldr	r3, [r7, #24]
 8010112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010114:	2b00      	cmp	r3, #0
 8010116:	d10a      	bne.n	801012e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8010118:	f04f 0350 	mov.w	r3, #80	; 0x50
 801011c:	f383 8811 	msr	BASEPRI, r3
 8010120:	f3bf 8f6f 	isb	sy
 8010124:	f3bf 8f4f 	dsb	sy
 8010128:	60fb      	str	r3, [r7, #12]
}
 801012a:	bf00      	nop
 801012c:	e7fe      	b.n	801012c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801012e:	69bb      	ldr	r3, [r7, #24]
 8010130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010132:	683a      	ldr	r2, [r7, #0]
 8010134:	429a      	cmp	r2, r3
 8010136:	d902      	bls.n	801013e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010138:	683b      	ldr	r3, [r7, #0]
 801013a:	61fb      	str	r3, [r7, #28]
 801013c:	e002      	b.n	8010144 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801013e:	69bb      	ldr	r3, [r7, #24]
 8010140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010142:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010144:	69bb      	ldr	r3, [r7, #24]
 8010146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010148:	69fa      	ldr	r2, [r7, #28]
 801014a:	429a      	cmp	r2, r3
 801014c:	d04b      	beq.n	80101e6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801014e:	69bb      	ldr	r3, [r7, #24]
 8010150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010152:	697a      	ldr	r2, [r7, #20]
 8010154:	429a      	cmp	r2, r3
 8010156:	d146      	bne.n	80101e6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010158:	4b25      	ldr	r3, [pc, #148]	; (80101f0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	69ba      	ldr	r2, [r7, #24]
 801015e:	429a      	cmp	r2, r3
 8010160:	d10a      	bne.n	8010178 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8010162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010166:	f383 8811 	msr	BASEPRI, r3
 801016a:	f3bf 8f6f 	isb	sy
 801016e:	f3bf 8f4f 	dsb	sy
 8010172:	60bb      	str	r3, [r7, #8]
}
 8010174:	bf00      	nop
 8010176:	e7fe      	b.n	8010176 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010178:	69bb      	ldr	r3, [r7, #24]
 801017a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801017c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801017e:	69bb      	ldr	r3, [r7, #24]
 8010180:	69fa      	ldr	r2, [r7, #28]
 8010182:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010184:	69bb      	ldr	r3, [r7, #24]
 8010186:	699b      	ldr	r3, [r3, #24]
 8010188:	2b00      	cmp	r3, #0
 801018a:	db04      	blt.n	8010196 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801018c:	69fb      	ldr	r3, [r7, #28]
 801018e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010192:	69bb      	ldr	r3, [r7, #24]
 8010194:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010196:	69bb      	ldr	r3, [r7, #24]
 8010198:	6959      	ldr	r1, [r3, #20]
 801019a:	693a      	ldr	r2, [r7, #16]
 801019c:	4613      	mov	r3, r2
 801019e:	009b      	lsls	r3, r3, #2
 80101a0:	4413      	add	r3, r2
 80101a2:	009b      	lsls	r3, r3, #2
 80101a4:	4a13      	ldr	r2, [pc, #76]	; (80101f4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80101a6:	4413      	add	r3, r2
 80101a8:	4299      	cmp	r1, r3
 80101aa:	d11c      	bne.n	80101e6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80101ac:	69bb      	ldr	r3, [r7, #24]
 80101ae:	3304      	adds	r3, #4
 80101b0:	4618      	mov	r0, r3
 80101b2:	f7fe f95d 	bl	800e470 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80101b6:	69bb      	ldr	r3, [r7, #24]
 80101b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101ba:	4b0f      	ldr	r3, [pc, #60]	; (80101f8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	429a      	cmp	r2, r3
 80101c0:	d903      	bls.n	80101ca <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80101c2:	69bb      	ldr	r3, [r7, #24]
 80101c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101c6:	4a0c      	ldr	r2, [pc, #48]	; (80101f8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80101c8:	6013      	str	r3, [r2, #0]
 80101ca:	69bb      	ldr	r3, [r7, #24]
 80101cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101ce:	4613      	mov	r3, r2
 80101d0:	009b      	lsls	r3, r3, #2
 80101d2:	4413      	add	r3, r2
 80101d4:	009b      	lsls	r3, r3, #2
 80101d6:	4a07      	ldr	r2, [pc, #28]	; (80101f4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80101d8:	441a      	add	r2, r3
 80101da:	69bb      	ldr	r3, [r7, #24]
 80101dc:	3304      	adds	r3, #4
 80101de:	4619      	mov	r1, r3
 80101e0:	4610      	mov	r0, r2
 80101e2:	f7fe f8e8 	bl	800e3b6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80101e6:	bf00      	nop
 80101e8:	3720      	adds	r7, #32
 80101ea:	46bd      	mov	sp, r7
 80101ec:	bd80      	pop	{r7, pc}
 80101ee:	bf00      	nop
 80101f0:	240055f8 	.word	0x240055f8
 80101f4:	240055fc 	.word	0x240055fc
 80101f8:	24005ad4 	.word	0x24005ad4

080101fc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80101fc:	b480      	push	{r7}
 80101fe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010200:	4b07      	ldr	r3, [pc, #28]	; (8010220 <pvTaskIncrementMutexHeldCount+0x24>)
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	2b00      	cmp	r3, #0
 8010206:	d004      	beq.n	8010212 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010208:	4b05      	ldr	r3, [pc, #20]	; (8010220 <pvTaskIncrementMutexHeldCount+0x24>)
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801020e:	3201      	adds	r2, #1
 8010210:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8010212:	4b03      	ldr	r3, [pc, #12]	; (8010220 <pvTaskIncrementMutexHeldCount+0x24>)
 8010214:	681b      	ldr	r3, [r3, #0]
	}
 8010216:	4618      	mov	r0, r3
 8010218:	46bd      	mov	sp, r7
 801021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801021e:	4770      	bx	lr
 8010220:	240055f8 	.word	0x240055f8

08010224 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010224:	b580      	push	{r7, lr}
 8010226:	b084      	sub	sp, #16
 8010228:	af00      	add	r7, sp, #0
 801022a:	6078      	str	r0, [r7, #4]
 801022c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801022e:	4b21      	ldr	r3, [pc, #132]	; (80102b4 <prvAddCurrentTaskToDelayedList+0x90>)
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010234:	4b20      	ldr	r3, [pc, #128]	; (80102b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	3304      	adds	r3, #4
 801023a:	4618      	mov	r0, r3
 801023c:	f7fe f918 	bl	800e470 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010246:	d10a      	bne.n	801025e <prvAddCurrentTaskToDelayedList+0x3a>
 8010248:	683b      	ldr	r3, [r7, #0]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d007      	beq.n	801025e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801024e:	4b1a      	ldr	r3, [pc, #104]	; (80102b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	3304      	adds	r3, #4
 8010254:	4619      	mov	r1, r3
 8010256:	4819      	ldr	r0, [pc, #100]	; (80102bc <prvAddCurrentTaskToDelayedList+0x98>)
 8010258:	f7fe f8ad 	bl	800e3b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801025c:	e026      	b.n	80102ac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801025e:	68fa      	ldr	r2, [r7, #12]
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	4413      	add	r3, r2
 8010264:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010266:	4b14      	ldr	r3, [pc, #80]	; (80102b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	68ba      	ldr	r2, [r7, #8]
 801026c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801026e:	68ba      	ldr	r2, [r7, #8]
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	429a      	cmp	r2, r3
 8010274:	d209      	bcs.n	801028a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010276:	4b12      	ldr	r3, [pc, #72]	; (80102c0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010278:	681a      	ldr	r2, [r3, #0]
 801027a:	4b0f      	ldr	r3, [pc, #60]	; (80102b8 <prvAddCurrentTaskToDelayedList+0x94>)
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	3304      	adds	r3, #4
 8010280:	4619      	mov	r1, r3
 8010282:	4610      	mov	r0, r2
 8010284:	f7fe f8bb 	bl	800e3fe <vListInsert>
}
 8010288:	e010      	b.n	80102ac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801028a:	4b0e      	ldr	r3, [pc, #56]	; (80102c4 <prvAddCurrentTaskToDelayedList+0xa0>)
 801028c:	681a      	ldr	r2, [r3, #0]
 801028e:	4b0a      	ldr	r3, [pc, #40]	; (80102b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	3304      	adds	r3, #4
 8010294:	4619      	mov	r1, r3
 8010296:	4610      	mov	r0, r2
 8010298:	f7fe f8b1 	bl	800e3fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801029c:	4b0a      	ldr	r3, [pc, #40]	; (80102c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	68ba      	ldr	r2, [r7, #8]
 80102a2:	429a      	cmp	r2, r3
 80102a4:	d202      	bcs.n	80102ac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80102a6:	4a08      	ldr	r2, [pc, #32]	; (80102c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80102a8:	68bb      	ldr	r3, [r7, #8]
 80102aa:	6013      	str	r3, [r2, #0]
}
 80102ac:	bf00      	nop
 80102ae:	3710      	adds	r7, #16
 80102b0:	46bd      	mov	sp, r7
 80102b2:	bd80      	pop	{r7, pc}
 80102b4:	24005ad0 	.word	0x24005ad0
 80102b8:	240055f8 	.word	0x240055f8
 80102bc:	24005ab8 	.word	0x24005ab8
 80102c0:	24005a88 	.word	0x24005a88
 80102c4:	24005a84 	.word	0x24005a84
 80102c8:	24005aec 	.word	0x24005aec

080102cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80102cc:	b580      	push	{r7, lr}
 80102ce:	b08a      	sub	sp, #40	; 0x28
 80102d0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80102d2:	2300      	movs	r3, #0
 80102d4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80102d6:	f000 fb07 	bl	80108e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80102da:	4b1c      	ldr	r3, [pc, #112]	; (801034c <xTimerCreateTimerTask+0x80>)
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d021      	beq.n	8010326 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80102e2:	2300      	movs	r3, #0
 80102e4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80102e6:	2300      	movs	r3, #0
 80102e8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80102ea:	1d3a      	adds	r2, r7, #4
 80102ec:	f107 0108 	add.w	r1, r7, #8
 80102f0:	f107 030c 	add.w	r3, r7, #12
 80102f4:	4618      	mov	r0, r3
 80102f6:	f7fe f817 	bl	800e328 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80102fa:	6879      	ldr	r1, [r7, #4]
 80102fc:	68bb      	ldr	r3, [r7, #8]
 80102fe:	68fa      	ldr	r2, [r7, #12]
 8010300:	9202      	str	r2, [sp, #8]
 8010302:	9301      	str	r3, [sp, #4]
 8010304:	2302      	movs	r3, #2
 8010306:	9300      	str	r3, [sp, #0]
 8010308:	2300      	movs	r3, #0
 801030a:	460a      	mov	r2, r1
 801030c:	4910      	ldr	r1, [pc, #64]	; (8010350 <xTimerCreateTimerTask+0x84>)
 801030e:	4811      	ldr	r0, [pc, #68]	; (8010354 <xTimerCreateTimerTask+0x88>)
 8010310:	f7ff f828 	bl	800f364 <xTaskCreateStatic>
 8010314:	4603      	mov	r3, r0
 8010316:	4a10      	ldr	r2, [pc, #64]	; (8010358 <xTimerCreateTimerTask+0x8c>)
 8010318:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801031a:	4b0f      	ldr	r3, [pc, #60]	; (8010358 <xTimerCreateTimerTask+0x8c>)
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d001      	beq.n	8010326 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010322:	2301      	movs	r3, #1
 8010324:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010326:	697b      	ldr	r3, [r7, #20]
 8010328:	2b00      	cmp	r3, #0
 801032a:	d10a      	bne.n	8010342 <xTimerCreateTimerTask+0x76>
	__asm volatile
 801032c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010330:	f383 8811 	msr	BASEPRI, r3
 8010334:	f3bf 8f6f 	isb	sy
 8010338:	f3bf 8f4f 	dsb	sy
 801033c:	613b      	str	r3, [r7, #16]
}
 801033e:	bf00      	nop
 8010340:	e7fe      	b.n	8010340 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8010342:	697b      	ldr	r3, [r7, #20]
}
 8010344:	4618      	mov	r0, r3
 8010346:	3718      	adds	r7, #24
 8010348:	46bd      	mov	sp, r7
 801034a:	bd80      	pop	{r7, pc}
 801034c:	24005b28 	.word	0x24005b28
 8010350:	080143a8 	.word	0x080143a8
 8010354:	08010491 	.word	0x08010491
 8010358:	24005b2c 	.word	0x24005b2c

0801035c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801035c:	b580      	push	{r7, lr}
 801035e:	b08a      	sub	sp, #40	; 0x28
 8010360:	af00      	add	r7, sp, #0
 8010362:	60f8      	str	r0, [r7, #12]
 8010364:	60b9      	str	r1, [r7, #8]
 8010366:	607a      	str	r2, [r7, #4]
 8010368:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801036a:	2300      	movs	r3, #0
 801036c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	2b00      	cmp	r3, #0
 8010372:	d10a      	bne.n	801038a <xTimerGenericCommand+0x2e>
	__asm volatile
 8010374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010378:	f383 8811 	msr	BASEPRI, r3
 801037c:	f3bf 8f6f 	isb	sy
 8010380:	f3bf 8f4f 	dsb	sy
 8010384:	623b      	str	r3, [r7, #32]
}
 8010386:	bf00      	nop
 8010388:	e7fe      	b.n	8010388 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801038a:	4b1a      	ldr	r3, [pc, #104]	; (80103f4 <xTimerGenericCommand+0x98>)
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	2b00      	cmp	r3, #0
 8010390:	d02a      	beq.n	80103e8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010392:	68bb      	ldr	r3, [r7, #8]
 8010394:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801039e:	68bb      	ldr	r3, [r7, #8]
 80103a0:	2b05      	cmp	r3, #5
 80103a2:	dc18      	bgt.n	80103d6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80103a4:	f7ff fdb4 	bl	800ff10 <xTaskGetSchedulerState>
 80103a8:	4603      	mov	r3, r0
 80103aa:	2b02      	cmp	r3, #2
 80103ac:	d109      	bne.n	80103c2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80103ae:	4b11      	ldr	r3, [pc, #68]	; (80103f4 <xTimerGenericCommand+0x98>)
 80103b0:	6818      	ldr	r0, [r3, #0]
 80103b2:	f107 0110 	add.w	r1, r7, #16
 80103b6:	2300      	movs	r3, #0
 80103b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80103ba:	f7fe fa1d 	bl	800e7f8 <xQueueGenericSend>
 80103be:	6278      	str	r0, [r7, #36]	; 0x24
 80103c0:	e012      	b.n	80103e8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80103c2:	4b0c      	ldr	r3, [pc, #48]	; (80103f4 <xTimerGenericCommand+0x98>)
 80103c4:	6818      	ldr	r0, [r3, #0]
 80103c6:	f107 0110 	add.w	r1, r7, #16
 80103ca:	2300      	movs	r3, #0
 80103cc:	2200      	movs	r2, #0
 80103ce:	f7fe fa13 	bl	800e7f8 <xQueueGenericSend>
 80103d2:	6278      	str	r0, [r7, #36]	; 0x24
 80103d4:	e008      	b.n	80103e8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80103d6:	4b07      	ldr	r3, [pc, #28]	; (80103f4 <xTimerGenericCommand+0x98>)
 80103d8:	6818      	ldr	r0, [r3, #0]
 80103da:	f107 0110 	add.w	r1, r7, #16
 80103de:	2300      	movs	r3, #0
 80103e0:	683a      	ldr	r2, [r7, #0]
 80103e2:	f7fe faef 	bl	800e9c4 <xQueueGenericSendFromISR>
 80103e6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80103e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80103ea:	4618      	mov	r0, r3
 80103ec:	3728      	adds	r7, #40	; 0x28
 80103ee:	46bd      	mov	sp, r7
 80103f0:	bd80      	pop	{r7, pc}
 80103f2:	bf00      	nop
 80103f4:	24005b28 	.word	0x24005b28

080103f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80103f8:	b580      	push	{r7, lr}
 80103fa:	b088      	sub	sp, #32
 80103fc:	af02      	add	r7, sp, #8
 80103fe:	6078      	str	r0, [r7, #4]
 8010400:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010402:	4b22      	ldr	r3, [pc, #136]	; (801048c <prvProcessExpiredTimer+0x94>)
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	68db      	ldr	r3, [r3, #12]
 8010408:	68db      	ldr	r3, [r3, #12]
 801040a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801040c:	697b      	ldr	r3, [r7, #20]
 801040e:	3304      	adds	r3, #4
 8010410:	4618      	mov	r0, r3
 8010412:	f7fe f82d 	bl	800e470 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010416:	697b      	ldr	r3, [r7, #20]
 8010418:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801041c:	f003 0304 	and.w	r3, r3, #4
 8010420:	2b00      	cmp	r3, #0
 8010422:	d022      	beq.n	801046a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010424:	697b      	ldr	r3, [r7, #20]
 8010426:	699a      	ldr	r2, [r3, #24]
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	18d1      	adds	r1, r2, r3
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	683a      	ldr	r2, [r7, #0]
 8010430:	6978      	ldr	r0, [r7, #20]
 8010432:	f000 f8d1 	bl	80105d8 <prvInsertTimerInActiveList>
 8010436:	4603      	mov	r3, r0
 8010438:	2b00      	cmp	r3, #0
 801043a:	d01f      	beq.n	801047c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801043c:	2300      	movs	r3, #0
 801043e:	9300      	str	r3, [sp, #0]
 8010440:	2300      	movs	r3, #0
 8010442:	687a      	ldr	r2, [r7, #4]
 8010444:	2100      	movs	r1, #0
 8010446:	6978      	ldr	r0, [r7, #20]
 8010448:	f7ff ff88 	bl	801035c <xTimerGenericCommand>
 801044c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801044e:	693b      	ldr	r3, [r7, #16]
 8010450:	2b00      	cmp	r3, #0
 8010452:	d113      	bne.n	801047c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8010454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010458:	f383 8811 	msr	BASEPRI, r3
 801045c:	f3bf 8f6f 	isb	sy
 8010460:	f3bf 8f4f 	dsb	sy
 8010464:	60fb      	str	r3, [r7, #12]
}
 8010466:	bf00      	nop
 8010468:	e7fe      	b.n	8010468 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801046a:	697b      	ldr	r3, [r7, #20]
 801046c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010470:	f023 0301 	bic.w	r3, r3, #1
 8010474:	b2da      	uxtb	r2, r3
 8010476:	697b      	ldr	r3, [r7, #20]
 8010478:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801047c:	697b      	ldr	r3, [r7, #20]
 801047e:	6a1b      	ldr	r3, [r3, #32]
 8010480:	6978      	ldr	r0, [r7, #20]
 8010482:	4798      	blx	r3
}
 8010484:	bf00      	nop
 8010486:	3718      	adds	r7, #24
 8010488:	46bd      	mov	sp, r7
 801048a:	bd80      	pop	{r7, pc}
 801048c:	24005b20 	.word	0x24005b20

08010490 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010490:	b580      	push	{r7, lr}
 8010492:	b084      	sub	sp, #16
 8010494:	af00      	add	r7, sp, #0
 8010496:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010498:	f107 0308 	add.w	r3, r7, #8
 801049c:	4618      	mov	r0, r3
 801049e:	f000 f857 	bl	8010550 <prvGetNextExpireTime>
 80104a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80104a4:	68bb      	ldr	r3, [r7, #8]
 80104a6:	4619      	mov	r1, r3
 80104a8:	68f8      	ldr	r0, [r7, #12]
 80104aa:	f000 f803 	bl	80104b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80104ae:	f000 f8d5 	bl	801065c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80104b2:	e7f1      	b.n	8010498 <prvTimerTask+0x8>

080104b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80104b4:	b580      	push	{r7, lr}
 80104b6:	b084      	sub	sp, #16
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	6078      	str	r0, [r7, #4]
 80104bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80104be:	f7ff f97d 	bl	800f7bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80104c2:	f107 0308 	add.w	r3, r7, #8
 80104c6:	4618      	mov	r0, r3
 80104c8:	f000 f866 	bl	8010598 <prvSampleTimeNow>
 80104cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80104ce:	68bb      	ldr	r3, [r7, #8]
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d130      	bne.n	8010536 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80104d4:	683b      	ldr	r3, [r7, #0]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d10a      	bne.n	80104f0 <prvProcessTimerOrBlockTask+0x3c>
 80104da:	687a      	ldr	r2, [r7, #4]
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	429a      	cmp	r2, r3
 80104e0:	d806      	bhi.n	80104f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80104e2:	f7ff f979 	bl	800f7d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80104e6:	68f9      	ldr	r1, [r7, #12]
 80104e8:	6878      	ldr	r0, [r7, #4]
 80104ea:	f7ff ff85 	bl	80103f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80104ee:	e024      	b.n	801053a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80104f0:	683b      	ldr	r3, [r7, #0]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d008      	beq.n	8010508 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80104f6:	4b13      	ldr	r3, [pc, #76]	; (8010544 <prvProcessTimerOrBlockTask+0x90>)
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d101      	bne.n	8010504 <prvProcessTimerOrBlockTask+0x50>
 8010500:	2301      	movs	r3, #1
 8010502:	e000      	b.n	8010506 <prvProcessTimerOrBlockTask+0x52>
 8010504:	2300      	movs	r3, #0
 8010506:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010508:	4b0f      	ldr	r3, [pc, #60]	; (8010548 <prvProcessTimerOrBlockTask+0x94>)
 801050a:	6818      	ldr	r0, [r3, #0]
 801050c:	687a      	ldr	r2, [r7, #4]
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	1ad3      	subs	r3, r2, r3
 8010512:	683a      	ldr	r2, [r7, #0]
 8010514:	4619      	mov	r1, r3
 8010516:	f7fe fef1 	bl	800f2fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801051a:	f7ff f95d 	bl	800f7d8 <xTaskResumeAll>
 801051e:	4603      	mov	r3, r0
 8010520:	2b00      	cmp	r3, #0
 8010522:	d10a      	bne.n	801053a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010524:	4b09      	ldr	r3, [pc, #36]	; (801054c <prvProcessTimerOrBlockTask+0x98>)
 8010526:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801052a:	601a      	str	r2, [r3, #0]
 801052c:	f3bf 8f4f 	dsb	sy
 8010530:	f3bf 8f6f 	isb	sy
}
 8010534:	e001      	b.n	801053a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010536:	f7ff f94f 	bl	800f7d8 <xTaskResumeAll>
}
 801053a:	bf00      	nop
 801053c:	3710      	adds	r7, #16
 801053e:	46bd      	mov	sp, r7
 8010540:	bd80      	pop	{r7, pc}
 8010542:	bf00      	nop
 8010544:	24005b24 	.word	0x24005b24
 8010548:	24005b28 	.word	0x24005b28
 801054c:	e000ed04 	.word	0xe000ed04

08010550 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010550:	b480      	push	{r7}
 8010552:	b085      	sub	sp, #20
 8010554:	af00      	add	r7, sp, #0
 8010556:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010558:	4b0e      	ldr	r3, [pc, #56]	; (8010594 <prvGetNextExpireTime+0x44>)
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	2b00      	cmp	r3, #0
 8010560:	d101      	bne.n	8010566 <prvGetNextExpireTime+0x16>
 8010562:	2201      	movs	r2, #1
 8010564:	e000      	b.n	8010568 <prvGetNextExpireTime+0x18>
 8010566:	2200      	movs	r2, #0
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d105      	bne.n	8010580 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010574:	4b07      	ldr	r3, [pc, #28]	; (8010594 <prvGetNextExpireTime+0x44>)
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	68db      	ldr	r3, [r3, #12]
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	60fb      	str	r3, [r7, #12]
 801057e:	e001      	b.n	8010584 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010580:	2300      	movs	r3, #0
 8010582:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010584:	68fb      	ldr	r3, [r7, #12]
}
 8010586:	4618      	mov	r0, r3
 8010588:	3714      	adds	r7, #20
 801058a:	46bd      	mov	sp, r7
 801058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010590:	4770      	bx	lr
 8010592:	bf00      	nop
 8010594:	24005b20 	.word	0x24005b20

08010598 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010598:	b580      	push	{r7, lr}
 801059a:	b084      	sub	sp, #16
 801059c:	af00      	add	r7, sp, #0
 801059e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80105a0:	f7ff f9aa 	bl	800f8f8 <xTaskGetTickCount>
 80105a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80105a6:	4b0b      	ldr	r3, [pc, #44]	; (80105d4 <prvSampleTimeNow+0x3c>)
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	68fa      	ldr	r2, [r7, #12]
 80105ac:	429a      	cmp	r2, r3
 80105ae:	d205      	bcs.n	80105bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80105b0:	f000 f936 	bl	8010820 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	2201      	movs	r2, #1
 80105b8:	601a      	str	r2, [r3, #0]
 80105ba:	e002      	b.n	80105c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	2200      	movs	r2, #0
 80105c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80105c2:	4a04      	ldr	r2, [pc, #16]	; (80105d4 <prvSampleTimeNow+0x3c>)
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80105c8:	68fb      	ldr	r3, [r7, #12]
}
 80105ca:	4618      	mov	r0, r3
 80105cc:	3710      	adds	r7, #16
 80105ce:	46bd      	mov	sp, r7
 80105d0:	bd80      	pop	{r7, pc}
 80105d2:	bf00      	nop
 80105d4:	24005b30 	.word	0x24005b30

080105d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80105d8:	b580      	push	{r7, lr}
 80105da:	b086      	sub	sp, #24
 80105dc:	af00      	add	r7, sp, #0
 80105de:	60f8      	str	r0, [r7, #12]
 80105e0:	60b9      	str	r1, [r7, #8]
 80105e2:	607a      	str	r2, [r7, #4]
 80105e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80105e6:	2300      	movs	r3, #0
 80105e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	68ba      	ldr	r2, [r7, #8]
 80105ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	68fa      	ldr	r2, [r7, #12]
 80105f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80105f6:	68ba      	ldr	r2, [r7, #8]
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	429a      	cmp	r2, r3
 80105fc:	d812      	bhi.n	8010624 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80105fe:	687a      	ldr	r2, [r7, #4]
 8010600:	683b      	ldr	r3, [r7, #0]
 8010602:	1ad2      	subs	r2, r2, r3
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	699b      	ldr	r3, [r3, #24]
 8010608:	429a      	cmp	r2, r3
 801060a:	d302      	bcc.n	8010612 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801060c:	2301      	movs	r3, #1
 801060e:	617b      	str	r3, [r7, #20]
 8010610:	e01b      	b.n	801064a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010612:	4b10      	ldr	r3, [pc, #64]	; (8010654 <prvInsertTimerInActiveList+0x7c>)
 8010614:	681a      	ldr	r2, [r3, #0]
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	3304      	adds	r3, #4
 801061a:	4619      	mov	r1, r3
 801061c:	4610      	mov	r0, r2
 801061e:	f7fd feee 	bl	800e3fe <vListInsert>
 8010622:	e012      	b.n	801064a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010624:	687a      	ldr	r2, [r7, #4]
 8010626:	683b      	ldr	r3, [r7, #0]
 8010628:	429a      	cmp	r2, r3
 801062a:	d206      	bcs.n	801063a <prvInsertTimerInActiveList+0x62>
 801062c:	68ba      	ldr	r2, [r7, #8]
 801062e:	683b      	ldr	r3, [r7, #0]
 8010630:	429a      	cmp	r2, r3
 8010632:	d302      	bcc.n	801063a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010634:	2301      	movs	r3, #1
 8010636:	617b      	str	r3, [r7, #20]
 8010638:	e007      	b.n	801064a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801063a:	4b07      	ldr	r3, [pc, #28]	; (8010658 <prvInsertTimerInActiveList+0x80>)
 801063c:	681a      	ldr	r2, [r3, #0]
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	3304      	adds	r3, #4
 8010642:	4619      	mov	r1, r3
 8010644:	4610      	mov	r0, r2
 8010646:	f7fd feda 	bl	800e3fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 801064a:	697b      	ldr	r3, [r7, #20]
}
 801064c:	4618      	mov	r0, r3
 801064e:	3718      	adds	r7, #24
 8010650:	46bd      	mov	sp, r7
 8010652:	bd80      	pop	{r7, pc}
 8010654:	24005b24 	.word	0x24005b24
 8010658:	24005b20 	.word	0x24005b20

0801065c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801065c:	b580      	push	{r7, lr}
 801065e:	b08e      	sub	sp, #56	; 0x38
 8010660:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010662:	e0ca      	b.n	80107fa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	2b00      	cmp	r3, #0
 8010668:	da18      	bge.n	801069c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801066a:	1d3b      	adds	r3, r7, #4
 801066c:	3304      	adds	r3, #4
 801066e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010672:	2b00      	cmp	r3, #0
 8010674:	d10a      	bne.n	801068c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8010676:	f04f 0350 	mov.w	r3, #80	; 0x50
 801067a:	f383 8811 	msr	BASEPRI, r3
 801067e:	f3bf 8f6f 	isb	sy
 8010682:	f3bf 8f4f 	dsb	sy
 8010686:	61fb      	str	r3, [r7, #28]
}
 8010688:	bf00      	nop
 801068a:	e7fe      	b.n	801068a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801068c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010692:	6850      	ldr	r0, [r2, #4]
 8010694:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010696:	6892      	ldr	r2, [r2, #8]
 8010698:	4611      	mov	r1, r2
 801069a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	f2c0 80ab 	blt.w	80107fa <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80106a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106aa:	695b      	ldr	r3, [r3, #20]
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d004      	beq.n	80106ba <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80106b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106b2:	3304      	adds	r3, #4
 80106b4:	4618      	mov	r0, r3
 80106b6:	f7fd fedb 	bl	800e470 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80106ba:	463b      	mov	r3, r7
 80106bc:	4618      	mov	r0, r3
 80106be:	f7ff ff6b 	bl	8010598 <prvSampleTimeNow>
 80106c2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	2b09      	cmp	r3, #9
 80106c8:	f200 8096 	bhi.w	80107f8 <prvProcessReceivedCommands+0x19c>
 80106cc:	a201      	add	r2, pc, #4	; (adr r2, 80106d4 <prvProcessReceivedCommands+0x78>)
 80106ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106d2:	bf00      	nop
 80106d4:	080106fd 	.word	0x080106fd
 80106d8:	080106fd 	.word	0x080106fd
 80106dc:	080106fd 	.word	0x080106fd
 80106e0:	08010771 	.word	0x08010771
 80106e4:	08010785 	.word	0x08010785
 80106e8:	080107cf 	.word	0x080107cf
 80106ec:	080106fd 	.word	0x080106fd
 80106f0:	080106fd 	.word	0x080106fd
 80106f4:	08010771 	.word	0x08010771
 80106f8:	08010785 	.word	0x08010785
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80106fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010702:	f043 0301 	orr.w	r3, r3, #1
 8010706:	b2da      	uxtb	r2, r3
 8010708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801070a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801070e:	68ba      	ldr	r2, [r7, #8]
 8010710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010712:	699b      	ldr	r3, [r3, #24]
 8010714:	18d1      	adds	r1, r2, r3
 8010716:	68bb      	ldr	r3, [r7, #8]
 8010718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801071a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801071c:	f7ff ff5c 	bl	80105d8 <prvInsertTimerInActiveList>
 8010720:	4603      	mov	r3, r0
 8010722:	2b00      	cmp	r3, #0
 8010724:	d069      	beq.n	80107fa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010728:	6a1b      	ldr	r3, [r3, #32]
 801072a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801072c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801072e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010730:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010734:	f003 0304 	and.w	r3, r3, #4
 8010738:	2b00      	cmp	r3, #0
 801073a:	d05e      	beq.n	80107fa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801073c:	68ba      	ldr	r2, [r7, #8]
 801073e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010740:	699b      	ldr	r3, [r3, #24]
 8010742:	441a      	add	r2, r3
 8010744:	2300      	movs	r3, #0
 8010746:	9300      	str	r3, [sp, #0]
 8010748:	2300      	movs	r3, #0
 801074a:	2100      	movs	r1, #0
 801074c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801074e:	f7ff fe05 	bl	801035c <xTimerGenericCommand>
 8010752:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010754:	6a3b      	ldr	r3, [r7, #32]
 8010756:	2b00      	cmp	r3, #0
 8010758:	d14f      	bne.n	80107fa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801075a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801075e:	f383 8811 	msr	BASEPRI, r3
 8010762:	f3bf 8f6f 	isb	sy
 8010766:	f3bf 8f4f 	dsb	sy
 801076a:	61bb      	str	r3, [r7, #24]
}
 801076c:	bf00      	nop
 801076e:	e7fe      	b.n	801076e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010772:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010776:	f023 0301 	bic.w	r3, r3, #1
 801077a:	b2da      	uxtb	r2, r3
 801077c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801077e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010782:	e03a      	b.n	80107fa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010786:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801078a:	f043 0301 	orr.w	r3, r3, #1
 801078e:	b2da      	uxtb	r2, r3
 8010790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010792:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010796:	68ba      	ldr	r2, [r7, #8]
 8010798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801079a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801079c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801079e:	699b      	ldr	r3, [r3, #24]
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d10a      	bne.n	80107ba <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80107a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107a8:	f383 8811 	msr	BASEPRI, r3
 80107ac:	f3bf 8f6f 	isb	sy
 80107b0:	f3bf 8f4f 	dsb	sy
 80107b4:	617b      	str	r3, [r7, #20]
}
 80107b6:	bf00      	nop
 80107b8:	e7fe      	b.n	80107b8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80107ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107bc:	699a      	ldr	r2, [r3, #24]
 80107be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107c0:	18d1      	adds	r1, r2, r3
 80107c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80107c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80107c8:	f7ff ff06 	bl	80105d8 <prvInsertTimerInActiveList>
					break;
 80107cc:	e015      	b.n	80107fa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80107ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80107d4:	f003 0302 	and.w	r3, r3, #2
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d103      	bne.n	80107e4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80107dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80107de:	f000 fbdf 	bl	8010fa0 <vPortFree>
 80107e2:	e00a      	b.n	80107fa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80107e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80107ea:	f023 0301 	bic.w	r3, r3, #1
 80107ee:	b2da      	uxtb	r2, r3
 80107f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80107f6:	e000      	b.n	80107fa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80107f8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80107fa:	4b08      	ldr	r3, [pc, #32]	; (801081c <prvProcessReceivedCommands+0x1c0>)
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	1d39      	adds	r1, r7, #4
 8010800:	2200      	movs	r2, #0
 8010802:	4618      	mov	r0, r3
 8010804:	f7fe fa06 	bl	800ec14 <xQueueReceive>
 8010808:	4603      	mov	r3, r0
 801080a:	2b00      	cmp	r3, #0
 801080c:	f47f af2a 	bne.w	8010664 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8010810:	bf00      	nop
 8010812:	bf00      	nop
 8010814:	3730      	adds	r7, #48	; 0x30
 8010816:	46bd      	mov	sp, r7
 8010818:	bd80      	pop	{r7, pc}
 801081a:	bf00      	nop
 801081c:	24005b28 	.word	0x24005b28

08010820 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010820:	b580      	push	{r7, lr}
 8010822:	b088      	sub	sp, #32
 8010824:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010826:	e048      	b.n	80108ba <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010828:	4b2d      	ldr	r3, [pc, #180]	; (80108e0 <prvSwitchTimerLists+0xc0>)
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	68db      	ldr	r3, [r3, #12]
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010832:	4b2b      	ldr	r3, [pc, #172]	; (80108e0 <prvSwitchTimerLists+0xc0>)
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	68db      	ldr	r3, [r3, #12]
 8010838:	68db      	ldr	r3, [r3, #12]
 801083a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	3304      	adds	r3, #4
 8010840:	4618      	mov	r0, r3
 8010842:	f7fd fe15 	bl	800e470 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	6a1b      	ldr	r3, [r3, #32]
 801084a:	68f8      	ldr	r0, [r7, #12]
 801084c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010854:	f003 0304 	and.w	r3, r3, #4
 8010858:	2b00      	cmp	r3, #0
 801085a:	d02e      	beq.n	80108ba <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	699b      	ldr	r3, [r3, #24]
 8010860:	693a      	ldr	r2, [r7, #16]
 8010862:	4413      	add	r3, r2
 8010864:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010866:	68ba      	ldr	r2, [r7, #8]
 8010868:	693b      	ldr	r3, [r7, #16]
 801086a:	429a      	cmp	r2, r3
 801086c:	d90e      	bls.n	801088c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	68ba      	ldr	r2, [r7, #8]
 8010872:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	68fa      	ldr	r2, [r7, #12]
 8010878:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801087a:	4b19      	ldr	r3, [pc, #100]	; (80108e0 <prvSwitchTimerLists+0xc0>)
 801087c:	681a      	ldr	r2, [r3, #0]
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	3304      	adds	r3, #4
 8010882:	4619      	mov	r1, r3
 8010884:	4610      	mov	r0, r2
 8010886:	f7fd fdba 	bl	800e3fe <vListInsert>
 801088a:	e016      	b.n	80108ba <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801088c:	2300      	movs	r3, #0
 801088e:	9300      	str	r3, [sp, #0]
 8010890:	2300      	movs	r3, #0
 8010892:	693a      	ldr	r2, [r7, #16]
 8010894:	2100      	movs	r1, #0
 8010896:	68f8      	ldr	r0, [r7, #12]
 8010898:	f7ff fd60 	bl	801035c <xTimerGenericCommand>
 801089c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d10a      	bne.n	80108ba <prvSwitchTimerLists+0x9a>
	__asm volatile
 80108a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108a8:	f383 8811 	msr	BASEPRI, r3
 80108ac:	f3bf 8f6f 	isb	sy
 80108b0:	f3bf 8f4f 	dsb	sy
 80108b4:	603b      	str	r3, [r7, #0]
}
 80108b6:	bf00      	nop
 80108b8:	e7fe      	b.n	80108b8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80108ba:	4b09      	ldr	r3, [pc, #36]	; (80108e0 <prvSwitchTimerLists+0xc0>)
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d1b1      	bne.n	8010828 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80108c4:	4b06      	ldr	r3, [pc, #24]	; (80108e0 <prvSwitchTimerLists+0xc0>)
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80108ca:	4b06      	ldr	r3, [pc, #24]	; (80108e4 <prvSwitchTimerLists+0xc4>)
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	4a04      	ldr	r2, [pc, #16]	; (80108e0 <prvSwitchTimerLists+0xc0>)
 80108d0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80108d2:	4a04      	ldr	r2, [pc, #16]	; (80108e4 <prvSwitchTimerLists+0xc4>)
 80108d4:	697b      	ldr	r3, [r7, #20]
 80108d6:	6013      	str	r3, [r2, #0]
}
 80108d8:	bf00      	nop
 80108da:	3718      	adds	r7, #24
 80108dc:	46bd      	mov	sp, r7
 80108de:	bd80      	pop	{r7, pc}
 80108e0:	24005b20 	.word	0x24005b20
 80108e4:	24005b24 	.word	0x24005b24

080108e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80108e8:	b580      	push	{r7, lr}
 80108ea:	b082      	sub	sp, #8
 80108ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80108ee:	f000 f969 	bl	8010bc4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80108f2:	4b15      	ldr	r3, [pc, #84]	; (8010948 <prvCheckForValidListAndQueue+0x60>)
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d120      	bne.n	801093c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80108fa:	4814      	ldr	r0, [pc, #80]	; (801094c <prvCheckForValidListAndQueue+0x64>)
 80108fc:	f7fd fd2e 	bl	800e35c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010900:	4813      	ldr	r0, [pc, #76]	; (8010950 <prvCheckForValidListAndQueue+0x68>)
 8010902:	f7fd fd2b 	bl	800e35c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010906:	4b13      	ldr	r3, [pc, #76]	; (8010954 <prvCheckForValidListAndQueue+0x6c>)
 8010908:	4a10      	ldr	r2, [pc, #64]	; (801094c <prvCheckForValidListAndQueue+0x64>)
 801090a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801090c:	4b12      	ldr	r3, [pc, #72]	; (8010958 <prvCheckForValidListAndQueue+0x70>)
 801090e:	4a10      	ldr	r2, [pc, #64]	; (8010950 <prvCheckForValidListAndQueue+0x68>)
 8010910:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010912:	2300      	movs	r3, #0
 8010914:	9300      	str	r3, [sp, #0]
 8010916:	4b11      	ldr	r3, [pc, #68]	; (801095c <prvCheckForValidListAndQueue+0x74>)
 8010918:	4a11      	ldr	r2, [pc, #68]	; (8010960 <prvCheckForValidListAndQueue+0x78>)
 801091a:	2110      	movs	r1, #16
 801091c:	200a      	movs	r0, #10
 801091e:	f7fd fe2c 	bl	800e57a <xQueueGenericCreateStatic>
 8010922:	4603      	mov	r3, r0
 8010924:	4a08      	ldr	r2, [pc, #32]	; (8010948 <prvCheckForValidListAndQueue+0x60>)
 8010926:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010928:	4b07      	ldr	r3, [pc, #28]	; (8010948 <prvCheckForValidListAndQueue+0x60>)
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	2b00      	cmp	r3, #0
 801092e:	d005      	beq.n	801093c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010930:	4b05      	ldr	r3, [pc, #20]	; (8010948 <prvCheckForValidListAndQueue+0x60>)
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	490b      	ldr	r1, [pc, #44]	; (8010964 <prvCheckForValidListAndQueue+0x7c>)
 8010936:	4618      	mov	r0, r3
 8010938:	f7fe fc8c 	bl	800f254 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801093c:	f000 f972 	bl	8010c24 <vPortExitCritical>
}
 8010940:	bf00      	nop
 8010942:	46bd      	mov	sp, r7
 8010944:	bd80      	pop	{r7, pc}
 8010946:	bf00      	nop
 8010948:	24005b28 	.word	0x24005b28
 801094c:	24005af8 	.word	0x24005af8
 8010950:	24005b0c 	.word	0x24005b0c
 8010954:	24005b20 	.word	0x24005b20
 8010958:	24005b24 	.word	0x24005b24
 801095c:	24005bd4 	.word	0x24005bd4
 8010960:	24005b34 	.word	0x24005b34
 8010964:	080143b0 	.word	0x080143b0

08010968 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010968:	b480      	push	{r7}
 801096a:	b085      	sub	sp, #20
 801096c:	af00      	add	r7, sp, #0
 801096e:	60f8      	str	r0, [r7, #12]
 8010970:	60b9      	str	r1, [r7, #8]
 8010972:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	3b04      	subs	r3, #4
 8010978:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010980:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	3b04      	subs	r3, #4
 8010986:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010988:	68bb      	ldr	r3, [r7, #8]
 801098a:	f023 0201 	bic.w	r2, r3, #1
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	3b04      	subs	r3, #4
 8010996:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010998:	4a0c      	ldr	r2, [pc, #48]	; (80109cc <pxPortInitialiseStack+0x64>)
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	3b14      	subs	r3, #20
 80109a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80109a4:	687a      	ldr	r2, [r7, #4]
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	3b04      	subs	r3, #4
 80109ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	f06f 0202 	mvn.w	r2, #2
 80109b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	3b20      	subs	r3, #32
 80109bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80109be:	68fb      	ldr	r3, [r7, #12]
}
 80109c0:	4618      	mov	r0, r3
 80109c2:	3714      	adds	r7, #20
 80109c4:	46bd      	mov	sp, r7
 80109c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ca:	4770      	bx	lr
 80109cc:	080109d1 	.word	0x080109d1

080109d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80109d0:	b480      	push	{r7}
 80109d2:	b085      	sub	sp, #20
 80109d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80109d6:	2300      	movs	r3, #0
 80109d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80109da:	4b12      	ldr	r3, [pc, #72]	; (8010a24 <prvTaskExitError+0x54>)
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109e2:	d00a      	beq.n	80109fa <prvTaskExitError+0x2a>
	__asm volatile
 80109e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109e8:	f383 8811 	msr	BASEPRI, r3
 80109ec:	f3bf 8f6f 	isb	sy
 80109f0:	f3bf 8f4f 	dsb	sy
 80109f4:	60fb      	str	r3, [r7, #12]
}
 80109f6:	bf00      	nop
 80109f8:	e7fe      	b.n	80109f8 <prvTaskExitError+0x28>
	__asm volatile
 80109fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109fe:	f383 8811 	msr	BASEPRI, r3
 8010a02:	f3bf 8f6f 	isb	sy
 8010a06:	f3bf 8f4f 	dsb	sy
 8010a0a:	60bb      	str	r3, [r7, #8]
}
 8010a0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010a0e:	bf00      	nop
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d0fc      	beq.n	8010a10 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010a16:	bf00      	nop
 8010a18:	bf00      	nop
 8010a1a:	3714      	adds	r7, #20
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a22:	4770      	bx	lr
 8010a24:	24000010 	.word	0x24000010
	...

08010a30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010a30:	4b07      	ldr	r3, [pc, #28]	; (8010a50 <pxCurrentTCBConst2>)
 8010a32:	6819      	ldr	r1, [r3, #0]
 8010a34:	6808      	ldr	r0, [r1, #0]
 8010a36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a3a:	f380 8809 	msr	PSP, r0
 8010a3e:	f3bf 8f6f 	isb	sy
 8010a42:	f04f 0000 	mov.w	r0, #0
 8010a46:	f380 8811 	msr	BASEPRI, r0
 8010a4a:	4770      	bx	lr
 8010a4c:	f3af 8000 	nop.w

08010a50 <pxCurrentTCBConst2>:
 8010a50:	240055f8 	.word	0x240055f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010a54:	bf00      	nop
 8010a56:	bf00      	nop

08010a58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010a58:	4808      	ldr	r0, [pc, #32]	; (8010a7c <prvPortStartFirstTask+0x24>)
 8010a5a:	6800      	ldr	r0, [r0, #0]
 8010a5c:	6800      	ldr	r0, [r0, #0]
 8010a5e:	f380 8808 	msr	MSP, r0
 8010a62:	f04f 0000 	mov.w	r0, #0
 8010a66:	f380 8814 	msr	CONTROL, r0
 8010a6a:	b662      	cpsie	i
 8010a6c:	b661      	cpsie	f
 8010a6e:	f3bf 8f4f 	dsb	sy
 8010a72:	f3bf 8f6f 	isb	sy
 8010a76:	df00      	svc	0
 8010a78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010a7a:	bf00      	nop
 8010a7c:	e000ed08 	.word	0xe000ed08

08010a80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010a80:	b580      	push	{r7, lr}
 8010a82:	b086      	sub	sp, #24
 8010a84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010a86:	4b46      	ldr	r3, [pc, #280]	; (8010ba0 <xPortStartScheduler+0x120>)
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	4a46      	ldr	r2, [pc, #280]	; (8010ba4 <xPortStartScheduler+0x124>)
 8010a8c:	4293      	cmp	r3, r2
 8010a8e:	d10a      	bne.n	8010aa6 <xPortStartScheduler+0x26>
	__asm volatile
 8010a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a94:	f383 8811 	msr	BASEPRI, r3
 8010a98:	f3bf 8f6f 	isb	sy
 8010a9c:	f3bf 8f4f 	dsb	sy
 8010aa0:	613b      	str	r3, [r7, #16]
}
 8010aa2:	bf00      	nop
 8010aa4:	e7fe      	b.n	8010aa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010aa6:	4b3e      	ldr	r3, [pc, #248]	; (8010ba0 <xPortStartScheduler+0x120>)
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	4a3f      	ldr	r2, [pc, #252]	; (8010ba8 <xPortStartScheduler+0x128>)
 8010aac:	4293      	cmp	r3, r2
 8010aae:	d10a      	bne.n	8010ac6 <xPortStartScheduler+0x46>
	__asm volatile
 8010ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ab4:	f383 8811 	msr	BASEPRI, r3
 8010ab8:	f3bf 8f6f 	isb	sy
 8010abc:	f3bf 8f4f 	dsb	sy
 8010ac0:	60fb      	str	r3, [r7, #12]
}
 8010ac2:	bf00      	nop
 8010ac4:	e7fe      	b.n	8010ac4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010ac6:	4b39      	ldr	r3, [pc, #228]	; (8010bac <xPortStartScheduler+0x12c>)
 8010ac8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010aca:	697b      	ldr	r3, [r7, #20]
 8010acc:	781b      	ldrb	r3, [r3, #0]
 8010ace:	b2db      	uxtb	r3, r3
 8010ad0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010ad2:	697b      	ldr	r3, [r7, #20]
 8010ad4:	22ff      	movs	r2, #255	; 0xff
 8010ad6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010ad8:	697b      	ldr	r3, [r7, #20]
 8010ada:	781b      	ldrb	r3, [r3, #0]
 8010adc:	b2db      	uxtb	r3, r3
 8010ade:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010ae0:	78fb      	ldrb	r3, [r7, #3]
 8010ae2:	b2db      	uxtb	r3, r3
 8010ae4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010ae8:	b2da      	uxtb	r2, r3
 8010aea:	4b31      	ldr	r3, [pc, #196]	; (8010bb0 <xPortStartScheduler+0x130>)
 8010aec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010aee:	4b31      	ldr	r3, [pc, #196]	; (8010bb4 <xPortStartScheduler+0x134>)
 8010af0:	2207      	movs	r2, #7
 8010af2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010af4:	e009      	b.n	8010b0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010af6:	4b2f      	ldr	r3, [pc, #188]	; (8010bb4 <xPortStartScheduler+0x134>)
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	3b01      	subs	r3, #1
 8010afc:	4a2d      	ldr	r2, [pc, #180]	; (8010bb4 <xPortStartScheduler+0x134>)
 8010afe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010b00:	78fb      	ldrb	r3, [r7, #3]
 8010b02:	b2db      	uxtb	r3, r3
 8010b04:	005b      	lsls	r3, r3, #1
 8010b06:	b2db      	uxtb	r3, r3
 8010b08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010b0a:	78fb      	ldrb	r3, [r7, #3]
 8010b0c:	b2db      	uxtb	r3, r3
 8010b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010b12:	2b80      	cmp	r3, #128	; 0x80
 8010b14:	d0ef      	beq.n	8010af6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010b16:	4b27      	ldr	r3, [pc, #156]	; (8010bb4 <xPortStartScheduler+0x134>)
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	f1c3 0307 	rsb	r3, r3, #7
 8010b1e:	2b04      	cmp	r3, #4
 8010b20:	d00a      	beq.n	8010b38 <xPortStartScheduler+0xb8>
	__asm volatile
 8010b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b26:	f383 8811 	msr	BASEPRI, r3
 8010b2a:	f3bf 8f6f 	isb	sy
 8010b2e:	f3bf 8f4f 	dsb	sy
 8010b32:	60bb      	str	r3, [r7, #8]
}
 8010b34:	bf00      	nop
 8010b36:	e7fe      	b.n	8010b36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010b38:	4b1e      	ldr	r3, [pc, #120]	; (8010bb4 <xPortStartScheduler+0x134>)
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	021b      	lsls	r3, r3, #8
 8010b3e:	4a1d      	ldr	r2, [pc, #116]	; (8010bb4 <xPortStartScheduler+0x134>)
 8010b40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010b42:	4b1c      	ldr	r3, [pc, #112]	; (8010bb4 <xPortStartScheduler+0x134>)
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010b4a:	4a1a      	ldr	r2, [pc, #104]	; (8010bb4 <xPortStartScheduler+0x134>)
 8010b4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	b2da      	uxtb	r2, r3
 8010b52:	697b      	ldr	r3, [r7, #20]
 8010b54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010b56:	4b18      	ldr	r3, [pc, #96]	; (8010bb8 <xPortStartScheduler+0x138>)
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	4a17      	ldr	r2, [pc, #92]	; (8010bb8 <xPortStartScheduler+0x138>)
 8010b5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010b60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010b62:	4b15      	ldr	r3, [pc, #84]	; (8010bb8 <xPortStartScheduler+0x138>)
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	4a14      	ldr	r2, [pc, #80]	; (8010bb8 <xPortStartScheduler+0x138>)
 8010b68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010b6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010b6e:	f000 f8dd 	bl	8010d2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010b72:	4b12      	ldr	r3, [pc, #72]	; (8010bbc <xPortStartScheduler+0x13c>)
 8010b74:	2200      	movs	r2, #0
 8010b76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010b78:	f000 f8fc 	bl	8010d74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010b7c:	4b10      	ldr	r3, [pc, #64]	; (8010bc0 <xPortStartScheduler+0x140>)
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	4a0f      	ldr	r2, [pc, #60]	; (8010bc0 <xPortStartScheduler+0x140>)
 8010b82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010b86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010b88:	f7ff ff66 	bl	8010a58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010b8c:	f7fe ff5a 	bl	800fa44 <vTaskSwitchContext>
	prvTaskExitError();
 8010b90:	f7ff ff1e 	bl	80109d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010b94:	2300      	movs	r3, #0
}
 8010b96:	4618      	mov	r0, r3
 8010b98:	3718      	adds	r7, #24
 8010b9a:	46bd      	mov	sp, r7
 8010b9c:	bd80      	pop	{r7, pc}
 8010b9e:	bf00      	nop
 8010ba0:	e000ed00 	.word	0xe000ed00
 8010ba4:	410fc271 	.word	0x410fc271
 8010ba8:	410fc270 	.word	0x410fc270
 8010bac:	e000e400 	.word	0xe000e400
 8010bb0:	24005c24 	.word	0x24005c24
 8010bb4:	24005c28 	.word	0x24005c28
 8010bb8:	e000ed20 	.word	0xe000ed20
 8010bbc:	24000010 	.word	0x24000010
 8010bc0:	e000ef34 	.word	0xe000ef34

08010bc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010bc4:	b480      	push	{r7}
 8010bc6:	b083      	sub	sp, #12
 8010bc8:	af00      	add	r7, sp, #0
	__asm volatile
 8010bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bce:	f383 8811 	msr	BASEPRI, r3
 8010bd2:	f3bf 8f6f 	isb	sy
 8010bd6:	f3bf 8f4f 	dsb	sy
 8010bda:	607b      	str	r3, [r7, #4]
}
 8010bdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010bde:	4b0f      	ldr	r3, [pc, #60]	; (8010c1c <vPortEnterCritical+0x58>)
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	3301      	adds	r3, #1
 8010be4:	4a0d      	ldr	r2, [pc, #52]	; (8010c1c <vPortEnterCritical+0x58>)
 8010be6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010be8:	4b0c      	ldr	r3, [pc, #48]	; (8010c1c <vPortEnterCritical+0x58>)
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	2b01      	cmp	r3, #1
 8010bee:	d10f      	bne.n	8010c10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010bf0:	4b0b      	ldr	r3, [pc, #44]	; (8010c20 <vPortEnterCritical+0x5c>)
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	b2db      	uxtb	r3, r3
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d00a      	beq.n	8010c10 <vPortEnterCritical+0x4c>
	__asm volatile
 8010bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bfe:	f383 8811 	msr	BASEPRI, r3
 8010c02:	f3bf 8f6f 	isb	sy
 8010c06:	f3bf 8f4f 	dsb	sy
 8010c0a:	603b      	str	r3, [r7, #0]
}
 8010c0c:	bf00      	nop
 8010c0e:	e7fe      	b.n	8010c0e <vPortEnterCritical+0x4a>
	}
}
 8010c10:	bf00      	nop
 8010c12:	370c      	adds	r7, #12
 8010c14:	46bd      	mov	sp, r7
 8010c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c1a:	4770      	bx	lr
 8010c1c:	24000010 	.word	0x24000010
 8010c20:	e000ed04 	.word	0xe000ed04

08010c24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010c24:	b480      	push	{r7}
 8010c26:	b083      	sub	sp, #12
 8010c28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010c2a:	4b12      	ldr	r3, [pc, #72]	; (8010c74 <vPortExitCritical+0x50>)
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d10a      	bne.n	8010c48 <vPortExitCritical+0x24>
	__asm volatile
 8010c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c36:	f383 8811 	msr	BASEPRI, r3
 8010c3a:	f3bf 8f6f 	isb	sy
 8010c3e:	f3bf 8f4f 	dsb	sy
 8010c42:	607b      	str	r3, [r7, #4]
}
 8010c44:	bf00      	nop
 8010c46:	e7fe      	b.n	8010c46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010c48:	4b0a      	ldr	r3, [pc, #40]	; (8010c74 <vPortExitCritical+0x50>)
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	3b01      	subs	r3, #1
 8010c4e:	4a09      	ldr	r2, [pc, #36]	; (8010c74 <vPortExitCritical+0x50>)
 8010c50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010c52:	4b08      	ldr	r3, [pc, #32]	; (8010c74 <vPortExitCritical+0x50>)
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d105      	bne.n	8010c66 <vPortExitCritical+0x42>
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010c5e:	683b      	ldr	r3, [r7, #0]
 8010c60:	f383 8811 	msr	BASEPRI, r3
}
 8010c64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010c66:	bf00      	nop
 8010c68:	370c      	adds	r7, #12
 8010c6a:	46bd      	mov	sp, r7
 8010c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c70:	4770      	bx	lr
 8010c72:	bf00      	nop
 8010c74:	24000010 	.word	0x24000010
	...

08010c80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010c80:	f3ef 8009 	mrs	r0, PSP
 8010c84:	f3bf 8f6f 	isb	sy
 8010c88:	4b15      	ldr	r3, [pc, #84]	; (8010ce0 <pxCurrentTCBConst>)
 8010c8a:	681a      	ldr	r2, [r3, #0]
 8010c8c:	f01e 0f10 	tst.w	lr, #16
 8010c90:	bf08      	it	eq
 8010c92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010c96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c9a:	6010      	str	r0, [r2, #0]
 8010c9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010ca0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010ca4:	f380 8811 	msr	BASEPRI, r0
 8010ca8:	f3bf 8f4f 	dsb	sy
 8010cac:	f3bf 8f6f 	isb	sy
 8010cb0:	f7fe fec8 	bl	800fa44 <vTaskSwitchContext>
 8010cb4:	f04f 0000 	mov.w	r0, #0
 8010cb8:	f380 8811 	msr	BASEPRI, r0
 8010cbc:	bc09      	pop	{r0, r3}
 8010cbe:	6819      	ldr	r1, [r3, #0]
 8010cc0:	6808      	ldr	r0, [r1, #0]
 8010cc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cc6:	f01e 0f10 	tst.w	lr, #16
 8010cca:	bf08      	it	eq
 8010ccc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010cd0:	f380 8809 	msr	PSP, r0
 8010cd4:	f3bf 8f6f 	isb	sy
 8010cd8:	4770      	bx	lr
 8010cda:	bf00      	nop
 8010cdc:	f3af 8000 	nop.w

08010ce0 <pxCurrentTCBConst>:
 8010ce0:	240055f8 	.word	0x240055f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010ce4:	bf00      	nop
 8010ce6:	bf00      	nop

08010ce8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010ce8:	b580      	push	{r7, lr}
 8010cea:	b082      	sub	sp, #8
 8010cec:	af00      	add	r7, sp, #0
	__asm volatile
 8010cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cf2:	f383 8811 	msr	BASEPRI, r3
 8010cf6:	f3bf 8f6f 	isb	sy
 8010cfa:	f3bf 8f4f 	dsb	sy
 8010cfe:	607b      	str	r3, [r7, #4]
}
 8010d00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010d02:	f7fe fe09 	bl	800f918 <xTaskIncrementTick>
 8010d06:	4603      	mov	r3, r0
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d003      	beq.n	8010d14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010d0c:	4b06      	ldr	r3, [pc, #24]	; (8010d28 <xPortSysTickHandler+0x40>)
 8010d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d12:	601a      	str	r2, [r3, #0]
 8010d14:	2300      	movs	r3, #0
 8010d16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010d18:	683b      	ldr	r3, [r7, #0]
 8010d1a:	f383 8811 	msr	BASEPRI, r3
}
 8010d1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010d20:	bf00      	nop
 8010d22:	3708      	adds	r7, #8
 8010d24:	46bd      	mov	sp, r7
 8010d26:	bd80      	pop	{r7, pc}
 8010d28:	e000ed04 	.word	0xe000ed04

08010d2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010d2c:	b480      	push	{r7}
 8010d2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010d30:	4b0b      	ldr	r3, [pc, #44]	; (8010d60 <vPortSetupTimerInterrupt+0x34>)
 8010d32:	2200      	movs	r2, #0
 8010d34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010d36:	4b0b      	ldr	r3, [pc, #44]	; (8010d64 <vPortSetupTimerInterrupt+0x38>)
 8010d38:	2200      	movs	r2, #0
 8010d3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010d3c:	4b0a      	ldr	r3, [pc, #40]	; (8010d68 <vPortSetupTimerInterrupt+0x3c>)
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	4a0a      	ldr	r2, [pc, #40]	; (8010d6c <vPortSetupTimerInterrupt+0x40>)
 8010d42:	fba2 2303 	umull	r2, r3, r2, r3
 8010d46:	099b      	lsrs	r3, r3, #6
 8010d48:	4a09      	ldr	r2, [pc, #36]	; (8010d70 <vPortSetupTimerInterrupt+0x44>)
 8010d4a:	3b01      	subs	r3, #1
 8010d4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010d4e:	4b04      	ldr	r3, [pc, #16]	; (8010d60 <vPortSetupTimerInterrupt+0x34>)
 8010d50:	2207      	movs	r2, #7
 8010d52:	601a      	str	r2, [r3, #0]
}
 8010d54:	bf00      	nop
 8010d56:	46bd      	mov	sp, r7
 8010d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d5c:	4770      	bx	lr
 8010d5e:	bf00      	nop
 8010d60:	e000e010 	.word	0xe000e010
 8010d64:	e000e018 	.word	0xe000e018
 8010d68:	24000000 	.word	0x24000000
 8010d6c:	10624dd3 	.word	0x10624dd3
 8010d70:	e000e014 	.word	0xe000e014

08010d74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010d74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010d84 <vPortEnableVFP+0x10>
 8010d78:	6801      	ldr	r1, [r0, #0]
 8010d7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010d7e:	6001      	str	r1, [r0, #0]
 8010d80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010d82:	bf00      	nop
 8010d84:	e000ed88 	.word	0xe000ed88

08010d88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010d88:	b480      	push	{r7}
 8010d8a:	b085      	sub	sp, #20
 8010d8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010d8e:	f3ef 8305 	mrs	r3, IPSR
 8010d92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	2b0f      	cmp	r3, #15
 8010d98:	d914      	bls.n	8010dc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010d9a:	4a17      	ldr	r2, [pc, #92]	; (8010df8 <vPortValidateInterruptPriority+0x70>)
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	4413      	add	r3, r2
 8010da0:	781b      	ldrb	r3, [r3, #0]
 8010da2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010da4:	4b15      	ldr	r3, [pc, #84]	; (8010dfc <vPortValidateInterruptPriority+0x74>)
 8010da6:	781b      	ldrb	r3, [r3, #0]
 8010da8:	7afa      	ldrb	r2, [r7, #11]
 8010daa:	429a      	cmp	r2, r3
 8010dac:	d20a      	bcs.n	8010dc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8010dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010db2:	f383 8811 	msr	BASEPRI, r3
 8010db6:	f3bf 8f6f 	isb	sy
 8010dba:	f3bf 8f4f 	dsb	sy
 8010dbe:	607b      	str	r3, [r7, #4]
}
 8010dc0:	bf00      	nop
 8010dc2:	e7fe      	b.n	8010dc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010dc4:	4b0e      	ldr	r3, [pc, #56]	; (8010e00 <vPortValidateInterruptPriority+0x78>)
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010dcc:	4b0d      	ldr	r3, [pc, #52]	; (8010e04 <vPortValidateInterruptPriority+0x7c>)
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	429a      	cmp	r2, r3
 8010dd2:	d90a      	bls.n	8010dea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dd8:	f383 8811 	msr	BASEPRI, r3
 8010ddc:	f3bf 8f6f 	isb	sy
 8010de0:	f3bf 8f4f 	dsb	sy
 8010de4:	603b      	str	r3, [r7, #0]
}
 8010de6:	bf00      	nop
 8010de8:	e7fe      	b.n	8010de8 <vPortValidateInterruptPriority+0x60>
	}
 8010dea:	bf00      	nop
 8010dec:	3714      	adds	r7, #20
 8010dee:	46bd      	mov	sp, r7
 8010df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010df4:	4770      	bx	lr
 8010df6:	bf00      	nop
 8010df8:	e000e3f0 	.word	0xe000e3f0
 8010dfc:	24005c24 	.word	0x24005c24
 8010e00:	e000ed0c 	.word	0xe000ed0c
 8010e04:	24005c28 	.word	0x24005c28

08010e08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	b08a      	sub	sp, #40	; 0x28
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010e10:	2300      	movs	r3, #0
 8010e12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010e14:	f7fe fcd2 	bl	800f7bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010e18:	4b5b      	ldr	r3, [pc, #364]	; (8010f88 <pvPortMalloc+0x180>)
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d101      	bne.n	8010e24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010e20:	f000 f920 	bl	8011064 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010e24:	4b59      	ldr	r3, [pc, #356]	; (8010f8c <pvPortMalloc+0x184>)
 8010e26:	681a      	ldr	r2, [r3, #0]
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	4013      	ands	r3, r2
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	f040 8093 	bne.w	8010f58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d01d      	beq.n	8010e74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010e38:	2208      	movs	r2, #8
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	4413      	add	r3, r2
 8010e3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	f003 0307 	and.w	r3, r3, #7
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d014      	beq.n	8010e74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	f023 0307 	bic.w	r3, r3, #7
 8010e50:	3308      	adds	r3, #8
 8010e52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	f003 0307 	and.w	r3, r3, #7
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d00a      	beq.n	8010e74 <pvPortMalloc+0x6c>
	__asm volatile
 8010e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e62:	f383 8811 	msr	BASEPRI, r3
 8010e66:	f3bf 8f6f 	isb	sy
 8010e6a:	f3bf 8f4f 	dsb	sy
 8010e6e:	617b      	str	r3, [r7, #20]
}
 8010e70:	bf00      	nop
 8010e72:	e7fe      	b.n	8010e72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d06e      	beq.n	8010f58 <pvPortMalloc+0x150>
 8010e7a:	4b45      	ldr	r3, [pc, #276]	; (8010f90 <pvPortMalloc+0x188>)
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	687a      	ldr	r2, [r7, #4]
 8010e80:	429a      	cmp	r2, r3
 8010e82:	d869      	bhi.n	8010f58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010e84:	4b43      	ldr	r3, [pc, #268]	; (8010f94 <pvPortMalloc+0x18c>)
 8010e86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010e88:	4b42      	ldr	r3, [pc, #264]	; (8010f94 <pvPortMalloc+0x18c>)
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010e8e:	e004      	b.n	8010e9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e9c:	685b      	ldr	r3, [r3, #4]
 8010e9e:	687a      	ldr	r2, [r7, #4]
 8010ea0:	429a      	cmp	r2, r3
 8010ea2:	d903      	bls.n	8010eac <pvPortMalloc+0xa4>
 8010ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d1f1      	bne.n	8010e90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010eac:	4b36      	ldr	r3, [pc, #216]	; (8010f88 <pvPortMalloc+0x180>)
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010eb2:	429a      	cmp	r2, r3
 8010eb4:	d050      	beq.n	8010f58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010eb6:	6a3b      	ldr	r3, [r7, #32]
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	2208      	movs	r2, #8
 8010ebc:	4413      	add	r3, r2
 8010ebe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ec2:	681a      	ldr	r2, [r3, #0]
 8010ec4:	6a3b      	ldr	r3, [r7, #32]
 8010ec6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eca:	685a      	ldr	r2, [r3, #4]
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	1ad2      	subs	r2, r2, r3
 8010ed0:	2308      	movs	r3, #8
 8010ed2:	005b      	lsls	r3, r3, #1
 8010ed4:	429a      	cmp	r2, r3
 8010ed6:	d91f      	bls.n	8010f18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	4413      	add	r3, r2
 8010ede:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010ee0:	69bb      	ldr	r3, [r7, #24]
 8010ee2:	f003 0307 	and.w	r3, r3, #7
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d00a      	beq.n	8010f00 <pvPortMalloc+0xf8>
	__asm volatile
 8010eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010eee:	f383 8811 	msr	BASEPRI, r3
 8010ef2:	f3bf 8f6f 	isb	sy
 8010ef6:	f3bf 8f4f 	dsb	sy
 8010efa:	613b      	str	r3, [r7, #16]
}
 8010efc:	bf00      	nop
 8010efe:	e7fe      	b.n	8010efe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f02:	685a      	ldr	r2, [r3, #4]
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	1ad2      	subs	r2, r2, r3
 8010f08:	69bb      	ldr	r3, [r7, #24]
 8010f0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f0e:	687a      	ldr	r2, [r7, #4]
 8010f10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010f12:	69b8      	ldr	r0, [r7, #24]
 8010f14:	f000 f908 	bl	8011128 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010f18:	4b1d      	ldr	r3, [pc, #116]	; (8010f90 <pvPortMalloc+0x188>)
 8010f1a:	681a      	ldr	r2, [r3, #0]
 8010f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f1e:	685b      	ldr	r3, [r3, #4]
 8010f20:	1ad3      	subs	r3, r2, r3
 8010f22:	4a1b      	ldr	r2, [pc, #108]	; (8010f90 <pvPortMalloc+0x188>)
 8010f24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010f26:	4b1a      	ldr	r3, [pc, #104]	; (8010f90 <pvPortMalloc+0x188>)
 8010f28:	681a      	ldr	r2, [r3, #0]
 8010f2a:	4b1b      	ldr	r3, [pc, #108]	; (8010f98 <pvPortMalloc+0x190>)
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	429a      	cmp	r2, r3
 8010f30:	d203      	bcs.n	8010f3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010f32:	4b17      	ldr	r3, [pc, #92]	; (8010f90 <pvPortMalloc+0x188>)
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	4a18      	ldr	r2, [pc, #96]	; (8010f98 <pvPortMalloc+0x190>)
 8010f38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f3c:	685a      	ldr	r2, [r3, #4]
 8010f3e:	4b13      	ldr	r3, [pc, #76]	; (8010f8c <pvPortMalloc+0x184>)
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	431a      	orrs	r2, r3
 8010f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f4a:	2200      	movs	r2, #0
 8010f4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010f4e:	4b13      	ldr	r3, [pc, #76]	; (8010f9c <pvPortMalloc+0x194>)
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	3301      	adds	r3, #1
 8010f54:	4a11      	ldr	r2, [pc, #68]	; (8010f9c <pvPortMalloc+0x194>)
 8010f56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010f58:	f7fe fc3e 	bl	800f7d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010f5c:	69fb      	ldr	r3, [r7, #28]
 8010f5e:	f003 0307 	and.w	r3, r3, #7
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d00a      	beq.n	8010f7c <pvPortMalloc+0x174>
	__asm volatile
 8010f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f6a:	f383 8811 	msr	BASEPRI, r3
 8010f6e:	f3bf 8f6f 	isb	sy
 8010f72:	f3bf 8f4f 	dsb	sy
 8010f76:	60fb      	str	r3, [r7, #12]
}
 8010f78:	bf00      	nop
 8010f7a:	e7fe      	b.n	8010f7a <pvPortMalloc+0x172>
	return pvReturn;
 8010f7c:	69fb      	ldr	r3, [r7, #28]
}
 8010f7e:	4618      	mov	r0, r3
 8010f80:	3728      	adds	r7, #40	; 0x28
 8010f82:	46bd      	mov	sp, r7
 8010f84:	bd80      	pop	{r7, pc}
 8010f86:	bf00      	nop
 8010f88:	24009834 	.word	0x24009834
 8010f8c:	24009848 	.word	0x24009848
 8010f90:	24009838 	.word	0x24009838
 8010f94:	2400982c 	.word	0x2400982c
 8010f98:	2400983c 	.word	0x2400983c
 8010f9c:	24009840 	.word	0x24009840

08010fa0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	b086      	sub	sp, #24
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d04d      	beq.n	801104e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010fb2:	2308      	movs	r3, #8
 8010fb4:	425b      	negs	r3, r3
 8010fb6:	697a      	ldr	r2, [r7, #20]
 8010fb8:	4413      	add	r3, r2
 8010fba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010fbc:	697b      	ldr	r3, [r7, #20]
 8010fbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010fc0:	693b      	ldr	r3, [r7, #16]
 8010fc2:	685a      	ldr	r2, [r3, #4]
 8010fc4:	4b24      	ldr	r3, [pc, #144]	; (8011058 <vPortFree+0xb8>)
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	4013      	ands	r3, r2
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d10a      	bne.n	8010fe4 <vPortFree+0x44>
	__asm volatile
 8010fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fd2:	f383 8811 	msr	BASEPRI, r3
 8010fd6:	f3bf 8f6f 	isb	sy
 8010fda:	f3bf 8f4f 	dsb	sy
 8010fde:	60fb      	str	r3, [r7, #12]
}
 8010fe0:	bf00      	nop
 8010fe2:	e7fe      	b.n	8010fe2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010fe4:	693b      	ldr	r3, [r7, #16]
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d00a      	beq.n	8011002 <vPortFree+0x62>
	__asm volatile
 8010fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ff0:	f383 8811 	msr	BASEPRI, r3
 8010ff4:	f3bf 8f6f 	isb	sy
 8010ff8:	f3bf 8f4f 	dsb	sy
 8010ffc:	60bb      	str	r3, [r7, #8]
}
 8010ffe:	bf00      	nop
 8011000:	e7fe      	b.n	8011000 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011002:	693b      	ldr	r3, [r7, #16]
 8011004:	685a      	ldr	r2, [r3, #4]
 8011006:	4b14      	ldr	r3, [pc, #80]	; (8011058 <vPortFree+0xb8>)
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	4013      	ands	r3, r2
 801100c:	2b00      	cmp	r3, #0
 801100e:	d01e      	beq.n	801104e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011010:	693b      	ldr	r3, [r7, #16]
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	2b00      	cmp	r3, #0
 8011016:	d11a      	bne.n	801104e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011018:	693b      	ldr	r3, [r7, #16]
 801101a:	685a      	ldr	r2, [r3, #4]
 801101c:	4b0e      	ldr	r3, [pc, #56]	; (8011058 <vPortFree+0xb8>)
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	43db      	mvns	r3, r3
 8011022:	401a      	ands	r2, r3
 8011024:	693b      	ldr	r3, [r7, #16]
 8011026:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011028:	f7fe fbc8 	bl	800f7bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801102c:	693b      	ldr	r3, [r7, #16]
 801102e:	685a      	ldr	r2, [r3, #4]
 8011030:	4b0a      	ldr	r3, [pc, #40]	; (801105c <vPortFree+0xbc>)
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	4413      	add	r3, r2
 8011036:	4a09      	ldr	r2, [pc, #36]	; (801105c <vPortFree+0xbc>)
 8011038:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801103a:	6938      	ldr	r0, [r7, #16]
 801103c:	f000 f874 	bl	8011128 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011040:	4b07      	ldr	r3, [pc, #28]	; (8011060 <vPortFree+0xc0>)
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	3301      	adds	r3, #1
 8011046:	4a06      	ldr	r2, [pc, #24]	; (8011060 <vPortFree+0xc0>)
 8011048:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801104a:	f7fe fbc5 	bl	800f7d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801104e:	bf00      	nop
 8011050:	3718      	adds	r7, #24
 8011052:	46bd      	mov	sp, r7
 8011054:	bd80      	pop	{r7, pc}
 8011056:	bf00      	nop
 8011058:	24009848 	.word	0x24009848
 801105c:	24009838 	.word	0x24009838
 8011060:	24009844 	.word	0x24009844

08011064 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011064:	b480      	push	{r7}
 8011066:	b085      	sub	sp, #20
 8011068:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801106a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801106e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011070:	4b27      	ldr	r3, [pc, #156]	; (8011110 <prvHeapInit+0xac>)
 8011072:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	f003 0307 	and.w	r3, r3, #7
 801107a:	2b00      	cmp	r3, #0
 801107c:	d00c      	beq.n	8011098 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	3307      	adds	r3, #7
 8011082:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	f023 0307 	bic.w	r3, r3, #7
 801108a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801108c:	68ba      	ldr	r2, [r7, #8]
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	1ad3      	subs	r3, r2, r3
 8011092:	4a1f      	ldr	r2, [pc, #124]	; (8011110 <prvHeapInit+0xac>)
 8011094:	4413      	add	r3, r2
 8011096:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801109c:	4a1d      	ldr	r2, [pc, #116]	; (8011114 <prvHeapInit+0xb0>)
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80110a2:	4b1c      	ldr	r3, [pc, #112]	; (8011114 <prvHeapInit+0xb0>)
 80110a4:	2200      	movs	r2, #0
 80110a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	68ba      	ldr	r2, [r7, #8]
 80110ac:	4413      	add	r3, r2
 80110ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80110b0:	2208      	movs	r2, #8
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	1a9b      	subs	r3, r3, r2
 80110b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	f023 0307 	bic.w	r3, r3, #7
 80110be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	4a15      	ldr	r2, [pc, #84]	; (8011118 <prvHeapInit+0xb4>)
 80110c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80110c6:	4b14      	ldr	r3, [pc, #80]	; (8011118 <prvHeapInit+0xb4>)
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	2200      	movs	r2, #0
 80110cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80110ce:	4b12      	ldr	r3, [pc, #72]	; (8011118 <prvHeapInit+0xb4>)
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	2200      	movs	r2, #0
 80110d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80110da:	683b      	ldr	r3, [r7, #0]
 80110dc:	68fa      	ldr	r2, [r7, #12]
 80110de:	1ad2      	subs	r2, r2, r3
 80110e0:	683b      	ldr	r3, [r7, #0]
 80110e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80110e4:	4b0c      	ldr	r3, [pc, #48]	; (8011118 <prvHeapInit+0xb4>)
 80110e6:	681a      	ldr	r2, [r3, #0]
 80110e8:	683b      	ldr	r3, [r7, #0]
 80110ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80110ec:	683b      	ldr	r3, [r7, #0]
 80110ee:	685b      	ldr	r3, [r3, #4]
 80110f0:	4a0a      	ldr	r2, [pc, #40]	; (801111c <prvHeapInit+0xb8>)
 80110f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80110f4:	683b      	ldr	r3, [r7, #0]
 80110f6:	685b      	ldr	r3, [r3, #4]
 80110f8:	4a09      	ldr	r2, [pc, #36]	; (8011120 <prvHeapInit+0xbc>)
 80110fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80110fc:	4b09      	ldr	r3, [pc, #36]	; (8011124 <prvHeapInit+0xc0>)
 80110fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011102:	601a      	str	r2, [r3, #0]
}
 8011104:	bf00      	nop
 8011106:	3714      	adds	r7, #20
 8011108:	46bd      	mov	sp, r7
 801110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801110e:	4770      	bx	lr
 8011110:	24005c2c 	.word	0x24005c2c
 8011114:	2400982c 	.word	0x2400982c
 8011118:	24009834 	.word	0x24009834
 801111c:	2400983c 	.word	0x2400983c
 8011120:	24009838 	.word	0x24009838
 8011124:	24009848 	.word	0x24009848

08011128 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011128:	b480      	push	{r7}
 801112a:	b085      	sub	sp, #20
 801112c:	af00      	add	r7, sp, #0
 801112e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011130:	4b28      	ldr	r3, [pc, #160]	; (80111d4 <prvInsertBlockIntoFreeList+0xac>)
 8011132:	60fb      	str	r3, [r7, #12]
 8011134:	e002      	b.n	801113c <prvInsertBlockIntoFreeList+0x14>
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	60fb      	str	r3, [r7, #12]
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	687a      	ldr	r2, [r7, #4]
 8011142:	429a      	cmp	r2, r3
 8011144:	d8f7      	bhi.n	8011136 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	685b      	ldr	r3, [r3, #4]
 801114e:	68ba      	ldr	r2, [r7, #8]
 8011150:	4413      	add	r3, r2
 8011152:	687a      	ldr	r2, [r7, #4]
 8011154:	429a      	cmp	r2, r3
 8011156:	d108      	bne.n	801116a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	685a      	ldr	r2, [r3, #4]
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	685b      	ldr	r3, [r3, #4]
 8011160:	441a      	add	r2, r3
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	685b      	ldr	r3, [r3, #4]
 8011172:	68ba      	ldr	r2, [r7, #8]
 8011174:	441a      	add	r2, r3
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	429a      	cmp	r2, r3
 801117c:	d118      	bne.n	80111b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	681a      	ldr	r2, [r3, #0]
 8011182:	4b15      	ldr	r3, [pc, #84]	; (80111d8 <prvInsertBlockIntoFreeList+0xb0>)
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	429a      	cmp	r2, r3
 8011188:	d00d      	beq.n	80111a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	685a      	ldr	r2, [r3, #4]
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	685b      	ldr	r3, [r3, #4]
 8011194:	441a      	add	r2, r3
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	681a      	ldr	r2, [r3, #0]
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	601a      	str	r2, [r3, #0]
 80111a4:	e008      	b.n	80111b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80111a6:	4b0c      	ldr	r3, [pc, #48]	; (80111d8 <prvInsertBlockIntoFreeList+0xb0>)
 80111a8:	681a      	ldr	r2, [r3, #0]
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	601a      	str	r2, [r3, #0]
 80111ae:	e003      	b.n	80111b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	681a      	ldr	r2, [r3, #0]
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80111b8:	68fa      	ldr	r2, [r7, #12]
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	429a      	cmp	r2, r3
 80111be:	d002      	beq.n	80111c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	687a      	ldr	r2, [r7, #4]
 80111c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80111c6:	bf00      	nop
 80111c8:	3714      	adds	r7, #20
 80111ca:	46bd      	mov	sp, r7
 80111cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111d0:	4770      	bx	lr
 80111d2:	bf00      	nop
 80111d4:	2400982c 	.word	0x2400982c
 80111d8:	24009834 	.word	0x24009834

080111dc <Bmx160_init>:
const float gyroRange = Bmx160_GYRO_SENSITIVITY_250DPS;

sBmx160Dev_t Obmx160;

void Bmx160_init()
{
 80111dc:	b580      	push	{r7, lr}
 80111de:	af00      	add	r7, sp, #0
    Obmx160.delayMs = HAL_Delay;
 80111e0:	4b04      	ldr	r3, [pc, #16]	; (80111f4 <Bmx160_init+0x18>)
 80111e2:	4a05      	ldr	r2, [pc, #20]	; (80111f8 <Bmx160_init+0x1c>)
 80111e4:	621a      	str	r2, [r3, #32]
    Bmx160_begin();
 80111e6:	f000 f809 	bl	80111fc <Bmx160_begin>
    DelayUs(100);
 80111ea:	2064      	movs	r0, #100	; 0x64
 80111ec:	f000 fa2a 	bl	8011644 <DelayUs>
}
 80111f0:	bf00      	nop
 80111f2:	bd80      	pop	{r7, pc}
 80111f4:	2400984c 	.word	0x2400984c
 80111f8:	08001cd5 	.word	0x08001cd5

080111fc <Bmx160_begin>:

uint8_t Bmx160_begin()
{
 80111fc:	b580      	push	{r7, lr}
 80111fe:	af00      	add	r7, sp, #0
    if (Bmx160_scan() == TRUE){
 8011200:	f000 fa17 	bl	8011632 <Bmx160_scan>
 8011204:	4603      	mov	r3, r0
 8011206:	2b01      	cmp	r3, #1
 8011208:	d11d      	bne.n	8011246 <Bmx160_begin+0x4a>
        Bmx160_softReset_();
 801120a:	f000 f821 	bl	8011250 <Bmx160_softReset_>
        Bmx160_writeBmxReg(Bmx160_COMMAND_REG_ADDR, 0x11);
 801120e:	2111      	movs	r1, #17
 8011210:	207e      	movs	r0, #126	; 0x7e
 8011212:	f000 f9d5 	bl	80115c0 <Bmx160_writeBmxReg>
        Obmx160.delayMs(50);
 8011216:	4b0d      	ldr	r3, [pc, #52]	; (801124c <Bmx160_begin+0x50>)
 8011218:	6a1b      	ldr	r3, [r3, #32]
 801121a:	2032      	movs	r0, #50	; 0x32
 801121c:	4798      	blx	r3
        /* Set gyro to normal mode */
        Bmx160_writeBmxReg(Bmx160_COMMAND_REG_ADDR, 0x15);
 801121e:	2115      	movs	r1, #21
 8011220:	207e      	movs	r0, #126	; 0x7e
 8011222:	f000 f9cd 	bl	80115c0 <Bmx160_writeBmxReg>
        Obmx160.delayMs(100);
 8011226:	4b09      	ldr	r3, [pc, #36]	; (801124c <Bmx160_begin+0x50>)
 8011228:	6a1b      	ldr	r3, [r3, #32]
 801122a:	2064      	movs	r0, #100	; 0x64
 801122c:	4798      	blx	r3
        /* Set mag to normal mode */
        Bmx160_writeBmxReg(Bmx160_COMMAND_REG_ADDR, 0x19);
 801122e:	2119      	movs	r1, #25
 8011230:	207e      	movs	r0, #126	; 0x7e
 8011232:	f000 f9c5 	bl	80115c0 <Bmx160_writeBmxReg>
        Obmx160.delayMs(10);
 8011236:	4b05      	ldr	r3, [pc, #20]	; (801124c <Bmx160_begin+0x50>)
 8011238:	6a1b      	ldr	r3, [r3, #32]
 801123a:	200a      	movs	r0, #10
 801123c:	4798      	blx	r3
        Bmx160_setMagnConf();
 801123e:	f000 f873 	bl	8011328 <Bmx160_setMagnConf>
        return TRUE;
 8011242:	2301      	movs	r3, #1
 8011244:	e000      	b.n	8011248 <Bmx160_begin+0x4c>
    }
    else
        return FALSE;
 8011246:	2300      	movs	r3, #0
}
 8011248:	4618      	mov	r0, r3
 801124a:	bd80      	pop	{r7, pc}
 801124c:	2400984c 	.word	0x2400984c

08011250 <Bmx160_softReset_>:
    Bmx160_writeBmxReg(Bmx160_COMMAND_REG_ADDR, 0x19);
    Obmx160.delayMs(100);
}

uint8_t Bmx160_softReset_()
{
 8011250:	b580      	push	{r7, lr}
 8011252:	b082      	sub	sp, #8
 8011254:	af00      	add	r7, sp, #0
  int8_t rslt=Bmx160_OK;
 8011256:	2300      	movs	r3, #0
 8011258:	71fb      	strb	r3, [r7, #7]
  rslt = Bmx160_softReset(&Obmx160);
 801125a:	4808      	ldr	r0, [pc, #32]	; (801127c <Bmx160_softReset_+0x2c>)
 801125c:	f000 f810 	bl	8011280 <Bmx160_softReset>
 8011260:	4603      	mov	r3, r0
 8011262:	71fb      	strb	r3, [r7, #7]
  if (rslt == 0)
 8011264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011268:	2b00      	cmp	r3, #0
 801126a:	d101      	bne.n	8011270 <Bmx160_softReset_+0x20>
    return TRUE;
 801126c:	2301      	movs	r3, #1
 801126e:	e000      	b.n	8011272 <Bmx160_softReset_+0x22>
  else
    return FALSE;
 8011270:	2300      	movs	r3, #0
}
 8011272:	4618      	mov	r0, r3
 8011274:	3708      	adds	r7, #8
 8011276:	46bd      	mov	sp, r7
 8011278:	bd80      	pop	{r7, pc}
 801127a:	bf00      	nop
 801127c:	2400984c 	.word	0x2400984c

08011280 <Bmx160_softReset>:

int8_t Bmx160_softReset(sBmx160Dev_t *dev)
{
 8011280:	b580      	push	{r7, lr}
 8011282:	b084      	sub	sp, #16
 8011284:	af00      	add	r7, sp, #0
 8011286:	6078      	str	r0, [r7, #4]
  int8_t rslt=Bmx160_OK;
 8011288:	2300      	movs	r3, #0
 801128a:	73fb      	strb	r3, [r7, #15]
  uint8_t data = Bmx160_SOFT_RESET_CMD;
 801128c:	23b6      	movs	r3, #182	; 0xb6
 801128e:	73bb      	strb	r3, [r7, #14]
  if (dev==NULL){
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	2b00      	cmp	r3, #0
 8011294:	d101      	bne.n	801129a <Bmx160_softReset+0x1a>
    rslt = Bmx160_E_NULL_PTR;
 8011296:	23ff      	movs	r3, #255	; 0xff
 8011298:	73fb      	strb	r3, [r7, #15]
  }
  Bmx160_writeBmxReg(Bmx160_COMMAND_REG_ADDR, data);
 801129a:	7bbb      	ldrb	r3, [r7, #14]
 801129c:	4619      	mov	r1, r3
 801129e:	207e      	movs	r0, #126	; 0x7e
 80112a0:	f000 f98e 	bl	80115c0 <Bmx160_writeBmxReg>
  Obmx160.delayMs(Bmx160_SOFT_RESET_DELAY_MS);
 80112a4:	4b08      	ldr	r3, [pc, #32]	; (80112c8 <Bmx160_softReset+0x48>)
 80112a6:	6a1b      	ldr	r3, [r3, #32]
 80112a8:	200f      	movs	r0, #15
 80112aa:	4798      	blx	r3
  if (rslt == Bmx160_OK){
 80112ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d102      	bne.n	80112ba <Bmx160_softReset+0x3a>
    Bmx160_defaultParamSettg(dev);
 80112b4:	6878      	ldr	r0, [r7, #4]
 80112b6:	f000 f809 	bl	80112cc <Bmx160_defaultParamSettg>
  }
  return rslt;
 80112ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80112be:	4618      	mov	r0, r3
 80112c0:	3710      	adds	r7, #16
 80112c2:	46bd      	mov	sp, r7
 80112c4:	bd80      	pop	{r7, pc}
 80112c6:	bf00      	nop
 80112c8:	2400984c 	.word	0x2400984c

080112cc <Bmx160_defaultParamSettg>:

void Bmx160_defaultParamSettg(sBmx160Dev_t *dev)
{
 80112cc:	b480      	push	{r7}
 80112ce:	b083      	sub	sp, #12
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	6078      	str	r0, [r7, #4]
  // Initializing accel and gyro params with
  dev->gyroCfg.bw = Bmx160_GYRO_BW_NORMAL_MODE;
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	2202      	movs	r2, #2
 80112d8:	75da      	strb	r2, [r3, #23]
  dev->gyroCfg.odr = Bmx160_GYRO_ODR_200HZ;
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	2209      	movs	r2, #9
 80112de:	755a      	strb	r2, [r3, #21]
  dev->gyroCfg.power = Bmx160_GYRO_SUSPEND_MODE;
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	2214      	movs	r2, #20
 80112e4:	751a      	strb	r2, [r3, #20]
  dev->gyroCfg.range = Bmx160_GYRO_RANGE_250_DPS;
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	2203      	movs	r2, #3
 80112ea:	759a      	strb	r2, [r3, #22]
  dev->accelCfg.bw = Bmx160_ACCEL_BW_NORMAL_AVG4;
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	2202      	movs	r2, #2
 80112f0:	73da      	strb	r2, [r3, #15]
  dev->accelCfg.odr = Bmx160_ACCEL_ODR_200HZ;
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	2209      	movs	r2, #9
 80112f6:	735a      	strb	r2, [r3, #13]
  dev->accelCfg.power = Bmx160_ACCEL_SUSPEND_MODE;
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	2210      	movs	r2, #16
 80112fc:	731a      	strb	r2, [r3, #12]
  dev->accelCfg.range = Bmx160_ACCEL_RANGE_2G;
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	2203      	movs	r2, #3
 8011302:	739a      	strb	r2, [r3, #14]


  dev->prevMagnCfg = dev->magnCfg;
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	687a      	ldr	r2, [r7, #4]
 8011308:	6852      	ldr	r2, [r2, #4]
 801130a:	609a      	str	r2, [r3, #8]
  dev->prevGyroCfg = dev->gyroCfg;
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	687a      	ldr	r2, [r7, #4]
 8011310:	6952      	ldr	r2, [r2, #20]
 8011312:	619a      	str	r2, [r3, #24]
  dev->prevAccelCfg = dev->accelCfg;
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	687a      	ldr	r2, [r7, #4]
 8011318:	68d2      	ldr	r2, [r2, #12]
 801131a:	611a      	str	r2, [r3, #16]
}
 801131c:	bf00      	nop
 801131e:	370c      	adds	r7, #12
 8011320:	46bd      	mov	sp, r7
 8011322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011326:	4770      	bx	lr

08011328 <Bmx160_setMagnConf>:

void Bmx160_setMagnConf()
{
 8011328:	b580      	push	{r7, lr}
 801132a:	af00      	add	r7, sp, #0
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_0_ADDR, 0x80);
 801132c:	2180      	movs	r1, #128	; 0x80
 801132e:	204c      	movs	r0, #76	; 0x4c
 8011330:	f000 f946 	bl	80115c0 <Bmx160_writeBmxReg>
    Obmx160.delayMs(50);
 8011334:	4b1a      	ldr	r3, [pc, #104]	; (80113a0 <Bmx160_setMagnConf+0x78>)
 8011336:	6a1b      	ldr	r3, [r3, #32]
 8011338:	2032      	movs	r0, #50	; 0x32
 801133a:	4798      	blx	r3
    // Sleep mode
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_3_ADDR, 0x01);
 801133c:	2101      	movs	r1, #1
 801133e:	204f      	movs	r0, #79	; 0x4f
 8011340:	f000 f93e 	bl	80115c0 <Bmx160_writeBmxReg>
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_2_ADDR, 0x4B);
 8011344:	214b      	movs	r1, #75	; 0x4b
 8011346:	204e      	movs	r0, #78	; 0x4e
 8011348:	f000 f93a 	bl	80115c0 <Bmx160_writeBmxReg>
    // REPXY regular preset
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_3_ADDR, 0x04);
 801134c:	2104      	movs	r1, #4
 801134e:	204f      	movs	r0, #79	; 0x4f
 8011350:	f000 f936 	bl	80115c0 <Bmx160_writeBmxReg>
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_2_ADDR, 0x51);
 8011354:	2151      	movs	r1, #81	; 0x51
 8011356:	204e      	movs	r0, #78	; 0x4e
 8011358:	f000 f932 	bl	80115c0 <Bmx160_writeBmxReg>
    // REPZ regular preset
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_3_ADDR, 0x0E);
 801135c:	210e      	movs	r1, #14
 801135e:	204f      	movs	r0, #79	; 0x4f
 8011360:	f000 f92e 	bl	80115c0 <Bmx160_writeBmxReg>
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_2_ADDR, 0x52);
 8011364:	2152      	movs	r1, #82	; 0x52
 8011366:	204e      	movs	r0, #78	; 0x4e
 8011368:	f000 f92a 	bl	80115c0 <Bmx160_writeBmxReg>

    Bmx160_writeBmxReg(Bmx160_MAGN_IF_3_ADDR, 0x02);
 801136c:	2102      	movs	r1, #2
 801136e:	204f      	movs	r0, #79	; 0x4f
 8011370:	f000 f926 	bl	80115c0 <Bmx160_writeBmxReg>
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_2_ADDR, 0x4C);
 8011374:	214c      	movs	r1, #76	; 0x4c
 8011376:	204e      	movs	r0, #78	; 0x4e
 8011378:	f000 f922 	bl	80115c0 <Bmx160_writeBmxReg>
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_1_ADDR, 0x42);
 801137c:	2142      	movs	r1, #66	; 0x42
 801137e:	204d      	movs	r0, #77	; 0x4d
 8011380:	f000 f91e 	bl	80115c0 <Bmx160_writeBmxReg>
    Bmx160_writeBmxReg(Bmx160_MAGN_CONFIG_ADDR, 0x08);
 8011384:	2108      	movs	r1, #8
 8011386:	2044      	movs	r0, #68	; 0x44
 8011388:	f000 f91a 	bl	80115c0 <Bmx160_writeBmxReg>
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_0_ADDR, 0x03);
 801138c:	2103      	movs	r1, #3
 801138e:	204c      	movs	r0, #76	; 0x4c
 8011390:	f000 f916 	bl	80115c0 <Bmx160_writeBmxReg>
    Obmx160.delayMs(50);
 8011394:	4b02      	ldr	r3, [pc, #8]	; (80113a0 <Bmx160_setMagnConf+0x78>)
 8011396:	6a1b      	ldr	r3, [r3, #32]
 8011398:	2032      	movs	r0, #50	; 0x32
 801139a:	4798      	blx	r3
}
 801139c:	bf00      	nop
 801139e:	bd80      	pop	{r7, pc}
 80113a0:	2400984c 	.word	0x2400984c

080113a4 <Bmx160_getAllData>:

void Bmx160_getAllData(sBmx160SensorData_t *magn, sBmx160SensorData_t *gyro, sBmx160SensorData_t *accel){
 80113a4:	b580      	push	{r7, lr}
 80113a6:	b08e      	sub	sp, #56	; 0x38
 80113a8:	af00      	add	r7, sp, #0
 80113aa:	60f8      	str	r0, [r7, #12]
 80113ac:	60b9      	str	r1, [r7, #8]
 80113ae:	607a      	str	r2, [r7, #4]

    uint8_t data[23] = {0};
 80113b0:	2300      	movs	r3, #0
 80113b2:	613b      	str	r3, [r7, #16]
 80113b4:	f107 0314 	add.w	r3, r7, #20
 80113b8:	2200      	movs	r2, #0
 80113ba:	601a      	str	r2, [r3, #0]
 80113bc:	605a      	str	r2, [r3, #4]
 80113be:	609a      	str	r2, [r3, #8]
 80113c0:	60da      	str	r2, [r3, #12]
 80113c2:	f8c3 200f 	str.w	r2, [r3, #15]
    int16_t x=0,y=0,z=0;
 80113c6:	2300      	movs	r3, #0
 80113c8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80113ca:	2300      	movs	r3, #0
 80113cc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80113ce:	2300      	movs	r3, #0
 80113d0:	867b      	strh	r3, [r7, #50]	; 0x32
    uint32_t time = 0;
 80113d2:	2300      	movs	r3, #0
 80113d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    float time_f;
    Bmx160_readReg(Bmx160_MAG_DATA_ADDR, data, 23);
 80113d6:	f107 0310 	add.w	r3, r7, #16
 80113da:	2217      	movs	r2, #23
 80113dc:	4619      	mov	r1, r3
 80113de:	2004      	movs	r0, #4
 80113e0:	f000 f915 	bl	801160e <Bmx160_readReg>
    time = (uint32_t) ((uint32_t)(((uint16_t)data[22] << 8) | data[21]) << 8 | data[20]);
 80113e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80113e8:	021b      	lsls	r3, r3, #8
 80113ea:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80113ee:	4313      	orrs	r3, r2
 80113f0:	021b      	lsls	r3, r3, #8
 80113f2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80113f6:	4313      	orrs	r3, r2
 80113f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    time_f = ((float)(time)) * 0.039f;
 80113fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113fc:	ee07 3a90 	vmov	s15, r3
 8011400:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011404:	ed9f 7a69 	vldr	s14, [pc, #420]	; 80115ac <Bmx160_getAllData+0x208>
 8011408:	ee67 7a87 	vmul.f32	s15, s15, s14
 801140c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    if(magn){
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	2b00      	cmp	r3, #0
 8011414:	d03e      	beq.n	8011494 <Bmx160_getAllData+0xf0>
        x = (int16_t) (((uint16_t)data[1] << 8) | data[0]);
 8011416:	7c7b      	ldrb	r3, [r7, #17]
 8011418:	021b      	lsls	r3, r3, #8
 801141a:	b21a      	sxth	r2, r3
 801141c:	7c3b      	ldrb	r3, [r7, #16]
 801141e:	b21b      	sxth	r3, r3
 8011420:	4313      	orrs	r3, r2
 8011422:	86fb      	strh	r3, [r7, #54]	; 0x36
        y = (int16_t) (((uint16_t)data[3] << 8) | data[2]);
 8011424:	7cfb      	ldrb	r3, [r7, #19]
 8011426:	021b      	lsls	r3, r3, #8
 8011428:	b21a      	sxth	r2, r3
 801142a:	7cbb      	ldrb	r3, [r7, #18]
 801142c:	b21b      	sxth	r3, r3
 801142e:	4313      	orrs	r3, r2
 8011430:	86bb      	strh	r3, [r7, #52]	; 0x34
        z = (int16_t) (((uint16_t)data[5] << 8) | data[4]);
 8011432:	7d7b      	ldrb	r3, [r7, #21]
 8011434:	021b      	lsls	r3, r3, #8
 8011436:	b21a      	sxth	r2, r3
 8011438:	7d3b      	ldrb	r3, [r7, #20]
 801143a:	b21b      	sxth	r3, r3
 801143c:	4313      	orrs	r3, r2
 801143e:	867b      	strh	r3, [r7, #50]	; 0x32
        //LOG("X: %d, Y: %d, Z: %d", x, y, z);
        magn->x = x * Bmx160_MAGN_UT_LSB_XY;
 8011440:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8011444:	ee07 3a90 	vmov	s15, r3
 8011448:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801144c:	ed9f 7a58 	vldr	s14, [pc, #352]	; 80115b0 <Bmx160_getAllData+0x20c>
 8011450:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	edc3 7a00 	vstr	s15, [r3]
        magn->y = y * Bmx160_MAGN_UT_LSB_XY;
 801145a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801145e:	ee07 3a90 	vmov	s15, r3
 8011462:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011466:	ed9f 7a52 	vldr	s14, [pc, #328]	; 80115b0 <Bmx160_getAllData+0x20c>
 801146a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	edc3 7a01 	vstr	s15, [r3, #4]
        magn->z = z * Bmx160_MAGN_UT_LSB_Z;
 8011474:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8011478:	ee07 3a90 	vmov	s15, r3
 801147c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011480:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80115b4 <Bmx160_getAllData+0x210>
 8011484:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	edc3 7a02 	vstr	s15, [r3, #8]
//        magn->x = x * Bmx160_MAGN_UT_LSB_XY;
//		magn->y = y * Bmx160_MAGN_UT_LSB_XY;
//		magn->z = z * Bmx160_MAGN_UT_LSB_XY;
        magn->sensortime = time_f;
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011492:	60da      	str	r2, [r3, #12]
    }
    if(gyro){
 8011494:	68bb      	ldr	r3, [r7, #8]
 8011496:	2b00      	cmp	r3, #0
 8011498:	d03e      	beq.n	8011518 <Bmx160_getAllData+0x174>
        x = (int16_t) (((uint16_t)data[9] << 8) | data[8]);
 801149a:	7e7b      	ldrb	r3, [r7, #25]
 801149c:	021b      	lsls	r3, r3, #8
 801149e:	b21a      	sxth	r2, r3
 80114a0:	7e3b      	ldrb	r3, [r7, #24]
 80114a2:	b21b      	sxth	r3, r3
 80114a4:	4313      	orrs	r3, r2
 80114a6:	86fb      	strh	r3, [r7, #54]	; 0x36
        y = (int16_t) (((uint16_t)data[11] << 8) | data[10]);
 80114a8:	7efb      	ldrb	r3, [r7, #27]
 80114aa:	021b      	lsls	r3, r3, #8
 80114ac:	b21a      	sxth	r2, r3
 80114ae:	7ebb      	ldrb	r3, [r7, #26]
 80114b0:	b21b      	sxth	r3, r3
 80114b2:	4313      	orrs	r3, r2
 80114b4:	86bb      	strh	r3, [r7, #52]	; 0x34
        z = (int16_t) (((uint16_t)data[13] << 8) | data[12]);
 80114b6:	7f7b      	ldrb	r3, [r7, #29]
 80114b8:	021b      	lsls	r3, r3, #8
 80114ba:	b21a      	sxth	r2, r3
 80114bc:	7f3b      	ldrb	r3, [r7, #28]
 80114be:	b21b      	sxth	r3, r3
 80114c0:	4313      	orrs	r3, r2
 80114c2:	867b      	strh	r3, [r7, #50]	; 0x32
        gyro->x = x * gyroRange;
 80114c4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80114c8:	ee07 3a90 	vmov	s15, r3
 80114cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80114d0:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80115b8 <Bmx160_getAllData+0x214>
 80114d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80114d8:	68bb      	ldr	r3, [r7, #8]
 80114da:	edc3 7a00 	vstr	s15, [r3]
        gyro->y = y * gyroRange;
 80114de:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80114e2:	ee07 3a90 	vmov	s15, r3
 80114e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80114ea:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80115b8 <Bmx160_getAllData+0x214>
 80114ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80114f2:	68bb      	ldr	r3, [r7, #8]
 80114f4:	edc3 7a01 	vstr	s15, [r3, #4]
        gyro->z = z * gyroRange;
 80114f8:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80114fc:	ee07 3a90 	vmov	s15, r3
 8011500:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011504:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80115b8 <Bmx160_getAllData+0x214>
 8011508:	ee67 7a87 	vmul.f32	s15, s15, s14
 801150c:	68bb      	ldr	r3, [r7, #8]
 801150e:	edc3 7a02 	vstr	s15, [r3, #8]
        gyro->sensortime = time_f;
 8011512:	68bb      	ldr	r3, [r7, #8]
 8011514:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011516:	60da      	str	r2, [r3, #12]
    }
    if(accel){
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	2b00      	cmp	r3, #0
 801151c:	d042      	beq.n	80115a4 <Bmx160_getAllData+0x200>
        x = (int16_t) (((uint16_t)data[15] << 8) | data[14]);
 801151e:	7ffb      	ldrb	r3, [r7, #31]
 8011520:	021b      	lsls	r3, r3, #8
 8011522:	b21a      	sxth	r2, r3
 8011524:	7fbb      	ldrb	r3, [r7, #30]
 8011526:	b21b      	sxth	r3, r3
 8011528:	4313      	orrs	r3, r2
 801152a:	86fb      	strh	r3, [r7, #54]	; 0x36
        y = (int16_t) (((uint16_t)data[17] << 8) | data[16]);
 801152c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8011530:	021b      	lsls	r3, r3, #8
 8011532:	b21a      	sxth	r2, r3
 8011534:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011538:	b21b      	sxth	r3, r3
 801153a:	4313      	orrs	r3, r2
 801153c:	86bb      	strh	r3, [r7, #52]	; 0x34
        z = (int16_t) (((uint16_t)data[19] << 8) | data[18]);
 801153e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011542:	021b      	lsls	r3, r3, #8
 8011544:	b21a      	sxth	r2, r3
 8011546:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801154a:	b21b      	sxth	r3, r3
 801154c:	4313      	orrs	r3, r2
 801154e:	867b      	strh	r3, [r7, #50]	; 0x32
        accel->x = x * accelRange;
 8011550:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8011554:	ee07 3a90 	vmov	s15, r3
 8011558:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801155c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80115bc <Bmx160_getAllData+0x218>
 8011560:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	edc3 7a00 	vstr	s15, [r3]
        accel->y = y * accelRange;
 801156a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801156e:	ee07 3a90 	vmov	s15, r3
 8011572:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011576:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80115bc <Bmx160_getAllData+0x218>
 801157a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	edc3 7a01 	vstr	s15, [r3, #4]
        accel->z = z * accelRange;
 8011584:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8011588:	ee07 3a90 	vmov	s15, r3
 801158c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011590:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80115bc <Bmx160_getAllData+0x218>
 8011594:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	edc3 7a02 	vstr	s15, [r3, #8]
        accel->sensortime = time_f;
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80115a2:	60da      	str	r2, [r3, #12]
    }
}
 80115a4:	bf00      	nop
 80115a6:	3738      	adds	r7, #56	; 0x38
 80115a8:	46bd      	mov	sp, r7
 80115aa:	bd80      	pop	{r7, pc}
 80115ac:	3d1fbe77 	.word	0x3d1fbe77
 80115b0:	3d0fc0d3 	.word	0x3d0fc0d3
 80115b4:	3e02363b 	.word	0x3e02363b
 80115b8:	3bf9c1f8 	.word	0x3bf9c1f8
 80115bc:	3a1ce7f0 	.word	0x3a1ce7f0

080115c0 <Bmx160_writeBmxReg>:

void Bmx160_writeBmxReg(uint8_t reg, uint8_t value)
{
 80115c0:	b580      	push	{r7, lr}
 80115c2:	b084      	sub	sp, #16
 80115c4:	af00      	add	r7, sp, #0
 80115c6:	4603      	mov	r3, r0
 80115c8:	460a      	mov	r2, r1
 80115ca:	71fb      	strb	r3, [r7, #7]
 80115cc:	4613      	mov	r3, r2
 80115ce:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer[1] = {value};
 80115d0:	79bb      	ldrb	r3, [r7, #6]
 80115d2:	733b      	strb	r3, [r7, #12]
    Bmx160_writeReg(reg, buffer, 1);
 80115d4:	f107 010c 	add.w	r1, r7, #12
 80115d8:	79fb      	ldrb	r3, [r7, #7]
 80115da:	2201      	movs	r2, #1
 80115dc:	4618      	mov	r0, r3
 80115de:	f000 f804 	bl	80115ea <Bmx160_writeReg>
}
 80115e2:	bf00      	nop
 80115e4:	3710      	adds	r7, #16
 80115e6:	46bd      	mov	sp, r7
 80115e8:	bd80      	pop	{r7, pc}

080115ea <Bmx160_writeReg>:

void Bmx160_writeReg(uint8_t reg, uint8_t *pBuf, uint16_t len)
{
 80115ea:	b580      	push	{r7, lr}
 80115ec:	b082      	sub	sp, #8
 80115ee:	af00      	add	r7, sp, #0
 80115f0:	4603      	mov	r3, r0
 80115f2:	6039      	str	r1, [r7, #0]
 80115f4:	71fb      	strb	r3, [r7, #7]
 80115f6:	4613      	mov	r3, r2
 80115f8:	80bb      	strh	r3, [r7, #4]
    SensorAPI_I2Cx_Write(0, reg, pBuf, len);
 80115fa:	88bb      	ldrh	r3, [r7, #4]
 80115fc:	79f9      	ldrb	r1, [r7, #7]
 80115fe:	683a      	ldr	r2, [r7, #0]
 8011600:	2000      	movs	r0, #0
 8011602:	f000 f85f 	bl	80116c4 <SensorAPI_I2Cx_Write>
}
 8011606:	bf00      	nop
 8011608:	3708      	adds	r7, #8
 801160a:	46bd      	mov	sp, r7
 801160c:	bd80      	pop	{r7, pc}

0801160e <Bmx160_readReg>:

void Bmx160_readReg(uint8_t reg, uint8_t *pBuf, uint16_t len)
{
 801160e:	b580      	push	{r7, lr}
 8011610:	b082      	sub	sp, #8
 8011612:	af00      	add	r7, sp, #0
 8011614:	4603      	mov	r3, r0
 8011616:	6039      	str	r1, [r7, #0]
 8011618:	71fb      	strb	r3, [r7, #7]
 801161a:	4613      	mov	r3, r2
 801161c:	80bb      	strh	r3, [r7, #4]
    SensorAPI_I2Cx_Read(0, reg, pBuf, len);
 801161e:	88bb      	ldrh	r3, [r7, #4]
 8011620:	79f9      	ldrb	r1, [r7, #7]
 8011622:	683a      	ldr	r2, [r7, #0]
 8011624:	2000      	movs	r0, #0
 8011626:	f000 f82b 	bl	8011680 <SensorAPI_I2Cx_Read>
}
 801162a:	bf00      	nop
 801162c:	3708      	adds	r7, #8
 801162e:	46bd      	mov	sp, r7
 8011630:	bd80      	pop	{r7, pc}

08011632 <Bmx160_scan>:

uint8_t Bmx160_scan()
{
 8011632:	b480      	push	{r7}
 8011634:	af00      	add	r7, sp, #0
    return TRUE;
 8011636:	2301      	movs	r3, #1
}
 8011638:	4618      	mov	r0, r3
 801163a:	46bd      	mov	sp, r7
 801163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011640:	4770      	bx	lr
	...

08011644 <DelayUs>:

uint8_t GTXBuffer[512], GRXBuffer[2048];


void DelayUs(uint32_t Delay)
{
 8011644:	b480      	push	{r7}
 8011646:	b085      	sub	sp, #20
 8011648:	af00      	add	r7, sp, #0
 801164a:	6078      	str	r0, [r7, #4]
	uint32_t i;

	while(--Delay)
 801164c:	e009      	b.n	8011662 <DelayUs+0x1e>
	{
		for(i = 0; i < 84000; i++)
 801164e:	2300      	movs	r3, #0
 8011650:	60fb      	str	r3, [r7, #12]
 8011652:	e002      	b.n	801165a <DelayUs+0x16>
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	3301      	adds	r3, #1
 8011658:	60fb      	str	r3, [r7, #12]
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	4a07      	ldr	r2, [pc, #28]	; (801167c <DelayUs+0x38>)
 801165e:	4293      	cmp	r3, r2
 8011660:	d9f8      	bls.n	8011654 <DelayUs+0x10>
	while(--Delay)
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	3b01      	subs	r3, #1
 8011666:	607b      	str	r3, [r7, #4]
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d1ef      	bne.n	801164e <DelayUs+0xa>
		{
			;
		}
	}
}
 801166e:	bf00      	nop
 8011670:	bf00      	nop
 8011672:	3714      	adds	r7, #20
 8011674:	46bd      	mov	sp, r7
 8011676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801167a:	4770      	bx	lr
 801167c:	0001481f 	.word	0x0001481f

08011680 <SensorAPI_I2Cx_Read>:
* Input          : I2C2 device_address, register address, data, data lenght
* Output         : None
* Return         : None
*******************************************************************************/
int8_t SensorAPI_I2Cx_Read(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8011680:	b580      	push	{r7, lr}
 8011682:	b084      	sub	sp, #16
 8011684:	af02      	add	r7, sp, #8
 8011686:	603a      	str	r2, [r7, #0]
 8011688:	461a      	mov	r2, r3
 801168a:	4603      	mov	r3, r0
 801168c:	71fb      	strb	r3, [r7, #7]
 801168e:	460b      	mov	r3, r1
 8011690:	71bb      	strb	r3, [r7, #6]
 8011692:	4613      	mov	r3, r2
 8011694:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&I2C_HANDLE, BMI160_ADDR, &reg_addr, 1, I2CTIMEOUT);
 8011696:	1dba      	adds	r2, r7, #6
 8011698:	2364      	movs	r3, #100	; 0x64
 801169a:	9300      	str	r3, [sp, #0]
 801169c:	2301      	movs	r3, #1
 801169e:	21d0      	movs	r1, #208	; 0xd0
 80116a0:	4807      	ldr	r0, [pc, #28]	; (80116c0 <SensorAPI_I2Cx_Read+0x40>)
 80116a2:	f7f4 f90d 	bl	80058c0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&I2C_HANDLE, BMI160_ADDR, data, len, I2CTIMEOUT);
 80116a6:	88bb      	ldrh	r3, [r7, #4]
 80116a8:	2264      	movs	r2, #100	; 0x64
 80116aa:	9200      	str	r2, [sp, #0]
 80116ac:	683a      	ldr	r2, [r7, #0]
 80116ae:	21d0      	movs	r1, #208	; 0xd0
 80116b0:	4803      	ldr	r0, [pc, #12]	; (80116c0 <SensorAPI_I2Cx_Read+0x40>)
 80116b2:	f7f4 f9f9 	bl	8005aa8 <HAL_I2C_Master_Receive>
	return 0;
 80116b6:	2300      	movs	r3, #0
}
 80116b8:	4618      	mov	r0, r3
 80116ba:	3708      	adds	r7, #8
 80116bc:	46bd      	mov	sp, r7
 80116be:	bd80      	pop	{r7, pc}
 80116c0:	24004524 	.word	0x24004524

080116c4 <SensorAPI_I2Cx_Write>:
* Input          : I2C2 device_address, register address, data, data lenght
* Output         : None
* Return         : None
*******************************************************************************/
int8_t SensorAPI_I2Cx_Write(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 80116c4:	b580      	push	{r7, lr}
 80116c6:	b084      	sub	sp, #16
 80116c8:	af02      	add	r7, sp, #8
 80116ca:	603a      	str	r2, [r7, #0]
 80116cc:	461a      	mov	r2, r3
 80116ce:	4603      	mov	r3, r0
 80116d0:	71fb      	strb	r3, [r7, #7]
 80116d2:	460b      	mov	r3, r1
 80116d4:	71bb      	strb	r3, [r7, #6]
 80116d6:	4613      	mov	r3, r2
 80116d8:	80bb      	strh	r3, [r7, #4]
	GTXBuffer[0] = reg_addr;
 80116da:	4a0c      	ldr	r2, [pc, #48]	; (801170c <SensorAPI_I2Cx_Write+0x48>)
 80116dc:	79bb      	ldrb	r3, [r7, #6]
 80116de:	7013      	strb	r3, [r2, #0]
	memcpy(&GTXBuffer[1], data, len);
 80116e0:	88bb      	ldrh	r3, [r7, #4]
 80116e2:	461a      	mov	r2, r3
 80116e4:	6839      	ldr	r1, [r7, #0]
 80116e6:	480a      	ldr	r0, [pc, #40]	; (8011710 <SensorAPI_I2Cx_Write+0x4c>)
 80116e8:	f000 fe9b 	bl	8012422 <memcpy>

	HAL_I2C_Master_Transmit(&I2C_HANDLE, BMI160_ADDR, GTXBuffer, len+1, I2CTIMEOUT);
 80116ec:	88bb      	ldrh	r3, [r7, #4]
 80116ee:	3301      	adds	r3, #1
 80116f0:	b29b      	uxth	r3, r3
 80116f2:	2264      	movs	r2, #100	; 0x64
 80116f4:	9200      	str	r2, [sp, #0]
 80116f6:	4a05      	ldr	r2, [pc, #20]	; (801170c <SensorAPI_I2Cx_Write+0x48>)
 80116f8:	21d0      	movs	r1, #208	; 0xd0
 80116fa:	4806      	ldr	r0, [pc, #24]	; (8011714 <SensorAPI_I2Cx_Write+0x50>)
 80116fc:	f7f4 f8e0 	bl	80058c0 <HAL_I2C_Master_Transmit>
	return 0;
 8011700:	2300      	movs	r3, #0
}
 8011702:	4618      	mov	r0, r3
 8011704:	3708      	adds	r7, #8
 8011706:	46bd      	mov	sp, r7
 8011708:	bd80      	pop	{r7, pc}
 801170a:	bf00      	nop
 801170c:	24009870 	.word	0x24009870
 8011710:	24009871 	.word	0x24009871
 8011714:	24004524 	.word	0x24004524

08011718 <GNSS_Init>:
/*!
 * Structure initialization.
 * @param GNSS Pointer to main GNSS structure.
 * @param huart Pointer to uart handle.
 */
void GNSS_Init(GNSS_StateHandle *GNSS, UART_HandleTypeDef *huart) {
 8011718:	b480      	push	{r7}
 801171a:	b083      	sub	sp, #12
 801171c:	af00      	add	r7, sp, #0
 801171e:	6078      	str	r0, [r7, #4]
 8011720:	6039      	str	r1, [r7, #0]
	GNSS->huart = huart;
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	683a      	ldr	r2, [r7, #0]
 8011726:	601a      	str	r2, [r3, #0]
	GNSS->year = 0;
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	2200      	movs	r2, #0
 801172c:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	GNSS->month = 0;
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	2200      	movs	r2, #0
 8011734:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	GNSS->day = 0;
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	2200      	movs	r2, #0
 801173c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
	GNSS->hour = 0;
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	2200      	movs	r2, #0
 8011744:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	GNSS->min = 0;
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	2200      	movs	r2, #0
 801174c:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	GNSS->sec = 0;
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	2200      	movs	r2, #0
 8011754:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	GNSS->fixType = 0;
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	2200      	movs	r2, #0
 801175c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	GNSS->lon = 0;
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	2200      	movs	r2, #0
 8011764:	679a      	str	r2, [r3, #120]	; 0x78
	GNSS->lat = 0;
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	2200      	movs	r2, #0
 801176a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	GNSS->height = 0;
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	2200      	movs	r2, #0
 8011772:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	GNSS->hMSL = 0;
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	2200      	movs	r2, #0
 801177a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	GNSS->hAcc = 0;
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	2200      	movs	r2, #0
 8011782:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	GNSS->vAcc = 0;
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	2200      	movs	r2, #0
 801178a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	GNSS->gSpeed = 0;
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	2200      	movs	r2, #0
 8011792:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	GNSS->headMot = 0;
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	2200      	movs	r2, #0
 801179a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}
 801179e:	bf00      	nop
 80117a0:	370c      	adds	r7, #12
 80117a2:	46bd      	mov	sp, r7
 80117a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117a8:	4770      	bx	lr
	...

080117ac <GNSS_GetUniqID>:

/*!
 * Make request for unique chip ID data.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_GetUniqID(GNSS_StateHandle *GNSS) {
 80117ac:	b580      	push	{r7, lr}
 80117ae:	b082      	sub	sp, #8
 80117b0:	af00      	add	r7, sp, #0
 80117b2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_DMA(GNSS->huart, getDeviceID,
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	2208      	movs	r2, #8
 80117ba:	4907      	ldr	r1, [pc, #28]	; (80117d8 <GNSS_GetUniqID+0x2c>)
 80117bc:	4618      	mov	r0, r3
 80117be:	f7f8 f9a1 	bl	8009b04 <HAL_UART_Transmit_DMA>
			sizeof(getDeviceID) / sizeof(uint8_t));
	HAL_UART_Receive_IT(GNSS->huart, GNSS_Handle.uartWorkingBuffer, 17);
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	2211      	movs	r2, #17
 80117c8:	4904      	ldr	r1, [pc, #16]	; (80117dc <GNSS_GetUniqID+0x30>)
 80117ca:	4618      	mov	r0, r3
 80117cc:	f7f8 f94e 	bl	8009a6c <HAL_UART_Receive_IT>
}
 80117d0:	bf00      	nop
 80117d2:	3708      	adds	r7, #8
 80117d4:	46bd      	mov	sp, r7
 80117d6:	bd80      	pop	{r7, pc}
 80117d8:	08014538 	.word	0x08014538
 80117dc:	24009a78 	.word	0x24009a78

080117e0 <GNSS_LoadConfig>:

/*!
 *  Sends the basic configuration: Activation of the UBX standard, change of NMEA version to 4.10 and turn on of the Galileo system.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_LoadConfig(GNSS_StateHandle *GNSS) {
 80117e0:	b580      	push	{r7, lr}
 80117e2:	b082      	sub	sp, #8
 80117e4:	af00      	add	r7, sp, #0
 80117e6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_DMA(GNSS->huart, configUBX,
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	221c      	movs	r2, #28
 80117ee:	490f      	ldr	r1, [pc, #60]	; (801182c <GNSS_LoadConfig+0x4c>)
 80117f0:	4618      	mov	r0, r3
 80117f2:	f7f8 f987 	bl	8009b04 <HAL_UART_Transmit_DMA>
			sizeof(configUBX) / sizeof(uint8_t));
	HAL_Delay(250);
 80117f6:	20fa      	movs	r0, #250	; 0xfa
 80117f8:	f7f0 fa6c 	bl	8001cd4 <HAL_Delay>
	HAL_UART_Transmit_DMA(GNSS->huart, setNMEA410,
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	221c      	movs	r2, #28
 8011802:	490b      	ldr	r1, [pc, #44]	; (8011830 <GNSS_LoadConfig+0x50>)
 8011804:	4618      	mov	r0, r3
 8011806:	f7f8 f97d 	bl	8009b04 <HAL_UART_Transmit_DMA>
			sizeof(setNMEA410) / sizeof(uint8_t));
	HAL_Delay(250);
 801180a:	20fa      	movs	r0, #250	; 0xfa
 801180c:	f7f0 fa62 	bl	8001cd4 <HAL_Delay>
	HAL_UART_Transmit_DMA(GNSS->huart, setGNSS,
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	222c      	movs	r2, #44	; 0x2c
 8011816:	4907      	ldr	r1, [pc, #28]	; (8011834 <GNSS_LoadConfig+0x54>)
 8011818:	4618      	mov	r0, r3
 801181a:	f7f8 f973 	bl	8009b04 <HAL_UART_Transmit_DMA>
			sizeof(setGNSS) / sizeof(uint8_t));
	HAL_Delay(250);
 801181e:	20fa      	movs	r0, #250	; 0xfa
 8011820:	f7f0 fa58 	bl	8001cd4 <HAL_Delay>
}
 8011824:	bf00      	nop
 8011826:	3708      	adds	r7, #8
 8011828:	46bd      	mov	sp, r7
 801182a:	bd80      	pop	{r7, pc}
 801182c:	080144d4 	.word	0x080144d4
 8011830:	080144f0 	.word	0x080144f0
 8011834:	0801450c 	.word	0x0801450c

08011838 <sqrtf>:
 8011838:	b508      	push	{r3, lr}
 801183a:	ed2d 8b02 	vpush	{d8}
 801183e:	eeb0 8a40 	vmov.f32	s16, s0
 8011842:	f000 f817 	bl	8011874 <__ieee754_sqrtf>
 8011846:	eeb4 8a48 	vcmp.f32	s16, s16
 801184a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801184e:	d60c      	bvs.n	801186a <sqrtf+0x32>
 8011850:	eddf 8a07 	vldr	s17, [pc, #28]	; 8011870 <sqrtf+0x38>
 8011854:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801185c:	d505      	bpl.n	801186a <sqrtf+0x32>
 801185e:	f000 fdb3 	bl	80123c8 <__errno>
 8011862:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8011866:	2321      	movs	r3, #33	; 0x21
 8011868:	6003      	str	r3, [r0, #0]
 801186a:	ecbd 8b02 	vpop	{d8}
 801186e:	bd08      	pop	{r3, pc}
 8011870:	00000000 	.word	0x00000000

08011874 <__ieee754_sqrtf>:
 8011874:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8011878:	4770      	bx	lr

0801187a <__cvt>:
 801187a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801187c:	ed2d 8b02 	vpush	{d8}
 8011880:	eeb0 8b40 	vmov.f64	d8, d0
 8011884:	b085      	sub	sp, #20
 8011886:	4617      	mov	r7, r2
 8011888:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801188a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801188c:	ee18 2a90 	vmov	r2, s17
 8011890:	f025 0520 	bic.w	r5, r5, #32
 8011894:	2a00      	cmp	r2, #0
 8011896:	bfb6      	itet	lt
 8011898:	222d      	movlt	r2, #45	; 0x2d
 801189a:	2200      	movge	r2, #0
 801189c:	eeb1 8b40 	vneglt.f64	d8, d0
 80118a0:	2d46      	cmp	r5, #70	; 0x46
 80118a2:	460c      	mov	r4, r1
 80118a4:	701a      	strb	r2, [r3, #0]
 80118a6:	d004      	beq.n	80118b2 <__cvt+0x38>
 80118a8:	2d45      	cmp	r5, #69	; 0x45
 80118aa:	d100      	bne.n	80118ae <__cvt+0x34>
 80118ac:	3401      	adds	r4, #1
 80118ae:	2102      	movs	r1, #2
 80118b0:	e000      	b.n	80118b4 <__cvt+0x3a>
 80118b2:	2103      	movs	r1, #3
 80118b4:	ab03      	add	r3, sp, #12
 80118b6:	9301      	str	r3, [sp, #4]
 80118b8:	ab02      	add	r3, sp, #8
 80118ba:	9300      	str	r3, [sp, #0]
 80118bc:	4622      	mov	r2, r4
 80118be:	4633      	mov	r3, r6
 80118c0:	eeb0 0b48 	vmov.f64	d0, d8
 80118c4:	f000 fe44 	bl	8012550 <_dtoa_r>
 80118c8:	2d47      	cmp	r5, #71	; 0x47
 80118ca:	d101      	bne.n	80118d0 <__cvt+0x56>
 80118cc:	07fb      	lsls	r3, r7, #31
 80118ce:	d51a      	bpl.n	8011906 <__cvt+0x8c>
 80118d0:	2d46      	cmp	r5, #70	; 0x46
 80118d2:	eb00 0204 	add.w	r2, r0, r4
 80118d6:	d10c      	bne.n	80118f2 <__cvt+0x78>
 80118d8:	7803      	ldrb	r3, [r0, #0]
 80118da:	2b30      	cmp	r3, #48	; 0x30
 80118dc:	d107      	bne.n	80118ee <__cvt+0x74>
 80118de:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80118e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118e6:	bf1c      	itt	ne
 80118e8:	f1c4 0401 	rsbne	r4, r4, #1
 80118ec:	6034      	strne	r4, [r6, #0]
 80118ee:	6833      	ldr	r3, [r6, #0]
 80118f0:	441a      	add	r2, r3
 80118f2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80118f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118fa:	bf08      	it	eq
 80118fc:	9203      	streq	r2, [sp, #12]
 80118fe:	2130      	movs	r1, #48	; 0x30
 8011900:	9b03      	ldr	r3, [sp, #12]
 8011902:	4293      	cmp	r3, r2
 8011904:	d307      	bcc.n	8011916 <__cvt+0x9c>
 8011906:	9b03      	ldr	r3, [sp, #12]
 8011908:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801190a:	1a1b      	subs	r3, r3, r0
 801190c:	6013      	str	r3, [r2, #0]
 801190e:	b005      	add	sp, #20
 8011910:	ecbd 8b02 	vpop	{d8}
 8011914:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011916:	1c5c      	adds	r4, r3, #1
 8011918:	9403      	str	r4, [sp, #12]
 801191a:	7019      	strb	r1, [r3, #0]
 801191c:	e7f0      	b.n	8011900 <__cvt+0x86>

0801191e <__exponent>:
 801191e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011920:	4603      	mov	r3, r0
 8011922:	2900      	cmp	r1, #0
 8011924:	bfb8      	it	lt
 8011926:	4249      	neglt	r1, r1
 8011928:	f803 2b02 	strb.w	r2, [r3], #2
 801192c:	bfb4      	ite	lt
 801192e:	222d      	movlt	r2, #45	; 0x2d
 8011930:	222b      	movge	r2, #43	; 0x2b
 8011932:	2909      	cmp	r1, #9
 8011934:	7042      	strb	r2, [r0, #1]
 8011936:	dd2a      	ble.n	801198e <__exponent+0x70>
 8011938:	f10d 0207 	add.w	r2, sp, #7
 801193c:	4617      	mov	r7, r2
 801193e:	260a      	movs	r6, #10
 8011940:	4694      	mov	ip, r2
 8011942:	fb91 f5f6 	sdiv	r5, r1, r6
 8011946:	fb06 1415 	mls	r4, r6, r5, r1
 801194a:	3430      	adds	r4, #48	; 0x30
 801194c:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8011950:	460c      	mov	r4, r1
 8011952:	2c63      	cmp	r4, #99	; 0x63
 8011954:	f102 32ff 	add.w	r2, r2, #4294967295
 8011958:	4629      	mov	r1, r5
 801195a:	dcf1      	bgt.n	8011940 <__exponent+0x22>
 801195c:	3130      	adds	r1, #48	; 0x30
 801195e:	f1ac 0402 	sub.w	r4, ip, #2
 8011962:	f802 1c01 	strb.w	r1, [r2, #-1]
 8011966:	1c41      	adds	r1, r0, #1
 8011968:	4622      	mov	r2, r4
 801196a:	42ba      	cmp	r2, r7
 801196c:	d30a      	bcc.n	8011984 <__exponent+0x66>
 801196e:	f10d 0209 	add.w	r2, sp, #9
 8011972:	eba2 020c 	sub.w	r2, r2, ip
 8011976:	42bc      	cmp	r4, r7
 8011978:	bf88      	it	hi
 801197a:	2200      	movhi	r2, #0
 801197c:	4413      	add	r3, r2
 801197e:	1a18      	subs	r0, r3, r0
 8011980:	b003      	add	sp, #12
 8011982:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011984:	f812 5b01 	ldrb.w	r5, [r2], #1
 8011988:	f801 5f01 	strb.w	r5, [r1, #1]!
 801198c:	e7ed      	b.n	801196a <__exponent+0x4c>
 801198e:	2330      	movs	r3, #48	; 0x30
 8011990:	3130      	adds	r1, #48	; 0x30
 8011992:	7083      	strb	r3, [r0, #2]
 8011994:	70c1      	strb	r1, [r0, #3]
 8011996:	1d03      	adds	r3, r0, #4
 8011998:	e7f1      	b.n	801197e <__exponent+0x60>
 801199a:	0000      	movs	r0, r0
 801199c:	0000      	movs	r0, r0
	...

080119a0 <_printf_float>:
 80119a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119a4:	b08b      	sub	sp, #44	; 0x2c
 80119a6:	460c      	mov	r4, r1
 80119a8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80119ac:	4616      	mov	r6, r2
 80119ae:	461f      	mov	r7, r3
 80119b0:	4605      	mov	r5, r0
 80119b2:	f000 fcbf 	bl	8012334 <_localeconv_r>
 80119b6:	f8d0 b000 	ldr.w	fp, [r0]
 80119ba:	4658      	mov	r0, fp
 80119bc:	f7ee fce0 	bl	8000380 <strlen>
 80119c0:	2300      	movs	r3, #0
 80119c2:	9308      	str	r3, [sp, #32]
 80119c4:	f8d8 3000 	ldr.w	r3, [r8]
 80119c8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80119cc:	6822      	ldr	r2, [r4, #0]
 80119ce:	3307      	adds	r3, #7
 80119d0:	f023 0307 	bic.w	r3, r3, #7
 80119d4:	f103 0108 	add.w	r1, r3, #8
 80119d8:	f8c8 1000 	str.w	r1, [r8]
 80119dc:	ed93 0b00 	vldr	d0, [r3]
 80119e0:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8011c40 <_printf_float+0x2a0>
 80119e4:	eeb0 7bc0 	vabs.f64	d7, d0
 80119e8:	eeb4 7b46 	vcmp.f64	d7, d6
 80119ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119f0:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 80119f4:	4682      	mov	sl, r0
 80119f6:	dd24      	ble.n	8011a42 <_printf_float+0xa2>
 80119f8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80119fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a00:	d502      	bpl.n	8011a08 <_printf_float+0x68>
 8011a02:	232d      	movs	r3, #45	; 0x2d
 8011a04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011a08:	498f      	ldr	r1, [pc, #572]	; (8011c48 <_printf_float+0x2a8>)
 8011a0a:	4b90      	ldr	r3, [pc, #576]	; (8011c4c <_printf_float+0x2ac>)
 8011a0c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8011a10:	bf94      	ite	ls
 8011a12:	4688      	movls	r8, r1
 8011a14:	4698      	movhi	r8, r3
 8011a16:	2303      	movs	r3, #3
 8011a18:	6123      	str	r3, [r4, #16]
 8011a1a:	f022 0204 	bic.w	r2, r2, #4
 8011a1e:	2300      	movs	r3, #0
 8011a20:	6022      	str	r2, [r4, #0]
 8011a22:	9304      	str	r3, [sp, #16]
 8011a24:	9700      	str	r7, [sp, #0]
 8011a26:	4633      	mov	r3, r6
 8011a28:	aa09      	add	r2, sp, #36	; 0x24
 8011a2a:	4621      	mov	r1, r4
 8011a2c:	4628      	mov	r0, r5
 8011a2e:	f000 f9d1 	bl	8011dd4 <_printf_common>
 8011a32:	3001      	adds	r0, #1
 8011a34:	f040 808a 	bne.w	8011b4c <_printf_float+0x1ac>
 8011a38:	f04f 30ff 	mov.w	r0, #4294967295
 8011a3c:	b00b      	add	sp, #44	; 0x2c
 8011a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a42:	eeb4 0b40 	vcmp.f64	d0, d0
 8011a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a4a:	d709      	bvc.n	8011a60 <_printf_float+0xc0>
 8011a4c:	ee10 3a90 	vmov	r3, s1
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	bfbc      	itt	lt
 8011a54:	232d      	movlt	r3, #45	; 0x2d
 8011a56:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011a5a:	497d      	ldr	r1, [pc, #500]	; (8011c50 <_printf_float+0x2b0>)
 8011a5c:	4b7d      	ldr	r3, [pc, #500]	; (8011c54 <_printf_float+0x2b4>)
 8011a5e:	e7d5      	b.n	8011a0c <_printf_float+0x6c>
 8011a60:	6863      	ldr	r3, [r4, #4]
 8011a62:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8011a66:	9104      	str	r1, [sp, #16]
 8011a68:	1c59      	adds	r1, r3, #1
 8011a6a:	d13c      	bne.n	8011ae6 <_printf_float+0x146>
 8011a6c:	2306      	movs	r3, #6
 8011a6e:	6063      	str	r3, [r4, #4]
 8011a70:	2300      	movs	r3, #0
 8011a72:	9303      	str	r3, [sp, #12]
 8011a74:	ab08      	add	r3, sp, #32
 8011a76:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8011a7a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011a7e:	ab07      	add	r3, sp, #28
 8011a80:	6861      	ldr	r1, [r4, #4]
 8011a82:	9300      	str	r3, [sp, #0]
 8011a84:	6022      	str	r2, [r4, #0]
 8011a86:	f10d 031b 	add.w	r3, sp, #27
 8011a8a:	4628      	mov	r0, r5
 8011a8c:	f7ff fef5 	bl	801187a <__cvt>
 8011a90:	9b04      	ldr	r3, [sp, #16]
 8011a92:	9907      	ldr	r1, [sp, #28]
 8011a94:	2b47      	cmp	r3, #71	; 0x47
 8011a96:	4680      	mov	r8, r0
 8011a98:	d108      	bne.n	8011aac <_printf_float+0x10c>
 8011a9a:	1cc8      	adds	r0, r1, #3
 8011a9c:	db02      	blt.n	8011aa4 <_printf_float+0x104>
 8011a9e:	6863      	ldr	r3, [r4, #4]
 8011aa0:	4299      	cmp	r1, r3
 8011aa2:	dd41      	ble.n	8011b28 <_printf_float+0x188>
 8011aa4:	f1a9 0902 	sub.w	r9, r9, #2
 8011aa8:	fa5f f989 	uxtb.w	r9, r9
 8011aac:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011ab0:	d820      	bhi.n	8011af4 <_printf_float+0x154>
 8011ab2:	3901      	subs	r1, #1
 8011ab4:	464a      	mov	r2, r9
 8011ab6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011aba:	9107      	str	r1, [sp, #28]
 8011abc:	f7ff ff2f 	bl	801191e <__exponent>
 8011ac0:	9a08      	ldr	r2, [sp, #32]
 8011ac2:	9004      	str	r0, [sp, #16]
 8011ac4:	1813      	adds	r3, r2, r0
 8011ac6:	2a01      	cmp	r2, #1
 8011ac8:	6123      	str	r3, [r4, #16]
 8011aca:	dc02      	bgt.n	8011ad2 <_printf_float+0x132>
 8011acc:	6822      	ldr	r2, [r4, #0]
 8011ace:	07d2      	lsls	r2, r2, #31
 8011ad0:	d501      	bpl.n	8011ad6 <_printf_float+0x136>
 8011ad2:	3301      	adds	r3, #1
 8011ad4:	6123      	str	r3, [r4, #16]
 8011ad6:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d0a2      	beq.n	8011a24 <_printf_float+0x84>
 8011ade:	232d      	movs	r3, #45	; 0x2d
 8011ae0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011ae4:	e79e      	b.n	8011a24 <_printf_float+0x84>
 8011ae6:	9904      	ldr	r1, [sp, #16]
 8011ae8:	2947      	cmp	r1, #71	; 0x47
 8011aea:	d1c1      	bne.n	8011a70 <_printf_float+0xd0>
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d1bf      	bne.n	8011a70 <_printf_float+0xd0>
 8011af0:	2301      	movs	r3, #1
 8011af2:	e7bc      	b.n	8011a6e <_printf_float+0xce>
 8011af4:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8011af8:	d118      	bne.n	8011b2c <_printf_float+0x18c>
 8011afa:	2900      	cmp	r1, #0
 8011afc:	6863      	ldr	r3, [r4, #4]
 8011afe:	dd0b      	ble.n	8011b18 <_printf_float+0x178>
 8011b00:	6121      	str	r1, [r4, #16]
 8011b02:	b913      	cbnz	r3, 8011b0a <_printf_float+0x16a>
 8011b04:	6822      	ldr	r2, [r4, #0]
 8011b06:	07d0      	lsls	r0, r2, #31
 8011b08:	d502      	bpl.n	8011b10 <_printf_float+0x170>
 8011b0a:	3301      	adds	r3, #1
 8011b0c:	440b      	add	r3, r1
 8011b0e:	6123      	str	r3, [r4, #16]
 8011b10:	2300      	movs	r3, #0
 8011b12:	65a1      	str	r1, [r4, #88]	; 0x58
 8011b14:	9304      	str	r3, [sp, #16]
 8011b16:	e7de      	b.n	8011ad6 <_printf_float+0x136>
 8011b18:	b913      	cbnz	r3, 8011b20 <_printf_float+0x180>
 8011b1a:	6822      	ldr	r2, [r4, #0]
 8011b1c:	07d2      	lsls	r2, r2, #31
 8011b1e:	d501      	bpl.n	8011b24 <_printf_float+0x184>
 8011b20:	3302      	adds	r3, #2
 8011b22:	e7f4      	b.n	8011b0e <_printf_float+0x16e>
 8011b24:	2301      	movs	r3, #1
 8011b26:	e7f2      	b.n	8011b0e <_printf_float+0x16e>
 8011b28:	f04f 0967 	mov.w	r9, #103	; 0x67
 8011b2c:	9b08      	ldr	r3, [sp, #32]
 8011b2e:	4299      	cmp	r1, r3
 8011b30:	db05      	blt.n	8011b3e <_printf_float+0x19e>
 8011b32:	6823      	ldr	r3, [r4, #0]
 8011b34:	6121      	str	r1, [r4, #16]
 8011b36:	07d8      	lsls	r0, r3, #31
 8011b38:	d5ea      	bpl.n	8011b10 <_printf_float+0x170>
 8011b3a:	1c4b      	adds	r3, r1, #1
 8011b3c:	e7e7      	b.n	8011b0e <_printf_float+0x16e>
 8011b3e:	2900      	cmp	r1, #0
 8011b40:	bfd4      	ite	le
 8011b42:	f1c1 0202 	rsble	r2, r1, #2
 8011b46:	2201      	movgt	r2, #1
 8011b48:	4413      	add	r3, r2
 8011b4a:	e7e0      	b.n	8011b0e <_printf_float+0x16e>
 8011b4c:	6823      	ldr	r3, [r4, #0]
 8011b4e:	055a      	lsls	r2, r3, #21
 8011b50:	d407      	bmi.n	8011b62 <_printf_float+0x1c2>
 8011b52:	6923      	ldr	r3, [r4, #16]
 8011b54:	4642      	mov	r2, r8
 8011b56:	4631      	mov	r1, r6
 8011b58:	4628      	mov	r0, r5
 8011b5a:	47b8      	blx	r7
 8011b5c:	3001      	adds	r0, #1
 8011b5e:	d12a      	bne.n	8011bb6 <_printf_float+0x216>
 8011b60:	e76a      	b.n	8011a38 <_printf_float+0x98>
 8011b62:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011b66:	f240 80e0 	bls.w	8011d2a <_printf_float+0x38a>
 8011b6a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8011b6e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b76:	d133      	bne.n	8011be0 <_printf_float+0x240>
 8011b78:	4a37      	ldr	r2, [pc, #220]	; (8011c58 <_printf_float+0x2b8>)
 8011b7a:	2301      	movs	r3, #1
 8011b7c:	4631      	mov	r1, r6
 8011b7e:	4628      	mov	r0, r5
 8011b80:	47b8      	blx	r7
 8011b82:	3001      	adds	r0, #1
 8011b84:	f43f af58 	beq.w	8011a38 <_printf_float+0x98>
 8011b88:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011b8c:	429a      	cmp	r2, r3
 8011b8e:	db02      	blt.n	8011b96 <_printf_float+0x1f6>
 8011b90:	6823      	ldr	r3, [r4, #0]
 8011b92:	07d8      	lsls	r0, r3, #31
 8011b94:	d50f      	bpl.n	8011bb6 <_printf_float+0x216>
 8011b96:	4653      	mov	r3, sl
 8011b98:	465a      	mov	r2, fp
 8011b9a:	4631      	mov	r1, r6
 8011b9c:	4628      	mov	r0, r5
 8011b9e:	47b8      	blx	r7
 8011ba0:	3001      	adds	r0, #1
 8011ba2:	f43f af49 	beq.w	8011a38 <_printf_float+0x98>
 8011ba6:	f04f 0800 	mov.w	r8, #0
 8011baa:	f104 091a 	add.w	r9, r4, #26
 8011bae:	9b08      	ldr	r3, [sp, #32]
 8011bb0:	3b01      	subs	r3, #1
 8011bb2:	4543      	cmp	r3, r8
 8011bb4:	dc09      	bgt.n	8011bca <_printf_float+0x22a>
 8011bb6:	6823      	ldr	r3, [r4, #0]
 8011bb8:	079b      	lsls	r3, r3, #30
 8011bba:	f100 8106 	bmi.w	8011dca <_printf_float+0x42a>
 8011bbe:	68e0      	ldr	r0, [r4, #12]
 8011bc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011bc2:	4298      	cmp	r0, r3
 8011bc4:	bfb8      	it	lt
 8011bc6:	4618      	movlt	r0, r3
 8011bc8:	e738      	b.n	8011a3c <_printf_float+0x9c>
 8011bca:	2301      	movs	r3, #1
 8011bcc:	464a      	mov	r2, r9
 8011bce:	4631      	mov	r1, r6
 8011bd0:	4628      	mov	r0, r5
 8011bd2:	47b8      	blx	r7
 8011bd4:	3001      	adds	r0, #1
 8011bd6:	f43f af2f 	beq.w	8011a38 <_printf_float+0x98>
 8011bda:	f108 0801 	add.w	r8, r8, #1
 8011bde:	e7e6      	b.n	8011bae <_printf_float+0x20e>
 8011be0:	9b07      	ldr	r3, [sp, #28]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	dc3a      	bgt.n	8011c5c <_printf_float+0x2bc>
 8011be6:	4a1c      	ldr	r2, [pc, #112]	; (8011c58 <_printf_float+0x2b8>)
 8011be8:	2301      	movs	r3, #1
 8011bea:	4631      	mov	r1, r6
 8011bec:	4628      	mov	r0, r5
 8011bee:	47b8      	blx	r7
 8011bf0:	3001      	adds	r0, #1
 8011bf2:	f43f af21 	beq.w	8011a38 <_printf_float+0x98>
 8011bf6:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8011bfa:	4313      	orrs	r3, r2
 8011bfc:	d102      	bne.n	8011c04 <_printf_float+0x264>
 8011bfe:	6823      	ldr	r3, [r4, #0]
 8011c00:	07d9      	lsls	r1, r3, #31
 8011c02:	d5d8      	bpl.n	8011bb6 <_printf_float+0x216>
 8011c04:	4653      	mov	r3, sl
 8011c06:	465a      	mov	r2, fp
 8011c08:	4631      	mov	r1, r6
 8011c0a:	4628      	mov	r0, r5
 8011c0c:	47b8      	blx	r7
 8011c0e:	3001      	adds	r0, #1
 8011c10:	f43f af12 	beq.w	8011a38 <_printf_float+0x98>
 8011c14:	f04f 0900 	mov.w	r9, #0
 8011c18:	f104 0a1a 	add.w	sl, r4, #26
 8011c1c:	9b07      	ldr	r3, [sp, #28]
 8011c1e:	425b      	negs	r3, r3
 8011c20:	454b      	cmp	r3, r9
 8011c22:	dc01      	bgt.n	8011c28 <_printf_float+0x288>
 8011c24:	9b08      	ldr	r3, [sp, #32]
 8011c26:	e795      	b.n	8011b54 <_printf_float+0x1b4>
 8011c28:	2301      	movs	r3, #1
 8011c2a:	4652      	mov	r2, sl
 8011c2c:	4631      	mov	r1, r6
 8011c2e:	4628      	mov	r0, r5
 8011c30:	47b8      	blx	r7
 8011c32:	3001      	adds	r0, #1
 8011c34:	f43f af00 	beq.w	8011a38 <_printf_float+0x98>
 8011c38:	f109 0901 	add.w	r9, r9, #1
 8011c3c:	e7ee      	b.n	8011c1c <_printf_float+0x27c>
 8011c3e:	bf00      	nop
 8011c40:	ffffffff 	.word	0xffffffff
 8011c44:	7fefffff 	.word	0x7fefffff
 8011c48:	08014540 	.word	0x08014540
 8011c4c:	08014544 	.word	0x08014544
 8011c50:	08014548 	.word	0x08014548
 8011c54:	0801454c 	.word	0x0801454c
 8011c58:	08014550 	.word	0x08014550
 8011c5c:	9a08      	ldr	r2, [sp, #32]
 8011c5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011c60:	429a      	cmp	r2, r3
 8011c62:	bfa8      	it	ge
 8011c64:	461a      	movge	r2, r3
 8011c66:	2a00      	cmp	r2, #0
 8011c68:	4691      	mov	r9, r2
 8011c6a:	dc38      	bgt.n	8011cde <_printf_float+0x33e>
 8011c6c:	2300      	movs	r3, #0
 8011c6e:	9305      	str	r3, [sp, #20]
 8011c70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011c74:	f104 021a 	add.w	r2, r4, #26
 8011c78:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011c7a:	9905      	ldr	r1, [sp, #20]
 8011c7c:	9304      	str	r3, [sp, #16]
 8011c7e:	eba3 0309 	sub.w	r3, r3, r9
 8011c82:	428b      	cmp	r3, r1
 8011c84:	dc33      	bgt.n	8011cee <_printf_float+0x34e>
 8011c86:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011c8a:	429a      	cmp	r2, r3
 8011c8c:	db3c      	blt.n	8011d08 <_printf_float+0x368>
 8011c8e:	6823      	ldr	r3, [r4, #0]
 8011c90:	07da      	lsls	r2, r3, #31
 8011c92:	d439      	bmi.n	8011d08 <_printf_float+0x368>
 8011c94:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8011c98:	eba2 0903 	sub.w	r9, r2, r3
 8011c9c:	9b04      	ldr	r3, [sp, #16]
 8011c9e:	1ad2      	subs	r2, r2, r3
 8011ca0:	4591      	cmp	r9, r2
 8011ca2:	bfa8      	it	ge
 8011ca4:	4691      	movge	r9, r2
 8011ca6:	f1b9 0f00 	cmp.w	r9, #0
 8011caa:	dc35      	bgt.n	8011d18 <_printf_float+0x378>
 8011cac:	f04f 0800 	mov.w	r8, #0
 8011cb0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011cb4:	f104 0a1a 	add.w	sl, r4, #26
 8011cb8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011cbc:	1a9b      	subs	r3, r3, r2
 8011cbe:	eba3 0309 	sub.w	r3, r3, r9
 8011cc2:	4543      	cmp	r3, r8
 8011cc4:	f77f af77 	ble.w	8011bb6 <_printf_float+0x216>
 8011cc8:	2301      	movs	r3, #1
 8011cca:	4652      	mov	r2, sl
 8011ccc:	4631      	mov	r1, r6
 8011cce:	4628      	mov	r0, r5
 8011cd0:	47b8      	blx	r7
 8011cd2:	3001      	adds	r0, #1
 8011cd4:	f43f aeb0 	beq.w	8011a38 <_printf_float+0x98>
 8011cd8:	f108 0801 	add.w	r8, r8, #1
 8011cdc:	e7ec      	b.n	8011cb8 <_printf_float+0x318>
 8011cde:	4613      	mov	r3, r2
 8011ce0:	4631      	mov	r1, r6
 8011ce2:	4642      	mov	r2, r8
 8011ce4:	4628      	mov	r0, r5
 8011ce6:	47b8      	blx	r7
 8011ce8:	3001      	adds	r0, #1
 8011cea:	d1bf      	bne.n	8011c6c <_printf_float+0x2cc>
 8011cec:	e6a4      	b.n	8011a38 <_printf_float+0x98>
 8011cee:	2301      	movs	r3, #1
 8011cf0:	4631      	mov	r1, r6
 8011cf2:	4628      	mov	r0, r5
 8011cf4:	9204      	str	r2, [sp, #16]
 8011cf6:	47b8      	blx	r7
 8011cf8:	3001      	adds	r0, #1
 8011cfa:	f43f ae9d 	beq.w	8011a38 <_printf_float+0x98>
 8011cfe:	9b05      	ldr	r3, [sp, #20]
 8011d00:	9a04      	ldr	r2, [sp, #16]
 8011d02:	3301      	adds	r3, #1
 8011d04:	9305      	str	r3, [sp, #20]
 8011d06:	e7b7      	b.n	8011c78 <_printf_float+0x2d8>
 8011d08:	4653      	mov	r3, sl
 8011d0a:	465a      	mov	r2, fp
 8011d0c:	4631      	mov	r1, r6
 8011d0e:	4628      	mov	r0, r5
 8011d10:	47b8      	blx	r7
 8011d12:	3001      	adds	r0, #1
 8011d14:	d1be      	bne.n	8011c94 <_printf_float+0x2f4>
 8011d16:	e68f      	b.n	8011a38 <_printf_float+0x98>
 8011d18:	9a04      	ldr	r2, [sp, #16]
 8011d1a:	464b      	mov	r3, r9
 8011d1c:	4442      	add	r2, r8
 8011d1e:	4631      	mov	r1, r6
 8011d20:	4628      	mov	r0, r5
 8011d22:	47b8      	blx	r7
 8011d24:	3001      	adds	r0, #1
 8011d26:	d1c1      	bne.n	8011cac <_printf_float+0x30c>
 8011d28:	e686      	b.n	8011a38 <_printf_float+0x98>
 8011d2a:	9a08      	ldr	r2, [sp, #32]
 8011d2c:	2a01      	cmp	r2, #1
 8011d2e:	dc01      	bgt.n	8011d34 <_printf_float+0x394>
 8011d30:	07db      	lsls	r3, r3, #31
 8011d32:	d537      	bpl.n	8011da4 <_printf_float+0x404>
 8011d34:	2301      	movs	r3, #1
 8011d36:	4642      	mov	r2, r8
 8011d38:	4631      	mov	r1, r6
 8011d3a:	4628      	mov	r0, r5
 8011d3c:	47b8      	blx	r7
 8011d3e:	3001      	adds	r0, #1
 8011d40:	f43f ae7a 	beq.w	8011a38 <_printf_float+0x98>
 8011d44:	4653      	mov	r3, sl
 8011d46:	465a      	mov	r2, fp
 8011d48:	4631      	mov	r1, r6
 8011d4a:	4628      	mov	r0, r5
 8011d4c:	47b8      	blx	r7
 8011d4e:	3001      	adds	r0, #1
 8011d50:	f43f ae72 	beq.w	8011a38 <_printf_float+0x98>
 8011d54:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8011d58:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d60:	9b08      	ldr	r3, [sp, #32]
 8011d62:	d01a      	beq.n	8011d9a <_printf_float+0x3fa>
 8011d64:	3b01      	subs	r3, #1
 8011d66:	f108 0201 	add.w	r2, r8, #1
 8011d6a:	4631      	mov	r1, r6
 8011d6c:	4628      	mov	r0, r5
 8011d6e:	47b8      	blx	r7
 8011d70:	3001      	adds	r0, #1
 8011d72:	d10e      	bne.n	8011d92 <_printf_float+0x3f2>
 8011d74:	e660      	b.n	8011a38 <_printf_float+0x98>
 8011d76:	2301      	movs	r3, #1
 8011d78:	464a      	mov	r2, r9
 8011d7a:	4631      	mov	r1, r6
 8011d7c:	4628      	mov	r0, r5
 8011d7e:	47b8      	blx	r7
 8011d80:	3001      	adds	r0, #1
 8011d82:	f43f ae59 	beq.w	8011a38 <_printf_float+0x98>
 8011d86:	f108 0801 	add.w	r8, r8, #1
 8011d8a:	9b08      	ldr	r3, [sp, #32]
 8011d8c:	3b01      	subs	r3, #1
 8011d8e:	4543      	cmp	r3, r8
 8011d90:	dcf1      	bgt.n	8011d76 <_printf_float+0x3d6>
 8011d92:	9b04      	ldr	r3, [sp, #16]
 8011d94:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011d98:	e6dd      	b.n	8011b56 <_printf_float+0x1b6>
 8011d9a:	f04f 0800 	mov.w	r8, #0
 8011d9e:	f104 091a 	add.w	r9, r4, #26
 8011da2:	e7f2      	b.n	8011d8a <_printf_float+0x3ea>
 8011da4:	2301      	movs	r3, #1
 8011da6:	4642      	mov	r2, r8
 8011da8:	e7df      	b.n	8011d6a <_printf_float+0x3ca>
 8011daa:	2301      	movs	r3, #1
 8011dac:	464a      	mov	r2, r9
 8011dae:	4631      	mov	r1, r6
 8011db0:	4628      	mov	r0, r5
 8011db2:	47b8      	blx	r7
 8011db4:	3001      	adds	r0, #1
 8011db6:	f43f ae3f 	beq.w	8011a38 <_printf_float+0x98>
 8011dba:	f108 0801 	add.w	r8, r8, #1
 8011dbe:	68e3      	ldr	r3, [r4, #12]
 8011dc0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011dc2:	1a5b      	subs	r3, r3, r1
 8011dc4:	4543      	cmp	r3, r8
 8011dc6:	dcf0      	bgt.n	8011daa <_printf_float+0x40a>
 8011dc8:	e6f9      	b.n	8011bbe <_printf_float+0x21e>
 8011dca:	f04f 0800 	mov.w	r8, #0
 8011dce:	f104 0919 	add.w	r9, r4, #25
 8011dd2:	e7f4      	b.n	8011dbe <_printf_float+0x41e>

08011dd4 <_printf_common>:
 8011dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011dd8:	4616      	mov	r6, r2
 8011dda:	4699      	mov	r9, r3
 8011ddc:	688a      	ldr	r2, [r1, #8]
 8011dde:	690b      	ldr	r3, [r1, #16]
 8011de0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011de4:	4293      	cmp	r3, r2
 8011de6:	bfb8      	it	lt
 8011de8:	4613      	movlt	r3, r2
 8011dea:	6033      	str	r3, [r6, #0]
 8011dec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011df0:	4607      	mov	r7, r0
 8011df2:	460c      	mov	r4, r1
 8011df4:	b10a      	cbz	r2, 8011dfa <_printf_common+0x26>
 8011df6:	3301      	adds	r3, #1
 8011df8:	6033      	str	r3, [r6, #0]
 8011dfa:	6823      	ldr	r3, [r4, #0]
 8011dfc:	0699      	lsls	r1, r3, #26
 8011dfe:	bf42      	ittt	mi
 8011e00:	6833      	ldrmi	r3, [r6, #0]
 8011e02:	3302      	addmi	r3, #2
 8011e04:	6033      	strmi	r3, [r6, #0]
 8011e06:	6825      	ldr	r5, [r4, #0]
 8011e08:	f015 0506 	ands.w	r5, r5, #6
 8011e0c:	d106      	bne.n	8011e1c <_printf_common+0x48>
 8011e0e:	f104 0a19 	add.w	sl, r4, #25
 8011e12:	68e3      	ldr	r3, [r4, #12]
 8011e14:	6832      	ldr	r2, [r6, #0]
 8011e16:	1a9b      	subs	r3, r3, r2
 8011e18:	42ab      	cmp	r3, r5
 8011e1a:	dc26      	bgt.n	8011e6a <_printf_common+0x96>
 8011e1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011e20:	1e13      	subs	r3, r2, #0
 8011e22:	6822      	ldr	r2, [r4, #0]
 8011e24:	bf18      	it	ne
 8011e26:	2301      	movne	r3, #1
 8011e28:	0692      	lsls	r2, r2, #26
 8011e2a:	d42b      	bmi.n	8011e84 <_printf_common+0xb0>
 8011e2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011e30:	4649      	mov	r1, r9
 8011e32:	4638      	mov	r0, r7
 8011e34:	47c0      	blx	r8
 8011e36:	3001      	adds	r0, #1
 8011e38:	d01e      	beq.n	8011e78 <_printf_common+0xa4>
 8011e3a:	6823      	ldr	r3, [r4, #0]
 8011e3c:	6922      	ldr	r2, [r4, #16]
 8011e3e:	f003 0306 	and.w	r3, r3, #6
 8011e42:	2b04      	cmp	r3, #4
 8011e44:	bf02      	ittt	eq
 8011e46:	68e5      	ldreq	r5, [r4, #12]
 8011e48:	6833      	ldreq	r3, [r6, #0]
 8011e4a:	1aed      	subeq	r5, r5, r3
 8011e4c:	68a3      	ldr	r3, [r4, #8]
 8011e4e:	bf0c      	ite	eq
 8011e50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011e54:	2500      	movne	r5, #0
 8011e56:	4293      	cmp	r3, r2
 8011e58:	bfc4      	itt	gt
 8011e5a:	1a9b      	subgt	r3, r3, r2
 8011e5c:	18ed      	addgt	r5, r5, r3
 8011e5e:	2600      	movs	r6, #0
 8011e60:	341a      	adds	r4, #26
 8011e62:	42b5      	cmp	r5, r6
 8011e64:	d11a      	bne.n	8011e9c <_printf_common+0xc8>
 8011e66:	2000      	movs	r0, #0
 8011e68:	e008      	b.n	8011e7c <_printf_common+0xa8>
 8011e6a:	2301      	movs	r3, #1
 8011e6c:	4652      	mov	r2, sl
 8011e6e:	4649      	mov	r1, r9
 8011e70:	4638      	mov	r0, r7
 8011e72:	47c0      	blx	r8
 8011e74:	3001      	adds	r0, #1
 8011e76:	d103      	bne.n	8011e80 <_printf_common+0xac>
 8011e78:	f04f 30ff 	mov.w	r0, #4294967295
 8011e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e80:	3501      	adds	r5, #1
 8011e82:	e7c6      	b.n	8011e12 <_printf_common+0x3e>
 8011e84:	18e1      	adds	r1, r4, r3
 8011e86:	1c5a      	adds	r2, r3, #1
 8011e88:	2030      	movs	r0, #48	; 0x30
 8011e8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011e8e:	4422      	add	r2, r4
 8011e90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011e94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011e98:	3302      	adds	r3, #2
 8011e9a:	e7c7      	b.n	8011e2c <_printf_common+0x58>
 8011e9c:	2301      	movs	r3, #1
 8011e9e:	4622      	mov	r2, r4
 8011ea0:	4649      	mov	r1, r9
 8011ea2:	4638      	mov	r0, r7
 8011ea4:	47c0      	blx	r8
 8011ea6:	3001      	adds	r0, #1
 8011ea8:	d0e6      	beq.n	8011e78 <_printf_common+0xa4>
 8011eaa:	3601      	adds	r6, #1
 8011eac:	e7d9      	b.n	8011e62 <_printf_common+0x8e>
	...

08011eb0 <_printf_i>:
 8011eb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011eb4:	7e0f      	ldrb	r7, [r1, #24]
 8011eb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011eb8:	2f78      	cmp	r7, #120	; 0x78
 8011eba:	4691      	mov	r9, r2
 8011ebc:	4680      	mov	r8, r0
 8011ebe:	460c      	mov	r4, r1
 8011ec0:	469a      	mov	sl, r3
 8011ec2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011ec6:	d807      	bhi.n	8011ed8 <_printf_i+0x28>
 8011ec8:	2f62      	cmp	r7, #98	; 0x62
 8011eca:	d80a      	bhi.n	8011ee2 <_printf_i+0x32>
 8011ecc:	2f00      	cmp	r7, #0
 8011ece:	f000 80d4 	beq.w	801207a <_printf_i+0x1ca>
 8011ed2:	2f58      	cmp	r7, #88	; 0x58
 8011ed4:	f000 80c0 	beq.w	8012058 <_printf_i+0x1a8>
 8011ed8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011edc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011ee0:	e03a      	b.n	8011f58 <_printf_i+0xa8>
 8011ee2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011ee6:	2b15      	cmp	r3, #21
 8011ee8:	d8f6      	bhi.n	8011ed8 <_printf_i+0x28>
 8011eea:	a101      	add	r1, pc, #4	; (adr r1, 8011ef0 <_printf_i+0x40>)
 8011eec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011ef0:	08011f49 	.word	0x08011f49
 8011ef4:	08011f5d 	.word	0x08011f5d
 8011ef8:	08011ed9 	.word	0x08011ed9
 8011efc:	08011ed9 	.word	0x08011ed9
 8011f00:	08011ed9 	.word	0x08011ed9
 8011f04:	08011ed9 	.word	0x08011ed9
 8011f08:	08011f5d 	.word	0x08011f5d
 8011f0c:	08011ed9 	.word	0x08011ed9
 8011f10:	08011ed9 	.word	0x08011ed9
 8011f14:	08011ed9 	.word	0x08011ed9
 8011f18:	08011ed9 	.word	0x08011ed9
 8011f1c:	08012061 	.word	0x08012061
 8011f20:	08011f89 	.word	0x08011f89
 8011f24:	0801201b 	.word	0x0801201b
 8011f28:	08011ed9 	.word	0x08011ed9
 8011f2c:	08011ed9 	.word	0x08011ed9
 8011f30:	08012083 	.word	0x08012083
 8011f34:	08011ed9 	.word	0x08011ed9
 8011f38:	08011f89 	.word	0x08011f89
 8011f3c:	08011ed9 	.word	0x08011ed9
 8011f40:	08011ed9 	.word	0x08011ed9
 8011f44:	08012023 	.word	0x08012023
 8011f48:	682b      	ldr	r3, [r5, #0]
 8011f4a:	1d1a      	adds	r2, r3, #4
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	602a      	str	r2, [r5, #0]
 8011f50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011f54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011f58:	2301      	movs	r3, #1
 8011f5a:	e09f      	b.n	801209c <_printf_i+0x1ec>
 8011f5c:	6820      	ldr	r0, [r4, #0]
 8011f5e:	682b      	ldr	r3, [r5, #0]
 8011f60:	0607      	lsls	r7, r0, #24
 8011f62:	f103 0104 	add.w	r1, r3, #4
 8011f66:	6029      	str	r1, [r5, #0]
 8011f68:	d501      	bpl.n	8011f6e <_printf_i+0xbe>
 8011f6a:	681e      	ldr	r6, [r3, #0]
 8011f6c:	e003      	b.n	8011f76 <_printf_i+0xc6>
 8011f6e:	0646      	lsls	r6, r0, #25
 8011f70:	d5fb      	bpl.n	8011f6a <_printf_i+0xba>
 8011f72:	f9b3 6000 	ldrsh.w	r6, [r3]
 8011f76:	2e00      	cmp	r6, #0
 8011f78:	da03      	bge.n	8011f82 <_printf_i+0xd2>
 8011f7a:	232d      	movs	r3, #45	; 0x2d
 8011f7c:	4276      	negs	r6, r6
 8011f7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011f82:	485a      	ldr	r0, [pc, #360]	; (80120ec <_printf_i+0x23c>)
 8011f84:	230a      	movs	r3, #10
 8011f86:	e012      	b.n	8011fae <_printf_i+0xfe>
 8011f88:	682b      	ldr	r3, [r5, #0]
 8011f8a:	6820      	ldr	r0, [r4, #0]
 8011f8c:	1d19      	adds	r1, r3, #4
 8011f8e:	6029      	str	r1, [r5, #0]
 8011f90:	0605      	lsls	r5, r0, #24
 8011f92:	d501      	bpl.n	8011f98 <_printf_i+0xe8>
 8011f94:	681e      	ldr	r6, [r3, #0]
 8011f96:	e002      	b.n	8011f9e <_printf_i+0xee>
 8011f98:	0641      	lsls	r1, r0, #25
 8011f9a:	d5fb      	bpl.n	8011f94 <_printf_i+0xe4>
 8011f9c:	881e      	ldrh	r6, [r3, #0]
 8011f9e:	4853      	ldr	r0, [pc, #332]	; (80120ec <_printf_i+0x23c>)
 8011fa0:	2f6f      	cmp	r7, #111	; 0x6f
 8011fa2:	bf0c      	ite	eq
 8011fa4:	2308      	moveq	r3, #8
 8011fa6:	230a      	movne	r3, #10
 8011fa8:	2100      	movs	r1, #0
 8011faa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011fae:	6865      	ldr	r5, [r4, #4]
 8011fb0:	60a5      	str	r5, [r4, #8]
 8011fb2:	2d00      	cmp	r5, #0
 8011fb4:	bfa2      	ittt	ge
 8011fb6:	6821      	ldrge	r1, [r4, #0]
 8011fb8:	f021 0104 	bicge.w	r1, r1, #4
 8011fbc:	6021      	strge	r1, [r4, #0]
 8011fbe:	b90e      	cbnz	r6, 8011fc4 <_printf_i+0x114>
 8011fc0:	2d00      	cmp	r5, #0
 8011fc2:	d04b      	beq.n	801205c <_printf_i+0x1ac>
 8011fc4:	4615      	mov	r5, r2
 8011fc6:	fbb6 f1f3 	udiv	r1, r6, r3
 8011fca:	fb03 6711 	mls	r7, r3, r1, r6
 8011fce:	5dc7      	ldrb	r7, [r0, r7]
 8011fd0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011fd4:	4637      	mov	r7, r6
 8011fd6:	42bb      	cmp	r3, r7
 8011fd8:	460e      	mov	r6, r1
 8011fda:	d9f4      	bls.n	8011fc6 <_printf_i+0x116>
 8011fdc:	2b08      	cmp	r3, #8
 8011fde:	d10b      	bne.n	8011ff8 <_printf_i+0x148>
 8011fe0:	6823      	ldr	r3, [r4, #0]
 8011fe2:	07de      	lsls	r6, r3, #31
 8011fe4:	d508      	bpl.n	8011ff8 <_printf_i+0x148>
 8011fe6:	6923      	ldr	r3, [r4, #16]
 8011fe8:	6861      	ldr	r1, [r4, #4]
 8011fea:	4299      	cmp	r1, r3
 8011fec:	bfde      	ittt	le
 8011fee:	2330      	movle	r3, #48	; 0x30
 8011ff0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011ff4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011ff8:	1b52      	subs	r2, r2, r5
 8011ffa:	6122      	str	r2, [r4, #16]
 8011ffc:	f8cd a000 	str.w	sl, [sp]
 8012000:	464b      	mov	r3, r9
 8012002:	aa03      	add	r2, sp, #12
 8012004:	4621      	mov	r1, r4
 8012006:	4640      	mov	r0, r8
 8012008:	f7ff fee4 	bl	8011dd4 <_printf_common>
 801200c:	3001      	adds	r0, #1
 801200e:	d14a      	bne.n	80120a6 <_printf_i+0x1f6>
 8012010:	f04f 30ff 	mov.w	r0, #4294967295
 8012014:	b004      	add	sp, #16
 8012016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801201a:	6823      	ldr	r3, [r4, #0]
 801201c:	f043 0320 	orr.w	r3, r3, #32
 8012020:	6023      	str	r3, [r4, #0]
 8012022:	4833      	ldr	r0, [pc, #204]	; (80120f0 <_printf_i+0x240>)
 8012024:	2778      	movs	r7, #120	; 0x78
 8012026:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801202a:	6823      	ldr	r3, [r4, #0]
 801202c:	6829      	ldr	r1, [r5, #0]
 801202e:	061f      	lsls	r7, r3, #24
 8012030:	f851 6b04 	ldr.w	r6, [r1], #4
 8012034:	d402      	bmi.n	801203c <_printf_i+0x18c>
 8012036:	065f      	lsls	r7, r3, #25
 8012038:	bf48      	it	mi
 801203a:	b2b6      	uxthmi	r6, r6
 801203c:	07df      	lsls	r7, r3, #31
 801203e:	bf48      	it	mi
 8012040:	f043 0320 	orrmi.w	r3, r3, #32
 8012044:	6029      	str	r1, [r5, #0]
 8012046:	bf48      	it	mi
 8012048:	6023      	strmi	r3, [r4, #0]
 801204a:	b91e      	cbnz	r6, 8012054 <_printf_i+0x1a4>
 801204c:	6823      	ldr	r3, [r4, #0]
 801204e:	f023 0320 	bic.w	r3, r3, #32
 8012052:	6023      	str	r3, [r4, #0]
 8012054:	2310      	movs	r3, #16
 8012056:	e7a7      	b.n	8011fa8 <_printf_i+0xf8>
 8012058:	4824      	ldr	r0, [pc, #144]	; (80120ec <_printf_i+0x23c>)
 801205a:	e7e4      	b.n	8012026 <_printf_i+0x176>
 801205c:	4615      	mov	r5, r2
 801205e:	e7bd      	b.n	8011fdc <_printf_i+0x12c>
 8012060:	682b      	ldr	r3, [r5, #0]
 8012062:	6826      	ldr	r6, [r4, #0]
 8012064:	6961      	ldr	r1, [r4, #20]
 8012066:	1d18      	adds	r0, r3, #4
 8012068:	6028      	str	r0, [r5, #0]
 801206a:	0635      	lsls	r5, r6, #24
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	d501      	bpl.n	8012074 <_printf_i+0x1c4>
 8012070:	6019      	str	r1, [r3, #0]
 8012072:	e002      	b.n	801207a <_printf_i+0x1ca>
 8012074:	0670      	lsls	r0, r6, #25
 8012076:	d5fb      	bpl.n	8012070 <_printf_i+0x1c0>
 8012078:	8019      	strh	r1, [r3, #0]
 801207a:	2300      	movs	r3, #0
 801207c:	6123      	str	r3, [r4, #16]
 801207e:	4615      	mov	r5, r2
 8012080:	e7bc      	b.n	8011ffc <_printf_i+0x14c>
 8012082:	682b      	ldr	r3, [r5, #0]
 8012084:	1d1a      	adds	r2, r3, #4
 8012086:	602a      	str	r2, [r5, #0]
 8012088:	681d      	ldr	r5, [r3, #0]
 801208a:	6862      	ldr	r2, [r4, #4]
 801208c:	2100      	movs	r1, #0
 801208e:	4628      	mov	r0, r5
 8012090:	f7ee f926 	bl	80002e0 <memchr>
 8012094:	b108      	cbz	r0, 801209a <_printf_i+0x1ea>
 8012096:	1b40      	subs	r0, r0, r5
 8012098:	6060      	str	r0, [r4, #4]
 801209a:	6863      	ldr	r3, [r4, #4]
 801209c:	6123      	str	r3, [r4, #16]
 801209e:	2300      	movs	r3, #0
 80120a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80120a4:	e7aa      	b.n	8011ffc <_printf_i+0x14c>
 80120a6:	6923      	ldr	r3, [r4, #16]
 80120a8:	462a      	mov	r2, r5
 80120aa:	4649      	mov	r1, r9
 80120ac:	4640      	mov	r0, r8
 80120ae:	47d0      	blx	sl
 80120b0:	3001      	adds	r0, #1
 80120b2:	d0ad      	beq.n	8012010 <_printf_i+0x160>
 80120b4:	6823      	ldr	r3, [r4, #0]
 80120b6:	079b      	lsls	r3, r3, #30
 80120b8:	d413      	bmi.n	80120e2 <_printf_i+0x232>
 80120ba:	68e0      	ldr	r0, [r4, #12]
 80120bc:	9b03      	ldr	r3, [sp, #12]
 80120be:	4298      	cmp	r0, r3
 80120c0:	bfb8      	it	lt
 80120c2:	4618      	movlt	r0, r3
 80120c4:	e7a6      	b.n	8012014 <_printf_i+0x164>
 80120c6:	2301      	movs	r3, #1
 80120c8:	4632      	mov	r2, r6
 80120ca:	4649      	mov	r1, r9
 80120cc:	4640      	mov	r0, r8
 80120ce:	47d0      	blx	sl
 80120d0:	3001      	adds	r0, #1
 80120d2:	d09d      	beq.n	8012010 <_printf_i+0x160>
 80120d4:	3501      	adds	r5, #1
 80120d6:	68e3      	ldr	r3, [r4, #12]
 80120d8:	9903      	ldr	r1, [sp, #12]
 80120da:	1a5b      	subs	r3, r3, r1
 80120dc:	42ab      	cmp	r3, r5
 80120de:	dcf2      	bgt.n	80120c6 <_printf_i+0x216>
 80120e0:	e7eb      	b.n	80120ba <_printf_i+0x20a>
 80120e2:	2500      	movs	r5, #0
 80120e4:	f104 0619 	add.w	r6, r4, #25
 80120e8:	e7f5      	b.n	80120d6 <_printf_i+0x226>
 80120ea:	bf00      	nop
 80120ec:	08014552 	.word	0x08014552
 80120f0:	08014563 	.word	0x08014563

080120f4 <std>:
 80120f4:	2300      	movs	r3, #0
 80120f6:	b510      	push	{r4, lr}
 80120f8:	4604      	mov	r4, r0
 80120fa:	e9c0 3300 	strd	r3, r3, [r0]
 80120fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012102:	6083      	str	r3, [r0, #8]
 8012104:	8181      	strh	r1, [r0, #12]
 8012106:	6643      	str	r3, [r0, #100]	; 0x64
 8012108:	81c2      	strh	r2, [r0, #14]
 801210a:	6183      	str	r3, [r0, #24]
 801210c:	4619      	mov	r1, r3
 801210e:	2208      	movs	r2, #8
 8012110:	305c      	adds	r0, #92	; 0x5c
 8012112:	f000 f906 	bl	8012322 <memset>
 8012116:	4b0d      	ldr	r3, [pc, #52]	; (801214c <std+0x58>)
 8012118:	6263      	str	r3, [r4, #36]	; 0x24
 801211a:	4b0d      	ldr	r3, [pc, #52]	; (8012150 <std+0x5c>)
 801211c:	62a3      	str	r3, [r4, #40]	; 0x28
 801211e:	4b0d      	ldr	r3, [pc, #52]	; (8012154 <std+0x60>)
 8012120:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012122:	4b0d      	ldr	r3, [pc, #52]	; (8012158 <std+0x64>)
 8012124:	6323      	str	r3, [r4, #48]	; 0x30
 8012126:	4b0d      	ldr	r3, [pc, #52]	; (801215c <std+0x68>)
 8012128:	6224      	str	r4, [r4, #32]
 801212a:	429c      	cmp	r4, r3
 801212c:	d006      	beq.n	801213c <std+0x48>
 801212e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8012132:	4294      	cmp	r4, r2
 8012134:	d002      	beq.n	801213c <std+0x48>
 8012136:	33d0      	adds	r3, #208	; 0xd0
 8012138:	429c      	cmp	r4, r3
 801213a:	d105      	bne.n	8012148 <std+0x54>
 801213c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012144:	f000 b96a 	b.w	801241c <__retarget_lock_init_recursive>
 8012148:	bd10      	pop	{r4, pc}
 801214a:	bf00      	nop
 801214c:	0801229d 	.word	0x0801229d
 8012150:	080122bf 	.word	0x080122bf
 8012154:	080122f7 	.word	0x080122f7
 8012158:	0801231b 	.word	0x0801231b
 801215c:	24009b20 	.word	0x24009b20

08012160 <stdio_exit_handler>:
 8012160:	4a02      	ldr	r2, [pc, #8]	; (801216c <stdio_exit_handler+0xc>)
 8012162:	4903      	ldr	r1, [pc, #12]	; (8012170 <stdio_exit_handler+0x10>)
 8012164:	4803      	ldr	r0, [pc, #12]	; (8012174 <stdio_exit_handler+0x14>)
 8012166:	f000 b869 	b.w	801223c <_fwalk_sglue>
 801216a:	bf00      	nop
 801216c:	24000014 	.word	0x24000014
 8012170:	08013cb5 	.word	0x08013cb5
 8012174:	24000020 	.word	0x24000020

08012178 <cleanup_stdio>:
 8012178:	6841      	ldr	r1, [r0, #4]
 801217a:	4b0c      	ldr	r3, [pc, #48]	; (80121ac <cleanup_stdio+0x34>)
 801217c:	4299      	cmp	r1, r3
 801217e:	b510      	push	{r4, lr}
 8012180:	4604      	mov	r4, r0
 8012182:	d001      	beq.n	8012188 <cleanup_stdio+0x10>
 8012184:	f001 fd96 	bl	8013cb4 <_fflush_r>
 8012188:	68a1      	ldr	r1, [r4, #8]
 801218a:	4b09      	ldr	r3, [pc, #36]	; (80121b0 <cleanup_stdio+0x38>)
 801218c:	4299      	cmp	r1, r3
 801218e:	d002      	beq.n	8012196 <cleanup_stdio+0x1e>
 8012190:	4620      	mov	r0, r4
 8012192:	f001 fd8f 	bl	8013cb4 <_fflush_r>
 8012196:	68e1      	ldr	r1, [r4, #12]
 8012198:	4b06      	ldr	r3, [pc, #24]	; (80121b4 <cleanup_stdio+0x3c>)
 801219a:	4299      	cmp	r1, r3
 801219c:	d004      	beq.n	80121a8 <cleanup_stdio+0x30>
 801219e:	4620      	mov	r0, r4
 80121a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80121a4:	f001 bd86 	b.w	8013cb4 <_fflush_r>
 80121a8:	bd10      	pop	{r4, pc}
 80121aa:	bf00      	nop
 80121ac:	24009b20 	.word	0x24009b20
 80121b0:	24009b88 	.word	0x24009b88
 80121b4:	24009bf0 	.word	0x24009bf0

080121b8 <global_stdio_init.part.0>:
 80121b8:	b510      	push	{r4, lr}
 80121ba:	4b0b      	ldr	r3, [pc, #44]	; (80121e8 <global_stdio_init.part.0+0x30>)
 80121bc:	4c0b      	ldr	r4, [pc, #44]	; (80121ec <global_stdio_init.part.0+0x34>)
 80121be:	4a0c      	ldr	r2, [pc, #48]	; (80121f0 <global_stdio_init.part.0+0x38>)
 80121c0:	601a      	str	r2, [r3, #0]
 80121c2:	4620      	mov	r0, r4
 80121c4:	2200      	movs	r2, #0
 80121c6:	2104      	movs	r1, #4
 80121c8:	f7ff ff94 	bl	80120f4 <std>
 80121cc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80121d0:	2201      	movs	r2, #1
 80121d2:	2109      	movs	r1, #9
 80121d4:	f7ff ff8e 	bl	80120f4 <std>
 80121d8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80121dc:	2202      	movs	r2, #2
 80121de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80121e2:	2112      	movs	r1, #18
 80121e4:	f7ff bf86 	b.w	80120f4 <std>
 80121e8:	24009c58 	.word	0x24009c58
 80121ec:	24009b20 	.word	0x24009b20
 80121f0:	08012161 	.word	0x08012161

080121f4 <__sfp_lock_acquire>:
 80121f4:	4801      	ldr	r0, [pc, #4]	; (80121fc <__sfp_lock_acquire+0x8>)
 80121f6:	f000 b912 	b.w	801241e <__retarget_lock_acquire_recursive>
 80121fa:	bf00      	nop
 80121fc:	24009c61 	.word	0x24009c61

08012200 <__sfp_lock_release>:
 8012200:	4801      	ldr	r0, [pc, #4]	; (8012208 <__sfp_lock_release+0x8>)
 8012202:	f000 b90d 	b.w	8012420 <__retarget_lock_release_recursive>
 8012206:	bf00      	nop
 8012208:	24009c61 	.word	0x24009c61

0801220c <__sinit>:
 801220c:	b510      	push	{r4, lr}
 801220e:	4604      	mov	r4, r0
 8012210:	f7ff fff0 	bl	80121f4 <__sfp_lock_acquire>
 8012214:	6a23      	ldr	r3, [r4, #32]
 8012216:	b11b      	cbz	r3, 8012220 <__sinit+0x14>
 8012218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801221c:	f7ff bff0 	b.w	8012200 <__sfp_lock_release>
 8012220:	4b04      	ldr	r3, [pc, #16]	; (8012234 <__sinit+0x28>)
 8012222:	6223      	str	r3, [r4, #32]
 8012224:	4b04      	ldr	r3, [pc, #16]	; (8012238 <__sinit+0x2c>)
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	2b00      	cmp	r3, #0
 801222a:	d1f5      	bne.n	8012218 <__sinit+0xc>
 801222c:	f7ff ffc4 	bl	80121b8 <global_stdio_init.part.0>
 8012230:	e7f2      	b.n	8012218 <__sinit+0xc>
 8012232:	bf00      	nop
 8012234:	08012179 	.word	0x08012179
 8012238:	24009c58 	.word	0x24009c58

0801223c <_fwalk_sglue>:
 801223c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012240:	4607      	mov	r7, r0
 8012242:	4688      	mov	r8, r1
 8012244:	4614      	mov	r4, r2
 8012246:	2600      	movs	r6, #0
 8012248:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801224c:	f1b9 0901 	subs.w	r9, r9, #1
 8012250:	d505      	bpl.n	801225e <_fwalk_sglue+0x22>
 8012252:	6824      	ldr	r4, [r4, #0]
 8012254:	2c00      	cmp	r4, #0
 8012256:	d1f7      	bne.n	8012248 <_fwalk_sglue+0xc>
 8012258:	4630      	mov	r0, r6
 801225a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801225e:	89ab      	ldrh	r3, [r5, #12]
 8012260:	2b01      	cmp	r3, #1
 8012262:	d907      	bls.n	8012274 <_fwalk_sglue+0x38>
 8012264:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012268:	3301      	adds	r3, #1
 801226a:	d003      	beq.n	8012274 <_fwalk_sglue+0x38>
 801226c:	4629      	mov	r1, r5
 801226e:	4638      	mov	r0, r7
 8012270:	47c0      	blx	r8
 8012272:	4306      	orrs	r6, r0
 8012274:	3568      	adds	r5, #104	; 0x68
 8012276:	e7e9      	b.n	801224c <_fwalk_sglue+0x10>

08012278 <iprintf>:
 8012278:	b40f      	push	{r0, r1, r2, r3}
 801227a:	b507      	push	{r0, r1, r2, lr}
 801227c:	4906      	ldr	r1, [pc, #24]	; (8012298 <iprintf+0x20>)
 801227e:	ab04      	add	r3, sp, #16
 8012280:	6808      	ldr	r0, [r1, #0]
 8012282:	f853 2b04 	ldr.w	r2, [r3], #4
 8012286:	6881      	ldr	r1, [r0, #8]
 8012288:	9301      	str	r3, [sp, #4]
 801228a:	f001 fb73 	bl	8013974 <_vfiprintf_r>
 801228e:	b003      	add	sp, #12
 8012290:	f85d eb04 	ldr.w	lr, [sp], #4
 8012294:	b004      	add	sp, #16
 8012296:	4770      	bx	lr
 8012298:	2400006c 	.word	0x2400006c

0801229c <__sread>:
 801229c:	b510      	push	{r4, lr}
 801229e:	460c      	mov	r4, r1
 80122a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80122a4:	f000 f86c 	bl	8012380 <_read_r>
 80122a8:	2800      	cmp	r0, #0
 80122aa:	bfab      	itete	ge
 80122ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80122ae:	89a3      	ldrhlt	r3, [r4, #12]
 80122b0:	181b      	addge	r3, r3, r0
 80122b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80122b6:	bfac      	ite	ge
 80122b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80122ba:	81a3      	strhlt	r3, [r4, #12]
 80122bc:	bd10      	pop	{r4, pc}

080122be <__swrite>:
 80122be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122c2:	461f      	mov	r7, r3
 80122c4:	898b      	ldrh	r3, [r1, #12]
 80122c6:	05db      	lsls	r3, r3, #23
 80122c8:	4605      	mov	r5, r0
 80122ca:	460c      	mov	r4, r1
 80122cc:	4616      	mov	r6, r2
 80122ce:	d505      	bpl.n	80122dc <__swrite+0x1e>
 80122d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80122d4:	2302      	movs	r3, #2
 80122d6:	2200      	movs	r2, #0
 80122d8:	f000 f840 	bl	801235c <_lseek_r>
 80122dc:	89a3      	ldrh	r3, [r4, #12]
 80122de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80122e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80122e6:	81a3      	strh	r3, [r4, #12]
 80122e8:	4632      	mov	r2, r6
 80122ea:	463b      	mov	r3, r7
 80122ec:	4628      	mov	r0, r5
 80122ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80122f2:	f000 b857 	b.w	80123a4 <_write_r>

080122f6 <__sseek>:
 80122f6:	b510      	push	{r4, lr}
 80122f8:	460c      	mov	r4, r1
 80122fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80122fe:	f000 f82d 	bl	801235c <_lseek_r>
 8012302:	1c43      	adds	r3, r0, #1
 8012304:	89a3      	ldrh	r3, [r4, #12]
 8012306:	bf15      	itete	ne
 8012308:	6560      	strne	r0, [r4, #84]	; 0x54
 801230a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801230e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012312:	81a3      	strheq	r3, [r4, #12]
 8012314:	bf18      	it	ne
 8012316:	81a3      	strhne	r3, [r4, #12]
 8012318:	bd10      	pop	{r4, pc}

0801231a <__sclose>:
 801231a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801231e:	f000 b80d 	b.w	801233c <_close_r>

08012322 <memset>:
 8012322:	4402      	add	r2, r0
 8012324:	4603      	mov	r3, r0
 8012326:	4293      	cmp	r3, r2
 8012328:	d100      	bne.n	801232c <memset+0xa>
 801232a:	4770      	bx	lr
 801232c:	f803 1b01 	strb.w	r1, [r3], #1
 8012330:	e7f9      	b.n	8012326 <memset+0x4>
	...

08012334 <_localeconv_r>:
 8012334:	4800      	ldr	r0, [pc, #0]	; (8012338 <_localeconv_r+0x4>)
 8012336:	4770      	bx	lr
 8012338:	24000160 	.word	0x24000160

0801233c <_close_r>:
 801233c:	b538      	push	{r3, r4, r5, lr}
 801233e:	4d06      	ldr	r5, [pc, #24]	; (8012358 <_close_r+0x1c>)
 8012340:	2300      	movs	r3, #0
 8012342:	4604      	mov	r4, r0
 8012344:	4608      	mov	r0, r1
 8012346:	602b      	str	r3, [r5, #0]
 8012348:	f7ef f8e7 	bl	800151a <_close>
 801234c:	1c43      	adds	r3, r0, #1
 801234e:	d102      	bne.n	8012356 <_close_r+0x1a>
 8012350:	682b      	ldr	r3, [r5, #0]
 8012352:	b103      	cbz	r3, 8012356 <_close_r+0x1a>
 8012354:	6023      	str	r3, [r4, #0]
 8012356:	bd38      	pop	{r3, r4, r5, pc}
 8012358:	24009c5c 	.word	0x24009c5c

0801235c <_lseek_r>:
 801235c:	b538      	push	{r3, r4, r5, lr}
 801235e:	4d07      	ldr	r5, [pc, #28]	; (801237c <_lseek_r+0x20>)
 8012360:	4604      	mov	r4, r0
 8012362:	4608      	mov	r0, r1
 8012364:	4611      	mov	r1, r2
 8012366:	2200      	movs	r2, #0
 8012368:	602a      	str	r2, [r5, #0]
 801236a:	461a      	mov	r2, r3
 801236c:	f7ef f8fc 	bl	8001568 <_lseek>
 8012370:	1c43      	adds	r3, r0, #1
 8012372:	d102      	bne.n	801237a <_lseek_r+0x1e>
 8012374:	682b      	ldr	r3, [r5, #0]
 8012376:	b103      	cbz	r3, 801237a <_lseek_r+0x1e>
 8012378:	6023      	str	r3, [r4, #0]
 801237a:	bd38      	pop	{r3, r4, r5, pc}
 801237c:	24009c5c 	.word	0x24009c5c

08012380 <_read_r>:
 8012380:	b538      	push	{r3, r4, r5, lr}
 8012382:	4d07      	ldr	r5, [pc, #28]	; (80123a0 <_read_r+0x20>)
 8012384:	4604      	mov	r4, r0
 8012386:	4608      	mov	r0, r1
 8012388:	4611      	mov	r1, r2
 801238a:	2200      	movs	r2, #0
 801238c:	602a      	str	r2, [r5, #0]
 801238e:	461a      	mov	r2, r3
 8012390:	f7ef f88a 	bl	80014a8 <_read>
 8012394:	1c43      	adds	r3, r0, #1
 8012396:	d102      	bne.n	801239e <_read_r+0x1e>
 8012398:	682b      	ldr	r3, [r5, #0]
 801239a:	b103      	cbz	r3, 801239e <_read_r+0x1e>
 801239c:	6023      	str	r3, [r4, #0]
 801239e:	bd38      	pop	{r3, r4, r5, pc}
 80123a0:	24009c5c 	.word	0x24009c5c

080123a4 <_write_r>:
 80123a4:	b538      	push	{r3, r4, r5, lr}
 80123a6:	4d07      	ldr	r5, [pc, #28]	; (80123c4 <_write_r+0x20>)
 80123a8:	4604      	mov	r4, r0
 80123aa:	4608      	mov	r0, r1
 80123ac:	4611      	mov	r1, r2
 80123ae:	2200      	movs	r2, #0
 80123b0:	602a      	str	r2, [r5, #0]
 80123b2:	461a      	mov	r2, r3
 80123b4:	f7ef f895 	bl	80014e2 <_write>
 80123b8:	1c43      	adds	r3, r0, #1
 80123ba:	d102      	bne.n	80123c2 <_write_r+0x1e>
 80123bc:	682b      	ldr	r3, [r5, #0]
 80123be:	b103      	cbz	r3, 80123c2 <_write_r+0x1e>
 80123c0:	6023      	str	r3, [r4, #0]
 80123c2:	bd38      	pop	{r3, r4, r5, pc}
 80123c4:	24009c5c 	.word	0x24009c5c

080123c8 <__errno>:
 80123c8:	4b01      	ldr	r3, [pc, #4]	; (80123d0 <__errno+0x8>)
 80123ca:	6818      	ldr	r0, [r3, #0]
 80123cc:	4770      	bx	lr
 80123ce:	bf00      	nop
 80123d0:	2400006c 	.word	0x2400006c

080123d4 <__libc_init_array>:
 80123d4:	b570      	push	{r4, r5, r6, lr}
 80123d6:	4d0d      	ldr	r5, [pc, #52]	; (801240c <__libc_init_array+0x38>)
 80123d8:	4c0d      	ldr	r4, [pc, #52]	; (8012410 <__libc_init_array+0x3c>)
 80123da:	1b64      	subs	r4, r4, r5
 80123dc:	10a4      	asrs	r4, r4, #2
 80123de:	2600      	movs	r6, #0
 80123e0:	42a6      	cmp	r6, r4
 80123e2:	d109      	bne.n	80123f8 <__libc_init_array+0x24>
 80123e4:	4d0b      	ldr	r5, [pc, #44]	; (8012414 <__libc_init_array+0x40>)
 80123e6:	4c0c      	ldr	r4, [pc, #48]	; (8012418 <__libc_init_array+0x44>)
 80123e8:	f001 fe68 	bl	80140bc <_init>
 80123ec:	1b64      	subs	r4, r4, r5
 80123ee:	10a4      	asrs	r4, r4, #2
 80123f0:	2600      	movs	r6, #0
 80123f2:	42a6      	cmp	r6, r4
 80123f4:	d105      	bne.n	8012402 <__libc_init_array+0x2e>
 80123f6:	bd70      	pop	{r4, r5, r6, pc}
 80123f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80123fc:	4798      	blx	r3
 80123fe:	3601      	adds	r6, #1
 8012400:	e7ee      	b.n	80123e0 <__libc_init_array+0xc>
 8012402:	f855 3b04 	ldr.w	r3, [r5], #4
 8012406:	4798      	blx	r3
 8012408:	3601      	adds	r6, #1
 801240a:	e7f2      	b.n	80123f2 <__libc_init_array+0x1e>
 801240c:	080148bc 	.word	0x080148bc
 8012410:	080148bc 	.word	0x080148bc
 8012414:	080148bc 	.word	0x080148bc
 8012418:	080148c8 	.word	0x080148c8

0801241c <__retarget_lock_init_recursive>:
 801241c:	4770      	bx	lr

0801241e <__retarget_lock_acquire_recursive>:
 801241e:	4770      	bx	lr

08012420 <__retarget_lock_release_recursive>:
 8012420:	4770      	bx	lr

08012422 <memcpy>:
 8012422:	440a      	add	r2, r1
 8012424:	4291      	cmp	r1, r2
 8012426:	f100 33ff 	add.w	r3, r0, #4294967295
 801242a:	d100      	bne.n	801242e <memcpy+0xc>
 801242c:	4770      	bx	lr
 801242e:	b510      	push	{r4, lr}
 8012430:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012434:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012438:	4291      	cmp	r1, r2
 801243a:	d1f9      	bne.n	8012430 <memcpy+0xe>
 801243c:	bd10      	pop	{r4, pc}

0801243e <quorem>:
 801243e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012442:	6903      	ldr	r3, [r0, #16]
 8012444:	690c      	ldr	r4, [r1, #16]
 8012446:	42a3      	cmp	r3, r4
 8012448:	4607      	mov	r7, r0
 801244a:	db7e      	blt.n	801254a <quorem+0x10c>
 801244c:	3c01      	subs	r4, #1
 801244e:	f101 0814 	add.w	r8, r1, #20
 8012452:	f100 0514 	add.w	r5, r0, #20
 8012456:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801245a:	9301      	str	r3, [sp, #4]
 801245c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012460:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012464:	3301      	adds	r3, #1
 8012466:	429a      	cmp	r2, r3
 8012468:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801246c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012470:	fbb2 f6f3 	udiv	r6, r2, r3
 8012474:	d331      	bcc.n	80124da <quorem+0x9c>
 8012476:	f04f 0e00 	mov.w	lr, #0
 801247a:	4640      	mov	r0, r8
 801247c:	46ac      	mov	ip, r5
 801247e:	46f2      	mov	sl, lr
 8012480:	f850 2b04 	ldr.w	r2, [r0], #4
 8012484:	b293      	uxth	r3, r2
 8012486:	fb06 e303 	mla	r3, r6, r3, lr
 801248a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801248e:	0c1a      	lsrs	r2, r3, #16
 8012490:	b29b      	uxth	r3, r3
 8012492:	ebaa 0303 	sub.w	r3, sl, r3
 8012496:	f8dc a000 	ldr.w	sl, [ip]
 801249a:	fa13 f38a 	uxtah	r3, r3, sl
 801249e:	fb06 220e 	mla	r2, r6, lr, r2
 80124a2:	9300      	str	r3, [sp, #0]
 80124a4:	9b00      	ldr	r3, [sp, #0]
 80124a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80124aa:	b292      	uxth	r2, r2
 80124ac:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80124b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80124b4:	f8bd 3000 	ldrh.w	r3, [sp]
 80124b8:	4581      	cmp	r9, r0
 80124ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80124be:	f84c 3b04 	str.w	r3, [ip], #4
 80124c2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80124c6:	d2db      	bcs.n	8012480 <quorem+0x42>
 80124c8:	f855 300b 	ldr.w	r3, [r5, fp]
 80124cc:	b92b      	cbnz	r3, 80124da <quorem+0x9c>
 80124ce:	9b01      	ldr	r3, [sp, #4]
 80124d0:	3b04      	subs	r3, #4
 80124d2:	429d      	cmp	r5, r3
 80124d4:	461a      	mov	r2, r3
 80124d6:	d32c      	bcc.n	8012532 <quorem+0xf4>
 80124d8:	613c      	str	r4, [r7, #16]
 80124da:	4638      	mov	r0, r7
 80124dc:	f001 f920 	bl	8013720 <__mcmp>
 80124e0:	2800      	cmp	r0, #0
 80124e2:	db22      	blt.n	801252a <quorem+0xec>
 80124e4:	3601      	adds	r6, #1
 80124e6:	4629      	mov	r1, r5
 80124e8:	2000      	movs	r0, #0
 80124ea:	f858 2b04 	ldr.w	r2, [r8], #4
 80124ee:	f8d1 c000 	ldr.w	ip, [r1]
 80124f2:	b293      	uxth	r3, r2
 80124f4:	1ac3      	subs	r3, r0, r3
 80124f6:	0c12      	lsrs	r2, r2, #16
 80124f8:	fa13 f38c 	uxtah	r3, r3, ip
 80124fc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8012500:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012504:	b29b      	uxth	r3, r3
 8012506:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801250a:	45c1      	cmp	r9, r8
 801250c:	f841 3b04 	str.w	r3, [r1], #4
 8012510:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012514:	d2e9      	bcs.n	80124ea <quorem+0xac>
 8012516:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801251a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801251e:	b922      	cbnz	r2, 801252a <quorem+0xec>
 8012520:	3b04      	subs	r3, #4
 8012522:	429d      	cmp	r5, r3
 8012524:	461a      	mov	r2, r3
 8012526:	d30a      	bcc.n	801253e <quorem+0x100>
 8012528:	613c      	str	r4, [r7, #16]
 801252a:	4630      	mov	r0, r6
 801252c:	b003      	add	sp, #12
 801252e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012532:	6812      	ldr	r2, [r2, #0]
 8012534:	3b04      	subs	r3, #4
 8012536:	2a00      	cmp	r2, #0
 8012538:	d1ce      	bne.n	80124d8 <quorem+0x9a>
 801253a:	3c01      	subs	r4, #1
 801253c:	e7c9      	b.n	80124d2 <quorem+0x94>
 801253e:	6812      	ldr	r2, [r2, #0]
 8012540:	3b04      	subs	r3, #4
 8012542:	2a00      	cmp	r2, #0
 8012544:	d1f0      	bne.n	8012528 <quorem+0xea>
 8012546:	3c01      	subs	r4, #1
 8012548:	e7eb      	b.n	8012522 <quorem+0xe4>
 801254a:	2000      	movs	r0, #0
 801254c:	e7ee      	b.n	801252c <quorem+0xee>
	...

08012550 <_dtoa_r>:
 8012550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012554:	ed2d 8b02 	vpush	{d8}
 8012558:	69c5      	ldr	r5, [r0, #28]
 801255a:	b091      	sub	sp, #68	; 0x44
 801255c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012560:	ec59 8b10 	vmov	r8, r9, d0
 8012564:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8012566:	9106      	str	r1, [sp, #24]
 8012568:	4606      	mov	r6, r0
 801256a:	9208      	str	r2, [sp, #32]
 801256c:	930c      	str	r3, [sp, #48]	; 0x30
 801256e:	b975      	cbnz	r5, 801258e <_dtoa_r+0x3e>
 8012570:	2010      	movs	r0, #16
 8012572:	f000 fda5 	bl	80130c0 <malloc>
 8012576:	4602      	mov	r2, r0
 8012578:	61f0      	str	r0, [r6, #28]
 801257a:	b920      	cbnz	r0, 8012586 <_dtoa_r+0x36>
 801257c:	4ba6      	ldr	r3, [pc, #664]	; (8012818 <_dtoa_r+0x2c8>)
 801257e:	21ef      	movs	r1, #239	; 0xef
 8012580:	48a6      	ldr	r0, [pc, #664]	; (801281c <_dtoa_r+0x2cc>)
 8012582:	f001 fc65 	bl	8013e50 <__assert_func>
 8012586:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801258a:	6005      	str	r5, [r0, #0]
 801258c:	60c5      	str	r5, [r0, #12]
 801258e:	69f3      	ldr	r3, [r6, #28]
 8012590:	6819      	ldr	r1, [r3, #0]
 8012592:	b151      	cbz	r1, 80125aa <_dtoa_r+0x5a>
 8012594:	685a      	ldr	r2, [r3, #4]
 8012596:	604a      	str	r2, [r1, #4]
 8012598:	2301      	movs	r3, #1
 801259a:	4093      	lsls	r3, r2
 801259c:	608b      	str	r3, [r1, #8]
 801259e:	4630      	mov	r0, r6
 80125a0:	f000 fe82 	bl	80132a8 <_Bfree>
 80125a4:	69f3      	ldr	r3, [r6, #28]
 80125a6:	2200      	movs	r2, #0
 80125a8:	601a      	str	r2, [r3, #0]
 80125aa:	f1b9 0300 	subs.w	r3, r9, #0
 80125ae:	bfbb      	ittet	lt
 80125b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80125b4:	9303      	strlt	r3, [sp, #12]
 80125b6:	2300      	movge	r3, #0
 80125b8:	2201      	movlt	r2, #1
 80125ba:	bfac      	ite	ge
 80125bc:	6023      	strge	r3, [r4, #0]
 80125be:	6022      	strlt	r2, [r4, #0]
 80125c0:	4b97      	ldr	r3, [pc, #604]	; (8012820 <_dtoa_r+0x2d0>)
 80125c2:	9c03      	ldr	r4, [sp, #12]
 80125c4:	43a3      	bics	r3, r4
 80125c6:	d11c      	bne.n	8012602 <_dtoa_r+0xb2>
 80125c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80125ca:	f242 730f 	movw	r3, #9999	; 0x270f
 80125ce:	6013      	str	r3, [r2, #0]
 80125d0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80125d4:	ea53 0308 	orrs.w	r3, r3, r8
 80125d8:	f000 84fb 	beq.w	8012fd2 <_dtoa_r+0xa82>
 80125dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80125de:	b963      	cbnz	r3, 80125fa <_dtoa_r+0xaa>
 80125e0:	4b90      	ldr	r3, [pc, #576]	; (8012824 <_dtoa_r+0x2d4>)
 80125e2:	e020      	b.n	8012626 <_dtoa_r+0xd6>
 80125e4:	4b90      	ldr	r3, [pc, #576]	; (8012828 <_dtoa_r+0x2d8>)
 80125e6:	9301      	str	r3, [sp, #4]
 80125e8:	3308      	adds	r3, #8
 80125ea:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80125ec:	6013      	str	r3, [r2, #0]
 80125ee:	9801      	ldr	r0, [sp, #4]
 80125f0:	b011      	add	sp, #68	; 0x44
 80125f2:	ecbd 8b02 	vpop	{d8}
 80125f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125fa:	4b8a      	ldr	r3, [pc, #552]	; (8012824 <_dtoa_r+0x2d4>)
 80125fc:	9301      	str	r3, [sp, #4]
 80125fe:	3303      	adds	r3, #3
 8012600:	e7f3      	b.n	80125ea <_dtoa_r+0x9a>
 8012602:	ed9d 8b02 	vldr	d8, [sp, #8]
 8012606:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801260a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801260e:	d10c      	bne.n	801262a <_dtoa_r+0xda>
 8012610:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012612:	2301      	movs	r3, #1
 8012614:	6013      	str	r3, [r2, #0]
 8012616:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012618:	2b00      	cmp	r3, #0
 801261a:	f000 84d7 	beq.w	8012fcc <_dtoa_r+0xa7c>
 801261e:	4b83      	ldr	r3, [pc, #524]	; (801282c <_dtoa_r+0x2dc>)
 8012620:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8012622:	6013      	str	r3, [r2, #0]
 8012624:	3b01      	subs	r3, #1
 8012626:	9301      	str	r3, [sp, #4]
 8012628:	e7e1      	b.n	80125ee <_dtoa_r+0x9e>
 801262a:	aa0e      	add	r2, sp, #56	; 0x38
 801262c:	a90f      	add	r1, sp, #60	; 0x3c
 801262e:	4630      	mov	r0, r6
 8012630:	eeb0 0b48 	vmov.f64	d0, d8
 8012634:	f001 f91a 	bl	801386c <__d2b>
 8012638:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801263c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801263e:	4605      	mov	r5, r0
 8012640:	2b00      	cmp	r3, #0
 8012642:	d046      	beq.n	80126d2 <_dtoa_r+0x182>
 8012644:	eeb0 7b48 	vmov.f64	d7, d8
 8012648:	ee18 1a90 	vmov	r1, s17
 801264c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8012650:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8012654:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8012658:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801265c:	2000      	movs	r0, #0
 801265e:	ee07 1a90 	vmov	s15, r1
 8012662:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8012666:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8012800 <_dtoa_r+0x2b0>
 801266a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801266e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8012808 <_dtoa_r+0x2b8>
 8012672:	eea7 6b05 	vfma.f64	d6, d7, d5
 8012676:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8012810 <_dtoa_r+0x2c0>
 801267a:	ee07 3a90 	vmov	s15, r3
 801267e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8012682:	eeb0 7b46 	vmov.f64	d7, d6
 8012686:	eea4 7b05 	vfma.f64	d7, d4, d5
 801268a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801268e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8012692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012696:	ee16 ba90 	vmov	fp, s13
 801269a:	9009      	str	r0, [sp, #36]	; 0x24
 801269c:	d508      	bpl.n	80126b0 <_dtoa_r+0x160>
 801269e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80126a2:	eeb4 6b47 	vcmp.f64	d6, d7
 80126a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126aa:	bf18      	it	ne
 80126ac:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80126b0:	f1bb 0f16 	cmp.w	fp, #22
 80126b4:	d82b      	bhi.n	801270e <_dtoa_r+0x1be>
 80126b6:	495e      	ldr	r1, [pc, #376]	; (8012830 <_dtoa_r+0x2e0>)
 80126b8:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80126bc:	ed91 7b00 	vldr	d7, [r1]
 80126c0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80126c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126c8:	d501      	bpl.n	80126ce <_dtoa_r+0x17e>
 80126ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 80126ce:	2100      	movs	r1, #0
 80126d0:	e01e      	b.n	8012710 <_dtoa_r+0x1c0>
 80126d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80126d4:	4413      	add	r3, r2
 80126d6:	f203 4132 	addw	r1, r3, #1074	; 0x432
 80126da:	2920      	cmp	r1, #32
 80126dc:	bfc1      	itttt	gt
 80126de:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 80126e2:	408c      	lslgt	r4, r1
 80126e4:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 80126e8:	fa28 f101 	lsrgt.w	r1, r8, r1
 80126ec:	bfd6      	itet	le
 80126ee:	f1c1 0120 	rsble	r1, r1, #32
 80126f2:	4321      	orrgt	r1, r4
 80126f4:	fa08 f101 	lslle.w	r1, r8, r1
 80126f8:	ee07 1a90 	vmov	s15, r1
 80126fc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012700:	3b01      	subs	r3, #1
 8012702:	ee17 1a90 	vmov	r1, s15
 8012706:	2001      	movs	r0, #1
 8012708:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801270c:	e7a7      	b.n	801265e <_dtoa_r+0x10e>
 801270e:	2101      	movs	r1, #1
 8012710:	1ad2      	subs	r2, r2, r3
 8012712:	1e53      	subs	r3, r2, #1
 8012714:	9305      	str	r3, [sp, #20]
 8012716:	bf45      	ittet	mi
 8012718:	f1c2 0301 	rsbmi	r3, r2, #1
 801271c:	9304      	strmi	r3, [sp, #16]
 801271e:	2300      	movpl	r3, #0
 8012720:	2300      	movmi	r3, #0
 8012722:	bf4c      	ite	mi
 8012724:	9305      	strmi	r3, [sp, #20]
 8012726:	9304      	strpl	r3, [sp, #16]
 8012728:	f1bb 0f00 	cmp.w	fp, #0
 801272c:	910b      	str	r1, [sp, #44]	; 0x2c
 801272e:	db18      	blt.n	8012762 <_dtoa_r+0x212>
 8012730:	9b05      	ldr	r3, [sp, #20]
 8012732:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8012736:	445b      	add	r3, fp
 8012738:	9305      	str	r3, [sp, #20]
 801273a:	2300      	movs	r3, #0
 801273c:	9a06      	ldr	r2, [sp, #24]
 801273e:	2a09      	cmp	r2, #9
 8012740:	d848      	bhi.n	80127d4 <_dtoa_r+0x284>
 8012742:	2a05      	cmp	r2, #5
 8012744:	bfc4      	itt	gt
 8012746:	3a04      	subgt	r2, #4
 8012748:	9206      	strgt	r2, [sp, #24]
 801274a:	9a06      	ldr	r2, [sp, #24]
 801274c:	f1a2 0202 	sub.w	r2, r2, #2
 8012750:	bfcc      	ite	gt
 8012752:	2400      	movgt	r4, #0
 8012754:	2401      	movle	r4, #1
 8012756:	2a03      	cmp	r2, #3
 8012758:	d847      	bhi.n	80127ea <_dtoa_r+0x29a>
 801275a:	e8df f002 	tbb	[pc, r2]
 801275e:	2d0b      	.short	0x2d0b
 8012760:	392b      	.short	0x392b
 8012762:	9b04      	ldr	r3, [sp, #16]
 8012764:	2200      	movs	r2, #0
 8012766:	eba3 030b 	sub.w	r3, r3, fp
 801276a:	9304      	str	r3, [sp, #16]
 801276c:	920a      	str	r2, [sp, #40]	; 0x28
 801276e:	f1cb 0300 	rsb	r3, fp, #0
 8012772:	e7e3      	b.n	801273c <_dtoa_r+0x1ec>
 8012774:	2200      	movs	r2, #0
 8012776:	9207      	str	r2, [sp, #28]
 8012778:	9a08      	ldr	r2, [sp, #32]
 801277a:	2a00      	cmp	r2, #0
 801277c:	dc38      	bgt.n	80127f0 <_dtoa_r+0x2a0>
 801277e:	f04f 0a01 	mov.w	sl, #1
 8012782:	46d1      	mov	r9, sl
 8012784:	4652      	mov	r2, sl
 8012786:	f8cd a020 	str.w	sl, [sp, #32]
 801278a:	69f7      	ldr	r7, [r6, #28]
 801278c:	2100      	movs	r1, #0
 801278e:	2004      	movs	r0, #4
 8012790:	f100 0c14 	add.w	ip, r0, #20
 8012794:	4594      	cmp	ip, r2
 8012796:	d930      	bls.n	80127fa <_dtoa_r+0x2aa>
 8012798:	6079      	str	r1, [r7, #4]
 801279a:	4630      	mov	r0, r6
 801279c:	930d      	str	r3, [sp, #52]	; 0x34
 801279e:	f000 fd43 	bl	8013228 <_Balloc>
 80127a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80127a4:	9001      	str	r0, [sp, #4]
 80127a6:	4602      	mov	r2, r0
 80127a8:	2800      	cmp	r0, #0
 80127aa:	d145      	bne.n	8012838 <_dtoa_r+0x2e8>
 80127ac:	4b21      	ldr	r3, [pc, #132]	; (8012834 <_dtoa_r+0x2e4>)
 80127ae:	f240 11af 	movw	r1, #431	; 0x1af
 80127b2:	e6e5      	b.n	8012580 <_dtoa_r+0x30>
 80127b4:	2201      	movs	r2, #1
 80127b6:	e7de      	b.n	8012776 <_dtoa_r+0x226>
 80127b8:	2200      	movs	r2, #0
 80127ba:	9207      	str	r2, [sp, #28]
 80127bc:	9a08      	ldr	r2, [sp, #32]
 80127be:	eb0b 0a02 	add.w	sl, fp, r2
 80127c2:	f10a 0901 	add.w	r9, sl, #1
 80127c6:	464a      	mov	r2, r9
 80127c8:	2a01      	cmp	r2, #1
 80127ca:	bfb8      	it	lt
 80127cc:	2201      	movlt	r2, #1
 80127ce:	e7dc      	b.n	801278a <_dtoa_r+0x23a>
 80127d0:	2201      	movs	r2, #1
 80127d2:	e7f2      	b.n	80127ba <_dtoa_r+0x26a>
 80127d4:	2401      	movs	r4, #1
 80127d6:	2200      	movs	r2, #0
 80127d8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80127dc:	f04f 3aff 	mov.w	sl, #4294967295
 80127e0:	2100      	movs	r1, #0
 80127e2:	46d1      	mov	r9, sl
 80127e4:	2212      	movs	r2, #18
 80127e6:	9108      	str	r1, [sp, #32]
 80127e8:	e7cf      	b.n	801278a <_dtoa_r+0x23a>
 80127ea:	2201      	movs	r2, #1
 80127ec:	9207      	str	r2, [sp, #28]
 80127ee:	e7f5      	b.n	80127dc <_dtoa_r+0x28c>
 80127f0:	f8dd a020 	ldr.w	sl, [sp, #32]
 80127f4:	46d1      	mov	r9, sl
 80127f6:	4652      	mov	r2, sl
 80127f8:	e7c7      	b.n	801278a <_dtoa_r+0x23a>
 80127fa:	3101      	adds	r1, #1
 80127fc:	0040      	lsls	r0, r0, #1
 80127fe:	e7c7      	b.n	8012790 <_dtoa_r+0x240>
 8012800:	636f4361 	.word	0x636f4361
 8012804:	3fd287a7 	.word	0x3fd287a7
 8012808:	8b60c8b3 	.word	0x8b60c8b3
 801280c:	3fc68a28 	.word	0x3fc68a28
 8012810:	509f79fb 	.word	0x509f79fb
 8012814:	3fd34413 	.word	0x3fd34413
 8012818:	08014581 	.word	0x08014581
 801281c:	08014598 	.word	0x08014598
 8012820:	7ff00000 	.word	0x7ff00000
 8012824:	0801457d 	.word	0x0801457d
 8012828:	08014574 	.word	0x08014574
 801282c:	08014551 	.word	0x08014551
 8012830:	08014688 	.word	0x08014688
 8012834:	080145f0 	.word	0x080145f0
 8012838:	69f2      	ldr	r2, [r6, #28]
 801283a:	9901      	ldr	r1, [sp, #4]
 801283c:	6011      	str	r1, [r2, #0]
 801283e:	f1b9 0f0e 	cmp.w	r9, #14
 8012842:	d86c      	bhi.n	801291e <_dtoa_r+0x3ce>
 8012844:	2c00      	cmp	r4, #0
 8012846:	d06a      	beq.n	801291e <_dtoa_r+0x3ce>
 8012848:	f1bb 0f00 	cmp.w	fp, #0
 801284c:	f340 80a0 	ble.w	8012990 <_dtoa_r+0x440>
 8012850:	4ac1      	ldr	r2, [pc, #772]	; (8012b58 <_dtoa_r+0x608>)
 8012852:	f00b 010f 	and.w	r1, fp, #15
 8012856:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801285a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801285e:	ed92 7b00 	vldr	d7, [r2]
 8012862:	ea4f 122b 	mov.w	r2, fp, asr #4
 8012866:	f000 8087 	beq.w	8012978 <_dtoa_r+0x428>
 801286a:	49bc      	ldr	r1, [pc, #752]	; (8012b5c <_dtoa_r+0x60c>)
 801286c:	ed91 6b08 	vldr	d6, [r1, #32]
 8012870:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8012874:	ed8d 6b02 	vstr	d6, [sp, #8]
 8012878:	f002 020f 	and.w	r2, r2, #15
 801287c:	2103      	movs	r1, #3
 801287e:	48b7      	ldr	r0, [pc, #732]	; (8012b5c <_dtoa_r+0x60c>)
 8012880:	2a00      	cmp	r2, #0
 8012882:	d17b      	bne.n	801297c <_dtoa_r+0x42c>
 8012884:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012888:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801288c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012890:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012892:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012896:	2a00      	cmp	r2, #0
 8012898:	f000 80a0 	beq.w	80129dc <_dtoa_r+0x48c>
 801289c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80128a0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80128a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128a8:	f140 8098 	bpl.w	80129dc <_dtoa_r+0x48c>
 80128ac:	f1b9 0f00 	cmp.w	r9, #0
 80128b0:	f000 8094 	beq.w	80129dc <_dtoa_r+0x48c>
 80128b4:	f1ba 0f00 	cmp.w	sl, #0
 80128b8:	dd2f      	ble.n	801291a <_dtoa_r+0x3ca>
 80128ba:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80128be:	ee27 7b06 	vmul.f64	d7, d7, d6
 80128c2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80128c6:	f10b 32ff 	add.w	r2, fp, #4294967295
 80128ca:	3101      	adds	r1, #1
 80128cc:	4654      	mov	r4, sl
 80128ce:	ed9d 6b02 	vldr	d6, [sp, #8]
 80128d2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80128d6:	ee07 1a90 	vmov	s15, r1
 80128da:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80128de:	eea7 5b06 	vfma.f64	d5, d7, d6
 80128e2:	ee15 7a90 	vmov	r7, s11
 80128e6:	ec51 0b15 	vmov	r0, r1, d5
 80128ea:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 80128ee:	2c00      	cmp	r4, #0
 80128f0:	d177      	bne.n	80129e2 <_dtoa_r+0x492>
 80128f2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80128f6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80128fa:	ec41 0b17 	vmov	d7, r0, r1
 80128fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012906:	f300 826a 	bgt.w	8012dde <_dtoa_r+0x88e>
 801290a:	eeb1 7b47 	vneg.f64	d7, d7
 801290e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012916:	f100 8260 	bmi.w	8012dda <_dtoa_r+0x88a>
 801291a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801291e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012920:	2a00      	cmp	r2, #0
 8012922:	f2c0 811d 	blt.w	8012b60 <_dtoa_r+0x610>
 8012926:	f1bb 0f0e 	cmp.w	fp, #14
 801292a:	f300 8119 	bgt.w	8012b60 <_dtoa_r+0x610>
 801292e:	4b8a      	ldr	r3, [pc, #552]	; (8012b58 <_dtoa_r+0x608>)
 8012930:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012934:	ed93 6b00 	vldr	d6, [r3]
 8012938:	9b08      	ldr	r3, [sp, #32]
 801293a:	2b00      	cmp	r3, #0
 801293c:	f280 80b7 	bge.w	8012aae <_dtoa_r+0x55e>
 8012940:	f1b9 0f00 	cmp.w	r9, #0
 8012944:	f300 80b3 	bgt.w	8012aae <_dtoa_r+0x55e>
 8012948:	f040 8246 	bne.w	8012dd8 <_dtoa_r+0x888>
 801294c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8012950:	ee26 6b07 	vmul.f64	d6, d6, d7
 8012954:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012958:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801295c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012960:	464c      	mov	r4, r9
 8012962:	464f      	mov	r7, r9
 8012964:	f280 821c 	bge.w	8012da0 <_dtoa_r+0x850>
 8012968:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801296c:	2331      	movs	r3, #49	; 0x31
 801296e:	f808 3b01 	strb.w	r3, [r8], #1
 8012972:	f10b 0b01 	add.w	fp, fp, #1
 8012976:	e218      	b.n	8012daa <_dtoa_r+0x85a>
 8012978:	2102      	movs	r1, #2
 801297a:	e780      	b.n	801287e <_dtoa_r+0x32e>
 801297c:	07d4      	lsls	r4, r2, #31
 801297e:	d504      	bpl.n	801298a <_dtoa_r+0x43a>
 8012980:	ed90 6b00 	vldr	d6, [r0]
 8012984:	3101      	adds	r1, #1
 8012986:	ee27 7b06 	vmul.f64	d7, d7, d6
 801298a:	1052      	asrs	r2, r2, #1
 801298c:	3008      	adds	r0, #8
 801298e:	e777      	b.n	8012880 <_dtoa_r+0x330>
 8012990:	d022      	beq.n	80129d8 <_dtoa_r+0x488>
 8012992:	f1cb 0200 	rsb	r2, fp, #0
 8012996:	4970      	ldr	r1, [pc, #448]	; (8012b58 <_dtoa_r+0x608>)
 8012998:	f002 000f 	and.w	r0, r2, #15
 801299c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80129a0:	ed91 7b00 	vldr	d7, [r1]
 80129a4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80129a8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80129ac:	486b      	ldr	r0, [pc, #428]	; (8012b5c <_dtoa_r+0x60c>)
 80129ae:	1112      	asrs	r2, r2, #4
 80129b0:	2400      	movs	r4, #0
 80129b2:	2102      	movs	r1, #2
 80129b4:	b92a      	cbnz	r2, 80129c2 <_dtoa_r+0x472>
 80129b6:	2c00      	cmp	r4, #0
 80129b8:	f43f af6a 	beq.w	8012890 <_dtoa_r+0x340>
 80129bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80129c0:	e766      	b.n	8012890 <_dtoa_r+0x340>
 80129c2:	07d7      	lsls	r7, r2, #31
 80129c4:	d505      	bpl.n	80129d2 <_dtoa_r+0x482>
 80129c6:	ed90 6b00 	vldr	d6, [r0]
 80129ca:	3101      	adds	r1, #1
 80129cc:	2401      	movs	r4, #1
 80129ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 80129d2:	1052      	asrs	r2, r2, #1
 80129d4:	3008      	adds	r0, #8
 80129d6:	e7ed      	b.n	80129b4 <_dtoa_r+0x464>
 80129d8:	2102      	movs	r1, #2
 80129da:	e759      	b.n	8012890 <_dtoa_r+0x340>
 80129dc:	465a      	mov	r2, fp
 80129de:	464c      	mov	r4, r9
 80129e0:	e775      	b.n	80128ce <_dtoa_r+0x37e>
 80129e2:	ec41 0b17 	vmov	d7, r0, r1
 80129e6:	495c      	ldr	r1, [pc, #368]	; (8012b58 <_dtoa_r+0x608>)
 80129e8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80129ec:	ed11 4b02 	vldr	d4, [r1, #-8]
 80129f0:	9901      	ldr	r1, [sp, #4]
 80129f2:	440c      	add	r4, r1
 80129f4:	9907      	ldr	r1, [sp, #28]
 80129f6:	b351      	cbz	r1, 8012a4e <_dtoa_r+0x4fe>
 80129f8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80129fc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8012a00:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012a04:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8012a08:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012a0c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012a10:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012a14:	ee14 1a90 	vmov	r1, s9
 8012a18:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012a1c:	3130      	adds	r1, #48	; 0x30
 8012a1e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012a22:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a2a:	f808 1b01 	strb.w	r1, [r8], #1
 8012a2e:	d439      	bmi.n	8012aa4 <_dtoa_r+0x554>
 8012a30:	ee32 5b46 	vsub.f64	d5, d2, d6
 8012a34:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8012a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a3c:	d472      	bmi.n	8012b24 <_dtoa_r+0x5d4>
 8012a3e:	45a0      	cmp	r8, r4
 8012a40:	f43f af6b 	beq.w	801291a <_dtoa_r+0x3ca>
 8012a44:	ee27 7b03 	vmul.f64	d7, d7, d3
 8012a48:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012a4c:	e7e0      	b.n	8012a10 <_dtoa_r+0x4c0>
 8012a4e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012a52:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012a56:	4620      	mov	r0, r4
 8012a58:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012a5c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012a60:	ee14 1a90 	vmov	r1, s9
 8012a64:	3130      	adds	r1, #48	; 0x30
 8012a66:	f808 1b01 	strb.w	r1, [r8], #1
 8012a6a:	45a0      	cmp	r8, r4
 8012a6c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012a70:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012a74:	d118      	bne.n	8012aa8 <_dtoa_r+0x558>
 8012a76:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8012a7a:	ee37 4b05 	vadd.f64	d4, d7, d5
 8012a7e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8012a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a86:	dc4d      	bgt.n	8012b24 <_dtoa_r+0x5d4>
 8012a88:	ee35 5b47 	vsub.f64	d5, d5, d7
 8012a8c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8012a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a94:	f57f af41 	bpl.w	801291a <_dtoa_r+0x3ca>
 8012a98:	4680      	mov	r8, r0
 8012a9a:	3801      	subs	r0, #1
 8012a9c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8012aa0:	2b30      	cmp	r3, #48	; 0x30
 8012aa2:	d0f9      	beq.n	8012a98 <_dtoa_r+0x548>
 8012aa4:	4693      	mov	fp, r2
 8012aa6:	e02a      	b.n	8012afe <_dtoa_r+0x5ae>
 8012aa8:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012aac:	e7d6      	b.n	8012a5c <_dtoa_r+0x50c>
 8012aae:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012ab2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8012ab6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012aba:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8012abe:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8012ac2:	ee15 3a10 	vmov	r3, s10
 8012ac6:	3330      	adds	r3, #48	; 0x30
 8012ac8:	f808 3b01 	strb.w	r3, [r8], #1
 8012acc:	9b01      	ldr	r3, [sp, #4]
 8012ace:	eba8 0303 	sub.w	r3, r8, r3
 8012ad2:	4599      	cmp	r9, r3
 8012ad4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8012ad8:	eea3 7b46 	vfms.f64	d7, d3, d6
 8012adc:	d133      	bne.n	8012b46 <_dtoa_r+0x5f6>
 8012ade:	ee37 7b07 	vadd.f64	d7, d7, d7
 8012ae2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012aea:	dc1a      	bgt.n	8012b22 <_dtoa_r+0x5d2>
 8012aec:	eeb4 7b46 	vcmp.f64	d7, d6
 8012af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012af4:	d103      	bne.n	8012afe <_dtoa_r+0x5ae>
 8012af6:	ee15 3a10 	vmov	r3, s10
 8012afa:	07d9      	lsls	r1, r3, #31
 8012afc:	d411      	bmi.n	8012b22 <_dtoa_r+0x5d2>
 8012afe:	4629      	mov	r1, r5
 8012b00:	4630      	mov	r0, r6
 8012b02:	f000 fbd1 	bl	80132a8 <_Bfree>
 8012b06:	2300      	movs	r3, #0
 8012b08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012b0a:	f888 3000 	strb.w	r3, [r8]
 8012b0e:	f10b 0301 	add.w	r3, fp, #1
 8012b12:	6013      	str	r3, [r2, #0]
 8012b14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	f43f ad69 	beq.w	80125ee <_dtoa_r+0x9e>
 8012b1c:	f8c3 8000 	str.w	r8, [r3]
 8012b20:	e565      	b.n	80125ee <_dtoa_r+0x9e>
 8012b22:	465a      	mov	r2, fp
 8012b24:	4643      	mov	r3, r8
 8012b26:	4698      	mov	r8, r3
 8012b28:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8012b2c:	2939      	cmp	r1, #57	; 0x39
 8012b2e:	d106      	bne.n	8012b3e <_dtoa_r+0x5ee>
 8012b30:	9901      	ldr	r1, [sp, #4]
 8012b32:	4299      	cmp	r1, r3
 8012b34:	d1f7      	bne.n	8012b26 <_dtoa_r+0x5d6>
 8012b36:	9801      	ldr	r0, [sp, #4]
 8012b38:	2130      	movs	r1, #48	; 0x30
 8012b3a:	3201      	adds	r2, #1
 8012b3c:	7001      	strb	r1, [r0, #0]
 8012b3e:	7819      	ldrb	r1, [r3, #0]
 8012b40:	3101      	adds	r1, #1
 8012b42:	7019      	strb	r1, [r3, #0]
 8012b44:	e7ae      	b.n	8012aa4 <_dtoa_r+0x554>
 8012b46:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012b4a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b52:	d1b2      	bne.n	8012aba <_dtoa_r+0x56a>
 8012b54:	e7d3      	b.n	8012afe <_dtoa_r+0x5ae>
 8012b56:	bf00      	nop
 8012b58:	08014688 	.word	0x08014688
 8012b5c:	08014660 	.word	0x08014660
 8012b60:	9907      	ldr	r1, [sp, #28]
 8012b62:	2900      	cmp	r1, #0
 8012b64:	f000 80d0 	beq.w	8012d08 <_dtoa_r+0x7b8>
 8012b68:	9906      	ldr	r1, [sp, #24]
 8012b6a:	2901      	cmp	r1, #1
 8012b6c:	f300 80b4 	bgt.w	8012cd8 <_dtoa_r+0x788>
 8012b70:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012b72:	2900      	cmp	r1, #0
 8012b74:	f000 80ac 	beq.w	8012cd0 <_dtoa_r+0x780>
 8012b78:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012b7c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012b80:	461c      	mov	r4, r3
 8012b82:	9309      	str	r3, [sp, #36]	; 0x24
 8012b84:	9b04      	ldr	r3, [sp, #16]
 8012b86:	4413      	add	r3, r2
 8012b88:	9304      	str	r3, [sp, #16]
 8012b8a:	9b05      	ldr	r3, [sp, #20]
 8012b8c:	2101      	movs	r1, #1
 8012b8e:	4413      	add	r3, r2
 8012b90:	4630      	mov	r0, r6
 8012b92:	9305      	str	r3, [sp, #20]
 8012b94:	f000 fc3e 	bl	8013414 <__i2b>
 8012b98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b9a:	4607      	mov	r7, r0
 8012b9c:	f1b8 0f00 	cmp.w	r8, #0
 8012ba0:	d00d      	beq.n	8012bbe <_dtoa_r+0x66e>
 8012ba2:	9a05      	ldr	r2, [sp, #20]
 8012ba4:	2a00      	cmp	r2, #0
 8012ba6:	dd0a      	ble.n	8012bbe <_dtoa_r+0x66e>
 8012ba8:	4542      	cmp	r2, r8
 8012baa:	9904      	ldr	r1, [sp, #16]
 8012bac:	bfa8      	it	ge
 8012bae:	4642      	movge	r2, r8
 8012bb0:	1a89      	subs	r1, r1, r2
 8012bb2:	9104      	str	r1, [sp, #16]
 8012bb4:	9905      	ldr	r1, [sp, #20]
 8012bb6:	eba8 0802 	sub.w	r8, r8, r2
 8012bba:	1a8a      	subs	r2, r1, r2
 8012bbc:	9205      	str	r2, [sp, #20]
 8012bbe:	b303      	cbz	r3, 8012c02 <_dtoa_r+0x6b2>
 8012bc0:	9a07      	ldr	r2, [sp, #28]
 8012bc2:	2a00      	cmp	r2, #0
 8012bc4:	f000 80a5 	beq.w	8012d12 <_dtoa_r+0x7c2>
 8012bc8:	2c00      	cmp	r4, #0
 8012bca:	dd13      	ble.n	8012bf4 <_dtoa_r+0x6a4>
 8012bcc:	4639      	mov	r1, r7
 8012bce:	4622      	mov	r2, r4
 8012bd0:	4630      	mov	r0, r6
 8012bd2:	930d      	str	r3, [sp, #52]	; 0x34
 8012bd4:	f000 fcde 	bl	8013594 <__pow5mult>
 8012bd8:	462a      	mov	r2, r5
 8012bda:	4601      	mov	r1, r0
 8012bdc:	4607      	mov	r7, r0
 8012bde:	4630      	mov	r0, r6
 8012be0:	f000 fc2e 	bl	8013440 <__multiply>
 8012be4:	4629      	mov	r1, r5
 8012be6:	9009      	str	r0, [sp, #36]	; 0x24
 8012be8:	4630      	mov	r0, r6
 8012bea:	f000 fb5d 	bl	80132a8 <_Bfree>
 8012bee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012bf0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012bf2:	4615      	mov	r5, r2
 8012bf4:	1b1a      	subs	r2, r3, r4
 8012bf6:	d004      	beq.n	8012c02 <_dtoa_r+0x6b2>
 8012bf8:	4629      	mov	r1, r5
 8012bfa:	4630      	mov	r0, r6
 8012bfc:	f000 fcca 	bl	8013594 <__pow5mult>
 8012c00:	4605      	mov	r5, r0
 8012c02:	2101      	movs	r1, #1
 8012c04:	4630      	mov	r0, r6
 8012c06:	f000 fc05 	bl	8013414 <__i2b>
 8012c0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	4604      	mov	r4, r0
 8012c10:	f340 8081 	ble.w	8012d16 <_dtoa_r+0x7c6>
 8012c14:	461a      	mov	r2, r3
 8012c16:	4601      	mov	r1, r0
 8012c18:	4630      	mov	r0, r6
 8012c1a:	f000 fcbb 	bl	8013594 <__pow5mult>
 8012c1e:	9b06      	ldr	r3, [sp, #24]
 8012c20:	2b01      	cmp	r3, #1
 8012c22:	4604      	mov	r4, r0
 8012c24:	dd7a      	ble.n	8012d1c <_dtoa_r+0x7cc>
 8012c26:	2300      	movs	r3, #0
 8012c28:	9309      	str	r3, [sp, #36]	; 0x24
 8012c2a:	6922      	ldr	r2, [r4, #16]
 8012c2c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8012c30:	6910      	ldr	r0, [r2, #16]
 8012c32:	f000 fba1 	bl	8013378 <__hi0bits>
 8012c36:	f1c0 0020 	rsb	r0, r0, #32
 8012c3a:	9b05      	ldr	r3, [sp, #20]
 8012c3c:	4418      	add	r0, r3
 8012c3e:	f010 001f 	ands.w	r0, r0, #31
 8012c42:	f000 8093 	beq.w	8012d6c <_dtoa_r+0x81c>
 8012c46:	f1c0 0220 	rsb	r2, r0, #32
 8012c4a:	2a04      	cmp	r2, #4
 8012c4c:	f340 8085 	ble.w	8012d5a <_dtoa_r+0x80a>
 8012c50:	9b04      	ldr	r3, [sp, #16]
 8012c52:	f1c0 001c 	rsb	r0, r0, #28
 8012c56:	4403      	add	r3, r0
 8012c58:	9304      	str	r3, [sp, #16]
 8012c5a:	9b05      	ldr	r3, [sp, #20]
 8012c5c:	4480      	add	r8, r0
 8012c5e:	4403      	add	r3, r0
 8012c60:	9305      	str	r3, [sp, #20]
 8012c62:	9b04      	ldr	r3, [sp, #16]
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	dd05      	ble.n	8012c74 <_dtoa_r+0x724>
 8012c68:	4629      	mov	r1, r5
 8012c6a:	461a      	mov	r2, r3
 8012c6c:	4630      	mov	r0, r6
 8012c6e:	f000 fceb 	bl	8013648 <__lshift>
 8012c72:	4605      	mov	r5, r0
 8012c74:	9b05      	ldr	r3, [sp, #20]
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	dd05      	ble.n	8012c86 <_dtoa_r+0x736>
 8012c7a:	4621      	mov	r1, r4
 8012c7c:	461a      	mov	r2, r3
 8012c7e:	4630      	mov	r0, r6
 8012c80:	f000 fce2 	bl	8013648 <__lshift>
 8012c84:	4604      	mov	r4, r0
 8012c86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d071      	beq.n	8012d70 <_dtoa_r+0x820>
 8012c8c:	4621      	mov	r1, r4
 8012c8e:	4628      	mov	r0, r5
 8012c90:	f000 fd46 	bl	8013720 <__mcmp>
 8012c94:	2800      	cmp	r0, #0
 8012c96:	da6b      	bge.n	8012d70 <_dtoa_r+0x820>
 8012c98:	2300      	movs	r3, #0
 8012c9a:	4629      	mov	r1, r5
 8012c9c:	220a      	movs	r2, #10
 8012c9e:	4630      	mov	r0, r6
 8012ca0:	f000 fb24 	bl	80132ec <__multadd>
 8012ca4:	9b07      	ldr	r3, [sp, #28]
 8012ca6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012caa:	4605      	mov	r5, r0
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	f000 8197 	beq.w	8012fe0 <_dtoa_r+0xa90>
 8012cb2:	4639      	mov	r1, r7
 8012cb4:	2300      	movs	r3, #0
 8012cb6:	220a      	movs	r2, #10
 8012cb8:	4630      	mov	r0, r6
 8012cba:	f000 fb17 	bl	80132ec <__multadd>
 8012cbe:	f1ba 0f00 	cmp.w	sl, #0
 8012cc2:	4607      	mov	r7, r0
 8012cc4:	f300 8093 	bgt.w	8012dee <_dtoa_r+0x89e>
 8012cc8:	9b06      	ldr	r3, [sp, #24]
 8012cca:	2b02      	cmp	r3, #2
 8012ccc:	dc57      	bgt.n	8012d7e <_dtoa_r+0x82e>
 8012cce:	e08e      	b.n	8012dee <_dtoa_r+0x89e>
 8012cd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012cd2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8012cd6:	e751      	b.n	8012b7c <_dtoa_r+0x62c>
 8012cd8:	f109 34ff 	add.w	r4, r9, #4294967295
 8012cdc:	42a3      	cmp	r3, r4
 8012cde:	bfbf      	itttt	lt
 8012ce0:	1ae2      	sublt	r2, r4, r3
 8012ce2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8012ce4:	189b      	addlt	r3, r3, r2
 8012ce6:	930a      	strlt	r3, [sp, #40]	; 0x28
 8012ce8:	bfae      	itee	ge
 8012cea:	1b1c      	subge	r4, r3, r4
 8012cec:	4623      	movlt	r3, r4
 8012cee:	2400      	movlt	r4, #0
 8012cf0:	f1b9 0f00 	cmp.w	r9, #0
 8012cf4:	bfb5      	itete	lt
 8012cf6:	9a04      	ldrlt	r2, [sp, #16]
 8012cf8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8012cfc:	eba2 0809 	sublt.w	r8, r2, r9
 8012d00:	464a      	movge	r2, r9
 8012d02:	bfb8      	it	lt
 8012d04:	2200      	movlt	r2, #0
 8012d06:	e73c      	b.n	8012b82 <_dtoa_r+0x632>
 8012d08:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012d0c:	9f07      	ldr	r7, [sp, #28]
 8012d0e:	461c      	mov	r4, r3
 8012d10:	e744      	b.n	8012b9c <_dtoa_r+0x64c>
 8012d12:	461a      	mov	r2, r3
 8012d14:	e770      	b.n	8012bf8 <_dtoa_r+0x6a8>
 8012d16:	9b06      	ldr	r3, [sp, #24]
 8012d18:	2b01      	cmp	r3, #1
 8012d1a:	dc18      	bgt.n	8012d4e <_dtoa_r+0x7fe>
 8012d1c:	9b02      	ldr	r3, [sp, #8]
 8012d1e:	b9b3      	cbnz	r3, 8012d4e <_dtoa_r+0x7fe>
 8012d20:	9b03      	ldr	r3, [sp, #12]
 8012d22:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8012d26:	b9a2      	cbnz	r2, 8012d52 <_dtoa_r+0x802>
 8012d28:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8012d2c:	0d12      	lsrs	r2, r2, #20
 8012d2e:	0512      	lsls	r2, r2, #20
 8012d30:	b18a      	cbz	r2, 8012d56 <_dtoa_r+0x806>
 8012d32:	9b04      	ldr	r3, [sp, #16]
 8012d34:	3301      	adds	r3, #1
 8012d36:	9304      	str	r3, [sp, #16]
 8012d38:	9b05      	ldr	r3, [sp, #20]
 8012d3a:	3301      	adds	r3, #1
 8012d3c:	9305      	str	r3, [sp, #20]
 8012d3e:	2301      	movs	r3, #1
 8012d40:	9309      	str	r3, [sp, #36]	; 0x24
 8012d42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	f47f af70 	bne.w	8012c2a <_dtoa_r+0x6da>
 8012d4a:	2001      	movs	r0, #1
 8012d4c:	e775      	b.n	8012c3a <_dtoa_r+0x6ea>
 8012d4e:	2300      	movs	r3, #0
 8012d50:	e7f6      	b.n	8012d40 <_dtoa_r+0x7f0>
 8012d52:	9b02      	ldr	r3, [sp, #8]
 8012d54:	e7f4      	b.n	8012d40 <_dtoa_r+0x7f0>
 8012d56:	9209      	str	r2, [sp, #36]	; 0x24
 8012d58:	e7f3      	b.n	8012d42 <_dtoa_r+0x7f2>
 8012d5a:	d082      	beq.n	8012c62 <_dtoa_r+0x712>
 8012d5c:	9b04      	ldr	r3, [sp, #16]
 8012d5e:	321c      	adds	r2, #28
 8012d60:	4413      	add	r3, r2
 8012d62:	9304      	str	r3, [sp, #16]
 8012d64:	9b05      	ldr	r3, [sp, #20]
 8012d66:	4490      	add	r8, r2
 8012d68:	4413      	add	r3, r2
 8012d6a:	e779      	b.n	8012c60 <_dtoa_r+0x710>
 8012d6c:	4602      	mov	r2, r0
 8012d6e:	e7f5      	b.n	8012d5c <_dtoa_r+0x80c>
 8012d70:	f1b9 0f00 	cmp.w	r9, #0
 8012d74:	dc36      	bgt.n	8012de4 <_dtoa_r+0x894>
 8012d76:	9b06      	ldr	r3, [sp, #24]
 8012d78:	2b02      	cmp	r3, #2
 8012d7a:	dd33      	ble.n	8012de4 <_dtoa_r+0x894>
 8012d7c:	46ca      	mov	sl, r9
 8012d7e:	f1ba 0f00 	cmp.w	sl, #0
 8012d82:	d10d      	bne.n	8012da0 <_dtoa_r+0x850>
 8012d84:	4621      	mov	r1, r4
 8012d86:	4653      	mov	r3, sl
 8012d88:	2205      	movs	r2, #5
 8012d8a:	4630      	mov	r0, r6
 8012d8c:	f000 faae 	bl	80132ec <__multadd>
 8012d90:	4601      	mov	r1, r0
 8012d92:	4604      	mov	r4, r0
 8012d94:	4628      	mov	r0, r5
 8012d96:	f000 fcc3 	bl	8013720 <__mcmp>
 8012d9a:	2800      	cmp	r0, #0
 8012d9c:	f73f ade4 	bgt.w	8012968 <_dtoa_r+0x418>
 8012da0:	9b08      	ldr	r3, [sp, #32]
 8012da2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012da6:	ea6f 0b03 	mvn.w	fp, r3
 8012daa:	f04f 0900 	mov.w	r9, #0
 8012dae:	4621      	mov	r1, r4
 8012db0:	4630      	mov	r0, r6
 8012db2:	f000 fa79 	bl	80132a8 <_Bfree>
 8012db6:	2f00      	cmp	r7, #0
 8012db8:	f43f aea1 	beq.w	8012afe <_dtoa_r+0x5ae>
 8012dbc:	f1b9 0f00 	cmp.w	r9, #0
 8012dc0:	d005      	beq.n	8012dce <_dtoa_r+0x87e>
 8012dc2:	45b9      	cmp	r9, r7
 8012dc4:	d003      	beq.n	8012dce <_dtoa_r+0x87e>
 8012dc6:	4649      	mov	r1, r9
 8012dc8:	4630      	mov	r0, r6
 8012dca:	f000 fa6d 	bl	80132a8 <_Bfree>
 8012dce:	4639      	mov	r1, r7
 8012dd0:	4630      	mov	r0, r6
 8012dd2:	f000 fa69 	bl	80132a8 <_Bfree>
 8012dd6:	e692      	b.n	8012afe <_dtoa_r+0x5ae>
 8012dd8:	2400      	movs	r4, #0
 8012dda:	4627      	mov	r7, r4
 8012ddc:	e7e0      	b.n	8012da0 <_dtoa_r+0x850>
 8012dde:	4693      	mov	fp, r2
 8012de0:	4627      	mov	r7, r4
 8012de2:	e5c1      	b.n	8012968 <_dtoa_r+0x418>
 8012de4:	9b07      	ldr	r3, [sp, #28]
 8012de6:	46ca      	mov	sl, r9
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	f000 8100 	beq.w	8012fee <_dtoa_r+0xa9e>
 8012dee:	f1b8 0f00 	cmp.w	r8, #0
 8012df2:	dd05      	ble.n	8012e00 <_dtoa_r+0x8b0>
 8012df4:	4639      	mov	r1, r7
 8012df6:	4642      	mov	r2, r8
 8012df8:	4630      	mov	r0, r6
 8012dfa:	f000 fc25 	bl	8013648 <__lshift>
 8012dfe:	4607      	mov	r7, r0
 8012e00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d05d      	beq.n	8012ec2 <_dtoa_r+0x972>
 8012e06:	6879      	ldr	r1, [r7, #4]
 8012e08:	4630      	mov	r0, r6
 8012e0a:	f000 fa0d 	bl	8013228 <_Balloc>
 8012e0e:	4680      	mov	r8, r0
 8012e10:	b928      	cbnz	r0, 8012e1e <_dtoa_r+0x8ce>
 8012e12:	4b82      	ldr	r3, [pc, #520]	; (801301c <_dtoa_r+0xacc>)
 8012e14:	4602      	mov	r2, r0
 8012e16:	f240 21ef 	movw	r1, #751	; 0x2ef
 8012e1a:	f7ff bbb1 	b.w	8012580 <_dtoa_r+0x30>
 8012e1e:	693a      	ldr	r2, [r7, #16]
 8012e20:	3202      	adds	r2, #2
 8012e22:	0092      	lsls	r2, r2, #2
 8012e24:	f107 010c 	add.w	r1, r7, #12
 8012e28:	300c      	adds	r0, #12
 8012e2a:	f7ff fafa 	bl	8012422 <memcpy>
 8012e2e:	2201      	movs	r2, #1
 8012e30:	4641      	mov	r1, r8
 8012e32:	4630      	mov	r0, r6
 8012e34:	f000 fc08 	bl	8013648 <__lshift>
 8012e38:	9b01      	ldr	r3, [sp, #4]
 8012e3a:	3301      	adds	r3, #1
 8012e3c:	9304      	str	r3, [sp, #16]
 8012e3e:	9b01      	ldr	r3, [sp, #4]
 8012e40:	4453      	add	r3, sl
 8012e42:	9308      	str	r3, [sp, #32]
 8012e44:	9b02      	ldr	r3, [sp, #8]
 8012e46:	f003 0301 	and.w	r3, r3, #1
 8012e4a:	46b9      	mov	r9, r7
 8012e4c:	9307      	str	r3, [sp, #28]
 8012e4e:	4607      	mov	r7, r0
 8012e50:	9b04      	ldr	r3, [sp, #16]
 8012e52:	4621      	mov	r1, r4
 8012e54:	3b01      	subs	r3, #1
 8012e56:	4628      	mov	r0, r5
 8012e58:	9302      	str	r3, [sp, #8]
 8012e5a:	f7ff faf0 	bl	801243e <quorem>
 8012e5e:	4603      	mov	r3, r0
 8012e60:	3330      	adds	r3, #48	; 0x30
 8012e62:	9005      	str	r0, [sp, #20]
 8012e64:	4649      	mov	r1, r9
 8012e66:	4628      	mov	r0, r5
 8012e68:	9309      	str	r3, [sp, #36]	; 0x24
 8012e6a:	f000 fc59 	bl	8013720 <__mcmp>
 8012e6e:	463a      	mov	r2, r7
 8012e70:	4682      	mov	sl, r0
 8012e72:	4621      	mov	r1, r4
 8012e74:	4630      	mov	r0, r6
 8012e76:	f000 fc6f 	bl	8013758 <__mdiff>
 8012e7a:	68c2      	ldr	r2, [r0, #12]
 8012e7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e7e:	4680      	mov	r8, r0
 8012e80:	bb0a      	cbnz	r2, 8012ec6 <_dtoa_r+0x976>
 8012e82:	4601      	mov	r1, r0
 8012e84:	4628      	mov	r0, r5
 8012e86:	f000 fc4b 	bl	8013720 <__mcmp>
 8012e8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e8c:	4602      	mov	r2, r0
 8012e8e:	4641      	mov	r1, r8
 8012e90:	4630      	mov	r0, r6
 8012e92:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8012e96:	f000 fa07 	bl	80132a8 <_Bfree>
 8012e9a:	9b06      	ldr	r3, [sp, #24]
 8012e9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012e9e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012ea2:	ea43 0102 	orr.w	r1, r3, r2
 8012ea6:	9b07      	ldr	r3, [sp, #28]
 8012ea8:	4319      	orrs	r1, r3
 8012eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012eac:	d10d      	bne.n	8012eca <_dtoa_r+0x97a>
 8012eae:	2b39      	cmp	r3, #57	; 0x39
 8012eb0:	d029      	beq.n	8012f06 <_dtoa_r+0x9b6>
 8012eb2:	f1ba 0f00 	cmp.w	sl, #0
 8012eb6:	dd01      	ble.n	8012ebc <_dtoa_r+0x96c>
 8012eb8:	9b05      	ldr	r3, [sp, #20]
 8012eba:	3331      	adds	r3, #49	; 0x31
 8012ebc:	9a02      	ldr	r2, [sp, #8]
 8012ebe:	7013      	strb	r3, [r2, #0]
 8012ec0:	e775      	b.n	8012dae <_dtoa_r+0x85e>
 8012ec2:	4638      	mov	r0, r7
 8012ec4:	e7b8      	b.n	8012e38 <_dtoa_r+0x8e8>
 8012ec6:	2201      	movs	r2, #1
 8012ec8:	e7e1      	b.n	8012e8e <_dtoa_r+0x93e>
 8012eca:	f1ba 0f00 	cmp.w	sl, #0
 8012ece:	db06      	blt.n	8012ede <_dtoa_r+0x98e>
 8012ed0:	9906      	ldr	r1, [sp, #24]
 8012ed2:	ea41 0a0a 	orr.w	sl, r1, sl
 8012ed6:	9907      	ldr	r1, [sp, #28]
 8012ed8:	ea5a 0a01 	orrs.w	sl, sl, r1
 8012edc:	d120      	bne.n	8012f20 <_dtoa_r+0x9d0>
 8012ede:	2a00      	cmp	r2, #0
 8012ee0:	ddec      	ble.n	8012ebc <_dtoa_r+0x96c>
 8012ee2:	4629      	mov	r1, r5
 8012ee4:	2201      	movs	r2, #1
 8012ee6:	4630      	mov	r0, r6
 8012ee8:	9304      	str	r3, [sp, #16]
 8012eea:	f000 fbad 	bl	8013648 <__lshift>
 8012eee:	4621      	mov	r1, r4
 8012ef0:	4605      	mov	r5, r0
 8012ef2:	f000 fc15 	bl	8013720 <__mcmp>
 8012ef6:	2800      	cmp	r0, #0
 8012ef8:	9b04      	ldr	r3, [sp, #16]
 8012efa:	dc02      	bgt.n	8012f02 <_dtoa_r+0x9b2>
 8012efc:	d1de      	bne.n	8012ebc <_dtoa_r+0x96c>
 8012efe:	07da      	lsls	r2, r3, #31
 8012f00:	d5dc      	bpl.n	8012ebc <_dtoa_r+0x96c>
 8012f02:	2b39      	cmp	r3, #57	; 0x39
 8012f04:	d1d8      	bne.n	8012eb8 <_dtoa_r+0x968>
 8012f06:	9a02      	ldr	r2, [sp, #8]
 8012f08:	2339      	movs	r3, #57	; 0x39
 8012f0a:	7013      	strb	r3, [r2, #0]
 8012f0c:	4643      	mov	r3, r8
 8012f0e:	4698      	mov	r8, r3
 8012f10:	3b01      	subs	r3, #1
 8012f12:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8012f16:	2a39      	cmp	r2, #57	; 0x39
 8012f18:	d051      	beq.n	8012fbe <_dtoa_r+0xa6e>
 8012f1a:	3201      	adds	r2, #1
 8012f1c:	701a      	strb	r2, [r3, #0]
 8012f1e:	e746      	b.n	8012dae <_dtoa_r+0x85e>
 8012f20:	2a00      	cmp	r2, #0
 8012f22:	dd03      	ble.n	8012f2c <_dtoa_r+0x9dc>
 8012f24:	2b39      	cmp	r3, #57	; 0x39
 8012f26:	d0ee      	beq.n	8012f06 <_dtoa_r+0x9b6>
 8012f28:	3301      	adds	r3, #1
 8012f2a:	e7c7      	b.n	8012ebc <_dtoa_r+0x96c>
 8012f2c:	9a04      	ldr	r2, [sp, #16]
 8012f2e:	9908      	ldr	r1, [sp, #32]
 8012f30:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012f34:	428a      	cmp	r2, r1
 8012f36:	d02b      	beq.n	8012f90 <_dtoa_r+0xa40>
 8012f38:	4629      	mov	r1, r5
 8012f3a:	2300      	movs	r3, #0
 8012f3c:	220a      	movs	r2, #10
 8012f3e:	4630      	mov	r0, r6
 8012f40:	f000 f9d4 	bl	80132ec <__multadd>
 8012f44:	45b9      	cmp	r9, r7
 8012f46:	4605      	mov	r5, r0
 8012f48:	f04f 0300 	mov.w	r3, #0
 8012f4c:	f04f 020a 	mov.w	r2, #10
 8012f50:	4649      	mov	r1, r9
 8012f52:	4630      	mov	r0, r6
 8012f54:	d107      	bne.n	8012f66 <_dtoa_r+0xa16>
 8012f56:	f000 f9c9 	bl	80132ec <__multadd>
 8012f5a:	4681      	mov	r9, r0
 8012f5c:	4607      	mov	r7, r0
 8012f5e:	9b04      	ldr	r3, [sp, #16]
 8012f60:	3301      	adds	r3, #1
 8012f62:	9304      	str	r3, [sp, #16]
 8012f64:	e774      	b.n	8012e50 <_dtoa_r+0x900>
 8012f66:	f000 f9c1 	bl	80132ec <__multadd>
 8012f6a:	4639      	mov	r1, r7
 8012f6c:	4681      	mov	r9, r0
 8012f6e:	2300      	movs	r3, #0
 8012f70:	220a      	movs	r2, #10
 8012f72:	4630      	mov	r0, r6
 8012f74:	f000 f9ba 	bl	80132ec <__multadd>
 8012f78:	4607      	mov	r7, r0
 8012f7a:	e7f0      	b.n	8012f5e <_dtoa_r+0xa0e>
 8012f7c:	f1ba 0f00 	cmp.w	sl, #0
 8012f80:	9a01      	ldr	r2, [sp, #4]
 8012f82:	bfcc      	ite	gt
 8012f84:	46d0      	movgt	r8, sl
 8012f86:	f04f 0801 	movle.w	r8, #1
 8012f8a:	4490      	add	r8, r2
 8012f8c:	f04f 0900 	mov.w	r9, #0
 8012f90:	4629      	mov	r1, r5
 8012f92:	2201      	movs	r2, #1
 8012f94:	4630      	mov	r0, r6
 8012f96:	9302      	str	r3, [sp, #8]
 8012f98:	f000 fb56 	bl	8013648 <__lshift>
 8012f9c:	4621      	mov	r1, r4
 8012f9e:	4605      	mov	r5, r0
 8012fa0:	f000 fbbe 	bl	8013720 <__mcmp>
 8012fa4:	2800      	cmp	r0, #0
 8012fa6:	dcb1      	bgt.n	8012f0c <_dtoa_r+0x9bc>
 8012fa8:	d102      	bne.n	8012fb0 <_dtoa_r+0xa60>
 8012faa:	9b02      	ldr	r3, [sp, #8]
 8012fac:	07db      	lsls	r3, r3, #31
 8012fae:	d4ad      	bmi.n	8012f0c <_dtoa_r+0x9bc>
 8012fb0:	4643      	mov	r3, r8
 8012fb2:	4698      	mov	r8, r3
 8012fb4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012fb8:	2a30      	cmp	r2, #48	; 0x30
 8012fba:	d0fa      	beq.n	8012fb2 <_dtoa_r+0xa62>
 8012fbc:	e6f7      	b.n	8012dae <_dtoa_r+0x85e>
 8012fbe:	9a01      	ldr	r2, [sp, #4]
 8012fc0:	429a      	cmp	r2, r3
 8012fc2:	d1a4      	bne.n	8012f0e <_dtoa_r+0x9be>
 8012fc4:	f10b 0b01 	add.w	fp, fp, #1
 8012fc8:	2331      	movs	r3, #49	; 0x31
 8012fca:	e778      	b.n	8012ebe <_dtoa_r+0x96e>
 8012fcc:	4b14      	ldr	r3, [pc, #80]	; (8013020 <_dtoa_r+0xad0>)
 8012fce:	f7ff bb2a 	b.w	8012626 <_dtoa_r+0xd6>
 8012fd2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	f47f ab05 	bne.w	80125e4 <_dtoa_r+0x94>
 8012fda:	4b12      	ldr	r3, [pc, #72]	; (8013024 <_dtoa_r+0xad4>)
 8012fdc:	f7ff bb23 	b.w	8012626 <_dtoa_r+0xd6>
 8012fe0:	f1ba 0f00 	cmp.w	sl, #0
 8012fe4:	dc03      	bgt.n	8012fee <_dtoa_r+0xa9e>
 8012fe6:	9b06      	ldr	r3, [sp, #24]
 8012fe8:	2b02      	cmp	r3, #2
 8012fea:	f73f aec8 	bgt.w	8012d7e <_dtoa_r+0x82e>
 8012fee:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012ff2:	4621      	mov	r1, r4
 8012ff4:	4628      	mov	r0, r5
 8012ff6:	f7ff fa22 	bl	801243e <quorem>
 8012ffa:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8012ffe:	f808 3b01 	strb.w	r3, [r8], #1
 8013002:	9a01      	ldr	r2, [sp, #4]
 8013004:	eba8 0202 	sub.w	r2, r8, r2
 8013008:	4592      	cmp	sl, r2
 801300a:	ddb7      	ble.n	8012f7c <_dtoa_r+0xa2c>
 801300c:	4629      	mov	r1, r5
 801300e:	2300      	movs	r3, #0
 8013010:	220a      	movs	r2, #10
 8013012:	4630      	mov	r0, r6
 8013014:	f000 f96a 	bl	80132ec <__multadd>
 8013018:	4605      	mov	r5, r0
 801301a:	e7ea      	b.n	8012ff2 <_dtoa_r+0xaa2>
 801301c:	080145f0 	.word	0x080145f0
 8013020:	08014550 	.word	0x08014550
 8013024:	08014574 	.word	0x08014574

08013028 <_free_r>:
 8013028:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801302a:	2900      	cmp	r1, #0
 801302c:	d044      	beq.n	80130b8 <_free_r+0x90>
 801302e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013032:	9001      	str	r0, [sp, #4]
 8013034:	2b00      	cmp	r3, #0
 8013036:	f1a1 0404 	sub.w	r4, r1, #4
 801303a:	bfb8      	it	lt
 801303c:	18e4      	addlt	r4, r4, r3
 801303e:	f000 f8e7 	bl	8013210 <__malloc_lock>
 8013042:	4a1e      	ldr	r2, [pc, #120]	; (80130bc <_free_r+0x94>)
 8013044:	9801      	ldr	r0, [sp, #4]
 8013046:	6813      	ldr	r3, [r2, #0]
 8013048:	b933      	cbnz	r3, 8013058 <_free_r+0x30>
 801304a:	6063      	str	r3, [r4, #4]
 801304c:	6014      	str	r4, [r2, #0]
 801304e:	b003      	add	sp, #12
 8013050:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013054:	f000 b8e2 	b.w	801321c <__malloc_unlock>
 8013058:	42a3      	cmp	r3, r4
 801305a:	d908      	bls.n	801306e <_free_r+0x46>
 801305c:	6825      	ldr	r5, [r4, #0]
 801305e:	1961      	adds	r1, r4, r5
 8013060:	428b      	cmp	r3, r1
 8013062:	bf01      	itttt	eq
 8013064:	6819      	ldreq	r1, [r3, #0]
 8013066:	685b      	ldreq	r3, [r3, #4]
 8013068:	1949      	addeq	r1, r1, r5
 801306a:	6021      	streq	r1, [r4, #0]
 801306c:	e7ed      	b.n	801304a <_free_r+0x22>
 801306e:	461a      	mov	r2, r3
 8013070:	685b      	ldr	r3, [r3, #4]
 8013072:	b10b      	cbz	r3, 8013078 <_free_r+0x50>
 8013074:	42a3      	cmp	r3, r4
 8013076:	d9fa      	bls.n	801306e <_free_r+0x46>
 8013078:	6811      	ldr	r1, [r2, #0]
 801307a:	1855      	adds	r5, r2, r1
 801307c:	42a5      	cmp	r5, r4
 801307e:	d10b      	bne.n	8013098 <_free_r+0x70>
 8013080:	6824      	ldr	r4, [r4, #0]
 8013082:	4421      	add	r1, r4
 8013084:	1854      	adds	r4, r2, r1
 8013086:	42a3      	cmp	r3, r4
 8013088:	6011      	str	r1, [r2, #0]
 801308a:	d1e0      	bne.n	801304e <_free_r+0x26>
 801308c:	681c      	ldr	r4, [r3, #0]
 801308e:	685b      	ldr	r3, [r3, #4]
 8013090:	6053      	str	r3, [r2, #4]
 8013092:	440c      	add	r4, r1
 8013094:	6014      	str	r4, [r2, #0]
 8013096:	e7da      	b.n	801304e <_free_r+0x26>
 8013098:	d902      	bls.n	80130a0 <_free_r+0x78>
 801309a:	230c      	movs	r3, #12
 801309c:	6003      	str	r3, [r0, #0]
 801309e:	e7d6      	b.n	801304e <_free_r+0x26>
 80130a0:	6825      	ldr	r5, [r4, #0]
 80130a2:	1961      	adds	r1, r4, r5
 80130a4:	428b      	cmp	r3, r1
 80130a6:	bf04      	itt	eq
 80130a8:	6819      	ldreq	r1, [r3, #0]
 80130aa:	685b      	ldreq	r3, [r3, #4]
 80130ac:	6063      	str	r3, [r4, #4]
 80130ae:	bf04      	itt	eq
 80130b0:	1949      	addeq	r1, r1, r5
 80130b2:	6021      	streq	r1, [r4, #0]
 80130b4:	6054      	str	r4, [r2, #4]
 80130b6:	e7ca      	b.n	801304e <_free_r+0x26>
 80130b8:	b003      	add	sp, #12
 80130ba:	bd30      	pop	{r4, r5, pc}
 80130bc:	24009c64 	.word	0x24009c64

080130c0 <malloc>:
 80130c0:	4b02      	ldr	r3, [pc, #8]	; (80130cc <malloc+0xc>)
 80130c2:	4601      	mov	r1, r0
 80130c4:	6818      	ldr	r0, [r3, #0]
 80130c6:	f000 b823 	b.w	8013110 <_malloc_r>
 80130ca:	bf00      	nop
 80130cc:	2400006c 	.word	0x2400006c

080130d0 <sbrk_aligned>:
 80130d0:	b570      	push	{r4, r5, r6, lr}
 80130d2:	4e0e      	ldr	r6, [pc, #56]	; (801310c <sbrk_aligned+0x3c>)
 80130d4:	460c      	mov	r4, r1
 80130d6:	6831      	ldr	r1, [r6, #0]
 80130d8:	4605      	mov	r5, r0
 80130da:	b911      	cbnz	r1, 80130e2 <sbrk_aligned+0x12>
 80130dc:	f000 fea8 	bl	8013e30 <_sbrk_r>
 80130e0:	6030      	str	r0, [r6, #0]
 80130e2:	4621      	mov	r1, r4
 80130e4:	4628      	mov	r0, r5
 80130e6:	f000 fea3 	bl	8013e30 <_sbrk_r>
 80130ea:	1c43      	adds	r3, r0, #1
 80130ec:	d00a      	beq.n	8013104 <sbrk_aligned+0x34>
 80130ee:	1cc4      	adds	r4, r0, #3
 80130f0:	f024 0403 	bic.w	r4, r4, #3
 80130f4:	42a0      	cmp	r0, r4
 80130f6:	d007      	beq.n	8013108 <sbrk_aligned+0x38>
 80130f8:	1a21      	subs	r1, r4, r0
 80130fa:	4628      	mov	r0, r5
 80130fc:	f000 fe98 	bl	8013e30 <_sbrk_r>
 8013100:	3001      	adds	r0, #1
 8013102:	d101      	bne.n	8013108 <sbrk_aligned+0x38>
 8013104:	f04f 34ff 	mov.w	r4, #4294967295
 8013108:	4620      	mov	r0, r4
 801310a:	bd70      	pop	{r4, r5, r6, pc}
 801310c:	24009c68 	.word	0x24009c68

08013110 <_malloc_r>:
 8013110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013114:	1ccd      	adds	r5, r1, #3
 8013116:	f025 0503 	bic.w	r5, r5, #3
 801311a:	3508      	adds	r5, #8
 801311c:	2d0c      	cmp	r5, #12
 801311e:	bf38      	it	cc
 8013120:	250c      	movcc	r5, #12
 8013122:	2d00      	cmp	r5, #0
 8013124:	4607      	mov	r7, r0
 8013126:	db01      	blt.n	801312c <_malloc_r+0x1c>
 8013128:	42a9      	cmp	r1, r5
 801312a:	d905      	bls.n	8013138 <_malloc_r+0x28>
 801312c:	230c      	movs	r3, #12
 801312e:	603b      	str	r3, [r7, #0]
 8013130:	2600      	movs	r6, #0
 8013132:	4630      	mov	r0, r6
 8013134:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013138:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801320c <_malloc_r+0xfc>
 801313c:	f000 f868 	bl	8013210 <__malloc_lock>
 8013140:	f8d8 3000 	ldr.w	r3, [r8]
 8013144:	461c      	mov	r4, r3
 8013146:	bb5c      	cbnz	r4, 80131a0 <_malloc_r+0x90>
 8013148:	4629      	mov	r1, r5
 801314a:	4638      	mov	r0, r7
 801314c:	f7ff ffc0 	bl	80130d0 <sbrk_aligned>
 8013150:	1c43      	adds	r3, r0, #1
 8013152:	4604      	mov	r4, r0
 8013154:	d155      	bne.n	8013202 <_malloc_r+0xf2>
 8013156:	f8d8 4000 	ldr.w	r4, [r8]
 801315a:	4626      	mov	r6, r4
 801315c:	2e00      	cmp	r6, #0
 801315e:	d145      	bne.n	80131ec <_malloc_r+0xdc>
 8013160:	2c00      	cmp	r4, #0
 8013162:	d048      	beq.n	80131f6 <_malloc_r+0xe6>
 8013164:	6823      	ldr	r3, [r4, #0]
 8013166:	4631      	mov	r1, r6
 8013168:	4638      	mov	r0, r7
 801316a:	eb04 0903 	add.w	r9, r4, r3
 801316e:	f000 fe5f 	bl	8013e30 <_sbrk_r>
 8013172:	4581      	cmp	r9, r0
 8013174:	d13f      	bne.n	80131f6 <_malloc_r+0xe6>
 8013176:	6821      	ldr	r1, [r4, #0]
 8013178:	1a6d      	subs	r5, r5, r1
 801317a:	4629      	mov	r1, r5
 801317c:	4638      	mov	r0, r7
 801317e:	f7ff ffa7 	bl	80130d0 <sbrk_aligned>
 8013182:	3001      	adds	r0, #1
 8013184:	d037      	beq.n	80131f6 <_malloc_r+0xe6>
 8013186:	6823      	ldr	r3, [r4, #0]
 8013188:	442b      	add	r3, r5
 801318a:	6023      	str	r3, [r4, #0]
 801318c:	f8d8 3000 	ldr.w	r3, [r8]
 8013190:	2b00      	cmp	r3, #0
 8013192:	d038      	beq.n	8013206 <_malloc_r+0xf6>
 8013194:	685a      	ldr	r2, [r3, #4]
 8013196:	42a2      	cmp	r2, r4
 8013198:	d12b      	bne.n	80131f2 <_malloc_r+0xe2>
 801319a:	2200      	movs	r2, #0
 801319c:	605a      	str	r2, [r3, #4]
 801319e:	e00f      	b.n	80131c0 <_malloc_r+0xb0>
 80131a0:	6822      	ldr	r2, [r4, #0]
 80131a2:	1b52      	subs	r2, r2, r5
 80131a4:	d41f      	bmi.n	80131e6 <_malloc_r+0xd6>
 80131a6:	2a0b      	cmp	r2, #11
 80131a8:	d917      	bls.n	80131da <_malloc_r+0xca>
 80131aa:	1961      	adds	r1, r4, r5
 80131ac:	42a3      	cmp	r3, r4
 80131ae:	6025      	str	r5, [r4, #0]
 80131b0:	bf18      	it	ne
 80131b2:	6059      	strne	r1, [r3, #4]
 80131b4:	6863      	ldr	r3, [r4, #4]
 80131b6:	bf08      	it	eq
 80131b8:	f8c8 1000 	streq.w	r1, [r8]
 80131bc:	5162      	str	r2, [r4, r5]
 80131be:	604b      	str	r3, [r1, #4]
 80131c0:	4638      	mov	r0, r7
 80131c2:	f104 060b 	add.w	r6, r4, #11
 80131c6:	f000 f829 	bl	801321c <__malloc_unlock>
 80131ca:	f026 0607 	bic.w	r6, r6, #7
 80131ce:	1d23      	adds	r3, r4, #4
 80131d0:	1af2      	subs	r2, r6, r3
 80131d2:	d0ae      	beq.n	8013132 <_malloc_r+0x22>
 80131d4:	1b9b      	subs	r3, r3, r6
 80131d6:	50a3      	str	r3, [r4, r2]
 80131d8:	e7ab      	b.n	8013132 <_malloc_r+0x22>
 80131da:	42a3      	cmp	r3, r4
 80131dc:	6862      	ldr	r2, [r4, #4]
 80131de:	d1dd      	bne.n	801319c <_malloc_r+0x8c>
 80131e0:	f8c8 2000 	str.w	r2, [r8]
 80131e4:	e7ec      	b.n	80131c0 <_malloc_r+0xb0>
 80131e6:	4623      	mov	r3, r4
 80131e8:	6864      	ldr	r4, [r4, #4]
 80131ea:	e7ac      	b.n	8013146 <_malloc_r+0x36>
 80131ec:	4634      	mov	r4, r6
 80131ee:	6876      	ldr	r6, [r6, #4]
 80131f0:	e7b4      	b.n	801315c <_malloc_r+0x4c>
 80131f2:	4613      	mov	r3, r2
 80131f4:	e7cc      	b.n	8013190 <_malloc_r+0x80>
 80131f6:	230c      	movs	r3, #12
 80131f8:	603b      	str	r3, [r7, #0]
 80131fa:	4638      	mov	r0, r7
 80131fc:	f000 f80e 	bl	801321c <__malloc_unlock>
 8013200:	e797      	b.n	8013132 <_malloc_r+0x22>
 8013202:	6025      	str	r5, [r4, #0]
 8013204:	e7dc      	b.n	80131c0 <_malloc_r+0xb0>
 8013206:	605b      	str	r3, [r3, #4]
 8013208:	deff      	udf	#255	; 0xff
 801320a:	bf00      	nop
 801320c:	24009c64 	.word	0x24009c64

08013210 <__malloc_lock>:
 8013210:	4801      	ldr	r0, [pc, #4]	; (8013218 <__malloc_lock+0x8>)
 8013212:	f7ff b904 	b.w	801241e <__retarget_lock_acquire_recursive>
 8013216:	bf00      	nop
 8013218:	24009c60 	.word	0x24009c60

0801321c <__malloc_unlock>:
 801321c:	4801      	ldr	r0, [pc, #4]	; (8013224 <__malloc_unlock+0x8>)
 801321e:	f7ff b8ff 	b.w	8012420 <__retarget_lock_release_recursive>
 8013222:	bf00      	nop
 8013224:	24009c60 	.word	0x24009c60

08013228 <_Balloc>:
 8013228:	b570      	push	{r4, r5, r6, lr}
 801322a:	69c6      	ldr	r6, [r0, #28]
 801322c:	4604      	mov	r4, r0
 801322e:	460d      	mov	r5, r1
 8013230:	b976      	cbnz	r6, 8013250 <_Balloc+0x28>
 8013232:	2010      	movs	r0, #16
 8013234:	f7ff ff44 	bl	80130c0 <malloc>
 8013238:	4602      	mov	r2, r0
 801323a:	61e0      	str	r0, [r4, #28]
 801323c:	b920      	cbnz	r0, 8013248 <_Balloc+0x20>
 801323e:	4b18      	ldr	r3, [pc, #96]	; (80132a0 <_Balloc+0x78>)
 8013240:	4818      	ldr	r0, [pc, #96]	; (80132a4 <_Balloc+0x7c>)
 8013242:	216b      	movs	r1, #107	; 0x6b
 8013244:	f000 fe04 	bl	8013e50 <__assert_func>
 8013248:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801324c:	6006      	str	r6, [r0, #0]
 801324e:	60c6      	str	r6, [r0, #12]
 8013250:	69e6      	ldr	r6, [r4, #28]
 8013252:	68f3      	ldr	r3, [r6, #12]
 8013254:	b183      	cbz	r3, 8013278 <_Balloc+0x50>
 8013256:	69e3      	ldr	r3, [r4, #28]
 8013258:	68db      	ldr	r3, [r3, #12]
 801325a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801325e:	b9b8      	cbnz	r0, 8013290 <_Balloc+0x68>
 8013260:	2101      	movs	r1, #1
 8013262:	fa01 f605 	lsl.w	r6, r1, r5
 8013266:	1d72      	adds	r2, r6, #5
 8013268:	0092      	lsls	r2, r2, #2
 801326a:	4620      	mov	r0, r4
 801326c:	f000 fe0e 	bl	8013e8c <_calloc_r>
 8013270:	b160      	cbz	r0, 801328c <_Balloc+0x64>
 8013272:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013276:	e00e      	b.n	8013296 <_Balloc+0x6e>
 8013278:	2221      	movs	r2, #33	; 0x21
 801327a:	2104      	movs	r1, #4
 801327c:	4620      	mov	r0, r4
 801327e:	f000 fe05 	bl	8013e8c <_calloc_r>
 8013282:	69e3      	ldr	r3, [r4, #28]
 8013284:	60f0      	str	r0, [r6, #12]
 8013286:	68db      	ldr	r3, [r3, #12]
 8013288:	2b00      	cmp	r3, #0
 801328a:	d1e4      	bne.n	8013256 <_Balloc+0x2e>
 801328c:	2000      	movs	r0, #0
 801328e:	bd70      	pop	{r4, r5, r6, pc}
 8013290:	6802      	ldr	r2, [r0, #0]
 8013292:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013296:	2300      	movs	r3, #0
 8013298:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801329c:	e7f7      	b.n	801328e <_Balloc+0x66>
 801329e:	bf00      	nop
 80132a0:	08014581 	.word	0x08014581
 80132a4:	08014601 	.word	0x08014601

080132a8 <_Bfree>:
 80132a8:	b570      	push	{r4, r5, r6, lr}
 80132aa:	69c6      	ldr	r6, [r0, #28]
 80132ac:	4605      	mov	r5, r0
 80132ae:	460c      	mov	r4, r1
 80132b0:	b976      	cbnz	r6, 80132d0 <_Bfree+0x28>
 80132b2:	2010      	movs	r0, #16
 80132b4:	f7ff ff04 	bl	80130c0 <malloc>
 80132b8:	4602      	mov	r2, r0
 80132ba:	61e8      	str	r0, [r5, #28]
 80132bc:	b920      	cbnz	r0, 80132c8 <_Bfree+0x20>
 80132be:	4b09      	ldr	r3, [pc, #36]	; (80132e4 <_Bfree+0x3c>)
 80132c0:	4809      	ldr	r0, [pc, #36]	; (80132e8 <_Bfree+0x40>)
 80132c2:	218f      	movs	r1, #143	; 0x8f
 80132c4:	f000 fdc4 	bl	8013e50 <__assert_func>
 80132c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80132cc:	6006      	str	r6, [r0, #0]
 80132ce:	60c6      	str	r6, [r0, #12]
 80132d0:	b13c      	cbz	r4, 80132e2 <_Bfree+0x3a>
 80132d2:	69eb      	ldr	r3, [r5, #28]
 80132d4:	6862      	ldr	r2, [r4, #4]
 80132d6:	68db      	ldr	r3, [r3, #12]
 80132d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80132dc:	6021      	str	r1, [r4, #0]
 80132de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80132e2:	bd70      	pop	{r4, r5, r6, pc}
 80132e4:	08014581 	.word	0x08014581
 80132e8:	08014601 	.word	0x08014601

080132ec <__multadd>:
 80132ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132f0:	690d      	ldr	r5, [r1, #16]
 80132f2:	4607      	mov	r7, r0
 80132f4:	460c      	mov	r4, r1
 80132f6:	461e      	mov	r6, r3
 80132f8:	f101 0c14 	add.w	ip, r1, #20
 80132fc:	2000      	movs	r0, #0
 80132fe:	f8dc 3000 	ldr.w	r3, [ip]
 8013302:	b299      	uxth	r1, r3
 8013304:	fb02 6101 	mla	r1, r2, r1, r6
 8013308:	0c1e      	lsrs	r6, r3, #16
 801330a:	0c0b      	lsrs	r3, r1, #16
 801330c:	fb02 3306 	mla	r3, r2, r6, r3
 8013310:	b289      	uxth	r1, r1
 8013312:	3001      	adds	r0, #1
 8013314:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013318:	4285      	cmp	r5, r0
 801331a:	f84c 1b04 	str.w	r1, [ip], #4
 801331e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013322:	dcec      	bgt.n	80132fe <__multadd+0x12>
 8013324:	b30e      	cbz	r6, 801336a <__multadd+0x7e>
 8013326:	68a3      	ldr	r3, [r4, #8]
 8013328:	42ab      	cmp	r3, r5
 801332a:	dc19      	bgt.n	8013360 <__multadd+0x74>
 801332c:	6861      	ldr	r1, [r4, #4]
 801332e:	4638      	mov	r0, r7
 8013330:	3101      	adds	r1, #1
 8013332:	f7ff ff79 	bl	8013228 <_Balloc>
 8013336:	4680      	mov	r8, r0
 8013338:	b928      	cbnz	r0, 8013346 <__multadd+0x5a>
 801333a:	4602      	mov	r2, r0
 801333c:	4b0c      	ldr	r3, [pc, #48]	; (8013370 <__multadd+0x84>)
 801333e:	480d      	ldr	r0, [pc, #52]	; (8013374 <__multadd+0x88>)
 8013340:	21ba      	movs	r1, #186	; 0xba
 8013342:	f000 fd85 	bl	8013e50 <__assert_func>
 8013346:	6922      	ldr	r2, [r4, #16]
 8013348:	3202      	adds	r2, #2
 801334a:	f104 010c 	add.w	r1, r4, #12
 801334e:	0092      	lsls	r2, r2, #2
 8013350:	300c      	adds	r0, #12
 8013352:	f7ff f866 	bl	8012422 <memcpy>
 8013356:	4621      	mov	r1, r4
 8013358:	4638      	mov	r0, r7
 801335a:	f7ff ffa5 	bl	80132a8 <_Bfree>
 801335e:	4644      	mov	r4, r8
 8013360:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013364:	3501      	adds	r5, #1
 8013366:	615e      	str	r6, [r3, #20]
 8013368:	6125      	str	r5, [r4, #16]
 801336a:	4620      	mov	r0, r4
 801336c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013370:	080145f0 	.word	0x080145f0
 8013374:	08014601 	.word	0x08014601

08013378 <__hi0bits>:
 8013378:	0c03      	lsrs	r3, r0, #16
 801337a:	041b      	lsls	r3, r3, #16
 801337c:	b9d3      	cbnz	r3, 80133b4 <__hi0bits+0x3c>
 801337e:	0400      	lsls	r0, r0, #16
 8013380:	2310      	movs	r3, #16
 8013382:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013386:	bf04      	itt	eq
 8013388:	0200      	lsleq	r0, r0, #8
 801338a:	3308      	addeq	r3, #8
 801338c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013390:	bf04      	itt	eq
 8013392:	0100      	lsleq	r0, r0, #4
 8013394:	3304      	addeq	r3, #4
 8013396:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801339a:	bf04      	itt	eq
 801339c:	0080      	lsleq	r0, r0, #2
 801339e:	3302      	addeq	r3, #2
 80133a0:	2800      	cmp	r0, #0
 80133a2:	db05      	blt.n	80133b0 <__hi0bits+0x38>
 80133a4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80133a8:	f103 0301 	add.w	r3, r3, #1
 80133ac:	bf08      	it	eq
 80133ae:	2320      	moveq	r3, #32
 80133b0:	4618      	mov	r0, r3
 80133b2:	4770      	bx	lr
 80133b4:	2300      	movs	r3, #0
 80133b6:	e7e4      	b.n	8013382 <__hi0bits+0xa>

080133b8 <__lo0bits>:
 80133b8:	6803      	ldr	r3, [r0, #0]
 80133ba:	f013 0207 	ands.w	r2, r3, #7
 80133be:	d00c      	beq.n	80133da <__lo0bits+0x22>
 80133c0:	07d9      	lsls	r1, r3, #31
 80133c2:	d422      	bmi.n	801340a <__lo0bits+0x52>
 80133c4:	079a      	lsls	r2, r3, #30
 80133c6:	bf49      	itett	mi
 80133c8:	085b      	lsrmi	r3, r3, #1
 80133ca:	089b      	lsrpl	r3, r3, #2
 80133cc:	6003      	strmi	r3, [r0, #0]
 80133ce:	2201      	movmi	r2, #1
 80133d0:	bf5c      	itt	pl
 80133d2:	6003      	strpl	r3, [r0, #0]
 80133d4:	2202      	movpl	r2, #2
 80133d6:	4610      	mov	r0, r2
 80133d8:	4770      	bx	lr
 80133da:	b299      	uxth	r1, r3
 80133dc:	b909      	cbnz	r1, 80133e2 <__lo0bits+0x2a>
 80133de:	0c1b      	lsrs	r3, r3, #16
 80133e0:	2210      	movs	r2, #16
 80133e2:	b2d9      	uxtb	r1, r3
 80133e4:	b909      	cbnz	r1, 80133ea <__lo0bits+0x32>
 80133e6:	3208      	adds	r2, #8
 80133e8:	0a1b      	lsrs	r3, r3, #8
 80133ea:	0719      	lsls	r1, r3, #28
 80133ec:	bf04      	itt	eq
 80133ee:	091b      	lsreq	r3, r3, #4
 80133f0:	3204      	addeq	r2, #4
 80133f2:	0799      	lsls	r1, r3, #30
 80133f4:	bf04      	itt	eq
 80133f6:	089b      	lsreq	r3, r3, #2
 80133f8:	3202      	addeq	r2, #2
 80133fa:	07d9      	lsls	r1, r3, #31
 80133fc:	d403      	bmi.n	8013406 <__lo0bits+0x4e>
 80133fe:	085b      	lsrs	r3, r3, #1
 8013400:	f102 0201 	add.w	r2, r2, #1
 8013404:	d003      	beq.n	801340e <__lo0bits+0x56>
 8013406:	6003      	str	r3, [r0, #0]
 8013408:	e7e5      	b.n	80133d6 <__lo0bits+0x1e>
 801340a:	2200      	movs	r2, #0
 801340c:	e7e3      	b.n	80133d6 <__lo0bits+0x1e>
 801340e:	2220      	movs	r2, #32
 8013410:	e7e1      	b.n	80133d6 <__lo0bits+0x1e>
	...

08013414 <__i2b>:
 8013414:	b510      	push	{r4, lr}
 8013416:	460c      	mov	r4, r1
 8013418:	2101      	movs	r1, #1
 801341a:	f7ff ff05 	bl	8013228 <_Balloc>
 801341e:	4602      	mov	r2, r0
 8013420:	b928      	cbnz	r0, 801342e <__i2b+0x1a>
 8013422:	4b05      	ldr	r3, [pc, #20]	; (8013438 <__i2b+0x24>)
 8013424:	4805      	ldr	r0, [pc, #20]	; (801343c <__i2b+0x28>)
 8013426:	f240 1145 	movw	r1, #325	; 0x145
 801342a:	f000 fd11 	bl	8013e50 <__assert_func>
 801342e:	2301      	movs	r3, #1
 8013430:	6144      	str	r4, [r0, #20]
 8013432:	6103      	str	r3, [r0, #16]
 8013434:	bd10      	pop	{r4, pc}
 8013436:	bf00      	nop
 8013438:	080145f0 	.word	0x080145f0
 801343c:	08014601 	.word	0x08014601

08013440 <__multiply>:
 8013440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013444:	4691      	mov	r9, r2
 8013446:	690a      	ldr	r2, [r1, #16]
 8013448:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801344c:	429a      	cmp	r2, r3
 801344e:	bfb8      	it	lt
 8013450:	460b      	movlt	r3, r1
 8013452:	460c      	mov	r4, r1
 8013454:	bfbc      	itt	lt
 8013456:	464c      	movlt	r4, r9
 8013458:	4699      	movlt	r9, r3
 801345a:	6927      	ldr	r7, [r4, #16]
 801345c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013460:	68a3      	ldr	r3, [r4, #8]
 8013462:	6861      	ldr	r1, [r4, #4]
 8013464:	eb07 060a 	add.w	r6, r7, sl
 8013468:	42b3      	cmp	r3, r6
 801346a:	b085      	sub	sp, #20
 801346c:	bfb8      	it	lt
 801346e:	3101      	addlt	r1, #1
 8013470:	f7ff feda 	bl	8013228 <_Balloc>
 8013474:	b930      	cbnz	r0, 8013484 <__multiply+0x44>
 8013476:	4602      	mov	r2, r0
 8013478:	4b44      	ldr	r3, [pc, #272]	; (801358c <__multiply+0x14c>)
 801347a:	4845      	ldr	r0, [pc, #276]	; (8013590 <__multiply+0x150>)
 801347c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8013480:	f000 fce6 	bl	8013e50 <__assert_func>
 8013484:	f100 0514 	add.w	r5, r0, #20
 8013488:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801348c:	462b      	mov	r3, r5
 801348e:	2200      	movs	r2, #0
 8013490:	4543      	cmp	r3, r8
 8013492:	d321      	bcc.n	80134d8 <__multiply+0x98>
 8013494:	f104 0314 	add.w	r3, r4, #20
 8013498:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801349c:	f109 0314 	add.w	r3, r9, #20
 80134a0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80134a4:	9202      	str	r2, [sp, #8]
 80134a6:	1b3a      	subs	r2, r7, r4
 80134a8:	3a15      	subs	r2, #21
 80134aa:	f022 0203 	bic.w	r2, r2, #3
 80134ae:	3204      	adds	r2, #4
 80134b0:	f104 0115 	add.w	r1, r4, #21
 80134b4:	428f      	cmp	r7, r1
 80134b6:	bf38      	it	cc
 80134b8:	2204      	movcc	r2, #4
 80134ba:	9201      	str	r2, [sp, #4]
 80134bc:	9a02      	ldr	r2, [sp, #8]
 80134be:	9303      	str	r3, [sp, #12]
 80134c0:	429a      	cmp	r2, r3
 80134c2:	d80c      	bhi.n	80134de <__multiply+0x9e>
 80134c4:	2e00      	cmp	r6, #0
 80134c6:	dd03      	ble.n	80134d0 <__multiply+0x90>
 80134c8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d05b      	beq.n	8013588 <__multiply+0x148>
 80134d0:	6106      	str	r6, [r0, #16]
 80134d2:	b005      	add	sp, #20
 80134d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134d8:	f843 2b04 	str.w	r2, [r3], #4
 80134dc:	e7d8      	b.n	8013490 <__multiply+0x50>
 80134de:	f8b3 a000 	ldrh.w	sl, [r3]
 80134e2:	f1ba 0f00 	cmp.w	sl, #0
 80134e6:	d024      	beq.n	8013532 <__multiply+0xf2>
 80134e8:	f104 0e14 	add.w	lr, r4, #20
 80134ec:	46a9      	mov	r9, r5
 80134ee:	f04f 0c00 	mov.w	ip, #0
 80134f2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80134f6:	f8d9 1000 	ldr.w	r1, [r9]
 80134fa:	fa1f fb82 	uxth.w	fp, r2
 80134fe:	b289      	uxth	r1, r1
 8013500:	fb0a 110b 	mla	r1, sl, fp, r1
 8013504:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8013508:	f8d9 2000 	ldr.w	r2, [r9]
 801350c:	4461      	add	r1, ip
 801350e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013512:	fb0a c20b 	mla	r2, sl, fp, ip
 8013516:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801351a:	b289      	uxth	r1, r1
 801351c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013520:	4577      	cmp	r7, lr
 8013522:	f849 1b04 	str.w	r1, [r9], #4
 8013526:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801352a:	d8e2      	bhi.n	80134f2 <__multiply+0xb2>
 801352c:	9a01      	ldr	r2, [sp, #4]
 801352e:	f845 c002 	str.w	ip, [r5, r2]
 8013532:	9a03      	ldr	r2, [sp, #12]
 8013534:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013538:	3304      	adds	r3, #4
 801353a:	f1b9 0f00 	cmp.w	r9, #0
 801353e:	d021      	beq.n	8013584 <__multiply+0x144>
 8013540:	6829      	ldr	r1, [r5, #0]
 8013542:	f104 0c14 	add.w	ip, r4, #20
 8013546:	46ae      	mov	lr, r5
 8013548:	f04f 0a00 	mov.w	sl, #0
 801354c:	f8bc b000 	ldrh.w	fp, [ip]
 8013550:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8013554:	fb09 220b 	mla	r2, r9, fp, r2
 8013558:	4452      	add	r2, sl
 801355a:	b289      	uxth	r1, r1
 801355c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013560:	f84e 1b04 	str.w	r1, [lr], #4
 8013564:	f85c 1b04 	ldr.w	r1, [ip], #4
 8013568:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801356c:	f8be 1000 	ldrh.w	r1, [lr]
 8013570:	fb09 110a 	mla	r1, r9, sl, r1
 8013574:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8013578:	4567      	cmp	r7, ip
 801357a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801357e:	d8e5      	bhi.n	801354c <__multiply+0x10c>
 8013580:	9a01      	ldr	r2, [sp, #4]
 8013582:	50a9      	str	r1, [r5, r2]
 8013584:	3504      	adds	r5, #4
 8013586:	e799      	b.n	80134bc <__multiply+0x7c>
 8013588:	3e01      	subs	r6, #1
 801358a:	e79b      	b.n	80134c4 <__multiply+0x84>
 801358c:	080145f0 	.word	0x080145f0
 8013590:	08014601 	.word	0x08014601

08013594 <__pow5mult>:
 8013594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013598:	4615      	mov	r5, r2
 801359a:	f012 0203 	ands.w	r2, r2, #3
 801359e:	4606      	mov	r6, r0
 80135a0:	460f      	mov	r7, r1
 80135a2:	d007      	beq.n	80135b4 <__pow5mult+0x20>
 80135a4:	4c25      	ldr	r4, [pc, #148]	; (801363c <__pow5mult+0xa8>)
 80135a6:	3a01      	subs	r2, #1
 80135a8:	2300      	movs	r3, #0
 80135aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80135ae:	f7ff fe9d 	bl	80132ec <__multadd>
 80135b2:	4607      	mov	r7, r0
 80135b4:	10ad      	asrs	r5, r5, #2
 80135b6:	d03d      	beq.n	8013634 <__pow5mult+0xa0>
 80135b8:	69f4      	ldr	r4, [r6, #28]
 80135ba:	b97c      	cbnz	r4, 80135dc <__pow5mult+0x48>
 80135bc:	2010      	movs	r0, #16
 80135be:	f7ff fd7f 	bl	80130c0 <malloc>
 80135c2:	4602      	mov	r2, r0
 80135c4:	61f0      	str	r0, [r6, #28]
 80135c6:	b928      	cbnz	r0, 80135d4 <__pow5mult+0x40>
 80135c8:	4b1d      	ldr	r3, [pc, #116]	; (8013640 <__pow5mult+0xac>)
 80135ca:	481e      	ldr	r0, [pc, #120]	; (8013644 <__pow5mult+0xb0>)
 80135cc:	f240 11b3 	movw	r1, #435	; 0x1b3
 80135d0:	f000 fc3e 	bl	8013e50 <__assert_func>
 80135d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80135d8:	6004      	str	r4, [r0, #0]
 80135da:	60c4      	str	r4, [r0, #12]
 80135dc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80135e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80135e4:	b94c      	cbnz	r4, 80135fa <__pow5mult+0x66>
 80135e6:	f240 2171 	movw	r1, #625	; 0x271
 80135ea:	4630      	mov	r0, r6
 80135ec:	f7ff ff12 	bl	8013414 <__i2b>
 80135f0:	2300      	movs	r3, #0
 80135f2:	f8c8 0008 	str.w	r0, [r8, #8]
 80135f6:	4604      	mov	r4, r0
 80135f8:	6003      	str	r3, [r0, #0]
 80135fa:	f04f 0900 	mov.w	r9, #0
 80135fe:	07eb      	lsls	r3, r5, #31
 8013600:	d50a      	bpl.n	8013618 <__pow5mult+0x84>
 8013602:	4639      	mov	r1, r7
 8013604:	4622      	mov	r2, r4
 8013606:	4630      	mov	r0, r6
 8013608:	f7ff ff1a 	bl	8013440 <__multiply>
 801360c:	4639      	mov	r1, r7
 801360e:	4680      	mov	r8, r0
 8013610:	4630      	mov	r0, r6
 8013612:	f7ff fe49 	bl	80132a8 <_Bfree>
 8013616:	4647      	mov	r7, r8
 8013618:	106d      	asrs	r5, r5, #1
 801361a:	d00b      	beq.n	8013634 <__pow5mult+0xa0>
 801361c:	6820      	ldr	r0, [r4, #0]
 801361e:	b938      	cbnz	r0, 8013630 <__pow5mult+0x9c>
 8013620:	4622      	mov	r2, r4
 8013622:	4621      	mov	r1, r4
 8013624:	4630      	mov	r0, r6
 8013626:	f7ff ff0b 	bl	8013440 <__multiply>
 801362a:	6020      	str	r0, [r4, #0]
 801362c:	f8c0 9000 	str.w	r9, [r0]
 8013630:	4604      	mov	r4, r0
 8013632:	e7e4      	b.n	80135fe <__pow5mult+0x6a>
 8013634:	4638      	mov	r0, r7
 8013636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801363a:	bf00      	nop
 801363c:	08014750 	.word	0x08014750
 8013640:	08014581 	.word	0x08014581
 8013644:	08014601 	.word	0x08014601

08013648 <__lshift>:
 8013648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801364c:	460c      	mov	r4, r1
 801364e:	6849      	ldr	r1, [r1, #4]
 8013650:	6923      	ldr	r3, [r4, #16]
 8013652:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013656:	68a3      	ldr	r3, [r4, #8]
 8013658:	4607      	mov	r7, r0
 801365a:	4691      	mov	r9, r2
 801365c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013660:	f108 0601 	add.w	r6, r8, #1
 8013664:	42b3      	cmp	r3, r6
 8013666:	db0b      	blt.n	8013680 <__lshift+0x38>
 8013668:	4638      	mov	r0, r7
 801366a:	f7ff fddd 	bl	8013228 <_Balloc>
 801366e:	4605      	mov	r5, r0
 8013670:	b948      	cbnz	r0, 8013686 <__lshift+0x3e>
 8013672:	4602      	mov	r2, r0
 8013674:	4b28      	ldr	r3, [pc, #160]	; (8013718 <__lshift+0xd0>)
 8013676:	4829      	ldr	r0, [pc, #164]	; (801371c <__lshift+0xd4>)
 8013678:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801367c:	f000 fbe8 	bl	8013e50 <__assert_func>
 8013680:	3101      	adds	r1, #1
 8013682:	005b      	lsls	r3, r3, #1
 8013684:	e7ee      	b.n	8013664 <__lshift+0x1c>
 8013686:	2300      	movs	r3, #0
 8013688:	f100 0114 	add.w	r1, r0, #20
 801368c:	f100 0210 	add.w	r2, r0, #16
 8013690:	4618      	mov	r0, r3
 8013692:	4553      	cmp	r3, sl
 8013694:	db33      	blt.n	80136fe <__lshift+0xb6>
 8013696:	6920      	ldr	r0, [r4, #16]
 8013698:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801369c:	f104 0314 	add.w	r3, r4, #20
 80136a0:	f019 091f 	ands.w	r9, r9, #31
 80136a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80136a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80136ac:	d02b      	beq.n	8013706 <__lshift+0xbe>
 80136ae:	f1c9 0e20 	rsb	lr, r9, #32
 80136b2:	468a      	mov	sl, r1
 80136b4:	2200      	movs	r2, #0
 80136b6:	6818      	ldr	r0, [r3, #0]
 80136b8:	fa00 f009 	lsl.w	r0, r0, r9
 80136bc:	4310      	orrs	r0, r2
 80136be:	f84a 0b04 	str.w	r0, [sl], #4
 80136c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80136c6:	459c      	cmp	ip, r3
 80136c8:	fa22 f20e 	lsr.w	r2, r2, lr
 80136cc:	d8f3      	bhi.n	80136b6 <__lshift+0x6e>
 80136ce:	ebac 0304 	sub.w	r3, ip, r4
 80136d2:	3b15      	subs	r3, #21
 80136d4:	f023 0303 	bic.w	r3, r3, #3
 80136d8:	3304      	adds	r3, #4
 80136da:	f104 0015 	add.w	r0, r4, #21
 80136de:	4584      	cmp	ip, r0
 80136e0:	bf38      	it	cc
 80136e2:	2304      	movcc	r3, #4
 80136e4:	50ca      	str	r2, [r1, r3]
 80136e6:	b10a      	cbz	r2, 80136ec <__lshift+0xa4>
 80136e8:	f108 0602 	add.w	r6, r8, #2
 80136ec:	3e01      	subs	r6, #1
 80136ee:	4638      	mov	r0, r7
 80136f0:	612e      	str	r6, [r5, #16]
 80136f2:	4621      	mov	r1, r4
 80136f4:	f7ff fdd8 	bl	80132a8 <_Bfree>
 80136f8:	4628      	mov	r0, r5
 80136fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80136fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8013702:	3301      	adds	r3, #1
 8013704:	e7c5      	b.n	8013692 <__lshift+0x4a>
 8013706:	3904      	subs	r1, #4
 8013708:	f853 2b04 	ldr.w	r2, [r3], #4
 801370c:	f841 2f04 	str.w	r2, [r1, #4]!
 8013710:	459c      	cmp	ip, r3
 8013712:	d8f9      	bhi.n	8013708 <__lshift+0xc0>
 8013714:	e7ea      	b.n	80136ec <__lshift+0xa4>
 8013716:	bf00      	nop
 8013718:	080145f0 	.word	0x080145f0
 801371c:	08014601 	.word	0x08014601

08013720 <__mcmp>:
 8013720:	b530      	push	{r4, r5, lr}
 8013722:	6902      	ldr	r2, [r0, #16]
 8013724:	690c      	ldr	r4, [r1, #16]
 8013726:	1b12      	subs	r2, r2, r4
 8013728:	d10e      	bne.n	8013748 <__mcmp+0x28>
 801372a:	f100 0314 	add.w	r3, r0, #20
 801372e:	3114      	adds	r1, #20
 8013730:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013734:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013738:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801373c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013740:	42a5      	cmp	r5, r4
 8013742:	d003      	beq.n	801374c <__mcmp+0x2c>
 8013744:	d305      	bcc.n	8013752 <__mcmp+0x32>
 8013746:	2201      	movs	r2, #1
 8013748:	4610      	mov	r0, r2
 801374a:	bd30      	pop	{r4, r5, pc}
 801374c:	4283      	cmp	r3, r0
 801374e:	d3f3      	bcc.n	8013738 <__mcmp+0x18>
 8013750:	e7fa      	b.n	8013748 <__mcmp+0x28>
 8013752:	f04f 32ff 	mov.w	r2, #4294967295
 8013756:	e7f7      	b.n	8013748 <__mcmp+0x28>

08013758 <__mdiff>:
 8013758:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801375c:	460c      	mov	r4, r1
 801375e:	4606      	mov	r6, r0
 8013760:	4611      	mov	r1, r2
 8013762:	4620      	mov	r0, r4
 8013764:	4690      	mov	r8, r2
 8013766:	f7ff ffdb 	bl	8013720 <__mcmp>
 801376a:	1e05      	subs	r5, r0, #0
 801376c:	d110      	bne.n	8013790 <__mdiff+0x38>
 801376e:	4629      	mov	r1, r5
 8013770:	4630      	mov	r0, r6
 8013772:	f7ff fd59 	bl	8013228 <_Balloc>
 8013776:	b930      	cbnz	r0, 8013786 <__mdiff+0x2e>
 8013778:	4b3a      	ldr	r3, [pc, #232]	; (8013864 <__mdiff+0x10c>)
 801377a:	4602      	mov	r2, r0
 801377c:	f240 2137 	movw	r1, #567	; 0x237
 8013780:	4839      	ldr	r0, [pc, #228]	; (8013868 <__mdiff+0x110>)
 8013782:	f000 fb65 	bl	8013e50 <__assert_func>
 8013786:	2301      	movs	r3, #1
 8013788:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801378c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013790:	bfa4      	itt	ge
 8013792:	4643      	movge	r3, r8
 8013794:	46a0      	movge	r8, r4
 8013796:	4630      	mov	r0, r6
 8013798:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801379c:	bfa6      	itte	ge
 801379e:	461c      	movge	r4, r3
 80137a0:	2500      	movge	r5, #0
 80137a2:	2501      	movlt	r5, #1
 80137a4:	f7ff fd40 	bl	8013228 <_Balloc>
 80137a8:	b920      	cbnz	r0, 80137b4 <__mdiff+0x5c>
 80137aa:	4b2e      	ldr	r3, [pc, #184]	; (8013864 <__mdiff+0x10c>)
 80137ac:	4602      	mov	r2, r0
 80137ae:	f240 2145 	movw	r1, #581	; 0x245
 80137b2:	e7e5      	b.n	8013780 <__mdiff+0x28>
 80137b4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80137b8:	6926      	ldr	r6, [r4, #16]
 80137ba:	60c5      	str	r5, [r0, #12]
 80137bc:	f104 0914 	add.w	r9, r4, #20
 80137c0:	f108 0514 	add.w	r5, r8, #20
 80137c4:	f100 0e14 	add.w	lr, r0, #20
 80137c8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80137cc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80137d0:	f108 0210 	add.w	r2, r8, #16
 80137d4:	46f2      	mov	sl, lr
 80137d6:	2100      	movs	r1, #0
 80137d8:	f859 3b04 	ldr.w	r3, [r9], #4
 80137dc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80137e0:	fa11 f88b 	uxtah	r8, r1, fp
 80137e4:	b299      	uxth	r1, r3
 80137e6:	0c1b      	lsrs	r3, r3, #16
 80137e8:	eba8 0801 	sub.w	r8, r8, r1
 80137ec:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80137f0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80137f4:	fa1f f888 	uxth.w	r8, r8
 80137f8:	1419      	asrs	r1, r3, #16
 80137fa:	454e      	cmp	r6, r9
 80137fc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013800:	f84a 3b04 	str.w	r3, [sl], #4
 8013804:	d8e8      	bhi.n	80137d8 <__mdiff+0x80>
 8013806:	1b33      	subs	r3, r6, r4
 8013808:	3b15      	subs	r3, #21
 801380a:	f023 0303 	bic.w	r3, r3, #3
 801380e:	3304      	adds	r3, #4
 8013810:	3415      	adds	r4, #21
 8013812:	42a6      	cmp	r6, r4
 8013814:	bf38      	it	cc
 8013816:	2304      	movcc	r3, #4
 8013818:	441d      	add	r5, r3
 801381a:	4473      	add	r3, lr
 801381c:	469e      	mov	lr, r3
 801381e:	462e      	mov	r6, r5
 8013820:	4566      	cmp	r6, ip
 8013822:	d30e      	bcc.n	8013842 <__mdiff+0xea>
 8013824:	f10c 0203 	add.w	r2, ip, #3
 8013828:	1b52      	subs	r2, r2, r5
 801382a:	f022 0203 	bic.w	r2, r2, #3
 801382e:	3d03      	subs	r5, #3
 8013830:	45ac      	cmp	ip, r5
 8013832:	bf38      	it	cc
 8013834:	2200      	movcc	r2, #0
 8013836:	4413      	add	r3, r2
 8013838:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801383c:	b17a      	cbz	r2, 801385e <__mdiff+0x106>
 801383e:	6107      	str	r7, [r0, #16]
 8013840:	e7a4      	b.n	801378c <__mdiff+0x34>
 8013842:	f856 8b04 	ldr.w	r8, [r6], #4
 8013846:	fa11 f288 	uxtah	r2, r1, r8
 801384a:	1414      	asrs	r4, r2, #16
 801384c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8013850:	b292      	uxth	r2, r2
 8013852:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8013856:	f84e 2b04 	str.w	r2, [lr], #4
 801385a:	1421      	asrs	r1, r4, #16
 801385c:	e7e0      	b.n	8013820 <__mdiff+0xc8>
 801385e:	3f01      	subs	r7, #1
 8013860:	e7ea      	b.n	8013838 <__mdiff+0xe0>
 8013862:	bf00      	nop
 8013864:	080145f0 	.word	0x080145f0
 8013868:	08014601 	.word	0x08014601

0801386c <__d2b>:
 801386c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013870:	460f      	mov	r7, r1
 8013872:	2101      	movs	r1, #1
 8013874:	ec59 8b10 	vmov	r8, r9, d0
 8013878:	4616      	mov	r6, r2
 801387a:	f7ff fcd5 	bl	8013228 <_Balloc>
 801387e:	4604      	mov	r4, r0
 8013880:	b930      	cbnz	r0, 8013890 <__d2b+0x24>
 8013882:	4602      	mov	r2, r0
 8013884:	4b24      	ldr	r3, [pc, #144]	; (8013918 <__d2b+0xac>)
 8013886:	4825      	ldr	r0, [pc, #148]	; (801391c <__d2b+0xb0>)
 8013888:	f240 310f 	movw	r1, #783	; 0x30f
 801388c:	f000 fae0 	bl	8013e50 <__assert_func>
 8013890:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013894:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013898:	bb2d      	cbnz	r5, 80138e6 <__d2b+0x7a>
 801389a:	9301      	str	r3, [sp, #4]
 801389c:	f1b8 0300 	subs.w	r3, r8, #0
 80138a0:	d026      	beq.n	80138f0 <__d2b+0x84>
 80138a2:	4668      	mov	r0, sp
 80138a4:	9300      	str	r3, [sp, #0]
 80138a6:	f7ff fd87 	bl	80133b8 <__lo0bits>
 80138aa:	e9dd 1200 	ldrd	r1, r2, [sp]
 80138ae:	b1e8      	cbz	r0, 80138ec <__d2b+0x80>
 80138b0:	f1c0 0320 	rsb	r3, r0, #32
 80138b4:	fa02 f303 	lsl.w	r3, r2, r3
 80138b8:	430b      	orrs	r3, r1
 80138ba:	40c2      	lsrs	r2, r0
 80138bc:	6163      	str	r3, [r4, #20]
 80138be:	9201      	str	r2, [sp, #4]
 80138c0:	9b01      	ldr	r3, [sp, #4]
 80138c2:	61a3      	str	r3, [r4, #24]
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	bf14      	ite	ne
 80138c8:	2202      	movne	r2, #2
 80138ca:	2201      	moveq	r2, #1
 80138cc:	6122      	str	r2, [r4, #16]
 80138ce:	b1bd      	cbz	r5, 8013900 <__d2b+0x94>
 80138d0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80138d4:	4405      	add	r5, r0
 80138d6:	603d      	str	r5, [r7, #0]
 80138d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80138dc:	6030      	str	r0, [r6, #0]
 80138de:	4620      	mov	r0, r4
 80138e0:	b003      	add	sp, #12
 80138e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80138e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80138ea:	e7d6      	b.n	801389a <__d2b+0x2e>
 80138ec:	6161      	str	r1, [r4, #20]
 80138ee:	e7e7      	b.n	80138c0 <__d2b+0x54>
 80138f0:	a801      	add	r0, sp, #4
 80138f2:	f7ff fd61 	bl	80133b8 <__lo0bits>
 80138f6:	9b01      	ldr	r3, [sp, #4]
 80138f8:	6163      	str	r3, [r4, #20]
 80138fa:	3020      	adds	r0, #32
 80138fc:	2201      	movs	r2, #1
 80138fe:	e7e5      	b.n	80138cc <__d2b+0x60>
 8013900:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013904:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013908:	6038      	str	r0, [r7, #0]
 801390a:	6918      	ldr	r0, [r3, #16]
 801390c:	f7ff fd34 	bl	8013378 <__hi0bits>
 8013910:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013914:	e7e2      	b.n	80138dc <__d2b+0x70>
 8013916:	bf00      	nop
 8013918:	080145f0 	.word	0x080145f0
 801391c:	08014601 	.word	0x08014601

08013920 <__sfputc_r>:
 8013920:	6893      	ldr	r3, [r2, #8]
 8013922:	3b01      	subs	r3, #1
 8013924:	2b00      	cmp	r3, #0
 8013926:	b410      	push	{r4}
 8013928:	6093      	str	r3, [r2, #8]
 801392a:	da08      	bge.n	801393e <__sfputc_r+0x1e>
 801392c:	6994      	ldr	r4, [r2, #24]
 801392e:	42a3      	cmp	r3, r4
 8013930:	db01      	blt.n	8013936 <__sfputc_r+0x16>
 8013932:	290a      	cmp	r1, #10
 8013934:	d103      	bne.n	801393e <__sfputc_r+0x1e>
 8013936:	f85d 4b04 	ldr.w	r4, [sp], #4
 801393a:	f000 b9e3 	b.w	8013d04 <__swbuf_r>
 801393e:	6813      	ldr	r3, [r2, #0]
 8013940:	1c58      	adds	r0, r3, #1
 8013942:	6010      	str	r0, [r2, #0]
 8013944:	7019      	strb	r1, [r3, #0]
 8013946:	4608      	mov	r0, r1
 8013948:	f85d 4b04 	ldr.w	r4, [sp], #4
 801394c:	4770      	bx	lr

0801394e <__sfputs_r>:
 801394e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013950:	4606      	mov	r6, r0
 8013952:	460f      	mov	r7, r1
 8013954:	4614      	mov	r4, r2
 8013956:	18d5      	adds	r5, r2, r3
 8013958:	42ac      	cmp	r4, r5
 801395a:	d101      	bne.n	8013960 <__sfputs_r+0x12>
 801395c:	2000      	movs	r0, #0
 801395e:	e007      	b.n	8013970 <__sfputs_r+0x22>
 8013960:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013964:	463a      	mov	r2, r7
 8013966:	4630      	mov	r0, r6
 8013968:	f7ff ffda 	bl	8013920 <__sfputc_r>
 801396c:	1c43      	adds	r3, r0, #1
 801396e:	d1f3      	bne.n	8013958 <__sfputs_r+0xa>
 8013970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013974 <_vfiprintf_r>:
 8013974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013978:	460d      	mov	r5, r1
 801397a:	b09d      	sub	sp, #116	; 0x74
 801397c:	4614      	mov	r4, r2
 801397e:	4698      	mov	r8, r3
 8013980:	4606      	mov	r6, r0
 8013982:	b118      	cbz	r0, 801398c <_vfiprintf_r+0x18>
 8013984:	6a03      	ldr	r3, [r0, #32]
 8013986:	b90b      	cbnz	r3, 801398c <_vfiprintf_r+0x18>
 8013988:	f7fe fc40 	bl	801220c <__sinit>
 801398c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801398e:	07d9      	lsls	r1, r3, #31
 8013990:	d405      	bmi.n	801399e <_vfiprintf_r+0x2a>
 8013992:	89ab      	ldrh	r3, [r5, #12]
 8013994:	059a      	lsls	r2, r3, #22
 8013996:	d402      	bmi.n	801399e <_vfiprintf_r+0x2a>
 8013998:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801399a:	f7fe fd40 	bl	801241e <__retarget_lock_acquire_recursive>
 801399e:	89ab      	ldrh	r3, [r5, #12]
 80139a0:	071b      	lsls	r3, r3, #28
 80139a2:	d501      	bpl.n	80139a8 <_vfiprintf_r+0x34>
 80139a4:	692b      	ldr	r3, [r5, #16]
 80139a6:	b99b      	cbnz	r3, 80139d0 <_vfiprintf_r+0x5c>
 80139a8:	4629      	mov	r1, r5
 80139aa:	4630      	mov	r0, r6
 80139ac:	f000 f9e8 	bl	8013d80 <__swsetup_r>
 80139b0:	b170      	cbz	r0, 80139d0 <_vfiprintf_r+0x5c>
 80139b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80139b4:	07dc      	lsls	r4, r3, #31
 80139b6:	d504      	bpl.n	80139c2 <_vfiprintf_r+0x4e>
 80139b8:	f04f 30ff 	mov.w	r0, #4294967295
 80139bc:	b01d      	add	sp, #116	; 0x74
 80139be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139c2:	89ab      	ldrh	r3, [r5, #12]
 80139c4:	0598      	lsls	r0, r3, #22
 80139c6:	d4f7      	bmi.n	80139b8 <_vfiprintf_r+0x44>
 80139c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80139ca:	f7fe fd29 	bl	8012420 <__retarget_lock_release_recursive>
 80139ce:	e7f3      	b.n	80139b8 <_vfiprintf_r+0x44>
 80139d0:	2300      	movs	r3, #0
 80139d2:	9309      	str	r3, [sp, #36]	; 0x24
 80139d4:	2320      	movs	r3, #32
 80139d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80139da:	f8cd 800c 	str.w	r8, [sp, #12]
 80139de:	2330      	movs	r3, #48	; 0x30
 80139e0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8013b94 <_vfiprintf_r+0x220>
 80139e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80139e8:	f04f 0901 	mov.w	r9, #1
 80139ec:	4623      	mov	r3, r4
 80139ee:	469a      	mov	sl, r3
 80139f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80139f4:	b10a      	cbz	r2, 80139fa <_vfiprintf_r+0x86>
 80139f6:	2a25      	cmp	r2, #37	; 0x25
 80139f8:	d1f9      	bne.n	80139ee <_vfiprintf_r+0x7a>
 80139fa:	ebba 0b04 	subs.w	fp, sl, r4
 80139fe:	d00b      	beq.n	8013a18 <_vfiprintf_r+0xa4>
 8013a00:	465b      	mov	r3, fp
 8013a02:	4622      	mov	r2, r4
 8013a04:	4629      	mov	r1, r5
 8013a06:	4630      	mov	r0, r6
 8013a08:	f7ff ffa1 	bl	801394e <__sfputs_r>
 8013a0c:	3001      	adds	r0, #1
 8013a0e:	f000 80a9 	beq.w	8013b64 <_vfiprintf_r+0x1f0>
 8013a12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013a14:	445a      	add	r2, fp
 8013a16:	9209      	str	r2, [sp, #36]	; 0x24
 8013a18:	f89a 3000 	ldrb.w	r3, [sl]
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	f000 80a1 	beq.w	8013b64 <_vfiprintf_r+0x1f0>
 8013a22:	2300      	movs	r3, #0
 8013a24:	f04f 32ff 	mov.w	r2, #4294967295
 8013a28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013a2c:	f10a 0a01 	add.w	sl, sl, #1
 8013a30:	9304      	str	r3, [sp, #16]
 8013a32:	9307      	str	r3, [sp, #28]
 8013a34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013a38:	931a      	str	r3, [sp, #104]	; 0x68
 8013a3a:	4654      	mov	r4, sl
 8013a3c:	2205      	movs	r2, #5
 8013a3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013a42:	4854      	ldr	r0, [pc, #336]	; (8013b94 <_vfiprintf_r+0x220>)
 8013a44:	f7ec fc4c 	bl	80002e0 <memchr>
 8013a48:	9a04      	ldr	r2, [sp, #16]
 8013a4a:	b9d8      	cbnz	r0, 8013a84 <_vfiprintf_r+0x110>
 8013a4c:	06d1      	lsls	r1, r2, #27
 8013a4e:	bf44      	itt	mi
 8013a50:	2320      	movmi	r3, #32
 8013a52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013a56:	0713      	lsls	r3, r2, #28
 8013a58:	bf44      	itt	mi
 8013a5a:	232b      	movmi	r3, #43	; 0x2b
 8013a5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013a60:	f89a 3000 	ldrb.w	r3, [sl]
 8013a64:	2b2a      	cmp	r3, #42	; 0x2a
 8013a66:	d015      	beq.n	8013a94 <_vfiprintf_r+0x120>
 8013a68:	9a07      	ldr	r2, [sp, #28]
 8013a6a:	4654      	mov	r4, sl
 8013a6c:	2000      	movs	r0, #0
 8013a6e:	f04f 0c0a 	mov.w	ip, #10
 8013a72:	4621      	mov	r1, r4
 8013a74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013a78:	3b30      	subs	r3, #48	; 0x30
 8013a7a:	2b09      	cmp	r3, #9
 8013a7c:	d94d      	bls.n	8013b1a <_vfiprintf_r+0x1a6>
 8013a7e:	b1b0      	cbz	r0, 8013aae <_vfiprintf_r+0x13a>
 8013a80:	9207      	str	r2, [sp, #28]
 8013a82:	e014      	b.n	8013aae <_vfiprintf_r+0x13a>
 8013a84:	eba0 0308 	sub.w	r3, r0, r8
 8013a88:	fa09 f303 	lsl.w	r3, r9, r3
 8013a8c:	4313      	orrs	r3, r2
 8013a8e:	9304      	str	r3, [sp, #16]
 8013a90:	46a2      	mov	sl, r4
 8013a92:	e7d2      	b.n	8013a3a <_vfiprintf_r+0xc6>
 8013a94:	9b03      	ldr	r3, [sp, #12]
 8013a96:	1d19      	adds	r1, r3, #4
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	9103      	str	r1, [sp, #12]
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	bfbb      	ittet	lt
 8013aa0:	425b      	neglt	r3, r3
 8013aa2:	f042 0202 	orrlt.w	r2, r2, #2
 8013aa6:	9307      	strge	r3, [sp, #28]
 8013aa8:	9307      	strlt	r3, [sp, #28]
 8013aaa:	bfb8      	it	lt
 8013aac:	9204      	strlt	r2, [sp, #16]
 8013aae:	7823      	ldrb	r3, [r4, #0]
 8013ab0:	2b2e      	cmp	r3, #46	; 0x2e
 8013ab2:	d10c      	bne.n	8013ace <_vfiprintf_r+0x15a>
 8013ab4:	7863      	ldrb	r3, [r4, #1]
 8013ab6:	2b2a      	cmp	r3, #42	; 0x2a
 8013ab8:	d134      	bne.n	8013b24 <_vfiprintf_r+0x1b0>
 8013aba:	9b03      	ldr	r3, [sp, #12]
 8013abc:	1d1a      	adds	r2, r3, #4
 8013abe:	681b      	ldr	r3, [r3, #0]
 8013ac0:	9203      	str	r2, [sp, #12]
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	bfb8      	it	lt
 8013ac6:	f04f 33ff 	movlt.w	r3, #4294967295
 8013aca:	3402      	adds	r4, #2
 8013acc:	9305      	str	r3, [sp, #20]
 8013ace:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8013ba4 <_vfiprintf_r+0x230>
 8013ad2:	7821      	ldrb	r1, [r4, #0]
 8013ad4:	2203      	movs	r2, #3
 8013ad6:	4650      	mov	r0, sl
 8013ad8:	f7ec fc02 	bl	80002e0 <memchr>
 8013adc:	b138      	cbz	r0, 8013aee <_vfiprintf_r+0x17a>
 8013ade:	9b04      	ldr	r3, [sp, #16]
 8013ae0:	eba0 000a 	sub.w	r0, r0, sl
 8013ae4:	2240      	movs	r2, #64	; 0x40
 8013ae6:	4082      	lsls	r2, r0
 8013ae8:	4313      	orrs	r3, r2
 8013aea:	3401      	adds	r4, #1
 8013aec:	9304      	str	r3, [sp, #16]
 8013aee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013af2:	4829      	ldr	r0, [pc, #164]	; (8013b98 <_vfiprintf_r+0x224>)
 8013af4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013af8:	2206      	movs	r2, #6
 8013afa:	f7ec fbf1 	bl	80002e0 <memchr>
 8013afe:	2800      	cmp	r0, #0
 8013b00:	d03f      	beq.n	8013b82 <_vfiprintf_r+0x20e>
 8013b02:	4b26      	ldr	r3, [pc, #152]	; (8013b9c <_vfiprintf_r+0x228>)
 8013b04:	bb1b      	cbnz	r3, 8013b4e <_vfiprintf_r+0x1da>
 8013b06:	9b03      	ldr	r3, [sp, #12]
 8013b08:	3307      	adds	r3, #7
 8013b0a:	f023 0307 	bic.w	r3, r3, #7
 8013b0e:	3308      	adds	r3, #8
 8013b10:	9303      	str	r3, [sp, #12]
 8013b12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b14:	443b      	add	r3, r7
 8013b16:	9309      	str	r3, [sp, #36]	; 0x24
 8013b18:	e768      	b.n	80139ec <_vfiprintf_r+0x78>
 8013b1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8013b1e:	460c      	mov	r4, r1
 8013b20:	2001      	movs	r0, #1
 8013b22:	e7a6      	b.n	8013a72 <_vfiprintf_r+0xfe>
 8013b24:	2300      	movs	r3, #0
 8013b26:	3401      	adds	r4, #1
 8013b28:	9305      	str	r3, [sp, #20]
 8013b2a:	4619      	mov	r1, r3
 8013b2c:	f04f 0c0a 	mov.w	ip, #10
 8013b30:	4620      	mov	r0, r4
 8013b32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013b36:	3a30      	subs	r2, #48	; 0x30
 8013b38:	2a09      	cmp	r2, #9
 8013b3a:	d903      	bls.n	8013b44 <_vfiprintf_r+0x1d0>
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d0c6      	beq.n	8013ace <_vfiprintf_r+0x15a>
 8013b40:	9105      	str	r1, [sp, #20]
 8013b42:	e7c4      	b.n	8013ace <_vfiprintf_r+0x15a>
 8013b44:	fb0c 2101 	mla	r1, ip, r1, r2
 8013b48:	4604      	mov	r4, r0
 8013b4a:	2301      	movs	r3, #1
 8013b4c:	e7f0      	b.n	8013b30 <_vfiprintf_r+0x1bc>
 8013b4e:	ab03      	add	r3, sp, #12
 8013b50:	9300      	str	r3, [sp, #0]
 8013b52:	462a      	mov	r2, r5
 8013b54:	4b12      	ldr	r3, [pc, #72]	; (8013ba0 <_vfiprintf_r+0x22c>)
 8013b56:	a904      	add	r1, sp, #16
 8013b58:	4630      	mov	r0, r6
 8013b5a:	f7fd ff21 	bl	80119a0 <_printf_float>
 8013b5e:	4607      	mov	r7, r0
 8013b60:	1c78      	adds	r0, r7, #1
 8013b62:	d1d6      	bne.n	8013b12 <_vfiprintf_r+0x19e>
 8013b64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013b66:	07d9      	lsls	r1, r3, #31
 8013b68:	d405      	bmi.n	8013b76 <_vfiprintf_r+0x202>
 8013b6a:	89ab      	ldrh	r3, [r5, #12]
 8013b6c:	059a      	lsls	r2, r3, #22
 8013b6e:	d402      	bmi.n	8013b76 <_vfiprintf_r+0x202>
 8013b70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013b72:	f7fe fc55 	bl	8012420 <__retarget_lock_release_recursive>
 8013b76:	89ab      	ldrh	r3, [r5, #12]
 8013b78:	065b      	lsls	r3, r3, #25
 8013b7a:	f53f af1d 	bmi.w	80139b8 <_vfiprintf_r+0x44>
 8013b7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013b80:	e71c      	b.n	80139bc <_vfiprintf_r+0x48>
 8013b82:	ab03      	add	r3, sp, #12
 8013b84:	9300      	str	r3, [sp, #0]
 8013b86:	462a      	mov	r2, r5
 8013b88:	4b05      	ldr	r3, [pc, #20]	; (8013ba0 <_vfiprintf_r+0x22c>)
 8013b8a:	a904      	add	r1, sp, #16
 8013b8c:	4630      	mov	r0, r6
 8013b8e:	f7fe f98f 	bl	8011eb0 <_printf_i>
 8013b92:	e7e4      	b.n	8013b5e <_vfiprintf_r+0x1ea>
 8013b94:	0801475c 	.word	0x0801475c
 8013b98:	08014766 	.word	0x08014766
 8013b9c:	080119a1 	.word	0x080119a1
 8013ba0:	0801394f 	.word	0x0801394f
 8013ba4:	08014762 	.word	0x08014762

08013ba8 <__sflush_r>:
 8013ba8:	898a      	ldrh	r2, [r1, #12]
 8013baa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bae:	4605      	mov	r5, r0
 8013bb0:	0710      	lsls	r0, r2, #28
 8013bb2:	460c      	mov	r4, r1
 8013bb4:	d458      	bmi.n	8013c68 <__sflush_r+0xc0>
 8013bb6:	684b      	ldr	r3, [r1, #4]
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	dc05      	bgt.n	8013bc8 <__sflush_r+0x20>
 8013bbc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	dc02      	bgt.n	8013bc8 <__sflush_r+0x20>
 8013bc2:	2000      	movs	r0, #0
 8013bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013bca:	2e00      	cmp	r6, #0
 8013bcc:	d0f9      	beq.n	8013bc2 <__sflush_r+0x1a>
 8013bce:	2300      	movs	r3, #0
 8013bd0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013bd4:	682f      	ldr	r7, [r5, #0]
 8013bd6:	6a21      	ldr	r1, [r4, #32]
 8013bd8:	602b      	str	r3, [r5, #0]
 8013bda:	d032      	beq.n	8013c42 <__sflush_r+0x9a>
 8013bdc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013bde:	89a3      	ldrh	r3, [r4, #12]
 8013be0:	075a      	lsls	r2, r3, #29
 8013be2:	d505      	bpl.n	8013bf0 <__sflush_r+0x48>
 8013be4:	6863      	ldr	r3, [r4, #4]
 8013be6:	1ac0      	subs	r0, r0, r3
 8013be8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013bea:	b10b      	cbz	r3, 8013bf0 <__sflush_r+0x48>
 8013bec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013bee:	1ac0      	subs	r0, r0, r3
 8013bf0:	2300      	movs	r3, #0
 8013bf2:	4602      	mov	r2, r0
 8013bf4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013bf6:	6a21      	ldr	r1, [r4, #32]
 8013bf8:	4628      	mov	r0, r5
 8013bfa:	47b0      	blx	r6
 8013bfc:	1c43      	adds	r3, r0, #1
 8013bfe:	89a3      	ldrh	r3, [r4, #12]
 8013c00:	d106      	bne.n	8013c10 <__sflush_r+0x68>
 8013c02:	6829      	ldr	r1, [r5, #0]
 8013c04:	291d      	cmp	r1, #29
 8013c06:	d82b      	bhi.n	8013c60 <__sflush_r+0xb8>
 8013c08:	4a29      	ldr	r2, [pc, #164]	; (8013cb0 <__sflush_r+0x108>)
 8013c0a:	410a      	asrs	r2, r1
 8013c0c:	07d6      	lsls	r6, r2, #31
 8013c0e:	d427      	bmi.n	8013c60 <__sflush_r+0xb8>
 8013c10:	2200      	movs	r2, #0
 8013c12:	6062      	str	r2, [r4, #4]
 8013c14:	04d9      	lsls	r1, r3, #19
 8013c16:	6922      	ldr	r2, [r4, #16]
 8013c18:	6022      	str	r2, [r4, #0]
 8013c1a:	d504      	bpl.n	8013c26 <__sflush_r+0x7e>
 8013c1c:	1c42      	adds	r2, r0, #1
 8013c1e:	d101      	bne.n	8013c24 <__sflush_r+0x7c>
 8013c20:	682b      	ldr	r3, [r5, #0]
 8013c22:	b903      	cbnz	r3, 8013c26 <__sflush_r+0x7e>
 8013c24:	6560      	str	r0, [r4, #84]	; 0x54
 8013c26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013c28:	602f      	str	r7, [r5, #0]
 8013c2a:	2900      	cmp	r1, #0
 8013c2c:	d0c9      	beq.n	8013bc2 <__sflush_r+0x1a>
 8013c2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013c32:	4299      	cmp	r1, r3
 8013c34:	d002      	beq.n	8013c3c <__sflush_r+0x94>
 8013c36:	4628      	mov	r0, r5
 8013c38:	f7ff f9f6 	bl	8013028 <_free_r>
 8013c3c:	2000      	movs	r0, #0
 8013c3e:	6360      	str	r0, [r4, #52]	; 0x34
 8013c40:	e7c0      	b.n	8013bc4 <__sflush_r+0x1c>
 8013c42:	2301      	movs	r3, #1
 8013c44:	4628      	mov	r0, r5
 8013c46:	47b0      	blx	r6
 8013c48:	1c41      	adds	r1, r0, #1
 8013c4a:	d1c8      	bne.n	8013bde <__sflush_r+0x36>
 8013c4c:	682b      	ldr	r3, [r5, #0]
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d0c5      	beq.n	8013bde <__sflush_r+0x36>
 8013c52:	2b1d      	cmp	r3, #29
 8013c54:	d001      	beq.n	8013c5a <__sflush_r+0xb2>
 8013c56:	2b16      	cmp	r3, #22
 8013c58:	d101      	bne.n	8013c5e <__sflush_r+0xb6>
 8013c5a:	602f      	str	r7, [r5, #0]
 8013c5c:	e7b1      	b.n	8013bc2 <__sflush_r+0x1a>
 8013c5e:	89a3      	ldrh	r3, [r4, #12]
 8013c60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013c64:	81a3      	strh	r3, [r4, #12]
 8013c66:	e7ad      	b.n	8013bc4 <__sflush_r+0x1c>
 8013c68:	690f      	ldr	r7, [r1, #16]
 8013c6a:	2f00      	cmp	r7, #0
 8013c6c:	d0a9      	beq.n	8013bc2 <__sflush_r+0x1a>
 8013c6e:	0793      	lsls	r3, r2, #30
 8013c70:	680e      	ldr	r6, [r1, #0]
 8013c72:	bf08      	it	eq
 8013c74:	694b      	ldreq	r3, [r1, #20]
 8013c76:	600f      	str	r7, [r1, #0]
 8013c78:	bf18      	it	ne
 8013c7a:	2300      	movne	r3, #0
 8013c7c:	eba6 0807 	sub.w	r8, r6, r7
 8013c80:	608b      	str	r3, [r1, #8]
 8013c82:	f1b8 0f00 	cmp.w	r8, #0
 8013c86:	dd9c      	ble.n	8013bc2 <__sflush_r+0x1a>
 8013c88:	6a21      	ldr	r1, [r4, #32]
 8013c8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013c8c:	4643      	mov	r3, r8
 8013c8e:	463a      	mov	r2, r7
 8013c90:	4628      	mov	r0, r5
 8013c92:	47b0      	blx	r6
 8013c94:	2800      	cmp	r0, #0
 8013c96:	dc06      	bgt.n	8013ca6 <__sflush_r+0xfe>
 8013c98:	89a3      	ldrh	r3, [r4, #12]
 8013c9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013c9e:	81a3      	strh	r3, [r4, #12]
 8013ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8013ca4:	e78e      	b.n	8013bc4 <__sflush_r+0x1c>
 8013ca6:	4407      	add	r7, r0
 8013ca8:	eba8 0800 	sub.w	r8, r8, r0
 8013cac:	e7e9      	b.n	8013c82 <__sflush_r+0xda>
 8013cae:	bf00      	nop
 8013cb0:	dfbffffe 	.word	0xdfbffffe

08013cb4 <_fflush_r>:
 8013cb4:	b538      	push	{r3, r4, r5, lr}
 8013cb6:	690b      	ldr	r3, [r1, #16]
 8013cb8:	4605      	mov	r5, r0
 8013cba:	460c      	mov	r4, r1
 8013cbc:	b913      	cbnz	r3, 8013cc4 <_fflush_r+0x10>
 8013cbe:	2500      	movs	r5, #0
 8013cc0:	4628      	mov	r0, r5
 8013cc2:	bd38      	pop	{r3, r4, r5, pc}
 8013cc4:	b118      	cbz	r0, 8013cce <_fflush_r+0x1a>
 8013cc6:	6a03      	ldr	r3, [r0, #32]
 8013cc8:	b90b      	cbnz	r3, 8013cce <_fflush_r+0x1a>
 8013cca:	f7fe fa9f 	bl	801220c <__sinit>
 8013cce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d0f3      	beq.n	8013cbe <_fflush_r+0xa>
 8013cd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013cd8:	07d0      	lsls	r0, r2, #31
 8013cda:	d404      	bmi.n	8013ce6 <_fflush_r+0x32>
 8013cdc:	0599      	lsls	r1, r3, #22
 8013cde:	d402      	bmi.n	8013ce6 <_fflush_r+0x32>
 8013ce0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013ce2:	f7fe fb9c 	bl	801241e <__retarget_lock_acquire_recursive>
 8013ce6:	4628      	mov	r0, r5
 8013ce8:	4621      	mov	r1, r4
 8013cea:	f7ff ff5d 	bl	8013ba8 <__sflush_r>
 8013cee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013cf0:	07da      	lsls	r2, r3, #31
 8013cf2:	4605      	mov	r5, r0
 8013cf4:	d4e4      	bmi.n	8013cc0 <_fflush_r+0xc>
 8013cf6:	89a3      	ldrh	r3, [r4, #12]
 8013cf8:	059b      	lsls	r3, r3, #22
 8013cfa:	d4e1      	bmi.n	8013cc0 <_fflush_r+0xc>
 8013cfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013cfe:	f7fe fb8f 	bl	8012420 <__retarget_lock_release_recursive>
 8013d02:	e7dd      	b.n	8013cc0 <_fflush_r+0xc>

08013d04 <__swbuf_r>:
 8013d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d06:	460e      	mov	r6, r1
 8013d08:	4614      	mov	r4, r2
 8013d0a:	4605      	mov	r5, r0
 8013d0c:	b118      	cbz	r0, 8013d16 <__swbuf_r+0x12>
 8013d0e:	6a03      	ldr	r3, [r0, #32]
 8013d10:	b90b      	cbnz	r3, 8013d16 <__swbuf_r+0x12>
 8013d12:	f7fe fa7b 	bl	801220c <__sinit>
 8013d16:	69a3      	ldr	r3, [r4, #24]
 8013d18:	60a3      	str	r3, [r4, #8]
 8013d1a:	89a3      	ldrh	r3, [r4, #12]
 8013d1c:	071a      	lsls	r2, r3, #28
 8013d1e:	d525      	bpl.n	8013d6c <__swbuf_r+0x68>
 8013d20:	6923      	ldr	r3, [r4, #16]
 8013d22:	b31b      	cbz	r3, 8013d6c <__swbuf_r+0x68>
 8013d24:	6823      	ldr	r3, [r4, #0]
 8013d26:	6922      	ldr	r2, [r4, #16]
 8013d28:	1a98      	subs	r0, r3, r2
 8013d2a:	6963      	ldr	r3, [r4, #20]
 8013d2c:	b2f6      	uxtb	r6, r6
 8013d2e:	4283      	cmp	r3, r0
 8013d30:	4637      	mov	r7, r6
 8013d32:	dc04      	bgt.n	8013d3e <__swbuf_r+0x3a>
 8013d34:	4621      	mov	r1, r4
 8013d36:	4628      	mov	r0, r5
 8013d38:	f7ff ffbc 	bl	8013cb4 <_fflush_r>
 8013d3c:	b9e0      	cbnz	r0, 8013d78 <__swbuf_r+0x74>
 8013d3e:	68a3      	ldr	r3, [r4, #8]
 8013d40:	3b01      	subs	r3, #1
 8013d42:	60a3      	str	r3, [r4, #8]
 8013d44:	6823      	ldr	r3, [r4, #0]
 8013d46:	1c5a      	adds	r2, r3, #1
 8013d48:	6022      	str	r2, [r4, #0]
 8013d4a:	701e      	strb	r6, [r3, #0]
 8013d4c:	6962      	ldr	r2, [r4, #20]
 8013d4e:	1c43      	adds	r3, r0, #1
 8013d50:	429a      	cmp	r2, r3
 8013d52:	d004      	beq.n	8013d5e <__swbuf_r+0x5a>
 8013d54:	89a3      	ldrh	r3, [r4, #12]
 8013d56:	07db      	lsls	r3, r3, #31
 8013d58:	d506      	bpl.n	8013d68 <__swbuf_r+0x64>
 8013d5a:	2e0a      	cmp	r6, #10
 8013d5c:	d104      	bne.n	8013d68 <__swbuf_r+0x64>
 8013d5e:	4621      	mov	r1, r4
 8013d60:	4628      	mov	r0, r5
 8013d62:	f7ff ffa7 	bl	8013cb4 <_fflush_r>
 8013d66:	b938      	cbnz	r0, 8013d78 <__swbuf_r+0x74>
 8013d68:	4638      	mov	r0, r7
 8013d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d6c:	4621      	mov	r1, r4
 8013d6e:	4628      	mov	r0, r5
 8013d70:	f000 f806 	bl	8013d80 <__swsetup_r>
 8013d74:	2800      	cmp	r0, #0
 8013d76:	d0d5      	beq.n	8013d24 <__swbuf_r+0x20>
 8013d78:	f04f 37ff 	mov.w	r7, #4294967295
 8013d7c:	e7f4      	b.n	8013d68 <__swbuf_r+0x64>
	...

08013d80 <__swsetup_r>:
 8013d80:	b538      	push	{r3, r4, r5, lr}
 8013d82:	4b2a      	ldr	r3, [pc, #168]	; (8013e2c <__swsetup_r+0xac>)
 8013d84:	4605      	mov	r5, r0
 8013d86:	6818      	ldr	r0, [r3, #0]
 8013d88:	460c      	mov	r4, r1
 8013d8a:	b118      	cbz	r0, 8013d94 <__swsetup_r+0x14>
 8013d8c:	6a03      	ldr	r3, [r0, #32]
 8013d8e:	b90b      	cbnz	r3, 8013d94 <__swsetup_r+0x14>
 8013d90:	f7fe fa3c 	bl	801220c <__sinit>
 8013d94:	89a3      	ldrh	r3, [r4, #12]
 8013d96:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013d9a:	0718      	lsls	r0, r3, #28
 8013d9c:	d422      	bmi.n	8013de4 <__swsetup_r+0x64>
 8013d9e:	06d9      	lsls	r1, r3, #27
 8013da0:	d407      	bmi.n	8013db2 <__swsetup_r+0x32>
 8013da2:	2309      	movs	r3, #9
 8013da4:	602b      	str	r3, [r5, #0]
 8013da6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013daa:	81a3      	strh	r3, [r4, #12]
 8013dac:	f04f 30ff 	mov.w	r0, #4294967295
 8013db0:	e034      	b.n	8013e1c <__swsetup_r+0x9c>
 8013db2:	0758      	lsls	r0, r3, #29
 8013db4:	d512      	bpl.n	8013ddc <__swsetup_r+0x5c>
 8013db6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013db8:	b141      	cbz	r1, 8013dcc <__swsetup_r+0x4c>
 8013dba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013dbe:	4299      	cmp	r1, r3
 8013dc0:	d002      	beq.n	8013dc8 <__swsetup_r+0x48>
 8013dc2:	4628      	mov	r0, r5
 8013dc4:	f7ff f930 	bl	8013028 <_free_r>
 8013dc8:	2300      	movs	r3, #0
 8013dca:	6363      	str	r3, [r4, #52]	; 0x34
 8013dcc:	89a3      	ldrh	r3, [r4, #12]
 8013dce:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013dd2:	81a3      	strh	r3, [r4, #12]
 8013dd4:	2300      	movs	r3, #0
 8013dd6:	6063      	str	r3, [r4, #4]
 8013dd8:	6923      	ldr	r3, [r4, #16]
 8013dda:	6023      	str	r3, [r4, #0]
 8013ddc:	89a3      	ldrh	r3, [r4, #12]
 8013dde:	f043 0308 	orr.w	r3, r3, #8
 8013de2:	81a3      	strh	r3, [r4, #12]
 8013de4:	6923      	ldr	r3, [r4, #16]
 8013de6:	b94b      	cbnz	r3, 8013dfc <__swsetup_r+0x7c>
 8013de8:	89a3      	ldrh	r3, [r4, #12]
 8013dea:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013dee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013df2:	d003      	beq.n	8013dfc <__swsetup_r+0x7c>
 8013df4:	4621      	mov	r1, r4
 8013df6:	4628      	mov	r0, r5
 8013df8:	f000 f8b6 	bl	8013f68 <__smakebuf_r>
 8013dfc:	89a0      	ldrh	r0, [r4, #12]
 8013dfe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013e02:	f010 0301 	ands.w	r3, r0, #1
 8013e06:	d00a      	beq.n	8013e1e <__swsetup_r+0x9e>
 8013e08:	2300      	movs	r3, #0
 8013e0a:	60a3      	str	r3, [r4, #8]
 8013e0c:	6963      	ldr	r3, [r4, #20]
 8013e0e:	425b      	negs	r3, r3
 8013e10:	61a3      	str	r3, [r4, #24]
 8013e12:	6923      	ldr	r3, [r4, #16]
 8013e14:	b943      	cbnz	r3, 8013e28 <__swsetup_r+0xa8>
 8013e16:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013e1a:	d1c4      	bne.n	8013da6 <__swsetup_r+0x26>
 8013e1c:	bd38      	pop	{r3, r4, r5, pc}
 8013e1e:	0781      	lsls	r1, r0, #30
 8013e20:	bf58      	it	pl
 8013e22:	6963      	ldrpl	r3, [r4, #20]
 8013e24:	60a3      	str	r3, [r4, #8]
 8013e26:	e7f4      	b.n	8013e12 <__swsetup_r+0x92>
 8013e28:	2000      	movs	r0, #0
 8013e2a:	e7f7      	b.n	8013e1c <__swsetup_r+0x9c>
 8013e2c:	2400006c 	.word	0x2400006c

08013e30 <_sbrk_r>:
 8013e30:	b538      	push	{r3, r4, r5, lr}
 8013e32:	4d06      	ldr	r5, [pc, #24]	; (8013e4c <_sbrk_r+0x1c>)
 8013e34:	2300      	movs	r3, #0
 8013e36:	4604      	mov	r4, r0
 8013e38:	4608      	mov	r0, r1
 8013e3a:	602b      	str	r3, [r5, #0]
 8013e3c:	f7ed fba2 	bl	8001584 <_sbrk>
 8013e40:	1c43      	adds	r3, r0, #1
 8013e42:	d102      	bne.n	8013e4a <_sbrk_r+0x1a>
 8013e44:	682b      	ldr	r3, [r5, #0]
 8013e46:	b103      	cbz	r3, 8013e4a <_sbrk_r+0x1a>
 8013e48:	6023      	str	r3, [r4, #0]
 8013e4a:	bd38      	pop	{r3, r4, r5, pc}
 8013e4c:	24009c5c 	.word	0x24009c5c

08013e50 <__assert_func>:
 8013e50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013e52:	4614      	mov	r4, r2
 8013e54:	461a      	mov	r2, r3
 8013e56:	4b09      	ldr	r3, [pc, #36]	; (8013e7c <__assert_func+0x2c>)
 8013e58:	681b      	ldr	r3, [r3, #0]
 8013e5a:	4605      	mov	r5, r0
 8013e5c:	68d8      	ldr	r0, [r3, #12]
 8013e5e:	b14c      	cbz	r4, 8013e74 <__assert_func+0x24>
 8013e60:	4b07      	ldr	r3, [pc, #28]	; (8013e80 <__assert_func+0x30>)
 8013e62:	9100      	str	r1, [sp, #0]
 8013e64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013e68:	4906      	ldr	r1, [pc, #24]	; (8013e84 <__assert_func+0x34>)
 8013e6a:	462b      	mov	r3, r5
 8013e6c:	f000 f844 	bl	8013ef8 <fiprintf>
 8013e70:	f000 f8d8 	bl	8014024 <abort>
 8013e74:	4b04      	ldr	r3, [pc, #16]	; (8013e88 <__assert_func+0x38>)
 8013e76:	461c      	mov	r4, r3
 8013e78:	e7f3      	b.n	8013e62 <__assert_func+0x12>
 8013e7a:	bf00      	nop
 8013e7c:	2400006c 	.word	0x2400006c
 8013e80:	08014777 	.word	0x08014777
 8013e84:	08014784 	.word	0x08014784
 8013e88:	080147b2 	.word	0x080147b2

08013e8c <_calloc_r>:
 8013e8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013e8e:	fba1 2402 	umull	r2, r4, r1, r2
 8013e92:	b94c      	cbnz	r4, 8013ea8 <_calloc_r+0x1c>
 8013e94:	4611      	mov	r1, r2
 8013e96:	9201      	str	r2, [sp, #4]
 8013e98:	f7ff f93a 	bl	8013110 <_malloc_r>
 8013e9c:	9a01      	ldr	r2, [sp, #4]
 8013e9e:	4605      	mov	r5, r0
 8013ea0:	b930      	cbnz	r0, 8013eb0 <_calloc_r+0x24>
 8013ea2:	4628      	mov	r0, r5
 8013ea4:	b003      	add	sp, #12
 8013ea6:	bd30      	pop	{r4, r5, pc}
 8013ea8:	220c      	movs	r2, #12
 8013eaa:	6002      	str	r2, [r0, #0]
 8013eac:	2500      	movs	r5, #0
 8013eae:	e7f8      	b.n	8013ea2 <_calloc_r+0x16>
 8013eb0:	4621      	mov	r1, r4
 8013eb2:	f7fe fa36 	bl	8012322 <memset>
 8013eb6:	e7f4      	b.n	8013ea2 <_calloc_r+0x16>

08013eb8 <__ascii_mbtowc>:
 8013eb8:	b082      	sub	sp, #8
 8013eba:	b901      	cbnz	r1, 8013ebe <__ascii_mbtowc+0x6>
 8013ebc:	a901      	add	r1, sp, #4
 8013ebe:	b142      	cbz	r2, 8013ed2 <__ascii_mbtowc+0x1a>
 8013ec0:	b14b      	cbz	r3, 8013ed6 <__ascii_mbtowc+0x1e>
 8013ec2:	7813      	ldrb	r3, [r2, #0]
 8013ec4:	600b      	str	r3, [r1, #0]
 8013ec6:	7812      	ldrb	r2, [r2, #0]
 8013ec8:	1e10      	subs	r0, r2, #0
 8013eca:	bf18      	it	ne
 8013ecc:	2001      	movne	r0, #1
 8013ece:	b002      	add	sp, #8
 8013ed0:	4770      	bx	lr
 8013ed2:	4610      	mov	r0, r2
 8013ed4:	e7fb      	b.n	8013ece <__ascii_mbtowc+0x16>
 8013ed6:	f06f 0001 	mvn.w	r0, #1
 8013eda:	e7f8      	b.n	8013ece <__ascii_mbtowc+0x16>

08013edc <__ascii_wctomb>:
 8013edc:	b149      	cbz	r1, 8013ef2 <__ascii_wctomb+0x16>
 8013ede:	2aff      	cmp	r2, #255	; 0xff
 8013ee0:	bf85      	ittet	hi
 8013ee2:	238a      	movhi	r3, #138	; 0x8a
 8013ee4:	6003      	strhi	r3, [r0, #0]
 8013ee6:	700a      	strbls	r2, [r1, #0]
 8013ee8:	f04f 30ff 	movhi.w	r0, #4294967295
 8013eec:	bf98      	it	ls
 8013eee:	2001      	movls	r0, #1
 8013ef0:	4770      	bx	lr
 8013ef2:	4608      	mov	r0, r1
 8013ef4:	4770      	bx	lr
	...

08013ef8 <fiprintf>:
 8013ef8:	b40e      	push	{r1, r2, r3}
 8013efa:	b503      	push	{r0, r1, lr}
 8013efc:	4601      	mov	r1, r0
 8013efe:	ab03      	add	r3, sp, #12
 8013f00:	4805      	ldr	r0, [pc, #20]	; (8013f18 <fiprintf+0x20>)
 8013f02:	f853 2b04 	ldr.w	r2, [r3], #4
 8013f06:	6800      	ldr	r0, [r0, #0]
 8013f08:	9301      	str	r3, [sp, #4]
 8013f0a:	f7ff fd33 	bl	8013974 <_vfiprintf_r>
 8013f0e:	b002      	add	sp, #8
 8013f10:	f85d eb04 	ldr.w	lr, [sp], #4
 8013f14:	b003      	add	sp, #12
 8013f16:	4770      	bx	lr
 8013f18:	2400006c 	.word	0x2400006c

08013f1c <__swhatbuf_r>:
 8013f1c:	b570      	push	{r4, r5, r6, lr}
 8013f1e:	460c      	mov	r4, r1
 8013f20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f24:	2900      	cmp	r1, #0
 8013f26:	b096      	sub	sp, #88	; 0x58
 8013f28:	4615      	mov	r5, r2
 8013f2a:	461e      	mov	r6, r3
 8013f2c:	da0d      	bge.n	8013f4a <__swhatbuf_r+0x2e>
 8013f2e:	89a3      	ldrh	r3, [r4, #12]
 8013f30:	f013 0f80 	tst.w	r3, #128	; 0x80
 8013f34:	f04f 0100 	mov.w	r1, #0
 8013f38:	bf0c      	ite	eq
 8013f3a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8013f3e:	2340      	movne	r3, #64	; 0x40
 8013f40:	2000      	movs	r0, #0
 8013f42:	6031      	str	r1, [r6, #0]
 8013f44:	602b      	str	r3, [r5, #0]
 8013f46:	b016      	add	sp, #88	; 0x58
 8013f48:	bd70      	pop	{r4, r5, r6, pc}
 8013f4a:	466a      	mov	r2, sp
 8013f4c:	f000 f848 	bl	8013fe0 <_fstat_r>
 8013f50:	2800      	cmp	r0, #0
 8013f52:	dbec      	blt.n	8013f2e <__swhatbuf_r+0x12>
 8013f54:	9901      	ldr	r1, [sp, #4]
 8013f56:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8013f5a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8013f5e:	4259      	negs	r1, r3
 8013f60:	4159      	adcs	r1, r3
 8013f62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013f66:	e7eb      	b.n	8013f40 <__swhatbuf_r+0x24>

08013f68 <__smakebuf_r>:
 8013f68:	898b      	ldrh	r3, [r1, #12]
 8013f6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013f6c:	079d      	lsls	r5, r3, #30
 8013f6e:	4606      	mov	r6, r0
 8013f70:	460c      	mov	r4, r1
 8013f72:	d507      	bpl.n	8013f84 <__smakebuf_r+0x1c>
 8013f74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013f78:	6023      	str	r3, [r4, #0]
 8013f7a:	6123      	str	r3, [r4, #16]
 8013f7c:	2301      	movs	r3, #1
 8013f7e:	6163      	str	r3, [r4, #20]
 8013f80:	b002      	add	sp, #8
 8013f82:	bd70      	pop	{r4, r5, r6, pc}
 8013f84:	ab01      	add	r3, sp, #4
 8013f86:	466a      	mov	r2, sp
 8013f88:	f7ff ffc8 	bl	8013f1c <__swhatbuf_r>
 8013f8c:	9900      	ldr	r1, [sp, #0]
 8013f8e:	4605      	mov	r5, r0
 8013f90:	4630      	mov	r0, r6
 8013f92:	f7ff f8bd 	bl	8013110 <_malloc_r>
 8013f96:	b948      	cbnz	r0, 8013fac <__smakebuf_r+0x44>
 8013f98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013f9c:	059a      	lsls	r2, r3, #22
 8013f9e:	d4ef      	bmi.n	8013f80 <__smakebuf_r+0x18>
 8013fa0:	f023 0303 	bic.w	r3, r3, #3
 8013fa4:	f043 0302 	orr.w	r3, r3, #2
 8013fa8:	81a3      	strh	r3, [r4, #12]
 8013faa:	e7e3      	b.n	8013f74 <__smakebuf_r+0xc>
 8013fac:	89a3      	ldrh	r3, [r4, #12]
 8013fae:	6020      	str	r0, [r4, #0]
 8013fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013fb4:	81a3      	strh	r3, [r4, #12]
 8013fb6:	9b00      	ldr	r3, [sp, #0]
 8013fb8:	6163      	str	r3, [r4, #20]
 8013fba:	9b01      	ldr	r3, [sp, #4]
 8013fbc:	6120      	str	r0, [r4, #16]
 8013fbe:	b15b      	cbz	r3, 8013fd8 <__smakebuf_r+0x70>
 8013fc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013fc4:	4630      	mov	r0, r6
 8013fc6:	f000 f81d 	bl	8014004 <_isatty_r>
 8013fca:	b128      	cbz	r0, 8013fd8 <__smakebuf_r+0x70>
 8013fcc:	89a3      	ldrh	r3, [r4, #12]
 8013fce:	f023 0303 	bic.w	r3, r3, #3
 8013fd2:	f043 0301 	orr.w	r3, r3, #1
 8013fd6:	81a3      	strh	r3, [r4, #12]
 8013fd8:	89a3      	ldrh	r3, [r4, #12]
 8013fda:	431d      	orrs	r5, r3
 8013fdc:	81a5      	strh	r5, [r4, #12]
 8013fde:	e7cf      	b.n	8013f80 <__smakebuf_r+0x18>

08013fe0 <_fstat_r>:
 8013fe0:	b538      	push	{r3, r4, r5, lr}
 8013fe2:	4d07      	ldr	r5, [pc, #28]	; (8014000 <_fstat_r+0x20>)
 8013fe4:	2300      	movs	r3, #0
 8013fe6:	4604      	mov	r4, r0
 8013fe8:	4608      	mov	r0, r1
 8013fea:	4611      	mov	r1, r2
 8013fec:	602b      	str	r3, [r5, #0]
 8013fee:	f7ed faa0 	bl	8001532 <_fstat>
 8013ff2:	1c43      	adds	r3, r0, #1
 8013ff4:	d102      	bne.n	8013ffc <_fstat_r+0x1c>
 8013ff6:	682b      	ldr	r3, [r5, #0]
 8013ff8:	b103      	cbz	r3, 8013ffc <_fstat_r+0x1c>
 8013ffa:	6023      	str	r3, [r4, #0]
 8013ffc:	bd38      	pop	{r3, r4, r5, pc}
 8013ffe:	bf00      	nop
 8014000:	24009c5c 	.word	0x24009c5c

08014004 <_isatty_r>:
 8014004:	b538      	push	{r3, r4, r5, lr}
 8014006:	4d06      	ldr	r5, [pc, #24]	; (8014020 <_isatty_r+0x1c>)
 8014008:	2300      	movs	r3, #0
 801400a:	4604      	mov	r4, r0
 801400c:	4608      	mov	r0, r1
 801400e:	602b      	str	r3, [r5, #0]
 8014010:	f7ed fa9f 	bl	8001552 <_isatty>
 8014014:	1c43      	adds	r3, r0, #1
 8014016:	d102      	bne.n	801401e <_isatty_r+0x1a>
 8014018:	682b      	ldr	r3, [r5, #0]
 801401a:	b103      	cbz	r3, 801401e <_isatty_r+0x1a>
 801401c:	6023      	str	r3, [r4, #0]
 801401e:	bd38      	pop	{r3, r4, r5, pc}
 8014020:	24009c5c 	.word	0x24009c5c

08014024 <abort>:
 8014024:	b508      	push	{r3, lr}
 8014026:	2006      	movs	r0, #6
 8014028:	f000 f82c 	bl	8014084 <raise>
 801402c:	2001      	movs	r0, #1
 801402e:	f7ed fa31 	bl	8001494 <_exit>

08014032 <_raise_r>:
 8014032:	291f      	cmp	r1, #31
 8014034:	b538      	push	{r3, r4, r5, lr}
 8014036:	4604      	mov	r4, r0
 8014038:	460d      	mov	r5, r1
 801403a:	d904      	bls.n	8014046 <_raise_r+0x14>
 801403c:	2316      	movs	r3, #22
 801403e:	6003      	str	r3, [r0, #0]
 8014040:	f04f 30ff 	mov.w	r0, #4294967295
 8014044:	bd38      	pop	{r3, r4, r5, pc}
 8014046:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8014048:	b112      	cbz	r2, 8014050 <_raise_r+0x1e>
 801404a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801404e:	b94b      	cbnz	r3, 8014064 <_raise_r+0x32>
 8014050:	4620      	mov	r0, r4
 8014052:	f000 f831 	bl	80140b8 <_getpid_r>
 8014056:	462a      	mov	r2, r5
 8014058:	4601      	mov	r1, r0
 801405a:	4620      	mov	r0, r4
 801405c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014060:	f000 b818 	b.w	8014094 <_kill_r>
 8014064:	2b01      	cmp	r3, #1
 8014066:	d00a      	beq.n	801407e <_raise_r+0x4c>
 8014068:	1c59      	adds	r1, r3, #1
 801406a:	d103      	bne.n	8014074 <_raise_r+0x42>
 801406c:	2316      	movs	r3, #22
 801406e:	6003      	str	r3, [r0, #0]
 8014070:	2001      	movs	r0, #1
 8014072:	e7e7      	b.n	8014044 <_raise_r+0x12>
 8014074:	2400      	movs	r4, #0
 8014076:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801407a:	4628      	mov	r0, r5
 801407c:	4798      	blx	r3
 801407e:	2000      	movs	r0, #0
 8014080:	e7e0      	b.n	8014044 <_raise_r+0x12>
	...

08014084 <raise>:
 8014084:	4b02      	ldr	r3, [pc, #8]	; (8014090 <raise+0xc>)
 8014086:	4601      	mov	r1, r0
 8014088:	6818      	ldr	r0, [r3, #0]
 801408a:	f7ff bfd2 	b.w	8014032 <_raise_r>
 801408e:	bf00      	nop
 8014090:	2400006c 	.word	0x2400006c

08014094 <_kill_r>:
 8014094:	b538      	push	{r3, r4, r5, lr}
 8014096:	4d07      	ldr	r5, [pc, #28]	; (80140b4 <_kill_r+0x20>)
 8014098:	2300      	movs	r3, #0
 801409a:	4604      	mov	r4, r0
 801409c:	4608      	mov	r0, r1
 801409e:	4611      	mov	r1, r2
 80140a0:	602b      	str	r3, [r5, #0]
 80140a2:	f7ed f9e7 	bl	8001474 <_kill>
 80140a6:	1c43      	adds	r3, r0, #1
 80140a8:	d102      	bne.n	80140b0 <_kill_r+0x1c>
 80140aa:	682b      	ldr	r3, [r5, #0]
 80140ac:	b103      	cbz	r3, 80140b0 <_kill_r+0x1c>
 80140ae:	6023      	str	r3, [r4, #0]
 80140b0:	bd38      	pop	{r3, r4, r5, pc}
 80140b2:	bf00      	nop
 80140b4:	24009c5c 	.word	0x24009c5c

080140b8 <_getpid_r>:
 80140b8:	f7ed b9d4 	b.w	8001464 <_getpid>

080140bc <_init>:
 80140bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140be:	bf00      	nop
 80140c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80140c2:	bc08      	pop	{r3}
 80140c4:	469e      	mov	lr, r3
 80140c6:	4770      	bx	lr

080140c8 <_fini>:
 80140c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140ca:	bf00      	nop
 80140cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80140ce:	bc08      	pop	{r3}
 80140d0:	469e      	mov	lr, r3
 80140d2:	4770      	bx	lr
